[
    {
        "question_id": "test-0",
        "question": "What historical geometric real rate of return for corporate bonds does a researcher identify?",
        "tables": [
            "| Asset Class    | Geometric Return(%) |\n| -------------- | ------------------- |\n| Equities       | 8.0                 |\n| Corporate Bonds| 6.5                 |\n| Treasury bills | 2.5                 |\n| Inflation      | 2.1                 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here is the Python program to calculate the historical geometric real rate of return for corporate bonds:\n\n```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    inflation_rate = 2.1\n    \n    # Calculate the real return using the formula (1 + nominal return) / (1 + inflation rate) - 1\n    # Convert percentages to decimals for calculation\n    real_return = ((1 + corporate_bonds_return / 100) / (1 + inflation_rate / 100)) - 1\n    \n    # Convert the real return back to percentage\n    real_return_percentage = real_return * 100\n    \n    # return answer\n    return real_return_percentage\n\n# The following line calls the solution function and prints the answer\nprint(solution())\n```\n\nWhen you run this program, it will calculate and return the historical geometric real rate of return for corporate bonds after adjusting for inflation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-1",
        "question": "With the given US Treasury forward rates, what's the value of a 2.5-year $100 face value Treasury bond with a 5% interest rate?",
        "tables": [
            "| Period | Years | Forward Rate |\n|--------|-------|--------------|\n| 1      | 0.5   | 1.20%        |\n| 2      | 1     | 1.80%        |\n| 3      | 1.5   | 2.30%        |\n| 4      | 2     | 2.70%        |\n| 5      | 2.5   | 3.00%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    interest_rate = 0.05  # 5% interest rate\n    forward_rates = [0.012, 0.018, 0.023, 0.027, 0.03]  # forward rates for each period\n\n    # Calculate the present value of the bond interest payments\n    interest_payment = face_value * interest_rate\n    pv_interest_payments = sum(interest_payment / ((1 + forward_rates[i]) ** ((i + 1) * 0.5)) \n                               for i in range(len(forward_rates)))\n\n    # Calculate the present value of the face value (paid at maturity)\n    pv_face_value = face_value / ((1 + forward_rates[-1]) ** (len(forward_rates) * 0.5))\n\n    # Calculate the total present value of the bond\n    bond_value = pv_interest_payments + pv_face_value\n\n    # Return answer rounded to two decimal places\n    return round(bond_value, 2)\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the forward rates and the characteristics of the Treasury bond (face value and interest rate), calculates the present value of the interest payments and the face value at maturity, adds them up to find the total present value of the bond, and returns this value, which is the bond's value today, rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-2",
        "question": "Assuming U.S. GAAP is in effect unless stated otherwise, imagine a highly profitable company, Alpha Enterprises, acquired a new asset for $1,000,000 on January 1, 2002. How does the asset acquisition impact Alpha Enterprises' deferred tax liability for 2002 given the following conditions for the asset: for financial statements purposes, straight-line depreciation over 10 years with no salvage value; for tax purposes, the asset is classified under three-year MACRS depreciation with the first year MACRS factor being 0.333, and the tax rate stands at 40%?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_cost = 1000000\n    useful_life_financial = 10\n    macrs_factor_first_year = 0.333\n    tax_rate = 0.40\n    \n    # Do math calculation to get the answer\n    # Calculate straight-line depreciation for financial statements\n    straight_line_depreciation_financial = asset_cost / useful_life_financial\n    \n    # Calculate MACRS depreciation for tax purposes\n    macrs_depreciation_tax = asset_cost * macrs_factor_first_year\n    \n    # Calculate the difference between financial statement depreciation and tax depreciation\n    depreciation_difference = macrs_depreciation_tax - straight_line_depreciation_financial\n    \n    # Calculate the impact on deferred tax liability\n    deferred_tax_liability = depreciation_difference * tax_rate\n    \n    # return answer\n    return deferred_tax_liability\n\n# Call the function and print the answer\nprint(solution())\n```\n\nBy running this program, you will get the result of how the asset acquisition impacts Alpha Enterprises' deferred tax liability for 2002 under the given conditions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-3",
        "question": "If the average P/E of 30 shares in a particular manufacturing sector is 18 and the sample standard deviation is 3.5, what is the standard error of the mean closest to?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program to calculate the standard error of the mean based on the values provided:\n\n```python\nfrom math import sqrt\n\ndef solution():\n    # Define variables name and value\n    sample_size = 30\n    std_deviation = 3.5\n    \n    # Do math calculation to get the answer\n    standard_error = std_deviation / sqrt(sample_size)\n    \n    # return answer\n    return round(standard_error, 2)  # rounded to match the \"closest to\" requirement\n\n# call the solution function and print the result\nprint(solution())\n```\n\nThis program calculates the standard error of the mean using the provided sample standard deviation and the number of shares in the sample (which is 30). The result is then rounded to the second decimal place to approximate the \"closest to\" criteria mentioned in the question."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-4",
        "question": "Suppose there are two stocks, X and Y. If their annual returns are jointly normally distributed, the marginal distribution of each stock has a mean of 2% and a standard deviation of 10%, and the correlation is 0.9, can you tell me the expected annual return of stock X if the annual return of stock Y is 3%?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this problem, we can use the concept of conditional expectation from bivariate normal distributions. If we have two normally distributed random variables X and Y with a known correlation, the expected value of X given Y (E[X|Y]) can be computed as follows:\n\nE[X|Y=y] = μX + ρσX/σY * (y - μY)\n\nWhere:\n- μX is the mean of X\n- μY is the mean of Y\n- σX is the standard deviation of X\n- σY is the standard deviation of Y\n- ρ is the correlation coefficient between X and Y\n- y is the given value of Y\n\nIn this case:\n- μX = μY = 2% (mean of both stocks)\n- σX = σY = 10% (standard deviation of both stocks)\n- ρ = 0.9 (correlation coefficient)\n- y = 3% (given annual return of stock Y)\n\nNow, let's write the Python program to compute the answer based on the given values:\n\n```python\ndef solution():\n    # Define variables name and value\n    muX = 2.0\n    muY = 2.0\n    sigmaX = 10.0\n    sigmaY = 10.0\n    rho = 0.9\n    Y = 3.0\n    \n    # Do math calculation to get the expected return of stock X given Y = 3%\n    expected_X_given_Y = muX + rho * (sigmaX / sigmaY) * (Y - muY)\n    \n    # Return answer\n    return expected_X_given_Y\n\n# To see the answer printed out (for testing purposes), uncomment the line below:\n# print(solution())\n```\n\nThis function calculates the expected annual return of stock X given that the annual return of stock Y is 3%."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-5",
        "question": "Let's consider that U.S. GAAP is applicable unless stated differently. A research analyst has collected this data from a corporation's financial statements for the year 2005 (in millions of dollars): The firm announced and distributed cash dividends worth $10 million in 2005 and accounted for a depreciation cost of $25 million for the same year. What was the corporation's cash flow from operations, in millions, for 2005?",
        "tables": [
            "| Balances as of year ended 31 December | 2004 | 2005 |\n| ------------------------------------- | ---- | ---- |\n| Retained earnings                     | 120  | 145  |\n| Accounts receivable                   | 38   | 43   |\n| Inventory                             | 45   | 48   |\n| Accounts payable                      | 36   | 29   |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the corporation's cash flow from operations for the year 2005, we can start with the change in retained earnings and then adjust for non-cash charges like depreciation and changes in working capital components (accounts receivable, inventory, and accounts payable). The cash dividends paid are already reflected in the change in retained earnings, so we do not have to adjust for them separately.\n\nWe will follow these steps:\n1. Calculate the change in retained earnings from 2004 to 2005.\n2. Add Depreciation cost back to net income since it is a non-cash expense.\n3. Calculate the changes in accounts receivable, inventory, and accounts payable from 2004 to 2005.\n4. Adjust the net income by subtracting the increase in accounts receivable and inventory and adding the decrease in accounts payable, as these represent changes in cash.\n\nHere is a Python program that performs these calculations:\n\n```python\ndef solution():\n    # Step 1: Define variables name and value\n    retained_earnings_2004 = 120\n    retained_earnings_2005 = 145\n    depreciation = 25\n    accounts_receivable_2004 = 38\n    accounts_receivable_2005 = 43\n    inventory_2004 = 45\n    inventory_2005 = 48\n    accounts_payable_2004 = 36\n    accounts_payable_2005 = 29\n\n    # Step 2: Calculate the change in retained earnings\n    change_in_retained_earnings = retained_earnings_2005 - retained_earnings_2004\n\n    # Step 3: Adjust for non-cash charge (depreciation)\n    net_income = change_in_retained_earnings + depreciation\n\n    # Step 4: Calculate changes in working capital accounts\n    change_in_accounts_receivable = accounts_receivable_2005 - accounts_receivable_2004\n    change_in_inventory = inventory_2005 - inventory_2004\n    change_in_accounts_payable = accounts_payable_2005 - accounts_payable_2004\n\n    # Step 5: Adjust net income for changes in working capital\n    cash_flow_from_operations = (net_income\n                                 - change_in_accounts_receivable\n                                 - change_in_inventory\n                                 + change_in_accounts_payable)\n\n    # return answer\n    return cash_flow_from_operations\n\n# Call the function and print the answer\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print out the corporation's cash flow from operations for the year 2005 based on the data provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-6",
        "question": "In early 2009, Steel Production procured a new assembly line equipment for $600,000. The equipment is anticipated to have a useful life of 10 years and an estimated salvage value of $50,000. What amount of depreciation would Steel Production record in 2009 for financial statements using the double-declining balance method?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program to calculate the depreciation for the year 2009 using the double-declining balance method.\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    salvage_value = 50000\n    useful_life = 10\n    \n    # Calculate the straight-line depreciation rate\n    straight_line_rate = 1 / useful_life\n    \n    # Calculate the double-declining balance depreciation rate\n    double_declining_rate = straight_line_rate * 2\n    \n    # First year depreciation using double-declining balance method\n    depreciation_2009 = double_declining_rate * acquisition_cost\n    \n    # return the first year depreciation\n    return depreciation_2009\n\n# You can print the result to check the output\nprint(solution())\n```\n\nWhen you run this function, it will perform the calculations and return the value of the depreciation for Steel Production's new assembly line equipment in the year 2009 using the double-declining balance method."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-7",
        "question": "What is the quick ratio for Company B as per the common-size balance sheets displayed in Exhibit 1 for Company A, Company B, and the Sector Average?",
        "tables": [
            "| ASSETS                         |         | Company A | Company B | Sector Average |\n|--------------------------------|---------|-----------|-----------|----------------|\n| Current assets                 |         |           |           |                |\n| Cash and cash equivalents      |         | 5         | 7         |                |\n| Marketable securities          |         | 0         | 2         |                |\n| Accounts receivable, net       |         | 15        | 12        |                |\n| Inventories                    |         | 20        | 16        |                |\n| Prepaid expenses               |         | 15        | 11        |                |\n| Total current assets           |         | 55        | 48        |                |\n| Property, plant, and equipment | net     | 35        | 37        |                |\n| Goodwill                       |         | 0         | 8         |                |\n| Other assets                   |         | 10        | 7         |                |\n| Total assets                   | 100     | 100       | 100       | 100            |\n|--------------------------------|---------|-----------|-----------|----------------|\n| LIABILITIES AND SHAREHOLDERS' EQUITY | | | | |\n| Current liabilities                 |   | | | |\n| Accounts payable                    |   | 10 | 10 | 10 |\n| Short-term debt                     |   | 25 | 10 | 15 |\n| Accrued expenses                    |   | 5  | 3  |    |\n| Total current liabilities           |   | 35 | 25 | 28 |\n| Long-term debt                      |   | 45 | 20 | 28 |\n| Other non-current liabilities       |   | 0  | 10 | 7  |\n| Total liabilities                   |   | 80 | 55 | 63 |\n| Total shareholders' equity          |   | 20 | 45 | 37 |\n| Total liabilities and shareholders' equity | | 100 | 100 | 100 |"
        ],
        "topic": "Accounting",
        "output": [
            "The quick ratio (also known as the acid-test ratio) is a measure of the ability of a company to pay its current liabilities without relying on the sale of inventory. It is calculated as:\n\nQuick Ratio = (Cash and Cash Equivalents + Marketable Securities + Accounts Receivable) / Current Liabilities\n\nUsing the data from the table for Company B, we can calculate the quick ratio. Here is the Python program:\n\n```python\ndef solution():\n    # Define variables for Company B\n    cash_and_cash_equivalents = 7\n    marketable_securities = 2\n    accounts_receivable_net = 12\n    total_current_liabilities = 25  # From \"Total current liabilities\" for Company B\n    \n    # Calculate the quick ratio\n    quick_assets = cash_and_cash_equivalents + marketable_securities + accounts_receivable_net\n    quick_ratio = quick_assets / total_current_liabilities\n    \n    # return answer\n    return quick_ratio\n\n# To see the quick ratio for Company B\nprint(solution())\n```\n\nRunning this program should provide you with the quick ratio for Company B."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-8",
        "question": "At the start of the year, the portfolio of Frontier Investment Group, a hedge fund, was valued at $475,000,000. A year later, the value of assets under management has grown to $541,500,000. The hedge fund imposes a 1.5% management fee based on the portfolio value at the end of the year and a 10% incentive fee. If these two fees are calculated separately, what would be the effective return for an investor in this hedge fund?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    start_value = 475000000\n    end_value = 541500000\n    management_fee_rate = 0.015\n    incentive_fee_rate = 0.10\n\n    # Calculate the profits\n    profit = end_value - start_value\n    \n    # Calculate fees\n    management_fee = end_value * management_fee_rate\n    incentive_fee = profit * incentive_fee_rate\n    \n    # Calculate the net profit after fees\n    net_profit = profit - management_fee - incentive_fee\n    \n    # Calculate the effective return for an investor\n    effective_return = (start_value + net_profit) / start_value - 1\n    \n    # return answer\n    return effective_return\n    \n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-9",
        "question": "What does an analyst project as the expected return on equity for a corporation using the Bond yield plus risk premium approach, given a yield on the corporation's bonds at 4.3% and a 6.1% historical risk premium obtained by equity investors compared to long-term corporate bond yields?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 4.3\n    risk_premium = 6.1\n    \n    # Do math calculation to get the expected return on equity\n    expected_return_on_equity = bond_yield + risk_premium\n    \n    # return answer\n    return expected_return_on_equity\n    \n# You can call the function to check the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-10",
        "question": "A specialist generates the subsequent joint probability function for an international index (FI) and a local index (DI). What is the covariance of returns on the international index and the returns on the local index?",
        "tables": [
            "|         | RDI=30% | RDI=25% | RDI=15% |\n|---------|---------|---------|---------|\n| RFI=25% | 0.25    |         |         |\n| RFI=15% |         | 0.5     |         |\n| RFI=10% |         |         | 0.25    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Joint probabilities\n    probabilities = {\n        (0.25, 0.30): 0.25,  # Probability when RDI=30% and RFI=25%\n        (0.25, 0.25): 0,  # No joint probability given for RDI=25% and RFI=25%\n        (0.25, 0.15): 0,  # No joint probability given for RDI=15% and RFI=25%\n        (0.15, 0.30): 0,  # No joint probability given for RDI=30% and RFI=15%\n        (0.15, 0.25): 0.5,  # Probability when RDI=25% and RFI=15%\n        (0.15, 0.15): 0,  # No joint probability given for RDI=15% and RFI=15%\n        (0.10, 0.30): 0,  # No joint probability given for RDI=30% and RFI=10%\n        (0.10, 0.25): 0,  # No joint probability given for RDI=25% and RFI=10%\n        (0.10, 0.15): 0.25,  # Probability when RDI=15% and RFI=10%\n    }\n\n    # Expected returns for FI and DI\n    expected_rfi = sum(rfi * prob for (rfi, rdi), prob in probabilities.items())\n    expected_rdi = sum(rdi * prob for (rfi, rdi), prob in probabilities.items())\n\n    # Calculate covariance\n    covariance = sum((rfi - expected_rfi) * (rdi - expected_rdi) * prob\n                     for (rfi, rdi), prob in probabilities.items())\n\n    # return answer\n    return covariance\n\n# Call the function and print its return value\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-11",
        "question": "If MARIO S.A., a corporation based in Uruguay, uses the straight-line method, then how much is the depreciation expense on their income statement related to the manufacturing equipment, considering that Carlos Lopez from the company is calculating it for the fiscal year ended 31 December 2009? The equipment was obtained on 1 January 2009, and Lopez has gathered the following data (currency in Uruguayan pesos, UYP).",
        "tables": [
            "| Cost of the equipment | UYP 1,200,000       |\n|----------------------|---------------------|\n| Estimated residual value | UYP 200,000      |\n| Expected useful life | 8 years             |\n| Total productive capacity| 800,000 units    |\n| Production in FY 2009 | 135,000 units      | \n| Expected production for the next 7 years | 95,000 units each |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 1200000\n    estimated_residual_value = 200000\n    estimated_useful_life = 8  # years\n    \n    # Do math calculation to get the answer\n    # Using straight-line depreciation method\n    annual_depreciation_expense = (cost_of_equipment - estimated_residual_value) / estimated_useful_life\n    \n    # Since the equipment was obtained on 1 January 2009 and the fiscal year ended on 31 December 2009,\n    # the depreciation expense for FY 2009 would be the full annual amount.\n    \n    # return answer\n    return annual_depreciation_expense\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program will calculate the annual depreciation expense on the equipment for the fiscal year ended 31 December 2009 using the straight-line method."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-12",
        "question": "Using the balance sheet as of 31 December 2017, Pierre thinks that an asset-based assessment is suitable for Oak. Based on the extra presumption that other assets and liabilities on the balance sheet, what is the asset-based valuation of Oak?",
        "tables": [
            "|                                      |            |\n|--------------------------------------|------------|\n| **Wood Balance Sheet 2017**          |            |\n| **Assets**                           |            |\n| Cash                                 | $650,000   |\n| Inventory                            | 27,000     |\n| Accounts receivable                  | 25,000     |\n| Plant and equipment (cost less depreciation) | 300,000 |\n| TimberLand                           | 8,086,000  |\n| **Total assets**                     | $9,088,000 |\n| Accounts payables                    | $ 88,000   |\n| Long-term bank loan                  | 2,500,000  |\n| Common stock                         | 6,500,000  |\n| **Total liabilities and equity**     | $9,088,000 |\n| TimberLand (market value)            | 50,000,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, here's a Python program that calculates the asset-based valuation of Oak wood balance sheet:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash = 650000\n    inventory = 27000\n    accounts_receivable = 25000\n    plant_and_equipment = 300000\n    timberland_market_value = 50000000\n    accounts_payable = 88000\n    long_term_bank_loan = 2500000\n    common_stock = 6500000\n    \n    # Since TimberLand market value is given separately, we use it instead of the book value\n    # Do math calculation to get the answer\n    total_assets_market_value = cash + inventory + accounts_receivable + plant_and_equipment + timberland_market_value\n    total_liabilities = accounts_payable + long_term_bank_loan + common_stock\n    \n    # Calculate the asset-based valuation as total assets minus total liabilities\n    asset_based_valuation = total_assets_market_value - total_liabilities\n    \n    # return answer\n    return asset_based_valuation\n    \n# Call the function and print the result\nprint(solution())\n```\nThis function calculates the asset-based valuation by summing up all the assets (using the market value for timberland) and subtracting the total liabilities."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-13",
        "question": "A bond that has 5 years left until it matures is presently being traded for 101 for every 100 of par value. It provides a coupon rate of 6%, with interest being paid every six months. Considering that the bond can be first called in 3 years, and can be called following that date on interest payment dates per the provided schedule, what is the bond's yearly yield-to-first-call?",
        "tables": [
            "| End of Year | Call Price |\n|-------------|------------|\n| 3           | 102        |\n| 4           | 101        |\n| 5           | 100        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the yield-to-first-call (YTC), we need to take into account the present value of the expected cash flows up until the bond's first call date. The bond can be called at the end of year 3, for which the call price is given as 102. The bond is purchased at 101% of its par value. The coupon rate is 6%, and it pays semiannually which means it pays 3% every six months.\n\nThe cash flow from the bond will be:\n\nC = (Par value * coupon rate) / 2\n\nSince the bond can be first called at year 3, we will have to find the present value of the coupon payments for the six periods (3 years times two payments per year) plus the present value of the call price.\n\nThe formula for the present value of an annuity (which coupon payments are an example of) is:\n\nPV = C * [(1 - (1 + r)^-n) / r]\n\nwhere:\nPV = Present Value of the annuity\nC = Cash flow per period\nr = Periodic interest rate (YTC / 2 since we're dealing with semiannual payments)\nn = Total number of periods\n\nAdditionally, we have to calculate the present value of the call price using the formula:\n\nPV(call price) = Call price / (1 + r)^n\n\nSince the YTC is the rate that equates the bond's market price to the present value of its expected cash flows up until the call date, we need to find the rate that satisfies the equation:\n\n101% of Par = PV(coupon payment annuity for 3 years) + PV(call price)\n\nThis is a trial and error process unless you are using a financial calculator or programming a root-finding algorithm.\n\nLet's set up the Python function to perform these calculations:\n\n```python\nfrom scipy.optimize import fsolve\n\ndef present_value_annuity(cash_flow, rate, periods):\n    return cash_flow * ((1 - (1 + rate) ** -periods) / rate)\n\ndef present_value_lump_sum(amount, rate, periods):\n    return amount / (1 + rate) ** periods\n\ndef equation_to_solve(ytc, call_price, market_price, coupon_rate, par_value, periods):\n    semi_annual_rate = ytc / 2\n    cash_flow = (coupon_rate * par_value) / 2\n    annuity_pv = present_value_annuity(cash_flow, semi_annual_rate, periods)\n    call_price_pv = present_value_lump_sum(call_price, semi_annual_rate, periods)\n    total_pv = annuity_pv + call_price_pv\n    return total_pv - market_price\n\ndef solution():\n    # Define variables\n    market_price = 101  # 101% of the par value, which we assume is $100\n    par_value = 100\n    call_price = 102\n    coupon_rate = 0.06  # 6% annual coupon\n    periods = 3 * 2  # 3 years, compounding semi-annually\n    initial_guess = 0.06  # Start with a guess of the coupon rate for yield\n    \n    # Define a function to equate to zero\n    def objective_function(ytc):\n        return equation_to_solve(ytc, call_price, market_price, coupon_rate, par_value, periods)\n    \n    # Calculate the yield to call\n    ytc_solution = fsolve(objective_function, initial_guess)[0]\n    \n    # Since fsolve returns a semiannual yield, we multiply by 2 for the annual yield to first call\n    return ytc_solution * 2\n\n# Example usage\nyield_to_first_call = solution()\nprint(f\"The bond's yearly yield-to-first-call is: {yield_to_first_call:.2f}%\")\n```\n\nThis Python function calculates the yield to the first call using the fsolve function to find the rate that sets the present value of the bond's cash flows equal to its market price. The initial guess is set to the coupon rate, but this could be adjusted based on current market conditions. Note that `fsolve` comes from SciPy, a common Python library used for scientific computing. If this library were not available, you may need to implement your root-finding algorithm."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-14",
        "question": "If Corporation A disclosed a salary expenditure of $30 million and wage payable rose by $2 million, how much money was actually disbursed to workers?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    salary_expenditure = 30000000\n    wage_payable_increase = 2000000\n    \n    # Do math calculation to get the answer\n    actual_disbursed_salary = salary_expenditure - wage_payable_increase\n    \n    # return answer\n    return actual_disbursed_salary\n    \nprint(solution()) # to check the function output\n```\nWhen calculating the actual money disbursed to workers, we need to consider that the wage payable increased. This increase implies that not all of the salary expenditure was paid out during the period; instead, there's an additional $2 million in wage payable. Therefore, we subtract this amount from the salary expenditures to find the actual cash paid to workers."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-15",
        "question": "Peterson Energy Inc, a US-based, publicly traded energy firm, recently stated its plans to acquire Heartland Energy Inc, a smaller energy company based in the US. The offer from Peterson values Heartland at an enterprise worth of USD40.6 billion, which includes USD4.3 billion of existing Heartland debt. In order to finance the consideration of USD55 in cash along with 2.25 Peterson shares for each Heartland share, Peterson intends to issue 104 million new shares and will raise approximately USD26 billion in new debt, with the remaining being funded by cash on hand. Once the deal has closed, Peterson anticipates having an outstanding debt of nearly USD62 billion. Before the acquisition, Peterson had 1.096 billion shares in circulation, each trading at USD125. With the assumption of a constant share price and the book value of debt being equal to its market value, Jackson plans to ascertain the change in the proportions of debt and equity in Peterson’s capital structure following",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here is the Python program to calculate the change in the proportions of debt and equity in Peterson's capital structure following the acquisition:\n\n```python\ndef solution():\n    # Before acquisition\n    existing_shares = 1.096  # in billion\n    share_price_before = 125  # USD\n    existing_debt = 4.3  # in billion USD\n    existing_equity_value = existing_shares * share_price_before  # in billion USD\n    \n    # Acquisition details\n    new_debt_issued = 26  # in billion USD\n    cash_used = 40.6 - new_debt_issued - existing_debt  # in billion USD\n    # No need to use cash_used variable in further calculations if not used in debt or equity calculation down the line\n    new_shares_issued = 104  # in million\n    new_shares_in_billion = new_shares_issued / 1000  # convert to billion\n    \n    # After acquisition\n    total_debt_after = 62  # in billion USD\n    total_shares_after = existing_shares + new_shares_in_billion\n    equity_value_after = total_shares_after * share_price_before  # in billion USD\n    \n    # Proportions after acquisition\n    total_value_after = equity_value_after + total_debt_after  # in billion USD\n    debt_proportion_after = total_debt_after / total_value_after\n    equity_proportion_after = equity_value_after / total_value_after\n    \n    # Change in proportions\n    original_debt_proportion = existing_debt / (existing_equity_value + existing_debt)\n    change_in_debt_proportion = debt_proportion_after - original_debt_proportion\n    \n    original_equity_proportion = existing_equity_value / (existing_equity_value + existing_debt)\n    change_in_equity_proportion = equity_proportion_after - original_equity_proportion\n    \n    # Return answer\n    return change_in_debt_proportion, change_in_equity_proportion\n\n# Since the question only asks for the change in proportions,\n# the solution function returns the change in debt and equity proportions.\n```\n\nPlease note that the code assumes the entire difference between the acquisition's enterprise value and new debt raised, excluding existing debt, is covered by cash on hand. If any additional details regarding the allocation of cash and shares for the consideration are provided, the code might require adjustments to the `cash_used` calculation and further considerations."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-16",
        "question": "Given the performance metrics for a different investment option: Let's assume that the highest drawdown risk remains constant at 10.2% for every time interval. Also, suppose that the mean drawdown risk is unchanging at 6.8% for every time interval. Based on the data given, compute the Calmar ratio in the usual manner. What is the resulting Calmar ratio?",
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables names and values\n    annual_performance = 5.3  # This is the annual performance\n    max_drawdown_risk = 10.2  # Maximum drawdown risk is constant across time intervals\n    \n    # Calculate the Calmar ratio\n    calmar_ratio = annual_performance / max_drawdown_risk\n    \n    # Return answer\n    return calmar_ratio\n\n# If the function needs to be called manually uncomment the next line\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-17",
        "question": "Given the above probability matrix, what is the covariance of returns on Portfolio X and Portfolio Y?",
        "tables": [
            "| Returns | RB=50% | RB=20% | RB=-30% |\n|---------|--------|--------|---------|\n| RA=-10% | 0.4    | 0      | 0       |\n| RA=10%  | 0      | 0.3    | 0       |\n| RA=30%  | 0      | 0      | 0.3     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program that calculates the covariance of returns on Portfolio X (RA) and Portfolio Y (RB) using the provided probability matrix:\n\n```python\ndef solution():\n    # Define variables\n    # Given probability matrix and outcomes for RA and RB\n    probabilities = {\n        (-10, 50): 0.4,\n        (-10, 20): 0,\n        (-10, -30): 0,\n        (10, 50): 0,\n        (10, 20): 0.3,\n        (10, -30): 0,\n        (30, 50): 0,\n        (30, 20): 0,\n        (30, -30): 0.3\n    }\n    \n    # Calculate the expected returns for RA and RB\n    expected_ra = sum(ra * p for (ra, rb), p in probabilities.items())\n    expected_rb = sum(rb * p for (ra, rb), p in probabilities.items())\n    \n    # Calculate covariance\n    covariance = sum(\n        (ra - expected_ra) * (rb - expected_rb) * p\n        for (ra, rb), p in probabilities.items()\n    )\n    \n    return covariance\n    \n# Run the function to get the answer\nprint(solution())\n```\n\nThis program starts by defining the variables and the probability matrix based on the information provided. It then computes the expected returns for both Portfolio X (RA) and Portfolio Y (RB). After that, it determines the covariance by summing the product of the deviations of RA and RB from their expected values, multiplied by their probability. The result will be the answer to the covariance between the two portfolios."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-18",
        "question": "If Fairfield Inc. intends to borrow sufficient funds to buy back 100,000 stocks, what would be Fairfield’s earnings per share following the repurchase, with the following data related to the share buyback: Shares outstanding before buyback 3.1 million, Earnings per share before buyback US$4.00, Share price at the time of buyback US$50, and After-tax cost of borrowing 6%?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    shares_outstanding_before = 3100000\n    earnings_per_share_before = 4.00\n    share_buyback_price = 50\n    after_tax_borrowing_cost = 0.06\n    \n    # Total earnings\n    total_earnings = shares_outstanding_before * earnings_per_share_before\n    \n    # Number of shares to buy back\n    num_shares_buyback = 100000\n    \n    # Shares outstanding after buyback\n    shares_outstanding_after = shares_outstanding_before - num_shares_buyback\n    \n    # Cost of the buyback in dollars (share buyback price * number of shares)\n    cost_of_buyback = share_buyback_price * num_shares_buyback\n    \n    # Annual cost of borrowing for the buyback\n    borrowing_cost_annual = cost_of_buyback * after_tax_borrowing_cost\n    \n    # Earnings after buyback (total earnings - borrowing cost)\n    earnings_after_buyback = total_earnings - borrowing_cost_annual\n    \n    # Earnings per share after buyback\n    earnings_per_share_after = earnings_after_buyback / shares_outstanding_after\n    \n    # return answer\n    return round(earnings_per_share_after, 2)\n\n# Call the function to verify the output\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-19",
        "question": "Pinho instructs Martins to utilize a valuation metric to facilitate a comprehensive evaluation of the relative share value of the three corporations. The essential financial data for these businesses are shown in Exhibit 1. For Adesivo, Martins examines the base trailing EPS. With a basic trailing EPS of R$0.84, he found a note in the financial reports of Adesivo stating that“On a per share basis, Adesivo incurred in the last four quartersi. from a lawsuit, a non-recurring gain of R$0.04; andii. Based on Exhibit 1 and Adesivo’s financial reports, what is the trailing P/E for Adesivo using the base EPS?",
        "tables": [
            "|      | Adesivo | Enviado | Gesticular |\n|------|---------|---------|------------|\n| Stock's current price | 14.72 | 72.20 | 132.16 |\n| Diluted EPS (last four quarters) | 0.81 | 2.92 | -0.05 |\n| Diluted EPS (next four quarters) | 0.91 | 3.10 | 2.85 |\n| Dividend rate (annualized most recent dividend) | 0.44 | 1.24 | 0.00 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given data\n    stock_price_adesivo = 14.72\n    basic_trailing_EPS = 0.84\n    non_recurring_gain_per_share = 0.04\n    \n    # Adjusted EPS after removing non-recurring items\n    adjusted_EPS = basic_trailing_EPS - non_recurring_gain_per_share\n    \n    # Trailing P/E calculation using the adjusted EPS\n    trailing_PE = stock_price_adesivo / adjusted_EPS\n    \n    # Return the trailing P/E ratio for Adesivo\n    return trailing_PE\n\n# Run the function and print the result\nprint(f\"Trailing P/E for Adesivo: {solution()}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-20",
        "question": "An investor bought 200 stocks of a company that doesn't pay dividends on margin for a price of $50 each. The leverage ratio stands at 2.5. Half a year later, the investor offloads these stocks at $60 apiece. Disregarding the interest accrued on the borrowed sum and the transaction costs, what was the investor's return over the half-year period?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_stock_price = 50  # initial purchase price per stock\n    final_stock_price = 60  # final sale price per stock\n    number_of_stocks = 200  # number of stocks purchased\n    leverage_ratio = 2.5  # leverage ratio\n\n    # Initial investment by the investor is only a fraction of the total value due to leverage\n    initial_investment = (initial_stock_price * number_of_stocks) / leverage_ratio\n    # Calculate the total sale amount when offloading the stocks\n    final_sale_amount = final_stock_price * number_of_stocks\n    # Calculate the investor's profit\n    profit = final_sale_amount - (initial_stock_price * number_of_stocks)\n    # Calculate the return on the initial investment\n    investor_return = (profit / initial_investment) * 100\n\n    # return answer\n    return investor_return\n\n# Calling the solution function and printing the result\nprint(f\"The investor's return over the half-year period is: {solution():.2f}%\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-21",
        "question": "John is assessing the value of Corporation Z using the single-stage residual income model and has compiled pertinent data in the listed table. What is the justified price-to-book ratio for Corporation Z?",
        "tables": [
            "|   |   |\n|---|---|\n| BVPS  | $28.25  |\n| ROE  | 14.5%  |\n| Constant long-term growth  | 5.5%  |\n| Cost of equity  | 10.9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bvps = 28.25  # Book value per share\n    roe = 0.145  # Return on equity\n    g = 0.055  # Constant long-term growth rate\n    ke = 0.109  # Cost of equity\n    \n    # Do math calculation to get the answer\n    # Single-stage residual income model to calculate intrinsic value\n    # V0 = BV0 + (ROE - g) * BV0 / (k - g), where V0 = intrinsic value, BV0 = current book value\n    intrinsic_value = bvps + (roe - g) * bvps / (ke - g)\n    \n    # Calculating justified price-to-book ratio, P/B = V0 / BV0\n    justified_pb_ratio = intrinsic_value / bvps\n    \n    # return answer\n    return justified_pb_ratio\n\n# Run the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-22",
        "question": "An employee at a capital management firm, Jonathan, is given the task to determine the gain in 6 months on a transaction of $2,000,000 vega notional of a one-year variance swap on the S&P 500 at a 20% strike (expressed as annual volatility). After a period of six months, the S&P 500 shows a realized volatility of 16%, while the fair strike of a fresh 6-month variance swap on the S&P 500 is now 18%. The yearly interest rate is 2.00%. What is the updated value of the variance swap?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    import numpy as np\n\n    # Define variables name and value\n    vega_notional = 2000000  # Vega notional of the variance swap\n    original_strike = 0.20  # Original strike (expressed as decimal)\n    realized_vol = 0.16  # Realized volatility after 6 months (expressed as decimal)\n    new_strike = 0.18  # New strike for the next 6-month period (expressed as decimal)\n    interest_rate = 0.02  # Yearly interest rate (expressed as decimal)\n    days_in_year = 365  # Number of days in a year\n\n    # Calculate the annualized variance from the original and new strike\n    original_variance = original_strike**2\n    new_variance = new_strike**2\n\n    # Calculate the realized variance for the 6 months\n    realized_variance = realized_vol**2\n\n    # The gain on the swap will be based on the difference between realized variance\n    # and the original variance, accrued over 6 months, and then adjusted by the new fair strike\n    gain = (realized_variance - original_variance) * (vega_notional / 2) - (new_variance - original_variance) * (vega_notional / 2)\n\n    # We need to bring the gain back to its present value, because the gain/loss is settled at the end of the year.\n    # We discount the gain over the remaining 6 months at the given interest rate.\n    discount_factor = np.exp(-interest_rate/2)\n    present_value_gain = gain * discount_factor\n\n    return present_value_gain\n\n# Call the function and print the result\nprint(f\"The updated value of the variance swap is: ${solution():.2f}\")\n```\n\nNote: In this solution, we've calculated the gain on the variance swap by comparing the realized variance with the original variance for the expired half of the year and then adjusted it for the remaining 6 months using the new strike price. We then discount this gain back to its present value to reflect the time value of money. This is a simplified approach and does not consider all the complexities that might be present in a real-world scenario."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-23",
        "question": "If a four-factor market model is being used for the return process of 100 companies, then what is the number of parameters that need to be estimated?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_companies = 100\n    num_factors = 4\n    \n    # Do math calculation to get the answer\n    # Each company will have a parameter for each of the 4 factors (the betas)\n    # and one parameter for the specific error term (alpha). \n    parameters_per_company = num_factors + 1\n    total_parameters = num_companies * parameters_per_company\n    \n    # return answer\n    return total_parameters\n\n# The output of the function will be the total number of parameters that need to be estimated\nprint(solution())  # To test the function\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-24",
        "question": "A significant purchase has just been declared, aiming at corporation Y. The proposal from corporation X features an exchange offer with a ratio of 2. Directly following the declaration, corporation X and Y's prices are at $50 and $90, respectively. A hedge fund opts to take a long position in corporation Y, hedged with shares from X. Following the completion of the acquisition, the prices shift to $60 and $120. Therefore, the profit for each share from corporation Y is",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's the Python program that calculates the profit per share from corporation Y, taking into account the details provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_y_price = 90   # initial price of corporation Y\n    initial_x_price = 50   # initial price of corporation X\n    final_y_price = 120    # price of corporation Y after acquisition\n    final_x_price = 60     # price of corporation X after acquisition\n    exchange_ratio = 2     # exchange ratio for X's shares for each Y's share\n\n    # Initial investment for buying one share of Y\n    initial_investment_y = initial_y_price\n    \n    # Money obtained from selling shares of X as a hedge\n    hedge_money = exchange_ratio * initial_x_price\n    \n    # Net initial investment (cost of Y - money received from hedge)\n    net_initial_investment = initial_investment_y - hedge_money\n\n    # Final value of the hedge position (2 shares of X for each share of Y)\n    final_hedge_value = exchange_ratio * final_x_price\n    \n    # Final value of one share of Y\n    final_investment_y = final_y_price\n\n    # Net final value (value of Y + value of hedge - net initial investment)\n    net_final_value = final_investment_y + final_hedge_value - net_initial_investment\n\n    # Calculate profit per share from Y\n    profit_y = net_final_value - initial_y_price\n\n    # return the profit per share from Y\n    return profit_y\n\n# Example usage:\n# profit = solution()\n# print(profit)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-25",
        "question": "Presuming the exercise price of a share option is $50, if the share undergoes a 2-to-1 split, what would be the fresh exercise price?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    exercise_price_before_split = 50\n    split_ratio = 2  # 2-to-1 split\n\n    # Do math calculation to get the answer\n    new_exercise_price = exercise_price_before_split / split_ratio\n    \n    # return answer\n    return new_exercise_price\n\n# You can call the function to see the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-26",
        "question": "In 2016, Firm B had 10,000 shares and 1,000 outstanding warrants with an exercise price of $20/share. The average stock price was $25 over the course of that year. What was the net shares issued when computing the EPS?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_shares = 10000\n    warrants = 1000\n    exercise_price = 20\n    average_stock_price = 25\n    \n    # Do math calculation to get the answer\n    # Calculate the number of shares that could be purchased at the exercise price\n    shares_from_warrants = (warrants * exercise_price) / average_stock_price\n    # Calculate the net increase in shares from warrants\n    net_shares_issued = warrants - shares_from_warrants\n    \n    # return answer\n    return net_shares_issued\n    \n# The answer should be the net increase in shares from exercising the warrants.\nprint(solution())\n```\nHere we're calculating the number of shares that could be bought with the 'money' obtained from exercising the 1,000 warrants at $20 each, given that the average stock price is $25. The difference between the number of warrants and the shares you could buy with that exercise proceeds represents the net new shares that would be issued upon the exercise of the warrants."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-27",
        "question": "The fund overseen by John displays the following returns in year1,2,3: What will be the time-weighted rate of return?",
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_year1 = 500\n    return_year1 = 0.12\n\n    investment_year2 = 600\n    return_year2 = 0.05\n\n    investment_year3 = 1000\n    return_year3 = 0.01\n\n    # Do math calculation to get the answer\n\n    # Calculate the growth factors for each period\n    growth_factor_year1 = 1 + return_year1\n    growth_factor_year2 = 1 + return_year2\n    growth_factor_year3 = 1 + return_year3\n\n    # Calculate the time-weighted rate of return by multiplying the growth factors\n    # TWRR is the geometric mean of the growth factors minus 1\n    # We multiply the factors, and then take the nth root (n = number of time periods)\n    # Since we know there are 3 periods, we can raise to the power of (1/3)\n    TWRR = ((growth_factor_year1 * growth_factor_year2 * growth_factor_year3) ** (1/3)) - 1\n\n    return TWRR\n\n# Test the function\nprint(solution())  # Expected: Time-weighted rate of return over the three-year period\n```\n\nThis code snippet defines the initial investment and return for each year, and then calculates the time-weighted rate of return (TWRR) using the growth factors for each period. The result is the geometric mean of the investment growth over all periods.\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-28",
        "question": "On today's date, 5 June 2013, a semi-annual bond lasting three years that comes with a coupon rate of 6% just issued its initial coupon payment. The face value stands at 100. The due dates for interest payments are the 5th of April and the 5th of October. The bond's yield-to-maturity is equal to 5%. If the count convention is based on 30/360, figure out the accrued interest on this bond as of 5 June 2013.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Since the first coupon payment is on the issue date, no interest has accrued yet.\n    # Accrued interest would begin accumulating after the 5th of April, but since the bond just issued its \n    # initial coupon on the issue date, there are no days of accrued interest yet as of 5th June 2013.\n    accrued_interest = 0.0\n    \n    # There is no need for further calculations, as the question states the initial coupon payment was just issued.\n    # Hence, there is no accrued interest to count for subsequent dates until the interest starts accruing after \n    # the issue date, which in this case begins after the 5th of April.\n\n    return accrued_interest\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-29",
        "question": "In 2009, Steel Production acquired a new machine for its production line at an expense of $600,000. The machine is expected to be useful for 10 years and has an approximate residual value of $50,000. Using the straight-line method, what amount of depreciation should Steel report in 2010 for financial accounting?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_machine = 600000\n    expected_lifespan_years = 10\n    residual_value = 50000\n    \n    # Do math calculation to get the answer\n    annual_depreciation = (cost_of_machine - residual_value) / expected_lifespan_years\n    \n    # return answer\n    return annual_depreciation\n\n# Example of calling the function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-30",
        "question": "Assuming there are 250 trading days in a year, how would the daily VaR at 99% level change if the financial institution sells $50 worth of asset A and purchases $50 worth of asset B, given that the institution's trading portfolio includes two assets with a Correlation (A, B) = 0.2?",
        "tables": [
            "| Asset | Annual Return | Volatility of Annual Return | Value |\n|-------|---------------|-----------------------------|-------|\n| A     | 10%           | 25%                         | 100   |\n| B     | 20%           | 20%                         | 50    |"
        ],
        "topic": "Risk Management",
        "output": [
            "```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Original portfolio\n    value_A = 100\n    value_B = 50\n    \n    # Changes made to the portfolio\n    sell_A = 50\n    buy_B = 50\n    \n    # New portfolio values\n    value_A_new = value_A - sell_A\n    value_B_new = value_B + buy_B\n    \n    # Given annual return and volatility\n    annual_return_A = 0.10\n    annual_vol_A = 0.25\n    annual_return_B = 0.20\n    annual_vol_B = 0.20\n    \n    # Correlation between A and B\n    correlation_AB = 0.2\n    \n    # Daily conversion (approximation using square root of time rule)\n    daily_vol_A = annual_vol_A / (250 ** 0.5)\n    daily_vol_B = annual_vol_B / (250 ** 0.5)\n    \n    # VaR calculation at 99% level\n    z_score = norm.ppf(0.99)\n    \n    # Portfolio standard deviation before and after the transaction\n    portfolio_std_before = ((value_A * daily_vol_A) ** 2 + (value_B * daily_vol_B) ** 2 +\n                            2 * (value_A * daily_vol_A) * (value_B * daily_vol_B) * correlation_AB) ** 0.5\n    portfolio_std_after = ((value_A_new * daily_vol_A) ** 2 + \n                           (value_B_new * daily_vol_B) ** 2 +\n                           2 * (value_A_new * daily_vol_A) * (value_B_new * daily_vol_B) * correlation_AB) ** 0.5\n    \n    # Daily VaR before and after the transaction\n    daily_VaR_before = z_score * portfolio_std_before\n    daily_VaR_after = z_score * portfolio_std_after\n    \n    # Change in daily VaR\n    change_in_daily_VaR = daily_VaR_after - daily_VaR_before\n    \n    # return change in daily VaR\n    return change_in_daily_VaR\n\n# Call the function and print the result\nchange_in_daily_VaR = solution()\nprint(f\"The daily VaR at 99% level changes by {change_in_daily_VaR:.2f}\")\n```\n\nThis program calculates the change in daily Value at Risk (VaR) after selling $50 worth of asset A and buying the same amount of asset B, given the volatility, returns, and correlation between the two assets. It assumes 250 trading days a year and uses the z-score for the 99% confidence level to compute the VaR. The daily volatility is approximated using the square root of time rule. The change in VaR is represented as the difference in the portfolio's standard deviations before and after the transaction, multiplied by the z-score."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-31",
        "question": "According to the chart, what is the worth of a 1.5-year, 6% semiannual coupon, $100 face value bond?",
        "tables": [
            "|Maturity(years)|STRIPS Price|Spot Rate|Forward Rate|\n|---|---|---|---|\n|0.5|98.7654|2.50%|2.50%|\n|1.0|97.0662|3.00%|3.50%|\n|1.5|95.2652|3.26%|3.78%|\n|2.0|93.2775|?.??%|?.??%|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the worth or present value of a 1.5-year, 6% semiannual coupon, $100 face value bond, we will use the spot rates given for 0.5-year and 1-year to discount coupon payments and the principal amount. Since the bond is semiannual, it pays coupons twice a year. For a 6% annual coupon rate on a $100 face value, each coupon payment is $3 ($100 * 6% / 2).\n\nThe present value of bond payments is calculated by discounting each payment at the respective spot rates for 0.5-year, 1-year, and 1.5-year periods. We have the spot rates for 0.5 and 1-year, but we will have to calculate the 1.5-year spot rate (we will assume the price for 1.5-year STRIPS is related to the zero-coupon bond).\n\nIn this example, we don't have the spot rate for 1.5 years directly, but we do have the price of the STRIPS, which is the price of a zero-coupon bond maturing at that time. We can use this price to find the implied spot rate. However, since the spot rate for a 1.5 year is given, we can use it straight away without performing any calculations. Let's put this into a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # $100 face value bond\n    coupon_rate = 0.06  # 6% annual\n    semiannual_coupon = face_value * coupon_rate / 2\n    n_periods = 3  # 1.5 years semiannual means 3 periods\n    \n    # Spot rates from the table\n    spot_rates = [0.025, 0.03, 0.0326]  # 6 months, 1 year, 1.5 year\n    \n    # Calculate the bond value\n    bond_value = 0\n    for i in range(n_periods):\n        discount_factor = 1 / ((1 + spot_rates[i]) ** (i + 1))\n        bond_value += semiannual_coupon * discount_factor\n    # Add the discounted face value\n    bond_value += face_value * discount_factor\n\n    # return bond value\n    return round(bond_value, 2)\n\n# Call the solution function and print\nprint(solution())\n```\n\nIn this program, each of the coupons and the final face value of the bond is discounted back to the present value using the spot rates for the respective periods where the payments are made. Note that the spot rates must be adjusted for the semiannual periods when used in the discount factor formula, which is 1 / (1 + rate)^(time). This would result in the present value of all future cash flows from the bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-32",
        "question": "The hedge fund known as Sovereign Wealth starts out with an initial capital of $300 million. They levy a 1% management fee anchored on year-end asset value and a 20% incentive fee that applies when returns surpass an 8% hurdle rate. Considering that Sovereign Wealth's first-year appreciation rate stands at 10% and its management fees are predicated on valuation at period's end, what will be the net return for the investor, provided the performance fee is computed after subtracting the management fee?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Sure, here's the code to calculate the net return for the investor:\n\n```python\ndef solution():\n    initial_capital = 300e6  # Initial capital in dollars\n    management_fee_rate = 0.01  # Management fee rate\n    incentive_fee_rate = 0.20  # Incentive fee rate\n    hurdle_rate = 0.08  # Hurdle rate\n    appreciation_rate = 0.10  # First-year appreciation rate\n    \n    year_end_value = initial_capital * (1 + appreciation_rate)\n    management_fee = year_end_value * management_fee_rate\n    \n    if appreciation_rate > hurdle_rate:\n        excess_return = year_end_value - initial_capital - management_fee\n        incentive_fee = excess_return * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    net_return_to_investor = year_end_value - initial_capital - management_fee - incentive_fee\n    net_return_percentage = (net_return_to_investor / initial_capital) * 100\n    \n    return net_return_percentage\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-33",
        "question": "Taking into account the asset class returns for the 2016 financial year, what is the value added or active return for the supervised investment portfolio?",
        "tables": [
            "| Asset class | Portfolio Weight(%) | Benchmark Weight(%) | Portfolio Return(%) | Benchmark Return(%) |\n| ----------- | ------------------ | ------------------- | ------------------- | ------------------ |\n| Domestic equities | 55 | 40 | 10 | 8 |\n| International equities | 20 | 30 | 10 | 9 |\n| Bonds | 25 | 30 | 5 | 6 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here is the Python program that calculates the value added or active return for the supervised investment portfolio based on the provided data.\n\n```python\ndef solution():\n    # Define variables name and value\n    asset_classes = {\n        'Domestic equities': {\n            'Portfolio Weight': 0.55,\n            'Benchmark Weight': 0.40,\n            'Portfolio Return': 0.10,\n            'Benchmark Return': 0.08\n        },\n        'International equities': {\n            'Portfolio Weight': 0.20,\n            'Benchmark Weight': 0.30,\n            'Portfolio Return': 0.10,\n            'Benchmark Return': 0.09\n        },\n        'Bonds': {\n            'Portfolio Weight': 0.25,\n            'Benchmark Weight': 0.30,\n            'Portfolio Return': 0.05,\n            'Benchmark Return': 0.06\n        }\n    }\n    \n    # Calculate active return (value added)\n    active_return = 0\n    for asset in asset_classes.values():\n        weight_difference = asset['Portfolio Weight'] - asset['Benchmark Weight']\n        return_difference = asset['Portfolio Return'] - asset['Benchmark Return']\n        active_return += weight_difference * asset['Benchmark Return'] + \\\n                         asset['Portfolio Weight'] * return_difference\n    \n    # Return the active return\n    return active_return\n\n# This will execute the function and print the result.\nprint(solution())\n```\n\nThis program calculates the active return by going through each asset class and incorporating the difference in weights and returns between the portfolio and the benchmark. It then returns the total active return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-34",
        "question": "French indicates that for the recently concluded year (2014), the cost of goods sold by Bridgeport was 30% of sales. When projecting Bridgeport's income statement for 2015, French assumes that all firms in the industry will encounter an inflation rate of 8% on the cost of goods sold. Exhibit 4 presents French’s predictions about Bridgeport’s price and volume variations. According to Exhibit 4, what is Bridgeport’s anticipated gross profit margin for 2015?",
        "tables": [
            "| Exhibit 4.Arch way's 2015 Forecasted Price and Volume Changes ||\n| --- | --- |\n| Average price increase per unit | 5.00% |\n| Volume growth | -3.00% |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    avg_price_increase = 0.05\n    volume_growth = -0.03\n    past_cogs_percentage = 0.30  # COGS was 30% of sales in 2014\n    inflation_on_cogs = 0.08\n\n    # Calculate the new COGS percentage after considering the inflation\n    new_cogs_percentage = past_cogs_percentage * (1 + inflation_on_cogs)\n\n    # Since sales are a function of price and volume, we calculate the new sales\n    # We assume the past sales was 1 unit (100%) for simplification, any number would scale similarly\n    new_sales = (1 + avg_price_increase) * (1 + volume_growth)\n\n    # Gross profit will be the remaining percentage of sales after removing COGS\n    # Thus, gross profit margin is sales minus COGS percentage\n    gross_profit_margin = new_sales - new_cogs_percentage\n\n    # return answer\n    return round(gross_profit_margin * 100, 2) # converting into percentage and rounding off to two decimal places.\n\nanswer = solution()\nprint(f'Bridgeport’s anticipated gross profit margin for 2015 is {answer}%.')\n```\n\nThis program defines a function that calculates and returns Bridgeport's anticipated gross profit margin for 2015 based on provided data regarding price increase, volume growth, and inflation on cost of goods sold."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-35",
        "question": "Assuming a periodic inventory system, what was the cost of sales in 2008 (€ thousands) for Nutmeg Enterprises, which launched in 2007 and employs the weighted average cost method? During its first year, the company bought 45,000 units of inventory for €10 each and sold 40,000 units for €20 each. The following year, it acquired an additional 50,000 units at €11 each and sold 45,000 units for €22 each.",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "To calculate the cost of sales for Nutmeg Enterprises in 2008, we need to determine the cost of the goods that were sold. Since Nutmeg uses the weighted average cost method, we must first calculate the weighted average cost per unit of inventory before we can calculate the cost of sales.\n\nHere's the Python program that performs these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    # 2007 data\n    units_bought_2007 = 45000\n    cost_per_unit_2007 = 10\n    units_sold_2007 = 40000\n    \n    # 2008 data\n    units_bought_2008 = 50000\n    cost_per_unit_2008 = 11\n    units_sold_2008 = 45000\n    \n    # Calculate ending inventory for 2007 using the weighted average cost method\n    # Calculate cost of inventory at the end of 2007\n    cost_inventory_2007 = units_bought_2007 * cost_per_unit_2007\n    \n    # Calculate unsold inventory units at the end of 2007\n    unsold_units_2007 = units_bought_2007 - units_sold_2007\n    \n    # Calculate weighted average cost per unit at the end of 2007\n    # Since it's the first year, the weighted average cost is the same as the original cost per unit\n    weighted_avg_cost_2007 = cost_per_unit_2007\n    \n    # Calculate beginning inventory for 2008\n    beginning_inventory_2008 = unsold_units_2007 * weighted_avg_cost_2007\n    \n    # Calculate cost of goods available for sale in 2008\n    cost_goods_2008 = beginning_inventory_2008 + (units_bought_2008 * cost_per_unit_2008)\n    \n    # Calculate average cost per unit for 2008 inventory\n    average_cost_per_unit_2008 = cost_goods_2008 / (unsold_units_2007 + units_bought_2008)\n    \n    # Calculate cost of sales in 2008\n    cost_of_sales_2008 = units_sold_2008 * average_cost_per_unit_2008\n    \n    # Return answer in thousands\n    return round(cost_of_sales_2008 / 1000)\n    \n# Call the function to get the answer\nprint(solution())  # Output will be the cost of sales in € thousands\n```\n\nThis program calculates the cost of sales for Nutmeg Enterprises in 2008 by first determining the weighted average cost per unit and then multiplying it by the number of units sold in 2008. The answer is then rounded to the nearest thousand as per the question's units."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-36",
        "question": "If a security is valued at 88.692 per 100 of par value, and the security's complete price decreases to 88.642 if the yield-to-maturity rises by 10 basis points and increases to 88.762 if the yield-to-maturity is reduced by 10 basis points, what is the approximate convexity of the security?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the approximate convexity of the security we can use the following formula:\n\nConvexity ≈ [ (P- + P+ - 2P0) / (2 * Δy^2 * P0) ] * 100\n\nWhere:\n- P+ is the price of the bond if the yield decreases by Δy (in this case 88.762).\n- P- is the price of the bond if the yield increases by Δy (in this case 88.642).\n- P0 is the original price of the bond (in this case 88.692).\n- Δy is the change in yield in decimal form (10 basis points = 0.001).\n\nLet's plug these values into the formula:\n\n```python\ndef solution():\n    # Define variables names and values\n    p_minus = 88.642\n    p_plus = 88.762\n    p_zero = 88.692\n    delta_y = 10 / 10000  # 10 basis points expressed in decimal form\n    \n    # Do math calculation to get the convexity\n    convexity = ((p_minus + p_plus - 2 * p_zero) / (2 * delta_y ** 2 * p_zero)) * 100\n    \n    # Return the final answer\n    return convexity\n\n# You can test the function with:\n# print(solution())\n```\n\nThe function `solution` will return the calculated convexity of the security when called."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-37",
        "question": "At the start of 2013, company N released bonds with a face value of $2,000,000 that would mature in 5 years. With the market interest rate being 7%, the bonds will provide an 8% coupon payment every 31st December. What would be the interest expenditure according to the effective interest rate method on the 31st December 2013?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    market_interest_rate = 0.07\n    coupon_rate = 0.08\n    \n    # Do math calculation to get the answer\n    # Interest expenditure for the year can be calculated by \n    # multiplying the carrying value at the beginning of the period with the market interest rate.\n    interest_expenditure = face_value * market_interest_rate\n    \n    # return answer\n    return interest_expenditure\n\n# The solution function can be called to get the answer.\nprint(solution())\n```\nThis Python program will calculate the interest expenditure on the bonds using the effective interest rate method for company N on the 31st December 2013. The result will be printed to the console when the `print(solution())` line is executed."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-38",
        "question": "If at the start of the year, Alpine Peak Investments, a hedge fund, had a portfolio valued at $475,000,000, which increased to $541,500,000 after a year, what would be the efficient yield for an investor? This is keeping in mind that the hedge fund levies a 1.5% management fee on the final portfolio value and a 10% incentive fee that are calculated separately.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 475000000\n    final_value_without_fees = 541500000\n    \n    # Calculate management fee\n    management_fee = final_value_without_fees * 0.015\n    \n    # Calculate portfolio value after management fee\n    final_value_after_management_fee = final_value_without_fees - management_fee\n    \n    # Calculate profit for incentive fee calculation\n    profit_for_incentive_fee = final_value_after_management_fee - initial_value\n    \n    # Calculate incentive fee\n    incentive_fee = profit_for_incentive_fee * 0.10\n    \n    # Calculate final portfolio value after all fees\n    final_value_after_all_fees = final_value_after_management_fee - incentive_fee\n    \n    # Calculate net profit after all fees\n    net_profit = final_value_after_all_fees - initial_value\n    \n    # Calculate efficient yield for the investor\n    efficient_yield = net_profit / initial_value\n    \n    # Return answer\n    return efficient_yield\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis Python program calculates the efficient yield for an investor after taking into account the management and incentive fees levied by Alpine Peak Investments."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-39",
        "question": "Assuming a daily compounded annual interest rate of 2.5%, how long would it take for Alex, who currently has an investment of $1 million, to save up to his required retirement goal of $2million for his everyday costs?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Initial investment amount\n    principal = 1_000_000\n    # Required retirement goal\n    target = 2_000_000\n    # Daily compounded annual interest rate\n    rate = 2.5 / 100\n    # Number of times the interest is compounded per year\n    n = 365\n    \n    # Calculate the number of years necessary to reach the retirement goal using the formula:\n    # A = P * (1 + r/n)^(nt) >>> t = ln(A/P) / (n * ln(1 + r/n))\n    # where:\n    # A = the amount of money accumulated after n years, including interest.\n    # P = the principal amount (the initial amount of money).\n    # r = the annual interest rate (decimal).\n    # n = the number of times that interest is compounded per year.\n    # t = the number of years the money is invested or borrowed for.\n    \n    t = math.log(target / principal) / (n * math.log(1 + rate / n))\n\n    # return answer, number of years\n    return t\n\n# To test the function\nprint(solution())\n```\n\nThis program defines a function `solution()` that calculates the number of years necessary for an investment of $1 million to grow to $2 million with a daily compounded annual interest rate of 2.5%. It imports the `math` library to use the natural logarithm function (`math.log`). The returned value `t` is the calculated time in years."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-40",
        "question": "If a financial expert predicts that a share may have a $2 dividend next year and could be sold for $38 by the end of next year. What would the share's value be if the required rate of return is 20%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_dividend = 2\n    expected_sale_price = 38\n    required_rate_of_return = 0.20\n    \n    # Do math calculation to get the answer\n    # Use the Dividend Discount Model (DDM) for a one-year holding period\n    # Share value = (Dividend received + Price of share after one year) / (1 + required rate of return)\n    share_value = (expected_dividend + expected_sale_price) / (1 + required_rate_of_return)\n    \n    # return answer\n    return share_value\n    \n# Run the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-41",
        "question": "A business is pondering on the idea of transitioning from a completely equity-based capital structure to a capital structure comprising of equal parts of equity and debt, keeping assets constant. This alteration would decrease the net income by 30%. If the present return on equity (ROE) is 10%, what would the ROE be with the suggested capital structure?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_roe = 0.1  # 10% expressed as a decimal\n    net_income_decrease = 0.3  # 30% decrease expressed as a decimal\n    \n    # With the new capital structure, equity will be halved since the capital\n    # will consist of equal parts of equity and debt.\n    new_equity_fraction = 0.5  # New equity fraction is half of the old equity\n    \n    # The decrease in net income will affect the numerator of the ROE calculation\n    # while the reduction in equity affects the denominator.\n    # ROE = Net Income / Shareholder's Equity\n    # With net income reduced by 30%, the new ROE will be:\n    new_roe = (current_roe * (1 - net_income_decrease)) / new_equity_fraction\n    \n    # return answer\n    return new_roe\n\n# Call solution function and print result for confirming the answer\nprint(solution())\n```\n\nThe program calculates the new return on equity after the change in the capital structure by taking into account the reduction of equity (down to half) and the decrease in net income (by 30%)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-42",
        "question": "Based on the given table, what is the key rate duration for a shift of 10 years for a zero-coupon bond?",
        "tables": [
            "|                     | Value  |\n|---------------------|--------|\n| Initial Value       | 87.1876|\n| 2-year shift for 1bp| 87.3212|\n| 5-year shift for 1bp| 87.2545|\n| 10-year shift for 1bp|87.1454|\n| 30-year shift for 1bp|87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Below is the Python program to calculate the key rate duration for a shift of 10 years for a zero-coupon bond based on the given table.\n\n```python\ndef solution():\n    # The initial value of the bond\n    initial_value = 87.1876\n    \n    # The value of the bond after a 1 basis point shift for 10 years\n    value_10_year_shift = 87.1454\n    \n    # The size of the shift in basis points\n    basis_point_shift = 1\n    \n    # Calculate the change in value\n    change_in_value = value_10_year_shift - initial_value\n    \n    # Calculate the key rate duration\n    key_rate_duration_10_year = change_in_value / (initial_value * (basis_point_shift / 10000))\n    \n    # return answer\n    return key_rate_duration_10_year\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nThis program calculates the key rate duration for a 10-year shift, which is the sensitivity of the bond's value to a 1 basis point change in the interest rate specifically for the 10-year key rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-43",
        "question": "Based on the provided data, what is the value of P(3≤X≤6)?",
        "tables": [
            "| X   | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| P(X)| 0.14| 0.09| 0.19| 0.25| 0.17| 0.06| 0.03| 0.07|\n\nNote: A discrete random variable X follows the probability distribution as given in the table above."
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the probabilities for X\n    probabilities = {\n        0: 0.14,\n        1: 0.09,\n        2: 0.19,\n        3: 0.25,\n        4: 0.17,\n        5: 0.06,\n        6: 0.03,\n        7: 0.07\n    }\n    \n    # Calculate the sum of probabilities for 3 ≤ X ≤ 6\n    probability_sum = sum(probabilities[x] for x in range(3, 7))\n    \n    # Return the answer\n    return probability_sum\n\n# This will call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-44",
        "question": "Based on the data in Exhibit 1, if Michael is planning to implement a covered call strategy, what would be the breakeven share price for this strategy? Exhibit 1: Share Price and Option Premiums (share prices and option premiums in $)",
        "tables": [
            "| company | Share price | Call premium | Strike price |\n|---------|-------------|--------------|--------------|\n| NZT     | 53.37       | 1.62         | 58           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price = 53.37\n    call_premium = 1.62\n    \n    # Do math calculation to get the breakeven share price for a covered call\n    breakeven_price = share_price - call_premium\n    \n    # return answer\n    return breakeven_price\n\n# Call the function and print the result if you want to check the result\n#print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-45",
        "question": "If an analyst in the finance team of a French company, PLECCO Inc., calculates the amortization of a client list, an intangible asset, for the fiscal year concluded 31 December 2009 using the straight-line method, what would be the sum of accumulated amortization associated with the client list as of 31 December 2009, based on the data she has collected about the asset?",
        "tables": [
            "| Acquisition cost                                       | €2,300,000           |\n|-------------------------------------------------------|----------------------|\n| Acquisition date                                      | 1 January 2008       |\n| Expected residual value at time of acquisition        | €500,000             |\n| The customer list is expected to result in extra sales for three years after acquisition. The present value of these expected extra sales exceeds the cost of the list. | |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 2300000\n    residual_value = 500000\n    acquisition_date = 2008\n    useful_life = 3  # Years\n    \n    # Calculate annual amortization using the straight-line method\n    annual_amortization = (acquisition_cost - residual_value) / useful_life\n    \n    # As of 31 December 2009, we have two years of amortization (2008 and 2009)\n    accumulated_amortization = annual_amortization * 2\n    \n    # Return answer\n    return accumulated_amortization\n\n# Executing the function and printing the result\nprint(solution())\n```\n\nWhen you run this program, it will print the sum of accumulated amortization associated with the client list as of 31 December 2009 using the straight-line method based on the given data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-46",
        "question": "Can you compute the operational cash flow for the year 2018?",
        "tables": [
            "|                   | 2017($) | 2018($) |\n|-------------------|---------|---------|\n| net income        | 320,000 | 360,000 |\n| accounts receivable | 23,000  | 25,000  |\n| accounts payable  | 31,000  | 35,000  |\n| depreciation      | 7,000   | 7,000   |"
        ],
        "topic": "Accounting",
        "output": [
            "Certainly! Below is the Python program that computes the operational cash flow for the year 2018 based on the given table.\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 360000\n    depreciation_2018 = 7000\n    \n    # Change in accounts receivable from 2017 to 2018\n    accounts_receivable_2017 = 23000\n    accounts_receivable_2018 = 25000\n    change_in_accounts_receivable = accounts_receivable_2018 - accounts_receivable_2017\n    \n    # Change in accounts payable from 2017 to 2018\n    accounts_payable_2017 = 31000\n    accounts_payable_2018 = 35000\n    change_in_accounts_payable = accounts_payable_2018 - accounts_payable_2017\n    \n    # Do math calculation to get the answer\n    operational_cash_flow_2018 = net_income_2018 + depreciation_2018 + \\\n                                 change_in_accounts_payable - change_in_accounts_receivable\n    \n    # return answer\n    return operational_cash_flow_2018\n\n# Call the function and print the result\nprint(solution())\n```\n\nRunning this program will calculate the operational cash flow for the year 2018 by adding back non-cash transactions and accounting for the changes in working capital (accounts receivable and accounts payable)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-47",
        "question": "An agriculturist intends to sell 50,000 tons of soybeans in six months and opts to short futures contracts to protect against a decrease in price. The present price of soybeans is $508/ton, the contract size is 100 tons, with a soybean storage cost of 1.5% annually. The exponentially compounded rate is 5%, what's the cost of the futures contract?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the cost of the futures contract for the agriculturist, we will need to take into account the current price of soybeans, the contract size, the storage cost, and the compounded rate. Also, we need to consider the time period of six months for the storage costs and compounded rate.\n\nHere is a Python program to calculate the answer:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    current_price_per_ton = 508  # current price of soybeans per ton\n    contract_size = 100  # number of tons per futures contract\n    annual_storage_cost_rate = 0.015  # annual storage cost rate\n    semi_annual_storage_cost_rate = annual_storage_cost_rate / 2  # for 6 months period\n    compounded_rate_annual = 0.05  # exponentially compounded annual rate\n    compounded_rate_semi_annual = compounded_rate_annual / 2  # for 6 months period\n    time_period = 0.5  # 6 months expressed in years\n\n    # Calculating the future price using the cost of carry model\n    futures_price = (current_price_per_ton + \n                     (current_price_per_ton * semi_annual_storage_cost_rate) * math.exp(compounded_rate_semi_annual * time_period))\n    futures_contract_value = futures_price * contract_size\n\n    # return answer\n    return futures_contract_value\n\n#This will return the cost of a single futures contract\nprint(solution())\n```\n\nThis function calculates the futures contract price and then multiplies it by the size of the contract (100 tons) to find the total value of one futures contract. The cost of carry model, which adds the storage costs to the current price and then applies exponential compounding to the sum, has been used in the calculation. The storage cost and compounded rate have been adjusted for a six-month period."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-48",
        "question": "What is the effective annual rate (EAR) if the declared yearly interest rate is 20% and the compounding occurs on a monthly basis?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the effective annual rate given the nominal interest rate of 20% compounded monthly:\n\n```python\ndef solution():\n    # Define variables name and value\n    nominal_rate = 0.20  # 20% annual nominal rate\n    periods_per_year = 12  # Compounding monthly\n\n    # Do math calculation to get the EAR\n    ear = (1 + nominal_rate / periods_per_year) ** periods_per_year - 1\n    \n    # return answer\n    return ear\n\n# You can call the function and print the result to see the EAR\nprint(solution())\n```\n\nBy running the `solution` function, you will get the effective annual rate for the given conditions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-49",
        "question": "What is the correlation coefficient of the returns of XYZ company and the overall market, given that the covariance of the returns is 0.009, the standard deviation of the overall market returns is 0.08, and the standard deviation of XYZ's returns is 0.15?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.009\n    market_std_dev = 0.08\n    xyz_std_dev = 0.15\n    \n    # Do math calculation to get the answer\n    correlation_coefficient = covariance / (market_std_dev * xyz_std_dev)\n    \n    # return answer\n    return correlation_coefficient\n    \n# You can call the solution function to check the answer.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-50",
        "question": "The trader, Michael, is preparing to establish a regression hedge. He plans to sell a Treasury bond worth $500,000 and buy TIPS as a hedge. Based on past data, the DV01on the T-bond is 0.085, the DV01on the TIPS is 0.063, and the regression beta coefficient (hedge adjustment factor) is 1.1. How much TIPS should Michael acquire?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    t_bond_value = 500000\n    t_bond_dv01 = 0.085\n    tips_dv01 = 0.063\n    hedge_beta = 1.1\n    \n    # Do math calculation to get the answer\n    # Calculate the dollar duration of the T-bond position\n    dollar_duration_t_bond = t_bond_dv01 * t_bond_value\n    \n    # Adjust the dollar duration for TIPS using the regression beta\n    adjusted_dollar_duration_tips = dollar_duration_t_bond * hedge_beta\n    \n    # Calculate the amount of TIPS required to match the adjusted dollar duration\n    amount_tips = adjusted_dollar_duration_tips / tips_dv01\n    \n    # return answer\n    return amount_tips\n    \n# Calling the function and printing the answer\nprint(solution())\n```\nThis program will correctly calculate how much TIPS Michael should acquire to establish a regression hedge."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-51",
        "question": "Over the previous 36 months, the standard deviation of monthly returns within a fund's portfolio was recorded at 4.9%. What is the test statistic value to verify an assertion that this fund's investment approach results in a standard deviation of monthly returns of less than 5.0%?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "To calculate the test statistic, we will use the formula for the z-score of a sample standard deviation, which is given by:\n\n\\[ z = \\frac{(s - \\mu_0)}{\\sigma / \\sqrt{2n}} \\]\n\nwhere:\n- \\( s \\) is the sample standard deviation.\n- \\( \\mu_0 \\) is the assumed population standard deviation.\n- \\( \\sigma \\) is the standard deviation of the sample standard deviation, which is the population standard deviation (since we're testing if the sample standard deviation is less than the population's, we'll take this as 5%).\n- \\( n \\) is the sample size (number of observations).\n\nWe're testing if \\( s \\) is significantly less than 5.0%, so:\n\\[ \\mu_0 = 5.0\\% \\]\n\\[ s = 4.9\\% \\]\n\\[ n = 36 \\text{ months} \\]\n\nSince we do not have the actual value for \\( \\sigma \\), and in practice, it's often not known, in a real-world scenario, you would conduct a test like the chi-squared test for the variance or maybe bootstrap to get an estimate of \\( \\sigma \\). However, to stay consistent with the requested format, let's make the simplifying assumption that \\( \\sigma = \\mu_0 \\). \n\nUnder this assumption, our z-score formula simplifies to:\n\n\\[ z = \\frac{(s - \\mu_0)}{\\mu_0 / \\sqrt{2n}} \\]\n\nNow let's implement this in Python:\n\n```python\nfrom math import sqrt\n\ndef solution():\n    # Define variables name and value\n    s = 4.9 / 100  # Sample standard deviation (in decimal)\n    mu_0 = 5.0 / 100  # Assumed population standard deviation (in decimal)\n    n = 36  # Number of observations(months)\n    \n    # Calculate the z-score\n    z = (s - mu_0) / (mu_0 / sqrt(2 * n))\n    \n    # return answer\n    return z\n\n# To display the result when you run it\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nIt's important to note that this calculation assumes that the sample standard deviation is normally distributed which might not be the case for small sample sizes (less than 30). For sample sizes larger than 30, it's generally considered a reasonable approximation due to the Central Limit Theorem."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-52",
        "question": "If we set the base period for 2010's consumption to be November and the starting price index at 100, what would be the inflation rate after determining the December price index as a Laspeyres index?",
        "tables": [
            "|         | November 2010 |       | December 2010 |       |\n|---------|---------------|-------|---------------|-------|\n| Goods   | Quantity      | Price | Quantity      | Price |\n| Sugar   | 70kg          | £0.90/kg  | 120kg         | £1.00/kg  |\n| Cotton  | 60kg          | €0.60/kg  | 50kg          | €0.80/kg  |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    base_quantities = {\n        'Sugar': 70,  # base quantity for Sugar in kg\n        'Cotton': 60  # base quantity for Cotton in kg\n    }\n    \n    base_prices = {\n        'Sugar': 0.90,  # base price for Sugar per kg in £\n        'Cotton': 0.60  # base price for Cotton per kg in €\n    }\n    \n    current_prices = {\n        'Sugar': 1.00,  # current price for Sugar per kg in £\n        'Cotton': 0.80  # current price for Cotton per kg in €\n    }\n    \n    # For Laspeyres index, we use base period quantities and price ratio\n    base_total_value = sum(base_quantities[item] * base_prices[item] for item in base_quantities)\n    current_total_value = sum(base_quantities[item] * current_prices[item] for item in base_quantities)\n    \n    # Calculate Laspeyres index\n    laspeyres_index = current_total_value / base_total_value * 100\n    \n    # Calculate inflation rate\n    inflation_rate = laspeyres_index - 100  # since the base index is 100\n    \n    # return answer\n    return inflation_rate\n    \n# Print out the inflation rate to validate the function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-53",
        "question": "John is interested in forecasting the earnings of his manufacturing plant in October 20X9, thus he employs income data from January 20X6 to September 20X9 as samples to create a AR(1) model, achieving the following outcome: Xt=293.5742+0.9387Xt−1X_t=293.5742+0.9387X_{t-1}Xt​=293.5742+0.9387Xt−1​ Can you determine the long-term average?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "The long-term average (also known as the steady-state value) in an AR(1) model can be obtained by setting Xt = Xt-1 since that is the value it converges to in the long run.\n\nGiven the model equation:\nXt = 293.5742 + 0.9387*Xt-1\n\nIn a stead state, Xt = Xt-1 (because values do not change in the long run), thus we can drop the t indexing and denote the steady state level of the process as X*:\nX* = 293.5742 + 0.9387*X*\n\nRearranging it:\nX* - 0.9387*X* = 293.5742\nX*(1 - 0.9387) = 293.5742\n\nNow, you can solve for the steady-state level X*.\n\nLet me provide the Python program to compute this:\n\n```python\ndef solution():\n    # Define the coefficients of the AR(1) model\n    intercept = 293.5742\n    coefficient = 0.9387\n    \n    # Compute the long-term average\n    long_term_average = intercept / (1 - coefficient)\n    \n    # Return the long-term average\n    return long_term_average\n\n# You can call the function to test the result.\n# print(solution())\n```\n\nWhen you run the `solution()` function, it will return the long-term average or steady-state value for the AR(1) model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-54",
        "question": "In 2010, certain incidents took place at a corporation. Given those incidents, what should be the corporation's documented amortization expense in 2011?",
        "tables": [
            "|   |   |\n|---|---|\n| 1. | Purchased a customer list for $100,000, which is expected to provide equal annual benefits for the next 4 years. |\n| 2. | Recorded $200,000 of goodwill in the acquisition of a competitor. It is estimated that the acquisition would provide substantial benefits for the company for at least the next 10 years. |\n| 3. | Spent $300,000 on media placements announcing the company had donated products and services to the community. The CEO believes the firm's reputation was enhanced substantially and the company will likely benefit from it for the next 5 years. |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    customer_list_cost = 100000\n    customer_list_lifetime = 4\n    goodwill_cost = 200000\n    goodwill_lifetime = 10\n    media_placements_cost = 300000\n    media_placements_lifetime = 5\n    \n    # Goodwill is not amortized, so we exclude it from the calculation\n    \n    # Calculate amortization for customer list\n    customer_list_amortization = customer_list_cost / customer_list_lifetime\n    \n    # Media placements are usually considered advertising expenses and not capitalized, so no amortization is involved.\n    # However, if for some reason it was decided to be amortized, it would be as follows (this line is normally not needed):\n    # media_placements_amortization = media_placements_cost / media_placements_lifetime\n    \n    # Do math calculation to get the answer\n    # Amortization expense for 2011 would only include the customer list, as goodwill is not amortized and advertising expenses are typically expensed when incurred.\n    amortization_expense = customer_list_amortization\n    \n    # return answer\n    return amortization_expense\n\n# Calling the function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-55",
        "question": "A financier is considering a property valued at $2.5 million. To purchase this property, he needs to pay up front 25% of the total cost and the remaining amount is to be financed at 10%, compounded monthly for a duration of 25 years. Determine the monthly mortgage payment for this scenario.",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! Here's the Python program which calculates the monthly mortgage payment for the given scenario:\n\n```python\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    property_value = 2500000\n    down_payment_percentage = 0.25\n    annual_interest_rate = 0.10  # 10%\n    loan_term_years = 25\n    months_per_year = 12\n\n    # Calculate the down payment and the amount to be financed\n    down_payment = property_value * down_payment_percentage\n    amount_financed = property_value - down_payment\n\n    # Calculate the monthly interest rate\n    monthly_interest_rate = annual_interest_rate / months_per_year\n\n    # Calculate the total number of payments (months)\n    total_payments = loan_term_years * months_per_year\n\n    # Calculate monthly mortgage payment\n    # The formula for monthly payment is:\n    # P = (L[c(1 + c)^n]) / ((1 + c)^n - 1)\n    # where:\n    # P = monthly payment\n    # L = loan amount (amount_financed)\n    # c = monthly interest rate (monthly_interest_rate)\n    # n = number of payments (total_payments)\n\n    numerator = amount_financed * monthly_interest_rate * (1 + monthly_interest_rate)**total_payments\n    denominator = (1 + monthly_interest_rate)**total_payments - 1\n    monthly_payment = numerator / denominator\n\n    # Use numpy's pmt function to verify the calculation\n    # monthly_payment_np = -np.pmt(monthly_interest_rate, total_payments, amount_financed)\n\n    # return answer\n    return round(monthly_payment, 2)\n    \n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program defines the variables with the given property value, down payment percent, interest rate, and term in years. It then performs the calculations required to determine the monthly mortgage payment using the formula for an annuity given the parameters. Optionally, the program includes a commented-out line with numpy's financial pmt function to verify the correctness of the manual calculation. The result is rounded to two decimal points before being returned."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-56",
        "question": "In a reversed head and shoulders formation, if the collar is at €100, the shoulders are priced at €90, and the head is at €75. What is the intended price?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "In technical analysis, a reverse head and shoulders pattern, once completed, indicates that the price of an asset might rise beyond the resistance level, which is often represented by the neckline, or the \"collar.\" The intended price, or target price, following the reverse head and shoulders pattern is typically estimated by measuring the vertical distance from the neckline to the bottom of the head and then adding that distance to the neckline.\n\nHere's a Python program to calculate the intended price using this pattern:\n\n```python\ndef solution():\n    # Define the price points for the collar, shoulders, and head\n    collar = 100\n    shoulders = 90\n    head = 75\n    \n    # Calculate the height of the pattern\n    pattern_height = collar - head\n    \n    # Calculate the intended price by adding the height of the pattern to the collar\n    intended_price = collar + pattern_height\n    \n    # return intended price\n    return intended_price\n\n# Example use:\n# print(solution())  # Output would be the intended price\n```\n\nWhen this function is called, it will calculate the target price based on the reverse head and shoulders pattern's dimensions given."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-57",
        "question": "Assuming that the covariance between stocks and bonds is 0.058, what is the projected standard deviation of the portfolio?",
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|--------------------|--------------------------------|\n| Equity   | 40                 | 30                             |\n| Bond     | 60                 | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_equity = 0.40\n    weight_bond = 0.60\n    std_dev_equity = 0.30\n    std_dev_bond = 0.15\n    covariance = 0.058\n\n    # Calculate portfolio variance using the formula for two assets\n    portfolio_variance = (weight_equity ** 2 * std_dev_equity ** 2) + \\\n                         (weight_bond ** 2 * std_dev_bond ** 2) + \\\n                         (2 * weight_equity * weight_bond * covariance)\n    \n    # Calculate standard deviation as the square root of the variance\n    portfolio_std_dev = math.sqrt(portfolio_variance)\n    \n    # return answer\n    return portfolio_std_dev\n\n# If you want to display the answer as a percentage, you should return portfolio_std_dev * 100\n# However, the problem specifies the expected standard deviation, so we return the decimal value\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-58",
        "question": "During the same period last year, the stock price of Company H surged by 2.5 times its initial price. What was the continuously compounded return on the company's stock price?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! To calculate the continuously compounded return, we can use the formula for continuous compounding, which is:\n\n\\[ P(t) = P_0 \\cdot e^{rt} \\]\n\nWhere:\n- \\( P(t) \\) is the final price,\n- \\( P_0 \\) is the initial price,\n- \\( r \\) is the continuously compounded rate of return,\n- \\( t \\) is the time in years,\n- \\( e \\) is the base of the natural logarithm.\n\nSince we want to find \\( r \\) for when the stock price surged by 2.5 times its initial price, we can rearrange the formula to solve for \\( r \\):\n\n\\[ r = \\frac{\\ln(\\frac{P(t)}{P_0})}{t} \\]\n\nAssuming the period is one year, \\( t = 1 \\) and \\( \\frac{P(t)}{P_0} = 2.5 \\). Let's use this information to create the Python program.\n\n```python\nimport math  # Import math package for the natural logarithm function\n\ndef solution():\n    # Define variables name and value\n    final_to_initial_ratio = 2.5  # Final price is 2.5 times the initial price\n    time_period = 1  # Time period is one year\n    \n    # Do math calculation to get the answer\n    # r = ln(final_to_initial_price) / time_period\n    continuously_compounded_return = math.log(final_to_initial_ratio) / time_period\n    \n    # return answer\n    return continuously_compounded_return\n\n# You can call the function and print the result to see the continuously compounded return\n# print(solution())\n```\n\nThis function will calculate the continuously compounded return over a one-year period for the situation described."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-59",
        "question": "If a portfolio contains 80 assets, what should be the estimated number of covariances?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_assets = 80\n    \n    # Do math calculation to get the answer\n    # The formula for the number of covariances in a portfolio is n(n-1)/2,\n    # where n is the number of assets in the portfolio.\n    num_covariances = num_assets * (num_assets - 1) / 2\n    \n    # return answer\n    return num_covariances\n\n# To get the answer, you can call the function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-60",
        "question": "What is the worth of a bond that has a face value of EUR 1,000, a three-year maturity period, and annually pays a 5% coupon? Please note the following spot rate curve: 1-year, 6%; 2-year, 7%; and 3-year, 8%.",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Given values\n    face_value = 1000  # The face value of the bond\n    maturity_period = 3  # The maturity period of the bond in years\n    coupon_rate = 0.05  # The annual coupon rate (5%)\n    spot_rates = {1: 0.06, 2: 0.07, 3: 0.08}  # Given spot rates\n\n    # Calculate the present value of the bond's cash flows\n    present_value = 0\n    # Present value of coupon payments\n    for year in range(1, maturity_period + 1):\n        coupon_payment = face_value * coupon_rate\n        discount_factor = 1 / (1 + spot_rates[year]) ** year\n        present_value += coupon_payment * discount_factor\n    \n    # Present value of face value (the principal)\n    present_value += face_value / (1 + spot_rates[maturity_period]) ** maturity_period\n\n    # Return the present value of the bond\n    return present_value\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe `solution()` function calculates the present value of the bond by discounting each of the coupon payments and the face value using the given spot rates for each year. The sum of these discounted values gives us the current worth of the bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-61",
        "question": "If the critical value at the 0.05 level of significance is 9.4877, when will Samantha, a data analyst, reject the null hypothesis while using a chi-square distributed test statistic to check the independence of two categorical variables?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the critical value for 0.05 level of significance\n    critical_value = 9.4877\n    \n    # Samantha will reject the null hypothesis when the test statistic is greater than the critical value.\n    \n    # Placeholder value for the test statistic - in an actual scenario, this\n    # would be calculated from data, but for this purpose, we must assume a conceptual answer.\n    test_statistic = None\n\n    # Set the condition for rejection of the null hypothesis\n    if test_statistic > critical_value:\n        return True   # This means the null hypothesis is rejected\n    else:\n        return False  # This means the null hypothesis is not rejected\n\n# The actual returned value from this function without a test statistic is meaningless,\n# but the condition is set to show the point at which Samantha would reject the null hypothesis.\n```\nSince we don't have an actual test statistic value, the Python program above conveys the idea of the condition under which Samantha will reject the null hypothesis: when the test statistic is greater than the provided critical value. In practice, the test statistic needs to be calculated from the dataset before this check can be meaningful. The true/false return is conceptually representing the decision, not an actual answer without real data input."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-62",
        "question": "A company has to choose two out of four executives to join the finance committee. What are the possible combinations of two that can be created?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! You can use the `itertools.combinations` method from the Python `itertools` package to calculate the possible combinations of two executives from a list of four.\n\n```python\nimport itertools\n\ndef solution():\n    # Define the number of executives\n    num_executives = 4\n    \n    # Calculate the number of combinations of 2 executives from 4\n    num_combinations = len(list(itertools.combinations(range(num_executives), 2)))\n    \n    # return the number of combinations\n    return num_combinations\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-63",
        "question": "A financier is interested in establishing a bull call spread with the next options: a call option with a strike price of $35 that costs $12.65, and a call option with a strike price of $40 priced at $8.85. What is the maximum profit that can be made from this bull call spread?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lower_strike_price = 35\n    lower_premium_paid = 12.65\n    higher_strike_price = 40\n    higher_premium_received = 8.85\n    \n    # Do math calculation to get the maximum profit.\n    # The maximum profit for a bull call spread is calculated as the difference \n    # between the strike prices minus the net premium paid.\n    # Max Profit = (Higher Strike Price - Lower Strike Price) - (Premium paid for lower - Premium received for higher)\n    \n    max_profit = (higher_strike_price - lower_strike_price) - (lower_premium_paid - higher_premium_received)\n    \n    # return answer\n    return max_profit\n\n# Call the function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-64",
        "question": "A financial expert is trying to determine the worth of Sovereign Corporation's shares. The corporation has recently issued a dividend of $0.58 per share. The dividends are projected to increase by 20 percent in the coming year and 15 percent in the following year. From the third year onwards, the dividends are expected to rise at a rate of 5.6 percent per annum perpetually. If the necessary rate of return is 8.3 percent, what is the inherent value of the stock?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Below is a Python program designed to calculate the inherent value of a stock given the dividends and growth rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    D0 = 0.58       # Initial Dividend\n    g1 = 0.20       # Growth rate for the next year\n    g2 = 0.15       # Growth rate for the second year\n    g3 = 0.056      # Perpetual Growth rate from the third year onwards\n    k = 0.083       # Required rate of return\n    \n    # Calculating the Dividend for year 1, year 2 and year 3 using the growth rates\n    D1 = D0 * (1 + g1)\n    D2 = D1 * (1 + g2)\n    D3 = D2 * (1 + g3)\n    \n    # Calculating the present value of the dividends for year 1 and year 2\n    PV1 = D1 / (1 + k)\n    PV2 = D2 / ((1 + k)**2)\n    \n    # Calculating the present value of the perpetuity starting from year 3 using the Gordon Growth Model\n    P3 = D3 / (k - g3)\n    PV3 = P3 / ((1 + k)**2)\n    \n    # The inherent value of the stock is the sum of the present values\n    stock_value = PV1 + PV2 + PV3\n    \n    # Return answer\n    return round(stock_value, 2)\n\n# You can print the result to test the function\nprint(solution())\n```\n\nThis function performs the steps needed to calculate the inherent value of the stock using the Dividend Discount Model (Gordon Growth Model) for an increasing dividend pattern transitioning to a constant growth rate. Note that the inherent value is rounded to 2 decimal places using the `round` function."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-65",
        "question": "According to the two scenarios proposed by a financial examiner, what is the anticipated recovery value from the principal of defaulted loans amounting to $100,000?",
        "tables": [
            "| Scenario | Probability of Scenario (%) | Amount Recovered ($) | Probability of Amount (%) |\n|----------|-----------------------------|----------------------|--------------------------|\n| 1        | 40                          | 50,000               | 60                       |\n| 1        | 40                          | 30,000               | 40                       |\n| 2        | 60                          | 80,000               | 90                       |\n| 2        | 60                          | 60,000               | 10                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # The probability of scenarios and amount recovered is in percentage.\n    # Amounts need to be converted to decimals during calculations.\n    scenario1_probability = 40 / 100\n    scenario2_probability = 60 / 100\n    \n    amount_recovered_scenario1 = (50000 * 60 / 100) + (30000 * 40 / 100)\n    amount_recovered_scenario2 = (80000 * 90 / 100) + (60000 * 10 / 100)\n    \n    # Do math calculation to get the answer\n    # The anticipated recovery value is the weighted average of the amounts recovered in each scenario.\n    anticipated_recovery = (amount_recovered_scenario1 * scenario1_probability) + (amount_recovered_scenario2 * scenario2_probability)\n\n    # return answer\n    return anticipated_recovery\n\n# Uncomment the following line to test the function\n# print(solution())\n```\n\nThis program defines the given scenarios and their associated probabilities. It then calculates the expected recovery amount using a weighted average based on each scenario's likelihood. The anticipated recovery value is the sum of these weighted averages."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-66",
        "question": "What are the chances of stock A underperforming the market, given an analyst's discovery that it has a 60% probability of outdoing the market?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Given probability of outperforming the market\n    probability_outperform = 0.60\n    \n    # Chances of underperforming the market\n    probability_underperform = 1 - probability_outperform\n    \n    # return answer\n    return probability_underperform\n    \n```\nBelow is how the Python program should be executed to get the answer:\n```python\nprint(solution())  # This will print 0.4 which is the probability of stock A underperforming the market.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-67",
        "question": "A bank that complies with the Basel I Accord issues a loan of $100 million to a company having a risk weight of 50%. What is the fundamental on-balance-sheet credit risk charge?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 100_000_000\n    risk_weight = 0.50\n    capital_requirement_percentage = 0.08  # Under Basel I, the minimum capital requirement is 8%\n    \n    # Do math calculation to get the answer\n    credit_risk_charge = loan_amount * risk_weight * capital_requirement_percentage\n    \n    # return answer\n    return credit_risk_charge\n    \n# You can call the function to get the result\n# print(solution())\n```\nThis Python program calculates the fundamental on-balance-sheet credit risk charge for a loan of $100 million with a 50% risk weight under the Basel I Accord. The capital requirement under Basel I is generally 8%. The value returned by the `solution()` function is the computed credit risk charge for the loan."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-68",
        "question": "What is the likelihood that a portfolio with an expected mean return of 8 percent and a standard deviation of 14 percent will have a return between 8 and 11 percent?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the likelihood that a portfolio with a given mean and standard deviation will have a return within a specified range, we can use the cumulative distribution function (CDF) for a normal distribution. Python's `scipy.stats` library includes a norm function that can be used for this purpose.\n\nHere is the full Python program to calculate the required likelihood:\n\n```python\n# Import package\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean_return = 8\n    std_deviation = 14\n    lower_bound = 8\n    upper_bound = 11\n\n    # Convert the bounds to z-scores\n    z_score_lower = (lower_bound - mean_return) / std_deviation\n    z_score_upper = (upper_bound - mean_return) / std_deviation\n    \n    # Use the CDF to find the probabilities of being below the upper and lower bounds\n    p_lower = norm.cdf(z_score_lower)\n    p_upper = norm.cdf(z_score_upper)\n    \n    # The probability of being between the bounds is the difference of the two probabilities\n    probability_between = p_upper - p_lower\n    \n    # return answer\n    return probability_between\n\n# print the answer\nprint(solution())\n```\nThis program calculates the z-scores for the lower and upper bounds, then finds the cumulative probability for each z-score using the `norm.cdf()` function. The difference between these two probabilities is the likelihood of the portfolio return being between 8 and 11 percent."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-69",
        "question": "Calculate Jensen's alpha measure for portfolio named P, which has a beta of 0.7, an expected return of 12.8%, and an equity risk premium of 5.25%. The risk-free rate is 4.85%.",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_beta = 0.7\n    expected_portfolio_return = 0.128\n    equity_risk_premium = 0.0525\n    risk_free_rate = 0.0485\n    \n    # Calculate expected return based on CAPM\n    capm_expected_return = risk_free_rate + portfolio_beta * equity_risk_premium\n    \n    # Jensen's alpha is the difference between actual expected return and CAPM expected return\n    jensens_alpha = expected_portfolio_return - capm_expected_return\n    \n    # return answer\n    return jensens_alpha\n\n# Call the function and print the result as per financing formatting standards (percentage)\nprint(f\"Jensen's Alpha: {solution() * 100:.2f}%\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-70",
        "question": "In regards to the capital asset pricing model, if the anticipated return for Bond 2 is 11.4% and the risk-free rate is 3%, what would be the expected market return?",
        "tables": [
            "| Expected Security Standard Deviation (%) | Beta |\n|------------------------------------------|------|\n| Security 1 25                            | 1.50 |\n| Security 2 15                            | 1.40 |\n| Security 3 20                            | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "The Capital Asset Pricing Model (CAPM) indicates that the expected return on a security is equal to the risk-free rate plus the product of the security's beta and the market risk premium (which is the difference between the expected market return and the risk-free rate).\n\nThe formula for the CAPM is:\n\n\\[ \\text{Expected return} = \\text{Risk-free rate} + \\text{Beta} \\times (\\text{Expected market return} - \\text{Risk-free rate}) \\]\n\nGiven:\n- The anticipated return for Security 2 (Bond 2) is 11.4% (which we'll treat as 0.114 in decimal form)\n- The risk-free rate is 3% (which we'll treat as 0.03 in decimal form)\n- The beta for Security 2 is 1.40\n\nWe can rearrange the formula to solve for the expected market return.\n\nLet's create the Python function to do this calculation.\n\n```python\n# Import package if needs\ndef solution():\n    # Define variables name and value\n    anticipated_return_security2 = 0.114  # Anticipated return for Security 2 (Bond 2)\n    risk_free_rate = 0.03  # Risk-free rate\n    beta_security2 = 1.40  # Beta for Security 2\n    \n    # Use CAPM formula rearranged to calculate expected market return\n    expected_market_return = ((anticipated_return_security2 - risk_free_rate) / beta_security2) + risk_free_rate\n    \n    # return answer\n    return expected_market_return\n\n# Example usage:\n# market_return = solution()\n# print(\"The expected market return is:\", market_return)\n```\n\nWhen you run this function, it will give you the expected market return based on the CAPM formula with the provided inputs."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-71",
        "question": "Given the factor covariance matrix for global equity and global bonds presented by Schultz in Exhibit 1, along with market factor sensitivities and residual risk displayed in Exhibit 2, what is the covariance between Market 1 and Market 2?",
        "tables": [
            "|           | Sensitivities |      | Residual Risk |\n|-----------|---------------|------|---------------|\n|           | Global Equity | Global Bonds |   |\n| Market 1  | 1.20          | 0.00 | 12.00%        |\n| Market 2  | 0.90          | 0.00 | 7.00%         |\n| Market 3  | 0.00          | 0.95 | 1.80%         |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "The program to answer the given question requires information from the factor covariance matrix for global equity and global bonds, which is referenced as Exhibit 1. However, Exhibit 1 is not provided in the question. To perform the covariance calculation, I would need the covariance between global equity and global bonds or the variances for each if they are uncorrelated.\n\nAssuming I had this information, the Python program to calculate the covariance between Market 1 and Market 2 using a factor model would look like this:\n\n```python\n# Import package if needs\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    # Assuming covariance_global_equity_global_bonds is from Exhibit 1 (Factor 1: Global Equity, Factor 2: Global Bonds)\n    covariance_global_equity_global_bonds = 0  # Placeholder value, needs the actual value from Exhibit 1\n    \n    # Sensitivities (beta coefficients)\n    beta_market1_global_equity = 1.20\n    beta_market2_global_equity = 0.90\n    beta_market1_global_bonds = 0.00\n    beta_market2_global_bonds = 0.00\n    # Assuming no covariance between global equity and global bonds since Exhibit 1 is not provided\n    \n    # Calculate covariance between Market 1 and Market 2 using factor model\n    # Cov(M1, M2) = Beta_M1_Equity * Beta_M2_Equity * Var(Equity) \n    #              + Beta_M1_Bonds * Beta_M2_Bonds * Var(Bonds) \n    #              + Beta_M1_Equity * Beta_M2_Bonds * Cov(Equity, Bonds) \n    #              + Beta_M1_Bonds * Beta_M2_Equity * Cov(Bonds, Equity)\n    \n    # Note: Since the beta values for bonds in both markets are 0, the terms involving them drop from the equation.\n    # Also, if we have assumed no covariance between global equity and global bonds, the last two terms are 0.\n    \n    # We also need the variance of global equity from Exhibit 1 (not provided in the question)\n    # Placeholder for variance of global equity\n    variance_global_equity = 0  # Placeholder value, needs the actual value from Exhibit 1\n    \n    # Calculate the covariance between Market 1 and Market 2\n    covariance_market1_market2 = (beta_market1_global_equity * beta_market2_global_equity * variance_global_equity)\n    \n    # Return answer\n    return covariance_market1_market2\n\n# Since we do not have Exhibit 1's data, executing this function will give an inaccurate result.\n# solution()\n```\n\nThis function assumes that the covariance between global equity and global bonds is zero and uses placeholder values for the variance of global equity. You would need to provide the actual values from Exhibit 1 for the program to work correctly. The calculation hinges on the formula for covariance in a factor model:\n\nCov(M1, M2) = β₁₁β₂₁Var(F₁) + β₁₂β₂₂Var(F₂) + β₁₁β₂₂Cov(F₁, F₂) + β₁₂β₂₁Cov(F₂, F₁)\n\nSince β for global bonds is 0 for both markets, the terms involving the variance of global bonds and the covariance terms are zero as well."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-72",
        "question": "What is the three-firm Herfindahl–Hirschmann Index for the sector, taking into account the market share information collected for a sector consisting of five firms?",
        "tables": [
            "| Company | Market Share (%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Market shares of the top three firms\n    market_shares = [35, 25, 20]\n    \n    # Do math calculation to get the answer\n    # Calculate the sum of squares of the market shares of the top three firms\n    HHI = sum(share ** 2 for share in market_shares)\n    \n    # return answer\n    return HHI\n\n# Example usage:\n# hhi_index = solution()\n# print(hhi_index)\n```\n\nWhen you run this function, it would calculate the HHI index by summing the squares of the top three firms' market shares."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-73",
        "question": "What is the financial leverage ratio for Business B, according to the balance sheet below, as of 31 December 2017?",
        "tables": [
            "|            | as of 31 December |    |\n|------------|------------------|----|\n| Assets     | 2016             | 2017 |\n| Cash and cash equivalents | 5 | 15 |\n| Short-term marketable securities | 5 | 15 |\n| Trade and other receivables | 15 | 5 |\n| Other non-financial assets | 5 | 18 |\n| Tax assets | 5 | 2 |\n| Total current assets | 35 | 55 |",
            "|                       |  as of  31 December  |     |    \n| ---------------       | :--------------:     | :-----:|    \n|   Assets              | 2016                 |  2017  |      \n| Total non-current assets | 65             |  55 |\n| Total assets         | 100                 | 110  |  \n| Equity and Liabilities |  |  |\n| Total current liabilities | 35 | 28 |\n| Total non-current liabilities | 45 | 45 |\n| Total liabilities | 80 | 73 |\n| Total equity | 20 | 37 |\n| Equity and liabilities | 100 | 110 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_2017 = 110\n    total_equity_2017 = 37\n    \n    # Financial leverage ratio is defined as Total Assets / Total Equity\n    financial_leverage_ratio_2017 = total_assets_2017 / total_equity_2017\n    \n    # return answer\n    return financial_leverage_ratio_2017\n\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-74",
        "question": "The bonds of a corporation named Whakatane and Co. are scheduled for settlement on 15 July 2014 and have several distinct attributes. Given these details, can you identify the discrepancy between the full and flat prices?",
        "tables": [
            "| Par value | $100.00 |\n|---|---|\n| Annual coupon rate | 8% |\n| Coupon payment frequency | Semiannual |\n| Coupon payment dates | 15 May and 15 November |\n| Maturity date | 15 November 2017 |\n| Day count convention | Actual/Actual |\n| Annual  yield to maturity | 5.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the discrepancy between the full and flat prices of the bond, we'll need to include the accrued interest from the last coupon date until the settlement date.\n\nHere's the Python program that performs the calculation:\n\n```python\nfrom datetime import datetime\n\ndef solution():\n    # Define bond characteristics\n    par_value = 100.00\n    annual_coupon_rate = 0.08  # 8%\n    periods_per_year = 2  # Semiannual coupon payments\n    coupon_payment = par_value * annual_coupon_rate / periods_per_year\n    maturity_date = datetime.strptime('15 November 2017', '%d %B %Y')\n    last_coupon_date = datetime.strptime('15 May 2014', '%d %B %Y')\n    settlement_date = datetime.strptime('15 July 2014', '%d %B %Y')\n    annual_yield_to_maturity = 0.055  # 5.5%\n\n    # Calculate time differences\n    days_since_last_coupon = (settlement_date - last_coupon_date).days\n    days_in_coupon_period = (datetime.strptime('15 November 2014', '%d %B %Y') - last_coupon_date).days\n\n    # Calculate the accrued interest\n    accrued_interest = (days_since_last_coupon / days_in_coupon_period) * coupon_payment\n\n    # Flat price is the price without accrued interest\n    # Full price is the price with accrued interest\n    flat_price = par_value * (1 + annual_yield_to_maturity / periods_per_year) ** (-(maturity_date - settlement_date).days / (365 / periods_per_year))\n    full_price = flat_price + accrued_interest\n\n    # Discrepancy between the full and flat prices\n    discrepancy = full_price - flat_price\n    \n    return discrepancy\n\n# Call the function and print the result\ndiscrepancy = solution()\nprint(f\"The discrepancy between the full and flat prices is: {discrepancy:.2f}\")\n```\n\nThis program defines the attributes of the bond, calculates the accrued interest based on the Actual/Actual day count convention, and then computes the full price and flat price to find the discrepancy between them. Finally, it prints out the discrepancy rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-75",
        "question": "A spreadsheet containing 108 monthly returns for shares in Saraswoti Inc is owned by Kaleb Perkins. He designs a software program that applies bootstrap resampling to generate 200 resamples from this Saraswoti data through sampling with replacement. Each resample comprises of 108 data points. The software programmed by Perkins computes the average of each of the 200 resamples, then determines that the mean of these 200 resample means equals 0.0261. The program subtracts 0.0261 from each of the 200 resample means, squares each of these 200 differences, and totals up the squared differences, resulting in 0.835. An estimate of the standard error of the sample mean is then calculated by the program. What is the estimated standard error of the sample mean?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "To estimate the standard error of the sample mean using bootstrap resampling, you can use the formula to calculate the standard deviation of the resample means:\n\nStandard Error = sqrt(sum of squared differences / (number of resamples - 1))\n\nLet's implement this in a Python function:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    resamples = 200\n    sum_of_squared_differences = 0.835\n    \n    # Do math calculation to get the answer\n    # We subtract 1 from the number of resamples since we're estimating the standard error\n    variance_estimate = sum_of_squared_differences / (resamples - 1)\n    standard_error = math.sqrt(variance_estimate)\n    \n    # return answer\n    return standard_error\n\n# Call the solution function and print the result for demonstration\nprint(solution())\n```\n\nThis program defines the required variables and calculates the estimated standard error of the sample mean using the provided data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-76",
        "question": "The financial institution formalized a $30 million credit facility agreement with Firm B, with an outstanding amount of $20 million. Firm B has minimal collateral, therefore, the financial institution estimated the probability of default to be 1% per annum. Because the collateral is industry-specific, the financial institution assigned a loss rate of 90%. What is the projected loss (EL) of the financial institution?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    exposure_at_default = 20000000  # $20 million outstanding amount\n    probability_of_default = 0.01   # 1% per annum\n    loss_given_default = 0.9        # 90% loss rate\n    \n    # Do math calculation to get the expected loss\n    expected_loss = exposure_at_default * probability_of_default * loss_given_default\n    \n    # return answer\n    return expected_loss\n\n# Calling the function to get the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-77",
        "question": "Reviewing the latest annual report for Fund VI (displayed in Exhibit 1) to assess Yushan's previous performance, what is the DPI value that Madan determines for Fund VI, taking into account a fund worth £300 million from 2011, management costs of 2%, a 20% carried interest, a 7% hurdle rate, and a term of 2018 up to 31st December 2016?",
        "tables": [
            "|                   | 2011 | 2012 | 2013 | 2014 | 2015 | 2016 |\n|-------------------|------|------|------|------|------|------|\n| Called Down       | 120  | 40   | 25   | 60   | 25   | 10   |\n| Realized Results  | 0    | 0    | 25   | 80   | 100  | 195  |\n| Unrealized Results| -15  | -35  | 35   | 25   | 35   | 60   |\n| Distributions     |      |      |      | 60   | 110  | 175  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the DPI (Distributions to Paid-In) value for Fund VI, we need to consider the distributions made by the fund, the paid-in capital (invested capital), and any management fees or carried interest.\n\nFirstly, let's calculate the management fee for each year by taking 2% of the fund worth in the respective year. Since the fund started with £300 million in 2011 and it's a fixed management fee based on the initial fund size, we'll assume the management fee is a constant amount each year.\n\nNext, we need to account for the carried interest, which is 20% of the profits exceeding the 7% hurdle rate. The Incentive Fee (carried interest) thus only applies if the fund's returns exceed a 7% return on the invested capital. We have to calculate cumulative profits each year to determine if the hurdle rate has been met and apply the carried interest to the profits exceeding the hurdle.\n\nWe will then subtract management fees and carried interest from the realized and unrealized results to find out how much capital has been returned or is available for return, relative to the paid-in capital. The DPI value is then calculated using total distributions divided by total contributed capital.\n\nNote that the data given does not mention how much of the £300 million has been called down, so we'll assume it's the sum of the called down amounts by the end of 2016. We'll also assume the 7% hurdle rate compounds annually, which is typical for private equity funds.\n\nHere is the Python program to calculate the DPI value:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_fund_size = 300000000  # £300 million\n    management_fee_rate = 0.02  # 2%\n    carried_interest_rate = 0.20  # 20%\n    hurdle_rate = 0.07  # 7%\n    years = [2011, 2012, 2013, 2014, 2015, 2016]\n    \n    # Initialize variables\n    called_down = [120, 40, 25, 60, 25, 10]\n    distributions = [0, 0, 0, 60, 110, 175]\n    management_fee = initial_fund_size * management_fee_rate\n    cumulative_paid_in = sum(called_down) * 1000000  # Convert to million\n    cumulative_distribution = sum(distributions) * 1000000  # Convert to million\n    cumulative_profit = 0\n    cumulative_carried_interest = 0\n    \n    for year in years:\n        cumulative_paid_in += called_down[year - years[0]] * 1000000\n        hurdle = initial_fund_size * ((1 + hurdle_rate) ** (year - years[0]))\n        actual_return = cumulative_distribution + cumulative_profit - cumulative_paid_in\n        if actual_return > hurdle:\n            carried_interest = (actual_return - hurdle) * carried_interest_rate\n            cumulative_carried_interest += carried_interest if carried_interest > 0 else 0\n    \n    # Total contribution adjusted for management fees and carried interest\n    total_paid_in_net = cumulative_paid_in - (management_fee * len(years)) - cumulative_carried_interest\n    \n    # DPI calculation\n    dpi_value = cumulative_distribution / total_paid_in_net\n    \n    # return DPI value\n    return dpi_value\n\n# Call the function and print the DPI value\ndpi_value = solution()\nprint(f\"The DPI value for Fund VI is: {dpi_value}\")\n```\nKeep in mind that, without more granular information about the timing of realized and unrealized results or other potential reinvestments from distributions, this calculation might be an approximation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-78",
        "question": "Provided the following: The cash flow from operations is:",
        "tables": [
            "| Revenue | $2,600,000 |\n| --- | --- |\n| Net profit margin | 35% |\n| Depreciation on PP&E | 180,000 |\n| Increase in accounts receivable | 90,000 |\n| Decrease in accounts payable | 70,000 |\n| Increase in inventory | 500,000 |\n| Gain on sale of equipment | 20,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 2600000\n    net_profit_margin = 0.35\n    depreciation = 180000\n    increase_in_receivables = 90000\n    decrease_in_payables = 70000\n    increase_in_inventory = 500000\n    gain_on_sale = 20000\n    \n    # Calculate Net Income\n    net_income = revenue * net_profit_margin\n    \n    # Adjust for non-cash and working capital changes to calculate Cash Flow from Operations\n    cash_flow_from_operations = (net_income + depreciation - increase_in_receivables - \n                                 increase_in_inventory + decrease_in_payables - gain_on_sale)\n    \n    # return answer\n    return cash_flow_from_operations\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-79",
        "question": "If the annual discount rate is 4% and it's compounded yearly, what is the (PV5) present value of $50,000, received as a cash flow at the end of the 20th year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 50000\n    discount_rate = 0.04\n    periods = 20\n    \n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + discount_rate) ** periods)\n    \n    # return answer\n    return present_value\n\n# To test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-80",
        "question": "Based on the following information, does Michael intend to price the interest rate swap? The annualized fixed swap rate is:",
        "tables": [
            "| Years | Present Value Factor |\n|-------|---------------------|\n| 0.25  | 0.997506            |\n| 0.5   | 0.992556            |\n| 0.75  | 0.985222            |\n| 1     | 0.975610            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the annualized fixed swap rate, it appears that necessary details like the payment frequency, notional amount, floating rate terms, or fixed payments are missing. However, assuming that you want to compute the annual fixed rate given the present value factors shown in the table provided, a typical approach would be to equate the present value of the fixed rate payments to the present value of the floating rate payments, which is usually assumed to be equivalent to the notional at the end of the swap (since the floating rate is assumed to reset to the market rate).\n\nIn a simple vanilla interest rate swap, the fixed payments are known at the outset, while the floating payments will vary with the interest rates. Given that we have the present value factors for each of the years, we can assume that these are the discount factors for the corresponding cash flows. For a plain vanilla swap, the cash flows are netted; hence, the value of the swap at inception should be zero. This means the present value of the fixed payments should equal the present value of the floating payments.\n\nFor simplicity, let's assume that the notional amount is 1 (which can represent $1, $100, $1,000, etc.), and the floating side will reset to par at the end. We can then write the equation for the fixed rate `R` as:\n\n\\[ R \\times 0.997506 + R \\times 0.992556 + R \\times 0.985222 + R \\times 0.975610 = 1 \\]\n\nBy solving this equation, we get the value for R which will be the annualized fixed swap rate.\n\nHere's the Python program to calculate this:\n\n```python\ndef solution():\n    # Define present value factors\n    pv_factors = [0.997506, 0.992556, 0.985222, 0.975610]\n    \n    # Initialize the sum of present value of fixed rate payments\n    pv_sum = sum(pv_factors)\n    \n    # Calculate the annualized fixed swap rate\n    fixed_swap_rate = 1 / pv_sum\n    \n    # return answer\n    return fixed_swap_rate\n    \n# To print the result\nprint(solution())\n```\n\nThis program will return the annualized swap rate based on the provided present value factors. Note that this calculation assumes a certain regularity of the payments and the absence of any additional swap features or payment details. In practice, the swap might have different conditions that would need to be taken into account."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-81",
        "question": "For the end of its fiscal year, Tangerine Inc. reported a net income of $200 million and an average of 50,000,000 common shares in circulation. There are 2,000,000 convertible preferred shares circulating that paid a yearly dividend of $5. Each preferred share can be converted into two common shares. What would be the diluted EPS?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 200000000 # Net income in dollars\n    common_shares_outstanding = 50000000 # Number of common shares\n    convertible_preferred_shares = 2000000 # Number of convertible preferred shares\n    preferred_dividend = 5 # Dividend per preferred share\n    conversion_ratio = 2 # Number of common shares each preferred share can be converted to\n\n    # Calculate dividends paid to preferred shareholders\n    total_preferred_dividends = convertible_preferred_shares * preferred_dividend\n    \n    # Adjust net income by subtracting preferred dividends\n    net_income_adjusted = net_income - total_preferred_dividends\n\n    # Calculate additional common shares for conversion\n    additional_common_shares = convertible_preferred_shares * conversion_ratio\n\n    # Calculate diluted shares outstanding\n    diluted_shares_outstanding = common_shares_outstanding + additional_common_shares\n\n    # Calculate diluted EPS\n    diluted_EPS = net_income_adjusted / diluted_shares_outstanding\n    \n    # return answer\n    return diluted_EPS\n\n# Call the function and print the result\nprint(f\"Diluted EPS: {solution()}\")\n```\n\nThe `solution()` function calculates the diluted earnings per share (EPS) for Tangerine Inc., taking into account the potential conversion of convertible preferred shares to common shares. The function starts by defining the necessary variables—net income, common shares outstanding, convertible preferred shares, dividend per preferred share, and the conversion ratio. It subtracts the total preferred dividends from the net income to adjust for the effect on earnings. Then, it calculates the additional common shares that would be issued upon conversion and finally computes the diluted EPS by dividing the adjusted net income by the diluted total number of shares outstanding."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-82",
        "question": "What is the covariance of the two investments? Presuming the portfolio's standard deviation is 27%.",
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| Equity | 40 | 30 |\n| Bond | 60 | 25 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the covariance between the two investments in a portfolio, we can make use of the portfolio standard deviation formula for a two-asset portfolio, which incorporates the weights and standard deviations of the individual securities as well as their covariance. The formula is:\n\n\\[ \\sigma_{p}^2 = w_{Equity}^2 \\times \\sigma_{Equity}^2 + w_{Bond}^2 \\times \\sigma_{Bond}^2 + 2 \\times w_{Equity} \\times w_{Bond} \\times Cov(Equity, Bond) \\]\n\nHere’s how we can translate this into a Python function, assuming we only need to solve for the covariance:\n\n```python\ndef solution():\n    # Define variables\n    weight_equity = 0.40  # Security weight for equity\n    weight_bond = 0.60    # Security weight for bond\n    std_dev_equity = 0.30  # Expected standard deviation for equity\n    std_dev_bond = 0.25    # Expected standard deviation for bond\n    portfolio_std_dev = 0.27  # Portfolio standard deviation\n\n    # Rearrange the portfolio standard deviation formula to solve for covariance\n    # portfolio_variance = sum of (weights squared * standard deviations squared) + \n    # 2 * weight_equity * weight_bond * covariance\n    # Then solve for covariance:\n    # covariance = (portfolio_variance - (weight_equity^2 * std_dev_equity^2 + weight_bond^2 * std_dev_bond^2)) \n    # / (2 * weight_equity * weight_bond)\n    \n    portfolio_variance = portfolio_std_dev ** 2\n    term_equity = (weight_equity ** 2) * (std_dev_equity ** 2)\n    term_bond = (weight_bond ** 2) * (std_dev_bond ** 2)\n    \n    covariance = (portfolio_variance - (term_equity + term_bond)) / (2 * weight_equity * weight_bond)\n    \n    return covariance\n    \n# You can then call the function and print the result to see the answer\nprint(solution())\n```\n\nMake sure to square the weights and standard deviations where appropriate, and to calculate the variance of the portfolio by squaring its standard deviation before you plug the values into the equation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-83",
        "question": "For the financial year-end, Everest Aqua Enterprises (EAE) announced a net profit of $12 million and an average of 2,000,000 ordinary shares circulating. The firm disbursed $800,000 as preferred dividends and there were 100,000 options with an average exercise price of $20 still to be exercised. Over the course of the year, EAE's average market price was $25 a share. What is EAE’s diluted EPS?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_profit = 12000000\n    preferred_dividends = 800000\n    average_shares = 2000000\n    options = 100000\n    exercise_price = 20\n    market_price = 25\n\n    # Calculate earnings available to common shareholders\n    earnings_to_common = net_profit - preferred_dividends\n\n    # Calculate the potential new average shares if options exercised\n    # Calculate the amount of money that the company will receive from exercising options\n    proceeds_from_options_exercise = options * exercise_price\n\n    # Calculate the number of shares that could be repurchased with that proceeds\n    shares_repurchased = proceeds_from_options_exercise / market_price\n    \n    # Calculate the new average shares considering the options\n    new_average_shares = average_shares + options - shares_repurchased\n\n    # Calculate diluted EPS\n    diluted_eps = earnings_to_common / new_average_shares\n\n    # return answer\n    return diluted_eps\n\n# Run the function and print the result\nprint(solution())\n```\n\nNote: The program calculates the diluted EPS by considering the options exercise and the number of shares that could be repurchased with the proceeds from the options' exercise. It then divides the earnings available to common shareholders by the new average shares to determine the diluted EPS."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-84",
        "question": "Jones mentions that the shift of a firm's ratings can affect the overall return of a bond asset. For instance, he chooses a 10-year maturity, 5% coupon bond presently trading at par and rated A+ by Moody's. He requests Smith to compute the anticipated total return over a one-year term assuming the bond is demoted by two notches and to figure out why the year-end duration for the bond is 6.9. Assuming no modification in market conditions and a horizontal yield curve and utilizing Table 2, what is the projected yield on Jones' demo bond over a one-year span?",
        "tables": [
            "| S&P Rating | G-Spread | S&P Rating | G-Spread |\n|------------|----------|------------|----------|\n| AAA        | 0.30     | A          | 1.00     |\n| AA+        | 0.45     | A-         | 1.10     |\n| AA         | 0.60     | BBB+       | 1.30     |\n| AA-        | 0.70     | BBB        | 1.45     |\n| A+         | 0.85     | BBB-       | 1.60     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_rating = 'A+'\n    downgraded_rating = 'A-'\n    coupon_rate = 0.05\n    par_value = 100\n    time_to_maturity = 10\n    duration = 6.9\n    years_passed = 1\n\n    # Initial bond price (since bond is trading at par)\n    initial_price = par_value\n\n    # Define G-Spread for initial and downgraded bond\n    g_spread_initial = 0.85 / 100  # since A+ has a G-Spread of 0.85%\n    g_spread_downgraded = 1.10 / 100  # since A- has a G-Spread of 1.10%\n\n    # Calculate yield to maturity (YTM) for initial and downgraded bond\n    # For bonds trading at par, YTM is equal to coupon rate for initial bond\n    ytm_initial = coupon_rate\n\n    # Total initial yield is sum of YTM and G-Spread for initial bond\n    total_yield_initial = ytm_initial + g_spread_initial\n\n    # Total yield is sum of YTM and G-Spread for downgraded bond\n    # YTM remains the same for flat yield curve, spread changes due to downgrade\n    total_yield_downgraded = ytm_initial + g_spread_downgraded\n\n    # Calculate the price of the bond after downgrade, applying the new yield\n    # Approximation using duration (since exact formula would require iterative solution)\n    price_change = -duration * years_passed * (total_yield_downgraded - total_yield_initial) * initial_price\n    end_price = initial_price + price_change\n\n    # Calculate interest payment for the year\n    interest_payment = coupon_rate * par_value\n\n    # Calculate total return as coupon payment plus price change, divided by initial price\n    total_return = ((interest_payment + price_change) / initial_price) * 100  # in percentage\n\n    return total_return\n\n# The program does not output because the logic is not correct. I will correct it and then uncomment the output.\n\n# print(solution())\n```\n\nThe logic in the above answer contains an error concerning the computation of bond price change. The price of the bond after a downgrade is determined mainly by the new required yield in the market, but this cannot be computed using the formula provided. Additionally, the spread adjustments quoted in the table are G-Spreads, not total yield. The return cannot be simply computed without correctly adjusting the bond price after a downgrade.\n\nHere is the correct Python program for the calculation:\n```python\ndef solution():\n    # Define variables name and value\n    # Initial bond data\n    initial_rating = 'A+'\n    coupon_rate = 0.05\n    par_value = 100\n    years_to_maturity = 10\n    year_end_duration = 6.9  # Given\n\n    # Current rating's G-Spread\n    initial_g_spread = 0.85 / 100  # A+\n\n    # Rating after downgrade by two notches; A+ -> A -> A-\n    downgraded_rating = 'A-'\n    downgraded_g_spread = 1.10 / 100  # A-\n\n    # The face value of the bond and the fact that it is trading at par implies its market price is also 100.\n\n    # Assuming a flat yield curve and no change in market conditions, the YTM before and after the downgrade would be the same.\n    # The coupon rate is the YTM for bonds trading at par.\n    ytm = coupon_rate\n\n    # Interest income received for the year\n    interest_income = coupon_rate * par_value\n\n    # Change in yield due to downgrade; G-Spread change represents the increase in yield required by market for lower credit quality.\n    yield_change_due_to_downgrade = downgraded_g_spread - initial_g_spread\n    \n    # Estimating price change due to downgrade using the duration (modified duration approx formula: ΔP ≈ -Dmod × Δy × P)\n    price_change_due_to_downgrade = -year_end_duration * yield_change_due_to_downgrade * par_value\n\n    # New price of the bond after downgrade\n    new_price_after_downgrade = par_value + price_change_due_to_downgrade\n\n    # The total return over the year is the sum of interest income and the price change.\n    total_return = (interest_income + price_change_due_to_downgrade) / par_value\n\n    return total_return\n    \n# Uncomment the line below to run the function and print the result.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-85",
        "question": "What's the return on investment for a three-year holding period?",
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2015 | 5         |\n| 2016 | -8        |\n| 2017 | 10        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [5, -8, 10]\n    \n    # Convert percentage returns to multiplicative factors\n    factors = [(1 + r / 100) for r in returns]\n    \n    # Calculate the cumulative return by multiplying the factors\n    cumulative_return = 1\n    for factor in factors:\n        cumulative_return *= factor\n    \n    # Convert back to percentage and subtract the initial investment (1.0 = 100%)\n    three_year_return = (cumulative_return - 1) * 100\n    \n    # return answer\n    return three_year_return\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-86",
        "question": "A financier invested $500 million in a hedge fund with a \"2 and 20\" fee arrangement. The management fee is determined by the assets under management at the end of the year, and the incentive fee is based on an 8% hurdle rate. If the hedge fund appreciates by 20% at the end of the year, what is the net return if the incentive fee is calculated after the management fee?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    initial_investment = 500e6\n    management_fee_percent = 0.02  # 2% management fee\n    incentive_fee_percent = 0.20  # 20% incentive fee\n    hurdle_rate = 0.08  # 8% hurdle rate\n    fund_appreciation_rate = 0.20  # fund appreciates by 20%\n    \n    # Calculate end of year investment value before fees\n    end_of_year_value = initial_investment * (1 + fund_appreciation_rate)\n    \n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_percent\n    \n    # Calculate new fund value after management fee\n    post_management_fee_value = end_of_year_value - management_fee\n    \n    # Calculate performance fee only if returns exceed hurdle rate\n    incentive_fee = 0\n    if fund_appreciation_rate > hurdle_rate:\n        # incentive fee is based on the returns in excess of the hurdle rate\n        incentive_fee = (end_of_year_value - initial_investment * (1 + hurdle_rate)) * incentive_fee_percent\n    \n    # Calculate net end of year value after all fees\n    net_end_of_year_value = post_management_fee_value - incentive_fee\n    \n    # Calculate net return\n    net_return = (net_end_of_year_value - initial_investment) / initial_investment\n    \n    return net_return\n\n# Call the function to get the answer\nnet_return = solution()\nprint(net_return)  # For illustration if you want to see the result\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-87",
        "question": "Bright Blossom Ltd., a garden supply wholesale company, announced an annual cost of goods sold amounting to $80 million. The total properties increased by $55 million, incorporating a rise of $5 million in their stocks. The total obligations increased by $45 million, which also includes a $2 million rise in bills to be paid. What is the probable amount of cash that the company has paid to its vendors?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 80000000  # The annual cost of goods sold\n    total_properties_increase = 55000000  # The total properties increased\n    stocks_increase = 5000000  # The rise of stocks\n    total_obligations_increase = 45000000  # The total obligations increased\n    bills_payable_increase = 2000000  # The rise in bills to be paid\n\n    # Do math calculation to get the answer\n    # Calculate increase in properties excluding stocks, which means increase in liabilities towards vendors\n    increase_in_liabilities_toward_vendors = total_properties_increase - stocks_increase\n    # Subtract increase in total obligations that is not related to vendors (exclude bills payable increase)\n    cash_paid_to_vendors = cost_of_goods_sold + increase_in_liabilities_toward_vendors - (total_obligations_increase - bills_payable_increase)\n    \n    # return answer\n    return cash_paid_to_vendors\n\n# The function call\nprint(solution())\n```\n\nIn the program above:\n\n1. We first define all the variables according to the values provided in the question.\n2. We calculate the increase in liabilities toward vendors by taking the total property increase and subtracting the increase in stocks, since the increase in stocks is not a liability towards vendors.\n3. We then calculate the actual cash paid to vendors by adding the cost of goods sold to the calculated increase in liabilities toward vendors and subtracting the increase in obligations that are not related to vendors (excluding the increase in bills payable).\n4. Finally, we return the calculated amount of cash paid to vendors."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-88",
        "question": "Claire Smith, CFA, has been tasked with examining Shyrdak. Smith anticipates that Shyrdak's earnings and dividends will experience a consistent growth rate of 13 percent. The financial statements for the most recent two years (2007 and 2008) along with other details for Shyrdak are supplied in Exhibits 1 and 2. These exhibits offer actual 2007 and 2008 Financial Statements as of May 31st (in Millions exceptPer-ShareData) and selected Financial Information respectively. Based on the data from Exhibits 1 and 2 and Smith's projections for Shyrdak, what are the justified forward P/Es for this company?",
        "tables": [
            "| Income Statement        | 2007  | 2008  |\n|------------------------ |-------|-------|\n| Revenue                 | $474  | $598  |\n| Depreciation            | 20    | 23    |\n| Other operating costs   | 368   | 460   |\n| Income before taxes     | 86    | 115   |\n| Taxes                   | 26    | 35    |\n| Net income              | 60    | 80    |\n| Dividends               | 18    | 24    |\n| Earnings per share      | $0.714| $0.952|\n| Dividends per share     | $0.214| $0.286|\n| Common shares outstanding|84.0  | 84.0  |",
            "| Required rate of ROE | 14% |\n|----------------------|-----|\n| Growth rate of industry | 13% |\n| Industry P/E | 26 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the justified forward price-to-earnings (P/E) ratio for Shyrdak, we will use the Gordon growth model (also known as the dividend discount model for a perpetuity) which states that the price of a stock is equal to the dividend per share in the next period (D1) divided by the required rate of return (r) minus the constant growth rate (g).\n\nThe formula for the justified forward P/E is:\n\\[ \\text{Justified Forward P/E} = \\frac{D1}{P0 \\cdot (r - g)} \\]\nWhere:\n- \\( D1 \\) is the dividend per share expected next year.\n- \\( P0 \\) is the current stock price, which we will calculate as the current earnings per share multiplied by the industry P/E (since the actual stock price is not given).\n- \\( r \\) is the required rate of return on equity (ROE).\n- \\( g \\) is the growth rate.\n\nGiven that both earnings and dividends are expected to grow at a consistent rate (g) of 13%, we can calculate D1 as the dividend per share in 2008 increased by the growth rate.\n\nLet's write a Python program to calculate the justified forward P/E for Shyrdak.\n\n```python\ndef solution():\n    # Define variables name and value\n    dividends_per_share_2008 = 0.286  # Dividends per share in 2008\n    required_rate_of_return = 0.14    # Required rate of ROE\n    growth_rate = 0.13                # Growth rate of industry\n    industry_pe = 26                  # Industry P/E ratio\n    earnings_per_share_2008 = 0.952   # Earnings per share in 2008\n    \n    # Calculate D1\n    dividends_per_share_next_year = dividends_per_share_2008 * (1 + growth_rate)\n    \n    # Calculate P0 (current stock price approximation)\n    current_stock_price = earnings_per_share_2008 * industry_pe\n    \n    # Calculate Justified Forward P/E\n    justified_pe = dividends_per_share_next_year / ((current_stock_price) * (required_rate_of_return - growth_rate))\n    \n    # Return answer\n    return justified_pe\n    \n# Call the function and print the result\nprint(f\"Justified Forward P/E: {solution():.2f}\")\n```\nRemember to run the function `solution()` to execute this calculation and get the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-89",
        "question": "If Sarah desires to forecast her nation's tax revenue, she chooses GDP, Fiscal expenditure and RPI (Retail Price Index) as three independent variables. She finds that this year's GDP is 104790.6, Fiscal expenditure is 22053.15, and RPI is 98.7. What is the expected value of the tax revenue for this year?",
        "tables": [
            "| Variable          | Coefficient | Std. Error | t-Statistic |\n|-------------------|-------------|------------|-------------|\n| Intercept         | -2582.791   | 940.613    | -2.746      |\n| GDP               | 0.022       | 0.006      | 3.667       |\n| Fiscal Expenditure| 0.702       | 0.033      | 21.273      |\n| RPI               | 23.985      | 8.738      | 2.745       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = -2582.791\n    gdp_coefficient = 0.022\n    fiscal_expenditure_coefficient = 0.702\n    rpi_coefficient = 23.985\n\n    # Values of independent variables\n    gdp = 104790.6\n    fiscal_expenditure = 22053.15\n    rpi = 98.7\n\n    # Do math calculation to get the expected value of the tax revenue\n    expected_tax_revenue = (\n        intercept +\n        gdp_coefficient * gdp +\n        fiscal_expenditure_coefficient * fiscal_expenditure +\n        rpi_coefficient * rpi\n    )\n    \n    # return answer\n    return expected_tax_revenue\n\n# You can run this function and it will return the expected value of the tax revenue\n# print(solution())  # Uncomment this line to print the result if needed\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-90",
        "question": "What is the maximum leverage ratio for a position financed by a minimum margin requirement of 55 percent, as set by an internet-based trading company?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program that calculates the maximum leverage ratio based on a minimum margin requirement:\n\n```python\ndef solution():\n    # Define variables name and value\n    minimum_margin_requirement = 0.55  # 55 percent expressed as a decimal\n\n    # Do math calculation to get the answer\n    # Leverage ratio is the inverse of the margin requirement\n    maximum_leverage_ratio = 1 / minimum_margin_requirement\n    \n    # return answer\n    return maximum_leverage_ratio\n\n# You can call the function and print the answer if you want to execute the program\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-91",
        "question": "The stock collection has a market value of $6,000,000. The retirement fund is planning to use a futures contract priced at $250,000 to raise the beta from 0.9 to 1.2 for a span of one month. The futures contract has a beta of 0.95. After one month, the return of the stock market is 5%, the market value of the stock collection becomes $6,250,000, and the cost of the futures contract is $262,000. What is the effective beta of the stock element of the fund?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program that calculates the effective beta of the stock element of the fund:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_stock_value = 6000000\n    final_stock_value = 6250000\n    initial_futures_price = 250000\n    final_futures_price = 262000\n    target_beta = 1.2\n    actual_stock_return = 0.05\n    futures_beta = 0.95\n    \n    # Calculate the change in value of the stock collection and the futures contract\n    change_stock_value = final_stock_value - initial_stock_value\n    change_futures_value = final_futures_price - initial_futures_price\n    \n    # Calculate the returns of the stock collection and the futures contract\n    stock_return = change_stock_value / initial_stock_value\n    futures_return = change_futures_value / initial_futures_price\n    \n    # Calculate the effective beta of the stock element\n    # The effective beta is a weighted average of the stock's inherent beta and the beta added through the futures contract\n    # To isolate the beta of the stock element, we need to adjust for the contribution of the futures contract to the total return\n    # The return of the futures contract needs to be scaled by its beta (futures_beta) and the ratio of the futures contract's value to the stock collection's market value\n    value_ratio = initial_futures_price / initial_stock_value\n    adjusted_futures_return = futures_return * futures_beta * value_ratio\n    \n    # Subtract the futures return (scaled by beta and value ratio) from the stock's actual return to get the return that can be attributed solely to the stock\n    pure_stock_return = stock_return - adjusted_futures_return\n    \n    # The effective beta is the ratio of the pure stock return to the market return (which is 5% in this case)\n    effective_beta = pure_stock_return / actual_stock_return\n    \n    # return effective beta\n    return effective_beta\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe above program will calculate the effective beta of the stock element after considering the impact of the futures contract used to adjust the beta of the portfolio. The effective beta reflects the sensitivity of the stock element of the fund to the overall market movements, excluding the impact of the futures."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-92",
        "question": "You are creating models to predict earnings per share for two building firms, X and Y. The likelihood of Firm X's EPS growing by the year's end stands at 0.45. The chance of Firm Y's EPS swelling by the end of the year is 0.25. The probability that both firms' EPS will hike is 0.10. According to the predictive models, what is the likelihood that the EPS of at least one of these building firms will surge?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_firm_x = 0.45\n    prob_firm_y = 0.25\n    prob_both = 0.10\n    \n    # The probability that at least one of the two firms will have an EPS hike is given by the formula:\n    # P(At least one EPS hike) = P(Firm X) + P(Firm Y) - P(Both)\n    prob_at_least_one = prob_firm_x + prob_firm_y - prob_both\n    \n    # return answer\n    return prob_at_least_one\n    \n# To test the function (you can comment out this line or remove it if you don't want to test anymore)\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-93",
        "question": "Firms A and B start the year with the same book value of equity and identical tax rates. They have the same transactions all year and report them in the same way, except for one. Both firms purchase a printer worth £300,000 with a lifespan of three years and a salvage value of £0 at the start of the year. Firm A capitalizes the printer and depreciates it using a straight-line method, while Firm B expenses the printer. The following information is collected for Firm A at the end of the year. Given this information, what would be Firm B's return on equity using year-end equity?",
        "tables": [
            "|                        | Company X      |\n|------------------------|----------------|\n|                        | As of 31 December |\n| Ending shareholders' equity | £10,000,000   |\n| Tax rate               | 25%            |\n| Dividends              | £0.00          |\n| Net income             | £750,000       |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Given data for Company X (Firm A) as reference\n    shareholders_equity_a = 10000000  # Ending shareholders' equity for Firm A\n    net_income_a = 750000  # Net income for Firm A\n    tax_rate = 0.25  # Tax rate for both firms\n    printer_cost = 300000  # Cost of the printer\n    printer_lifespan = 3  # Lifespan of the printer (in years)\n\n    # Calculate net income for Firm B\n    # Since Firm B expenses the printer, its cost would be subtracted from\n    # the pre-tax income. To calculate post-tax net income, we then apply\n    # the tax rate.\n    tax_savings_a = (printer_cost / printer_lifespan) * tax_rate\n    pre_tax_income_b = (net_income_a + tax_savings_a) / (1 - tax_rate)\n    net_income_b = pre_tax_income_b * (1 - tax_rate) - printer_cost\n\n    # Since Firm B expenses the printer, its year-end equity would be reduced\n    # by the full cost of the printer.\n    shareholders_equity_b = shareholders_equity_a - printer_cost\n\n    # Calculate the Return on Equity for Firm B using year-end equity\n    return_on_equity_b = net_income_b / shareholders_equity_b\n\n    # Return the answer\n    return return_on_equity_b\n\n# Call the solution() function and print its result\nprint(solution())\n```\n\nThis program defines the variables based on the information given for Company X and then calculates the net income and return on equity for Firm B given that it expenses the printer rather than capitalizes it. It uses the tax rate and other information to adjust for the impact of the printer expense and determine Firm B's year-end equity and net income accordingly. Then it calculates and returns Firm B's return on equity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-94",
        "question": "Assuming that active returns do not correlate, according to the basic law of active management, how many securities would a fund overseen by an investment strategist with a 0.75 information ratio, a 0.1819 information coefficient, and a transfer coefficient of 1.0 contain?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\n# Import package if needed (no packages needed for this calculation)\ndef solution():\n    # Define variables name and value\n    information_ratio = 0.75\n    information_coefficient = 0.1819\n    transfer_coefficient = 1.0\n    \n    # Do math calculation to get the answer\n    # Using the basic law of active management to find the breadth (number of securities)\n    # IC: Information Coefficient, TC: Transfer Coefficient, IR: Information Ratio\n    # IR = IC * sqrt(Breadth) * TC\n    # Breadth = (IR / (IC * TC)) ^ 2\n    breadth = (information_ratio / (information_coefficient * transfer_coefficient)) ** 2\n    \n    # return answer\n    return breadth\n\n# Uncomment the line below to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-95",
        "question": "John is trying to forecast the sales volume of his store in December 20X8, therefore he utilizes the sales volume from January 20X7 to November 20X8 as examples to create a linear trend model and obtains the following result: ŷt =264.75+2.58t. What is the anticipated sales volume of December 20X8?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # The given linear trend model is ŷt = 264.75 + 2.58t\n    \n    # We need to find the value of 't' for December 20X8\n    # Since January 20X7 is the starting point and equals to t=1,\n    # we would consider December 20X8 as t=23\n    # (12 months for 20X7, and 11 months for 20X8 = 23)\n    \n    t_Dec_20X8 = 23\n    \n    # Now we apply the linear model to calculate the anticipated sales volume\n    anticipated_sales_volume = 264.75 + 2.58 * t_Dec_20X8\n    \n    # return the anticipated sales volume\n    return anticipated_sales_volume\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-96",
        "question": "Based on the given data, can you compute the forward premium for a half-year RMB/USD forward agreement?",
        "tables": [
            "| Spot rate (RMB/USD) | 6.7659 |\n|---|---|\n| 180-day Libor(RMB) | 4.80% |\n| 180-day Libor(USD) | 3.55% |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the forward premium, you can use the following formula derived from the interest rate parity theory:\n\nForward Premium (FP) = Spot Rate * [(1 + foreign interest rate)/(1 + domestic interest rate)] - Spot Rate\n\nIn this scenario, the domestic currency is RMB and the foreign currency is USD. You should express the interest rates in a comparable format, ensuring they're both for the same time period (180 days in this case).\n\nLet's calculate the forward premium using the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 6.7659  # RMB/USD\n    foreign_interest_rate = 0.0355  # For a half year (180 days)\n    domestic_interest_rate = 0.0480  # For a half year (180 days)\n    \n    # Do math calculation to get the answer\n    forward_rate = spot_rate * ((1 + foreign_interest_rate) / (1 + domestic_interest_rate))\n    forward_premium = forward_rate - spot_rate\n    \n    # return answer\n    return forward_premium\n\n# Example usage:\n# forward_premium_value = solution()\n# print(forward_premium_value)\n```\n\nPlease note: The interest rates provided should be converted from annual rates to the 180-day equivalent if they are not already in the correct format, which can involve dividing them by 2 for a rough approximation. This depends on the compounding convention (here we assumed simple interest, but for more accuracy, compounded interest might need to be considered)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-97",
        "question": "If a risk analyst supposes the joint distribution of returns is multivariate normal and calculates the ensuing risk measures for a portfolio of two assets: what would be the decrease in portfolio VAR if we eliminate asset 2?",
        "tables": [
            "| Asset | Position | Individual VAR | Marginal VAR | VAR Contribution |\n|-------|----------|----------------|--------------|------------------|\n| 1     | USD 100  | USD 23.3       | 0.176        | USD 17.6         |\n| 2     | USD 100  | USD 46.6       | 0.440        | USD 44.0         |\n| Total | USD 200  | USD 61.6       |              | USD 61.6         |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and the value\n    portfolio_var_before = 61.6\n    var_contribution_asset_2 = 44.0\n    # Calculate the new portfolio VAR after eliminating asset 2\n    # Since VAR is sub-additive for multivariate normal distributions, \n    # we can simply subtract the VAR contribution of asset 2 from the total portfolio VAR\n    portfolio_var_after = portfolio_var_before - var_contribution_asset_2\n    \n    # The decrease in portfolio VAR is then the difference in VAR before and after eliminating asset 2\n    decrease_in_var = portfolio_var_before - portfolio_var_after\n    \n    # return the decrease in portfolio VAR\n    return decrease_in_var\n\n# Example usage:\n# decrease_in_var = solution()\n# print(decrease_in_var) # Output should be the decrease in VAR if we eliminate asset 2\n```\n\nThe `solution` function calculates the decrease in the portfolio VAR if asset 2 is eliminated by subtracting the VAR contribution of asset 2 from the total portfolio VAR. This is a valid approach when dealing with multivariate normal distributions, where risk measures such as VAR are sub-additive, meaning the risk of the portfolio is less than or equal to the sum of the individual risks."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-98",
        "question": "The portfolio manager of AB pension, Jacques, has recently contemplated incorporating PZ Inc. (New York Stock Exchange: PZ) into the portfolio. Instead of utilizing the two-stage DDM, Jacques intends to use his forecast that the stock of PZ will be valued at 20 times its earnings per share (trailing P/E of 20) in 4 years. With a projected earnings retention ratio of 0.6 and a dividend of $ 0.3461 at that point, what will be the terminal value of the stock according to this method?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    dividend = 0.3461\n    retention_ratio = 0.6\n    trailing_pe = 20\n    \n    # Calculate growth rate using the retention ratio and the payout ratio\n    # The growth rate formula is g = retention ratio * return on equity (ROE)\n    # Since ROE is not given, we will assume with the retention ratio alone, all retained earnings are reinvested at the ROE rate.\n    # So, g = retention ratio\n    growth_rate = retention_ratio\n    \n    # Calculate expected earnings in 4 years\n    # The formula for future earnings is E1 = E0 * (1 + g)^n\n    # We are given the current dividend and can compute current earnings (E0) assuming all earnings not paid as dividends are retained\n    # Divide the dividend by (1 - retention_ratio) to find the earnings, because retention_ratio = (Earnings - Dividends) / Earnings\n    # Hence, Dividends = Earnings * (1 - retention_ratio)\n    earnings = dividend / (1 - retention_ratio)\n    \n    # Calculate earnings in 4 years using the growth rate\n    future_earnings = earnings * ((1 + growth_rate)**4)\n    \n    # The terminal value of the stock is future earnings times the trailing P/E\n    terminal_value = future_earnings * trailing_pe\n    \n    return terminal_value\n    \n# Call the solution function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-99",
        "question": "Compute the correlation of the two properties: return variance of property X: 0.16, return variance of property Y: 0.09, covariance between the returns of X and Y: 0.009.",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Certainly! Here's a Python program to compute the correlation between the two properties given their return variances and covariance.\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    variance_X = 0.16\n    variance_Y = 0.09\n    covariance_XY = 0.009\n    \n    # Do math calculation to get the answer\n    correlation_XY = covariance_XY / math.sqrt(variance_X * variance_Y)\n    \n    # return answer\n    return correlation_XY\n\n# Calling the function to get the answer\nprint(solution())\n```\n\nThis function calculates the correlation between property X and property Y using the given variance and covariance values. The correlation is the covariance divided by the product of the standard deviations (square root of the variances) of X and Y."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-100",
        "question": "What is the standard deviation of return for a portfolio made up of Investment X and Investment Y?",
        "tables": [
            "|                                             | Fund A | Fund B |\n|---------------------------------------------|--------|--------|\n| Portfolio weights (%)                       | 70     | 30     |\n| Expected returns (%)                        | 10     | 16     |\n| Standard deviations (%)                     | 7      | 13     |\n| Correlation between the returns of Fund A and Fund B | 0.80 |      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_A = 70 / 100  # Portfolio weight of Fund A\n    weight_B = 30 / 100  # Portfolio weight of Fund B\n    exp_return_A = 10 / 100  # Expected return of Fund A\n    exp_return_B = 16 / 100  # Expected return of Fund B\n    std_dev_A = 7 / 100  # Standard deviation of Fund A\n    std_dev_B = 13 / 100  # Standard deviation of Fund B\n    corr_AB = 0.80  # Correlation between the returns of Fund A and Fund B\n\n    # Calculate portfolio standard deviation using the formula:\n    # √(wᴬ² * stdᴬ² + wᴮ² * stdᴮ² + 2 * wᴬ * wᴮ * corrᴬᴮ * stdᴬ * stdᴮ)\n    portfolio_variance = (\n        (weight_A ** 2) * (std_dev_A ** 2) +\n        (weight_B ** 2) * (std_dev_B ** 2) +\n        2 * weight_A * weight_B * corr_AB * std_dev_A * std_dev_B\n    )\n    portfolio_std_dev = math.sqrt(portfolio_variance)\n\n    # Return the standard deviation percentage\n    return portfolio_std_dev * 100\n\n# You can uncomment the following lines to check if the function works correctly:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-101",
        "question": "George Smith and his group gather a lot of analytical and statistical information about the automobile market. Based on this information, they infer that the average cost of SUVs exceeds $46,435 in their nation. Following this, they randomly pick 64 SUVs with an average cost of $46,760. The standard deviation of this sample is assumed to be 1370. George Smith performs a hypothesis test to validate their inference. At what significance level should George Smith reject the null hypothesis?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To answer this question, we need to perform a hypothesis test using the sample data to determine whether the average cost of SUVs is indeed greater than $46,435 (the null hypothesis). We will assume George is conducting a one-sample t-test with the following two hypotheses:\n\n- Null Hypothesis, H0: The mean cost of SUVs is less than or equal to $46,435.\n- Alternative Hypothesis, H1: The mean cost of SUVs is greater than $46,435.\n\nWe can use the sample mean, standard deviation, and size to calculate the t-statistic and then use this value to determine the p-value. The p-value will tell us the significance level at which we can reject the null hypothesis.\n\nHere's a Python program that calculates the significance level:\n\n```python\nfrom scipy.stats import t\n\ndef solution():\n    # Define variables\n    sample_mean = 46760\n    hypothesized_mean = 46435\n    sample_stddev = 1370\n    sample_size = 64\n    df = sample_size - 1  # degrees of freedom\n\n    # Calculate t-statistic\n    t_statistic = (sample_mean - hypothesized_mean) / (sample_stddev / (sample_size ** 0.5))\n    \n    # Calculate p-value for a one-tailed test\n    p_value = 1 - t.cdf(t_statistic, df)\n    \n    # return p_value as the significance level (alpha)\n    return p_value\n\n# Call the function and print the p-value\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-102",
        "question": "A financial performance evaluator is working on some performance indicators for portfolio XYZ. Portfolio XYZ has a projected return of 9%, a volatility of 21%, and a beta of 0.3. If the riskless rate is 3%, what is the Treynor ratio of portfolio XYZ?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here is the Python program to calculate the Treynor ratio for portfolio XYZ.\n\n```python\ndef solution():\n    # Define variables name and value\n    projected_return = 0.09  # Portfolio projected return\n    beta = 0.3               # Portfolio beta\n    riskless_rate = 0.03     # Riskless rate\n    \n    # Do math calculation to get the answer\n    treynor_ratio = (projected_return - riskless_rate) / beta\n    \n    # return answer\n    return treynor_ratio\n\n# Calling the function and printing the result\nprint(solution())\n```\n\nThis program defines the projected return, beta, and riskless rate. Then it calculates the Treynor ratio by subtracting the riskless rate from the projected return and dividing by the beta of the portfolio. Finally, the function returns the Treynor ratio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-103",
        "question": "The monthly return correlation of equities in a portfolio adheres to the law of mean reverting and the long-term monthly return correlation is approximately 30%. Upon carrying out regression, we determine the mean reverting rate to be around 0.8. If the current month's return correlation is 56%, what would be the projected next monthly return correlation of equities in the portfolio?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here's the Python program using the given details:\n\n```python\ndef solution():\n    # Define variables name and value\n    long_term_correlation = 0.3\n    reverting_rate = 0.8\n    current_correlation = 0.56\n    \n    # Do math calculation to get the projected next monthly return correlation\n    # The formula for the mean reverting process is:\n    # next_correlation = long_term_correlation + (current_correlation - long_term_correlation) * (1 - reverting_rate)\n    next_correlation = long_term_correlation + (current_correlation - long_term_correlation) * (1 - reverting_rate)\n    \n    # return answer\n    return next_correlation\n\n# This will print out the computed answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-104",
        "question": "A Chinese business organization primarily exports products to US and offers 90 days credit term to US firms. The transactions are settled in USD. The organization from China is concerned that the USD will lose its value and wants to hedge the potential risk by engaging in a short forward contract. The local risk-free rate is 4% and the foreign risk-free rate is 2%. The current spot rate is 6.7523￥per $. What is the cost of the forward contract?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Below is the Python program designed to calculate the cost of the forward contract based on the given parameters:\n\n```python\ndef solution():\n    # Given variables\n    local_risk_free_rate = 0.04     # Local risk free rate (China)\n    foreign_risk_free_rate = 0.02   # US risk free rate\n    spot_rate = 6.7523              # Current spot rate (￥/$)\n    days_in_year = 365              # Number of days in a year\n    forward_contract_days = 90      # Number of days for the credit term\n    \n    # Calculate the forward rate based on interest rate parity\n    forward_rate = spot_rate * ((1 + local_risk_free_rate) ** (forward_contract_days / days_in_year)) \\\n                              / ((1 + foreign_risk_free_rate) ** (forward_contract_days / days_in_year))\n    \n    # Calculate the cost of the forward contract\n    cost_of_forward_contract = forward_rate - spot_rate\n    \n    # return the result\n    return cost_of_forward_contract\n\n# Call the function and print result to validate\nprint(solution())\n```\n\nThis function calculates the cost of the forward contract by first determining the forward exchange rate using the interest rate parity formula which considers the time period of the forward contract and the local and foreign risk-free interest rates. Then, it computes the cost of the forward contract by subtracting the current spot rate from the calculated forward rate. The returned value is the cost of the forward contract."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-105",
        "question": "What is the holding period return for a trader who purchased 200 shares at $20 each and later sold them all at $22.5 per share, after obtaining a dividend of $0.2 per share for a quarter?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Certainly! Below is a Python program to calculate the holding period return for the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_purchased = 200\n    purchase_price_per_share = 20\n    selling_price_per_share = 22.5\n    dividend_per_share = 0.2\n    \n    # Calculate total purchase price\n    total_purchase_price = shares_purchased * purchase_price_per_share\n    # Calculate total sale price\n    total_sale_price = shares_purchased * selling_price_per_share\n    # Calculate total dividends obtained\n    total_dividends = shares_purchased * dividend_per_share\n    \n    # Calculate holding period return\n    holding_period_return = ((total_sale_price - total_purchase_price) + total_dividends) / total_purchase_price\n    \n    # return answer\n    return holding_period_return\n\n# Call the function and print the answer\nprint(solution())  # If you want to execute and display the result\n```\n\nThis program will calculate the total holding period return by considering the purchase cost, the selling revenue, and the dividends received. The return is computed as the sum of capital gains (or losses) and dividend income, divided by the initial investment cost."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-106",
        "question": "An analyst from an international securities firm's research department, named John Thronen, is working on a research report for Topmaker, Inc. This publicly-traded company adheres to IFRS. Now, a company named Castello Corp. has a plan to generate $40 million in capital through loans backed by its financial receivables. The plan entails formation of a special-purpose entity (SPE), injecting $10 million into the SPE, getting the SPE to secure a $40 million loan, and then use this capital to acquire $50 million worth of receivables from Castello Corp. Castello Corp., which fits the concept of control, aims to consolidate the SPE, with its balance sheet displayed in Exhibit 1. Considering Exhibit 1 and Castello Corp.'s method of lending against its financial receivables, what will the total assets on the consolidated balance sheet look like?",
        "tables": [
            "|                       |       |                         |       |\n|-----------------------|-------|-------------------------|-------|\n| **Exhibit 1. Blanca Co. Balance Sheet at 31 December 2016 ($ millions)** |       |                         |       |\n| Cash                 | 20    | Current liabilities     | 25    |\n| Accounts receivable  | 50    | Noncurrent liabilities  | 30    |\n| Other assets         | 30    | Shareholders' equity    | 45    |\n| Total assets         | 100   | Total liabilities and equity | 100   |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Given values from the Exhibit 1 balance sheet\n    existing_total_assets = 100  # already in $ millions\n\n    # Value of receivables the SPE will buy from Castello Corp.\n    value_of_receivables = 50  # $ millions\n\n    # After SPE acquires $50 million in receivables from Castello Corp.,\n    # these will not be part of Castello Corp's balance sheet anymore.\n    # However, since Castello Corp. retains control over the SPE,\n    # it must consolidate the SPE's balance sheet with its own.\n    # The SPE initially has $10 million capital,\n    # it borrows $40 million, and uses all $50 million to buy receivables.\n    # The SPE assets (receivables) will then be consolidated on Castello Corp.'s balance sheet.\n\n    # Now, we add the SPE's assets to Castello Corp.'s assets for the consolidated total assets\n    consolidated_total_assets = existing_total_assets + value_of_receivables  # $ millions\n\n    # return the consolidated total assets\n    return consolidated_total_assets\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the total assets on the consolidated balance sheet by first taking the existing total assets from Exhibit 1 and then adding the value of the receivables that will be bought by the SPE. Since Castello Corp. controls the SPE, these assets must be consolidated onto Castello Corp.'s balance sheet."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-107",
        "question": "A buyer acquires an annual coupon bond with a 8% coupon rate and exactly 20 years left until maturity at a price equivalent to its par value. The buyer's investment horizon spans eight years. The approximate modified duration of the bond is 12.480 years. What is the duration gap at the moment of acquisition?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_horizon = 8\n    bond_duration = 12.480  # Modified duration of the bond\n    \n    # Calculate the duration gap\n    duration_gap = investment_horizon - bond_duration\n    \n    # return answer\n    return duration_gap\n\n# You could call the solution function to get the result if necessary, uncomment the next line\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-108",
        "question": "Brown is curious about how the change in seasons impacts the sales of the down jacket. He structures a regression model incorporating a dummy variable (1 for winter and 0 for summer) as an independent variable and the sales volume (in thousands) as the dependent variable and achieves the following outcomes: What is the variance in the sales volume between summer and winter in thousands?",
        "tables": [
            "|               | Coefficients | Standard Error | t-Statistic |\n|---------------|--------------|----------------|-------------|\n| Intercept     | 3.7642       | 2.5743         | 1.4622      |\n| Season dummy  | 20.5732      | 10.3958        | 1.9790      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Variable for coefficient of the season dummy\n    season_dummy_coefficient = 20.5732\n    \n    # The variance in sales volume between summer and winter in thousands\n    # is directly given by the coefficient of the season dummy variable.\n    variance_in_sales_volume = season_dummy_coefficient\n    \n    # Return the answer\n    return variance_in_sales_volume\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-109",
        "question": "An executive is looking to establish a synthetic tracker fund tied to the S&P 500. The primary investment stands at $500,000,000. Given that an S&P 500 futures contract is valued at $1,000 with a multiplier of $250, and considering a risk-free rate of 3% and a futures expiration in three months, how many futures contracts does he need to purchase?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To answer this question, we need to implement the concept of cash and carry arbitrage, which is used to price futures contracts based on the underlying asset's price, the risk-free rate, and the time to expiration. However, in this case, we will be using a simplified approach focusing only on the number of contracts needed to establish a synthetic tracker fund.\n\nThe cost of purchasing one futures contract is the future price times the multiplier. The total cost for the number of contracts needed would be equal to the primary investment. We can find the number of contracts by dividing the investment by the cost of one contract.\n\nHere is the implementation of the said program:\n\n```python\ndef solution():\n    # Define variables name and value\n    primary_investment = 500000000  # $500,000,000 primary investment\n    future_value = 1000             # $1,000 value of an S&P 500 futures contract\n    multiplier = 250                # $250 multiplier for the futures contract\n    \n    # The cost for purchasing one futures contract\n    cost_per_contract = future_value * multiplier\n    \n    # Number of futures contracts\n    num_contracts = primary_investment / cost_per_contract\n    \n    # Since the number of contracts must be an integer, we round it to the nearest whole number\n    num_contracts = round(num_contracts)\n    \n    # return answer\n    return num_contracts\n\n# Execute the function\nsolution()\n```\n\nPlease note that the actual value of S&P 500 futures contracts fluctuates with market conditions, and they are not always priced exactly at $1,000. The pricing mechanism also typically involves the risk-free rate and the time to expiration to determine the theoretical futures price (although this calculation doesn't seem to be necessary for your given problem). However, since the question only asks for the number of contracts needed to establish the fund, this program does not include those calculations."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-110",
        "question": "A business owner purchased the property B using loans. They borrowed $220 and their equity is $110. Based on the provided data, what is their leverage ratio?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    borrowed = 220\n    equity = 110\n    \n    # Do math calculation to get the answer\n    leverage_ratio = borrowed / equity\n    \n    # return answer\n    return leverage_ratio\n\n# Uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-111",
        "question": "The operations manager of a company collects the following data about the company's cost structure at various output levels: Please refer to the information in Exhibit 1. What is the average fixed cost (AFC) when the production quantity is 4 units?",
        "tables": [
            "| Quanty(Q) | Total Fixed Cost(TFC) | Total Variable Cost(TVC) |\n|-----------|-----------------------|--------------------------|\n| 0         | 200                   | 0                        |\n| 1         | 200                   | 100                      |\n| 2         | 200                   | 150                      |\n| 3         | 200                   | 200                      |\n| 4         | 200                   | 240                      |\n| 5         | 200                   | 320                      |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_fixed_cost = 200\n    quantity = 4\n    \n    # Do math calculation to get the average fixed cost (AFC)\n    average_fixed_cost = total_fixed_cost / quantity\n    \n    # return answer\n    return average_fixed_cost\n\n# You can uncomment the line below to test the function.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-112",
        "question": "In 2016, the S&P 500 had quarterly returns of 8%, -5%, 3%, and 1%. What is the quarterly arithmetic mean return for the S&P 500?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program to calculate the quarterly arithmetic mean return for the S&P 500 based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    quarterly_returns = [0.08, -0.05, 0.03, 0.01]\n    \n    # Do math calculation to get the answer\n    arithmetic_mean_return = sum(quarterly_returns) / len(quarterly_returns)\n    \n    # return answer\n    return arithmetic_mean_return\n\n# You can call the function and print the result to verify the correct working\n# print(solution())\n```\n\nThis program computes the arithmetic mean of the given quarterly returns."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-113",
        "question": "A consultant has projected that the intrinsic worth of company B's share would be $25. If the latest dividend was $2 and is anticipated to rise at 3%, what's the necessitated return rate of a stock?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program that calculates the required rate of return using the Gordon Growth Model (Dividend Discount Model):\n\n```python\ndef solution():\n    # Define variables name and value\n    intrinsic_value = 25\n    dividend = 2\n    growth_rate = 0.03  # 3% growth rate\n    \n    # Do math calculation using the Gordon Growth Model\n    # Intrinsic value = Dividend * (1 + Growth rate) / (Required rate of return - Growth rate)\n    # We need to solve for the Required rate of return, so we should modify the equation like this:\n    # Required rate of return = (Dividend * (1 + Growth rate) / Intrinsic value) + Growth rate\n    \n    required_rate_of_return = (dividend * (1 + growth_rate) / intrinsic_value) + growth_rate\n    \n    # return answer\n    return required_rate_of_return\n\n# The function call to get the answer\nprint(solution())\n```\n\nThe `solution()` function calculates the required rate of return for the stock using the dividend, the growth rate of the dividend, and the intrinsic value of the stock based on the Gordon Growth Model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-114",
        "question": "If an organization's pretax income stands at $1,500,000, with taxable income amounting to $1,000,000 and a tax rate of 35%, what should be the declared current tax expense for the corporation?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 1000000\n    tax_rate = 0.35\n    \n    # Do math calculation to get the answer\n    current_tax_expense = taxable_income * tax_rate\n    \n    # return answer\n    return current_tax_expense\n    \n# Call the function and print the result for verification\nprint(solution())\n```\n\nWhen you run the program, it will calculate the current tax expense based on the taxable income and tax rate provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-115",
        "question": "The two-year Libor-based interest rate swap with semi-annual resets (30/360 day count). In light of the following data, what is the swap's fixed rate?",
        "tables": [
            "| Days to Maturity | LIBOR | Present Value Factors |\n|------------------|-------|-----------------------|\n| 180              | 3.0%  | 0.985222              |\n| 360              | 3.5%  | 0.966184              |\n| 540              | 4.0%  | 0.943396              |\n| 720              | 4.5%  | 0.917431              |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # These are the present value factors for the semi-annual periods\n    present_value_factors = [0.985222, 0.966184, 0.943396, 0.917431]\n    \n    # Since we are dealing with semi-annual resets, we need to consider the fixed payments made every six months.\n    # For a two-year swap, there are four periods (every six months) to consider.\n    \n    # Do math calculation to get the answer\n    \n    # The fixed rate for an interest rate swap is found by setting the present value of fixed rate payments\n    # equal to the present value of floating rate payments (which is typically set to par at the beginning\n    # of the swap, which is 1).\n    \n    # Since the floating side of the swap pays the LIBOR (implicitly included in the discount factors), \n    # the fixed side must sum to a present value of 1 when discounted by the LIBOR rates.\n    \n    # We need to add the present value of all the expected fixed payments, including the final\n    # payment which also includes the return of the notional principal (assumed to be 1 here for convenience).\n    \n    # Here we solve for the fixed payment that, when summed up after being discounted, equals 1.\n    # This implies that fixed_payment * sum(present_value_factors) + fixed_payment * present_value_factors[-1] = 1\n    # because the last payment includes both the periodic payment and return of notional.\n    \n    # We can factor out fixed_payment because it's the same in each period, so we get:\n    # fixed_payment * (sum(present_value_factors) + present_value_factors[-1]) = 1\n    \n    sum_pv_factors = sum(present_value_factors)\n    total_pv = sum_pv_factors + present_value_factors[-1]\n    \n    fixed_payment = 1 / total_pv\n    \n    # the fixed_payment calculated above is the payment for each 6 months,\n    # therefore, the annual fixed rate is twice the semi-annual fixed payment rate\n    fixed_rate = fixed_payment * 2\n    \n    # return answer\n    return fixed_rate\n\n# The answer is the fixed rate for the 2-year interest rate swap with semi-annual payments\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-116",
        "question": "What is the company's breakeven volume of sales in million units, given the following data is available for a company?",
        "tables": [
            "| Sales price per unit | £85               |\n|---------------------|------------------|\n| Variable cost per unit  | £65               |\n| Fixed operating costs   | £50 million   |\n| Fixed financial costs   | £30 million   |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_price_per_unit = 85\n    variable_cost_per_unit = 65\n    fixed_operating_costs = 50e6\n    fixed_financial_costs = 30e6\n    \n    # Calculate the contribution margin per unit\n    contribution_margin_per_unit = sales_price_per_unit - variable_cost_per_unit\n    \n    # Calculate the total fixed costs\n    total_fixed_costs = fixed_operating_costs + fixed_financial_costs\n    \n    # Calculate the breakeven volume of sales in units\n    breakeven_volume = total_fixed_costs / contribution_margin_per_unit\n    \n    # Convert breakeven volume to million units\n    breakeven_volume_million_units = breakeven_volume / 1e6\n    \n    # return answer\n    return breakeven_volume_million_units\n    \n# You can call the function and print the result to test it\n# print(solution())\n```\nWhen executed, this program would provide the breakeven volume of sales in million units for the company given the data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-117",
        "question": "A financial backer is pondering including three new assets into his globally focused fixed income collection. He is focusing on these non-callable assets: 1-year government bond, 10-year government bond and a 10-year BBB rated corporate bond. His plan is to either equally invest in all three assets under scrutiny, or he'll avoid all of them for the time being. His condition to make the additional investment is that the projected spread/premium of the equally weighed investment must be at least 1.5 percent (150bp) greater than the 1-year government bond. Using just the given details, calculate the estimated return that an equal-weighted investment in these three assets could offer.",
        "tables": [
            "| Risk free interest rate (1-year, incorporating 2.6% inflation expectation) | 3.8% |\n| --- | --- |\n| Term premium(10-year vs.1-year government bond) | 1% |\n| 10-year BBB credit premium (over 10-year government bond) | 75bp |\n| Estimated liquidity premium on 10-year corporate bonds | 55bp |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate_1yr = 3.8            # Risk-free interest rate for 1-year bond\n    term_premium = 1                    # Term premium for 10-year vs 1-year government bond\n    credit_premium_BBB_10yr = 0.75      # 10-year BBB credit premium over 10-year government bond\n    liquidity_premium_10yr_corporate = 0.55    # Estimated liquidity premium on 10-year corporate bonds\n    \n    # Calculating the yield for each of the three assets\n    \n    # 1-year government bond yield is the risk-free interest rate\n    yield_1yr_gov_bond = risk_free_rate_1yr\n    \n    # 10-year government bond yield is the sum of the 1-year interest rate and the term premium\n    yield_10yr_gov_bond = risk_free_rate_1yr + term_premium\n    \n    # 10-year BBB corporate bond yield is the sum of the 10-year government bond yield,\n    # credit premium, and the liquidity premium\n    yield_10yr_BBB_corporate_bond = yield_10yr_gov_bond + credit_premium_BBB_10yr + liquidity_premium_10yr_corporate\n    \n    # The estimated return for an equally-weighted investment in the three assets\n    # is the average of the yields of the three assets\n    estimated_return = (yield_1yr_gov_bond + yield_10yr_gov_bond + yield_10yr_BBB_corporate_bond) / 3\n    \n    # return answer\n    return estimated_return\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-118",
        "question": "If Apple View Corp.'s dividend policy is characterized by a slow adaptation towards a specific dividend payout proportion, and the company has projected its earnings per share for this year to be $4.00, given that last year, their earnings per share were $3.00 and they paid out a dividend of $0.60 per share, what will be this year's dividend per share, given that they have a predetermined payout proportion of 25 percent and employ a five-year period to adjust their dividend?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Below is a Python program that calculates this year's dividend per share for Apple View Corp. based on their dividend policy:\n\n```python\ndef solution():\n    # Define variables name and value\n    # Last year data\n    last_year_eps = 3.00\n    last_year_dividend = 0.60\n    \n    # Current year projected EPS\n    this_year_projected_eps = 4.00\n    \n    # Predetermined payout proportion\n    target_payout_proportion = 0.25\n    \n    # Adjustment period\n    adjustment_period = 5.0\n    \n    # Calculate target dividend based on this year's projected EPS\n    target_dividend = this_year_projected_eps * target_payout_proportion\n    \n    # Calculate the difference between last year's dividend and the new target\n    dividend_gap = target_dividend - last_year_dividend\n    \n    # Calculate this year's dividend with gradual adjustment\n    this_year_dividend = last_year_dividend + (dividend_gap / adjustment_period)\n    \n    # return answer\n    return round(this_year_dividend, 2)  # Rounding to 2 decimal places for currency representation\n\n# Print the solution\nprint(solution())\n```\n\nThis Python program calculates the dividend for the current year by taking into account the company's policy of slowly adapting towards the target payout proportion, using last year's performance as a base and adjusting over a specified period."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-119",
        "question": "A firm releases a leveraged floating-rate note which offers a coupon of 1.5 times Libor on notional principle of $1 million. This firm uses the capital to purchase a fixed-rate bond with 6% coupon rate. To counter the risk of fluctuating payments, the firm partakes in a swap with a fixed rate of 5% and a floating rate of 1.5 times Libor. Determine the net income from these transactions.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 1_000_000\n    fixed_rate_bond_coupon = 0.06\n    swap_fixed_rate = 0.05\n    swap_floating_rate_multiplier = 1.5\n    libor_rate = None  # Undefined variable, for demonstration assume some libor_rate\n    \n    # Calculating income from the fixed-rate bond\n    income_from_bond = notional_principal * fixed_rate_bond_coupon\n    \n    # Calculating payment for the floating-rate note\n    payment_for_note = notional_principal * swap_floating_rate_multiplier * libor_rate\n    \n    # Calculating payment for the swap (fixed part)\n    payment_for_swap = notional_principal * swap_fixed_rate\n    \n    # Net income calculation\n    net_income = income_from_bond - payment_for_note - payment_for_swap\n    \n    # return the net_income (net_income will change depending on what the libor_rate is)\n    # Here, we return the net_income as a formula since we don't have the actual Libor rate\n    return net_income\n\n# Please note that the above function will not execute correctly as the libor_rate is not defined.\n# The actual Libor rate is needed to calculate the net income.\n``` \n\nThe net income from these transactions depends on the value of the Libor rate, which is a key variable in determining the payments for the floating-rate note and the floating rate part of the swap. Without the actual Libor rate, we cannot compute a numeric answer. The solution provides a formula for net income which would need the Libor rate to be specified to return a definitive numeric answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-120",
        "question": "A production company named Silver borrowed USD 500 million from Star Bank. To protect its debt exposure to Silver, Star Bank engages in a credit default swap transaction with Metro Bank, where Metro Bank would wholly reimburse Star Bank if Silver defaults. If the defaults of Star Bank, Metro Bank, and Silver are independent and their default probabilities are considered to be 0.5%, 0.6%, and 4.0%, respectively. What is the likelihood that Star Bank will encounter a credit loss in its exposure to Silver?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here is a Python program that calculates the probability of Star Bank encountering a credit loss in its exposure to Silver. We approach this by determining the likelihood that Silver defaults and neither Star Bank nor Metro Bank defaults, as these are the conditions under which Star Bank would face a credit loss.\n\n```python\ndef solution():\n    # Define variables name and values\n    probability_silver_defaults = 0.04     # Probability that Silver defaults\n    probability_star_defaults = 0.005      # Probability that Star Bank defaults\n    probability_metro_defaults = 0.006     # Probability that Metro Bank defaults\n    \n    # Probability that Silver defaults and neither Star Bank nor Metro Bank defaults\n    probability_credit_loss = (\n        probability_silver_defaults * \n        (1 - probability_star_defaults) * \n        (1 - probability_metro_defaults)\n    )\n    \n    # Return the answer\n    return probability_credit_loss\n\n# You can print the result or use it further as needed\nprint(solution())\n```\n\nWhen you call the `solution()` function, it will return the likelihood of Star Bank encountering a credit loss."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-121",
        "question": "Assuming the sequence of spot rates provided, what would be the cost of a 2-year bond with a 5% coupon rate, with interest paid yearly, that a trader is thinking about buying?",
        "tables": [
            "| Time-to-Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 3% |\n| 2 years | 4% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05  # 5% coupon rate\n    face_value = 100  # assuming a face value of $100\n    spot_rate_year_1 = 0.03  # 3% spot rate for 1 year\n    spot_rate_year_2 = 0.04  # 4% spot rate for 2 years\n    \n    # Calculate the present value of the coupons and the face value\n    coupon_payment = coupon_rate * face_value  # $5 coupon payment\n    present_value_coupon_1 = coupon_payment / (1 + spot_rate_year_1)  # present value of the first coupon\n    present_value_coupon_2 = coupon_payment / (1 + spot_rate_year_2)**2  # present value of the second coupon\n    present_value_face_value = face_value / (1 + spot_rate_year_2)**2  # present value of the face value\n    \n    # Sum up the present values to get the bond price\n    bond_price = present_value_coupon_1 + present_value_coupon_2 + present_value_face_value\n    \n    # return answer\n    return round(bond_price, 2)  # round the answer to two decimal places for currency formatting\n\n# Example usage\nprint(solution())  # This should print the bond price\n```\n\nThe `solution()` function calculates the present value of the bond's cash flows using the provided spot rates for each year. The bond's cash flows consist of the yearly coupon payments and the final face value payment. The present value of each cash flow is then added up to get the bond's price, and the result is rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-122",
        "question": "A bond portfolio contains two bonds, bond X and bond Y. The values of bond X and bond Y are $60 millions and $40 millions respectively. The one-year probabilities of default and the recovery rate of bond X are 5% and 60% respectively, while for bond Y are 7% and 50%. Can you compute the one-year expected credit loss of this compilation? Assume that the default risk between X and Y is independent.",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here's a Python program that calculates the one-year expected credit loss for the bond portfolio described:\n\n```python\ndef solution():\n    # Define variables for bond X\n    value_x = 60000000  # Value of bond X in dollars\n    default_prob_x = 0.05  # 5% probability of default for bond X\n    recovery_rate_x = 0.60  # 60% recovery rate for bond X\n\n    # Define variables for bond Y\n    value_y = 40000000  # Value of bond Y in dollars\n    default_prob_y = 0.07  # 7% probability of default for bond Y\n    recovery_rate_y = 0.50  # 50% recovery rate for bond Y\n\n    # Calculate the expected loss for each bond\n    expected_loss_x = value_x * default_prob_x * (1 - recovery_rate_x)\n    expected_loss_y = value_y * default_prob_y * (1 - recovery_rate_y)\n\n    # Calculate the total expected credit loss\n    total_expected_credit_loss = expected_loss_x + expected_loss_y\n\n    # Return total expected credit loss\n    return total_expected_credit_loss\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen the `solution` function is called, it will return the expected credit loss for the bond portfolio consisting of bonds X and Y. The expected loss for each bond is calculated by multiplying the value of the bond by the probability of default and by (1 - recovery rate). The sum of these individual expected losses gives the total expected credit loss for the portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-123",
        "question": "The demand schedule in an entirely competitive market is dictated by P = 93 – 1.5Q (for Q ≤ 62) and the enduring cost organization of each corporation is: Total cost: 256 + 2Q +  4Q2 Average cost: 256/Q + 2 + 4Q Marginal cost: 2 + 8Q New corporations will infiltrate the market at any price above:",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # The price at which new corporations will enter the market is when Price = Marginal Cost\n\n    # Marginal Cost function (MC) is given as: MC = 2 + 8Q\n    # New corporations will enter the market when P > MC\n    # However, to find the minimum price at which new corporations will enter, we set P = MC\n    # Since the market is entirely competitive, we can use the demand schedule to determine P when Q = 0\n    # Demand Schedule P = 93 - 1.5Q\n    \n    # When Q = 0, find P using the demand schedule\n    Q = 0\n    P = 93 - 1.5 * Q\n    \n    # Set P = MC to find Q when new corporations would enter the market\n    # P = 2 + 8Q => P - 2 = 8Q => Q = (P - 2) / 8\n    # Since P is just above the break-even point where P = MC for the lowest Q, we can use this to find the entry price\n    # Substitute P using the demand schedule: (93 - 1.5Q) - 2 = 8Q\n    Q = (93 - 2) / (1.5 + 8)\n    \n    # Now find P corresponding to this Q\n    P_entry = 93 - 1.5 * Q\n    \n    # Return the price above which new corporations will infiltrate the market\n    return P_entry\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThe above approach will give you the price at which the marginal cost equals the demand, which is possibly the price new firms would consider entering the market. However, determining when new firms actually enter the market may depend on additional factors beyond the scope of this question and might not be exactly when P equals the MC, but just above this equilibrium. \n\nIn economic theory, firms typically enter when they can cover their average cost, not just the marginal cost, and thus the exact point would be when P is greater than or equal to the average cost in the long term. However, based on the information provided, we are finding the price just above where P = MC as a starting point for entry."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-124",
        "question": "The demand function for groceries is denoted by the equation Qdpg = 80 - 3Ppg + 0.1I + 0.5Ppdr where Qdpg is the quantity of groceries, Ppg is the price of groceries, I is the income, and Ppdr is the price of beverages. We understand that: Ppg = 30, I = 110, and Ppdr = 20. What will the price elasticity of demand for groceries be?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "The price elasticity of demand measures how much the quantity demanded of a good responds to a change in the price of that good. It's computed as the percentage change in quantity demanded divided by the percentage change in price.\n\nTo determine the price elasticity of demand, we can use the midpoint method which calculates the formula:\n\n\\[\nElasticity = \\frac{(Q2 - Q1) / ((Q2 + Q1)/2)}{(P2 - P1) / ((P2 + P1)/2)}\n\\]\n\nHowever, we need a change in price and the resultant change in quantity to apply this formula. Since we are only given the demand function and the values of Ppg (price of groceries), I (income), and Ppdr (price of beverages) at a single point, we cannot directly calculate a change. To solve for elasticity at a point, we use the derivative of the demand with respect to the price of groceries. But we need to be careful because the coefficient in front of Ppg in the given demand function is negative. This means that an increase in the price of groceries will lead to a decrease in the quantity demanded, which is a typical demand relationship.\n\nThe formal calculation of point price elasticity of demand is:\n\n\\[\nElasticity = \\frac{\\partial Q}{\\partial P} \\times \\frac{P}{Q}\n\\]\n\nSince we have the derivative (coefficient of Ppg) is -3, and the other values needed for this calculation, here's how we can code the solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    Ppg = 30\n    I = 110\n    Ppdr = 20\n    \n    # The partial derivative of quantity with respect to price is the coefficient of Ppg in the demand equation, which is -3.\n    dQdP = -3\n    \n    # Calculate current quantity using the demand function.\n    Qdpg = 80 - 3 * Ppg + 0.1 * I + 0.5 * Ppdr\n    \n    # Calculate price elasticity at the point using the formula: Elasticity = (dQdP)(P/Q)\n    elasticity = (dQdP * Ppg) / Qdpg\n    \n    # Price elasticity of demand is negative, but we usually interpret the absolute value\n    elasticity = abs(elasticity)\n    \n    # return answer\n    return elasticity\n\n# Function call\nprint(solution())\n```\n\nThis program will provide the absolute value of the price elasticity of demand for groceries at the prices and income levels given."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-125",
        "question": "A financial expert is assessing the liquidity of XYZ Corporation based on the financial data from 2016 and 2017. The total debt was $200 in 2016 and rose to $300 in 2017. The total assets were $500 in 2016, increasing to $800 in 2017. The total equity was $250 in 2016 and went up to $400 in 2017. What is the financial leverage ratio in 2017?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_debt_2017 = 300\n    total_equity_2017 = 400\n    \n    # Do math calculation to get the financial leverage ratio\n    financial_leverage_ratio_2017 = total_debt_2017 / total_equity_2017\n    \n    # return answer\n    return financial_leverage_ratio_2017\n\n# Calling the function and printing the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-126",
        "question": "An investment director purchased 600 call options on a stock that doesn't pay dividends, with a strike price of USD 60, at a cost of USD 3 each. If the current stock price is at USD 62, the daily stock return volatility is pegged at 1.82%, and the delta of the option stands at 0.5. How can we approximate the 1-day 95% VaR of this position using the delta-normal approach?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To approximate the 1-day Value at Risk (VaR) at the 95% confidence level using the delta-normal approach, you'd typically use the following formula:\n\n\\[\nVaR = | \\text{Position Delta} \\times \\text{Stock Price} \\times \\text{Volatility} \\times \\text{Z-score for 95% confidence} |\n\\]\n\nwhere:\n- \\( \\text{Position Delta} = \\text{Delta of the option} \\times \\text{Number of options} \\),\n- \\( \\text{Stock Price} \\) is the current stock price,\n- \\( \\text{Volatility} \\) is the daily stock return volatility,\n- \\( \\text{Z-score for 95% confidence} \\) is typically 1.65 for one-tailed tests in a normal distribution.\n\nLet's code this calculation:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    num_options = 600\n    strike_price = 60\n    option_cost = 3\n    current_stock_price = 62\n    daily_volatility = 0.0182\n    delta_option = 0.5\n    \n    # Calculate position delta\n    position_delta = delta_option * num_options\n    \n    # Z-score for 95% confidence interval for one-tailed test\n    z_score = norm.ppf(0.95)\n    \n    # Calculate VaR\n    var = abs(position_delta * current_stock_price * daily_volatility * z_score)\n    \n    # return answer\n    return var\n\n# You can call the function to execute\nprint(solution())\n```\nRemember when using the `norm.ppf()` function from `scipy`'s stats module, the `ppf` stands for the percent-point function, which is the inverse of the cumulative distribution function. The `ppf` function takes a probability and gives you the corresponding Z-score.\n\nIn this particular case, since we're calculating a 95% VaR and we assume that returns are normally distributed, we take the `ppf` of 0.95 to get the Z-score at which 95% of the distribution falls below this value. This is the essence of a one-tailed test in this context."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-127",
        "question": "Considering the data analyzed, what will be the impairment loss on this manufacturing plant (in thousands) under IFRS?",
        "tables": [
            "|        | £ thousands |\n|--------|-------------|\n| Carrying amount | 132 |\n| Undiscounted expected future cash flows | 120 |\n| Present value of expected future cash flows | 100 |\n| Fair value if sold | 105 |\n| Costs to sell | 1 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_amount = 132  # in £ thousands\n    recoverable_amount = 105 - 1  # Fair value if sold (£ thousands) minus costs to sell (£ thousands)\n    \n    # Do math calculation to get the answer\n    impairment_loss = carrying_amount - recoverable_amount\n    \n    # return answer\n    return impairment_loss\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program calculates the impairment loss based on the carrying amount and the recoverable amount. Under IFRS, the recoverable amount is the higher of an asset's fair value minus costs to sell and its value in use. Since the value in use (present value of expected future cash flows) is less than the fair value minus costs to sell, the recoverable amount is the fair value minus costs to sell. The impairment loss is then the difference between the carrying amount and the recoverable amount."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-128",
        "question": "Assuming a tax rate of 28%, what is the annual after-tax cost of debt (%) for a business that releases fresh 20-year $1,000 bonds with a coupon rate of 6.2% payable semiannually at an issuance price of $1,030.34?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.28\n    coupon_rate = 0.062\n    face_value = 1000\n    bond_price = 1030.34\n    \n    # Semiannual coupon payment\n    semiannual_coupon_payment = face_value * coupon_rate / 2\n    \n    # Calculate annual before-tax cost of debt\n    annual_before_tax_cost_of_debt = (semiannual_coupon_payment * 2) / bond_price\n    \n    # Calculate annual after-tax cost of debt\n    annual_after_tax_cost_of_debt = annual_before_tax_cost_of_debt * (1 - tax_rate)\n    \n    # Convert to percentage\n    annual_after_tax_cost_of_debt_percent = annual_after_tax_cost_of_debt * 100\n    \n    # return annual after-tax cost of debt in percentage\n    return annual_after_tax_cost_of_debt_percent\n\n# Call function and print answer\nprint(f\"Annual After-Tax Cost of Debt (%): {solution()}\")\n```\n\nNote that the semiannual coupon payment is calculated by multiplying the face value of the bond by the coupon rate and then dividing by two since the coupon is paid semiannually. Then we calculate the before-tax cost of debt by taking the annual coupon payment and dividing it by the price of the bond. Finally, we adjust for the tax rate to find the after-tax cost of debt. The result is converted to a percentage to give the annual after-tax cost of debt percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-129",
        "question": "Kelly is working on the valuation for XYZ Corp. She calculates that the long-term expected dividend payout rate for XYZ is 35 percent and the return on equity will be 12 percent in the long run. What is the long-term FCFE Sustainable growth rate for XYZ Corp.?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program that calculates the long-term FCFE Sustainable growth rate for XYZ Corp:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_rate = 0.35\n    return_on_equity = 0.12\n    \n    # Do math calculation to get the answer\n    retention_ratio = 1 - dividend_payout_rate\n    sustainable_growth_rate = retention_ratio * return_on_equity\n    \n    # return answer\n    return sustainable_growth_rate\n\n# You can call the function to get the result\nprint(solution())\n```\n\nThe `solution()` function calculates the retention ratio (which is the portion of earnings not paid out as dividends), then multiplies it by the return on equity to get the sustainable growth rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-130",
        "question": "After settling on the last set of features, Johnson chooses and executes a model on the training set which labels the text as having either positive sentiment (Class \"1\") or negative sentiment (Class \"0\"). He subsequently inspects its performance through error analysis. As per Exhibit 2, what is the F1 score of the model?",
        "tables": [
            "|                |          | Actual Training |        |\n|----------------|----------|--------------|--------------|\n|                |          | results     |              |\n| Predicted      |          | Class \"1\"   | Class \"0\"    |\n| Results        | Class \"1\"| TP=182      | FP=52        |\n|                | Class \"0\"| FN=31       | TN=96        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! Here is a Python program that calculates the F1 score of the model based on the provided confusion matrix:\n\n```python\ndef solution():\n    # Define variables from the confusion matrix\n    TP = 182  # True Positives\n    FP = 52   # False Positives\n    FN = 31   # False Negatives\n    TN = 96   # True Negatives\n    \n    # Calculate Precision and Recall\n    precision = TP / (TP + FP)\n    recall = TP / (TP + FN)\n    \n    # Calculate F1 Score\n    F1_score = (2 * precision * recall) / (precision + recall)\n    \n    # Return the F1 Score\n    return F1_score\n\n# Call the solution function and print the result if needed\n# print(solution())\n```\n\nThis function defines the values for correctly predicted positives (TP), incorrectly predicted positives as negatives (FN), incorrectly predicted negatives as positives (FP), and correctly predicted negatives (TN). It then calculates precision and recall, and uses these values to compute the F1 score, returning the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-131",
        "question": "If we consider a decrease in the yield by 90 basis points, what would be the percentage change in the price of a bond with a modified duration of 9.6?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! A basis point is one hundredth of a percent (0.01%). When yields decrease, bond prices increase. The relationship between yield changes and bond prices is determined using the concept of duration, particularly modified duration which measures the percentage change in price for a parallel shift in yields of 100 basis points (1%). If yields decrease by 90 basis points, we can calculate the expected percentage change in bond price using the modified duration.\n\nHere is the Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    change_in_yield = 90  # in basis points\n    modified_duration = 9.6\n    \n    # Convert basis points to percentage\n    change_in_yield_percent = change_in_yield / 10000  # dividing by 10000 to convert basis points to decimal\n    \n    # Calculate percentage change in bond price\n    percentage_change_in_price = modified_duration * change_in_yield_percent\n    \n    # return answer\n    return percentage_change_in_price\n\n# Example usage:\nprint(solution())\n```\n\nWhen you run this program, it will provide the expected percentage change in the price of the bond given the change in yield and the bond's modified duration."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-132",
        "question": "If the corporation buys back 1 million stocks at the current market rate, what would be the ensuing book value per share, considering the facts about another company revealed by an investigator which includes: 10 million shares in circulation, Earnings per share is US$2.00, P/E is 20, Book value per share is US$30?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Given data from the problem\n    shares_outstanding_before = 10e6\n    buy_back_shares = 1e6\n    earnings_per_share = 2.00\n    pe_ratio = 20\n    book_value_per_share_before = 30\n    \n    # Calculate market price per share using P/E ratio and Earnings Per Share\n    market_price = earnings_per_share * pe_ratio\n    \n    # Calculate total buy back cost\n    total_buy_back_cost = market_price * buy_back_shares\n    \n    # Calculate total equity from the book value per share before the buyback\n    total_equity_before = shares_outstanding_before * book_value_per_share_before\n    \n    # Equity remains same, since buyback is done at market value\n    total_equity_after = total_equity_before\n    \n    # Calculate shares outstanding after buyback\n    shares_outstanding_after = shares_outstanding_before - buy_back_shares\n    \n    # Calculate book value per share after buyback\n    book_value_per_share_after = total_equity_after / shares_outstanding_after\n    \n    # return answer\n    return book_value_per_share_after\n\n# Running the solution function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-133",
        "question": "What is the carried interest paid to the general partner of the DeepSleep Investment, referenced in the brochure and having a committed capital of $150 million, a management fee of 2%, carried interest of 20%, and a hurdle rate of 9%, at the end of the second year? In the example given in the brochure, the fund demands $100 million in commitments at the start of the first year and disburses $40 million in Company X and $60 million in Company Y. At the onset of the second year, it calls the residual $50 million and invests into Company Z. By the end of the second year, the investment in Company Y is sold for $70 million. The investment in Company X amounts to $54 million by the end of the third year, the investment in Company Z is worth $40 million, and a cash reserve of $46 million is maintained.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the carried interest paid to the general partner (GP) of DeepSleep Investment, we will need to follow these steps:\n\n1. Calculate the total profit made by the fund.\n2. Subtract the management fee from the profit.\n3. Determine if the hurdle rate has been met.\n4. If the hurdle rate has been met, calculate the carried interest based on the profit.\n\nWe assume that the hurdle rate applies to the whole profit and not to the individual investors' contributions, and we will need to aggregate the value of the investments at the end of the second year to see if the hurdle rate was achieved.\n\nLet's go ahead and create the Python program to calculate the carried interest:\n\n```python\ndef solution():\n    # Given variables\n    committed_capital = 150e6\n    management_fee_rate = 0.02\n    carried_interest_rate = 0.20\n    hurdle_rate = 0.09\n\n    # The amount disbursed in investments\n    investment_X = 40e6  # Initial investment\n    investment_Y = 60e6  # Initial investment, sold for 70 million end of 2nd year\n    investment_Z = 50e6  # Initial investment\n\n    # The worth at the end of the second year\n    worth_X = investment_X  # Not sold yet\n    worth_Y = 70e6\n    worth_Z = investment_Z  # Not mentioned sold, considering it same as investment\n    cash_reserve = 46e6\n\n    # Calculate the total worth and cashflows\n    total_worth_year_2 = worth_X + worth_Y + worth_Z + cash_reserve\n    total_profit = total_worth_year_2 - committed_capital\n\n    # Subtract management fee for two years\n    management_fee = committed_capital * management_fee_rate * 2  # Two years\n    total_profit_after_fees = total_profit - management_fee\n\n    # Calculate the hurdle - total profit should be more than 9% of committed capital for the two years\n    hurdle_profit = committed_capital * hurdle_rate * 2  # We are looking at total hurdle over two years\n\n    # If total profit after fees exceeds hurdle, GP gets carried interest\n    if total_profit_after_fees > hurdle_profit:\n        carried_interest = carried_interest_rate * (total_profit_after_fees - hurdle_profit)\n    else:\n        carried_interest = 0  # If hurdle not met, no carried interest\n\n    # Return the carried interest\n    return carried_interest\n    \n# Execute the function and print the carried interest\nprint(f\"Carried Interest: {solution()}\")\n```\n\nThis Python program calculates the carried interest paid to the GP based on the given conditions and assumptions. Please check the logic and calculations for accuracy as per the specifics of the fund's agreement."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-134",
        "question": "Using the income approach, compute the personal income using the details in the succeeding table.",
        "tables": [
            "| Compensation of employees | 1,044,005 |\n|---------------------------|-----------|\n| Gross operating surplus | 518,979 |\n| Gross mixed income | 241,415 |\n| Net mixed income | 180,653 |\n| Taxes less subsidies on production | 90,507 |\n| Taxes less subsidies on products and imports | 139,443 |\n| Statistical discrepancy | 1,157 |\n| Net property income | 136,011 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate personal income using the income approach, we generally start with the national income and then make certain adjustments. However, the provided table doesn't offer all the typical items used for the precise calculation of personal income (like undistributed corporate profits, social insurance contributions, transfer payments, etc.). But based on the data provided, we can calculate a basic form of personal income by adding \"Compensation of employees\" and \"Net property income\", as these are typically parts of personal income.\n\nLet's construct the Python program accordingly:\n\n```python\ndef solution():\n    # Define variables name and value\n    compensation_of_employees = 1044005\n    net_property_income = 136011\n    \n    # Personal income usually includes the compensation of employees and net property income\n    personal_income = compensation_of_employees + net_property_income\n    \n    # return answer\n    return personal_income\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nThis function will return the sum of compensation of employees and net property income, giving us an incomplete but still informative measure of personal income with the given data. To compute a complete personal income figure, more information would be necessary."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-135",
        "question": "An executive intends to determine the price of a put option using a one-period binomial tree. The specifics are as such: The existing stock price is $30, with the put option's exercise price also at $30 The up factor sits at 1.12, while the down factor is at 0.92 The risk-free rate remains at 5%. What is the value of this particular put option?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 30         # Initial stock price\n    K = 30          # Exercise price of the put option\n    u = 1.12        # Up factor\n    d = 0.92        # Down factor\n    r = 0.05        # Risk-free rate\n\n    # Calculate the up and down prices\n    Su = S0 * u     # Stock price if it goes up\n    Sd = S0 * d     # Stock price if it goes down\n\n    # Calculate the option values at the up and down states\n    Pu = max(K - Su, 0)  # Value of the option at up state\n    Pd = max(K - Sd, 0)  # Value of the option at down state\n\n    # Calculate the risk-neutral probabilities\n    p = (1 + r - d) / (u - d)\n\n    # Calculate the current value of the put option using the risk-neutral valuation\n    PutOptionValue = (p * Pu + (1 - p) * Pd) / (1 + r)\n\n    # return answer\n    return PutOptionValue\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-136",
        "question": "A CFA named Fabian, who is employed at the Equity investment firm, is in the process of preparing an analytical report on the PZ company, which is registered on the HK Exchange and is in compliance with IFRS 9. She has gathered data on three fixed-income investments from the PZ's 2019 year-end financial report (assuming cost equals par value). Could you determine the carrying value of PZ company's investment portfolio at the end of 2019?",
        "tables": [
            "|            | Classification  | Cost   | Market value  2018 | Market value 2019 |\n|------------|-----------------|--------|------------------- |-------------------|\n| Shoes Corp | FVOCI           | 12,000 | 15,000             | 16,000            |\n| Angle PD   | Amortized cost  | 35,000 | 32,000             | 33,000            |\n| T-vision   | FVPL            | 42,000 | 45,000             | 56,000            |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # For FVOCI (Fair Value Through Other Comprehensive Income), we use market value.\n    shoes_corp_value_2019 = 16000\n    \n    # For Amortized cost, we use the cost of the bond, because it is carried at amortized cost.\n    angle_pd_value_2019 = 35000\n    \n    # For FVPL (Fair Value Through Profit or Loss), we use market value.\n    t_vision_value_2019 = 56000\n    \n    # Do math calculation to get the carrying value of the investment portfolio\n    total_carrying_value_2019 = shoes_corp_value_2019 + angle_pd_value_2019 + t_vision_value_2019\n    \n    # return answer\n    return total_carrying_value_2019\n\n# Call the function and print the result for checking\nprint(solution())\n```\n\nThis Python program calculates the carrying value of PZ company's investment portfolio at the end of 2019 by using the market value for FVOCI and FVPL investments and the cost for amortized cost investments. It then sums these values to obtain the total carrying value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-137",
        "question": "What is the 3-year implied spot rate if all rates are annual rates stated for a periodicity of one (effective annual rates)?",
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.80%        |\n| 1y1y        | 1.12%        |\n| Z           | 3.94%        |\n| 3y1y        | 3.28%        |\n| 4y1y        | 3.14%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To find the 3-year implied spot rate from the table, we need to use the forward rates given for various time periods. We were not given the spot rate directly for the 3-year period, but we can derive it using the relationship between forward rates and spot rates.\n\nThe forward rate formula we can use is:\n\n\\[ (1 + s_{n})^{n} = \\prod_{i=1}^{n} (1 + f_{i-1, i}) \\]\n\nWhere:\n- \\( s_{n} \\) is the n-year spot rate.\n- \\( f_{i-1, i} \\) is the forward rate from year \\( i-1 \\) to year \\( i \\).\n\nGiven in the table:\n- 0y1y (spot rate for 1 year) = 0.80%\n- 1y1y (forward rate for year 2) = 1.12%\n- We need to find Z, which is the 2y1y forward rate for year 3.\n- The 3-year implied spot rate is what we need to calculate.\n\nLet's construct the formula based on the given forward rates for each year to solve for the 3-year implied spot rate:\n\n\\[ (1 + s_{3})^{3} = (1 + s_{1y1y}) \\times (1 + f_{1y1y}) \\times (1 + f_{2y1y}) \\]\n\nWhere \\( s_{1y1y} \\) is the 0y1y rate, \\( f_{1y1y} \\) is the 1y1y rate, and \\( f_{2y1y} \\) is the 2y1y rate, which is Z in the table.\n\nLet's write the Python program to calculate this:\n\n```python\ndef solution():\n    # Define the given rates (converted from percentages to decimals)\n    s_0y1y = 0.0080  # Spot rate for 1 year\n    f_1y1y = 0.0112  # Forward rate for the 2nd year\n    f_2y1y = 0.0394  # Forward rate for the 3rd year (Z)\n\n    # Calculate the product of (1 + each rate)\n    product_of_rates = (1 + s_0y1y) * (1 + f_1y1y) * (1 + f_2y1y)\n\n    # Calculate the 3-year implied spot rate\n    s_3 = (product_of_rates ** (1/3)) - 1\n\n    # Convert the spot rate back to a percentage and return\n    s_3_percent = s_3 * 100\n    return s_3_percent\n\n# Execute the function and print the result\nresult = solution()\nprint(f\"The 3-year implied spot rate is: {result:.4f}%\")\n```\n\nExecute this Python program to find the 3-year implied spot rate as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-138",
        "question": "Assuming the measure of risk aversion is -3, where is Mauricio Garcia, a daring investor who applies utility theory to select his investment portfolio, most likely to invest given a table of potential investments with expected returns and expected standard deviations?",
        "tables": [
            "| Investment | Expected Return(%) | Expected Standard Deviation(%) |\n|-----------|------------------|-----------------------------|\n| 1         | 19               | 3                           |\n| 2         | 21               | 9                           |\n| 3         | 24               | 20                          |\n| 4         | 19               | 35                          |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "In utility theory, the utility of an investment can be calculated by the formula:\n\nU = E(R) - 0.5 * A * σ^2\n\nWhere:\n- U is the utility\n- E(R) is the expected return\n- A is the risk aversion coefficient   \n- σ^2 is the variance (standard deviation squared)\n\nGiven the risk aversion is -3 (as it's a daring investor, this value should probably be positive since risk aversion typically implies disliking risk; however, we shall proceed with the given value), we'll maximize the utility function for each investment option.\n\n```python\ndef solution():\n    # Given values\n    investments = [\n        {\"Expected Return\": 19, \"Expected Standard Deviation\": 3},\n        {\"Expected Return\": 21, \"Expected Standard Deviation\": 9},\n        {\"Expected Return\": 24, \"Expected Standard Deviation\": 20},\n        {\"Expected Return\": 19, \"Expected Standard Deviation\": 35},\n    ]\n    \n    # Risk aversion coefficient (should normally be positive for risk aversion)\n    A = -3  # Assuming the given negative value is correct, even though it usually implies risk seeking\n    \n    # Calculate utility for each investment\n    max_utility = float('-inf')  # Start with the lowest possible utility\n    best_investment = None\n    \n    for i, inv in enumerate(investments, start=1):\n        E_R = inv[\"Expected Return\"]\n        std_deviation = inv[\"Expected Standard Deviation\"]\n        \n        # Here variance is σ^2 which is the square of standard deviation\n        variance = std_deviation ** 2\n        \n        # Compute utility\n        U = E_R - 0.5 * A * variance  # Here we consider risk aversion as negative\n        \n        # Check if this investment has the highest utility so far\n        if U > max_utility:\n            max_utility = U\n            best_investment = i\n            \n    # return the index of the best investment\n    return best_investment\n\n# Run the solution function\nsolution()\n```\n\nLet's clarify an important point regarding the value of A. Risk aversion typically implies a positive A, since investors would subtract a larger amount from their expected return to account for risk. A negative risk aversion coefficient would actually represent a risk-seeking investor, even though this is not the standard interpretation in the context of utility theory. Given the unusual instruction, the calculation will proceed with A as -3. However, it's important to treat this as an anomalous situation in actual finance contexts."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-139",
        "question": "A $1 million loan was granted to a vehicle manufacturing corporation by Bank B. The bank has projected a default likelihood of 10% for the vehicle manufacturer and an 80% recovery rate owing to strong collateral. What is the anticipated loss for the bank?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 1000000\n    default_probability = 0.1\n    recovery_rate = 0.8\n    \n    # Do math calculation to get the answer\n    expected_loss_given_default = loan_amount * (1 - recovery_rate)\n    expected_loss = default_probability * expected_loss_given_default\n    \n    # return answer\n    return expected_loss\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program defines the variables for the loan amount, the default probability, and the recovery rate. It then calculates the expected loss given default and multiplies that by the default probability to find the expected loss for the bank. The function `solution()` returns this calculated expected loss value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-140",
        "question": "A company bond is set to mature in the coming year with a face value of 100 RMB, a market price of 88, a true default-free interest rate of 2.5%, anticipated inflation rate of 3%, and an unexpected inflation rate of 0.5%. Could you determine the implied credit risk premium embedded in the corporation?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    market_price = 88\n    true_default_free_rate = 0.025  # 2.5%\n    anticipated_inflation = 0.03    # 3%\n    unexpected_inflation = 0.005   # 0.5%\n\n    # Calculate the total yield required in the market\n    # This includes the true default-free rate, the anticipated inflation, and the unexpected inflation\n    total_yield_required = true_default_free_rate + anticipated_inflation + unexpected_inflation\n\n    # Calculate the total yield from the bond\n    # (Face Value - Market Price + Coupon income) / Market Price\n    # Since it's a zero-coupon bond, the coupon income is 0.\n    total_yield_from_bond = (face_value - market_price) / market_price\n\n    # Calculate the implied credit risk premium\n    # This is the yield from the bond minus the yield required in the market\n    implied_credit_risk_premium = total_yield_from_bond - total_yield_required\n    \n    # return answer\n    return implied_credit_risk_premium\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe program defines the given variables related to the bond's financial situation, then calculates the total yield required by the market by summing up the real risk-free interest rate and anticipated and unexpected inflation rates.\n\nNext, it computes the bond's total yield, based on the fact that it is likely a zero-coupon bond (there's no mention of coupon payments). Finally, the implied credit risk premium is obtained by subtracting the total yield required by the market from the total yield provided by the bond, which represents the excess yield investors demand for bearing the company's credit risk."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-141",
        "question": "Assuming a constant 6% interest rate, how much does a shareholder need to invest today in order to make $10,000 in twenty years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program that calculates the present value of an investment needed to make $10,000 in twenty years at a 6% annual interest rate.\n\n```python\ndef solution():\n    # Variables\n    future_value = 10000\n    interest_rate = 0.06  # 6%\n    years = 20\n\n    # Calculate present value\n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    # Return answer\n    return present_value\n\n# You can call the function to get the result\nprint(solution())\n```\n\nThis program demonstrates the calculation of the present value using a simple financial formula for present value based on compounding interest."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-142",
        "question": "The corporation known as Delta Enterprises has authorized 160,000 shares of common stock. It has issued 88,000 shares and has 75,000 shares outstanding. How many shares of treasury stock does Delta Enterprises possess?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    issued_shares = 88000\n    outstanding_shares = 75000\n    \n    # Do math calculation to get the answer\n    treasury_stock = issued_shares - outstanding_shares\n    \n    # return answer\n    return treasury_stock\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-143",
        "question": "John is getting ready to assess the value of Company X's equity using the two-stage FCFE model. The anticipated growth rates for the initial three years are projected at 10%, 8%, and 6%, in that order, before potentially growing at 5% annually for an indefinite period. The necessary rate of return on equity for Company X stands at 10%. What is the fundamental value of Company X’s equity?",
        "tables": [
            "| Company M                    | $ millions |\n|---------------------------|----------|\n| Net Income                      | 485        |\n| Depreciation expense      | 270        |\n| Increase in accounts receivable | 59         |\n| Increase in accounts payable    | 33         |\n| Purchase of fixed assets        | 523        |\n| Increase in notes payable       | 15         |\n| Increase in long-term debt      | 60         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To answer the question, we need to calculate the Free Cash Flow to Equity (FCFE) using the data provided for Company M. This will be the basis for determining the value of Company X's equity using the two-stage FCFE model.\n\nThe Free Cash Flow to Equity (FCFE) is calculated as follows:\nFCFE = Net Income + Depreciation expense - Increase in accounts receivable + Increase in accounts payable - Purchase of Fixed Assets + Increase in notes payable + Increase in long-term debt\n\nAfter determining the FCFE, we will have to apply the growth rates and calculate the present value of future FCFEs during the high-growth stage (initial three years) and the terminal value when the growth rate becomes constant at 5%.\n\nThe two-stage FCFE model formula for valuation is:\nValue of Equity = (FCFE1 / (1 + r)^1) + (FCFE2 / (1 + r)^2) + (FCFE3 / (1 + r)^3) + (Terminal Value / (1 + r)^3)\n\nWhere:\nFCFE1, FCFE2, FCFE3 are the expected FCFEs for the next three years, respectively.\nr is the required rate of return on equity.\nTerminal Value is calculated as the FCFE in the last high-growth period (Year 3) multiplied by 1 + long-term growth rate and then divided by the difference between the required return and the long-term growth rate: \nTerminal Value = (FCFE3 x (1 + g)) / (r - g)\n\nThe Terminal Value is calculated at the end of Year 3 and discounted back to the present value.\n\nHere's the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 485e6  # $ millions\n    depreciation = 270e6\n    increase_in_receivables = 59e6\n    increase_in_payables = 33e6\n    purchase_of_fixed_assets = 523e6\n    increase_in_notes_payable = 15e6\n    increase_in_long_term_debt = 60e6\n    growth_rates = [0.10, 0.08, 0.06]\n    constant_growth_rate = 0.05\n    required_return = 0.10\n    \n    # Calculate FCFE for Company M\n    fcfe = net_income \\\n           + depreciation \\\n           - increase_in_receivables \\\n           + increase_in_payables \\\n           - purchase_of_fixed_assets \\\n           + increase_in_notes_payable \\\n           + increase_in_long_term_debt\n\n    # Calculate present values of FCFE for the high growth stage (first three years)\n    pv_fcfes = 0\n    for i in range(3):\n        fcfe *= (1 + growth_rates[i])\n        pv_fcfes += fcfe / ((1 + required_return) ** (i+1))\n    \n    # Calculate the terminal value at end of Year 3\n    terminal_value = (fcfe * (1 + constant_growth_rate)) / (required_return - constant_growth_rate)\n    \n    # Discount the terminal value back to present value\n    pv_terminal_value = terminal_value / ((1 + required_return) ** 3)\n    \n    # The value of the company's equity is the sum of the present values of the FCFEs and terminal value\n    value_of_equity = pv_fcfes + pv_terminal_value\n    \n    # return the fundamental value of Company X’s equity\n    return value_of_equity\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate and return the fundamental value of Company X’s equity using the provided information.\n\nPlease note that this program assumes Company X and Company M have the same FCFE, which might not be the case in a real-world scenario; additional information about Company X's financials would be necessary. However, the lack of specific financials for Company X suggests that this is a theoretical exercise where Company M's FCFE is used as the base figure for Company X."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-144",
        "question": "If a buyer acquires a three-year bond that has a 5% annual coupon rate, is bought at a rate of 105.657223 per 100 of par value and has a yield-to-maturity of 3%, what would be the estimated modified duration of this bond given a 5-basis point shift in yield-to-maturity?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program that estimates the modified duration of the bond given the change in yield-to-maturity:\n\n```python\nimport numpy as np\n\ndef macaulay_duration(cash_flows, ytm):\n    \"\"\"\n    Calculate the Macaulay duration of a series of cash flows.\n    \"\"\"\n    durations = np.array([t / (1 + ytm)**t for t in range(1, len(cash_flows) + 1)])\n    macaulay_dur = np.dot(durations, cash_flows) / sum(cash_flows)\n    return macaulay_dur\n\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05            # 5% annual coupon\n    par_value = 100               # Face value of the bond\n    purchase_price = 105.657223   # Price of the bond per 100 of par value\n    ytm = 0.03                    # Yield to maturity (3%)\n    n_years = 3                   # Number of years to maturity\n    basis_point_shift = 0.0005    # 5-basis point shift\n    \n    # Annual cash flows for a coupon bond (coupons + final par payment)\n    cash_flows = np.full(n_years, coupon_rate * par_value)\n    cash_flows[-1] += par_value  # Adding the par value back in the final year\n    \n    # Calculate Macaulay Duration\n    mac_duration = macaulay_duration(cash_flows, ytm)\n    \n    # Calculate Modified Duration\n    modified_duration = mac_duration / (1 + ytm)\n    \n    # Apply the basis point shift to ytm\n    ytm_shifted_up = ytm + basis_point_shift\n    ytm_shifted_down = ytm - basis_point_shift\n    \n    # Calculate the price with increased and decreased yield\n    price_up = np.sum(cash_flows / (1 + ytm_shifted_up)**np.arange(1, n_years + 1))\n    price_down = np.sum(cash_flows / (1 + ytm_shifted_down)**np.arange(1, n_years + 1))\n    \n    # Calculate prices variations\n    delta_p_up = price_up - purchase_price\n    delta_p_down = price_down - purchase_price\n    \n    # Calculate the approximate price change for a 1% change in yield\n    approximate_price_change = (delta_p_down - delta_p_up) / 2\n    \n    # Estimate modified duration using approximate price change\n    estimated_modified_duration = -approximate_price_change / (purchase_price * basis_point_shift)\n    \n    # return answer\n    return estimated_modified_duration\n\n# Execute the function and print the answer\nprint(f\"Estimated Modified Duration: {solution()}\")\n```\n\nPlease note that for real-world applications, various other aspects, like day-count conventions and frequency of coupon payments, need to be taken into consideration. This implementation assumes annual coupon payments and simple interest calculations with constant yield to maturity and linear price-yield relationship, which is a simplified approach."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-145",
        "question": "Recently, an analyst named Ahern from a financial firm gathered data for an equal-weighted index made up of assets A, B, and C: What is the index's price return?",
        "tables": [
            "|       | Beginning of Period Price($) | End of Period Price($) | Total Dividends($) |\n|-------|------------------------------|------------------------|--------------------|\n| A     | 8.00                         | 10.00                  | 0.50               |\n| B     | 22.00                        | 19.00                  | 1.20               |\n| C     | 25.00                        | 25.00                  | 1.50               |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Beginning and ending prices of the assets\n    price_begin_A = 8.00\n    price_end_A = 10.00\n    \n    price_begin_B = 22.00\n    price_end_B = 19.00\n    \n    price_begin_C = 25.00\n    price_end_C = 25.00\n    \n    # Calculate the price return for each asset\n    price_return_A = (price_end_A - price_begin_A) / price_begin_A\n    price_return_B = (price_end_B - price_begin_B) / price_begin_B\n    price_return_C = (price_end_C - price_begin_C) / price_begin_C\n    \n    # Since it's an equal-weighted index, average the returns\n    index_price_return = (price_return_A + price_return_B + price_return_C) / 3\n    \n    # return answer\n    return index_price_return\n\n# Calling the function and printing the result\nprint(f\"The index's price return is: {solution()}\")\n```\n\nThe defined `solution` function calculates the price return for each asset, averages them to account for the equal weighting of the index, and returns the index's price return. Calling the function will provide the required answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-146",
        "question": "If John purchased a security for $55 in the first year, $60 in the second year, $64 in the third year, and $70 in the fourth year, what would be the harmonic mean of the price?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program to calculate the harmonic mean of the prices at which John purchased a security:\n\n```python\n# Import package if needs\nfrom statistics import harmonic_mean\n\ndef solution():\n    # Define variables name and value\n    prices = [55, 60, 64, 70]\n    \n    # Do math calculation to get the answer\n    mean_price = harmonic_mean(prices)\n    \n    # return answer\n    return mean_price\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program will output the harmonic mean of the prices. The `harmonic_mean` function from the `statistics` module calculates the harmonic mean of the given data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-147",
        "question": "In 2013, AskIt bought a customer list for $100,000, expected to yield equal annual benefits for four years. It also registered $200,000 in goodwill from the takeover of a rival firm, with projections indicating substantial benefits for at least a decade. Furthermore, it allocated $300,000 on media slots publicizing the firm's donations of goods and services in the local community, a move which the CEO believes significantly boosted the company's reputation and anticipates it to yield rewards for five years. Consequently, how much should the company declare as amortization expense in 2014?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    customer_list_cost = 100000\n    goodwill_cost = 200000\n    publicity_cost = 300000\n    \n    # The useful life of the assets\n    customer_list_life = 4\n    goodwill_life = 10  # Assuming the \"at least a decade\" is taken as exactly a decade for amortization\n    publicity_life = 5\n    \n    # Calculate the annual amortization expenses for each intangible asset\n    customer_list_amortization = customer_list_cost / customer_list_life\n    goodwill_amortization = goodwill_cost / goodwill_life\n    publicity_amortization = publicity_cost / publicity_life\n    \n    # Calculate the total amortization expense for 2014\n    total_amortization = customer_list_amortization + goodwill_amortization + publicity_amortization\n    \n    # return answer\n    return total_amortization\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-148",
        "question": "At what level of default in par value would Bond Class A suffer a loss, if issued by a special purpose entity as part of asset-backed securities structure?",
        "tables": [
            "| Bond Class      | Par Value (毛 millions) |\n| ----------- | ----------- |\n| A (senior)      | 200       |\n| B (subordinated)   | 20        |\n| C (subordinated)   | 5        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "As the question pertains to finance and the structuring of asset-backed securities, here is the context and then the Python program to calculate at what level of default in par value would Bond Class A suffer a loss.\n\nIn an asset-backed securities structure, typically, losses are allocated to the subordinate (junior) classes first. Bond Class A, being a senior class, would only suffer a loss if the defaults exceed the par value of the subordinated classes B and C. That means the total defaults must exceed the sum of the par values of Bond Class B and C for Bond Class A to begin incurring a loss.\n\nNow, here's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value_class_a = 200\n    par_value_class_b = 20\n    par_value_class_c = 5\n\n    # The point at which Class A would suffer a loss is after the subordinated bonds B and C are wiped out.\n    # Defaults must exceed the total of Bond B and Bond C par values.\n    loss_threshold_for_class_a = par_value_class_b + par_value_class_c\n    \n    # return answer\n    return loss_threshold_for_class_a * 1_000_000 # Convert from millions to actual value\n\n# Function call to test the solution\nprint(solution())\n```\n\nThis program does not require any external packages. All it does is to add the par value of subordinated Bond B and Bond C to calculate at what point Bond A starts to suffer a loss. Note that I convert the loss threshold from \"millions\" to an actual value by multiplying it by 1,000,000 to return the answer in full value units."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-149",
        "question": "During the year, the following events happened: At the start of the year, an organization had total equity from shareholders comprising of ¥200 million in common share capital and ¥50 million in preserved profits. What is the total equity from shareholders (in ¥ millions) at the conclusion of the year?",
        "tables": [
            "|                                                    | ¥millions |\n|----------------------------------------------------|-----------|\n| Net income reported                                | 42        |\n| Dividends paid                                     | 7         |\n| Unrealized loss on investments carried at fair value through other comprehensive income | 3         |\n| Repurchase of company stock, to be held as Treasury stock | 6         |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Initial common share capital and preserved profits at the start of the year\n    common_share_capital_start = 200\n    preserved_profits_start = 50\n    \n    # Net income reported during the year\n    net_income = 42\n    \n    # Dividends paid during the year\n    dividends_paid = 7\n    \n    # Unrealized loss on investments carried at fair value through other comprehensive income\n    unrealized_loss = 3\n    \n    # Repurchase of company stock to be held as Treasury stock\n    treasury_stock_repurchase = 6\n    \n    # Do math calculation to get the answer\n    # Preserved profits at the end of the year\n    preserved_profits_end = (preserved_profits_start + net_income - dividends_paid - unrealized_loss)\n    # Company stock considered as treasury stock reduces the equity\n    # Total equity at the end of the year\n    total_equity_end = (common_share_capital_start + preserved_profits_end - treasury_stock_repurchase)\n    \n    # return answer\n    return total_equity_end\n\n# Calling the solution function and printing the returned value\nprint(solution())  # Expected answer should be printed out\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-150",
        "question": "The three-asset portfolio designed by Sophia Milligan is outlined below. Milligan estimated the portfolio return to be 6.3%. What is the standard deviation of the portfolio?",
        "tables": [
            "|                  | Asset 1 | Asset 2 | Asset 3 |\n|------------------|---------|---------|---------|\n| Expected return  | 5%      | 6%      | 7%      |\n| Portfolio weight | 0.20    | 0.30    | 0.50    |\n|                  | Asset 1 | Asset 2 | Asset 3 |\n| Asset 1          | 196     | 105     | 140     |\n| Asset 2          | 105     | 225     | 150     |\n| Asset 3          | 140     | 150     | 400     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    weights = np.array([0.20, 0.30, 0.50])  # Portfolio weights for Asset 1, Asset 2, and Asset 3 respectively\n    expected_returns = np.array([0.05, 0.06, 0.07])  # Expected returns for Asset 1, Asset 2, and Asset 3 respectively\n    \n    # Covariance matrix (converted from variance and covariance values)\n    # Note that the diagonals represent variance, which is the square of standard deviation (volatility).\n    # Off-diagonals represent covariance between assets.\n    # Since we are given the numbers in percentage squared, we need to divide by 10,000 to convert them to actual values.\n    covariance_matrix = np.array([\n        [196, 105, 140],\n        [105, 225, 150],\n        [140, 150, 400]\n    ]) / 10000  # Converting from basis points to decimals\n    \n    # Calculate portfolio variance using the formula W'CW, where W is the weight vector and C is the covariance matrix\n    portfolio_variance = np.dot(weights, np.dot(covariance_matrix, weights))\n    \n    # Calculate the standard deviation of the portfolio, which is the square root of the variance\n    portfolio_std_dev = np.sqrt(portfolio_variance)\n    \n    # return answer\n    return portfolio_std_dev\n\n# Example of usage\nprint(solution())  # This will print out the result of the function call\n```\n\nTo execute the above program, make sure you have Python and NumPy installed. Once you do, you can simply run the Python script, and it will output the standard deviation of Sophia Milligan's portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-151",
        "question": "What is the degree of financial leverage (DFL) accessible for a company?",
        "tables": [
            "| Income Statement       | Millions ($) |\n|-----------------------|--------------|\n| Revenues              | 10.2         |\n| Variable operating costs | 4.6       |\n| Fixed operating costs    | 2.0       |\n| Operating income        | 3.6        |\n| Interest                | 1.2        |\n| Taxable income          | 2.4        |\n| Tax                     | 1.0        |\n| Net income              | 1.4        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "To calculate the Degree of Financial Leverage (DFL), we use the following formula:\n\nDFL = % Change in EPS (Earnings per Share) / % Change in EBIT (Earnings Before Interest and Taxes)\n\nThe quantity % Change in EPS / % Change in EBIT can be calculated using a simplified formula when we know the interest expenses and the EBIT:\n\nDFL = EBIT / (EBIT - Interest)\n\nFrom the table, the EBIT (Operating Income) is $3.6 million and the Interest is $1.2 million. Here's the program that calculates DFL using these values:\n\n```python\ndef solution():\n    # Define variables name and value\n    ebit = 3.6\n    interest = 1.2\n    \n    # Calculating Degree of Financial Leverage (DFL)\n    dfl = ebit / (ebit - interest)\n    \n    # Return answer\n    return dfl\n\n# Call the function and print the result if you want to see the output\nresult = solution()\nprint(result)\n```\n\nThis program will return the Degree of Financial Leverage for the company."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-152",
        "question": "Using the duration model with convexity adjustment, how much will the bond's price change, in percentage, if interest rates drop 2%, given that the bond's duration is 7.31 and its convexity is -24.85?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Below is a Python program that calculates the bond's price change in percentage using the duration model with convexity adjustment:\n\n```python\ndef solution():\n    # Define variables name and value\n    delta_interest_rate = 0.02  # Interest rates drop 2%\n    duration = 7.31\n    convexity = -24.85\n\n    # Linear approximation using duration\n    price_change_duration = duration * (-delta_interest_rate)\n\n    # Convexity adjustment\n    price_change_convexity = convexity * (delta_interest_rate ** 2) / 2\n\n    # Total percentage change in price\n    price_change_percentage = price_change_duration + price_change_convexity\n\n    # return answer\n    return price_change_percentage\n\n# You can call the function to get the result\n# result = solution()\n# print(\"The bond's price change in percentage is:\", result)\n```\n\nThis program uses the formula for bond price change based on duration and convexity:\n\n\\[\n\\text{Percentage Change in Price} = -\\text{Duration} \\cdot \\Delta y + \\frac{1}{2} \\cdot \\text{Convexity} \\cdot (\\Delta y)^2\n\\]\n\nWhere:\n- \\(\\text{Duration}\\) is the bond's duration,\n- \\(\\text{Convexity}\\) is the bond's convexity,\n- \\(\\Delta y\\) is the change in yield (interest rate). Here, a 2% drop is represented as 0.02.\n\nNote that in practice, convexity is usually a positive value reflecting the curvature of the price-yield relationship which allows for a more accurate estimation of price changes. However, if the provided number is negative, it most likely indicates a misunderstanding since convexity, by definition, should be positive. The program above calculates with the values as provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-153",
        "question": "Taking into account the given portfolio of bonds (par amounts listed in millions of USD). What is the value of the portfolio's DV01 (dollar value of 1 basis point)?",
        "tables": [
            "| Bond | Price | Par Amount Held | Modified Duration |\n|------|-------|-----------------|-------------------|\n| A    | 101.43| 3               | 2.36              |\n| B    | 84.89 | 5               | 4.13              |\n| C    | 121.87| 8               | 6.27              |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the portfolio's DV01:\n\n```python\ndef solution():\n    # Define variables for each bond's price, par amount held (in millions), and modified duration.\n    bond_info = {\n        'A': {'price': 101.43, 'par_amount': 3, 'modified_duration': 2.36},\n        'B': {'price': 84.89, 'par_amount': 5, 'modified_duration': 4.13},\n        'C': {'price': 121.87, 'par_amount': 8, 'modified_duration': 6.27},\n    }\n    \n    # Initialize the total DV01 at 0\n    total_dv01 = 0\n    \n    # Calculate the DV01 of each bond and sum them for the portfolio\n    for bond in bond_info.values():\n        # The market value of the bond is its price times its par amount (converted to actual monetary terms, hence the multiplication by 1,000,000).\n        market_value = bond['price'] * bond['par_amount'] * 1_000_000\n        # DV01 for each bond is the market value times modified duration, divided by 10,000 (to adjust for the basis point change).\n        dv01 = market_value * bond['modified_duration'] / 10_000\n        # Add the bond's DV01 to the total DV01 of the portfolio\n        total_dv01 += dv01\n    \n    # return the total DV01 of the portfolio\n    return total_dv01\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the DV01 for each bond by multiplying its market value (price times par amount, converted to actual dollars) by its modified duration and then dividing by 10,000 to get the value of a 1 basis point move. It then sums these individual DV01s to give the total DV01 of the portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-154",
        "question": "The bond purchased by Brian has some detailed information summarized below. What is the price of this bond?",
        "tables": [
            "|   |   |\n|---|---|\n| Coupon rate  | 5%  |\n| Interest paid  | semiannually  |\n| Mature time  | 2 years  |\n| Required rate of return  | 6%  |\n| Par value of the bond  | 100 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Sure, to calculate the price of the bond we need to sum the present value of the interest payments plus the present value of the par value at maturity. Here is the Python program to calculate the bond price:\n\n```python\ndef solution():\n    # Given variables\n    coupon_rate = 0.05\n    interest_payment_frequency = 2 # semiannual\n    years_to_maturity = 2\n    required_return = 0.06\n    par_value = 100\n    \n    # Calculate the semiannual coupon payment\n    semiannual_coupon_payment = (coupon_rate / interest_payment_frequency) * par_value\n    \n    # Calculate present value of the annuity (Coupon payments)\n    present_value_of_coupons = sum(semiannual_coupon_payment / (1 + required_return / interest_payment_frequency)**(interest_payment_frequency * t) for t in range(1, interest_payment_frequency * years_to_maturity + 1))\n\n    # Calculate present value of the par value\n    present_value_of_par = par_value / (1 + required_return / interest_payment_frequency)**(interest_payment_frequency * years_to_maturity)\n    \n    # Calculate bond price\n    bond_price = present_value_of_coupons + present_value_of_par\n    \n    # return the answer\n    return round(bond_price, 2)\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis function calculates the bond price based on the defined variables and returns the bond price rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-155",
        "question": "The XYZ Company is situated in a region with a 40 percent business tax rate on pre-tax income and a 30 percent individual tax rate on dividends. XYZ hands out all its post-tax income to its shareholders. What is the effective tax rate on XYZ's pre-tax income that is distributed as dividends?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_tax_rate = 0.40\n    individual_tax_rate = 0.30\n    \n    # Do math calculation to get the answer\n    # First, calculate the after-corporate tax income: (1 - corporate_tax_rate)\n    after_corporate_tax_income = 1 - corporate_tax_rate\n\n    # Then, calculate the after-individual tax income: \n    # It is the amount after corporate tax that is further reduced by the individual tax rate on dividends\n    after_individual_tax_income = after_corporate_tax_income * (1 - individual_tax_rate)\n\n    # Finally, calculate the effective tax rate by finding the proportion of income \n    # that is paid in taxes (initially 1) over the remaining income after all taxes are paid\n    effective_tax_rate = 1 - after_individual_tax_income\n\n    # return answer\n    return effective_tax_rate\n\n# Calling the function and printing the answer\nprint(solution())\n```\n\nWhen you call the `solution()` function, it will calculate the effective tax rate on a company's pre-tax income that is distributed as dividends, first by applying the corporate tax, and then by applying the individual tax on the dividend income. The `print` statement at the end will output the answer to the console."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-156",
        "question": "A note with a par of $100 and a semiannually paid coupon rate of 6%, with a YTM of 8% and a 10-year maturity timeframe. What is the DV01 of this note?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport numpy_financial as npf\n\ndef calculate_dv01(par_value, coupon_rate, ytm, years_to_maturity, payments_per_year):\n    # Define variables name and value\n    fv = par_value                    # Face value of the bond\n    pmt = (coupon_rate/100) * par_value / payments_per_year  # Coupon payment\n    nper = years_to_maturity * payments_per_year  # Total number of payments\n    rate = (ytm/100) / payments_per_year  # Yield to maturity per period\n    \n    # Calculate bond price before yield change\n    price_before = npf.pv(rate, nper, pmt, fv)\n    \n    # Calculate bond price after a 0.01% increase in yield\n    new_rate = rate + 0.0001  # Increase YTM by 1 basis point\n    price_after = npf.pv(new_rate, nper, pmt, fv)\n    \n    # Calculate DV01\n    dv01 = price_before - price_after\n\n    return dv01\n\ndef solution():\n    # Define variables name and value\n    par_value = 100  # Par value of the note\n    coupon_rate = 6   # Coupon rate of the note\n    ytm = 8          # Yield to maturity\n    years_to_maturity = 10  # Years to maturity\n    payments_per_year = 2    # Coupon payments are semiannually\n    \n    # Calculate DV01\n    dv01 = calculate_dv01(par_value, coupon_rate, ytm, years_to_maturity, payments_per_year)\n    \n    # Since we want to return the result in dollars, round to nearest cent\n    answer = round(dv01, 2)\n    \n    # return answer\n    return answer\n\n# Example usage:\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-157",
        "question": "BTB Bank is a top-tier corporate and institutional bank that runs a client-facing credit default swap (CDS) desk. Steve McQueen is a CDS client strategist. Paul Starr is BTB's chief CDS trader. McQueen and Starr are setting up a meeting with Adam Lopez, a portfolio manager for AEB Fund, to explore investment and trading techniques concerning bonds, CDSs, and equities. Lopez kick-starts the conversation by requesting a recap on fundamental CDS principles and parameters. McQueen responds by explaining that a CDS comprises both a premium leg and a payment leg and that anticipated loss forms one of the elements that impact its valuation. McQueen provides data for a bond issued by Zeus Corporation. According to the facts presented in Exhibit 1, what is the forecasted loss for the Zeus Corporation bond?",
        "tables": [
            "| Amount | $1,000.00 |\n| ------- | ------------ |\n| Coupon | 5.00% |\n| Maturity | 3 years |\n| Probability of Default | Year 1: 2.0%. Year 2: 2.5%. Year 3: 3.0% |\n| Recovery Rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program to calculate the expected loss for the Zeus Corporation bond based on the given probabilities of default, recovery rate, and bond amount:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_amount = 1000.00\n    probabilities_of_default = [0.02, 0.025, 0.03] # probabilities in each year\n    recovery_rate = 0.40\n    \n    # Expected Loss calculation:\n    # EL = (1-R) * (PD1 * B1 + PD2 * B2 + PD3 * B3)\n    # where:\n    # EL = Expected Loss\n    # R = Recovery Rate\n    # PDn = Probability of Default in year n\n    # Bn = Bond Amount at risk in year n (equal to bond amount for all years since there is no intermediate repayment)\n    \n    expected_loss = bond_amount * (1 - recovery_rate) * sum(probabilities_of_default)\n    \n    # return answer\n    return expected_loss\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program sets the bond amount and other values according to the data given, calculates the expected loss, and then returns it. Remember that the actual loss depends on when the default occurs; this calculation is a simplification that sums the default probabilities without adjusting for time value or considering the timing of potential defaults. For sophisticated models, one would use more complex financial models to account for timing and present value of money."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-158",
        "question": "Assuming that the interest from the coupon is reinvested at the bond's YTM, how much interest will a financier receive over the bond's 10-year lifespan if they buy a bond with a 6% annual coupon for $1,000 at par and holds it until it matures?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables name and value\n    face_value = 1000            # face value of the bond\n    coupon_rate = 0.06           # annual coupon rate\n    years_to_maturity = 10       # bond's lifespan in years\n    frequency = 1                # annual coupon payment\n    \n    # Calculate coupon payment per period\n    coupon_payment = face_value * coupon_rate / frequency\n    \n    # Calculate the yield to maturity (YTM) which is the same as the coupon rate when the bond is bought at par\n    ytm = coupon_rate\n    \n    # Calculate the future value of the reinvested coupon payments at the YTM\n    # Using Future Value of an ordinary annuity calculation (FV = PV * (1 + r)^n)\n    future_value_coupons = npf.fv(rate=ytm, nper=years_to_maturity, pmt=-coupon_payment, pv=0)\n    \n    # Return the total interest received over the bond's lifespan\n    total_interest = future_value_coupons - (coupon_payment * years_to_maturity * frequency)\n    \n    # return answer\n    return total_interest\n\n# Please note that numpy_financial is a third-party package that might not be installed.\n# If numpy_financial is not available, we can perform the calculations without it.\n# However, for the purpose of this example, numpy_financial is used to simplify the future value calculation.\n```\nPlease note that in order to run the above code, you need to have the `numpy_financial` package installed. You can install this package using `pip`:\n\n```sh\npip install numpy-financial\n```\n\nWithout using `numpy_financial`, you'd have to calculate the future value of an annuity by iterating through each period or using a formula that calculates the future value of a series of cash flows. \n\nIf you'd like a version without any third-party packages, let me know!"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-159",
        "question": "A buyer bought a stock 20 years ago for $15 and it paid no dividends throughout the investment period, but it had an annual compounded rate of 16%. Based on this information, what is the stock's value today?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 15  # initial stock value\n    growth_rate = 0.16  # annual compounded growth rate\n    investment_period = 20  # years\n    \n    # Do math calculation to get the answer\n    # Compound interest formula: Final Value = Initial Value * (1 + Growth Rate) ^ Investment Period\n    final_value = initial_value * ((1 + growth_rate) ** investment_period)\n    \n    # return answer\n    return final_value\n\n# If you want the result as a float, you can call the function directly.\n# If you need the result rounded to two decimal places, for example, you would modify the return line to:\n# return round(final_value, 2)\n```\n\nThis function calculates the value of the stock today after 20 years of compounded growth at a rate of 16%. The compound interest formula is used to find the final value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-160",
        "question": "Based on essential foundational rules, the researchers gathered some data. Could you compute the annual number of autonomous choices made?",
        "tables": [
            "| Information Ratio | 0.66 |\n|-------------------|------|\n| Information Coefficient | 0.5 |\n| Transfer Coefficient | 0.89 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the number of annual autonomous decisions, we need to calculate the annual information ratio provided by the researchers. The formula to calculate the annual information ratio is given by:\n\n$$ \\text{Information Ratio} = \\text{Information Coefficient} \\times \\sqrt{\\text{Breadth}} $$\n\nWhere:\n- The Information Ratio is provided (0.66).\n- The Information Coefficient is provided (0.5).\n- Breadth is the number of independent investment decisions made per year (what we want to calculate).\n\nThe formula to calculate Breadth based on the information ratio and information coefficient is:\n\n$$ \\text{Breadth} = \\left(\\frac{\\text{Information Ratio}}{\\text{Information Coefficient}}\\right)^2 $$\n\nIn addition, to factor in the Transfer Coefficient, the effective breadth would be adjusted as follows:\n\n$$ \\text{Effective Breadth} = \\text{Breadth} \\times (\\text{Transfer Coefficient})^2 $$\n\nThus, we need to rearrange for Breadth in terms of the Information Ratio and Information Coefficient, and then adjust for the Transfer Coefficient.\n\nHere is the Python code to perform these calculations:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    information_ratio = 0.66\n    information_coefficient = 0.5\n    transfer_coefficient = 0.89\n    \n    # Do math calculation to get the answer\n    # Calculate breadth\n    breadth = (information_ratio / information_coefficient) ** 2\n    \n    # Adjust with Transfer Coefficient\n    effective_breadth = breadth * (transfer_coefficient ** 2)\n    \n    # return answer - the annual number of autonomous choices\n    return effective_breadth\n\n# Perform the calculation\nanswer = solution()\nprint(f\"The annual number of autonomous choices made is: {answer}\")\n```\n\nThis code will calculate and return the annual number of autonomous choices based on the information provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-161",
        "question": "Based on the chosen details, what is the projected net income (in $ thousands) for the corporation next year?",
        "tables": [
            "|      | Current Year ($ thousands) | Projection for Next Year ($ thousands) |\n|------|---------------------------|---------------------------------------|\n| Sales | 2,200 | 2,500 |\n| Variable operating costs (% of sales) | 28% | 30% |\n| Fixed operating costs | 1,400 | 1,400 |\n| Tax rate | 25% | 25% |\n| Dividends paid | 55 | 60 |\n| Interest bearing debt at 5% | 500 | 500 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_projection = 2500  # in $ thousands\n    variable_costs_percentage = 30  # as a percentage\n    fixed_operating_costs = 1400  # in $thousands\n    tax_rate = 25  # as a percentage\n    interest_expense = 500 * 5 / 100  # 5% of interest bearing debt\n\n    # Calculate variable operating costs for next year\n    variable_operating_costs = sales_projection * (variable_costs_percentage / 100)\n\n    # Calculate earnings before interest and tax (EBIT)\n    ebit = sales_projection - variable_operating_costs - fixed_operating_costs\n\n    # Calculate earnings before tax (EBT) by subtracting interest expense\n    ebt = ebit - interest_expense\n\n    # Calculate net income by subtracting taxes\n    net_income = ebt * (1 - tax_rate / 100)\n\n    # Return net income (in $ thousands)\n    return net_income\n\n# Call the function and print the result\nprint(solution())  # This print statement is here for testing purposes and can be removed.\n```\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-162",
        "question": "The floral products seller, Lavender Bloom Corp., announced a yearly cost of goods sold amounting to $75 million. There was an increase in total assets by $55 million, though there was a decrease in inventory by $6 million. Meanwhile, total liabilities escalated by $45 million and there was a surge in accounts payable by $2 million. What would be the probable total of cash that the company paid to its vendors?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 75000000\n    increase_in_total_assets = 55000000\n    decrease_in_inventory = 6000000\n    increase_in_total_liabilities = 45000000\n    increase_in_accounts_payable = 2000000\n    \n    # Cash paid to vendors is the total cash outflow to cover costs of goods sold, adjusted for changes in inventory and accounts payable\n    # This is based on the cash flow identity: Cash = cost_of_goods_sold + change_in_inventory - change_in_accounts_payable\n\n    # Calculate net change in working capital affecting cash paid to suppliers/vendors\n    net_change_in_working_capital = (-decrease_in_inventory) - increase_in_accounts_payable\n\n    # Do math calculation to get the answer\n    cash_paid_to_vendors = cost_of_goods_sold + net_change_in_working_capital\n    \n    # Return answer\n    return cash_paid_to_vendors\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-163",
        "question": "What is the equity's proportion in a business's capital structure, with a marginal tax rate of 30%, a weighted average cost of capital of 7.4%, a before-tax cost of debt of 5%, and a 10% cost of equity?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Certainly! To find the equity's proportion in the business's capital structure, we can use the Weighted Average Cost of Capital (WACC) formula:\n\nWACC = E/V * Re + D/V * Rd * (1 - Tc)\n\nWhere:\n- E = Market value of the equity\n- D = Market value of the debt\n- V = E + D = Total value of financing (equity + debt)\n- Re = Cost of equity\n- Rd = Before-tax cost of debt\n- Tc = Marginal tax rate\n\nFrom the WACC formula, we can express the equity proportion (E/V) as:\n\nE/V = (WACC - D/V * Rd * (1 - Tc)) / Re\n\nGiven that we do not have the values of E, D, and V separately, we cannot directly solve for E/V. However, by using the WACC formula and rearranging for E/V, we can find it indirectly.\n\nLet's go ahead and write the Python program to calculate the equity's proportion (E/V):\n\n```python\ndef solution():\n    # Given values\n    tax_rate = 0.30\n    wacc = 0.074\n    cost_of_debt_before_tax = 0.05\n    cost_of_equity = 0.10\n\n    # Since we do not have E or D, we make an assumption that E/V + D/V = 1\n    # WACC = E/V * Re + D/V * Rd * (1 - Tc)\n    # WACC = E/V * Re + (1 - E/V) * Rd * (1 - Tc)\n    \n    # We solve for E/V\n    # E/V * Re + Rd * (1 - Tc) - E/V * Rd * (1 - Tc) - WACC = 0\n    # E/V * (Re - Rd * (1 - Tc)) = WACC - Rd * (1 - Tc)\n    # E/V = (WACC - Rd * (1 - Tc)) / (Re - Rd * (1 - Tc))\n    \n    equity_proportion = (wacc - cost_of_debt_before_tax * (1 - tax_rate)) / (cost_of_equity - cost_of_debt_before_tax * (1 - tax_rate))\n\n    # Return the answer\n    return equity_proportion\n\n# Call the function and print the result\nprint(f\"The equity's proportion in the business's capital structure: {solution():.2f}\")\n```\nWhen you run this Python program, it will return the equity's proportion in the business's capital structure."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-164",
        "question": "What is R2R^2R2 if the estimate for beta, β^=0\\widehat\\beta = 0β​=0?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # when the estimate for beta (slope of the regression line) is 0,\n    # it indicates there is no linear relationship between the independent and dependent variables.\n    # Hence, R-squared, which measures the proportion of the variance in the dependent variable\n    # that is predictable from the independent variable(s), would also be 0.\n    \n    r_squared = 0\n\n    # return R-squared\n    return r_squared\n\n# Note: This is a conceptual explanation translated into code.\n# In real scenarios, the beta and R-squared are calculated using statistical methods and data.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-165",
        "question": "What is the per share value of the common stock a stockholder has collected data on for possible investment in a business?",
        "tables": [
            "| Current year's earnings per share | $2.50 |\n|---|---|\n| Dividend payout ratio | 60% |\n| Dividend growth rate expected during Year 1 and 2 | 25% |\n| Dividend growth rate expected after Year 2 | 5% |\n| Investors' required rate of return | 12% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! We will use the Gordon Growth Model (a version of the Dividend Discount Model that accounts for a period of high growth followed by a period of stable growth) to calculate the value of a common stock based on the provided data.\n\n```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share = 2.50\n    dividend_payout_ratio = 0.60\n    initial_dividend_growth_rate = 0.25\n    perpetual_dividend_growth_rate = 0.05\n    required_rate_of_return = 0.12\n    \n    # Calculate initial dividends\n    D0 = earnings_per_share * dividend_payout_ratio\n    D1 = D0 * (1 + initial_dividend_growth_rate)\n    D2 = D1 * (1 + initial_dividend_growth_rate)\n    \n    # Calculate the Terminal value at the end of Year 2\n    D3 = D2 * (1 + perpetual_dividend_growth_rate)\n    Terminal_value = D3 / (required_rate_of_return - perpetual_dividend_growth_rate)\n    \n    # Discount D1, D2 and Terminal value back to present value\n    present_value_D1 = D1 / (1 + required_rate_of_return)\n    present_value_D2 = D2 / ((1 + required_rate_of_return) ** 2)\n    present_value_Terminal_value = Terminal_value / ((1 + required_rate_of_return) ** 2)\n    \n    # Add the present values to get the per share value\n    per_share_value = present_value_D1 + present_value_D2 + present_value_Terminal_value\n    \n    # return answer\n    return round(per_share_value, 2)\n\n# Call the function and print the result\nprint(\"The per share value of the common stock is $\", solution())\n```\n\nBy defining the given variables and applying the Gordon Growth Model, this program calculates the present value of expected dividends in Year 1 and Year 2, along with the present value of all future dividends from Year 3 onward (the Terminal value), and returns the per share value of the common stock. The result is rounded to two decimal places for convenience."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-166",
        "question": "Recently, Bob Inc. acquired a production equipment for $60,000, which is anticipated to produce an annual cash inflow of $25,000 for a duration of six years. The company plans to depreciate the equipment over six years for accounting reasons. Nonetheless, the tax department approximates the useful life of the equipment to be 5 years. Assuming a tax rate of 40% and the equipment has no residual value. What would be the tax payable by Bob Inc. in the 6th year if they use the straight-line depreciation method?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equipment_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_depreciation_period = 6\n    tax_depreciation_period = 5\n    tax_rate = 0.40\n    residual_value = 0\n\n    # Calculate annual depreciation for accounting and tax purposes\n    accounting_depreciation = (equipment_cost - residual_value) / accounting_depreciation_period\n    tax_depreciation = (equipment_cost - residual_value) / tax_depreciation_period\n\n    # Calculate taxable income in the 6th year (accounting depreciation is used)\n    taxable_income_6th_year = annual_cash_inflow - accounting_depreciation\n\n    # Since the tax depreciation is only applicable for 5 years, in the 6th year, only accounting depreciation is deducted.\n    tax_payable_6th_year = taxable_income_6th_year * tax_rate\n\n    # return answer\n    return tax_payable_6th_year\n    \n# Call function `solution` to get the answer\nprint(solution())\n```\n\nLet's run the code provided in a Python environment to find out the tax payable by Bob Inc. in the 6th year using the straight-line depreciation method. The calculation is based on using accounting depreciation for tax purposes in the 6th year, as the tax depreciation period is only 5 years."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-167",
        "question": "Johnson inquires from Smith about the most frequently utilized financial ratios for assessing private real estate investments, such as commercial property. Based on the data in Exhibit 1, what is the cash-on-cash return for the property that Smith requires analysis for?",
        "tables": [
            "|                            |                |\n|----------------------------|----------------|\n| Exhibit 1 Commercial Property Information |       |\n| Net operating income       | $700,000       |\n| Mortgage on property       | $9,000,000     |\n| Debt service               | $600,000       |\n| Market value of property   | $10,000,000    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Here is a Python program that calculates the cash-on-cash return for the property:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 700000\n    debt_service = 600000\n    \n    # Cash flow from operations is Net operating income minus debt service\n    cash_flow_from_operations = net_operating_income - debt_service\n    \n    # Mortgage on property reflects the initial cash invested since it's the principal amount of the loan\n    initial_cash_invested = 9000000\n    \n    # Cash-on-cash return is the annual cash flow divided by the initial cash invested\n    cash_on_cash_return = (cash_flow_from_operations / initial_cash_invested) * 100  # Convert to percentage\n    \n    # return answer\n    return cash_on_cash_return\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate and return the cash-on-cash return percentage for the referenced commercial property."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-168",
        "question": "By employing the Black-Scholes model, determine the worth of a European call option with these details: spot price = 100; strike rate = 110; risk-free interest rate = 10%; duration until expiration = 0.5 years; N(d1) is 0.457185 and N(d2) is 0.374163.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Certainly! We need to use the Black-Scholes formula for a European call option, which is given by the expression:\n\nC = S0 * N(d1) - X * exp(-rT) * N(d2)\n\nwhere:\n- C is the call option price\n- S0 is the current stock (or spot) price\n- X is the strike price of the option\n- r is the risk-free interest rate\n- T is the time to maturity (in years)\n- N(d1) is the value of the standard normal cumulative distribution function for d1\n- N(d2) is the value of the standard normal cumulative distribution function for d2\n\nGiven the values for S0 (spot price), X (strike price), r (risk-free interest rate), T (time to maturity), N(d1), and N(d2), we can calculate the worth of the European call option using this formula.\n\nPlease find the Python program below:\n```python\nfrom math import exp\n\ndef solution():\n    # Define the variables as given\n    S0 = 100      # current stock (or spot) price\n    X = 110       # strike price of the option\n    r = 0.10      # risk-free interest rate (10%)\n    T = 0.5       # time to maturity in years (0.5 years)\n    N_d1 = 0.457185   # value of N(d1)\n    N_d2 = 0.374163   # value of N(d2)\n    \n    # Calculate the European call option price using the Black-Scholes formula\n    C = S0 * N_d1 - X * exp(-r * T) * N_d2\n    \n    # Return the calculated call option price\n    return C\n\n# You can call the function and print the result if you wish to see the result\n# print(solution())\n```\n\nThis function will calculate and return the worth of a European call option given the parameters stated in your question."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-169",
        "question": "Using the given extract from the cumulative distribution function for the standard normal random variable table: Cumulative Probabilities for a Standard Normal DistributionP(Z ≤ x) = N(x) for x ≥ 0 or P(Z ≤ z) = N(z) for z ≥ 0, If a variable follows a normal distribution with an average of 2.00 and a variance of 16.00, what's the likelihood of getting a value that is 7.40 or lower?",
        "tables": [
            "|     |     |                                                                       |     |     |\n|-----|-----|-----------------------------------------------------------------------|-----|-----|\n| xor z 0 |     | 0.01 0.02 0.03 0.04 0.05 0.06 0.07                                   | 0.08 | 0.09 |\n| 0.10 |     | 0.5398 0.5438 0.5478 0.5517 0.5557 0.5596 0.5636 0.5675 0.5714 0.5753 |     |     |\n| 0.20 |     | 0.5793 0.5832 0.5871 0.5910 0.5948 0.5987 0.6026 0.6064 0.6103 0.6141 |     |     |\n| 0.30 |     | 0.6179 0.6217 0.6255 0.6293 0.6331 0.6368 0.6406 0.6443 0.6480 0.6517 |     |     |\n| 0.40 |     | 0.6554 0.6591 0.6628 0.6664 0.6700 0.6736 0.6772 0.6808 0.6844 0.6879 |     |     |\n| 1.10 |     | 0.8643 0.8665 0.8686 0.8708 0.8729 0.8749 0.8770 0.8790 0.8810 0.883  |     |     |\n| 1.20 | 0.8849 0.8869 0.8888 0.8907 0.8925 0.8944 0.8962 0.8980 0.8997 0.9015 |      |     |\n| 1.30 | 0.9032 0.9049 0.9066 0.9082 0.9099 0.9115 0.9131 0.9147 0.9162 0.9177 |      |     |\n| 1."
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 2.00\n    variance = 16.00\n    standard_deviation = variance ** 0.5\n    value = 7.40\n    \n    # Standardize the variable (convert it to a Z-score)\n    z = (value - mean) / standard_deviation\n    \n    # Use scipy's norm.cdf to calculate the cumulative probability for the Z-score\n    probability = norm.cdf(z)\n    \n    # return answer\n    return probability\n\n# You can print the result to check the function\nprint(solution())\n```\n\nThis code will calculate the likelihood of getting a value of 7.40 or lower from a normal distribution with a mean of 2.00 and a variance of 16.00. It standardizes the value to obtain a Z-score and then uses the `norm.cdf` function from the `scipy.stats` module to calculate the cumulative probability."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-170",
        "question": "If under LIFO, the ABC organization reported a COGS of $500,000, and an ending inventory of $600,000 in 2017, and it was noted in the footnotes that LIFO reserve increased by $10,000, what would be its cost of goods sold if ABC organization switched its accounting method from LIFO to FIFO?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program that calculates the cost of goods sold (COGS) for ABC organization if it switched from LIFO to FIFO:\n\n```python\ndef solution():\n    # Define variables name and value\n    cogs_lifo = 500000\n    lifo_reserve_increase = 10000\n\n    # To calculate COGS under FIFO, subtract the increase in LIFO reserve from COGS under LIFO\n    cogs_fifo = cogs_lifo - lifo_reserve_increase\n    \n    # return answer\n    return cogs_fifo\n\n# Call to the function to in case need to test\n# print(solution())\n```\n\nWhen the LIFO reserve increases, it means that the FIFO-based inventory is higher than the LIFO-based inventory. Therefore, to calculate FIFO-based COGS, you should subtract the increase in the LIFO reserve from the COGS reported under LIFO."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-171",
        "question": "Suppose that in the futures market, the 1-year forward rate stands at NZD/AUD 1.1079. Given that the yearly interest rate is 2.5% in Australia (AUD) and 3% in New Zealand (NZD), what would be the NZD/AUD spot rate?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To determine the NZD/AUD spot rate, we can use the interest rate parity formula which links the spot and forward exchange rates with the interest rates in the two countries. The formula is:\n\nF = S * (1 + i_foreign) / (1 + i_domestic)\n\nwhere:\nF = Forward exchange rate (NZD/AUD)\nS = Spot exchange rate (NZD/AUD)\ni_foreign = Interest rate in the foreign country (New Zealand in this case)\ni_domestic = Interest rate in the domestic country (Australia in this case)\n\nRearranging the formula to solve for S, we have:\n\nS = F / [(1 + i_foreign) / (1 + i_domestic)]\n\nGiven:\nF = 1.1079 (1-year forward rate NZD/AUD)\ni_foreign = 3% (interest rate in New Zealand)\ni_domestic = 2.5% (interest rate in Australia)\n\nWe can now write a Python program to calculate the spot rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.1079  # 1-year forward rate NZD/AUD\n    interest_rate_NZD = 0.03  # Interest rate in New Zealand (3%)\n    interest_rate_AUD = 0.025  # Interest rate in Australia (2.5%)\n    \n    # Do math calculation to get the spot rate\n    spot_rate = forward_rate / ((1 + interest_rate_NZD) / (1 + interest_rate_AUD))\n    \n    # return spot rate\n    return spot_rate\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program defines the required values, calculates the spot rate according to the interest rate parity formula, and then returns the calculated spot rate value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-172",
        "question": "If a credit commitment totals $10 million, with $8.5 million currently still due, and there's a 1% chance of default with a recovery rate of 40%, what's the predicted loss for the credit?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! Here's a Python program that calculates the Expected Loss (EL) for the credit based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_commitment = 10000000\n    outstanding_amount = 8500000\n    probability_of_default = 0.01\n    recovery_rate = 0.40\n    \n    # Calculate loss given default (LGD)\n    loss_given_default = 1 - recovery_rate\n    \n    # Calculate expected loss\n    expected_loss = outstanding_amount * probability_of_default * loss_given_default\n    \n    # return expected loss\n    return expected_loss\n\n# Example usage:\n# print(solution())\n```\n\nThe function `solution()` computes the Expected Loss by multiplying the outstanding amount by the probability of default and the loss given default (which is 1 minus the recovery rate)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-173",
        "question": "What is the relative frequency of the height range \"170 ~175\" in the student height distribution for the class?",
        "tables": [
            "| Height interval | Absolute Frequency |\n|----------------|---------------------|\n| 155~160         | 10                       |\n| 160~165         | 20                       |\n| 165~170         | 30                       |\n| 170~175         | 24                       |\n| 175~180         | 10                       |\n| 180~185         | 6                         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    frequency_170_175 = 24\n    total_students = 10 + 20 + 30 + 24 + 10 + 6  # Sum of all absolute frequencies\n    \n    # Do math calculation to get the answer\n    relative_frequency_170_175 = frequency_170_175 / total_students\n    \n    # return answer\n    return relative_frequency_170_175\n    \n# Uncomment the following line to check the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-174",
        "question": "Calculate the forward price of a 6-month forward contract on a bond that is priced at $1,058, has a biannual coupon payment of $30 and had its last payment three months ago, given a continuous interest rate of 5%.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    bond_price = 1058\n    coupon_payment = 30\n    coupon_period = 6\n    last_payment = 3\n    annual_rate = 0.05\n    time_to_maturity = 6\n\n    # The bond will make a coupon payment halfway through the forward contract period\n    # Adjust the bond price to subtract the present value of the coupon payment\n    adjusted_bond_price = bond_price - coupon_payment * math.exp(-annual_rate * (coupon_period - last_payment) / 12)\n    \n    # Calculate the forward price using continuous compounding\n    forward_price = adjusted_bond_price * math.exp(annual_rate * time_to_maturity / 12)\n    \n    # return answer\n    return round(forward_price, 2)\n\n# Since the answer expects rounding to two decimal places\nprint(solution())\n```\nThis program calculates the forward price of a bond using the given interest rate and time to maturity while adjusting for the upcoming coupon payment. The final answer is rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-175",
        "question": "The Lawson Company has recently paid a dividend of $1.75 per share. If the necessary annual return rate is 12.3 percent and dividends are predicted to consistently grow at 9.2 percent per year without end, what is the intrinsic worth of Lawson Company stock?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program that calculates the intrinsic worth of Lawson Company stock based on the given dividend, required rate of return, and growth rate:\n\n```python\ndef solution():\n    # Define variables\n    dividend = 1.75  # The most recent dividend paid\n    required_return = 0.123  # The required annual return rate (12.3%)\n    growth_rate = 0.092  # The predicted annual growth rate of dividends (9.2%)\n    \n    # Calculate the intrinsic value using the Dividend Discount Model (DDM)\n    intrinsic_value = dividend / (required_return - growth_rate)\n    \n    # Return the intrinsic value of the stock\n    return intrinsic_value\n\n# You can print the result to check the function output\n#print(solution())\n```\n\nThis function uses the Gordon Growth Model (also known as the Dividend Discount Model for a perpetuity with growth), which calculates the present value of an infinite series of future dividends that grow at a constant rate. The formula is `P = D / (r - g)`, where `P` is the price (intrinsic value) of the stock, `D` is the expected dividend next period, `r` is the required rate of return, and `g` is the growth rate of the dividends."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-176",
        "question": "According to a study carried out by a broker, what is the predicted increase (%) in value of the Canadian dollar (CAD) compared to the British pound (GBP)?",
        "tables": [
            "|        | Spot Rate | Expected Spot Rate in One Year |\n|--------|-----------|------------------------|\n| USD/EUR| 1.3960    | 1.3860                 |\n| USD/CAD| 1.0110    | 1.0300                 |\n| EUR/GBP| 1.2850    | 1.2790                 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Given exchange rates\n    usd_to_eur_now = 1.3960\n    usd_to_eur_future = 1.3860\n    usd_to_cad_now = 1.0110\n    usd_to_cad_future = 1.0300\n    eur_to_gbp_now = 1.2850\n    eur_to_gbp_future = 1.2790\n    \n    # Calculate the current and future GBP/CAD exchange rate\n    # GBP/CAD = (USD/CAD) / (EUR/GBP) * (USD/EUR)\n    \n    gbp_to_cad_now = usd_to_cad_now / eur_to_gbp_now * usd_to_eur_now\n    gbp_to_cad_future = usd_to_cad_future / eur_to_gbp_future * usd_to_eur_future\n    \n    # Calculate the predicted increase (%) in value of the Canadian dollar (CAD) compared to the British pound (GBP)\n    # Percentage increase = ((Future rate - Current rate) / Current rate) * 100\n    predicted_increase = ((gbp_to_cad_future - gbp_to_cad_now) / gbp_to_cad_now) * 100\n    \n    # return answer\n    return predicted_increase\n    \n# Calling the solution function and printing the result\nprint(solution())\n```\n\nThis program calculates the predicted percentage increase in value of the Canadian dollar (CAD) relative to the British pound (GBP) based on the provided expected spot rates. The result will vary slightly due to rounding differences in floating point arithmetic."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-177",
        "question": "Considering two bonds that pay interest annually, what is the price difference between Bond 1 and Bond 2 per 100 of par value at a market discount rate of 4%?",
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity |\n|------|-------------|------------------|\n| A    | 5%          | 2 years          |\n| B    | 3%          | 2 years          |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value for both bonds\n    coupon_rate_a = 0.05  # Bond A\n    coupon_rate_b = 0.03  # Bond B\n    time_to_maturity = 2  # Both bonds have 2 years to maturity\n    market_discount_rate = 0.04\n    par_value = 100  # Par value for both bonds\n\n    # Calculating present value of the future cash flows for Bond A\n    coupon_payment_a = coupon_rate_a * par_value  # Annual coupon payment for Bond A\n    bond_a_price = 0\n    for i in range(1, time_to_maturity + 1):\n        bond_a_price += coupon_payment_a / (1 + market_discount_rate)**i\n    bond_a_price += par_value / (1 + market_discount_rate)**time_to_maturity\n\n    # Calculating present value of the future cash flows for Bond B\n    coupon_payment_b = coupon_rate_b * par_value  # Annual coupon payment for Bond B\n    bond_b_price = 0\n    for i in range(1, time_to_maturity + 1):\n        bond_b_price += coupon_payment_b / (1 + market_discount_rate)**i\n    bond_b_price += par_value / (1 + market_discount_rate)**time_to_maturity\n\n    # Calculate price difference\n    price_difference = bond_a_price - bond_b_price\n\n    # return answer\n    return round(price_difference, 2)  # Rounding to 2 decimal places for currency value\n\n# Test the function\nprint(solution())\n```\n\nThe above program defines coupon rates for bonds A and B, their time to maturity, a market discount rate, and the par value of the bonds. It then calculates the present value of future cash flows (both the coupon payments and the par value at maturity) for each bond. Finally, it calculates the price difference between the two bonds, and rounds the result to two decimal places before returning the value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-178",
        "question": "Taking into account the data on three securities: Security X, Security Y, and Security Z. A dividend income portfolio includes Security X and Security Y. If an additional $10 million is invested into the portfolio to acquire Security Z, what will be the yearly modified duration of the portfolio?",
        "tables": [
            "|                     | Bond A       | Bond B       | Bond C       |\n|---------------------|--------------|--------------|--------------|\n| Time to maturity (years) | 10     | 6     | 4     |\n| Par value         | $10,000,000  | $10,000,000  | $10,000,000  |\n| Market value      | $9,323,381   | $11,189,092  | $10,000,000  |\n| Annualized modified duration  | 7.3105  | 4.6880  | 3.4370  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the yearly modified duration of the portfolio including Security Z, we need more data concerning the duration of Security X, Security Y, and the proportion or size of these securities within the portfolio. Since this information is not provided, we cannot accurately calculate the modified duration of the portfolio after the investment in Security Z.\n\nThe modified duration of a portfolio is calculated by taking the weighted average modified duration of the individual securities, where the weight is based on the market value of the securities within the portfolio. The formula looks as following:\n\nPortfolio Duration = (Market Value of Bond A * Duration of Bond A + Market Value of Bond B * Duration of Bond B + ... + Market Value of Bond N * Duration of Bond N) / Total Market Value of the Portfolio\n\nHowever, without the details on Security X and Security Y's market value and duration, and the specifics of Security Z's duration, the program below is only a template and cannot return a meaningful result.\n\nHere is the template, which you would need to complete with the actual data in order to reach a solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    # We need the market value, duration, and amount invested for Security X, Y, and Z\n    market_value_X = ... # Placeholder, need actual data\n    duration_X = ...     # Placeholder, need actual data\n    market_value_Y = ... # Placeholder, need actual data\n    duration_Y = ...     # Placeholder, need actual data\n    amount_invested_Z = 10000000  # $10 million invested in Security Z\n    duration_Z = ...     # Placeholder, need actual data\n    \n    # The total market value of the portfolio after investing in Security Z\n    total_market_value = market_value_X + market_value_Y + amount_invested_Z\n    \n    # Calculate the weighted durations\n    weighted_duration_X = (market_value_X * duration_X) / total_market_value\n    weighted_duration_Y = (market_value_Y * duration_Y) / total_market_value\n    weighted_duration_Z = (amount_invested_Z * duration_Z) / total_market_value\n    \n    # Calculate the portfolio's duration\n    portfolio_duration = weighted_duration_X + weighted_duration_Y + weighted_duration_Z\n    \n    # return answer\n    return portfolio_duration\n```\n\nPlease provide the missing information on Security X, Y, and Z for a specific solution."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-179",
        "question": "If the base value is $20 at expiration, the strike price is $18, what is the worth of the European put?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program that calculates the worth of a European put option at expiration:\n\n```python\ndef solution():\n    # Define variables name and value\n    base_value = 20\n    strike_price = 18\n    \n    # Do math calculation to get the answer\n    # European put option value at expiration is max(strike_price - base_value, 0)\n    put_option_worth = max(strike_price - base_value, 0)\n    \n    # return answer\n    return put_option_worth\n    \n# call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate the worth of the European put option given the base value and the strike price. Since options have intrinsic value when they are in the money, the put value is the positive difference between the strike price and the base value. In this case, because the base value is above the strike price, the put option would be out of the money and thus worth zero at expiration."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-180",
        "question": "A researcher gathered information about a corporation wherein the preferred shares can be transformed into 10,000 ordinary shares and the debt cannot be converted. What is the diluted earnings per share?",
        "tables": [
            "|   |   |\n|---|---|\n| Net income  | \\$1,000,000.00  |\n| Debt outstanding with a coupon rate of 4%  | \\$5,000,000.00  |\n| Preferred stocks with dividend rate of 4%  | \\$1,000,000.00  |\n| Tax rate  | 35%  |\n| Average weighted number of shares issued  | 500,000  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 1000000\n    debt_outstanding = 5000000\n    preferred_dividend_rate = 0.04\n    preferred_stocks = 1000000\n    average_shares = 500000\n    convertible_preferred_shares = 10000\n    tax_rate = 0.35\n    \n    # Calculate preferred dividends\n    preferred_dividends = preferred_stocks * preferred_dividend_rate\n    \n    # Adjust net income for preferred dividends to get earnings available to common shareholders\n    earnings_for_common = net_income - preferred_dividends\n    \n    # Calculate diluted average weighted shares\n    diluted_shares = average_shares + convertible_preferred_shares\n    \n    # Calculate diluted earnings per share\n    diluted_eps = earnings_for_common / diluted_shares\n    \n    # return answer\n    return diluted_eps\n\n# Note: Tax rate and debt details are not directly applicable to the diluted EPS calculation because\n# the convertible securities in this situation consist only of preferred shares.\n```\n\nThis function takes the provided information about a corporation's earnings and share structure and calculates the diluted earnings per share (EPS), accounting for the potential conversion of preferred shares into common shares. It ignores the impact of debt on the calculation as the debt is non-convertible. The tax rate is also not applicable in this specific diluted EPS calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-181",
        "question": "Assuming there are 225 days in a year, what is the highest number of daily losses that can go beyond the 1-day 99% VaR acceptable in a 1-year backtest for a financial risk analyst to determine, with 95% certainty, that the model is properly calibrated?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To answer this question, we'll need to use the binomial distribution where the number of trials is the number of days in a year (225 days, in this case) and the probability of a 'success' (exceeding the 1-day 99% VaR) is 1%. We will calculate the critical value for a 95% confidence level, which means that we are looking for the most number of allowed exceptions such that we still believe the model is working properly 95% of the time.\n\nHere is an example of how you would implement this using the `scipy.stats` package to do the calculation:\n\n```python\nfrom scipy.stats import binom\n\ndef solution():\n    days_in_year = 225\n    confidence_level = 0.95\n    var_threshold = 0.01\n    \n    # Calculate the critical value at the 95% confidence level\n    critical_value = binom.ppf(q=(1-confidence_level), n=days_in_year, p=var_threshold)\n    return critical_value\n\n# Display the result\nprint(solution())\n```\n\nIn the function, `binom.ppf` is used to calculate the percentile point function (the inverse of the CDF) at a specific confidence level. `q` is set to 1 minus the confidence level to find the point at which we believe with 95% certainty that the observed number of exceedances would still suggest the model is properly calibrated. Here, `n` is equal to the number of days and `p` is the 1% VaR exceedance probability. The result is the maximum number of times the VaR can be exceeded before we believe the model is no longer properly calibrated at a 95% confidence level."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-182",
        "question": "John is contemplating incorporating ABC Corp. into his portfolio. The last dividend payment of the company was 1.45 per share. He observes that the company's dividends have experienced an average growth rate of 6 percent. Using the data provided below, could you calculate the stock’s value of ABC Corp.?",
        "tables": [
            "| estimated beta of TMT Inc. against the S&P 500 Index | 1.4   |\n|------------------------------------------------|-------|\n| 10-year Treasury bond yield                             | 3.5% |\n| Return on S&P 500 Index used as a proxy for the market | 8%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the stock's value of ABC Corp, we will use the Gordon growth model (Dividend Discount Model or DDM), which states that the price of a stock is the present value of all its future dividends that are expected to grow at a constant rate. This is typically represented by the formula:\n\nP = D1 / (k - g)\n\nwhere:\n- P is the price of the stock,\n- D1 is the dividend in the next period (which is the most recent dividend increased by the growth rate),\n- k is the required return on equity (cost of equity),\n- g is the growth rate of dividends.\n\nTo calculate the required return on equity, we can use the Capital Asset Pricing Model (CAPM), which is given by the formula:\n\nk = Rf + beta * (Rm - Rf)\n\nwhere:\n- Rf is the risk-free rate (we'll use the 10-year Treasury bond yield),\n- beta is the beta of the stock (here it's the beta of TMT Inc. mentioned but we'll assume ABC Corp has a similar risk profile),\n- Rm is the expected return on the market.\n\nLet's calculate the value using these formulas:\n\n```python\ndef solution():\n    # Define variables name and value\n    last_dividend = 1.45\n    growth_rate = 0.06\n    risk_free_rate = 0.035\n    beta = 1.4\n    market_return = 0.08\n    \n    # Calculate the required return on equity (k) using CAPM\n    required_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # Calculate the next period's dividend (D1)\n    next_dividend = last_dividend * (1 + growth_rate)\n    \n    # Calculate the stock price (P) using the Gordon growth model\n    stock_price = next_dividend / (required_return - growth_rate)\n    \n    # return answer\n    return stock_price\n\n# Call the function and print the answer\nprint(\"The stock value of ABC Corp: \", solution())\n```\n\nThis program will give us the value of the stock based on the CAPM for required return and the Gordon growth model for stock's price."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-183",
        "question": "In 2016, the quarterly returns for the S&P 500 were 8%, -5%, 3% and 1%. What is the S&P 500's quarterly geometric mean return?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    returns = [0.08, -0.05, 0.03, 0.01]\n    \n    # Do math calculation to get the answer\n    product_of_returns = 1\n    for r in returns:\n        product_of_returns *= (1 + r)\n    geometric_mean = math.pow(product_of_returns, 1 / len(returns)) - 1\n    \n    # return answer\n    return geometric_mean\n\n# Uncomment the following line to check the function result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-184",
        "question": "A researcher establishes that 60% of all US retirement funds possess hedge funds. In assessing this probability, a random array of 10 US retirement funds is selected. Utilizing the binomial probability function, what is the likelihood that precisely 6 of the 10 organizations in the group possess hedge funds?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needed\nfrom scipy.stats import binom\n\ndef solution():\n    # Define variables name and value\n    n = 10  # number of trials\n    p = 0.6  # probability of success\n    k = 6  # number of successes\n    \n    # Do math calculation to get the answer\n    probability = binom.pmf(k, n, p)\n    \n    # return answer\n    return probability\n    \n# Uncomment the following line to print the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-185",
        "question": "A finance expert is working out the beta for a collection of large-cap utility firm shares. They establish that the correlation between the portfolio's return and the benchmark's return stands at 0.7, the portfolio return's volatility is 6.5%, and the benchmark return's volatility is 5.0%. What is the portfolio's beta in relation to its benchmark?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Certainly! Here is a Python program that computes the portfolio's beta in relation to its benchmark given the requested inputs:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.7\n    volatility_portfolio = 0.065\n    volatility_benchmark = 0.05\n    \n    # Do math calculation to get the answer\n    beta = correlation * (volatility_portfolio / volatility_benchmark)\n    \n    # return answer\n    return beta\n\n# You can test the function with the following line:\n# print(solution())\n```\n\nWhen you run the `solution()` function, it will return the beta of the portfolio in relation to its benchmark as a float value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-186",
        "question": "What are the odds of Jack Frost correctly answering more than 3 questions on a challenging multiple choice test that contains 5 questions, each with four nearly identical options, if he's answering randomly?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To answer this question through a Python program, we will need to calculate the probability of Jack Frost answering more than 3 questions correctly (which means either 4 or 5 questions correctly) on a 5-question multiple-choice test with each question having 4 options. Since he is answering randomly, the probability of getting any single question right is 1/4.\n\nWe can calculate the probabilities using the binomial probability formula, which is P(X=k) = C(n,k) * p^k * (1-p)^(n-k), where C(n,k) is the binomial coefficient, n is the number of trials (questions), k is the number of successful outcomes (correct answers), and p is the probability of success on an individual trial.\n\nWe will calculate the probability of getting exactly 4 and 5 questions correctly and then sum these probabilities to get the total probability of getting more than 3 correct answers.\n\nHere's the Python code to do this:\n\n```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    total_questions = 5\n    options_per_question = 4\n    probability_of_correct = 1 / options_per_question\n    \n    # Probability of getting exactly 4 and 5 correct answers\n    probability_4_correct = comb(total_questions, 4) * (probability_of_correct**4) * ((1-probability_of_correct)**(total_questions-4))\n    probability_5_correct = comb(total_questions, 5) * (probability_of_correct**5) * ((1-probability_of_correct)**(total_questions-5))\n    \n    # Total probability of getting more than 3 (i.e., 4 or 5) correct answers\n    total_probability = probability_4_correct + probability_5_correct\n    \n    # return answer\n    return total_probability\n\n# Call the solution function to calculate the probability\nprint(solution())\n```\nThis program will calculate the probabilities and return the total probability of getting more than 3 correct answers to the multiple-choice test."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-187",
        "question": "A financial consultant is studying the potential anticipated returns of a novel fund created to imitate the directional shifts of the China Shanghai Composite Stock Market Index (SHANGHAI), but with double the volatility of the index. SHANGHAI has an anticipated yearly return of 7.6% and a volatility of 14.0%, and the risk-free rate is 3.0% annually. If the correlation between the fund’s returns and the index's returns is 1.0, what would be the projected return of the fund according to the CAPM?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To compute the expected return of the fund according to the Capital Asset Pricing Model (CAPM), we need to consider that the CAPM formula is:\n\n\\[ E(R_i) = R_f + \\beta (E(R_m) - R_f) \\]\n\nWhere:\n- \\( E(R_i) \\) is the expected return of the investment (the fund in this case),\n- \\( R_f \\) is the risk-free rate,\n- \\( \\beta \\) is the beta of the investment, representing its volatility in relation to the market,\n- \\( E(R_m) \\) is the expected return of the market.\n\nIn this case, since the fund mimics the SHANGHAI index with double the volatility, its beta will be 2. The correlation factor does not directly influence the CAPM model.\n\nHere's the Python code to calculate the expected return of the fund:\n\n```python\ndef solution():\n    # Define variables\n    expected_market_return = 0.076    # SHANGHAI's expected yearly return (7.6%)\n    risk_free_rate = 0.03             # risk-free rate (3%)\n    beta = 2                          # because the novel fund has double the volatility of the SHANGHAI index\n    \n    # CAPM formula to calculate expected return of the fund\n    expected_return_fund = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    \n    # Convert to percentage\n    expected_return_fund_percentage = expected_return_fund * 100\n    \n    # return answer\n    return expected_return_fund_percentage\n\n# For a simple test\nprint(solution())\n```\n\nExecuting `solution()` would give us the expected annual return of the fund in percentage. Now, let's implement that function without the test print statement:\n\n```python\ndef solution():\n    # Define variables\n    expected_market_return = 0.076    # SHANGHAI's expected yearly return (7.6%)\n    risk_free_rate = 0.03             # risk-free rate (3%)\n    beta = 2                          # because the novel fund has double the volatility of the SHANGHAI index\n    \n    # CAPM formula to calculate expected return of the fund\n    expected_return_fund = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    \n    # Convert to percentage\n    expected_return_fund_percentage = expected_return_fund * 100\n    \n    # return answer\n    return expected_return_fund_percentage\n```\n\nPlease note that the expected return value is given as a percentage, not a decimal fraction."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-188",
        "question": "The bond's clean price was set at $1,000. The transaction occurred between coupon dates, with accrued interest equating to $35.50 per bond. What is the bond's dirty price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the bond's dirty price:\n\n```python\ndef solution():\n    # Define variables name and value\n    clean_price = 1000\n    accrued_interest = 35.50\n    \n    # Do math calculation to get the answer\n    dirty_price = clean_price + accrued_interest\n    \n    # return answer\n    return dirty_price\n\n# Example usage:\n# print(solution()) # Uncomment to run\n```\nThis function calculates the dirty price of the bond by adding the clean price and the accrued interest. The result is the total price paid for the bond on the transaction date."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-189",
        "question": "According to the data collected by a researcher, what is the company's cash flow debt coverage ratio for this year?",
        "tables": [
            "| | Cdn $ millions |\n| --- | --- |\n| Cash flow from operating activities | 105.9 |\n| Cash flow from investing activities | (11.8) |\n| Cash flow from financing activities | 46.5 |\n| Net change in cash for the year | 140.6 |\n| Interest paid (included in CFO) | 22.4 |\n| Taxes paid (tax rate of 30%) | 18.0 |\n| Total debt, end of year | 512.8 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_flow_from_operating_activities = 105.9\n    total_debt_end_of_year = 512.8\n    \n    # Calculate the cash flow debt coverage ratio for the year\n    cash_flow_debt_coverage_ratio = cash_flow_from_operating_activities / total_debt_end_of_year\n    \n    # return answer\n    return cash_flow_debt_coverage_ratio\n\n# You can test the function with the line below\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-190",
        "question": "On 1 January 2015, a corporation releases $1,000,000 nominal value of 10-year bonds, when the market interest rate for bonds with similar risk and terms is 5%. These bonds yield 6% interest yearly on 31 December. What is the recorded value of these outstanding bonds on the balance sheet at the time they were issued?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\n# Import package for financial calculations\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables name and value\n    face_value = 1000000\n    market_interest_rate = 0.05\n    coupon_rate = 0.06\n    years_to_maturity = 10\n    \n    # Calculate the bond price using the present value of an annuity (for the coupon payments)\n    # and the present value of a lump sum (for the face value at maturity)\n    # The present value of the coupon payments\n    annuity_pv = npf.pv(rate=market_interest_rate, nper=years_to_maturity, pmt=-face_value * coupon_rate, fv=0)\n    # The present value of the face value at maturity\n    lump_sum_pv = npf.pv(rate=market_interest_rate, nper=years_to_maturity, pmt=0, fv=-face_value)\n    \n    # The recorded value is the sum of the present value of the annuity and the lump sum\n    recorded_value = annuity_pv + lump_sum_pv\n    \n    # return answer\n    return round(recorded_value, 2)\n\n# Call the function and print the result\nprint(solution())\n```\nThis program calculates the present value of the bond, which is the recorded value on the balance sheet when the bonds were issued. The returned result is rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-191",
        "question": "A freelancer commences a job today which is projected to go on for three years. If he anticipates investing these sums at an annual interest rate of 3%, compounded annually until his retirement a decade from now, what is the worth after 10 years, keeping in mind his payment plan encompasses the following?",
        "tables": [
            "| Year | End_of-Year Payment |\n|------|---------------------|\n| 1    | $ 100,000           |\n| 2    | $ 150,000           |\n| 3    | $ 200,000           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    interest_rate = 0.03\n    payments = {1: 100000, 2: 150000, 3: 200000}\n    retirement_years = 10\n    total_value = 0\n    \n    # Do math calculation to get the future value of each payment\n    for year, payment in payments.items():\n        # Calculate number of years the payment will be invested\n        years_invested = retirement_years - year\n        # Calculate future value of the payment\n        future_value = payment * (1 + interest_rate) ** years_invested\n        # Add it to the total future value\n        total_value += future_value\n    \n    # return total future value\n    return total_value\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-192",
        "question": "Based on the data collected by a researcher, what is the monetary duration of the bond position?",
        "tables": [
            "| Position (par value) | $100,000,000 |\n|---|---|\n| Flat price | 97.1251 |\n| Accrued interest | 0.4392 |\n| Macaulay duration | 8.586 |\n| Annual modified duration | 8.450 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    position_par_value = 100000000  # Position par value in dollars\n    annual_modified_duration = 8.450  # Annual modified duration in years\n    \n    # Do math calculation to get the monetary duration of the bond position\n    monetary_duration = position_par_value * annual_modified_duration\n    \n    # return answer\n    return monetary_duration\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThe program defines the monetary value of the bond position and its annual modified duration, then multiplies these to get the monetary duration of the bond position. The value is returned from the `solution` function and printed to the console."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-193",
        "question": "The Second-Hand Bookshop run by Susan generates its financial statements in line with IFRS. Inventory was obtained for £1 million and afterwards reduced to £550,000. However, it was later found out that one of the books is a rare collector's piece, and the inventory is now approximated to be worth £3 million. The inventory is probably listed on the balance sheet at:",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # According to IFRS inventory is reported on the balance sheet at the lower of cost or net realizable value.\n    # Cost of inventory was £1 million, then reduced to £550,000\n    # Net realizable value is now approximated to be worth £3 million\n    \n    # The inventory should be listed at the lower of cost (£550,000) and net realizable value (£3 million).\n    # Since the cost (£550,000) is lower than the net realizable value (£3 million), the inventory should be listed at £550,000.\n    \n    inventory_value_on_balance_sheet = 550000  # £550,000\n\n    # return answer\n    return inventory_value_on_balance_sheet\n\n# You can call the function and print the result or just call the function and it will return the result.\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-194",
        "question": "Assuming that there is no need for an industry risk adjustment, use the build-up method to determine the equity discount rate for a small business. Here's the information you need:• 5.0 percent is the equity risk premium• The mid-cap equity risk premium is 3.5 percent• A small stock risk premium is 4.2 percent• The income return on long-term bonds is 5.1 percent• The total return on intermediate-term bonds stands at 5.3 percent• 3.0 percent is the company-specific risk premium• As of the valuation date, the 20-year Treasury bond yield is 4.5 percent.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equity_risk_premium = 5.0\n    mid_cap_risk_premium = 3.5\n    small_stock_risk_premium = 4.2\n    company_specific_risk_premium = 3.0\n    long_term_treasury_yield = 4.5\n    \n    # Do math calculation to get the answer\n    # Summing up the components to determine the equity discount rate\n    equity_discount_rate = (long_term_treasury_yield + equity_risk_premium + \n                            mid_cap_risk_premium + small_stock_risk_premium + \n                            company_specific_risk_premium)\n    \n    # return answer\n    return equity_discount_rate\n\n# Call the function and print the result\nprint(f\"The equity discount rate is: {solution()}%\")\n```\n\nWhen this Python program is executed, it will calculate the equity discount rate for the small business using the build-up method with the given data and print out the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-195",
        "question": "In an average year, 5% of all enterprise leaders are dismissed due to \"performance\" issues. Presume that the leader's performance is evaluated on the basis of share performance and that 50% of shares earn above-average returns or showcase \"good\" performance. From observed data, 30% of all enterprise leaders who were dismissed demonstrated \"good\" performance. Applying Bayes' theorem, what is the likelihood that an enterprise leader will be dismissed given \"good\" performance? (Hint, let P(A) be the likelihood of an enterprise leader being dismissed, P(B) be the probability of a \"good\" performance rating, P(B I A) represent the possibility of a \"good\" performance rating given that the enterprise leader was dismissed, and P(A I B) signify the probability of the enterprise leader being dismissed given a \"good\" performance rating.)",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.05  # Probability of an enterprise leader being dismissed (5% or 0.05)\n    P_B = 0.5   # Probability of good performance (50% or 0.5)\n    P_B_given_A = 0.3  # Probability of good performance given that an enterprise leader is dismissed (30% or 0.3)\n    \n    # Do math calculation to get the answer using Bayes' theorem\n    \n    # Bayes' theorem: P(A | B) = (P(B | A) * P(A)) / P(B)\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n    \n    # return answer\n    return P_A_given_B\n\n# You can call the function to see the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-196",
        "question": "The maturity time for Bond B is 2 years with annual interest payments and an 8% coupon rate. The spot rates are given as follows: Compute the cost of Bond B using these spot rates.",
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n| --- | --- |\n| 1-year | 5% |\n| 2-year | 6% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    face_value = 1000  # Assuming a typical face value, as it's not provided\n    coupon_rate = 0.08\n    spot_rate_1yr = 0.05\n    spot_rate_2yr = 0.06\n    years_to_maturity = 2\n    \n    # Calculate coupon payments and discount them using the spot rates\n    coupon_payment = coupon_rate * face_value\n    discounted_coupon_payment_1yr = coupon_payment / (1 + spot_rate_1yr)\n    discounted_coupon_payment_2yr = coupon_payment / (1 + spot_rate_2yr)**2\n    \n    # Calculate the present value of the face value discounted by the spot rate of the corresponding year\n    discounted_face_value = face_value / (1 + spot_rate_2yr)**years_to_maturity\n    \n    # Calculate the cost of Bond B by summing up the present value of the coupons and face value\n    cost_of_bond_b = discounted_coupon_payment_1yr + discounted_coupon_payment_2yr + discounted_face_value\n    \n    # return answer\n    return cost_of_bond_b\n\n# Call the function and print the result\n# Note: You might want to format the output or round it as needed.\nprint(solution())\n```\nThis program will compute the cost of Bond B using the provided spot rates by discounting the cash flows (annual interest payments and the face value at maturity) to their present values."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-197",
        "question": "Let's say a random variable follows a standard distribution with a mean value of 80 and a deviation standard of 24. What is the percentage of this distribution that does not lie between 32 and 116?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the percentage of the distribution that does not lie between 32 and 116, we can use the Z-score formula to convert these values to standard deviations from the mean, then use the standard normal distribution to find the probabilities. The Z-score is calculated as (X - mean) / standard_deviation.\n\nOnce the Z-scores are computed for 32 and 116, we will find the cumulative probability associated with these Z-scores using a standard normal distribution (mean = 0, standard deviation = 1). The percentage of the distribution that lies outside this range is 1 minus the probability of the range itself.\n\nHere is the Python program that will perform the calculation:\n\n```python\n# Import package if needs\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 80\n    standard_deviation = 24\n    lower_bound = 32\n    upper_bound = 116\n    \n    # Calculate Z-scores for lower_bound and upper_bound\n    z_lower = (lower_bound - mean) / standard_deviation\n    z_upper = (upper_bound - mean) / standard_deviation\n    \n    # Use standard normal distribution to find the probability\n    p_lower = norm.cdf(z_lower)\n    p_upper = norm.cdf(z_upper)\n    \n    # Calculate the probability outside the range (lower_bound, upper_bound)\n    p_outside = (1 - (p_upper - p_lower)) * 100\n    \n    # return answer\n    return p_outside\n\n# You can call the function to print/get the result\nprint(solution())\n```\n\nMake sure `scipy` is installed to use `norm.cdf`. The use of `norm.cdf` will return the cumulative probability for the Z-scores calculated. The answer provided will be the percentage of the distribution outside the given range."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-198",
        "question": "Under US GAAP, how should the cost of running shoes be recorded by the Goodluck Company?",
        "tables": [
            "| Items | price$ |\n| --- | --- |\n| replacement cost | 50 |\n| original costs | 41 |\n| selling price | 45 |\n| normal profit margin | 10% |\n| selling costs | 5 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    replacement_cost = 50\n    original_costs = 41\n    selling_price = 45\n    normal_profit_margin = 0.10\n    selling_costs = 5\n    \n    # In accordance with US GAAP, the lower of cost or market (LCM) method is used\n    # The market value is typically the replacement cost, but it cannot exceed net realizable value\n    # (selling price minus costs to sell) or be less than net realizable value reduced by normal profit margin.\n    \n    # Calculate net realizable value (NRV)\n    net_realizable_value = selling_price - selling_costs\n    # Calculate NRV less a normal profit margin\n    nrv_less_normal_profit = net_realizable_value - (selling_price * normal_profit_margin)\n    \n    # Determine the market value per LCM rule\n    market_value = min(max(nrv_less_normal_profit, replacement_cost), net_realizable_value)\n    \n    # Record the cost as the lower of the original cost or defined market value\n    cost_recorded = min(original_costs, market_value)\n    \n    # return answer\n    return cost_recorded\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis script calculates the Lower of Cost or Market value according to US GAAP and returns the correct value at which the Goodluck Company should record the cost of running shoes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-199",
        "question": "A portfolio manager is looking to hedge the interest risk of a bond position with a 5-year key rate exposure of $9.84. What would be the amount of face value employed to hedge if a hedge instrument with a similar 5-year key rate exposure of 4.12 per $100 of face value can be utilized?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program to calculate the amount of face value employed to hedge the interest risk:\n\n```python\ndef solution():\n    # Define the key rate exposure of the bond position\n    bond_key_rate_exposure = 9.84\n    \n    # Define the key rate exposure per $100 of face value for the hedge instrument\n    hedge_key_rate_exposure_per_100 = 4.12\n    \n    # To hedge the interest risk, the exposures need to be equivalent.\n    # Calculate the face value needed for the hedge instrument by proportionally\n    # scaling it according to the key rate exposures\n    face_value_to_hedge = (bond_key_rate_exposure / hedge_key_rate_exposure_per_100) * 100\n    \n    # Return the answer\n    return face_value_to_hedge\n\n# The program can be run to get the answer\nprint(solution())\n```\n\nThis program will return the required face value needed to hedge the interest risk by matching the key rate exposures of the bond position and the hedge instrument."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-200",
        "question": "What is the bond-equivalent yield if the yield to maturity on a yearly-payment bond is 7.75%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program to calculate the bond-equivalent yield from the given yield to maturity of a yearly-payment bond:\n\n```python\ndef solution():\n    # Define variable name and value\n    yield_to_maturity_annual = 0.0775  # 7.75% as a decimal\n    \n    # The bond-equivalent yield for an annual-pay bond is simply twice the semiannual yield.\n    # Thus, for a bond that pays yearly, the yield to maturity is already on an annual basis.\n    bond_equivalent_yield = yield_to_maturity_annual * 2\n    \n    # Return the answer as a percentage\n    return bond_equivalent_yield * 100  # Convert back to percentage form by multiplying by 100\n\n# Example usage:\n# print(solution())\n```\n\nRunning this function will return the bond-equivalent yield as a percentage. Remember that for a bond paying yearly, the bond-equivalent yield simply doubles the semiannual yield, but since the annual yield is already given, you only multiply the given yield to maturity by 2 to achieve the bond-equivalent yield here."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-201",
        "question": "Based on Exhibit 2, what is the market impact per share relating to Trade 2 if Smith talks about a market buy order for 5,000 shares of an illiquid stock?",
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m| $25.27      | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "The market impact per share is the difference between the trade price and the midpoint of the bid-ask spread at the time of the trade. The midpoint of the bid-ask spread for Trade 2 is computed as the average of the Bid Price and Ask Price just before the trade.\n\nHere is how we can create a Python program to calculate the market impact per share relating to Trade 2:\n\n```python\ndef solution():\n    # Define trade details for Trade 2\n    trade_price = 25.22\n    bid_price = 25.19\n    ask_price = 25.22\n\n    # Calculate the midpoint of the bid-ask spread\n    midpoint = (bid_price + ask_price) / 2\n\n    # Calculate the market impact per share\n    market_impact = trade_price - midpoint\n\n    # Return the market impact per share\n    return market_impact\n\n# Call the function to get the result\nprint(solution())\n```\n\nWhen you run the function, it calculates the market impact per share for Trade 2. Let's execute this calculation. In this case, since the trade price of $25.22 is the same as the ask price, and assuming the bid price was $25.19 before the trade, the midpoint would be $25.205, and the market impact would be Trade Price - Midpoint = $25.22 - $25.205 = $0.015 per share. However, as we are considering Smith's talk about a market buy order for 5,000 shares of an illiquid stock, it's important to note that this is a hypothetical question and the market impact given the Trade 2 details alone cannot accurately determine the impact of Smith's 5,000 share buy order. The market impact relates to the actual trade that occurred, not a hypothetical situation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-202",
        "question": "Under the accrual basis of accounting, how much net revenue would be reported on the 2009 income statement of a company called Fairplay, considering that it was their initial business year and this is the information they have about the sale of their products?",
        "tables": [
            "| Revenue              | $1,000,000 |\n|----------------------|------------|\n| Returns of goods sold| $100,000   |\n| Cash collected       | $800,000   |\n| Cost of goods sold   | $700,000   |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 1000000\n    returns_of_goods_sold = 100000\n    \n    # Do math calculation to get the answer\n    net_revenue = revenue - returns_of_goods_sold\n    \n    # return answer\n    return net_revenue\n\n# You can call the function to see the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-203",
        "question": "What is the price of goods sold in 2015 employing the FIFO technique for a business that usually uses the LIFO strategy, as stated in pounds sterling?",
        "tables": [
            "|                  | 2015  | 2014  |\n|------------------|-------|-------|\n| COGS             |50,800 |48,500 |\n| Ending inventories|10,550|10,000 |\n| LIFO reserve     |4,320  |2,600  |"
        ],
        "topic": "Accounting",
        "output": [
            "Here is the Python program to calculate the cost of goods sold (COGS) in 2015 using the FIFO method:\n\n```python\ndef solution():\n    # Define variables name and value\n    cogs_lifo_2015 = 50800        # COGS in 2015 using LIFO\n    lifo_reserve_2014 = 2600      # LIFO reserve in 2014\n    lifo_reserve_2015 = 4320      # LIFO reserve in 2015\n\n    # Do math calculation to get the answer\n    # To convert from LIFO to FIFO, we add the change in LIFO reserve to COGS under LIFO\n    change_in_lifo_reserve = lifo_reserve_2015 - lifo_reserve_2014\n    cogs_fifo_2015 = cogs_lifo_2015 + change_in_lifo_reserve\n\n    # return answer\n    return cogs_fifo_2015\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nWhen the solution function is called, it will calculate and return the cost of goods sold in 2015 using the FIFO accounting method."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-204",
        "question": "Let's say :P(occasion X happens)=15%, P(occasion Y happens)=35%, and P(occasion Z happens)=20%. If the occasions X, Y and Z are all not dependent on each other, what is the P(occasion X or occasion Z happens)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the probability of either occasion X or occasion Z happening:\n\n```python\ndef solution():\n    # Define probabilities for occasions X, Y, and Z\n    p_x = 0.15  # Probability of occasion X happening\n    p_z = 0.20  # Probability of occasion Z happening\n    \n    # Calculate the probability of either occasion X or Z happening\n    # Since they are independent events, we just sum their probabilities\n    p_x_or_z = p_x + p_z\n    \n    # return answer\n    return p_x_or_z\n    \n# You can call the function to get the result\nprint(solution())\n```\nCalling `solution()` would execute the probability calculation and return the probability of either occasion X or occasion Z happening."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-205",
        "question": "Using the direct method, determine the cash received from the client:",
        "tables": [
            "|                         |                      |\n|-------------------------|----------------------|\n| Seagraves Supply Company Operating Cash Flow - Direct Method For the year ended December 31, 20X7 |                      |\n| Cash paid to suppliers  | 265,866              |\n| Cash paid for operating expenses | 124,784             |\n| Cash paid for interest  | 4,326                |\n| Cash paid for taxes     | 14,956               |\n| Operating cash flow     | $ 20,048             |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_paid_to_suppliers = 265866\n    cash_paid_for_operating_expenses = 124784\n    cash_paid_for_interest = 4326\n    cash_paid_for_taxes = 14956\n    operating_cash_flow = 20048\n\n    # The direct method of calculating operating cash flow is:\n    # Operating Cash Flow = Cash Received from Customers -\n    #                       (Cash paid to suppliers + \n    #                       Cash paid for operating expenses +\n    #                       Cash paid for interest +\n    #                       Cash paid for taxes)\n\n    # To calculate 'Cash Received from Customers', we will rearrange the formula:\n    # Cash Received from Customers = Operating Cash Flow +\n    #                                Cash paid to suppliers +\n    #                                Cash paid for operating expenses +\n    #                                Cash paid for interest +\n    #                                Cash paid for taxes\n\n    cash_received_from_customers = (operating_cash_flow +\n                                    cash_paid_to_suppliers +\n                                    cash_paid_for_operating_expenses +\n                                    cash_paid_for_interest +\n                                    cash_paid_for_taxes)\n    \n    # return answer\n    return cash_received_from_customers\n\n# Calling the function to test\nprint(solution())\n```\n\nThis Python function calculates the cash received from customers using the direct method based on the given operating cash flow and the cash paid for various expenses."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-206",
        "question": "When we apply vertical common-size analysis to the following financial data from a different business entity: Total liabilities $19 million, Total stockholders’ equity $25 million, what is the percentage of total liabilities represented on the balance sheet?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program that will calculate the percentage of total liabilities represented on the balance sheet using vertical common-size analysis:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 19e6  # Total liabilities in dollars\n    total_equity = 25e6       # Total stockholders' equity in dollars\n    \n    # Calculate the total assets (which is the sum of total liabilities and total equity)\n    total_assets = total_liabilities + total_equity\n    \n    # Calculate the percentage of total liabilities represented on the balance sheet\n    percentage_liabilities = (total_liabilities / total_assets) * 100\n    \n    # Return answer\n    return percentage_liabilities\n\n# Call the function and print the answer\nprint(solution())\n```\n\nWhen you run this function, it will return the percentage of total liabilities represented on the balance sheet."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-207",
        "question": "What is the continuously compounded return of shares for Riddle Inc between August 1 and August 15, taking into account the weekly closing prices of Riddle Inc's shares?",
        "tables": [
            "| Date     | Closing Price |\n|----------|---------------|\n| 1 August | 112           |\n| 8 August | 160           |\n| 15 August| 120           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this question, we will use the formula for the continuously compounded return, which is given by:\n\n$$ R = \\ln\\left(\\frac{P_t}{P_0}\\right) $$\n\nWhere:\n- \\( R \\) is the continuously compounded return over the period\n- \\( \\ln \\) is the natural logarithm\n- \\( P_t \\) is the final price\n- \\( P_0 \\) is the initial price\n\nThe Python program will use the math library to calculate the natural logarithm. Let's create the function to calculate the continuously compounded return between August 1 (initial date) and August 15 (final date).\n\n```python\nimport math\n\ndef solution():\n    # Define variables for initial and final prices\n    P0 = 112  # Price on August 1\n    Pt = 120  # Price on August 15\n    \n    # Calculate the continuously compounded return\n    R = math.log(Pt / P0)\n    \n    # return the answer\n    return R\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-208",
        "question": "What's the value of Corporation Z, which is currently being appraised by John using the dividend discount model? The latest dividend is $1.0 per share with a required return rate of 7.5%. It is anticipated to have a high growth rate of 5% for the initial three years, and thereafter, the dividend growth rate will be 3% annually indefinitely.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    D0 = 1.0  # Latest dividend per share\n    r = 0.075  # Required return rate\n    g1 = 0.05  # High growth rate for initial 3 years\n    g2 = 0.03  # Growth rate thereafter indefinitely\n    \n    # Calculate dividends for the next 3 years\n    D1 = D0 * (1 + g1)\n    D2 = D1 * (1 + g1)\n    D3 = D2 * (1 + g1)\n    \n    # Calculate present value of dividends for the first 3 years\n    PV_D1 = D1 / (1 + r)\n    PV_D2 = D2 / ((1 + r)**2)\n    PV_D3 = D3 / ((1 + r)**3)\n    \n    # Calculate terminal value at end of year 3 with growth rate g2 from year 4 to perpetuity.\n    # The formula for terminal value at year 3 is D3*(1 + g2) / (r - g2) discounted back to present value.\n    TV3 = (D3 * (1 + g2)) / (r - g2)\n    PV_TV3 = TV3 / ((1 + r)**3)\n    \n    # Sum the present values to find total value\n    total_value = PV_D1 + PV_D2 + PV_D3 + PV_TV3\n    \n    # return answer\n    return total_value\n    \n# The following line will execute the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-209",
        "question": "Assume a share that has daily returns following a random walk, with an annualized volatility of 34%. Can you calculate the weekly volatility of this share assuming there are 52 weeks in a year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly, the volatility scaling rule can be applied here to convert annualized volatility to weekly volatility assuming that the returns of the share are normally distributed and each day's return is independent of the others. The formula based on the number of trading periods is:\n\n\\[\n\\text{volatility}_{\\text{weekly}} = \\text{volatility}_{\\text{annual}} \\times \\sqrt{\\frac{\\text{trading periods per week}}{\\text{trading periods per year}}}\n\\]\n\nWe will assume that there are 252 trading days in a year to better reflect the typical number of trading days for the stock market, as 252 is commonly used in financial computations. Therefore, since there are 52 weeks in a year, each week contains, on average, 252 / 52 trading days of standard deviation movement.\n\nHere is the Python function as requested:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    annualized_volatility = 0.34  # 34%\n    trading_days_per_year = 252\n    weeks_per_year = 52\n    \n    # Calculate the weekly volatility\n    weekly_volatility = annualized_volatility * math.sqrt(trading_days_per_year / weeks_per_year / trading_days_per_year)\n    \n    # return answer\n    return weekly_volatility\n```\n\nThe `sqrt` function from the `math` module is used to take the square root, a common mathematical operation when working with volatilities. We divide `trading_days_per_year` by `weeks_per_year` and then by `trading_days_per_year` again to convert annualized volatility to weekly volatility."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-210",
        "question": "What are the odds for an event X if the probability for X is 14% (i.e., P(X) = 14%)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the odds for event X given that P(X) = 14% or 0.14, we can use the formula for odds, which is the ratio of the probability of the event occurring to the probability of the event not occurring. The probability of the event not occurring is 1 - P(X).\n\nHere is how we can generate the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    probability_X = 0.14\n    \n    # The probability of event not happening\n    probability_not_X = 1 - probability_X\n    \n    # Calculate odds for event X\n    odds_X = probability_X / probability_not_X\n    \n    # return answer\n    return odds_X\n\n# You can directly print the result to check the output\nprint(solution())\n```\n\nWhen you run the function `solution()`, it will return the odds of the event X occurring given the probability P(X) = 14%."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-211",
        "question": "Suppose that S0=400 and the risk-free rate stands at 5%. Figure out the forward price of a 6-month forward contract with continuous compounding.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\n# Import package if needs\nfrom math import exp\n\ndef solution():\n    # Define variables name and value\n    S0 = 400  # Current price of the underlying asset\n    r = 0.05  # Risk-free rate (5%)\n    T = 0.5   # Time to maturity of the contract in years (6 months)\n\n    # Do math calculation to get the answer\n    F = S0 * exp(r * T)  # Calculate the forward price with continuous compounding\n\n    # return answer\n    return F\n\n# Function call to test the solution\n# Output will be the forward price\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-212",
        "question": "Recently, an analyst named Benedict from a investment firm collected data for a value-weighted index consisting of securities G,H,I. What was the return of the value-weighted index during this period?",
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n|----------|--------------|--------|--------|\n| G        | 15.00        | 17.00  | 500    |\n| H        | 35.00        | 33.00  | 300    |\n| 1        | 37.00        | 40.00  | 200    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Beginning values and number of shares for each security\n    beginning_values = [15.00, 35.00, 37.00]\n    shares = [500, 300, 200]\n    \n    # End values for each security\n    end_values = [17.00, 33.00, 40.00]\n    \n    # Calculate the beginning and ending market capitalization for each security\n    beginning_cap = [b * s for b, s in zip(beginning_values, shares)]\n    ending_cap = [e * s for e, s in zip(end_values, shares)]\n    \n    # Calculate the total market capitalization at the beginning and the end\n    total_beginning_cap = sum(beginning_cap)\n    total_ending_cap = sum(ending_cap)\n    \n    # Calculate the value-weighted return\n    value_weighted_return = (total_ending_cap - total_beginning_cap) / total_beginning_cap\n    \n    # return answer\n    return value_weighted_return\n\n# The returned value should be the value-weighted return of the index.\n```\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-213",
        "question": "What is the corporation's debt-to-assets ratio based on the data compiled by an analyst reviewing the corporation's solvency?",
        "tables": [
            "|     | $ Millions |\n| --- | --- |\n| Short-term interest-bearing debt | 1,258 |\n| Long-term interest-bearing debt | 321 |\n| Total shareholder's equity | 4,285 |\n| Total assets | 8,750 |\n| EBIT | 2,504 |\n| Interest payments | 52 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    short_term_debt = 1258  # in $ millions\n    long_term_debt = 321    # in $ millions\n    total_assets = 8750     # in $ millions\n    \n    # Calculate total interest-bearing debt\n    total_debt = short_term_debt + long_term_debt\n    \n    # Calculate debt-to-assets ratio\n    debt_to_assets_ratio = total_debt / total_assets\n    \n    # Return answer\n    return debt_to_assets_ratio\n\n# You can call the function to check the calculated debt-to-asset ratio\n# print(solution())\n```\n\nThe debt-to-assets ratio is calculated by dividing the total interest-bearing debt by the total assets. Note that in the provided data, the debt values and total assets are already given in $ millions, so the calculation can be done directly without any conversion. The final ratio represents the proportion of the company's assets that are financed by debt."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-214",
        "question": "A financier collects the same information to calculate the intrinsic worth of a corporation’s stock using the justified forward P/E method. What is the intrinsic value per share?",
        "tables": [
            "| Next year's earnings per share | $3.00 |\n|---------------------------|-------|\n| Return on equity         | 12.5% |\n| Dividend payout ratio    | 60%   |\n| Required return on shares| 10%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    next_year_eps = 3.00        # Next Year's Earnings per Share (EPS)\n    return_on_equity = 0.125    # Return on Equity (ROE)\n    dividend_payout_ratio = 0.60  # Dividend Payout Ratio\n    required_return_on_shares = 0.10  # Required Return on Shares\n\n    # The formula for the justified P/E is the dividend payout ratio divided by the required return on shares minus the growth rate.\n    # Growth rate can be calculated with the formula ROE * (1 - dividend payout ratio)\n    growth_rate = return_on_equity * (1 - dividend_payout_ratio)\n    \n    # The P/E ratio is calculated as follows:\n    justified_pe = dividend_payout_ratio / (required_return_on_shares - growth_rate)\n    # The intrinsic value per share is the product of the next year's EPS and the justified P/E ratio.\n    intrinsic_value_per_share = next_year_eps * justified_pe\n    \n    # return answer\n    return intrinsic_value_per_share\n\n# Function Execution\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-215",
        "question": "A fund manager wants to understand the systematic risk of a stock portfolio and thus estimates the following linear regression: RPt−RF=αP+βP[RMt−RF]+εPtRPt​−RF​=αP​+βP​[RMt​−RF​]+εPt​, where RPtRPt​ represents the return of the portfolio at time t, RMtRMt​ represents the return of the market portfolio at time t, and RFRFRF​ is the risk-free rate, remaining constant throughout. Consider that α is 0.008, β is 0.977, σ(RP)\\sigma{(R_P)}σ(RP​) is 0.167, and σ(RM)\\sigma{(R_M)}σ(RM​) is 0.156. What is the likely coefficient of determination in this regression?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needed\n\ndef solution():\n    # Define variables name and value\n    beta = 0.977\n    std_portfolio = 0.167\n    std_market = 0.156\n    \n    # Do math calculation to get the answer\n    # The coefficient of determination (R^2) in a simple linear regression is the square of the correlation coefficient (r).\n    # Since beta (β) is the covariance of the portfolio and market returns divided by the variance of the market returns,\n    # and r = covariance(P, M) / (stddev(P) * stddev(M)),\n    # we can simplify beta as beta = r * (stddev(P) / stddev(M)).\n    # Solving for r gives us r = beta * (stddev(M) / stddev(P))\n    correlation_coefficient = beta * (std_market / std_portfolio)\n    coefficient_of_determination = correlation_coefficient ** 2\n    \n    # return answer\n    return coefficient_of_determination\n\n# You can test the function with the following line:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-216",
        "question": "Alexander Boone, a senior portfolio manager, collaborates with Rachel Stevens, a junior analyst. They are assessing the financial records of Corporation ABC (ABC), focusing on post-employment rewards. Stevens modifies the balance sheet and cash flow statement details presented in Exhibit 2 to more accurately represent the financial aspect of certain pension plan related items. Finally, Stevens scrutinizes the details present in Exhibit 3 and determines the effect of a 100-basis-point hike in health care inflation on ABC's debt-to-equity ratio. Considering Exhibits 2 and 3, alongside Boone's projection about future health care inflation, what should the debt-to-equity ratio computed by Stevens for ABC be?",
        "tables": [
            "| Item | Current Period |\n| --- | --- |\n| Total assets | 24,130 |\n| Total liabilities | 17,560 |\n| Total equity | 6,570 |\n| Total pension cost | 96 |\n| Pension contribution | 66 |\n| Financing cash flow | 2,323 |\n| Operating cash flow | -1,087 |\n| Effective tax rate | 30% |",
            "|   Item                    | 100-bp Increase | 100-bp Decrease |\n|---------------------------|-----------------|-----------------|\n| Benefit obligation change | $93             | -$76            |\n| Benefit expense change    | $12             | -$10            |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the debt-to-equity ratio, we must take the total liabilities and divide them by the total equity. However, since Rachel Stevens is modifying the balance sheet to account for the pension plan related items and the question prompts indicate that there has been a 100-basis-point hike in health care inflation which affects the benefit obligation, we must adjust the total liabilities to include the change in the benefit obligation. Here is the program assuming that we only need to adjust for the benefit obligation change due to the 100-basis-point increase:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 24130\n    total_liabilities = 17560\n    total_equity = 6570\n    benefit_obligation_increase = 93\n    \n    # Adjust total liabilities for the increase in benefit obligation\n    adjusted_total_liabilities = total_liabilities + benefit_obligation_increase\n    \n    # Calculate debt-to-equity ratio\n    debt_to_equity_ratio = adjusted_total_liabilities / total_equity\n    \n    # return answer\n    return debt_to_equity_ratio\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nIn this program, `adjusted_total_liabilities` is used to represent the new total liabilities after taking into account the increase in the benefit obligation due to 100-basis-point health care inflation. The debt-to-equity ratio is then calculated using this adjusted liabilities figure."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-217",
        "question": "Given the financial documents in Exhibits 1 and 2, Barnes' fiscal year concludes on December 31st. If the 2012 FCFF is equal to $500 million, what would be Barnes' FCFE ($ millions) for 2012, based on the information found in Exhibits 1 and 2?",
        "tables": [
            "| For Year Ending 31 December | 2012         |\n|----------------------------|------------|\n| Revenues                   | $6,456     |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA)   | 1,349     |\n| Depreciation expense       | 243        |\n| Operating income           | 1,106      |\n| Interest expense           | 186        |\n| Pretax income              | 920        |\n| Income tax (32%)           | 294        |\n| Net income                 | $626       |\n|                            |            |\n| Number of outstanding shares (millions) | 411     |\n| 2012 earnings per share    | $1.52      |\n| 2012 dividends paid (millions) | 148     |\n| 2012 dividends per share   | 0.36       |\n| 2012 fixed capital investment (millions) | 535  |\n|                            |            |\n| Cost of equity             | 12.0%      |\n| Weighted average cost of capital (WACC) | 9.0%  |",
            "|                                             | 2012  |       | 2011  |\n|---------------------------------------------|-------|-------|-------|\n| **Assets**                                  |       |       |       |\n| Cash and cash equivalents                   | $32   |       | $21   |\n| Accounts receivable                         | 413   |       | 417   |\n| Inventories                                 | 709   |       | 638   |\n| Other current assets                        | 136   |       | 123   |\n| Total current assets                        | $1,290|       | $1,199|\n|                                             |       |       |       |\n| **Liabilities and Stockholders' Equity**   |       |       |       |\n| Current liabilities                         | $2,783|       | $2,678|\n| Long-term debt                              | 2,249 |       | 2,449 |\n| Common stockholders' equity                 | 1,072 |       | 594   |\n| Total liabilities and stockholders' equity  | $6,104|       | $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To compute the Free Cash Flow to Equity (FCFE), we need to adjust the Free Cash Flow to Firm (FCFF) for net borrowing. The FCFE formula is generally:\n\nFCFE = FCFF - Interest * (1 - Tax rate) + Net Borrowing\n\nWhere,\nFCFF = Free Cash Flow to Firm\nInterest * (1 - Tax rate) represents the after-tax interest expense\nNet Borrowing = New Debt - Debt Repaid\n\nThe data for interest expense, and income tax rate are given. However, net borrowing is not directly given. Instead, we can calculate the net borrowing by looking at the difference in long-term debt between 2011 and 2012.\n\n```python\ndef solution():\n    # Define variables\n    fcff = 500  # million dollars\n    interest_expense = 186  # million dollars\n    tax_rate = 0.32  # 32%\n    long_term_debt_2011 = 2449  # million dollars\n    long_term_debt_2012 = 2249  # million dollars\n\n    # Calculate net borrowing\n    net_borrowing = long_term_debt_2012 - long_term_debt_2011\n\n    # Calculate after-tax interest expense (Interest * (1 - Tax rate))\n    after_tax_interest = interest_expense * (1 - tax_rate)\n\n    # Calculate Free Cash Flow to Equity (FCFE)\n    fcfe = fcff - after_tax_interest + net_borrowing\n\n    # Return FCFE\n    return fcfe\n\n# Call the function and print the result\nprint(f\"The Free Cash Flow to Equity for 2012 is: ${solution()} million\")\n```\n\nWhen the `solution` function is called, it will perform the necessary calculation and return the FCFE for 2012 in million dollars. Remember that since this is just an example, you would not actually call the `print` function if you want to just return the value from the `solution` function.\n\nLet's translate the given code into an example:\n\n```python\ndef solution():\n    # Given data\n    fcff = 500  # Free Cash Flow to Firm (FCFF) in million dollars\n    interest_expense = 186  # Interest expense in million dollars\n    tax_rate = 0.32  # Corporate tax rate is 32%\n    \n    # The difference in long-term debt from 2011 to 2012 represents net borrowing\n    long_term_debt_2011 = 2449  # in million dollars\n    long_term_debt_2012 = 2249  # in million dollars\n    net_borrowing = long_term_debt_2012 - long_term_debt_2011  # Net borrowing\n    \n    # Calculate Free Cash Flow to Equity (FCFE)\n    after_tax_interest = interest_expense * (1 - tax_rate)\n    fcfe = fcff - after_tax_interest + net_borrowing  # FCFE in million dollars\n    \n    # Return the FCFE for 2012\n    return fcfe\n```\n\nThis program returns the Free Cash Flow to Equity (FCFE) for the year 2012 given the data provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-218",
        "question": "If the real interest rate in a basic economy with no foreign trade stands at 3% and there's an upsurge in state expenditure to 2,000, what will be the surge in overall earnings?",
        "tables": [
            "| | |\n| --- | --- |\n| Consumption function | C = 2,500+0.80*(Y-T) |\n| Investment function | l= 500+0.30*Y-25*r |\n| Government spending | G = 1,000 |\n| Tax function | T=-250+0.30*Y |\n| *Y* : Aggregate income *r*:Real interest rate | |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's the Python program that calculates the surge in overall earnings due to an upsurge in state expenditure to 2,000 when the real interest rate stands at 3%.\n\n```python\ndef solution():\n    # Define variables name and initial values\n    G_initial = 1000  # initial government spending\n    G_new = 2000      # upsurge in government spending\n    r = 0.03          # real interest rate\n    \n    # The multiplier calculation formula is 1 / (1 - MPC * (1 - t))\n    # where MPC is the marginal propensity to consume, and t is the tax rate.\n    # From the tax function T = -250 + 0.30Y, we can derive t = 0.30, the marginal tax rate.\n    # And from the consumption function C = 2,500 + 0.80*(Y-T), we can derive MPC = 0.80.\n    \n    MPC = 0.80\n    t = 0.30\n    \n    # Using the formula for the multiplier:\n    multiplier = 1 / (1 - MPC * (1 - t))\n    \n    # The change in government spending:\n    delta_G = G_new - G_initial\n    \n    # The surge in overall earnings (change in aggregate income) is the multiplier times the change in government spending:\n    surge_in_earnings = multiplier * delta_G\n    \n    # Return the surge in overall earnings\n    return surge_in_earnings\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nThe output will give you the surge in overall earnings as a result of the increase in government spending."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-219",
        "question": "A customer buys a 6-year bond at face value with an 8% coupon rate, where the interest is disbursed once a year. If the customer decides to sell the bond at the close of the 5th year, and the prevailing market interest rate is 7% at that moment. Can you determine the capital gain or loss?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program that calculates the capital gain or loss for a 6-year bond sold at the close of the 5th year:\n\n```python\ndef solution():\n    # Define variables\n    face_value = 1000  # this is a common face value for bonds\n    coupon_rate = 0.08  # 8%\n    market_rate = 0.07  # 7%\n    years_to_maturity = 1  # Bond is sold just a year before maturity\n    \n    # Calculate the coupon payment\n    coupon_payment = face_value * coupon_rate\n    \n    # Calculate the price of the bond when sold (using the present value of annuity formula)\n    present_value_of_coupon = coupon_payment * ((1 - (1 + market_rate) ** -years_to_maturity) / market_rate)\n    present_value_of_face_value = face_value / ((1 + market_rate) ** years_to_maturity)\n    bond_price_at_sale = present_value_of_coupon + present_value_of_face_value\n\n    # Determine the capital gain or loss\n    capital_gain_loss = bond_price_at_sale - face_value\n    \n    # return answer\n    return round(capital_gain_loss, 2)\n\n# Run the function to get the capital gain or loss\nprint(solution())\n```\n\nThis program calculates the present value of the coupon payments that are left until maturity and adds it to the present value of the face value which will be received at maturity. It then subtracts the face value at which the bond was initially bought to determine the capital gain or loss. The final answer is rounded to 2 decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-220",
        "question": "The following day, Morris instructs Blue to go over their analysis on XYZ Corporation. Blue’s evaluation leads her to believe that the company's shares are undervalued. She shares her discoveries with Morris, who then directs her at 10 a.m. to purchase 120,000 shares at a price of $40.00 through a limit order of $42.00. The buy-side trader proceeds with the market execution when the cost is at $40.50. The sole charge is a commission of $0.02 per share. By the time the market closes, 90,000 shares from the order were bought, with XYZ Corporation closing at $42.50. The transaction was carried out at an average cost of $41.42, with detailed information about the executed trades in Exhibit 1. Based on the details in Exhibit 1, what is the execution cost for buying the 90,000 shares of XYZ Corporation?",
        "tables": [
            "| Trades | Execution Price | Shares Executed |\n|--------|-----------------|-----------------|\n| Trade 1| $40.75 |    10,000     |\n| Trade 2| $41.25 |    30,000     |\n| Trade 3| $41.50 |    20,000     |\n| Trade 4| $41.75 |    30,000     |\n| Total  |        |    90,000     |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trades_prices = [40.75, 41.25, 41.50, 41.75]\n    trades_shares = [10000, 30000, 20000, 30000]\n    commission_per_share = 0.02\n    \n    # Calculate total cost for each trade \n    total_cost = sum([shares * price + shares * commission_per_share for shares, price in zip(trades_shares, trades_prices)])\n    \n    # return answer\n    return total_cost\n\n# Example usage:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-221",
        "question": "From the data provided in Exhibit 4, what's the nearest quick ratio for the Oracle Corporation as of December 31, 2009? Exhibit 4. Oracle Corporation Consolidated Statements of Financial Position (Excerpt: Current Assets Detail)(In millions of €)",
        "tables": [
            "|                      | as of 31 December |       |\n|----------------------|-------------------|-------|\n| Assets               | 2009              | 2008  |\n| Cash and cash equivalents     | 1,884             | 1,280 |\n| Other financial assets        | 486               | 588   |\n| Trade and other receivables   | 2,546             | 3,178 |\n| Other non-financial assets    | 147               | 126   |\n| Tax assets                    | 192               | 399   |\n| Total  current assets         | 5,255             | 5,571 |",
            "|                         | as of 31 December |\n|------------------------ |---------- |---------- |\n| Assets                  | 2009      | 2008      |\n| Total non-current assets| 8,119     | 3,329     |\n| Total assets            | 13,374    | 13,900    |\n| Equity and Liabilities  |           |           |\n| Total current liabilities| 3,416     | 5,824     |\n| Total non-current liabilities| 1,467 | 905       |\n| Total liabilities       | 4,883     | 6,729     |\n| Total equity            | 8,491     | 7,171     |\n| Equity and liabilities  | 13,374    | 13,900    |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_and_equivalents = 1884\n    other_financial_assets = 486\n    trade_and_other_receivables = 2546\n    total_current_liabilities = 3416\n    \n    # Calculate quick assets (excluding inventory and other assets)\n    quick_assets = cash_and_equivalents + other_financial_assets + trade_and_other_receivables\n    \n    # Calculate the quick ratio\n    quick_ratio = quick_assets / total_current_liabilities\n    \n    # Return answer\n    return round(quick_ratio, 2) # Rounded to the nearest hundredth\n\n# Call the function and print the result for verification purposes\nprint(solution())\n```\n\nExecuting this Python program would compute the quick ratio for the Oracle Corporation as of December 31, 2009, using the provided financial statement data. The `round` function is used to round the answer to the nearest hundredth."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-222",
        "question": "An executive is interested in determining the cost of a put option using a one-period binomial tree. Here are the relevant details: The existing stock price is $30, while the exercise price of the put option is also $30. The up factor is valued at 1.12 and the down factor stands at 0.92. The risk-free rate is set at 5%. What is the hedge ratio?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 30       # Current stock price\n    K = 30        # Exercise price of the put option\n    u = 1.12      # Up factor\n    d = 0.92      # Down factor\n    \n    # Do math calculation to get the hedge ratio\n    # Hedge ratio for put option is (down-movement put payoff - up-movement put payoff) \n    # divided by (stock price down movement - stock price up movement)\n    \n    put_payoff_up = max(K - S0 * u, 0)\n    put_payoff_down = max(K - S0 * d, 0)\n    \n    hedge_ratio = (put_payoff_down - put_payoff_up) / (S0 * (d - u))\n    \n    # return answer\n    return hedge_ratio\n    \n# The function `solution` could be called to get the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-223",
        "question": "Using the two-period binomial model, Matt estimates the value of a two-year American-style call option on Alpha Corporation's common shares. The parameters are as follows: the present stock price sits at 96, while the call option's exercise price is 70. The up factor (u) equates to 1.20, with the down factor (d) at 0.83. The risk-free rate of return, calculated with continuous compounding, is 4%. How much is the option worth?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Given parameters\n    S = 96        # current stock price\n    K = 70        # exercise price of the option\n    u = 1.20      # up-factor\n    d = 0.83      # down-factor\n    r = 0.04      # continuous compounding risk-free rate\n    \n    # Calculate risk-neutral probabilities\n    R = math.exp(r)  # risk-free return\n    q = (R - d) / (u - d)  # risk-neutral up probability\n    q_ = 1 - q            # risk-neutral down probability\n    \n    # Calculate the option value at the end of the second period\n    Suu = S * u * u\n    Sud = S * u * d\n    # Suu option value (if exercised at period 2)\n    Cuu = max(0, Suu-K)\n    # Sud option value (if exercised at period 2); same as Ddu due to recombination\n    Sud_Ddu = max(0, Sud-K)\n    # option value if held till period 2\n    C2 = (q * Cuu + q_ * Sud_Ddu) / R\n    \n    # Now we check the option value at the end of the first period\n    Su = S * u\n    Sd = S * d\n    # option value at Su if exercised at period 1\n    Cu = max(0, Su-K)\n    # option value at Sd if exercised at period 1; won't get exercised as Sd<K\n    Cd = max(0, Sd-K)\n    # option value if held till period 1\n    C1 = (q * Cuu + q_ * Sud_Ddu) / R\n    \n    # The value of the American option is the max between holding or exercising early\n    option_value = max(C1, Cu, Cd)\n    \n    return option_value\n\n# Calling the function to get the result\nprint(round(solution(), 2))    # Rounded to two decimals for readability\n```\n\nThis program will calculate the worth of a two-year American-style call option on Alpha Corporation's common shares by considering the option of exercising the option early. Note that the exact formula to follow might vary depending on the accepted methodology for evaluating American options in a binomial model. Some models will have to factor in possible early exercise at each node, which could make the calculations more complex."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-224",
        "question": "If a financier utilizes a multivariate normal distribution to accurately model the returns on 3 stocks, how many parameters does he need to determine at the outset?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # There would be 3 mean returns, one for each stock.\n    num_means = 3\n    # The variance for each stock, which gives us 3 variances.\n    num_variances = 3\n    # The covariances between each pair of stocks, which gives us 3*(3-1)/2 = 3 covariances.\n    num_covariances = 3 * (3 - 1) // 2\n    \n    # Total number of parameters for the multivariate normal distribution\n    total_parameters = num_means + num_variances + num_covariances\n    \n    # return answer\n    return total_parameters\n\n# The expected output is 9\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-225",
        "question": "What's the chance of a pupil correctly answering less than two questions on a multiple-choice test that has four choices for a total of six questions, by just guessing?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To answer the question, we can use the binomial distribution which can be used to determine the probability of a specific number of successes in a specific number of trials with the same probability of success on each trial. In this case, 'success' means guessing a question correctly.\n\nThe formula for the probability of observing exactly k successes (guessing a question correctly) in n independent Bernoulli trials (multiple-choice questions) with probability of success p is given by:\n\\[ P(X = k) = \\binom{n}{k} p^k (1 - p)^{n-k} \\]\n\nWhere:\n- \\( \\binom{n}{k} \\) is the binomial coefficient, which represents the number of possible combinations of k successes in n trials.\n- p is the probability of success on a single trial (for a four-choice question, p = 1/4 since there's one correct answer out of four options).\n- n is the number of trials (number of questions, which is 6 in our case).\n- k is the number of successful trials (number of correctly answered questions, in this case we want k < 2, meaning 0 or 1 correct answers).\n\nWe'll calculate the probability of getting fewer than two questions right by summing the probabilities of getting exactly zero and exactly one question right.\n\nLet's write a Python program with this scenario:\n\n```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    n = 6   # Total number of questions\n    p = 1/4 # Probability of guessing one question correctly\n\n    # Probability of getting exactly 0 or 1 question right (successes)\n    P_0 = comb(n, 0) * (p**0) * ((1-p)**(n-0)) # P(X=0)\n    P_1 = comb(n, 1) * (p**1) * ((1-p)**(n-1)) # P(X=1)\n    \n    # Total Probability of getting less than 2 questions right\n    P_less_than_2 = P_0 + P_1\n    \n    # return answer\n    return P_less_than_2\n\n# This call to solution() is for demonstration and testing purposes.\nprint(solution()) # Should output the probability as a floating-point number\n```\n\nNote that we used `comb` from the math module which is equivalent to the binomial coefficient."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-226",
        "question": "The head credit analyst of Vigilant Consultants recently stated that the five-year bond of Atlas Co. is currently yielding 7% and a similar CDS contract has a credit spread of 4.25%. Given that the MRR is 2.5%, Lopez advised performing a basis trade to exploit the pricing of Atlas Co.'s bonds and CDS. The basis trade would involve buying both the bond and the CDS contract. Considering the basis trade for Atlas Co., what will be the gain if convergence happens in the bond and CDS markets?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 0.07        # Yield of the five-year bond\n    cds_credit_spread = 0.0425 # Credit spread of the CDS contract\n    mrr = 0.025              # Market risk premium (MRR)\n\n    # Do math calculation to get the answer\n    \n    # The gain in a basis trade is the difference between the bond yield and the sum of the CDS spread and MRR.\n    gain = bond_yield - (cds_credit_spread + mrr)\n    \n    # return answer\n    return gain\n\n# Let's call the function and print the result to see the answer\nprint(solution())\n```\nThis function calculates the expected gain from a basis trade by finding the difference between the bond yield and the combined cost of the CDS contract plus the market risk premium (MRR). When convergence happens in the bond and CDS markets for Atlas Co., this gain represents the trader's profit from the basis trade."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-227",
        "question": "Think about the purchaser of a 6x9 FRA. The contract rate is 6.35% on a notional sum of $10 million. Determine the settlement sum for the vendor if the settlement rate is 6.85%. Assume a 30/360-day count basis.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_sum = 10000000  # $10 million\n    contract_rate = 0.0635  # 6.35%\n    settlement_rate = 0.0685  # 6.85%\n    days_in_contract_period = 180  # 6-months on a 30/360-day count basis\n    \n    # Calculate the interest difference between the contract rate and settlement rate\n    interest_diff = notional_sum * (settlement_rate - contract_rate) * days_in_contract_period / 360\n    \n    # Calculate the present value of the settlement sum\n    settlement_sum = interest_diff / (1 + settlement_rate * days_in_contract_period / 360)\n    \n    # return answer\n    return settlement_sum\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis code will compute the settlement sum for the vendor with the given contract rate, settlement rate, notional sum, and using a 30/360-day count basis."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-228",
        "question": "A task has been assigned to Jack, a consultant for a global investment firm, to evaluate the worth of an advanced technology enterprise. The collected information about the enterprise is as follows: It has 500 million ordinary shares in circulation. It has a current share price of $7. The enterprise has a declared debt of $3500 million, and its market value equals this figure. The enterprise has reported a cash holding of $1500 million. Furthermore, it has $50 million in preferred equity and $100 million in short-term investments. For this year, its reported net sales are $3000 million. With regard to the information provided, what is the enterprise EV to sales ratio?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding = 500e6\n    share_price = 7\n    debt = 3500e6\n    cash = 1500e6\n    preferred_equity = 50e6\n    short_term_investments = 100e6\n    net_sales = 3000e6\n    \n    # Calculate market capitalization\n    market_capitalization = shares_outstanding * share_price\n    \n    # Calculate enterprise value\n    enterprise_value = market_capitalization + debt - (cash + short_term_investments) + preferred_equity\n    \n    # Calculate EV to Sales ratio\n    ev_to_sales_ratio = enterprise_value / net_sales\n    \n    # return answer\n    return ev_to_sales_ratio\n\n# Calling the solution function and printing the result\nprint(solution())\n```\nWhen executed, the function `solution()` would perform the necessary calculations and return the result for the enterprise EV to sales ratio based on the provided information."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-229",
        "question": "What is the discount rate if the cash price stands at 97.63 and there are 60 calendar days left on the life of the government bond?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the discount rate, we can use the following formula:\n\nDiscount Rate = [(Face Value - Purchase Price) / Purchase Price] * (365 / Days Until Maturity)\n\nWhere:\n- Face Value = 100 (since bonds are usually quoted as a percentage of their face value and it's assumed to be 100 if not given)\n- Purchase Price = Cash price of the bond\n- Days Until Maturity = the number of days left until the bond matures\n\nFrom the given data, we know that the Purchase Price is 97.63 and there are 60 Days Until Maturity. Here is the Python program to calculate the discount rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    purchase_price = 97.63\n    days_until_maturity = 60\n    \n    # Do math calculation to get the answer\n    discount_rate = ((face_value - purchase_price) / purchase_price) * (365 / days_until_maturity)\n    \n    # return answer\n    return discount_rate\n\n# You can call the function to check the result\nprint(solution())\n```\n\nPlease note that the result should be in decimal form (e.g., 0.05 for 5%). If you need the discount rate as a percentage, you can multiply the answer by 100."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-230",
        "question": "What is the present value of a 10-year annuity due with yearly payments of $2,000 and an annual compound interest rate of 5%, if the present value of a 10-year regular annuity with the same payments and interest rate is $15,443.47?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    regular_annuity_pv = 15443.47\n    annual_payment = 2000\n    interest_rate = 0.05\n    periods = 10\n\n    # An annuity due is one where payments are made at the start of the period.\n    # Its present value is greater than that of an ordinary annuity because each payment is reinvested to earn interest for one additional period.\n    # To find the present value of an annuity due, we multiply the present value of a regular annuity by (1 + r),\n    # where r is the periodic interest rate.\n    annuity_due_pv = regular_annuity_pv * (1 + interest_rate)\n\n    # return answer\n    return annuity_due_pv\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run the program, it will calculate the present value of the annuity due based on the given information."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-231",
        "question": "If a 2-year zero-coupon bond's present cost is $0.88035 and its face value is $1, then what is the 2-year spot rate given risk-neutral investors?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    present_value = 0.88035\n    future_value = 1\n    years = 2\n    \n    # Do math calculation to get the answer\n    spot_rate = (future_value / present_value) ** (1 / years) - 1\n    \n    # return answer\n    return spot_rate\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-232",
        "question": "John acknowledges that this specific US Treasury bond might not be the best choice for investors seeking zero reinvestment risk. He proposes a different vehicle, namely a US Treasury zero-coupon note. This note is fresh off the press, has a term of five years, and is valued at $71.30 (with a face value of $100.00) to yield 7.00% at maturity. John explains that some investors might choose to buy this Treasury zero-coupon note now and keep it until it matures in five years. He also mentions that there are investors who might buy this Treasury zero-coupon note in two years and then keep it for three years until it matures. John requests that Bird calculate the forward rate that would make investors indifferent to either acquiring the Treasury zero-coupon note now or buying it two years down the line. Current spot rates and extrapolated one year forward rates are available in Exhibit 1. Using the data in Exhibit 1, what forward rate would make an",
        "tables": [
            "| Year | Spot Rate | Forward Rate |\n|------|-----------|--------------|\n| 1    | 3.00%     |              |\n| 2    | 4.00%     | 5.01%        |\n| 3    | 5.00%     | 7.03%        |\n| 4    | 6.00%     | 9.06%        |\n| 5    | 7.00%     | 11.10%       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Given spot rates for year 1, 2, and 5\n    spot_rate_year_1 = 0.03\n    spot_rate_year_2 = 0.04\n    spot_rate_year_5 = 0.07\n    \n    # PV (Present Value) of the zero-coupon bond\n    present_value = 71.30\n    # FV (Face Value) of the bond, also known as par value or maturity value\n    face_value = 100.00\n    \n    # Calculate the present value factor for the zero-coupon bond for 2 years\n    pv_factor_2_years = (1 + spot_rate_year_2)**2\n    \n    # Calculate the future value of the zero-coupon bond in 2 years\n    future_value_2_years = present_value * pv_factor_2_years\n    \n    # The face value of the zero-coupon bond in 5 years is $100\n    # We need to find the forward rate that equates the FV of the investment after 3 more years\n    # to the known FV after 5 years, which is the face value of the bond\n    # FV = PV * (1 + forward_rate)**n\n    # Hence forward_rate = ((FV / PV)^(1/n)) - 1\n    \n    # We want the future value after 3 years to match the face value of the bond which is $100\n    desired_fv_3_years = face_value\n    \n    # Compute the forward rate for 3 years starting from year 2\n    forward_rate_3_years = (desired_fv_3_years / future_value_2_years)**(1/3) - 1\n    \n    # return answer as a percentage (%)\n    return forward_rate_3_years * 100\n\n# Run solution function and print the answer\nprint(\"The forward rate that will make investors indifferent is: {:.2f}%\".format(solution()))\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-233",
        "question": "If a researcher predicts that the market worth of the corporation's investment securities is 115% of their recorded value, what is the corporation's price to adjusted book value ratio, taking into account the corporation's market data and balance sheet details at the close of the fiscal year 2012?",
        "tables": [
            "|                         |          |                       |         |\n|-------------------------|----------|-----------------------|---------|\n|Price per Share and Shares Outstanding|        ||             |\n|Current market price per share  | $15.0  |    |            |\n|Number of shares outstanding(millions)  | 1.0 |    |            |\n|Balance Sheet Data As of 2012 ($ millions)   |     |            ||\n|Cash and cash equivalents | 0.4 | Current liabilities    | 1.0       |\n|Accounts receivable | 1.2 | Long-term liabilities | 61.0   |\n|Inventories | 40.0 |  |  |\n|Investment securities |   6.0 |Common shareholders' equity | 15.6 |\n|Property, plant, and equipment | 30.0 | | |\n|Total assets  |  77.6 |Total liabilities and equity | 77.6 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_price_per_share = 15.0\n    shares_outstanding = 1.0  # in millions\n    book_value_of_common_shareholders_equity = 15.6\n    recorded_value_investment_securities = 6.0\n    \n    # The market worth of the corporation's investment securities \n    market_worth_investment_securities = recorded_value_investment_securities * 1.15\n    \n    # Adjusted book value of common shareholders' equity\n    adjustment_for_securities = market_worth_investment_securities - recorded_value_investment_securities\n    adjusted_book_value = book_value_of_common_shareholders_equity + adjustment_for_securities\n    \n    # Market capitalization\n    market_capitalization = market_price_per_share * shares_outstanding\n    \n    # Price to adjusted book value ratio\n    price_to_adjusted_book_value_ratio = market_capitalization / adjusted_book_value\n    \n    # return answer\n    return price_to_adjusted_book_value_ratio\n\n# Call the function and print the answer\nprint(f\"The corporation's price to adjusted book value ratio is: {solution()}\")\n```\n\nThis program calculates the price to adjusted book value ratio by adjusting the book value of common shareholders' equity for the estimated market worth of the investment securities, and then dividing the market capitalization by this adjusted book value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-234",
        "question": "A financial instrument has a beta of 1.30. If the risk-free interest rate stands at 3% and the market's expected return is 8%, what is the anticipated return of this particular financial instrument, using the capital asset pricing model (CAPM)?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here is a Python program using the Capital Asset Pricing Model (CAPM) formula to calculate the anticipated return of the financial instrument:\n\n```python\ndef solution():\n    # Define variables name and value\n    beta = 1.30\n    risk_free_rate = 0.03\n    market_return = 0.08\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n    \n# Uncomment the following line to test the function\n# print(solution())\n```\n\nThe expected return according to the CAPM is calculated as follows:\n\n\\[ \\text{Expected return} = \\text{Risk-free rate} + \\beta \\times (\\text{Market return} - \\text{Risk-free rate}) \\]"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-235",
        "question": "The Sakamoto Company has recently distributed a dividend of ¥450 for each share. It is anticipated that the annual dividends will rise at a rate of 4 percent yearly for the forthcoming four years. By the conclusion of these four years, the Sakamoto Company's shares are predicted to have a selling price of ¥9000. If a 12 percent return rate is necessary, what would be the fundamental value of a share of Sakamoto Company?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package to perform pow operations\nfrom math import pow\n\ndef solution():\n    # Define variables name and value\n    dividend = 450  # Initial dividend\n    dividend_growth = 0.04  # Dividend growth rate\n    selling_price = 9000  # Price at the end of four years\n    required_return_rate = 0.12  # Required return rate\n    number_of_years = 4  # Period for the dividend growth\n    \n    # Calculate the present value of the dividends over the next four years\n    present_value_of_dividends = sum([dividend * pow((1 + dividend_growth), year) / pow((1 + required_return_rate), year) for year in range(1, number_of_years+1)])\n    \n    # Calculate the present value of the selling price\n    present_value_of_selling_price = selling_price / pow((1 + required_return_rate), number_of_years)\n    \n    # Combine both present values to get the intrinsic value of the stock\n    intrinsic_value = present_value_of_dividends + present_value_of_selling_price\n    \n    # return intrinsic value of the stock\n    return intrinsic_value\n\n# This will print out the result (intrinsic value)\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-236",
        "question": "If a fund manager constructs a portfolio with two securities that has a projected return of 15%, what is the percentage invested in Security1?",
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|--------------------------|--------------------------------|\n| 1        | 16                       | 20                             |\n| 2        | 12                       | 20                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's a Python program that calculates the percentage invested in Security 1 to achieve a projected return of 15%:\n\n```python\ndef solution():\n    # Expected returns for security 1 and 2\n    return_security1 = 16  # in percent\n    return_security2 = 12  # in percent\n\n    # Target return for the portfolio\n    portfolio_return = 15  # in percent\n\n    # Calculate weight of security 1 in the portfolio to achieve the target return\n    # We use the formula:\n    # portfolio_return = weight_security1 * return_security1 + weight_security2 * return_security2\n    # considering weight_security2 = 1 - weight_security1 and solving for weight_security1\n    # we find the proportion of the investment in security 1 to achieve the desired portfolio return\n\n    weight_security1 = (portfolio_return - return_security2) / (return_security1 - return_security2)\n\n    # Convert weight to percentage\n    weight_security1_percent = weight_security1 * 100\n    \n    # return answer\n    return weight_security1_percent\n\n# This call will print the percentage when executed\nprint(solution())\n```\nThis program calculates the weight of Security 1 in percentage, required to achieve the portfolio’s projected return of 15%. It uses the formula derived from the linear equation of returns for both securities."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-237",
        "question": "A fund manager employs a valuation model to calculate the worth of a bond portfolio at USD 125.00 million when the term structure is level. With the same model, the fund manager anticipates that the portfolio's value would surge to USD 127.70 million if all interest rates reduce by 20 bps and would drop to USD 122.20 million if all interest rates increase by 20 bps. Given these assumptions, what is the effective duration of the bond portfolio?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 125.00  # Portfolio value under level term structure\n    value_if_rates_fall = 127.70  # Portfolio value if interest rates decrease by 20 bps\n    value_if_rates_rise = 122.20  # Portfolio value if interest rates increase by 20 bps\n    change_in_interest_rates = 0.0020  # Change in interest rates (20 bps = 0.20%)\n\n    # Calculate the change in portfolio value when interest rates rise and fall\n    change_in_value_up = value_if_rates_rise - initial_value\n    change_in_value_down = value_if_rates_fall - initial_value\n    \n    # Calculate the average change in portfolio value\n    average_change_in_value = (change_in_value_down - change_in_value_up) / 2\n    \n    # Calculate effective duration using the formula\n    effective_duration = -average_change_in_value / (initial_value * change_in_interest_rates)\n    \n    # return answer\n    return effective_duration\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-238",
        "question": "The current trading price of ABC shares is $50. A 1-year put option on these shares, with an exercise price of $50, is valued at $2.08. Given a continuously compounded risk-free rate of 4%, what would be the value of a call option that has the same exercise price and date?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To solve this question, we can apply the Put-Call Parity theorem, which relates the prices of European put and call options with the same underlying asset, strike price, and expiration date. Under this parity, the relationship can be expressed as:\n\nC - P = S - PV(K)\n\nwhere:\nC = call option price,\nP = put option price,\nS = current stock price,\nPV(K) = present value of the exercise price (K) discounted at the risk-free rate.\n\nIn this case, we need to calculate the present value of the exercise price using the continuously compounded risk-free rate, and then we can rearrange the formula to solve for the call option price (C).\n\nHere is the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S = 50        # Current trading price of ABC shares\n    P = 2.08      # Price of the put option\n    K = 50        # Exercise price\n    r = 0.04      # Continuously compounded risk-free rate\n    T = 1         # Time in years\n    \n    # Calculate the present value of the exercise price\n    PV_K = K * math.exp(-r * T)\n    \n    # Apply the put-call parity to find the call option price (C)\n    C = P + S - PV_K\n    \n    # Return answer\n    return round(C, 2)  # rounding to two decimal places for financial calculation\n\n# Call the function and print the result\nprint(solution())\n```\n\nNote: The solution rounds the result to 2 decimal places to conform with common financial practice."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-239",
        "question": "As an owner of a supermarket, David is keen on using mathematical models to tackle various issues. Lately, he wishes to examine the correlation between the quantity of product demand (V), product pricing (P), and customer earning levels (I). The quantity of product demand acts as the dependent variable while the other two serve as independent variables. After conducting a multiple regression analysis, he obtained the following results: What is the upper confidence interval of the regression coefficient for the customer's earning level at 0.1 level?",
        "tables": [
            "|             | Coefficient | Std. Error | t-Statistic |\n|-------------|-------------|------------|-------------|\n| Sample Size | 150         |            |             |\n| Intercept   | 4990.519    | 2280.093   | 2.189       |\n| P           | -35.666     | 17.871     | -1.996      |\n| 1           | 6.193       | 1.652      | 3.749       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "We'll need to find the upper confidence interval for the regression coefficient of customer earning level variable 'I'. The regression coefficient is already provided (6.193), and so is the standard error (1.652). However, we need to know the t-value for the confidence level (0.1) at a certain degree of freedom, which is the sample size minus the number of estimated parameters.\n\nHere's the Python program to compute the upper confidence interval, assuming we need a t-value for a 90% confidence interval (since the question asks for the 0.1 level, which implies a 90% confidence interval) and a two-tailed test. The degree of freedom would be (sample size - number of estimated coefficients), which is 150 - 2.\n\nGiven the sample size 150, the degree of freedom would be 148 (since we must subtract the number of independent variables plus the intercept from the sample size: 150 - 2 = 148). We would look up the t-distribution table, or use a function from the `scipy.stats` module to find the t-value for 90% confidence level with 148 degrees of freedom for two tails.\n\nNote: Since a confidence level of 0.1 indicates a 90% confidence interval for a two-tailed test, we'll actually want the t-value for a one-tailed test of 95% (because 100% - 90% = 10%, and since it's two-tailed, we divide the 10% by 2 to get 5%). Hence, we're interested in the 95th percentile rather than the 90th.\n\nHere is the program:\n\n```python\nfrom scipy.stats import t\n\ndef solution():\n    # Define variables based on the question\n    coef_I = 6.193\n    stderr_I = 1.652\n    confidence_level = 0.90\n    sample_size = 150\n    num_parameters = 2  # intercept + P\n    \n    # Degrees of freedom\n    degrees_freedom = sample_size - num_parameters\n    # For a two-tailed test at 90% confidence, we'll need the critical value at 95% one-tailed\n    t_value = t.ppf((1 + confidence_level) / 2, df=degrees_freedom)\n    \n    # Calculate the upper confidence interval using the formula: coef_I + t_value * stderr_I\n    upper_confidence_interval = coef_I + (t_value * stderr_I)\n    \n    return round(upper_confidence_interval, 3)  # rounding to 3 decimal places\n    \n# Run the function and return the result\nprint(solution())\n```\n\nThis program uses the `scipy.stats` package to find the appropriate t-value and then computes the upper confidence interval by adding the product of the t-value and the standard error to the coefficient. The result is rounded to three decimal places for clarity.\n\nPlease be aware that in a different context or with specific instructions, the values for confidence level and degrees of freedom could vary. Always make sure to adjust the `confidence_level` and `degrees_freedom` based on the actual scenario or the instructions given."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-240",
        "question": "A client requests John to appraise the real estate with the presumption that the net operating income amounts to $125,000, the discount rate is 11%, and the growth rate stands at 6%. Choosing the direct capitalization approach to determine the value, what is the estimated worth of the multifamily property according to John's calculation?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 125000\n    discount_rate = 0.11\n    growth_rate = 0.06\n\n    # Calculate the cap rate\n    cap_rate = discount_rate - growth_rate\n\n    # Do math calculation to get the property value using direct capitalization\n    property_value = net_operating_income / cap_rate\n\n    # Return the calculated property value\n    return property_value\n\n# You can call the function and print the result to verify the answer\n#print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-241",
        "question": "A trader has set up a bearish option approach using three identical maturity put options. He purchases two $46 puts for $5 each, and then sells one $53 put for $8 and one $37 put for $3. If the underlying asset is valued at $32 at maturity, what is the ultimate gain of this strategy?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    put_option_bought_price = 5\n    put_option_bought_strike = 46\n    put_option_sold_price = 8\n    put_option_sold_strike_1 = 53\n    put_option_sold_price_2 = 3\n    put_option_sold_strike_2 = 37\n    underlying_asset_price_at_maturity = 32\n\n    # Calculate the intrinsic value for bought puts (since the market price is below the strike price)\n    intrinsic_value_bought_puts = max(0, put_option_bought_strike - underlying_asset_price_at_maturity) * 2  # Multiply by 2 for two options bought\n\n    # Calculate the intrinsic value for sold puts (since the market price is below the strike price of $37 put, but not the $53 put)\n    intrinsic_value_sold_put = max(0, put_option_sold_strike_2 - underlying_asset_price_at_maturity)\n\n    # Calculate the cost of the puts bought\n    total_put_option_bought_cost = put_option_bought_price * 2\n\n    # Calculate the income from the puts sold\n    total_put_option_sold_income = put_option_sold_price + put_option_sold_price_2\n\n    # Calculate the ultimate gain\n    ultimate_gain = (intrinsic_value_bought_puts - total_put_option_bought_cost) + total_put_option_sold_income - intrinsic_value_sold_put\n    \n    # return answer\n    return ultimate_gain\n\n# Calling the function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-242",
        "question": "Let's think about this linear regression equation: Y=a+bX+e. If a equals 0.05, b equals 1.2, standard deviation of Y equals 0.26, and standard deviation of e equals 0.1, what would be the correlation between X and Y?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    b = 1.2\n    std_Y = 0.26\n    std_e = 0.1\n    \n    # Calculate standard deviation of X using the given formula: std_Y = b * std_X + std_e\n    # Since a and e do not affect the standard deviation of Y in regards to X, they can be ignored in this context.\n    # std_X is isolated by subtracting the standard deviation of e from std_Y and then dividing by b to solve for std_X.\n    std_X = (std_Y - std_e) / b\n\n    # Calculate the correlation coefficient using the formula: correlation = covariance(X, Y) / (std_X * std_Y)\n    # Here covariance(X, Y) can be replaced by b * std_X^2 since covariance(X, Y) = b * var(X)\n    # and var(X) = std_X^2; therefore, correlation simplifies to b * std_X / std_Y.\n\n    correlation = (b * std_X) / std_Y\n    \n    return correlation\n\n# You could call the function and print the result to see the answer\n# print(solution())\n```\n\nThis program defines the linear regression models variables, calculates the standard deviation of X using the given data, and computes the correlation coefficient between X and Y, taking into account the relationship between the variables' standard deviations."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-243",
        "question": "Enterprise B releases 20 unique bonds and the risk of default for Enterprise B is 2%. The portfolio, made up of the 20 bonds, has a notional value of $1,000,000. Assuming that the default correlation of the 20 bonds is equal to 1 and the recovery rate is 0%, what is the credit VaR of the portfolio at the 99% confidence level?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\nimport scipy.stats as stats\n\ndef solution():\n    # Given variables\n    default_probability = 0.02  # Default probability of 2%\n    notional_value = 1000000    # Notional value of the portfolio in dollars\n    number_of_bonds = 20        # Number of unique bonds in the portfolio\n    recovery_rate = 0           # Recovery rate of 0%\n    confidence_level = 0.99     # Confidence level for VaR\n    \n    # Since the default correlation equals 1, all bonds will either default together or not default at all.\n    # Therefore, the portfolio's default probability is just the individual probability.\n    \n    # The potential loss given default is the entire notional value (since recovery rate is 0%)\n    loss_given_default = notional_value\n    \n    # The VaR is the loss given default times the default probability at the confidence level\n    # However since the defaults are perfectly correlated, either all default or none do\n    # So, the VaR is simply the notional value with the percentage of the value at risk\n    var = loss_given_default * default_probability\n    \n    # As per definition of VaR, we need to find the loss at the given confidence level.\n    # Since the default probability is the same for all bonds and they are perfectly correlated,\n    # The VaR at 99% confidence level is the full notional value as all bonds would default simultaneously\n    credit_var = notional_value if stats.norm.ppf(confidence_level) < stats.norm.ppf(1 - default_probability) else 0\n    \n    # return answer\n    return credit_var\n\n# Perform the function and get the answer\nprint(solution())\n```\n\nThe program defines the scenario in which the portfolio consists of 20 bonds with a 2% probability of default and a recovery rate of 0%. Given that the default correlation is 1, defaults are perfectly correlated, implying that either all bonds will default or none will. At the 99% confidence level, the VaR is evaluated as the entire notional value if the distribution's cumulative probability for the confidence level is less than the cumulative probability of no default. The program returns this value as the credit VaR of the portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-244",
        "question": "Based on the given data about the ZX bond, if ZX bond is identified as a callable-putable convertible bond, what would be the arbitrage-free value of this ZX bond?",
        "tables": [
            "|                               |        |\n|-------------------------------|--------|\n| Straight bond value           | £ 978  |\n| Value of embedded issuer call option | £ 43   |\n| Value of embedded investor put option | £ 26   |\n| Value of embedded call option on issuer's stock | £ 147 |\n| Conversion price              | £ 12.50|\n| Current common stock share price | £ 11.75|"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the complete Python program to calculate the arbitrage-free value of the ZX bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    straight_bond_value = 978\n    call_option_value = 43\n    investor_put_option_value = 26\n    stock_call_option_value = 147\n    \n    # Calculate the arbitrage-free value of ZX bond\n    # by subtracting the value of embedded options from the straight bond value\n    zx_bond_value = straight_bond_value - call_option_value + investor_put_option_value - stock_call_option_value\n    \n    # return answer\n    return zx_bond_value\n\n# Call the solution function\nprint(solution())\n```\n\nYou can run this program to get the arbitrage-free value of the ZX bond. The program subtracts the value of the issuer call option and the call option on the issuer's stock from the straight bond value, since these are rights given to the issuer and the stock option holders respectively. It adds the value of the investor's put option to the bond since this is a right given to the bondholder."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-245",
        "question": "If a business has an unprotected credit line and needs to keep its EBIT-to-interest coverage ratio above 2.0. With EBIT expected to be within the range of $36 million to $48 million, all values equally probable, what's the likelihood that the EBIT/interest would exceed 2.0 if the projected annual interest charge is $20 million?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # The EBIT range is from $36 million to $48 million, with all values equally probable.\n    # This means that any value within this range is equally likely.\n    # This can be considered a uniform distribution of EBIT values.\n    \n    # Define the EBIT range and interest charge\n    ebit_lower_bound = 36\n    ebit_upper_bound = 48\n    interest = 20 # The projected annual interest charge\n    \n    # Calculate the EBIT/interest coverage ratio range\n    coverage_ratio_lower_bound = ebit_lower_bound / interest\n    coverage_ratio_upper_bound = ebit_upper_bound / interest\n    \n    # Check what proportion of the range is above the 2.0 coverage ratio\n    if coverage_ratio_lower_bound >= 2.0:\n        # If the entire range is above 2.0, the likelihood is 100%\n        likelihood = 1.0\n    elif coverage_ratio_upper_bound <= 2.0:\n        # If the entire range is below 2.0, the likelihood is 0%\n        likelihood = 0.0\n    else:\n        # The coverage ratio crosses the 2.0 threshold within the range\n        # We calculate the length of the range above 2.0 and divide by the length of the total range\n        likelihood = (coverage_ratio_upper_bound - 2.0) / (coverage_ratio_upper_bound - coverage_ratio_lower_bound)\n    \n    # return the likelihood\n    return likelihood\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe program defines the boundaries of EBIT, calculates the corresponding EBIT/interest coverage ratio, and then determines the proportion of the EBIT range that results in a coverage ratio above 2.0. If the lower bound of the ratio is already above 2.0, the likelihood is 100%, while if the upper bound is below 2.0, the likelihood is 0%. If the threshold of 2.0 is within the range, the proportion of the range above this threshold is calculated as the likelihood."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-246",
        "question": "What is the approximate value of the first quintile, considering the volatility of a chain of funds that are part of the same group, arranged in rising order?",
        "tables": [
            "|       | Volatility (%) |        | Volatility (%) |\n|-------|--------------|--------|--------------|\n| Fund 1 | 9.81         | Fund 8  | 13.99        |\n| Fund 2 | 10.12       | Fund 9  | 14.47        |\n| Fund 3 | 10.84       | Fund 10 | 14.85        |\n| Fund 4 | 11.33       | Fund 11 | 15.00        |\n| Fund 5 | 12.25       | Fund 12 | 17.36        |\n| Fund 6 | 13.39       | Fund 13 | 17.98        |\n| Fund 7 | 13.42       |         |              |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the first quintile (Q1), which is the value below which 20% of the data lies, we first need to sort the volatilities in ascending order and then calculate the position in the data set where the first quintile is located. Since there are 13 funds, the first quintile position 'P' can be calculated as P = (1/5)(N + 1). Once we find the position, we can determine the volatility that corresponds to that position or calculate it using interpolation if the position is not a whole number.\n\nHere's the Python program to calculate the first quintile:\n\n```python\ndef solution():\n    # Define variables name and value\n    volatilities = [\n        9.81, 10.12, 10.84, 11.33, 12.25, 13.39, 13.42,\n        13.99, 14.47, 14.85, 15.00, 17.36, 17.98\n    ]\n    \n    # Sort the volatilities in ascending order\n    volatilities.sort()\n    \n    # Calculate position of the first quintile\n    position = (1 / 5) * (len(volatilities) + 1)\n    \n    # If position is a whole number, use the value at that position\n    if position.is_integer():\n        first_quintile = volatilities[int(position) - 1]\n    # If position is not a whole number, interpolate to find the quintile\n    else:\n        lower_index = int(position) - 1\n        upper_index = int(position)\n        \n        # Linear interpolation\n        first_quintile = volatilities[lower_index] + (volatilities[upper_index] - volatilities[lower_index]) * (position - lower_index - 1)\n    \n    # Return the first quintile\n    return first_quintile\n\n# You can test the function with the following line\n# print(solution())\n```\n\nThis function will calculate and return the approximate value of the first quintile for the given funds' volatilities."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-247",
        "question": "Reviewing the RiteVal data from Exhibit 2, and adopting the two-factor model preferred by Cortez, where global equity and global bonds are the two primary drivers of return for all asset classes, what is the standard deviation of U.S. real estate?",
        "tables": [
            "| Asset Class             | Global Equity | Global Bonds | Residual Risk (%) |\n|-------------------------|---------------|--------------|-------------------|\n| U.S. real estate equities | 0.60          | 0.15         | 4.4               |\n| Global timber equities  | 0.45          | 0.20         | 3.9               |\n\nAdditional Information\n\n| Variances             | 0.025  | 0.0014 |       |\n|-----------------------|--------|--------|-------|\n\nCorrelation between global equities and global bonds:  0.33"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To find the standard deviation of U.S. real estate equities using the two-factor model, we will use the following formula:\n\n\\[ \\text{Total Variance} = (\\text{Weight}_\\text{Equity} \\times \\text{SD}_\\text{Equity})^2 + (\\text{Weight}_\\text{Bonds} \\times \\text{SD}_\\text{Bonds})^2 + 2 \\times (\\text{Weight}_\\text{Equity} \\times \\text{Weight}_\\text{Bonds} \\times \\text{SD}_\\text{Equity} \\times \\text{SD}_\\text{Bonds} \\times \\text{Correlation}_{\\text{Equity-Bonds}}) + \\text{Residual Risk}^2 \\]\n\nThen the standard deviation is the square root of total variance.\n\nGiven:\n- Weight of global equity in U.S. real estate equities = 0.60\n- Weight of global bonds in U.S. real estate equities = 0.15\n- Standard deviation of global equity (SD_Equity) = sqrt(variance of global equity) = sqrt(0.025)\n- Standard deviation of global bonds (SD_Bonds) = sqrt(variance of global bonds) = sqrt(0.0014)\n- Correlation between global equities and global bonds = 0.33\n- Residual risk for U.S. real estate equities = 4.4%\n\nLet's code the solution:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_equity = 0.60\n    weight_bonds = 0.15\n    variance_equity = 0.025\n    variance_bonds = 0.0014\n    correlation_equity_bonds = 0.33\n    residual_risk = 4.4 / 100  # convert percentage to decimal\n    \n    # Standard deviation of global equity and bonds\n    sd_equity = math.sqrt(variance_equity)\n    sd_bonds = math.sqrt(variance_bonds)\n    \n    # Calculate total variance using the two-factor model\n    total_variance = ((weight_equity * sd_equity) ** 2 + \n                      (weight_bonds * sd_bonds) ** 2 +\n                      2 * weight_equity * weight_bonds * sd_equity * sd_bonds * correlation_equity_bonds +\n                      residual_risk ** 2)\n    \n    # Standard deviation is the square root of total variance\n    standard_deviation = math.sqrt(total_variance)\n    \n    # return standard deviation\n    return standard_deviation\n\n# The function can be called to get the result.\n# The result will be printed if you want to verify the answer, uncomment the line below.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-248",
        "question": "In 2009, Telecom Corporation had an average of 1,000,000 shares in circulation. During the same year, the company also had 10,000 options in circulation with exercise prices of $10 each. The stock's average price during 2009 was $15. To calculate the diluted earnings per share, how many shares should be considered in the denominator?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    average_shares_in_circulation = 1000000\n    options_in_circulation = 10000\n    exercise_price = 10\n    average_stock_price = 15\n\n    # Calculate the number of shares that could be purchased with the proceeds from options exercise\n    proceeds_from_options = options_in_circulation * exercise_price\n    shares_from_options = proceeds_from_options / average_stock_price\n\n    # Calculate the total number of shares for diluted EPS\n    total_shares_for_diluted_EPS = average_shares_in_circulation + (options_in_circulation - shares_from_options)\n\n    # return total_shares_for_diluted_EPS\n    return total_shares_for_diluted_EPS\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-249",
        "question": "What would be the required 2012 return to get a trailing five-year geometric mean annualized return of 5% by the end of 2012, assuming a wealth management company has the following yearly returns in their US large-cap equity portfolio?",
        "tables": [
            "| Year | Net Return (%) |\n|------|----------------|\n| 2008 | -34.8          |\n| 2009 | 32.2           |\n| 2010 | 11.1           |\n| 2011 | -1.4           |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    past_returns = [-0.348, 0.322, 0.111, -0.014]\n    target_geometric_mean = 1.05  # 5% annualized return\n    \n    # Calculate the cumulative product of (1 + past returns)\n    cumulative_product = 1\n    for annual_return in past_returns:\n        cumulative_product *= (1 + annual_return)\n    \n    # Calculate the required return for 2012 to achieve the target geometric mean over five years\n    required_return_2012 = (target_geometric_mean ** 5) / cumulative_product - 1\n    \n    # return answer\n    return required_return_2012\n\n# Call the solution function to get the answer\nrequired_return_2012 = solution()\nprint(\"The required 2012 return for a 5% trailing five-year geometric mean annualized return: {:.2f}%\".format(required_return_2012 * 100))\n```\n\nWhen calling the `solution()` function, it will return the required 2012 return as a floating-point number. For instance, if the required return for 2012 is 10%, the function will return 0.1."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-250",
        "question": "A bond that has 5 years left before maturity is presently being sold for 101 for every 100 of par value. This bond provides a 6% coupon rate, with interest paid twice a year. What is the bond's yearly yield-to-maturity, bearing in mind the bond can first be redeemed after 3 years, with further redemptions possible based on the successive coupon dates, according to the schedule provided?",
        "tables": [
            "| End of Year | Call Price |\n|-------------|------------|\n| 3           | 102        |\n| 4           | 101        |\n| 5           | 100        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\nimport numpy_financial as npf\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    par_value = 100  # Par value of the bond\n    market_price = 101  # Market price of the bond per 100 of par value\n    coupon_rate = 0.06  # Coupon rate of the bond\n    years_to_maturity = 5  # Years to maturity of the bond\n    frequency = 2  # Number of coupon payments per year\n    redemption_schedule = {\n        3: 102,\n        4: 101,\n        5: 100\n    }\n\n    # Define the cash flows for the bond\n    cash_flows = np.full(years_to_maturity * frequency, (coupon_rate / frequency) * par_value)\n    # Add the par value to the last cash flow\n    cash_flows[-1] += par_value\n\n    # Adjust the redemption schedule to account for semi-annual coupon payments\n    redemption_values = np.array([redemption_schedule[year] for year in sorted(redemption_schedule)])\n    \n    # Iterate over each callable year and calculate the yield to call (YTC)\n    # Assuming the bond is called at the call price at the earliest call date.\n    ytc_all = []\n    for callable_period, callable_price in redemption_schedule.items():\n        # Calculate the year's equivalent periods for semi-annual\n        callable_period_semis = callable_period * frequency\n        \n        # Use redemption value instead of par value for cash flows if called\n        adj_cash_flows = np.copy(cash_flows)\n        adj_cash_flows[callable_period_semis - 1] += (callable_price - par_value)\n        \n        # Trim the cash flows to only include periods up to when the bond could be called\n        trimmed_cash_flows = adj_cash_flows[:callable_period_semis]\n        # Calculate the yield to call using numpy's financial function for IRR.\n        ytc = npf.irr(trimmed_cash_flows) * frequency\n        ytc_all.append(ytc)\n\n    # Yield-to-worst (YTW) is the lowest of yield to maturity or yield to call\n    ytw = min(ytc_all)\n    \n    # Do math calculation to get the answer\n    # Use numpy's financial function 'irr' to calculate the internal rate of return, which in the\n    # context of bond yield, is equivalent to the yield to maturity\n    ytm = npf.irr(cash_flows) * frequency  # Annualize the yield by multiplying by the frequency\n    \n    # Since we are asked for the yield to maturity taking into account the callable feature,\n    # we provide the minimum of YTM and YTW, since investors will consider the worst-case scenario.\n    answer = min(ytm, ytw)\n    \n    # return answer\n    return answer\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-251",
        "question": "Management at S&Q Enterprises is given the option to receive options on common stocks. The options necessitate a service period of 4 years post the grant date for vesting. S&Q follows a financial year-end of December 31. The enterprise on July 1, 2014, gave out 61,600 options. The market price of the options on the date of grant was £0.5. What is the chunk of the compensation expense associated with the stock option granted in 2014?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program that calculates the compensation expense associated with the stock option granted in 2014:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_options = 61600\n    market_price_per_option = 0.5\n    service_period_years = 4\n    months_service_period_2014 = 6  # From July 1 to December 31\n\n    # Calculate total value of the options\n    total_value_of_options = total_options * market_price_per_option\n\n    # Calculate the annual compensation expense\n    annual_compensation_expense = total_value_of_options / service_period_years\n\n    # Calculate the proportion of the compensation expense for 2014\n    proportion_of_year = months_service_period_2014 / 12\n    compensation_expense_2014 = annual_compensation_expense * proportion_of_year\n\n    # return answer\n    return compensation_expense_2014\n\n# Call the function and print the result\nprint(solution())\n```\n\nRunning this program will give you the compensation expense for the stock options in 2014."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-252",
        "question": "Leaving out the impacts of compound interest, what would be the predicted overall cost of keeping an investment for nine months in the ETF, keeping in mind an ETF with these management fees and trading expenses: An annual management fee of 0.40%, round-trip trading fees of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee_percent = 0.40\n    round_trip_trading_fees_percent = 0.55\n    bid_offer_spread_percent = 0.20\n    months_in_year = 12\n    investment_period_months = 9\n\n    # Convert annual fees to the proportion for investment period\n    prorated_management_fee = (annual_management_fee_percent / months_in_year) * investment_period_months\n\n    # Trading fees and bid-offer spread are not prorated, as they are incurred with each transaction\n    total_trading_costs = round_trip_trading_fees_percent + bid_offer_spread_percent\n\n    # Sum of all costs\n    overall_cost = prorated_management_fee + total_trading_costs\n\n    return overall_cost\n\n# Calculate and print the solution\nprint(solution())  # Print the result for verification (this line could be removed in production code)\n```\n\nOur program defines the percentage costs, prorates the annual management fee for the 9-month investment period, and sums up the prorated management fee with the trading fees and bid-offer spread. The `solution()` function returns the total expected cost of the investment in the ETF for the specified period of time excluding the effects of compound interest."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-253",
        "question": "What is the income tax expense (in thousands) in 2013 for the corporation, based on the provided data about the corporation?",
        "tables": [
            "| ($ thousands) | 2013 | 2012 |\n|---|---|---|\n|Deferred tax assets| 200 | 160 |\n|Deferred tax liabilities| -450 | -360 |\n|Net deferred tax liabilities| -250 | -200 |\n|Earnings before taxes| 4,000 | 3,800 |\n|Income taxes at the statutory rate| 1,200 | 1,140 |\n|Income tax payable (Current income tax expense)| 1,000 | 900 |"
        ],
        "topic": "Accounting",
        "output": [
            "The income tax expense is the sum of the current income tax expense and the change in the amount of deferred tax liabilities and assets. \n\nHere is the Python program to calculate the income tax expense for the corporation in 2013:\n\n```python\ndef solution():\n    # Income tax payable (Current income tax expense)\n    current_income_tax_expense = 1000  # in $ thousands for 2013\n    \n    # Change in deferred tax liabilities and assets\n    change_in_deferred_tax_liabilities = (-450) - (-360)  # in $ thousands\n    change_in_deferred_tax_assets = 200 - 160  # in $ thousands\n    \n    # Calculate total income tax expense\n    income_tax_expense = current_income_tax_expense + change_in_deferred_tax_liabilities - change_in_deferred_tax_assets\n    \n    # return answer\n    return income_tax_expense\n\n# Run the solution function and print the result.\nprint(solution())\n```\nThis program will output the total income tax expense (in thousands) for the corporation for the year 2013."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-254",
        "question": "If corporation AR has a turnover that is 3 times and its sales amount to $5000, could you compute the corporation's AR?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000\n    turnover_multiplier = 3\n    \n    # Do math calculation to compute the corporation's AR\n    # Since turnover is Revenue / Average AR, we need to find Average AR\n    # Therefore, Average AR = Revenue / Turnover\n    average_account_receivable = revenue / turnover_multiplier\n    \n    # return answer\n    return average_account_receivable\n\n# You can call the function to get the result\n# print(solution())\n```\n\nThis function defines the revenue and turnover multiplier. It then calculates the average accounts receivable using the formula and multiplier provided in the question and returns the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-255",
        "question": "The accompanying display presents the yearly returns for Investment Pool X. What is the geometric mean return for Investment Pool X?",
        "tables": [
            "|       | Fund Y(%) |\n|-------|-----------|\n| Year 1|   19.5    |\n| Year 2|   -1.9    |\n| Year 3|   19.7    |\n| Year 4|   35.0    |\n| Year 5|   5.7     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program that calculates the geometric mean return for the given data:\n\n```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define variables name and value\n    returns = [19.5, -1.9, 19.7, 35.0, 5.7]\n    \n    # Convert percentage returns to multiplicative factors\n    factors = [(1 + r / 100) for r in returns]\n    \n    # Calculate the product of the factors\n    prod_factors = math.prod(factors)\n    \n    # Calculate the geometric mean return\n    geometric_mean = prod_factors ** (1 / len(returns)) - 1\n    \n    # Convert it back to percentage\n    geometric_mean_percent = geometric_mean * 100\n    \n    # return answer\n    return geometric_mean_percent\n    \n# You can uncomment the following line to test the function:\n# print(solution())\n```\n\nThe program converts the annual percentage returns to decimal factors, computes their product, and then takes the nth root of the product to calculate the geometric mean (where n is the number of years). The final geometric mean is then converted back to a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-256",
        "question": "Assuming a yearly discount rate of 6.5%, compounded monthly, what is the present worth of a financial agreement that promises to pay €1,200 each month for a period of five years, with the first payment being done instantly?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program that calculates the present worth of a financial agreement with monthly payments:\n\n```python\n# Import package if needs\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    monthly_payment = 1200\n    annual_discount_rate = 0.065\n    number_of_years = 5\n    periods_per_year = 12\n\n    # Convert the annual discount rate to a monthly discount rate\n    monthly_discount_rate = (1 + annual_discount_rate) ** (1 / periods_per_year) - 1\n    \n    # Calculate the number of total payments\n    total_payments = number_of_years * periods_per_year\n    \n    # Calculate the present value of the annuity due (payment at the beginning of each period)\n    present_value_annuity_due = monthly_payment * (1 + monthly_discount_rate) * ((1 - (1 + monthly_discount_rate) ** -total_payments) / monthly_discount_rate)\n    \n    # As the first payment is done instantly and therefore not discounted, we need to add it separately\n    present_value = present_value_annuity_due + monthly_payment\n    \n    # return answer\n    return present_value\n    \n# Call the function and print the result\nprint(f\"The present worth of the financial agreement is: €{solution():.2f}\")\n```\n\nPlease note that in the provided solution, the present value of an annuity is calculated using the formula for an annuity due since the payments are made at the beginning of each period. Additionally, an extra monthly payment is added at the end to account for the initial immediate payment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-257",
        "question": "What is the standard deviation of the average weekly return if an investment analyst is estimating the VaR for a portfolio using a data set of 25 weekly returns, with an average weekly return of 7% and a standard deviation for the return series of 15%, given that the weekly returns are independent and identically distributed?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    number_of_weeks = 25\n    weekly_return_std_dev = 0.15\n    \n    # Do math calculation to get the answer\n    # Since the weekly returns are i.i.d., the standard deviation of the average weekly return\n    # can be found by dividing the standard deviation of the return series by the square root\n    # of the number of weeks\n    std_dev_of_avg_weekly_return = weekly_return_std_dev / math.sqrt(number_of_weeks)\n    \n    # Return answer\n    return std_dev_of_avg_weekly_return\n    \n# Call the function and print the result\nprint(solution())\n```\n\nThe above program calculates the standard deviation of the average weekly return for the portfolio, using the given standard deviation of the series of weekly returns and the fact that 25 weeks of data is provided. It applies the principle that when independent and identically distributed (i.i.d.) variables are averaged, the standard deviation of the average is equal to the standard deviation of the individual variables divided by the square root of the number of variables (in this case, the number of weeks)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-258",
        "question": "Financial institution C provides an unsecured loan worth $10 million to enterprise D. Based on the forecasted data, the likelihood of enterprise D defaulting is 4% and the recovery rate stands at 40%. What is the credit reserve that Financial institution C should maintain equal to the anticipated credit loss?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Below is the Python program which calculates the anticipated credit loss and determines the credit reserve that Financial Institution C should maintain.\n\n```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 10000000 # $10 million\n    default_probability = 0.04 # 4%\n    recovery_rate = 0.40 # 40%\n    \n    # Calculate the loss given default\n    loss_given_default = loan_amount * (1 - recovery_rate)\n    \n    # Calculate the expected credit loss\n    expected_credit_loss = default_probability * loss_given_default\n    \n    # Credit reserve equals the expected credit loss\n    credit_reserve = expected_credit_loss\n    \n    # return answer\n    return credit_reserve\n\n# Example usage:\n# credit_reserve_required = solution()\n# print(\"The credit reserve required is:\", credit_reserve_required)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-259",
        "question": "Based on the financial report, what is the FCFE for Company P?",
        "tables": [
            "|                         | $ millions |\n|-------------------------|-----------|\n| Net Income              | 485       |\n| Depreciation expense    | 270       |\n| Increase in accounts receivable | 59        |\n| Increase in accounts payable | 33        |\n| Purchase of fixed assets | 523       |\n| Increase in notes payable | 15        |\n| Increase in long-term debt | 60        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the Free Cash Flow to Equity (FCFE), we can use the following formula:\n\nFCFE = Net Income + Depreciation Expense - Increase in Accounts Receivable + Increase in Accounts Payable - Purchase of Fixed Assets + Increase in Notes Payable + Increase in Long-term Debt\n\nHere is the Python program that calculates the FCFE:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 485\n    depreciation_expense = 270\n    increase_in_accounts_receivable = 59\n    increase_in_accounts_payable = 33\n    purchase_of_fixed_assets = 523\n    increase_in_notes_payable = 15\n    increase_in_long_term_debt = 60\n    \n    # Do math calculation to get the answer\n    FCFE = (net_income + depreciation_expense \n            - increase_in_accounts_receivable + increase_in_accounts_payable\n            - purchase_of_fixed_assets + increase_in_notes_payable\n            + increase_in_long_term_debt)\n    \n    # Since the table shows values in $ millions, we'll convert the final answer back to $ millions\n    return FCFE\n\n# Output the answer\nprint(solution())\n```\nThis program will return the FCFE for Company P as calculated according to the inputs from the table provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-260",
        "question": "What is the lower limit of a 99% confidence interval for the population mean if you have a sample size of 65, a mean of 31, and a variance of 529 from a normally distributed population?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the lower limit of a 99% confidence interval for a normally distributed population mean, we can use the following formula: \n\n$$ \\bar{x} - z * \\frac{\\sigma}{\\sqrt{n}} $$\n\nwhere:\n- \\( \\bar{x} \\) is the sample mean,\n- \\( z \\) is the z-score corresponding to the desired confidence level,\n- \\( \\sigma \\) is the standard deviation of the population (the square root of the variance),\n- \\( n \\) is the sample size.\n\nFor a 99% confidence level, the z-score is approximately 2.576. We can find this using a z-table or statistical functions from libraries such as `scipy.stats`. Since the sample is large enough, we can use the z-distribution to approximate the distribution of the sample mean.\n\nHere is the Python code to calculate the lower limit:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    n = 65  # sample size\n    mean = 31  # sample mean\n    variance = 529  # sample variance\n    confidence_level = 0.99  # confidence level\n    \n    # Calculate the z-score from the confidence level\n    z = norm.ppf((1 + confidence_level) / 2)\n    \n    # Calculate the standard deviation from the variance\n    std_dev = variance ** 0.5\n    \n    # Calculate the standard error\n    standard_error = std_dev / (n ** 0.5)\n    \n    # Calculate the lower limit of the confidence interval\n    lower_limit = mean - z * standard_error\n    \n    # return answer\n    return lower_limit\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the z-score, standard deviation, standard error, and then computes the lower limit of the 99% confidence interval for the population mean. The result will be a floating-point number representing the lower limit."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-261",
        "question": "On the 1st of January 2019, ABC corporation purchased a 20% stake with voting rights in XYZ Ltd. for $400 million. ABC corporation has a seat on XYZ's board of directors and has a say in their policymaking. An analyst named Anne collects specific financial data for XYZ in 2019. The plant and equipment are depreciated on a linear basis and have a remaining lifespan of 10 years. From the Exhibit mentioned, what is the goodwill included in ABC’s acquisition of XYZ?",
        "tables": [
            "|                      | Book value | Fair value |\n|----------------------|------------|------------|\n| Plant & equipment    | 2500       | 2800       |\n| Total assets         | 2950       | 3250       |\n| Liabilities          | 1550       | 1550       |\n| Net assets           | 1400       | 1700       |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 400  # in millions\n    stake_percent = 0.20  # 20%\n    \n    fair_value_of_net_assets = 1700  # in millions\n    book_value_of_net_assets = 1400  # in millions\n    \n    # Calculate proportionate fair value of net assets attributable to ABC's stake\n    proportionate_fair_value = fair_value_of_net_assets * stake_percent\n    \n    # Calculate goodwill\n    goodwill = purchase_price - proportionate_fair_value\n    \n    # return answer\n    return goodwill\n\n# Call the function and print the answer\nprint(solution())\n```\n\nIn this program, the `solution()` function calculates the goodwill included in ABC’s acquisition of XYZ. The purchase price for a 20% stake is $400 million, and the fair value of net assets reflects the company's valuation at the time of purchase. Goodwill is computed as the excess of the purchase price over the ABC's proportionate share of the fair value of XYZ's net assets. The function returns the amount of goodwill."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-262",
        "question": "If rolling the dice, the likelihood that number 1 is on top is 1/6, what are the chances of this happening?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly, let's create a Python program that calculates the probability of rolling a 1 on a fair six-sided die.\n\n```python\ndef solution():\n    # Probability of a single event occurring\n    probability_of_one = 1 / 6\n    \n    # return the probability as a fraction of 1\n    return probability_of_one\n\n# You could call the function and print the result if you want to see it in action:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-263",
        "question": "According to the table illustrating data about three semiannual coupon payment bonds, what is the discount factor for d(0.5)?",
        "tables": [
            "| Maturity | Coupon | Price |\n|----------|--------|-------|\n| 6 months | 4.5%   | 101.47 |\n| 1 year   | 6.0%   | 102.75 |\n| 2 years  | 7%     | 100.32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the discount factor for \\( d(0.5) \\), we need to use the given information about the 6 months bond. The discount factor is the present value of 1 monetary unit, due in the future, at the current market price. It reflects the market's estimate of the time value of money.\n\nThe formula for the present value of a future cash flow is:\n\n\\[ PV = \\frac{C}{(1 + r)^{t}} \\]\n\nWhere:\n- \\( PV \\) is the present value or the price of the bond.\n- \\( C \\) is the future cash flow, which includes the coupon payment and the par value for the bond.\n- \\( r \\) is the periodic (semiannual) discount rate.\n- \\( t \\) is the time in number of periods, which is 1 for 6 months.\n\nFor a semiannual coupon bond with a maturity of 6 months:\n\n- Par value is assumed to be 100 (if not provided, typically bonds are par 100).\n- The cash flow \\( C \\) will be the coupon payment (\\( Par Value * Coupon Rate / 2 \\)) since coupons are paid semiannually, plus the par value because the bond matures in 6 months.\n- The price \\( PV \\) of the bond is given as 101.47.\n\nWe can use this information to solve for \\( d(0.5) \\), which is basically the same as the discount rate \\( r \\). We are solving for \\( r \\) in the formula:\n\n\\[ 101.47 = \\frac{100 * (4.5\\% / 2) + 100}{(1 + r)} \\]\n\nLet's write a Python program to solve for the discount factor:\n\n```python\ndef solution():\n    # Define variables\n    par_value = 100\n    coupon_rate = 0.045 # 4.5%\n    price = 101.47\n    \n    # Calculate future cash flow (C)\n    cash_flow = par_value * (coupon_rate / 2) + par_value\n    \n    # Solving the equation for discount factor r\n    r = (cash_flow / price) - 1\n    \n    # discount factor for d(0.5)\n    discount_factor = 1 / (1 + r)\n    \n    # return answer\n    return discount_factor\n\n# Example usage\nprint(solution())\n```\n\nPlease note, this code assumption is the par value is 100 since it's not given, and it's a common practice to assume a par value of 100 for bond calculations if not stated otherwise. If the par value should be different, it would need to be stated in the question or the dataset."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-264",
        "question": "The following table outlines details from the financial reports of BC Enterprises as of December 31, 20X8. Using this data, can you determine the sustainable growth rate of BC Enterprises? The figures are as follows: revenue: $800,000, dividend paid: $80,000, total asset turnover: 0.58, financial leverage: 1.7, sales to net income: 6.5, tax rate: 20%.",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program that calculates the sustainable growth rate (SGR) of BC Enterprises:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 800000\n    dividend_paid = 80000\n    total_asset_turnover = 0.58\n    financial_leverage = 1.7\n    sales_to_net_income = 6.5\n    tax_rate = 0.20\n    \n    # Calculate net income\n    net_income = revenue / sales_to_net_income\n    \n    # Calculate retention ratio (b)\n    retention_ratio = (net_income - dividend_paid) / net_income\n    \n    # Calculate return on equity (ROE)\n    # ROE = Net Income / Total Equity\n    # and since Total Assets = Total Equity * Financial Leverage,\n    # we can write ROE as Net Income / (Total Assets / Financial Leverage)\n    # Simplifying, ROE = Net Income / (Revenue / Total Asset Turnover) * Financial Leverage\n    # where Net Income Margin = Net Income / Revenue\n    net_income_margin = net_income / revenue\n    roe = net_income_margin * total_asset_turnover * financial_leverage\n    \n    # The sustainable growth rate is the product of the retention ratio and the ROE\n    sgr = retention_ratio * roe\n    \n    # return answer\n    return sgr\n\n# Call the solution function and print the answer\nprint(solution())\n```\n\nThe formula for the sustainable growth rate (SGR) is:\n\n`SGR = (1 - Dividend Payout Ratio) * ROE`\n\nWhere the dividend payout ratio is the fraction of net income paid to shareholders as dividends. The retention ratio (b) is the complement to the dividend payout ratio, which is reinvested back into the company, and ROE is the return on equity.\n\nRemember that the variables should be defined and used in a way that best matches the calculation of the sustainable growth rate, taking into account the formulas and concepts from financial analysis."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-265",
        "question": "Assuming equal funding from each source and a marginal tax rate of 30%, what is the weighted average cost of capital (%) if a company's post-tax debt costs, preferred shares, and equity are 8.4%, 14%, and 16% respectively?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here is a Python program to calculate the weighted average cost of capital (WACC) based on the given information:\n\n```python\ndef solution():\n    # Define variables for post-tax costs\n    post_tax_debt_cost = 0.084      # 8.4%\n    preferred_share_cost = 0.14      # 14%\n    equity_cost = 0.16               # 16%\n    tax_rate = 0.30                  # 30%\n\n    # Since funding from each source is equal, each weight is 1/3\n    weight_debt = 1/3\n    weight_preferred = 1/3\n    weight_equity = 1/3\n\n    # Calculate WACC\n    WACC = (post_tax_debt_cost * weight_debt * (1 - tax_rate)) + \\\n           (preferred_share_cost * weight_preferred) + \\\n           (equity_cost * weight_equity)\n    \n    # Convert WACC to percentage\n    WACC_percentage = WACC * 100\n    \n    # return answer\n    return WACC_percentage\n\n# You can call the function to get the answer\nprint(solution())\n```\n\nThis program defines the cost for different capital sources, applies the weights assuming equal funding, calculates the WACC, and then converts it to a percentage format before returning the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-266",
        "question": "A researcher has gathered the following data about Smithson Enterprises. No distributions have been made to the owners. What would most probably be the researcher's estimate of the total assets at the end of the year?",
        "tables": [
            "| Liabilities at  year-end | £ 1,000 |\n|-------------------------|---------|\n| Contributed capital at year-end | £ 500 |\n| Beginning retained earnings | £ 600 |\n| Revenue during the year | £ 5,000 |\n| Expenses during the year | £ 4,300 |"
        ],
        "topic": "Accounting",
        "output": [
            "To estimate the total assets at the end of the year for Smithson Enterprises, we can use the accounting equation:\n\n```plaintext\nAssets = Liabilities + Equity\n```\n\nWe also know that the end Equity can be calculated from the beginning retained earnings plus the net income for the year (which is revenue minus expenses), since there have been no distributions.\n\nHere's the Python program to calculate the total assets:\n\n```python\ndef solution():\n    # Define variables name and value\n    liabilities = 1000\n    contributed_capital = 500\n    beginning_retained_earnings = 600\n    revenue = 5000\n    expenses = 4300\n    \n    # Calculate net income\n    net_income = revenue - expenses\n    \n    # Calculate ending retained earnings\n    ending_retained_earnings = beginning_retained_earnings + net_income\n    \n    # Calculate total equity\n    total_equity = contributed_capital + ending_retained_earnings\n    \n    # Calculate total assets using the accounting equation\n    total_assets = liabilities + total_equity\n    \n    # return answer\n    return total_assets\n\n# Uncomment the line below to test the function\n# print(solution())\n```\n\nThis program initializes the given variables and performs arithmetic to calculate the total assets at year end, which is the sum of liabilities and equity at that time."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-267",
        "question": "Suppose that a random variable Y follows a normal distribution with a mean of 40 and a standard deviation of 14. What is the likelihood that Y is not within the range of 12 to 61?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program that calculates the likelihood that the random variable Y is not within the range of 12 to 68, given that it follows a normal distribution with a mean of 40 and a standard deviation of 14.\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 40\n    std_dev = 14\n    lower_range = 12\n    upper_range = 61\n    \n    # Do math calculation to get the answer\n    # Probability that Y is below the lower range\n    p_below = norm.cdf(lower_range, mean, std_dev)\n    # Probability that Y is above the upper range\n    p_above = 1 - norm.cdf(upper_range, mean, std_dev)\n    \n    # The likelihood that Y is not within the range is the sum of probabilities of being below or above the range\n    answer = p_below + p_above\n    \n    # return answer\n    return answer\n```\n\nYou can run this program, and it will return the likelihood that the random variable Y is not within the range of 12 to 61."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-268",
        "question": "How many permutations can be made when selecting 4 items from a group of 10 items?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom math import factorial\n\ndef solution():\n    # Define variables name and value\n    n = 10  # total number of items\n    r = 4   # number of items to select\n    \n    # Do math calculation to get the answer\n    # Formula for permutations: P(n, r) = n! / (n - r)!\n    permutations = factorial(n) // factorial(n - r)\n    \n    # return answer\n    return permutations\n    \n# The following line calls the function and prints the return value\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-269",
        "question": "John is a trader based in the United States. John has posted a 6-month forward exchange rate in USD/GBP at 1.3923. Additionally, John predicts a 6-month forward point percentage of 5.6%. Which among the following selections for the USD/GBP spot rate would be the most precise?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.3923\n    forward_point_percentage = 0.056 # 5.6% as a decimal\n    \n    # Calculate the spot rate\n    spot_rate = forward_rate / (1 + forward_point_percentage)\n    \n    # Return answer\n    return spot_rate\n\n# Example usage:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-270",
        "question": "The Chief Information Officer of a private equity firm in Canada is looking to secure the interest on a three-month \"bridge\" loan that his company will acquire in six months to finalize an LBO transaction. He trades the applicable interest rate futures contracts at 98.05. After six months, he starts the loan at 2.70% and neutralizes the hedge at 97.30. What is the effective interest rate on the loan?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the effective interest rate on the loan, we need to consider the initial futures price (98.05), the final futures price at the time of loan initiation (97.30), and the starting interest rate of the loan (2.70%). The difference between the initial and final futures prices will indicate the gain or loss on the futures contract, which will affect the effective interest rate on the loan.\n\nHere is the Python program that performs the necessary calculations:\n\n```python\ndef solution():\n    # Initial futures contract price\n    initial_futures_price = 98.05\n    # Final futures contract price at the start of loan\n    final_futures_price = 97.30\n    \n    # Start interest rate of the loan\n    starting_interest_rate = 2.70\n    \n    # The value of each basis point (0.01%) in the futures contract\n    # Usually, for interest rate futures, the value of 1 basis point = $25\n    value_per_basis_point = 25\n    \n    # The loan duration in terms of year for a three-month loan\n    loan_duration_years = 3 / 12\n    \n    # Calculate the basis points gained or lost on the futures contract\n    # Each full point in the futures price represents 100 basis points\n    basis_points_change = (initial_futures_price - final_futures_price) * 100\n    \n    # Calculate the dollar gain or loss on the futures contracts\n    dollar_gain_loss = basis_points_change * value_per_basis_point\n    \n    # Calculate the interest expense saved or incurred due to the futures contract\n    # Adjusted by loan duration because futures gain/loss applies to the entire year\n    interest_expense_change = dollar_gain_loss / loan_duration_years\n    \n    # Calculate the loan amount from futures price\n    # Normally, futures price is quoted as 100 - interest rate\n    loan_amount = 100 - starting_interest_rate\n    \n    # Add the interest expense change to the starting interest rate to get the adjusted rate\n    # Assumes that the interest expense change is subtracted from the loan amount to get the effective rate\n    adjusted_interest_rate = (starting_interest_rate - (interest_expense_change / loan_amount)) * loan_duration_years\n    \n    # Return the effective interest rate on the loan\n    return adjusted_interest_rate\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program calculates the effective interest rate taking into account the gains or losses from the interest rate futures contract."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-271",
        "question": "Assuming a functional procedure has a 5% chance of resulting in a substantial financial loss and if not, no significant loss is recorded (i.e., Bernoulli). If the substantial loss happens, the intensity is normally distributed with an average of $4 million and a standard deviation of $2 million. What is the expected shortfall at the 95% confidence level?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\n# Import package if needs\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    probability_of_loss = 0.05\n    mean_loss = 4000000\n    std_dev_loss = 2000000\n    confidence_level = 0.95\n    \n    # Calculate the Value at Risk (VaR) at 95% confidence level\n    # Since the loss happens with a probability of 5%, the 95th percentile is actually the 100th for the loss distribution\n    # Using the ppf (percent point function) which is the inverse of the cdf, to get the z-value at the 95% confidence level.\n    z_score = norm.ppf(confidence_level)\n    value_at_risk = mean_loss + std_dev_loss * z_score\n    \n    # Expected shortfall is the expected loss given that the loss has exceeded the VaR threshold\n    # For the normal distribution, the Expected Shortfall at q confidence level can be calculated analytically:\n    expected_shortfall = mean_loss + std_dev_loss * norm.pdf(z_score) / (1 - confidence_level)\n    \n    # However, due to the only 5% chance of loss, this expected shortfall must be weighted by the probability of the loss occurring\n    expected_shortfall_weighted = expected_shortfall * probability_of_loss\n    \n    # return answer\n    return round(expected_shortfall_weighted, 2)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-272",
        "question": "Miller is a tax consultant who gives tax awareness counsel to individual clients. Miller's client is Jane who currently has $10 million invested in a tax-deferred account earning 8% annually. Jane intends to liquidate the investment after five years, accrue the sale proceeds in a lump sum (which are taxed at a 20% rate), and utilize the proceeds to buy a mansion. Jane requested Miller to determine the leftover after-tax wealth after five years. What will be the after-tax wealth in Jane's tax-deferred account at the conclusion of the five years?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is the Python program to calculate the after-tax wealth in Jane's tax-deferred account at the end of five years:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000  # Initial investment amount in dollars\n    annual_growth_rate = 0.08      # Growth rate of 8% annually\n    investment_duration = 5        # Duration of investment in years\n    tax_rate = 0.20                # Tax rate of 20%\n    \n    # Do math calculation to get the answer\n    # Future value of investment after five years\n    future_value = initial_investment * (1 + annual_growth_rate) ** investment_duration\n    # Calculate tax amount\n    tax_amount = future_value * tax_rate\n    # Calculate the after-tax wealth\n    after_tax_wealth = future_value - tax_amount\n    \n    # Return answer\n    return after_tax_wealth\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate and output the value of Jane's investment after five years, accounting for the 20% tax on the investment's accumulated value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-273",
        "question": "John, a beginner analyst, oversees a portfolio X. The portfolio is completely committed to US Treasuries. John aims to fully safeguard this bond portfolio against any increase in interest rates. Exhibit 1 discloses certain information regarding Portfolio X, along with the related Treasury futures contract, and the cheapest-to-deliver (CTD) bond. Considering the data in Exhibit 1, how many Treasury futures contracts does John need to sell to fully protect Portfolio X?",
        "tables": [
            "|                          | Portfolio W       | Futures Contract and CTD Bond |\n| ------------------------ | --------------- | ----------------------------- |\n| Market value            | $120,349,000      | Price                         | 143.20                      |\n| Modified duration       | 9.30             | Modified duration             | 9.00                         |\n| Basis point value       | $111,924.57      | Basis point value             | 128.88                       |\n|                          |                   | Conversion factor             | 0.75                         |\n|                          |                   | Contract size                 | $100,000                     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 120349000\n    portfolio_bp_value = 111924.57\n    future_price = 143.20\n    future_bp_value = 128.88\n    future_contract_size = 100000\n    conversion_factor = 0.75\n    portfolio_modified_duration = 9.30\n    future_modified_duration = 9.00\n\n    # Calculation of hedge ratio and number of contracts\n    # Adjust the basis point values of the portfolio and the future to reflect the modified durations\n    adjusted_portfolio_bp_value = portfolio_bp_value * (portfolio_modified_duration / future_modified_duration)\n    \n    # Calculate the dollar value of a one basis point move for the entire portfolio\n    dollar_value_of_a_basis_point_for_portfolio = portfolio_value / (1 / adjusted_portfolio_bp_value)\n    \n    # Calculate the dollar value of a one basis point move for the future\n    dollar_value_of_a_basis_point_for_future = (future_contract_size * future_price) / (1 / future_bp_value)\n    \n    # Calculate the number of contracts needed to hedge\n    number_of_contracts = dollar_value_of_a_basis_point_for_portfolio / (dollar_value_of_a_basis_point_for_future * conversion_factor)\n\n    # Round to the nearest whole number, since we can't trade a fraction of a contract\n    number_of_contracts = round(number_of_contracts)\n    \n    # return answer\n    return number_of_contracts\n\n# Call the function to get the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-274",
        "question": "The current status of the PlayPoint Resort Company is that it has 1.2 million outstanding common shares with a beta of 2.2. Also, it has bonds of a face value of $10 million that will mature in five years and these bonds have an 8% coupon with payments every 6 months, and are calculated to yield 13.65 percent. If PlayPoint decides to issue new bonds up to $2.5 million, the bonds will be priced at par value and will yield 13.65 percent. However, if the company decides to issue bonds beyond $2.5 million, the expected yield on the entire issuance will be 16 percent. PlayPoint recently determined that they can issue new common stock at $10 per share. The present risk-free interest rate is at 3 percent while the expected market return is 10 percent. PlayPoint's marginal tax rate is at 30 percent. What is the weighted average cost of capital if PlayPoint ac",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here's the Python program code that calculates the weighted average cost of capital (WACC) for PlayPoint Resort Company:\n\n```python\ndef solution():\n    # Define variable names and values\n    outstanding_shares = 1200000\n    common_share_beta = 2.2\n    existing_bond_face_value = 10e6\n    coupon_rate = 0.08\n    bond_yield = 0.1365\n    new_lower_tier_bond_value = 2.5e6\n    additional_bond_yield = 0.16\n    stock_price = 10\n    risk_free_rate = 0.03\n    expected_market_return = 0.1\n    marginal_tax_rate = 0.3\n    \n    # Calculate cost of equity using CAPM formula: cost_of_equity = risk_free_rate + beta * (market_return - risk_free_rate)\n    cost_of_equity = risk_free_rate + common_share_beta * (expected_market_return - risk_free_rate)\n    \n    # Calculate cost of existing debt: cost_of_existing_debt = (coupon_rate * existing_bond_face_value / existing_bond_face_value) * (1 - marginal_tax_rate)\n    # Assume that cost of debt is the yield to maturity of the bond\n    cost_of_existing_debt = bond_yield * (1 - marginal_tax_rate)\n    \n    # Calculate cost of new debt: cost_of_new_debt = (coupon_rate * new_lower_tier_bond_value / new_lower_tier_bond_value) * (1 - marginal_tax_rate)\n    # If new bonds exceed $2.5 million, the yield will be 16% instead of 13.65%\n    cost_of_new_debt = additional_bond_yield * (1 - marginal_tax_rate)\n    \n    # Calculate market value of equity and existing debt\n    market_value_of_equity = outstanding_shares * stock_price\n    market_value_of_existing_debt = existing_bond_face_value # Assuming bond is priced at par\n    \n    # Calculate total market value\n    total_market_value = market_value_of_equity + market_value_of_existing_debt\n    \n    # Calculate weights of equity and existing debt\n    weight_of_equity = market_value_of_equity / total_market_value\n    weight_of_existing_debt = market_value_of_existing_debt / total_market_value\n    \n    # Calculate the WACC: WACC = (weight_of_equity * cost_of_equity) + (weight_of_existing_debt * cost_of_existing_debt) + (weight_of_new_debt * cost_of_new_debt)\n    # Since there is no new debt yet, we will not include it in WACC calculation\n    WACC = (weight_of_equity * cost_of_equity) + (weight_of_existing_debt * cost_of_existing_debt)\n    \n    # Return the Weighted Average Cost of Capital\n    return WACC\n\n# Call the solution function and print the result\nprint(f\"The Weighted Average Cost of Capital (WACC) is: {solution()}\")\n```\n\nThis program assumes that the bonds are priced at par value and the cost of debt is considered to be the yield to maturity for the existing debt and the expected yield for the new debt. Note that since PlayPoint has not actually issued new bonds, we do not include the cost of new debt in the WACC calculation. If new bonds were issued, that would be taken into account in the WACC calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-275",
        "question": "According to Exhibit 1, what is the projected semi-deviation for the investment portfolio?",
        "tables": [
            "|                               |         |\n|-------------------------------|---------|\n|Exhibit 1 10-Year Trailing Risk-Adjusted Performance| |\n| Average annual return        | 8.20%   |\n| Minimum acceptable return (MAR) | 5.00%   |\n| Sharpe ratio                 | 0.95    |\n| Sortino ratio                | 0.87    |\n| Upside capture               | 0.66    |\n| Downside capture             | 0.50    |\n| Maximum drawdown             | -24.00% |\n| Drawdown duration            | 4 months|"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the projected semi-deviation for the investment portfolio, we will use the Sortino ratio formula:\n\nSortino ratio = (Average annual return - Minimum acceptable return (MAR)) / Semi-deviation\n\nFrom the table, we have the following information:\n- Average annual return = 8.20%\n- Minimum acceptable return (MAR) = 5.00%\n- Sortino ratio = 0.87\n\nRearranging the Sortino ratio formula to solve for the semi-deviation, we get:\n\nSemi-deviation = (Average annual return - Minimum acceptable return (MAR)) / Sortino ratio\n\nNow we will create the Python program for this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    average_annual_return = 8.20  # as a percentage\n    minimum_acceptable_return = 5.00  # MAR as a percentage\n    sortino_ratio = 0.87\n    \n    # Convert percentages to decimals for calculation\n    average_annual_return = average_annual_return / 100\n    minimum_acceptable_return = minimum_acceptable_return / 100\n\n    # Do math calculation to get the semi-deviation\n    semi_deviation = (average_annual_return - minimum_acceptable_return) / sortino_ratio\n    \n    # Convert semi-deviation from decimal to percentage\n    semi_deviation_percentage = semi_deviation * 100\n    \n    # return answer\n    return semi_deviation_percentage\n\n# Call the solution function and print the result\nprint(\"Projected Semi-Deviation (%):\", solution())\n```\nNote that we first converted the percentage figures to decimals for the calculation and then converted the result back to a percentage. The answer given by the function is the projected semi-deviation in percentage terms."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-276",
        "question": "An executive is considering pricing a put option through a one-period binomial tree. The relevant data include: The present stock price is $30, the strike price of the put option stands at $30. The upward adjustment factor is 1.12, while the downward one rests at 0.92. The risk-free rate comes at 5%. The risk-neutral likelihood of a downward movement is:",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To solve this problem, we need to calculate the risk-neutral probability of a downward movement (q) in a one-period binomial model, which we can find using the following formula:\n\nq = (e^(r*Δt) - u) / (d - u)\n\nwhere:\n- r is the risk-free interest rate (continuously compounded)\n- Δt is the time step, which is 1 in our one-period model\n- u is the upward adjustment factor\n- d is the downward adjustment factor\n- e is the mathematical constant approximately equal to 2.71828\n\nIn Python, we can use `math.exp` to calculate the exponential function. Let's write a function to perform this calculation:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    r = 0.05  # risk-free rate\n    u = 1.12  # upward adjustment factor\n    d = 0.92  # downward adjustment factor\n    \n    # Calculate the risk-neutral probability of a downward movement\n    q = (math.exp(r) - u) / (d - u)\n    \n    # return answer\n    return q\n\n# Call the function to get the result\nprint(solution())\n```\n\nNote that risk-free rate `r` is usually given in terms of an annual rate, so if Δt is not one year, we would need to adjust r accordingly by multiplying it by Δt. However, in a one-period binomial tree, it's typical to assume that the time step Δt is one year, so no adjustment for r is necessary in this case."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-277",
        "question": "Based on the given data, how much money was paid to the vendor?",
        "tables": [
            "| ($ millions) | 2016 | 2017 |\n| --- | --- | --- |\n| Revenue | 50 | 45 |\n| Cost of goods sold | 17 | 20 |\n| Inventory | 24 | 20 |\n| Accounts receivable | 20 | 17 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the amount of money paid to the vendors, we can use the following formula:\n\nPayments to vendors = Cost of Goods Sold (COGS) + Ending Inventory - Beginning Inventory + Beginning Accounts Payable - Ending Accounts Payable\n\nThis calculation is derived from the fact that the Cost of Goods Sold (COGS) plus any increase in inventory would be part of the company's expenditures on the goods, but an increase in accounts payable would mean the company owes more to its vendors than it has paid.\n\nLet's create the program to do this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    cogs_2016 = 17\n    cogs_2017 = 20\n    inventory_2016 = 24\n    inventory_2017 = 20\n    accounts_payable_2016 = 30\n    accounts_payable_2017 = 33\n\n    # Do math calculation to get the answer\n    payments_to_vendors = cogs_2017 + inventory_2017 - inventory_2016 + accounts_payable_2016 - accounts_payable_2017\n    \n    # convert to millions for consistency with the table values which are in $ millions\n    payments_to_vendors_million = payments_to_vendors\n    \n    # return answer\n    return payments_to_vendors_million\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nRunning the function `solution()` will calculate and return the amount of money paid to the vendors in millions of dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-278",
        "question": "What will the trade balance be for a theoretical economy given the following international trade data if the value of the ZRB depreciates by 12%?",
        "tables": [
            "| | Exports | Imports |\n|---|---|---|\n| Initial Value (DCU) | 4,800 | 6,500 |\n| Demand elasticity | 0.70 | 0.55 |\n| **Note:** DCU:  domestic currency units | | |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the trade balance after the ZRB depreciates by 12%, we need to apply the concept of price elasticity of demand for both exports and imports.\n\nThe formula for percentage change in quantity is:\n\n`Percentage change in quantity = Elasticity * Percentage change in price`\n\nWhere the percentage change in price for exports and imports is -12% because the ZRB depreciates by 12%.\n\nAfter calculating the changes in quantity demanded for exports (which will increase) and imports (which will decrease), we can calculate the new values for exports and imports:\n\n`New value = Old value * (1 + (Percentage change in quantity / 100))`\n\nThe trade balance can be found by subtracting the value of imports from the value of exports.\n\nHere's the required program:\n\n```python\ndef solution():\n    # Define variables name and value\n    exports_initial_value = 4800  # in DCU\n    imports_initial_value = 6500  # in DCU\n    depreciation = 0.12  # 12% depreciation\n    exports_elasticity = 0.70\n    imports_elasticity = 0.55\n    \n    # Calculate percentage change in quantity demanded for exports and imports\n    exports_quantity_change = exports_elasticity * (-depreciation)\n    imports_quantity_change = imports_elasticity * (-depreciation)\n\n    # Calculate the new values for exports and imports\n    exports_new_value = exports_initial_value * (1 + exports_quantity_change)\n    imports_new_value = imports_initial_value * (1 + imports_quantity_change)\n    \n    # Calculate trade balance\n    trade_balance = exports_new_value - imports_new_value\n    \n    # return answer\n    return trade_balance\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThe `solution()` function computes the trade balance after taking into account the changes in the values of exports and imports due to the depreciation of ZRB."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-279",
        "question": "A portfolio manager possesses a portfolio of options on a non-dividend paying stock named LYR. The portfolio includes 10,000 deep in-the-money call options on LYR and 50,000 deep out-of-the money call options on LYR. Along with this, there are 20,000 forward contracts on LYR. The current trading price of LYR is USD 100. Given 252 trading days in a year and 30 percent per-year volatility of LYR, what would be the 1-day VaR of the portfolio at the 95 percent confidence level?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To calculate the VaR (Value at Risk) of the portfolio at the 95 percent confidence level using the parametric method (also known as the variance-covariance method), we need to consider the value of the positions in the portfolio and the volatility of the underlying stock. Since options have a non-linear payoff, they require a more detailed model to assess their risk, which is not provided in the question. Therefore, this solution will focus on the forward contracts only. To estimate the VaR for options, a detailed options pricing model such as the Black-Scholes model would be needed.\n\nFor illustration purposes, I'll demonstrate a simplified method to calculate VaR for the forward contracts, assuming they are linear instruments:\n\n1. Calculate the daily volatility from the annual volatility.\n2. Determine the 95% confidence level z-score using a standard normal distribution.\n3. Calculate the 1-day VaR using the z-score, the value of the forward contracts, and the daily volatility.\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    current_price = 100             # Current trading price of LYR stock\n    annual_volatility = 0.30        # 30% per-year volatility\n    trading_days_year = 252         # Number of trading days in a year\n    confidence_level = 0.95         # 95% confidence level\n    \n    # Forward contracts details\n    num_of_forwards = 20000         # Number of forward contracts\n    \n    # Calculate daily volatility\n    daily_volatility = annual_volatility / (trading_days_year ** 0.5)\n    \n    # Determine the z-score for the given confidence level using the inverse of the cumulative distribution function\n    z_score = norm.ppf(confidence_level)\n    \n    # Calculate the value of the forward contract (this calculation would be more complex in reality but here \n    # we'll assume a forward contract value that equals the stock price for simplicity, as information such as strike\n    # price and expiry is not provided.)\n    value_of_forward = current_price * num_of_forwards\n    \n    # Calculate the 1-day VaR using the z-score, the value of the forward contracts, and the daily_volatility\n    one_day_var = z_score * value_of_forward * daily_volatility\n    \n    # return answer\n    return one_day_var\n    \n# This function call would return the 1-day VaR for the forward contracts only.\n```\nFor a more precise calculation, the VaR for each option position would need to be calculated taking into account their respective deltas, gammas, and other Greeks which would require options pricing model output that is sensitive to the moneyness of the options (deep in-the-money or deep out-of-the money).\n\nFurther details about the structure of the options (strike price, expiration date, etc.) would be needed for a precise calculation of the options' contributions to the portfolio's VaR."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-280",
        "question": "If the total assets of the Silver Airways company are $3,275,000 and their total debt is $2,315,000. Determine the financial leverage assuming Silver Airways securitized $200,000 of its account receivables to a SPE.",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 3275000\n    total_debt = 2315000\n    securitized_receivables = 200000\n    \n    # Adjust total assets to account for the securitization\n    adjusted_total_assets = total_assets - securitized_receivables\n    \n    # Calculate financial leverage\n    financial_leverage = adjusted_total_assets / (adjusted_total_assets - total_debt)\n    \n    # return answer\n    return financial_leverage\n\n# You can call the solution function to get the result\n# print(solution())\n```\n\nWhenever you're ready to get the output, you can call the `solution()` function, and it will return the financial leverage after considering the securitization of $200,000 of its account receivables to a SPE by Silver Airways."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-281",
        "question": "What is the portfolio beta for an investor who opts to borrow an additional $5,000 at the risk-free rate and invest a total of $10,000 in the market portfolio?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To find the portfolio beta for an investor who is borrowing money at the risk-free rate to invest more in the market portfolio, we need to consider that the beta of the market is 1. \n\nIf an investor borrows $5,000 at the risk-free rate (which has a beta of 0 since it's risk-free) and invests a total of $10,000 in the market portfolio (which has a beta of 1), the added investment through borrowing does not alter the risk profile of the market portion of the investment. \n\nIt just leverages the investment without changing the combined beta, because the borrowed funds are risk-free. To find the leveraged beta (βL), we can apply the formula:\n\nβL = [Equity / (Equity + Debt)] * βEquity\n\nWith Equity = $5,000 (current investment), Debt = $5,000 (borrowed amount), and βEquity = 1 (market beta).  Since Debt is taken at a risk-free rate, its beta is 0, so we ignore it in the calculation:\n\nβL = [5,000 / (5,000 + 5,000)] * 1 = 0.5 * 1 = 0.5\n\nHowever, since the investor is investing the entire amount ($10,000) in the market portfolio, the beta of the leveraged portfolio actually should reflect the market, thus, would be 1.\n\nHere's how we can implement this in the program.\n\n```python\ndef solution():\n    # Define variables name and value\n    equity = 5000 # The investor's own money\n    debt = 5000 # The borrowed amount\n    beta_equity = 1 # The market beta\n    \n    # Do math calculation to get the answer\n    # The following formula would be used if the debt had a different beta than zero.\n    # portfolio_beta = (equity / (equity + debt)) * beta_equity\n    # However, since the beta of the debt is 0 (risk-free rate), the portfolio beta remains as market beta which is 1\n\n    # Since the entire investment is in the market portfolio, the beta of the portfolio equals the market beta\n    portfolio_beta = beta_equity\n    \n    # return answer\n    return portfolio_beta\n\n# This should return 1 as the investor has a portfolio entirely reflective of the market's movements\n```\n\nGiven the context of the question, it seems that we should consider the leverage used in the investment but understand that because the investment is in the market portfolio and borrowing is at the risk-free rate, the portfolio beta is actually reflective of the market as a whole.\n\nThis is why the answer is directly taken as 1, considering the entire leveraged amount is invested in the market portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-282",
        "question": "Suppose the Peterson account experienced a return of -5.3% in a particular month, during which the portfolio benchmark saw a return of -5.5% and the market index had a return of -2.8%. What is the return of the Peterson account attributable to active management?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    peterson_return = -5.3\n    portfolio_benchmark_return = -5.5\n    market_index_return = -2.8\n    \n    # Active return is the difference between the Peterson account return and the benchmark return\n    active_return = peterson_return - portfolio_benchmark_return\n    \n    # return answer\n    return active_return\n\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-283",
        "question": "If an employee named Anna, FRM, who works as an analyst at Meyer Industries, is calculating the value at risk (VaR) for the company's profit/loss distribution, which is supposed to be normally distributed with a yearly average of $2 million and a standard deviation of $1 million, what would be the VaR at a 99% confidence level using a parametric method?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 2_000_000     # yearly average in dollars\n    std_dev = 1_000_000  # standard deviation in dollars\n    confidence_level = 0.99\n\n    # Find the z-score corresponding to the given confidence level\n    z_score = norm.ppf(1 - confidence_level)\n    \n    # Calculate the VaR at the given confidence level using the parametric method\n    # The value at risk is calculated as the mean plus the z-score times the standard deviation\n    VaR = mean + (z_score * std_dev)\n    \n    # Since the z-score gives us the value below which a percentage of the data falls,\n    # and VaR is concerned with losses, we make the VaR value negative to represent a loss.\n    VaR = -VaR\n    \n    # return answer\n    return VaR\n\n# To showcase the function execution\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-284",
        "question": "John Doe bought a mortgage-backed security that has an 8% coupon rate and a par value of $1,000 for $960. The coupon payments are made monthly. How much is the monthly coupon payment?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08\n    par_value = 1000\n    # number of periods for monthly payments\n    periods_per_year = 12\n    \n    # Calculate the annual coupon payment\n    annual_coupon_payment = par_value * coupon_rate\n    \n    # Calculate the monthly coupon payment\n    monthly_coupon_payment = annual_coupon_payment / periods_per_year\n    \n    # return answer\n    return monthly_coupon_payment\n    \n# You can check the function with the following print statement:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-285",
        "question": "Recently, the total return of a market-capitalization-weighted index made up of securities D, E, F, has been compiled by Stacy, a research analyst from a financial investment firm. What is the total return of the index?",
        "tables": [
            "| Security | Beginning of Period Price($) | End of Period Price ($) | Dividends per Share ($) | Shares Outstanding |\n|---|---|---|---|---|\n| D | 3,400 | 3,600 | 120 | 1,500 |\n| E | 4,600 | 3,500 | 150 | 1,100 |\n| F | 1,200 | 1,300 | 180 | 5,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the total return of a market-capitalization-weighted index, we need to account for both the capital gains (or losses) as well as dividends received for each security. The total return is generally calculated by comparing the end of period market capitalization plus any dividends to the beginning of period market capitalization.\n\nThe formula for the total return of each individual security can be expressed as:\n\nTotal Return of Security = [(End Price + Dividends - Beginning Price) / Beginning Price] x 100\n\nFor the market-capitalization-weighted index, we then multiply the total return of each security by its respective market capitalization weight (beginning of period market cap as a percentage of the total beginning market cap of the index) before summing these together.\n\nThe market capitalization for each security at the beginning of the period is:\n\nMarket Cap = Beginning Price x Shares Outstanding\n\nThe total market capitalization for the index at the beginning of the period is the sum of the market caps for each security.\n\nWe can then express the program to calculate the total return of the index as follows:\n\n```python\ndef solution():\n    # Define variables names and values for securities D, E, and F\n    beginning_prices = {'D': 3400, 'E': 4600, 'F': 1200}\n    end_prices = {'D': 3600, 'E': 3500, 'F': 1300}\n    dividends = {'D': 120, 'E': 150, 'F': 180}\n    shares_outstanding = {'D': 1500, 'E': 1100, 'F': 5000}\n    \n    # Initial total market_cap for weighting\n    total_beginning_market_cap = sum(beginning_prices[key] * shares_outstanding[key] \n                                     for key in beginning_prices)\n    \n    # Calculate the weighted return of each security\n    weighted_returns = []\n    for security in beginning_prices.keys():\n        beginning_market_cap = beginning_prices[security] * shares_outstanding[security]\n        end_market_cap = end_prices[security] * shares_outstanding[security]\n        div_total = dividends[security] * shares_outstanding[security]\n        \n        # Calculate total return for the security\n        total_return = ((end_market_cap + div_total - beginning_market_cap) / beginning_market_cap)\n        \n        # Calculate weighted return\n        weighted_return = total_return * (beginning_market_cap / total_beginning_market_cap)\n        \n        weighted_returns.append(weighted_return)\n    \n    # Sum of weighted returns is the total return of the index\n    total_return_index = sum(weighted_returns)\n    \n    # Convert to percentage\n    total_return_percent = total_return_index * 100\n    \n    return total_return_percent\n\n# Call function and print the result\nprint(f\"The total return of the index is: {solution():.2f}%\")\n```\n\nPlease note, that Python's standard print function is used at the end to display the formatted output of the total return percentage. The function `solution` itself will return the total return as a float value.\n\nLet's run the defined function to get the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-286",
        "question": "Assuming that the yield-to-maturity of Bond B decreases by 30 basis points, and given that its annual modified duration is 6.932 and the annual convexity is 59.270, what should be the expected percentage price change?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delta_yield = -0.0030  # A decrease of 30 basis points in decimal form\n    modified_duration = 6.932\n    convexity = 59.270\n    convexity_adjustment_factor = 1 / 2\n    \n    # Do math calculation to get the expected price change\n    # Price change using modified duration\n    price_change_duration = modified_duration * delta_yield\n    \n    # Price change using convexity\n    price_change_convexity = convexity_adjustment_factor * convexity * delta_yield**2\n    \n    # Combine both duration and convexity impacts for total expected price change\n    expected_price_change_percentage = price_change_duration + price_change_convexity\n    \n    # return answer\n    return expected_price_change_percentage\n\n# You can call the function to see the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-287",
        "question": "What would the corresponding call option be worth, taking into account that the present share price is $25, an European put option on the share with a $27 strike price and a 9-month expiration is priced at $3, and the risk-free rate stands at 4%?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To solve this, we can use the Put-Call Parity theorem, which establishes a relationship between the prices of European call and put options with the same strike price and expiration date. The Put-Call Parity formula is:\n\n\\[ C + PV(X) = P + S \\]\n\nwhere:\n- \\( C \\) is the price of the European call option (which we want to find).\n- \\( PV(X) \\) is the present value of the exercise price (X) using the risk-free rate.\n- \\( P \\) is the price of the European put option.\n- \\( S \\) is the current stock price.\n\nGiven that the Put (P) is $3, the Strike Price (X) is $27, the current Stock Price (S) is $25, and the risk-free rate is 4% annually, we can find the present value of the strike price as the present value of $27 due in 9 months discounted back at 4% annually.\n\nLet's calculate this in Python:\n\n```python\nfrom math import exp\n\ndef solution():\n    # Define variables\n    stock_price = 25\n    strike_price = 27\n    put_price = 3\n    risk_free_rate = 0.04\n    time_to_expiration = 9 / 12  # 9 months in year fraction\n    \n    # Calculate Present Value of Strike Price (X)\n    present_value_strike = strike_price * exp(-risk_free_rate * time_to_expiration)\n    \n    # Use Put-Call Parity to calculate Call Price (C)\n    call_price = put_price + stock_price - present_value_strike\n    \n    # return answer\n    return call_price\n\n# To test the function\nprint(solution())\n```\nThis program will calculate the price of the European call option using the Put-Call Parity equation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-288",
        "question": "The subsequent balance sheet belongs to Omega Firm and includes chosen data at the year's conclusion: The investment in Alpha Firm was $130,000 and is categorised as FVOCI. By the year's end, what is the total owners' equity for Omega Firm?",
        "tables": [
            "| Fair value of investment in Gama Company | $ 150,000 |\n| --- | --- |\n| Retained earning | $ 782,000 |\n| Common stock, $1 par value | $ 560,000 |\n| Preferred stock, $100 par value | $ 126,000 |\n| Deferred taxes | $ 75,000 |\n| Accumulated OCI | $ 35,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value based on provided data\n    common_stock = 560000\n    preferred_stock = 126000\n    retained_earnings = 782000\n    accumulated_oci = 35000  # Accumulated Other Comprehensive Income\n    \n    # Calculate total owner's equity by summing up the relevant components\n    total_owners_equity = (\n        common_stock +\n        preferred_stock +\n        retained_earnings +\n        accumulated_oci\n    )\n    \n    # return the calculated answer\n    return total_owners_equity\n    \n# Call the function and print the result if you need to display the output\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-289",
        "question": "Suppose a company's share is expected to move as displayed below in the next two periods. The starting price for the share is $100. Considering the odds of an increase in any given period as 40% and the chance of a decrease is 60%, what is the likelihood of the share's price reaching $101.20 after two periods, using the binomial model?",
        "tables": [
            "| Time=0 | Time=1 | Time=2 |\n|---|---|---|\n| SO=100 | Su=110 | Suu=121 |\n|   | Sd=92 | Sud/du=101.20 |\n|   |   | Sdd=84.64 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    p_up = 0.4 # Probability of an increase\n    p_down = 0.6 # Probability of a decrease\n    n = 2 # Total number of periods\n    \n    # Dud means one up movement followed by one down movement or vice versa\n    # Since order doesn't matter in \"ud\" or \"du\", we can consider them as one event for the probability calculation.\n    ud_count = 1 # The number of up movements needed to reach the target price of $101.20 after two movements\n    du_count = 1 # The number of down movements needed to reach the target price of $101.20 after two movements\n    \n    # Binomial probability formula: P(X=k) = C(n, k) * (p^k) * (q^(n-k)); where q = 1 - p\n    # Here, we want the probability of 1 success (ud or du) in 2 trials.\n    likelihood = comb(n, ud_count) * (p_up ** ud_count) * (p_down ** du_count)\n    \n    # return answer\n    return likelihood\n\n# Execute the function and print the result\nprobability = solution()\nprint(f\"The likelihood of the share's price reaching $101.20 after two periods is: {probability}\")\n```\n\nThis Python program calculates the likelihood of a share's price reaching $101.20 after two periods, considering the odds of an increase or decrease per period as given. The program utilizes the binomial probability distribution formula to compute the probability."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-290",
        "question": "If PYTHON Ltd. sells an intangible asset that was originally acquired for €12 million and has an accumulated amortization of €2 million, and reported a loss of €3.2 million on its sale, what is a probable sale price of the asset?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 12000000\n    accumulated_amortization = 2000000\n    loss_on_sale = 3200000\n    \n    # Calculate the net book value of the intangible asset\n    net_book_value = original_cost - accumulated_amortization\n    \n    # Calculate the sale price of the intangible asset, knowing that the sale resulted in a loss\n    sale_price = net_book_value - loss_on_sale\n    \n    # return answer\n    return sale_price\n    \n# You can call the function to get the result\nprint(solution())\n```\n\nWhen you call `solution()`, it should return the probable sale price of the asset."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-291",
        "question": "What is the per share value of REIT B using the average P/FFO multiple method of the property subsector?",
        "tables": [
            "|                            |REIT B  |\n|----------------------------|--------|\n|Funds from operations (FFO)|$320,514|\n|Shares outstanding          |76,000  |\n|Property subsector average P/FFO multiple|15.3x|"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ffo = 320514\n    shares_outstanding = 76000\n    p_ffo_multiple = 15.3\n    \n    # Do math calculation to get the answer\n    # Calculate FFO per share\n    ffo_per_share = ffo / shares_outstanding\n    # Calculate per share value using the P/FFO multiple\n    per_share_value = ffo_per_share * p_ffo_multiple\n    \n    # return answer\n    return per_share_value\n    \n# The following line calls the solution function and prints the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-292",
        "question": "Under the present LTIP, the Board awards options on common shares to the management team. These options necessitate a 6-year service period after the date they are granted before they vest. This information about the stock options granted this year under the LTIP is reviewed by Morrison as shown in Exhibit 2. The financial statements of Clarion are prepared in line with International Financial Reporting Standards (IFRS) and their year-end is December 31. All the options in 2014 were granted on July 1, 2014. Given the market price of shares and the fair value of stock options at crucial dates throughout the year as shown in Exhibit 3, what is the chunk of the compensation expense related to the stock option of the LTIP granted in 2014?",
        "tables": [
            "|  | Number of Options | Weighted Average | Exercise Price |\n| --- | --- | --- | --- |\n| Balance, start of year | 3,666,500 | £3.06 | |\n| Granted  during the  year | 872,000 | £3.30 | |\n| Exercised during the year | -278,400 | £2.88 | |\n| Forfeited during the year | -123,700 | £2.96 | |\n| Balance, end of year | 4,136,400 | £3.13 | |\n| Exercisable at end of the year | 827,280 | £2.90 | |",
            "|               | Share Price | Option Fair Value |\n|---------------|-------------|-------------------|\n| January 1,2014  | £2.85       | £0.370            |\n| July 1, 2014    | £3.00       | £0.390            |\n| December 31, 2014 | £3.06     | £0.400            |\n| Average for 2014 | £2.97      | £0.386            |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the compensation expense related to stock options granted in 2014, we will use the fair value of the stock options and the number of options granted, as per the IFRS 2 Share-based Payment. The expense is recognized over the service period, but for this scenario, we'll calculate the expense for the year 2014 only, assuming there is no acceleration in vesting or other factors that might change the straight-line expense recognition method.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Number of options granted during the year\n    options_granted = 872000\n    \n    # Fair value of stock options at grant date (given as option fair value on July 1, 2014)\n    option_fair_value = 0.390\n    \n    # Vesting period in years\n    vesting_period = 6\n    \n    # Calculate the total fair value of options granted\n    total_fair_value = options_granted * option_fair_value\n    \n    # Since we are to calculate the compensation expense for 2014 only\n    # And the options are granted on July 1, we will prorate the expense for the year 2014\n    prorate_for_year = 6/12  # Half year since granted on July 1\n    \n    # Calculate compensation expense for 2014\n    compensation_expense_2014 = (total_fair_value / vesting_period) * prorate_for_year\n    \n    # Return the compensation expense related to stock options for 2014\n    return compensation_expense_2014\n\n# The following line calls the function and prints the result.\nprint(solution())\n```\n\nThe `solution()` function calculates the compensation expense by:\n\n1. Multiplying the number of options granted by the fair value of the options to get the total fair value.\n2. Dividing the total fair value by the vesting period (6 years) to spread the expense over the service period.\n3. Prorating the expense for half the year of 2014 since the options were granted on July 1st. \n\nThis final value is the chunk of compensation expense related to the stock options granted in 2014 that will be recorded for that year."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-293",
        "question": "The yield for a one-year zero-coupon bond is 4.0%. The yields for zero-coupon bonds for the second and third years are 5.0% and 6.0% respectively. The spot rate for a five-year bond is not provided; however, the future price for a two-year zero-coupon bond starting in three years is 0.8479. What is today's price for a five-year zero-coupon bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate today's price for a five-year zero-coupon bond given the provided yields for the first three years and the future price for a two-year bond starting in three years, we can use the following information:\n\n- The yield for the first year (r1) is 4.0%.\n- The yield for the second year (r2) is 5.0%.\n- The yield for the third year (r3) is 6.0%.\n- The zero-coupon bond prices for the first three years can be calculated as Today's price = 1 / (1 + yield)^number of years.\n- The price given for the two-year bond starting in three years is 0.8479.\n\nWe need to calculate today's price for a five-year bond (P). We know the following:\n\n- Today's price for a three-year bond (P3) is the present value of $1 received in three years.\n- The future price for a two-year bond starting in three years (P3,2) is 0.8479, which means its present value today (P5) is the present value of $0.8479 received in three years at today's three-year yield, compounded forward for two more years.\n\nThe formula to calculate today's price for the five-year bond is:\n\\[ P = P_3 \\times (1 + r_5) \\times P_{3,2} \\]\n\nHowever, we don't know the future spot rate for the fifth year (r5), which would typically allow us to calculate P directly. Instead, we will calculate the value of P3 first using available yields and then solve for P5 such that the implied yield of the five-year bond (implied r5) makes the product of P3 and the discounted value of P3,2 equal the price of a five-year bond today (P).\n\nLet's calculate P3 first:\n```python\ndef solution():\n    # Define variables name and value\n    yield_1, yield_2, yield_3 = 0.04, 0.05, 0.06\n    price_3_2 = 0.8479\n    \n    # Calculate today's price for the one-year bond\n    price_1 = 1 / (1 + yield_1)\n    \n    # Calculate today's price for the two-year bond\n    price_2 = 1 / ((1 + yield_1) * (1 + yield_2))\n    \n    # Calculate today's price for the three-year bond\n    price_3 = 1 / ((1 + yield_1) * (1 + yield_2) * (1 + yield_3))\n    \n    # To obtain the yield for the five-year bond, which is not directly provided, we can imply it using the equation\n    # for calculating the price of a zero-coupon bond:\n    # price = 1 / (1 + yield)^(number of years)\n    # Here, we get an equation price_3 * (1 + yield_5) * price_3_2 = 1 / (1 + yield_5)^5\n    # Also given that price_5 = price_3 * price_3_2^(1/(year 3 to year 5))\n    # price_5 = price_3 * price_3_2^(1/2) - because from year 3 to 5, it's a 2-year bond.\n    # However, we don't know the yield for year 5, yield_5.\n    # So we need to find yield_5 such that the price calculated using the above implied relationship equals the actual price_5.\n    \n    # We can iterate over possible yields for the 5th year until we find one that makes the equation hold true.\n    # This is a numerical solution that could alternatively be solved using root-finding algorithms like Newton-Raphson, bisection, etc.\n    # However, for simplicity, we will use a simple iterative process here with discretized possible yields.\n    \n    # Assuming the possible range for yield_5 is between 0% to 20% (0 to 0.2) and a step size of 0.0001 for refinement\n    for implied_yield_5 in (i * 0.0001 for i in range(2001)):\n        price_5 = price_3 * ((1 + implied_yield_5) ** -5)\n        if abs(price_5 - (price_3 * price_3_2 ** (1 / 2))) < 0.0001:  # We check if the difference is small\n            return round(price_5, 4)\n            \n    return None  # In case the loop finishes without a solution within the given range\n\n# Example usage:\nprint(solution())\n```\n\nThe above code contains an iterative process to estimate the yield for the 5th year (yield_5) by trial and error within a reasonable yield range, using a discretized step size to increase accuracy. Once the estimated yield for year 5 that satisfies the given constraints is found, the script calculates and returns today's price for the five-year bond, rounded to four decimal places.\n\nPlease note, this kind of numerical estimation can be computationally intensive and is sensitive to the chosen range and step size. Furthermore, the chosen tolerances (`< 0.0001`) in the above code impacts when the iterative process stops and gives an answer.\n\nFor a more sophisticated and precise calculation, one would normally use numerical methods for non-linear equation solving, such as Brent's method or the Newton-Raphson method, which would require importing additional libraries such as SciPy and much more complex code."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-294",
        "question": "What is the continually compounded return rate if a stock's price increases from $15.00 to $16.20 over the course of a year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! To calculate the continuously compounded return rate, we use the formula:\n\n\\[ r = \\ln\\left(\\frac{P_{\\text{ending}}}{P_{\\text{beginning}}}\\right) \\]\n\nwhere:\n- \\( r \\) is the continuously compounded return rate,\n- \\( \\ln \\) represents the natural logarithm,\n- \\( P_{\\text{ending}} \\) is the final price of the stock, and\n- \\( P_{\\text{beginning}} \\) is the initial price of the stock.\n\nHere's the corresponding Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    P_beginning = 15.00  # initial stock price\n    P_ending = 16.20     # final stock price\n    \n    # Do math calculation to get the answer\n    r = math.log(P_ending / P_beginning)\n    \n    # return answer\n    return r\n\n# Test the function\nprint(solution())  # This line is for testing and can be removed if only the function is needed\n```\n\nThis program, when run, will provide the continuously compounded return rate for the stock price increase given."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-295",
        "question": "A corporation bought a storage facility for €35 million and invested an extra €2.0 million for improvements to the building's roof and windows, €0.5 million to adapt the inner arrangement to their standards (repositioning walls, adding and removing dividers, etc.) and €0.1 million on a training and introduction program to acquaint workers with the premises. What is the cost to be capitalized to the building account (in millions)?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is the Python program that calculates the cost to be capitalized to the building account:\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 35\n    roof_windows_improvements = 2.0\n    inner_arrangement_adaptations = 0.5\n    training_program = 0.1\n    \n    # Do math calculation to get the answer\n    capitalized_cost = purchase_price + roof_windows_improvements + inner_arrangement_adaptations + training_program\n    \n    # return answer\n    return capitalized_cost\n    \n# You can call the function to get the result\nprint(solution())  # Output should be 37.6\n```\n\nWhen the `solution()` function is called, it will return the total capitalized cost (in millions) which includes the purchase price and all the additional investments that are considered capital improvements to the building."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-296",
        "question": "Suppose that JJ Corporation initially reported an operating income of $360,000, which later changed to $420,000. If the financial cost stands at $120,000, how would you calculate JJ Corporation's degree of financial leverage (DFL)?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_operating_income = 360000\n    new_operating_income = 420000\n    financial_cost = 120000\n\n    # Calculating the percentage change in operating income\n    operating_income_change = (new_operating_income - initial_operating_income) / initial_operating_income\n    \n    # Calculating EBIT and the new EBIT (Earnings Before Interest and Taxes)\n    initial_ebit = initial_operating_income + financial_cost\n    new_ebit = new_operating_income + financial_cost\n    \n    # Calculating the percentage change in EBIT\n    ebit_change = (new_ebit - initial_ebit) / initial_ebit\n    \n    # Calculating Degree of Financial Leverage (DFL)\n    dfl = ebit_change / operating_income_change\n    \n    # return answer\n    return dfl\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-297",
        "question": "Based on the results presented for the BETA model (Exhibit 1) along with its relevant documentation, what is the model's precision? The model was confirmed by Thompson to have accurately forecasted a default in 5,290 cases from the model prediction set after the data was fully processed. This is from a sample of loans taken from the BETA model where anticipated and actual defaults were compared for the previous 12 months.",
        "tables": [
            "| Name National Annual ID Salary Number | Loan Amount | | Model Prediction | Actual Result | Prediction Result | Type 1 Error | Type 2 Error |\n|---|---|---|---|---|---|---|---|\n| Garcia XXX 099 $105,000 | $25,000 | | Default | Default | 1 | 0 | 0 |\n| Rodriquez XXX 810 $58,000 | $10,000 | | No Default | No Default | 1 | 0 | 0 |\n| Brown XXX 129 $75,000 | $15,000 | | Default | No Default | 0 | 1 | 0 |\n| Anderson XXX 193 $43,000 | $7,500 | | No Default | No Default | 1 | 0 | 0 |\n| Lewis XXX 122 $64,500 | $42,000 | | No Default | Default | 0 | 0 | 1 |\n| Number and use of client records | | | | | | | |\n| Total # of historical records | | | | 10,014 | | | |\n| Records removed in data cleansing | | | | 2,996 | | | |\n| Records modeled with correct predictions and errors | | | | 7,018 | 5,851 | 273 | 894 |\n\nNote: 1 in Prediction Result column is a correct prediction; 0 is an incorrect prediction."
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the precision of the BETA model, we need to know the number of true positives (defaults correctly predicted as defaults) and the number of false positives (non-defaults incorrectly predicted as defaults). Precision is defined as the number of true positives divided by the total number of predicted positives (both true positives and false positives).\n\nFrom the data provided, we have:\n\n- True positives (TP): The number of defaults correctly predicted as defaults, confirmed to be 5,290 cases.\n- False positives (FP): Type 1 errors represent false positives, which are 273 in this case.\n\nPrecision = TP / (TP + FP)\n\nNow we can write the Python program to calculate the precision:\n\n```python\ndef solution():\n    # Define variables name and value\n    true_positives = 5290\n    false_positives = 273\n    \n    # Precision calculation\n    precision = true_positives / (true_positives + false_positives)\n    \n    # return answer\n    return precision\n\n# Example of calling the function\nprint(solution())\n```\n\nWhen you run this program, it will print the precision of the BETA model based on the provided data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-298",
        "question": "Taking into account the performance of the Russell 1000 from February 1990 to December 2016, with a monthly arithmetic return of 0.878% and a volatility characterized by a 4.199% standard deviation of return, what would be the geometric return?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, to calculate the geometric return given the arithmetic return and the volatility (standard deviation of return), we can use the relationship:\n\ngeometric_return = arithmetic_return - (volatility^2) / 2\n\nNow let's write the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    arithmetic_return = 0.878  # Monthly arithmetic return (in percentages)\n    volatility = 4.199  # Monthly volatility (standard deviation of return, in percentages)\n    \n    # Convert percentages to decimals for calculation\n    arithmetic_return = arithmetic_return / 100\n    volatility = volatility / 100\n    \n    # Do math calculation to get the geometric return\n    geometric_return = arithmetic_return - (volatility**2) / 2\n    \n    # Convert back to percentage\n    geometric_return = geometric_return * 100\n\n    # return answer\n    return geometric_return\n\n# you can use the following code to check the output\n# if __name__ == \"__main__\":\n#     answer = solution()\n#     print(f\"The geometric return is: {answer:.4f}%\")\n```\n\nThe above code will return the value of the geometric return in percentage form."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-299",
        "question": "Display 1. Tri-Factor Model of Term Structure Note: The entries show how the yields would alter for a one standard deviation boost in a factor. How much would you expect the yield on the 20-year bond to change due to an increase in the steepness factor by two standard deviations?",
        "tables": [
            "| Factor    | Time to Maturity (years) - 5 | Time to Maturity (years) - 20 |\n| --------- | ---------------------------- | ----------------------------- |\n| Level     | -0.4352%                     | -0.5128%                      |\n| Steepness | -0.0515%                     | -0.3015%                      |\n| Curvature | 0.3963%                      | 0.5227%                       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables for steepness factor change \n    steepness_change_per_std = -0.3015 # for 20-year maturity\n    \n    # Calculate the change in yield for a two standard deviation increase\n    yield_change_due_to_steepness = 2 * steepness_change_per_std\n    \n    # return answer\n    return yield_change_due_to_steepness\n\n# The yield on the 20-year bond would change by this value in percentage points.\n```\n\nThis program calculates the expected change in yield on a 20-year bond given a two standard deviation increase in the steepness factor. Note that the percent change provided (-0.3015%) is already in percentage points, so the function directly multiplies this factor by 2 to find the answer. The result will be in percentage points."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-300",
        "question": "In a manufacturing firm, the accountant named Samuel discovered that the acquisition cost of a certain equipment was $50,000 and noted a $10,000 loss in the income statement upon the equipment's sale. If the accumulated depreciation amounted to $35,000, what was the selling price of the equipment?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 50000\n    loss_on_sale = 10000\n    accumulated_depreciation = 35000\n    \n    # Calculate the book value of the equipment\n    book_value = acquisition_cost - accumulated_depreciation\n    \n    # Calculate the selling price by subtracting loss from book value\n    selling_price = book_value - loss_on_sale\n    \n    # Return the selling price\n    return selling_price\n\n# Function calling\nprint(solution())  # Output will be the selling price of the equipment\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-301",
        "question": "When the 95% confidence level VaR model of Chase Corporation is being backtested using the data from the last 750 trading days, how many anticipated irregularities would we expect to find?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define the confidence level and trading days\n    confidence_level = 0.95\n    trading_days = 750\n    \n    # Calculate the expected number of irregularities (violations)\n    # Since it's a 95% confidence level, we expect violations 5% of the time\n    expected_violations = (1 - confidence_level) * trading_days\n    \n    # return answer\n    return expected_violations\n\n# You can call the function to see the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-302",
        "question": "If the bid-side quote for the CAD/BRL from a merchant is C$0.5250, what is the profit for Johnson from a US$1,000,000 initial investment in the triangular arbitrage opportunity?",
        "tables": [
            "| Country       | Currency   | Spot Exchange Ratea    | One Year Risk-free Rate | Expected Annual Inflation Rate |\n|:-------------:|:----------:|:----------------------:|:-----------------------:|:----------------------:|\n| United States | US$        | NA                     | 4.80%                   | 2.30%                  |\n| Canada        | C$         | 1.2138-1.2259          | 4.10%                   | 1.90%                  |\n| Brazil        | Real (BRL) | 2.3844-2.4082          | 8.80%                   | 6.30%                  |\n\naNumber of foreign currency units per one U.S. dollar."
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the profit from the triangular arbitrage opportunity, we can follow these steps in the Python program:\n\n1. Convert USD to CAD using the bid-side of the Spot Exchange Rate for Canada (use the higher value of the range for buying CAD with USD).\n2. Convert CAD to BRL using the merchant's bid-side quote for CAD/BRL.\n3. Finally, convert the BRL back to USD using the ask-side of Spot Exchange Rate for Brazil (use the lower value of the range for selling BRL for USD).\n\nWe will look for the profit by subtracting the initial investment in USD from the final amount after the triangular arbitrage.\n\nHere is the Python program that accomplishes this:\n\n```python\ndef solution():\n    # Initial USD investment\n    initial_usd = 1000000\n\n    # Spot exchange rates\n    usd_to_cad_bid = 1.2138  # We use the lower value (bid) to buy CAD with USD\n    brl_to_usd_ask = 2.3844  # We use the lower value (ask) to sell BRL for USD\n\n    # Merchant's bid-side quote for CAD/BRL\n    cad_to_brl_bid = 0.5250\n\n    # Step 1: Convert USD to CAD\n    usd_to_cad = initial_usd * usd_to_cad_bid\n\n    # Step 2: Convert CAD to BRL\n    cad_to_brl = usd_to_cad * cad_to_brl_bid\n\n    # Step 3: Convert BRL back to USD\n    brl_to_usd = cad_to_brl / brl_to_usd_ask\n\n    # Calculate the profit from the arbitrage opportunity\n    profit = brl_to_usd - initial_usd\n\n    return round(profit, 2)  # rounding the profit value to 2 decimal places\n\n# Calling the function and printing the profit\nprint(f\"Profit from the triangular arbitrage opportunity: US${solution()}\")\n```\n\nWhen you run this program, it will calculate the profit from the triangular arbitrage opportunity using the provided exchange rates and the bid-side quote for the CAD/BRL. The `round()` function is used to format the profit to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-303",
        "question": "Based on the study, 65% of all businesses possess a scanner. If we choose 8 businesses, what are the chances that five businesses would own a scanner?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    probability_own_scanner = 0.65\n    number_of_businesses = 8\n    businesses_with_scanner = 5\n    \n    # Calculate the combination for 5 businesses out of 8\n    combinations = comb(number_of_businesses, businesses_with_scanner)\n    \n    # Calculate the probability of exactly 5 businesses owning a scanner\n    # using the binomial probability formula: P(X = k) = C(n, k) * p^k * (1-p)^(n-k)\n    probability_five_have_scanner = (\n        combinations * \n        (probability_own_scanner ** businesses_with_scanner) * \n        ((1 - probability_own_scanner) ** (number_of_businesses - businesses_with_scanner))\n    )\n    \n    # return answer\n    return probability_five_have_scanner\n\n# This will call the function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-304",
        "question": "Assume that the continuously compounded 5-year spot rate is 10% and the 4-year spot rate is 8.8%. Could you determine the 1-year forward rate four years in the future?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is a Python program that calculates the 1-year forward rate four years in the future based on the given spot rates using the formula \\( F(4,5) = S(5)/(1+S(4))^4 - 1 \\), where \\( F(4,5) \\) represents the 1-year forward rate beginning 4 years from now, \\( S(5) \\) is the 5-year spot rate, and \\( S(4) \\) is the 4-year spot rate.\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    spot_rate_5_year = 0.10 # 5-year spot rate\n    spot_rate_4_year = 0.088 # 4-year spot rate\n    \n    # Calculate the future value factor for 5 years at the 5-year spot rate\n    future_value_factor_5_year = math.exp(spot_rate_5_year * 5)\n    \n    # Calculate the present value factor for 4 years at the 4-year spot rate\n    present_value_factor_4_year = math.exp(-spot_rate_4_year * 4)\n    \n    # Calculate the 1-year forward rate four years in the future\n    one_year_forward_rate = (future_value_factor_5_year / present_value_factor_4_year) ** (1/1) - 1\n    \n    # return answer\n    return one_year_forward_rate\n\n# The following line calls the function and prints the answer to the console\nprint(solution()) # This line is for testing and not part of the solution function.\n```\n\nNote that we use the formula for continuously compounded rates, which involves using the exponential function `math.exp()` and its inverse, natural logarithm `math.log()`. The provided function `solution()` returns the calculated forward rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-305",
        "question": "The research team gathered the following data: Can you compute the value added for the portfolio?",
        "tables": [
            "| Asset class     | Portfolio weight (%) | Benchmark weight (%) | Portfolio return (%) | Benchmark return (%) |\n|-----------------|----------------------|----------------------|----------------------|----------------------|\n| Domestic        | 45                   | 50                   | 12                   | 10                   |\n| International equity | 25           | 20                   | 15                   | 12                   |\n| Bonds           | 30                   | 30                   | 7                    | 8                    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weights = [0.45, 0.25, 0.30]\n    benchmark_weights = [0.50, 0.20, 0.30]\n    returns = [0.12, 0.15, 0.07]\n    benchmark_returns = [0.10, 0.12, 0.08]\n    \n    # Do math calculation to get the answer\n    # Calculate the contribution of each asset class to the portfolio and to the benchmark\n    portfolio_contributions = [w * r for w, r in zip(weights, returns)]\n    benchmark_contributions = [w * r for w, r in zip(benchmark_weights, benchmark_returns)]\n    \n    # Calculate the difference in performance between the portfolio and the benchmark for each asset class\n    performance_differences = [pc - bc for pc, bc in zip(portfolio_contributions, benchmark_contributions)]\n    \n    # Sum the differences to get the overall value added for the portfolio\n    value_added = sum(performance_differences)\n    \n    # return answer\n    return value_added\n\n# Call the solution function and print the answer\nprint(solution())\n```\nThis program defines the weights and returns of the portfolio and benchmark, calculates the contributions, and sums the differences to compute the value added for the portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-306",
        "question": "What is the yearly geometric mean return of a mutual fund based on the noted annual returns rates?",
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 22        |\n| 2009 | -25       |\n| 2010 | 11        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's the Python program that calculates the geometric mean return based on the provided annual returns:\n\n```python\nimport math\n\ndef solution():\n    # Define variables with the given returns\n    returns = [22, -25, 11]\n    \n    # Initialize the product of returns\n    product_of_returns = 1\n    \n    # Loop through each return and adjust for the percentage\n    for annual_return in returns:\n        product_of_returns *= (1 + annual_return / 100)\n    \n    # Calculate the geometric mean return\n    n = len(returns)\n    geometric_mean = (product_of_returns ** (1/n)) - 1\n    \n    # Convert it back to percentage\n    geometric_mean *= 100\n    \n    # return answer\n    return geometric_mean\n\n# This line will print the answer to the console\nprint(solution())\n```\n\nWhen you run the program, it will give the geometric mean return of the mutual fund over the three years provided. Note that when calculating geometric mean, the negative return of -25% can be used as is, since the geometric mean can handle negative values as long as the final product is non-negative. If the product of (1 + return/100) for all years were to be negative, we would hit an issue since we can't calculate a real-number root of a negative number. In the given case, the returns do not cause such an issue."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-307",
        "question": "Position 1 (FTSE 100 Futures Contract): Harmony Capital maintains a long position in a FTSE 100 futures contract that is set to mature in three months. The Nikkei 225 Stock Index has a continuously compounded dividend yield of 1.1%, and the current level of the stock index is 16,080. The constantly compounded yearly interest rate is 0.2996%. What is the prevailing no-arbitrage futures price of the FTSE 100 futures contract (Position 1)?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the no-arbitrage futures price of the FTSE 100 futures contract, we will utilize the formula for pricing futures contracts on stock indices. The formula is as follows:\n\nF = S * exp((r - q) * T)\n\nwhere:\nF = futures price\nS = spot price of the underlying index\nr = continuously compounded risk-free interest rate\nq = continuously compounded dividend yield\nT = time to maturity of the contract (in years)\n\nLet's apply this formula in the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and values\n    spot_index = 16080        # Current level of the stock index\n    dividend_yield = 0.011    # Continuously compounded dividend yield\n    interest_rate = 0.002996  # Continuously compounded yearly interest rate\n    time_to_maturity = 3/12   # Time to maturity in years (3 months / 12 months)\n    \n    # Do math calculation to get the no-arbitrage futures price\n    futures_price = spot_index * math.exp((interest_rate - dividend_yield) * time_to_maturity)\n    \n    # return answer\n    return futures_price\n    \n# Since the requirement is to print the answer, we print the returned value from the solution function\nprint(solution())\n```\nRunning this program will give you the prevailing no-arbitrage futures price of the FTSE 100 futures contract for Position 1."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-308",
        "question": "What is the company's total degree of leverage (DTL), based on the information provided for the company?",
        "tables": [
            "| Revenue        | £800,000 |\n| -------------- | -------- |\n| Variable cost  | £400,000 |\n| Fixed cost     | £200,000 |\n| Operating income | £200,000 |\n| Interest       | £60,000  |\n| Net income     | £140,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "The Total Degree of Leverage (DTL) is a financial ratio that measures the sensitivity of a company’s net income to changes in its sales. It combines the effects of both operating leverage (DOL) and financial leverage (DFL).\n\nThe formula of DTL is:\nDTL = DOL * DFL\n\nWhere DOL (Degree of Operating Leverage) = Percentage Change in EBIT (Earnings Before Interest and Taxes) / Percentage Change in Sales\n\nAnd DFL (Degree of Financial Leverage) = Percentage Change in EPS (Earnings Per Share) / Percentage Change in EBIT\n\nOperating Income (or EBIT) is given as £200,000, and the Net Income is given as £140,000.\n\nSince we don't have the percentage change in Sales or EBIT, we can calculate DOL using the formula:\nDOL = [Q(P-V)] / [Q(P-V) - F]\nWhere Q = Quantity Sold, P = Price per unit, V = Variable Cost per unit, and F = Fixed Cost.\n\nFrom the data provided, we calculate DOL using total figures instead of per unit figures (since they are not provided):\nDOL = EBIT / (EBIT - Fixed Cost)\n\nSimilarly, since we are not provided the data about the number of shares and their changes, we have to calculate DFL with the total figures that are available:\nDFL = EBIT / (EBIT - Interest)\n\nFinally, the DTL can be calculated using:\nDTL = DOL * DFL\n\nHere is a program that calculates the Total Degree of Leverage as per the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_income = 200000 # EBIT\n    fixed_cost = 200000\n    interest = 60000\n    net_income = 140000 # Net after interest\n    \n    # Calculate Degree of Operating Leverage (DOL)\n    dol = operating_income / (operating_income - fixed_cost)\n    \n    # Calculate Degree of Financial Leverage (DFL)\n    dfl = operating_income / (operating_income - interest)\n    \n    # Calculate Total Degree of Leverage (DTL)\n    dtl = dol * dfl\n    \n    # return answer\n    return dtl\n\n# Call the function and print the result\nprint(solution())\n```\n\nNote that the provided data may not represent actual quantities and prices; the calculations assume that the total figures provided replace the per unit basis figures typically used in the calculation of the leverages."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-309",
        "question": "Carlos Perez from the Uruguayan company LUIGI Ltd., is calculating the depreciation expense of manufacturing machinery for the financial year closing on 31 December 2009. The machinery was purchased on 1 January 2009. Given the information gathered by Perez, what would be the amount of depreciation expense (in UYP) on LUIGI's profit and loss statement related to the manufacturing machinery, if LUIGI uses the units-of-production method? (Currency in Uruguayan pesos, UYP).",
        "tables": [
            "\n|                                             |                               |\n|---------------------------------------------|-------------------------------|\n| Cost of the equipment                       | UYP 1,200,000                 |\n| Estimated residual value                    | UYP 200,000                   |\n| Expected useful life                        | 8 years                       |\n| Total productive capacity                   | 800,000 units                 |\n| Production in FY 2009                       | 135,000 units                 |\n| Expected production for the next 7 years    | 95,000 units each year        |\n"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 1200000\n    estimated_residual_value = 200000\n    total_productive_capacity = 800000\n    production_FY_2009 = 135000\n    \n    # Calculating depreciation expense using units-of-production method\n    # Depreciation per unit = (Cost of equipment - Estimated residual value) / Total productive capacity\n    depreciation_per_unit = (cost_of_equipment - estimated_residual_value) / total_productive_capacity\n    \n    # Depreciation expense for FY 2009 = Depreciation per unit * Production in FY 2009\n    depreciation_expense = depreciation_per_unit * production_FY_2009\n    \n    # return answer\n    return depreciation_expense\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-310",
        "question": "A risk assessor is computing the VaR for a portfolio using a data set of 50 weekly returns. The average weekly return calculated from the sample is 8% with a standard deviation of 17%. Given that weekly returns are assumed to be independent and identically distributed, what is the standard deviation of the average weekly return?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    num_weekly_returns = 50\n    standard_deviation = 0.17  # 17% as a decimal\n    \n    # Do math calculation to get the answer\n    # Standard deviation of the average weekly return is calculated by \n    # dividing the standard deviation of individual weeks by the square root of number of weeks\n    standard_deviation_of_average = standard_deviation / math.sqrt(num_weekly_returns)\n    \n    # return answer\n    return standard_deviation_of_average\n    \n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-311",
        "question": "The preferred stock of Company N has a par value of $50 per share and it provides an annual dividend of 3.8%. If Nick thinks that it's reasonably priced at the market cost of $30, what is the capitalization rate of the preferred stock?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 50\n    dividend_percentage = 3.8\n    market_price = 30\n    \n    # Calculate the annual dividend amount\n    annual_dividend = par_value * (dividend_percentage / 100)\n    \n    # Calculate the capitalization rate\n    capitalization_rate = annual_dividend / market_price\n    \n    # Convert capitalization rate to percentage\n    capitalization_rate_percentage = capitalization_rate * 100\n    \n    # return answer\n    return capitalization_rate_percentage\n\n# You can uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-312",
        "question": "Sephora is a US-operated company that specializes in the sale of beauty products. It has a Canadian branch, Glossy Inc, that only carries out operations in Canada. It was established on 31 December 2015, and Glossy Inc uses the US dollar as its main currency. Let's consider that fixed assets were purchased at the company's conceptual stage. The financial statement details for the years ending 2015 and 2016 are provided in the adjacent table: Can you compute the converted value of Glossy Inc's retained earnings as of 31 December 2016?",
        "tables": [
            "markdown\n|                                      | 2015 | 2016 |\n|--------------------------------------|------|------|\n| **Cosmetic firm B.S for the ending 31 December** |      |      |\n| Cash                                 | 210  | 310  |\n| Accounts receivable                  |      | 31   |\n| Inventory                            | 60   | 80   |\n| Fixed assets                         | 200  | 200  |\n| Accumulated depreciation             |      | (35) |\n| Total assets                         | 470  | 586  |\n| Accounts payable                     | 105  | 162  |\n| Long-term debt                       | 235  | 273  |\n| Common stock                         | 130  | 130  |\n| Retained earnings                    |      | 21   |\n| Total liabilities and shareholders' equity | 470  | 586  |\n",
            "|                                  | US $/C$ |\n|----------------------------------|---------|\n| Rate on 31 December 2015         | 0.89    |\n|                                  |         |\n| Average rate in 2016             | 0.96    |\n| Weighted-average rate for inventory purchases | 0.94    |\n| Rate on 31 December 2016         | 0.94    |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define initial exchange rates and retained earnings in Canadian dollars\n    exchange_rate_end_of_2016 = 0.94\n    retained_earnings_cad = 21\n    \n    # Convert retained earnings from Canadian dollars to US dollars\n    retained_earnings_usd = retained_earnings_cad * exchange_rate_end_of_2016\n    \n    # Return the converted value\n    return retained_earnings_usd\n\n# Call the function to get the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-313",
        "question": "A data set with 25 entries has an average of 8 and a standard deviation of 15. What is the standard error of this data set's mean?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    n = 25\n    std_deviation = 15\n    \n    # Standard error calculation\n    standard_error = std_deviation / math.sqrt(n)\n    \n    # return answer\n    return standard_error\n\n# To get the result of the program, you can call the function.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-314",
        "question": "At the start of 2013, corporation X released 5-year bonds with a face value of $2,000,000. The market interest rate stands at 6%, and on each 31 December, a 5% coupon is paid on the bonds. What could be the calculated bonds payable at the time they were issued?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "To calculate the bonds payable at the time they were issued, we need to find the present value of the cash flows associated with the bond. The cash flows consist of the annual coupon payments and the repayment of the face value at the end of the bond term. The present value of these cash flows is the price buyers are willing to pay for the bonds, which is what the bonds payable would be at issuance.\n\nThe present value (PV) of a set of cash flows (C) at a given interest rate (i) over t periods can be calculated with the formula:\n\nPV = C / (1 + i)^1 + C / (1 + i)^2 + ... + C / (1 + i)^t\n\nIn this case, the cash flows would be the annual coupon payments plus the face value returned at the end. This can be calculated using the formula for the present value of an annuity (for the coupon payments) combined with the present value of a lump sum (for the face value):\n\nHere the annual coupon payment is 5% of $2,000,000, which is $100,000. The market interest rate is 6%.\n\nLet's calculate it with a Python program:\n\n```python\ndef solution():\n    # Given values\n    face_value = 2000000  # Face value of bonds\n    coupon_rate = 0.05    # Coupon rate\n    market_rate = 0.06    # Market interest rate\n    years = 5             # Lifetime of the bond in years\n    \n    # Calculate annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n    \n    # Calculate present value of the annuity (coupon payments)\n    present_value_annuity = annual_coupon_payment * ((1 - (1 + market_rate)**-years) / market_rate)\n    \n    # Calculate present value of the lump sum (face value of the bond at the end)\n    present_value_lump_sum = face_value / ((1 + market_rate)**years)\n    \n    # The price of the bond or bonds payable at issue is the sum of present value of the annuity and the lump sum\n    price_of_bond = present_value_annuity + present_value_lump_sum\n    \n    # Return the calculated bonds payable\n    return round(price_of_bond, 2)\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the present value of the annuity (representing the coupon payments) and the present value of the lump sum (representing the face value payment at maturity), adds them together to get the price of the bond at issuance, and then returns this value rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-315",
        "question": "Based on the given financial reports for Company B, what is the value of the operating cash flow?",
        "tables": [
            "| Net income | | $55 million |\n|---|---|---|\n| Depreciation | | $3 million |\n| Balance Sheet Item | 12/31/2016 | 12/31/2017 |\n| Accounts receivable | $18 million | $20 million |\n| Inventory | $22 million | $17 million |\n| Accounts payable | $6 million | $3 million |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the operating cash flow (OCF), we will use the formula:\n\nOperating Cash Flow (OCF) = Net Income + Non-Cash Expenses + Changes in Working Capital\n\nNon-Cash Expenses here is represented by Depreciation. Changes in working capital are given by the change in current assets (accounts receivable and inventory) and the change in current liabilities (accounts payable).\n\nLet's write the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 55  # in million dollars\n    depreciation = 3  # in million dollars\n    \n    # Opening and Closing Balances for Accounts Receivable\n    accounts_receivable_start = 18  # in million dollars\n    accounts_receivable_end = 20  # in million dollars\n    \n    # Opening and Closing Balances for Inventory\n    inventory_start = 22  # in million dollars\n    inventory_end = 17  # in million dollars\n    \n    # Opening and Closing Balances for Accounts Payable\n    accounts_payable_start = 6  # in million dollars\n    accounts_payable_end = 3  # in million dollars\n    \n    # Calculate changes in working capital\n    change_in_receivables = accounts_receivable_end - accounts_receivable_start\n    change_in_inventory = inventory_end - inventory_start\n    change_in_payables = accounts_payable_end - accounts_payable_start\n    \n    # Changes in working capital\n    changes_in_working_capital = change_in_receivables + change_in_inventory + change_in_payables\n    \n    # Calculate Operating Cash Flow\n    operating_cash_flow = net_income + depreciation + changes_in_working_capital\n    \n    # return answer\n    return operating_cash_flow\n```\n\nWhen you run `solution()`, it will calculate the operating cash flow based on the given information."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-316",
        "question": "A trader takes a short stance on a gold futures contract at a price of USD 294.20. Each contract oversees 100 troy ounces. The starting margin stands at USD 3,200, while the sustaining margin is set at USD 2,900. After the initial day, the futures price decreases to USD 286.6. What is the sum of the variation margin at the closure of the first day?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Given variables, including the initial and final gold futures price, contract size, and the starting margin.\n    initial_price = 294.2\n    final_price = 286.6\n    contract_size = 100\n    starting_margin = 3200\n    \n    # The change in price multiplied by the contract size equals the gain since it's a short position\n    price_change = initial_price - final_price\n    gain = price_change * contract_size\n    \n    # Variation margin is the gain added to the starting margin\n    variation_margin = starting_margin + gain\n    \n    return variation_margin\n\n# Example call to the function\nprint(solution())\n```\n\nThis program calculates the variation margin for a trader who has taken a short position on a gold futures contract and the price of the future has decreased after the initial day. It does so by determining the per-ounce price change, multiplying by the contract size to find the gain, and then adding the gain to the starting margin. The result is the variation margin at the end of the first day."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-317",
        "question": "For a price-weighted index made up of securities XYZ, MNOP, and QRST, an analyst has collected the following data: The starting and ending prices (in €) and total dividends (in €) are as follows: XYZ with 25.00 to 27.00 along with 1.00 in dividends, MNOP with 35.00 to 25.00 and 1.50 in dividends, and QRST from 15.00 to 16.00 with 1.00 in dividends. What is the price return of the index?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    start_prices = [25.00, 35.00, 15.00]\n    end_prices = [27.00, 25.00, 16.00]\n    \n    # Calculate the starting and ending index value (sum of stock prices)\n    starting_index_value = sum(start_prices)\n    ending_index_value = sum(end_prices)\n    \n    # Calculate the price return without considering dividends\n    price_return = (ending_index_value - starting_index_value) / starting_index_value\n    \n    # Return the price return as a percentage\n    return price_return * 100\n\n# Call solution function and print the result for testing\nprint(f\"The price return of the index is: {solution():.2f}%\")\n```\n\nThis program calculates the price return of a price-weighted index, which is the percentage change in the sum of the prices of the index constituents from the starting values to the ending values. It does not take dividends into account as they don't affect the price return itself. The return statement at the end provides the answer in the form of a percent."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-318",
        "question": "What is the return on equity (ROE) of the business that a financial examiner has determined?",
        "tables": [
            "| Operating profit margin | 17.5% |\n|-------------------------|-------|\n| Net profit margin       | 11.7% |\n| Total asset turnover    | 0.89 times |\n| Return on assets (ROA)  | 10.4% |\n| Financial leverage      | 1.46  |\n| Debt to equity          | 0.46  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    roa = 10.4 / 100  # Return on assets (ROA)\n    financial_leverage = 1.46  # Financial leverage\n\n    # ROE is calculated by multiplying the ROA by the financial leverage\n    roe = roa * financial_leverage\n    \n    # Convert to percentage\n    roe_percentage = roe * 100\n    \n    # return answer\n    return roe_percentage\n\n# Uncomment the line below to test the function\n# print(solution()) \n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-319",
        "question": "John is a manager of a retirement fund who is interested in assessing the responsiveness of his retirement obligations to fluctuations in market interest rates. Supposing the base rate is 9%, with a 100 basis point rise in rates up to 10%, and a 100 basis point decrease in rates down to 8%. The associated data is given as follows: The effective duration of the retirement fund's obligations is:",
        "tables": [
            "| Interest Rate Assumption | Present Value of Liabilities |\n|-------------------------|-----------------------------|\n| 8%                      | $ 436.2 million             |\n| 9%                      | $ 357.5 million             |\n| 10%                     | $ 298.1 million             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program that calculates the effective duration of the retirement fund's obligations based on the given data.\n\n```python\ndef solution():\n    # Values provided in the problem statement\n    present_value_8_percent = 436.2\n    present_value_9_percent = 357.5\n    present_value_10_percent = 298.1\n    change_in_yield = 1  # 100 basis points = 1%\n\n    # The formula for effective duration is:\n    # (V- - V+) / (2 * V0 * ΔY)\n    # where V- is the value if interest rates decrease,\n    # V+ is the value if interest rates increase,\n    # V0 is the base value, and\n    # ΔY is the change in yield in decimal.\n\n    effective_duration = (present_value_8_percent - present_value_10_percent) / (2 * present_value_9_percent * change_in_yield)\n    \n    # return answer\n    return effective_duration\n\n# The call to solution function can be made as follows:\n# print(solution())\n```\n\nThis program defines the variables for the present values of liabilities at the different interest rates (8%, 9%, and 10%) and calculates the effective duration using the formula provided. The change in yield (ΔY) is considered as 1% (100 basis points). The calculated duration is then returned as the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-320",
        "question": "The details for a particular business are given. What is the cash conversion cycle (in days) of this business?",
        "tables": [
            "|                     | $ millions |\n|---------------------|------------|\n| Sales               | 4,800      |\n| Cost of goods sold  | 2,880      |\n| Purchases           | 2,940      |\n| Average receivables | 625        |\n| Average inventory   | 710        |\n| Average payables    | 145        |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 4800 * 10**6  # Convert to dollars\n    cost_of_goods_sold = 2880 * 10**6  # Convert to dollars\n    purchases = 2940 * 10**6  # Convert to dollars\n    avg_receivables = 625 * 10**6  # Convert to dollars\n    avg_inventory = 710 * 10**6  # Convert to dollars\n    avg_payables = 145 * 10**6  # Convert to dollars\n    \n    # Calculations\n    # Days Sales Outstanding (DSO)\n    receivables_turnover = sales / avg_receivables\n    days_sales_outstanding = 365 / receivables_turnover\n    \n    # Days Inventory Outstanding (DIO)\n    inventory_turnover = cost_of_goods_sold / avg_inventory\n    days_inventory_outstanding = 365 / inventory_turnover\n    \n    # Days Payable Outstanding (DPO)\n    payables_turnover = purchases / avg_payables\n    days_payable_outstanding = 365 / payables_turnover\n    \n    # Cash Conversion Cycle (CCC)\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payable_outstanding\n    \n    # return answer\n    return cash_conversion_cycle\n    \n# Call the function and print the result\nprint(f\"The cash conversion cycle is: {solution()} days\")\n```\n\nThis program calculates the Cash Conversion Cycle (CCC) using the given table with variables in millions of dollars. It first computes the Days Sales Outstanding (DSO), Days Inventory Outstanding (DIO), and Days Payable Outstanding (DPO). Then, it calculates the CCC by adding DSO and DIO and subtracting DPO."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-321",
        "question": "According to the data collected by the researcher, using the capital asset pricing model, what is the predicted return for Investment A if the anticipated market risk premium is 6% and the risk-free rate is 3%?",
        "tables": [
            "| Expected Security Standard Deviation (%) | Beta |\n| --- | --- |\n| Security 1 25 | 1.50 |\n| Security 2 15 | 1.40 |\n| Security 3 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To answer the given question using the Capital Asset Pricing Model (CAPM), we need the beta value of Investment A. However, this information is not provided in the question. The CAPM formula is:\n\nExpected Return (ERi) = Risk-Free Rate (Rf) + Beta (βi) * Market Risk Premium (Rm - Rf)\n\nWhere:\n- ERi is the expected return for investment I\n- Rf is the risk-free rate\n- βi is the beta of investment I\n- Rm is the expected market return\n- Rm - Rf is the market risk premium\n\nSince we cannot proceed with the calculation without the beta of Investment A, I will write a generic Python function which could be used if the beta of Investment A is known. You can insert the beta value into this function to get the predicted return.\n\n```python\ndef solution(beta, risk_free_rate, market_risk_premium):\n    # Define variables name and value\n    # Beta value for Investment A needs to be given\n    beta_of_investment_A = beta\n    \n    # Risk-free rate\n    risk_free_rate = risk_free_rate  # 3% in decimal form\n    \n    # Market risk premium\n    market_risk_premium = market_risk_premium  # (Expected Market Return - Risk-Free Rate)\n    \n    # Do math calculation to get the answer\n    predicted_return = risk_free_rate + (beta_of_investment_A * market_risk_premium)\n    \n    # return answer\n    return predicted_return\n\n# Example usage:\n# print(solution(1.5, 0.03, 0.06))\n```\n\nPlease note that you need to provide the correct beta value for Investment A to get the actual predicted return by replacing `beta_of_investment_A` with the real beta value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-322",
        "question": "When a business releases face value bonds worth €10,000,000 with a 10-year term dated 1 January 2015, the market interest rate of bonds with similar level of risk and terms stands at 6%. These bonds provide a yearly interest rate of 7%, paid out on December 31. Utilizing the effective interest rate method, what would be the interest cost on 31 December 2015?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    market_rate = 0.06\n    stated_rate = 0.07\n    \n    # Calculate the bond's carrying value at the beginning, which is its present value\n    # at the market interest rate because the bond was issued at this rate\n    # Since the bond pays yearly interest, we will not need to adjust the market rate and time period\n    carrying_value_beg = face_value  # For the first period, carrying value is equal to face value\n    \n    # Calculate interest expense using market rate (effective interest rate method)\n    interest_expense = carrying_value_beg * market_rate\n    \n    # return answer\n    return interest_expense\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this script, the function `solution` will return the interest expense for the year ended 31 December 2015 using the effective interest rate method."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-323",
        "question": "Smith investigates a technique driven by an event, precisely a potential fusion of B Corporation and U, Inc. B has proposed to acquire Unicorn through a stock-for-stock agreement: the offer ratio is 2 shares of B for every 3 Unicorn shares. B's trading price was €50 per share before the announcement of fusion, but it decreased to 45 euros per share after the declaration. Before the announcement, U's transaction price per share was 15 euros, and it appreciated to €20 per share with the expectation of the fusion deal getting necessary permissions and successfully concluding. If we assume the fusion between B and U comes to a successful close, what will be the result of Smith’s merger arbitrage trade if he purchases 24,000 U shares at a rate of 20 euros per share, and goes short on 16,000 B shares at a rate of 45 euros per share?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the result of Smith's merger arbitrage trade:\n\n```python\ndef solution():\n    # Define variables name and value\n    b_shares_offer_ratio = 2\n    u_shares_offer_ratio = 3\n    b_share_price_pre_announcement = 50 # euros\n    b_share_price_post_announcement = 45 # euros\n    u_share_price_pre_announcement = 15 # euros\n    u_share_price_post_announcement = 20 # euros\n    \n    u_shares_purchased = 24000\n    b_shares_shorted = 16000\n    u_shares_purchased_cost = u_shares_purchased * u_share_price_post_announcement\n    b_shares_shorted_value = b_shares_shorted * b_share_price_post_announcement\n    \n    # Number of B shares Smith will own after the close of the merger\n    # because of the conversion ratio of 2 B shares for every 3 U shares\n    b_shares_received = (u_shares_purchased / u_shares_offer_ratio) * b_shares_offer_ratio\n    \n    # Smith bought U at a price of 20€ and will convert them to B shares\n    # each U share will be converted to 2/3 of a B share\n    # Then these B shares achieved from U shares will be sold at the rate of 45€\n    b_shares_equivalent_value = b_shares_received * b_share_price_pre_announcement\n    \n    # Calculate profit or loss on the U shares\n    u_share_profit_loss = b_shares_equivalent_value - u_shares_purchased_cost\n    \n    # Calculate profit from short selling B shares\n    b_share_profit = b_shares_shorted_value - (b_shares_shorted * b_share_price_pre_announcement)\n    \n    # Net profit (or loss) from arbitrage trade\n    arbitrage_profit = u_share_profit_loss + b_share_profit\n    \n    # return the net profit (or loss)\n    return arbitrage_profit\n\n# Call the function and print the returned result\nprint(solution())\n```\n\nThis program calculates the outcome for both the purchase of U shares and the short sale of B shares considering the ratios defined for the merger. Then, it sums up the profits or losses from both actions to provide the net result of the trade."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-324",
        "question": "Let's assume that X and Y are random variables, each adheres to a standard normal distribution, and the covariance between X and Y is 0.35. What is the variance of (3X+2Y)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Variance of X and Y, since both have standard normal distributions\n    var_x = 1\n    var_y = 1\n    \n    # Given covariance between X and Y\n    covariance_xy = 0.35\n    \n    # Using the formula for the variance of a linear combination of random variables:\n    # Var(aX + bY) = a^2 * Var(X) + b^2 * Var(Y) + 2 * a * b * Cov(X, Y)\n    a = 3\n    b = 2\n    variance_aXbY = (a**2) * var_x + (b**2) * var_y + 2 * a * b * covariance_xy\n    \n    # return answer\n    return variance_aXbY\n\n# Note: The program does not need imports to execute this calculation since it involves basic arithmetic operations.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-325",
        "question": "On September 7, 2016, Bank XYZ initiated a 2-year interest rate swap contract. Per the terms of the swap, Bank XYZ was slated to receive a fixed 4.10% rate while paying a rate equivalent to LIBOR plus 1.30% on a principal amount of USD 7.5 million. Payments were scheduled biannually. The table below presents the actual annual 6-month LIBOR rates measured over the contract's 2-year lifespan: Assuming there was no default, what amount did Bank XYZ receive on September 7, 2018?",
        "tables": [
            "| Date        | 6-month LIBOR |\n|-------------|---------------|\n| Sep 7, 2016 | 2.46%         |\n| Mar 7, 2017 | 1.13%         |\n| Sept 7, 2017| 0.79%         |\n| Mar 7, 2018 | 0.42%         |\n| Sep 7, 2018 | 0.56%         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program that calculates the amount Bank XYZ received on September 7, 2018:\n\n```python\ndef solution():\n    # Principal amount\n    principal = 7500000\n    \n    # Fixed rate received by Bank XYZ\n    fixed_rate = 0.041  # 4.10%\n    \n    # LIBOR rates over the 2-year period\n    LIBOR_rates = [0.0246, 0.0113, 0.0079, 0.0042, 0.0056]\n    \n    # Bank XYZ pays LIBOR + 1.30%\n    spread = 0.013  # 1.30%\n    \n    # Calculate the net amount received by Bank XYZ for each period\n    # and sum them to find the total amount received.\n    total_received = 0\n    for rate in LIBOR_rates:\n        # Calculate the amount received (fixed rate) and amount paid (variable rate)\n        amount_received = (principal * fixed_rate) / 2  # Fixed amount (payments are biannual)\n        amount_paid = (principal * (rate + spread)) / 2  # Variable amount (payments are biannual)\n        \n        # Net amount for the period\n        net_received = amount_received - amount_paid\n        \n        # Add to total amount received\n        total_received += net_received\n    \n    # return the total amount received\n    return total_received\n\n# Call to the solution function and print the result\nprint(f\"The amount received on September 7, 2018: USD {solution():,.2f}\")\n```\n\nThis program defines the variables according to the swap's conditions and iterates through the LIBOR rates to calculate the total amount received by Bank XYZ. Biannual payments are accounted for by dividing the annual rates and payments by 2. The solution function returns the total amount received by Bank XYZ on September 7, 2018."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-326",
        "question": "Smith is a tax consultant who gives tax planning guidance to individual clients. A client of Smith's is Rose who presently has $10 million invested in a tax-deferred account that generates 8% every year. Rose will offload the investment after five years, collect the sales revenue all at once (withdrawals are taxed at 20%), and use the funds to buy a mansion. Rose requested Smith to estimate the after-tax wealth available after five years. What will be the after-tax wealth in Rose's tax-deferred account at the end of the five years?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000\n    annual_growth_rate = 0.08\n    investment_duration = 5\n    tax_rate = 0.20\n    \n    # Calculate the future value of the investment before tax\n    future_value_before_tax = initial_investment * ((1 + annual_growth_rate) ** investment_duration)\n    \n    # Calculate the tax on the withdrawal\n    tax_on_withdrawal = (future_value_before_tax - initial_investment) * tax_rate\n    \n    # Calculate the after-tax wealth\n    after_tax_wealth = future_value_before_tax - tax_on_withdrawal\n    \n    # Return answer\n    return after_tax_wealth\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program calculates the future value of an initial investment in a tax-deferred account, computes the tax on the earnings when the investment is withdrawn, and determines the after-tax wealth Rose will have available to purchase a mansion."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-327",
        "question": "What is the beta of security x, βx, considering the following information about a stock market index y and security x?",
        "tables": [
            "| Statistic | Value |\n| --- | --- |\n| Covariance between market return and security return [Cov(Rj,Rm)] | 0.01104 |\n| Correlation coefficient between market return and security return (pi,m) | 0.3 |\n| Standard deviation of market return (σm) | 0.16 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the beta (β) of security x, we can use the formula:\n\nβx = Cov(Rj, Rm) / Var(Rm)\n\nHowever, we are given the covariance, correlation coefficient, and the standard deviation of market return, not the variance. To find the variance of the market return, we can use the relationship between the standard deviation, variance, and correlation:\n\nσm² = Var(Rm)\n\nand\n\nCov(Rj, Rm) = pi,m * σj * σm\n\nWe can rearrange the formula to solve for σj (the standard deviation of the security return) as follows:\n\nσj = Cov(Rj, Rm) / (pi,m * σm)\n\nOnce we have the σj, we can calculate βx using the covariance and the variance (sigma squared) we found for the market return. Here's the Python program to calculate βx:\n\n```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.01104\n    correlation_coefficient = 0.3\n    standard_deviation_market = 0.16\n    \n    # Calculate the variance of the market return\n    variance_market = standard_deviation_market ** 2\n    \n    # Calculate the standard deviation of the security return using the correlation coefficient\n    # Given that Cov(Rj, Rm) = pi,m * σj * σm, we rearrange to solve for σj\n    # Earned sigma_j is not used in further calculation for beta in this context, thus we can omit this step:\n    # standard_deviation_security = covariance / (correlation_coefficient * standard_deviation_market)\n    \n    # Calculate beta of the security\n    beta_security = covariance / variance_market\n    \n    # return answer\n    return beta_security\n\n# To use the function, you simply call it:\nprint(solution())\n```\n\nThis program will calculate and return the beta of security x based on the information provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-328",
        "question": "The overall investment goal of XY endowment is to sustain the real buying power of its portfolio after disbursements. The risk-free rate stands at 2%. An anticipated inflation rate is 1.5%. The cost of returns on earnings investment is 50 bp. XY aims at a 3% annual distribution of assets. Exhibit 1 presents key findings from a mean-variance optimization where the weights of the asset class are bound to be non-negative. To reach XY’s expected return, what is the most suitable percentage for XY’s investment in the corner portfolio?",
        "tables": [
            "| Portfolio Number | Expected Nominal Returns | Standard Deviation | Sharpe Ratio |\n|------------------|--------------------------|--------------------|--------------|\n| 1                | 3%                       | 2.50%              | 0.4          |\n| 2                | 4%                       | 4.44%              | 0.45         |\n| 3                | 5%                       | 6%                 | 0.5          |\n| 4                | 6%                       | 6.15%              | 0.65         |\n| 5                | 7%                       | 8.33%              | 0.6          |\n| 6                | 8%                       | 10.90%             | 0.55         |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To determine the most suitable percentage for XY's investment in the corner portfolio to reach the expected return, we need to calculate the expected return considering the inflation rate, risk-free rate, and costs of investment, then select the portfolio with the expected nominal returns that match or exceed this required return.\n\nThe required return should factor in the inflation rate, the cost of the investment, and the targeted real distribution rate. The formula for calculating the required return (RR) is:\n\nRR = Risk-free rate + Inflation rate + Distribution rate + Cost of investment\n\nOnce we have determined the RR, we can compare it against the expected nominal returns of the portfolio to find the minimum expected return that meets or exceeds this requirement. Then, we can identify the most suitable portfolio.\n\nHere's the Python program to solve for the optimal investment percentage:\n\n```python\ndef solution():\n    # Define variables\n    risk_free_rate = 0.02  # Risk-free rate (2%)\n    inflation_rate = 0.015  # Inflation rate (1.5%)\n    distribution_rate = 0.03  # Distribution rate (3%)\n    cost_of_investment = 0.005  # Cost of returns on earnings investment (50 bp)\n    \n    # Calculate the required return\n    required_return = risk_free_rate + inflation_rate + distribution_rate + cost_of_investment\n    \n    # Portfolio information (Portfolio Number -> [Expected Nominal Returns, Standard Deviation, Sharpe Ratio])\n    portfolios = {\n        1: [0.03, 0.025, 0.4],\n        2: [0.04, 0.0444, 0.45],\n        3: [0.05, 0.06, 0.5],\n        4: [0.06, 0.0615, 0.65],\n        5: [0.07, 0.0833, 0.6],\n        6: [0.08, 0.109, 0.55]\n    }\n    \n    # Find the most suitable portfolio\n    suitable_portfolio_number = None\n    for number, (returns, stddev, sharpe) in portfolios.items():\n        if returns >= required_return:\n            suitable_portfolio_number = number\n            break\n    \n    # If no portfolio meets the required return, return a message\n    if suitable_portfolio_number is None:\n        return \"No portfolio meets the required return.\"\n    \n    # return the most suitable portfolio number\n    return suitable_portfolio_number\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program defines the required variables, calculates the required return, and iterates through the given portfolios to find the most suitable one based on the expected nominal returns being greater than or equal to the calculated required return. If no portfolio meets the required return, it will return a message indicating this. Otherwise, it will return the number of the suitable portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-329",
        "question": "Assuming that 'Z' is a discrete random variable, and the set of potential Z values constitutes Z= {20,21,22,23,24,25}. With the cumulative distribution function's probable value denoted in the chart, can you tell the likelihood that Z equals either 23 or 25?",
        "tables": [
            "|   | Cumulative Distribution Function |\n|---|---|\n| Y=y  | F(y)=P(Y≤y) |\n| 20 | 0.08 |\n| 21 | 0.20 |\n| 22 | 0.30 |\n| 23 | 0.55 |\n| 24 | 0.75 |\n| 25 | 1.00 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the cumulative distribution function values for the relevant Z values\n    F_22 = 0.30\n    F_23 = 0.55\n    F_24 = 0.75\n    F_25 = 1.00\n    \n    # Probability that Z equals 23 is F(23) - F(22)\n    P_Z_23 = F_23 - F_22\n    \n    # Probability that Z equals 25 is F(25) - F(24)\n    P_Z_25 = F_25 - F_24\n    \n    # The probability that Z equals either 23 or 25 is the sum of the individual probabilities\n    probability_Z_23_or_25 = P_Z_23 + P_Z_25\n    \n    # return the answer\n    return probability_Z_23_or_25\n    \n# Call the solution function and print the result\nprint(solution())\n```\nThis program defines the cumulative distribution values for the necessary Z values, calculates the probability that Z is 23 or 25, and then returns this probability."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-330",
        "question": "The corporation engages in a 2 × 5 receive-fixed FRA that has an advanced set, advanced settled with a notional amount of $100,000,000. The correct discount rate for the FRA settlement cash flows stands at 1.5%. Following 60 days, the 90-day Libor is 0.80%, and the 60-day Libor is 0.7%. If the original price of the FRA was pegged at 1.20%, what will be the settlement payment received for the 2 × 5 FRA?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program that calculates the settlement payment for the given 2 × 5 Forward Rate Agreement (FRA) scenario:\n\n```python\ndef solution():\n    # Define variables\n    notional_amount = 100000000\n    fra_rate = 0.0120  # original FRA rate\n    libor_90_day = 0.0080  # 90-day Libor rate after 60 days\n    libor_60_day = 0.0070  # 60-day Libor rate after 60 days\n    discount_rate = 0.015  # discount rate\n    days_in_year = 360  # typical for money market\n    \n    # Calculate the settlement payment\n    # Calculate the difference between the FRA rate and the actual LIBOR rate\n    interest_diff = (fra_rate - libor_90_day)\n    \n    # Calculate the present value of the interest difference\n    # The period for which the interest difference is settled is 30 days (90 - 60)\n    settlement_payment = interest_diff * notional_amount * (30 / days_in_year)\n    \n    # The cash flow received in the future should be discounted to present value\n    present_value_factor = (1 + (libor_60_day * (30 / days_in_year)))\n    settlement_payment /= present_value_factor\n    \n    # return the settlement payment, rounded to the nearest cent\n    return round(settlement_payment, 2)\n\n# Call the function to get the settlement payment\nsettlement_payment = solution()\nsettlement_payment\n```\n\nThis program calculates the settlement payment by determining the difference in interest rates between the FRA rate and the 90-day LIBOR, adjusting it for the notional amount, and accounting for the time period. Since the cash flow is received in the future, it is discounted to present value using the 60-day LIBOR rate as the discount rate for the 30-day period from day 60 to day 90."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-331",
        "question": "A fund manager possesses five bonds in his holdings, and each bond carries a single-year default risk of 17%. The default occurrence for each bond is autonomous. What are the odds that only two bonds will default within the coming year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the probability of exactly two bonds defaulting out of five, we can use the binomial probability formula:\n\nP(x) = nCx * (p^x) * (1-p)^(n-x)\n\nwhere:\n- P(x) is the probability of x successes (defaults in this case)\n- n is the number of trials (there are five bonds, so n = 5)\n- x is the number of successes we are interested in (we want to know the probability of 2 defaults, so x = 2)\n- p is the probability of a single success (each bond has a 17% chance of defaulting, so p = 0.17)\n- nCx (read \"n choose x\") is the binomial coefficient, representing the number of combinations of n things taken x at a time. It can also be calculated as n! / (x! * (n-x)!)\n\nHere's the python program to calculate the answer:\n\n```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    num_bonds = 5\n    default_risk = 0.17  # 17%\n    num_defaults = 2\n    \n    # Calculate the probability of exactly two defaults\n    probability = comb(num_bonds, num_defaults) * (default_risk ** num_defaults) * ((1 - default_risk) ** (num_bonds - num_defaults))\n    \n    # return answer\n    return probability\n\n# You can test the function with\nprint(solution())\n```\n\nThis program will calculate the probability of exactly two bonds defaulting within the next year, based on the given default risk and number of bonds."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-332",
        "question": "The stocks of BBB corporation have experienced shifting closing prices over the past 3 months: From May to July, what is the continuously compounded return of BBB corporation's stocks?",
        "tables": [
            "| Date | Closing Price |\n|------|---------------|\n| May  | 132           |\n| June | 145           |\n| July | 159           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the continuously compounded return, we can use the formula:\n\n\\[ r = \\ln\\left(\\frac{P_{end}}{P_{start}}\\right) \\]\n\nWhere `r` is the continuously compounded return, `P_end` is the ending price, `P_start` is the beginning price, and `ln` is the natural logarithm.\n\nHere's the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    P_start = 132  # The closing price in May\n    P_end = 159    # The closing price in July\n    \n    # Calculate the continuously compounded return\n    r = math.log(P_end / P_start)\n    \n    # Return the answer\n    return r\n\n# You can uncomment the next line to test the function\n# print(solution())\n```\n\nCalling `solution()` will give us the continuously compounded return over the given period."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-333",
        "question": "Assuming there are 250 trading days in a year and the daily returns are independently and identically distributed, what is the highest number of daily losses over a 10-year period exceeding the 1-day 99.5% VaR that would still indicate the model being correctly calibrated, for a risk manager who is backtesting an organization's VaR model at the 95% confidence level?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To find the highest number of daily losses over a 10-year period that exceed the 1-day 99.5% VaR, while still being indicative of a correctly calibrated model at the 95% confidence level, we can follow these steps:\n\n1. Calculate the expected number of exceptions (losses exceeding VaR) over the 10-year period. Since we are looking at the 99.5% VaR level, we expect 0.5% of the trading days to exceed this threshold.\n2. Once we have the expected number of exceptions, we can calculate the maximum allowable exceptions in order to still be within a 95% confidence level, using the binomial distribution. We find the cutoff point where 95% of outcomes fall below this threshold.\n\nLet's implement this calculation in a Python function.\n\n```python\nfrom scipy.stats import binom\n\ndef solution():\n    # Define variables name and value\n    trading_days_per_year = 250\n    total_trading_days = 10 * trading_days_per_year  # Total trading days in 10 years\n    VaR_confidence_level = 0.995  # 99.5% VaR level\n    backtest_confidence_level = 0.95  # 95% confidence level for backtesting\n    \n    # Calculate the expected exceptions (losses exceeding Var)\n    expected_exceptions = total_trading_days * (1 - VaR_confidence_level)\n    \n    # Find the max exceptions that still indicate correct calibration\n    # We want to find the highest k such that the CDF(k) <= backtest_confidence_level\n    max_exceptions = 0\n    while binom.cdf(max_exceptions, total_trading_days, 1 - VaR_confidence_level) < backtest_confidence_level:\n        max_exceptions += 1\n    \n    # The loop will exit when max_exceptions is just above the threshold, hence the answer is max_exceptions - 1\n    answer = max_exceptions - 1\n    \n    return answer\n\n# Call solution function and print the answer\nprint(solution())\n```\n\nThis code will return the highest number of daily losses over a 10-year period that exceed the 1-day 99.5% VaR and would still indicate the model being correctly calibrated at the 95% confidence level."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-334",
        "question": "Eight weeks prior, an investor bought a stock forward contract with a maturity of three months. The starting forward price was $108.5, but the present forward price is $107.6. The risk-free rate remains 3%. What is the value of this forward contract?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\nfrom math import exp\n\ndef solution():\n    # Define variables name and value\n    initial_forward_price = 108.5\n    current_forward_price = 107.6\n    risk_free_rate = 0.03\n    time_to_maturity = 1/12  # maturity is one month away\n    time_since_purchase = 8 / 52  # eight weeks have passed\n    \n    # The value of the long position in the forward contract\n    # V_t = S_t - F_0 * exp(-r(T-t))\n    # where:\n    #     V_t is the value of the forward contract at time t\n    #     S_t is the spot price at time t, which is the current forward price in this no-arbitrage case\n    #     F_0 is the initial forward price\n    #     r is the risk-free rate\n    #     T is the time to maturity\n    #     t is the current time\n    # Since the current time is 8 weeks after the purchase (which is not at the beginning),\n    # we adjust the time to maturity to reflect the initial three-months\n    # to get the remaining time to maturity.\n    \n    # Remaining time to maturity since 8 weeks have passed already (from 3 months)\n    T_minus_t = (3/12) - time_since_purchase\n    \n    # Calculate the value of the forward contract\n    forward_value = current_forward_price - (initial_forward_price * exp(-risk_free_rate * T_minus_t))\n    \n    # return answer\n    return forward_value\n\n# Note that in real-world scenarios, we typically need the current spot price of the stock, not the forward price. \n# However, in this example – since no spot price is given and we assume no arbitrage opportunities – \n# we'll take the current forward price as a proxy for the current spot price.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-335",
        "question": "After finalizing the chosen features, Thompson executes a model on the training set which identifies the text as either positive sentiment (Class “1”) or negative sentiment (Class “0”). Subsequently, she assesses its effectiveness through error analysis. Referring to Exhibit 2, what is the precision metric of the model as per the given confusion matrix?",
        "tables": [
            "|               |           | Actual training |      |\n|---------------|-----------|-----------------|------|\n|               |           | results         |      |\n| Predicted     |           | Class \"1\"       | Class \"0\"     |\n| Results       | Class \"1\" | TP=182          | FP=52 |\n|               | Class \"0\" | FN=31           | TN=96 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    TP = 182  # True Positives\n    FP = 52   # False Positives\n\n    # Do math calculation to get the precision\n    precision = TP / (TP + FP)\n    \n    # return answer\n    return precision\n    \n# Example usage:\n# precision_metric = solution()\n# print(precision_metric)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-336",
        "question": "A shareholder is evaluating the market risk of Orion Portfolio. The portfolio delivers an anticipated annual return of 6.8% and a volatility of 7.0%, and it is benchmarked in contrast with the S&P 500 Index. The shareholder presupposes that the S&P 500 Index has a projected annual return of 7.2% and a volatility of 8.2%. In accordance with the CAPM, if the risk-free rate is 2.2% per annum, what is the beta of Orion Portfolio?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To calculate the beta (\\(\\beta\\)) of Orion Portfolio according to the Capital Asset Pricing Model (CAPM), we will use the following formula:\n\n\\[\n\\beta = \\frac{E(R_p) - R_f}{E(R_m) - R_f}\n\\]\n\nwhere:\n- \\(E(R_p)\\) is the expected return on the portfolio (Orion Portfolio)\n- \\(E(R_m)\\) is the expected return on the market (S&P 500 Index)\n- \\(R_f\\) is the risk-free rate\n\nPlease note that the formula above assumes that the portfolio's returns are perfectly correlated with the market returns. This formula does not incorporate the standard deviations (volatilities) directly, but beta is conceptually related to volatility and covariance with the market.\n\nGiven the information above:\n\n- \\(E(R_p)\\) = 6.8%\n- \\(E(R_m)\\) = 7.2%\n- \\(R_f\\) = 2.2%\n\nHere is the Python program to calculate the beta of Orion Portfolio:\n\n```python\ndef solution():\n    # Define variables name and value\n    E_Rp = 6.8  # Expected return of Orion Portfolio in %\n    E_Rm = 7.2  # Expected return of S&P 500 Index in %\n    Rf = 2.2    # Risk-free rate in %\n    \n    # Do math calculation to get the beta\n    beta = (E_Rp - Rf) / (E_Rm - Rf)\n    \n    # return answer\n    return beta\n\n# Example usage:\nbeta_orion_portfolio = solution()\nprint(f\"The beta of Orion Portfolio is: {beta_orion_portfolio}\")\n```\n\nTo clarify, this calculation makes the assumption that the beta can be derived from the expected returns alone, which simplifies the real-world scenario where beta is typically calculated from historical return data and involves the covariance of the portfolio and market returns."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-337",
        "question": "A customer, Alice Thompson, thinks that large-cap stock prices will witness a slight increase, and she wishes to benefit from this trend using a bull spread technique. Parker suggests that Thompson utilize 1/100 options of the Dow Jones Industrial Average (DJX) which will expire in two months. The current DJX price stands at $91. Exhibit 2 offers current information on two DJX call options which will expire within two months. Exhibit 2 DJX Call Options Expiring in Two Months Thompson decides to use 100 contracts for each position. Each contract equals 100 shares. At the DJX call options expiration, what is the maximum potential gain from the bull spread strategy suggested for Thompson?\n",
        "tables": [
            "| Exercise Price ($) | Option Premium ($) | Delta |\n|--------------------|--------------------|-------|\n| 88                 | 4.40               | 0.75  |\n| 94                 | 1.00               | 0.30  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables based on information given\n    # We are given the exercise prices, option premiums, and the number of contracts for both positions\n    # and that each contract equals 100 shares\n    number_of_contracts = 100\n    shares_per_contract = 100\n    \n    # Information for the call option with exercise price of $88\n    exercise_price_long = 88\n    option_premium_long = 4.40\n    \n    # Information for the call option with exercise price of $94\n    exercise_price_short = 94\n    option_premium_short = 1.00\n    \n    # Do math calculation to get the answer\n    # Calculating the maximum profit potential for a bull spread strategy\n    # involves finding the difference between the strike prices of the two options,\n    # then subtracting the net premium spent to acquire the spread.\n    \n    spread = exercise_price_short - exercise_price_long\n    net_premium_spent = (option_premium_long - option_premium_short) * number_of_contracts * shares_per_contract\n    \n    # The maximum potential gain is the difference between the spread and the net premium spent\n    max_potential_gain = (spread * number_of_contracts * shares_per_contract) - net_premium_spent\n    \n    # Return answer\n    return max_potential_gain\n\n# Invoke the function and print the result\nprint(solution())\n```\n\nThis Python program calculates the maximum potential gain from the bull spread strategy suggested for Thompson. The strategy involves buying and selling call options with different strike prices, in this case, $88 and $94. To determine the gain, we calculate the spread between the strike prices, subtract the net premium spent, and multiply by the number of contracts and shares per contract."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-338",
        "question": "Can you calculate the net operating cycle for XY corporation given that they have credit sales of $50,000, cost of goods sold is $30,000, average accounts receivable is $3,000, average accounts payable is $2,600, average inventory is $5,000 and purchase inventory is $46,000?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 50000\n    cost_of_goods_sold = 30000\n    avg_accounts_receivable = 3000\n    avg_accounts_payable = 2600\n    avg_inventory = 5000\n    purchase_inventory = 46000\n    \n    # Calculate the accounts receivable days (DSO)\n    receivables_turnover_ratio = credit_sales / avg_accounts_receivable\n    days_sales_outstanding = 365 / receivables_turnover_ratio\n    \n    # Calculate the inventory turnover days (DI)\n    inventory_turnover = cost_of_goods_sold / avg_inventory\n    days_inventory = 365 / inventory_turnover\n    \n    # Calculate the accounts payable days (DPO)\n    payables_turnover_ratio = purchase_inventory / avg_accounts_payable\n    days_payables_outstanding = 365 / payables_turnover_ratio\n    \n    # Calculate the net operating cycle (NOC)\n    net_operating_cycle = days_sales_outstanding + days_inventory - days_payables_outstanding\n    \n    # return answer\n    return net_operating_cycle\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-339",
        "question": "Assuming a monthly compounded annual discount rate of 6.5%, what is the present value of a financial agreement that proposes to provide €1,200 monthly for a period of five years with the initial payment being made instantly?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\n# Import needed package for financial calculations\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables\n    monthly_payment = 1200           # Monthly payment\n    annual_rate = 0.065              # Annual discount rate\n    periods = 5 * 12                 # Total number of payments over 5 years (5 years * 12 months/year)\n\n    # Calculate present value of annuity, considering the first payment is made instantly\n    # In this case, we subtract one period and add the initial payment to the present value result.\n    present_value_annuity = npf.pv(rate=annual_rate/12, nper=periods - 1, pmt=-monthly_payment, fv=0)\n    present_value = present_value_annuity + monthly_payment\n    \n    return round(present_value, 2)  # Round the result to two decimals for currency\n\n# Execute the function and print the result\nprint(solution())\n```\nIn this Python program, we first import the `numpy_financial` package, which is a third-party package used for financial calculations. We then define the `solution` function, including the relevant variables such as the monthly payment, the annual discount rate, and the total number of periods. We calculate the present value of an annuity due (where payments are made at the beginning of each period) by adjusting the `npv` formula from the numpy_financial package. We remove one period from the calculation (`nper=periods - 1`) and then add back the initial monthly payment because it is made instantly. Finally, we round the result to two decimal places and return the present value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-340",
        "question": "Using the hybrid approach, what is the 5% VaR for a portfolio with 100 weeks of return history, with its lowest returns over six weeks illustrated in the chart?",
        "tables": [
            "|   | Six lowest week returns | Hybrid  Weights | Hybrid  Cumulative weights |\n|---|-----------------------|--------------|---------------------------|\n| 1 | -10.2%                   | 0.0105         | 0.0105                           |\n| 2 | -9.1%                   | 0.0150          | 0.0255                           |\n| 3 | -7.8%                   | 0.0082          | 0.0337                           |\n| 4 | -6.0%                   | 0.0043          | 0.0380                           |\n| 5 | -5.5%                   | 0.0153          | 0.0533                           |\n| 6 | -4.9%                   | 0.0115          | 0.0648                           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the 5% Value at Risk (VaR) using the hybrid approach with the data provided, we can follow these steps:\n\n1. Order the returns from smallest to largest (since we are dealing with losses, the smallest return is the highest loss and they are already ordered as per the given table).\n\n2. Find the weighted average return for the 5% of the worst cases. Since we have 100 weeks return history, 5% of 100 is 5. Therefore, we will consider the 5 weeks with the worst returns.\n\n3. Take the cumulative weight just before the 5% threshold, which corresponds to the 4th return in the ordered list, because 5% of 100 weeks is essentially considering 5 weeks, and we want the cumulative weight before the 5th week is involved.\n\n4. Calculate the weight for the tail (which is the weight of the last part beyond the 5% VaR point) by subtracting the cumulative weight just before the 5% threshold from the total hybrid weight for the six weeks.\n\n5. Finally, calculate the VaR by multiplying the weight for the tail by the return of the worst week (i.e., -10.2% in this case), then dividing the result by the hybrid weight for the last week, and add the weighted average return just before the tail.\n\nNow let's write the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    num_weeks = 100\n    percentile = 0.05\n    weeks_at_threshold = int(num_weeks * percentile)  # This is 5 weeks\n\n    # Returns and their corresponding hybrid weights from the table\n    returns = [-10.2, -9.1, -7.8, -6.0, -5.5, -4.9]  # in percentages\n    hybrid_weights = [0.0105, 0.0150, 0.0082, 0.0043, 0.0153, 0.0115]\n    cumulative_weights = [0.0105, 0.0255, 0.0337, 0.0380, 0.0533, 0.0648]\n\n    # Step 3: Cumulative weight just before the 5% threshold (after 4 weeks)\n    cumulative_weight_before_threshold = cumulative_weights[weeks_at_threshold - 2]  # Index 3 corresponds to 4 weeks\n\n    # Step 4: Calculate the weight for the tail\n    weight_for_tail = cumulative_weights[weeks_at_threshold - 1] - cumulative_weight_before_threshold\n\n    # Step 5: Calculate 5% VaR using the hybrid approach\n    var_5_percent = (\n        (weight_for_tail * returns[0]) / hybrid_weights[weeks_at_threshold - 1] + returns[weeks_at_threshold - 1]\n    )\n    \n    # Convert the VaR to positive because it represents a loss\n    var_5_percent = abs(var_5_percent)\n\n    # Return the 5% VaR\n    return var_5_percent\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this code, it will calculate and print the 5% Value at Risk (VaR) for the portfolio using the hybrid approach. The `abs()` function is used to convert the VaR to a positive number as it represents a loss."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-341",
        "question": "If the yield decreases by 90 basis points, what would be the convexity impact for a bond having a convexity of 120?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    convexity = 120\n    basis_point_change = -90  # a decrease is a negative change\n    \n    # Do math calculation to get the answer\n    # Convexity impact formula is:\n    # Convexity impact = 1/2 * convexity * (basis_point_change / 10000)^2\n    convexity_impact = 0.5 * convexity * (basis_point_change / 10000) ** 2\n    \n    # return answer\n    return convexity_impact\n    \n# Outside of the function, if you want to use the function and print the answer, you can call the function like this:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-342",
        "question": "Determine the beta of the shares, if the covariance of the market returns with the returns of a particular share is 0.0035 and the standard deviation of the market returns is 0.05.",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's a Python program that calculates the beta of the shares based on the covariance of the market returns with the returns of a particular share and the variance of the market returns:\n\n```python\ndef solution():\n    # Define the covariance of the market returns with the returns of a particular share\n    covariance = 0.0035\n    \n    # Define the standard deviation of the market returns\n    market_standard_deviation = 0.05\n    \n    # Compute the variance of the market returns\n    market_variance = market_standard_deviation**2\n    \n    # Calculate the beta using the formula beta = covariance / variance\n    beta = covariance / market_variance\n    \n    # return the beta\n    return beta\n\n# Example of calling the function\nprint(solution())\n```\n\nThis program defines the necessary variables and calculates the beta by dividing the covariance by the variance of the market returns. The result is returned and can also be printed for verification."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-343",
        "question": "A researcher obtained the data from a business's 2018 financial reports (in $ millions): The business proclaimed and paid cash dividends of $10 million and recognized depreciation expenses of $25 million in 2018. The business views the disbursal of dividends as a financing operation. What was the business's operational cash flow in 2018 (in $ millions)?",
        "tables": [
            "| Balances as of Year Ended 31 December 2017-2018 |      |      |\n|-------------------------------------------------|------|------|\n| Retained earnings                               |120145|      |\n| Accounts receivable                             | 38 43|      |\n| Inventory                                       | 45 48|      |\n| Accounts payable                                | 36 29|      |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the business's operational cash flow for 2018, we will need to use the information provided and apply the Indirect Method for calculating the cash flow from operating activities. This method starts with the net income and adjusts for non-cash transactions and changes in working capital.\n\nThe net income can be calculated by starting with the retained earnings at the beginning of the year, adding the net income for the year, and then subtracting the dividends paid.\n\nHowever, there is an error in the information provided: the 'Accounts receivable' and 'Inventory' values are fragmented and do not provide clear data. Without complete and correct data for accounts receivable and inventory at the beginning and end of the year, the calculation cannot proceed as these details are essential to compute the changes in working capital.\n\nFor the program, I'll set up the framework assuming the data is correct and showing placeholders for the missing values. But for an accurate solution, you would need to provide complete numbers for 'Accounts receivable' and 'Inventory'.\n\n```python\ndef solution():\n    # The table shows incomplete data for retained earnings, accounts receivable, and inventory, \n    # and we also have missing income to determine net income.\n    # Assuming the retained earnings shown is for the year 2017.\n    beginning_retained_earnings = 120145  # This value and the following are in $ millions\n    dividends_paid = 10\n    depreciation_expense = 25\n\n    # Placeholders for missing values (these should be retrieved from the financial statement)\n    ending_retained_earnings = None  # Replace None with the provided value\n    beginning_accounts_receivable = None  # Replace None with the provided value\n    ending_accounts_receivable = None  # Replace None with the provided value\n    beginning_inventory = None  # Replace None with the provided value\n    ending_inventory = None  # Replace None with the provided value\n\n    # Calculate net income\n    # net_income = ending_retained_earnings - beginning_retained_earnings + dividends_paid\n    # However, the ending_retained_earnings is missing. If provided, uncomment the line below\n    # net_income = ending_retained_earnings - 120145 + 10\n    \n    # Adjust for non-cash expenses (only depreciation is provided)\n    adjustments_for_noncash_expenses = depreciation_expense\n\n    # Changes in working capital accounts\n    # Calculate change in accounts receivable (if values were provided), uncomment the line below\n    # change_in_receivables = beginning_accounts_receivable - ending_accounts_receivable\n\n    # Calculate change in inventory (if values were provided), uncomment the line below\n    # change_in_inventory = beginning_inventory - ending_inventory\n\n    # Calculate change in accounts payable (using the provided table values)\n    beginning_accounts_payable = 36\n    ending_accounts_payable = 29\n    change_in_payables = ending_accounts_payable - beginning_accounts_payable\n    \n    # Calculate operational cash flow (assuming we have 'net_income')\n    # operational_cash_flow = net_income + adjustments_for_noncash_expenses + change_in_receivables + change_in_inventory + change_in_payables\n    # However, since we have missing values, the accurate calculation cannot be completed\n\n    # This is a placeholder return value to represent the result if we had all the required information\n    operational_cash_flow = None  # Replace None with the actual calculation when data is available\n\n    # return answer\n    return operational_cash_flow\n\n# Note: The solution will not be accurate until the missing data is provided and the placeholders are replaced with real values.\n```\n\nPlease provide the missing data for accurate calculations."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-344",
        "question": "If an analyst named Mary is attempting to evaluate a corporation's stocks, considering that the company recently paid a dividend of $0.50 per share and the dividend is predicted to increase by 25% in the following year, and by 10% in the subsequent year. Furthermore, from the third year and onwards, the dividend expansion is foreseen to be 5% per annum. Given an 8% required rate of return, what would be the stock's intrinsic value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the intrinsic value of the stock using the given information, we'll use the Gordon Growth Model (also known as the Dividend Discount Model) for valuating a stock with a growing dividend. The model is expressed as:\n\n\\[ P = \\frac{D_1}{r - g} \\]\n\nHere,\n- \\( P \\) is the price of the stock or its intrinsic value.\n- \\( D_1 \\) is the dividend expected one year from now.\n- \\( r \\) is the required rate of return.\n- \\( g \\) is the growth rate in dividends.\n\nThe growth is not constant in this scenario, so we'll calculate the first few dividends based on the growth rates given and then find the intrinsic value with a constant growth rate expected from the third year onwards.\n\nHere's how you can write the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    D0 = 0.50         # Initial dividend\n    growth_year1 = 0.25\n    growth_year2 = 0.10\n    growth_perpetual = 0.05\n    required_return = 0.08\n    \n    # Calculate the expected dividends\n    D1 = D0 * (1 + growth_year1)\n    D2 = D1 * (1 + growth_year2)\n    D3 = D2 * (1 + growth_perpetual)\n    \n    # Calculate the present value of the expected dividends\n    PV_D1 = D1 / (1 + required_return)\n    PV_D2 = D2 / ((1 + required_return) ** 2)\n    \n    # Calculate the stock's intrinsic value at the end of year 2\n    # for all subsequent cash flows using the Gordon Growth Model\n    P2 = D3 / (required_return - growth_perpetual)\n    PV_P2 = P2 / ((1 + required_return) ** 2)\n    \n    # The intrinsic value of the stock today is the sum of present values of all future dividends\n    intrinsic_value = PV_D1 + PV_D2 + PV_P2\n    \n    # return answer\n    return intrinsic_value\n\n# Uncomment the line below to run the function and get the intrinsic value\n# print(solution())\n```\n\nWhen you run the function `solution()`, it will return the intrinsic value of the stock based on the given growth rates and the required rate of return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-345",
        "question": "What is the 99.9% credit var for a bond valued at $100 million that has a one-year cumulative default probability of 2% with no recovery rate and a 99.9% confidence level for the coming month?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_value = 100000000  # Bond value is $100 million\n    default_probability = 0.02  # Default probability is 2%\n    confidence_level = 0.999  # Confidence level is 99.9%\n    recovery_rate = 0  # No recovery rate\n    \n    # As there is no recovery rate, the full value of the bond is at risk\n    # Multiply the bond value by the default probability to get the expected loss from default\n    expected_loss_from_default = bond_value * default_probability\n\n    # Since we're interested in the Value at Risk (VaR) for a 99.9% confidence level, and the only risk is default risk,\n    # the VaR is simply the expected loss, as we are not considering other sources of uncertainty or market risk.\n    credit_var = expected_loss_from_default\n\n    # return answer\n    return credit_var\n\n# Calling the function to get the result\nprint(solution())\n```\n\nIf you run the above program, it will return the credit value at risk for the bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-346",
        "question": "If the shares of the BBB corporation have a 30% chance of increasing each year, assuming each yearly attempt is unrelated to the others, what are the odds that it does not manage to increase more than once in the next 3 years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_increase = 0.3  # probability of increase in a year\n    p_no_increase = 1 - p_increase  # probability of no increase in a year\n    p_increase_once = 3 * p_increase * p_no_increase**2  # probability of increasing exactly once in 3 years (3 combinations)\n    p_increase_never = p_no_increase**3  # probability of never increasing in 3 years\n    \n    # The total probability of not increasing more than once in next 3 years:\n    p_not_more_than_once = p_increase_never + p_increase_once\n    \n    # return answer\n    return p_not_more_than_once\n\n# The function call\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-347",
        "question": "A one-year zero-coupon bond has a yield of 4.0%. The yields of the zero-coupon bonds for two and three years are 5.0% and 6.0% respectively. What would be the forward rate for a one-year loan that starts in two years?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the forward rate for a one-year loan that starts in two years using the given yields, we'll apply the formula to derive forward rates from spot rates (zero-coupon yields).\n\nHere's the Python program that calculates the forward rate:\n\n```python\ndef solution():\n    # Spot rate for one-year, two-year, and three-year bonds\n    one_year_spot_rate = 0.04\n    two_year_spot_rate = 0.05\n    three_year_spot_rate = 0.06\n    \n    # Calculate the present value (PV) factors for the spot rates\n    one_year_PV_factor = 1 / (1 + one_year_spot_rate)\n    two_year_PV_factor = 1 / ((1 + two_year_spot_rate) ** 2)\n    three_year_PV_factor = 1 / ((1 + three_year_spot_rate) ** 3)\n    \n    # Calculate the forward rate using the present value factors\n    forward_rate = ((three_year_PV_factor / two_year_PV_factor) ** (1 / 1)) - 1\n\n    # return forward rate\n    return forward_rate\n\n# To see the result as a percentage you might print it like so:\n# print(f\"The one-year forward rate starting in two years is: {solution() * 100:.2f}%\")\n```\n\nWhen the `solution()` function is called, it will return the forward rate for a one-year loan starting in two years based on the provided yields."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-348",
        "question": "Assuming yearly compounding, what will be the price of the zero coupon bond given the details below?",
        "tables": [
            "| Mature time | 10 years |\n|-------------|----------|\n| Market discount rate | 4% |\n| Par value of the bond | 1000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# No package import needed for this calculation\ndef solution():\n    # Define variables name and value\n    mature_time = 10  # years\n    market_discount_rate = 0.04  # 4%\n    par_value_of_bond = 1000  # Par value\n    \n    # Do math calculation to get the answer\n    # Using present value formula for zero coupon bonds: Price = Par Value / (1 + r)^n\n    price_of_bond = par_value_of_bond / (1 + market_discount_rate) ** mature_time\n    \n    # return answer\n    return price_of_bond\n\n# This is the program for solving the given problem, when called the function will return the price of the bond\n```\n\nThis program, when executed, will return the price of a zero coupon bond based on the given parameters (maturity time, discount rate, par value)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-349",
        "question": "Given the cash flow data in the following table, what was the cash-flow-based accruals ratio for the company PZ in the year 2018?",
        "tables": [
            "|                                                     | 2018  | 2017  | 2016  |\n|-----------------------------------------------------|-------|-------|-------|\n| Net income                                          | 3,560 | 2,071 | 1,295 |\n| Net cash flow provided by (used in) CFO             | 8,850 | 4,220 | 2,990 |\n| Net cash flow provided by (used in) CFI             | (9,880)| (3,250)| (4,875)|\n| Net cash flow provided by (used in) CFF             | (5,120)| 1,050 | (1,910)|\n| Average net operating assets                         | 42,000| 40,530| 41,600|"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 3560\n    cfo = 8850\n    avg_net_operating_assets = 42000\n    \n    # Do math calculation to get the answer\n    cash_flow_accurals = net_income - cfo\n    cash_flow_based_accruals_ratio = cash_flow_accurals / avg_net_operating_assets\n    \n    # return answer\n    return cash_flow_based_accruals_ratio\n\n# Example usage\n# print(solution())\n```\nThe `solution()` function calculates the cash-flow-based accruals ratio for the company PZ in the year 2018 by subtracting the net cash flow provided by operating activities (CFO) from the net income and then dividing the result by the average net operating assets."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-350",
        "question": "A business expert intends to evaluate a private corporation using the FCF Model. To calculate the free cash flow for all capital providers, what is the free cash flow value the expert intends to find, considering the gathered information (in million)?",
        "tables": [
            "| Operating cash flow | 500 |\n|---------------------|-----|\n| Interest paid       | 30  |\n| Investment in working capital | 80 |\n| Investment in fixed asset | 60 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_cash_flow = 500\n    interest_paid = 30\n    investment_in_working_capital = 80\n    investment_in_fixed_asset = 60\n    tax_rate = 0.30\n    \n    # Calculate tax shield on interest\n    tax_shield_interest = interest_paid * tax_rate\n    \n    # Calculate free cash flow for all capital providers\n    free_cash_flow = operating_cash_flow + tax_shield_interest - investment_in_working_capital - investment_in_fixed_asset\n    \n    # Return answer\n    return free_cash_flow\n\n# Uncomment the line below to check the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-351",
        "question": "What should be the projected total owners' equity by an analyst, if a firm is expected to have €2,000 of assets and €1,200 liabilities by the end of the year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program to calculate the projected total owners' equity:\n\n```python\ndef solution():\n    # Define variables name and value\n    assets = 2000\n    liabilities = 1200\n    \n    # Do math calculation to get the answer\n    owners_equity = assets - liabilities\n    \n    # return answer\n    return owners_equity\n\n# You can call the function to get the answer\nprint(solution())\n```\n\nWhen you run this program, it will return the projected total owners' equity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-352",
        "question": "What is the impairment loss (in C$) associated with the printing equipment of a Canadian printing firm that complies with IFRS, given the drop in demand for its products during this fiscal year end?",
        "tables": [
            "|                               |   C$   |\n|-------------------------------|--------|\n| Carrying value of equipment (net book value)   | 500,000|\n| Undiscounted expected future cash flows | 550,000|\n| Fair value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    value_in_use = 440000\n    fair_value_less_costs_to_sell = 480000 - 50000\n\n    # Calculate recoverable amount (the higher of fair value less costs to sell and value in use)\n    recoverable_amount = max(value_in_use, fair_value_less_costs_to_sell)\n\n    # Calculate impairment loss (carrying amount - recoverable amount)\n    impairment_loss = carrying_value - recoverable_amount\n\n    # Return the answer\n    return impairment_loss\n\n# Uncomment the following line to run the function and get the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-353",
        "question": "If a bond with a face value of $100 has a semiannual-pay interest rate of 5% over 10 years, what would be its price assuming that its YTM is 8%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Face value of the bond\n    coupon_rate = 0.05  # Semiannual coupon rate\n    ytm = 0.08  # Annual YTM\n    years = 10  # Number of years to maturity\n    periods = years * 2  # Number of periods (semiannual)\n    \n    # Semiannual coupon payment\n    coupon_payment = face_value * coupon_rate\n    \n    # Semiannual yield to maturity\n    semiannual_ytm = ytm / 2\n    \n    # Calculate the present value of the coupon payments\n    pv_coupons = npf.pv(rate=semiannual_ytm, nper=periods, pmt=-coupon_payment, fv=0)\n    \n    # Calculate the present value of the face value\n    pv_face_value = npf.pv(rate=semiannual_ytm, nper=periods, pmt=0, fv=-face_value)\n    \n    # Sum of present value of coupons and face value to get the bond price\n    bond_price = pv_coupons + pv_face_value\n    \n    # return answer rounded to two decimals\n    return round(bond_price, 2)\n    \n# Call the function to get the result\nprint(solution())\n```\n\nThis program assumes the presence of the `numpy-financial` package, which is commonly used for financial calculations in Python. If the package is not available or otherwise specified, the necessary functions can be written in pure Python to compute the present values."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-354",
        "question": "If a researcher uses four separate assessment measures on a group of 1,200 possible investments, what is the estimated number that will successfully pass through all four assessments?",
        "tables": [
            "| Valuation Screen | Probability of Passing |\n|------------------|------------------------|\n| 1                | 0.65                   |\n| 2                | 0.45                   |\n| 3                | 0.40                   |\n| 4                | 0.30                   |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define the number of initial investments\n    initial_investments = 1200\n    \n    # Define probabilities for each valuation screen to pass\n    probabilities = [0.65, 0.45, 0.40, 0.30]\n    \n    # Calculate the estimated number of investments passing all assessments\n    estimated_passing = initial_investments\n    for probability in probabilities:\n        estimated_passing *= probability\n    \n    # Return the final estimated number\n    return estimated_passing\n\n# To run the function and print the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-355",
        "question": "What is the fiscal multiplier of the administration with a 25% tax rate and a 70% marginal propensity to consume?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is the Python program to calculate the fiscal multiplier given the tax rate and marginal propensity to consume:\n\n```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.25\n    marginal_propensity_to_consume = 0.70\n    \n    # Do math calculation to get the answer\n    fiscal_multiplier = 1 / (1 - marginal_propensity_to_consume * (1 - tax_rate))\n    \n    # return answer\n    return fiscal_multiplier\n\n# You can uncomment the following line to test the function:\n# print(solution())\n```\n\nThis program will return the fiscal multiplier based on the formula for the Keynesian multiplier adjusted for taxes: 1 / (1 - MPC * (1 - Tax Rate))."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-356",
        "question": "A researcher has collected the below stats: the chance of economic prosperity is 75%, while the possibility of recession stands at 25%. For a business, there's a 10% probability of its EPS being $2.0 and a 90% likelihood of having an EPS of $4.0 during prosperous times. However, during a recession, there is a 25% chance that the EPS might be $2.0 and a 75% possibility that the EPS might be $4.0. What is the variance of this business's EPS in an economic downturn?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "As this is a calculation of the variance of the EPS (Earnings Per Share) during economic downtimes, we can make use of the probabilities given to calculate the expected value (mean) of the EPS and then use it to find the variance. Here, we have the probabilities for the EPS being $2.0 or $4.0 during recession times. We will calculate the expected value first and then the variance.\n\nThe variance of a probability distribution is given by the formula:\n\\[ \\text{Variance} = E[X^2] - (E[X])^2 \\]\nwhere:\n- \\( E[X] \\) is the expected value of X (mean of the distribution).\n- \\( E[X^2] \\) is the expected value of X^2.\n\nFor this case:\n- \\( E[X] \\) = Probability(EPS=$2.0) \\(\\times\\) EPS($2.0) + Probability(EPS=$4.0) \\(\\times\\) EPS($4.0)\n- \\( E[X^2] \\) = Probability(EPS=$2.0) \\(\\times\\) (EPS($2.0))^2 + Probability(EPS=$4.0) \\(\\times\\) (EPS($4.0))^2\n\nSo let's calculate the variance:\n\n```python\ndef solution():\n    # Define the probabilities and EPS values during recession\n    probability_eps_2_recession = 0.25\n    probability_eps_4_recession = 0.75\n    eps_2 = 2.0\n    eps_4 = 4.0\n    \n    # Calculate the expected value of EPS during recession\n    expected_value_recession = (probability_eps_2_recession * eps_2) + (probability_eps_4_recession * eps_4)\n    \n    # Calculate the expected value of EPS^2 during recession\n    expected_value_squared_recession = (probability_eps_2_recession * eps_2**2) + (probability_eps_4_recession * eps_4**2)\n    \n    # Calculate the variance\n    variance_recession = expected_value_squared_recession - expected_value_recession**2\n    \n    # return variance_recession\n    return variance_recession\n    \n# Running the solution function and printing the variance\nprint(solution())\n```\n\nWhen you run this Python code, it will calculate and print the variance of the business's EPS during a recession."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-357",
        "question": "In early January 2015, a market researcher spotted a news report stating that a company he's tracking (which submits reports under US GAAP) would be compelled to cut production from a key product line at its highly specialized ceramics factory, due to a new technology launched by a main competitor. The table encapsulates data and predictions from different sources regarding the factory and its forthcoming possibilities. Assuming the chosen information associated with the Ceramics Production Plant by the close of 2014 (in $ thousands) is correct, what would be the depreciation expense to be accounted for in 2015 concerning the factory?",
        "tables": [
            "| Carrying amount of plant | 1,604 |\n|-------------------------|-------|\n| Undiscounted expected future net cash flows | 1,350 |\n| Present value of expected future net cash flows | 1,050 |\n| Fair value of plant | 1,225 |\n| Revised estimate of useful life | 4 years |\n| Depreciation method | Straight line |\n| Revised estimate of residual value | $200 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revised_carrying_amount = 1225  # Fair value of plant ($ thousands)\n    revised_residual_value = 200  # Revised estimate of residual value ($ thousands)\n    revised_useful_life = 4  # Revised estimate of useful life (years)\n    \n    # Do math calculation to get the answer\n    # Compute the depreciation expense using the straight line method\n    depreciation_expense = (revised_carrying_amount - revised_residual_value) / revised_useful_life\n    \n    # return answer\n    return depreciation_expense\n\n# Example usage\n# print(solution())\n```\n\nWhen you call the function 'solution()', it would compute and return the annual depreciation expense for the year 2015 based on the given information."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-358",
        "question": "What is the price value of a basis point (PVBP) for the bonds that are presently valued at 108.50, issued by GTS Inc., considering that according to a portfolio manager's valuation model, a 1bp rise in interest rates will cause the bond price to drop to 108.40, and a 1bp fall in interest rates will cause the bond price to increase to 108.59?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variable for the initial bond price\n    current_price = 108.50\n    # Define variable for the bond price if interest rates rise by 1bp\n    price_if_rise = 108.40\n    # Define variable for the bond price if interest rates fall by 1bp\n    price_if_fall = 108.59\n\n    # Calculate the price value of a basis point (PVBP)\n    # PVBP is the average of the price change when rates rise and when rates fall\n    PVBP = ((current_price - price_if_rise) + (price_if_fall - current_price)) / 2\n    \n    # return answer\n    return PVBP\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the Price Value of a Basis Point (PVBP) by averaging the price change of the bond due to a 1bp rise in interest rate and a 1bp fall in interest rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-359",
        "question": "Bergen Inc. commenced business operations in 2007 and implements the FIFO method. In its first year, it bought 45,000 units of inventory for €10 per unit and sold 40,000 units at €20 each. The following year, it acquired another 50,000 units at a cost of €11 each and made sales of 45,000 units priced at €22 each. Using a periodic inventory system, what was Bergen Inc.'s ending inventory balance in € thousands for 2008?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program to calculate the ending inventory balance for Bergen Inc. in € thousands for the year 2008:\n\n```python\ndef solution():\n    # Initial data from 2007\n    inventory_purchased_2007 = 45000  # units\n    cost_per_unit_2007 = 10  # in €\n    units_sold_2007 = 40000  # units\n    \n    # Data from 2008\n    inventory_purchased_2008 = 50000  # units\n    cost_per_unit_2008 = 11  # in €\n    units_sold_2008 = 45000  # units\n    \n    # Calculate inventory remaining at the end of 2007 using FIFO\n    ending_inventory_units_2007 = inventory_purchased_2007 - units_sold_2007\n    \n    # Calculate starting inventory for 2008 in €\n    starting_inventory_2008 = ending_inventory_units_2007 * cost_per_unit_2007  # in €\n    \n    # Calculate cost of goods purchased in 2008 in €\n    cost_of_goods_purchased_2008 = inventory_purchased_2008 * cost_per_unit_2008  # in €\n    \n    # Calculate total inventory available for sale in 2008 in €\n    total_inventory_available_2008 = starting_inventory_2008 + cost_of_goods_purchased_2008  # in €\n    \n    # Calculate ending inventory for 2008 in €\n    ending_inventory_2008 = total_inventory_available_2008 - (units_sold_2008 * cost_per_unit_2007)  # FIFO method\n    \n    # Convert ending inventory for 2008 to € thousands\n    ending_inventory_2008_thousands = ending_inventory_2008 / 1000\n    \n    # return answer\n    return ending_inventory_2008_thousands\n    \n# Call the function and print the result to verify\nprint(solution())\n```\nRemember to replace `print(solution())` with `return solution()` when using this function in a proper Python script. This modification only serves demonstration purposes for code execution and verification."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-360",
        "question": "John is looking to aid his friend Lisa in forecasting the revenue of her store in October 20X9, thus he uses the income from January 20X6 to September 20X9 as examples to create an AR(2) model and attains the following result: X ^ t+1 =1.3458+0.8912Xt+0.3372Xt-1. What would the forecasted revenue of Lisa's store be in October 20X9, provided the income for August 20X9 is $2746.72 and the income for September 20X9 is $2957.63?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and values\n    Xt = 2957.63    # income for September 20X9\n    Xt_1 = 2746.72  # income for August 20X9\n    coeff_0 = 1.3458\n    coeff_1 = 0.8912\n    coeff_2 = 0.3372\n    \n    # Use the AR(2) model to calculate the forecasted revenue\n    X_t_plus_1 = coeff_0 + coeff_1 * Xt + coeff_2 * Xt_1\n    \n    # return forecasted revenue for October 20X9\n    return X_t_plus_1\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe above python program will calculate the forecasted revenue for Lisa's store in October 20X9 using the given AR(2) model and the revenues from August and September 20X9."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-361",
        "question": "A Brazilian firm, CRIXUS Inc., takes out a loan from a domestic bank to fund the building of its factory. The terms of the loan are as follows: It takes two years to construct the factory, during which CRIXUS made BRL 10 million by momentarily investing the loan amount. What is the value of interest pertaining to the factory construction (in BRL million) that can be capitalized on CRIXUS's balance sheet?",
        "tables": [
            "| Borrowing date   | 1-Jan-09                                |\n|------------------|-----------------------------------------|\n| Amount borrowed  | 500 million Brazilian real (BRL)  |\n| Annual interest rate  | 14 percent                        |\n| Term of the loan | 3 years                                 |\n| Payment method   | Annual payment of interest only. Principal amortization is due at the end of the loan term. |"
        ],
        "topic": "Accounting",
        "output": [
            "We are asked to calculate the amount of interest that can be capitalized on CRIXUS's balance sheet, which is related to the construction of the factory. Given that the construction period is 2 years and the company only pays interest annually, we need to find the total interest paid over these 2 years. Since the income from the temporary investment is not relevant to the interest paid on the loan, we will not consider it in calculating the interest to be capitalized.\n\nHere is the Python program to calculate the interest amount:\n\n```python\ndef solution():\n    # Define variables name and value\n    amount_borrowed = 500  # In BRL million\n    annual_interest_rate = 0.14  # 14 percent as a decimal\n    construction_period = 2  # 2 years for the construction of the factory\n    \n    # Do math calculation to get the answer\n    # Calculating the interest for 2 years since it's only paid annually\n    interest_per_year = amount_borrowed * annual_interest_rate\n    total_interest_during_construction = interest_per_year * construction_period\n    \n    # return answer\n    return total_interest_during_construction\n\n# Call the function and print the result\nprint(solution())\n```\n\nPlease note that the income from temporarily investing the loan amount is not factored into this calculation, as we are asked to compute the interest pertaining to the factory's construction, which would be capitalized regardless of the income generated through investment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-362",
        "question": "In compliance with the rules of the trading platform, investing in wheat futures calls for an initial margin of $2000 and a maintenance margin of $1500. A trader shorts a wheat future contract at $216, with each contract incorporating 100 tons. The contract's value escalates to $222 after a day. What would the varying margin amount be at the conclusion of day one?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is a Python program to calculate the variation in the margin amount after the contract's value changes:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_margin = 2000       # The initial margin required\n    maintenance_margin = 1500   # The maintenance margin required\n    initial_price = 216         # Initial price per ton\n    final_price = 222           # Price after one day\n    contract_size = 100         # Each contract size in tons\n\n    # Calculate the value of the position change\n    position_change = (final_price - initial_price) * contract_size\n\n    # Calculate the variation margin amount\n    variation_margin = position_change\n\n    # return answer\n    return variation_margin\n\n# You can call the function to check the final answer\nprint(solution())\n```\n\nWhen called, this program will give us the variation margin at the end of day one, considering the price increase per ton and the number of tons in the contract."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-363",
        "question": "Suppose a hedge fund manager is aiming to build a protective put approach. If the stock's current price is $25.1, and the premium of 23 put is $1.8, what would be the maximum loss for this strategy?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 25.1\n    put_strike_price = 23\n    put_premium = 1.8\n\n    # Do math calculation to get the answer\n    # For a protective put, the maximum loss is the sum of the put premium plus the difference between stock purchase price and put strike price, if that difference is positive, otherwise just the put premium.\n    max_loss_per_shares = put_premium + max(stock_price - put_strike_price, 0)\n    \n    # return answer\n    return max_loss_per_shares\n\n# This answer will return the maximum loss per share.\n# To calculate the total maximum loss for multiple shares, multiply this answer by the number of shares.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-364",
        "question": "In March 2017, John purchased 500 pen units at a cost of $2 each. Then in April of the same year, he bought another 600 pen units at an expense of $3 each. John managed to sell 1000 units at $5 each during 2017. When employing the FIFO method, what would be the cost of goods he sold in 2017?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_quantity = 500\n    initial_cost_per_unit = 2\n    additional_quantity = 600\n    additional_cost_per_unit = 3\n    sold_units = 1000\n    \n    # FIFO: first bought items are sold first\n    \n    # Calculate cost for the sold units\n    # First, sell the initial batch\n    if sold_units <= initial_quantity:\n        cost_of_goods_sold = sold_units * initial_cost_per_unit\n    else:\n        # Then, sell the additional batch\n        remaining_units_to_account_for = sold_units - initial_quantity\n        cost_of_goods_sold = (initial_quantity * initial_cost_per_unit) + (remaining_units_to_account_for * additional_cost_per_unit)\n    \n    # return answer\n    return cost_of_goods_sold\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-365",
        "question": "A researcher is examining the degradation of the production machinery of Alpha Industries, a corporation based in the UK that abides by IFRS. What is the value of the impairment loss on Alpha Industries' income statement connected to its production machinery, based on the data collected about the machinery?",
        "tables": [
            "|   |   |\n|---|---|\n| Fair value  | £ 16,800,000  |\n| Costs to sell  | £800,000  |\n| Value in use  | £14,500,000  |\n| Net carrying amount  | £19,100,000  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fair_value = 16800000\n    costs_to_sell = 800000\n    value_in_use = 14500000\n    net_carrying_amount = 19100000\n\n    # Calculate recoverable amount\n    recoverable_amount = max(fair_value - costs_to_sell, value_in_use)\n\n    # Calculate impairment loss\n    impairment_loss = net_carrying_amount - recoverable_amount if net_carrying_amount > recoverable_amount else 0\n    \n    # return answer\n    return impairment_loss\n\n# This is the call to the function that would return the impairment loss\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-366",
        "question": "In a discrete uniform distribution with 20 potential results ranging from 1 to 20, what is the probability that X is not less than 3 but not exceeding 5, P(3 ≤ X < 6)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the total number of outcomes and the favorable outcomes\n    total_outcomes = 20\n    favorable_outcomes = (5 - 3) + 1  # (Including 3, 4, and 5)\n    \n    # Calculate the probability\n    probability = favorable_outcomes / total_outcomes\n    \n    # return the probability\n    return probability\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-367",
        "question": "Assume an investment portfolio consists of 40% in property A and 60% in property B. The average and variance of the return on A are 0 and 25 respectively. The average and variance of the return on B are 1 and 121 correspondingly. The correlation coefficient between A and B is 0.3. What is the closest estimate for portfolio volatility?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_A = 0.4\n    avg_return_A = 0\n    variance_A = 25\n    sd_A = math.sqrt(variance_A)\n\n    weight_B = 0.6\n    avg_return_B = 1\n    variance_B = 121\n    sd_B = math.sqrt(variance_B)\n    \n    correlation_AB = 0.3\n    \n    # Calculate portfolio variance using the formula for the variance of a two-asset portfolio\n    # variance_portfolio = (weight_A^2 * variance_A) + (weight_B^2 * variance_B) + \n    #                      2 * weight_A * weight_B * correlation_AB * sd_A * sd_B\n    variance_portfolio = (weight_A ** 2 * variance_A) + (weight_B ** 2 * variance_B) + \\\n                         2 * weight_A * weight_B * correlation_AB * sd_A * sd_B\n    \n    # Portfolio standard deviation (volatility) is the square root of the portfolio variance\n    volatility_portfolio = math.sqrt(variance_portfolio)\n    \n    # return answer\n    return volatility_portfolio\n    \n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-368",
        "question": "Johnson is looking to forecast the earnings of his manufacturing plant in the first quarter of 20X9. To do this he utilizes earnings data from the first quarter of 20X8 to the last quarter of 20X8 as examples to create an AR(1) model. However, he discovers that the autocorrelations of the residuals indicate a significant, strong seasonal autocorrelation. Johnson then adjusts the model to obtain the new equation, which is Xt=126.7537+0.1387Xt−1+0.9324Xt−4X_t=126.7537+0.1387X_{t-1}+0.9324X_{t-4}Xt​=126.7537+0.1387Xt−1​+0.9324Xt−4​. The income for each quarter in 20X8 is presented in the table below. Based on this new model, what is the",
        "tables": [
            "| Quarter                   | Income   |\n|---------------------------|----------|\n| The last quarter in 20X8 | $ 4257.63|\n| The third quarter in 20X8| $4153.98 |\n| The second quarter in 20X8| $4322.01 |\n| The first quarter in 20X8| $5763.42 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Given the autocorrelation issues and the subsequent adjustment to the AR(1) model, the new model includes terms for the previous quarter (Xt−1) as well as the same quarter in the previous year (Xt−4). To forecast the earnings for the first quarter of 20X9 (Xt), we will use the income data provided for the first quarter of 20X8 and the last quarter of 20X8.\n\nHere's the Python program to calculate the forecast based on the provided model:\n\n```python\ndef solution():\n    # AR(1) model constants\n    alpha = 126.7537\n    beta_1 = 0.1387\n    beta_4 = 0.9324\n    \n    # Income data from the table (in thousands)\n    income_data = {\n        'Q1_20X8': 5763.42,\n        'Q2_20X8': 4322.01,\n        'Q3_20X8': 4153.98,\n        'Q4_20X8': 4257.63\n    }\n    \n    # We need the income from the last quarter in 20X8 and the first quarter in 20X8\n    income_Q4_20X8 = income_data['Q4_20X8']\n    income_Q1_20X8 = income_data['Q1_20X8']\n    \n    # Calculate the forecast for the first quarter of 20X9\n    forecast_Q1_20X9 = alpha + (beta_1 * income_Q4_20X8) + (beta_4 * income_Q1_20X8)\n\n    # Return the forecast value\n    return forecast_Q1_20X9\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program defines a solution function that calculates the forecast for the first quarter of 20X9 based on the income from the last quarter in 20X8 and the first quarter in 20X8 using the provided AR(1) model equation. The result of calling the solution function will be the forecast value for the first quarter of 20X9."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-369",
        "question": "The Brazilian corporation, RIO GRANDE, Inc., borrows money from a local financial institution to fund the building of its manufacturing facility. The loan conditions indicate that the facility build will take two years, during which RIO GRANDE generated BRL 10 million via temporary investment of the loan funds. What would be the sum of the interest associated with the plant's build (in BRL million) that RIO GRANDE could include in its financial statement?",
        "tables": [
            "|    | Borrowing date                             | 1 January 2009                          |\n|:--:|---------------------------------------|----------------------------------|\n|    | Amount borrowed                          | 500 million Brazilian real (BRL) |\n|    | Annual interest rate                 | 14 percent                             |\n|    | Term of the loan                       | 3 years                                   |\n| Payment method  |                                       | Annual payment of interest only. Principal amortization is due at the end of the loan term. |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    amount_borrowed = 500  # in million BRL\n    annual_interest_rate = 0.14\n    term_of_loan = 3  # years\n    temp_investment_return = 10  # in million BRL\n    \n    # Since interest is paid annually, we need to calculate the total interest paid over the term of the loan\n    annual_interest_payment = amount_borrowed * annual_interest_rate\n    \n    # The total interest paid over the term of the loan is the annual interest payment times the term of the loan\n    # However, since the question asks for interest associated with the plant's build, which takes two years,\n    # the total interest for two years should be calculated.\n    total_interest_paid_during_build = annual_interest_payment * 2\n\n    # Deduct the temporary investment return from temporary investment of the loan funds\n    total_interest_include_in_statement = total_interest_paid_during_build - temp_investment_return\n    \n    # return answer in million BRL\n    return total_interest_include_in_statement\n\n# Call the solution function and print the result\nresult = solution()\nprint(f\"The sum of the interest associated with the plant's build that RIO GRANDE could include in its financial statement is: {result} million BRL\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-370",
        "question": "John, CFA, is assessing the value of Corporation X. With the present dividend and the necessary return rate of $0.5 per share and 10% respectively, he anticipates that the dividend will continue to grow at its current rate of 4.5% per year indefinitely. What is the intrinsic value of Corporation X shares according to the Gordon Growth Model?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the intrinsic value of Corporation X shares according to the Gordon Growth Model, we will use the formula:\n\n\\[ P = \\frac{D_1}{r - g} \\]\n\nWhere:\n- \\( P \\) is the price (intrinsic value) of the stock,\n- \\( D_1 \\) is the dividend expected next year,\n- \\( r \\) is the required rate of return, and\n- \\( g \\) is the growth rate of dividends.\n\nGiven that the dividend is expected to grow at a constant rate, \\( D_1 \\) would be this year's dividend multiplied by \\( 1 + g \\).\n\nLet's write the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    D0 = 0.5  # Dividend per share \n    r = 0.10  # Required return rate (10% or 0.10)\n    g = 0.045  # Growth rate of the dividend (4.5% or 0.045)\n    \n    # Do math calculation to get the answer\n    D1 = D0 * (1 + g)  # Calculate next year's expected dividend\n    P = D1 / (r - g)  # Gordon Growth Model formula\n    \n    # return answer\n    return P\n\n# The value returned by the solution function is the answer\nprint(f\"The intrinsic value of Corporation X shares: ${solution():.2f}\")\n```\n\nWhen this program is executed, it will print the intrinsic value of Corporation X shares."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-371",
        "question": "According to the provided table, can you compute the mean absolute deviation of the monthly stock returns for Ivy Corporation?",
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n| --- | --- | --- | --- | --- | --- |\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly, here's a Python program that computes the mean absolute deviation of the monthly stock returns for Ivy Corporation using the given table.\n\n```python\ndef solution():\n    # Define variables name and value\n    monthly_returns = [20, 4, -5, 12, 3, 12]\n    \n    # Calculate mean of the monthly returns\n    mean_return = sum(monthly_returns) / len(monthly_returns)\n    \n    # Calculate absolute deviations and mean absolute deviation\n    absolute_deviations = [abs(x - mean_return) for x in monthly_returns]\n    mean_absolute_deviation = sum(absolute_deviations) / len(absolute_deviations)\n    \n    # return answer\n    return mean_absolute_deviation\n\n# Execute function to get the result\nprint(solution())\n```\n\nThis program will print the mean absolute deviation of the monthly stock returns for Ivy Corporation according to the data provided in the table."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-372",
        "question": "XYZ Corporation has gone into a forward rate agreement (FRA) in which they will receive a continuous compounding rate of 3.75% on a principal amount of USD 1 million from the end of the first year to the end of the second year. The zero rates for one and two years are 3.25% and 3.50%, respectively. What is the value of the FRA at the inception of the agreement?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To find the value of the FRA at inception, you need to calculate the present value of the difference between the agreed fixed rate from the FRA and the forward rate implied by the current zero rates (also taking into account the continuous compounding).\n\nThe formula for the forward rate (F) between two time points based on zero rates is:\n\nF = (R2*T2 - R1*T1) / (T2 - T1)\n\nwhere R1 is the zero rate for time T1 and R2 is the zero rate for time T2. We will then discount the difference between the FRA rate and the forward rate back to the present value.\n\nLet's now create a Python function implementing this logic:\n\n```python\nfrom math import exp\n\ndef solution():\n    # Define given variables\n    FRA_rate = 0.0375 # FRA rate of 3.75%\n    principal = 1000000 # Principal amount of USD 1 million\n    zero_rate_1 = 0.0325 # Zero rate for one year of 3.25%\n    zero_rate_2 = 0.0350 # Zero rate for two years of 3.50%\n    T1 = 1 # One year\n    T2 = 2 # Two years\n    \n    # Calculate the implied forward rate from the zero rates\n    forward_rate = (zero_rate_2 * T2 - zero_rate_1 * T1) / (T2 - T1)\n    \n    # Calculate the value of the FRA\n    # This is the present value of the payoff, which is the difference between the FRA rate and the implied \n    # forward rate, compounded continuously\n    FRA_value = principal * (FRA_rate - forward_rate) * exp(-zero_rate_2 * T2)\n    \n    # return the FRA value rounded to two decimal places\n    # as it's a common practice to round currency values to two decimal places\n    return round(FRA_value, 2)\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis function first calculates the implied forward rate using the given zero rates and then calculates the present value of the payoff of the FRA agreement. The present value of the payoff is then discounted back to the inception of the agreement using continuous compounding and the two-year zero rate. Finally, the result is rounded to two decimal places, since financial amounts are generally expressed to the nearest cent."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-373",
        "question": "The present three-year EUR interest rate benchmark for swap is 2.12% and both bonds annually yield interest. What is the G-spread measured in basis points (bps) on the corporate bond from the UK?",
        "tables": [
            "| Bond                         | Coupon Rate | Time-to-Maturity | Price  |\n|------------------------------|-------------|------------------|--------|\n| UK Government Benchmark Bond | 2%          | 3 years          | 100.25 |\n| UK Corporate Bond            | 5%          | 3 years          | 100.65 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gov_bond_coupon_rate = 0.02\n    corp_bond_coupon_rate = 0.05\n    swap_rate = 0.0212\n    time_to_maturity = 3  # in years\n    gov_bond_price = 100.25\n    corp_bond_price = 100.65\n    \n    # Calculate yield to maturity (YTM) for both bonds\n    # For simplicity of the problem we assume flat yield curve and use simple linear interpolation\n    gov_bond_yield = gov_bond_coupon_rate + (gov_bond_coupon_rate - swap_rate) / gov_bond_price * 100\n    corp_bond_yield = corp_bond_coupon_rate + (corp_bond_coupon_rate - swap_rate) / corp_bond_price * 100\n    \n    # Calculate G-spread in decimals\n    g_spread = corp_bond_yield - gov_bond_yield\n    \n    # Convert G-spread to basis points\n    g_spread_bps = g_spread * 10000\n    \n    # round the result\n    answer = round(g_spread_bps, 2)\n    \n    # return answer\n    return answer\n\n# Call the function to check\nprint(solution())\n```\n\nPlease note that calculating the yield to maturity (YTM) accurately often involves more complex financial models and iteration methods, such as the Newton-Raphson method, to solve for YTM. However, for the purposes of this question, we applied a simplified linear approximation which might not reflect the actual YTM calculation in real-world scenarios. If more precision is required, a more sophisticated yield calculation method should be employed."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-374",
        "question": "Considering that the actual return on pension plan assets of Pacific Reserve surpasses its predicted return, what is the company's total periodical pension expense (in $ thousands) for 2013 as displayed in Exhibit 2?",
        "tables": [
            "|                                                      |        |\n|------------------------------------------------------|--------|\n|Exhibit 2  Atlantic Preserves, Inc.                   |        |\n|Selected Information from Note F of the 2013 Annual Financial Statements|        |\n|Relating to the Company's Defined Benefit Pension Plan (in $ thousands) |        |\n|Start-of-year pension obligation                      |72,544  |\n|Start-of-year plan assets                             |60,096  |\n|End-of-year pension obligation                        |74,077  |\n|End-of-year plan assets                               |61,812  |\n|Current service cost                                  |1,151   |\n|Interest cost                                         |5,441   |\n|Actual return on plan assets                          |5,888   |\n|Expected return on plan assets                        |4,597   |\n|Benefits paid to retired employees                    |5,059   |\n|Employer's contributions                              |887     |\n|Amortization of past service costs                    |272     |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_service_cost = 1151\n    interest_cost = 5441\n    expected_return_on_plan_assets = 4597\n    amortization_of_past_service_costs = 272\n    \n    # Do math calculation to get the answer\n    # Periodic pension expense = current service cost + interest cost - expected return on plan assets + amortization of past service costs\n    periodic_pension_expense = current_service_cost + interest_cost - expected_return_on_plan_assets + amortization_of_past_service_costs\n    \n    # return answer\n    return periodic_pension_expense\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-375",
        "question": "What will be the earnings per share for Blanchard Inc. after repurchasing 100,000 stocks, assuming they borrow precisely the required amount of money for this transaction?",
        "tables": [
            "| Shares outstanding before buyback | 3.1 million |\n| --- | --- |\n| Earnings per share before buyback | $4.00 |\n| Share price at time of buyback | $50 |\n| After-tax cost of borrowing | 6% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding_before = 3.1e6  # Shares before buyback\n    earnings_per_share_before = 4.00  # EPS before buyback\n    share_price = 50  # Share price at the time of buyback\n    shares_repurchased = 100000  # Shares to be repurchased\n    after_tax_cost_of_borrowing = 0.06  # Cost of borrowing after tax\n    \n    # Total earnings before buyback\n    total_earnings = shares_outstanding_before * earnings_per_share_before\n    \n    # Cost to repurchase the shares\n    cost_to_repurchase = shares_repurchased * share_price\n    \n    # Interest expense from borrowing\n    interest_expense = cost_to_repurchase * after_tax_cost_of_borrowing\n    \n    # Earnings after interest expense\n    earnings_after_interest = total_earnings - interest_expense\n    \n    # New number of shares outstanding after buyback\n    shares_outstanding_after = shares_outstanding_before - shares_repurchased\n    \n    # Calculate the new earnings per share\n    earnings_per_share_after = earnings_after_interest / shares_outstanding_after\n    \n    # Return the answer\n    return round(earnings_per_share_after, 2)  # Round to 2 decimal places for financial precision\n\n# Run the solution function\nprint(f\"The EPS after repurchasing 100,000 stocks: {solution()}\")\n```\n\nThis program defines the initial conditions (e.g., the number of shares outstanding before the buyback and the earnings per share), calculates the total earnings before the buyback, computes the cost to repurchase the shares and the resulting interest from borrowing that amount, then deducts the interest expense to get the post-buyback earnings, and finally divides it by the new number of shares outstanding to determine the new earnings per share. The result is rounded to two decimal places, which is common in financial reporting."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-376",
        "question": "What is the return of the perpetual annuity if its price is 870,000 and it pays annually $50,000?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! The formula to calculate the return of a perpetual annuity (also known as the yield) is:\n\n\\[ \\text{Return} = \\frac{\\text{Annual Payment}}{\\text{Price}} \\]\n\nHere's the Python program to calculate the return of the perpetual annuity:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 50000\n    price = 870000\n    \n    # Do math calculation to get the answer\n    annuity_return = annual_payment / price\n    \n    # return answer\n    return annuity_return\n\n# You can call the function and print the answer if you wish\n# print(solution())\n```\nBy running `solution()`, you would obtain the return value of the perpetual annuity based on the given price and the annual payment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-377",
        "question": "A marketplace has the following limit orders standing on its book for a specific share: John places a day order to sell 1,000 shares, limit £19.83. Supposing that no further purchase orders are placed on that day after John's order, what would be John’s average trade price?",
        "tables": [
            "|        | Bid Size      | Offer Size     |\n|--------|---------------|----------------|\n| Buyer  |(Number of shares)| Limit price(£) | (Number of shares) | Seller|\n|-------|---------------|--------------|----------------|--------|\n| Keith  | 1,000         | 19.70        |                |       |\n| Paul   | 200          | 19.84        |                |       |\n| Ann    | 400          | 19.89        |                |       |\n| Mary   | 300          | 20.02        |                |       |\n|        |               | 20.03        | 800            | Jack  |\n|        |               | 20.11        | 1,100          | Margaret |\n|        |               | 20.16        | 400            | Jeff   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    john_shares_to_sell = 1000\n    john_limit_price = 19.83\n    orders = [\n        {\"size\": 1000, \"price\": 19.70, \"type\": \"buy\"},\n        {\"size\": 200, \"price\": 19.84, \"type\": \"buy\"},\n        {\"size\": 400, \"price\": 19.89, \"type\": \"buy\"},\n        {\"size\": 300, \"price\": 20.02, \"type\": \"buy\"},\n        {\"size\": 800, \"price\": 20.03, \"type\": \"sell\"},\n        {\"size\": 1100, \"price\": 20.11, \"type\": \"sell\"},\n        {\"size\": 400, \"price\": 20.16, \"type\": \"sell\"},\n    ]\n\n    # Filter out orders that John can sell to, those whose bid is equal to or more than his asking price\n    valid_orders = [order for order in orders if order[\"price\"] >= john_limit_price and order[\"type\"] == \"buy\"]\n\n    # Sort the list of valid orders to ensure John sells to the highest bidders first\n    valid_orders = sorted(valid_orders, key=lambda x: x[\"price\"], reverse=True)\n\n    # Do math calculation to get the average trade price\n    shares_sold = 0\n    total_revenue = 0\n    for order in valid_orders:\n        if shares_sold < john_shares_to_sell:\n            shares_transaction = min(order[\"size\"], john_shares_to_sell - shares_sold)\n            shares_sold += shares_transaction\n            total_revenue += shares_transaction * order[\"price\"]\n    \n    # Ensure that John is able to sell his shares\n    if shares_sold < john_shares_to_sell:\n        raise ValueError(\"John is not able to sell all of his shares.\")\n\n    average_trade_price = total_revenue / shares_sold\n    return average_trade_price\n\n# Call the function and print the result for testing purposes\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-378",
        "question": "If the Break-even inflation rate for Microsoft is 5%, the real default-free interest rate is 4.5%, and the anticipated future inflation is 3.5%. Can you determine the uncertainty of future inflation?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    break_even_inflation_rate = 0.05\n    real_default_free_interest_rate = 0.045\n    anticipated_future_inflation = 0.035\n    \n    # Do math calculation to get the answer\n    # The Fisher equation states that: Nominal Interest Rate = Real Interest Rate + Expected Inflation\n    # Here, we are given the Break-even inflation rate, which can be seen as the market's expectation of future inflation\n    # that equates the nominal return on a nominal bond and an inflation-protected bond.\n    # The uncertainty of future inflation can be thought of as the difference between the market's expectation \n    # (break_even_inflation_rate) and the anticipated future inflation (anticipated_future_inflation).\n    uncertainty_of_future_inflation = break_even_inflation_rate - anticipated_future_inflation\n    \n    # return answer\n    return uncertainty_of_future_inflation\n\n# The output of the function should be the uncertainty of future inflation\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-379",
        "question": "The corporation TechnoSphere recently acquired and set up a new apparatus for its production factory. What should be the cumulative expense of the apparatus displayed on TechnoSphere's financial statement, given the costs the company had to bear?",
        "tables": [
            "| Purchase price | $12,980 |\n|----------------|---------|\n| Freight and insurance | $1,200 |\n| Installation | $700 |\n| Testing | $100 |\n| Maintenance staff training costs | $500 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 12980\n    freight_insurance = 1200\n    installation = 700\n    testing = 100\n    training_costs = 500\n    \n    # Do math calculation to get the answer\n    total_expense = purchase_price + freight_insurance + installation + testing + training_costs\n    \n    # return answer\n    return total_expense\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-380",
        "question": "What is the discount rate if a 30-day Treasury bill is priced at 99.5?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here is the Python program to calculate the discount rate for a 30-day Treasury bill priced at 99.5:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Treasury bills have a face value of $100\n    purchase_price = 99.5  # T-bill is priced at 99.5\n    days_to_maturity = 30  # Maturity period for the T-bill is 30 days\n    \n    # Do math calculation to get the answer\n    discount = face_value - purchase_price  # Calculate the discount amount\n    discount_rate = (discount / purchase_price) * (365 / days_to_maturity)  # Calculate the annualized discount rate\n    \n    # return answer\n    return discount_rate * 100  # return percentage discount rate\n\n# Calling the function to get the discount rate\nprint(solution())\n```\n\nThe `solution` function calculates the discount using the face value and purchase price, then annualizes the rate based on a 365-day year. The discount rate is returned as a percentage by multiplying the final result by 100."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-381",
        "question": "For a one-year bond rated BBB, the spread over risk-free Treasuries of the same maturity is 2.5%. If all non-credit factors such as liquidity risk and taxes contribute to a 1% spread, what's the assumed default probability for this bond, if the loss given default rate is 60%?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_spread = 0.025  # Total spread over risk-free Treasuries\n    non_credit_spread = 0.01  # Spread attributed to non-credit factors\n    loss_given_default = 0.60  # Loss given default rate (60%)\n\n    # Credit spread is the portion of the total spread attributable to the default risk\n    credit_spread = total_spread - non_credit_spread\n    \n    # The default probability is calculated as the credit spread divided by the loss given default rate\n    default_probability = credit_spread / loss_given_default\n    \n    # return answer\n    return default_probability\n\n# Call the function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-382",
        "question": "The specific data of bond B is given below: What would be the YTM if it is transformed into a quarterly periodicity?",
        "tables": [
            "|  | Bond A |\n| --- | --- |\n| Periodicity | semiannually |\n| Par | 100 |\n| Price | 105 |\n| YTM | 4% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the YTM (Yield to Maturity) of bond B when it is transformed into a quarterly periodicity, we need to take into account the current YTM of Bond A, which is given as a semiannual rate, and convert it into a quarterly rate.\n\nSince the YTM for Bond A is given as an annual rate compounded semiannually, we need to find the effective semiannual interest rate first, then convert it to the equivalent effective quarterly interest rate.\n\nThe formula to annualize a semiannual rate is:\n\\( (1 + r_{semiannual})^2 = 1 + r_{annual} \\),\n\nwhere \\( r_{semiannual} \\) is the effective semiannual rate, and \\( r_{annual} \\) is the given annual YTM.\n\nWe then take the effective annual rate and convert it to a quarterly rate using the inverse operation:\n\\( r_{quarterly} = (1 + r_{annual})^{1/4} - 1 \\).\n\nLet's write the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    par = 100\n    price = 105\n    ytm_annual = 0.04  # YTM as an annual rate\n\n    # Convert the annual rate compounded semiannually to an effective annual rate\n    r_semiannual = (1 + ytm_annual / 2) ** 2 - 1\n    \n    # Convert the effective annual rate to an effective quarterly rate\n    r_quarterly = (1 + r_semiannual) ** (1/4) - 1\n    \n    # Convert the effective quarterly rate to an annualized quarterly rate\n    ytm_quarterly_annualized = r_quarterly * 4\n    \n    # return answer\n    return ytm_quarterly_annualized\n\n# Example usage:\nanswer = solution()\nprint(f\"The YTM for Bond B with quarterly periodicity is {answer:.4f} or {answer*100:.2f}% annually.\")\n```\n\nPlease note that in bond pricing, typically, when calculating YTM for different compounding periods, the semiannual rate should be adjusted to reflect the equivalent rate for the desired compounding period. The returned answer shows both the decimal and percentage form of the annualized YTM for Bond B with quarterly periodicity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-383",
        "question": "If a business purchased a client database for $300,000, foreseeing its usefulness for three years, along with a trademark worth $5,000,000 expecting it to be useful indefinitely but it's required to renew it every 10 years with the Patent and Trademark Bureau for a small fee or it will become void. Given that the business applies straight-line depreciation for all its non-physical properties, what would the yearly amortization cost for these two properties amount to?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    client_database_cost = 300000\n    client_database_useful_life = 3  # years\n    trademark_cost = 5000000\n    trademark_useful_life = None  # Indefinite, no amortization\n\n    # Do math calculation to get the answer\n    # Amortize client database over 3 years\n    client_database_annual_amortization = client_database_cost / client_database_useful_life\n    # Trademark has an indefinite life, therefore it is not amortized\n    trademark_annual_amortization = 0  # As per the small fee, this is not considered a part of amortization\n\n    # Sum up the annual amortization costs of both properties\n    total_annual_amortization = client_database_annual_amortization + trademark_annual_amortization\n    \n    # return answer\n    return total_annual_amortization\n\n# Call the function to get the answer\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-384",
        "question": "Given the data provided, what is the company's cash flow generated from operations?",
        "tables": [
            "| Net income                           | $200,000 |\n|--------------------------------------|----------|\n| Decrease in accounts receivable      | 10,000   |\n| Depreciation                         | 36,000   |\n| Increase in inventory                | 12,000   |\n| Increase in accounts payable         | 17,000   |\n| Decrease in wages payable            | 8,000    |\n| Increase in deferred tax liabilities | 12,000   |\n| Profit from the sale of equipment    | 6,000    |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 200000\n    decrease_in_accounts_receivable = 10000\n    depreciation = 36000\n    increase_in_inventory = 12000\n    increase_in_accounts_payable = 17000\n    decrease_in_wages_payable = 8000\n    increase_in_deferred_tax_liabilities = 12000\n    profit_from_sale_of_equipment = 6000\n    \n    # Do math calculation to get the answer\n    cash_flow_from_operations = (net_income +\n                                 decrease_in_accounts_receivable +\n                                 depreciation -\n                                 increase_in_inventory +\n                                 increase_in_accounts_payable -\n                                 decrease_in_wages_payable +\n                                 increase_in_deferred_tax_liabilities -\n                                 profit_from_sale_of_equipment)\n    \n    # return answer\n    return cash_flow_from_operations\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nThis function calculates the company's cash flow from operations using the indirect method, where non-cash expenses are adjusted and changes in working capital accounts are factored in."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-385",
        "question": "Company N is financed with a 60% debt and 40% equity ratio. Using the RI model for valuation, John has gathered the necessary data in the provided chart. What is Company N's residual income?",
        "tables": [
            "| Total asset | $5,000 million |\n| --- | --- |\n| ROE | 15% |\n| Cost of equity | 12.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_asset = 5000  # in millions of dollars\n    roe = 0.15  # Return on Equity\n    cost_of_equity = 0.125  # Cost of equity\n\n    # Since ROE = Net Income / Shareholder's Equity\n    # and Shareholder's Equity = Equity Ratio * Total Assets\n    # We can calculate the Net Income using ROE\n    equity_ratio = 0.4  # 40% equity ratio\n    shareholders_equity = equity_ratio * total_asset  # in millions of dollars\n    net_income = roe * shareholders_equity  # in millions of dollars\n\n    # Residual Income is calculated as:\n    # Residual Income = Net Income - (Cost of Equity * Shareholder's Equity)\n    residual_income = net_income - (cost_of_equity * shareholders_equity)  # in millions of dollars\n\n    # return residual_income\n    return residual_income  # in millions of dollars (because we are working with million-dollar units)\n\n# Execute the function and print the result for verification\nprint(solution())\n```\n\nThis program should return the residual income of Company N in millions of dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-386",
        "question": "If a customer buys a 6-year bond at a price of 109.83, with an 8% coupon rate where the interest is paid yearly. Supposing the consistent market rate during this time is 6%, what would be the horizon yield if the customer decides to offload the bond at the close of year 5?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\nimport numpy_financial as npf\n\ndef solution():\n    bond_price = 109.83\n    coupon_rate = 0.08\n    market_rate = 0.06\n    years_to_maturity = 6\n    years_held = 5\n    face_value = 100  # Typically, bonds have a face value of $100\n\n    # Calculate the coupon payment\n    coupon_payment = face_value * coupon_rate\n\n    # Calculate the selling price of the bond after 5 years\n    # The bond is being sold 1 year before maturity, so it will sell at face value\n    selling_price = face_value\n\n    # Calculate the present value of coupon payments over the years held\n    # We use numpy's financial.pv function to calculate present value of a series of cash flows\n    present_value_coupons = sum([npf.pv(market_rate, t, coupon_payment, 0) for t in range(1, years_held + 1)])\n\n    # Calculate the present value of the bond's selling price at the end of year 5\n    present_value_selling_price = npf.pv(market_rate, years_held, 0, selling_price)\n\n    # Calculate the total present value of all cash flows\n    total_present_value = present_value_coupons + present_value_selling_price\n\n    # Calculate the horizon yield\n    horizon_yield = ((total_present_value / bond_price) ** (1 / years_held)) - 1\n\n    return horizon_yield\n\n# Run the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-387",
        "question": "If the preferred shares of Baxter corporation are anticipated to pay a perpetual annual dividend of $12 and the constant required rate of return is 15%, what should the value of the preferred stock be?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define dividend and rate of return\n    annual_dividend = 12\n    required_rate_of_return = 0.15\n    \n    # Use the dividend discount model (perpetuity) to calculate the stock value\n    stock_value = annual_dividend / required_rate_of_return\n    \n    # return stock value\n    return stock_value\n\n# Call the solution function and print the value if you want to display the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-388",
        "question": "What is the likelihood of a variable falling between 10 and 20 for a random variable adhering to a continuous uniform distribution within the span of 5 to 25?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the likelihood of a variable falling between 10 and 20 for a random variable with a continuous uniform distribution from 5 to 25:\n\n```python\ndef solution():\n    # Define variables name and value\n    a = 5 # Lower bound of the distribution\n    b = 25 # Upper bound of the distribution\n    x1 = 10 # Lower bound of the desired range\n    x2 = 20 # Upper bound of the desired range\n    \n    # The probability density function of a uniform distribution is 1 / (b - a)\n    # The likelihood of the variable falling between x1 and x2 is (x2 - x1) * (1 / (b - a))\n    \n    # Do math calculation to get the answer\n    likelihood = (x2 - x1) * (1 / (b - a))\n    \n    # return answer\n    return likelihood\n\n# You can call the function and print the result to see the likelihood\nprint(solution())\n```\nIf you run this program, it will return the likelihood or probability of the variable falling between 10 and 20 in the specified uniform distribution."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-389",
        "question": "Ultimately, in 2016, Henderson stated that BBBC bought 100% of SongBox (SB), a specific cable music channel in an all-stock transaction. At the point of acquisition, SB had intangible assets for broadcast licenses valued at $2,500. BBBC evaluated the fair market value of these licenses to be $5,500 at that date and estimated the SongBox brand name value to be $2,000, all values are in thousands. The acquisition did not create any goodwill. Prior to the amortization expense calculation, what is the rise in BBBC's intangible assets (in thousands) resulting from the 2016 purchase of SB?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Initial value of SB's intangible assets\n    initial_intangible_assets = 2500\n    \n    # Fair market value of SB's broadcast licenses\n    fair_market_value_licenses = 5500\n    \n    # Estimated value of SB's brand name\n    brand_name_value = 2000\n    \n    # Do math calculation to get the answer\n    # Increase in intangible assets is the difference in broadcast license values plus the value of the brand name\n    increase_in_intangible_assets = (fair_market_value_licenses - initial_intangible_assets) + brand_name_value\n    \n    # return answer\n    return increase_in_intangible_assets\n\n# Run the solution function and print the result\nprint(solution())\n```\n\nThe Python program will calculate the increase in BBBC's intangible assets due to the purchase of SongBox. It uses the difference in the fair market value and the book value of the intangible assets plus the value of the brand name to find the increase."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-390",
        "question": "According to the model lnNPMi=b0+b1FATOi, which is based on data collected from a sample of 35 companies in the most recent fiscal year, what is the projected net profit margin for a corporation that has a fixed asset turnover ratio of 2 times? This is what Sam Braxton is studying, focusing on the relationship between companies' net profit margins (in percent) and their fixed asset turnover (FATO).",
        "tables": [
            "|                 | Coefficients | Standard Error | t- Statistic | p-Value |\n|-----------------|--------------|----------------|--------------|---------|\n| Intercept       | 0.5987       | 0.0561         | 10.6749      | 0.0000  |\n| FATO            | 0.2951       | 0.0077         | 38.5579      | 0.0000  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\nimport numpy as np\n\ndef solution():\n    # Define coefficients\n    b0 = 0.5987\n    b1 = 0.2951\n\n    # Define the fixed asset turnover ratio (FATO)\n    fato = 2\n\n    # Calculate projected lnNPM using regression equation\n    ln_npm = b0 + b1 * fato\n    \n    # Convert lnNPM to NPM (net profit margin in percent)\n    # by applying the exponential function and multiplying by 100\n    npm = np.exp(ln_npm) * 100\n    \n    # return answer\n    return npm\n\n# Call the function and print the result for validation\nprint(solution())\n```\nThis program uses the given coefficients from the table to calculate the projected net profit margin for a company with a given fixed asset turnover ratio of 2. It converts the log of the NPM (lnNPM) back to the NPM in percentage terms."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-391",
        "question": "What was the 2010 income tax expense (in thousands) for the business, based on the provided details about the business?",
        "tables": [
            "| (all figures in $ thousands) | 2010 | 2009 |\n|-----------------------------|------|------|\n| Deferred tax assets        | 200  | 160  |\n| Deferred tax liabilities   | (450)| (360)|\n| Net deferred tax liabilities | (250)| (200)|\n|                             |      |      |\n| Earning before taxes         | 4000 | 3800 |\n| Income taxes at the statutory rate| 1200| 1140|\n| Income tax payable (Current income tax expense)| 1000 | 900 |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the income tax expense for 2010, we need to consider both the current income tax expense and the change in deferred tax liabilities. The income tax expense is the sum of the current income tax payable and the change in net deferred tax liabilities.\n\nThe current income tax payable in 2010 is already provided as $1000 (in thousands).\n\nThe change in net deferred tax liabilities from 2009 to 2010 is the difference between the net deferred tax liabilities of the two years. From the table, we can see that in 2009 the net deferred tax liabilities were $200 (in thousands) and in 2010 it was $250 (in thousands). This results in an increase in net deferred tax liabilities of $50 (in thousands) which represents deferred income tax expense.\n\nNow, let's write a Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_income_tax_payable_2010 = 1000\n    net_deferred_tax_liabilities_2009 = 200\n    net_deferred_tax_liabilities_2010 = 250\n    \n    # Do math calculation to get the change in deferred tax liabilities\n    change_in_deferred_tax_liabilities = net_deferred_tax_liabilities_2010 - net_deferred_tax_liabilities_2009\n    \n    # Calculate the total income tax expense\n    total_income_tax_expense = current_income_tax_payable_2010 + change_in_deferred_tax_liabilities\n    \n    # return answer\n    return total_income_tax_expense\n\n# Call the function to get the result\nprint(solution())\n```\nThe function `solution` would return the 2010 income tax expense for the company, in thousands."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-392",
        "question": "A set of 25 data points has an average of 8 and a standard deviation of 15. What is the standard error of this average?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\nfrom math import sqrt\n\ndef solution():\n    # Define variables name and value\n    standard_deviation = 15\n    sample_size = 25\n    \n    # Do math calculation to get the standard error\n    standard_error = standard_deviation / sqrt(sample_size)\n    \n    # return answer\n    return standard_error\n    \n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-393",
        "question": "Recently, an analyst named Benedict from a finance corporation collected data for a price-weighted index made up of securities G,H,I. What is the index's price return for that period?",
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n| -------- | ------------ | ------ | ------ |\n| G        | 15.00        | 17.00  | 500    |\n| H        | 35.00        | 33.00  | 300    |\n| 1        | 37.00        | 40.00  | 200    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program that calculates the price return for the provided price-weighted index:\n\n```python\ndef solution():\n    # Define variables: beginning and ending prices, and shares for each security\n    beg_prices = {'G': 15.00, 'H': 35.00, 'I': 37.00}\n    end_prices = {'G': 17.00, 'H': 33.00, 'I': 40.00}\n    shares = {'G': 500, 'H': 300, 'I': 200}\n    \n    # Calculate the sum of the beginning and ending prices\n    sum_beg_prices = sum(beg_prices.values())\n    sum_end_prices = sum(end_prices.values())\n\n    # Calculate price return: (Ending index value - Beginning index value) / Beginning index value * 100\n    price_return = ((sum_end_prices - sum_beg_prices) / sum_beg_prices) * 100\n    \n    return price_return\n\n# Call the function and print the answer\nprint(solution())\n```\n\nPlease note that for a price-weighted index, the number of shares is not relevant to calculating the index value. Only the prices of the securities are considered. The index value is typically calculated by taking the sum of the prices of the securities and dividing by a divisor, but since the question asks for the return and does not mention a divisor, we simply calculate the percentage change based on the sum of the prices."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-394",
        "question": "Firm N adheres to U.S.GAAP, it expended $150 million on acquiring inventory, $10 million on transporting the goods to their existing location and an extra $10 million on their sale. What is the inventory cost of firm N?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_cost = 150000000  # Cost of acquiring inventory\n    transportation_cost = 10000000  # Cost of transporting goods to their existing location\n    selling_cost = 10000000  # Cost on their sale\n    \n    # In U.S. GAAP, inventory cost includes purchase cost and transportation cost,\n    # but excludes selling costs.\n    \n    # Do math calculation to get the inventory cost\n    inventory_cost = purchase_cost + transportation_cost\n    \n    # return answer\n    return inventory_cost\n\n# Call the function and print the result for verification\nprint(solution())\n```\nWhen following U.S. Generally Accepted Accounting Principles (U.S. GAAP), the cost that should be included in the inventory are purchase cost and transportation costs. The selling costs are considered to be period costs and should not be included in the inventory cost. Therefore, we only sum up the purchase cost and transportation cost in the calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-395",
        "question": "If the $150 million distressed bond portfolio managed by Sarah Brown undergoes a 4-sigma daily event, can you estimate the change in the portfolio's value? Sarah, who conducts stress tests on the portfolio, has experienced numerous days over the past two years where the portfolio's daily value change was more than 3 standard deviations. This portfolio has an annualized return of 12% and an annualized return volatility of 25%.",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program to calculate the change in value of the distressed bond portfolio after a 4-sigma event:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    portfolio_value = 150000000  # 150 million dollars\n    annual_return = 0.12  # 12% annual return\n    annual_volatility = 0.25  # 25% annual volatility\n    \n    # Since we are calculating the daily change, we need to adjust annual values\n    # There are roughly 252 trading days in a year\n    daily_volatility = annual_volatility / (252 ** 0.5)\n    \n    # Calculate the 4-sigma move in terms of daily volatility\n    # Assuming returns are normally distributed, 4-sigma corresponds to the z-score\n    four_sigma_move = 4 * daily_volatility\n    \n    # Calculate the value change for a 4-sigma move\n    value_change = portfolio_value * four_sigma_move\n    \n    # return answer\n    return value_change\n\n# You can print out the answer by calling the function\nprint(solution())\n```\n\nThis program assumes that the daily returns are normally distributed and uses the 4-standard deviation move (equivalent to the z-score in a normal distribution) to calculate the expected change in portfolio value due to a 4-sigma event. The annual volatility needs to be adjusted to daily volatility since we are considering a daily event, and there are approximately 252 trading days in a year."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-396",
        "question": "If a firm has total variable expenses of $4 million and set expenses of $3 million, what should be its minimal total income to remain in business over the long haul?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_variable_expenses = 4000000\n    total_fixed_expenses = 3000000\n    \n    # Do math calculation to get the answer\n    # The minimum total revenue is the sum of both variable and fixed expenses. \n    # This is because the company needs to cover all of its costs to remain in business.\n    minimum_total_revenue = total_variable_expenses + total_fixed_expenses\n    \n    # return answer\n    return minimum_total_revenue\n\n# Uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-397",
        "question": "Henry Miller and his team gather extensive statistical data on the automobile market. From the information, they deduce that the average cost of SUVs exceeds $46,435 in their nation. Subsequently, they randomly pick 64 SUVs with an average value of $46,760. Assuming that the population's standard deviation is 1370, Henry Miller performs a hypothesis test to verify their hypothesis. What is the figure for the calculated test statistic?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this, we'll use the formula for the calculated test statistic in hypothesis testing for a sample mean, which is:\n\n\\[\nZ = \\frac{\\bar{x} - \\mu_0}{\\sigma / \\sqrt{n}}\n\\]\n\nwhere: \n- \\( \\bar{x} \\) is the sample mean\n- \\( \\mu_0 \\) is the population mean being tested against (in this case, $46,435)\n- \\( \\sigma \\) is the population standard deviation\n- \\( n \\) is the sample size\n\nLet's use this formula to generate the required Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    sample_mean = 46760        # Sample mean value of SUVs\n    population_mean = 46435     # Hypothesized population mean value of SUVs\n    population_std_dev = 1370   # Population standard deviation\n    sample_size = 64            # Number of SUVs picked for the sample\n    \n    # Do math calculation to get the test statistic (Z-score)\n    z_score = (sample_mean - population_mean) / (population_std_dev / math.sqrt(sample_size))\n    \n    # return the test statistic\n    return z_score\n\n# You can uncomment the following line to test the function\n# print(solution())\n```\n\nThis function, when executed, will return the Z-score, which is the calculated test statistic for Henry Miller's hypothesis test."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-398",
        "question": "What would be the inventory on 31 December 2006 for a US business that employs the last in, first out (LIFO) accounting system for inventory, according to the data reviewed by the analyst, once the values have been adjusted to adapt to the first in, first out (FIFO) method?",
        "tables": [
            "|                               | 31 Dec 05 |  31 Dec 06  |\n| ----------------------------- | --------- | ----------- |\n| Inventory reported on balance sheet | $500,000  | $600,000 |\n| LIFO reserve                  | $50,000   | $70,000  |\n| Average tax rate              | 30%       | 30%       |"
        ],
        "topic": "Accounting",
        "output": [
            "Certainly, here is a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    inventory_lifo = 600000\n    lifo_reserve_2006 = 70000\n    tax_rate = 0.30\n    \n    # Do math calculation to get the answer\n    # FIFO inventory = LIFO inventory + LIFO reserve\n    fifo_inventory = inventory_lifo + lifo_reserve_2006\n    \n    # return answer\n    return fifo_inventory\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will return the adjusted inventory figure according to FIFO accounting method for the year 2006, which is calculated by adding the LIFO reserve to the LIFO inventory."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-399",
        "question": "Given the information in Displays 1 and 2, when aligning a binomial interest rate tree beginning with the computation of implied forward rates illustrated in Display 2, what is the worth of the inferior one-period forward rate?",
        "tables": [
            "| Maturity | Par Rate | Spot Rate |\n|----------|---------|---------|\n| 1        | 2.5000% | 2.5000% |\n| 2        | 3.5000% | 3.5177% |",
            "|          | Time 0   | Time 1                  |\n|----------|----------|-------------------------|\n|          |          | 5.8365%                 |\n|          | 2.500%   |                         |\n|          |          | Lower one-period forward rate |\n\nNotes:\n- \"Exhibit 2. Calibration of Binomial Interest Rate Tree with Volatility= 25%\" is the title of the table in the HTML format, but Markdown doesn't support titles in tables. You might want to represent it as a title or subtitle in your document.\n- There's a lot of blank cells in your table. Be sure to fill in the right data or remove them if they're not necessary.\n- Your HTML table have inconsistent number of columns per row, this could lead into display errors in some browsers. Try to avoid this layout mistakes."
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To find the value of the lower one-period forward rate implied by the information in the table, we can use the relationship between spot rates, forward rates, and par rates. The forward rate can be calculated using the spot rates for the two periods. If we denote the one-year spot rate as \\( S_1 \\), the two-year spot rate as \\( S_2 \\), and the one-period forward rate at the end of the first year as \\( F_{1,2} \\), then we can use the following formula to find the forward rate:\n\n\\[ (1 + S_2)^2 = (1 + S_1)(1 + F_{1,2}) \\]\n\nGiven that \\( S_1 \\) and \\( S_2 \\) are provided in the table (2.5000% and 3.5177% respectively), we can find \\( F_{1,2} \\) using this formula:\n\n\\[ (1 + F_{1,2}) = \\frac{(1 + S_2)^2}{(1 + S_1)} \\]\n\nConverting the percentages to decimals, we have \\( S_1 = 0.025 \\) and \\( S_2 = 0.035177 \\). Let's write a Python program to calculate the lower one-period forward rate (implied forward rate) based on the provided spot rates.\n\n```python\ndef solution():\n    # Define the spot rates\n    S1 = 2.5000 / 100\n    S2 = 3.5177 / 100\n    \n    # Calculate the implied forward rate\n    implied_forward_rate = ((1 + S2)**2 / (1 + S1)) - 1\n    \n    # Convert it back to percentage\n    implied_forward_rate_percent = implied_forward_rate * 100\n    \n    # Return the answer with the correct precision\n    return implied_forward_rate_percent\n\n# You can call the function to see the result\nprint(solution())\n```\n\nThis Python function will calculate and return the lower one-period forward rate implied by the spot rates of the given maturities. Note that the result is given in percentage by multiplying the forward rate by 100 before returning it."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-400",
        "question": "Suppose the Smith account had a return of -5.3% in a specific month, during which the portfolio benchmark yielded a return of -5.5% and the market index returned -2.8%. What is the return of the Smith account attributing to the manager's style?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Certainly! To calculate the return attributable to the manager's style, we need to subtract the portfolio benchmark return from the Smith account return. This calculation will give us the amount by which the manager's performance deviated from the benchmark.\n\nHere's the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    smith_account_return = -5.3\n    portfolio_benchmark_return = -5.5\n    \n    # Do math calculation to get the answer\n    manager_style_return = smith_account_return - portfolio_benchmark_return\n    \n    # return answer\n    return manager_style_return\n\n# You can call the function to see the result\nprint(solution())\n```\n\nWhen you call `solution()`, it will return the manager's style return for the Smith account for that specific month."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-401",
        "question": "A telecommunications company based in Europe adheres to International Financial Reporting Standards (IFRS) and capitalizes costs of new product development. In 2014, they invested €25 million into new product development and reported an amortization expense of €10 million from the previous year's new product development. The cash flow from operations for this company was reported as €290 million. An analyst is drawing a comparison between this European company and a telecommunications provider in the US, and has chosen to adjust his financial statements to the US GAAP. Considering US GAAP and not taking tax effects into account, what would be the operational cash flow for the European telecommunications provider?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # According to US GAAP, research and development expenses should be expensed in the period they occur.\n    new_product_development_cost = 25000000  # Investment into new product development\n    amortization_expense = 10000000  # Amortization expense from the previous year's new product development\n    cash_flow_operations = 290000000  # Reported cash flow from operations\n    \n    # Do math calculation to get the answer\n    # Under US GAAP, the cash flow from operations would be reduced by the new product development costs\n    # and increased by the amortization expense, since under US GAAP these costs are expensed when incurred.\n    adjusted_cash_flow_operations = cash_flow_operations - new_product_development_cost + amortization_expense\n    \n    # return answer\n    return adjusted_cash_flow_operations\n\n# Note: The tax effects are not considered as specified in the prompt.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-402",
        "question": "Based on the given spot rates, what is the present value of the bond issued by Valencia Corp. that pays no coupon for the initial two years, and then commences to pay an annual coupon at a 9% rate until the bond matures after six years?",
        "tables": [
            "| Time to Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 8.0%      |\n| 2 years          | 7.5%      |\n| 3 years          | 7.0%      |\n| 4 years          | 6.5%      |\n| 5 years          | 6.0%      |\n| 6 years          | 5.5%      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the present value of the bond issued by Valencia Corp., we need to discount each of the cash flows at the appropriate spot rate for its respective time to maturity.\n\nHere's how we proceed with the calculation:\n- The bond pays no coupon for the first two years, so there are no cash flows to discount for those periods.\n- The bond then pays a 9% annual coupon starting from the third year until the sixth year. This means we will receive 9% of the par value (usually $1,000) at the end of the third, fourth, fifth, and sixth years. So the cash flows are $90 each for these years.\n- At the end of the sixth year, the bond matures, and the face value is repaid. Therefore, the final cash flow will be $1,000 (the face value) plus the $90 coupon payment for that year.\n\nWe can write the present value calculation as follows:\n\nPV = (C / (1+r1)^t1) + (C / (1+r2)^t2) + (C / (1+r3)^t3) + (C / (1+r4)^t4) + (FV + C) / (1+r5)^t5\n\nwhere PV is the present value, C is the coupon payment, r1 through r4 are the spot rates corresponding to each coupon payment's time to maturity, t1 through t4 are the respective times to maturity, and FV is the face value of the bond.\n\nLet's implement this in the Python program:\n\n```python\ndef solution():\n    # Define variables\n    coupon_rate = 0.09  # 9%\n    face_value = 1000   # Usually the face value of a bond is $1,000\n    spot_rates = [0.08, 0.075, 0.07, 0.065, 0.06, 0.055]  # Given spot rates\n    \n    # Calculate the present value of each coupon payment and the face value\n    present_value_coupons = sum((face_value * coupon_rate) / ((1 + spot_rates[i])** (i + 1)) for i in range(2, 6))\n    present_value_face_value = face_value / ((1 + spot_rates[5]) ** 6)\n    \n    # Calculate the total present value\n    present_value = present_value_coupons + present_value_face_value\n    \n    # return answer\n    return round(present_value, 2)\n\n# Let's call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the present value of the bond, and the `round` function is used to round the result to two decimal places.\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-403",
        "question": "Utilizing a two-period binomial model, Emily is looking to compute the terminal value of a put option. Given the current price of the underlying asset is $150 and the strike price stands at $120, the extent of an upward move is 1.69 and a downward move is 0.59. The option will only hold a positive value if the price falls below the strike price, otherwise its value will remain zero. How many terminal nodes could potentially offer a positive return?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 150\n    strike_price = 120\n    up_move = 1.69\n    down_move = 0.59\n    \n    # Calculate the price at each terminal node\n    up_up_price = current_price * up_move * up_move\n    up_down_price = current_price * up_move * down_move\n    down_up_price = current_price * down_move * up_move\n    down_down_price = current_price * down_move * down_move\n    \n    # Count the number of terminal nodes with a price below the strike price\n    positive_return_nodes = 0\n    for terminal_price in [up_up_price, up_down_price, down_up_price, down_down_price]:\n        if terminal_price < strike_price:\n            positive_return_nodes += 1\n    \n    # return answer\n    return positive_return_nodes\n\n# Call the function to get the result\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-404",
        "question": "If the one-year spot rate r(1) equals 4%, the forward rate for a one-year loan commencing in one year is 6%, and the forward rate for a one-year loan starting in two years is 8%, which one is the three-year spot rate out of the given rates?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly. To calculate the three-year spot rate, we can use the relation between spot rates and forward rates for discrete compounding, which tells us that the product of (1 plus the spot rates) raised to their respective periods should equal the product of (1 plus the forward rates) for their respective periods. This general equation for periods of 1, 2 and 3 years would look like this:\n\n(1 + r(0,1))^1 * (1 + f(1,2))^1 * (1 + f(2,3))^1 = (1 + r(0,3))^3\n\nOr, plugging in the known values:\n\n(1 + 0.04)^1 * (1 + 0.06)^1 * (1 + 0.08)^1 = (1 + r(0,3))^3\n\nWe need to solve for r(0,3), the three-year spot rate. Let's write the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define known rates\n    r1 = 0.04      # one-year spot rate\n    f12 = 0.06     # forward rate for a one-year loan commencing in one year\n    f23 = 0.08     # forward rate for a one-year loan starting in two years\n    \n    # Calculate the left side of the equation (1 + r(0,1))^1 * (1 + f(1,2))^1 * (1 + f(2,3))^1\n    left_side_product = (1 + r1) * (1 + f12) * (1 + f23)\n    \n    # Calculate the three-year spot rate (r(0,3)) by taking the cube root of the left side product and then subtracting 1\n    r03 = (left_side_product ** (1/3)) - 1\n    \n    # return answer as a percentage rounded to two decimal places\n    return round(r03 * 100, 2)\n\n# Call the function to obtain the answer\nprint(solution())\n```\n\nThe `solution()` function here performs the necessary mathematical operations to obtain the three-year spot rate, which is returned as a percentage rounded to two decimal places. The print statement at the end is used for displaying the calculated rate when calling the function."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-405",
        "question": "What is the value of Bond Z at the upper node at Time 1, when valuing it using the binomial tree shown in Display 1 and the selected data for both bonds given in Display 2?",
        "tables": [
            "|       | Time 0  | Time 1  | Time 2  |\n|-------|---------|---------|---------|\n|       |         |         | 2.7183% |\n|       |         | 2.8853% |         |\n|       | 1.500%  |         | 1.6487% |\n|       |         | 1.7500% |         |\n|       |         |         | 1.0000% |",
            "| Bond | Maturity | Coupon Rate |\n| --- | --- | --- |\n| Bond C | 2 years | 2.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the value of Bond Z at the upper node at Time 1, we can use the binomial model for interest rates as well as the given bond characteristics. The bond's value at each node of the binomial tree can be found by discounting its cash flows (coupon payment and face value) by the interest rates given for the respective nodes and paths.\n\nHere are the steps for calculating the value of Bond Z:\n1. Identify the bond's cash flows.\n2. Find the value at each node at Time 2 by discounting the bond's cash flows at the Time 2 interest rates.\n3. Discount the Time 2 values back to the upper node at Time 1 using the interest rate at Time 1 for the upper path.\n\nLet's perform these steps in our Python program:\n\n```python\ndef solution():\n    # Bond C characteristics\n    face_value = 100  # Assuming a face value of $100 for bond C\n    coupon_rate = 0.025  # 2.5% annual coupon rate\n    maturity = 2  # 2 years to maturity\n\n    # Time 2 interest rates\n    lower_rate_time_2 = 0.01  # 1.0000%\n    upper_rate_time_2 = 0.027183  # 2.7183%\n\n    # Time 1 interest rates\n    upper_rate_time_1 = 0.0175  # 1.7500%\n\n    # Cash flows at Time 2\n    coupon_payment = face_value * coupon_rate\n    face_value_payment = face_value\n\n    # Values at Time 2 nodes\n    upper_node_time_2_value = (coupon_payment + face_value) / (1 + upper_rate_time_2)\n    lower_node_time_2_value = (coupon_payment + face_value) / (1 + lower_rate_time_2)\n\n    # Value at the upper node at Time 1\n    z_upper_node_time_1_value = (coupon_payment + (upper_node_time_2_value + lower_node_time_2_value) / 2) / (1 + upper_rate_time_1)\n\n    return z_upper_node_time_1_value\n\n# Execute the function and print the result\nprint(solution())\n```\n\nThe above Python program assumes a face value of $100 for Bond C (which is typical but not given in the question). If the face value or other bond characteristics differ, they should be accordingly changed in the code. The above calculation averages the present values of the bond at the upper and lower nodes in the second time period to obtain the expected value in the earlier time period, as is usual in a binomial tree setting."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-406",
        "question": "A financial expert is looking to determine the comprehensive yield of an recent transaction carried out by an asset fund. The fund entered a completely secured long futures agreement in nearby soybean futures agreements at the listed futures cost of 755.0 (US cents/bushel). After three months, the entire futures agreement was shifted when the near-term futures cost was 768.0 and the further-term futures cost was 773.0. Throughout the three-month timeframe between the initiation of the initial long agreement and the adjustment of the contract, the security earned an yearly rate of 0.40%. What is the fund's three-month comprehensive yield on the soybean futures transaction?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To determine the fund's three-month comprehensive yield on the soybean futures transaction, we will need to carry out several calculations. These include:\n\n1. Calculate the gain from the change in the futures price.\n2. Calculate the gain from the security's yearly interest.\n3. Combine both gains and express them as a percentage over the starting futures cost.\n4. Adjust the annual yield to reflect a three-month period.\n\nHere's a Python program illustrating these steps:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_futures_price = 755.0   # US cents/bushel\n    near_term_futures_price = 768.0 # US cents/bushel when shifted\n    future_terms_futures_price = 773.0 # US cents/bushel for the further-term contract\n    annual_interest_rate = 0.004    # Annual security earning rate\n    months_in_a_year = 12\n    contract_duration_months = 3     # Duration of the contract in months\n    \n    # Calculate the gain on the futures contract\n    futures_price_gain = near_term_futures_price - initial_futures_price\n    \n    # Calculate the interest earned on the security over three months\n    interest_earned = (annual_interest_rate / months_in_a_year) * contract_duration_months\n    \n    # Calculate the total gain combining futures gain and interest earned\n    total_gain = futures_price_gain + (initial_futures_price * interest_earned)\n    \n    # Calculate the comprehensive yield\n    comprehensive_yield = (total_gain / initial_futures_price) * 100 # Convert to percentage\n    \n    # Return the answer\n    return comprehensive_yield\n\n# Call the solution function and print the answer\nprint(solution())\n```\n\nThis program will output the fund's comprehensive three-month yield on the soybean futures transaction as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-407",
        "question": "What is the delta of a long forward contract on a property with a 10% annum dividend yield and six months to maturity?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "In order to calculate the delta of a forward contract, we need to understand what delta represents and how it is calculated for different types of derivatives. Delta is a measure of the sensitivity of the price of a derivative to a change in the underlying asset's price. For a forward contract on a property, the delta is the change in the forward price with respect to a small change in the spot price of the underlying.\n\nFor a non-dividend-paying asset, the delta of a long forward contract is typically 1 because the forward price moves in a one-to-one relationship with the spot price. However, for a dividend-paying asset, the delta of a long forward contract would still be 1, since forward prices should already incorporate the present value of dividends during the life of the contract.\n\nConsidering the property has a 10% per annum dividend yield, this would affect the forward price but not the delta of the forward contract assuming continuous dividend yield. The yield affects the cost of carrying the underlying asset, so it goes into pricing the forward contract but doesn't affect the delta directly. \n\nGiven this, the delta of a long forward contract does not depend on the dividend yield or time to maturity; it remains constant at 1.\n\nBelow is the Python program to \"calculate\" the delta, which in this case is simply a fixed value of 1.\n\n```python\ndef solution():\n    # For a long position in a forward contract, the delta is typically 1\n    delta = 1\n    \n    # return answer\n    return delta\n\n# Example of using the function\nprint(solution())  # Output: 1\n```\n\nThe example usage is provided as a demonstration of how one might use the `solution` function we defined. In this case, when you call `solution()`, it will always return 1."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-408",
        "question": "In compliance with IFRS, ABC Corporation obtained a loan to fund the construction of new manufacturing lanes last year. The associated details are provided below: The loan was taken on: 1/1/2017, The borrowed sum was: $100 million, The yearly interest rate: 12%, The loan period: 4 years. The repayment method includes yearly interest payments only, with the principal due at loan maturity. The new manufacturing lanes will take one year to build, and during this time, ABC Corporation succeeded in generating $2 million by investing the loan funds. What would be the total capitalized interest over the loan period?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 100000000  # Loan amount of $100 million\n    interest_rate = 0.12     # Yearly interest rate of 12%\n    construction_period = 1  # Construction period of 1 year\n    earned_interest = 2000000  # ABC Corporation earned $2 million by investing the loan funds\n    \n    # Annual interest payment\n    annual_interest = loan_amount * interest_rate\n    \n    # Since the interest is paid yearly, and the construction takes 1 year,\n    # the total capitalized interest is equal to the first year's interest minus\n    # the earned interest because interest expense can be reduced by any interest income\n    # generated from the investment of the borrowed funds.\n    capitalized_interest = annual_interest - earned_interest\n    \n    # The capitalized interest is only for one year, because after the construction\n    # period, interest is expensed and not capitalized.\n    \n    # return answer\n    return capitalized_interest\n\n# Testing the solution function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-409",
        "question": "If Cindy Corp. recently bought a manufacturing device for $60,000 that is anticipated to usher in an annual cash inflow of $25,000 for six years, how much tax will they have to pay in the first year, given that they will depreciate the equipment over six years for accounting purposes and taxation authorities will deem the machine useful for five years, with no salvage value and a 40% tax rate, assuming the straight-line method is used?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_device = 60000\n    annual_cash_inflow = 25000\n    useful_life_accounting = 6\n    useful_life_tax = 5\n    tax_rate = 0.40\n    \n    # Calculate depreciation for accounting\n    annual_depreciation_accounting = cost_of_device / useful_life_accounting\n    \n    # Calculate depreciation for tax purposes\n    annual_depreciation_tax = cost_of_device / useful_life_tax\n    \n    # Calculate taxable income by subtracting the greater of the two depreciations from the cash inflow\n    taxable_income = annual_cash_inflow - annual_depreciation_tax\n    \n    # Calculate tax to be paid in the first year\n    tax_first_year = taxable_income * tax_rate\n    \n    # return answer\n    return tax_first_year\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the amount of tax that Cindy Corp. will have to pay in the first year, considering the straight-line depreciation method, cash inflow, differing useful lives for accounting and tax purposes, and a tax rate of 40%. It will return the amount of tax to be paid in the first year based on the net taxable income."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-410",
        "question": "A financier acquires a 6% annual payment bond that matures in three years. If the bond's yield-to-maturity stands at 8% and it's currently valued at 94.845806 per 100 of par, what would be the bond's Macaulay duration?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the Macaulay duration for the bond, we need to discount each cash flow (the coupon payments and the final principal repayment) by the yield to maturity, weight each present value by the time period, and then sum these values. We can calculate this in Python as follows:\n\n```python\ndef solution():\n    # Define variables\n    par_value = 100  # par value of the bond\n    market_price = 94.845806  # current price per 100 of par\n    annual_coupon_rate = 0.06  # 6% annual coupon rate\n    ytm = 0.08  # 8% yield to maturity\n    years_to_maturity = 3\n    frequency = 1  # Assuming annual payments\n    \n    # Initialize variables to store the sum of present values and weighted present values\n    pv_sum = 0\n    weighted_pv_sum = 0\n\n    for t in range(1, years_to_maturity * frequency + 1):\n        # Calculate the coupon payment\n        cash_flow = par_value * annual_coupon_rate if t < years_to_maturity * frequency else par_value * (1 + annual_coupon_rate)\n        \n        # Calculate the present value of the cash flow\n        pv = cash_flow / (1 + ytm/frequency) ** t\n        \n        # Calculate the weighted present value\n        weighted_pv = pv * t\n        \n        # Update the sum of present values and the sum of weighted present values\n        pv_sum += pv\n        weighted_pv_sum += weighted_pv\n\n    # Market price is the sum of the present value of future cash flows\n    # Adjusted market price considering it's per 100 of par\n    market_price_adjusted = market_price * pv_sum / par_value\n\n    # Calculate Macaulay duration\n    macaulay_duration = weighted_pv_sum / market_price_adjusted\n    \n    # return answer\n    return macaulay_duration\n\n# You can call the function and print the result to verify the correct output\nprint(solution())\n```\n\nThis program defines the variables required for the calculation of the Macaulay duration, calculates the present value of each cash flow, weights it by the time until it is received, sums these up, and finally divides by the current market price of the bond to get the Macaulay duration. The code assumes that payments are made annually. If coupon payments are semi-annual or have other frequencies, the `frequency` variable and the present value calculation should be adjusted accordingly."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-411",
        "question": "In an economy, there are two firms, Firm X and Firm Y. The default rate for Firm X is 10%, and the default rate for Firm Y is 20%. Assuming defaults for the two firms transpire separately, what is the likelihood of both firms defaulting?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the default rates for Firm X and Firm Y\n    default_rate_x = 0.10  # 10% for Firm X\n    default_rate_y = 0.20  # 20% for Firm Y\n    \n    # Calculate the probability of both firms defaulting\n    probability_both_default = default_rate_x * default_rate_y\n    \n    # Return the answer\n    return probability_both_default\n\n# Calling the function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-412",
        "question": "What is the ratio of operating cash flow before interest and taxes to operating income for XYZ Company for 2018, given the financial data and cash flow data gathered by the analyst, and considering that the CFF involves cash paid for interest of 1260 and the CFO involves taxes of 1850 in 2018?",
        "tables": [
            "|                   | 2018   | 2017   | 2016   |\n|------------------| ------- | ------- | ------- |\n| Revenue          | 56,455  | 45,882  | 27,265  |\n| EBIT              | 4,579   | 3,671   | 2,905   |\n| EBT               | 4,012   | 2,878   | 1,987   |\n| Net Income   | 3,560   | 2,071   | 1,295   |\n| Asset Turnover | 0.56     | 0.52     | 0.49     |\n| Asset/Equity  | 2.55     | 2.86     | 2.98     |",
            "|   | 2018 | 2017 | 2016 |\n|---|---|---|---|\n| **Net income** | 3,560 | 2,071 | 1,295 |\n| **Net cash flow provided by (used in) CFO** | 8,850 | 4,220 | 2,990 |\n| **Net cash flow provided by (used in) CFI** | (9,880) | (3,250) | (4,875) |\n| **Net cash flow provided by (used in) CFF** | (5,120) | 1,050 | (1,910) |\n| **Average net operating assets** | 42,000 | 40,530 | 41,600 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 3560\n    interest_paid_2018 = 1260\n    taxes_paid_2018 = 1850\n    cfo_2018 = 8850\n    ebit_2018 = 4579\n\n    # Calculate operating income (EBIT: Earnings Before Interest and Taxes)\n    # Operating cash flow before interest and taxes is CFO + interest paid + taxes paid\n    operating_cash_flow_before_interest_and_taxes = cfo_2018 + interest_paid_2018 + taxes_paid_2018\n\n    # Calculate the ratio of operating cash flow before interest and taxes to operating income (EBIT)\n    ratio = operating_cash_flow_before_interest_and_taxes / ebit_2018\n\n    # Return the calculated ratio\n    return ratio\n\n# You can call the function and print the result for verification, if you'd like.\n# print(solution()) \n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-413",
        "question": "If the yield drops by 200 basis points on a bond that has an effective duration of 11 and a convexity of 120, what is the percentage change in the bond's price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, here is a Python program that calculates the percentage change in the bond's price when the yield drops by 200 basis points using the bond's effective duration and convexity:\n\n```python\ndef solution():\n    # Define variables\n    delta_y = -0.02  # Change in yield (200 basis points or 2%)\n    duration = 11  # Effective duration\n    convexity = 120  # Convexity\n    # Calculate the estimated percentage change in the bond's price\n    percentage_change = (-duration * delta_y + convexity * (delta_y ** 2) / 2) * 100\n    \n    # return answer\n    return percentage_change\n\n# You can test the function with the following code\n# print(solution())\n```\n\nThis code uses the formula for the percentage price change of a bond due to a change in yield, which incorporates the bond's duration and convexity. The change in yield (delta_y) is negative because the yield is dropping, and the percentage change is multiplied by 100 to convert it to percentage format."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-414",
        "question": "Christopher is looking to calculate the foreign-currency return for Portfolio Z. The domestic currency is EUR while the foreign currency is GBP. The data shows that the domestic-currency return is 2% and GBP appreciated by 7% against the EUR. What is the return for the foreign-currency portfolio?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program to calculate the foreign-currency return for Portfolio Z:\n\n```python\ndef solution():\n    # Define variables name and value\n    domestic_currency_return = 0.02\n    gbp_appreciation = 0.07\n    \n    # Do math calculation to get the answer\n    # According to the formula: (1 + domestic_currency_return) * (1 + gbp_appreciation) - 1\n    foreign_currency_return = (1 + domestic_currency_return) * (1 + gbp_appreciation) - 1\n    \n    # return answer\n    return foreign_currency_return\n\n# You can call the function to get the answer\nprint(solution())  # This line is not required as per your instructions, just for demonstration.\n```\n\nThe `solution` function calculates the foreign-currency return by incorporating both the return in the domestic currency and the appreciation of the foreign currency against the domestic currency."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-415",
        "question": "Following a six-month period, the growth portfolio managed by Mia Williams has surpassed its benchmark. Williams posits that her chances of outperforming the benchmark annually stand at 3 to 1. Assuming these odds hold true, what is the likelihood that Williams' portfolio will top the benchmark for the year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program to calculate the probability that Mia Williams' portfolio will outperform the benchmark annually based on the provided odds.\n\n```python\ndef solution():\n    # Define odds as provided\n    odds_of_success = 3\n    \n    # Since the odds are given as 3 to 1, it means there are 3 chances of success and 1 chance of failure\n    # The total number of outcomes is 3 (for success) + 1 (for failure) = 4 outcomes\n    total_outcomes = odds_of_success + 1\n    \n    # The probability is calculated as the number of successful outcomes over the total number of outcomes\n    probability_of_success = odds_of_success / total_outcomes\n    \n    # return the probability as a percentage\n    return probability_of_success\n\n# To get the result as a percentage, you can call the function and multiply by 100\n# result = solution() * 100\n```\n\nThe function `solution` calculates the probability based on the odds provided and returns it as a decimal. If needed, the returned value can be multiplied by 100 to get a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-416",
        "question": "A community has an average of 25 with an undetermined standard deviation. We choose 100 individuals from this community to create a sample whose mean is 22.5 and variance is 16. What is the standard error of the sample mean?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Given values\n    variance = 16  # Variance of the sample\n    sample_size = 100  # Size of the sample\n    \n    # Calculate the standard deviation from the variance\n    standard_deviation = math.sqrt(variance)\n    \n    # Calculate the standard error of the sample mean (σ/√n)\n    standard_error = standard_deviation / math.sqrt(sample_size)\n    \n    # return the answer\n    return standard_error\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-417",
        "question": "Assuming that the current annualized short-term rate is 3.2% and the annual basis point-volatility is 2.1%, a finance specialist constructs a binomial interest rate tree using the Ho-Lee model with an annualized drift of 80 bps in the first month and 120 bps in the second month using a monthly time step. What is the interest rate in the lowest node after two months?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    current_short_term_rate = 0.032  # 3.2% annualized short-term rate\n    annual_basis_point_volatility = 0.021  # 2.1% annualized basis point volatility\n    monthly_volatility = annual_basis_point_volatility / math.sqrt(12)\n    \n    drift_first_month = 0.008  # 80 bps drift in the first month\n    drift_second_month = 0.012  # 120 bps drift in the second month\n\n    # Build the interest rate tree for the first two months\n    # Level 0 (initial rate)\n    r0 = current_short_term_rate\n\n    # Level 1 (after the first month)\n    r1_up = r0 + drift_first_month + monthly_volatility\n    r1_down = r0 + drift_first_month - monthly_volatility\n\n    # Level 2 (after the second month, we're only interested in the lowest node)\n    # In the binomial model, rates can either go up or down from the previous node\n    # r2_down_down is the rate if it goes down both in the first and second month\n    r2_down_down = r1_down + drift_second_month - monthly_volatility\n\n    # return answer is the interest rate in the lowest node after two months\n    return r2_down_down\n\n# call the function and print the result\nprint(solution())\n```\n\nThis Python program calculates the interest rate for the lowest node after two months using the Ho-Lee model in a binomial interest rate tree. It accounts for the initial annualized short-term rate, annual basis point volatility, and drifts for each month."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-418",
        "question": "For a normally distributed random variable, what is the likelihood that the random variable exceeds the mean by more than three standard deviations（F（3）=0.9987）?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Given the cumulative distribution function value at 3 standard deviations\n    F_3 = 0.9987\n    \n    # Probability of exceeding the mean by more than three standard deviations\n    probability_exceeds_3sd = 1 - F_3\n    \n    # return answer\n    return probability_exceeds_3sd\n\n# You can uncomment the line below to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-419",
        "question": "In the beginning of 2011, the spot exchange rate between the UK pound (GBP) and the New Zealand dollar (NZD) was pinned at 2.0979. The GBP interest rates, calculated on a 360-day year basis, were established as 1.6025% for the UK pound and 3.2875% for the NZD. What would the 180-day forward points (multiplied by four decimal points) in NZD/GBP look like?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's the Python program that calculates the 180-day forward points for NZD/GBP based on the interest rate parity theory:\n\n```python\ndef solution():\n    # Define variables name and values\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025 / 100\n    nzd_interest_rate = 3.2875 / 100\n    days = 180\n    year_basis = 360\n\n    # Interest Rate Parity (IRP) formula to compute forward rate\n    forward_rate = spot_rate * ((1 + nzd_interest_rate * (days / year_basis)) / (1 + gbp_interest_rate * (days / year_basis)))\n\n    # Calculate forward points\n    forward_points = (forward_rate - spot_rate) * 10000\n    \n    # return answer rounded to nearest whole number as points are typically given to nearest whole number\n    return round(forward_points)\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program defines the variables for the spot exchange rate, interest rates for GBP and NZD, the number of days (180-day forward rate), and the year basis (360 days). It then calculates the forward exchange rate based on interest rate parity and determines the forward points by taking the difference between the forward rate and the spot rate, then multiplying by 10,000 (as forward points are quoted in terms of 'points', which are the fourth decimal place in the exchange rate). The answer is then rounded to the nearest whole number and returned."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-420",
        "question": "What is the consistent sum that, when deposited every quarter, will increase to £25,000 in 10 years at a yearly interest rate of 6% weighted quarterly?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Below is the Python program to calculate the required consistent sum that should be deposited every quarter to amount to £25,000 in 10 years with a yearly interest rate of 6% compounded quarterly.\n\n```python\ndef solution():\n    # Given values\n    future_value = 25000\n    annual_interest_rate = 0.06\n    periods_per_year = 4  # Quarterly\n    total_periods = 10 * periods_per_year  # Total number of periods in 10 years\n    \n    # Calculate the interest rate per period\n    interest_rate_per_period = annual_interest_rate / periods_per_year\n    \n    # Future Value of a series formula: FV = P * [((1 + r)^n - 1) / r]\n    # Where:\n    # FV is Future Value\n    # P is periodic deposit\n    # r is interest rate per period\n    # n is number of periods\n    \n    # Rearrange the Future Value of a series formula to solve for P (periodic deposit)\n    periodic_deposit = future_value / (((1 + interest_rate_per_period) ** total_periods - 1) / interest_rate_per_period)\n\n    # return the periodic deposit amount\n    return periodic_deposit\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-421",
        "question": "In their next analysis, Tseng and Collin study a possible investment in the leveraged buyout of Peterson Enterprises. Specifically, they are considering buying all the preference shares and 90% of the common equity in the LBO. The specifics of the LBO are as follows: An initial investment of $10 million is required. The financing includes $6 million in debt, $3.6 million in preference shares with a 15% annual return paid out at exit, and $0.4 million in common equity. The projected exit value in six years is $15 million, with an expected decline in debt of $2.8 million in the six years before exit. What would be the multiple of anticipated proceeds at the time of exiting in relation to the funds invested for JRR’s Peterson LBO investment?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Initial investment and its breakdown\n    initial_investment = 10000000\n    debt_financing = 6000000\n    preference_shares = 3600000\n    common_equity = 400000\n    \n    # Exit scenario details\n    exit_value = 15000000\n    debt_decline = 2800000\n    preference_share_return_percent = 0.15\n    \n    # Calculating returns at exit\n    remaining_debt = debt_financing - debt_decline\n    \n    # Return to preference shareholders = Initial Preference investment + (Initial Preference investment * return percentage * number of years)\n    preference_share_return = preference_shares + (preference_shares * preference_share_return_percent * 6)\n    \n    # Remaining for common equity = Exit value - Remaining Debt - Return to preference shareholders\n    remaining_for_common_equity = exit_value - remaining_debt - preference_share_return\n    \n    # Investors get 90% of the common equity returns\n    investors_common_equity_return = remaining_for_common_equity * 0.9\n    \n    # Total proceeds = Investors' return from preference shares + Investors' return from common equity\n    total_proceeds = preference_share_return + investors_common_equity_return\n    \n    # Multiple of anticipated proceeds in relation to the funds invested\n    multiple_of_investment = total_proceeds / initial_investment\n    \n    return multiple_of_investment\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-422",
        "question": "A trader quotes the BRL/MXN spot rate at 0.1378. The 6-month forward rate is 0.14193. What are the 6-month forward points?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is a Python program to calculate the 6-month forward points based on the given spot rate and 6-month forward rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 0.1378\n    forward_rate = 0.14193\n    \n    # Do math calculation to get the answer\n    # Forward points are usually expressed in terms of the difference between the forward\n    # rate and the spot rate\n    forward_points = (forward_rate - spot_rate) * 10000  # Multiply by 10,000 to express in points\n    \n    # return answer\n    return forward_points\n\n# You can call the function to get the result\nprint(solution())\n```\n\nThis program defines the spot rate and the 6-month forward rate. The forward points are calculated by subtracting the spot rate from the forward rate and then multiplying by 10,000 to convert to points format."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-423",
        "question": "If a financier gathered inventory information from a business and the business utilized the FIFO technique for recognition, what would be the cost of goods sold?",
        "tables": [
            "|        | 2009 | 2008 |\n|--------|------|------|\n| COGS   | 1200 | 1430 |\n| LIFO Reserve | 800  | 820  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value from the table\n    cogs_lifo_2009 = 1200  # COGS reported using LIFO for the year 2009\n    lifo_reserve_2009 = 800  # LIFO Reserve for the year 2009\n    lifo_reserve_2008 = 820  # LIFO Reserve for the year 2008\n\n    # Calculate the difference in LIFO Reserve between 2009 and 2008\n    change_in_lifo_reserve = lifo_reserve_2009 - lifo_reserve_2008  # this will give the effect of using LIFO on 2009 COGS\n    \n    # Adjust the COGS for LIFO to find the FIFO COGS\n    cogs_fifo_2009 = cogs_lifo_2009 - change_in_lifo_reserve  # subtracting because LIFO COGS are higher in an inflationary period\n    \n    # return answer\n    return cogs_fifo_2009\n\n# Remember that the solution() function will return the value when called.\n# To see the result, you would execute the function like this:\n# print(solution())\n```\n\nThis program calculates the Cost of Goods Sold (COGS) using the FIFO method for the year 2009 by adjusting the LIFO COGS with the change in LIFO reserve between 2008 and 2009."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-424",
        "question": "If a business adopts IFRS and its bonds have a market interest rate of 5 percent as of January 1, 2010, what might be the interest expense (in millions) for 2010 based on those bond characteristics?",
        "tables": [
            "|    Face value    |  £50 million  |\n|------------------|---------------|\n| Coupon rate, paid annually |  4%  |\n|  Maturity  date  | December 31,2019 (10 years) |\n|  Issue  price  | 92.28|"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the interest expense for 2010 based on the bond characteristics, we should recognize that the market interest rate determines the effective interest rate, which is used to calculate the interest expense under IFRS (International Financial Reporting Standards).\n\nThe interest expense in IFRS is calculated using the effective interest method which applies the market interest rate (effective interest rate) on the book value of the bond at the beginning of the period. Since the bond was issued below face value (at a discount), the book value initially would be the issue price. Therefore, the interest expense for the first year would be the market interest rate times the issue price.\n\nHere's the how the program would be written:\n\n```python\ndef solution():\n    # Define variables name and value\n    issue_price = 50 * 0.9228  # in millions\n    market_interest_rate = 0.05  # 5%\n    \n    # Do math calculation to get the interest expense\n    interest_expense = issue_price * market_interest_rate\n    \n    # return answer\n    return round(interest_expense, 2)\n\n# Calling the function and printing the answer\nprint(solution())\n```\n\nThe above program will calculate the interest expense for 2010 based on the given bond information and market interest rate. The `round` function is used to round the result to two decimal places, which is a common way of representing financial figures in millions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-425",
        "question": "If American and Spanish bonds have return standard deviations of 0.64 and 0.56, respectively, and the correlation between these two bonds is 0.24, what is the return covariance?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program that calculates the covariance based on the standard deviations and correlation coefficient provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    std_dev_american = 0.64\n    std_dev_spanish = 0.56\n    correlation = 0.24\n    \n    # Do math calculation to get the answer\n    covariance = std_dev_american * std_dev_spanish * correlation\n    \n    # return answer\n    return covariance\n\n# This can be tested by calling the function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-426",
        "question": "What is the market price for a zero-coupon bond that matures in 18 years and has a maturity value of $1,000, if it's discounted at an annual interest rate of 12% with compounding happening twice a year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    maturity_value = 1000  # The value of the bond at maturity\n    annual_interest_rate = 0.12  # Annual interest rate\n    compounding_periods = 2  # Compounding twice a year\n    years_to_maturity = 18  # Years until the bond matures\n\n    # Do math calculation to get the answer\n    # PV = FV / (1 + i/n)^(nt)\n    # i = annual interest rate, n = number of times interest applied per time period, t = number of time periods\n    present_value = maturity_value / (1 + annual_interest_rate/compounding_periods) ** (compounding_periods * years_to_maturity)\n\n    # return answer\n    return present_value\n\n# Call the function to get the answer\nmarket_price = solution()\nmarket_price\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-427",
        "question": "Given the available information, what is the reported income tax expense on this year's earnings statement for a corporation during its current financial year?",
        "tables": [
            "| Accounting profit (earnings before taxes) | $250,000  |\n|-----------------------------------------|-------|\n| Taxable income                           | $215,000  |\n| Tax rate                                   | 30%   |\n| Income taxes paid in year                | $61,200  |\n| Deferred tax liability, start of year | $82,400  |\n| Deferred tax liability, end of year    | $90,650  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 215000\n    tax_rate = 0.30\n    income_taxes_paid = 61200\n    deferred_tax_liability_start_of_year = 82400\n    deferred_tax_liability_end_of_year = 90650\n\n    # Calculate current tax expense based on taxable income and tax rate\n    current_tax_expense = taxable_income * tax_rate\n    \n    # Calculate the change in deferred tax liability\n    change_in_deferred_tax = deferred_tax_liability_end_of_year - deferred_tax_liability_start_of_year\n    \n    # Calculate total reported income tax expense\n    total_tax_expense = current_tax_expense + change_in_deferred_tax\n    \n    # return answer\n    return total_tax_expense\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-428",
        "question": "The asset has a 9% rate of return and the debt costs 3%. A buyer purchased the asset with equity totaling 15 and a debt of 30. What is the equity return rate?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_return_rate = 0.09\n    debt_cost = 0.03\n    equity = 15\n    debt = 30\n\n    # The total return from the asset\n    total_asset_return = (equity + debt) * asset_return_rate\n\n    # The cost of the debt\n    total_debt_cost = debt * debt_cost\n\n    # The return on equity is the total asset return minus the cost of the debt\n    equity_return = total_asset_return - total_debt_cost\n\n    # The rate of return on equity is the equity return divided by the equity invested\n    equity_return_rate = equity_return / equity\n    \n    # return answer\n    return equity_return_rate\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will return the rate of return on equity for the given financial scenario, considering the asset return, debt cost, equity, and debt value provided in the question."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-429",
        "question": "Imagine a piece of art is made and bought in 2010 for £5,000. The costs for creating this piece of art came to £2,000. Based on the sum-of-value-added technique for GDP calculation, what is the value added by the final process of making the artwork?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    final_sale_price = 5000\n    creation_cost = 2000\n    \n    # Do math calculation to get the answer\n    value_added = final_sale_price - creation_cost\n    \n    # return answer\n    return value_added\n\n# You can call the function to see the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-430",
        "question": "If ten portfolio managers are in the running for the first, second, and third top portfolio manager award of 2012, determined by the individual assessments of a team of investment analysts, how many possible combinations can each analyst come up with for their rankings?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name\n    total_managers = 10  # Total portfolio managers\n    \n    # Since we need to find the number of possible combinations for the 1st, 2nd, and 3rd positions, we can use permutations\n    # because the order does matter in this case (1st is different from 2nd, etc.)\n    \n    # Calculating permutations\n    permutations = 1\n    for i in range(3):  # Three positions\n        permutations *= total_managers - i\n    \n    # return answer\n    return permutations\n\n# You can call the function and print the result to verify the answer\nprint(solution())\n```\n\nThe above program defines a function `solution()` which calculates the number of permutations for ten portfolio managers to be ranked in the first, second, and third positions without considering identical rankings. To calculate the permutations, we start from the total number of managers and multiply by one less each time for the three positions we want to fill. The result is returned by the function."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-431",
        "question": "The maturity period of Bond A is 3 years, with annual interest payments and a coupon rate of 6%. Given the spot rates outlined below, what would be the price of Bond A?",
        "tables": [
            "| Time-to-Maturity | Spot Rates |\n|----------------|-----------|\n| 1-year         | 7%        |\n| 2-year         | 8%        |\n| 3-year         | 9%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the price of a bond with an annual coupon, we need to sum the present value of each coupon payment and the present value of the bond's par value (which we assume to be $1,000) at the time of maturity. Given that the maturity period of Bond A is 3 years, and it pays an annual coupon based on a rate of 6%, we can compute the present value of each coupon payment by using the given spot rates for the respective years.\n\nHere's how we can calculate it:\n\n1. Calculate the present value of each coupon payment: The annual coupon payment would be 6% of the bond's face value. If we assume a face value (par value) of $1,000, then each annual coupon is $60. We discount each of these payments by the spot rate for the corresponding year.\n\n2. Calculate the present value of the face value: We also need to discount the face value of the bond, which will be paid at maturity, back to the present using the spot rate for the 3-year maturity.\n\nOnce we have the present value of all the payments, the sum will give us the price of the bond.\n\nWe can translate this process into a Python program:\n\n```python\ndef solution():\n    # Bond details\n    face_value = 1000\n    coupon_rate = 0.06\n    annual_coupon_payment = face_value * coupon_rate\n    \n    # Spot rates for respective years\n    spot_rates = {\n        1: 0.07,\n        2: 0.08,\n        3: 0.09\n    }\n\n    # Calculate price of the bond\n    bond_price = 0\n    for year in range(1, 4):\n        # Calculate present value of the coupon payment\n        discount_factor = (1 + spot_rates[year])**year\n        present_value_coupon = annual_coupon_payment / discount_factor\n        bond_price += present_value_coupon\n\n    # Calculate and add present value of the face value, which is paid at maturity\n    present_value_face_value = face_value / ((1 + spot_rates[3])**3)\n    bond_price += present_value_face_value\n\n    # return answer\n    return round(bond_price, 2)  # Rounding to 2 decimal places for currency format\n\n# Example usage:\n# print(solution())\n```\n\nRemember, the actual face value of the bond and the precision to which you wish to calculate the bond price might vary, so make sure to confirm these details before using this program."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-432",
        "question": "Corporation X is a crude oil provider. As a researcher, you are tasked with assessing whether Corporation X will undergo new growth by predicting if Corporation X's biggest client, Corporation Y, will enhance their order quantity. You predict that the likelihood of Corporation Y augmenting the order quantity is 30%. If Corporation Y does amplify the order quantity, Corporation X will have a new growth probability of 80%. However, if Corporation Y does not augment the order quantity, then Corporation X will only have a new growth probability of 10%. Later on, you found out that crude oil provider Corporation X has initiated a new growth. Given this scenario, what is the probability that you estimate Corporation Y to enhance the order quantity?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this, you have to use Bayes' theorem. The theorem provides a way to revise existing predictions or theories (update probabilities) given new or additional evidence. In formula form, Bayes' theorem is expressed as:\n\nP(A|B) = (P(B|A) * P(A)) / P(B)\n\nWhere:\n- P(A) is the probability of hypothesis A being true (independent of B).\n- P(B) is the overall probability of B being true.\n- P(B|A) is the probability of observing B given A is true.\n- P(A|B) is the probability of A being true given that B is true.\n\nIn this case:\nA is the event that Corporation Y enhances the order quantity.\nB is the event that Corporation X has new growth.\n\nWe are given that:\n- P(A) = 0.3 (Probability that Corporation Y will enhance their order quantity)\n- P(B|A) = 0.8 (Probability that Corporation X will have new growth given that Corporation Y enhances the order quantity)\n- P(B|A') = 0.1 (Probability that Corporation X will have new growth given that Corporation Y does not enhance the order quantity, where A' is the complement of A).\n\nWe want to find P(A|B), the probability that Corporation Y will enhance the order quantity given that Corporation X has new growth.\n\nFirst, we need to calculate P(B), the overall probability of B (Corporation X having new growth), which is:\n\nP(B) = P(A) * P(B|A) + P(A') * P(B|A')\n\nThen we can calculate P(A|B) using Bayes' theorem.\n\nLet's start coding the solution in Python:\n\n```python\ndef solution():\n    # Define variables name and value\n    p_A = 0.3  # Probability that Corporation Y will enhance their order quantity\n    p_B_given_A = 0.8  # Probability that Corporation X will have new growth if Y enhances order quantity\n    p_A_complement = 1 - p_A  # Probability that Corporation Y will not enhance their order quantity\n    p_B_given_A_complement = 0.1  # Probability that Corporation X will have new growth if Y does not enhance order\n    p_B = p_A * p_B_given_A + p_A_complement * p_B_given_A_complement  # Overall probability of new growth\n    \n    # Calculate the probability that Corporation Y enhances the order quantity given Corporation X has new growth\n    p_A_given_B = (p_B_given_A * p_A) / p_B\n    \n    # return answer\n    return p_A_given_B\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis code will return the probability that Corporation Y will enhance their order quantity given that Corporation X has initiated new growth."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-433",
        "question": "The table underneath indicates the monthly stock returns for Ivy Corp. Based on the information provided in this table, can you compute the mode of the returns for Ivy Corp.?",
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom statistics import mode\n\ndef solution():\n    # Define variables name and value\n    monthly_returns = [20, 4, -5, 12, 3, 12]\n    \n    # Do math calculation to get the answer\n    mode_return = mode(monthly_returns)\n    \n    # return answer\n    return mode_return\n\n# If you want to print the result to check\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-434",
        "question": "There are 6000 software developers in the population which is expected to have a normal distribution. A sample of 100 is taken from this population. Given a z-statistic, the 95% confidence interval of the sample mean for the yearly salary is 32.5 (in thousands) dollars, fluctuating between 22 (in thousands) dollars and 43 (in thousands) dollars. Compute the standard error of the mean yearly salary:",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "We can calculate the standard error (SE) of the mean yearly salary by understanding that the 95% confidence interval is defined by the mean ± 1.96 * SE if we assume a normal distribution. In this given problem, we are provided with the lower and upper bounds of the confidence interval (22,000 and 43,000, respectively) and the mean (32,500). The formula to calculate the standard error is SE = (Upper Limit - Lower Limit) / (2 * Z), where Z is the Z-statistic for a 95% confidence interval, typically 1.96.\n\nHere's the Python program to calculate the standard error:\n\n```python\n# No package is needed for this calculation\n\ndef solution():\n    # Define variables name and value\n    mean_salary = 32.5 # in thousands\n    lower_bound = 22 # in thousands\n    upper_bound = 43 # in thousands\n    z_statistic = 1.96 # For a 95% confidence interval\n    \n    # Calculate the standard error (SE)\n    standard_error = (upper_bound - lower_bound) / (2 * z_statistic)\n    \n    # return answer\n    return standard_error\n    \n# To see the result\nprint(f\"The standard error of the mean yearly salary is: {solution()} thousand dollars.\")\n```\n\nPlease note that we've translated the salary from thousands to whole numbers to avoid unit-related confusion. The answer will also be in terms of thousands of dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-435",
        "question": "A financial expert has been tasked with identifying potential arbitrage openings in the Treasury bond market by contrasting the cash flows of selected bonds with mixtures of other bonds. If a 1-year zero-coupon bond is valued at USD 98, and a 1-year bond which pays an 8% coupon semi-annually costs USD 103, utilizing a replication methodology, what should be the cost of a 1-year Treasury bond that offers a 6% semi-annual coupon?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! We can calculate the price of the new 1-year Treasury bond with a 6% semi-annual coupon through a no-arbitrage argument. Assuming similar credit risk, we will strip the cash flows from the 8% semi-annual coupon bond and purchase enough zero-coupon bonds to replicate the cash flows of the 6% bond.\n\nHere's the Python program to calculate that:\n```python\ndef solution():\n    # Given bond values\n    zero_coupon_bond_price = 98\n    annual_coupon_bond_price = 103\n    annual_coupon_rate = 0.08\n    target_coupon_rate = 0.06\n    face_value = 100  # Assumed face value for the bonds\n    \n    # First, calculate the semiannual coupon payment\n    semiannual_coupon_payment = (annual_coupon_rate / 2) * face_value\n    target_semiannual_coupon_payment = (target_coupon_rate / 2) * face_value\n    \n    # Calculate how many zero-coupon bonds we need to replicate the desired semiannual coupon\n    # We should buy enough zero-coupon bonds to replicate the target coupon at 6%\n    bonds_needed = target_semiannual_coupon_payment / (face_value - zero_coupon_bond_price)\n    \n    # Calculate the cost of each zero-coupon bond needed to replicate one semiannual payment\n    zero_coupon_per_payment = zero_coupon_bond_price * bonds_needed\n    \n    # Adjust the price of the 8% coupon bond by removing the extra 2% coupon payments (using present value of those coupons)\n    # To do this, subtract from the price of the 8% coupon bond, the present value of the extra coupon payments\n    extra_coupon = semiannual_coupon_payment - target_semiannual_coupon_payment\n    adjusted_8percent_bond_price = annual_coupon_bond_price - (extra_coupon * (1 + (bonds_needed * (face_value - zero_coupon_bond_price))))\n    \n    # Calculate the price of the new bond by summing up the price of the stripped 8% bond and the zero-coupon bonds replicating the coupons\n    target_bond_price = adjusted_8percent_bond_price + (2 * zero_coupon_per_payment)\n    \n    # Return the cost of the target bond\n    return target_bond_price\n\n# Call the function and print the result\nprint(solution())\n```\nIt might seem like a complex problem, but step by step we are determining the value of the treasury with a 6% semi-annual coupon by creating its cash flow from existing bonds. The key here is that the price of a bond is the present value of its cash flows. If two bonds should have the same cash flows, they must be priced the same under the assumption of no arbitrage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-436",
        "question": "Can you compute the cash conversion cycle for the firm?",
        "tables": [
            "| Items               | Times |\n|---------------------|-------|\n| Receivable turnover | 5     |\n| Inventory turnover  | 4     |\n| Payable turnover    | 10    |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    receivable_turnover = 5  # in times\n    inventory_turnover = 4   # in times\n    payable_turnover = 10    # in times\n    \n    # Do math calculation to get the answer\n    \n    # Days of sales outstanding (DSO) = 365 / Receivable turnover\n    days_sales_outstanding = 365 / receivable_turnover\n    \n    # Days of inventory outstanding (DIO) = 365 / Inventory turnover\n    days_inventory_outstanding = 365 / inventory_turnover\n    \n    # Days of payables outstanding (DPO) = 365 / Payable turnover\n    days_payables_outstanding = 365 / payable_turnover\n    \n    # Cash conversion cycle (CCC) = DSO + DIO - DPO\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payables_outstanding\n    \n    # return answer\n    return cash_conversion_cycle\n\n# You can call the function and print the result to verify the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-437",
        "question": "The manufacturing company, Denali Limited, provided the following income statement data: What is the equivalent of Denali's gross profit?",
        "tables": [
            "| Revenue | $4,000,000 |\n| --- | --- |\n| Cost of goods sold | $3,000,000 |\n| Other operating expenses | $500,000 |\n| Interest expense | $100,000 |\n| Tax expense | $120,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 4000000\n    cost_of_goods_sold = 3000000\n    \n    # Do math calculation to get the answer\n    gross_profit = revenue - cost_of_goods_sold\n    \n    # return answer\n    return gross_profit\n\n# You can call the function and print the result to check\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-438",
        "question": "Can you calculate the value added from asset allocation according to the given table?",
        "tables": [
            "|     | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|-----|------------------|------------------|------------------|------------------|\n| Domestic | 25% | 15% | 50% | 35% |\n| Bond 9% | - | 5% | 30% | 35% |\n| International 15% | - | 18% | 20% | 30% |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's a Python program that calculates the value added from asset allocation:\n\n```python\ndef solution():\n    # Define variables name and value\n    # Note that percentages are given in the table, so convert them to decimal form by dividing by 100\n    portfolio_returns = {'Domestic': 0.25, 'Bond': 0.09, 'International': 0.15}\n    benchmark_returns = {'Domestic': 0.15, 'Bond': 0.05, 'International': 0.18}\n    portfolio_weights = {'Domestic': 0.50, 'Bond': 0.30, 'International': 0.20}\n    benchmark_weights = {'Domestic': 0.35, 'Bond': 0.35, 'International': 0.30}\n    \n    # Initializing variable for value added from asset allocation\n    value_added = 0\n    \n    # Do math calculation to get the answer\n    # Value added from asset allocation is calculated by multiplying the difference between \n    # portfolio weight and benchmark weight with the benchmark return for each asset category.\n    for category in portfolio_returns.keys():\n        weight_difference = portfolio_weights[category] - benchmark_weights[category]\n        value_added += weight_difference * benchmark_returns[category]\n    \n    # return answer\n    return value_added\n\n# Call the function and print the result\nprint(f\"Value added from asset allocation: {solution()}\")\n```\n\nWhen this program is executed, it will calculate the value added from asset allocation according to the given table."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-439",
        "question": "Considering that the December 2010 annual report of Adidas AG indicates Depreciation and amortization: €249 million, Total assets: €10,618 million, Total debt: €1,613 million, Shareholders’ equity: €4,616 million, what is the company's debt/capital ratio?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Below is the Python program to calculate the debt-to-capital ratio for Adidas AG based on the given data in the annual report:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_debt = 1613 # in millions of euros\n    shareholders_equity = 4616 # in millions of euros\n    \n    # Calculate debt to capital ratio\n    debt_to_capital_ratio = total_debt / (total_debt + shareholders_equity)\n    \n    # Return answer\n    return debt_to_capital_ratio\n\n# To get the answer, you can run the function\n# print(solution())\n```\n\nThis program defines the total debt and shareholders' equity, calculates the debt-to-capital ratio, and returns it."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-440",
        "question": "Let's take U.S. GAAP into account unless specified otherwise. What is the annual free cash flow to equity for the business, taking into account that it does not pay out any dividends, carries no debt, and this information was collected over one year by a market researcher?",
        "tables": [
            "|    |    |\n|---|---|\n| Net income | 45.8 |\n| Depreciation | 18.2 |\n| Loss on sale of equipment | 1.6 |\n| Decrease in accounts receivable | 4.2 |\n| Increase in inventories | 5.4 |\n| Increase in accounts payable | 4.5 |\n| Capital expenditures | 7.3 |\n| Proceeds from sale of stock | 8.5 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 45.8\n    depreciation = 18.2\n    loss_on_sale_of_equipment = 1.6\n    decrease_in_accounts_receivable = 4.2\n    increase_in_inventories = 5.4\n    increase_in_accounts_payable = 4.5\n    capital_expenditures = 7.3\n    proceeds_from_sale_of_equipment = 0    # Not given, assuming zero as it's different from sale of stock\n    proceeds_from_sale_of_stock = 8.5\n    \n    # As the company carries no debt and does not pay dividends, only changes in working capital,\n    # capital expenditures, and net income will impact free cash flow to equity.\n    changes_in_working_capital = (decrease_in_accounts_receivable - \n                                  increase_in_inventories + \n                                  increase_in_accounts_payable)\n    \n    # Calculate free cash flow to equity (FCFE)\n    free_cash_flow_to_equity = (net_income + \n                                depreciation + \n                                loss_on_sale_of_equipment + \n                                changes_in_working_capital - \n                                capital_expenditures + \n                                proceeds_from_sale_of_equipment +\n                                proceeds_from_sale_of_stock)\n    \n    # return answer\n    return free_cash_flow_to_equity\n\n# Call the function to get the result\nprint(solution())\n```\n\nNote:\n- `proceeds_from_sale_of_equipment` is set to zero as it is specified differently from the proceeds from the sale of stock, and no value is provided.\n- We do not consider changes to dividends or debts since the company pays no dividends and carries no debt.\n- Since the `Proceeds from sale of stock` represents an inflow of cash, it should be included in the calculation of the free cash flow to equity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-441",
        "question": "The primary asset of the company Cedarstar consists of 10,000 hectares of timberland in western Canada, containing both new and mature Douglas fir trees. As of December 31, 2008, Cedarstar's financial details are as follows with additional data collected by Johnson regarding the recent sales of similar timberland properties in western Canada. For pieces of land possessing the same characteristics as Cedarstar, the going rate is $8,750 per hectare. Using these details and an asset-based approach, what is the net worth (after deducting any liabilities) of Cedarstar?",
        "tables": [
            "|                                   |                 |\n|-----------------------------------|-----------------|\n| Oakstar Timber Balance Sheet (Year Ended 31 December 2008) |        |\n|        **Assets**                    |                 |\n| Cash                                | $500,000        |\n| Inventory                           | $25,000         |\n| Accounts receivable                 | $50,000         |\n| Plant and equipment (cost less depreciation) | $750,000      |\n| Land                                | $10,000,000     |\n| **Total assets**                    | $11,325,000     |\n|       **Liabilities and Equity**   |                 |\n| Accounts payables                   | $75,000         |\n| Long-term bank loan                 | $1,500,000      |\n| Common stock                        | $9,750,000      |\n| **Total liabilities and equity**   | $11,325,000     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "It appears there is some confusion in the provided information. The data you have given is about a company named Oakstar Timber. However, the question you asked is regarding the net worth of a different company named Cedarstar.\n\nTo calculate the net worth of Cedarstar using the asset-based approach, we need Cedarstar's financial details, not Oakstar's. For Cedarstar, we do have the number of hectares of timberland and the going rate per hectare, but we don't have information on its liabilities and other assets.\n\nIf we assume that the liabilities and other asset details for Cedarstar are the same as those provided for Oakstar (which may not be the case, but we will proceed with this assumption due to lack of specific data for Cedarstar), then we can calculate the net worth of Cedarstar as follows:\n\n```python\ndef solution():\n    # Define variables name and value for Cedarstar\n    hectares_of_timberland = 10000\n    going_rate_per_hectare = 8750\n    long_term_bank_loan = 1500000\n    accounts_payables = 75000\n\n    # Calculate total value of timberland\n    total_timberland_value = hectares_of_timberland * going_rate_per_hectare\n    \n    # Calculate net worth by subtracting liabilities\n    net_worth = total_timberland_value - (long_term_bank_loan + accounts_payables)\n    \n    # return net worth\n    return net_worth\n\n# Call the function and print the result\nprint(solution())\n```\n\nPlease note that if there are more liabilities, assets, or equity components for Cedarstar not listed above, the net worth calculation needs to include those as well to be accurate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-442",
        "question": "Calculate the arithmetic mean return for the stock of Boulder Corporation, according to the given table showcasing their annual stock returns.",
        "tables": [
            "| 2012 | 2013 | 2014 | 2015 | 2016 | 2017 |\n|------|------|------|------|------|------|\n| 10%  | 15%  | -8%  | 12%  | -6%  | 8%   |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [10, 15, -8, 12, -6, 8]\n    \n    # Do math calculation to get the answer\n    arithmetic_mean_return = sum(returns) / len(returns)\n    \n    # return answer\n    return arithmetic_mean_return\n\n# Note: You can call the solution function to get the result.\n# result = solution()\n# print(\"Arithmetic mean return:\", result)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-443",
        "question": "A portfolio manager possesses the following three bonds, all of which are free of options and carry the specified durations. What is the duration of the portfolio?",
        "tables": [
            "| Bond | Par Value Owned | Market Value Owned | Duration |\n|------|-----------------|-------------------|--------- |\n| A    | $8,000,000     | $12,000,000       | 3       |\n| B    | $8,000,000     | $6,000,000        | 7       |\n| C    | $4,000,000     | $6,000,000        | 6       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the duration of the portfolio, we need to take the weighted average of the durations of each bond, using their market values as the weights. Here's the Python program to do that:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_values = [12000000, 6000000, 6000000]\n    durations = [3, 7, 6]\n    \n    # Calculate total market value\n    total_market_value = sum(market_values)\n    \n    # Calculate weighted duration\n    weighted_durations = [\n        market_value * duration\n        for market_value, duration in zip(market_values, durations)\n    ]\n    \n    # Calculate portfolio duration\n    portfolio_duration = sum(weighted_durations) / total_market_value\n    \n    # return answer\n    return portfolio_duration\n\n# This will print the solution\nprint(solution())\n```\n\nThe `solution()` function computes the sum of products of market values and durations for each bond, and then divides this total by the sum of the market values to find the weighted average duration. This is the duration of the portfolio. When you run this code, you should get the portfolio duration as the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-444",
        "question": "Three years ago, Hamilton Insurance Company launched a fixed-rate perpetual preferred stock and it was privately distributed among institutional investors. The stock was dispensed at $25 per share with a dividend of $1.75. Today, if the firm were to issue preferred stock, the yield would be 6.5 percent. So, what is the present value of the stock?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define the variables\n    # We know preferred dividends are fixed and the preferred stock behaves like a perpetuity\n    dividend = 1.75  # The annual dividend per share\n    current_yield = 0.065  # Current market yield for preferred stocks\n    \n    # Calculate the present value of the stock using the perpetuity present value formula: PV = D / r\n    present_value = dividend / current_yield\n    \n    # return the answer\n    return present_value\n\n# Running the function to get the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-445",
        "question": "A buyer purchases a lesser-quality, two-year corporate bond that has a coupon rate of 4.15%. The exhibit underneath displays the Government Spot Rates. The Z-Spreads for this corporate bond is at 0.65%. The bond is possibly trading at a price of:",
        "tables": [
            "|  | Maturity (Years) |  |  |  |\n|---|---|---|---|---|\n|  | 1 | 2 | 3 | 4 |\n| Government spot rate | 2.25% | 2.70% | 3.30% | 4.05% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the price of a coupon-paying bond, we need to discount each of its cash flows at the appropriate discount rate. The discount rate for a corporate bond can be considered as the sum of the government spot rate and the bond's Z-spread. Here's the Python program to calculate the bond price:\n\n```python\ndef solution():\n    # Define variables name and values\n    face_value = 100  # assuming a $100 face value\n    coupon_rate = 0.0415\n    z_spread = 0.0065\n    years = [1, 2]\n    spot_rates = [0.0225, 0.0270]\n    \n    # The bond has a 2-year maturity with annual coupons\n    cash_flows = [coupon_rate * face_value] * len(years)  # List of annual coupon payments\n    cash_flows[-1] += face_value  # Add the face value to the last cash flow\n    \n    # Calculate the present value of each cash flow\n    present_value_cash_flows = []\n    for year, cash_flow in zip(years, cash_flows):\n        # Calculate the total discount rate (spot_rate + z_spread)\n        discount_rate = spot_rates[year - 1] + z_spread\n        # Discount the cash flow\n        pv_cash_flow = cash_flow / ((1 + discount_rate) ** year)\n        present_value_cash_flows.append(pv_cash_flow)\n    \n    # Sum the present values of cash flows to obtain the bond price\n    bond_price = sum(present_value_cash_flows)\n    \n    # return answer\n    return round(bond_price, 2)\n\n# This call to the solution function will return the bond price\nprint(solution())\n```\n\nThis program creates a list of cash flows for the coupon payments and adds the face value repayment at the end of the bond's term. It then calculates present values of these cash flows by discounting them with the respective government spot rate plus Z-spread for each year. The bond price is then calculated by summing these present values. The face value is assumed to be $100, which is a common practice, but can be adjusted if a different face value is given. For educational purposes and without loss of generality, this assumption simplifies the calculation. The result is rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-446",
        "question": "The formula: Qod = 3 - 0.05P0 + 0.009I - 0.16Pt represents a person's demand for onions: with Qod being the demanded quantity of onions, P0 represents the cost per pound of onions, I symbolizes the household income, and Pt indicates the price per pound of tomatoes. Considering a case where the cost of onions is $1.25 per pound, the income of the household is $2,500, and tomatoes are priced at $3.75 per pound, what would be the cross-price elasticity of demand concerning the price of tomatoes for this person's onion demand?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's how you can create the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_price_tomatoes = 3.75\n    initial_quantity_onions = 3 - 0.05 * 1.25 + 0.009 * 2500 - 0.16 * initial_price_tomatoes\n    \n    # Since we need to measure elasticity, we'll consider a small change in the price of tomatoes.\n    # This is typically done by using differentials or considering \"infinitesimally\" small changes, but for our purposes,\n    # we can simulate it with a small price change.\n    dPt = 0.01  # Small change in the price of tomatoes\n    new_price_tomatoes = initial_price_tomatoes + dPt\n    new_quantity_onions = 3 - 0.05 * 1.25 + 0.009 * 2500 - 0.16 * new_price_tomatoes\n    \n    # Calculate the change in quantity of onions demanded\n    dQod = new_quantity_onions - initial_quantity_onions\n    \n    # Now calculate the cross-price elasticity of demand\n    cross_price_elasticity_of_demand = (dQod / initial_quantity_onions) / (dPt / initial_price_tomatoes)\n\n    return cross_price_elasticity_of_demand\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines the initial conditions and checks the response of the demand to a small change in the price of tomatoes. The cross-price elasticity of demand is then calculated using these changes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-447",
        "question": "After deciding to sell off its non-core assets, experts forecast that the standard deviation of returns for Dell Inc. will increase to 30% and its correlation with the market portfolio will stay the same at 0.8. The risk-free rate and the market risk premium are predicted to stay at 6% and 8% respectively. However, the market portfolio's standard deviation of returns is anticipated to drop to 15%. What is the projected return for the company after the restructuring?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the expected return for Dell Inc. after restructuring using the Capital Asset Pricing Model (CAPM), we will use the formula:\n\nExpected Return = Risk-Free Rate + Beta * (Market Risk Premium)\n\nWhere:\nBeta = (Covariance of Dell Returns with Market Returns) / Variance of Market Returns\n\nBut since we have the standard deviation of returns for both the company and the market, as well as the correlation coefficient, we can calculate Beta using this alternative formula:\n\nBeta = (Standard Deviation of Dell Returns / Standard Deviation of Market Returns) * Correlation with the Market\n\nNow, let's write the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.06  # Risk-free rate\n    market_risk_premium = 0.08  # Market risk premium\n    standard_deviation_dell = 0.30  # Standard deviation of returns for Dell Inc.\n    standard_deviation_market = 0.15  # Standard deviation of returns for market portfolio\n    correlation_with_market = 0.8  # Correlation of returns with market portfolio\n\n    # Calculate Beta\n    beta = (standard_deviation_dell / standard_deviation_market) * correlation_with_market\n    \n    # Calculate the expected return using CAPM\n    expected_return = risk_free_rate + beta * market_risk_premium\n    \n    # return answer\n    return expected_return\n\n# Example usage\nprint(solution())\n```\n\nThis program will output the expected return for Dell Inc. after the restructuring."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-448",
        "question": "If the spot rate for 4 years is at 5% and for 2 years it's at 3.7%, what would be the forward rate for 2 years starting from 2 years in the future?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the forward rate for 2 years starting 2 years from now, we'll use the spot rates for 4 years and 2 years. The formula for calculating the forward rate \\( F \\) starting in year \\( T_1 \\) for the period \\( T_2 - T_1 \\) is given by:\n\n\\[\n(1 + S_{T_{2}})^{T_{2}} = (1 + S_{T_{1}})^{T_{1}} \\cdot (1 + F)^{T_{2} - T_{1}}\n\\]\n\nwhere \\( S_{T} \\) is the spot rate at time \\( T \\).\n\nWe need to solve for \\( F \\) when \\( T_1 = 2 \\) and \\( T_2 = 4 \\). Let's write this into a Python function:\n\n```python\ndef solution():\n    # Given spot rates\n    spot_rate_4yr = 0.05\n    spot_rate_2yr = 0.037\n    \n    # Calculate the forward rate using the formula\n    forward_rate = ((1 + spot_rate_4yr)**4 / (1 + spot_rate_2yr)**2)**(1/(4-2)) - 1\n    \n    # Return the forward rate\n    return forward_rate\n\n# Call the function to test\nforward_rate = solution()\nprint(\"The forward rate for 2 years starting from 2 years in the future is:\", forward_rate)\n```\n\nThis program will calculate the forward rate based on the given spot rates."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-449",
        "question": "John is examining Company N utilizing the multistage residual income model. He has projected that the residual income per share will remain unchanged from year 3 onwards forever and the short-term ROE exceeds the long-term ROE. He has also calculated the profits and dividends for the upcoming three years as shown in the table below. What is the intrinsic value of Company N?",
        "tables": [
            "|                       | Year 1 | Year 2 | Year 3 |\n|-----------------------|--------|--------|--------|\n| Bt-1                  | $28.25 |        |        |\n| EPS                   | $6.50  | $7.82  | $6.93  |\n| Dividends per share   | $1.75  | $2.63  | $1.97  |\n| Long-term ROE         | 14.5%  | 14.5%  | 14.5%  |\n| Constant long-term growth | 5.5%   | 5.5%   | 5.5%   |\n| Cost of equity        | 10.9%  | 10.9%  | 10.9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To determine the intrinsic value of Company N using the multistage residual income model, we need to calculate the present value of forecasted residual incomes for the short-term period (years 1 to 3), and then the terminal value (the present value of all future residual incomes from year 3 onwards).\n\nThe residual income for any given year is calculated as:\n```\nResidual Income = EPS - (Equity Charge)\nEquity Charge = Cost of Equity * Book Value per Share at the beginning of the year\n```\nGiven that short-term ROE exceeds the long-term ROE, we will consider the long-term ROE only for terminal value calculations. The terminal value is calculated using the formula:\n```\nTerminal Value = Residual Income in the Long-term / (Cost of Equity - Long-term Growth Rate)\n```\nWe then discount all future incomes back to the present value at the cost of equity.\n\nHere is the Python program to calculate the intrinsic value:\n\n```python\ndef solution():\n    # Given values\n    bt_1 = 28.25\n    eps = [6.50, 7.82, 6.93]\n    dividends = [1.75, 2.63, 1.97]\n    long_term_roe = 0.145\n    growth_rate = 0.055\n    cost_of_equity = 0.109\n    \n    # Initialize the intrinsic value with the book value at time 0\n    intrinsic_value = bt_1\n    \n    # Calculate the values for Year 1 to Year 3\n    for i in range(3):\n        equity_charge = cost_of_equity * bt_1\n        residual_income = eps[i] - equity_charge\n        \n        # Discount the residual income for each year to present value and add it to the intrinsic value\n        intrinsic_value += residual_income / (1 + cost_of_equity) ** (i+1)\n        \n        # Update the book value at the beginning of the next year\n        bt_1 = bt_1 + eps[i] - dividends[i]\n    \n    # Calculate the terminal value from Year 3 onwards\n    equity_charge = cost_of_equity * bt_1\n    long_term_residual_income = eps[2] - equity_charge\n    terminal_value = long_term_residual_income / (cost_of_equity - growth_rate)\n    \n    # Discount the terminal value to present value and add it to the intrinsic value\n    intrinsic_value += terminal_value / (1 + cost_of_equity) ** 3\n    \n    # Return the final intrinsic value\n    return intrinsic_value\n\n# Call the function and print the result\nprint(f\"The intrinsic value of Company N is: ${solution():.2f}\")\n```\n\nPlease note that the intrinsic value calculated using this method relies on the accuracy of the projected earnings, dividends, and the assumption that the residual income beyond year 3 will remain constant indefinitely. Adjustments may be necessary if these assumptions do not hold or there are changes in the outlook for the company's performance or market conditions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-450",
        "question": "At the start of the year, a large corporation acquired all 600,000 shares of a smaller corporation, priced at $25 per share. The smaller corporation had recognized net assets worth $6.5 million prior to being acquired. The larger corporation determined that the smaller corporation's fair value had appreciated by $3 million. What should be the 'goodwill' amount reported by the larger corporation?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_per_share = 25\n    total_shares = 600000\n    net_assets = 6500000\n    fair_value_appreciation = 3000000\n\n    # Do math calculation to get the answer\n    purchase_price = price_per_share * total_shares\n    fair_value_of_smaller_corporation = net_assets + fair_value_appreciation\n    \n    goodwill = purchase_price - fair_value_of_smaller_corporation\n\n    # return answer\n    return goodwill\n\n# Uncomment the line below to test the function:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-451",
        "question": "Analyst Johnson is employing a GARCH(1,1) model to calculate daily variance on daily returns(rt) : ht:=α0 + α1r2t-1 + βht-1 while α0 = 0.000003 α1 = 0.03 β = 0.94. Can you provide the estimate for the long-run annualized volatility (taking into consideration that volatility increases by the square root of time and there are 252 trading days in a year)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the long-run annualized volatility using a GARCH(1,1) model, we need to understand that the model uses an autoregressive process to predict the variance of a time series. When the model reaches its long-run average, the predicted variance stabilizes, and so does the volatility.\n\nThe equation you've provided for the GARCH(1,1) model is:\n`ht = α0 + α1*r2t-1 + β*ht-1`\n\nEstimate for the long-run variance `V(LR)` will be when `ht = ht-1 = V(LR)`. Thus, we can equate `ht` to `ht-1` and solve for `V(LR)`. The equation will be simplified to:\n`V(LR) = α0 / (1 - α1 - β)`\n\nOnce we calculate the long-run daily variance, we can find the long-run daily volatility by taking the square root of the variance. The long-run annualized volatility is then the daily volatility multiplied by the square root of the number of trading days in a year (252).\n\nLet's code this calculation:\n\n```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define GARCH(1,1) parameters\n    alpha0 = 0.000003\n    alpha1 = 0.03\n    beta = 0.94\n\n    # Calculate long-run daily variance\n    long_run_variance = alpha0 / (1 - alpha1 - beta)\n    \n    # Calculate long-run daily volatility\n    long_run_volatility = math.sqrt(long_run_variance)\n    \n    # Calculate the long-run annualized volatility\n    trading_days = 252\n    long_run_annualized_volatility = long_run_volatility * math.sqrt(trading_days)\n    \n    # Return the long-run annualized volatility\n    return long_run_annualized_volatility\n\n# Call the function and print the result\nprint(solution())\n```\n\nRunning the above program will provide the estimate for the long-run annualized volatility using the GARCH(1,1) model with the given parameters."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-452",
        "question": "The arithmetic mean annual return for a fund managed by John for year 1,2,3 will be:",
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [12, 5, 1]  # percentage values for each year\n    \n    # Do math calculation to get the answer\n    arithmetic_mean_return = sum(returns) / len(returns)\n    \n    # return answer\n    return arithmetic_mean_return\n\n# Call the solution function and print the result\nprint(f\"The arithmetic mean annual return: {solution()}%\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-453",
        "question": "Based on the data that Roberts Inc. (RI) announced an accounts receivable of $66 million at the end of its second fiscal quarter, and $55 million at the conclusion of its third fiscal quarter, with revenues reported to be $72 million during that quarter. What is the amount of cash RI received from clients during the third fiscal quarter?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beginning_receivables = 66  # In millions\n    ending_receivables = 55  # In millions\n    revenues = 72  # In millions\n    \n    # Do math calculation to get the answer\n    collections_during_quarter = revenues - (ending_receivables - beginning_receivables)\n    \n    # The amount of cash received is the total revenue minus the change in accounts receivable\n    # return answer in millions\n    return collections_during_quarter * 1000000\n\n# The answer would be the cash collected, in actual dollars\nprint(solution())\n```\n\nThe above Python program calculates the amount of cash Roberts Inc. received from clients during the third fiscal quarter by using the data provided for accounts receivable at the end of the second and third fiscal quarters, and revenues during that quarter. The program first defines the variables for beginning and ending receivables, as well as revenues, all in millions.\n\nIt then performs the calculation by taking the total revenues for the third quarter and subtracting the change in accounts receivable over the same period. This change is the difference between the beginning and ending receivables. The formula is based on the accounting principle that the change in accounts receivable plus cash collections equals total revenue.\n\nFinally, the program returns the result in actual dollars by multiplying the answer in millions by 1,000,000. The `print` function at the end calls the `solution` function and would print the result when the script is executed."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-454",
        "question": "If a financial institution has total interest costs of 65 million, total raised funds of 1000 million with 750 million of it being earning assets, and other operating costs of 10 million, and the current tax rate is 35%, taking into account that shareholders have invested 100 million with an expected return rate of 12%, what is the weighted average total cost of capital according to the historical average cost methodology?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_interest_costs = 65  # In million\n    total_funds_raised = 1000  # In million; Total funds including equity\n    earning_assets = 750  # In million\n    operating_costs = 10  # In million\n    tax_rate = 35 / 100  # Convert percentage to decimal\n    equity_investment = 100  # In million; Shareholders' investment\n    expected_return_on_equity = 12 / 100  # Convert percentage to decimal\n    \n    # Do math calculation to get the answer\n    \n    # Calculating the interest rate after tax deduction\n    interest_rate_after_tax = (1 - tax_rate) * (total_interest_costs / (total_funds_raised - equity_investment))\n    \n    # Calculating the rate on earning assets after deducting operating costs and other non-interest expenses\n    net_operating_income = (earning_assets - operating_costs) / earning_assets\n    operating_rate_after_tax = (1 - tax_rate) * net_operating_income\n    \n    # Weighted average cost of debt and equity\n    cost_of_debt = interest_rate_after_tax * (total_funds_raised - equity_investment) / total_funds_raised\n    cost_of_equity = expected_return_on_equity * equity_investment / total_funds_raised\n    \n    # Total weighted average cost\n    total_weighted_average_cost = cost_of_debt + cost_of_equity\n    \n    # Return answer in terms of percentage\n    answer = total_weighted_average_cost * 100\n    \n    return answer\n\n# Run the function and print answer\nprint(solution())\n```\n\nThis program will calculate the weighted average total cost of capital using the historical average cost methodology, taking into account interest costs, operating costs, and expected return on equity after adjusting for taxes. The answer is returned in percentage form."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-455",
        "question": "Thomas Brooks, a research analyst in a global securities firm, is crafting a research summary on Megacreator, Inc., a company that adheres to IFRS and is publicly traded. On 1 January 2016, Megacreator bought a 15% stake in Brewster Co., holding voting rights, for $300 million. Megacreator maintains a seat at the Brewster board of directors table and has a say in policy decisions. Brooks is anxious about the potential impact of goodwill impairment due to anticipated industry shifts set to take place late in 2017. He computes the impairment loss using the predicted consolidated balance sheet data depicted in Exhibit 3, assuming that Megacreator's cash-generating unit and reporting unit are identical. According to Exhibit 3, the IFRS impairment loss for Megacreator is:",
        "tables": [
            "|                                                 |         |\n|-------------------------------------------------|---------|\n| Exhibit 3. Selected Financial Data for Topmaker, Inc. ,Estimated Year Ending 31 December 2017 ($ millions) |         |\n| Carrying value of cash-generating unit/reporting unit  | 15,200 |\n| Recoverable amount of cash-generating unit/reporting unit  | 14,900 |\n| Fair value of reporting unit       | 14,800 |\n| Identifiable net assets            | 14,400 |\n| Goodwill                           | 520    |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 15200  # in millions\n    recoverable_amount = 14900  # in millions\n    goodwill = 520  # in millions\n    \n    # Do math calculation to get the answer\n    # According to IFRS, if the carrying amount of a cash-generating unit (CGU) is higher than the recoverable amount,\n    # the difference is recognized as an impairment loss.\n    impairment_loss = carrying_value - recoverable_amount\n    \n    # However, the impairment cannot exceed the amount of goodwill allocated to the CGU.\n    impairment_loss = min(impairment_loss, goodwill)\n    \n    # Multiply by a million to get the final value in dollars\n    impairment_loss *= 1e6\n    \n    # return answer\n    return impairment_loss\n\n# Note that we multiply the impairment loss by 1e6 because the original figures were in millions.\n```\n\nThis program assumes that the impairment loss does not exceed the amount of goodwill, as per IFRS guidelines. The impairment loss is the difference between the carrying value and the recoverable amount, constrained by the amount of goodwill. The answer will be returned in dollars, not millions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-456",
        "question": "What is the total revenue generated by the hedge fund company, Bearing, this year, considering it had $288 million in assets under management (AUM) at the end of the previous year, a 2% management fee (based on year-end AUM), 20% incentive fee calculated after the management fee, a 5% soft hurdle rate, and a high-water mark of $357 million, and its fund return for the current year is 25%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that calculates the total revenue generated by the hedge fund company, Bearing:\n\n```python\ndef solution():\n    # Define variables name and value\n    previous_aum = 288e6          # Assets under management at the end of the previous year\n    management_fee_rate = 0.02    # Management Fee Rate\n    incentive_fee_rate = 0.20     # Incentive Fee Rate\n    soft_hurdle_rate = 0.05       # Soft Hurdle Rate\n    high_water_mark = 357e6       # High Water Mark\n    fund_return_rate = 0.25       # Fund Return for the current year\n    \n    # Calculate the increase in AUM due to returns\n    increase_aum = previous_aum * fund_return_rate\n    \n    # Check if the increase AUM surpasses the high-water mark, if not, no incentive fee\n    if (previous_aum + increase_aum) <= high_water_mark:\n        incentive_fee = 0\n    else:\n        # Calculate incentive fee only on the amount exceeding the high-water mark\n        incentive_fee_profit = (previous_aum + increase_aum) - high_water_mark\n        if incentive_fee_profit > previous_aum * soft_hurdle_rate:\n            incentive_fee = incentive_fee_profit * incentive_fee_rate\n        else:\n            incentive_fee = 0\n\n    # Calculate management fee\n    management_fee = previous_aum * management_fee_rate\n\n    # Calculate total revenue\n    total_revenue = management_fee + incentive_fee\n\n    # Return answer\n    return total_revenue\n    \n# If needed, this would run the solution function and print the result\n# print(solution())\n```\n\nTo get the answer, you would need to call `solution()`; however, it is not necessary to include a print statement as part of the program. The variable names and calculations should reflect the company's revenue conditions as described in the question."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-457",
        "question": "Assuming annual coupon payments and no accrued interest, a collection of bonds includes the following three fixed-rate bonds. Prices are given per 100 of par value. What is the modified duration of this bond portfolio?",
        "tables": [
            "| Bond | Maturity | Market Value Price | Coupon | Yield-to-Maturity | Modified Duration |\n|------|----------|--------------------|--------|-------------------|-------------------|\n| A    | 6 years  | 170,000            | 2.00%  | 4.95%             | 5.42              |\n| B    | 10 years | 120,000            | 2.40%  | 4.99%             | 8.44              |\n| C    | 15 years | 100,000            | 5.00%  | 5.00%             | 10.38             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# No package imports are needed for the calculation.\n\ndef solution():\n    # Define variables for each bond, such as market value price and modified duration.\n    market_value_A = 170000\n    duration_A = 5.42\n    market_value_B = 120000\n    duration_B = 8.44\n    market_value_C = 100000\n    duration_C = 10.38\n    \n    # Calculate the total market value of the portfolio\n    total_market_value = market_value_A + market_value_B + market_value_C\n    \n    # Calculate the weighted duration for each bond\n    weighted_duration_A = (market_value_A / total_market_value) * duration_A\n    weighted_duration_B = (market_value_B / total_market_value) * duration_B\n    weighted_duration_C = (market_value_C / total_market_value) * duration_C\n    \n    # Calculate the modified duration of the bond portfolio\n    portfolio_duration = weighted_duration_A + weighted_duration_B + weighted_duration_C\n    \n    # Return the answer\n    return portfolio_duration\n\n# Call the function to get the result\nportfolio_duration = solution()\nportfolio_duration\n```\nThis Python program calculates the weighted average modified duration for a portfolio of three bonds, which is a measure of the portfolio's price sensitivity to changes in interest rates."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-458",
        "question": "How many shares should be accounted for when calculating the diluted EPS under these circumstances? There are 500,000 shares in circulation. Plus, there are 200,000 exercisable warrants at $42 per share. The average share price stands at $45 while the share price at the end of the year is $50.",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is the Python program that calculates the number of shares to be accounted for when calculating the diluted earnings per share (EPS):\n\n```python\ndef solution():\n    # Define variables name and value\n    current_shares = 500000\n    warrants = 200000\n    exercise_price = 42\n    average_share_price = 45\n\n    # Calculate the treasury stock method for warrants\n    cash_inflow_from_exercise = warrants * exercise_price\n    shares_issued_from_warrants = cash_inflow_from_exercise / average_share_price\n    incremental_shares = warrants - shares_issued_from_warrants\n    \n    # Calculate the diluted shares outstanding\n    diluted_shares_outstanding = current_shares + incremental_shares\n    \n    # return answer\n    return diluted_shares_outstanding\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program calculates the number of shares to be included in the dilution of EPS using the treasury stock method, taking into account the exercises of warrants. The `solution()` function calculates the incremental shares that would be created by the exercise of the warrants and adds this to the current shares to find the total diluted shares outstanding."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-459",
        "question": "In 2016, Corporation A announced: Net earnings $50,000, Weighted average of ordinary shares 6,000, Convertible privileged shares 1,000 (Each of these privileged shares can be converted into 3 ordinary shares) preferred dividends are $0.2 per share. What will be the diluted EPS?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\n# No package needs to be imported for basic arithmetic calculations\ndef solution():\n    # Define variables name and value\n    net_earnings = 50000\n    weighted_avg_ordinary_shares = 6000\n    convertible_preferred_shares = 1000\n    conversion_ratio = 3\n    preferred_dividends_per_share = 0.2\n    preferred_dividends = convertible_preferred_shares * preferred_dividends_per_share\n    \n    # Calculate diluted shares after conversion of preferred shares\n    additional_ordinary_shares = convertible_preferred_shares * conversion_ratio\n    total_diluted_shares = weighted_avg_ordinary_shares + additional_ordinary_shares\n    \n    # Adjust net earnings for preferred dividends\n    adjusted_net_earnings = net_earnings - preferred_dividends\n    \n    # Calculate diluted EPS\n    diluted_EPS = adjusted_net_earnings / total_diluted_shares\n    \n    # return answer giving the result to two decimal places\n    return round(diluted_EPS, 2)\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-460",
        "question": "Given the existing data on the corporation, what is its P/E on a net income basis?",
        "tables": [
            "| Stock price per share | $60.75 |\n|-----------------------|--------|\n| Comprehensive income (millions) | $193.0 |\n| Other comprehensive income (millions) | $87.6 |\n| Common shares outstanding (millions) | 46.5 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price_per_share = 60.75\n    comprehensive_income_millions = 193.0\n    common_shares_outstanding_millions = 46.5\n    \n    # Net income is the comprehensive income minus other comprehensive income\n    net_income_millions = comprehensive_income_millions\n    \n    # Calculate the earnings per share (EPS)\n    earnings_per_share = net_income_millions / common_shares_outstanding_millions\n    \n    # Calculate the Price/Earnings (P/E) ratio\n    pe_ratio = stock_price_per_share / earnings_per_share\n    \n    # return answer\n    return pe_ratio\n\n# Run the solution function and print the result\nprint(solution())\n```\nThis program will calculate the P/E (Price to Earnings) ratio based on the provided information. Note that Net Income is already given as \"Comprehensive income\" so we don't need to subtract Other Comprehensive Income as that is not part of the Net Income calculation. If the actual Net Income was required to be separated from Other Comprehensive Income, we would subtract Other Comprehensive Income from Comprehensive Income to obtain Net Income. However, for the P/E ratio, we generally only use Net Income, which is the Comprehensive Income in this case."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-461",
        "question": "Assuming there are 250 trading days in a year and the portfolio returns are independent and follow the same normal distribution with zero mean, what is the estimated yearly VaR at the 95% confidence level for a local credit union's investment securities portfolio that has a current market value of USD 3,700,000 with a daily variance of 0.0004?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the yearly Value at Risk (VaR) at the 95% confidence level given the daily variance, we need to determine the daily standard deviation first. Then we will scale it to an annual figure assuming 250 trading days in a year. At a 95% confidence level, we will use the Z-score that corresponds to the 95th percentile of the normal distribution, which is typically 1.645 for a one-tailed test.\n\nHere is the Python program to calculate the yearly VaR at the 95% confidence level:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    market_value = 3700000  # Current market value of the portfolio\n    daily_variance = 0.0004  # Daily variance of the portfolio's returns\n    trading_days = 250  # Number of trading days in a year\n    confidence_level_z_score = 1.645  # The z-score for a 95% confidence level (for one-tailed)\n\n    # Calculate the daily standard deviation from variance\n    daily_std_dev = math.sqrt(daily_variance)\n\n    # Annualize the standard deviation\n    annual_std_dev = daily_std_dev * math.sqrt(trading_days)\n\n    # Calculate the VaR at the 95% confidence level\n    var_95_confidence = market_value * annual_std_dev * confidence_level_z_score\n\n    # return answer\n    return round(var_95_confidence, 2)\n\n# Example usage:\n# var_95 = solution()\n# print(f\"The estimated yearly VaR at the 95% confidence level is: USD {var_95}\")\n```\n\nThis code will compute the estimated yearly VaR at the 95% confidence level for the given portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-462",
        "question": "The current worth of a portfolio is $89.32, and its anticipated value after 1 year is $100. What is the rate of return for this portfolio when compounded continuously?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the continuous compounding rate, we will use the formula for continuous compounding interest, which is:\n\nA = P * e^(rt)\n\nwhere:\n- A is the amount of money accumulated after n years, including interest.\n- P is the principal amount (the initial amount of money).\n- r is the annual interest rate (in decimal).\n- t is the time the money is invested for, in years.\n- e is the base of the natural logarithm, approximately equal to 2.71828.\n\nIn the given problem, A is $100, P is $89.32, and t is 1 year. We need to find the annual interest rate r. Rearrange the formula to solve for r:\n\nr = (ln(A/P)) / t\n\nWe can implement this calculation in Python as follows:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    current_worth = 89.32\n    future_value = 100\n    time = 1  # in years\n    \n    # Do math calculation to get the answer\n    rate_of_return = math.log(future_value / current_worth) / time\n    \n    # return answer\n    return rate_of_return\n    \n# Testing the function\nprint(solution())\n```\n\nNote that this program will print out the result. However, if the requirement is to return the result from the `solution` function, we would skip the print statement."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-463",
        "question": "If the annual spot rate r(1) equals to 4% and the forward price for a one-year zero coupon bond starting in one year equals to 0.9434, then what is the present cost of a two-year zero-coupon bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    spot_rate_r1 = 0.04\n    forward_price_1yr = 0.9434\n\n    # Calculate the present value of a two-year zero-coupon bond\n    # We need to discount it by the spot rate for the first year and the forward price \n    # The spot rate is for immediate (one-year) investment and the forward price is for next year's one-year investment\n    present_value_2yr_bond = (1 / (1 + spot_rate_r1)) * forward_price_1yr\n\n    # Return the result\n    return present_value_2yr_bond\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-464",
        "question": "What is the anticipated standard deviation of an equal-weighted portfolio made by an investment analyst, if the correlation of returns between the two securities is -0.15?",
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| 1 | 16 | 20 |\n| 2 | 12 | 20 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight1 = 0.5  # Weight of security 1 in the portfolio\n    weight2 = 0.5  # Weight of security 2 in the portfolio\n    sd1 = 20 / 100  # Expected standard deviation of security 1 (converting from percentage)\n    sd2 = 20 / 100  # Expected standard deviation of security 2 (converting from percentage)\n    corr = -0.15   # Correlation coefficient between the returns of security 1 and 2\n    \n    # Do math calculation to get the answer\n    \n    # The formula for the standard deviation of a two-asset portfolio is:\n    # sqrt(weight1^2 * sd1^2 + weight2^2 * sd2^2 + 2 * weight1 * weight2 * corr * sd1 * sd2)\n    \n    portfolio_variance = (weight1**2 * sd1**2 +\n                          weight2**2 * sd2**2 +\n                          2 * weight1 * weight2 * corr * sd1 * sd2)\n    \n    portfolio_sd = math.sqrt(portfolio_variance)\n    \n    # Convert the standard deviation back to percentage\n    answer = portfolio_sd * 100\n    \n    # return answer\n    return answer\n\n# Call the function and print the result for checking\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-465",
        "question": "What is the projected equity beta for a private firm using the pure-play approach and the data obtained from its publicly traded rival?",
        "tables": [
            "| Comparable Companies | Tax Rate (%) | Debt/Equity | Equity Beta |\n| -------------------- | ------------ | ----------- | ----------- |\n| Private company      | 30.0         | 1.00        | N.A.        |\n| Public company       | 35.0         | 0.90        | 1.75        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "The pure play method allows a company to estimate its equity beta (unlevered beta) using the equity beta of a public company (levered beta). This approach involves unlevering the public company's beta to remove the effects of financial leverage and then relevering it to reflect the private company's capital structure.\n\nHere's the Python program to calculate the projected equity beta for the private firm using the pure-play approach:\n\n```python\ndef solution():\n    # Given values from the table\n    public_company_tax_rate = 0.35\n    public_company_debt_equity = 0.90\n    public_company_equity_beta = 1.75\n    \n    private_company_tax_rate = 0.30\n    private_company_debt_equity = 1.00\n\n    # Unlever the public company's equity beta\n    public_company_asset_beta = public_company_equity_beta / (1 + (1 - public_company_tax_rate) * public_company_debt_equity)\n    \n    # Relever according to the private company's debt/equity ratio\n    private_company_equity_beta = public_company_asset_beta * (1 + (1 - private_company_tax_rate) * private_company_debt_equity)\n    \n    # return answer\n    return private_company_equity_beta\n\n# You can test the function like this\nprint(solution())\n```\n\nPlease note that when you run this script, it will compute the estimated equity beta of the private company based on the assumptions given in the problem statement."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-466",
        "question": "An investment manager is looking to build a bull spread utilizing call options. A strike price of $50 costs $8 and a strike price of $60 costs $2. Both these calls mature in a month and have the same underlying, currently valued at $55. What is the breakeven underlying price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lower_strike_price = 50\n    lower_strike_cost = 8\n    upper_strike_price = 60\n    upper_strike_cost = 2\n    \n    # Calculate net premium paid\n    net_premium_paid = lower_strike_cost - upper_strike_cost\n    \n    # Calculate breakeven underlying price which is lower strike plus net premium paid\n    breakeven_underlying_price = lower_strike_price + net_premium_paid\n    \n    # return answer\n    return breakeven_underlying_price\n\n# Example usage:\n# breakeven_price = solution()\n# print(f\"The breakeven underlying price is: ${breakeven_price}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-467",
        "question": "Last year, Corporation Z issued a dividend of $0.5. Earnings for this year are estimated to be $3.0. Assuming the desired payout ratio is 30%, and the dividend is adjusted over a 4-year term. What is the anticipated dividend for the current year?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    last_year_dividend = 0.5\n    current_year_earnings = 3.0\n    desired_payout_ratio = 0.30\n    adjustment_period = 4  # years\n\n    # Calculate desired dividend based on desired payout ratio and current earnings\n    desired_dividend = current_year_earnings * desired_payout_ratio\n\n    # Calculate incremental adjustment to last year's dividend over the adjustment period\n    dividend_adjustment = (desired_dividend - last_year_dividend) / adjustment_period\n    \n    # Calculate the anticipated dividend for the current year\n    anticipated_dividend = last_year_dividend + dividend_adjustment\n    \n    # return answer\n    return round(anticipated_dividend, 2)\n\n# Example usage:\n# print(solution())\n```\n\nThis Python function calculates the anticipated dividend for the current year by finding the desired dividend based on the earnings and desired payout ratio, determining the annual adjustment needed and applying this to the previous year's dividend. The final anticipated dividend for the current year is then returned."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-468",
        "question": "If we take 2012 as the reference year for calculating GDP and the GDP deflator for the economic climate in 2013 is 102.4, what would be the unit cost of item B in 2012 in an economy consisting of two items, A and B, given the details below?",
        "tables": [
            "| Product | Quantity Produced in 2012 | Quantity Produced in 2013 | Product Unit Prices in 2012 | Product Unit Prices in 2013 |\n|-------|-------------------------|-------------------------|---------------------------|---------------------------|\n| X     | 351.0                   | 352.0                   | 13.3                          | 13.8                          |\n| Y     | 179.0                   | 182.5                   | unknown                    | 11.1                          |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quantity_produced_2012_A = 351.0\n    quantity_produced_2013_A = 352.0\n    unit_price_2012_A = 13.3\n    unit_price_2013_A = 13.8\n    \n    quantity_produced_2012_B = 179.0\n    quantity_produced_2013_B = 182.5\n    unit_price_2013_B = 11.1\n    \n    gdp_deflator_2013 = 102.4\n    \n    # Calculate the Real GDP in 2013 prices based on 2012 production quantities\n    real_gdp_2012_price = (quantity_produced_2012_A * unit_price_2012_A) + \\\n                          (quantity_produced_2012_B * unit_price_2013_B)\n\n    # Calculate the nominal GDP in 2013\n    nominal_gdp_2013 = (quantity_produced_2013_A * unit_price_2013_A) + \\\n                       (quantity_produced_2013_B * unit_price_2013_B)\n    \n    # Calculate the Real GDP in 2013 prices based on 2013 production quantities\n    real_gdp_2013_price = nominal_gdp_2013 / (gdp_deflator_2013 / 100)\n    \n    # Since Real GDP using 2012 prices should be equal to Real GDP using 2013 deflated prices,\n    # we can set up an equation and solve for the unknown unit price of product B in 2012\n    # real_gdp_2012_price = real_gdp_2013_price\n    # (quantity_produced_2012_A * unit_price_2012_A) + (quantity_produced_2012_B * unknown_unit_price_2012_B) = real_gdp_2013_price\n    \n    unknown_unit_price_2012_B = (real_gdp_2013_price - (quantity_produced_2012_A * unit_price_2012_A)) / quantity_produced_2012_B\n    \n    # return answer\n    return unknown_unit_price_2012_B\n\n# Calling the function to get the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-469",
        "question": "In addition to contemplating the implementation of financial instruments to control interest rate risk, Sullivan is also contemplating a fresh approach for Shoreline. Sullivan calculates how many bond futures are required to shield the company's total exposure to interest rate risk. The asset portfolio has a basis point value (BPV) of 96,000, while the liability portfolio's BPV is 44,000. Based on the extra data about bond futures that Sullivan has gathered in Exhibit 1, how many five-year note futures contracts need to be sold to readjust the immunizing portfolio?",
        "tables": [
            "|                             | 5-Year T-Note | 10-Year T-Note |\n|-----------------------------|---------------|----------------|\n| Yield to maturity           | 6.02%         | 6.41%          |\n| Modified duration           | 4.8           | 9.1            |\n| BPV per 100,000 in par value| 47.22         | 88.41          |\n| Conversion factor for cheapest-to-deliver | 0.88          | 0.90           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_portfolio_bpv = 96000\n    liability_portfolio_bpv = 44000\n    futures_bpv_per_100000 = 47.22\n    conversion_factor = 0.88\n    \n    # Do math calculation to get the answer\n    net_exposure_bpv = asset_portfolio_bpv - liability_portfolio_bpv\n    futures_contract_bpv = futures_bpv_per_100000 * conversion_factor\n    num_futures_contracts = net_exposure_bpv / futures_contract_bpv\n    \n    # return answer\n    return round(num_futures_contracts)\n```\nWhen you run the above Python program, it will calculate the number of five-year note futures contracts needed to be sold to immunize the portfolio. The `round` function is used to round the result to the nearest whole number because the number of futures contracts must be an integer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-470",
        "question": "Assuming there is a 2.5% rise in the income of the family while G and T remain constant, what would be the adjusted equilibrium quantity?",
        "tables": [
            "|                               |                               |                                           |                        |\n|-------------------------------|-------------------------------|-------------------------------------------|------------------------|\n| An individual consumer's demand for tea |                                               | Qdt=1, 800-40Pt+0.5/+150Pc                |                        |\n| Seller's supply of tea        |                                               | QSt=-516+350Pt-120W                        |                        |\n|                               |                               |                                           |                        |\n|                               |                               | **Legend and Initial Values**              | **Assumed Values**     |\n| ad t                          |               Quantity of tea |                                           |                        |\n| Pt                            | Price of tea per 100 grams    |                                           |                        |\n| I                             |       Household income        |                                           | £2,400                 |\n| W                             | Hourly wage rate for labor    |                                           |                        |\n| Pc                            | Price of coffee per 100 grams |                                           | £22.4                  |\n|                               | Equilibrium price of tea      |                                           | £30.6                  |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Given values\n    Pt = 30.6  # Equilibrium price of tea\n    I = 2400   # Household income\n    W = None   # We don't need W as it's not part of the consumer's demand function\n    Pc = 22.4  # Price of coffee per 100 grams\n\n    # Consumer's demand for tea function: Qdt = 1,800 - 40*Pt + 0.5*I + 150*Pc\n    # Seller's supply of tea function: QSt = -516 + 350*Pt - 120*W\n    # Since W is not given and does not appear in the demand function, it can be ignored.\n\n    # New income after 2.5% rise\n    new_income = I * (1 + 2.5 / 100)\n\n    # Calculate the adjusted equilibrium quantity using the demand function\n    # as supply quantity should equal demand quantity at equilibrium.\n    adjusted_equilibrium_quantity = 1800 - 40 * Pt + 0.5 * new_income + 150 * Pc\n\n    # Return the adjusted equilibrium quantity\n    return adjusted_equilibrium_quantity\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-471",
        "question": "If you were to invest 1 million dollars in a financial product today with a stated annual interest rate of 6%, what would its value be three years from now considering it is compounded monthly?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    principal_amount = 1000000  # Initial investment\n    annual_interest_rate = 0.06  # Annual interest rate\n    periods_per_year = 12  # Compounded monthly\n    years = 3\n\n    # Calculate future value using the formula for compound interest\n    future_value = principal_amount * (1 + annual_interest_rate / periods_per_year) ** (periods_per_year * years)\n    \n    # return future_value\n    return future_value\n\n# The function call\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-472",
        "question": "If we consider the initial value of the float-adjusted market-capitalization-weighted equity index to be 100, what would be the final value considering the data for four stocks in the index?",
        "tables": [
            "| Stock | Shares Outstanding | % Shares in Market Float | Beginning of Period Price | End of Period Price | Dividends Per Share |\n|-------|-------------------|--------------------------|---------------------------|---------------------|---------------------|\n| A     | 5,000             | 90                       | 40                        | 45                  | 1.00                |\n| B     | 2,000             | 100                      | 68                        | 60                  | 0.50                |\n| C     | 6,000             | 70                       | 60                        | 70                  | 1.50                |\n| D     | 4,000             | 40                       | 20                        | 24                  | 0.80                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables for each stock's data\n    stocks = {\n        'A': {'shares_outstanding': 5000, 'float_percent': 0.9, 'begin_price': 40, 'end_price': 45, 'dividend': 1},\n        'B': {'shares_outstanding': 2000, 'float_percent': 1.0, 'begin_price': 68, 'end_price': 60, 'dividend': 0.5},\n        'C': {'shares_outstanding': 6000, 'float_percent': 0.7, 'begin_price': 60, 'end_price': 70, 'dividend': 1.5},\n        'D': {'shares_outstanding': 4000, 'float_percent': 0.4, 'begin_price': 20, 'end_price': 24, 'dividend': 0.8}\n    }\n    \n    # Starting index value\n    initial_index_value = 100\n    \n    # Calculate the initial and final capitalization for each stock\n    total_initial_cap = 0\n    total_final_cap = 0\n    \n    for stock in stocks.values():\n        shares_float = stock['shares_outstanding'] * stock['float_percent']\n        initial_cap = shares_float * stock['begin_price']\n        final_cap = shares_float * (stock['end_price'] + stock['dividend'])\n        \n        total_initial_cap += initial_cap\n        total_final_cap += final_cap\n    \n    # Calculate the performance of the index\n    index_performance = total_final_cap / total_initial_cap\n    \n    # Calculate the final index value\n    final_index_value = initial_index_value * index_performance\n    \n    # return final index value\n    return final_index_value\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-473",
        "question": "What is the price elasticity of demand at the neighborhood fitness center if the membership fee is $35, given that their membership demand is dictated by the equation: Qdfc = 400 - 5 Pfc, with Qdfc representing the number of gym members and Pfc being the membership cost?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Price elasticity of demand (PED) measures how quantity demanded responds to a change in price. It is calculated by dividing the percentage change in quantity demanded by the percentage change in price.\n\nThe demand equation you've provided is Qdfc = 400 - 5Pfc, which is a linear demand curve. The formula for PED at a particular point on a linear demand curve is:\n\nPED = (P/Q) * (dQ/dP)\n\nwhere P is the price, Q is the quantity, and dQ/dP is the derivative of quantity with respect to price (the slope of the demand curve).\n\nLet's calculate the PED at Pfc = $35.\n\n```python\ndef solution():\n    # Given values\n    Pfc = 35  # membership fee\n    \n    # Calculate quantity from the given demand equation\n    Qdfc = 400 - 5 * Pfc\n    \n    # The slope of the demand curve (dQ/dP) is the coefficient of Pfc in the demand equation\n    dQdP = -5\n    \n    # Now calculate PED using the formula\n    PED = (Pfc / Qdfc) * dQdP\n    return abs(PED)  # PED is often expressed as an absolute value\n\n# Call the function and print the result\nprint(solution())\n```\n\nPlease note that the PED is usually expressed as a positive number (we take its absolute value) because demand curves typically slope downwards, implying a negative relationship between price and quantity demanded. Thus, elasticity would inherently be negative as price increases result in quantity demanded decreases, but we are often interested in the magnitude of this change, hence the absolute value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-474",
        "question": "Assuming that the true risk-free return rate is 3%, the anticipated inflation premium is 5% and the interest rate determined by the market for a certain investment is 12%, what is the total of the default risk premium, the liquidity premium, and the maturity premium for the investment?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program that calculates the sum of the default risk premium, the liquidity premium, and the maturity premium for the investment.\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    inflation_premium = 0.05\n    market_interest_rate = 0.12\n    \n    # Total premiums\n    total_premiums = market_interest_rate - (risk_free_rate + inflation_premium)\n    \n    # return answer\n    return total_premiums\n\n# Example usage:\n# print(solution())\n```\n\nWhen you run `solution()`, it will return the sum of the default risk premium, liquidity premium, and maturity premium."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-475",
        "question": "Imagine that a limit order is listed in the stock's order book. Let's say Alex placed a day order with a limit price of $20.87 and sold 1,000 shares, with no other investors placing a buy order after his was submitted. What would be the average price for Alex's transaction?",
        "tables": [
            "| Buyer   | Bid Size (Number of shares) | Limit price($) | Offer size (Number of shares) | Seller   |\n|---------|-----------------------------|----------------|-------------------------------|----------|\n| Liam    | 7,000                       | 20.70          |                               |          |\n| Debbie  | 200                         | 20.88          |                               |          |\n| Philips | 400                         | 21.02          |                               |          |\n| Fiona   | 300                         | 21.89          |                               |          |\n|         |                             | 21.90          | 300                           | Kevin    |\n|         |                             | 22.01          | 1,300                         | Veronica |\n|         |                             | 22.06          | 1,500                         | Ethel    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    alex_shares = 1000\n    # All the buyers that can buy from Alex based on their limit prices\n    buyers = [\n        {'name': 'Liam', 'shares': 7000, 'limit_price': 20.70},\n        {'name': 'Debbie', 'shares': 200, 'limit_price': 20.88},\n        {'name': 'Philips', 'shares': 400, 'limit_price': 21.02},\n        {'name': 'Fiona', 'shares': 300, 'limit_price': 21.89}\n    ]\n    # Alex's limit price for selling\n    alex_limit_price = 20.87\n    total_shares_sold = 0\n    total_revenue = 0.0\n\n    # Do math calculation to get the answer\n    for buyer in buyers:\n        if buyer['limit_price'] >= alex_limit_price and total_shares_sold < alex_shares:\n            shares_to_sell = min(buyer['shares'], alex_shares - total_shares_sold)\n            total_shares_sold += shares_to_sell\n            total_revenue += shares_to_sell * buyer['limit_price']\n    \n    # Calculate the average price for Alex's transaction\n    average_price = total_revenue / total_shares_sold\n    \n    # return answer\n    return average_price\n    \n# Call the function and print result for checking\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-476",
        "question": "The investment portfolio is worth $10,000,000. The retirement fund intends to employ a futures contract valued at $125,000 to reduce the beta from 1.2 to 0.9 over a span of two months. The futures contract has a beta of 0.95. How many futures contracts should be sold?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Below is the Python program to answer the question on how many futures contracts should be sold:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 10000000\n    target_beta = 0.9\n    current_beta = 1.2\n    future_contract_value = 125000\n    future_contract_beta = 0.95\n    \n    # Calculate the change in beta required\n    change_in_beta = current_beta - target_beta\n    \n    # Calculate the hedging position needed\n    hedging_position = (change_in_beta / future_contract_beta) * portfolio_value\n    \n    # Calculate the number of futures contracts\n    num_of_contracts = hedging_position / future_contract_value\n    \n    # Return number of contracts rounded to the nearest integer\n    return int(round(num_of_contracts, 0))\n\n# Call the solution function and print the answer\nprint(solution())\n```\n\nRunning the program will compute and display the number of futures contracts that should be sold to decrease the beta of the investment portfolio from 1.2 to 0.9. The number of contracts is rounded to the nearest integer since you can't sell a fraction of a contract."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-477",
        "question": "What was the provision for income taxes recorded in the US GAAP income statement of the firm in Year 3, given the elements of earnings before income taxes (in $ thousands)?",
        "tables": [
            "|  |  |  | Year 3 | Year 2 | Year 1 |\n| --- | --- | --- | --- | --- | --- |\n| Earnings before income taxes: | | United States | $88,157 | $75,658 | $59,973 |\n|  | | Foreign | $116,704 | $113,509 | $94,760 |\n|  |  | Total | $204,861 | $189,167 | $154,733 |\n| The components of the provision for income taxes are as follows ($ thousands): | | |  | | |\n| Income taxes: | Current: | Federal | $30,632 | $22,031 | $18,959  |\n|  | | Foreign | $28,140 | $27,961 | $22,263  |\n|  | | | $58,772 | $49,992 | $41,222 |\n| | Deferred: | Federal | ($4,752) | $5,138 | $2,336 |\n|  | | Foreign | $124 | $1,730 | $621 |\n|  | | | ($4,628) | $6,868 | $2,957 |\n|  |  | Total | $54,144 | $56,860 | $44,179 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_federal_taxes_year_3 = 30632\n    current_foreign_taxes_year_3 = 28140\n    deferred_federal_taxes_year_3 = -4752\n    deferred_foreign_taxes_year_3 = 124\n    \n    # Do math calculation to get the provision for income taxes\n    provision_for_income_taxes = (current_federal_taxes_year_3 + \n                                  current_foreign_taxes_year_3 + \n                                  deferred_federal_taxes_year_3 + \n                                  deferred_foreign_taxes_year_3)\n    \n    # return answer\n    return provision_for_income_taxes\n\n# Calling the function and printing the result\nprint(solution())\n```\n\nUpon running the above program, it will give you the provision for income taxes recorded in Year 3 as per the US GAAP income statement of the firm (in $ thousands)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-478",
        "question": "A takeover private equity fund intends to invest in all of Business A's preferred shares and 70% of the ordinary shares. Business A's present valuation stands at $10 million, comprising $6.5 million in debt, $2.8 million in preferred shares and $0.7 million in ordinary shares. The projected exit value in five years time is $15 million, with a predicted decrease in debt by $2.5 million and a 15% yearly return on preferred shares. What is the ratio of anticipated proceeds at exit to the funds invested?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Below is a Python program that calculates the ratio of anticipated proceeds at exit to the funds invested by the takeover private equity fund, based on the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_debt = 6.5e6\n    current_preferred_shares = 2.8e6\n    current_ordinary_shares = 0.7e6\n    investment_percent_ordinary = 0.7  # 70%\n    exit_value = 15e6\n    debt_reduction = 2.5e6\n    annual_return_preferred = 0.15  # 15%\n    years = 5\n\n    # Calculate the amount invested by the fund\n    amount_invested = current_preferred_shares + current_ordinary_shares * investment_percent_ordinary\n    \n    # Calculate the annual return on preferred shares\n    total_return_preferred = current_preferred_shares * ((1 + annual_return_preferred) ** years)\n    \n    # Calculate the value of ordinary shares at exit\n    new_debt = current_debt - debt_reduction\n    new_ordinary_shares = exit_value - new_debt - total_return_preferred\n    \n    # Calculate the proceeds from ordinary shares the fund is entitled to\n    proceeds_ordinary_shares = new_ordinary_shares * investment_percent_ordinary\n    \n    # Total proceeds is the sum of preferred and ordinary shares proceeds\n    total_proceeds_at_exit = total_return_preferred + proceeds_ordinary_shares\n    \n    # Calculate the ratio of proceeds to funds invested\n    ratio_proceeds_to_invested = total_proceeds_at_exit / amount_invested\n    \n    # return answer\n    return ratio_proceeds_to_invested\n\n# Execute the function and print the result\nprint(solution())  # Just for testing purposes; remove this line if the printing is not desired\n```\n\nLet's now execute the function to see the ratio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-479",
        "question": "If Minstrel identifies an arbitrage opportunity involving a fixed-income futures contract and its related bond, and the current details on the futures contract and related bond are displayed in Exhibit 1, what would be the arbitrage profit on the bond futures contract given that the existing yearly compounded risk-free rate is 0.30%, assuming annual compounding?",
        "tables": [
            "|         |           |                   |      |\n|---------|-----------|-------------------|------|\n|         |           | Underlying Bond   |      |\n| Futures Contract |   |                   |      |\n| Quoted futures price | 125.00 | Quoted bond price | 112.00 |\n| Conversion factor | 0.90 | Accrued interest since last coup on payment | 0.08 |\n| Time remaining to contract expiration | Three months | Accrued interest at futures contract expiration |0.20 |\n| Accrued interest over life of futures contract | 0.00 |   |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define variables name and value\n    futures_price = 125.00\n    bond_price = 112.00\n    conversion_factor = 0.90\n    accrued_interest_bond = 0.08\n    accrued_interest_futures = 0.20\n    risk_free_rate = 0.0030  # 0.30% as a decimal\n    time_to_expiration = 3 / 12  # three months in the form of a fraction of a year (3/12)\n\n    # The cost of buying the bond and carrying it until the futures contract expires\n    cost_of_carry = bond_price + accrued_interest_bond\n    # Future value of this cost at the risk-free rate\n    future_value = cost_of_carry * math.pow(1 + risk_free_rate, time_to_expiration)\n    \n    # The cash that would be received from the futures contract\n    cash_from_futures = (futures_price - accrued_interest_futures) * conversion_factor\n    \n    # The profit from the arbitrage\n    arbitrage_profit = cash_from_futures - future_value\n\n    # return answer\n    return arbitrage_profit\n\n# Running the function and printing the result\nprint(solution())\n```\n\nThis Python program defines the variables given in the table and computes the cost of buying the bond and carrying it until the futures contract expires. Then, it computes the future value of this cost at the provided risk-free rate. Afterwards, it calculates the cash that would be received from the futures contract and subtracts the future value of the cost from this cash to determine the profit from the arbitrage opportunity. Finally, it returns this arbitrage profit."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-480",
        "question": "The details for a certain business are given below. How many days does it take for that business to complete its cash conversion cycle?",
        "tables": [
            "|                     | $ millions |\n|---------------------|------------|\n| Sales               | 4,800      |\n| Cost of goods sold  | 2,880      |\n| Purchases           | 2,940      |\n| Average receivables | 625        |\n| Average inventory   | 710        |\n| Average payables    | 145        |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the cash conversion cycle (CCC), we use the following formula:\n\nCCC = Days of Sales Outstanding (DSO) + Days of Inventory Outstanding (DIO) - Days of Payables Outstanding (DPO)\n\nFirst, we calculate the Days of Sales Outstanding (DSO), Days of Inventory Outstanding (DIO), and Days of Payables Outstanding (DPO) using the formulas:\n\nDSO = (Average Receivables / Sales) * 365\nDIO = (Average Inventory / Cost of Goods Sold) * 365\nDPO = (Average Payables / Purchases) * 365\n\nLet's write the Python function to calculate the cash conversion cycle.\n\n```python\ndef solution():\n    # Given financial data in $ millions\n    sales = 4800\n    cost_of_goods_sold = 2880\n    purchases = 2940\n    average_receivables = 625\n    average_inventory = 710\n    average_payables = 145\n    \n    # Converting all values to the same scale (millions are irrelevant for ratios)\n    \n    # Calculate Days of Sales Outstanding (DSO)\n    days_of_sales_outstanding = (average_receivables / sales) * 365\n    \n    # Calculate Days of Inventory Outstanding (DIO)\n    days_of_inventory_outstanding = (average_inventory / cost_of_goods_sold) * 365\n    \n    # Calculate Days of Payables Outstanding (DPO)\n    days_of_payables_outstanding = (average_payables / purchases) * 365\n    \n    # Calculate Cash Conversion Cycle (CCC)\n    cash_conversion_cycle = days_of_sales_outstanding + days_of_inventory_outstanding - days_of_payables_outstanding\n    \n    # return answer\n    return cash_conversion_cycle\n\n# Call the function and return the result\nprint(solution())\n```\n\nThis code defines the solution function to calculate the cash conversion cycle using provided financial data. The print statement at the end is used to call the function and print the result. However, in a real implementation, this print statement may not be necessary, and the function would just return the calculated value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-481",
        "question": "The modified duration of a bond collection, which consists of three fixed-rate bonds that pay annual coupons without any accrued interest, is:",
        "tables": [
            "| Bond | Maturity | Market Value Price | Coupon | Yield-to-Maturity | Modified Duration |\n| --- | --- | --- | --- | --- | --- |\n| A | 3 years | 150,000 95.0000 | 3.00% | 5.67% | 4.98 |\n| B | 5 years | 110,000 90.0000 | 4.00% | 5.97% | 7.86 |\n| C | 10 years | 100,000 100.0000 | 6.00% | 6.00% | 9.27 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the modified duration of the bond collection, we can take a weighted average of the modified durations of the individual bonds, where the weights are the market values of each bond relative to the total market value of the collection.\n\n```python\ndef solution():\n    # Define the market values and modified durations of the individual bonds\n    market_values = {'A': 150000 * 0.95, 'B': 110000 * 0.90, 'C': 100000}\n    modified_durations = {'A': 4.98, 'B': 7.86, 'C': 9.27}\n\n    # Calculate the total market value of the portfolio\n    total_market_value = sum(market_values.values())\n\n    # Calculate the weighted modified durations of individual bonds\n    weighted_durations = {\n        bond: market_value / total_market_value * modified_durations[bond]\n        for bond, market_value in market_values.items()\n    }\n\n    # Calculate the modified duration of the bond collection\n    collection_modified_duration = sum(weighted_durations.values())\n\n    # Return the modified duration of the bond collection\n    return collection_modified_duration\n\n# Call the function and print the result\nprint(f\"The modified duration of the bond collection is: {solution()}\")\n```\n\nThis program effectively calculates the weighted modified durations for each bond and then sums them up to get the modified duration for the entire collection. The weight for each bond is its market value price divided by the total market value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-482",
        "question": "The Bull Corporation anticipates growth rates of 10% and 20% for the initial two years, after which it will drop to 6%. If we consider that the return rate is 10% and Bull's recent dividend was $1, what is the value of Bull's ordinary shares?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the price of an ordinary share for Bull Corporation considering the given growth rates and the recent dividend, we will calculate the dividend for each year and then discount each expected future dividend back to the present value using the formula for present value of a growing perpetuity when the growth rate stabilizes:\n\n\\[ P_0 = \\frac{D_0 \\times (1 + g)}{r - g} \\]\n\nwhere \\( P_0 \\) is the price of the stock today, \\( D_0 \\) is the most recent dividend payment, \\( g \\) is the growth rate in perpetuity after the initial growth periods, and \\( r \\) is the required return rate.\n\nWe will adjust the formula for the first two years' dividends because we know they will grow by 10% and 20%, respectively, before the growth rate drops to 6%.\n\nHere is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    recent_dividend = 1  # Most recent dividend ($)\n    growth_rates = [0.10, 0.20]  # Growth rates for the first and second year\n    stable_growth_rate = 0.06  # Growth rate after year 2\n    required_return_rate = 0.10  # The required return rate\n    \n    # Calculate the expected dividends for the first two years\n    dividends_year_1 = recent_dividend * (1 + growth_rates[0])\n    dividends_year_2 = dividends_year_1 * (1 + growth_rates[1])\n    \n    # Calculate the present value of these dividends\n    pv_dividends_year_1 = dividends_year_1 / ((1 + required_return_rate)**1)\n    pv_dividends_year_2 = dividends_year_2 / ((1 + required_return_rate)**2)\n    \n    # Calculate the price of the stock at the beginning of year 3 using the growing perpetuity formula\n    # This will be discounted as well to the present value\n    pc_start_year_3 = (dividends_year_2 * (1 + stable_growth_rate)) / (required_return_rate - stable_growth_rate)\n    pv_pc_start_year_3 = pc_start_year_3 / ((1 + required_return_rate)**2)\n    \n    # Sum of the present values to get the total value of the stock\n    value_of_stock = pv_dividends_year_1 + pv_dividends_year_2 + pv_pc_start_year_3\n    \n    # return answer\n    return value_of_stock\n\n# Call the function and print the result\nprint(solution())\n```\n\nBy running the solution function, you would get the current value of Bull Corporation's ordinary shares considering the provided growth rates, the recent dividend, and the required rate of return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-483",
        "question": "The financial institution, TK Bank, gains arbitrage profit from the money market. They utilize a money market tool, a certificate of deposit, that has a maturity period of 300 days under the assumption that a year comprises 360 days. Given that the present value of this instrument is 93.2 and the maturity price is 100, can you determine the bond equivalent yield?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    present_value = 93.2\n    maturity_value = 100\n    maturity_period = 300\n    year_days = 360\n    \n    # Calculate the discount yield\n    discount_yield = (maturity_value - present_value) / maturity_value\n    \n    # Calculate the bond equivalent yield\n    bond_equivalent_yield = (discount_yield * year_days) / maturity_period\n    \n    # Return answer\n    return bond_equivalent_yield\n\n# To display the result as a percentage, you might multiply by 100.\n# print(\"Bond Equivalent Yield: {:.2f}%\".format(solution()*100))\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-484",
        "question": "The yield of a portfolio with four stocks is equivalent to:",
        "tables": [
            "| Equity | Asset Allocation (%) | Asset Class Return (%) |\n|--------|----------------------|------------------------|\n| Equity A | 10.0 | 3.0 |\n| Equity B | 20.0 | 19.0 |\n| Equity C | 55.0 | -1.0 |\n| Equity D | 15.0 | 6.0 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the allocation and returns for each equity\n    allocations = {\n        'Equity A': 10.0,\n        'Equity B': 20.0,\n        'Equity C': 55.0,\n        'Equity D': 15.0\n    }\n    returns = {\n        'Equity A': 3.0,\n        'Equity B': 19.0,\n        'Equity C': -1.0,\n        'Equity D': 6.0\n    }\n    \n    # Calculate the weighted average return\n    portfolio_return = sum(allocations[equity] * returns[equity] for equity in allocations) / 100\n    \n    # return the calculated portfolio return\n    return portfolio_return\n\n# Call the solution function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-485",
        "question": "On the following day, Roberts advises Green to take another look at her analysis on XYZ Corp. Green's study leads her to conclude that the company's shares are underpriced. She communicates her findings to Roberts, who directs her to buy 120,000 shares at $40.00 using a limit order of $42.00 at 10 a.m. The buy-side dealer implements the order for market execution as the price hits $40.50. The exclusive fee is a commission of $0.02 per share. By market close, 90,000 shares of the order were bought, with XYZ Corp ending at $42.50. The transaction was discharged at an average cost of $41.42. Information about the completed deals is given in Exhibit 1. Based on the information provided in Exhibit 1, what is the opportunity cost of buying the 90,000 shares of XYZ Corp?",
        "tables": [
            "| Trades | Execution  Price | Shares Executed |\n|--------|------------------|-----------------|\n| Trade 1 | $40.75 | 10,000 |\n| Trade 2 | $41.25 | 30,000 |\n| Trade 3 | $41.50 | 20,000 |\n| Trade 4 | $41.75 | 30,000 |\n| Total |  | 90,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "The opportunity cost for buying the 90,000 shares can be calculated as the difference between the closing price (the value they could have been sold for) and the actual average cost of buying the shares. Since the program requires us to use the data from the given trades, we first need to calculate the average cost from the given trades table.\n\nOpportunity Cost = (Closing Price - Average Cost per share) * Number of Shares Bought\n\nNote: The exclusive fee (commission) has already been factored into the average cost of $41.42, as stated in the question, so we won't consider it again in our calculation.\n\n```python\ndef solution():\n    # Define variables\n    closing_price = 42.50\n    avg_cost_per_share = 41.42\n    shares_bought = 90000\n    \n    # Calculate the opportunity cost\n    opportunity_cost = (closing_price - avg_cost_per_share) * shares_bought\n    \n    # Return the opportunity cost\n    return opportunity_cost\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis Python function calculates the opportunity cost as requested and prints out the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-486",
        "question": "Three brokers are involved in making the market for the stocks of Bright Systems. Using these rates, YNSM's trading desk carries out a market sell order for 1,100 stocks of Bright Systems. Based on Exhibit 1, what is the inside bid–ask spread for the limit order book for Bright Systems?",
        "tables": [
            "| Dealer | Time   Entered | Price  | Size | Dealer | Time   Entered | Price  | Size |\n|--------|---------------|--------|------|--------|---------------|--------|------|\n| B      | 10.10 a.m.    | $17.15 | 900  | C      | 10.11 a.m.    | $17.19 | 1,200|\n| C      | 10.11 a.m.    | $17.14 | 1,500| B      | 10.10 a.m.    | $17.20 | 800  |\n| A      | 10.11 a.m.    | $17.12 | 1,100| A      | 10.12 a.m.    | $17.22 | 1,100|"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To find the inside bid-ask spread for the limit order book of Bright Systems, we need to determine the highest bid price (the highest price at which someone is willing to buy the stock) and the lowest ask price (the lowest price at which someone is willing to sell the stock). \n\nFrom the provided table, we can see that the bid prices are $17.15 and $17.20, and the ask prices are $17.19, $17.14, and $17.22. The highest bid is $17.20 and the lowest ask is $17.14.\n\nThe inside bid-ask spread is the difference between these two prices.\n\nHere's the Python program to calculate the inside bid-ask spread:\n\n```python\ndef solution():\n    # Define highest bid and lowest ask\n    highest_bid = 17.20\n    lowest_ask = 17.14\n    \n    # Calculate the inside bid-ask spread\n    inside_spread = lowest_ask - highest_bid\n    \n    # Since the inside spread cannot be negative in a valid market, we ensure the calculation is correct\n    # by taking the absolute value (in case of incorrect input)\n    inside_spread = abs(inside_spread)\n    \n    # return inside_spread\n    return inside_spread\n\n# Call the function and print the result\nprint(f\"The inside bid-ask spread is: ${solution():.2f}\")\n```\n\nNote: If instead of direct values we were to find the highest bid and lowest ask programmatically from a list or another form of data input, we would sort or search through the data accordingly. However, for this simple example with direct values given, that's not necessary."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-487",
        "question": "Enterprise Z announced a COGS of $75 million. Over the year, there was a decrease of $12 million in inventory and an increase of $8 million in accounts payable. What is the total cash given to suppliers?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program to calculate the total cash given to suppliers by Enterprise Z:\n\n```python\ndef solution():\n    # Define variables name and value\n    COGS = 75000000\n    decrease_inventory = 12000000\n    increase_accounts_payable = 8000000\n    \n    # Do math calculation to get the answer\n    # Cash given to suppliers = COGS - Decrease in Inventory + Increase in Accounts Payable\n    cash_given_to_suppliers = COGS - decrease_inventory + increase_accounts_payable\n    \n    # return answer\n    return cash_given_to_suppliers\n\n# Calling the function and printing the result for verification\nprint(solution())  # This line is not required as part of the solution, only for checking the output\n```\n\nRunning the `solution()` function will calculate the total cash given to suppliers."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-488",
        "question": "What is the covariance of returns for Stock X and Stock Y, given the correlation of their historical returns is 0.75, and the variances for Stock X and Stock Y are 0.16 and 0.09, respectively?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here is the Python program to calculate the covariance of returns for Stock X and Stock Y:\n\n```python\ndef solution():\n    \n    # Define variables for correlation and variances\n    correlation = 0.75\n    variance_x = 0.16\n    variance_y = 0.09\n    \n    # Calculate standard deviations for each stock\n    std_dev_x = variance_x ** 0.5\n    std_dev_y = variance_y ** 0.5\n    \n    # Do math calculation to get the covariance\n    covariance = correlation * std_dev_x * std_dev_y\n    \n    # return covariance\n    return covariance\n\n# You can optionally call the function to see the returned value\n# print(solution())\n```\n\nWhen this program runs, it will calculate and return the covariance of returns for Stock X and Stock Y, which is based on the correlation of their historical returns, and the variances of each stock."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-489",
        "question": "What is the worth of a preferred share if the necessary return is 10% and the yearly dividend is $5?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program to calculate the worth, or price, of a preferred share, given the required return rate and the yearly dividend:\n\n```python\ndef solution():\n    # Define variables for annual dividend and required return rate\n    annual_dividend = 5\n    required_return = 0.10\n    \n    # Calculate the price of the preferred share\n    preferred_share_worth = annual_dividend / required_return\n    \n    # Return the worth of the preferred share\n    return preferred_share_worth\n\n# This line is only for testing the function, it is not part of the function.\nprint(solution())\n```\n\nYou can use `solution()` function to get the worth of the preferred share. In this example, we've also added a print statement at the end for testing purposes. If you only need the function, you can omit the print statement."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-490",
        "question": "What is the interest coverage ratio of the operating statement, if calculated by the more conservative interest coverage ratio method, for the corporation?",
        "tables": [
            "| Fiscal year end (USD  millions) | December 2018 |\n|---------------------------------|---------------|\n| Revenue                         | $31,218.00    |\n| Cost of goods sold              | $25,454.00    |\n| Sales, general, and administrative| $1,638.00    |\n| Depreciation and amortization   | $441.00       |\n| Operating income                | $3,685.00     |\n| Interest expense                | $103.00       |\n| Income before taxes             | $3,582.00     |\n| Provision for income taxes      | $1,121.00     |\n| Net income                      | $2,461.00     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "The interest coverage ratio (ICR) is calculated by taking the earnings before interest and taxes (EBIT) and dividing it by the interest expense. The ICR indicates how well a company can cover its interest obligations with its pretax earnings. Since operating income is essentially EBIT, we can use the operating income to calculate ICR in this case.\n\nTo calculate the more conservative interest coverage ratio, we will use:\nInterest Coverage Ratio = Operating Income / Interest Expense\n\nHere is the Python program to calculate the ICR:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_income = 3685.00  # in millions of USD\n    interest_expense = 103.00   # in millions of USD\n    \n    # Do math calculation to get the answer\n    interest_coverage_ratio = operating_income / interest_expense\n    \n    # return answer\n    return interest_coverage_ratio\n\n# Example usage:\n# icr = solution()\n# print(icr)\n```\nWhen you call `solution()`, it will return the interest coverage ratio. If you wish to print the ratio, you could uncomment the last two lines to see the output."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-491",
        "question": "A researcher is determining a historical ERP for a market based on the same data. What is the historical ERP?",
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.019\n    expected_growth_PE = -0.012\n    expected_income_component = 0.018\n    expected_growth_real_eps = 0.027\n    expected_change_shares_outstanding = 0.000\n    current_three_month_gov_bond_yield = 0.0096\n    long_term_geo_avg_return_market_index = 0.0996\n    long_term_geo_avg_return_short_term_gov_bond = 0.0315\n\n    # Do math calculation to get the answer\n    # The historical ERP can be estimated using the following formula:\n    # ERP = (Expected income component + Expected growth in real earnings per share + \n    # Expected inflation + Expected growth in P/E + Expected change in shares outstanding) - \n    # Current government bond yield\n    historical_erp = (\n        expected_income_component + expected_growth_real_eps + \n        expected_inflation + expected_growth_PE + \n        expected_change_shares_outstanding\n    ) - current_three_month_gov_bond_yield\n    \n    # return answer\n    return historical_erp\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis script defines the given variables and calculates the historical Equity Risk Premium (ERP) based on the provided data. It accounts for expected inflation, growth in Price-to-Earnings (P/E) ratio, income component, growth in real earnings per share, and changes in shares outstanding. It then subtracts the yield of the current three-month government bond to determine the historical ERP."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-492",
        "question": "If r stands for 4% and E(MR) equals 10%, then what would be the expected yield for a security with a beta of 1.3?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To calculate the expected yield for a security with a beta of 1.3 using the Capital Asset Pricing Model (CAPM), we use the formula:\n\nExpected Return (ER_i) = Risk-Free Rate (r) + Beta_i * (Expected Market Return (E_MR) - Risk-Free Rate (r))\n\nHere, Risk-Free Rate (r) is 4% or 0.04 and Expected Market Return (E_MR) is 10% or 0.10.\n\nLet's put this into a Python program.\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04  # Risk-free rate (4%)\n    beta = 1.3  # Beta for the security\n    expected_market_return = 0.10  # Expected Market Return (10%)\n    \n    # Do math calculation to get the expected yield for the security\n    expected_yield = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    \n    # return answer\n    return expected_yield\n\n# To check the answer, you can call the function\nprint(solution())\n```\n\nRunning the program will give you the expected yield for a security with a beta of 1.3."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-493",
        "question": "A yearly coupon bond is valued at par value, with a coupon rate of 5%, and it will mature in 10 years. If one plans to invest for five years and the approximate modified duration of the bond is 6.872, what should the duration gap be at the point of buying?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Variables given in the question\n    investment_duration = 5\n    bond_duration = 6.872  # approximate modified duration of the bond\n    \n    # The duration gap is the difference between the bond's duration and the investment horizon\n    duration_gap = investment_duration - bond_duration\n    \n    # return the duration gap\n    return duration_gap\n\n# Example usage:\n# gap = solution()\n# print(\"The duration gap should be:\", gap)\n```\n\nThis program calculates the duration gap, which is the difference between the investor's investment horizon and the bond's duration. If an investor is planning to hold a bond for a different period than the bond's duration, this duration gap can give an indication of the exposure to interest rate risk."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-494",
        "question": "If an investment analyst is looking into buying a bond that has a 5.5% annual interest rate and matures in three years, and if the anticipated rate of return on the bond is 5%, what should be the bond's price per 100 of par value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    annual_interest_rate = 0.055  # This is 5.5%\n    maturity_years = 3  # The bond matures in 3 years\n    rate_of_return = 0.05  # This is the required rate of return\n    par_value = 100  # Par value per 100\n\n    # Calculate the present value of the coupon payments and the par value\n    # Present value of annuity formula: PV = C * [1 - (1 + r)^(-n)] / r\n    coupon_payment = par_value * annual_interest_rate\n    present_value_of_coupons = coupon_payment * (1 - (1 + rate_of_return)**(-maturity_years)) / rate_of_return\n\n    # Present value of a single sum formula: PV = FV / (1 + r)^n\n    present_value_of_par = par_value / ((1 + rate_of_return)**maturity_years)\n\n    # The price of the bond is the sum of the present values\n    bond_price = present_value_of_coupons + present_value_of_par\n\n    # return the bond price\n    return bond_price\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the bond's price based on the provided annual interest rate, maturity, and anticipated rate of return. The present value of the annuity is calculated for the coupon payments while the present value of a single sum is computed for the par value at maturity. The sum of these present values gives us the bond's price."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-495",
        "question": "What is the total comprehensive income (in millions) of the firm as per the data available from the firm's financial documents?",
        "tables": [
            "|                                         | Emillions   |\n|-----------------------------------------|-------------|\n| Revenues for the year                   | 12,500      |\n| Total expenses for the year             | 10,000      |\n| Unrealized gains from available-for-sale securities | 1,475       |\n| Loss on foreign currency translation adjustments on a foreign subsidiary | 325         |\n| Dividends paid                          | 500         |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenues = 12500\n    total_expenses = 10000\n    unrealized_gains_securities = 1475\n    loss_foreign_currency_translation = 325\n    dividends_paid = 500\n\n    # Do math calculation to get the answer\n    # Total comprehensive income is the combination of net income and other comprehensive income\n    # Net income = Revenues - Total expenses\n    net_income = revenues - total_expenses\n\n    # Other comprehensive income includes unrealized gains and losses that are not included in net income\n    other_comprehensive_income = unrealized_gains_securities - loss_foreign_currency_translation\n\n    # Total comprehensive income = Net income + Other comprehensive income\n    total_comprehensive_income = net_income + other_comprehensive_income\n\n    # Dividends paid is not included in the calculation of comprehensive income\n    # It's a distribution of profits, not part of the income calculation.\n\n    # Return answer\n    return total_comprehensive_income\n\n# Call the function and print the result for validation\nprint(solution())\n```\n\nWhen you run the above `solution` function, it will calculate and return the total comprehensive income of the firm based on the provided financial data. Please note, dividends paid are not used in the calculation as they are a distribution of income, not an income component itself."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-496",
        "question": "John just got $30 million. His blueprint is to put this money at a risk-free rate of 3% and subsequently switch them into euros after six months. To safeguard against the currency risk, John opts to buy forward contracts. The rate for six-month forward is 1.10 USD/EUR, with the spot rate currently at 1.13 USD/EUR. The day-count convention being used is 30/360. If John utilizes a six-month forward contract as his risk hedge, what will his calculated annualized return in euros be?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    investment = 30000000\n    annual_risk_free_rate = 0.03\n    forward_rate = 1.10\n    spot_rate = 1.13\n    duration_in_months = 6\n    days_count_convention = 360\n    \n    # Calculate the future value of the investment at the risk-free rate\n    semi_annual_risk_free_rate = annual_risk_free_rate / 2\n    future_value = investment * (1 + semi_annual_risk_free_rate)\n    \n    # Convert the future value into euros using the forward rate\n    future_value_in_euros = future_value / forward_rate\n    \n    # Calculate the initial value in euros using the spot rate\n    initial_value_in_euros = investment / spot_rate\n    \n    # Calculate the six-month return in euros\n    six_month_return_in_euros = future_value_in_euros - initial_value_in_euros\n    \n    # Calculate the annualized return in euros\n    annualized_return_in_euros = (six_month_return_in_euros / initial_value_in_euros) * (days_count_convention / (duration_in_months * 30))\n    \n    # Return the annualized return in euros as a percentage\n    return annualized_return_in_euros * 100\n\n# Call the function and print the result\nprint(solution())\n```\nThis Python program defines the given variables and calculates the annualized dollar return by considering the six-month forward contract used to hedge against the currency risk. After the calculations, it returns the annualized return in euros as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-497",
        "question": "A supervisor is interested in implementing a collar strategy. The existing price of shares is $20, a put option with a strike price of $15 is sold at $2.0, and a call option with a strike price of $30 is going for $2.0. What is the profit of this strategy if the price of the base share at the end is $35?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price_initial = 20\n    put_strike_price = 15\n    put_option_premium = 2.0\n    call_strike_price = 30\n    call_option_premium = 2.0\n    share_price_final = 35\n    \n    # Calculate cost of entering the collar\n    net_premium = put_option_premium - call_option_premium  # Premium earned from put - premium paid for call\n    \n    # When the final price is $35, the call option will be exercised.\n    # Hence the shares will be sold at the call strike price of $30.\n    # The profit from selling the shares is strike price ($30) - initial price ($20) + net premium.\n    # Since the share's final price is above both the call and put strike prices, \n    # the put option will expire worthless and won't be exercised.\n    \n    profit = (call_strike_price - share_price_initial + net_premium)\n    \n    # return answer\n    return profit\n    \n# Call the function and display the answer\nprint(solution())\n```\n\nThis Python program defines the strategy, calculates the optimal outcomes based on the collar strategy when the share's final price is $35, and returns the profit from the strategy."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-498",
        "question": "What is the price of a Treasury bond quoted at 97-19+ as a percentage of par?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quoted_price = 97 + 19 / 32  # Treasury bonds are quoted in 32nds\n    \n    # Do math calculation to get the answer\n    price_percentage_of_par = quoted_price / 100 * 100  # Convert quoted price to percentage of par\n    \n    # return answer\n    return price_percentage_of_par\n    \n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-499",
        "question": "A researcher predicts that 20% of high-risk bonds will become insolvent. If he uses an insolvency prediction model, he discovers that 70% of the bonds will be given a \"good\" rating, suggesting they are less likely to become insolvent. Of the bonds that became insolvent, only 50% had a \"good\" rating. Use Bayes' theorem to determine the probability of insolvency given a \"good\" rating. (Hint, let P(A) be the probability of insolvency, P(B) be the probability of a \"good\" rating, P(B | A) be the likelihood of a \"good\" rating given insolvency, and P(A | B) be the likelihood of insolvency given a \"good\" rating.)",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # Probability of insolvency\n    P_B = 0.70  # Probability of a \"good\" rating\n    P_B_given_A = 0.50  # Probability of a \"good\" rating given insolvency\n    \n    # Calculate P(A | B) using Bayes' theorem\n    # P(A | B) = P(B | A) * P(A) / P(B)\n    \n    P_A_given_B = (P_B_given_A * P_A) / P_B\n    \n    # return answer\n    return P_A_given_B\n\n# To test the function, uncomment the next line:\n# print(solution())\n```\n\nIf you run the solution function, it will calculate the probability of insolvency given a \"good\" rating by employing Bayes' theorem."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-500",
        "question": "If f(0,1)=0.75%, f(1,1)=0.98%, f(2,1)=1.75%, f(2,2)=2.21%, what is the worth of a three-year bond from XYZ Corp. that pays a 6% coupon on a yearly basis?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To value the three-year bond from XYZ Corp that pays a 6% coupon annually, we need to discount each future cash flow back to its present value. The cash flows are the annual payments of 6% of the face value of the bond (usually $1,000 unless stated otherwise) and the face value payment at the end of the third year. We'll use the given forward rates as our discount rates, but these need to be converted into the appropriate discount factors for each year.\n\nHere's how you can write a Python program to calculate the present value of this bond:\n\n```python\ndef solution():\n    # Given annual coupon rate in decimal form\n    coupon_rate = 0.06\n    \n    # Given forward rates in decimal form\n    f01 = 0.0075\n    f11 = 0.0098\n    f21 = 0.0175\n    f22 = 0.0221\n    \n    # Assuming a face value of 1000 (common for bonds)\n    face_value = 1000\n    \n    # The coupon payment is 6% of the face value\n    coupon_payment = coupon_rate * face_value\n    \n    # Calculate the discount factors\n    df01 = 1 / (1 + f01)\n    df11 = 1 / (1 + f11) / df01 # discount for 2nd year needs to account for the first year\n    df21 = 1 / (1 + f21) / df11 / df01 # discount for 3rd year needs to account for the first and second year\n    df22 = 1 / (1 + f22) / df21 / df11 / df01 # discount for 4th year, not used\n    \n    # Calculate the present value of each cash flow\n    pv_coupon1 = coupon_payment * df01\n    pv_coupon2 = coupon_payment * df11\n    pv_coupon3 = coupon_payment * df21\n    \n    # Calculate the present value of the face value (paid at maturity)\n    pv_face_value = face_value * df21\n    \n    # Sum all cash flows to get the bond's present value\n    bond_value = pv_coupon1 + pv_coupon2 + pv_coupon3 + pv_face_value\n    \n    return bond_value\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis script calculates the present value of all future cash flows associated with the bond and sums them up to determine the bond's current worth based on the given forward rates."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-501",
        "question": "By the conclusion of 2016, Corporation A had an accounts receivable totaling $50 million. By the conclusion of 2017, Corporation A had generated revenues of $60 million, with the year's accounts receivable amounting to $30. What should be the sum of cash collected from the clientele?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Certainly! To calculate the sum of cash collected from customers, we need to consider the revenues generated and the change in accounts receivable. Here's the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue_2017 = 60000000  # $60 million\n    accounts_receivable_2016 = 50000000  # $50 million by the end of 2016\n    accounts_receivable_2017 = 30000000  # $30 million by the end of 2017\n    \n    # Do math calculation to get the answer\n    # Cash collection = Revenue - Increase in accounts receivable (if any)\n    increase_in_receivables = accounts_receivable_2017 - accounts_receivable_2016\n    cash_collected = revenue_2017 - increase_in_receivables\n    \n    # return answer\n    return cash_collected\n\n# Call the function and print the result for verification\nprint(solution())\n``` \n\nThe `solution()` function will calculate the difference between the accounts receivable from 2016 to 2017 to determine how much the accounts receivable increased or decreased. By subtracting this difference from the total revenue in 2017, you get the total amount of cash that was collected from customers during 2017."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-502",
        "question": "Two years earlier, a corporation released $20 million in long-term bonds at face value with a 9 percent coupon rate. The firm plans to release another $20 million in bonds and anticipates that the new issue will be priced at face value with a 7 percent coupon rate. The firm has no other outstanding liabilities and is taxed at a rate of 40 percent. What is the proper after-tax debt cost to calculate the firm's weighted average cost of capital?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate_old = 0.09\n    coupon_rate_new = 0.07\n    amount_bonds_old = 20000000\n    amount_bonds_new = 20000000\n    tax_rate = 0.40\n    \n    # Calculate the total interest expense\n    total_interest_old = coupon_rate_old * amount_bonds_old\n    total_interest_new = coupon_rate_new * amount_bonds_new\n\n    # Calculate after-tax interest expense for each bond\n    after_tax_interest_old = total_interest_old * (1 - tax_rate)\n    after_tax_interest_new = total_interest_new * (1 - tax_rate)\n    \n    # Calculate the total after-tax interest expense\n    total_after_tax_interest = after_tax_interest_old + after_tax_interest_new\n    \n    # Since we're issuing another $20 million at a different rate, \n    # we weigh the cost by the proportion of each bond issue to the total bond value\n    total_bond_value = amount_bonds_old + amount_bonds_new\n    weighted_after_tax_interest = (after_tax_interest_old + after_tax_interest_new) / total_bond_value\n\n    # return answer\n    return weighted_after_tax_interest\n\n# Call the function and print the answer\nprint(solution())\n```\n\nNote: The code calculates the weighted average after-tax cost of the old and new bond issues to use in the WACC calculation. In an actual WACC calculation, the firm's other sources of capital, such as equity, would also need to be considered. This example solely focuses on the debt component."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-503",
        "question": "Two years prior, Johnson Industries bought equipment for $800,000. By the close of last year, the equipment was worth $720,000. If Johnson Industries uses the revaluation model, how much, if any, is recorded in Johnson's net income this year if the equipment's fair value has risen to $810,000?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 800000\n    value_last_year = 720000\n    current_fair_value = 810000\n    \n    # Do math calculation to find out if there's any increase in fair value recorded in net income\n    # Under the revaluation model, increases in the carrying amount of an asset are recognized in other comprehensive income and accumulated\n    # in equity under revaluation surplus. However, they are transferred directly to retained earnings when they reverse a revaluation decrease\n    # of the same asset previously recognized in profit or loss. \n    # In this case, the equipment has increased in value from 720000 to 810000. Since the original cost was 800000,\n    # the increase from 720000 to 800000 can be considered as reversal of a loss and recognized in profit and loss,\n    # and the increase from 800000 to 810000 is recognized in equity. \n\n    # Net income impact calculation\n    if current_fair_value <= original_cost:\n        # If fair value is below or equal to the original cost, all increase is recognized in the profit and loss.\n        net_income_impact = current_fair_value - value_last_year\n    else:\n        # If fair value is above the original cost, only the increase up to the original cost is recognized in profit and loss.\n        net_income_impact = original_cost - value_last_year\n    \n    # return answer\n    return net_income_impact\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-504",
        "question": "Sagittarius Portfolio of Portfolios invests GBP 100 million in each of Gamma Hedge Fund and XYZ Hedge Fund. Sagittarius POP has a \"1 and 10\" fee structure. Management fees and incentive fees are calculated separately at the end of each year. After one year, net of their respective management and incentive fees, the investment in Gamma is valued at GBP80 million and the investment in XYZ is valued at GBP140 million. What is the yearly return to a shareholder in Sagittarius, after deducting fees at the portfolio of portfolios level?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Investment in each of Gamma Hedge Fund and XYZ Hedge Fund\n    investment_in_each_fund = 100e6  # GBP 100 million\n\n    # Sagittarius POP fee structure \"1 and 10\":\n    # 1% management fee and 10% incentive fee\n    \n    # Ending value of investments after respective management and incentive fees\n    value_after_fees_gamma = 80e6  # GBP 80 million\n    value_after_fees_xyz = 140e6   # GBP 140 million\n\n    # Total investment by Sagittarius Portfolio of Portfolios (POP)\n    total_initial_investment = 2 * investment_in_each_fund  # GBP 200 million\n\n    # Total value after fees\n    total_value_after_fees = value_after_fees_gamma + value_after_fees_xyz\n\n    # Calculate Sagittarius POP level fees\n    # Management fee of 1%\n    management_fee = total_initial_investment * 0.01\n    \n    # Net performance of the portfolio of portfolios\n    net_performance = total_value_after_fees - total_initial_investment\n\n    # Incentive fee of 10% on profits\n    incentive_fee = max(net_performance * 0.10, 0)  # No incentive fee if there is no profit\n\n    # Subtract the fees from the net performance to get shareholder's return\n    net_performance_after_pop_fees = net_performance - management_fee - incentive_fee\n\n    # Calculate the yearly return to a shareholder\n    yearly_return_to_shareholder = net_performance_after_pop_fees / total_initial_investment\n    \n    return yearly_return_to_shareholder\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-505",
        "question": "A financial analyst named Ahern from a certain investment firm recently compiled data for an equal-weighted index which includes assets A, B, and C: What is the combined return of this index?",
        "tables": [
            "|      | Beginning of Period Price(€) | End of Period Price(毛) | Total Dividends(€) |\n|------|-------------------------------|-------------------------|---------------------|\n| A    | 8.00                          | 10.00                   | 0.50                |\n| B    | 22.00                         | 19.00                   | 1.20                |\n| C    | 25.00                         | 25.00                   | 1.50                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the combined return of the equal-weighted index, we'll have to calculate the return for each asset first, which can be done using the formula: \n\n\\[ \\text{Return of an asset} = \\frac{\\text{End of Period Price} + \\text{Total Dividends} - \\text{Beginning of Period Price}}{\\text{Beginning of Period Price}} \\]\n\nAnd then we average the returns of assets A, B, and C, to obtain the combined return for the index.\n\nHere's a Python program that does this:\n\n```python\ndef solution():\n    # Define variables name and value\n    # For asset A\n    beginning_price_A = 8.00\n    end_price_A = 10.00\n    dividends_A = 0.50\n    \n    # For asset B\n    beginning_price_B = 22.00\n    end_price_B = 19.00\n    dividends_B = 1.20\n    \n    # For asset C\n    beginning_price_C = 25.00\n    end_price_C = 25.00\n    dividends_C = 1.50\n    \n    # Calculate return for each asset\n    return_A = (end_price_A + dividends_A - beginning_price_A) / beginning_price_A\n    return_B = (end_price_B + dividends_B - beginning_price_B) / beginning_price_B\n    return_C = (end_price_C + dividends_C - beginning_price_C) / beginning_price_C\n    \n    # Calculate the average of the returns to get combined return for the index\n    combined_return = (return_A + return_B + return_C) / 3\n    \n    # return answer\n    return combined_return\n\n# You can call the function to get the result\nresult = solution()\nprint(f\"The combined return of the index: {result * 100:.2f}%\")\n```\n\nRunning this program will return the combined return of the index as a decimal. To express as a percentage, you can multiply by 100."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-506",
        "question": "John is getting ready to compute the intrinsic value of Company N's equity utilizing the FCFF model with an infinite growth rate of 5%. The pertinent information can be found in the table below. What's the value of Company N's equity?",
        "tables": [
            "| Financial Statement for Company M | $ millions |\n| --- | --- |\n| Net Income | 212 |\n| Depreciation expense | 88 |\n| Increase in inventories | 50 |\n| Increase in accounts payable | 25 |\n| Purchase of fixed assets | 100 |\n| Increase in notes payable | 60 |\n| Decrease in long-term debt | 50 |\n| Interest expense | 100 |\n\n| Additional information | |\n| --- | --- |\n| Tax rate | 30% |\n| Beta | 0.8 |\n| Before-tax cost of debt | 5% |\n| D/A ratio | 40% |\n| Risk-free rate | 2.4% |\n| Market risk premium | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "The intrinsic value of Company M's equity using the Free Cash Flow to Firm (FCFF) model with an infinite growth rate can be computed by first calculating the FCFF and then discounting it by the weighted average cost of capital (WACC) adjusted for the perpetual growth rate. The FCFF is calculated as:\n\nFCFF = Net Income + Depreciation expense - Increase in inventories - Purchase of fixed assets + Increase in accounts payable + Increase in notes payable - (Increase in inventories + Increase in accounts payable) * Tax rate\n\nTo calculate WACC, we need to use the formula:\n\nWACC = (E/V * Re) + (D/V * Rd * (1 - Tax rate))\n\nWhere:\nRe is the cost of equity, calculated using the Capital Asset Pricing Model (CAPM): Re = Risk-free rate + Beta * (Market risk premium)\nRd is the before-tax cost of debt.\nE/V is the percentage of financing that is equity, which is 1 - D/A ratio.\nD/V is the percentage of financing that is debt, which is D/A ratio.\nV is the total value of financing, which is the sum of debt and equity.\n\nLet's write the Python program to calculate the intrinsic value of Company M's equity considering an infinite growth rate of 5%.\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 212\n    depreciation_expense = 88\n    increase_in_inventories = 50\n    increase_in_accounts_payable = 25\n    purchase_of_fixed_assets = 100\n    increase_in_notes_payable = 60\n    decrease_in_long_term_debt = 50\n    tax_rate = 0.30\n    beta = 0.8\n    before_tax_cost_of_debt = 0.05\n    debt_to_assets_ratio = 0.40\n    equity_to_value_ratio = 1 - debt_to_assets_ratio\n    debt_to_value_ratio = debt_to_assets_ratio\n    risk_free_rate = 0.024\n    market_risk_premium = 0.07\n    perpetual_growth_rate = 0.05\n\n    # Calculate components of FCFF\n    # Adjust for tax shield on the increase in net working capital\n    tax_shield_on_nwc = (increase_in_inventories + increase_in_accounts_payable) * tax_rate\n    \n    # Now we calculate FCFF\n    fcff = (net_income + \n            depreciation_expense - \n            purchase_of_fixed_assets + \n            increase_in_accounts_payable + \n            increase_in_notes_payable - \n            tax_shield_on_nwc)\n    \n    # Calculate cost of equity using CAPM\n    cost_of_equity = risk_free_rate + beta * market_risk_premium\n    \n    # Calculate WACC\n    wacc = (equity_to_value_ratio * cost_of_equity) + (debt_to_value_ratio * before_tax_cost_of_debt * (1 - tax_rate))\n    \n    # Calculate intrinsic value of equity using the FCFF perpetual growth model\n    intrinsic_value_of_equity = fcff / (wacc - perpetual_growth_rate)\n    \n    # return answer\n    return intrinsic_value_of_equity\n\n# Call the function and print the result\nprint(f\"The intrinsic value of Company M's equity is: ${solution()} million\")\n```\n\nNote: The result from the function will be the intrinsic value of Company M's equity in $ million. The discounting of cash flows is done considering the FCFF model, which provides an estimation of the value of the company's equity, assuming that the company will continue growing at a perpetual rate indefinitely."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-507",
        "question": "By the conclusion of 2016, XYZ Corporation possessed assets worth $10 million and shareholders' equity of $3 million. What are the liabilities of XYZ Corporation?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 10000000\n    shareholders_equity = 3000000\n    \n    # Liabilities can be derived from the accounting equation:\n    # Assets = Liabilities + Shareholders' Equity\n    # So, we can calculate Liabilities as:\n    # Liabilities = Assets - Shareholders' Equity\n    liabilities = total_assets - shareholders_equity\n    \n    # return answer\n    return liabilities\n\n# Let's call the function and print the result for double-checking\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-508",
        "question": "Keeping in mind that each bond has three years left in its maturity, makes annual coupon payments, and has a BBB credit rating, when Jones constructs a binomial interest rate tree based on a 10% interest rate volatility assumption, with the present one-year rate being 1%, Panel A of Exhibit 2 gives an interest rate tree under the assumption that the benchmark yield curve drops by 30 bps. Panel B offers an interest rate tree presuming an increase in the benchmark yield curve by 30 bps. Jones concludes that the SM bond is currently being traded at an option-adjusted spread (OAS) of 13.95 bps in relation to the benchmark yield curve. Based on the data present in Exhibits 1 and 2, can you determine the effective duration for the SM bond?",
        "tables": [
            "| Issuer             | Coupon Rate | Price   | Bond Description        |\n|--------------------|-------------|---------|-------------------------|\n| Ayrault, Inc. (Al) | 5.25%       | 100.200 | Callable at par in one  |\n|                    |             |         | year and two years from |\n|                    |             |         | today                   |",
            "| Exhibit 2. Binomial Interest Rate Trees | |\n| --- | --- |\n| Panel A Interest Rates Shift Down by 30 bps | | | | | |\n| Year 0, Year 1, Year 2 | | | | | |\n| | |5.1968% | |7.0037% | |\n| 3.7000% | | | |5.7342% | |\n| | |4.2548% | | | |\n| | | | |4.6947% | |\n\n| Panel B Interest Rates Shift Up by 30 bps | | | | | |\n| Year 0, Year 1, Year 2 | | | | | |\n| | |5.8605% | |7.7432% | |\n| 4.3000% | | | |6.3396% | |\n| | |4.7982% | | | |\n| | | | |5.1904% | |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "The question asks to find the effective duration for the SM bond. According to the characteristics of duration, the effective duration of a bond can be computed by analyzing the changes in its price with respect to changes in interest rates. However, without complete information about the cash flows of the bond, specific information on the benchmark yield curve, and a more detailed algorithm or theorem to evaluate the bond's price sensitivity, providing an exact Python function to calculate the effective duration is challenging.\n\nThe effective duration of a bond can be approximated using the following formula when we have small parallel shifts in the yield curve:\n\n\\[ \\text{Effective Duration} \\approx \\frac{P^{-} - P^{+}}{2 * P_{0} * \\Delta y} \\]\n\nWhere:\n- \\( P^{-} \\) = price of the bond if the yield decreases by \\(\\Delta y\\)\n- \\( P^{+} \\) = price of the bond if the yield increases by \\(\\Delta y\\)\n- \\( P_{0} \\) = initial price of the bond\n- \\( \\Delta y \\) = change in yield (in decimal form)\n\nGiven the information in the question and assuming that Panel A and Panel B present prices for a yield decrease and increase scenario, respectively, and the change in yield is 30 basis points (or 0.30%), we can place these values into the approximation formula above.\n\nThe Python program structure would look as follows, however it must be noted that without the actual bond prices \\( P^{-} \\) and \\( P^{+} \\), we will not be able to calculate the effective duration. For the purpose of this exercise, I will use dummy placeholders for \\( P^{-} \\) and \\( P^{+} \\).\n\n```python\ndef solution():\n    # Define variables name and value\n    price_down = 0  # Placeholder for P^{-}, the price if yield decreases\n    price_up = 0    # Placeholder for P^{+}, the price if yield increases\n    price_original = 100.200  # P0, initial price of the bond\n    delta_yield = 0.0030  # Change in yield (30 bps)\n\n    # Calculate the Effective Duration\n    effective_duration = (price_down - price_up) / (2 * price_original * delta_yield)\n    \n    # return answer\n    return effective_duration\n\n# This is a placeholder value and should be replaced with actual bond prices once available.\n```\n\nWithout the actual prices of the bond for different yield scenarios, it is impossible to provide the correct effective duration. To complete this calculation, you would need the bond's cash flows and an appropriate pricing model to determine the bond's value in response to changes in the yield curve considering the OAS."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-509",
        "question": "In the year 2009, PlayJoy Ltd, a company that started operating in October of that year, bought 10,000 units of a toy costing ₤10 each in October. The toy had a good sale in October. Expecting high sales in December, PlayJoy acquired another 5,000 units at ₤11 each in November. During 2009, PlayJoy managed to sell 12,000 units each at a price of ₤15. What would be the cost of goods sold by PlayJoy under the weighted average cost method?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    units_first_purchase = 10000\n    cost_first_purchase = 10\n    units_second_purchase = 5000\n    cost_second_purchase = 11\n    units_sold = 12000\n    \n    # Calculate total units and total cost\n    total_units = units_first_purchase + units_second_purchase\n    total_cost = (units_first_purchase * cost_first_purchase) + (units_second_purchase * cost_second_purchase)\n    \n    # Calculate weighted average cost per unit\n    weighted_average_cost = total_cost / total_units\n    \n    # Calculate cost of goods sold\n    cogs = units_sold * weighted_average_cost\n    \n    # return answer\n    return cogs\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThe above Python program defines the quantities and costs of units purchased and sold, and then calculates the total amount of units and total cost. Using these values, it computes the weighted average cost per unit, and multiplies this by the number of units sold to determine the cost of goods sold (COGS) using the weighted average cost method. Finally, it returns the calculated COGS."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-510",
        "question": "What is the annual amortization expense for the third year if firm N employs the double-declining balance method to amortize an $80,000 patent with a useful life of 4 years?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program to calculate the annual amortization expense for the third year using the double declining balance method:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 80000\n    useful_life = 4\n    double_declining_rate = 2 / useful_life\n\n    # Calculate depreciation for the first year\n    first_year_depreciation = initial_cost * double_declining_rate\n\n    # Calculate remaining book value after first year\n    remaining_book_value = initial_cost - first_year_depreciation\n\n    # Calculate depreciation for the second year\n    second_year_depreciation = remaining_book_value * double_declining_rate\n\n    # Calculate remaining book value after second year\n    remaining_book_value -= second_year_depreciation\n\n    # Calculate depreciation for the third year\n    third_year_depreciation = remaining_book_value * double_declining_rate\n\n    # In the last year of depreciation, we should not depreciate below the salvage value, which is 0.\n\n    # Check if the computed depreciation for third year is exceeding the remaining book value\n    # If it does, we use the remaining book value as the final year's depreciation.\n    # Either way, the remaining book value at the end of the useful life should be zero.\n\n    # However, the problem statement assumes we're using the double-declining balance method\n    # straight through to the end. Often with the DDB method, companies will switch to straight line\n    # when that would result in a lower depreciation value, but the question doesn't state this so\n    # we'll not assume that switch and assume the DDB until the end of the useful life as per\n    # question's requirements.\n    # Also, question suggests we're looking for the depreciation in the third year specifically.\n\n    # return answer (depreciation for the third year)\n    return third_year_depreciation\n\n# Calling the function\nprint(solution())\n```\n\nThis program first computes the depreciation for the first and second years using the double declining balance method, subtracts it from the initial cost to get the book value at the start of the third year, and then calculates the depreciation for the third year from the remaining book value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-511",
        "question": "What is the likelihood that a portfolio with a projected return of 7% and a standard deviation of 13%, won't meet the minimum annual return target of 4%, set by an investor?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To answer this question, we need to calculate the probability that the returns fall below the 4% target. This can be done by calculating the Z-score of the 4% return level and then finding the corresponding cumulative probability from a standard normal distribution.\n\nHere is the Python program that accomplishes this:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables\n    projected_return = 0.07  # 7% as a decimal\n    standard_deviation = 0.13  # 13% as a decimal\n    target_return = 0.04  # 4% as a decimal\n\n    # Calculate Z-score\n    z_score = (target_return - projected_return) / standard_deviation\n\n    # Calculate the cumulative probability up to the Z-score\n    probability = norm.cdf(z_score)\n\n    # return the probability (likelihood) that the target won't be met\n    return probability\n\n# Call the function and print the result\nprint(solution())\n```\nThis code uses `scipy.stats.norm.cdf` which gives the cumulative probability up to the given Z-score. This represents the likelihood that the return will fall below the target return of 4%."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-512",
        "question": "A portfolio intends to build a portfolio with the following two securities. If the portfolio's return is 21.5%, what is the weighting in Security 1?",
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|---------------------------|--------------------------------|\n| 1        | 25                        | 30                             |\n| 2        | 20                        | 30                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define the variables: returns of the securities and the portfolio's return\n    return_security1 = 0.25\n    return_security2 = 0.20\n    return_portfolio = 0.215\n\n    # Set up the equation return_portfolio = w1 * return_security1 + (1 - w1) * return_security2\n    # And solve for w1, which is the weight of security 1 in the portfolio\n    w1 = (return_portfolio - return_security2) / (return_security1 - return_security2)\n    \n    # return the weight of security 1 (as a decimal or percentage; here as a decimal)\n    return w1\n\n# Call the function to get the answer\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-513",
        "question": "XY Corporation has established a defined benefit pension plan with $150m in assets and $135m in commitments. It is predicted that: The expected annual income of the pension plan is 7.5percent, with a volatility of 10percent. The liabilities are expected to increase yearly at a rate of 5 percent and have a variation of 4.5 percent. The correlation coefficient between income from assets and liability growth is 0.7. Determine the 95% risk of surplus of the pension.",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    initial_surplus = 150 - 135  # The initial surplus is the difference between assets and liabilities.\n    expected_return_on_assets = 0.075\n    volatility_of_assets = 0.10\n    expected_growth_in_liabilities = 0.05\n    volatility_of_liabilities = 0.045\n    correlation = 0.7\n    confidence_level = 0.95\n\n    # Calculate the expected surplus growth and its volatility\n    expected_surplus_growth = expected_return_on_assets - expected_growth_in_liabilities\n    surplus_volatility = (volatility_of_assets ** 2 + volatility_of_liabilities ** 2 - \n                          2 * correlation * volatility_of_assets * volatility_of_liabilities) ** 0.5\n\n    # Calculate the z-score for the 95% confidence level\n    z_score = norm.ppf(confidence_level)\n    \n    # Calculate the 95% risk of surplus (Value-at-Risk)\n    risk_of_surplus = initial_surplus + expected_surplus_growth - z_score * surplus_volatility\n\n    # return answer\n    return risk_of_surplus\n    \n# Run the solution function and print the result\nprint(f\"The 95% risk of surplus of the pension is: {solution():.2f}\")\n```\n\nNote: The `scipy.stats.norm.ppf` function is used to calculate the z-score for the normal distribution at the given confidence level (95% in this case). The `solution` function returns the 95% risk of surplus of the pension plan, which is calculated by accounting for expected growth and volatility in both assets and liabilities, incorporating the correlation between them."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-514",
        "question": "John is thinking about incorporating ABC Corp. into his investment portfolio. The latest dividend payment by the company is 1.45 per share. He observes that ABC Corp.'s dividends have risen at a standard pace of 6 percent. John concluded that the required return on equity for ABC Corp. is 12%. Can you estimate the value of ABC Corp.'s stock based on this information?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the value of ABC Corporation's stock, we can use the Gordon Growth Model (also known as the Dividend Discount Model), which assumes that dividends will increase at a constant growth rate indefinitely.\n\nThe formula to calculate the stock price using the Gordon Growth Model is:\n\nP = D1 / (k - g)\n\nwhere:\n- P is the price of the stock.\n- D1 is the dividend next year.\n- k is the required rate of return (cost of equity).\n- g is the growth rate of dividends.\n\nGiven that:\n- D0 (the latest dividend payment) is $1.45.\n- g (the growth rate of dividends) is 6%, or 0.06 in decimal form.\n- k (the required return on equity) is 12%, or 0.12 in decimal form.\n\nWe first need to calculate D1, which is the expected dividend next year. D1 can be calculated as:\nD1 = D0 * (1 + g)\n\nNow we can use the Gordon Growth Model to calculate the stock price. Here is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    D0 = 1.45  # The last dividend payment\n    g = 0.06   # Dividend growth rate\n    k = 0.12   # Required return on equity\n    \n    # Do math calculation to get the answer\n    D1 = D0 * (1 + g)  # Dividend expected next year\n    P = D1 / (k - g)   # Stock price using Gordon Growth Model\n    \n    # return answer\n    return P\n    \n# Uncomment the line below to test the function\n# print(solution())\n```\n\nYou can test the function by uncommenting the `print(solution())` line at the end of the script. This will display the value computed for the price of ABC Corporation's stock."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-515",
        "question": "A banker's acceptance with a term of 150 days has a quoted discount rate of 5.62% based on a 360-day year. What is the bond equivalent yield?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program to calculate the bond equivalent yield:\n\n```python\ndef solution():\n    # Define variables name and value\n    discount_rate = 0.0562\n    term_in_days = 150\n    days_in_year = 360\n    days_in_bond_year = 365\n\n    # Calculate the face value of the acceptance\n    face_value = 1.0  # Assume a face value of $1 for the calculation\n\n    # Calculate the discount\n    discount = face_value * discount_rate * (term_in_days / days_in_year)\n\n    # Calculate the price\n    price = face_value - discount\n\n    # Calculate the bond equivalent yield\n    bond_equiv_yield = (face_value - price) * (days_in_bond_year / term_in_days)\n\n    # return answer\n    return bond_equiv_yield\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis function calculates the bond equivalent yield for a banker's acceptance with the given quoted discount rate and term."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-516",
        "question": "Imagine the following 6x9 FRA, where the purchaser of the FRA consents to a contract rate of 6.35% on a notional value of 10 million USD. Assume a 30/360 day count basis. What would be the settlement sum for the vendor if the settlement rate is 6.85%?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's a Python program to calculate the settlement sum for the FRA vendor:\n\n```python\ndef solution():\n    # Define variables name and value\n    notional_value = 10_000_000  # 10 million USD\n    contract_rate = 6.35  # 6.35 percent\n    settlement_rate = 6.85  # 6.85 percent\n    day_count_basis = 360\n    fra_duration_days = 180  # 6x9 FRA means it starts in 6 months and lasts for 3 months, i.e. 180 days\n    \n    # Calculate the difference in interest rates\n    interest_rate_difference = settlement_rate - contract_rate\n    \n    # Calculate the interest amount on the notional\n    interest_amount = (interest_rate_difference / 100) * notional_value * (fra_duration_days/day_count_basis)\n    \n    # Calculate the present value of the interest amount (assuming settlement at the end of the period)\n    # We need to discount it back to the start of the period:, assuming the settlement rate is the relevant rate to use.\n    discount_factor = 1 / (1 + settlement_rate / 100 * (fra_duration_days/day_count_basis))\n    settlement_amount = interest_amount * discount_factor\n    \n    # return answer\n    return round(settlement_amount, 2)\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program sets the notional value of the FRA and the contract and settlement interest rates. It calculates the difference in interest rates, then calculates the interest amount based on the notional value and the rate difference, adjusted for the day count convention. It then discounts this amount to present value using the settlement rate as the discount rate, and finally returns the settlement amount rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-517",
        "question": "If Orion Enterprises recently released deferred coupon bonds of $100 par value that will not make any coupon payments for the following four years, and will then offer regular yearly coupon payments at an 8% rate until the end of their 10-year maturity period, and these bonds are currently valued at $87.00, what is the yield to maturity?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To find the yield to maturity (YTM) for the given bond, a numerical method such as Newton-Raphson or a root-finding algorithm must be used because there is no algebraic solution to calculate YTM directly. Here's a Python program that uses a numerical approach to estimate the YTM:\n\n```python\nfrom scipy.optimize import newton\n\ndef calculate_present_value(ytm, par_value, coupon_rate, current_price, deferral_period, maturity):\n    coupon_payment = par_value * coupon_rate\n    present_value = sum([coupon_payment / ((1 + ytm) ** (deferral_period + n)) for n in range(1, maturity - deferral_period + 1)])\n    present_value += par_value / ((1 + ytm) ** maturity) # Present value of the par value at maturity\n    \n    return current_price - present_value # We aim to find the root of this equation.\n\ndef solution():\n    # Define variables name and value\n    par_value = 100.0\n    coupon_rate = 0.08\n    current_price = 87.0\n    deferral_period = 4\n    maturity = 10\n    ytm_guess = 0.10 # Initial guess for the yield to maturity\n\n    # Using root-finding method (Newton-Raphson) to solve for YTM\n    ytm = newton(calculate_present_value, ytm_guess, args=(par_value, coupon_rate, current_price, deferral_period, maturity))\n    \n    # return answer\n    return round(ytm, 4)\n\n# The result is rounded to four decimal places, as is common when quoting YTM values.\n```\n\nPlease note that the above function `newton` from `scipy.optimize` is used to iteratively approximate the solution. The `calculate_present_value` function is defined to calculate the present value of the bond's future cash flows minus the bond's current price, which we aim to be zero for the correct yield to maturity. The yield found should provide a bond price that does equal the current market price when discounted back to the present."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-518",
        "question": "Using the identical information below and the same perpetual growth model, if a trader uses the mean value of the dividend growth rate between 2004 and 2009, along with the sustainable growth rate for 2009 to predict growth, and if the trader's required return is at 15 percent, what would be the anticipated value of the enterprise's common shares?",
        "tables": [
            "| Year | EPS  | DPS  | ROE |\n|------|------|------|-----|\n| 2009 | $3.20| $1.92| 12% |\n| 2008 | $3.60| $1.85| 17% |\n| 2007 | $2.44| $1.74| 13% |\n| 2006 | $2.08| $1.62| 15% |\n| 2005 | $2.76| $1.35| 11% |\n| 2004 | $2.25| $1.25| 9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To answer this question, we need to calculate both the average dividend growth rate over the given period (2004 to 2009) and the sustainable growth rate for 2009. Then we will use the Gordon Growth Model (a perpetual growth model) to calculate the anticipated value of the enterprise's common shares where P = D1 / (r - g).\n\nThe dividend growth rate can be calculated for each year as the percentage increase from the previous year, and we can calculate the average of these growth rates. The ROE for 2009 can be used as the sustainable growth rate, considering there is no other information provided for the retention ratio or anything else to calculate a different sustainable growth rate.\n\nNow let's calculate it in the program:\n\n```python\ndef solution():\n    # Historical dividends\n    dividends = {\n        2009: 1.92,\n        2008: 1.85,\n        2007: 1.74,\n        2006: 1.62,\n        2005: 1.35,\n        2004: 1.25\n    }\n    \n    # Calculate dividend growth rate for each year and store it\n    growth_rates = []\n    for year in range(2008, 2004, -1):\n        growth_rate = (dividends[year] - dividends[year - 1]) / dividends[year - 1]\n        growth_rates.append(growth_rate)\n    \n    # Calculate the average growth rate\n    avg_growth_rate = sum(growth_rates) / len(growth_rates)\n    \n    # Sustainable growth rate for 2009 (ROE)\n    roe_2009 = 0.12  # 12%\n    \n    # Using the average growth rate as the perpetual growth rate (g)\n    g = avg_growth_rate\n    \n    # If the sustainable growth rate is different, we use the lower of the two rates:\n    g = min(g, roe_2009)\n\n    # Trader's required return rate (r)\n    required_return = 0.15\n    \n    # Dividend for next year (D1 = D0 * (1 + g))\n    D1 = dividends[2009] * (1 + g)\n    \n    # Calculate the price (P) using the Gordon Growth Model (P = D1 / (r - g))\n    price = D1 / (required_return - g)\n    \n    return price\n\n# Let's call the solution function to get the answer\nprint(solution())\n```\n\nThis program will calculate the anticipated value of the enterprise's common shares using the mean dividend growth rate and the sustainable growth rate, assuming a required return on investment of 15 percent."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-519",
        "question": "The following information pertains to a patent owned by TDC Corporation. If we use the units-of-production depreciation method, what will be the first year's amortization cost?",
        "tables": [
            "|  |  |\n|---|---|\n| Acquisition cost | $60,000,000 |\n| Acquisition date | 1 January 2012 |\n| Patent expiration date | 31 December 2017 |\n| Total plant capacity of patented product | 60,000 units per year |\n| Production of patented product in fiscal year ended 31 December 2012 | 25,000 units |\n| Expected production of patented product during life of the patent | 225,000 units |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 60000000       # Cost of acquiring the patent\n    total_capacity = 60000            # Total plant capacity of patented product per year\n    expected_production_lifetime = 225000  # Expected production of patented product during life of the patent\n    production_first_year = 25000     # Production of patented product in the first year\n\n    # Calculate amortization expense using the units-of-production method\n    amortization_per_unit = acquisition_cost / expected_production_lifetime  # Cost per unit\n    first_year_amortization = production_first_year * amortization_per_unit  # First year's amortization\n\n    # return answer\n    return first_year_amortization\n\n# Execute the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-520",
        "question": "Marie, the portfolio manager of BC pension, is currently contemplating on incorporating NY Inc. (New York Stock Exchange: NY) into her portfolio. After a thorough evaluation of the company and its competition, she discerns that the company's growth rate steadily decreases from 12 percent in the initial year to 6 percent in year five. The total dividends paid by NY in 2017 amounted to $0.22. The required return is calculated to be at 9 percent. What is the stock's inherent worth?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the intrinsic value of the stock using the Dividend Discount Model (DDM) for a varying growth rate, we need to sum the present values of the future dividends. Since the growth rate changes over time, we will have to consider each year's growth rate separately for the first five years and then either assume a perpetual growth rate after that or simply disregard the dividends after year five due to the decreasing growth situation.\n\nFor simplicity, let's assume we are only considering the dividends for the first five years, and since the growth is decreasing, we will not assume a perpetual growth after year five.\n\nHere's the Python program that calculates the intrinsic value based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividends_2017 = 0.22\n    required_return = 0.09  # 9 percent\n    growth_rates = [0.12, 0.11, 0.10, 0.08, 0.06]  # Decreasing growth rates from year 1 to 5\n    intrinsic_value = 0\n\n    # Calculate the present value of dividends for the first 5 years\n    next_dividends = dividends_2017\n    for i in range(5):\n        next_dividends *= (1 + growth_rates[i])  # Calculate the dividends of the next year\n        pv_dividends = next_dividends / ((1 + required_return) ** (i + 1))  # Discounting the dividends\n        intrinsic_value += pv_dividends\n    \n    # return answer\n    return intrinsic_value\n\n# Example usage\nprint(solution())\n```\n\nThis will compute the present value of the dividends expected to be received over the next 5 years, where each year the growth rate decreases as specified. The summation of these present values provides an estimate of the intrinsic value of the stock. However, note that in reality, the value of the stock after year five would still likely have some impact on the current intrinsic value, which would require a different model to account for the perpetual growth or decline."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-521",
        "question": "The expected return for Portfolio C is 9% with a volatility of 20%. Meanwhile, the expected return for the market index is forecasted to be 7% with a volatility of 15%, and the correlation between Portfolio C and the market is anticipated to be 0.9. Given that the risk-free rate is observed to be 3%, can you calculate the Jensen's alpha for Portfolio C?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Certainly! To calculate Jensen's alpha for Portfolio C, we'll use the following formula:\n\n$$\\alpha = R_p - [R_f + \\beta * (R_m - R_f)],$$\n\nwhere:\n- \\( R_p \\) is the expected return of the portfolio,\n- \\( R_f \\) is the risk-free rate,\n- \\( \\beta \\) is the portfolio's beta,\n- \\( R_m \\) is the expected return of the market index.\n\nBeta (\\( \\beta \\)) can be calculated as:\n\n$$\\beta = \\frac{\\text{Covariance}(R_p, R_m)}{\\text{Variance}(R_m)} = \\frac{\\rho_{pm} * \\sigma_p * \\sigma_m}{\\sigma_m^2},$$\n\nwhere:\n- \\( \\rho_{pm} \\) is the correlation between Portfolio C and the market,\n- \\( \\sigma_p \\) is the volatility of Portfolio C,\n- \\( \\sigma_m \\) is the volatility of the market index.\n\nLet's proceed with the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    R_p = 0.09  # Expected return for Portfolio C\n    R_f = 0.03  # Risk-free rate\n    R_m = 0.07  # Expected return for the market index\n    σ_p = 0.20  # Volatility of Portfolio C\n    σ_m = 0.15  # Volatility of the market index\n    ρ_pm = 0.9  # Correlation between Portfolio C and the market\n\n    # Calculate beta for Portfolio C\n    β = ρ_pm * (σ_p / σ_m)\n    \n    # Do math calculation to get Jensen's alpha\n    α = R_p - (R_f + β * (R_m - R_f))\n    \n    # Return answer\n    return α\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print the Jensen's alpha for Portfolio C."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-522",
        "question": "XYZ is a firm that trades in derivatives. This firm offloaded a five-year CDS protection on Firm E worth $10 million. The duration of this CDS contract is 3.5 years. After a quarter of a year, the credit spread on Firm E diminished from 225bps to 165 bps. Based on the details provided, how much profit can be expected if XYZ establishes a counterbalancing position?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the profit from a change in the credit spread of a CDS, we need to take the notional amount of the CDS, the change in spread, and the duration of the CDS into account. The formula for profit (P) in a simplified form can be represented as:\n\nP = (Change in Spread) * (Duration) * (Notional Amount)\n\nHere, the change in spread is the difference between the initial spread and the final spread. In basis points (bps), where 1 basis point is 0.01%, the formula becomes:\n\nP = (Change in Spread in bps / 10,000) * (Duration) * (Notional Amount)\n\nLet's use this formula to calculate the profit in the Python program.\n\n```python\ndef solution():\n    # Define variables name and value\n    notional_amount = 10000000 # in dollars\n    initial_spread_bps = 225 # in bps\n    final_spread_bps = 165 # in bps\n    duration = 3.5 # in years\n    \n    # Calculate change in spread in bps\n    change_in_spread_bps = initial_spread_bps - final_spread_bps\n    \n    # Do math calculation to get the profit\n    profit = (change_in_spread_bps / 10000) * duration * notional_amount\n    \n    # return profit\n    return profit\n\n# Run the function and print the result\nprint(f\"The expected profit is: {solution()} USD\")\n```\n\nThis program will output the expected profit as a result of the change in the credit spread for XYZ firm's CDS contract on Firm E."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-523",
        "question": "Due to marketing consumer staples, Bayside Essentials (BE) is capable of utilizing significant debt in its capital structure; in particular, 90 percent of the company's total assets of $450,000,000 are financed with debt capital. Its debt costs are 8 percent before taxes, and its equity capital costs are 12 percent. BE attained a pretax income of $5.1 million in 2006 and was taxed at a rate of 40 percent. What was BE's residual income?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 450000000\n    debt_ratio = 0.9\n    equity_ratio = 1 - debt_ratio\n    debt_cost = 0.08\n    equity_cost = 0.12\n    pretax_income = 5100000\n    tax_rate = 0.4\n    \n    # Calculate the after-tax income\n    after_tax_income = pretax_income * (1 - tax_rate)\n    \n    # Calculate cost of debt and equity\n    cost_of_debt = total_assets * debt_ratio * debt_cost * (1 - tax_rate)\n    cost_of_equity = total_assets * equity_ratio * equity_cost\n    \n    # Calculate residual income\n    residual_income = after_tax_income - (cost_of_debt + cost_of_equity)\n    \n    # return answer\n    return residual_income\n\n# Execute the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will give the residual income of Bayside Essentials based on the given data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-524",
        "question": "A pension fund manager from Canada is trying to gauge the impact of changes in market interest rates on his pension obligations. He calculates the present value of these obligations under three potential interest rate circumstances: a foundational rate of 7%, a rate boosted by 100 basis points to 8%, and a rate lowered by 100 basis points to 6%. Based on the analysis outcomes provided below, what is the effective duration of the liabilities of the pension fund?",
        "tables": [
            "| Interest Rate Assumption | Present Value of Liabilities |\n|-------------------------|-------------------------------|\n| 6%                      | CAD 510.1 million           |\n| 7%                      | CAD 455.4 million           |\n| 8%                      | CAD 373.6 million           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delta_interest_rate = 0.01  # 100 basis points change\n    pv_liabilities_6 = 510.1e6  # Present value of liabilities at 6%\n    pv_liabilities_7 = 455.4e6  # Present value of liabilities at 7%\n    pv_liabilities_8 = 373.6e6  # Present value of liabilities at 8%\n    \n    # Calculate the change in present value of liabilities for interest rate uptick (7% to 8%)\n    delta_up = pv_liabilities_7 - pv_liabilities_8\n    \n    # Calculate the change in present value of liabilities for interest rate downtick (7% to 6%)\n    delta_down = pv_liabilities_6 - pv_liabilities_7\n    \n    # Calculate the average change in present value of liabilities\n    avg_delta_pv = (delta_up + delta_down) / 2\n    \n    # Calculate the effective duration of the liabilities of the pension fund\n    duration = avg_delta_pv / (pv_liabilities_7 * delta_interest_rate)\n    \n    # return answer\n    return duration\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-525",
        "question": "In his discussion about pathwise valuations being an alternative way of valuing bonds through a binomial interest rate tree, Thompson describes how Peterson uses the binomial interest rate tree to predict the potential interest rate paths for Bond M shown in Exhibit 9. Referencing Exhibits 6 and 9, what's the current value of Bond M's cash flows along Path 2?",
        "tables": [
            "| Path | Time 0 | Time 1 | Time 2 |\n|------|--------|--------|--------|\n| 1    | 1.500% | 2.8853%| 2.7183%|\n| 2    | 1.500  | 2.8853 | 1.6487 |\n| 3    | 1.500  | 1.7500 | 1.6487 |\n| 4    | 1.500  | 1.7500 | 1.0000 |",
            "| Bond   | Maturity | Coupon Rate |\n|--------|----------|-------------|\n| Bond C | 2 years  | 2.5%        |\n| Bond D | 3 years  | 3.0%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "It seems there might be a small error in the question—there is no \"Bond M\" mentioned in the provided table. Based on the context, I will assume that \"Bond M\" refers to \"Bond D\" since it is the only bond with a maturity that matches the length of the paths given (3 years).\n\nBased on the provided data, the binomial interest rate tree gives us different interest rates at different times for different paths. To find the current value of Bond D's cash flows along Path 2, we need to discount its cash flows using the respective interest rates along Path 2. Here's how to calculate it:\n\nBond D has a coupon rate of 3% and a maturity of 3 years. We assume that the face value of the bond is $100, which isn't provided but is typical in bond examples. This means that the bond will pay $3 (3% of $100) at the end of Years 1 and 2, and $103 at the end of Year 3 (the final coupon plus the return of the principal).\n\nThe interest rates given for Path 2 at Times 1 and 2 are 2.8853% and 1.6487%, respectively. We need to use these rates to discount the cash flows. To do this, we will convert the given percentages into decimal form (e.g., 2.8853% becomes 0.028853) and then calculate the present value of the cash flows.\n\nLet's write a Python program for this calculation:\n\n```python\ndef solution():\n    # Define the bond's characteristics\n    face_value = 100\n    coupon_rate = 0.03  # 3%\n    maturity = 3\n    \n    # Define the interest rate paths for Path 2 in decimal form\n    interest_rates_path2 = [0.01500, 0.028853, 0.016487]\n    \n    # Calculate the cash flows for the bond\n    cash_flows = [face_value * coupon_rate if i < maturity else face_value * coupon_rate + face_value for i in range(1, maturity + 1)]\n    \n    # Discount the cash flows using the path specific interest rates\n    present_value = 0\n    for i in range(len(cash_flows)):\n        rate = interest_rates_path2[i]\n        cash_flow = cash_flows[i]\n        # Discount the cash flow to its present value\n        present_value += cash_flow / ((1 + rate) ** (i + 1))\n    \n    # Return the present value of the bond's cash flows along Path 2\n    return present_value\n\n# You can now call the solution function to get the answer\nprint(solution())\n```\n\nRemember, this is just a generic example, and your actual bond calculations might need a face value for the bond which must be specified by your financial data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-526",
        "question": "What is the 2012 return required to realize a trailing five-year geometric mean annualized return of 5% at the conclusion of 2012 for a wealth management company that produced the following annual returns in their US large-cap equity portfolio?",
        "tables": [
            "\n| Year | Net Return (%) |\n|------|----------------|\n| 2008 | -34.8          |\n| 2009 | 32.2           |\n| 2010 | 11.1           |\n| 2011 | -1.4           |\n"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the required return for 2012 to achieve a geometric mean annualized return of 5% over the five-year period, we need to realize that the geometric mean takes into account the compounding effects over time.\n\nTo accomplish this, we should use the following formula, which expresses the relationship between the product of the returns (1 + r1)(1 + r2)...(1 + rn), where r1, r2, ..., rn are the returns for each year, and the geometric mean, which we want to equate to 1.05^5 since we're interested in a 5% annualized return over 5 years.\n\n(1 + r2008)(1 + r2009)(1 + r2010)(1 + r2011)(1 + r2012) = (1.05)^5\n\nWe already know r2008, r2009, r2010, r2011, and we want to find r2012.\n\nHere's the Python program to calculate the 2012 return:\n\n```python\ndef solution():\n    # Define annual returns as decimals\n    return_2008 = -0.348\n    return_2009 = 0.322\n    return_2010 = 0.111\n    return_2011 = -0.014\n\n    # Define the target geometric mean annual return as a decimal\n    target_geometric_mean = 1.05\n    \n    # Calculate the product of the returns for the years 2008-2011\n    product_of_returns = (1 + return_2008) * (1 + return_2009) * (1 + return_2010) * (1 + return_2011)\n    \n    # Calculate the five-year target product to achieve a 5% geometric mean annual return\n    target_five_year_product = target_geometric_mean ** 5\n    \n    # Calculate the required return for 2012 to achieve the target\n    required_return_2012 = target_five_year_product / product_of_returns - 1\n    \n    # Convert to percentage format by multiplying by 100\n    required_return_2012_percentage = required_return_2012 * 100\n    \n    # return answer\n    return required_return_2012_percentage\n\n# Example usage:\n# print(solution())\n```\n\nThis program will calculate and return the required net return percentage for the year 2012."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-527",
        "question": "Based on the financial records of Corporation X provided, what is the quantity of cash disbursed to vendors in 2017?",
        "tables": [
            "|                        | Income Statement | Balance Sheet Changes                               |\n|------------------------|------------------|-----------------------------------------------------|\n| Revenue                | $22,100          | accounts receivable +$550<br> inventory -131<br> prepaid expense +6<br> accounts payable +1,230   |\n| Cost of goods sold     | $16,230          |                                                     |\n| Other operating expense| $508             |                                                     |\n| Depreciation expense   | $1,500           |                                                     |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 22100\n    cost_of_goods_sold = 16230\n    other_operating_expense = 508\n    depreciation_expense = 1500\n    change_in_accounts_receivable = 550\n    change_in_inventory = -131\n    change_in_prepaid_expense = 6\n    change_in_accounts_payable = 1230\n\n    # Calculate cash disbursed to vendors \n    # It's the sum of cash payments for inventory (COGS adjusted for inventory change and depreciation) \n    # and other operating expenses minus the change in prepaid expenses and plus the change in accounts payable.\n    cash_disbursed_to_vendors = (cost_of_goods_sold - change_in_inventory + other_operating_expense - change_in_prepaid_expense + change_in_accounts_payable)\n\n    # return answer\n    return cash_disbursed_to_vendors\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this Python program, it will calculate the quantity of cash disbursed to vendors using the variables and adjustments provided in the context and return the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-528",
        "question": "What is the financial leverage ratio for SAP Group on December 31, 2017, based on the data provided in the Exhibit?",
        "tables": [
            "| Assets                           | 31 Dec 2017 | 31 Dec 2016 |\n|----------------------------------|-------------|-------------|\n| Total current assets             | 11,930      | 11,564      |\n| Total non-current assets         | 30,567      | 32,713      |\n| Total assets                     | 42,497      | 44,277      |\n| Total current liabilities        | 10,210      | 9,674       |\n| Total non-current liabilities    | 6,747       | 8,205       |\n| Total liabilities                | 16,958      | 17,880      |\n| Issued capital                   | 1,229       | 1,229       |\n| Share premium                    | 570         | 599         |\n| Retained earnings                | 24,794      | 22,302      |\n| Other components of equity       | 508         | 3,346       |\n| Treasury shares                  | (1,591)     | (1,099)     |\n| Equity attributable to owners of parent | 25,509  | 26,376  |\n| Non-controlling interests        | 31          | 21          |\n| Total equity                     | 25,540      | 26,397      |\n| Total equity and liabilities     | £42,497     | £44,277     |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_2017 = 42497\n    total_equity_2017 = 25540\n    \n    # Calculate the financial leverage ratio\n    financial_leverage_ratio = total_assets_2017 / total_equity_2017\n    \n    # return the answer\n    return financial_leverage_ratio\n\n# Call the function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-529",
        "question": "Currently, XYZ is rated A in terms of credit and has issued two-year zero-coupon bonds. The market anticipates that the company will either maintain its A rating, be downgraded to BBB, or upgraded to AA in the span of a year with chances of 85%, 10%, and 5%, respectively. Presuming a flat risk-free yield curve with a 1% value, and credit spreads of 70, 100 and 300 basis points for the AA, A, and BBB ratings respectively, with all interest rates compounding annually, what is the predicted worth of a zero-coupon bond after a year?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Given values\n    risk_free_rate = 0.01\n    credit_spreads = {\n        'AA': 0.0070,\n        'A': 0.0100,\n        'BBB': 0.0300\n    }\n    probabilities = {\n        'AA': 0.05,\n        'A': 0.85,\n        'BBB': 0.10\n    }\n    \n    # Calculate the expected yield by taking a weighted average of the possible yields\n    # given the credit spreads and probabilities.\n    expected_yield = sum(probabilities[rating] * (risk_free_rate + credit_spreads[rating]) for rating in probabilities)\n    \n    # Value of a zero-coupon bond is calculated using the formula: P = M / (1 + r)^n\n    # Where P is the present value, M is the maturity value (assumed to be 1 in this case),\n    # r is the expected yield (interest rate), and n is the number of years until maturity.\n    # For a bond after 1 year with a 2-year maturity, n would be 1.\n    face_value = 1\n    bond_value_after_one_year = face_value / ((1 + expected_yield))\n    \n    # return calculated bond value after one year\n    return bond_value_after_one_year\n\n# Call the function and print the returned value\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-530",
        "question": "What is the reported historical geometric returns for the real rate of return for equities according to the expert?",
        "tables": [
            "| Asset Class     | Geometric Return(%) |\n| --------------  | ------------------- |\n| Equities        | 8.0                 |\n| Corporate Bonds | 6.5                 |\n| Treasury bills  | 2.5                 |\n| Inflation       | 2.1                 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equities_geometric_return = 8.0\n    inflation = 2.1\n    \n    # Do math calculation to get the answer\n    equities_real_return = ((1 + equities_geometric_return/100) / (1 + inflation/100)) - 1\n    equities_real_return_percentage = equities_real_return * 100\n    \n    # return answer\n    return equities_real_return_percentage\n\n# This is for you to check the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-531",
        "question": "Analyst John has compiled the following data for the return on the market and the return on Crude Oil. Can you compute the covariance of returns between the market and Crude Oil? Probability Matrix",
        "tables": [
            "| | Roil =30% | Roil=15% | Roil=10% |\n| - | - | - | - |\n| RMkt=25% | 30% | 0 | 0 |\n| RMkt=20% | 0 | 40% | 0 |\n| RMkt=0% | 0 | 0 | 30% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the covariance of returns between the market (RMkt) and Crude Oil (Roil), we'll use the following formula for covariance:\n\nCov(RMkt, Roil) = Σ[p(i) * (RMkt(i) - E(RMkt)) * (Roil(i) - E(Roil))]\n\nwhere p(i) is the probability of the ith scenario, RMkt(i) is the return on market in the ith scenario, Roil(i) is the return on Crude Oil in the ith scenario, E(RMkt) is the expected return on the market, and E(Roil) is the expected return on Crude Oil.\n\nThe expected returns are calculated as follows:\n\nE(RMkt) = Σ[p(i) * RMkt(i)]\nE(Roil) = Σ[p(i) * Roil(i)]\n\nLet's write the Python program to compute the covariance:\n\n```python\ndef solution():\n    # Define variables names and values\n    probabilities = {\n        (25, 30): 0.3,\n        (20, 15): 0.4,\n        (0, 10): 0.3\n    }\n    \n    # Calculate expected returns\n    expected_rmkt = sum(p * rmkt for (rmkt, roil), p in probabilities.items())\n    expected_roil = sum(p * roil for (rmkt, roil), p in probabilities.items())\n    \n    # Compute covariance\n    covariance = sum(p * (rmkt - expected_rmkt) * (roil - expected_roil) for (rmkt, roil), p in probabilities.items())\n    \n    # return answer\n    return covariance\n\n# Call the function and print the answer\nprint(solution())\n```\nRunning the above program will return the value of the covariance of returns between the market and Crude Oil, using the given probabilities and returns."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-532",
        "question": "If a bond with a Macaulay duration of 6.0, modified duration of 6.5, and convexity of 50.25 experiences a decrease in yield to maturity by 50 bps, what will be the anticipated percentage change in its price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    modified_duration = 6.5\n    convexity = 50.25\n    change_in_yield = 0.50 / 100  # 50 bps converted to decimal\n    \n    # Calculate the percentage change in bond price\n    price_change = (-modified_duration * change_in_yield) + (convexity * (change_in_yield**2) / 2)\n    percentage_change = price_change * 100  # Convert to percentage\n    \n    # return answer\n    return percentage_change\n\n# You can test the function with the following line\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-533",
        "question": "Assuming that there's a 0.4 chance of a strong economy and a 0.6 chance of a weak economy. The table below shows the conditional probabilities of product Z's profit. What will be the anticipated profit of product Z?",
        "tables": [
            "| Hi | P(Hi|Good) | P(Hi|Poor) |\n|---|------------|------------|\n| 0 | 0.1           | 0.5            |\n| 10 | 0.3           | 0.3            |\n| 20 | 0.6           | 0.2            |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Given conditional probabilities of profit Hi given the economy condition (P(Hi|Good) and P(Hi|Poor))\n    profit_hi_given_good_economy = {0: 0.1, 10: 0.3, 20: 0.6}\n    profit_hi_given_poor_economy = {0: 0.5, 10: 0.3, 20: 0.2}\n    \n    # Given probabilities of the state of the economy\n    prob_good_economy = 0.4\n    prob_poor_economy = 0.6\n    \n    # Calculating the total expected profit of product Z\n    expected_profit = sum(\n        hi * (profit_hi_given_good_economy[hi] * prob_good_economy + profit_hi_given_poor_economy[hi] * prob_poor_economy) \n        for hi in profit_hi_given_good_economy\n    )\n    \n    # return expected profit of product Z\n    return expected_profit\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-534",
        "question": "Suppose that ABC Corporation saw a rise in operating income by 16%, and a 10% increase in units sold. If the financial leverage degree (DFL) of ABC Corporation is 1.5, what is most likely the degree of total leverage (DTL) for ABC Corporation?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "To find the degree of total leverage (DTL), we can use the formula:\n\nDTL = Degree of Operating Leverage (DOL) * Degree of Financial Leverage (DFL)\n\nThe Degree of Operating Leverage (DOL) can be estimated with the percentage change in operating income divided by the percentage change in units sold, which is available from the provided data.\n\nLet's calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    percentage_increase_in_operating_income = 0.16  # 16% increase\n    percentage_increase_in_units_sold = 0.10  # 10% increase\n    financial_leverage_degree = 1.5\n    \n    # Calculate Degree of Operating Leverage (DOL)\n    operating_leverage_degree = percentage_increase_in_operating_income / percentage_increase_in_units_sold\n    \n    # Calculate Degree of Total Leverage (DTL)\n    total_leverage_degree = operating_leverage_degree * financial_leverage_degree\n    \n    # return answer\n    return round(total_leverage_degree, 2)\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis will calculate the most likely degree of total leverage (DTL) for ABC Corporation. I rounded the result to 2 decimal places for a cleaner presentation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-535",
        "question": "A portfolio is made up of options on Apple and Verizon. The Apple options have a delta of 1000, while the Verizon options have a delta of 20000. The share price of Apple is $120, and Verizon's share price is $30. If we assume that the daily volatility of Apple is 2% and the daily volatility of Verizon is 1%, and the correlation between the daily changes is 0.3, what is the 5-day 95% VaR?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\n# Import package if needs\nfrom math import sqrt\n\ndef solution():\n    # Define variables name and value\n    delta_aapl = 1000  # Delta of Apple options\n    delta_vz = 20000   # Delta of Verizon options\n    price_aapl = 120   # Share price of Apple\n    price_vz = 30      # Share price of Verizon\n    \n    vol_aapl = 0.02    # Daily volatility of Apple\n    vol_vz = 0.01      # Daily volatility of Verizon\n    correlation = 0.3  # Correlation between daily changes of Apple and Verizon\n    z_score_95 = 1.645 # Z-score for a 95% confidence interval\n    days = 5           # Time horizon for VaR\n    \n    # Calculate the daily standard deviation of the portfolio's value\n    daily_std_aapl = delta_aapl * price_aapl * vol_aapl\n    daily_std_vz = delta_vz * price_vz * vol_vz\n    \n    # Calculate the daily variance of the portfolio\n    daily_var_portfolio = (daily_std_aapl**2) + (daily_std_vz**2) + (2 * correlation * daily_std_aapl * daily_std_vz)\n    \n    # Calculate the daily standard deviation of the portfolio\n    daily_std_portfolio = sqrt(daily_var_portfolio)\n    \n    # Scale the standard deviation from daily to the 5-day horizon\n    std_5_day = daily_std_portfolio * sqrt(days)\n    \n    # Calculate the 5-day 95% VaR\n    var_5_day_95 = z_score_95 * std_5_day\n    \n    # return answer\n    return var_5_day_95\n\n# Call the function and print the answer\nprint(f\"The 5-day 95% VaR is: ${solution():.2f}\")\n```\n\nIn this program, we calculate the Value at Risk (VaR) by scaling daily standard deviations of the Apple and Verizon options, taking into account the correlation between them, and then applying the 95% confidence z-score to convert the daily standard deviation into a 5-day standard deviation. The Var is expressed in the currency."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-536",
        "question": "As per the financial report, what is the FCFE for Company N?",
        "tables": [
            "| CompanyM            | $(millions) |\n|---------------------|-------------|\n| Operating income (EBIT) | 2,000       |\n| Depreciation expense     | 750         |\n| Interest expense         | 300         |\n| Increase in accounts receivable | 1,000   |\n| Increase in inventories  | 100         |\n| Increase in accounts payable | 500     |\n| Purchases of PP&E        | 600         |\n| Borrowing (repayment)    | 400         |\n| Tax rate                 | 30%         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program that calculates Free Cash Flow to Equity (FCFE) for Company M:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_income = 2000      # Operating income (EBIT)\n    depreciation_expense = 750   # Depreciation expense\n    interest_expense = 300       # Interest expense\n    increase_ar = 1000           # Increase in accounts receivable\n    increase_inventories = 100   # Increase in inventories\n    increase_ap = 500            # Increase in accounts payable\n    purchases_of_PPandE = 600    # Purchases of Property, Plant & Equipment\n    borrowing = 400              # Borrowing (repayment)\n    tax_rate = 0.30              # Tax rate (30%)\n    \n    # Calculate Net Income\n    tax_expense = (operating_income - interest_expense) * tax_rate\n    net_income = operating_income - interest_expense - tax_expense\n    \n    # Calculate Free Cash Flow to the Firm (FCFF)\n    fcff = net_income + depreciation_expense - increase_ar - increase_inventories + increase_ap - purchases_of_PPandE\n    \n    # Calculate Free Cash Flow to Equity (FCFE)\n    fcfe = fcff + borrowing - interest_expense * (1 - tax_rate)\n    \n    # Return answer\n    return fcfe\n\n# Example usage\nfcfe_company_m = solution()\nprint(f\"The Free Cash Flow to Equity (FCFE) for Company M is: ${fcfe_company_m} million\")\n```\n\nPlease, make sure that the Company in the question is 'Company M', as also stated in the table. If it's actually 'Company N', you'll need to adjust the variables according to 'Company N's financials."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-537",
        "question": "John is assessing the sustainable growth rate of Firm M and has gathered the following data in the provided table. What is the dividend payout ratio of Firm M?",
        "tables": [
            "|         |     |\n| ------- | --- |\n| ROE     | 10% |\n| Growth rate (first three years) | 6.0% |\n| Growth rate (after first three years) | 4.0% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "The sustainable growth rate (SGR) is calculated using the formula SGR = ROE * (1 - Dividend Payout Ratio). We can rearrange the formula to find the Dividend Payout Ratio:\n\nDividend Payout Ratio = 1 - (SGR / ROE)\n\nWe are given ROE is 10% (or 0.10 in decimal form) and two growth rates. Assuming the SGR is equal to the growth rate after the first three years, which is 4.0% (or 0.04 in decimal form), we can now compute the Dividend Payout Ratio.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    ROE = 0.10  # ROE is given as 10%\n    growth_rate = 0.04  # Growth rate after the first three years is given as 4%\n    \n    # Calculate the Dividend Payout Ratio using the rearranged formula of SGR\n    dividend_payout_ratio = 1 - (growth_rate / ROE)\n    \n    # Since we want the answer in percentage, multiply by 100\n    answer = dividend_payout_ratio * 100\n    \n    # return answer\n    return answer\n\n# Run the function and print the result for verification\nprint(f\"The Dividend Payout Ratio is {solution()}%.\")\n```\n\nThis program will calculate the dividend payout ratio of Firm M. The `solution` function computes the ratio using the formula provided above and returns the answer as a percentage. When you call the `solution` function, it will output the dividend payout ratio in percent format."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-538",
        "question": "According to the data table providing details about three bonds with twice-yearly coupon payments, what is the discount factor for d(1)?",
        "tables": [
            "| Maturity | Coupon | Price |\n|---|---|---|\n| 6 months | 4.5% | 101.47 |\n| 1 year | 6.0% | 102.75 |\n| 2 years | 7.0% | 100.32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the discount factor \\( d(1) \\), which is the present value of $1 due in one year, we have to consider the bond with a 1-year maturity because this bond will provide the information needed to find the 1-year discount factor.\n\nThe price of the bond is given to be 102.75 for a bond with a face value of 100 (assuming a typical bond face value), and it pays a semi-annual coupon of 6.0%. So the bond pays $3 every six months (since 6% annual coupon rate / 2 = 3% semi-annual coupon rate), and $103 at the end of the year ($100 face value + $3 last coupon).\n\nThe formula to calculate the bond price (P) is the sum of the present value of future cash flows, which in this case is the sum of the present value of the coupon payments and the present value of the face value. For a semi-annual coupon-paying bond, the present value formula is:\n\n\\[ P = \\frac{C}{(1 + y/2)} + \\frac{C}{(1 + y/2)^2} + \\dots + \\frac{C + F}{(1 + y/2)^{2T}} \\]\n\nHere, C is the semi-annual coupon payment, y is the yield to maturity (which we will solve for), F is the face value, and T is the number of years.\n\nSince we have a bond that pays semi-annually and we are given the price, we need to find the yield to maturity (y/2) that sets the present value of the coupon payments and the face value to equal the price of the bond.\n\nLet's assume that the face value of the bond is $100, which is standard if not mentioned otherwise.\n\nTo solve for the yield to maturity y, we can use a root-finding method like the Newton-Raphson or the bisection method. But for simplicity, let's use an iterative approach to guess the yield that prices the bond to $102.75. Once we have the yield, we can calculate the discount factor for d(1).\n\nHere's a Python function that will solve for the discount factor d(1):\n\n```python\ndef calculate_discount_factor(price, face_value, annual_coupon_rate, maturity_years):\n    coupon_payment = (annual_coupon_rate / 2) * face_value\n    semi_annual_periods = int(maturity_years * 2)\n    \n    # Initial guess for semi-annual yield to maturity (y/2)\n    yield_to_maturity_per_period = annual_coupon_rate / 2\n    \n    # Iteratively try to find the yield that prices the bond to the given price\n    for i in range(100):\n        bond_price = sum(coupon_payment / (1 + yield_to_maturity_per_period)**(t+1)\n                         for t in range(semi_annual_periods))\n        bond_price += face_value / (1 + yield_to_maturity_per_period)**semi_annual_periods\n        if abs(bond_price - price) < 0.01:\n            break\n        yield_to_maturity_per_period += (price - bond_price) / 100  # Adjust yield guess\n    \n    # Once we have the yield, calculate the discount factor for d(1)\n    d1 = 1 / (1 + yield_to_maturity_per_period)**2\n    return d1\n\ndef solution():\n    # The bond given\n    price = 102.75\n    face_value = 100\n    annual_coupon_rate = 0.06\n    maturity_years = 1\n    \n    # Calculate and return the discount factor for d(1)\n    discount_factor = calculate_discount_factor(price, face_value, annual_coupon_rate, maturity_years)\n    return discount_factor\n\n# Call the solution function to test the discount factor calculation\nprint(solution())\n```\n\nNote: The actual root-finding method might require more sophisticated numerical methods than the simple iteration shown for an initial guess of yield in the example above. However, for this illustrative purpose and given the complexity level intended, this method should suffice. If more accuracy is required, packages like `numpy` or `scipy` offer functions like `numpy.roots` or `scipy.optimize` that can be used to find a more precise solution."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-539",
        "question": "If Johnson collects data on spot rates for current annual-coupon government bonds and swap spreads, as shown in the Exhibit below, and purchased a government bond, he would receive an almost risk-free annualized return. According to the no-arbitrage principle, what could Johnson demonstrate the forward price of a one-year government bond, set to be issued in one year, to be?",
        "tables": [
            "|                    | Maturity (Years) |     |     |     |\n|--------------------|------------------|-----|-----|-----|\n|                    | 1                | 2   | 3   | 4   |\n| Government spot rate | 2.25%           | 2.70% | 3.30% | 4.05% |\n| Swap spread        | 0.25%           | 0.30% | 0.45% | 0.70% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the forward price of a one-year government bond set to be issued in one year, we need to use the yield curve provided. In this case, the spot rates are what the zero-coupon government bonds would yield if bought today.\n\nWe can observe that if one buys a 2-year bond and holds it for one year, it should have the same return as a one-year bond bought today, according to the no-arbitrage principle. The forward price can be derived from this relationship.\n\nGiven that the spot rates are annual, for the calculation we need to compound the 1-year rate over the first year, then compound the 2-year rate over two years, in order to find the rate at which money needs to be invested for the first year, so that it equals the compound effect of a 2-year investment.\n\nMathematically:\n\n\\[ (1 + spot\\_rate_{1yr}) \\times (1 + forward\\_rate_{1yr}) = (1 + spot\\_rate_{2yr})^2 \\]\n\nRearranging to solve for the forward rate gives:\n\n\\[ forward\\_rate_{1yr} = \\left( \\frac{(1 + spot\\_rate_{2yr})^2}{(1 + spot\\_rate_{1yr})} \\right) - 1 \\]\n\nThe forward price of the bond is essentially the price one would have to invest today at the 1-year spot rate in order to receive an amount equivalent to the nominal value of the bond (assuming a face value of 100, which is standard for bond pricing), after the forward rate is applied. Thus, the forward price is calculated as:\n\n\\[ forward\\_price = \\frac{100}{(1 + \\text{forward rate})} \\]\n\nLet's convert this into Python code:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1yr = 0.0225  # 1-year government spot rate\n    spot_rate_2yr = 0.0270  # 2-year government spot rate\n\n    # Do math calculation to get the forward rate for the second year\n    forward_rate_1yr = ((1 + spot_rate_2yr)**2 / (1 + spot_rate_1yr)) - 1\n    \n    # Now calculate the forward price of the one-year government bond\n    forward_price = 100 / (1 + forward_rate_1yr)\n    \n    # return answer\n    return forward_price\n\n# Note: To improve readability and precision of the financial calculation, \n# we can format the return value to show up to 4 decimal points like this:\n# return round(forward_price, 4)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-540",
        "question": "Assuming equal financing from each source and a marginal tax rate of 30%, what is the weighted average cost of capital (%) if a company's pre-tax costs of debt, preferred stock, and equity are 12%, 14%, and 16%, respectively?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define the pre-tax costs as given in the question\n    cost_of_debt_pre_tax = 12\n    cost_of_preferred_stock = 14\n    cost_of_equity = 16\n    \n    # Define the tax rate\n    tax_rate = 30\n\n    # Number of financing sources\n    num_sources = 3\n\n    # Calculate the after-tax cost of debt\n    cost_of_debt_after_tax = cost_of_debt_pre_tax * (1 - tax_rate / 100)\n\n    # Weight of each financing source is equal\n    weight_of_each_source = 1 / num_sources\n\n    # Calculate the weighted average cost of capital (WACC)\n    WACC = (cost_of_debt_after_tax * weight_of_each_source) + \\\n           (cost_of_preferred_stock * weight_of_each_source) + \\\n           (cost_of_equity * weight_of_each_source)\n\n    # return answer\n    return round(WACC, 2)  # The answer should be in percent, rounding to two decimal places\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will provide the weighted average cost of capital (WACC) for a company with equal financing from each source (debt, preferred stock, and equity), taking into account a 30% marginal tax rate. The WACC is rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-541",
        "question": "Several months down the line, Jordan gets a phone call from Fatimah. She has now become a board member of the Polar Foundation for Medical Advancements (PFMA). PFMA was created to fund a range of medical research endeavors. Fatimah is thrilled and requests Jordan to work out the return objective of PFMA's portfolio. Kyoto points out the following:• PFMA’s main investment goal is to preserve the real purchasing power of its portfolio after distributions.• The risk-free rate is 4.0%.• An expected inflation rate is 3.5%.• The portfolio’s standard deviation is 15.0%.• The cost of earning investment returns is 50 bp.• PFMA aims for a 5.5% annual distribution of assets. What is PFMA’s return objective? (2020 mock PM)",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    real_return_needed = 0.055  # The real return needed to sustain annual distributions\n    inflation_rate = 0.035      # Expected inflation rate\n    cost_of_investment_returns = 0.005  # Cost of earning investment returns (50 basis points)\n\n    # Do math calculation to get the answer\n    # To preserve the purchasing power, we need to add inflation rate to the real return needed.\n    # Additionally, we need to account for the costs of earning investment returns.\n    total_return_objective = real_return_needed + inflation_rate + cost_of_investment_returns\n    \n    # return answer\n    return total_return_objective\n\n# Calling the function and printing the answer\nprint(solution())\n```\n\nThis program defines the variables required to calculate the return objective of PFMA's portfolio, then calculates the total return objective by summing the real return needed, expected inflation rate, and the cost of earning investment returns. Finally, it returns the result of the calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-542",
        "question": "In the second model, given that the present short-term rate stands at 5%, the annual drift is 80bps, and the standard deviation of the short-term rate is 3%. Moreover, consider the ex-post realization of the dw random variable being 0.3. What would the interest rate be in the central node after building a 2-period interest rate tree with yearly periods by the conclusion of the second year?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To compute the central node interest rate at the end of the second year, we need to use the short-rate model's formula from the first step to project the rates at the end of each period:\n\nThe formula to update the short rate in a binomial tree model is generally given by:\n```\nr_new = r_previous + drift + volatility * dw\n```\nWhere:\n- r_new is the interest rate at the new node.\n- r_previous is the interest rate at the preceding node.\n- drift is the expected change in the interest rate, not considering random fluctuations (annual drift in this case).\n- volatility is the standard deviation of the short-term rate.\n- dw represents the random shock determined by the standard normal random variable in the model; it usually represents the square root of time multiplied by a standard normal variable, but here dw is given outright as an ex-post realization.\n\nSince we're building a 2-period model with yearly periods, we'll calculate the first step and then use the result to calculate the second step for the central node.\nAdditionally, interest rates are typically expressed in decimals in these models (e.g., 5% as 0.05).\n\nLet's proceed with the python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    r0 = 0.05            # Present short-term rate (initial rate, r0)\n    drift = 0.008        # Annual drift (80 bps)\n    volatility = 0.03    # Standard deviation of the short-term rate\n    dw = 0.3             # Ex-post realization of the dw random variable\n    \n    # Calculate the interest rate after the first period\n    # r1 for the first period (end of first year)\n    r1 = r0 + drift + volatility * dw\n    \n    # Calculate the interest rate at the central node after the second period\n    # for the central node, the dw will be 0 (no upward or downward movement)\n    # r2 for the central node after the second period (end of second year)\n    r_central = r1 + drift + volatility * 0\n    \n    # return answer\n    return r_central\n\n# Run the function and print the result\nprint(solution())\n```\n\nWhen you run the above code it would return the central interest rate at the end of the second year. Note that we used dw=0 for the central node calculation since it represents the case where there is no upward or downward shock in the second period, reflecting an 'average' path."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-543",
        "question": "The joint probability distribution of random variables A and B is presented by f{(a,b)}=k * a * b where a = 1,2,3, b = 1,2,3, and k is a positive constant. What is the likelihood that A+B will go beyond 5?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Initialize required variables\n    ab_values = [(a, b) for a in range(1, 4) for b in range(1, 4)]  # All possible combinations of a and b\n    total_probability = 0\n    k = 0  # Initialize k, actual value will be calculated based on the sum of probabilities being 1\n\n    # Calculate value of k\n    for a, b in ab_values:\n        total_probability += a * b\n    k = 1 / total_probability  # As the sum of all probabilities must be 1\n    \n    # Calculate probability of A+B > 5\n    probability_ab_greater_5 = 0\n    for a, b in ab_values:\n        if a + b > 5:\n            probability_ab_greater_5 += k * a * b\n            \n    # return the probability of A+B > 5\n    return probability_ab_greater_5\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-544",
        "question": "If each futures contract is for 100 shares and the company undergoes a 2-for-1 split, how many shares does each futures contract now cover?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's the Python program that calculates the number of shares each futures contract covers after a 2-for-1 stock split:\n\n```python\ndef solution():\n    # Define the initial number of shares each contract covers\n    initial_shares_per_contract = 100\n    \n    # Define the split ratio for the 2-for-1 split\n    split_ratio = 2\n    \n    # Calculate the new number of shares each contract covers after the split\n    new_shares_per_contract = initial_shares_per_contract * split_ratio\n    \n    # Return the answer\n    return new_shares_per_contract\n\n# You can call the function and print the returned value if you want to see the result\n# print(solution())\n```\n\nThis program calculates the number of shares each futures contract covers after a 2-for-1 stock split. You can call the function `solution()` to get the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-545",
        "question": "We have a bond assortment containing two bonds, namely bond X and bond Y. The worth of bond X is $60 million, while bond Y is worth $40 million. The one-year default probability for bond X is 5% with a recovery rate of 60%, whereas bond Y has a default probability of 7% and a recovery rate of 50%. Determine the anticipated credit loss for this collection over one year, given that the likelihood of both bonds defaulting is 0.7% and the default relationship is observed to be 20%.",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here is a Python program that calculates the expected credit loss for the bond assortment based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_x_value = 60000000\n    bond_y_value = 40000000\n    default_probability_x = 0.05\n    recovery_rate_x = 0.60\n    default_probability_y = 0.07\n    recovery_rate_y = 0.50\n    joint_default_probability = 0.007\n    default_correlation = 0.20\n\n    # Calculate individual expected losses\n    expected_loss_x = bond_x_value * default_probability_x * (1 - recovery_rate_x)\n    expected_loss_y = bond_y_value * default_probability_y * (1 - recovery_rate_y)\n\n    # Calculate joint expected loss\n    loss_given_joint_default_x = bond_x_value * (1 - recovery_rate_x)\n    loss_given_joint_default_y = bond_y_value * (1 - recovery_rate_y)\n    joint_expected_loss = joint_default_probability * (loss_given_joint_default_x + loss_given_joint_default_y)\n\n    # Calculate individual expected losses given joint default\n    individual_expected_loss_given_joint_default_x = default_probability_x * (1 - recovery_rate_x) * bond_x_value * default_correlation\n    individual_expected_loss_given_joint_default_y = default_probability_y * (1 - recovery_rate_y) * bond_y_value * default_correlation\n\n    # Adjust individual expected losses for the default correlation\n    adjusted_expected_loss_x = expected_loss_x - individual_expected_loss_given_joint_default_x\n    adjusted_expected_loss_y = expected_loss_y - individual_expected_loss_given_joint_default_y\n\n    # Calculate the total expected credit loss for the collection\n    total_expected_credit_loss = joint_expected_loss + adjusted_expected_loss_x + adjusted_expected_loss_y\n\n    # Return answer\n    return total_expected_credit_loss\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program defines the variables, performs the necessary calculations, and returns the total expected credit loss for the collection of bonds X and Y."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-546",
        "question": "What is the per share value of REIT B when the net asset value valuation method is applied?",
        "tables": [
            "|                                               | REIT A        |\n|-----------------------------------------------|---------------|\n| Estimated 12 months cash net operating income (NOI) | $ 280,000    |\n| Cash and equivalents                          | $ 335,000    |\n| Accounts receivable                           | $ 230,000    |\n| Debt and other liabilities                    | $ 1,680,000  |\n|                                               |               |\n| Shares outstanding                            | 82,000       |\n| Assumed cap rate                              | 8.00%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    noi = 280000  # Net Operating Income\n    cash = 335000  # Cash and equivalents\n    receivables = 230000  # Accounts receivable\n    debt = 1680000  # Debt and other liabilities\n    shares_outstanding = 82000  # Shares outstanding\n    cap_rate = 0.08  # Assumed cap rate\n    \n    # Calculate the property value using the cap rate\n    property_value = noi / cap_rate\n    \n    # Calculate the Net Asset Value (NAV)\n    nav = property_value + cash + receivables - debt\n    \n    # Calculate the NAV per share\n    nav_per_share = nav / shares_outstanding\n    \n    # Return answer\n    return nav_per_share\n\n# This will invoke the function and print the result.\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-547",
        "question": "The educational firm based in China, company PZ, operates under IFRS. In 2018, it had a passive equity ownership interest of 15% in the T-internet company. By the close of 2018, PZ decided to increase its ownership to 50% as of 1st January 2019, via a cash purchase. There have been no transactions between companies. In the table containing financial statements for both companies that follows: Could you determine the total liabilities for company PZ under the proportionate consolidation method for 2019?",
        "tables": [
            "|                      | 2018 | 2019 |\n|----------------------|------|------|\n| Revenue              | 5000 | 7000 |\n| Cost                 | 2000 | 2300 |\n| Operating income     | 3000 | 4700 |\n| Net profit           | 1650 | 2300 |\n| Total assets         | 4000 | 6000 |\n| Total liabilities    | 1200 | 900  |\n| Equity               | 2800 | 5100 |",
            "|                        | 2018  | 2019  |\n| ---------------------- | ----  | ----  |\n| Revenue                | 2000  | 2500  |\n| Cost                   | 1200  | 1300  |\n| Operating income       | 800   | 1200  |\n| Net profit             | 460   | 820   |\n| Dividends paid         | 230   | 410   |\n| Total assets           | 1000  | 1100  |\n| Total liabilities      | 600   | 650   |\n| Equity                 | 400   | 450   |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables for PZ's financials\n    pz_total_liabilities_2019 = 900\n    \n    # Define variables for T-internet's financials\n    t_total_liabilities_2019 = 650\n    \n    # Since PZ owns 50% of the T-internet company, we have to take 50% of T-internet's liabilities\n    proportionate_share_of_t_liabilities = 0.50 * t_total_liabilities_2019\n    \n    # Total liabilities of PZ after considering the proportionate share in T-internet\n    total_liabilities_pz_2019 = pz_total_liabilities_2019 + proportionate_share_of_t_liabilities\n    \n    # Return answer\n    return total_liabilities_pz_2019\n\n# Execute the function and print the result\nprint(solution())\n```\n\nThis Python program computes the total liabilities for company PZ for the year 2019 using the proportionate consolidation method, given its 50% ownership in T-internet. The program takes 50% of T-internet's liabilities and adds them to PZ's own liabilities to find the combined total liabilities for PZ."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-548",
        "question": "In this document, it is revealed that the operating income amounts to:",
        "tables": [
            "|     |             |\n|-----|-------------|\n| Revenue | $5,000,000 |\n| Cost of goods sold | $3,000,000 |\n| SG&A | $100,000 |\n| Interest expense | $200,000 |\n| Tax expense | $100,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000000\n    cost_of_goods_sold = 3000000\n    sga_expense = 100000\n    \n    # Operating income is revenue minus the cost of goods sold and the selling, general, and administrative expenses\n    \n    # Do math calculation to get the answer\n    operating_income = revenue - cost_of_goods_sold - sga_expense\n    \n    # return answer\n    return operating_income\n\n# Uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-549",
        "question": "A risk analyst calculates daily variance hth_tht​ using a GARCH method on daily yield rt:ht=α0 +α1rt−12+βht−1, with α0=0.005,α1 =0.04,β=0.94r_t:h_t=\\alpha_0\\;+\\alpha_1r_{t-1}^2+\\beta h_{t-1},\\;with\\;\\alpha_0=0.005,α1\\;=0.04,\\beta=0.94rt​:ht​=α0​+α1​rt−12​+βht−1​,withα0​=0.005,α1​=0.04,β=0.94. The long-term annual volatility is roughly.",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define constants according to the GARCH(1,1) formula\n    alpha0 = 0.005\n    alpha1 = 0.04\n    beta = 0.94\n    \n    # Calculate long-term variance according the GARCH(1,1) long-term formula\n    # h = alpha0 / (1 - alpha1 - beta), where h is the long-term variance\n    long_term_variance = alpha0 / (1 - alpha1 - beta)\n    \n    # The long-term standard deviation is the square root of the variance\n    long_term_std_dev = math.sqrt(long_term_variance)\n    \n    # Annual volatility is the standard deviation scaled by the square root of the number of trading days\n    # Assuming 252 trading days in a year\n    annual_volatility = long_term_std_dev * math.sqrt(252)\n    \n    # Return long-term annual volatility\n    return annual_volatility\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-550",
        "question": "P-tech Corporation, adheres to US GAAP and has been growing by purchasing other web-based businesses, the biggest of which is Surge web business. Currently, P-tech Corporation is establishing a 50/50 joint venture with Bravo company where they will together govern Surge web business. P-tech's accounting strategy for the joint venture will employ the equity method. Bravo company, complying with IFRS, will apply the proportionate consolidation method for their joint venture accounting. Joseph, a CFA, is an employee at Investment Equity Corp, and he has predicted the financial specifics for the joint venture in 2012. Joseph is making his approximations regarding each company’s profits and overall financial performance. In light of Joseph's projections, what will the Surge web business's total asset (in ￥ millions) be at the end of 2012, as noted in the chart below, that Bravo company will include in their consolidated financial statements?",
        "tables": [
            "| Year ending 31 December | 2012 |\n|-------------------------|------|\n| Revenue                | 2,230|\n| Operating income       | 322  |\n| Net income             | 102  |\n| Total assets           | 2,100|\n| Shareholders' equity   | 950  |"
        ],
        "topic": "Accounting",
        "output": [
            "The provided data and the question do not include specific figures regarding the assets of Surge web business or how the total assets are proportionally divided between P-tech Corporation and Bravo company.\n\nTo include the assets of a joint venture in consolidated financial statements using the proportionate consolidation method, the company includes its proportionate share of the joint venture's assets. Since Bravo company is using the proportionate consolidation method and it is a 50/50 venture, Bravo would report 50% of the joint venture's assets on its consolidated balance sheet.\n\nAssuming that we were given the total assets of the joint venture (that is not included in the prompt), the program to calculate Bravo's share of the joint venture's assets would look something like this:\n\n```python\ndef solution():\n    # For demonstration purposes, we'll assume the total assets of the joint venture\n    # are some number X. This value should have been provided in the question prompt\n    # or another source.\n    total_assets_joint_venture = X # This should be replaced by the actual value provided\n    \n    # Since it's a 50/50 joint venture and Bravo is using the proportionate consolidation method\n    bravo_share_of_assets = total_assets_joint_venture * 0.5\n    \n    # Return Bravo company's share of the joint venture assets\n    return bravo_share_of_assets\n```\n\nSince the value of `X` is unknown based on the provided information, we cannot proceed with an accurate calculation. The assets at the end of 2012 for Surge web business that Bravo company will report can't be determined with the given details. \n\nIf additional information is provided regarding the total assets of the Surge web business that are to be split between P-tech Corporation and Bravo Company, then `X` can be replaced with that value to complete the calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-551",
        "question": "If a property generates an annual yield of 19.9%, shows a standard deviation of returns of 18.5%, and has a market correlation of 0.9, with the market's standard deviation of returns being 15.9% and a risk-free rate of 1%, what is the beta for this property?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's a Python program that calculates the beta for the property:\n\n```python\ndef solution():\n    # Define variables name and value\n    property_std_dev = 18.5\n    market_std_dev = 15.9\n    market_correlation = 0.9\n    \n    # Do math calculation to get the answer\n    beta = (market_correlation * property_std_dev) / market_std_dev\n    \n    # return answer\n    return round(beta, 2)\n\n# You can call the function and print the result to check\n# print(solution())\n```\n\nThe program defines the required variables, performs the calculation for beta using the formula:\n\nBeta = (Correlation of the property with the market * Standard deviation of the property) / Standard deviation of the market\n\nFinally, it returns the beta value rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-552",
        "question": "The following calculations have been derived for XYZ Inc.: Demand curve: P = 150 – 5 × Q Total revenue curve: TR = 150 × Q – 5 × Q2 Marginal revenue curve: MR = 150 – 10 × Q Total cost curve: TC = Q3 – 10 × Q2 + 73 × Q + 120 Average cost curve: AC = Q2 – 10 × Q + 73 + 120/Q Marginal cost curve: MC = 3 × Q2 – 20 × Q + 73 P stands for price per unit, and Q stands for cost per unit. What output (in units) will maximize the profit for XYZ Inc.?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To maximize profits, we need to find the quantity of output (Q) where Marginal Revenue (MR) equals Marginal Cost (MC). This is the profit-maximizing condition in economics, which can be represented as MR = MC. We solve for the value of Q at which MR and MC are equal.\n\n```python\nfrom sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol for Q (quantity)\n    Q = symbols('Q')\n\n    # Define the Marginal Revenue and Marginal Cost equations\n    MR = 150 - 10 * Q\n    MC = 3 * Q**2 - 20 * Q + 73\n\n    # Set up the equation MR = MC\n    profit_max_condition = Eq(MR, MC)\n\n    # Solve for Q\n    optimal_Q = solve(profit_max_condition, Q)\n\n    # Since we expect a feasible output quantity, we choose the positive value returned\n    optimal_Q = [q.evalf() for q in optimal_Q if q > 0]\n\n    # Make sure there is at least one positive solution\n    if not optimal_Q:\n        return \"No positive solution found\"\n\n    # Return the first positive value (There should ideally be only one positive solution)\n    return optimal_Q[0]\n\n# Run the program to get the result\nsolution()\n```\n\nThis program imports the `sympy` package to define symbols, set equations, and solve them algebraically. The solution function finds the `Q` value that makes MR equal to MC and returns it, considering only positive and feasible quantities."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-553",
        "question": "A researcher is analyzing a collection that includes 2,500 non-prime mortgages and 800 prime home loans. Out of the non-prime mortgages, 500 are delayed in their payments. Out of the prime home loans, 64 are delayed in their payments. If the researcher randomly picks a home loan from the collection and it is presently delayed on its payments, what is the likelihood that it is a non-prime mortgage?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Below is the Python program that calculates the likelihood of a randomly picked delayed mortgage being a non-prime mortgage:\n\n```python\ndef solution():\n    # define the variables\n    non_prime_mortgages = 2500\n    prime_mortgages = 800\n    delayed_non_prime = 500\n    delayed_prime = 64\n    \n    # total mortgages in the collection\n    total_mortgages = non_prime_mortgages + prime_mortgages\n    \n    # total delayed payments\n    total_delayed = delayed_non_prime + delayed_prime\n    \n    # probability that a delayed mortgage is non-prime\n    probability_non_prime = delayed_non_prime / total_delayed\n    \n    # return the answer\n    return probability_non_prime\n\n# Example of calling the function\nprint(solution())  # This should print the probability\n```\nThis program calculates the probability (likelihood) by dividing the number of delayed non-prime mortgages by the total number of delayed mortgages."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-554",
        "question": "There were no additions to or subtractions from the portfolio during the year. Fees for administration are determined by the value at the end of the period. The fees for administration and incentive are computed separately. What's the return after deductions for the client given the following details: Starting portfolio assets valued at $100M, portfolio assets at the period's close (prior to fee deductions) amounting to $110M, a management fee pegged to the assets under management at 2%, an incentive fee based on the gains of 20%, and a soft hurdle rate of 8%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_assets = 100e6\n    final_assets_before_fees = 110e6\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    soft_hurdle_rate = 0.08\n\n    # Calculate fees\n    management_fee = final_assets_before_fees * management_fee_rate\n    \n    # Calc gain to see if we surpass the soft hurdle rate\n    gain = final_assets_before_fees - initial_assets\n    hurdle_fee_gain = max(gain - (soft_hurdle_rate * initial_assets), 0)\n    incentive_fee = hurdle_fee_gain * incentive_fee_rate\n    \n    # Adjust final assets for fees\n    final_assets_after_fees = final_assets_before_fees - management_fee - incentive_fee\n    \n    # Calculate net return for the client\n    net_return = (final_assets_after_fees - initial_assets) / initial_assets\n    \n    # return answer\n    return net_return\n\n# The actual value can be obtained by calling the function `solution()`.\n```\n\nThis program defines a function `solution()` that calculates the net return for the client after the deduction of a management fee and an incentive fee, considering a specified soft hurdle rate for the incentive fee calculation. The function then returns this calculated net return value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-555",
        "question": "If two stocks have identical volatility and a correlation of -0.5, what is their minimum variance hedge ratio?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the minimum variance hedge ratio for two stocks with identical volatility and a correlation of -0.5, you would use the following formula:\n\nThe minimum variance hedge ratio (h*) is defined as:\n\\[ h^* = -\\frac{\\rho \\cdot \\sigma_A}{\\sigma_B} \\]\n\nWhere:\n- \\(\\rho\\) is the correlation between the returns on the two assets (in this case, -0.5).\n- \\(\\sigma_A\\) is the standard deviation (volatility) of the returns on asset A.\n- \\(\\sigma_B\\) is the standard deviation (volatility) of the returns on asset B.\n\nGiven that the two stocks have identical volatility, we can assume \\(\\sigma_A = \\sigma_B\\).\n\nThus, the formula simplifies to:\n\\[ h^* = -\\rho \\]\n\nFor this problem, that would make:\n\\[ h^* = -(-0.5) = 0.5 \\]\n\nHere's the program for this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = -0.5  # Given correlation between the stocks\n    \n    # Since the volatilities are identical, we can simplify (sigma_A / sigma_B) to 1\n    # Do math calculation to get the answer\n    minimum_variance_hedge_ratio = -correlation\n    \n    # return answer\n    return minimum_variance_hedge_ratio\n\n# To execute the function\nprint(solution())\n```\n\nRunning `print(solution())` would give you the minimum variance hedge ratio for the given scenario."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-556",
        "question": "If Thompson plans to secure a three-month loan using an interest-rate futures contract and decides to sell the interest rate futures contract at 98.00. Then, after six months, he gets a loan directly from the market at 2.4%, and undoes the hedge at 97.00. What would be the overall borrowing rate throughout this procedure?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the overall borrowing rate based on the provided information:\n\n```python\ndef solution():\n    # Initial futures contract sale price\n    initial_futures_price = 98.00\n    \n    # Futures contract price when the hedge is lifted\n    final_futures_price = 97.00\n    \n    # The difference in futures prices which reflects the \"gain\" or \"loss\" on the futures contract\n    futures_price_difference = initial_futures_price - final_futures_price\n    \n    # Loan interest rate from the market\n    market_interest_rate = 2.4\n    \n    # Converting the futures price movement to a percentage basis point change\n    basis_points_change = futures_price_difference * 0.01\n    \n    # Overall borrowing rate is the sum of market interest rate and the basis points change\n    # due to the hedge with the interest rate futures contract\n    overall_borrowing_rate = market_interest_rate - basis_points_change\n    \n    return overall_borrowing_rate\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis will provide the overall borrowing rate after taking into account the hedge with the interest rate futures contract."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-557",
        "question": "Conservative Fund that has USD 50 million in assets has been performing poorly recently, prompting the institutional sales team to suggest a merger with Assertive Fund, a larger fund valued at USD 200 million. Conservative Fund's returns are usually distributed with an average of 3% and a standard deviation of 7%. As for Assertive Fund, its returns follow a normal distribution with an average of 7% and a standard deviation of 15%. The top executives have tasked a financial analyst to calculate the possibility that the returns on the merged portfolio might surpass 26%. Given that the returns on both funds don't influence each other, how would the analyst estimate the chances of the returns on the merged fund exceeding 26%?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the probability of the returns on the merged fund exceeding 26%, we must first find the expected return and standard deviation of the merged fund. The combined expected return is the weighted average of the returns of the individual funds, and the variance of the combined fund is the weighted sum of the individual variances (since the returns on both funds are independent).\n\nThe merged fund assets will be the sum of assets from Conservative Fund and Assertive Fund, which is USD 50 million + USD 200 million = USD 250 million.\n\nThe portion of the total assets for the Conservative Fund is USD 50 million / USD 250 million = 0.2 (or 20%), and for the Assertive Fund it is USD 200 million / USD 250 million = 0.8 (or 80%).\n\nAfter calculating the expected return and standard deviation, we can use the cumulative distribution function (CDF) for a normal distribution to find the probability that the return exceeds 26%. Python's `scipy.stats` library provides a function `norm.cdf()` that can be used to compute this. Since the CDF gives us the probability that a random variable is less than or equal to a certain value, we need to subtract the result from 1 to get the probability of it being greater than the given value.\n\nHere is the Python program to do this calculation:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    assets_conservative = 50e6\n    assets_assertive = 200e6\n    total_assets = assets_conservative + assets_assertive\n    \n    mean_conservative = 3\n    sd_conservative = 7\n    mean_assertive = 7\n    sd_assertive = 15\n    \n    # Weighted average mean return\n    merged_mean = (mean_conservative * (assets_conservative / total_assets) +\n                   mean_assertive * (assets_assertive / total_assets))\n    \n    # Weighted sum of variances\n    merged_variance = ((sd_conservative ** 2) * (assets_conservative / total_assets) +\n                       (sd_assertive ** 2) * (assets_assertive / total_assets))\n    # Standard deviation is the square root of variance\n    merged_sd = merged_variance ** 0.5\n    \n    # Calculate z-score for 26% return\n    z = (26 - merged_mean) / merged_sd\n    \n    # Calculate the probability of exceeding 26% return\n    # Subtracting CDF from 1 gives the upper tail probability\n    probability_exceed_26 = 1 - norm.cdf(z)\n    \n    # return answer\n    return probability_exceed_26\n\n# Call the function and print the result for demonstration\nprint(solution())\n```\n\nExpected output:\n```plaintext\nThe probability that the merged fund will exceed a 26% return is near 0 depending on the calculation.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-558",
        "question": "An investment manager achieved a return rate of 15.5% on a portfolio with a beta of 1.2. If the risk-less return rate is 2.5% and the market return stands at 11.8%, what does Jensen's alpha for the portfolio amount to?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's the Python program to calculate Jensen's alpha for the portfolio:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_return = 15.5\n    beta = 1.2\n    risk_free_rate = 2.5\n    market_return = 11.8\n    \n    # Do math calculation to get the answer\n    expected_portfolio_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    jensens_alpha = portfolio_return - expected_portfolio_return\n    \n    # return answer\n    return jensens_alpha\n\n# You can call the function to get the result\nprint(f\"Jensen's alpha for the portfolio is: {solution()}\")\n```\n\nThis program defines the necessary input variables for calculating Jensen's alpha and performs the calculation based on its definition. It then returns the result, which represents the excess return the portfolio generated over what would be expected given its beta (systematic risk level) and the actual market return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-559",
        "question": "Based on the data provided in the subsequent table, what is the sustainable growth of Company N?",
        "tables": [
            "|     | Financial Statement of Company M ($ million) |\n| --- | -------------------------------------------- |\n| Net income | 4,500 |\n| Sales | 40,000 |\n| Total assets, average during year | 50,020 |\n| Shareholders' equity, beginning of year | 39,080 |\n| Dividends paid | 200 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the sustainable growth rate, we can use the following formula:\n\nSustainable Growth Rate (SGR) = Return on Equity (ROE) * (1 - Dividend Payout Ratio)\n\nWhere Return on Equity (ROE) = Net Income / Shareholders' Equity\n\nAnd Dividend Payout Ratio = Dividends / Net Income\n\nLet's calculate it:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 4500  # in $ million\n    shareholders_equity_beginning = 39080  # in $ million\n    dividends_paid = 200  # in $ million\n    \n    # Calculate Return on Equity (ROE)\n    roe = net_income / shareholders_equity_beginning\n    \n    # Calculate Dividend Payout Ratio\n    dividend_payout_ratio = dividends_paid / net_income\n    \n    # Calculate Sustainable Growth Rate\n    sustainable_growth_rate = roe * (1 - dividend_payout_ratio)\n    \n    # return answer\n    return sustainable_growth_rate\n\n# Call the function and print the answer\nprint(solution())\n```\n\nPlease note, for the Shareholders' Equity, I used the \"Shareholders' equity, beginning of year\" value, assuming that the end-of-year value is not substantially different. If the end-of-year equity was provided, the average of the beginning and end-of-year equity would be used to calculate ROE for a more precise result. \n\nRemember that this calculation assumes that Company M's capital structure (debt-equity ratio) will remain constant and that profits will be reinvested at the historical return on equity rate. Any change in these assumptions would affect the sustainable growth rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-560",
        "question": "If a corporation has 1 million shares in circulation and earnings of £2 million, and decides to use £10 million of unused cash to buy back shares on the open market at a trading price of £50 per share, what would be the corporation's earnings per share after the entire £10 million of unused cash is used to buy back shares?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here's the Python program to calculate the corporation's earnings per share (EPS) after the share buyback:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_shares = 1000000\n    earnings = 2000000\n    buyback_funds = 10000000\n    share_price = 50\n    \n    # Calculate the number of shares to buy back\n    shares_to_buy_back = buyback_funds / share_price\n    \n    # Calculate new total shares after buyback\n    new_total_shares = total_shares - shares_to_buy_back\n    \n    # Calculate new earnings per share after buyback\n    new_eps = earnings / new_total_shares\n    \n    # return answer\n    return round(new_eps, 2)  # Round to 2 decimal places for currency format\n\n# Calling the function to get the answer\nprint(solution())\n```\n\nThis program defines the initial parameters, calculates how many shares can be bought back with the £10 million at £50 per share, subtracts these from the original number of shares to get the new total number of shares, and then it calculates the new EPS based on the unchanged earnings divided by the new, smaller number of shares. Finally, the program rounds the EPS to two decimal places, which is typically how earnings per share are represented."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-561",
        "question": "If we presume that the market interest rate abides by the mean reversion law, with the long-term average interest rate at 4%, the current interest rate at 3.5%, and a mean reverting rate of 0.3, what will be the forecasted market interest rate for the subsequent period?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Below is the Python program that calculates the forecasted market interest rate for the subsequent period based on the parameters provided and the mean reversion model.\n\n```python\ndef solution():\n    # Define variables name and value\n    long_term_average = 0.04\n    current_interest_rate = 0.035\n    mean_reverting_rate = 0.3\n    \n    # Do math calculation to get the answer\n    forecasted_interest_rate = current_interest_rate + mean_reverting_rate * (long_term_average - current_interest_rate)\n    \n    # return answer\n    return forecasted_interest_rate\n\n# Example usage:\n# print(solution())\n``` \n\nRunning `solution()` will give us the forecasted market interest rate for the next period according to the mean reversion model specified."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-562",
        "question": "A firm adhering to International Financial Reporting Standards (IFRS) doesn't apply the cost model when valuing its investment properties and property, plant, and equipment. Data regarding an investment property and a plant are provided below: The firm will probably record a profit (in thousands) on its income statement for the year of:",
        "tables": [
            "|         | Beginning of the Year (C thousands) | End of the Year ( thousands) |\n|---------|------------------------------------|------------------------------|\n| Investment property | 1,000                            | 1,100                        |\n| Plant    | 1,000                            | 1,200                        |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables for the beginning and end values of Investment property\n    investment_property_beginning = 1000\n    investment_property_end = 1100\n    \n    # Define variables for the beginning and end values of Plant\n    plant_beginning = 1000\n    plant_end = 1200\n    \n    # Calculate the change (increase) in value for Investment property\n    investment_property_increase = investment_property_end - investment_property_beginning\n    \n    # Calculate the change (increase) in value for Plant\n    plant_increase = plant_end - plant_beginning\n    \n    # The total profit is the sum of the increases in Investment property and Plant values\n    total_profit = investment_property_increase + plant_increase\n    \n    # return the total profit\n    return total_profit\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the total profit based on the increases in values of investment property and plant. The profit from the investment property is 100 (1100 - 1000), and from the plant is 200 (1200 - 1000), so the total would be 300 thousand."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-563",
        "question": "A financier from Australia presently owns an equity portfolio worth A$240 million. He's contemplating adjusting the portfolio depending on the evaluation of the risk and return potential concerning the Australian economy. The details associated with the Australian investment markets and economy have all been compiled in this table: Utilizing the data in the table and the Grinold-Kroner model, what is the anticipated yearly equity risk premium?",
        "tables": [
            "| 10-Year Historical | | Current | Capital Market Expectations |\n| :---: | :---: | :---: | :---: |\n| **Average government bond yield:** 2.8% | | 10-year government bond yield: 2.3% |  |\n| **Average annual equity return:** 4.6% | | Year-over-year equity return: -9.4% |  |\n| **Average annual inflation rate:** 2.3% | | Year-over-year inflation rate:  2.1% | Expected annual inflation: 2.3% |\n| **Equity market P/E (beginning of period):** 15x | | Current equity market P/E: 14.5x | Expected equity market P / E: 14.0x |\n| **Average annual dividend income return:** 2.6% | |  | Expected annual income return: 2.4% |\n| **Average annual real earnings growth:** 6.0% | | |Expected annual real earnings growth:  5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the expected annual equity risk premium using the Grinold-Kroner model, we need to use the following formula:\n\nExpected Equity Risk Premium (ERP) = Expected dividend yield + Expected real earnings growth + Expected inflation - Change in P/E ratio\n\nLet's define the variables and implement this in the provided Python program structure.\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_dividend_yield = 2.4  # Expected annual income return\n    expected_real_earnings_growth = 5.0  # Expected annual real earnings growth\n    expected_inflation = 2.3  # Expected annual inflation\n    pe_beginning_of_period = 15.0  # Equity market P/E (beginning of period)\n    expected_pe_end_of_period = 14.0  # Expected equity market P/E\n    \n    # Calculate the expected change in P/E ratio (Assuming linear change, not percentage change)\n    change_in_pe_ratio = (pe_beginning_of_period - expected_pe_end_of_period) / pe_beginning_of_period\n\n    # Do math calculation to get the answer\n    # Multiplying change_in_pe_ratio by expected_inflation to take into account the inflation effect on P/E changes\n    expected_equity_risk_premium = (\n        expected_dividend_yield +\n        expected_real_earnings_growth +\n        expected_inflation -\n        (change_in_pe_ratio * expected_inflation)\n    )\n    \n    # return answer\n    return expected_equity_risk_premium\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program will return the expected annual equity risk premium based on the provided table and using the Grinold-Kroner model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-564",
        "question": "The education company ZP, which is based in China and follows IFRS, had a passive equity interest of 15% in U-web company in 2018. ZP decided to bump up its ownership interest to 50% at the beginning of 2019 through a cash purchase. Both companies have no intercompany transactions. The financial data for ZP and U-web companies are provided in the table below. Could you compute the net income of ZP company for 2019 assuming a significant influence over U-web company?",
        "tables": [
            "|                            |   2018 |   2019 |\n|----------------------------|--------|--------|\n| Revenue                    | 5,000  | 7,000  |\n| Cost                       | 2,000  | 2,300  |\n| Operating income           | 3,000  | 4,700  |\n| Net profit                 | 1,650  | 2,300  |\n| Total assets               | 4,000  | 6,000  |\n| Total liabilities          | 1,200  | 900    |\n| Equity                     | 2,800  | 5,100  |",
            "|                       | 2018 | 2019 |\n|-----------------------|------|------|\n| Revenue               | 2000 | 2500 |\n| Cost                  | 1200 | 1300 |\n| Operating income      | 800  | 1200 |\n| Net profit            | 460  | 820  |\n| Dividends paid        | 230  | 410  |\n| Total assets          | 1000 | 1100 |\n| Total liabilities     | 600  | 650  |\n| Equity                | 400  | 450  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value for ZP company\n    zp_net_profit_2019 = 2300\n\n    # Define variables name and value for U-web company\n    uweb_net_profit_2019 = 820\n    uweb_dividends_paid_2019 = 410\n\n    # Since ZP company holds 50% of the U-web company in 2019, it can record its share of U-web's net profit\n    # and received dividends as 'Income from Associates' according to IFRS.\n    zp_share_of_uweb_net_profit = 0.5 * uweb_net_profit_2019\n\n    # However, dividends received from associates should be deducted from 'Income from Associates' since\n    # dividends decrease the value of the investment in associate.\n    # Upon receiving dividends, an investor reduces the carrying amount of the investment.\n    # The dividends received by ZP from U-web would be 50% of the dividends paid by U-web.\n    zp_dividends_received_from_uweb = 0.5 * uweb_dividends_paid_2019\n    \n    # Adjust ZP's net profit by adding the share of net profit and subtracting the dividends received\n    zp_adjusted_net_profit_2019 = (\n        zp_net_profit_2019 +\n        zp_share_of_uweb_net_profit -\n        zp_dividends_received_from_uweb\n    )\n    \n    # return answer\n    return zp_adjusted_net_profit_2019\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-565",
        "question": "Based on the provided information, what is the EBITDA interest coverage ratio of company B?",
        "tables": [
            "|                                         |            |\n|-----------------------------------------|------------|\n| Exhibit 1. Company A Excerpt from Consolidated Income Statement Year|            |       \n| Ending 31 December 2013 ($ in millions) |            |       \n| Gross profit                            |6,290       |     \n| Royalty and commission income            |130         |      \n| Other operating income                   |140         |      \n| Other operating expenses                 |4,985       |      \n| Operating profit                         |906         |      \n| Interest income                          |37          |      \n| Interest expense                         |135         |      \n| Income before taxes                      |988         |      \n| Income taxes                             |257         |      \n| Net income                               |692         |      \n| Additional Information:                  |            |\n| Depreciation and amortization:  $264 million |264     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "It seems there is a mismatch in the question, as the provided information concerns \"Company A\" but the question asks about the EBITDA interest coverage ratio of \"Company B\". There is no information given about Company B. \n\nHowever, if we are to assume that the information provided is indeed related to the company in question (let's assume it's Company A), then here is a Python program to calculate Company A's EBITDA (Earnings Before Interest, Taxes, Depreciation, and Amortization) interest coverage ratio using the given information:\n\nThe formula for EBITDA interest coverage ratio is:\nEBITDA / Interest expense\n\nWhere EBITDA = Operating Profit + Depreciation and Amortization\n\n```python\ndef solution():\n    # Given variables from the consolidated income statement\n    operating_profit = 906  # in millions of dollars\n    depreciation_amortization = 264  # in millions of dollars\n    interest_expense = 135  # in millions of dollars\n    \n    # Calculating EBITDA\n    ebitda = operating_profit + depreciation_amortization\n    \n    # Calculating EBITDA interest coverage ratio\n    ebitda_interest_coverage_ratio = ebitda / interest_expense\n    \n    # Return the answer\n    return ebitda_interest_coverage_ratio\n\n# You can run the function and print the result to check the value\n# print(solution())\n```\n\nThe function `solution` calculates the EBITDA using the `operating_profit` and `depreciation_amortization` values and then divides it by `interest_expense` to find the EBITDA interest coverage ratio. The return value of this program will be the EBITDA interest coverage ratio for the company (assuming Company A is the intended target)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-566",
        "question": "Finally, David concentrates on predicting the anticipated returns from direct real estate investments. He reviews a decade's worth of data on returns from multifamily residential real estate. David doubts whether the fluctuations in the observed returns indicate smoothing. He applies a publicly available REIT index to eliminate the smoothing effect on the return flow and accurately represent the risk (gauge by standard deviation) related to multifamily residential real estate investment (the REIT index's variance for the measurement duration is 16; λ is 0.8). What is David’s adjusted standard deviation for multifamily properties for the investment duration?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the adjusted standard deviation for multifamily properties considering the smoothing effect, we follow the formula provided for unsmoothing real estate returns:\n\nAdjusted Standard Deviation = sqrt[(REIT Index Variance / λ)]\n\nwhere λ (lambda) is the smoothing parameter, and the REIT index variance is the variance of the publicly available REIT index. Note that the standard deviation is the square root of the variance.\n\nGiven:\nREIT index variance = 16\nλ = 0.8\n\nNow, we will calculate the adjusted standard deviation using these inputs.\n\n```python\nimport math\n\ndef solution():\n    # Define variables name (with values)\n    reit_index_variance = 16\n    lambda_smoothing = 0.8\n    \n    # Do math calculation to get the answer\n    adjusted_sd = math.sqrt(reit_index_variance / lambda_smoothing)\n    \n    # return answer\n    return adjusted_sd\n\n# Example of usage:\nprint(solution())\n```\n\nIn the code above, we define the `reit_index_variance` and `lambda_smoothing` with values as given in the question. We then compute the adjusted standard deviation by taking the square root of the variance divided by the smoothing parameter λ and return the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-567",
        "question": "A researcher at a property investment company is trying to set predictions for the return rate of industrial properties for the upcoming year. He has gathered the following information: Calculate the anticipated return from the industrial sector properties based on the data presented.",
        "tables": [
            "| Current industrial sector capitalization rate (\"cap\" rate) | 5.7% |\n|-----------------------------------------------------------|-----|\n| Expected cap rate at the end of the period                | 5.5% |\n| NOI growth rate (real)                                    | 1%   |\n| Inflation expectation                                     | 1.5% |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_cap_rate = 0.057\n    expected_cap_rate = 0.055\n    noi_growth_rate_real = 0.01\n    inflation_expectation = 0.015\n\n    # Do math calculation to get the answer\n    # The anticipated return (nominal) can be estimated by adding the NOI growth rate and the inflation expectation,\n    # and adjusting for the change in the capitalization rate.\n\n    # Anticipated return = NOI growth (real) + Inflation - Cap rate change\n    anticipated_return = noi_growth_rate_real + inflation_expectation - (current_cap_rate - expected_cap_rate)\n\n    # Turn it into percentage format by multiplying by 100\n    anticipated_return_percentage = anticipated_return * 100\n    \n    # return answer\n    return anticipated_return_percentage\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-568",
        "question": "Based on the data provided for the trio of shares listed in the chart, determine the return on the price-weighted index over a month's span.",
        "tables": [
            "|          | March 31,20X7                        | April 30,20X7                         |\n|----------|-----------------|---------------------------------|---------------|---------------------------------|\n|          | Share Price     | Number of Shares Outstanding(thousands) | Share Price   | Number of Shares Outstanding(thousands) |\n| Stock X  | $15             | 100                             | $20           | 100                             |\n| Stock Y  | $20             | 1,000                           | $30           | 1,000                           |\n| Stock Z  | $30             | 2,000                           | $25           | 2,000                           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "A price-weighted index is an average calculated by adding up the prices of the component stocks and dividing the sum by a divisor, which typically changes whenever one of the component stocks has a stock split or dividend, to generate a consistent value for the index.\n\nHere's how we will calculate the return on the price-weighted index over the one-month span:\n\n1. Calculate the initial index value at March 31 by summing the stock prices and dividing by the number of stocks, which in this case is 3 (Stock X, Stock Y, Stock Z).\n2. Calculate the final index value at April 30 using the new prices of the stocks.\n3. Calculate the return on the index by subtracting the initial index value from the final index value, and then dividing the difference by the initial index value.\n\n```python\ndef solution():\n    # Price-weighted index for March 31, 20X7\n    initial_index = (15 + 20 + 30) / 3\n\n    # Price-weighted index for April 30, 20X7\n    final_index = (20 + 30 + 25) / 3\n\n    # Calculate the percent return on the price-weighted index\n    return_on_index = ((final_index - initial_index) / initial_index) * 100\n\n    # return the answer\n    return return_on_index\n\n# You can test the function with this line\nprint(solution())\n```\n\nThis program will return the percentage return on the price-weighted index over the span of one month."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-569",
        "question": "Based upon the presented series of spot rates, what is the price of Bond Y if all three bonds pay their interest yearly?",
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity | Spot Rates |\n|------|-------------|------------------|------------|\n| X    | 8%          | 3 years          | 8%         |\n| Y    | 7%          | 3 years          | 9%         |\n| Z    | 6%          | 3 years          | 10%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Below is a Python program to calculate the price of Bond Y based on the given information:\n\n```python\ndef solution():\n    # Given values\n    coupon_rate_y = 0.07       # 7%\n    time_to_maturity_y = 3     # 3 years\n    spot_rate_y = 0.09         # 9%\n    \n    # Calculate the cash flows from the coupon payments\n    annual_coupon_payment = coupon_rate_y * 1000  # Assume face value of 1000\n    \n    # Calculate the present value of the coupon payments\n    coupon_payments_pv = sum([annual_coupon_payment / ((1 + spot_rate_y) ** i) for i in range(1, time_to_maturity_y + 1)])\n    \n    # Calculate the present value of the face value received at maturity\n    face_value_pv = 1000 / ((1 + spot_rate_y) ** time_to_maturity_y)\n    \n    # The bond price is the sum of the present values of the coupon payments and the face value\n    bond_price_y = coupon_payments_pv + face_value_pv\n    \n    return bond_price_y\n\n# Execute the function and print the result\nprint(solution())\n```\n\nRunning this program will give you the current price of Bond Y at the given spot rate. Remember that in a real-world application, prices can be subject to round-off errors due to how floating-point arithmetic works in computers, but the formula above faithfully represents the theoretical calculation. \n\nNote: The face value is assumed to be 1000, which is a standard assumption if not otherwise specified.\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-570",
        "question": "A researcher compiled the following details about a business: The business has a taxable income of $40,000 and a pretax income of $50,000. The prevailing tax rate is 50% and the tax rate when the reversal happens will be 40%. What is the business's deferred tax liability at the close of the first year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program to calculate deferred tax liability at the close of the first year:\n\n```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 40000\n    pretax_income = 50000\n    current_tax_rate = 0.50\n    future_tax_rate = 0.40\n    \n    # Calculate the temporary difference\n    temporary_difference = pretax_income - taxable_income\n    \n    # Calculate the deferred tax liability\n    deferred_tax_liability = temporary_difference * future_tax_rate\n    \n    # return answer\n    return deferred_tax_liability\n\n# Call the function and print the answer\nprint(solution())  # For verification purpose\n```\n\nRunning this program will provide the answer for the business's deferred tax liability."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-571",
        "question": "Summit Resale operates through internet for people on an agreed basis. Summit gets the items from the owners, puts them up for sale online, and earns a 25 percent commission for any items sold. Summit collects the entire amount from the buyer and pays the gross amount after commission to the owner. If items remain unsold, they are returned to the owner after 90 days. During 2019, Summit had these details: • Total sales price of items sold on agreed basis during 2019 was €2,000,000. • Total commissions that Summit retained during 2019 for these items totalled €500,000. How much revenue should Summit report on its 2019 income statement?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is the Python program to calculate the revenue Summit should report on its income statement for 2019:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_commissions = 500000\n    \n    # Since the revenue for Summit comes from the commissions,\n    # the total revenue is equal to the total commissions earned.\n    revenue = total_commissions\n    \n    # return answer\n    return revenue\n\n# Call the function and print the result if you'd like to see the outcome\nprint(solution())\n```\n\nSince Summit Resale earns revenue from commissions only, the amount of revenue recorded would be the total commissions retained, which is €500,000."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-572",
        "question": "Given the historical data presented, what is the standard deviation for the two-asset portfolio displayed in the chart?",
        "tables": [
            "|                   | Asset A, Asset B | A and B |\n|-------------------|------------------|---------|\n| Standard deviation| 4.7%, 7.7%       |         |\n| Portfolio weight  | 0.4, 0.6         |         |\n| Correlation       |                  | 0.3     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's the Python program to calculate the standard deviation for the two-asset portfolio:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    std_dev_A = 0.047      # Standard deviation of Asset A\n    std_dev_B = 0.077      # Standard deviation of Asset B\n    weight_A = 0.4         # Portfolio weight of Asset A\n    weight_B = 0.6         # Portfolio weight of Asset B\n    correlation_AB = 0.3   # Correlation between Asset A and Asset B\n    \n    # Calculate the variance of the two-asset portfolio\n    variance_portfolio = (weight_A * std_dev_A)**2 + (weight_B * std_dev_B)**2 + 2 * weight_A * weight_B * correlation_AB * std_dev_A * std_dev_B\n    \n    # Calculate the standard deviation of the two-asset portfolio (square root of variance)\n    std_dev_portfolio = math.sqrt(variance_portfolio)\n    \n    # return answer\n    return std_dev_portfolio\n\n# You can uncomment the following line to test the solution function:\n# print(solution())\n```\n\nThe `solution()` function calculates the standard deviation for the two-asset portfolio by first computing the portfolio variance using the given standard deviations, weights, and correlation. It then takes the square root of the variance to find the portfolio standard deviation, which is the answer we're looking for."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-573",
        "question": "In 2017, Company B had an inventory on hand of 30 days and aimed to reach the standard industry average of 28 days in 2018. The recent year's cost of goods sold was $1.2 million in 2017, and it was projected to lower to $0.35 million in 2018. What was the inventory change?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    inventory_days_2017 = 30\n    inventory_days_2018 = 28\n    cogs_2017 = 1200000\n    cogs_2018 = 350000\n    \n    # Calculate average inventory for each year using the formula:\n    # Average Inventory = (Inventory Days * COGS) / 365\n    average_inventory_2017 = (inventory_days_2017 * cogs_2017) / 365\n    average_inventory_2018 = (inventory_days_2018 * cogs_2018) / 365\n    \n    # Calculate the change in inventory by subtracting the average inventory in 2018 from 2017\n    inventory_change = average_inventory_2018 - average_inventory_2017\n    \n    # return answer\n    return inventory_change\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-574",
        "question": "The fund managed by John displays the following returns for the first three years: What will the time-weighted rate of return be?",
        "tables": [
            "| Year | Investment Return |\n|------|-------------------|\n| 1    | $600 13%          |\n| 2    | $700 5%           |\n| 3    | $1,000 -1%        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the time-weighted rate of return (TWRR) for the fund, we will calculate the return for each period and chain the returns together geometrically.\n\nHere's how the TWRR is calculated for the above data:\n\n- For year 1, the return is 13%, so the growth factor is 1 + 0.13 = 1.13.\n- For year 2, the return is 5%, so the growth factor is 1 + 0.05 = 1.05.\n- For year 3, the return is -1%, so the growth factor is 1 - 0.01 = 0.99.\n\nThe TWRR is then the geometric linking of these growth factors minus 1, then multiplied by 100 to convert to percentage. Here's the formula:\n\n\\[ TWRR = \\left( \\prod_{i=1}^{n} (1 + r_i) \\right)^{\\frac{1}{n}} - 1 \\]\n\nwhere \\( r_i \\) is the return in period i and n is the number of periods.\n\nWe will now create the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    investment_returns = [0.13, 0.05, -0.01]\n    \n    # Do math calculation to get the answer\n    cumulative_return = 1\n    for r in investment_returns:\n        cumulative_return *= (1 + r)\n    \n    # Calculate the time-weighted rate of return\n    twrr = ((cumulative_return ** (1/len(investment_returns))) - 1) * 100\n    \n    # return answer in percentage format\n    return round(twrr, 2)\n\n# Example usage\nprint(f\"The Time-Weighted Rate of Return is: {solution()}%\")\n```\n\nNote that the provided return values are already in percentage format, so we divide them by 100 when applying them to the formula. Also, the exponent \\( \\frac{1}{n} \\) is not necessary in this case because we are not averaging the returns over multiple years, but rather multiplying the growth factors directly. Hence, the formula is simplified to just multiplying the growth factors and subtracting 1.\n\nAdditionally, the function `round(twrr, 2)` rounds the result to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-575",
        "question": "Assuming 260 days a year, an option on the Nikkei stock index has a strike price at 3,000 Brazilian reais (BRL) with a delta of 0.6 and an annual volatility on the index of 24%. What is the 10-day VaR at 95% confidence level, under the delta-normal assumptions?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program to calculate the 10-day VaR at the 95% confidence level, using the delta-normal assumptions:\n\n```python\n# Import package if needs\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    strike_price = 3000 # BRL\n    delta = 0.6\n    annual_volatility = 0.24 # 24%\n    days_per_year = 260 \n    time_period = 10 # 10 days\n    confidence_level = 0.95\n\n    # Calculate the daily volatility\n    daily_volatility = annual_volatility / (days_per_year ** 0.5)\n\n    # Calculate the Z value for the 95% confidence level\n    z_score = norm.ppf(confidence_level)\n\n    # Calculate the portfolio value change under the delta-normal assumption\n    portfolio_value_change = delta * strike_price * daily_volatility * z_score * (time_period ** 0.5)\n\n    # The 10-day VaR at the 95% confidence level\n    value_at_risk = -portfolio_value_change # Multiply by -1 because VaR is a loss\n    \n    # return answer\n    return round(value_at_risk, 2)\n```\n\nThis program will return the 10-day Value at Risk (VaR) for the specified option on the Nikkei stock index at the 95% confidence level."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-576",
        "question": "The preferred stock of Alpha Enterprises is traded in the financial market for $88 per share. The annual dividend per share is always $6.60. What is the required rate of return?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program that calculates the required rate of return for the preferred stock of Alpha Enterprises, using the given price per share and annual dividend per share:\n\n```python\ndef solution():\n    # Define variables name and value\n    price_per_share = 88\n    dividend_per_share = 6.60\n    \n    # Do math calculation to get the answer\n    required_rate_of_return = dividend_per_share / price_per_share\n    \n    # return answer\n    return required_rate_of_return\n\n# Print the result for verification\nprint(solution())\n```\n\nWhen you run this program, it will calculate the required rate of return by dividing the annual dividend per share by the price per share. The answer will be a decimal representing the rate of return as a fraction of 1, which you can then multiply by 100 to get a percentage if desired."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-577",
        "question": "For a portfolio that consists of four investments, what is the number of unique covariance terms required to calculate the portfolio's return variance?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    number_of_investments = 4\n    \n    # Do math calculation to get the answer\n    # Unique covariance terms for a portfolio is calculated as: n(n-1)/2\n    unique_covariance_terms = number_of_investments * (number_of_investments - 1) / 2\n    \n    # return answer\n    return unique_covariance_terms\n\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-578",
        "question": "If a financial expert is examining the amortization of a product patent purchased by the Italian firm, MAKETTI S.p.A., what would be the 2009 fiscal year's amortization expense on the patent using the units-of-production approach, based on the patent information he has collected?",
        "tables": [
            "| Acquisition cost | £5,800,000 |\n| --- | --- |\n| Acquisition date | 1 January 2009 |\n| Patent expiration date | 31 December 2015 |\n| Total plant capacity of patented product | 40,000 units per year |\n| Production of patented product in fiscal year ended 31 December 2009 | 20,000 units |\n| Expected production of patented product during life of the patent | 175,000 units |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 5800000\n    total_units_patent_life = 175000\n    production_units_2009 = 20000\n    \n    # Do math calculation to get the answer\n    amortization_per_unit = acquisition_cost / total_units_patent_life\n    amortization_expense_2009 = amortization_per_unit * production_units_2009\n    \n    # return answer\n    return round(amortization_expense_2009, 2)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-579",
        "question": "What is the justified trailing P/E of the stock, considering that the firm's present intrinsic value and EPS stand at $25.62 and $4 respectively?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, to determine the justified trailing price-to-earnings (P/E) ratio using intrinsic value and earnings per share (EPS), we can divide the firm's intrinsic value by its EPS.\n\nHere is the Python program to do the calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    intrinsic_value = 25.62\n    eps = 4.0\n    \n    # Do math calculation to get the answer\n    justified_trailing_pe = intrinsic_value / eps\n    \n    # return answer\n    return justified_trailing_pe\n\n# The function call\nprint(solution())\n```\n\nWhen you call the solution() function, it would return the justified trailing P/E of the stock."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-580",
        "question": "A shareholder buys 100 stocks at a price of $40 for each. After exactly one year, this shareholder sells all of them for $41.50 per stock. On the same day of the sale, the shareholder gets dividends amounting to $200. What is the HPR on the investment?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100 * 40  # number of stocks times price per stock\n    sale_amount = 100 * 41.50  # number of stocks times selling price per stock\n    dividends = 200\n    \n    # Calculate total amount received from the investment\n    total_received = sale_amount + dividends\n    \n    # Calculate Holding Period Return (HPR)\n    hpr = (total_received - initial_investment) / initial_investment\n    \n    # return answer\n    return hpr\n    \n# Uncomment the line below to test the function\n# print(solution())\n```\n\nHere, the initial investment is the amount spent to buy the 100 stocks at $40 each. The total amount received after one year includes the proceeds from selling all the stocks at $41.50 each plus the dividends of $200. The Holding Period Return (HPR) is calculated as the difference between the total amount received and the initial investment, divided by the initial investment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-581",
        "question": "What is the FIFO method's reported Cost of Goods Sold in 2018 by a firm adopting the LIFO method in £?",
        "tables": [
            "|                        | 2018 | 2017 |\n|------------------------|------|------|\n| Cost of goods sold (COGS) | 50,800 | 48,500 |\n| Ending inventories | 10,550 | 10,000 |\n| LIFO reserve | 4,320 | 2,600 |"
        ],
        "topic": "Accounting",
        "output": [
            "Here's a Python program that calculates the FIFO method's reported Cost of Goods Sold (COGS) in 2018 for a firm that is using the LIFO method:\n\n```python\ndef solution():\n    # Define variables name and value\n    cogs_lifo = 50800  # COGS under LIFO in 2018\n    lifo_reserve_2018 = 4320  # LIFO reserve in 2018\n    lifo_reserve_2017 = 2600  # LIFO reserve in 2017\n    \n    # Do math calculation to get the answer\n    # FIFO COGS = LIFO COGS + (LIFO Reserve at the beginning of the year) - (LIFO Reserve at the end of the year)\n    cogs_fifo = cogs_lifo - (lifo_reserve_2018 - lifo_reserve_2017)\n    \n    # return answer\n    return cogs_fifo\n\n# Call the function and print the result\nprint(solution())\n```\nRunning this program will give us the FIFO method's reported Cost of Goods Sold in 2018."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-582",
        "question": "How many exceptions in backtesting a VAR would we anticipate over a 250-day trading year if we hold a 90% confidence level?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # At a 90% confidence level, we expect breaches 10% of the time\n    confidence_level = 0.90\n    days_in_year = 250\n\n    # Calculating expected exceptions\n    expected_exceptions = (1 - confidence_level) * days_in_year\n    \n    # return the number of expected exceptions\n    return expected_exceptions\n\n# You can call the function to get the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-583",
        "question": "As a risk-neutral investor, John Smith will use utility theory to select his investment portfolio. Given several investments with their expected return and expected standard deviation on the table, which one would he most probably invest in?",
        "tables": [
            "| Investment | Expected Return(%) | Expected Standard Deviation(%) |\n|------------|-------------------|--------------------------------|\n| 1          | 19                | 3                              |\n| 2          | 21                | 9                              |\n| 3          | 24                | 20                             |\n| 4          | 19                | 35                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "A risk-neutral investor does not consider risk as a factor when making investment decisions. Such an investor only looks at the expected return and is indifferent to the level of risk associated with each investment. Therefore, the investment with the highest expected return would be chosen by a risk-neutral investor. Here is the Python program that identifies which investment has the highest expected return:\n\n```python\ndef solution():\n    # Define the investment options with their expected return and standard deviation\n    investment_options = [\n        {\"Investment\": 1, \"Expected Return\": 19, \"Standard Deviation\": 3},\n        {\"Investment\": 2, \"Expected Return\": 21, \"Standard Deviation\": 9},\n        {\"Investment\": 3, \"Expected Return\": 24, \"Standard Deviation\": 20},\n        {\"Investment\": 4, \"Expected Return\": 19, \"Standard Deviation\": 35},\n    ]\n    \n    # Find the investment with the maximum expected return\n    max_return = max(investment_options, key=lambda x: x[\"Expected Return\"])\n    \n    # Return the Investment number with maximum expected return\n    return max_return[\"Investment\"]\n\n# Testing the function\nprint(solution())\n```\n\nWhen you run the Python program, it will return the number of the investment with the highest expected return, which is what a risk-neutral investor like John Smith would most probably select."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-584",
        "question": "If an investor places an immediate-or-cancel limit purchase order for 700 shares at a price of $20.50 in a market, what would probably be the average price the investor would be required to pay, considering the existing limit orders on its book for a specific stock?",
        "tables": [
            "| Buyer | Bid Size (# of shares) | Limit Price ($) | Seller | Offer Size (# of shares) | Limit Price ($) |\n|-------|------------------------|-----------------|--------|--------------------------|-----------------|\n| 1     | 500                    | 18.50           | 1      | 200                      | 20.20           |\n| 2     | 300                    | 18.90           | 2      | 300                      | 20.35           |\n| 3     | 400                    | 19.20           | 3      | 400                      | 20.50           |\n| 4     | 200                    | 20.10           | 4      | 100                      | 20.65           |\n| 5     | 100                    | 20.15           | 5      | 200                      | 20.70           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define bid orders and sorted by price descending (better prices first)\n    bid_orders = [\n        {'buyer': 4, 'shares': 200, 'limit_price': 20.10},\n        {'buyer': 5, 'shares': 100, 'limit_price': 20.15}\n    ]\n\n    # The investor wants to purchase 700 shares at a limit price of $20.50\n    investor_shares_to_buy = 700\n    investor_limit_price = 20.50\n\n    # Initialize variables to keep track of total cost and shares bought\n    total_cost = 0\n    shares_bought = 0\n\n    # Go through the bid orders and accumulate shares and cost\n    for order in bid_orders:\n        # Check if the order limit price is less than or equal to investor's limit price\n        if order['limit_price'] <= investor_limit_price:\n            if shares_bought + order['shares'] <= investor_shares_to_buy:\n                # Buy all shares from this order\n                shares_bought += order['shares']\n                total_cost += order['shares'] * order['limit_price']\n            else:\n                # Buy only the remaining shares needed\n                shares_to_buy = investor_shares_to_buy - shares_bought\n                shares_bought += shares_to_buy\n                total_cost += shares_to_buy * order['limit_price']\n                break  # No more shares are needed\n    \n    # Calculate the average price paid per share\n    average_price = total_cost / shares_bought if shares_bought else 0\n\n    # return answer (rounded to two decimal places if necessary)\n    return round(average_price, 2)\n\n# Feel free to test the function\n# print(solution())\n```\n\nThis program defines the bids and sequentially tries to fulfill the investor's order for 700 shares at a limit price of $20.50, computing the average price paid based on the available bids. If no shares are bought (e.g. all limit prices are above the investor's), the function will return 0. If some shares are bought, it calculates the average."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-585",
        "question": "How did the alterations in the firm's deferred tax accounts impact the net income of 2015 according to US GAAP?",
        "tables": [
            "| 2015 | | 2014 |\n| --- | --- | --- |\n| Deferred tax assets $1,000,000 | | $800,000 |\n| Deferred tax liabilities $600,000 | | $700,000 |\n| Valuation allowance $500,000 | | $400,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Variables defined as per the given table\n    # Deferred tax assets and liabilities for 2015 and 2014\n    dt_assets_2015 = 1000000\n    dt_assets_2014 = 800000\n    dt_liabilities_2015 = 600000\n    dt_liabilities_2014 = 700000\n    valuation_allowance_2015 = 500000\n    valuation_allowance_2014 = 400000\n    \n    # Calculation of net deferred tax asset/liability for each year\n    net_dt_2015 = (dt_assets_2015 - valuation_allowance_2015) - dt_liabilities_2015\n    net_dt_2014 = (dt_assets_2014 - valuation_allowance_2014) - dt_liabilities_2014\n    \n    # Difference in net deferred tax assets (liabilities) impacts net income\n    # If net deferred tax assets increase or liabilities decrease, it's a benefit to income.\n    dt_impact_on_income = net_dt_2015 - net_dt_2014\n    \n    # Return the calculated impact\n    return dt_impact_on_income\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe program defines the given values for deferred tax assets, liabilities, and valuation allowance for both years. It then calculates the net deferred tax for both years and finds the difference, which reflects the impact on net income for 2015 following US GAAP. Finally, it returns that impact as the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-586",
        "question": "The table underneath displays the monthly stock returns for Oak Inc. Based on the provided table, can you compute the standard deviation for Oak Inc.'s returns, considering that there are 6 observations in the population?",
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import math package for squaring and square root operations\nimport math\n\ndef solution():\n    # Define the returns as percentages\n    returns = [20, 4, -5, 12, 3, 12]\n    \n    # Calculate the mean return\n    mean_return = sum(returns) / len(returns)\n\n    # Calculate the squared deviations from the mean\n    squared_deviations = [(r - mean_return)**2 for r in returns]\n\n    # Calculate the variance\n    variance = sum(squared_deviations) / len(returns)\n\n    # Calculate the standard deviation\n    standard_deviation = math.sqrt(variance)\n    \n    # return the answer\n    return standard_deviation\n    \n# Calling the function and print the result\nprint(solution())\n```\nThis program calculates the population standard deviation for Oak Inc.'s stock returns based on the given returns data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-587",
        "question": "Smith is a tax consultant who offers tax consciousness guidance to individual patrons. One of Smith's patrons is Emma. Emma requests Smith to assess Mutual Fund B, which has an inherent gain of 10% of the concluding portfolio value. Emma requests Smith to determine a post-disposal yield over the latest three-year duration. Mutual Fund B showed after-tax yields of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital profits are taxed at a 25% pace. What is the yearly after-tax post-disposal yield measured by Smith?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Certainly! To calculate the annual after-tax post-disposal yield for Mutual Fund B over the three-year period, we need to consider the after-tax yields for each year and the tax rate on capital gains. Since the gains are only realized upon disposal, we will calculate the after-tax yield for each year, taking into account the inherent gain that is taxed at the end of the three-year period.\n\n```python\ndef solution():\n    # Define variables names and values\n    year1_yield = 0.09  # after-tax yield for the first year\n    year2_yield = 0.05  # after-tax yield for the second year\n    year3_yield = 0.08  # after-tax yield for the third year\n    capital_gains_tax = 0.25  # tax rate on capital gains\n    inherent_gain = 0.10  # inherent gain of the closing portfolio value\n    \n    # Adjust each year's yield for the inherent gain that is taxed upon disposal\n    # Since the inherent gain affects the entire portfolio, we consider that the yields\n    # for the years are on the already taxed portion of the portfolio.\n    \n    # Therefore, we need to reduce the inherent gain by the capital gains tax to\n    # find the after-tax portion of the inherent gain\n    after_tax_inherent_gain = inherent_gain * (1 - capital_gains_tax)\n    \n    # Now, we adjust the after-tax yields for each year by adding the after-tax portion\n    # of the inherent gain assuming the inherent gain is evenly spread over the 3 years\n    adjusted_year1_yield = year1_yield + after_tax_inherent_gain / 3\n    adjusted_year2_yield = year2_yield + after_tax_inherent_gain / 3\n    adjusted_year3_yield = year3_yield + after_tax_inherent_gain / 3\n    \n    # The overall after-tax post-disposal yield is the average of the adjusted yields\n    post_disposal_yield = (adjusted_year1_yield + adjusted_year2_yield + adjusted_year3_yield) / 3\n    \n    # Return answer\n    return post_disposal_yield\n\n# Call the solution function and print the result\nprint(solution())\n```\nNote: This code assumes that the inherent gain is evenly realized over the three-year period. If the inherent gain is fully realized at the end of the third year, the code would need to be adjusted accordingly. Moreover, the gains are assumed to be compounded, but the question does not specify so the answer provides a simple average. If a Compound Annual Growth Rate (CAGR) were requested, the calculations would also need to be adjusted."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-588",
        "question": "A company that makes machines is examining its cost structure, and here lays out the meticulous data as specified in the table: If the company fabricates 3 machines, what is the average fixed cost?",
        "tables": [
            "| Quantity (unit) | Total Fixed Cost ($) | Total Variable Cost ($) |\n| --------------- | -------------------- | ---------------------- |\n| 0               | 400                  | 0                       |\n| 1               | 400                  | 100                    |\n| 2               | 400                  | 190                    |\n| 3               | 400                  | 275                    |\n| 4               | 400                  | 360                    |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quantity = 3\n    total_fixed_cost = 400\n    \n    # Do math calculation to get the answer\n    average_fixed_cost = total_fixed_cost / quantity\n    \n    # return answer\n    return average_fixed_cost\n\n# Uncomment the following line to print the result:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-589",
        "question": "Amelia, as a fund manager, trades off a $50,000 vega notional of a one-year variance swap on the S&P 500 at a strike of 20% (annual volatility mentioned). As half a year has gone by, the S&P 500 has seen a realized volatility of 16% (annualized). The same day, the fair strike of a new six-month variance swap on the S&P 500 stands at 19%. The present value of the variance swap that Amelia sold (taking into account the annual interest rate is 2.5%) is:",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    notional_vega = 50000\n    sold_strike = 20  # in percentage\n    realized_vol = 16  # annualized realized volatility in percentage\n    current_strike = 19  # fair strike for new swaps\n    annual_interest_rate = 0.025  # annual interest rate\n    time_period = 0.5  # half a year has gone by\n\n    # Convert percentages to decimals\n    sold_strike = sold_strike / 100\n    realized_vol = realized_vol / 100\n    current_strike = current_strike / 100\n\n    # Calculate the present value of the original one-year variance swap\n    # Variance = volatility squared\n    # Realized Variance for the period passed\n    realized_variance = realized_vol ** 2 * time_period\n    # Expected Variance for the remaining period based on the new fair strike\n    expected_variance_remaining = (current_strike ** 2) * (1 - time_period)\n\n    # Total Expected Variance for the whole period using the sold strike\n    total_expected_variance = sold_strike ** 2\n\n    # Variance difference that will be paid out (or received) at the end of the period\n    variance_payout = (realized_variance + expected_variance_remaining) - total_expected_variance\n\n    # Present value of the variance payout\n    pv_variance_payout = variance_payout * notional_vega / (1 + annual_interest_rate * time_period)\n\n    # return Present Value of the original one-year variance swap\n    return pv_variance_payout\n\n# Run the function and print the result\nprint(f\"The present value of the variance swap is: {solution()}\")\n```\n\nThe program above defines the values given in the question, converts the percentages into decimals, and performs the calculation for the present value of the original one-year variance swap sold by Amelia basing on the realized volatility and the new fair strike. Then, it returns the calculated present value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-590",
        "question": "The yield-to-maturity of a bond, which is stated on a semiannual basis, is at 4.769%. What would this yield-to-maturity be if a financial expert were to adjust it to a monthly basis?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To adjust the semiannual yield-to-maturity to a monthly basis, we'll need to convert the semiannual rate to a monthly rate using the formula for compounding interest.\n\nTo do this, we need to understand that if an interest rate is compounded semiannually, it means that the interest is compounded twice a year. To find the equivalent monthly rate, we need to calculate the 6th root (since there are 6 months in a semiannual period) of the total semiannual growth factor and then subtract one to find the monthly interest rate. Finally, we would multiply this monthly rate by 12 to annualize it.\n\nThe formula to adjust the annual rate compounded semiannually to an annual rate compounded monthly is:\n\n\\( (1 + \\text{semiannual rate})^{(1/6)} - 1 \\) \n\n Note that the semiannual rate must first be converted from a percentage to a decimal.\n\nHere's the Python program that performs the calculation:\n\n```python\ndef solution():\n    # Given semiannual yield-to-maturity on a bond\n    semiannual_rate_percent = 4.769\n    \n    # Convert the semiannual rate to a decimal\n    semiannual_rate_decimal = semiannual_rate_percent / 100\n    \n    # Calculate the equivalent monthly rate \n    monthly_rate_decimal = (1 + semiannual_rate_decimal) ** (1/6) - 1\n    \n    # Convert the monthly rate back to a percentage and annualize it\n    annualized_monthly_rate_percent = monthly_rate_decimal * 12 * 100\n    \n    # return the adjusted yield-to-maturity on a monthly basis\n    return annualized_monthly_rate_percent\n    \n# Call the function and print the result\nprint(solution())\n```\n\nThis program will compute the annualized yield-to-maturity adjusted to a monthly compounding basis using the given semiannual yield-to-maturity rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-591",
        "question": "A business released bonds worth $2,000,000 having a maturity of 20 years at 96. The business redeemed these bonds seven years down the line at 103, at a time when the unamortized discount stood at $39,000. What would probably be the loss reported by the business in the year these bonds were redeemed? (2020-Mock-B-AM 54)",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value_bonds = 2000000\n    issuance_price = 96  # percentage of the face value\n    redemption_price = 103  # percentage of the face value\n    unamortized_discount = 39000\n\n    # Calculate the actual issuance and redemption values\n    issuance_value = face_value_bonds * (issuance_price / 100)\n    redemption_value = face_value_bonds * (redemption_price / 100)\n    \n    # Find the loss on redemption\n    # Loss = Redemption Value + Unamortized Discount - Issuance Value\n    loss = redemption_value + unamortized_discount - issuance_value\n    \n    # return answer\n    return loss\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it calculates the loss the business would report when redeeming the bonds by considering the face value, issuance price, redemption price, and unamortized discount. The returned value is the loss which is the result of the redemption value plus unamortized discount minus the issuance value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-592",
        "question": "Jessica has projected that corporation B will disburse dividends of $1.5 and $2.5 respectively at the close of the first and second year. After the second year, dividends are anticipated to increase at a rate of 5%. Other relevant details can be found in the table below. What is the inherent value of the corporation's stock?",
        "tables": [
            "| Risk-free rate | 3% |\n| -- | -- |\n| Market risk premium | 7% |\n| Company A's beta | 1.1 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To find the intrinsic value of corporation B's stock, we'll use the Dividend Discount Model (DDM), also known as the Gordon Growth Model when dividends grow at a constant rate. The formula for the intrinsic value of a stock with growing dividends is:\n\n\\[ P_0 = \\frac{D_1}{(k - g)} \\]\n\nWhere:\n- \\( P_0 \\) is the intrinsic value of the stock today.\n- \\( D_1 \\) is the dividend in the next period (the dividend after growth).\n- \\( k \\) is the required rate of return, which we'll calculate using the Capital Asset Pricing Model (CAPM).\n- \\( g \\) is the growth rate of the dividends.\n\nThe required rate of return \\( k \\) can be calculated using the CAPM formula:\n\n\\[ k = R_f + \\beta \\times (R_m - R_f) \\]\n\nSubsequently, the present value of the expected future dividends must be calculated considering that the first and second dividends are not growing, and from the second year onwards, 5% growth is expected. The formula to find the present value of each dividend is:\n\n\\[ PV(D_n) = \\frac{D_n}{(1 + k)^n} \\]\n\nLet's implement the calculation in the Python program:\n\n```python\ndef solution():\n    # Given values\n    risk_free_rate = 0.03       # Risk-free rate (R_f)\n    market_risk_premium = 0.07  # Market risk premium (R_m - R_f)\n    beta = 1.1                  # Beta coefficient for the company (β)\n    dividend_year1 = 1.5        # Dividend at the end of the first year (D1)\n    dividend_year2 = 2.5        # Dividend at the end of the second year (D2)\n    growth_rate = 0.05          # Constant growth rate (g)\n\n    # Calculate required rate of return using CAPM\n    required_return = risk_free_rate + beta * market_risk_premium  # (k)\n\n    # Calculate the present value of the dividends\n    present_value_dividend_year1 = dividend_year1 / (1 + required_return)\n    present_value_dividend_year2 = dividend_year2 / ((1 + required_return) ** 2)\n\n    # Calculate the present value of future dividends after the second year\n    # Adjust dividend for year 2 for growth and calculate perpetuity\n    present_value_future_dividends = (dividend_year2 * (1 + growth_rate)) / (required_return - growth_rate)\n    present_value_future_dividends /= (1 + required_return) ** 2\n\n    # Calculate the intrinsic value by summing the present values\n    intrinsic_value = present_value_dividend_year1 + present_value_dividend_year2 + present_value_future_dividends\n\n    # Return the intrinsic value\n    return intrinsic_value\n\n# Call the function and print the result\nprint(f\"The intrinsic value of corporation's stock is: {solution()}\")"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-593",
        "question": "Using the straight-line method, what is the annual depreciation expense for a machine purchased in Jan. 2015, according to the applicable information?",
        "tables": [
            "|                                     |      |\n|-------------------------------------|------|\n| Cost of the equipment $5,000,000    |      |\n| Estimated residual value $500,000   |      |\n| Expected useful life 9 years        |      |\n| Total productive capacity 950,000 units |      |\n| Production in FY2015 150,000 units  |      |\n| Expected production for the next 9 years 100,000 units each year |      |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 5000000\n    residual_value = 500000\n    useful_life_years = 9\n    \n    # Do math calculation to get the answer\n    annual_depreciation_expense = (cost_of_equipment - residual_value) / useful_life_years\n    \n    # return answer\n    return annual_depreciation_expense\n\n# Uncomment the following line to check the function\n# print(solution())\n```\n\nThis Python function calculates the annual depreciation expense using the straight-line method based on the data provided for the equipment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-594",
        "question": "What is the likelihood of drawing one of the 3 marked balls if 600 ping pong balls are stored in a dark container?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! In this case, no packages are necessary as we are dealing with a simple probability calculation.\n\n```python\ndef solution():\n    # Define variables name and value\n    total_balls = 600\n    marked_balls = 3\n    \n    # Do math calculation to get the answer\n    probability = marked_balls / total_balls\n    \n    # return answer\n    return probability\n\n# If you want to execute the function and see the result\n# probability_of_drawing_marked_ball = solution()\n# print(probability_of_drawing_marked_ball)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-595",
        "question": "If a share costs $100.00 and it follows a single-stage binomial system with an increase of 1.05 and a decrease of 0.97, and if 1 million Bernoulli tests are done, and the mean final share price is $102.00, what is the likelihood of an increase (p)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# No package import is needed\n\ndef solution():\n    # Define variables name and value\n    initial_share_price = 100.0\n    increase = 1.05\n    decrease = 0.97\n    mean_final_price = 102.0\n    \n    # Since this is a single-stage binomial system,\n    # we can use the formula for expected final stock price:\n    # E(S) = p * S_up + (1 - p) * S_down\n    # Here, S_up is the stock price after an increase, and S_down after a decrease.\n    # Replacing with known values:\n    # 102 = p * 105 + (1 - p) * 97\n    # Solving for p (probability of an increase):\n    p = (mean_final_price - decrease * initial_share_price) / (increase * initial_share_price - decrease * initial_share_price)\n    \n    # return answer\n    return p\n\n# Run the solution function\nprint(solution())\n```\nThis Python function calculates the likelihood of an increase in stock price (p) given a single-stage binomial model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-596",
        "question": "A yearly annuity of $2,000 is expected to be received for a span of twenty years, with the initial payment anticipated to arrive at the conclusion of year thirteen. If we presume a 7% discount rate for the upcoming years, can you work out the present value of the annuity today?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program that calculates the present value of the annuity described:\n\n```python\ndef solution():\n    # Define variables name and value\n    annuity_payment = 2000\n    discount_rate = 0.07\n    total_years = 20\n    start_year = 13\n    present_value = 0\n    \n    # Calculate the present value of each annuity payment\n    for i in range(start_year, start_year + total_years):\n        present_value += annuity_payment / ((1 + discount_rate) ** i)\n    \n    # return answer\n    return present_value\n\n# You can test the function with the following line\nprint(solution())\n```\n\nThis function calculates the present value of each payment individually from the end of year thirteen to the end of year thirty-two (which is the twenty-year span of the annuity) and sums up these values to get the total present value today."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-597",
        "question": "In the spot market, the exchange rate for AUD/USD is 0.50248. If we consider that the yearly interest rate is 3% for USD and 4% for AUD, what would be the one-year forward exchange rate for USD/AUD?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's the Python program that calculates the one-year forward exchange rate for USD/AUD using the interest rate parity formula:\n\n```python\ndef solution():\n    # Given variables\n    spot_rate_AUDUSD = 0.50248  # Spot rate of AUD/USD\n    interest_rate_USD = 0.03  # Yearly interest rate for USD\n    interest_rate_AUD = 0.04  # Yearly interest rate for AUD\n    one_year = 1  # One year period\n\n    # Convert the spot rate for AUD/USD to USD/AUD\n    spot_rate_USDAUD = 1 / spot_rate_AUDUSD\n\n    # Using the interest rate parity formula to calculate the forward exchange rate\n    # Forward rate formula: F = S * (1 + i_d) / (1 + i_f)\n    # where:\n    # F = forward exchange rate\n    # S = spot exchange rate\n    # i_d = interest rate of the domestic currency (in this case AUD)\n    # i_f = interest rate of the foreign currency (in this case USD)\n    forward_rate_USDAUD = spot_rate_USDAUD * (1 + interest_rate_AUD * one_year) / (1 + interest_rate_USD * one_year)\n\n    # return forward exchange rate for USD/AUD\n    return forward_rate_USDAUD\n\n# You can call the function and print the result if you want to see the output\n# print(solution())\n```\n\nThis program defines the given spot exchange rate for AUD/USD, interest rates for USD and AUD, and then uses the standard interest rate parity formula to calculate the forward exchange rate for USD/AUD. The result will be the one-year forward exchange rate accounting for the different interest rates between USD and AUD."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-598",
        "question": "An eternal bond is a financial instrument that delivers the same sum of money indefinitely. Suppose it provides a payment of $60 every month, and it has a yearly discount rate of 4% compounded on a monthly basis. What would be the current value of this bond?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    monthly_payment = 60\n    annual_discount_rate = 0.04\n    monthly_discount_rate = annual_discount_rate / 12\n    \n    # Calculate the present value of an annuity (Perpetuity in this case)\n    present_value = monthly_payment / monthly_discount_rate\n    \n    # return answer\n    return present_value\n    \n# Calling the function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-599",
        "question": "Our projection is that 15% of secondary school pupils will participate in employment next year. If we randomly choose 5 secondary school pupils, what is the likelihood that precisely two of them will participate in employment next year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    probability_of_success = 0.15  # The probability that a pupil will participate in employment\n    number_of_trials = 5  # The total number of pupils chosen\n    number_of_successes = 2  # The number of pupils that we want to have participated in employment\n    \n    # Calculate the binomial probability\n    probability = comb(number_of_trials, number_of_successes) * (probability_of_success ** number_of_successes) * ((1 - probability_of_success) ** (number_of_trials - number_of_successes))\n    \n    # return the answer\n    return probability\n\n# You can print the result to verify the correct output\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-600",
        "question": "The Sunshine Primary School provides its staff members with a defined benefit retirement plan. The school is in accordance with IFRS. The chosen details related to the pension plan in 2018 are this: the benefit obligations at the onset of the year being $3,000,000, the plan assets' fair value at the start of the year being $3,100,000 and the plan assets' book value equalling $2,800,000 at the beginning of 2018. So, what is the funded status of the scheme at the start of 2018?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    benefit_obligations_start = 3000000\n    plan_assets_fair_value_start = 3100000\n    # plan_assets_book_value_start = 2800000 # Book value is not needed for funded status calculation.\n\n    # Do math calculation to get the answer\n    funded_status = plan_assets_fair_value_start - benefit_obligations_start\n    \n    # return answer\n    return funded_status\n\n# Call the function and print the result for verification\n# This print statement is not part of the function and would normally\n# be outside. It's included here for demonstration purposes.\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-601",
        "question": "The pamphlet ends with the backstory of another private equity fund known as Pocatello Fund. As per the cash flows and distributions shown in Exhibit 1 for the initial five years of this fund, what was the total value paid into the Pocatello Fund in 2009?",
        "tables": [
            "| Year | Paid-In Capital | Mgmt Fees | Operating Results | NAV before Distributions | Carried Interest | Distributions | NAV after Distributions |\n|------|-----------------|-----------|-------------------|--------------------------|------------------|---------------|-------------------------|\n| 2005 | 40             | 0.8       | -3                | 36.2                     |                  |               | 36.2                    |\n| 2006 | 55             | 1.1       | 4                 | 54.1                     |                  |               | 54.1                    |\n| 2007 | 80             | 1.6       | 11                | 88.5                     |                  |               | 88.5                    |\n| 2008 | 100            | 2         | 27                | 133.5                    | 4.2              | 19            | 110.3                   |\n| 2009 | 125            | 2         | 34                | 167.3                    | 6.6              | 38            | 122.7                   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the total value paid into the Pocatello Fund in 2009:\n\n```python\ndef solution():\n    # Define variables name and value\n    paid_in_capital_2009 = 125\n    \n    # The total value paid into the fund in 2009 is just the paid-in capital for that year\n    total_value_paid_2009 = paid_in_capital_2009\n    \n    # return answer\n    return total_value_paid_2009\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-602",
        "question": "In the spot market, the conversion rate from Canadian dollar to Euro stands at CAD/EUR 1.4808, while the rate for Japanese yen to Euro is JPY/EUR 132.3894. What is the JPY/CAD cross rate?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's a Python program that computes the JPY/CAD cross rate based on the given spot conversion rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    cad_to_eur = 1.4808\n    jpy_to_eur = 132.3894\n    \n    # Do math calculation to get the answer\n    # To find the JPY/CAD rate, divide the JPY/EUR rate by the CAD/EUR rate.\n    jpy_to_cad = jpy_to_eur / cad_to_eur\n    \n    # return answer\n    return jpy_to_cad\n\n# Example usage:\n# print(solution())\n```\n\nYou can uncomment the example usage to print the computed cross rate when running the program."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-603",
        "question": "Based on the given data, what is the company's unleveraged beta?",
        "tables": [
            "| Market risk premium | 7.0% |\n|---|---|\n| Risk-free rate | 2.0% |\n| Comparable firm return | 10.4% |\n| Comparable firm debt-to-equity ratio | 1.0 |\n| Comparable firm tax rate | 40.0% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_risk_premium = 0.07\n    risk_free_rate = 0.02\n    comparable_firm_return = 0.104\n    comparable_firm_debt_to_equity_ratio = 1.0\n    comparable_firm_tax_rate = 0.40\n\n    # Using the CAPM formula for the comparable firm: E(R) = Rf + β(Rm - Rf)\n    # We can solve for beta of the comparable firm as follows:\n    comparable_firm_beta = (comparable_firm_return - risk_free_rate) / market_risk_premium\n    \n    # Next, we need to unlever the beta:\n    # Unlevered Beta = Levered Beta / (1 + (1 - Tax Rate) * Debt-to-Equity Ratio)\n    unleveraged_beta = comparable_firm_beta / (1 + (1 - comparable_firm_tax_rate) * comparable_firm_debt_to_equity_ratio)\n\n    # Return unleveraged beta answer\n    return unleveraged_beta\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-604",
        "question": "A merchant is analyzing various methods for assessing inventory worth. The merchant has a single product that they trade for $50. What is the final inventory's value for the first quarter if the merchant employs a continuous LIFO inventory evaluation technique?",
        "tables": [
            "|  |  | Units Purchased and Sold (first quarter) |  |  |  |  |\n|---|---|---|---|---|---|---|\n|  |  | Date |  |  |  |  |\n|  |  | Units Purchased | Purchase Price | Units Sold | Selling Price | Inventory Units on Hand |\n|  | 2 Jan | 1,000 | $20.00 |  |  | 1,000 |\n|  | 17 Jan |  |  | 500 |  | $50.00, 500 |\n|  | 16 Feb | 1,000 | $18.00 |  |  | 1,500 |\n|  | 3 Mar |  |  | 1,200 |  | $50.00, 300 |\n|  | 13 Mar | 1,000 | $17.00 |  |  | 1,300 |\n|  | 23 Mar |  |  | 500 |  | $50.00, 800 |\n|  | End of quarter totals: | 3,000 | $55,000 | 2,200 |  | $110,000 |\n| Identifying Header | Exhibit 2: | Comparison of Inventory Methods and Models |  |  |  |  |\n|  | End of Quarter Valuations |  |  |  |  |  |\n| 31 March |  | Perpetual LIFO,Periodic LIFO, Perpetual FIFO |  |  |  |  |\n| Sales |  | $110,000 | $110,000 | $110,000 |  |  |\n|  | Ending inventory |  | $16,000 | $13,600 |  |  |\n|  | Cost of goods sold |  | $39,000 | $41,400 |  |  |\n|  | Gross profit |  | $71,000 | $68,600 |  |  |\n|  | Inventory turnover ratio | 279% |  |  |  |  |\n|  | Note: LIFO is last in, first out and FIFO is first in, first out. |  |  |  |  |  |"
        ],
        "topic": "Accounting",
        "output": [
            "To solve this problem, we will use perpetual LIFO (Last-In, First-Out) method to calculate the inventory value at the end of the first quarter. We will sequentially subtract units sold from the most recently purchased inventory and calculate the value of the inventory units on hand accordingly.\n\nAccording to perpetual LIFO, the latest inventory purchased is the first one to be sold. Therefore, we will start by selling units from the inventory purchased on 13 March, then move to 16 February, and lastly to 2 January.\n\nHere's the Python program to calculate the value of the final inventory using continuous LIFO:\n\n```python\ndef solution():\n    # Given data\n    purchases = [\n        {'date': '2 Jan', 'units': 1000, 'price': 20.00},\n        {'date': '16 Feb', 'units': 1000, 'price': 18.00},\n        {'date': '13 Mar', 'units': 1000, 'price': 17.00}\n    ]\n    sales = [\n        {'date': '17 Jan', 'units': 500},\n        {'date': '3 Mar', 'units': 1200},\n        {'date': '23 Mar', 'units': 500}\n    ]\n    \n    inventory_units_on_hand = 300 + 500 # From 23 Mar and end of the quarter\n\n    # Start with the most recent purchase and apply LIFO for units sold\n    for sale in reversed(sales):\n        units_to_deduct = sale['units']\n        while units_to_deduct > 0 and purchases:\n            last_purchase = purchases[-1]\n            if last_purchase['units'] <= units_to_deduct:\n                # Sold all units from the latest purchase\n                units_to_deduct -= last_purchase['units']\n                purchases.pop() # Remove the last purchase as it's fully sold\n            else:\n                # Deduct the sold units from the latest purchase only\n                last_purchase['units'] -= units_to_deduct\n                units_to_deduct = 0\n\n    # Calculate inventory value\n    inventory_value = sum(purchase['units'] * purchase['price'] for purchase in purchases)\n\n    # Accounts for any remaining units in the inventory\n    inventory_value += inventory_units_on_hand * purchases[-1]['price']\n\n    return inventory_value\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines the purchases, sales, and the remaining inventory units at the end of the period, and then applies the LIFO method to come up with the inventory value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-605",
        "question": "Using the multistage RI model for estimating the value of PBRI, John gathers extra data. He predicts a yearly growth rate for residual income of 15% over a prediction range of 5 years (Years 1 to 5) and decides to discount the final year’s residual income as perpetuity. Considering the information in Exhibit 3, what is John's approximation of the contribution that the terminal value of the income stream will make to the present value of equity after five years?",
        "tables": [
            "| Most recent year's net income | $8.0 million | Cost of equity capital | 12.40% |\n|---|---|---|---|\n| Interest expense | $1.2 million | WACC | 10.60% |\n| Equity capital book value | $20.97 million | Tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 8.0e6       # Most recent year's net income in dollars\n    interest_expense = 1.2e6 # Interest expense in dollars\n    equity_capital = 20.97e6 # Equity capital book value in dollars\n    cost_of_equity = 0.124   # Cost of equity capital (12.40%)\n    tax_rate = 0.40          # Tax rate (40%)\n    wacc = 0.106             # WACC (10.60%)\n    growth_rate_short_term = 0.15       # Short-term growth rate of residual income (15%)\n    number_of_years = 5      # Number of years of growth\n    \n    # Calculate residual income (RI)\n    nopat = net_income - (interest_expense * (1 - tax_rate)) # Net operating profit after taxes\n    ri_current = nopat - (equity_capital * cost_of_equity)    # Current residual income\n    \n    # Calculate terminal value of residual income using perpetuity formula at the end of year 5,\n    # no growth perpetuity since considering perpetuity suggests growth at WACC which is a sustainable growth,\n    # and since WACC is assumed to be more than long-term growth rate, we can choose this sustainable long-term\n    # growth rate to be effectively zero for conservative estimation.\n    ri_year_5 = ri_current * (1 + growth_rate_short_term) ** number_of_years # RI at year 5\n    terminal_value = ri_year_5 / cost_of_equity # Terminal value is a perpetuity at year 5\n    \n    # Present value of the terminal value after five years\n    present_value_terminal = terminal_value / ((1 + cost_of_equity) ** number_of_years)\n    \n    return present_value_terminal\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-606",
        "question": "In the previous year, the total worth of end products and services in nation B escalated from $200 billion to $400 billion, with the GDP deflator surging from 120 to 170. Given this situation, by how much did the actual GDP of nation B increase?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's a Python program to calculate the actual GDP increase for nation B:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_nominal_gdp = 200  # in billions\n    final_nominal_gdp = 400  # in billions\n    initial_gdp_deflator = 120\n    final_gdp_deflator = 170\n    \n    # Calculate real GDP for initial and final years\n    initial_real_gdp = (initial_nominal_gdp * 100) / initial_gdp_deflator\n    final_real_gdp = (final_nominal_gdp * 100) / final_gdp_deflator\n    \n    # Calculate the increase in real GDP\n    real_gdp_increase = final_real_gdp - initial_real_gdp\n\n    # return answer\n    return real_gdp_increase\n\n# You can uncomment the following line to test the function\n# print(solution())\n```\n\nRunning this program will return the increased value of the actual GDP (real GDP) for nation B."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-607",
        "question": "What would the YTM be on a zero-coupon, semiannual compound, 10-year bond with a par value of $1,000 that's currently being traded at $366.21?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    par_value = 1000        # Face value of bond\n    current_price = 366.21  # Current market price of bond\n    years_to_maturity = 10  # Years to maturity\n    periods = 2 * years_to_maturity  # Total number of compounding periods (semiannual)\n\n    # Calculate the Yield to Maturity (YTM) using the formula for a zero-coupon bond\n    ytm = ((par_value / current_price) ** (1/periods) - 1) * 2\n    \n    # return answer\n    return ytm\n\n# You can uncomment the next line to test the function, but please remember to comment it before submitting the answer.\n# print(solution())\n```\nThis function calculates the yield to maturity (YTM) of a semiannual compound zero-coupon bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-608",
        "question": "The S&P 500 index currently stands at 1,457, with each futures contract representing 250 times the index. An equity portfolio only long with a market value of USD 300,100,000 has a beta of 1.1. In order to lower the portfolio beta to 0.75, how many S&P futures contracts should be sold?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_index = 1457\n    contract_multiplier = 250\n    portfolio_value = 300100000\n    current_beta = 1.1\n    target_beta = 0.75\n\n    # Portfolio's position in futures needed to achieve the target beta\n    # Delta_beta = Portfolio_beta - Target_beta\n    # Delta_beta = (Portfolio_value / (Futures_price * Contract_multiplier)) * Futures_beta\n    # Delta_beta = Number_of_contracts * Futures_beta \n    # Number_of_contracts = Delta_beta / Futures_beta (since futures have a beta of 1)\n\n    delta_beta = current_beta - target_beta\n    futures_value = current_index * contract_multiplier\n    \n    # Calculate the number of futures contracts needed\n    num_contracts = (delta_beta * portfolio_value) / futures_value\n    \n    # Since we're selling futures, the number should be a whole number and negative\n    # Round up to sell a sufficient amount to achieve the desired beta\n    num_contracts_to_sell = -round(num_contracts)\n\n    # return answer\n    return num_contracts_to_sell\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-609",
        "question": "A financial expert is aiming to determine the worth of a 1-year European call option using the BSM model. He has gathered the following data: the present stock price is $90, the strike price is $75, the risk-free rate calculated through continuous compounding is 4%, and the yearly volatility rate is 20%. What would be the call option's value? N(-1.21) =0.1131; N(-1.01) =0.1562.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nfrom math import log, sqrt, exp\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    S = 90          # current stock price\n    K = 75          # strike price\n    r = 0.04        # risk-free rate (continuous compounding)\n    sigma = 0.20    # volatility (annualized)\n    T = 1           # time to expiration in years\n\n    # Calculating d1 and d2 for the BSM model\n    d1 = (log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * sqrt(T))\n    d2 = d1 - sigma * sqrt(T)\n\n    # Calculating the value of the European call option using the BSM model\n    call_value = (S * norm.cdf(d1)) - (K * exp(-r * T) * norm.cdf(d2))\n\n    # return the call option's value\n    return call_value\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-610",
        "question": "Given that a chart from a credit reporting agency indicates that the count of A-ranked entities that upgraded to AAA is 1, those which advanced to AA were 6, those who maintained at A were 41, those who were demoted to BBB were 2, and those that defaulted were 3. Assuming a fresh entity with an A grade credit score, what is the chance that it will experience a reduction in rating or end up defaulting after one year?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here's a Python program that calculates the probability that a fresh entity with an A-grade credit score will experience a reduction in rating or end up defaulting after one year:\n\n```python\ndef solution():\n    # Define variables name and value\n    # entities that maintained A grade\n    maintained_A = 41\n    # entities that were demoted to BBB or defaulted\n    demoted_BBB = 2\n    defaulted = 3\n    \n    # total entities considered\n    total_entities = maintained_A + demoted_BBB + defaulted + 1 + 6 # Sum of all entities including those upgraded and maintained\n    \n    # Do math calculation to get the answer\n    # Calculate the probability of a downgrade or default\n    downgrade_or_default_probability = (demoted_BBB + defaulted) / total_entities\n    \n    # return answer\n    return downgrade_or_default_probability\n\n# Example usage:\n# prob = solution()\n# print(prob)\n```\n\nWhen you run `solution()`, it will return the probability that an entity will be demoted or default."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-611",
        "question": "What is the value of the Paasche index for the consumption basket of December displayed in Exhibit 1?",
        "tables": [
            "| Date | November 2010 Quantity | November 2010 Price | December 2010 Quantity | December 2010 Price |\n|------|-----------------|-----------------|------------------|------------------|\n| Sugar| 70kg           | £0.90/kg        | 120kg            | £1.00/kg         |\n| Cotton| 60kg           | £0.60/kg        | 50kg             | £0.80/kg         |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define the quantities and prices for November\n    november_quantities = {'sugar': 70, 'cotton': 60}\n    november_prices = {'sugar': 0.90, 'cotton': 0.60}\n\n    # Define the quantities and prices for December\n    december_quantities = {'sugar': 120, 'cotton': 50}\n    december_prices = {'sugar': 1.00, 'cotton': 0.80}\n\n    # Calculate the total value for the December basket at December prices\n    december_value = (december_quantities['sugar'] * december_prices['sugar'] + \n                      december_quantities['cotton'] * december_prices['cotton'])\n\n    # Calculate the total value for the December basket at November prices\n    december_value_at_november_prices = (december_quantities['sugar'] * november_prices['sugar'] + \n                                         december_quantities['cotton'] * november_prices['cotton'])\n\n    # The Paasche index is the ratio of the December basket value at December prices to\n    # the December basket value at November prices, times 100 to get a percentage\n    paasche_index = (december_value / december_value_at_november_prices) * 100\n\n    # Return the Paasche index rounded to two decimal places as per usual convention\n    return round(paasche_index, 2)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-612",
        "question": "If the business boosts its dividend payout proportion to 40% and employs a necessary return of 12.4%, what would be the justified forward P/E ratio based on the compiled information on the business?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the justified forward P/E ratio given the new dividend payout proportion and the required return, we can use the dividend discount model (DDM) for a stable growth firm, using the formula:\n\n$$ P_0 = \\frac{D_0 (1 + g)}{r - g} $$\n\nwhere\n- \\( P_0 \\) is the price of the stock today,\n- \\( D_0 \\) is the dividend per share paid in the most recent period,\n- \\( g \\) is the growth rate of dividends,\n- \\( r \\) is the required return (cost of equity).\n\nThe P/E ratio can then be found by dividing this price by the earnings per share (EPS). The forward P/E ratio uses the forecasted earnings over the next 12 months. Assuming we have or can derive \\( D_0 \\), \\( g \\), and the forward EPS, we can perform the calculation.\n\nIn the absence of specific numbers for dividends, earnings, or growth rates in the problem, we cannot compute an exact number. However, I will provide you with a Python function where you can fill in the missing values once they are known.\n\nHere is a basic structure of the program:\n\n```python\ndef solution():\n    # Define variables name and values\n    dividend_payout_ratio = 0.40  # 40% dividend payout\n    required_return = 0.124  # 12.4% required return\n    # The growth rate (g) and forward earnings (forward_EPS) are unknown.\n    # These values must be provided to complete the calculation.\n    \n    # Assume some placeholder values for dividend and EPS\n    # D0 = dividends per share for the most recent period (unknown)\n    # forward_EPS = forecasted earnings per share over the next 12 months (unknown)\n    g = 0.05  # Placeholder growth rate (5%)\n    D0 = 2.00  # Placeholder dividend per share\n    forward_EPS = 5.00  # Placeholder forward EPS\n    \n    # Calculate the price based on the dividend discount model\n    P0 = (D0 * (1 + g)) / (required_return - g)\n    \n    # Calculate the forward P/E ratio\n    forward_PE_ratio = P0 / forward_EPS\n    \n    # return forward P/E ratio\n    return forward_PE_ratio\n\n# Note: You'll need to replace g, D0, and forward_EPS with actual values to get the real answer.\n```\n\nWithout the actual values for the growth rate, dividends per share, and forward earnings per share, we cannot arrive at a concrete number. Please provide these values or integrate them into the function when they become available."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-613",
        "question": "Johnson requests his research team to generate risk and anticipated return predictions for Funds X, Y, and Z as well as the benchmark, shown in Exhibit 1. Johnson opts to introduce a fourth fund to his group, Fund W, that will utilize the same benchmark embedded in Exhibit 1. Given the information from Exhibit 1, what would be the Sharpe ratio if Fund W, which Johnson estimates to have an information ratio of 0.35, is merged with a fund that mimics the benchmark?",
        "tables": [
            "|                   | Fund X | Fund Y | Fund Z | Benchmark |\n|-------------------|--------|--------|--------|-----------|\n| Sharpe ratio (SR) | 0.45   | 0.50   | 0.49   | 0.44      |\nNote: Data are based on a risk-free rate of 2.3%."
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To solve this question, we need to understand the relationship between the Sharpe ratio of a portfolio and the Information ratio of a fund relative to its benchmark. However, the provided information is not sufficient for a clear-cut mathematical solution because the Sharpe ratio of a combined portfolio depends on the weight of the two components (Fund W and the fund that mimics the benchmark), as well as their individual returns and standard deviations, none of which are provided.\n\nGiven the limitation of the information provided, we cannot directly calculate the Sharpe ratio of Fund W merged with the benchmark fund. If Johnson is merging Fund W with a fund that exactly mimics the benchmark, one could assume that the Sharpe ratio of the resulting fund would be very close to the benchmark itself since Fund W has a lower Sharpe ratio. However, this is an approximation and does not take into account the proportions of the blend.\n\nIn financial theory, the Information Ratio is a measure of the active return of an investment relative to a benchmark, divided by the active risk of that investment relative to the benchmark. In this case, we don't have the active return, active risk, or even the standard deviation of the fund returns, so a precise Sharpe ratio calculation seems impossible with the given data.\n\nGiven this information, there's no mathematical solution that can be represented as a Python program to accurately calculate the Sharpe ratio of Fund W merged with a fund that mimics the benchmark using the provided data.\n\nHowever, if we assume that Fund W has the same expected return and volatility as the benchmark (thus mimicking the benchmark) and then it is combined with itself, theoretically, the Sharpe ratio would remain unchanged. In that specific case, it would be the same as that of the benchmark. But note that the information ratio provided for Fund W is not directly useful for calculating the Sharpe ratio of the combined fund without additional data.\n\nLet's put the logical assumption in a Python program framework:\n\n```python\ndef solution():\n    # Assume Fund W, when merged with a fund that mimics the benchmark,\n    # would have roughly the same Sharpe ratio as the benchmark itself.\n    # This is an assumption made for a problem that does not provide enough data.\n    \n    # The Sharpe ratio of the benchmark\n    benchmark_sharpe_ratio = 0.44\n    \n    # The Information Ratio of Fund W (not used in calculation, provided for completeness)\n    fund_w_information_ratio = 0.35\n    \n    # We return the benchmark Sharpe ratio as the expected Sharpe ratio\n    # for a merger of Fund W with a fund mimicking the benchmark:\n    answer = benchmark_sharpe_ratio\n    \n    # return answer\n    return answer\n```\n\nPlease note that this solution is highly theoretical and based on the assumption that the combined fund's characteristics do not stray from those of the benchmark; in practice, this might not be the case."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-614",
        "question": "The debt-to-asset ratio is: total liabilities: $200 short term debt: $10 long-term debt: $100 total equity: $300.",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 200  # Total liabilities in currency units\n    short_term_debt = 10     # Short term debt in currency units\n    long_term_debt = 100     # Long term debt in currency units\n    total_assets = short_term_debt + long_term_debt  # Assuming total liabilities consist of debts only\n    \n    # Do math calculation to get the answer\n    debt_to_asset_ratio = total_liabilities / total_assets\n    \n    # return answer\n    return debt_to_asset_ratio\n\n# The function can be called and it will return the debt-to-asset ratio\n# print(solution())\n```\nPlease note that to get the debt-to-asset ratio, you only need the total liabilities and total assets. If the total assets are not provided directly, in this case, we need to infer from the information given. If the total liabilities are composed of short-term and long-term debts only, then the total assets would be the sum of these debts. However, typically, total assets also include equity and other assets, and the initial data provided in the question is not enough to calculate total assets correctly. Assuming this, the above program would only be correct if total liabilities equaled the sum of short-term and long-term debt, and there were no other components to liabilities or assets. Otherwise, the program would require additional information and modifications to account for comprehensive assets and liabilities."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-615",
        "question": "A financial advisor is determining the beta of a collection of large-cap industrial firm shares. The advisor establishes that the correlation between the returns from the collection and the returns from its reference point is 0.8, the fluctuation of collection returns is 5%, and the fluctuation of the reference point is 4%. What is the beta of the collection in relation to the reference point?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define given variables\n    correlation = 0.8\n    volatility_collection = 0.05\n    volatility_reference = 0.04\n    \n    # Calculate beta using the formula beta = correlation * (volatility of collection / volatility of reference)\n    beta = correlation * (volatility_collection / volatility_reference)\n    \n    # return beta\n    return beta\n\n# You can call the function to check the value\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-616",
        "question": "A researcher collected the following data from a corporation's 2010 financial reports (in $ millions): In 2010, the corporation declared and dispersed cash dividends of $10 million, and logged a depreciation expense of $25 million. The corporation classifies dividends paid as a financing activity. What was the corporation’s 2010 operational cash flow (in $ millions)?",
        "tables": [
            "| Balances as of Year Ended 31 December | 2009 | 2010 |\n| ------------------------------------- | ---- | ---- |\n| Retained earnings                     | 120  | 145  |\n| Accounts receivable                   | 38   | 43   |\n| Inventory                             | 45   | 48   |\n| Accounts payable                      | 36   | 29   |"
        ],
        "topic": "Accounting",
        "output": [
            "To find the corporation's 2010 operational cash flow, we would typically start with the net income and adjust for non-cash expenses and changes in working capital. Unfortunately, net income is not provided, but we can deduce it from the change in retained earnings, and then adjust for the given items.\n\nHere's what we know:\n1. Change in retained earnings from 2009 to 2010 = $145M - $120M = $25M\n2. Dividends paid (which reduce retained earnings) = $10M\n3. Depreciation expense (non-cash, which increases operating cash flow) = $25M\n4. Change in accounts receivable (subtract increase, as it reduces operating cash flow) = $43M - $38M = $5M\n5. Change in inventory (subtract increase, as it reduces operating cash flow) = $48M - $45M = $3M\n6. Change in accounts payable (add increase, as it increases operating cash flow) = $29M -$36M = -$7M\n\nNet income can be deduced by adding the change in retained earnings and the dividends paid back, since dividends paid are subtracted after net income to arrive at retained earnings.\n\nHere's how the program would look:\n\n```python\ndef solution():\n    # Define variables name and value\n    change_in_retained_earnings = 145 - 120\n    dividends_paid = 10\n    depreciation_expense = 25\n    change_in_receivables = 43 - 38\n    change_in_inventory = 48 - 45\n    change_in_payables = 29 - 36\n    \n    # Deduce net income by adjusting the change in retained earnings\n    net_income = change_in_retained_earnings + dividends_paid\n    \n    # Calculate operational cash flow\n    operational_cash_flow = (net_income\n                             + depreciation_expense\n                             - change_in_receivables\n                             - change_in_inventory\n                             - change_in_payables)\n    \n    # return answer\n    return operational_cash_flow\n\n# Test the function\nprint(solution())\n```\n\nThis program defines the knowns, deduces net income, and adjusts it with the non-cash expenses and changes in working capital components to find the operating cash flow for the corporation in 2010. Remember, this is a simplified view assuming that the only adjustments needed are those explicitly mentioned. In a real corporate finance analysis, there might be other adjustments necessary based on the full financial data provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-617",
        "question": "Suppose that the price of a bond over the next two periods is detailed below. The starting value of the bond is $100. The likelihood of a rise in any given period is 40% and the chance of a fall in any given period is 60%. If we apply the binomial model, what is the likelihood that the bond's price will reach $101.20 after two periods?",
        "tables": [
            "| - |  Time=0 | Time=1 | Time=2 |\n|---|:---:|:---:|:---:|\n| - | S0=100 | Su=110 | Suu=121 |\n| - |-| Sd=92 | Sud,du=101.20 |\n| - |-| - | Sdd=84.64 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\nfrom math import factorial\n\ndef solution():\n    # Define variables name and value\n    p_rise = 0.40  # Probability of rise\n    p_fall = 0.60  # Probability of fall\n\n    # The binomial probability formula to calculate the likelihood\n    # of k successes (rises) in n trials (periods) is given by:\n    # P(k; n, p) = C(n, k) * p^k * (1-p)^(n-k)\n    # where C(n, k) = n! / (k! * (n-k)!)\n    \n    # Since we are looking for the probability that the bond's price reaches \n    # $101.20 after two periods, we need to find the probability of having \n    # one rise (k=1) and one fall (n-k=1) in two periods (n=2).\n\n    # Number of periods (n)\n    n = 2\n    # Number of rises (k) to reach $101.20 is 1\n    k = 1\n    \n    # Calculate binomial coefficient C(n, k) using factorials\n    binom_coeff = factorial(n) / (factorial(k) * factorial(n - k))\n\n    # Calculate the probability of exactly one rise in two periods\n    probability_reach_101_20 = binom_coeff * (p_rise ** k) * (p_fall ** (n - k))\n    \n    # return answer\n    return probability_reach_101_20\n\n# The following statement can be used to test or get the result of the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-618",
        "question": "XYZ is a wealth management firm based in France. They have made an investment of $10 million in E Corporation's senior unsecured bond with a term of 10 years. Due to concerns of a potential default by E Corp, XYZ purchased a credit default swap (CDS) on E corp valued at $10 million with a designated coupon rate of 5%. After three months, E Corp goes bankrupt, resulting in a variety of activated CDS contracts. Consequently, XYZ examines the credit quality of the corporate bond they invested and the CDS's value on that bond. Here's some information on the current market status of E Corporation's bonds: Bond 1 is a 5-year senior unsecured bond trading at 40% of par, Bond 2 is a 10-year senior unsecured bond trading at 50% of par. Bond 3 is a 6-year subordinated unsecured bond trading at 30% of par. Based on these details, what is the cheapest",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "It seems the question was cut off unexpectedly. Based on the given statement, you asked me to calculate the cheapest-to-deliver (CTD) bond of E Corporation for XYZ's credit default swap. The CTD bond option is usually the one that will cost the protection seller the least to deliver in the event of a credit event. When evaluating CTD bonds for CDS contracts, investors usually analyze the difference between the market price and the notional value (par value), as well as the ranking of the bond (senior, subordinated). The bond that costs the least to deliver (i.e., gives the highest loss given default) is considered the CTD.\n\nFrom the details provided, I'll calculate the CTD bond among the three bonds mentioned:\n\n- Bond 1's price is 40% of par value.\n- Bond 2's price is 50% of par value.\n- Bond 3's price is 30% of par value.\n\nFor simplicity, let's assume the par value of each bond is $100 (no specific par value is mentioned in the scenario). In a real-world scenario, you would use the actual par value of your investment ($10 million in the given context). However, since we are just computing which bond is cheaper to deliver, we can normalize to $100 for simplicity.\n\nHere is the Python program for the calculation:\n\n```python\ndef solution():\n    # Define the market prices and par value for each bond\n    bond_prices = {\n        \"Bond 1\": 0.40,  # 40% of par\n        \"Bond 2\": 0.50,  # 50% of par\n        \"Bond 3\": 0.30   # 30% of par\n    }\n    par_value = 100  # Assumed par value for calculation\n    \n    # Calculate the CTD bond by finding the bond with the lowest price\n    ctd_bond = min(bond_prices, key=bond_prices.get)\n    \n    # Return the name of the CTD bond\n    return ctd_bond\n\n# Call the function and print the answer for demonstration\nprint(solution())\n```\n\nThe above program will return the name of the bond that is the cheapest to deliver. It uses a dictionary to map the bond names to their market prices as a percentage of par and then finds the one with the minimum price using the `min()` function with `key=bond_prices.get` to fetch the prices."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-619",
        "question": "At the start of the year, XYZ Inc. bought a new machinery for its production process. The machine was priced at $25,000. It is anticipated to have a 4-year lifespan and then be resold for $4,000. Using the double-declining-balance method, what's the depreciation cost to be accounted for in the second year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 25000\n    salvage_value = 4000\n    lifespan = 4\n    \n    # Calculate depreciation rate using double-declining-balance method\n    depreciation_rate = 2.0 / lifespan\n    \n    # First year depreciation\n    first_year_depreciation = original_cost * depreciation_rate\n    \n    # Book value at the beginning of the second year\n    book_value_beginning_second_year = original_cost - first_year_depreciation\n    \n    # Second year depreciation\n    second_year_depreciation = book_value_beginning_second_year * depreciation_rate\n    \n    # return the second year depreciation answer\n    return second_year_depreciation\n    \n# Call the function and print the result for checking\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-620",
        "question": "What is the yearly return for a trader who has managed a return of 5% over a six-week span?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's a Python program that calculates the yearly return for a trader who has managed a return of 5% over a six-week span, assuming that the return compounds weekly:\n\n```python\ndef solution():\n    # Define variables name and value\n    weekly_return = 0.05 # 5% return over a six-week span\n    weeks_in_a_year = 52\n    weeks_in_six_weeks = 6\n    \n    # Calculate the effective weekly return rate to be used for compound interest\n    effective_weekly_return = (1 + weekly_return) ** (1 / weeks_in_six_weeks) - 1\n    \n    # Calculate the yearly return using the compound interest formula\n    yearly_return = (1 + effective_weekly_return) ** weeks_in_a_year - 1\n    \n    # return answer\n    return yearly_return\n\n# You can call the function and print the result to test it\n# print(solution())\n```\n\nThe program defines a 5% return over six weeks and uses the concept of compound interest to calculate the return over a weekly period, which is then extrapolated to the entire year. It assumes that the return compounds weekly, which may not strictly reflect reality as market returns can vary and are not guaranteed to compound in such a predictable manner. Also, it's important to note that actual trading would involve transaction fees, taxes, and other factors that could significantly alter the results."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-621",
        "question": "In February 2007, you are investigating a theoretical company called Davis Global that experiences seasonal demand for its offerings. On 2 February 2007, Davis shares ended at $57.98. You believe that the period from 2003 through 2006 provides a fair representation of average earnings. When determining normalized EPS, we can consider the approach of historical average EPS or the average ROE method, so what is the difference in PE calculated using these two methods?",
        "tables": [
            "| Measure     | 2007   | 2006   | 2005  | 2004  | 2003  |\n|-------------|--------|--------|-------|-------|-------|\n| EPS         | $3.03  | $1.45  | $0.23 | $2.13 | $2.55 |\n| BV per share| $19.20 | $16.21 | $14.52| $13.17| $11.84|\n| ROE         | 16.0%  | 8.9%   | 1.6%  | 16.3% | 21.8% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To answer the question, we need to calculate the normalized EPS using both the historical average EPS method and the average ROE method, then compute the PE ratios for each calculation.\n\nNormalized EPS using historical average EPS is the average of the EPS values provided for the years 2003 to 2006.\n\nNormalized EPS using average ROE is calculated by taking the average of the ROE values provided for the years 2003 to 2006 and then applying this average ROE to the most recent book value per share, which is the 2006 value.\n\nLet's write the program:\n\n```python\ndef calculate_normalized_eps_hist_average(eps_values):\n    return sum(eps_values) / len(eps_values)\n\ndef calculate_normalized_eps_average_roe(roe_values, recent_bv_per_share):\n    average_roe = sum(roe_values) / len(roe_values)\n    return recent_bv_per_share * average_roe\n\ndef solution():\n    # Define variables name and value\n    historical_eps = [2.55, 2.13, 0.23, 1.45]  # 2003 to 2006 EPS values\n    historical_roe = [0.218, 0.163, 0.016, 0.089]  # Converted ROE to decimal\n    recent_bv_per_share = 16.21  # 2006 BV per share\n    share_price = 57.98  # Price of the share\n    \n    # Calculate normalized EPS using historical average EPS\n    normalized_eps_hist_avg = calculate_normalized_eps_hist_average(historical_eps)\n    \n    # Calculate normalized EPS using average ROE\n    normalized_eps_avg_roe = calculate_normalized_eps_average_roe(historical_roe, recent_bv_per_share)\n    \n    # Calculate PE using historical average EPS\n    pe_hist_avg = share_price / normalized_eps_hist_avg\n    \n    # Calculate PE using average ROE EPS\n    pe_avg_roe = share_price / normalized_eps_avg_roe\n    \n    # Calculate the difference in PE\n    difference_in_pe = pe_avg_roe - pe_hist_avg\n\n    # return answer\n    return difference_in_pe\n\n# You can print out the result or assign it to a variable:\ndifference = solution()\nprint(f\"The difference in PE calculated using the two methods is: {difference:.2f}\")\n```\n\nThis Python program calculates the difference in PE ratios using the two different methods for normalizing EPS, which provides the answer to the question."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-622",
        "question": "An executive agreed to sell an equity forward contract four weeks ago. The contract is set to mature in three months. A profit of $1 will be provided one month prior to the expiry of the contract. The risk-free rate is 3% and is compounded yearly. The existing spot price of the underlying is $56, while the initial forward price was set at $60. What is the value of the executive’s position?\n",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To determine the value of the executive's forward contract position, we will need to take into account the current spot price of the underlying asset, the initial forward price agreed upon, the risk-free rate, the time to maturity, and the profit realized before the expiration of the contract. Here's how we can compute this:\n\n```python\ndef solution():\n    # Define variables\n    risk_free_rate = 0.03 # Risk-free rate of 3%\n    time_to_maturity = 2 / 12 # Maturity is in two months since one month has passed and the contract is to mature in three months.\n    spot_price = 56 # Current spot price\n    initial_forward_price = 60 # Initial forward price\n    profit = 1 # Profit to be received one month prior to expiry\n\n    # Calculate the present value of the profit\n    discount_factor_profit = (1 + risk_free_rate) ** (-1 / 6) # Discounting for one month\n    present_value_profit = profit * discount_factor_profit\n\n    # Calculate the forward price today\n    forward_price_today = spot_price * (1 + risk_free_rate) ** (time_to_maturity)\n\n    # Calculate the value of the forward contract\n    value_of_position = forward_price_today - initial_forward_price + present_value_profit\n\n    return value_of_position\n\n# Call to solution function to get the value of the executive's position\nvalue = solution()\nprint(f\"The value of the executive's forward contract position is: {value}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-623",
        "question": "A 12-month zero-coupon bond offers a return of 4.0%. The yields for the 24-month and 36-month zero-coupon bonds are 5.0% and 6.0% respectively. What would be the interest rate for a 12-month loan starting in a year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To solve for the forward interest rate, we can use the relationship between the yields of different zero-coupon bonds given by the general formula for forward rates:\n\nLet's denote r1 as the 12-month rate, r2 as the 24-month rate, and r3 as the 36-month rate.\n\nFor zero-coupon bonds:\n- The amount that would grow to 1 dollar in 12 months with the 12-month rate (r1) is: 1 / (1 + r1).\n- The amount that would grow to 1 dollar in 24 months with the 24-month rate (r2) is: 1 / (1 + r2) squared.\n- The amount that would grow to 1 dollar in 36 months with the 36-month rate (r3) is: 1 / (1 + r3) cubed.\n\nThe relationship between these rates is such that the return on investing in two successive 12-month bonds (one starting now, and the next starting in a year) should be equivalent to investing in a single 24-month bond due to the absence of arbitrage opportunities.\n\nLet's calculate the 12-month forward rate, starting in one year, denoted as f(1,1):\n\n(1 + r1) * (1 + f(1,1)) should be equal to (1 + r2) squared.\n\nSolving for f(1,1), we get:\n\nf(1,1) = ((1 + r2) squared / (1 + r1)) - 1\n\nNow, let's implement this into the Python function:\n\n```python\ndef solution():\n    # Define interest rates based on annual percentage rates\n    r1 = 0.04 # 12-month bond yield\n    r2 = 0.05 # 24-month bond yield\n    \n    # Calculate the 12-month forward rate starting in one year\n    forward_rate = ((1 + r2)**2 / (1 + r1)) - 1\n    \n    # Convert the forward rate to percentage\n    forward_rate_percentage = forward_rate * 100\n    \n    # return answer rounded to two decimal points\n    return round(forward_rate_percentage, 2)\n```\n\nThis function calculates and returns the effective annual rate for a 12-month loan starting in one year based on the given yields."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-624",
        "question": "What is the highest Sharpe ratio achievable by a fund manager when merging the S&P 500 benchmark portfolio and the Indigo Fund?",
        "tables": [
            "|                    | S&P 500 | Indigo Fund |\n|--------------------|---------|-------------|\n| Expected annual return | 9.0%    | 10.5%      |\n| Return standard deviation | 18.0%  | 25.0%      |\n| Sharpe ratio | 0.333   | 0.30       |\n| Active return |         | 1.2%       |\n| Active risk |           | 8.0%       |\n| Information ratio |     | 0.15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "To calculate the highest Sharpe ratio achievable by a fund manager when merging the S&P 500 benchmark portfolio and the Indigo Fund, we apply the concept of portfolio construction, especially the combination of two assets.\n\nThe Sharpe ratio is calculated as the expected return of the portfolio minus the risk-free rate, all divided by the standard deviation of the portfolio's excess return (we assume risk-free rate is zero for simplification).\n\nThe Sharpe ratio for a combined portfolio of two assets can be maximized when we adjust the weights of each asset to find the maximum Sharpe ratio, it depends on the correlation between the two assets. However, the correlation is not given directly in the data provided.\n\nWithout the correlation information, we cannot perform an exact optimization. However, if we assume perfect correlation (which is not realistic in practice), the combined asset with the maximum Sharpe ratio will simply be the one with the highest individual Sharpe ratio.\n\nHere's the Python program to find the highest Sharpe ratio given the data:\n\n```python\ndef solution():\n    # Define Sharpe ratios for each fund\n    sharpe_sp500 = 0.333\n    sharpe_indigo = 0.30\n\n    # Since the correlation is not provided, we assume that the combined portfolio cannot have a higher Sharpe ratio\n    # than the highest individual Sharpe ratio.\n    highest_sharpe = max(sharpe_sp500, sharpe_indigo)\n\n    # return the highest Sharpe ratio\n    return highest_sharpe\n\n# Calling the function to get the result\nresult = solution()\n```\n\nAgain, keep in mind that in a real-world scenario, the maximum Sharpe ratio of a combined portfolio does depend on the correlation between the assets, which is not provided here. The code is using a simplification given the data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-625",
        "question": "What is the value of an account that a shareholder has deposited ￡2,000 into if it pays 6% per annum compounded continuously after four years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the future value of the account using the formula for continuous compounding:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    principal = 2000  # Initial amount deposited\n    rate = 0.06       # Annual interest rate in decimal form\n    time = 4          # Time in years\n    \n    # Do math calculation to get the answer\n    amount = principal * math.exp(rate * time)\n    \n    # return answer\n    return amount\n\n# Call to the solution function can be made to check the answer or in actual program flow,\n# it could be called and assigned to a variable or used directly based on the context.\nprint(solution())\n```\n\nThis function will output the future value of the account after 4 years with continuous compounding at a rate of 6% per annum."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-626",
        "question": "If the consultancy firm, Blue Street Inc, announced total revenues of $100 million, total expenses of $80 million, and net income of $20 million in the last year, and if accounts receivable rose by $10 million, what amount of cash was received by the firm from clients?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program to determine the amount of cash received by Blue Street Inc from clients based on the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 100_000_000\n    net_income = 20_000_000\n    increase_in_receivables = 10_000_000\n\n    # Cash received is the revenue - increase in accounts receivable\n    cash_received_from_clients = total_revenue - increase_in_receivables\n    \n    # return answer\n    return cash_received_from_clients\n\n# You can call the function and print the result\n# print(solution())  # Uncomment this line to test\n```\nWhen you call the function `solution()`, it will return the amount of cash received by Blue Street Inc from clients."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-627",
        "question": "In China, there's an education business known as PZ Corporation which adheres to IFRS. As of 2018, the corporation had a 15% non-controlling equity stake in T-web Corporation. The executives at PZ decided to boost the company’s stake in T-web to 50% through a straight cash buy on 1st January 2019, with no transactions between the companies. The table provided includes the financial statement details of both PZ and T-web corporations. Could you please compute the consolidated sales for 2019 for PZ corporation, after gaining control over T-web company:",
        "tables": [
            "|                         | 2018 | 2019 |\n|-------------------------|------|------|\n| Revenue                 | 5,000| 7,000|\n| Cost                    | 2,000| 2,300|\n| Operating income        | 3,000| 4,700|\n| Net profit              | 1,650| 2,300|\n| Total assets            | 4,000| 6,000|\n| Total liabilities       | 1,200| 900  |\n| Equity                  | 2,800| 5,100|",
            "|                        | 2018  | 2019  |\n| ---------------------- |:-----:| -----:|\n| Revenue                | 2,000 | 2,500 |\n| Cost                   | 1,200 | 1,300 |\n| Operating income       | 800   | 1,200 |\n| Net profit             | 460   | 820   |\n| Dividends paid         | 230   | 410   |\n| Total assets           | 1,000 | 1,100 |\n| Total liabilities      | 600   | 650   |\n| Equity                 | 400   | 450   |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # PZ Corporation sales for 2019\n    pz_sales_2019 = 7000\n    \n    # PZ Corporation had a 50% stake in T-web Corporation for 2019\n    # We consider 100% of T-web Corporation sales since PZ got control (more than 50% stake)\n    tweb_sales_2019 = 2500\n    \n    # Do math calculation to get the answer\n    # Consolidated sales is the sum of PZ Corporation sales and T-web Corporation sales (after gaining control)\n    consolidated_sales_2019 = pz_sales_2019 + tweb_sales_2019\n    \n    # return answer\n    return consolidated_sales_2019\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-628",
        "question": "A private equity fund employs the individual transaction approach to allot carried interest (20% of profit) to its managing partner. The managing partner put in $10 million in an enterprise three years back and exited with $23 million. What is the share available for the passive investors of the said investment?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    managing_partner_investment = 10000000\n    exit_value = 23000000\n    carried_interest_rate = 0.20\n\n    # Calculate the profit\n    profit = exit_value - managing_partner_investment\n    \n    # Calculate carried interest for the managing partner\n    carried_interest = profit * carried_interest_rate\n\n    # Share for passive investors is the remaining profit after subtracting carried interest\n    passive_investors_share = profit - carried_interest\n    \n    # return answer\n    return passive_investors_share\n\n# You can uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-629",
        "question": "What will be the fourth quintile number of the series 1-10?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program to calculate the fourth quintile (80th percentile) of the series 1-10:\n\n```python\nimport numpy as np\n\ndef solution():\n    # Define the series 1-10\n    series = np.arange(1, 11)\n    \n    # Calculate the fourth quintile\n    fourth_quintile = np.percentile(series, 80)\n    \n    # return the answer\n    return fourth_quintile\n\n# Uncomment the line below to test the function\n# print(solution())\n```\n\nTo find the fourth quintile, we use the numpy library's `percentile` function, which calculates the nth percentile of a given series. In this case, we are looking for the 80th percentile because the fourth quintile corresponds to the 80% mark in a dataset."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-630",
        "question": "In early 2013, corporation X released 5-year bonds with a face value of $2,000,000. Given a market interest rate of 6%, these bonds are set to pay a 7% coupon every 31st of December. What would the bonds payable amount to at the time they were issued?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Certainly! To calculate the bonds payable at the time they were issued, one needs to discount the future cash flows of the bond (coupon payments and face value) back to their present value using the market interest rate. This is because bonds are typically sold at a premium or discount based on the difference between the coupon rate and the market rate.\n\nGiven that the bond has a face value of $2,000,000, a coupon rate of 7%, a market interest rate of 6%, and a term of 5 years with annual coupon payments, we can calculate the present value of the bond's cash flows as follows:\n\n1. The present value of the annuity of coupon payments.\n2. The present value of the face value of the bonds.\n\nHere's the Python program to calculate the present value of the bond's cash flows and hence the amount the bonds were payable at:\n\n```python\n# Import package for financial calculations\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    market_rate = 0.06\n    coupon_rate = 0.07\n    years = 5\n\n    # Annual coupon payment\n    coupon_payment = face_value * coupon_rate\n    # Present value of all the coupon payments using numpy_financial's .pv function\n    present_value_coupons = npf.pv(rate=market_rate, nper=years, pmt=-coupon_payment, fv=0)\n\n    # Present value of the face value paid at the end of the bond's term\n    present_value_face_value = npf.pv(rate=market_rate, nper=years, pmt=0, fv=-face_value)\n\n    # The bonds payable amount is the sum of the present value of the coupons and face value\n    bonds_payable = present_value_coupons + present_value_face_value\n\n    # return answer\n    return round(bonds_payable)\n\n# Call the function and print the result\nprint(solution())\n```\n\nPlease ensure you have `numpy_financial` installed in your Python environment. You can install it using pip if necessary:\n\n```shell\npip install numpy-financial\n```\n\nThe function `solution()` calculates the present value of the bond by summing the present value of the coupon payments and the face value and returns this as the bonds payable amount."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-631",
        "question": "The private equity portfolio had a net asset value of $120m at the close of 2019 with all capital called upon. The portfolio predicts a distribution payment of 20% by the conclusion of 2020. The portfolio's net asset value is projected to grow 10% before distribution. What is the projected net asset value after distribution at the end of 2020?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_nav = 120000000 # net asset value at the close of 2019\n    growth_rate = 0.10 # projected growth rate\n    distribution_rate = 0.20 # projected distribution rate\n    \n    # Calculate the net asset value before distribution\n    nav_before_distribution = initial_nav * (1 + growth_rate)\n    \n    # Calculate the distribution amount\n    distribution_amount = nav_before_distribution * distribution_rate\n    \n    # Calculate the net asset value after distribution\n    projected_nav_after_distribution = nav_before_distribution - distribution_amount\n    \n    # return answer\n    return projected_nav_after_distribution\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-632",
        "question": "In the spot market, the present exchange rate for EUR/USD is 0.8615. In the forward market, the EUR/USD rate for the next 90 days is indicated as +13.5 points. Can you tell me the forward rate for EUR/USD over the next 90 days?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 0.8615\n    forward_points = 0.00135  # 13.5 points are equal to 0.00135\n    \n    # Do math calculation to get the forward rate\n    forward_rate = spot_rate + forward_points\n    \n    # return answer\n    return forward_rate\n    \n# Note: To use this program, simply call the function solution()\n# The function will return the forward rate for EUR/USD for the next 90 days.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-633",
        "question": "Jacob, a US-based financier, is thinking about purchasing a common stock with a yearly dividend of $2.5. This dividend is predicted to increase at a yearly rate of 5%. If the expected return rate of investors is 8%, what would be the inherent worth of the stock?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the inherent worth of the stock using the Dividend Growth Model, also known as the Gordon Growth Model, which is used to determine the intrinsic value of a stock based on a future series of dividends that grow at a constant rate. \n\nAccording to the model, the price of the stock (P) is equal to the dividend per share for the next year (D1), divided by the discount rate (r) minus the dividend growth rate (g).\n\n```python\ndef solution():\n    # Define variables name and value\n    D0 = 2.5  # Dividend at the end of this year\n    g = 0.05  # Growth rate\n    r = 0.08  # Expected return rate\n    \n    # Do math calculation to get the answer\n    # Calculation of the stock's price using Dividend Growth Model\n    D1 = D0 * (1 + g)            # Dividend for the next year\n    stock_price = D1 / (r - g)   # Intrinsic value of the stock\n    \n    # return answer\n    return stock_price\n    \n# Function call\nprint(solution())\n```\n\nRun this program to find out the intrinsic worth of the stock, given the parameters."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-634",
        "question": "A corporation decided to trade a truck that it had bought three years prior for a piece of land owned by a different corporation. The following chart includes details about both items: The financial statement for the corporation that is getting rid of the truck is most likely going to report a loss of:",
        "tables": [
            "| | Truck* | Land** |\n| --- | --- | --- | \n| Original cost | $57,000 | $18,000 |\n| Estimated  life | 8 years | |\n| Estimated salvage value at purchase | $15,000 | |\n| Depreciation method | Declining balance, 20% per year | |\n| Current fair value of item | $27,000 | $21,000 |\n\n\\* The last sale of a similar truck by the company occurred more than six months ago.\n\n\\*\\* The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables for the truck\n    original_cost_truck = 57000\n    estimated_life_truck = 8\n    salvage_value_truck = 15000\n    depreciation_rate_truck = 0.20 # Declining balance depreciation\n    current_fair_value_truck = 27000\n    years_passed = 3\n\n    # Calculate the book value of the truck after 3 years of depreciation\n    # Declining balance method: Each year, we depreciate 20% of the starting book value\n    # straight_line_depreciation = (original_cost_truck - salvage_value_truck) / estimated_life_truck\n    \n    # Book value calculation at start\n    book_value_start = original_cost_truck\n    accumulated_depreciation = 0\n\n    # Loop for each passed year to calculate accumulated depreciation\n    for _ in range(years_passed):\n        year_depreciation = book_value_start * depreciation_rate_truck\n        accumulated_depreciation += year_depreciation\n        book_value_start -= year_depreciation\n\n    book_value_end = original_cost_truck - accumulated_depreciation\n\n    # Truck's book value just before the trade\n    book_value_truck_before_trade = book_value_end\n\n    # Loss on the trade is the difference between the book value and the fair value\n    loss_on_trade = book_value_truck_before_trade - current_fair_value_truck\n    \n    # return the loss on trade (answer)\n    return loss_on_trade\n\n# Execute the function and print the result\nprint(f\"The loss on the trade of the truck is: ${solution()}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-635",
        "question": "Assuming an investment manager constructs this portfolio, and the covariance of returns for the two securities involved is -0.0240, what is the projected standard deviation of the portfolio?",
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n| ---      | ---                | ---                           |\n| 1        | 30                 | 20                            |\n| 2        | 70                 | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_1 = 0.30  # Security 1's weight\n    weight_2 = 0.70  # Security 2's weight\n    std_dev_1 = 0.20  # Security 1's standard deviation\n    std_dev_2 = 0.12  # Security 2's standard deviation\n    covariance = -0.024  # Covariance of returns for the two securities\n    \n    # Calculate the portfolio standard deviation\n    portfolio_variance = (weight_1 * std_dev_1)**2 + \\\n                         (weight_2 * std_dev_2)**2 + \\\n                         2 * weight_1 * weight_2 * covariance\n    portfolio_std_dev = math.sqrt(portfolio_variance)\n    \n    # return the standard deviation of the portfolio\n    return portfolio_std_dev\n\n# You can print out the result to check\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-636",
        "question": "A specialist working on the stable-income trade desk noticed that the annual number of defaults in the bond portfolio adheres to a Poisson process. The mean number of defaults is four every year. Given that defaults are independent, what are the odds that there will be a maximum of one default in the coming year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program that calculates the probability of having a maximum of one default in the coming year. We will use the Poisson distribution formula for P(X = k) = (e^(-λ) * λ^k) / k!, where λ is the mean number of defaults, which is 4 in this case. Since we need to calculate the probability of having at most one default, we will consider P(X = 0) + P(X = 1).\n\n```python\nfrom math import exp, factorial\n\ndef solution():\n    # Define lambda (mean number of defaults)\n    lambda_defaults = 4\n    \n    # Calculate P(X = 0) using the Poisson formula, where k = 0\n    p_0_defaults = exp(-lambda_defaults) * (lambda_defaults ** 0) / factorial(0)\n    \n    # Calculate P(X = 1) using the Poisson formula, where k = 1\n    p_1_default = exp(-lambda_defaults) * (lambda_defaults ** 1) / factorial(1)\n    \n    # Calculate the probability of having at most one default\n    probability_at_most_one = p_0_defaults + p_1_default\n    \n    # return answer\n    return probability_at_most_one\n\n# This line is for your convenience, so you can directly run the script \n# to test the function works as expected. You can remove it when the \n# function is ready for evaluation.\nprint(solution())\n```\n\nThis program will return the summed probability of having 0 or 1 default based on the Poisson distribution."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-637",
        "question": "Three months ago, a supervisor agreed to a receive-fixed and pay-equity swap. The yearly fixed rate was set at 3% and the equity index was 100 at the time the swap was made. The swap will mature in one year and has a quarterly reset, and nominal amount of $100 million. The value of the swap is up for evaluation, assuming the equity index is now 101 and the current spot rates are provided:",
        "tables": [
            "| Years to maturity | Present Value Factor |\n|------------------|---------------------|\n| 0.25                 | 0.997506               |\n| 0.5                  | 0.992556               |\n| 0.75                | 0.985222               |\n| 1                     | 0.975610               |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given values\n    fixed_rate = 0.03\n    nominal_amount = 100_000_000\n    present_value_factors = {\n        0.25: 0.997506,\n        0.5: 0.992556,\n        0.75: 0.985222,\n        1: 0.975610\n    }\n    initial_equity_index = 100\n    current_equity_index = 101\n    \n    # Quarterly fixed rate payment\n    quarterly_fixed_payment = nominal_amount * (fixed_rate / 4)\n    \n    # Calculate the present value of these fixed payments\n    pv_fixed_payments = 0\n    for quarter in range(1, 5):\n        pv_fixed_payments += quarterly_fixed_payment * present_value_factors[quarter / 4]\n    \n    # Calculate present value of the final equity payment\n    equity_payment = nominal_amount * (current_equity_index / initial_equity_index)\n    pv_equity_payment = equity_payment * present_value_factors[1]\n    \n    # Calculate the value of the swap\n    value_of_swap = pv_fixed_payments - pv_equity_payment\n    \n    # return answer\n    return value_of_swap\n\n# Call the function and print the result\nprint(f\"The value of the swap is: {solution()}\")\n```\n\nThis program calculates the value of the swap by determining the present value of fixed-rate payments and subtracting the present value of the final equity payment. Note that the actual market practice would involve discounting each expected future cash flow back to the present using the corresponding spot rate for the specific timing of each cash flow. Here, the program assumes that the fixed rate payments are known and certain."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-638",
        "question": "A study reveals that in this structure, 30% of workspaces are equipped with printers. Given a binomial probability distribution, what is the chance that just three companies will possess a printer in a casual selection of five firms?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program that calculates the probability that exactly three out of five randomly selected firms will possess a printer, assuming a binomial probability distribution where the probability of having a printer in a workspace is 30%:\n\n```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    n = 5 # number of trials (firms)\n    k = 3 # number of successes (firms with printers)\n    p = 0.30 # probability of success on a single trial (having a printer)\n    \n    # Calculate binomial probability\n    probability = comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n    \n    # Return the answer\n    return probability\n\n# You can print the result to check the output\nprint(solution())\n```\n\nThis program uses the `comb` function from the `math` module to calculate the number of combinations for choosing 3 firms from 5 and then applies the formula for binomial probability to obtain the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-639",
        "question": "What is the width of a 90% confidence interval using the appropriate t-distribution for a sample size of 37, having a mean of 116.23 and a variance of 245.55?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve the question, we'll need to calculate the 90% confidence interval for the sample mean. We use the t-distribution because the population standard deviation is unknown and we have a relatively small sample size (less than 30 would typically be considered small, but for more accuracy with moderate sizes around 37, the t-distribution is also recommended).\n\nThe confidence interval formula for a sample mean is:\n\\[\n\\bar{X} \\pm t_{\\frac{\\alpha}{2}, n-1} \\cdot \\frac{s}{\\sqrt{n}}\n\\]\n\nWhere:\n- \\(\\bar{X}\\) is the sample mean.\n- \\(t_{\\frac{\\alpha}{2}, n-1}\\) is the t-distribution critical value for a 90% confidence level and \\(n - 1\\) degrees of freedom.\n- \\(s\\) is the sample standard deviation, which is the square root of the variance.\n- \\(n\\) is the sample size.\n\nThe width of the confidence interval is equal to:\n\\[\n2 \\cdot t_{\\frac{\\alpha}{2}, n-1} \\cdot \\frac{s}{\\sqrt{n}}\n\\]\n\nHere's the Python code to calculate the width of the 90% confidence interval:\n\n```python\nimport math\nfrom scipy.stats import t\n\ndef solution():\n    # Define variables name and value\n    sample_size = 37\n    sample_mean = 116.23      # Not actually needed for the width calculation\n    sample_variance = 245.55\n    confidence_level = 0.90\n    \n    # Calculate sample standard deviation\n    sample_std_dev = math.sqrt(sample_variance)\n    \n    # Find t-critical value for 90% confidence and 36 degrees of freedom (n-1)\n    t_critical = t.ppf((1 + confidence_level) / 2, sample_size - 1)\n    \n    # Calculate the margin of error\n    margin_of_error = t_critical * (sample_std_dev / math.sqrt(sample_size))\n    \n    # Calculate the width of the confidence interval\n    width = 2 * margin_of_error\n    \n    # return the width of the confidence interval\n    return width\n\n# Uncomment the line below to test the function\n# print(solution())\n```\nThis program will return the width of the 90% confidence interval using the t-distribution for a sample size of 37, with a mean of 116.23 and a variance of 245.55."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-640",
        "question": "If, in a basic economy without a foreign sector, the ensuing formulas are valid: Consumption formula: C = 2,500 + 0.80 × (Y – T), Investment formula: I = 500 + 0.30 × Y – 25 × r, State expenditure: G = 1,000, Tax formula: T = –250 + 0.30 × Y, where Y signifies total income and r symbolizes real interest rate as a percentage, how much will the total income grow if the actual interest rate is 3% and state expenditure rises to 2,000?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To answer this question, first, we need to find the initial equilibrium income (Y) where the demand equals the production:\n\nAggregate Demand (AD) = C + I + G = Y (In a closed economy with no foreign sector, aggregate demand equates to total income or output)\n\nGiven the formulas, we will set AD equal to Y and solve the equation to find the initial equilibrium level of income (Y0). Then, we will increase state expenditure (G) to 2,000 and solve for the new level of income (Y1). The change in total income will be Y1 - Y0.\n\nLet's write the program to calculate this:\n\n```python\ndef solution():\n    # Define given formulas and variables\n    def consumption(Y, T):\n        return 2500 + 0.80 * (Y - T)\n    \n    def investment(Y, r):\n        return 500 + 0.30 * Y - 25 * r\n    \n    def tax(Y):\n        return -250 + 0.30 * Y\n    \n    def aggregate_demand(C, I, G):\n        return C + I + G\n    \n    # interest rate (3% or 0.03 as a decimal for formulas)\n    r = 3\n    \n    # Initial state expenditure\n    G0 = 1000\n    # Increased state expenditure\n    G1 = 2000\n    \n    # Initial guess for income and tax\n    Y0 = 10000\n    T0 = tax(Y0)\n    \n    # Find the initial equilibrium level of income (Y0) by iterating\n    while True:\n        C0 = consumption(Y0, T0)\n        I0 = investment(Y0, r)\n        AD0 = aggregate_demand(C0, I0, G0)\n        \n        if AD0 == Y0:\n            break\n        \n        Y0 = AD0\n        T0 = tax(Y0)\n        \n    # Find the new equilibrium level of income (Y1) with increased G\n    Y1 = Y0\n    T1 = tax(Y1)\n    \n    while True:\n        C1 = consumption(Y1, T1)\n        I1 = investment(Y1, r)\n        AD1 = aggregate_demand(C1, I1, G1)\n        \n        if AD1 == Y1:\n            break\n        \n        Y1 = AD1\n        T1 = tax(Y1)\n    \n    # Calculate the change in total income\n    income_increase = Y1 - Y0\n    \n    # return answer\n    return income_increase\n\n# Call the solution function\nprint(solution())\n```\n\nThis program uses an iterative approach to find the equilibrium income (Y). When state expenditure (G) is increased, it finds the new equilibrium to determine how the total income has increased."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-641",
        "question": "The details provided are related to a hedge fund named Trident Consultancy, which has:     AUM valued at $300 million as per the end of last year     A management fee set at 2% (calculated based on the AUM at year-end)     An incentive fee of 20% factored in: after deducting the management fee, considering a 5% soft hurdle rate, and utilizing a high-water mark (the high-water mark is $357 million)     The gross return for the current year for the fund stands at 20%. Could you calculate the total fee that Trident has earned this year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    prev_aum = 300e6  # AUM at the end of last year\n    management_fee_rate = 0.02  # Management fee rate (2%)\n    incentive_fee_rate = 0.20  # Incentive fee rate (20%)\n    soft_hurdle = 0.05  # Soft hurdle rate (5%)\n    high_water_mark = 357e6  # High-Water Mark\n    gross_return_rate = 0.20  # Gross return this year (20%)\n\n    # Calculate AUM after gross return\n    current_aum = prev_aum * (1 + gross_return_rate)\n\n    # Management fee based on the end of year AUM\n    management_fee = prev_aum * management_fee_rate\n    \n    # Check if current AUM is above high-water mark and exceeds hurdle rate before calculating incentive fee\n    if current_aum > high_water_mark:\n        adjusted_aum = current_aum - prev_aum  # Adjusted AUM excluding last year AUM\n        hurdle = prev_aum * soft_hurdle  # Soft hurdle amount\n        aum_above_hurdle = adjusted_aum - hurdle if (adjusted_aum - hurdle) > 0 else 0  # Amount above hurdle\n        incentive_fee = max(0, aum_above_hurdle * incentive_fee_rate)  # Incentive Fee\n    else:\n        incentive_fee = 0\n        \n    # Calculate the total fee\n    total_fee = management_fee + incentive_fee\n    \n    # return total fee\n    return total_fee\n\n# Call the function and print the solution\nprint(solution())\n```\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-642",
        "question": "The Aquarius Pool of Funds puts GBP150 million into each of Beta Hedge Fund and XYZ Hedge Fund. Aquarius Pool of Funds operates a \"1 and 10\" fee system. Both management and incentive fees are evaluated separately at the end of each calendar year. After one year, factoring in their individual management and incentive fees, the value of Aquarius's investment in Beta stands at GBP 80 million and it's worth GBP240 million in XYZ. What is the yearly return for a investor in the Aquarius Pool of Funds, after taking into account the fees charged at the fund-of-funds level?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Initial investment in each fund\n    initial_investment = 150e6  # GBP150 million for each Beta and XYZ\n\n    # Final value of investments after fees in each fund\n    final_investment_beta = 80e6  # GBP80 million in Beta\n    final_investment_xyz = 240e6  # GBP240 million in XYZ\n\n    # Total initial investment and final investment values\n    total_initial_investment = 2 * initial_investment  # Initial total investment in both funds\n    total_final_investment = final_investment_beta + final_investment_xyz  # Final total investment in both funds\n\n    # Calculate the net return (final - initial)\n    net_return_after_fees = total_final_investment - total_initial_investment\n\n    # Calculate the yearly return as a percentage\n    yearly_return_percentage = (net_return_after_fees / total_initial_investment) * 100\n\n    # Return answer\n    return yearly_return_percentage\n\n# Call the solution function and print the result\nprint(f\"Yearly return for an investor in the Aquarius Pool of Funds: {solution()}%\")\n```\n\nThis program calculates the yearly return for an investor in the Aquarius Pool of Funds, after accounting for the fees charged at the fund-of-funds level. The initial investment in both Beta Hedge Fund and XYZ Hedge Fund was GBP150 million each. After one year, the investment in Beta was worth GBP80 million, and the investment in XYZ was worth GBP240 million. The total initial investment was GBP300 million, and the total final investment was GBP320 million. The net return after fees was GBP20 million. The yearly return as a percentage was calculated using this net return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-643",
        "question": "Considering the available selected fixed asset details for a firm, what is the firm's fixed asset turnover ratio?",
        "tables": [
            "|                                | 2016 ($US millions) |\n|--------------------------------|---------------------|\n| Cost: Total property, plant, and equipment (PP&E) | 30,815                 |\n| Accumulated depreciation | 16,465                 |\n| Net PP&E                         | 14,350                 |\n| Average net PP&E                 | 12,200                 |\n| Net sales                        | 21,670                 |\n| Net income                       | 2,705                   |"
        ],
        "topic": "Accounting",
        "output": [
            "Here is the Python program that calculates the fixed asset turnover ratio:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_sales = 21670  # in $US millions\n    average_net_pp_and_e = 12200  # in $US millions\n    \n    # Do math calculation to get the answer for fixed asset turnover ratio\n    fixed_asset_turnover_ratio = net_sales / average_net_pp_and_e\n    \n    # return answer\n    return fixed_asset_turnover_ratio\n\n# The returned value from the function call is the fixed asset turnover ratio\nprint(solution())\n```\n\nWhen you run this program, the function `solution()` calculates the fixed asset turnover ratio by dividing the annual net sales by the average net property, plant, and equipment (PP&E) for the year. The result is a measure of how efficiently the company is using its fixed assets to generate sales."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-644",
        "question": "If the historical returns of Company 1's shares and Company 2's shares have a correlation of 0.75, and the variance of Company 1's shares is 0.16 while the variance of Company 2's shares is 0.09, what is the covariance of returns of Company 1's shares and Company 2's shares?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Certainly! To calculate the covariance from the correlation coefficient, we'll use the formula:\n\ncov(X, Y) = corr(X, Y) * std(X) * std(Y)\n\nFirst, we'll need to calculate the standard deviation (std) of each company's shares' returns from the variance. The standard deviation is the square root of the variance. Then we'll apply the formula above to get the covariance.\n\nSince the variance is the square of the standard deviation, we can derive the standard deviation by taking the square root of the variance.\n\nHere's the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    correlation = 0.75\n    variance_company1 = 0.16\n    variance_company2 = 0.09\n    \n    # Calculate standard deviations\n    std_company1 = math.sqrt(variance_company1)\n    std_company2 = math.sqrt(variance_company2)\n    \n    # Calculate covariance using the correlation\n    covariance = correlation * std_company1 * std_company2\n    \n    # return answer\n    return covariance\n\n# Calling the function to get the result\nprint(solution())\n```\n\nWhen you run this program, it will print out the covariance of returns between Company 1's shares and Company 2's shares."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-645",
        "question": "Imagine a call option that is sold for $4 and has an exercise price of $50. Calculate the value upon expiry and the profit for a purchaser if the price of the underlying asset at expiry is $55.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_premium = 4  # The cost of buying the call option\n    exercise_price = 50  # The price at which the option can be exercised\n    asset_price_at_expiry = 55  # The price of the underlying asset at expiry\n    \n    # Do math calculation to get the value upon expiry and the profit for the purchaser\n    # The value upon expiry is the difference between asset price and exercise price\n    value_upon_expiry = max(asset_price_at_expiry - exercise_price, 0)\n    # The profit is the value upon expiry minus the option premium paid\n    profit = value_upon_expiry - option_premium\n    \n    # return answer\n    return (value_upon_expiry, profit)\n\n# Call the solution function and print its return values\nvalue_at_expiry, profit = solution()\nprint(\"Value upon expiry:\", value_at_expiry)\nprint(\"Profit:\", profit)\n```\n\nThis function calculates the value upon expiry of the call option and the profit the purchaser would make if the price of the underlying asset at expiry is $55. If the option is out-of-the-money (asset price is below the exercise price), the value upon expiry is $0. Since in this scenario the option is in-the-money, the value upon expiry is positive, and the profit includes the cost of the premium paid."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-646",
        "question": "Assuming a consistent interest rate of 8.87%, how much does a shareholder need to invest now if they aim to have $100 in their account in three years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 100\n    interest_rate = 8.87 / 100  # converting percentage to decimal\n    number_of_years = 3\n    \n    # Do math calculation to get the answer\n    # We use the formula for present value: PV = FV / (1 + r)^n\n    present_value = future_value / ((1 + interest_rate) ** number_of_years)\n    \n    # return answer\n    return present_value\n\n# You can call this function to check the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-647",
        "question": "Suppose a call option is priced at $4 with an exercise price of $50. Calculate the value at expiration and the profit for the vendor if the price of the underlying asset at expiration is $52.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_price = 4          # price of the call option\n    exercise_price = 50       # exercise price of the option\n    underlying_asset_price = 52   # price of the underlying asset at expiration\n\n    # First calculate the value of the option at expiration\n    # if the underlying asset price is higher than the exercise price.\n    # Otherwise, it's valueless.\n    if underlying_asset_price > exercise_price:\n        value_at_expiration = underlying_asset_price - exercise_price\n    else:\n        value_at_expiration = 0\n\n    # Then calculate the profit for the vendor\n    # To the vendor, the profit is the option price minus the value at expiration\n    # if the latter is positive, otherwise just the option price received\n    profit_for_vendor = option_price - max(value_at_expiration - option_price, 0)\n    \n    # return answer as a tuple (value_at_expiration, profit_for_vendor)\n    return (value_at_expiration, profit_for_vendor)\n\n# Call the solution function and print the results for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-648",
        "question": "What does the term Sum of Squares Residuals (SSR) refer to?",
        "tables": [
            "| Source | Sum of Squares (SS) |\n|--------|---------------------|\n| Explained | 957 |\n| Total | 1580 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "The Sum of Squares Residuals (SSR), also known as the Sum of Squares Error (SSE), refers to the variation in the response variable that is not explained by the regression model. In other words, these are the residual (error) variations after the model has taken into account the factors that it can explain. In a statistical model, Total Sum of Squares (SST or SS_Total) is partitioned into the Sum of Squares explained by the regression model (SS_Explained or SS_Model) and the Sum of Squares due to residuals (SS_Residuals or SS_Error). Mathematically, it is represented as follows:\n\nSS_Total = SS_Explained + SS_Residuals\n\nOr when abbreviated with the terms you've provided:\n\nTotal SS = Explained SS + SSR\n\nHere is the Python program that calculates SSR based on the given data:\n```python\ndef solution():\n    # Define variables names and values\n    SS_Explained = 957\n    SS_Total = 1580\n    \n    # Do math calculation to get the answer\n    SS_Residuals = SS_Total - SS_Explained\n    \n    # return answer\n    return SS_Residuals\n\n# Let's execute the function to see the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-649",
        "question": "What is the total comprehensive income of the business (in € millions) based on the information from the business's financial records?",
        "tables": [
            "|                                               | 毛 millions |\n|-----------------------------------------------|------------:|\n| Revenues for the year                         |      12,500 |\n| Total expenses for the year                   |      10,000 |\n| Gains from available-for-sale securities      |       1,475 |\n| Loss on foreign currency translation adjustments on a foreign subsidiary |         325 |\n| Dividends paid                                |         500 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenues = 12500\n    total_expenses = 10000\n    gains_on_securities = 1475\n    loss_on_translation = 325\n    dividends_paid = 500\n\n    # Calculate net income\n    net_income = revenues - total_expices + gains_on_securities\n    \n    # Calculate other comprehensive income items\n    other_comprehensive_income = - loss_on_translation\n    \n    # Calculate total comprehensive income\n    total_comprehensive_income = net_income + other_comprehensive_income - dividends_paid\n    \n    # return answer\n    return total_comprehensive_income\n\n# Call the function and print the answer\nprint(\"Total Comprehensive Income: €\", solution(), \"millions\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-650",
        "question": "A researcher collected the subsequent data pertaining to a business's capital structure and pre-tax component costs. What would be the weighted average cost of capital (WACC) of the business, given that the marginal tax rate of the business is 40%?",
        "tables": [
            "| Capital component | Book Value (000) | Market Value(000) | Component cost |\n|------------------|-----------------|-----------------|---------------|\n| Debt             | $100            | $80             | 8%            |\n| Preferred stock  | $20             | $20             | 10%           |\n| Common stock     | $100            | $200            | 12%           |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here is the Python program that calculates the Weighted Average Cost of Capital (WACC) using the given capital structure and component costs:\n\n```python\ndef solution():\n    # Define variables name and value\n    # Market values and costs are given in thousands and percentages, respectively.\n    market_values = {\n        'debt': 80,\n        'preferred_stock': 20,\n        'common_stock': 200\n    }\n    \n    component_costs = {\n        'debt': 0.08,\n        'preferred_stock': 0.10,\n        'common_stock': 0.12\n    }\n    \n    # The marginal tax rate\n    tax_rate = 0.40\n    \n    # Calculate the weights for each component\n    total_market_value = sum(market_values.values())\n    weights = {component: value / total_market_value for component, value in market_values.items()}\n    \n    # Calculate the after-tax cost of debt\n    after_tax_cost_of_debt = component_costs['debt'] * (1 - tax_rate)\n    \n    # Calculate the WACC\n    wacc = (after_tax_cost_of_debt * weights['debt'] +\n            component_costs['preferred_stock'] * weights['preferred_stock'] +\n            component_costs['common_stock'] * weights['common_stock'])\n    \n    # Return the WACC as a percentage\n    return wacc * 100\n\n# Running the solution function and printing the result.\n# The result should be the WACC in percentage form.\nprint(f\"WACC: {solution():.2f}%\")\n```\n\nIn this program, the market values and the component costs are stored in dictionaries for ease of calculation. The total market value is computed, and weights for each component of the capital structure are generated. The cost of debt is adjusted for taxes, since interest expenses are tax-deductible. The WACC is calculated by multiplying each component cost with its respective weight and summing them up. The result is returned as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-651",
        "question": "What is the projected equity value for the Umbrella Corporation as per the data gathered by Paul?",
        "tables": [
            "| EV/EBITDA | 9 |\n| --- | --- |\n| EBITDA | $25,000,000 |\n| Market value of debt | $65,000,000 |\n| Cash | $1,300,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables with given values\n    ev_to_ebitda = 9\n    ebitda = 25000000\n    market_value_of_debt = 65000000\n    cash = 1300000\n\n    # Calculate the enterprise value using the provided EV/EBITDA multiple and EBITDA\n    enterprise_value = ev_to_ebitda * ebitda\n\n    # Calculate the equity value by subtracting the market value of debt and adding cash\n    equity_value = enterprise_value - market_value_of_debt + cash\n\n    # return answer\n    return equity_value\n\n# The function call\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-652",
        "question": "XYZ Chicago, a home decor shopping company, provides its employees a defined benefit pension plan. Based on the data provided in the next table, could you compute the regular pension expense to be reported in I/S following IFRS?",
        "tables": [
            "|                                         |      |\n|-----------------------------------------|------|\n| ABC LA retirement plan information 2018 |      |\n| Current service costs                   | 320  |\n| Past service costs                      | 150  |\n| Employer contributions                  | 1,200|\n| Benefit obligation at beginning of year | 45,000|\n| Benefit obligation at end of year       | 48,395|\n| Plan assets at beginning of year        | 40,800|\n| Plan assets at end of year              | 44,300|\n| Actuarial loss                          | 350  |\n| Actual return on plan assets            | 3,100|\n| Discount rate on plan liabilities       | 7.5% |\n| Expected rate of return on plan assets  | 8.2% |"
        ],
        "topic": "Accounting",
        "output": [
            "The pension expense under IFRS is typically calculated by summing the current service cost, the past service cost, the net interest on the defined benefit liability (or asset), and actuarial gains/losses, minus the expected return on plan assets. One important note here is that, under IFRS, actuarial gains and losses are recognized directly in other comprehensive income (OCI) and not as part of the pension expense. Therefore, they are excluded from the pension expense calculation. So the pension expense will include:\n\n1. Current service cost\n2. Past service cost\n3. Net interest expense – which is the interest on the beginning defined benefit obligation at the discount rate, minus the interest on the plan assets at the same discount rate. \n\nUsing the data from the table to calculate the net interest expense:\n\n- Interest cost on the benefit obligation = benefit obligation at the beginning of the year * discount rate\n- Expected interest on plan assets = plan assets at the beginning of the year * expected rate of return on plan assets\n\nNow, let's create the Python function to calculate the pension expense:\n\n```python\ndef solution():\n    # Define variables with provided values\n    current_service_cost = 320\n    past_service_cost = 150\n    discount_rate = 0.075\n    expected_return_rate = 0.082\n    beginning_of_year_obligation = 45000\n    beginning_of_year_plan_assets = 40800\n    \n    # Calculate interest on the benefit obligation\n    interest_on_obligation = beginning_of_year_obligation * discount_rate\n    \n    # Calculate expected return on plan assets\n    expected_return_on_assets = beginning_of_year_plan_assets * expected_return_rate\n    \n    # Calculate net interest expense (since it's the difference that will affect pension expense)\n    net_interest_expense = interest_on_obligation - expected_return_on_assets\n    \n    # Calculate total pension expense\n    pension_expense = current_service_cost + past_service_cost + net_interest_expense\n    \n    # return pension expense\n    return pension_expense\n\n# Running the function to get the result\nprint(solution())\n```\nThis function assumes the values for variables as constants defined in the code and calculates the pension expense accordingly."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-653",
        "question": "Based on the provided data, what is the company's cash flow from operations?",
        "tables": [
            "| Net income | $120 |\n|---|---|\n| Decrease in accounts receivable | 20 |\n| Depreciation | 25 |\n| Increase in inventory | 10 |\n| Increase in accounts payable | 7 |\n| Decrease in wages payable | 5 |\n| Increase in deferred tax liabilities | 15 |\n| Profit from the sale of land | 2 |"
        ],
        "topic": "Accounting",
        "output": [
            "Here is a Python program to calculate the company's cash flow from operations based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 120\n    decrease_in_accounts_receivable = 20\n    depreciation = 25\n    increase_in_inventory = 10\n    increase_in_accounts_payable = 7\n    decrease_in_wages_payable = 5\n    increase_in_deferred_tax_liabilities = 15\n    profit_from_sale_of_land = 2\n\n    # Do math calculation to get the answer\n    # To calculate cash flow from operations we adjust net income for changes in balance sheet items\n    cash_flow_from_operations = (\n        net_income +\n        decrease_in_accounts_receivable +\n        depreciation -  # Depreciation is a non-cash expense\n        increase_in_inventory +\n        increase_in_accounts_payable -\n        decrease_in_wages_payable +\n        increase_in_deferred_tax_liabilities -\n        profit_from_sale_of_land  # Remove profits from the sale of land as it is an investing activity\n    )\n    \n    # return answer\n    return cash_flow_from_operations\n\n# Call the function to get the result\nprint(solution())\n```\nWhen you run this program, it will output the cash flow from operations of the company, taking into account the provided table of changes in balance sheet items."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-654",
        "question": "What is the amount of money received from clients in the year 2013 based on the chosen data from a corporation's comparative income statement and balance sheet?",
        "tables": [
            "|                   | 2013  | 2012  |\n|-------------------|-------|-------|\n| Sales revenue     | 100,000| 95,000|\n| Cost of goods sold| 47,000 | 47,500|\n| Depreciation expense | 4,000 | 3,500 |\n| Net Income        | 11,122  | 4,556|\n|                   |      |     |\n| **Selected Balance Sheet Data as of 31 August ($ thousands)** |   \n|                   | 2013  | 2012  |\n| Current Assets    ||\n| Cash and investments | 21,122| 25,000|\n| Accounts receivable | 25,000| 13,500|\n| Inventories        | 13,000  | 8,500|\n| Total current assets | 59,122|47,000|\n| Current liabilities |      |     |\n| Accounts payable   | 15,000 |15,000|\n| Other current liabilities | 7,000 |9,000 |\n| Total current liabilities|  22,000|24,000|"
        ],
        "topic": "Accounting",
        "output": [
            "To compute the amount of money received from clients in the year 2013, we need to adjust the sales revenue for the change in accounts receivable. The formula to calculate the cash received from customers is:\n\nCash Received from Customers = Sales Revenue - Increase in Accounts Receivable\n\nIncrease in Accounts Receivable = Accounts Receivable(End of Period) - Accounts Receivable(Beginning of Period)\n\nHere's the Python code to compute the cash received from customers for the year 2013:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales_revenue_2013 = 100000\n    accounts_receivable_2012 = 13500\n    accounts_receivable_2013 = 25000\n    \n    # Calculate the increase in accounts receivable during 2013\n    increase_in_receivables = accounts_receivable_2013 - accounts_receivable_2012\n    \n    # Calculate the cash received from clients\n    cash_received_from_clients = sales_revenue_2013 - increase_in_receivables\n    \n    # return the answer\n    return cash_received_from_clients\n\nprint(solution())\n```\n\nThis program will output the amount of money received from clients in the year 2013."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-655",
        "question": "You choose to short sell 100 shares of Monticello Equestrian Centers when it's at its annual peak of 56. Your broker informs you that your margin requirement is 45% and the commission on the acquisition is $155. During the term you are shorting the stock, Monticello pays a dividend of $2.50 per share. At the conclusion of a year, you purchase 100 shares of Monticello at 45 to settle your position and are hit with a commission of $145. What is your investment's rate of return?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_share_price = 56\n    shares_sold = 100\n    margin_requirement_percentage = 0.45\n    initial_commission = 155\n    dividend_per_share = 2.50\n    final_share_price = 45\n    final_commission = 145\n    \n    # Calculate total return and costs\n    total_initial_value = initial_share_price * shares_sold\n    initial_investment = total_initial_value * margin_requirement_percentage\n    total_dividends_paid = dividend_per_share * shares_sold\n    total_final_value = final_share_price * shares_sold\n    total_commissions = initial_commission + final_commission\n\n    # Calculate profit\n    profit = (total_initial_value - total_final_value) - total_dividends_paid - total_commissions\n    \n    # Calculate rate of return\n    rate_of_return = (profit / initial_investment) * 100\n    \n    # return answer\n    return rate_of_return\n\n# Uncomment the line below to test the solution function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-656",
        "question": "What is the initial capitalization rate of the property based on the following details?",
        "tables": [
            "| Discount rate | 11% |\n| --- | --- |\n| Growth rate | 2% |\n| Terminal cap rate | 8% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "In order to calculate the initial capitalization rate (cap rate), we need specific information about the property's net operating income (NOI) and its current market value (or sales price). Without this information, we cannot calculate the initial cap rate directly.\n\nThe cap rate is a measure used to estimate the investor's potential return on their investment, and it is calculated using the following formula:\n\nCap Rate = Net Operating Income / Current Market Value\n\nHowever, we do have the discount rate and growth rate from your table, and in some real estate valuation models, especially in the income approach, the initial cap rate is sometimes approximated by subtracting the long-term growth rate from the discount rate (WACC - g). Let's make this assumption and calculate the initial cap rate using this method. \n\nPlease note that in actual practice, this method is a simplification and initial cap rate should be obtained through market comparisons or based on the actual NOI and value of the property.\n\nHere is the Python program following that assumption:\n\n```python\ndef solution():\n    # Define variables name and value\n    discount_rate = 0.11\n    growth_rate = 0.02\n    \n    # Calculate initial cap rate: discount rate minus growth rate\n    initial_cap_rate = discount_rate - growth_rate\n    \n    # return answer, converted to percentage\n    return initial_cap_rate * 100  # returning percentage rather than decimal\n\n# You can now call the function to get the answer\nprint(solution())\n```\n\nRun this program in a Python environment to obtain the initial capitalization rate in percentage form."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-657",
        "question": "A fund manager of fixed income wishes to decrease the duration from 5.5 to 4.5 using a 3-year interest rate swap with quarterly payments. If the portfolio's market value is $10,000,000 and the modified duration of the payer swap is -2.125, what is the notional principle of the swap?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, in order to adjust the portfolio's duration, the fund manager needs to calculate the notional principal for the interest rate swap that will offset the change in the portfolio's duration. The formula to estimate the notional principal amount of the swap is:\n\nNotional Principal = (Target Duration - Portfolio Duration) * Portfolio Value / Modified Duration of the Swap\n\nHere is the Python program that calculates the notional principal:\n\n```python\ndef solution():\n    # Define variables name and value\n    target_duration = 4.5\n    portfolio_duration = 5.5\n    portfolio_value = 10000000\n    modified_duration_swap = -2.125\n    \n    # Calculate the notional principal of the swap\n    notional_principal = (target_duration - portfolio_duration) * portfolio_value / modified_duration_swap\n    \n    # The notional principal should be positive regardless of the negative duration\n    notional_principal = abs(notional_principal)\n    \n    # return answer\n    return notional_principal\n\n# Example usage\nprint(f\"The notional principal of the swap is: {solution()}\")\n```\n\nThe `solution` function performs the necessary calculation and returns the notional principal needed to adjust the duration of the portfolio as required by the fund manager. The `abs` function is used to ensure the notional principal stays a positive figure, as a negative notional isn't meaningful in this context."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-658",
        "question": "On January 1st, 20X5, Vega Holdings Corporation distributed 55,000 shares to employees as stock options. The exercise price for 24,000 of these shares is $32, while the remaining shares have an exercise price of $35. By the end of 20X5, the company's stock price had reached $42, with 1,800,000 common shares in outstanding circulation overall. The mean stock price for 20X5 was $34. Could you calculate the denominator for the diluted earnings per share?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    options_32_exercise_price = 24000\n    exercise_price_32 = 32\n    options_35_exercise_price = 55000 - options_32_exercise_price\n    exercise_price_35 = 35\n    end_year_stock_price = 42\n    outstanding_shares = 1800000\n    mean_stock_price = 34\n    \n    # Calculate additional shares for options with exercise price $32\n    proceed_from_exercise_32 = options_32_exercise_price * exercise_price_32\n    additional_shares_32 = proceed_from_exercise_32 / mean_stock_price\n    \n    # Calculate additional shares for options with exercise price $35\n    proceed_from_exercise_35 = options_35_exercise_price * exercise_price_35\n    additional_shares_35 = proceed_from_exercise_35 / mean_stock_price\n    \n    # Calculate the denominator for diluted EPS\n    diluted_shares = outstanding_shares + additional_shares_32 + additional_shares_35\n    \n    # return diluted_shares rounded to the nearest whole number since shares can't be fractional\n    return round(diluted_shares)\n\n# Call solution function\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-659",
        "question": "A firm purchases a license for $6,500, planning to use it for a duration of four years. However, the firm's management anticipates deriving advantages from the license for three years, applying the straight-line amortization technique. What would be the accumulated amortization at the close of the second year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 6500\n    estimated_useful_life = 3  # years\n    \n    # Calculate annual amortization expense\n    annual_amortization_expense = purchase_price / estimated_useful_life\n    \n    # Calculate accumulated amortization at the end of the second year\n    accumulated_amortization = annual_amortization_expense * 2\n    \n    # return answer\n    return accumulated_amortization\n    \n# Function call to verify the output\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-660",
        "question": "One year ago, a merchant entered into a three-year interest rate swap in which he receives floating payments. Currently, the established fixed swap rate is 1.4853% (a year after the swap was initially made). The starting swap rate was set at 1.82% and the notional principle stands at $100 million. What is the value of this swap?",
        "tables": [
            "| Years to maturity | MRR   |\n|------------------ |-------|\n| 1                 | 1%    |\n| 2                 | 1.5%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 100000000  # Notional principal amount\n    swap_rate_initial = 0.0182      # Initially set swap rate\n    swap_rate_current = 0.014853    # Swap rate after one year\n    mrr_2_years = 0.015             # Market reference rate for 2 years to maturity\n    mrr_1_year = 0.01               # Market reference rate for 1 year to maturity\n    \n    # Payments are made annually, hence compute the present value of the remaining cash flows of the swap\n    fixed_payment_value = notional_principal * (swap_rate_initial - swap_rate_current)\n    \n    # Calculate present value of expected fixed payments using the fixed swap rate at initiation\n    pv_fixed_payments = fixed_payment_value * ((1 - (1 + mrr_2_years)**(-2)) / mrr_2_years)\n    \n    # Calculate present value of expected floating payments using current market rates\n    pv_floating_payments = notional_principal * (1 - (1 + mrr_1_year)**-1)\n    \n    # The value of the swap to the merchant who receives floating and pays fixed is the difference\n    value_swap = pv_floating_payments - pv_fixed_payments\n\n    # Return answer (value_swap), should be a positive or negative number depending on who benefits from the swap\n    return value_swap\n\n# Call the function and print the answer\nvalue_of_swap = solution()\nprint(f\"The value of the swap is: {value_of_swap:.2f}\")\n```\n\nIn this program, to value the interest rate swap after one year, we calculate the present value of the remaining fixed payments the merchant is due to make at the initial swap rate and the present value of the expected floating payments based on current market rates. The calculation of the present value involves discounting future cash flows to their present value at the appropriate market reference rates. The value of the swap would be the difference in present values of what the merchant would receive and pay. If the number is positive, the merchant would have a gain from the swap; if it is negative, the merchant would have a loss."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-661",
        "question": "Assuming that the yield-to-maturity of Bond B increases by 20 basis points, and given that the bond's annual modified duration is 6.932 and the annual convexity is 59.270, what should be the anticipated percentage price change?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delta_yield = 0.0020  # 20 basis points or 0.2%\n    modified_duration = 6.932\n    convexity = 59.270\n    \n    # Do math calculation to get the answer\n    # The formula for the approximate percentage change in a bond's price given a change in yield is:\n    # ΔP/P ≈ -Dmod * Δy + 1/2 * C * (Δy)^2\n    # where ΔP/P is the percentage change in price\n    # Dmod is the modified duration\n    # Δy is the change in yield (in decimal form)\n    # C is convexity\n    percentage_price_change = -modified_duration * delta_yield + 0.5 * convexity * (delta_yield ** 2)\n    \n    # return answer\n    return percentage_price_change\n\n# Execute the function and print the result\nprint(solution())\n```\n\nYou can use this Python program to calculate the anticipated percentage price change of Bond B given the increase in yield-to-maturity and the bond's modified duration and convexity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-662",
        "question": "What is the constant maturity mortality if the assumed annual conditional prepayment rate (CPR) for a cluster of mortgages is 5% and the weighted average maturity of the respective mortgages is 15 years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "The constant maturity mortality (CMM) is another term for the constant prepayment rate (CPR) adjusted for the time dimension of a mortgage pool. In essence, it is the percentage of the remaining balance of mortgage loans expected to be prepaid in a year based on a level of prepayment assumption that remains constant.\n\nThe formula to convert annual CPR to CMM is:\n\n\\[ CMM = 1 - (1 - CPR)^{\\frac{1}{WAM}} \\]\n\nwhere \\( CPR \\) is the conditional prepayment rate and \\( WAM \\) is the weighted average maturity of the mortgages in years.\n\nHere is a Python program to calculate CMM given the annual CPR of 5% and WAM of 15 years:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_cpr = 0.05  # 5% annual CPR\n    weighted_average_maturity = 15  # 15 years WAM\n    \n    # Do math calculation to get the answer\n    cmm = 1 - (1 - annual_cpr) ** (1 / weighted_average_maturity)\n    \n    # return answer\n    return cmm\n\n# Example usage:\n# cmm_value = solution()\n# print(f\"The Constant Maturity Mortality (CMM) is: {cmm_value:.2%}\")\n```\n\nRemember that to show the result as a percentage, you can format the output in the print statement accordingly."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-663",
        "question": "What is the anticipated rate of return for a share with CAPM, given a beta of 1.5, a risk-free rate of 5%, and a market return of 8%?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 1.5\n    risk_free_rate = 0.05\n    market_return = 0.08\n    \n    # Do math calculation to get the answer using CAPM formula\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n    \n# Uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-664",
        "question": "If the five-year Treasury bond in the US has a yield of 2% and the swap spread is reported at 50 bps, what is the interest rate paid by the fixed payer in a five-year interest rate swap?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the interest rate paid by the fixed payer in a five-year interest rate swap:\n\n```python\ndef solution():\n    # Define variables name and value\n    treasury_yield = 2.0 # in percent\n    swap_spread = 50 # in basis points\n    \n    # Convert basis points to percent\n    swap_spread_percent = swap_spread / 100\n    \n    # Calculate the total interest rate for fixed payer\n    fixed_payer_interest_rate = treasury_yield + swap_spread_percent\n    \n    # return answer\n    return fixed_payer_interest_rate\n\n# Feel free to test the function\nprint(f\"The fixed payer's interest rate in the swap is: {solution()}%\")\n```\n\nWhen you run this function, it will return the interest rate paid by the fixed payer in a five-year interest rate swap."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-665",
        "question": "What is the conversion price of the bond in Exhibit 3, which was issued by Pro Star as a convertible bond, according to the exhibit below?",
        "tables": [
            "| Convertible Bond Issued by Pro Star, Inc |      |\n|--------------------------------|------|\n| Issue Date                     | 6 December 20X0 |\n| Maturity Date                  | 6 December 20X4 |\n| Coupon Rate                    | 2%  |\n| Issue Price                    | $1,000 |\n| Conversion Ratio               | 31   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    issue_price = 1000\n    conversion_ratio = 31\n    \n    # Calculate conversion price\n    conversion_price = issue_price / conversion_ratio\n    \n    # return answer\n    return conversion_price\n\n# The function call can be uncommented to test.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-666",
        "question": "Recently, Parker Inc. acquired a production machine for $60,000 that is anticipated to produce an annual cash inflow of $25,000 for six years. The company will depreciate the machine over six years for accounting reasons, but the tax authority assumes a useful lifespan of five years for the machine. If the tax rate is 40% and the machine has no residual value, what would be the taxable income for Parker Inc. in the first year if the straight-line method is applied?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_machine = 60000\n    annual_cash_inflow = 25000\n    lifespan_for_depreciation = 6\n    tax_lifespan = 5\n    tax_rate = 0.40\n    \n    # Calculate accounting depreciation and taxable income\n    accounting_depreciation = cost_of_machine / lifespan_for_depreciation\n    tax_depreciation = cost_of_machine / tax_lifespan\n    taxable_income = annual_cash_inflow - tax_depreciation\n    \n    # Adjust for taxes\n    taxable_income_after_tax = taxable_income * (1 - tax_rate)\n    \n    # return answer\n    return taxable_income_after_tax\n\n# Call the function and print the answer\nprint(solution())\n```\n\nPlease notice that the question does not explicitly ask to account for the difference in depreciation between accounting and tax purposes which could lead to temporary differences and deferred tax assets/liabilities. The code above assumes taxable income is based on tax depreciation not accounting depreciation otherwise the `accounting_depreciation` would be used instead of `tax_depreciation`. If the taxable income should be calculated based on the accounting depreciation, then `accounting_depreciation` should be deducted from the annual cash inflow instead."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-667",
        "question": "Based on Exhibits 1, what is Applicant B's prediction for selling, general, and administrative costs in 2013, considering that his forecast states the following: net sales will increase at the average yearly growth rate in net sales for the years 2010-2012 and the 2013 SG&A/net sales ratio will remain consistent with the average ratio during 2010-2012?",
        "tables": [
            "|                                             | 2010 | 2011 | 2012 |\n|---------------------------------------------|------|------|------|\n| **Net sales**                               | 46.8 | 50.5 | 53.9 |\n| **Cost of sales**                           | 18.2 | 18.4 | 18.8 |\n| **Gross profit**                            | 28.6 | 32.1 | 35.1 |\n| **Selling, general, and administrative (SG&A) expenses** | 19.3 | 22.5 | 25.1 |\n| **Operating income**                        | 9.3  | 9.6  | 10.0 |\n| **Interest expense**                        | 0.5  | 0.7  | 0.6  |\n| **Income before provision for income tax**  | 8.8  | 8.9  | 9.4  |\n| **Provision for income taxes**              | 2.8  | 2.8  | 3.1  |\n| **Net income**                              | 6.0  | 6.1  | 6.3  |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales = [46.8, 50.5, 53.9]\n    sg_and_a_expenses = [19.3, 22.5, 25.1]\n    \n    # Calculate average yearly growth rate in net sales for the years 2010-2012\n    growth_rate_2010_to_2011 = (net_sales[1] - net_sales[0]) / net_sales[0]\n    growth_rate_2011_to_2012 = (net_sales[2] - net_sales[1]) / net_sales[1]\n    avg_growth_rate = (growth_rate_2010_to_2011 + growth_rate_2011_to_2012) / 2\n    \n    # Calculate net sales prediction for 2013\n    net_sales_2013 = net_sales[2] * (1 + avg_growth_rate)\n    \n    # Calculate the average SG&A/net sales ratio during 2010-2012\n    ratios = [sg_and_a_expenses[i] / net_sales[i] for i in range(3)]\n    avg_ratio = sum(ratios) / len(ratios)\n    \n    # Calculate the SG&A expenses prediction for 2013\n    sg_and_a_expenses_2013 = net_sales_2013 * avg_ratio\n    \n    # Return answer\n    return sg_and_a_expenses_2013\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-668",
        "question": "What is the recorded historical geometric actual return rate for company bonds as per the researcher?",
        "tables": [
            "| Asset Class    | Geometric Return (%) |\n| -------------- | -------------------- |\n| Equities       | 8.0                  |\n| Corporate Bonds| 6.5                  |\n| Treasury bills | 2.5                  |\n| Inflation      | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here is the Python code to extract the geometric return rate for corporate bonds from the given data.\n\n```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    \n    # The value is already provided, so no extra calculation needed.\n    \n    # return answer\n    return corporate_bonds_return\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-669",
        "question": "Firm N, which uses the IFRS system, allocated $22 million for inventory acquisition last year. Following a natural calamity, the inventory's value was reduced to $19 million. However, by the end of the year, certain equipment was still functional, raising the actual inventory value to $25 million. What should be the reported inventory value for Firm N?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_value = 22e6  # $22 million\n    post_disaster_value = 19e6  # $19 million after natural calamity\n    year_end_value = 25e6  # $25 million at the end of the year\n\n    # IFRS allows for the reversal of impairment losses up to the amount of the original impairment loss\n    # Since the inventory's value increased from $19 million to $25 million, Firm N could potentially reverse the Write-down\n    # However, the reversal cannot exceed the original value of the inventory (i.e., cannot exceed $22 million)\n\n    # So, the reported inventory value should be the lower of the year-end value or the original value\n    reported_inventory_value = min(year_end_value, original_value)\n\n    # return answer\n    return reported_inventory_value\n\n# Calling the function to get the reported inventory value\nprint(\"The reported inventory value for Firm N:\", solution())\n```\n\nIn this program, we calculate the reported inventory value by taking the minimum of the year-end value ($25 million) and the original value ($22 million) due to IFRS impairment loss reversal limitations. The resulting reported inventory value is returned."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-670",
        "question": "Based on Exhibit 1, to meet the goal of junior analyst, Benjamin, to lower the modified duration of his fully invested US Treasuries portfolio, Portfolio B, to 3.00, how many Treasury futures contracts does Benjamin need to sell?",
        "tables": [
            "|                      | Portfolio W    | Futures Contract and CTD Bond |\n|----------------------|----------------|------------------------------|\n| Market value         | $120,349,000   | Price                        | 143.20                        |\n| Modified duration    | 9.30           | Modified duration            | 9.00                          |\n| Basis point value    | $111,924.57    | Basis point value            | 128.88                        |\n|                      |                | Conversion factor            | 0.75                          |\n|                      |                | Contract size                | $100,000                      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 120349000  # Market value of Portfolio W\n    target_duration = 3.00  # The target modified duration Benjamin wants for the portfolio\n    portfolio_duration = 9.30  # The current modified duration of Portfolio W\n    futures_duration = 9.00  # The modified duration of the Futures Contract and CTD Bond\n    futures_price = 143.20  # Price of the Futures Contracts\n    conversion_factor = 0.75  # Conversion factor for the CTD Bond\n    contract_size = 100000  # Contract size of Futures Contract\n\n    # Calculate the duration gap to close\n    duration_gap = portfolio_duration - target_duration\n    \n    # Calculate the dollar duration of the portfolio\n    portfolio_dollar_duration = portfolio_value * duration_gap / 100\n    \n    # Calculate the dollar duration of one futures contract\n    futures_dollar_duration = futures_price * futures_duration * contract_size / 100\n    \n    # Adjust the futures dollar duration by the conversion factor for the CTD Bond\n    adjusted_futures_dollar_duration = futures_dollar_duration * conversion_factor\n    \n    # Calculate the number of futures contracts Benjamin needs to sell\n    # to achieve the target modified duration of 3.0\n    number_of_contracts = portfolio_dollar_duration / adjusted_futures_dollar_duration\n    \n    # Since Benjamin must sell a whole number of contracts, we'll round\n    # the result to get the required number of contracts to sell\n    number_of_contracts_to_sell = round(number_of_contracts)\n    \n    # return answer\n    return number_of_contracts_to_sell\n\n# Call the function and print the result for verification\nprint(solution())\n```\nThis Python program defines the given variables from the problem statement, calculates the change in duration required, determines how the futures contract can offset this change and then calculates the number of futures contracts that need to be sold. The result is rounded to the nearest whole number, as one would sell a whole number of contracts."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-671",
        "question": "A financial institution has recently received loan applications amounting to $210 million; it plans to acquire $95M in novel Treasury bonds releasing this week and foresees that its top corporate client's credit line withdrawals will reach $115M. The total funds from deposits and other client funds obtained today amount to $210 million, and the expected funds to be garnered next week amounts to an additional $150M. Based on the provided information, what is the discrepancy in available funds?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_applications = 210  # in million dollars\n    treasury_bonds = 95  # in million dollars\n    corporate_client_withdrawals = 115  # in million dollars\n\n    total_funds_received_today = 210  # in million dollars\n    expected_funds_next_week = 150  # in million dollars\n\n    # Do math calculation to get the answer\n    # Calculate the total outflow of funds\n    total_outflows = loan_applications + treasury_bonds + corporate_client_withdrawals\n    # Calculate the total inflow of funds\n    total_inflows = total_funds_received_today + expected_funds_next_week\n\n    # Calculating the discrepancy\n    discrepancy = total_inflows - total_outflows\n\n    # return answer in million dollars\n    return discrepancy\n\n# The following line can be used to test the program and print the result.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-672",
        "question": "If a foreign exchange broker determined the correlation between the spot and futures to be 0.875, the yearly standard deviation of the spot price to be $1.10, and the yearly standard deviation of the futures price to be $1.3. What would be the hedge ratio?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.875\n    std_dev_spot = 1.10\n    std_dev_futures = 1.3\n    \n    # Do math calculation to get the answer\n    hedge_ratio = correlation * (std_dev_spot / std_dev_futures)\n    \n    # return answer\n    return hedge_ratio\n\n# Uncomment the line below to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-673",
        "question": "Based on the data provided in the table below, Henry is getting ready to reassess the worth of XYZ Corp. The business anticipates a return on equity (ROE) of 34.5% in 2017, but it's expected to gradually decrease towards the cost of equity afterward. From the start of 2015, utilizing the multi-stage residual income (RI) model, determine the fundamental value of XYZ Corp's equity. Can you calculate the fundamental price per share?",
        "tables": [
            "| Book value per share, beginning of 2015 | 5.0 |\n| --------------------------------------- | --- |\n| Cost of equity                          | 8%  |\n| Persistence factor                      | 0.85|",
            "|                       | 2015 | 2016 | 2017 |\n|-----------------------|------|------|------|\n| Expected earnings per share | 2.0  | 2.2  | 2.45 |\n| Expected dividend per share | 1.2  | 0.9  | 1.11 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the fundamental price per share using the multi-stage residual income model, we need to:\n\n1. Calculate the Residual Income (RI) for each year.\n2. Apply the persistence factor to future RIs.\n3. Calculate the terminal value at the end of 2017 assuming the residual income will fade to zero at a constant rate equal to the cost of equity after that point.\n4. Discount all those values to present value using the cost of equity.\n\nTo calculate RI for each year, we use the formula:\n\n\\[ RI = (ROE - r) \\times BV \\]\nWhere:\n- \\( ROE \\) = Return on Equity\n- \\( r \\) = Cost of equity\n- \\( BV \\) = Book value per share\n\nHere is the Python program to find the fundamental price per share:\n\n```python\ndef solution():\n    # Define variables name and value\n    bv_2015 = 5.0\n    roe_2017 = 0.345\n    cost_of_equity = 0.08\n    persistence_factor = 0.85\n    \n    # Expected earnings and dividends\n    earnings = [2.0, 2.2, 2.45]\n    dividends = [1.2, 0.9, 1.11]\n    \n    # Calculate book values at the end of each year\n    bv = [bv_2015]  # Start with the initial book value\n    for i in range(len(earnings)):\n        bv.append(bv[-1] + earnings[i] - dividends[i])  # BV = previous BV + earnings - dividends\n    \n    # RI for 2017\n    ri_2017 = (roe_2017 - cost_of_equity) * bv[-2]  # Use 2016 BV for 2017 RI\n    \n    # Calculate the terminal value at the end of 2017\n    terminal_value = ri_2017 * persistence_factor / (cost_of_equity - persistence_factor * cost_of_equity)\n    \n    # Discount the RIs and Terminal value to present value\n    present_value_ri = sum([(roe_2017 - cost_of_equity) * bv[i] / (1 + cost_of_equity)**(i + 1) for i in range(len(earnings))])\n    present_value_terminal = terminal_value / (1 + cost_of_equity)**len(earnings)\n    \n    # The fundamental value of XYZ Corp's equity is the sum of PVs and the initial book value\n    fundamental_value = bv_2015 + present_value_ri + present_value_terminal\n    \n    # return answer\n    return fundamental_value\n    \n# Call the function to get the result\nprint(solution())\n```\n\nRun this program to calculate the fundamental price per share for XYZ Corp based on the given data. Let me clarify that as this is a Python pseudo-code, there may be a need for minor adjustments according to the real market data and Python versions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-674",
        "question": "What is the likelihood that a stock B from the stock market, with an average return of 18 percent and a standard deviation of the estimate return of 25 percent annually, exceeds a return of 22 percent, assuming the returns are normally distributed? A market researcher is currently investigating this.",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this problem, we can use the properties of the normal distribution to find the probability that the return exceeds 22%. We'll calculate the Z-score for a return of 22%, and then use the cumulative distribution function (CDF) of the standard normal distribution to find the probability of having a return less than 22%. We'll subtract this value from 1 to get the probability of exceeding 22%.\n\nHere's the Python program that implements this:\n\n```python\n# Import package if needs\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    avg_return = 0.18\n    std_dev = 0.25\n    target_return = 0.22\n    \n    # Calculate the Z-score for a 22% return\n    z_score = (target_return - avg_return) / std_dev\n    \n    # Find the probability that the return is less than 22% using the CDF\n    probability_less_than_22 = norm.cdf(z_score)\n    \n    # Subtract from 1 to get the probability of exceeding 22%\n    probability_exceeding_22 = 1 - probability_less_than_22\n    \n    # return answer\n    return probability_exceeding_22\n\n# You can call the function and print the result if you wish\n# print(solution())\n```\n\nThe program uses `scipy.stats.norm.cdf` to calculate the cumulative distribution function for a given Z-score. The rest of the program is straightforward arithmetic operations based on the problem statement."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-675",
        "question": "Imagine in 2017, a USD/EUR spot exchange rate hits 1.2865 at a certain period. The one-year forward rate then is 1.28485. What would be the one-year forward points quoted as?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is the Python program that calculates the one-year forward points:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 1.2865\n    forward_rate = 1.28485\n    \n    # Do math calculation to get the answer\n    forward_points = (forward_rate - spot_rate) * 10000\n    \n    # return answer\n    return forward_points\n\n# You can call the function and print the result\n# print(solution())\n```\n\nThe forward points are calculated by subtracting the spot rate from the forward rate and then converting the result into \"points\" by multiplying by 10,000. This is a common convention because forward rates are often quoted in terms of points, which are the fourth decimal place of the exchange rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-676",
        "question": "Fortune Corporation has a tax burden of 70%, interest burden of 0.8 times, current ratio of 1.5 times, EBIT margin of 20%, asset turnover of 3 times, leverage ratio of 1.6 times. Can you compute the corporation's return on equity?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Certainly! To compute the return on equity for Fortune Corporation, we can use the extended DuPont equation, which breaks down the return on equity (ROE) into five components: tax burden, interest burden, EBIT margin, asset turnover, and leverage ratio.\n\nHere is the Python program that calculates the return on equity given the provided values:\n\n```python\ndef solution():\n    # Define variables name and value\n    tax_burden = 0.70          # After-tax income / Earnings before taxes\n    interest_burden = 0.8      # Earnings before taxes / Earnings before interest and taxes\n    ebit_margin = 0.20         # Earnings before interest and taxes / Sales\n    asset_turnover = 3         # Sales / Total assets\n    leverage_ratio = 1.6       # Average Total assets / Average Shareholders' equity\n    \n    # Do math calculation to get the answer\n    # Return on Equity (ROE) is calculated as follows:\n    roe = tax_burden * interest_burden * ebit_margin * asset_turnover * leverage_ratio\n    \n    # return answer\n    return roe\n\n# Calling the function and printing the result\nprint(solution())\n```\n\nThis function will calculate the return on equity by multiplying all the terms related to the components of the DuPont equation, which represents the ROE."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-677",
        "question": "The value of the stocks portfolio stands at $10,000,000. The company intends to utilize futures contracts valued at $125,000 to bring down the beta from 1.2 to zero over a span of two months. The beta value of these futures contracts is 0.95. How many futures contracts should the company sell?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To calculate the number of futures contracts the company needs to sell, we will have to determine the hedge ratio and then calculate how many contracts are needed to bring the portfolio beta to zero.\n\nThe formula for the hedge ratio is:\n\n\\[ \\text{Hedge Ratio} = \\frac{\\text{Portfolio Beta} - \\text{Target Beta}}{\\text{Futures Contract Beta}} \\]\n\nAnd once we have the hedge ratio, we can calculate the number of contracts by dividing the total value of the portfolio by the value of one futures contract and then multiplying by the hedge ratio:\n\n\\[ \\text{Number of Contracts} = \\text{Hedge Ratio} \\times \\frac{\\text{Portfolio Value}}{\\text{Futures Contract Value}} \\]\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 10000000\n    futures_contract_value = 125000\n    portfolio_beta = 1.2\n    target_beta = 0\n    futures_beta = 0.95\n    \n    # Calculate hedge ratio\n    hedge_ratio = (portfolio_beta - target_beta) / futures_beta\n    \n    # Calculate the number of futures contracts\n    number_of_contracts = (hedge_ratio * portfolio_value) / futures_contract_value\n    \n    # return answer rounded to the nearest whole number as you can't sell a fraction of a contract\n    return round(number_of_contracts)\n\n# Example usage:\n# number_of_contracts_needed = solution()\n# print(f\"The company should sell {number_of_contracts_needed} contracts.\")\n```\n\nRunning the `solution()` function will give us the number of futures contracts that the company should sell to hedge its portfolio. Let's implement and run this function to get the required number of contracts:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 10000000\n    futures_contract_value = 125000\n    portfolio_beta = 1.2\n    target_beta = 0\n    futures_beta = 0.95\n    \n    # Calculate hedge ratio\n    hedge_ratio = (portfolio_beta - target_beta) / futures_beta\n    \n    # Calculate the number of futures contracts\n    number_of_contracts = (hedge_ratio * portfolio_value) / futures_contract_value\n    \n    # return answer rounded to the nearest whole number as you can't sell a fraction of a contract\n    return round(number_of_contracts)\n\n# Call the function and print the result\nnumber_of_contracts_needed = solution()\nprint(f\"The company should sell {number_of_contracts_needed} contracts.\")\n```\n\nWhen run, the function `solution()` will calculate and print how many futures contracts the company should sell to hedge the portfolio as specified in the problem statement."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-678",
        "question": "What is the income tax expense listed on this year's earnings statement for a corporation for the current fiscal year?",
        "tables": [
            "| Accounting profit (earnings before taxes) | $250,000 |\n|---|---|\n| Taxable income | $215,000 |\n| Tax rate | 30% |\n| Income taxes paid in year | $61,200 |\n| Deferred tax liability, start of year | $82,400 |\n| Deferred tax liability, end of year | $90,650 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 215000\n    tax_rate = 0.30\n    income_taxes_paid = 61200\n    deferred_tax_liability_start = 82400\n    deferred_tax_liability_end = 90650\n\n    # Calculate the income tax expense\n    # It consists of the current tax expense (taxable income * tax rate) \n    # and the change in deferred tax liability\n    current_tax_expense = taxable_income * tax_rate\n    change_in_deferred_tax_liability = deferred_tax_liability_end - deferred_tax_liability_start\n    income_tax_expense = current_tax_expense + change_in_deferred_tax_liability\n\n    # return answer\n    return income_tax_expense\n\n# Call the function and print the result for verification (if necessary)\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-679",
        "question": "If she chooses to temporarily hedge the 100,000 shares of Apoth she possesses until the FDA's review concludes, how many option X contracts would Smith need to sell to effectuate the hedge plan, based on the information in Exhibit 2?",
        "tables": [
            "| Option        | W     | X     | Y     | z     |\n|---------------|-------|-------|-------|-------|\n| Type of Option| Call  | Call  | Put   | Put   |\n| Exercise Price| $38.00| $46.00| $38.00| $36.00|\n| N (d1)        | 0.56  | 0.30  | 0.56  | 0.64  |\n| N (d2)        | 0.45  | 0.21  | 0.45  | 0.553 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To determine the number of option contracts required to hedge a stock position, we can use delta hedging. Delta (Δ) represents the rate of change between the option price and a $1 change in the underlying asset price. Delta can be interpreted as a hedge ratio, and for call options, it can be approximated using the N(d1) value, which represents the cumulative probability under the normal distribution up to a certain point.\n\nFor a call option, Delta is N(d1) and it represents the equivalent position in the underlying asset. Since Smith wants to hedge 100,000 shares of Apoth, we will use the N(d1) value for option X and calculate the number of contracts needed to create a delta-neutral position.\n\nThe formula for calculating the number of contracts required for the hedge is:\n\nnumber_of_contracts = (number_of_shares_to_hedge * Delta) / (100 * option_multiplier)\n\nAssuming the option multiplier is 100 shares per contract (which is standard for equity options in the US), we can compute the required number of contracts. Here's the program to calculate that:\n\n```python\ndef solution():\n    # Define variables name and value\n    number_of_shares_to_hedge = 100000\n    N_d1_for_option_X = 0.30\n    option_multiplier = 100\n    \n    # Do math calculation to get the answer\n    # Calculate the hedge ratio (how many shares one option contract represents)\n    hedge_ratio = N_d1_for_option_X * option_multiplier\n    \n    # Calculate the number of option contracts needed for the hedge\n    number_of_contracts = number_of_shares_to_hedge / hedge_ratio\n    \n    # Round up to the nearest whole contract since we can't sell a fraction of a contract\n    number_of_contracts = int(number_of_contracts) if number_of_contracts.is_integer() else int(number_of_contracts) + 1\n    \n    # return answer\n    return number_of_contracts\n\n# Call the function and print the answer\nprint(solution())\n```\n\nPlease note that in practice, other factors such as transaction costs, bid-ask spread, and the liquidity of the options market might influence the actual number of contracts traded. Additionally, in a real trading scenario, more sophisticated models than the simple Delta approximation could be used for hedging purposes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-680",
        "question": "Let's assume there's an $80 million exposure to a certain business partner that's backed by $70 million worth of collateral. This collateral is made up of bonds from a company with an A-level rating. The business partner holds a B+ rating. With a 150% risk weight for the business partner and a 50% risk weight for the collateral, what would the risk-weighted assets be for the exposure using a straightforward approach?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    exposure = 80000000\n    collateral_value = 70000000\n    risk_weight_business_partner = 1.50\n    risk_weight_collateral = 0.50\n    \n    # Calculate the risk-weighted exposure for the business partner\n    risk_weighted_exposure = exposure * risk_weight_business_partner\n    \n    # Calculate the risk-weighted exposure for the collateral\n    risk_weighted_collateral = collateral_value * risk_weight_collateral\n    \n    # Risk-weighted assets are the risk-weighted exposure minus the risk-weighted collateral\n    risk_weighted_assets = risk_weighted_exposure - risk_weighted_collateral\n    \n    # return answer\n    return risk_weighted_assets\n    \n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate the risk-weighted assets for the exposure given the inputs and risk weights provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-681",
        "question": "If Thompson, a credit analyst, is planning to use the data from a 5-year corporate bond labeled Bond E that is presently yielding a return of 7.5%, with a comparable government bond offering 2.5%, and a suitable CDS contract bearing a credit spread of 4.5% to carry out a basis trade, what will be the accrued profit if there's a convergence in the bond and CDS market?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, here is a Python program to calculate the accrued profit from the convergence in the bond and CDS market under the described scenario:\n\n```python\ndef solution():\n    # Define the yields for the corporate bond, government bond, and the credit spread for the CDS\n    corporate_bond_yield = 0.075\n    government_bond_yield = 0.025\n    cds_credit_spread = 0.045\n    \n    # Calculate the starting difference between the corporate bond yield and the CDS spread (the initial basis)\n    initial_basis = corporate_bond_yield - government_bond_yield\n    \n    # Calculate the ending difference after the convergence (the final basis assumed to be the CDS spread)\n    final_basis = cds_credit_spread\n    \n    # The profit is the narrowing of the spread (initial_basis - final_basis)\n    profit = initial_basis - final_basis\n    \n    # return the accrued profit\n    return profit\n\n# Call the function and print the result\nprint(\"The accrued profit from the convergence is:\", solution())\n```\n\nThis program does not consider any notional amount or the actual trade mechanics. It merely calculates the spread convergence as the profit which assumes a basis point move translates directly into profit which may not be true in an actual trading scenario. For an actual trade, the position size and the price move of the respective instruments would be necessary to calculate the real profit or loss."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-682",
        "question": "Assuming that Corporation N's pretax profits are taxed at the business level of 35%, and the individual tax rate on dividends is at 15%. All the pretax income are dedicated to dividends. What is the effective tax rate on the dividend?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define the tax rates\n    corporate_tax_rate = 0.35\n    individual_tax_rate = 0.15\n    \n    # Calculate the effective tax rate on the dividend\n    # First, calculate the after-corporate tax amount\n    after_corporate_tax = 1 - corporate_tax_rate\n    \n    # Next, calculate the amount left after individual tax\n    after_individual_tax = after_corporate_tax * (1 - individual_tax_rate)\n    \n    # Finally calculate the effective tax rate\n    effective_tax_rate = 1 - after_individual_tax\n    \n    # return the effective tax rate\n    return effective_tax_rate\n    \n# Call the function to check the result\nprint(solution())\n```\n\nWhen you run the provided Python program, the returned value will be the effective tax rate on the dividend given the tax rates for corporation N."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-683",
        "question": "In her role at the Equity investment company, Fabian, a CFA, is preparing a research report on a company known as PZ, which is listed in HK and follows IFRS 9. She pulled information from PZ's year-end 2019 financial report regarding three fixed income investments (assuming cost equals par value). Had Shoes Corp been classified as a Fair Value through P/L in 2019, what would the earnings before taxes have been?",
        "tables": [
            "|       | Classification | Cost   | Market value 2018 | Market value 2019 |\n|-------|----------------|--------|-------------------|-------------------|\n| Shoes Corp | FVOCI   | 12,000 | 15,000  | 16,000  |\n| Angle PD   | Amortized cost  | 35,000 | 32,000  | 33,000  |\n| T-vision   | FVPL   | 42,000 | 45,000  | 56,000  |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the earnings before taxes assuming Shoes Corp had been classified as Fair Value through P/L (FVTPL), we will first need to calculate the gain or loss that would have been recognized in P&L due to the revaluation of Shoes Corp from cost to market value at the end of 2019.\n\nShoes Corp is currently classified as FVOCI (Fair Value through Other Comprehensive Income), which means changes in fair value are not recognized in profit or loss but in other comprehensive income. However, if it was classified as FVTPL, changes in its fair value would directly affect earnings.\n\nHere's the calculation we need to make:\n\n1. Calculate the difference between the market value and the cost of Shoes Corp for 2019, which gives us the unrealized gain.\n2. Since no other gain or loss from the revaluation of Shoes Corp is mentioned to be included in earnings before taxes, we would assume that the entire difference calculated in step 1 would be the impact on earnings before taxes.\n\nHere is the program to calculate the earnings before taxes:\n```python\ndef solution():\n    # Define variables name and value\n    cost_shoes_corp = 12000\n    market_value_2019_shoes_corp = 16000\n    # If Shoes Corp was FVTPL, gain/loss would have been recognized in P&L\n    unrealized_gain_fvtpl = market_value_2019_shoes_corp - cost_shoes_corp\n    \n    # According to the question, we need to consider the earnings before taxes with this unrealized gain\n    # Assuming the current earnings before taxes have already accounted for the FVOCI classification,\n    # which means there was no impact from the revaluation of Shoes Corp on this figure. \n    # So we only add the unrealized gain.\n    earnings_before_taxes = unrealized_gain_fvtpl\n    \n    # return answer\n    return earnings_before_taxes\n\n# Execute the function and print the result\nprint(solution())\n```\n\nRunning this program will give you the difference between the carrying amount and market value for Shoes Corp had it been classified as FVTPL, which is the hypothetical impact on earnings before taxes for PZ."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-684",
        "question": "The current value of a European-style put option is set to be determined by a CEO using a two-period binomial model. The present stock price is $32, with the put option's exercise price also at $32. The up and down factors are 1.12 and 0.92 respectively, with a risk-free rate of 5%. What is the value of this put option?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    S = 32          # Current stock price\n    K = 32          # Exercise price of the put option\n    u = 1.12        # Up factor\n    d = 0.92        # Down factor\n    r = 0.05        # Risk-free rate for the period\n    R = 1 + r       # Risk-free return\n\n    # Calculate the final possible prices of the stock\n    Suu = S * u * u\n    Sud = S * u * d    # This is the same as S * d * u which is Sdu\n    Sdd = S * d * d\n\n    # Calculate the payoffs for the put at the end of the second period\n    Puu = max(0, K - Suu)\n    Pud = max(0, K - Sud)  # This is the same as Pdu\n    Pdd = max(0, K - Sdd)\n\n    # Calculate risk-neutral probabilities\n    p = (R - d) / (u - d)\n    q = 1 - p\n\n    # Calculate the expected option value at the end of the first period\n    Pu = (p * Puu + q * Pud) / R\n    Pd = (p * Pud + q * Pdd) / R\n\n    # Finally, calculate the present value of the expected payoffs\n    P = (p * Pu + q * Pd) / R\n\n    # Return the answer\n    return P\n\n# Function call to check the result\nprint(solution())\n```\nThis Python program calculates the current value of a European-style put option using a two-period binomial model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-685",
        "question": "The 15-month investment duration for a bond yielded a 12% return. What is the annualized yield?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here is a Python program to calculate the annualized yield based on the given information:\n\n```python\nfrom math import pow\n\ndef solution():\n    # Define variables name and value\n    monthly_return = 0.12\n    investment_duration_months = 15\n\n    # Convert months to years for annualization\n    investment_duration_years = investment_duration_months / 12\n\n    # The annualized return is calculated by (1 + return)^(1/years) - 1\n    annualized_yield = pow(1 + monthly_return, 1 / investment_duration_years) - 1\n\n    # return answer\n    return annualized_yield\n\n# Example usage:\n# print(solution())\n```\n\nWhen you run `print(solution())`, it will give you the annualized yield based on a 12% return over a 15-month investment duration."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-686",
        "question": "A manager of an endowment fund is assessing the market risk of Omega Manufacturing Fund. The fund projects an annual return of 7.1% and a volatility of 7.9%, and it is compared against the Russell 2000 Index. It is assumed by the manager that the anticipated annual return of the Russell 2000 Index is 7.8%, with a yearly volatility of 9.8%. In accordance with the Capital Asset Pricing Model, if the risk-free rate per year is 3.2%, what would be the beta of Omega Manufacturing Fund?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "The Beta (β) of a stock or portfolio is a measure of its volatility in relation to the market. According to the Capital Asset Pricing Model (CAPM), the expected return of a portfolio or a stock is related to its beta. The CAPM equation is as follows:\n\n```\nE(Ri) = Rf + βi * (E(Rm) - Rf)\n```\n\nwhere:\nE(Ri) = Expected return of investment (portfolio or stock)\nRf = Risk-free rate\nβi = Beta of the investment\nE(Rm) = Expected return of the market\n\nFor Omega Manufacturing Fund, we can calculate the beta by rearranging the CAPM formula to solve for βi:\n\n```\nβi = (E(Ri) - Rf) / (E(Rm) - Rf)\n```\n\nLet's plug in the values and calculate the beta.\n\n```python\ndef solution():\n    # Define variables name and value\n    omega_expected_return = 7.1  # Omega Manufacturing Fund expected annual return\n    omega_volatility = 7.9  # Omega Manufacturing Fund annual volatility (not used in this calculation)\n    russell_expected_return = 7.8  # Russell 2000 Index anticipated annual return\n    russell_volatility = 9.8  # Russell 2000 Index yearly volatility (not used in this calculation)\n    risk_free_rate = 3.2  # Risk-free rate per year\n    \n    # Do math calculation to get the answer\n    beta_omega = (omega_expected_return - risk_free_rate) / (russell_expected_return - risk_free_rate)\n    \n    # return answer\n    return beta_omega\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen the program runs, it will calculate and return the beta of Omega Manufacturing Fund."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-687",
        "question": "What is the likelihood of the firm failing to fulfill its obligations on Bond C, a five-year investment-grade bond, within the initial 4 years, as per the given information?",
        "tables": [
            "| Year | Hazard Rate |\n|------|-------------|\n| 1    | 0.15%       |\n| 2    | 0.25%       |\n| 3    | 0.35%       |\n| 4    | 0.50%       |\n| 5    | 0.65%       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To compute the probability that the firm fails to fulfill its obligations on Bond C within the initial four years, we need to use the hazard rates. The hazard rate for a given period can be interpreted as the conditional probability that default occurs in that period, given that it has not yet occurred. \n\nThe overall probability of default within the initial four years is given by:\n\nP(default within 4 years) = P(default in year 1) + P(survive through year 1) * P(default in year 2) + P(survive through year 2) * P(default in year 3) + P(survive through year 3) * P(default in year 4)\n\nThis can be further simplified with the survival probability (S) and hazard rates (h):\n\nS(1) = 1 - h(1)\nS(2) = S(1) - S(1) * h(2)\nS(3) = S(2) - S(2) * h(3)\nS(4) = S(3) - S(3) * h(4)\n\nThen the overall probability of survival at the end of year 4 is:\nP(survive through 4 years) = S(4)\n\nAnd the overall probability of default within the initial four years is:\nP(default within 4 years) = 1 - S(4)\n\nLet's implement the program to calculate the probability:\n\n```python\ndef solution():\n    # Define hazard rates\n    hazard_rates = [0.0015, 0.0025, 0.0035, 0.0050]\n    \n    # Initialize survival probability\n    survival_probability = 1.0\n    \n    # Calculate survival probability at the end of each year\n    for rate in hazard_rates:\n        # Update survival probability\n        survival_probability *= (1 - rate)\n        \n    # The probability of default within the initial four years\n    probability_of_default = 1 - survival_probability\n    \n    # return the answer\n    return probability_of_default\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program initializes with a survival probability of 100% and deducts the probability of failing each year based on the given hazard rates. At the end of year four, the probability of default is subtracted from the survival probability to get the likelihood of the firm failing within the initial four years."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-688",
        "question": "If the neckline is positioned at €100, the shoulders at €90, and the head at €75 in a reversed head and shoulders pattern, what is the target value?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    neckline = 100\n    head = 75\n    \n    # Do math calculation to get the answer\n    # The target value in a reverse head and shoulders pattern is typically calculated\n    # by measuring the vertical distance from the head to the neckline and then adding\n    # this distance to the neckline. This gives the minimum expected upward movement.\n    target_value = neckline + (neckline - head)\n    \n    # return answer\n    return target_value\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-689",
        "question": "What is the monthly repayment for a customer who buys a car with a loan of €30,000 that is set to be paid off in five years with fixed monthly installments, an annual nominal interest of 8% and interest compounded monthly?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 30000\n    annual_interest_rate = 0.08\n    loan_period_years = 5\n    periods_per_year = 12\n\n    # Convert annual interest rate to a monthly interest rate\n    monthly_interest_rate = annual_interest_rate / periods_per_year\n    \n    # Calculate the total number of payments\n    total_payments = loan_period_years * periods_per_year\n    \n    # Use the formula for calculating the fixed monthly payment on an amortized loan:\n    # P = [r*PV] / [1 - (1+r)^-n]\n    # Where P is the fixed monthly payment, r is the monthly interest rate, PV is the principal value\n    # and n is the total number of payments.\n    monthly_payment = (monthly_interest_rate * principal) / (1 - (1 + monthly_interest_rate) ** -total_payments)\n    \n    return monthly_payment\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-690",
        "question": "Assuming we select 20 students to sit for the university admission test, how many may potentially suffer from anxiety neurosis if it's believed that 45% of all examinees experience it?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_students = 20\n    percentage_suffering_anxiety = 0.45\n    \n    # Do math calculation to get the answer\n    students_suffering_anxiety = total_students * percentage_suffering_anxiety\n    \n    # return answer\n    return round(students_suffering_anxiety)\n\n# Example usage:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-691",
        "question": "At the beginning of the year, Brighton offset a major exposure to the Australian dollar (AUD) by selling AUD 5 million forward against the US dollar (USD) at the all-in forward price of 0.8940 (USD/AUD). Currently, it's three months away from the settlement date and Sanderson wants to mark the forward position to market. Exhibit 1 provides data on the current rates in foreign exchange markets. What is the mark-to-market value for Brighton's forward position?",
        "tables": [
            "| Spot rate (USD/AUD) | 0.9062/0.9066 |\n| --- | --- |\n| Three-month points | -36.8/-36.4 |\n| Three-month Libor (AUD) | 2.88% |\n| Three-month Libor (USD) | 0.23% |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To mark the forward position to market, we'll need to calculate the current forward rate using the spot rate and the points provided, and then compare it to the original agreed-upon forward rate to determine the gain or loss on the transaction. Here's how we could write a Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    original_forward_rate = 0.8940  # The all-in forward rate at which AUD was sold\n    spot_rate_bid = 0.9062  # The current spot rate bid (USD/AUD)\n    three_month_points_bid = -0.00364  # The three-month points bid (converted from -36.4 to decimal)\n    current_forward_rate_bid = spot_rate_bid + three_month_points_bid  # The current forward rate bid\n    notional_amount_AUD = 5000000  # The amount of AUD that was sold forward\n    \n    # Calculate the difference between the original and current forward rate\n    forward_rate_difference = original_forward_rate - current_forward_rate_bid\n    \n    # Calculate mark-to-market value by multiplying the rate difference with the notional amount\n    mark_to_market_value = forward_rate_difference * notional_amount_AUD\n    \n    # Return answer\n    return mark_to_market_value\n    \n# The following line is used to execute the function and print the result for verification purposes.\nprint(solution())\n```\n\nPlease note: When calculating the `current_forward_rate_bid`, the `three_month_points_bid` value has been converted from pip format (-36.4) to a decimal format required for the calculation by dividing it by 10,000. This is standard practice when dealing with FX points in financial markets.\n\nAlso, since Sanderson is marking to market a position where the AUD was sold, a positive mark-to-market value indicates a gain (i.e., the original forward rate was higher than the current forward rate), and vice versa for a loss."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-692",
        "question": "What is the worth of a share which is projected to pay a $3 dividend in the subsequent year, with a consistent growth rate of 3% and a needed return rate of 8%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that calculates the worth of a share based on the given dividend, growth rate, and required return rate using the Gordon Growth Model.\n\n```python\ndef solution():\n    # Define variables name and value\n    D1 = 3 # Next year projected dividend\n    g = 0.03 # Consistent growth rate\n    r = 0.08 # Required return rate\n    \n    # Do math calculation to get the answer\n    # The Gordon Growth Model (Dividend Discount Model for a perpetuity) formula is: P = D1 / (r - g)\n    worth_of_share = D1 / (r - g)\n    \n    # return answer\n    return worth_of_share\n\n# You can call the solution function and print the value or directly print it.\nprint(solution())\n```\n\nWhen you run this program, it will calculate and return the worth of the share."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-693",
        "question": "In a perfectly competitive market where the demand schedule is P = 165 - 3Q (for Q ≤ 55), how is the entry price for new players determined given that the long-term total cost for every business is 125 + Q + 5Q2, the average cost is 125/Q + 1 + 5Q, and the marginal cost is 1 + 10Q?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "In a perfectly competitive market, the entry price for new firms is determined at the point where the long-term average cost (AC) is equal to the market price (P), and where marginal cost (MC) is equal to the average cost and the demand price. This is the point of entry because firms will not enter the market if they cannot at least break even in the long run.\n\nThe demand schedule is given as P = 165 - 3Q (for Q ≤ 55), and we have the total cost (TC) function as 125 + Q + 5Q^2, which gives us the average cost (AC) function as 125/Q + 1 + 5Q, and the marginal cost (MC) function as 1 + 10Q.\n\nThus, we want to find the value of Q where AC = MC = P. Setting AC = MC gives us:\n\n125/Q + 1 + 5Q = 1 + 10Q\n\nWe solve this equation to find the value of Q at which a new firm will enter the market, then we substitute this Q back into the demand schedule to find the entry price P.\n\nLet's create a Python program to calculate this:\n\n```python\nfrom sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol for quantity (Q)\n    Q = symbols('Q')\n    \n    # Write down the average cost (AC) and marginal cost (MC) equations\n    AC = 125/Q + 1 + 5*Q\n    MC = 1 + 10*Q\n    \n    # Set up the equation AC = MC and solve for Q\n    equation = Eq(AC, MC)\n    quantity_at_entry = solve(equation, Q)\n    \n    # Since we can have multiple solutions, we choose the one where Q is positive and\n    # less than or equal to 55 (as given in the demand function constraint)\n    entry_quantity = next(q for q in quantity_at_entry if q > 0 and q <= 55)\n    \n    # Now use the entry quantity to find the entry price from the demand schedule\n    entry_price = 165 - 3*entry_quantity\n    \n    # return the entry price\n    return entry_price\n\n# call to the function\nresult = solution()\nprint(\"Entry Price:\", result)\n```\n\nThis program solves for the entry quantity where AC = MC and then finds the corresponding entry price using the demand function. Note that we chose to use Sympy for solving as it allows us to handle algebraic equations symbolically and find analytical solutions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-694",
        "question": "A buyer acquires a five-year bond with a 4% annual coupon for 104.58 and sells it precisely three years subsequent to the purchase. Right after the bond is bought and prior to receiving the first coupon, interest rates drop to 2.25%, and they stay at this rate for the following three years. Assuming that the coupon payments are collected and re-invested at 2.25%, what is the buyer's actualized horizon yield?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's how you might create a Python program to calculate the actualized horizon yield, taking into account the given scenario:\n\n```python\ndef solution():\n    # Variables given in the problem\n    bond_purchase_price = 104.58  # price at which the bond was bought\n    years_to_maturity_at_purchase = 5  # initial maturity of bond\n    coupon_rate = 0.04  # 4% annual coupon\n    annual_coupon_payment = coupon_rate * 100  # The face value of the bond is usually $100\n    new_interest_rate = 0.0225  # new interest rate after purchase: 2.25%\n    years_held = 3  # number of years bond is held\n    remaining_years = years_to_maturity_at_purchase - years_held\n    \n    # Calculate the Future Value (FV) of coupon payments reinvested at the new interest rate.\n    # A geometric series formula for the future value of an annuity can be used.\n    fv_coupons = annual_coupon_payment * (((1 + new_interest_rate) ** years_held - 1) / new_interest_rate)\n    \n    # Value of the bond after three years using the new interest rate\n    bond_value_after_3_years = annual_coupon_payment * ((1 - (1 + new_interest_rate) ** -remaining_years) / new_interest_rate) + 100 / ((1 + new_interest_rate) ** remaining_years)\n    \n    # Combining the Future Value of coupons with the bond's future value to get total future value\n    future_value = fv_coupons + bond_value_after_3_years\n    \n    # Calculate the actualized yield by taking the (n)th root of (future value / initial value) - 1\n    # where n is the number of years the bond is held.\n    actualized_yield = (future_value / bond_purchase_price) ** (1 / years_held) - 1\n\n    # Return the annualized yield as a percentage\n    return actualized_yield * 100\n    \n# Call the function to get the actualized yield\nprint(solution())\n```\n\nThis program defines the variables, calculates the future value of the coupons, calculates the bond's value after three years using the new interest rate, combines these to determine the future value of the investment, and finally calculates the actualized yield given the time period the bond was held. The coupon rate and the new interest rate are converted to decimals for calculation purposes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-695",
        "question": "The exhibit below details Bond H, which is set for sale on 16 June 2014. Considering the factors below, can you calculate the accrued interest for every 100 of par value for Bond H on the settlement day of 16 June 2014? The factors are: Annual Coupon - 5%, Coupon Payment Frequency - Semiannual, Interest Payment Dates - 10 April and 10 October, Maturity Date - 10 October 2016, Day Count Convention - 30/360, Annual Yield-to-Maturity - 4%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the accrued interest for Bond H on the settlement date of 16 June 2014, we need to know the time that has passed since the last interest payment date. Given the day count convention of 30/360, we will assume each month has 30 days and each year has 360 days. The last interest payment occurred on 10 April 2014, and we are calculating accrued interest up to 16 June 2014.\n\nHere's the Python program to calculate the accrued interest:\n\n```python\nfrom datetime import datetime\n\ndef solution():\n    # Given variables\n    annual_coupon_rate = 0.05\n    coupon_payment_frequency = 2  # Semiannual\n    maturity_date = datetime(2016, 10, 10)  # Ignored for this calculation\n    annual_yield_to_maturity = 0.04  # Ignored for this calculation\n    par_value = 100  # Par value per 100\n\n    # Previous and settlement date\n    previous_interest_date = datetime(2014, 4, 10)\n    settlement_date = datetime(2014, 6, 16)\n\n    # Calculate the number of days since the last coupon date using 30/360 convention\n    days_passed = (settlement_date.year - previous_interest_date.year) * 360\n    days_passed += (settlement_date.month - previous_interest_date.month) * 30\n    days_passed += (settlement_date.day - previous_interest_date.day)\n\n    # Calculate the coupon amount per period\n    coupon_per_period = (annual_coupon_rate / coupon_payment_frequency) * par_value\n\n    # Calculate the accrued interest\n    accrued_interest = coupon_per_period * (days_passed / 360)\n\n    return accrued_interest\n\n# Print the answer to check\nprint(solution())\n```\n\nThis will compute and return the accrued interest for Bond H on the settlement date of 16 June 2014 based on every $100 of par value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-696",
        "question": "The corporation Successful Inc. has an operating profit margin of 10%, an asset turnover ratio of 1.5, a financial leverage multiplier of 1.6 times, and an interest burden of 0.8. The firm's ROE is 0.144, can you compute the firm's average tax rate?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Certainly! Below is the Python program that computes the firm's average tax rate using the given data and the DuPont Identity.\n\nThe DuPont Identity states that:\n\nROE = (Net Profit Margin) * (Asset Turnover) * (Equity Multiplier)\n\nWhere:\n\nNet Profit Margin = Operating Profit Margin * Interest Burden * Tax Burden\n\nSince we already have values for ROE, Operating Profit Margin, Asset Turnover, the Equity Multiplier, and the Interest Burden, we can solve for the tax burden which is `(1 - Average Tax Rate)` and then solve for the average tax rate.\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_profit_margin = 0.10\n    asset_turnover = 1.5\n    financial_leverage_multiplier = 1.6\n    interest_burden = 0.8\n    roe = 0.144\n    \n    # Use the DuPont Identity to solve for Net Profit Margin\n    net_profit_margin = roe / (asset_turnover * financial_leverage_multiplier)\n    \n    # Solve for Tax Burden (which is 1 - Average Tax Rate)\n    pre_tax_margin = operating_profit_margin * interest_burden\n    tax_burden = net_profit_margin / pre_tax_margin\n    \n    # Solve for the Average Tax Rate\n    average_tax_rate = 1 - tax_burden\n    \n    # return answer\n    return average_tax_rate\n\n# Running the solution function\nprint(solution())\n```\n\nIn this program, by running the `solution()` function, we will get the average tax rate for \"Successful Inc.\" based on the provided financial ratios and the following relationships described by the DuPont Identity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-697",
        "question": "A financial expert collects the following data for an equal-weighted index made up of assets Alpha, Beta, and Gamma: What is the total return of the index?",
        "tables": [
            "| Security | Beginning of Period Price (€) | End of Period Price (£) | Total Dividends (€) |\n|----------|-------------------------------|-------------------------|----------------------|\n| Able     | 10.00                          | 12.00                   | 0.75                 |\n| Baker    | 20.00                          | 19.00                   | 1.00                 |\n| Charlie  | 30.00                          | 30.00                   | 2.00                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "It seems there is a mix-up in the data provided and the declared assets (Alpha, Beta, Gamma) in the question text. The table mentions securities Able, Baker, Charlie, not Alpha, Beta, and Gamma.\n\nFor the calculation, I will proceed with assuming that the securities mentioned in the table are the ones included in the equal-weighted index. The total return for each security is calculated by dividing the sum of the end of period price and total dividends by the beginning of period price, then subtracting one. To find the total return for the index, we calculate the average of the total returns of all the components.\n\nThe provided table lists prices in Euros (€) and British Pounds (£), which introduces a complication; for simplicity, unless otherwise stated, I will ignore the currency conversion and treat all values as if they are in the same currency.\n\nHere's the Python program to calculate the answer:\n\n```python\ndef solution():\n    # Define variables name and value\n    securities = [\n        {'name': 'Able', 'beginning_price': 10.00, 'end_price': 12.00, 'dividends': 0.75},\n        {'name': 'Baker', 'beginning_price': 20.00, 'end_price': 19.00, 'dividends': 1.00},\n        {'name': 'Charlie', 'beginning_price': 30.00, 'end_price': 30.00, 'dividends': 2.00},\n    ]\n    \n    # Calculate individual total returns\n    total_returns = [\n        (security['end_price'] + security['dividends']) / security['beginning_price'] - 1\n        for security in securities\n    ]\n    \n    # Calculate total return of the index by averaging the total returns\n    index_total_return = sum(total_returns) / len(total_returns)\n    \n    # Return answer\n    return index_total_return\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the total return for each security and averages them to get the total return for the index. If currency conversion is needed, additional steps would have to be included to convert between Euros and Pounds."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-698",
        "question": "If we take 2016 as the base period, and the GDP in Nation Y for that year and the following year was $200 billion and $220 billion respectively, what would the GDP deflator be for 2017?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is a Python program to calculate the GDP deflator for 2017 using 2016 as the base period:\n\n```python\ndef solution():\n    # Define variables name and value\n    base_year_gdp = 200e9  # GDP for 2016 in dollars\n    current_year_gdp = 220e9  # GDP for 2017 in dollars\n    \n    # Do math calculation to get the answer\n    # The GDP deflator is a measure of the level of prices of all new,\n    # domestically produced, final goods and services in an economy.\n    # GDP deflator (base year) = (Nominal GDP / Real GDP) * 100\n    # For the base year, the nominal GDP is the same as the real GDP,\n    # so the deflator for the base year is always 100.\n    # For other years, we use the base year GDP as the real GDP.\n    gdp_deflator = (current_year_gdp / base_year_gdp) * 100\n    \n    # return answer\n    return gdp_deflator\n\n# calling the function and printing the result\nprint(solution())\n```\n\nNote that in this solution, we are using 'e9' as a shorthand for 'billion' which is 10^9. The GDP deflator for 2017 is calculated with respect to the base year, which is 2016, by dividing the nominal GDP of 2017 by the real GDP of 2016 (which is the same as the nominal GDP of 2016 in the base year), and then multiplying by 100 to express it as an index number."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-699",
        "question": "If every yearly trial is independent of each other, what's the probability that BBB company's stock, which has a 30% chance to increase annually, will go up more than once in the coming three years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program that calculates the probability of BBB company's stock increasing more than once in the coming three years:\n\n```python\nfrom math import comb\n\ndef solution():\n    # Define the probability to increase annually\n    p_increase = 0.30\n    # Total number of years\n    n_years = 3\n    \n    # Calculate probabilities using the binomial distribution formula\n    # P(X > 1) = 1 - P(X = 0) - P(X = 1)\n    # Where P(X = k) = comb(n, k) * p^k * (1-p)^(n-k)\n\n    # Probability stock does not increase over 3 years\n    p_0_times = comb(n_years, 0) * (p_increase ** 0) * ((1 - p_increase) ** (n_years - 0))\n    \n    # Probability stock increases exactly once over 3 years\n    p_1_time = comb(n_years, 1) * (p_increase ** 1) * ((1 - p_increase) ** (n_years - 1))\n    \n    # Subtract from 1 to get the probability it increases more than once\n    probability_more_than_once = 1 - (p_0_times + p_1_time)\n    \n    # return answer\n    return probability_more_than_once\n    \n# Output the result\nprint(solution())\n```\n\nThis program uses the binomial distribution formula to calculate the probabilities. Since every trial is independent, we first calculate the probabilities of the stock not increasing at all (X = 0) and increasing exactly once (X = 1) over the three-year period, and then subtract these probabilities from 1 to get the probability of the stock increasing more than once (X > 1)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-700",
        "question": "If an manager named Laurel from a finance firm recently built a portfolio with two unrelated assets, what would be the estimated standard deviation assuming equal weightage for both assets?",
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|---------------------------|-------------------------------|\n| A        | 20                        | 16                            |\n| B        | 20                        | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nfrom math import sqrt\n\ndef solution():\n    # Define variables name and value\n    weight_A = 0.5  # 50% of the portfolio in Security A\n    weight_B = 0.5  # 50% of the portfolio in Security B\n    std_dev_A = 16  # Standard deviation for security A\n    std_dev_B = 12  # Standard deviation for security B\n    \n    # Since the assets are unrelated, their covariance is 0\n    # The formula for the portfolio standard deviation is:\n    # std_dev_portfolio = sqrt(weight_A^2 * std_dev_A^2 + weight_B^2 * std_dev_B^2)\n    # where ^ denotes the exponentiation\n    \n    # Do math calculation to get the answer\n    std_dev_portfolio = sqrt((weight_A ** 2) * (std_dev_A ** 2) + (weight_B ** 2) * (std_dev_B ** 2))\n    \n    # return answer\n    return std_dev_portfolio\n\n# Example usage: print(solution())\n```\nThe function `solution` calculates the estimated standard deviation of the portfolio with equal weightage for both assets, assuming that the assets are unrelated, which implies that their covariance is zero. The formula applied is specific for the case when the covariance between the assets is zero. The actual real-world calculation could be more complex if the assets have some level of correlation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-701",
        "question": "The gross profit of the manufacturing company, Denali Limited, is equal to?",
        "tables": [
            "| Revenue | $4,000,000 |\n|---------|------------|\n| Cost of goods sold | $3,000,000 |\n| Other operating expenses | $500,000 |\n| Interest expense | $100,000 |\n| Tax expense | $120,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "Here is the Python program to calculate the gross profit.\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 4000000\n    cost_of_goods_sold = 3000000\n    \n    # Do math calculation to get the gross profit\n    gross_profit = revenue - cost_of_goods_sold\n    \n    # return answer\n    return gross_profit\n\n# You can call the function to test\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-702",
        "question": "Based on the provided data chart, what is the marginal product when the labor (L) equals 3?",
        "tables": [
            "| Labor(L) | Total Product(TP) | Average Product(AP) |\n|----------|-------------------|---------------------|\n| 1        | 100               | 100                 |\n| 2        | 210               | 105                 |\n| 3        | 300               | 100                 |\n| 4        | 360               | 90                  |\n| 5        | 400               | 80                  |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Total Product at L=2 and L=3\n    TP_2 = 210\n    TP_3 = 300\n    \n    # Do math calculation to get the answer\n    # Marginal Product for L=3 is the change in Total Product when L increases from 2 to 3\n    MP_3 = TP_3 - TP_2\n    \n    # return answer\n    return MP_3\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-703",
        "question": "What is the Paasche Index if we utilize the consumption basket for this year alongside the subsequent data from a three-item consumption goods basket, which we use to calculate inflation rate?",
        "tables": [
            "|                  |   Prior Year    |        |   Current Year   |        |\n|------------------|-----------------|--------|------------------|--------|\n|      Goods       |    Quantity     | Price  |    Quantity      | Price  |\n| 5 lb.bag sugar   |     150 bags    |  $3.12 |    180 bags      |  $2.92 |\n| 5 lb.bag flour   |     800 bags    |  $2.18 |    750 bags      |  $3.12 |\n| Frozen pizza(each)|    250          |  $2.90 |    250           |  $3.00 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the Paasche Price Index using the current year as the base period, we need to follow the given formula:\n\nPaasche Price Index (PPI) = (Σ(Current Year Price * Current Year Quantity) / Σ(Prior Year Price * Current Year Quantity)) * 100\n\nLet's define the program to calculate the Paasche Index:\n\n```python\ndef solution():\n    # Data from the table for Prior Year (price and quantity)\n    prior_year_data = {\n        'sugar': {'quantity': 150, 'price': 3.12},\n        'flour': {'quantity': 800, 'price': 2.18},\n        'pizza': {'quantity': 250, 'price': 2.90}\n    }\n    \n    # Data from the table for Current Year (price and quantity)\n    current_year_data = {\n        'sugar': {'quantity': 180, 'price': 2.92},\n        'flour': {'quantity': 750, 'price': 3.12},\n        'pizza': {'quantity': 250, 'price': 3.00}\n    }\n    \n    # Calculating Σ(Current Year Price * Current Year Quantity)\n    current_year_total = sum(\n        current_year_data[item]['price'] * current_year_data[item]['quantity']\n        for item in current_year_data\n    )\n    \n    # Calculating Σ(Prior Year Price * Current Year Quantity)\n    prior_year_total_same_qty = sum(\n        prior_year_data[item]['price'] * current_year_data[item]['quantity']\n        for item in current_year_data\n    )\n    \n    # Calculating the Paasche Price Index\n    paasche_index = (current_year_total / prior_year_total_same_qty) * 100\n    \n    # Returning the result\n    return paasche_index\n\n# Call the function to test it\nprint(solution())\n```\n\nWith this program, we calculate the Paasche Price Index by first summing the product of current year prices and quantities, then summing the product of prior year prices with the current year quantities to use as the denominator. Finally, we divide the former by the latter and multiply by 100 to get the Paasche Price Index."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-704",
        "question": "Assuming the heights of trees in a woodland area are normally distributed and the total number of trees exceeds 10,000. If a z-statistic was calculated using a sample of 200 trees and a 95% confidence interval for the sample mean height ranged from 11 to 35 meters, what would be the standard error of the mean height?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this problem, we can use the property of the 95% confidence interval for the sample mean in a normally distributed population. For a normally distributed data, a 95% confidence interval spans 1.96 standard deviations on either side of the mean (z-value associated with 97.5th percentile because 95% confidence level leaves 2.5% at each tail of the distribution).\n\nThe confidence interval gives us the range which is the difference between the upper and lower bounds of the interval. The standard error of the mean (SEM) is half of the width of the confidence interval divided by the z-value for a 95% confidence level. Given an upper bound of 35 and a lower bound of 11, the width of the interval is 35 - 11 = 24. Therefore, the standard error of the mean is 24 / 2 / 1.96.\n\nLet's write this as a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    upper_bound = 35\n    lower_bound = 11\n    confidence_level_z = 1.96  # Z-score for 95% confidence\n    \n    # Do math calculation to get the standard error\n    interval_range = upper_bound - lower_bound\n    standard_error = (interval_range / 2) / confidence_level_z\n    \n    # return answer\n    return standard_error\n\n# Optional: Call the function to test\nprint(solution())\n```\n\nWhen this program is run, it will calculate and return the standard error of the mean height."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-705",
        "question": "A researcher collects the following data for an equal-weighted index composed of assets X, Y, and Z: The total return of the index is:",
        "tables": [
            "| Security | Beginning of Period Price(E) | End of Period Price(E) | Total Dividends(E) |\n| --- | --- | --- | --- |\n| Able | 10.00 | 12.00 | 0.75 |\n| Baker | 20.00 | 19.00 | 1.00 |\n| Charlie | 30.00 | 30.00 | 2.00 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "It looks like the question provided does not include the necessary data (prices and dividends) for assets X, Y, and Z to calculate the total return of the index. The table given includes information for securities Able, Baker, and Charlie, but these are not mentioned in the question about the equal-weighted index. \n\nTo provide a calculation, let's assume you meant to use the securities Able, Baker, and Charlie for an equal-weighted index and that assets X, Y, and Z was a mistake in the question. \n\nHere's a Python program to calculate the total return of an equal-weighted index composed of securities Able, Baker, and Charlie:\n\n```python\ndef solution():\n    # Define variables name and value\n    securities_data = {\n        'Able': {'beginning_price': 10.00, 'end_price': 12.00, 'dividends': 0.75},\n        'Baker': {'beginning_price': 20.00, 'end_price': 19.00, 'dividends': 1.00},\n        'Charlie': {'beginning_price': 30.00, 'end_price': 30.00, 'dividends': 2.00},\n    }\n\n    # Calculate total return for each security\n    total_returns = [(data['end_price'] + data['dividends'] - data['beginning_price']) \n                     / data['beginning_price'] for security, data in securities_data.items()]\n    \n    # Since it's equal-weighted, the total return of the index is the average of the total returns\n    index_total_return = sum(total_returns) / len(total_returns)\n    \n    # Convert to percentage\n    index_total_return_percentage = index_total_return * 100\n    \n    # return answer\n    return index_total_return_percentage\n\n# Call the function and print the result\nprint('The total return of the index is:', solution(), '%')\n```\n\nThis will calculate the individual returns for each security and average them to find the total return for the index. It's also worth noting that the total return includes both capital gains (or losses) and dividends received."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-706",
        "question": "Smith is a tax consultant who offers tax enlightenment counsel to individual customers. One of Smith's client, Rose, is a U.S. citizen and resides in America. Rose recently came into ownership of AAPL shares from a family member who passed on. This departed family member was a resident of the U.S., which applies a \"step-up\" in basis at death. The deceased family member bought AAPL shares at a cost of $15,000 (inclusive of commissions and other spendings) two decades ago. When the family member passed away, the market value of the AAPL stock owned by them was $220,000, and recently Rose sold these shares for $190,000. Rose's capital gains tax rate sits at 20%. The tax obligation on the sale of the AAPL shares is:",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    step_up_basis = 220000  # Step-up basis at death\n    sale_price = 190000     # Sale price of the AAPL shares\n    capital_gains_tax_rate = 0.20  # Capital gains tax rate\n    \n    # Calculate the capital gain\n    capital_gain = sale_price - step_up_basis\n    \n    # Calculate the tax obligation\n    tax_obligation = capital_gain * capital_gains_tax_rate if capital_gain > 0 else 0\n    \n    # return answer\n    return tax_obligation\n    \n# Call the function and print the result\nprint(solution())  # Expected to print 0 since the sale price is less than the step-up basis\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-707",
        "question": "Using the provided frequency distribution table, can you determine the relative frequency of the third interval?",
        "tables": [
            "| Return,R         | Frequency |\n| ---------------- | --------- |\n| -5% up to 0%    | 1         |\n| 0% up to 5%     | 6         |\n| 5% up to 10%    | 4         |\n| 10% up to 15%   | 3         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program that will calculate the relative frequency of the third interval (5% up to 10%).\n\n```python\ndef solution():\n    # Define variables name and value\n    frequencies = [1, 6, 4, 3]\n    \n    # Do math calculation to get the answer\n    total_frequency = sum(frequencies)\n    third_interval_frequency = frequencies[2]\n    \n    relative_frequency_third_interval = third_interval_frequency / total_frequency\n    \n    # return answer\n    return relative_frequency_third_interval\n\n# Calling the function and printing the answer\nprint(solution())\n```\n\nWhen you run this code, it will calculate and print the relative frequency of the third interval based on the frequency distribution table given."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-708",
        "question": "Under American GAAP, what is the cash flow from operations?",
        "tables": [
            "| Net income | $55,000 |\n|---|---|\n| Depreciation | $60,000 |\n| Taxes paid | $25,000 |\n| Interest received | $5,000 |\n| Dividends received | $10,000 |\n| Cash received from sale of company's equipment | $40,000 |\n| Issuance of preferred stock | $45,000 |\n| Repurchase of common stock | $20,000 |\n| Purchase of machinery | $20,000 |\n| Issuance of bonds | $40,000 |\n| Debt retired through issuance of common stock | $45,000 |\n| Paid off long-term bank borrowings | $15,000 |\n| Profit on sale of building | $15,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate cash flow from operations under American GAAP (Generally Accepted Accounting Principles), we must adjust net income for transactions that impacted reported net income but did not involve cash flows from operating activities.\n\nCash flow from operations is calculated by starting with net income and adjusting it for items such as depreciation, changes in working capital, and other non-cash items.\n\nThe items from the provided table that are typically considered adjustments to net income for the cash flow from operating activities are:\n\n- Add back non-cash expenses such as Depreciation.\n- Adjust for the changes in operating assets and liabilities (not provided here, but items such as accounts receivable, inventory, accounts payable, etc. would be adjusted).\n- Interest received and dividends received are typically considered investing activity, but under U.S. GAAP, these can be included in either operating or investing sections. So these will be added as they typically are cash inflows.\n- Taxes paid is also an operating cash flow as it represents cash outflow related to operating expenses.\n\nOne-time gains or losses, proceeds from the sale of equipment, and cash flows related to financing activities like issuance of stock, repurchase of common stock, issuance of bonds, and payment of debt are not included in cash flows from operations.\n\nHere is the Python code to calculate it:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 55000\n    depreciation = 60000\n    taxes_paid = 25000\n    interest_received = 5000\n    dividends_received = 10000\n    profit_on_sale_of_building = 15000\n\n    # Do math calculation to get the answer\n    cash_flow_from_operations = (\n        net_income\n        + depreciation\n        - taxes_paid\n        + interest_received\n        + dividends_received\n        - profit_on_sale_of_building\n    )\n \n    # return answer\n    return cash_flow_from_operations\n\n# Calling the function to get the result\nprint(solution())\n```\n\nIn this calculation, we have subtracted taxes because they are a cash outflow that would have reduced net income. We also subtract the profit on sale of a building because it is a non-operating gain. The answer is the cash flow from operations under American GAAP based on the given information."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-709",
        "question": "What is the flat price for Bond H, discussed in the display below, which is scheduled for sale on the settlement date of 16 June 2014? Here are some considerations: The Annual Coupon is 5%, the Coupon Payment Frequency is semi-annually, Interest Payment Dates are 10 April and 10 October, the Maturity Date is 10 October 2016, the Day Count Convention is 30/360, and the Annual Yield-to-Maturity is 4%.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "In order to calculate the flat price for Bond H, we need to consider the present value of future cash flows, which in this case are the coupon payments and the principal payment at maturity.\n\nFor bonds like this, the cash flows consist of semi-annual interest payments and the repayment of the principal on the maturity date. The present value of each cash flow can be calculated using the following formula:\n\n\\[ \\text{Present value of }i^\\text{th}\\text{ cash flow} = \\frac{\\text{Cash flow}_i}{\\left(1 + \\frac{r}{n}\\right)^{nt_i}} \\]\n\nWhere:\n- \\( \\text{Cash flow}_i \\) = Amount of each coupon payment, or the principal amount in the case of the last payment.\n- r = Annual Yield-to-Maturity (as a decimal).\n- n = Number of compounding periods per year (semi-annually means n=2).\n- \\( t_i \\) = Number of years from the settlement date to the date of each cash flow.\n\nFor the 30/360 convention, each month is considered to have 30 days, and a year has 360 days. This simplifies interest calculations by treating all months as equally long.\n\nNow, let's write the Python program to compute the flat price for Bond H. Since we'll be dealing with dates, we'll use the `date` class from Python's `datetime` module to handle them.\n\n```python\nfrom datetime import date\n\ndef calculate_days_30_360(start_date, end_date):\n    \"\"\"Calculate the number of days between two dates using 30/360 convention\"\"\"\n    sy, sm, sd = start_date.year, start_date.month, start_date.day\n    ey, em, ed = end_date.year, end_date.month, end_date.day\n    # Adjust the days for both dates to be within 30\n    sd = min(sd, 30)\n    ed = min(ed, 30)\n    return 360 * (ey - sy) + 30 * (em - sm) + (ed - sd)\n\ndef solution():\n    # Define variables name and value\n    annual_coupon_rate = 0.05         # 5%\n    coupon_payment_frequency = 2      # semi-annually\n    settlement_date = date(2014, 6, 16)\n    maturity_date = date(2016, 10, 10)\n    annual_yield_to_maturity = 0.04   # 4%\n    principal = 1                     # normalized to 1 for simplicity; price will be a percentage of par value\n    \n    day_count_convention = '30/360'\n    \n    # Calculate the number of coupons left\n    next_coupon_date = date(2014, 10, 10)\n    coupon_dates = []\n    while next_coupon_date <= maturity_date:\n        coupon_dates.append(next_coupon_date)\n        # Move to next coupon date considering semi-annual payment\n        next_coupon_date = date(next_coupon_date.year + (next_coupon_date.month + 6)//12, (next_coupon_date.month + 6)%12 or 12, 10)\n    \n    # Do math calculation to get the answer\n    flat_price = 0.0\n    for coupon_date in coupon_dates:\n        days_to_coupon = calculate_days_30_360(settlement_date, coupon_date)\n        years_to_coupon = days_to_coupon / 360\n        coupon_payment = (annual_coupon_rate / coupon_payment_frequency) * principal\n        discount_factor = (1 + (annual_yield_to_maturity / coupon_payment_frequency)) ** (coupon_payment_frequency * years_to_coupon)\n        flat_price += coupon_payment / discount_factor\n    \n    # Add the discounted principal (last cash flow)\n    days_to_maturity = calculate_days_30_360(settlement_date, maturity_date)\n    years_to_maturity = days_to_maturity / 360\n    discount_factor = (1 + (annual_yield_to_maturity / coupon_payment_frequency)) ** (coupon_payment_frequency * years_to_maturity)\n    flat_price += principal / discount_factor\n    \n    # return answer\n    return flat_price\n\n# Output the result\nprint(f\"The flat price for Bond H: {solution()}\")\n```\n\nPlease note, this code calculates the flat price based on the normalized principal amount of 1 (`principal = 1`). You will need to multiply the result by the actual face value of the bond to find the flat price in terms of currency."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-710",
        "question": "The lending rates for corporation A and corporation B are set as such: corporation A and corporation B borrowed money at their respective preferred borrowing rates before engaging in an interest rate swap. What's the overall savings?",
        "tables": [
            "|   | Company | Fixed Rate | Floating Rate |\n|---|---------|------------|---------------|\n| a | X       | 8%         | LIBOR+150bps  |\n| b | Y       | 10%        | LIBOR+200bps  |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To determine the overall savings from the interest rate swap, we need to calculate the difference between each company's fixed and floating rates and then identify where the potential savings come from when they swap their interest payment obligations. The premise of the savings is based on the comparative advantage each company has in either the fixed or floating rate markets.\n\nHere is the Python program to calculate the overall savings:\n\n```python\ndef solution():\n    # Define the fixed and floating rates for Company X and Y\n    libor = 0  # LIBOR rate itself isn't provided, so assuming it's the same for both companies\n    company_x_fixed = 0.08  # 8%\n    company_y_fixed = 0.10  # 10%\n    company_x_floating = libor + 0.015  # LIBOR + 150bps\n    company_y_floating = libor + 0.02  # LIBOR + 200bps\n\n    # Potential savings if Company X pays the fixed rate and Company Y pays the floating rate\n    x_pays_fixed_savings = company_y_fixed - company_x_fixed\n    y_pays_floating_savings = company_y_floating - company_x_floating\n\n    # Alternatively, potential savings if Company X pays the floating rate and Company Y pays the fixed rate\n    x_pays_floating_savings = company_x_floating - company_y_floating\n    y_pays_fixed_savings = company_x_fixed - company_y_fixed\n\n    # The overall savings will be the sum of the individual savings for the two companies\n    overall_savings = x_pays_fixed_savings + y_pays_floating_savings\n\n    # If the alternative method provides more savings, use that instead\n    if (x_pays_floating_savings + y_pays_fixed_savings) > overall_savings:\n        overall_savings = x_pays_floating_savings + y_pays_fixed_savings\n\n    return overall_savings\n\n# Since we have not been provided the borrowing amount and LIBOR rate, the calculation above simply establishes the basis for savings.\n# The actual savings in dollar terms would be the overall_savings times the borrowing amount, which is not provided.\n```\n\nWithout further context or details on the amount borrowed, we will only be able to calculate the overall savings as a percentage, not an absolute figure. Keep in mind that in a real-life scenario, the LIBOR rate would be a specific figure and there would be a principal amount that these rates apply to, which would allow us to calculate the exact dollar savings.\n\nNote: LIBOR stands for London Interbank Offered Rate, and it's a benchmark rate that some of the world’s leading banks charge each other for short-term loans. It often serves as the first step to calculating interest rates on various loans throughout the world."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-711",
        "question": "Assuming a marginal tax rate of 40%, what is the after-tax cost of the preferred stock if a corporation is planning a fresh issue of preferred stock with a $100 par and a 12% dividend, and it can be sold for $95 per share with the corporation having to pay flotation costs equating to 5% of the market price?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 12\n    par_value = 100\n    market_price = 95\n    flotation_costs_percent = 0.05  # 5%\n    tax_rate = 0.40  # 40%\n\n    # Calculate the flotation costs in dollars\n    flotation_costs = market_price * flotation_costs_percent\n\n    # Calculate the net proceeds from the issue (the amount actually received by the company)\n    net_proceeds = market_price - flotation_costs\n\n    # Calculate the before-tax cost of preferred stock (the dividend rate on the par value)\n    before_tax_cost = (dividend / net_proceeds)\n\n    # Since preferred dividends are not tax-deductible, the after-tax cost is the same as before-tax cost.\n    after_tax_cost = before_tax_cost\n\n    # return answer as a percentage\n    return after_tax_cost * 100\n\n# The return value should be the after-tax cost rate of the preferred stock as a percentage\nprint(solution())\n```\n\nThis program defines the necessary variables, computes the flotation costs, calculates the net proceeds from selling the preferred stock, and determines the after-tax cost of the preferred stock, which in this case is the same as the before-tax cost since preferred dividends are not tax-deductible. The return value is the after-tax cost of the preferred stock expressed as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-712",
        "question": "What is the net-of-fees return earned in Year 3 by a hedge fund that started with $98 million, charges a 2% management fee based on assets under management at year end, a 20% incentive fee calculated separately from the management fee, and has a high-water mark provision? The fund was valued at $112 million at the end of Year 1, $100 million at the end of Year 2, and $116 million at the end of Year 3.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 98e6  # Initial fund value\n    end_year_values = [112e6, 100e6, 116e6]  # Fund values at the end of each year\n    \n    management_fee_rate = 0.02  # Management fee rate\n    incentive_fee_rate = 0.20   # Incentive fee rate\n    high_water_mark = initial_value  # Initial high water mark\n    \n    # Initialize net return variables\n    net_return = 0\n    cumulative_return = 0  # Cumulative return without fees\n    \n    for value in end_year_values:\n        # Management fee based on assets under management at year-end\n        management_fee = value * management_fee_rate\n        \n        # Increment value represents the increase in fund value for the year\n        increment_value = value - high_water_mark - management_fee\n        \n        # Checking for high-water mark criterion before calculating incentive fee\n        if increment_value > 0:\n            # Incentive fee calculated from the profits (increment_value)\n            incentive_fee = increment_value * incentive_fee_rate\n        else:\n            # No incentive fee if the increment value is not greater than the high-water mark after management fee\n            incentive_fee = 0  # No incentive fee\n        \n        # Actual increment after subtraction of both management fee and incentive fee\n        net_increment = increment_value - incentive_fee\n        \n        # Update net return\n        net_return += net_increment\n        \n        # Update cumulative return\n        cumulative_return += value - high_water_mark\n        \n        # Update the high-water mark\n        if value > high_water_mark:\n            high_water_mark = value\n    \n    # Net-of-fees return in Year 3 would be the increment of Year 3 minus the total fees in Year 3\n    net_of_fees_return_year_3 = end_year_values[2] - end_year_values[1] - (management_fee + incentive_fee)\n    \n    # return answer\n    return net_of_fees_return_year_3\n\n# Call the function and print the answer\nprint(solution())\n```\n\nIn this program, we calculate the incremental value for each year and then determine the management and incentive fees. We are assuming that the incentive fee is applied only to the profits beyond the high-water mark, without considering the management fee in its calculation.\n\nThe net-of-fees return in Year 3 is computed by the increment of fund value in Year 3 minus the total fees charged in Year 3."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-713",
        "question": "Considering the details provided regarding a newly constructed showroom by a corporation, what is the depreciation expense (in millions) for the showroom in 2014? Here are the specifics: Construction commenced on 1 January 2012, the grand opening took place on 1 January 2014, a loan of €30 million was taken out on 1 January 2012, the interest rate on the loan was 8%, payable annually, repayment of the loan was scheduled as a balloon payment due on 1 January 2017. The total construction expenses during 2012 and 2013 amounted to €38.5 million, the estimated useful life of the showroom was 40 years, the projected residual value of the showroom was €5 million, and the depreciation approach used was straight line?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_construction_cost = 38.5  # in millions\n    useful_life = 40  # in years\n    residual_value = 5  # in millions\n    \n    # Do math calculation to get the answer\n    # Using straight-line depreciation formula: (Cost - Salvage value) / Useful life\n    depreciation_expense = (total_construction_cost - residual_value) / useful_life\n    \n    # return answer\n    return depreciation_expense\n\n# Example usage:\n# print(f\"The depreciation expense for the showroom in 2014 is: {solution()} million\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-714",
        "question": "A researcher collects the subsequent data for an equally-weighted index: What is the index's return over the time span?",
        "tables": [
            "| Security | Beginning of Period Price(€) | Beginning of Period Shares | End of Period Price(€) | End of Period Shares |\n|----------|------------------------------|---------------------------|------------------------|----------------------|\n| A        | 20.00                        | 300                       | 22.00                  | 300                  |\n| B        | 50.00                        | 300                       | 48.00                  | 300                  |\n| C        | 26.00                        | 2,000                     | 30.00                  | 2,000                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Beginning of Period values\n    beginning_prices = [20.00, 50.00, 26.00]\n    beginning_shares = [300, 300, 2000]\n\n    # End of Period values\n    end_prices = [22.00, 48.00, 30.00]\n    end_shares = [300, 300, 2000]\n    \n    # Calculate the beginning index value by summing the products of beginning prices and shares\n    beginning_index_value = sum([p * s for p, s in zip(beginning_prices, beginning_shares)])\n    \n    # Calculate the end index value by summing the products of end prices and shares\n    end_index_value = sum([p * s for p, s in zip(end_prices, end_shares)])\n    \n    # Calculate the return of the index by comparing the end index value to the beginning index value\n    index_return = (end_index_value - beginning_index_value) / beginning_index_value\n\n    # return answer\n    return index_return\n\n# Call the function to check the result\nprint(solution())\n```\nThis code defines the beginning and end prices and shares for each security, calculates the total index value at the beginning and end of the period by summing the products of the prices and shares, and then calculates the return of the index by comparing the change in total index value. Finally, it prints the resulting index return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-715",
        "question": "Based on the aforementioned details, what must be the anticipated liquidity requirement for this financial corporation, given that the administration predicts a worst-case scenario next week involving a $25 million liquidity shortage with just a 15% likelihood? Furthermore, the most favorable scenario involves an $80 million liquidity excess, but this has a 10% likelihood. The most likely situation is a $15 million liquidity excess, which has a 75% probability according to administration estimates.",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To determine the anticipated liquidity requirement for the financial corporation, we need to calculate the expected value based on the probabilities of the different scenarios:\n\n- The worst-case scenario involves a $25 million liquidity shortage with a 15% likelihood.\n- The most favorable scenario involves an $80 million liquidity excess with a 10% likelihood.\n- The most likely scenario is a $15 million liquidity excess with a 75% likelihood.\n\nExpected value (EV) is calculated by multiplying each possible outcome by its respective probability and summing all of these values.\n\nLet's implement the solution with this formula:\n\n```python\ndef solution():\n    # Define variables for each scenario and their probabilities\n    worst_case_shortage = -25000000  # Negative value as this is a shortage\n    worst_case_probability = 0.15\n    best_case_excess = 80000000\n    best_case_probability = 0.10\n    likely_case_excess = 15000000\n    likely_case_probability = 0.75\n    \n    # Calculate the expected liquidity requirement\n    expected_liquidity = (\n        worst_case_shortage * worst_case_probability +\n        best_case_excess * best_case_probability +\n        likely_case_excess * likely_case_probability\n    )\n    \n    # Return the expected liquidity requirement\n    return expected_liquidity\n\n# Call to function and print the expected liquidity requirement\nprint(solution())\n```\n\nRunning this Python program will calculate the expected liquidity requirement for the financial corporation given the probabilities of the different scenarios."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-716",
        "question": "The table provided presents the monthly stock returns for Rose Enterprises. Based on the information in the table, can you calculate the median stock return for Rose Enterprises?",
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4% | -5% | 12% | 3% | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [20, 4, -5, 12, 3, 12]\n    \n    # Sort the returns to find the median\n    sorted_returns = sorted(returns)\n    \n    # Calculate the number of months\n    num_months = len(sorted_returns)\n    \n    # Find the median\n    if num_months % 2 == 0:\n        median = (sorted_returns[num_months//2 - 1] + sorted_returns[num_months//2]) / 2\n    else:\n        median = sorted_returns[num_months//2]\n    \n    # return answer\n    return median\n\n# To get the result you can call the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-717",
        "question": "Currently the 1-year rate is at 5%. If a trader predicts the 1-year rate next year to rise up to 7%, and the 1-year rate in two years to reach 9%, what will the 3-year spot rate be?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    one_year_rate_current = 0.05\n    one_year_rate_next_year = 0.07\n    one_year_rate_in_two_years = 0.09\n    \n    # Do math calculation to get the answer\n    # If we invest for 3 years, we want to compare investing at the current 3-year rate\n    # versus investing for one year at the current rate, rolling that investment into \n    # a new 1-year investment at next year's predicted rate, and doing the same a year later.\n    \n    # Step 1: Calculate the future value at the end of 3 years for an investment at current 1-year rate:\n    fv_after_first_year = 1 + one_year_rate_current\n    \n    # Step 2: Calculate the future value of that amount after the second year, at next year's predicted rate:\n    fv_after_second_year = fv_after_first_year * (1 + one_year_rate_next_year)\n    \n    # Step 3: Calculate the future value of that amount after the third year, at the rate predicted for the following year:\n    fv_after_third_year = fv_after_second_year * (1 + one_year_rate_in_two_years)\n    \n    # Step 4: To find the equivalent three-year spot rate:\n    # We solve the equation (1 + spot_rate) ^ 3 = fv_after_third_year for the spot rate.\n    three_year_spot_rate = (fv_after_third_year ** (1/3)) - 1\n    \n    # return answer. Because we want a percentage, we multiply by 100.\n    answer = three_year_spot_rate * 100\n    return answer\n    \n# This will return the 3-year spot rate as a percentage\nsolution()\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-718",
        "question": "An investor bought 200 stocks of a company that doesn't pay dividends on margin with a cost of $50 each share. The leverage ratio stands at 2.5. Half a year later, the investor offloads these stocks at a price of $60 each share. If we disregard the interest paid on the borrowed money and the transaction expenses, what was the six-month period return for the investor?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define initial variables\n    num_stocks = 200\n    initial_price_per_stock = 50\n    final_price_per_stock = 60\n    leverage_ratio = 2.5\n    \n    # Calculate the total investment and the amount borrowed\n    total_investment = num_stocks * initial_price_per_stock\n    amount_borrowed = total_investment * (leverage_ratio - 1) / leverage_ratio\n    \n    # Calculate the investor's own money invested\n    own_money_invested = total_investment - amount_borrowed\n    \n    # Calculate the total value after selling the stocks\n    total_value_after_sale = num_stocks * final_price_per_stock\n    \n    # Calculate the profit from the investment\n    profit = total_value_after_sale - total_investment\n    \n    # Calculate the return on the investor's own money invested\n    return_on_investment = (profit / own_money_invested) * 100\n    \n    return return_on_investment\n\n# Call the function and print the return\nprint(f\"The six-month period return for the investor is: {solution()}%\")\n```\n\nThis program defines variables to hold information about the stock purchase and sale, performs calculations to figure out the total investment, the amount of money borrowed, and the investor's initial outlay. It then calculates the profit and the return on investment percentage based on the investor's own money, and finally, it prints out the six-month period return on investment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-719",
        "question": "Imagine a portfolio that consists of two properties. Property X makes up 25% of the portfolio and has a standard deviation of 17.9%. Property Y constitutes 75% of the portfolio and comes with a standard deviation of 6.2%. Given that the correlation between these two properties is 0.5, what would be the standard deviation of the portfolio?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_X = 0.25\n    std_dev_X = 17.9 / 100  # converting percentage to decimal\n    weight_Y = 0.75\n    std_dev_Y = 6.2 / 100  # converting percentage to decimal\n    correlation_XY = 0.5\n    \n    # Calculate the portfolio standard deviation using the formula for a two-asset portfolio:\n    # sqrt(w_x^2 * σ_x^2 + w_y^2 * σ_y^2 + 2 * w_x * w_y * correlation_xy * σ_x * σ_y)\n    portfolio_variance = ((weight_X * std_dev_X) ** 2 +\n                          (weight_Y * std_dev_Y) ** 2 +\n                          2 * weight_X * weight_Y * correlation_XY * std_dev_X * std_dev_Y)\n    \n    portfolio_std_dev = math.sqrt(portfolio_variance)\n    \n    # return answer\n    return portfolio_std_dev\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-720",
        "question": "Based on the given joint probability table, what is the correlation between X and Y?",
        "tables": [
            "|    | Joint probabilities |     |     |\n|----|-------------------:|----:|----:|\n|  X |                Y=5 | Y=2 | Y=-3|\n|X=-2|                 0.2|   0 |    0|\n| X=1|                   0| 0.6 |    0|\n|X= 4|                   0|   0 |  0.2|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the correlation between X and Y using the given joint probability table, we can use the formula for the correlation:\n\n\\[ \\rho_{XY} = \\frac{E[XY] - E[X]E[Y]}{\\sqrt{Var[X]Var[Y]}} \\]\n\nWhere:\n- \\( E[XY] \\) is the expected value of the product of X and Y.\n- \\( E[X] \\) and \\( E[Y] \\) are the expected values (means) of X and Y, respectively.\n- \\( Var[X] \\) and \\( Var[Y] \\) are the variances of X and Y, respectively.\n\nThe expected value of the product of X and Y (\\( E[XY] \\)) can be found by summing the products of each pair of X and Y values and their corresponding joint probability.\n\nThe expected value (mean) for each random variable is calculated by summing the products of each value of the random variable and its corresponding marginal probability.\n\nThe variance for each random variable is found by summing the squared differences between each value and the mean, weighted by the marginal probability.\n\nLet's generate a Python program that follows this formula and outputs the correlation between X and Y:\n\n```python\nimport math\n\ndef solution():\n    # Define the joint probability distribution\n    joint_probabilities = {\n        (-2, 5): 0.2,\n        (1, 2): 0.6,\n        (4, -3): 0.2\n    }\n    \n    # Calculate the marginal probabilities of X and Y\n    marginal_x = {x: sum(prob for (x_, y), prob in joint_probabilities.items() if x_ == x) for x, y in joint_probabilities}\n    marginal_y = {y: sum(prob for (x, y_), prob in joint_probabilities.items() if y_ == y) for x, y in joint_probabilities}\n    \n    # Calculate expectations E[X], E[Y], and E[XY]\n    E_X = sum(x * prob for x, prob in marginal_x.items())\n    E_Y = sum(y * prob for y, prob in marginal_y.items())\n    E_XY = sum(x * y * prob for (x, y), prob in joint_probabilities.items())\n    \n    # Calculate the variances Var[X] and Var[Y]\n    Var_X = sum((x - E_X) ** 2 * prob for x, prob in marginal_x.items())\n    Var_Y = sum((y - E_Y) ** 2 * prob for y, prob in marginal_y.items())\n    \n    # Calculate the correlation\n    correlation = (E_XY - E_X * E_Y) / math.sqrt(Var_X * Var_Y)\n    \n    # return the answer\n    return correlation\n\n# Uncomment the following line to execute the program and get the answer\n# print(solution())\n```\n\nThis program will calculate and return the correlation coefficient between X and Y based on the provided joint probability table."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-721",
        "question": "What is the standard deviation of return for stock A according to the above probability distribution?",
        "tables": [
            "| Probability | Return of Stock A(%) |\n|-------------|----------------------|\n| 0.20        | 30                   |\n| 0.60        | 10                   |\n| 0.20        | -20                  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    probability = [0.20, 0.60, 0.20]  # probabilities\n    returns = [30, 10, -20]           # returns of stock A in percent\n\n    # Calculate the expected return (mean of the distribution)\n    expected_return = sum(p * r for p, r in zip(probability, returns))\n    \n    # Calculate the variance of the distribution\n    variance = sum(p * ((r - expected_return) ** 2) for p, r in zip(probability, returns))\n    \n    # Calculate the standard deviation (square root of the variance)\n    std_deviation = math.sqrt(variance)\n    \n    # return answer\n    return std_deviation\n\n# Call the function and print the result to verify the correctness\nprint(solution())\n```\n\nThis function named `solution` calculates the standard deviation of the returns for stock A based on the provided probability distribution. The expected return is first computed, which is then used to calculate the variance of the distribution. Finally, the standard deviation is obtained by taking the square root of the variance."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-722",
        "question": "A manager at a snowboarding park is contemplating providing discounts on weekday snowboarding passes. With the regular price being €50 per day, it is anticipated that 300 patrons will purchase passes each weekday. However, if the price is lowered to €40 per day, it is expected that 450 patrons will purchase passes each weekday. What is the marginal revenue per patron gained through providing the discounted price?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Below is the Python program that calculates the marginal revenue per patron gained through providing the discounted price:\n\n```python\ndef solution():\n    # Define variables name and value\n    regular_price = 50\n    discounted_price = 40\n    regular_patrons = 300\n    discounted_patrons = 450\n    \n    # Calculate total revenue at regular price and with discount\n    regular_revenue = regular_price * regular_patrons\n    discounted_revenue = discounted_price * discounted_patrons\n    \n    # Calculate the increase in revenue\n    revenue_increase = discounted_revenue - regular_revenue\n    \n    # Calculate the increase in number of patrons\n    patron_increase = discounted_patrons - regular_patrons\n    \n    # Calculate the marginal revenue per patron\n    marginal_revenue_per_patron = revenue_increase / patron_increase\n    \n    # Return answer\n    return marginal_revenue_per_patron\n\n# You can uncomment the line below to test the function\n# print(solution())\n```\n\nThis program defines the prices and expected number of patrons for both regular and discounted scenarios, calculates the total revenue for both, determines the revenue increase if the discount is implemented, then calculates the marginal revenue per additional patron gained from the discount. Finally, it returns the calculated marginal revenue per patron."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-723",
        "question": "The probabilities for Z are displayed as follows, P(Z=0.4)=30%, P(Z=0.2)= 30%, P(Z=-0.2)= 40%. What is the standard deviation of Z?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the standard deviation of the random variable Z, we need to follow these steps:\n\n1. Calculate the expected value (mean) of Z.\n2. Subtract the expected value from each possible outcome to find the squares of the deviations.\n3. Multiply each of those squared deviations by their respective probabilities.\n4. Sum all the values.\n5. Take the square root of that sum to get the standard deviation.\n\nNow, here is the Python program to calculate the standard deviation of Z:\n\n```python\nimport math\n\ndef solution():\n    # Define the values and their probabilities\n    values = [0.4, 0.2, -0.2]\n    probabilities = [0.3, 0.3, 0.4]\n    \n    # Calculate the expected value (mean) of Z\n    mean = sum(value * probability for value, probability in zip(values, probabilities))\n    \n    # Calculate the variance (which is the sum of squared deviation * probability)\n    variance = sum((value - mean) ** 2 * probability for value, probability in zip(values, probabilities))\n    \n    # Calculate the standard deviation (square root of variance)\n    std_deviation = math.sqrt(variance)\n    \n    # return the standard deviation\n    return std_deviation\n\n# Call solution function and print the standard deviation\nprint(solution())\n```\n\nThe `solution()` function carries out the necessary calculations and returns the standard deviation. Note that I used `math.sqrt` from the math package to calculate the square root needed for the standard deviation.\n"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-724",
        "question": "Using the H-model, John is assessing the worth of Company N at $20 per share. The firm has given a dividend of $1 per share in the most recent year. During the initial four years, the growth rate will gradually reduce from 10% to 6%. The dividend growth rate from that point onwards will be 6% per year indefinitely. What is the necessary rate of return in his model?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To solve this problem using the H-model, we need to find the necessary rate of return, which can be denoted as 'r'. The H-model formula for calculating the stock price (P) is:\n\nP = D0 * (1 + gL) / (r - gL) + D0 * H * (gS - gL) / (r - gL)\n\nwhere\nP = price of the stock\nD0 = most recent dividend payment\ngL = long-term constant growth rate(In perpetuity)\ngS = initial growth rate\nr = required rate of return\nH = half-life of the high-growth period (H = n / 2 for n years of high growth)\n\nGiven variables:\nP = $20 (stock price)\nD0 = $1 (dividend)\ngL = 6% or 0.06 (long-term growth rate)\ngS = 10% or 0.10 (initial growth rate)\nn = 4 years (high-growth period)\nH = 4/2 = 2\n\nWe'll need to solve for 'r' in this equation. This equation cannot be solved algebraically, as it involves solving a polynomial equation which doesn't have an analytical solution in this context. However, we can use numerical methods (like the Newton-Raphson method or iterative search) to find an approximate solution for 'r'. Given the complexity of this calculation, I'll illustrate a root-finding method using a simple iterative search.\n\nHere is the Python program which uses an iterative approach to estimate the required rate of return 'r':\n\n```python\ndef solution():\n    # Define variables\n    P = 20\n    D0 = 1\n    gL = 0.06\n    gS = 0.10\n    H = 2  # half-life (4 years / 2)\n    \n    # Estimating 'r' using iterative search\n    r_estimate = gL  # Initial estimate for r is the long-term growth rate\n    r_step = 0.0001  # Starting step size for iterative search\n    \n    # Function to calculate the price based on given 'r'\n    def calculate_price(r):\n        return D0 * (1 + gL) / (r - gL) + D0 * H * (gS - gL) / (r - gL)\n    \n    # Start with a low estimate of r and increase until the price exceeds P\n    while calculate_price(r_estimate) > P:\n        r_estimate += r_step\n\n    # Return estimated 'r' rounded to 4 decimal places\n    return round(r_estimate, 4)\n```\n\nNote that this method is a simplified estimation and might not be precise. It assumes that the stock price calculated using the initial low estimate for 'r' is higher than $20 and that the price will continuously decrease as 'r' increases. It increases 'r' in small steps until the calculated stock price falls below the actual stock price of $20.\n\nFor a more complex financial model, more sophisticated root-finding algorithms like the Newton-Raphson method should be used for better precision."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-725",
        "question": "Given the details about a privately-owned corporation and its competitor in the public market and by applying the pure-play method, what would be the projected equity beta for the privately-owned corporation?",
        "tables": [
            "| Comparable Companies | Tax Rate (%) | Debt/Equity | Equity Beta |\n|----------------------|--------------|-------------|-------------|\n| Private company      | 30           | 1           | N.A.        |\n| Public company       | 35           | 0.9         | 1.75        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "The pure-play method involves unlevering the equity beta of a comparable public company to remove the financial risk due to its debt and then relevering it for the private company, taking into account the private company's different capital structure.\n\nThe formula to unlever the equity beta (β_E) is:\n\nUnlevered Beta (β_U) = β_E / [1 + ((1 - Tax Rate) * Debt/Equity)]\n\nwhere,\n- β_E is the equity beta of the comparable public company\n- Tax Rate is the corporate tax rate of the comparable public company\n- Debt/Equity is the debt-to-equity ratio of the comparable public company\n\nThe formula to relever the beta is:\n\nRelevered Beta (β'_E) = β_U * [1 + ((1 - Tax Rate') * Debt'/Equity')]\n\nwhere,\n- β_U is the unlevered beta calculated previously\n- Tax Rate' is the corporate tax rate of the private company\n- Debt'/Equity' is the debt-to-equity ratio of the private company\n\nThe pure-play method will be applied using these formulae. Here's the Python program to calculate the projected equity beta for the privately-owned corporation:\n\n```python\ndef solution():\n    # Define variables for the public company\n    tax_rate_public = 0.35\n    debt_equity_public = 0.9\n    equity_beta_public = 1.75\n\n    # Define variables for the private company\n    tax_rate_private = 0.30\n    debt_equity_private = 1\n\n    # Unlever the public company's equity beta\n    unlevered_beta = equity_beta_public / (1 + (1 - tax_rate_public) * debt_equity_public)\n    \n    # Relever the beta for the private company\n    relevered_beta_private = unlevered_beta * (1 + (1 - tax_rate_private) * debt_equity_private)\n    \n    # Return the relevered beta for the private company\n    return relevered_beta_private\n\n# Let's call the function and print the result\nresult = solution()\nprint(\"Projected Equity Beta for the Private Company:\", result)\n```\n\nWhen you run this code, it will calculate the projected equity beta for the privately-owned corporation using the pure-play method."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-726",
        "question": "According to the provided table, what is the range for the monthly stock returns of Ivy Corp?",
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define monthly stock returns in a list\n    monthly_returns = [20, 4, -5, 12, 3, 12]\n    \n    # Calculate the range of stock returns\n    range_of_returns = max(monthly_returns) - min(monthly_returns)\n    \n    # return the answer\n    return range_of_returns\n\n# Calling the solution function and printing the answer\nprint(solution())\n```\n\nThis program calculates the range of the monthly stock returns for Ivy Corp given in the table. It establishes a list of the returns as percentages (removing the % symbol for simplicity), finds the maximum and minimum values using the `max` and `min` functions provided by Python, calculates the range by subtracting the minimum from the maximum, and then returns this value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-727",
        "question": "If Natsuki Yamamoto has become a part of a new company where he can choose from 10 mutual funds for the company's retirement plan, and he intends to pick four, how many distinct combinations of mutual funds can he select?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this problem, we can use the concept of combinations from combinatorics, which is given by the formula C(n, k) = n! / (k! * (n - k)!), where n is the total number of items, k is the number of items to choose, and \"!\" denotes the factorial of a number.\n\nHere is the Python program using the `math` package to calculate the number of distinct combinations:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    num_mutual_funds = 10\n    funds_to_pick = 4\n    \n    # Calculate the number of combinations\n    combinations = math.comb(num_mutual_funds, funds_to_pick)\n    \n    # return answer\n    return combinations\n\n# You can call the function to get the result\n# print(solution())\n```\n\nThis program defines the number of available mutual funds and the number to be picked, then uses the `math.comb()` function (which is short for combinations) to calculate the number of distinct ways to select four funds from ten."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-728",
        "question": "A 90-day European put option on Apple has a strike price of $30. The current market price for Apple is $30. What is the delta for this option?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "The delta of an option is a measure of the rate of change of the option's price with respect to changes in the underlying asset's price. For a put option, the delta is negative, because the value of the put option decreases as the stock price increases.\n\nWithout additional information such as the volatility of the stock, the risk-free interest rate, or the time remaining to expiration (in this case we know it's 90 days, but the option model typically needs it in a specific format), it's impossible to calculate the exact delta of this put option. Typically, the Black-Scholes model or a similar option pricing model is used to calculate an option's delta.\n\nSince the provided information is not sufficient to calculate the delta, we can't generate a working Python program to accurately determine the delta for this option. The delta would need to be estimated using an option pricing model that would take the aforementioned factors into account.\n\nHere's a template for a Python function that might use the Black-Scholes model, assuming additional required parameters were available:\n\n```python\nfrom scipy.stats import norm\nimport numpy as np\n\ndef solution(S, K, T, r, sigma):\n    \"\"\"\n    Calculate the delta of a European put option using the Black-Scholes formula.\n    \n    Parameters:\n    S (float): Current stock price (e.g., $30)\n    K (float): Strike price of the option (e.g., $30)\n    T (float): Time to expiration in years (90 days / 365)\n    r (float): Risk-free interest rate (annual)\n    sigma (float): Volatility of the underlying stock (annual standard deviation, as a decimal)\n    \n    Returns:\n    float: Delta of the put option\n    \"\"\"\n    # Calculate d1 and d2 using the Black-Scholes model components\n    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    \n    # Calculate put delta\n    delta = -norm.cdf(-d1)\n    \n    return delta\n```\n\nSince we do not have values for `r` (risk-free interest rate) or `sigma` (volatility), nor do we have the specific Python package `scipy` mentioned for the cumulative distribution function (norm.cdf), this function cannot be executed to calculate delta in this context.\n\nThe delta for an at-the-money option (where the strike price and the current market price are equal) and close to expiration is typically around -0.5 for a put option, assuming low volatility and interest rates. But to get the exact figure, you would need the additional data and a financial model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-729",
        "question": "What is the per share market conversion premium for the DE bond on 17 September 20X5, based on the chosen convertible bond data provided below?",
        "tables": [
            "|                  |                  |                                  |\n|------------------|------------------|----------------------------------|\n| **Issue price**             |                  |  £ 1,000 at par                     |\n| **Conversion period**       |                  | 13 September 20X5 to 12 September 20X8 |\n| **Initial conversion price**|                  | £ 10.00 per share                  |\n| **Threshold dividend**      |                  | £ 0.50 per share                   |\n| **Change of control conversion price** |                  | £ 8.00 per share                   |\n| **Common stock share price on issue date** |                  | £ 8.70                       |\n| **Share price on**          | 17 September 20X5| £ 9.10                       |\n| **Convertible bond price on 17 September 20X5**  |                  | £ 1,123                      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price_on_17_sep_20X5 = 1123  # in pounds\n    share_price_on_17_sep_20X5 = 9.10  # in pounds\n    initial_conversion_price = 10.00  # in pounds\n\n    # Calculate the number of shares each bond is convertible into\n    num_shares_convertible_per_bond = 1000 / initial_conversion_price\n\n    # Calculate the market value of the shares that one bond can be converted into\n    market_value_of_shares_per_bond = share_price_on_17_sep_20X5 * num_shares_convertible_per_bond\n\n    # Calculate the market conversion premium per bond\n    conversion_premium_per_bond = bond_price_on_17_sep_20X5 - market_value_of_shares_per_bond\n\n    # Calculate the market conversion premium per share\n    conversion_premium_per_share = conversion_premium_per_bond / num_shares_convertible_per_bond\n\n    # return answer\n    return conversion_premium_per_share\n\n# Call function and print answer\nprint(solution())\n```\n\nIn this Python program, we first establish the variables provided, including the bond price on 17 September 20X5, the share price on that date, and the initial conversion price. By dividing the issue price by the initial conversion price, we determine the number of shares each bond can be converted into. Then we calculate the market value of the shares each bond can become, which is the number of convertible shares times the share price.\n\nWith the market value per convertible bond determined, we subtract it from the bond price to find the conversion premium for the entire bond. Lastly, we divide the conversion premium per bond by the number of convertible shares to find the per share market conversion premium. Finally, the function returns this premium per share and it is printed out."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-730",
        "question": "Imagine that in a specific defined benefit scheme, the following situation occurs. Workers serve for 40 years with a wage that grows precisely with inflation rate. Pension equals to 60% of the last salary and grows perfectly with inflation rate. Employees always live for 25 years post-retirement. The money within the retirement plan is invested in bonds that yield an inflation rate. Which is the best approximation of the portion of the worker's income that ought to be put into the retirement plan? (Hint: You should perform all calculations in real and not nominal terms so that the income and pensions stay constant and the interest yield is zero.)",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "We can solve this problem with the concept of the present value of an annuity. Since the money within the retirement plan yields an inflation rate, and pensions grow perfectly with inflation, the real interest rate is effectively zero. This simplifies the problem because we do not need to discount future pension payments for inflation.\n\nWe calculate the present value of the pension payments during retirement and divide that by the present value of the salary during the working years, all in terms of a constant salary, to get the fraction of the salary that needs to be saved.\n\nHere is the Python code that calculates the required portion:\n\n```python\ndef solution():\n    # Define the given values\n    years_of_saving = 40\n    years_of_pension = 25\n    pension_rate = 0.6\n\n    # Calculate the present value of the total pension received\n    # Since the interest rate is effectively 0 (real terms), we can just sum up the payments\n    total_pension_received = pension_rate * years_of_pension\n\n    # Calculate the present value of the total salary earned\n    # Since the interest rate is effectively 0 (real terms), we can just sum up the salary over the work life\n    total_salary_earned = years_of_saving\n\n    # Required portion of the salary that needs to be saved\n    required_saving_rate = total_pension_received / total_salary_earned\n\n    return required_saving_rate\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe `solution` function calculates the portion of the worker's income that should be put into the retirement plan considering the above-mentioned scenario. \n\nPlease note that the actual saving rate might need to take into account other factors such as administrative costs or other contingencies not captured in this simplified model. However, this gives us the theoretical rate given the assumptions provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-731",
        "question": "What is the operating breakeven point in units if the per unit contribution margin for an item is $12 and it is assumed that fixed costs are $12,000, interest costs are $3,000, and there are taxes of $2,000?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here is a Python program that calculates the operating breakeven point in units given the contribution margin, fixed costs, interest costs, and taxes:\n\n```python\ndef solution():\n    # Define variables name and value\n    contribution_margin_per_unit = 12\n    fixed_costs = 12000\n    interest_costs = 3000\n    taxes = 2000\n    \n    # Calculate total costs (fixed costs plus interest costs before taxes)\n    total_costs_before_taxes = fixed_costs + interest_costs\n    \n    # Calculate operating profit before taxes needed to break even (add taxes to total costs)\n    operating_profit_needed = total_costs_before_taxes + taxes\n    \n    # Calculate breakeven point in units by dividing the total operating profit needed by contribution margin per unit\n    breakeven_point_units = operating_profit_needed / contribution_margin_per_unit\n    \n    # return breakeven point in units\n    return breakeven_point_units\n\n# You can call the function and print the result to test\n# print(solution())\n```\n\nWhen you call the `solution()` function, it should return the operating breakeven point in units."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-732",
        "question": "A note is presently selling for $109.246 for every $100 of face value. If the note's yield to maturity decreases by 25 bps, the note's total price is projected to increase to $110.481. If the note's yield to maturity increases by 25 bps, the note's total price is predicted to decrease to $108.029. What is the note's estimated convexity?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Below is a Python program to calculate the estimated convexity of the note:\n\n```python\ndef solution():\n    # Given prices and basis point changes\n    price_initial = 109.246\n    price_up = 110.481\n    price_down = 108.029\n    bp_change = 0.0025  # basis point change of 25bps equals 0.0025 in decimal\n    \n    # Using the formula for convexity approximation: \n    # Convexity ≈ [(P- + P+ - 2P0) / (2 * P0 * Δy^2)]\n    # Where P- is the price if yield decreases, P+ is the price if yield increases, \n    # P0 is the initial price, and Δy is the yield change\n\n    convexity = ((price_down + price_up - 2 * price_initial) / \n                 (2 * price_initial * bp_change ** 2))\n    \n    return convexity\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you call the `solution()` function, it will return the estimated convexity of the note based on the provided prices and yield changes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-733",
        "question": "The 4-year spot rate is 9.45%, and the 1-year spot rate is 8.528%. What would be the 3-year forward rate starting a year from now?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_4_year = 0.0945\n    spot_rate_1_year = 0.08528\n    \n    # The formula for forward rate is:\n    # (1 + future_spot_rate)^n = (1 + overall_spot_rate)^(n+m) / (1 + initial_spot_rate)^m\n    # where:\n    # future_spot_rate is the forward rate we are solving for\n    # overall_spot_rate is the spot rate for the entire period (1+4=5 years)\n    # initial_spot_rate is the spot rate for the initial period (1 year)\n    # n is the number of years for the future spot rate (3 years)\n    # m is the number of years for the initial spot rate (1 year)\n\n    # Rearrange the formula to solve for the future spot rate (3-year forward rate starting a year from now):\n    # future_spot_rate = ((1 + overall_spot_rate)^(n+m) / (1 + initial_spot_rate)^m)^(1/n) - 1\n\n    # In this case, n=3, m=1, overall_spot_rate=spot_rate_4_year, and initial_spot_rate=spot_rate_1_year\n\n    forward_rate_3_year = (((1 + spot_rate_4_year)**(4)) / ((1 + spot_rate_1_year)**(1)))**(1/3) - 1\n    \n    # return answer\n    return forward_rate_3_year\n\n# Call the function and print the answer\nprint(solution())\n```\n\nWhen you run the code, the `solution` function will calculate and return the 3-year forward rate starting a year from now based on the given spot rates."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-734",
        "question": "What is the per share value of REIT A by utilizing the property subsector average P/AFFO multiple method?",
        "tables": [
            "|                               | REIT A     |\n| ----------------------------- | ---------- |\n| Funds from operations (FFO)  | $ 396,400  |\n| Non - cash rents              | $ 56,782   |\n| Recurring maintenance-type capital expenditures | $ 78,600   |\n|                               |            |\n| Shares outstanding            | 73,500     |\n| Property subsector average P/AFFO multiple | 17.3x |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ffo = 396400\n    non_cash_rents = 56782\n    recurring_maintenance_expenditures = 78600\n    shares_outstanding = 73500\n    p_affo_multiple = 17.3\n\n    # Calculation of the Adjusted Funds from Operations (AFFO)\n    affo = ffo + non_cash_rents - recurring_maintenance_expenditures\n\n    # Calculation of the per share AFFO\n    affo_per_share = affo / shares_outstanding\n\n    # Calculation of the per share value using the P/AFFO multiple\n    per_share_value = affo_per_share * p_affo_multiple\n\n    # Return the answer\n    return per_share_value\n\n# You can call the function and print the result to test it\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-735",
        "question": "Fox is currently recruiting an asset allocation analyst and has finished interviewing two applicants, Ambrose Kelly and Catherine Trainor, for the role. Based on the data in Exhibit 1, what is Lennon's economic net worth (in $ millions)?",
        "tables": [
            "|    |    |\n|----|----|\n| Name | Jane Lennon |\n| Occupation and Family Structure | She is the morning news anchor for a national broadcasting company, where she has worked for the past 20 years. She is 56 years of age, divorced, and the sole supporter of her two children, Everett, aged 18, and Marshall, aged 14. Marshall suffers from severe medical and developmental issues. |\n| Current and Expected Future Employment Income | She currently earns $1 million per year as a broadcaster. She plans on retiring in four years. With typical raises in her industry, she estimates that the present value of her pre-retirement income is $4.5 million. |\n| Financial Assets and Liabilities | She has an investment portfolio worth $8 million, which consists of 30% equities and the remainder in fixed-income securities. She also owns $1 million in shares of the broadcasting company she works for, but she is restricted from selling them for two more years. Her primary residence carries no mortgage and was recently valued at $2 million. She also owns a vacation property worth $3 million, with an outstanding mortgage of $1 million. Her defined-contribution pension plan has vested and is valued at $2.5 million. |\n| Aspirational Goals and Extended Liabilities | Everett is just beginning university and plans to pursue a medical degree. Lennon plans on paying for his entire education and living expenses as well as providing some assistance in funding his future practice. She believes that these goals will be covered with $1.5 million in present value terms. She has begun the process of setting up a special needs trust to provide lifetime benefits for Marshall that will not interfere with the government benefits that he is eligible to receive. It will be funded with $2 million within the year. She recently received an honorary doctorate from her alma mater and has started the process of endowing a chair in its communications department. She anticipates that the funding will be made available to the university in two years; it has a present value of $1.75 million. The present value of future consumption is estimated to be $9 million. |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_portfolio = 8  # in $ millions\n    company_shares = 1  # in $ millions\n    primary_residence = 2  # in $ millions\n    vacation_property_value = 3  # in $ millions\n    vacation_property_mortgage = 1  # in $ millions\n    pension_plan = 2.5  # in $ millions\n    # Total assets\n    total_assets = (investment_portfolio + company_shares +\n                    primary_residence + vacation_property_value +\n                    pension_plan - vacation_property_mortgage)\n    \n    # Aspirational goals and extended liabilities\n    everett_education = 1.5  # in $ millions\n    special_needs_trust = 2  # in $ millions\n    endowing_chair = 1.75  # in $ millions\n    future_consumption = 9  # in $ millions\n    # Total liabilities\n    total_liabilities = (everett_education + special_needs_trust +\n                         endowing_chair + future_consumption)\n    \n    # Calculate the economic net worth\n    economic_net_worth = total_assets - total_liabilities\n    \n    # return answer\n    return economic_net_worth\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-736",
        "question": "A company is contemplating a venture that would demand a starting investment of THB270 million. The venture will aid in augmenting the company's post-tax net cash flows by THB30 million annually indefinitely, and it has been detected to hold a negative NPV of THB20 million. What is the IRR (%) of the venture?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Sure, in this case, to find the Internal Rate of Return (IRR), we will equate the present value of the future cash flows to the initial investment and solve for the rate of return. Since the net present value (NPV) is given to be negative, we know the cash flows do not equate to the initial investment when discounted at the company's cost of capital. However, using the NPV equation, we can solve for the IRR when NPV is zero. The IRR is the discount rate that makes the NPV of an investment zero.\n\nThe NPV is calculated as:\n\n\\[ NPV = \\sum_{t=1}^{\\infty}{ \\frac{C}{(1+r)^t} } - Initial Investment\\]\n\nSince the cash flows are perpetual (annuity), we can simplify this to:\n\n\\[ NPV = \\frac{C}{r} - Initial Investment\\]\n\nTo find the IRR, we set NPV to zero and solve for r:\n\n\\[ 0 = \\frac{C}{IRR} - Initial Investment \\]\n\nRearranged, the formula to find IRR is:\n\n\\[ IRR = \\frac{C}{Initial Investment} \\]\n\nLet's write the Python function to calculate the Internal Rate of Return (IRR):\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 270  # in millions of THB\n    annual_cash_flow = 30  # in millions of THB\n    \n    # Do math calculation to get the IRR\n    # We set NPV to zero to find IRR\n    irr = (annual_cash_flow / initial_investment) * 100  # converting to percentage\n    \n    # return answer\n    return irr\n\n# Example usage:\nprint(f\"The IRR (%) of the venture is: {solution()}%\")\n```\n\nThis program will return the internal rate of return as a percentage. Please note that normally, the IRR is calculated using iterative methods or financial calculators because typical investment scenarios have non-perpetual cash flows with varying amounts. Since this is an infinite series with equal payments (perpetuity), the formula simplifies substantially."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-737",
        "question": "Let's say the subsequent yearly forward rates were deduced from the yield curve. What would be the spot rate for a four-year period?",
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.50%        |\n| 1y1y        | 0.70%        |\n| 2y1y        | 1.00%        |\n| 3y1y        | 1.50%        |\n| 4y1y        | 2.20%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "In the context of fixed income and interest rate markets, spot rates represent the yield on a bond that pays a single payment at maturity. Forward rates, on the other hand, represent the interest rates agreed today for loans beginning at some future date. When we deduce the spot rates from forward rates, we use the relationship where the product of (1 + spot rate) for each year up to year 'n' is equal to the product of (1 + forward rate) from year '0' up to year 'n-1'.\n\nSince the given forward rates are annual forward rates, the spot rate for a four-year period is calculated by compounding these forward rates. The forward rates are currently expressed in percentages, so we first convert them to decimal form before using them in our calculations.\n\nHere's a Python program to calculate the four-year spot rate from the given forward rates:\n\n```python\ndef solution():\n    # Define forward rates in decimal form\n    forward_rates = [0.005, 0.007, 0.01, 0.015, 0.022]\n    \n    # The spot rate for a zero-year to one-year period is same as the first forward rate\n    rate_0y1y = forward_rates[0]\n    \n    # To calculate the four-year spot rate, compound the forward rates\n    # (1 + spot_0y1y) * (1 + forward_1y1y) * (1 + forward_2y1y) * (1 + forward_3y1y) = (1 + spot_4y) ^ 4\n    # Solving for spot_4y gives us the four-year spot rate\n    \n    product_of_one_plus_forwards = 1\n    for i in range(4):\n        product_of_one_plus_forwards *= (1 + forward_rates[i + 1])\n    \n    # Calculate the fourth root of the product to find the four-year spot rate\n    spot_4y = (product_of_one_plus_forwards ** (1/4)) - 1\n    \n    # Convert back to percentage from decimal form\n    spot_4y_percent = spot_4y * 100\n    \n    # Return answer as the spot rate percentage to two decimal places\n    return round(spot_4y_percent, 2)\n\n# Call the function and print the result\nprint(f\"The spot rate for a four-year period is: {solution()}%\")\n```\n\nRunning this program will give you the spot rate for a four-year period."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-738",
        "question": "The cumulative distribution function for a discrete random variable is displayed in the subsequent table. What is the possibility that Y will assume a value of either 2 or 4?",
        "tables": [
            "|   | Cumulative Distribution Function |\n|---|---|\n| X=x | F(x)=P(X≤x) |\n| 1 | 0.15 |\n| 2 | 0.25 |\n| 3 | 0.50 |\n| 4 | 0.60 |\n| 5 | 0.95 |\n| 6 | 1.00 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Given cumulative distribution values for specific points\n    cdf_values = {1: 0.15, 2: 0.25, 3: 0.50, 4: 0.60, 5: 0.95, 6: 1.00}\n    \n    # Probability of Y being 2 is the difference between the CDF values at 2 and at 1\n    probability_Y_equals_2 = cdf_values[2] - cdf_values[1]\n    \n    # Probability of Y being 4 is the difference between the CDF values at 4 and at 3\n    probability_Y_equals_4 = cdf_values[4] - cdf_values[3]\n    \n    # Add both probabilities to get the total probability of Y being either 2 or 4\n    p_2_or_4 = probability_Y_equals_2 + probability_Y_equals_4\n    \n    return p_2_or_4\n    \n# Call the function and print the result if you need\n# print(solution())\n\n```\n\nThe code will return the sum of the probabilities of Y being 2 or 4."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-739",
        "question": "Kyle has an equity of $100 in cash. He initiates a short position in stock B. The current price of stock B is 100 and Kyle sells it. The cash from the short sale is kept in the dealer's account and is not available for funding other investments. Furthermore, Kyle deposits $50 as collateral. Based on the details provided, what is the leverage of the position?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_equity = 100\n    collateral = 50\n    stock_price = 100\n    \n    # Total equity is cash equity plus collateral\n    total_equity = cash_equity + collateral\n    \n    # The value of the position is the price of the stock, which was sold short\n    position_value = stock_price\n    \n    # Leverage is the position value divided by the total equity\n    leverage = position_value / total_equity\n    \n    # return answer\n    return leverage\n\n# Example usage: \n# leverage_value = solution()\n# print(leverage_value)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-740",
        "question": "What is the present comprehensive bid rate for delivery of GBP against the CHF in three months for the CHF/GBP forex pair, taking into account the current spot rate and forward points?",
        "tables": [
            "| Spot rate (CHF/GBP) | 1.4939/1.4941 |\n|---------------------|---------------|\n| One month           | -8.3/-7.9     |\n| Two month           | -17.4/-16.8   |\n| Three month         | -25.4/-24.6   |\n| Four month          | -35.4/-34.2   |\n| Five month          | -45.9/-44.1   |\n| Six month           | -56.5/-54.0   |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define spot rate variable for bid and ask\n    spot_rate_bid = 1.4939\n    # Define forward points for bid in three months\n    three_month_forward_points_bid = -0.00254 # converting -25.4 to decimal points by dividing by 10000\n\n    # Calculate the comprehensive bid rate by subtracting the forward points from the spot rate\n    comprehensive_bid_rate = spot_rate_bid + three_month_forward_points_bid\n\n    # return answer\n    return comprehensive_bid_rate\n    \n# The following line will execute the solution function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-741",
        "question": "What is the value of the Paasche index for the consumption basket showcased in Exhibit 1 for the year 2016?",
        "tables": [
            "| Exhibit 1. Consumption Baskets and Price Level Over 2 years |\n|-------------------------------------------------------------|",
            "| Time     | 2015 Q   | 2015 P     | 2016 Q   | 2016 P     |\n| -------- | -------- | ---------- | -------- | ---------- |\n| Soybean  | 110 kg   | $4.8/kg    | 150 kg   | $5.1/kg    |\n| Gasoline | 50 liters| $2.62/liter| 80 liters| $3.1/liter |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Quantities for the base year 2015\n    soybean_qty_2015 = 110  \n    gasoline_qty_2015 = 50\n    \n    # Prices for the base year 2015\n    soybean_price_2015 = 4.8  \n    gasoline_price_2015 = 2.62\n    \n    # Quantities for the current year 2016\n    soybean_qty_2016 = 150  \n    gasoline_qty_2016 = 80\n    \n    # Prices for the current year 2016\n    soybean_price_2016 = 5.1  \n    gasoline_price_2016 = 3.1\n    \n    # Calculate the total cost for the base year 2015 and current year 2016\n    total_cost_2015 = (soybean_qty_2015 * soybean_price_2015) + (gasoline_qty_2015 * gasoline_price_2015)\n    total_cost_2016 = (soybean_qty_2016 * soybean_price_2016) + (gasoline_qty_2016 * gasoline_price_2016)\n    \n    # Calculate the quantities using 2016 quantities with the comparison of 2016 prices versus 2015 prices\n    total_cost_2016_with_2015_prices = (soybean_qty_2016 * soybean_price_2015) + (gasoline_qty_2016 * gasoline_price_2015)\n    \n    # Calculate the Paasche index (the ratio of total cost of the basket in the current year to the total cost of the same basket at base year prices)\n    paasche_index = total_cost_2016 / total_cost_2016_with_2015_prices\n    \n    # return answer\n    return round(paasche_index, 2)\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-742",
        "question": "A bank certificate of deposit with a 365-day year has a starting principal sum of USD 96.5 million and a due amount at maturity of USD 100 million. It has 350 days between settlement and maturation. What is the equivalent yield of the bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program that calculates the equivalent yield of the bond based on the provided information:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 96.5e6  # Principal sum at the start\n    maturity_amount = 100e6  # Amount at maturity\n    total_days = 365  # Total days in a year for yield calculation\n    remaining_days = 350  # Days between settlement and maturation\n\n    # Calculate the interest earned\n    interest_earned = maturity_amount - principal\n\n    # Calculate the yield (interest earned divided by principal, adjusted for the 365-day year)\n    equivalent_yield = (interest_earned / principal) * (total_days / remaining_days)\n\n    # Return the answer as a percentage\n    return equivalent_yield * 100\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The equivalent yield of the bond is {answer:.2f}%\")\n```\n\nThe `solution` function calculates the interest earned as the difference between the maturity amount and the principal. It then annualizes this by dividing by the principal and adjusting for the number of days the money is invested (350 days) relative to a 365-day year. The resulting yield is multiplied by 100 to convert it to a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-743",
        "question": "The current year's consumer price index (CPI) stands at 252 while it was 246 last year. Can you determine this year's rate of inflation?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Certainly! Below is a Python program that calculates this year's rate of inflation based on the consumer price index (CPI) values provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_cpi = 252\n    last_year_cpi = 246\n    \n    # Do math calculation to get the answer\n    inflation_rate = ((current_cpi - last_year_cpi) / last_year_cpi) * 100\n    \n    # return answer\n    return inflation_rate\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nWhen you call the `solution()` function, it will calculate and return the rate of inflation for the current year."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-744",
        "question": "A buyer acquires a nine-year bond with an annual coupon rate of 7% at a price equivalent to its par value. Prior to the receipt of the first coupon, interest rates rise to 8%. After holding the bond for five years, the buyer decides to sell it. Let's assume that the interest rates stayed steady at 8% during the five-year period. How much would the reinvested coupon payments be worth at the end of the holding period per 100 of par value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n\n    # Defined given values\n    coupon_rate = 0.07\n    new_interest_rate = 0.08\n    par_value = 100\n    holding_period = 5\n    \n    # Total coupon payments over the holding period\n    total_coupon_payments = coupon_rate * par_value * holding_period\n    \n    # Each coupon payment reinvested at the new interest rate for the remaining period\n    # (up to the end of the holding period)\n    reinvested_coupon_value = 0\n    for i in range(holding_period):\n        # Each coupon is invested for (holding_period - i) years\n        reinvested_coupon_value += coupon_rate * par_value * (1 + new_interest_rate) ** (holding_period - i)\n\n    # Return the worth of the reinvested coupon payments\n    return reinvested_coupon_value\n    \n# Function call\nprint(solution())\n```\n\nRunning this program will calculate the worth of the reinvested coupon payments at the end of the holding period considering that each coupon payment is reinvested at a new interest rate of 8%."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-745",
        "question": "In an industry consisting of 5 businesses, the market share data of these businesses was provided for the last quarter. What is the three-firm Herfindahl-Hirschmann Index for this industry?",
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Mddert  | 45              |\n| Nuki    | 35              |\n| Pefa    | 10              |\n| Serds   | 5               |\n| Rsdf    | 5               |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define the market shares as a list\n    market_shares = [45, 35, 10, 5, 5]\n    \n    # Sort the list to get the top three market shares\n    sorted_shares = sorted(market_shares, reverse=True)\n    \n    # Take only the top three market shares\n    top_three_shares = sorted_shares[:3]\n    \n    # Calculate the Herfindahl-Hirschmann Index for the three firms\n    # by squaring their market shares and summing it up\n    hhi = sum(share ** 2 for share in top_three_shares)\n    \n    # return the HHI value\n    return hhi\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-746",
        "question": "If Firm B disclosed a revenue of $80 million and net income of $45 million, what would be the sum of cash obtained from clients if there was a $5 million increase in accounts receivable and a $1 million decrease in accounts payable?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 80e6  # $80 million\n    net_income = 45e6  # $45 million\n    increase_in_receivables = 5e6  # $5 million\n    decrease_in_payables = 1e6  # $1 million\n    \n    # Calculating cash obtained from clients\n    # Using the indirect method for the cash flow from operating activities:\n    # We start with net income, then adjust for changes in working capital, and non-cash transactions.\n\n    cash_from_clients = net_income + increase_in_receivables - decrease_in_payables\n    \n    # return answer\n    return cash_from_clients\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-747",
        "question": "If Jane Doe's portfolio has a fixed-income position with a market value of USD 70 million, a modified duration of 6.44 years and a yield of 6.7% compounded semiannually and if there is a positive parallel shift in the yield curve of 25 basis points, which of the following answers best estimates the resulting change in the value of Jane’s portfolio?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here is the Python program to calculate the resulting change in the value of Jane's portfolio after a positive parallel shift in the yield curve of 25 basis points:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_value = 70000000  # portfolio market value in USD\n    modified_duration = 6.44 # modified duration in years\n    delta_yield = 0.25 / 100 # shift in yield curve (25 basis points)\n\n    # Calculate change in portfolio value: ΔV = -Dmod * Δy * V\n    change_in_value = -modified_duration * delta_yield * market_value\n    \n    # return answer\n    return change_in_value\n\n# You can call the function and print the result to test\nresult = solution()\nprint(f\"The resulting change in the value of Jane’s portfolio is: ${result:.2f}\")\n```\n\nThis program defines the market value of the portfolio, the modified duration, and the change in yield caused by the shift in the yield curve. It then uses the formula for estimating the change in the value of a fixed-income position based on modified duration and the change in yield to calculate the result. The answer is returned in dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-748",
        "question": "XYZ Inc. released a five-year floating-rate note (FRN) that provides a quarterly coupon of three-month market reference rate (MRR) plus 125 bps. The FRN is valued at 96 for every 100 of par value. Given a 30/360-day count convention, evenly arranged periods, and a consistent three-month market reference rate (MRR) of 5%, what is the discount margin for the FRN?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To determine the discount margin for the floating-rate note (FRN), we need to calculate the spread (or additional yield) that an investor will earn over the assumed future market reference rates (MRRs). Since the future MRR is given as 5%, and the FRN pays MRR plus 125 bps (1.25%), every payment would effectively sum up to 6.25% of the par value annually, but divided quarterly. The FRN is valued at 96 for every 100 of par value, indicating that it is sold at a discount.\n\nNote that the 30/360 day count convention means that interest is calculated assuming that all months have 30 days and there are 360 days in a year. \n\nThe program below will calculate the discount margin, which is the difference between the coupon payments the investor receives and the assumed MRR, adjusted for the FRN being sold at a discount.\n\n```python\ndef solution():\n    # Define variables name and value\n    mrr = 5 / 100  # Three-month market reference rate (MRR) of 5%\n    additional_bps = 1.25 / 100  # 125 bps expressed as a decimal\n    par_value = 100  # Par value of the FRN\n    purchase_price = 96  # The FRN is valued at 96 for every 100 of par value\n    periods_in_a_year = 4  # Quarterly coupon payments\n    \n    # Calculate the periodic coupon rate as an annual rate\n    periodic_coupon_rate = mrr + additional_bps\n    \n    # Calculate the total annual coupon payment based on par\n    annual_coupon_payment = par_value * periodic_coupon_rate\n    \n    # Calculate the periodic (quarterly) coupon payment\n    periodic_coupon_payment = annual_coupon_payment / periods_in_a_year\n    \n    # Calculate the sum of present value of future cash flows\n    sum_of_present_values = 0\n    for period in range(1, periods_in_a_year * 5 + 1): # 5 years\n        sum_of_present_values += periodic_coupon_payment / ((1 + mrr / periods_in_a_year) ** period)\n    \n    # Calculate the present value of the par value received at the end\n    present_value_of_par = par_value / ((1 + mrr / periods_in_a_year) ** (periods_in_a_year * 5))\n    \n    # Add present value of par to the sum of the present values of the coupon payments\n    sum_of_present_values += present_value_of_par\n    \n    # Calculate the discount margin\n    # The price paid for the FRN is the present value of all expected future cash flows\n    # The discount margin adds an extra spread to the MRR until the present value of the cash flows\n    # matches the purchase price (96 for every 100 of par)\n    discount_margin = 0\n    while sum_of_present_values < purchase_price:\n        sum_of_present_values = 0\n        discount_margin += 0.0001  # Increment the discount margin by 0.01%\n        for period in range(1, periods_in_a_year * 5 + 1): # 5 years\n            sum_of_present_values += periodic_coupon_payment / ((1 + (mrr + discount_margin) / periods_in_a_year) ** period)\n        sum_of_present_values += par_value / ((1 + (mrr + discount_margin) / periods_in_a_year) ** (periods_in_a_year * 5))\n    \n    # Return the discount margin as a percentage (not as a decimal)\n    return discount_margin * 100\n\n# Example usage\nprint(solution())\n```\n\nThis code will iteratively increase the discount margin until it finds a discount margin that equates the present value of all future cash flows to the purchase price of the bond. Please note this is a very simplified version of calculating discount margin and assumes that the MRR will remain constant at 5% and does not account for the day count convention's effect on accrued interest. Additionally, in real-world scenarios, this type of problem would typically require more complex financial models and be solved using numerical methods or financial calculators/tools."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-749",
        "question": "What is the individual earnings (in $ trillions) for a theoretical nation derived from the chosen data in the GDP records?",
        "tables": [
            "| Account Name                               | Amount ($ trillions) |\n|--------------------------------------------|---------------------:|\n| GDP                                        |                 18.0 |\n| Wages, salaries, and other labor income    |                  9.0 |\n| Taxes                                      |                  3.5 |\n| Capital consumption allowance              |                  2.3 |\n| Undistributed corporate profits            |                  1.0 |\n| Transfer payments                          |                  1.9 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "It seems like the \"individual earnings\" in this case could be understood as the sum of \"Wages, salaries, and other labor income\" and \"Undistributed corporate profits\", because these categories typically represent earnings going directly to individuals in the form of labor compensation and profits from businesses that are not distributed as dividends (and hence remain with the individual owners). Taxes, capital consumption allowance, and transfer payments do not typically represent individual earnings because taxes are collected by the government, capital consumption allowance relates to depreciation, and transfer payments are typically government payments to individuals that are not earned through work or investment.\n\nHere is a Python program to calculate the individual earnings:\n\n```python\ndef solution():\n    # Define variables name and value\n    wages_salaries_labor_income = 9.0\n    undistributed_corporate_profits = 1.0\n    \n    # Sum these to get individual earnings\n    individual_earnings = wages_salaries_labor_income + undistributed_corporate_profits\n    \n    # return answer\n    return individual_earnings\n\n# Example usage:\n# print(solution())\n```\n\nWhen you run `print(solution())`, the program should output `10.0`, which is the sum of `9.0` (labor income) and `1.0` (undistributed corporate profits), representing individual earnings in trillions of dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-750",
        "question": "What will be the 2014 stock-based remuneration cost from the stock grant scheme ($ millions) be, given that since 2010, the yearly executive pay included stock options on the corporation's shares. The enterprise launched a restricted stock grant plan for all non-managerial staff who had been with the enterprise for three years or longer on 1st September 2013. The fair market value of the corporation's shares on the grant date was $4.2 million and the staffer has to stay with the corporation for an additional three years for the shares to vest?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "To answer your question via a Python program, we need to calculate the stock-based remuneration cost for the year 2014. Since the stock grant scheme was launched on 1st September 2013, we would typically need to pro-rate the cost for the year 2014 based on the fair market value granted in 2013. However, since the question specifically asks for the stock-based remuneration cost from the stock grant scheme and notes that the shares have to vest after an additional three years, we can infer that there is no actual cost recognized in 2014 because the shares have not yet vested for the non-managerial staff. The cost would typically be recognized over the vesting period, but since it's not explicitly mentioned how the cost is recognized and we're only asked for the 2014 cost, we can assume there is no such cost for that year.\n\nHere's the program reflecting that logic:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_grant_cost = 0  # Assuming cost is recognized over the vesting period, no cost for 2014\n    \n    # No calculation needed as the shares have not yet vested\n    \n    # return answer\n    return stock_grant_cost\n\n# Example usage:\n# print(solution())\n```\n\nIf there was a need to pro-rate the stock grant based on when the grant was given, you would need the terms of the grant (how the cost is recognized - evenly over the vesting period, upfront, or in a different manner) to calculate the cost for 2014. Since those details are not provided, the most straightforward assumption is that there is no cost recognized yet."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-751",
        "question": "XYZ NY, a home decor purchasing corporation, provides its workers with a defined benefit pension scheme. The data in the subsequent table: The regular pension expense that would be documented in OCI as per IFRS is:",
        "tables": [
            "| | |\n|---|---|\n| **ABC LA retirement plan information  2018** | |\n| Current service costs | 320 |\n| Past service costs | 150 |\n| Employer contributions | 1,200 |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year | 48,395 |\n| Plan assets at beginning of year | 40,800 |\n| Plan assets at end of year | 44,300 |\n| Actuarial loss | 350 |\n| Actual return on plan assets | 3,100 |\n| Discount rate on plan liabilities | 7.5% |\n| Expected rate of return on plan assets | 8.2% |"
        ],
        "topic": "Accounting",
        "output": [
            "To solve for the regular pension expense that would be recorded in Other Comprehensive Income (OCI) as per IFRS, we need to account for several components. Under IFRS, the components of pension expense that are recognized in OCI include actuarial gains and losses and the difference between the actual return on plan assets and the amount of return predicted by the expected rate of return.\n\nThe formula to calculate the amount recorded in OCI is:\n\nOCI Pension Expense = Actuarial Loss (Gains) + (Actual Return on Plan Assets - (Expected Rate of Return on Plan Assets * Plan Assets at Beginning of Year))\n\nLet's put this into a Python function:\n\n```python\ndef solution():\n    # Define variables name and value\n    actuarial_loss = 350\n    actual_return_on_plan_assets = 3100\n    expected_rate_of_return_on_plan_assets = 0.082  # 8.2% expressed as decimal\n    plan_assets_at_beginning_of_year = 40800\n    \n    # Calculating the difference between the actual return and expected return on plan assets\n    difference_between_actual_and_expected_return = actual_return_on_plan_assets - (expected_rate_of_return_on_plan_assets * plan_assets_at_beginning_of_year)\n    \n    # Calculating the total amount to be recorded in OCI\n    oci_pension_expense = actuarial_loss + difference_between_actual_and_expected_return\n    \n    # return answer\n    return oci_pension_expense\n\n# Call the function and print the result\nprint(solution())\n```\n\nRunning this function would calculate and provide the value that gets recorded in Other Comprehensive Income for the defined benefit pension scheme."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-752",
        "question": "A bond that Brian purchased has a maturity period of three years with a par value of $1000. The coupon rate is 4% and it pays interest annually. If the required rate of return on the bond is 3.5%, what would be the bond's price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    maturity_period = 3  # in years\n    coupon_rate = 0.04  # 4%\n    required_rate_of_return = 0.035  # 3.5%\n    \n    # Do math calculation to get the answer\n    # Calculate the coupon payment\n    coupon_payment = par_value * coupon_rate\n    \n    # Calculate present value of all the coupon payments\n    present_value_coupons = sum([coupon_payment / ((1 + required_rate_of_return) ** i) for i in range(1, maturity_period + 1)])\n    \n    # Calculate present value of the par value at maturity\n    present_value_par = par_value / ((1 + required_rate_of_return) ** maturity_period)\n    \n    # The price of the bond is the sum of the present value of the coupons and the present value of the par value\n    price = present_value_coupons + present_value_par\n    \n    # return answer\n    return price\n\n# Running the solution function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-753",
        "question": "Suppose that the one-year probabilities of default for the bonds rated AAA and BBB are 1% and 4% respectively, and the combined probability of default of these two bonds is 0.07%. What is the correlation of default between these two bonds?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Certainly! Below is a Python program to compute the correlation of default between two bonds with given default probabilities and a combined default probability:\n\n```python\n# Import necessary package for mathematical functions\nimport math\n\ndef solution():\n    # Define the given default probabilities\n    p_AAA = 0.01   # Default probability of bond rated AAA\n    p_BBB = 0.04   # Default probability of bond rated BBB\n    p_combined = 0.0007  # Combined probability of default\n    \n    # Calculate the product of the individual default probabilities\n    product_individual = p_AAA * p_BBB\n    \n    # Calculate the independent combined probability (if the defaults were independent events)\n    independent_combined = p_AAA + p_BBB - product_individual\n\n    # Calculate the covariance of defaults between the two bonds\n    covariance = p_combined - independent_combined\n    \n    # Calculate the standard deviations for AAA and BBB defaults\n    # Since these are Bernoulli random variables, std_dev = sqrt(p * (1-p))\n    std_AAA = math.sqrt(p_AAA * (1 - p_AAA))\n    std_BBB = math.sqrt(p_BBB * (1 - p_BBB))\n    \n    # Calculate the correlation, which is covariance divided by the product of the standard deviations\n    correlation = covariance / (std_AAA * std_BBB)\n    \n    # Return the correlation of default between the two bonds\n    return correlation\n\n# Call the function to test\nprint(solution())\n```\n\nThe function `solution()` calculates the correlation of default between two bonds using the provided default probabilities and combined probability. It computes the covariance and standard deviations for each bond's default and finally divides the covariance by the product of the standard deviations to give the correlation value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-754",
        "question": "What is the EBITDA interest coverage ratio of Adidas AG as stated in Exhibit 1?",
        "tables": [
            "|  |  |\n|---|---|\n|Exhibit 1. Adidas AG Excerpt from Consolidated Income Statement Year|   |\n|Ending 31 December 2010(£ in millions)|   |\n|Gross profit|5730|\n|Royalty and commission income|100|\n|Other operating income|110|\n|Other operating expenses|5046|\n|Operating profit|894|\n|Interest income 25| |\n|Interest expense|113|\n|Income before taxes|806|\n|Income taxes|238|\n|Net income|568|\n|Additional Information:| |\n|Depreciation and amortization:  £249 million| |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_profit = 894\n    depreciation_and_amortization = 249\n    interest_expense = 113\n    \n    # Calculate EBITDA\n    ebitda = operating_profit + depreciation_and_amortization\n    \n    # Calculate EBITDA Interest Coverage Ratio\n    ebitda_interest_coverage_ratio = ebitda / interest_expense\n    \n    # return answer\n    return ebitda_interest_coverage_ratio\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-755",
        "question": "Given the data in the chart concerning four bonds in an investment collection, what is the portfolio's effective duration?",
        "tables": [
            "| Par Value   | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n|-------------|------------|--------|-------------------|--------------------|-----------|\n| $25million  |     105    |  8%    |     7.9           |     8              |   122     |\n| $25million  |     100    |  7%    |     8.5           |     8.5            |   154     |\n| $20million  |     95     |  5%    |     6.3           |     2              |   87      |\n| $30million  |     87     |  0%    |     10.2          |     10.2           |   32      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # For each bond: Par Value, Bond Price, Coupon, Modified Duration, Effective Duration, Convexity\n    bonds = [\n        (25000000, 105, 0.08, 7.9, 8, 122),\n        (25000000, 100, 0.07, 8.5, 8.5, 154),\n        (20000000, 95, 0.05, 6.3, 2, 87),\n        (30000000, 87, 0.0, 10.2, 10.2, 32)\n    ]\n    \n    # Calculate the market value of each bond\n    # Market Value = Par Value * (Bond Price / 100)\n    market_values = [par_value * (bond_price / 100) for par_value, bond_price, _, _, _, _ in bonds]\n    total_market_value = sum(market_values)\n    \n    # Calculate the weighted duration of each bond\n    # Weighted Duration = (Market Value of Bond / Total Market Value of Portfolio) * Effective Duration\n    weighted_durations = [(mv / total_market_value) * eff_duration for mv, (_, _, _, _, eff_duration, _) in zip(market_values, bonds)]\n    \n    # Sum weighted durations to get the portfolio's effective duration\n    portfolio_duration = sum(weighted_durations)\n    \n    # Return answer\n    return portfolio_duration\n\n# Calling the function and printing the result\nprint(solution())\n```\n\nThis program would compute the portfolio's effective duration by calculating the market values of each bond, determining the weighted duration for each bond, and summing these weighted durations to find the total effective duration of the portfolio."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-756",
        "question": "A 2-year zero-coupon bond with a face value of  USD 1,000 is currently valued at USD 952.48. The corporation uses a binomial pricing model with a 1-year time increment for all its valuations. Should interest rates decrease over the forthcoming year, the model predicts the bond's worth to be USD 970, or USD 950 should interest rates increase. Using the risk-neutral probabilities deduced from the model, and assuming the risk-free interest rate is 1% annually, what ought to be the present value of a 1-year European call option on this bond with a exercise price of USD 960?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Given variables for bond valuation\n    face_value = 1000\n    current_value = 952.48\n    up_value = 970\n    down_value = 950\n    exercise_price = 960\n    risk_free_rate = 0.01\n\n    # Calculate risk-neutral probabilities (q for up-move, (1-q) for down-move)\n    # Formula derived from: q * up_value + (1-q) * down_value / (1+ risk_free_rate) = current_value\n    q = (current_value * (1 + risk_free_rate) - down_value) / (up_value - down_value)\n\n    # Calculate call option payoff at the end of year\n    # Call option value would be max(0, bond value - exercise price)\n    call_payoff_up = max(0, up_value - exercise_price)\n    call_payoff_down = max(0, down_value - exercise_price)\n\n    # Calculate present value of call option using risk-neutral valuation\n    # Present value = expected value / (1+ risk_free_rate)\n    # Expected value = q * call_payoff_up + (1-q) * call_payoff_down\n    call_option_value = (\n        (q * call_payoff_up + (1 - q) * call_payoff_down) / (1 + risk_free_rate)\n    )\n\n    # Return answer\n    return call_option_value\n    \n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-757",
        "question": "Based on the financial report, what is the FCFF for Company N?",
        "tables": [
            "| Company M | $(millions) |\n|-----------|-------------|\n| Operating income (EBIT) | 2,000 |\n| Depreciation expense | 750 |\n| Increase in accounts receivable | 1,000 |\n| Increase in inventories | 100 |\n| Increase in accounts payable | 500 |\n| Purchases of PP&E | 600 |\n| Borrowing (repayment) | 400 |\n| Tax rate | 30% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_income = 2000  # EBIT\n    depreciation_expense = 750\n    increase_in_accounts_receivable = 1000\n    increase_in_inventories = 100\n    increase_in_accounts_payable = 500\n    purchases_of_pp_e = 600\n    tax_rate = 0.30  # 30%\n\n    # Calculate taxes on operating income\n    tax_payment = operating_income * tax_rate\n\n    # Calculate Free Cash Flow to the Firm (FCFF)\n    fcff = (operating_income - tax_payment + depreciation_expense\n            - increase_in_accounts_receivable - increase_in_inventories + increase_in_accounts_payable\n            - purchases_of_pp_e)\n\n    # return answer\n    return fcff\n\n# Uncomment below line to print the result if needed\n# print(solution())\n```\n\nPlease note that the value of 'Borrowing (repayment)' is not used in the FCFF calculation. FCFF is a measure of a company's financial performance that shows how much cash is available to the firm's investors (both equity and debt holders) after operating expenses, taxes, changes in net working capital, and capital expenditures are accounted for. Borrowings and repayments affect the financing cash flows, not FCFF."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-758",
        "question": "Recently, a corporation acquired a warehouse and accompanying equipment like shelving and forklifts for a whole sum of €50 million. This was divided by an evaluator into: Land €10 million, building structure €35 million, and accompanying gear €5 million. For bookkeeping goals, taking into account additional spending like €2.0 million for enhancements to the building’s roof and windows, €0.5 million for internal remodeling to suit their requirements (repositioning walls and doors, addition and removal of dividers, and so forth), and €0.1 million on an orientation and training workshop for employees to familiarize them with the facility, what is the capitalized cost to the building account in millions?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define the initial cost of the building structure\n    initial_building_cost = 35  # in millions of euros\n\n    # Define additional spending\n    roof_and_windows = 2.0  # in millions of euros\n    internal_remodeling = 0.5  # in millions of euros\n    training_workshop = 0.1  # in millions of euros\n\n    # Calculate the capitalized cost to the building account\n    capitalized_cost = initial_building_cost + roof_and_windows + internal_remodeling + training_workshop\n\n    # Return the answer\n    return capitalized_cost\n\n# You can call the function to see the result:\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-759",
        "question": "John is contemplating a carry trade between the USD and the Euro. What could be the total USD return on the suggested carry trade, taking into account the spot rates and interest rates?",
        "tables": [
            "|    | Today's one-year Libor | Currency pair (Price/Base) | Spot rate today | Projected spot rate in one year |\n|----|------------------------|---------------------------|-----------------|---------------------------------|\n| USD | 0.80% | CAD/USD | 1.0055 | 1.0006 |\n| CAD | 1.71% | EUR/CAD | 0.7218 | 0.7279 |\n| EUR | 2.20% |  |  |  |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the total USD return on the carry trade between the USD and the Euro, we need to consider the interest rate differential, the initial investment, and the change in the spot rate between the currencies.\n\nHere's a step-by-step program to calculate this:\n\n1. Borrow USD at today's one-year Libor rate.\n2. Convert USD to EUR at today's spot rate.\n3. Invest EUR at the Euro interest rate.\n4. After one year, convert the EUR (principal + interest) back to USD at the projected spot rate.\n5. Calculate the return by subtracting the original USD amount and the cost of interest from the converted USD.\n\n```python\ndef solution():\n    # Define variables\n    one_year_libor_usd = 0.80 / 100  # Convert percentage to decimal\n    one_year_libor_eur = 2.20 / 100  # Convert percentage to decimal\n    spot_rate_today_usd_eur = 1 / 1.0055  # Invert the spot rate to get EUR/USD\n    projected_spot_rate_usd_eur = 1 / 1.0006  # Invert the projected rate to get EUR/USD\n    \n    # Assume an initial investment of 1 USD for simplicity\n    initial_usd = 1\n    \n    # Step 1: Borrow USD at today's one-year Libor rate\n    cost_of_borrowing = initial_usd * one_year_libor_usd\n    \n    # Step 2: Convert USD to EUR at today's spot rate\n    initial_eur = initial_usd / spot_rate_today_usd_eur\n    \n    # Step 3: Invest EUR at the Euro interest rate\n    eur_after_one_year = initial_eur * (1 + one_year_libor_eur)\n    \n    # Step 4: After one year, convert EUR back to USD at the projected spot rate\n    final_usd = eur_after_one_year * projected_spot_rate_usd_eur\n    \n    # Step 5: Calculate the total USD return\n    usd_return = final_usd - initial_usd - cost_of_borrowing\n    \n    # Return the answer\n    return usd_return\n\n# Running the function to get the answer\ntotal_usd_return = solution()\nprint(f\"Total USD Return: {total_usd_return}\")\n```\n\nYou may adjust the `initial_usd` if you want to calculate with a different initial investment amount. The function as written assumes a 1 USD is the initial amount to simplify the percentage return calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-760",
        "question": "Bond D is a 3-year annual pay bond that offers a 3% coupon rate. Smith determines the potential interest rate paths for Bond D as shown in the Exhibit below. According to the Exhibit, what is the current value of Bond D's cash flows if we follow Path 2?",
        "tables": [
            "| Path | Time 0 | Time 1 | Time 2 |\n|------|--------|--------|--------|\n| 1    | 1.500% | 2.8853%| 2.7183%|\n| 2    | 1.500% | 2.8853%| 1.6487%|\n| 3    | 1.500% | 1.7500%| 1.6487%|\n| 4    | 1.500% | 1.7500%| 1.0000%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Import package for calculations\n    from math import exp\n\n    # Define variables\n    coupon_rate = 0.03  # 3% coupon rate\n    face_value = 1000   # Assume a standard face value of $1000 for the bond\n    coupon_payment = coupon_rate * face_value\n\n    # Time 0 to Time 1 interest rate for Path 2\n    rate_t0_t1 = 0.028853  # 2.8853%\n\n    # Time 1 to Time 2 interest rate for Path 2\n    rate_t1_t2 = 0.016487  # 1.6487%\n\n    # Calculate present value of the cash flows for Path 2\n    # Present value of first coupon payment at Time 1\n    pv_coupon_1 = coupon_payment / exp(rate_t0_t1)\n\n    # Present value of second coupon payment at Time 2\n    # We need to bring it back twice: first from Time 2 to Time 1, then from Time 1 to Time 0\n    pv_coupon_2 = coupon_payment / exp(rate_t0_t1 + rate_t1_t2)\n\n    # Present value of the final coupon payment plus face value at Time 2\n    # Again, brought back from Time 2 to Time 1, then from Time 1 to Time 0\n    pv_coupon_3_and_face_value = (coupon_payment + face_value) / exp(rate_t0_t1 + rate_t1_t2)\n\n    # Sum of all cash flows to get the current bond value for Path 2\n    current_value = pv_coupon_1 + pv_coupon_2 + pv_coupon_3_and_face_value\n\n    # return current bond value for Path 2\n    return current_value\n\n# Call the function and print the result\nprint(\"The current value of Bond D's cash flows for Path 2 is:\", solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-761",
        "question": "Assuming a threshold p-value of 0.65, Smith wants to implement machine learning (ML) models in the company's analytics procedures. Smith applies the ML model on the test data for Dataset XYZ, as described in Exhibit 1, which includes example results from the testing data collection. What is the accuracy metric for the sample test set of Dataset XYZ according to Exhibit 1?",
        "tables": [
            "|  Exhibit 1  | 10 Sample Results of Test Data for Dataset XYZ |\n|-------------|------------------------------------------------|\n| Sentence#   | Actual Sentiment Target p-value               |\n| 1           | 1 0.75                                        |\n| 2           | 0 0.45                                        |\n| 3           | 1 0.64                                        |\n| 4           | 1 0.81                                        |\n| 5           | 0 0.43                                        |\n| 6           | 1 0.78                                        |\n| 7           | 0 0.59                                        |\n| 8           | 1 0.60                                        |\n| 9           | 0 0.67                                        |\n| 10          | 0 0.54                                        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Test data for Dataset XYZ provided in Exhibit 1\n    test_data = [\n        (1, 0.75),  # Sentence 1: Actual Sentiment Target = 1, p-value = 0.75\n        (0, 0.45),  # Sentence 2: Actual Sentiment Target = 0, p-value = 0.45\n        (1, 0.64),  # Sentence 3: Actual Sentiment Target = 1, p-value = 0.64\n        (1, 0.81),  # Sentence 4: Actual Sentiment Target = 1, p-value = 0.81\n        (0, 0.43),  # Sentence 5: Actual Sentiment Target = 0, p-value = 0.43\n        (1, 0.78),  # Sentence 6: Actual Sentiment Target = 1, p-value = 0.78\n        (0, 0.59),  # Sentence 7: Actual Sentiment Target = 0, p-value = 0.59\n        (1, 0.60),  # Sentence 8: Actual Sentiment Target = 1, p-value = 0.60\n        (0, 0.67),  # Sentence 9: Actual Sentiment Target = 0, p-value = 0.67\n        (0, 0.54)   # Sentence 10: Actual Sentiment Target = 0, p-value = 0.54\n    ]\n    threshold = 0.65\n    \n    # Count correct predictions\n    correct_predictions = 0\n    # Do math calculation to get the number of correct predictions\n    for actual, p_value in test_data:\n        # If p_value is below the threshold and actual sentiment is 0 (negative sentiment),\n        #  or if p_value is above the threshold and actual sentiment is 1 (positive sentiment),\n        #  it's a correct prediction.\n        predicted = 1 if p_value > threshold else 0\n        if predicted == actual:\n            correct_predictions += 1\n    \n    # The accuracy metric is calculated by dividing the number of correct predictions\n    # by the total number of predictions (data points).\n    accuracy = correct_predictions / len(test_data)\n    \n    # return answer\n    return accuracy\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the accuracy of the ML model by comparing the actual sentiment targets with the predicted sentiment (determined by whether the p-value is above or below the threshold). It returns the accuracy metric for the sample test set of Dataset XYZ, which is the ratio of correct predictions to the total number of predictions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-762",
        "question": "Recently, an analyst named Benedict from a finance firm collected this data for an equal-weighted index made up of securities G,H,I: What is the return of the index during this time frame?",
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n|----------|--------------|--------|--------|\n| G        |    15.00     |  17.00 |  500   |\n| H        |    35.00     |  33.00 |  300   |\n| 1        |    37.00     |  40.00 |  200   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define the beginning and end prices for each security and the number of shares\n    securities = {\n        'G': {'Beginning': 15.00, 'End': 17.00, 'Shares': 500},\n        'H': {'Beginning': 35.00, 'End': 33.00, 'Shares': 300},\n        'I': {'Beginning': 37.00, 'End': 40.00, 'Shares': 200}\n    }\n    \n    # Calculate the total value at beginning and end for each security\n    total_beginning_value = sum(security['Beginning'] * security['Shares'] for security in securities.values())\n    total_ending_value = sum(security['End'] * security['Shares'] for security in securities.values())\n    \n    # Calculate the number of securities\n    number_of_securities = len(securities)\n    \n    # Calculate the weighted beginning and ending values for the index\n    weight = 1 / number_of_securities\n    index_beginning_value = weight * total_beginning_value\n    index_ending_value = weight * total_ending_value\n    \n    # Calculate the return of the index\n    index_return = (index_ending_value - index_beginning_value) / index_beginning_value\n    \n    # Return the answer\n    return index_return\n\n# Calling the function and printing the result\nprint(solution())\n```\n\nThis program calculates the return of an equal-weighted index based on the given data of the securities' beginning and end prices and the number of shares. It takes into account each security's total value at the beginning and end and then uses the equal weight to calculate the index's total beginning and ending values. The function finally computes and returns the index return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-763",
        "question": "Assuming a product has a unit contribution margin of $12, fixed costs are $12,000, the interest costs amount to $3,000, and the tax rate is 40%, what would be the operating breakeven point (in units)?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "Here is the Python program to calculate the operating breakeven point in units based on the information provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 12\n    fixed_costs = 12000\n    interest_costs = 3000\n    tax_rate = 0.40\n    \n    # Calculate the operating income which is zero at the breakeven point\n    # To find the breakeven point in units, we divide the total fixed costs and interest by the unit contribution margin.\n    # Note that taxes are not included in the calculation of operating breakeven.\n    operating_income = 0\n    total_fixed_costs_and_interest = fixed_costs + interest_costs\n    \n    # Calculate the operating breakeven point in units\n    operating_breakeven_units = total_fixed_costs_and_interest / unit_contribution_margin\n    \n    # return answer\n    return operating_breakeven_units\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nRunning this program will calculate and return the operating breakeven point in units for the product."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-764",
        "question": "According to the capital asset pricing model, can you compute the market risk premium for the market using the provided details? The expected return for Security B is 15.9% and the risk-free rate stands at 4%.",
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n| --- | --- | --- |\n| Security 1 | 30 | 1.60 |\n| Security 2 | 20 | 1.70 |\n| Security 3 | 25 | 1.90 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Based on the information provided, we have the expected return for Security 2 as 15.9%. The Beta (β) for Security 2 is also provided as 1.70, and the risk-free rate is 4%. The Capital Asset Pricing Model (CAPM) equation is:\n\n\\[E(R_i) = R_f + \\beta_i * (E(R_m) - R_f)\\]\n\nWhere:\n- \\(E(R_i)\\) is the expected return on the security\n- \\(R_f\\) is the risk-free rate\n- \\(\\beta_i\\) is the beta of the security\n- \\(E(R_m)\\) is the expected return of the market, which includes the market risk premium\n- \\(E(R_m) - R_f\\) is the market risk premium\n\nRearranging the CAPM equation to solve for the market risk premium gives us:\n\n\\[E(R_m) - R_f = \\frac{E(R_i) - R_f}{\\beta_i}\\]\n\nWe can put this equation into a Python function to calculate the market risk premium.\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_return_security_2 = 15.9  # E(R_i) in percentage\n    beta_security_2 = 1.70  # β_i\n    risk_free_rate = 4  # R_f in percentage\n\n    # Do math calculation to get the answer\n    market_risk_premium = (expected_return_security_2 - risk_free_rate) / beta_security_2\n    \n    # return answer\n    return market_risk_premium\n    \nprint(solution())\n```\n\nPlease note that in this case, the percentages are used directly in the calculation without converting them into decimals. If you need the result to be in a percentage, the result of the `solution()` function will be correct. If you need the result to be in decimal form (like 0.1 for 10%), you would need to divide the input values by 100 before performing the calculation or multiply the output by 100."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-765",
        "question": "In order to predict the return expectations for Swedish bonds, Oliver chooses to figure out the target nominal policy rate of Sweden by implementing the Taylor rule with the data shown in Exhibit 1. What's the calculated target nominal policy rate for Sweden using the Taylor rule?",
        "tables": [
            "| Neutral  real policy rate at trend growth and target inflation | 1.2% |\n| --- | --- |\n| Target inflation rate | 0.5% |\n| Expected inflation rate | 1.0% |\n| Trend real GDP growth rate | 1.0% |\n| Expected real GDP growth rate | 2.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables based on the provided data\n    neutral_real_policy_rate = 1.2\n    target_inflation_rate = 0.5\n    expected_inflation_rate = 1.0\n    trend_real_GDP_growth_rate = 1.0\n    expected_real_GDP_growth_rate = 2.0\n    \n    # Implement the Taylor rule: target nominal policy rate = neutral real policy rate + target inflation rate \n    # + 0.5 * (expected inflation rate - target inflation rate) \n    # + 0.5 * (expected real GDP growth rate - trend real GDP growth rate)\n    target_nominal_policy_rate = (neutral_real_policy_rate + target_inflation_rate \n                                  + 0.5 * (expected_inflation_rate - target_inflation_rate)\n                                  + 0.5 * (expected_real_GDP_growth_rate - trend_real_GDP_growth_rate))\n    \n    # return the calculated target nominal policy rate\n    return target_nominal_policy_rate\n\n# Call the function and print the result\nprint(f\"The target nominal policy rate for Sweden is: {solution()}%\")\n```\n\nThe program defines the variables using the data provided in the table, applies the Taylor rule to compute the target nominal policy rate, and then returns that value. Make sure to adjust the formula as per your own understanding of the Taylor rule if required."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-766",
        "question": "Based on Thompson's assessment of Metro's assets in Great Lakes as outlined in Exhibit 3 at the conclusion of 2013, even with government assistance, he thought that the automotive sector was unlikely to make a full recovery. This, coupled with Great Lakes' dependence on the automotive industry, would cause Metro, a company known for acquiring local news organizations across the nation under US GAAP, to possibly consider the investment impaired. According to Thompson's viewpoint concerning the probable impairment of the investment in Great Lakes Free Press as presented in Exhibit 3, what is the impairment loss in thousands as of the end of 2013?",
        "tables": [
            "|                                          | ($ thousands) |\n|------------------------------------------|-------------:|\n| Book value of Great Lakes                |      3,256.00|\n| Fair value of Suburban's investment in Great Lakes |         940|\n| Carrying value of Suburban's investment in Great Lakes | 1,264.51|"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fair_value = 940\n    carrying_value = 1264.51\n    \n    # Calculate the impairment loss\n    impairment_loss = carrying_value - fair_value\n    \n    # return answer\n    return impairment_loss\n\n# Calling the function solution to get the impairment loss\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-767",
        "question": "Based on the data provided in Display 1 about the present par and spot rates of annual-coupon sovereign bonds, what is the forward rate for a loan for one year that starts in three years?",
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|-----------|----------|---------- |\n|One-Year   |   2.50%  |   2.50%   |\n|Two-Year   |   2.99%  |   3.00%   |\n|Three-Year |   3.48%  |   3.50%   |\n|Four-Year  |   3.95%  |   4.00%   |\n|Five-Year  |   4.37%  |           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given spot rates\n    spot_rate_3y = 0.035  # 3-year spot rate is 3.50%\n    spot_rate_4y = 0.04   # 4-year spot rate is 4.00%\n    \n    # Forward rate formula for a loan starting in 3 years, with a duration of 1 year\n    # (1 + forward_rate) = ((1 + spot_rate_4y)^4) / ((1 + spot_rate_3y)^3)\n    forward_rate = ((1 + spot_rate_4y)**4 / (1 + spot_rate_3y)**3) - 1\n    \n    # Return the forward rate as a percentage\n    forward_rate_percentage = forward_rate * 100\n    \n    # return answer\n    return round(forward_rate_percentage, 2)\n\n# You can print out the result to test your function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-768",
        "question": "A zero-coupon bond with a maturity term of one year has a yield of 4.0%. The yield on zero-coupon bonds with a maturity of two and three years are 5.0% and 6.0% respectively. The forward price of a zero-coupon bond with a two-year term that begins in three years is established at 0.8479. What's the current price of a zero-coupon bond that matures in five years?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program to calculate the current price of a zero-coupon bond that matures in five years:\n\n```python\ndef solution():\n    # Given annual yields for 1, 2, and 3-year zero-coupon bonds\n    yield_1yr = 0.04\n    yield_2yr = 0.05\n    yield_3yr = 0.06\n    \n    # Given forward price of a zero-coupon bond with a two-year term that begins in three years\n    forward_price_3yr_start_2yr_term = 0.8479\n    \n    # Calculate the price of a 1, 2, and 3-year zero-coupon bond using the yield formula\n    price_1yr = 1 / (1 + yield_1yr)\n    price_2yr = 1 / ((1 + yield_2yr)**2)\n    price_3yr = 1 / ((1 + yield_3yr)**3)\n    \n    # Calculate the price of a zero-coupon bond at the start of year three with a two-year term\n    # using the given forward price and the current price of a 3-year bond\n    price_2yr_start_year_3 = forward_price_3yr_start_2yr_term * price_3yr\n    \n    # Calculate the price of a zero-coupon bond that matures in five years\n    # This is the price today of the bond that starts in year three and lasts for two years\n    price_5yr = price_2yr_start_year_3\n    \n    # Return the calculated price\n    return price_5yr\n\n# Call the function and print the result\nprint(solution())\n```\nExplanation:\n\n1. The price of a zero-coupon bond is calculated using the formula `P = 1 / (1 + y)^n`, where `P` is the price, `y` is the yield to maturity, and `n` is the number of years to maturity.\n2. After calculating the prices for the 1, 2, and 3-year zero-coupon bonds, we find the price of the 2-year zero-coupon bond that begins in 3 years using the given forward price multiplied by the current price of a 3-year bond (3 years from now the bond will be worth its face value, which we can assume to be 1 for simplicity).\n3. Since the question asks for the price of a bond that matures in 5 years, and we already know the price of a 2-year zero-coupon bond starting at year 3, we can directly take this as the price of the 5-year bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-769",
        "question": "What is the difference between FCFF and FCFE as per the financial statements provided by the organization?",
        "tables": [
            "| Years Ended 31 December | 2007 | 2008 |\n| --- | --- | --- |\n| Assets |  |  |\n| Current assets |  |  |\n| Cash and equivalents | $210 | $248 |\n| Accounts receivable | 474 | 513 |\n| Inventory | 520 | 564 |\n| Total current assets | 1,204 | 1,325 |\n| Gross fixed assets | 2,501 | 2,850 |\n| Accumulated depreciation | (604) | (784) |\n| Net fixed assets | 1,897 | 2,066 |\n| Total assets | $3,101 | $3,391 |",
            "| Years Ended 31  December | 2007  | 2008  |\n|--------------------------|-------|-------|\n| Liabilities and shareholders' equity | | |\n| Current liabilities | | |\n| Accounts payable        | $295  | $317  |\n| Notes payable           | 300   | 310   |\n| Accrued taxes and expenses| 76   | 99    |\n| Total current liabilities| 671   | 726   |\n| Long-term debt          | 1,010 | 1,050 |\n| Common stock            | 50    | 50    |\n| Additional paid-in capital| 300  | 300   |\n| Retained earnings       | 1,070 | 1,265 |\n| Total shareholders' equity| 1,420 | 1,615 |\n| Total liabilities and shareholders' equity | $3,101 | $3,391 |",
            "| Statement of Income<br>In Millions, except Per-Share Data | 31 December 2008 |\n|----------------------------------------------------------|-----------------|\n| Total revenues                                           | $2,215           |\n| Operating costs and expenses                             | 1,430           |\n| EBITDA                                                   | 785             |\n| Depreciation                                             | 180             |\n| EBIT                                                     | 605             |\n| Interest expense                                         | 130             |\n| Income before tax                                        | 475             |\n| Taxes (at 40 percent)                                    | 190             |\n| Net income                                               | 285             |\n| Dividends                                                | 90              |\n| Addition to retained earnings                            | 195             |",
            "| Statement of Cash Flows In Millions | 31 December 2008 |\n|---|---|\n| Operating activities |   |\n| Net income | $285 |\n| Adjustments |   |\n| Depreciation | 180 |\n| Changes in working capital |   |\n| Accounts receivable | (39) |\n| Inventories | (44) |\n| Accounts payable | 22 |\n| Accrued taxes and expenses | 23 |\n| Cash provided by operating activities | $427 |\n| Investing activities |   |\n| Purchases of fixed assets | $349 |\n| Cash used for investing activities | $349 |\n| Financing activities |   |\n| Notes payable | $(10) |\n| Long-term financing issuances | (40) |\n| Common stock dividends | 90 |\n| Cash used for financing activities | $40 |\n| Cash and equivalents increase (decrease) | 38 |\n| Cash and equivalents at beginning of year | 210 |\n| Cash and equivalents at end of year | $248 |\n| Supplemental cash flow disclosures |   |\n| Interest paid | $130 |\n| Income taxes paid | $190 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that computes the difference between Free Cash Flow to the Firm (FCFF) and Free Cash Flow to Equity (FCFE) based on the financial statements provided by the organization:\n\n```python\ndef solution():\n    # Define variables name and value\n    \n    # Net Income\n    net_income = 285\n    \n    # Depreciation (non-cash charge)\n    depreciation = 180\n    \n    # Interest Expense\n    interest_expense = 130\n    \n    # Tax Rate\n    tax_rate = 0.40\n    \n    # Change in Working Capital\n    change_in_receivables = 39\n    change_in_inventories = 44\n    change_in_payables = 22\n    change_in_accrued_expenses = 23\n    change_in_working_capital = -(change_in_receivables + change_in_inventories - change_in_payables - change_in_accrued_expenses)\n    \n    # Capital Expenditure (Purchases of fixed assets)\n    capital_expenditure = 349\n    \n    # Notes Payable (decrease in short-term debt)\n    notes_payable = 10\n    long_term_financing = 40\n    \n    # Calculate FCFF (Free Cash Flow to the Firm)\n    fcff = net_income + depreciation + (interest_expense * (1 - tax_rate)) - change_in_working_capital - capital_expenditure\n    \n    # Calculate FCFE (Free Cash Flow to Equity)\n    fcfe = net_income - capital_expenditure + depreciation - change_in_working_capital + notes_payable + long_term_financing\n    \n    # Calculate the difference between FCFF and FCFE\n    difference = fcff - fcfe\n    \n    # return answer\n    return difference\n\n# Call the function and print the result\nprint(solution())\n```\nThis program calculates FCFF and FCFE using the standard formulas and then finds the difference between them. The results will give the difference in cash flows available to the firm's providers of capital (both debt and equity holders for FCFF) versus the cash flows available to the equity holders alone (FCFE)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-770",
        "question": "Did Sesame Corp, which complies with IFRS, charge which amount to inventory expense (€ millions) after it acquired inventory worth €100 million and allocated €5 million for storage before selling the items?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquired_inventory = 100  # in millions of euros\n    storage_costs = 5  # in millions of euros\n\n    # IFRS allows the capitalization of directly attributable costs, \n    # which include storage costs when necessary to bring the inventories to their present location and condition.\n\n    # The inventory expense will be the cost of acquired inventory including the storage cost.\n    inventory_expense = acquired_inventory + storage_costs\n    \n    # return answer\n    return inventory_expense\n\n# Example usage:\n# print(solution())\n```\nThe inventory expense according to IFRS includes the cost of acquired inventory and other costs necessary to bring the inventories to their present location and condition (such as storage costs in this case). Therefore, in this program, we calculate the total inventory expense by adding the storage costs to the acquired inventory cost."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-771",
        "question": "As a junior analyst at a modest investment firm, Jacob was tasked with assessing the value of a food service company known as SpeedyEats, based out of Shanghai. The company's stock price on the 20th of January 2018 stood at $35. Jacob collected data and made projections on the company as illustrated below. Based on the provided data, what is the trailing P/E of the company?",
        "tables": [
            "|                       | 2015 | 2016  | 2017 | 2018(E) |\n|-----------------------|------|-------|------|---------|\n| Earnings per share    | 5.56 | 6.23  | 4.72 | 6.5     |\n| Return on equity (ROE)| 11%  | 12.32%| 9.25%| 12.5%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program to calculate the trailing P/E (Price to Earnings) ratio of the company. The trailing P/E ratio is calculated by dividing the current stock price by the last reported full-year earnings per share (EPS).\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_price = 35  # Current stock price as of January 20, 2018\n    eps_2017 = 4.72   # Earnings Per Share for the year 2017\n    \n    # Do math calculation to get the answer\n    trailing_pe = stock_price / eps_2017  # Trailing P/E calculation\n    \n    # return answer\n    return trailing_pe\n\n# You can test the function with:\n# print(solution())\n```\n\nWhen you run this program, `solution()` will return the trailing P/E ratio for SpeedyEats based on the stock price as of January 20, 2018, and the EPS reported for the year 2017."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-772",
        "question": "Think about a call option that is trading at $4 where the strike price is $50. What would be the final value and the earnings for the vendor if the price of the underlying asset at expiration is $49?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_premium = 4\n    strike_price = 50\n    underlying_price_at_expiration = 49\n    \n    # Do math calculation to get the answer\n    if underlying_price_at_expiration < strike_price:\n        # The option is out of the money and will not be exercised\n        final_value = 0\n        earnings_for_vendor = option_premium  # Vendor keeps the premium\n    else:\n        # The option is in the money and will be exercised\n        intrinsic_value = underlying_price_at_expiration - strike_price\n        final_value = intrinsic_value\n        earnings_for_vendor = option_premium - final_value\n    \n    # return answer\n    answer = (final_value, earnings_for_vendor)\n    return answer\n\n# This will call the solution function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-773",
        "question": "What is the market value added of the theoretical company, according to the data in the table below?",
        "tables": [
            "| Current share price | 20 |\n|---------------------|----|\n| Book value per share | 15 |\n| Total shares outstanding | 25 millions |\n| Market value of debt | 60 millions |\n| Accounting book value of total capital | 400 millions |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program to calculate the Market Value Added (MVA) for the given theoretical company based on the data provided.\n\n```python\ndef solution():\n    # Define variables name and value\n    current_share_price = 20\n    total_shares_outstanding = 25e6  # 25 millions converted to actual number\n    market_value_of_debt = 60e6  # 60 millions\n    accounting_book_value_of_total_capital = 400e6  # 400 millions\n\n    # Calculate the market value of equity\n    market_value_of_equity = current_share_price * total_shares_outstanding\n\n    # Calculate the market value of the company (equity + debt)\n    total_market_value = market_value_of_equity + market_value_of_debt\n\n    # Calculate the Market Value Added (MVA)\n    mva = total_market_value - accounting_book_value_of_total_capital\n\n    # return answer\n    return mva\n\n# You can uncomment the following line to test the function\n# print(solution())\n```\n\nWhen you run this program, it will calculate and return the Market Value Added (MVA) of the theoretical company with the given data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-774",
        "question": "What is the evaluation of PZ Inc.'s 2018 FCFF (in millions) according to the 2017 and 2018 financial statements provided by the company, as assessed by Jacques?",
        "tables": [
            "|                               |     | 2018 |     | 2017 |\n|-------------------------------|-----|------|-----|------|\n| Assets                           |     |      |     |      |\n| Current assets                   |     |      |     |      |\n| Accounts receivable              |     | 800  |     | 750  |\n| Inventories                      |     | 850  |     | 720  |\n| Gross fixed assets               |     | 5000 |     | 4250 |\n| Accounts payable                 |     | $ 400  |     | $300 |\n| Accrued taxes and expenses       |     | 120  |     | 90   |\n| Notes payable                    |     | 550  |     | 500  |\n| Long-term debt                   |     | 1,500 |     | 1,400 |\n| Income Statement for the Year Ended 31 December 2018 |     |      |     |      |\n| EBITDA                           |     |      |     | 2000 |\n| Depreciation expense             |     |      |     | 400  |\n| EBIT                             |     |      |     | 1600 |\n| Interest expense                 |     |      |     | 350  |\n| Pretax income                    |     |      |     | 1250 |\n| Income tax (at 30 percent)       |     |      |     | 375  |\n| Net income                       |     |      |     | $ 875  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To evaluate the Free Cash Flow to the Firm (FCFF) in 2018 for PZ Inc., we need to use the following formula:\n\nFCFF = EBIT (1 - Tax Rate) + Depreciation Expense - Increase in Net Working Capital - Capital Expenditure\n\nHere the tax rate is given as 30%, so the (1 - Tax Rate) factor becomes (1 - 0.30) which is 0.70.\n\nLet's create the program as requested:\n\n```python\ndef solution():\n    # Define variables name and value\n    ebit = 1600  # in millions\n    tax_rate = 0.3\n    depreciation_expense = 400  # in millions\n    \n    # Net Working Capital calculations\n    current_assets_2017 = 750 + 720  # in millions (Accounts receivable + Inventories for 2017)\n    current_assets_2018 = 800 + 850  # in millions (Accounts receivable + Inventories for 2018)\n    current_liabilities_2017 = 300 + 90 + 500  # in millions (Accounts payable + Accrued taxes + Notes payable for 2017)\n    current_liabilities_2018 = 400 + 120 + 550  # in millions (Accounts payable + Accrued taxes + Notes payable for 2018)\n    \n    nwc_2017 = current_assets_2017 - current_liabilities_2017\n    nwc_2018 = current_assets_2018 - current_liabilities_2018\n    increase_in_nwc = nwc_2018 - nwc_2017  # This is the increase in Net Working Capital from 2017 to 2018.\n    \n    # Capital Expenditure calculations\n    gross_fixed_assets_2017 = 4250  # in millions\n    gross_fixed_assets_2018 = 5000  # in millions\n    capital_expenditure = gross_fixed_assets_2018 - gross_fixed_assets_2017 + depreciation_expense\n    \n    # Do math calculation to get the FCFF\n    fcff = (ebit * (1 - tax_rate)) + depreciation_expense - increase_in_nwc - capital_expenditure\n    \n    # return FCFF\n    return fcff\n    \n# Call the function and print the result for verification\nprint(solution())\n```\nWhen you run this Python program, it will calculate the FCFF for PZ Inc. for the year 2018."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-775",
        "question": "Gemini is planning to buy a two-year Treasury note futures contract. The base 1.2%, semi-annual two-year Treasury note is listed at a clean price of 103. It's been 60 days since the last coupon payment. Gemini is aiming to determine the total spot price of the base two-year Treasury note:",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly, to calculate the total spot price of the base two-year Treasury note, we need to consider both the clean price and the accrued interest since the last coupon payment. This can be done by calculating how much interest has accumulated since the last coupon payment was made. The formula for accrued interest is:\n\nAccrued Interest = (Coupon Rate per Period) * (Number of Days Since Last Payment / Days in Coupon Period)\n\nSince it's a semi-annual coupon and it's been 60 days since the last coupon payment, we'll calculate the interest for that period. For a semi-annual coupon, the coupon period is 6 months or approximately 180 days (assuming 30-day months for simplicity). The coupon rate per period is 1.2% annually, so for a semi-annual period, it's half of that. Here's the Python program to calculate the total spot price:\n\n```python\ndef solution():\n    # Define variables name and value\n    clean_price = 103\n    annual_coupon_rate = 1.2 / 100  # Convert percentage to decimal\n    days_since_last_payment = 60\n    days_in_coupon_period = 180  # Approximate with a 30-day month\n    \n    # Calculate semi-annual coupon rate\n    semi_annual_coupon_rate = annual_coupon_rate / 2\n    \n    # Calculate the face value since it's not given, assume it's 100\n    face_value = 100\n    \n    # Calculate accrued interest\n    accrued_interest = semi_annual_coupon_rate * face_value * (days_since_last_payment / days_in_coupon_period)\n    \n    # Calculate the total spot price (clean price + accrued interest)\n    total_spot_price = clean_price + accrued_interest\n    \n    # return answer\n    return total_spot_price\n\n# Call the function and print the result if necessary\n# print(solution())\n```\n\nYou can call the `solution()` function to get the total spot price. If you need to print the result or test the function, you can uncomment the print statement at the bottom."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-776",
        "question": "What is the Equivalent YTM if the buying price of a 30-day Treasury Bill is 99.5?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Treasury bills have a face value of $100\n    purchase_price = 99.5\n    days_to_maturity = 30\n    \n    # Do math calculation to get the yield\n    discount_yield = (face_value - purchase_price) / face_value\n    annualized_yield = (discount_yield / days_to_maturity) * 365\n    \n    # return answer\n    return annualized_yield\n    \n```\n\nThis program will calculate the equivalent annualized yield to maturity (YTM) for a 30-day Treasury bill given a purchase price of 99.5. The Treasury bill is assumed to have a face value of $100 which is a standard value for T-bills. The yield is annualized by dividing the discount yield by the number of days to maturity and then multiplying by 365 to get the annual rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-777",
        "question": "If the interest rates are 10% and they surge by 25 basis points, how much will the bond portfolio value diminish by, given that these are the current specifications: Portfolio X has 8 bonds under a long position, a price of $90,000, and a modified duration of 2.5, Portfolio Y is worth $110,000 and holds a short position in 6 bonds with a modified duration of 3, and Portfolio Z's details are a $120,000 price, a modified duration of 3.3, and a long position in 12 bonds?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! Below is a Python program that calculates the change in the bond portfolio value as a result of the surge in interest rates.\n\n```python\ndef solution():\n    # Define variables name and value\n    basis_point_change = 25 / 10000  # 25 basis points converted to decimal\n    initial_interest_rate = 0.10  # 10%\n\n    # Portfolio X details\n    price_X = 90000\n    modified_duration_X = 2.5\n    number_of_bonds_X = 8\n    position_X = 'long'  # 'long' or 'short'\n\n    # Portfolio Y details\n    price_Y = 110000\n    modified_duration_Y = 3\n    number_of_bonds_Y = 6\n    position_Y = 'short'  # 'long' or 'short'\n\n    # Portfolio Z details\n    price_Z = 120000\n    modified_duration_Z = 3.3\n    number_of_bonds_Z = 12\n    position_Z = 'long'  # 'long' or 'short'\n\n    # Calculate the percentage change in price due to interest rate change\n    price_change_X = -modified_duration_X * basis_point_change\n    price_change_Y = -modified_duration_Y * basis_point_change\n    price_change_Z = -modified_duration_Z * basis_point_change\n\n    # Calculate the total value change for each portfolio\n    value_change_X = price_X * number_of_bonds_X * price_change_X\n    value_change_Y = price_Y * number_of_bonds_Y * price_change_Y\n    value_change_Z = price_Z * number_of_bonds_Z * price_change_Z\n\n    # Adjust for position\n    if position_X == 'short':\n        value_change_X *= -1\n    if position_Y == 'short':\n        value_change_Y *= -1\n    if position_Z == 'short':\n        value_change_Z *= -1\n\n    # Sum up the value changes for all portfolios\n    total_value_change = value_change_X + value_change_Y + value_change_Z\n\n    return total_value_change\n\n# call the function and print the answer\nprint(solution())\n``` \n\nRunning this program will provide you with the total change in the portfolio value due to the described interest rate surge."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-778",
        "question": "Compute the standard deviation of the portfolio as per the data presented in the below table:",
        "tables": [
            "|                          |      |\n|--------------------------|------|\n| weight of asset A        | 30%  |\n| weight of asset B        | 70%  |\n| standard deviation of asset A | 10%  |\n| standard deviation of asset B  | 15%  |\n| correlation coefficient  | -0.7 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_A = 0.30\n    weight_B = 0.70\n    std_dev_A = 0.10\n    std_dev_B = 0.15\n    correlation_AB = -0.7\n    \n    # Do math calculation to get the standard deviation of the portfolio\n    portfolio_variance = ((weight_A * std_dev_A) ** 2 +\n                          (weight_B * std_dev_B) ** 2 +\n                          2 * weight_A * weight_B * std_dev_A * std_dev_B * correlation_AB)\n    \n    # The standard deviation is the square root of the variance\n    portfolio_std_dev = math.sqrt(portfolio_variance)\n    \n    # Return answer\n    return portfolio_std_dev\n\n# Uncomment the following line to check the function output\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-779",
        "question": "Referring to Exhibit 2, what percentage of the total portfolio risk is accounted for by the market factor in the current portfolio of Fund 1?",
        "tables": [
            "|       Factor      | Market |  Size  | Value | Momentum |\n|:-----------------:|:------:|:------:|:-----:|:--------:|\n|    Coefficient    |  1.080 |  0.098 | -0.401|  0.034   |\n| Variance of the market factor return and covariances with the market factor return | 0.00109 | 0.00053 | 0.00022 | -0.00025 |\n| Portfolio's monthly standard deviation of returns | | | | 3.74% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_coefficient = 1.080\n    variance_of_market_factor = 0.00109\n    portfolio_monthly_std_dev = 3.74 / 100  # convert percentage to decimal\n\n    # Calculate total portfolio variance\n    portfolio_variance = portfolio_monthly_std_dev ** 2\n    \n    # Calculate contribution of market factor to total variance\n    market_factor_contribution = (market_coefficient ** 2) * variance_of_market_factor\n    \n    # Calculate the percentage of total portfolio risk accounted by market factor\n    market_risk_percentage = (market_factor_contribution / portfolio_variance) * 100\n    \n    # return answer\n    return market_risk_percentage\n\n# Call the function and print the result\nresult = solution()\nprint(result) # This line is for output demonstration only; it could be removed, and just the function would be provided.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-780",
        "question": "If a luxury vehicle, bought for £200,000, is financed for a duration of five years with an annual interest rate of 6% compounded monthly with the initial payment due in a month, how much is the monthly payment?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! To calculate the monthly payment of a loan, we can use the formula for the monthly payment on an amortizing loan, which is given by the formula:\n\n\\[ M = P \\frac{r(1+r)^n}{(1+r)^n-1} \\]\n\nwhere:\n- \\( M \\) is the monthly payment\n- \\( P \\) is the principal amount (initial loan amount)\n- \\( r \\) is the monthly interest rate\n- \\( n \\) is the number of payments (total number of months)\n\nHere's how you can write the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 200000  # Principal amount £200,000\n    annual_interest_rate = 0.06  # Annual interest rate of 6%\n    loan_duration_years = 5  # Duration of the loan in years\n    \n    # Calculate monthly interest rate and total number of payments\n    monthly_interest_rate = annual_interest_rate / 12\n    total_payments = loan_duration_years * 12\n    \n    # Calculate monthly payment using the formula\n    monthly_payment = principal * (monthly_interest_rate * (1 + monthly_interest_rate)**total_payments) / ((1 + monthly_interest_rate)**total_payments - 1)\n    \n    # return monthly payment\n    return monthly_payment\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis will give you the monthly payment that needs to be made on the luxury vehicle loan. Note that floating-point arithmetic in Python can sometimes lead to precision issues, so in financial calculations, it's often a good practice to use the `decimal` module for better precision. However, for simplicity, this example uses regular floating-point arithmetic."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-781",
        "question": "If a bondholder has a bond with a 9% coupon rate that pays interest biannually and matures in three years and they are thinking about selling it. If the necessary return rate on the bond is 11%, what is the bond's cost per 100 of nominal value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that will calculate the bond's price per 100 of nominal value:\n\n```python\ndef solution():\n    # Given variables\n    coupon_rate = 0.09\n    payments_per_year = 2  # Biannually means twice a year\n    years_to_maturity = 3\n    required_return_rate = 0.11\n    face_value = 100  # per 100 of nominal value\n\n    # Calculate the coupon payment\n    coupon_payment = coupon_rate * face_value / payments_per_year\n\n    # Initialize the price to 0\n    bond_price = 0\n    \n    # Calculate the present value of coupon payments\n    for i in range(1, years_to_maturity * payments_per_year + 1):\n        bond_price += coupon_payment / ((1 + required_return_rate / payments_per_year) ** i)\n\n    # Calculate the present value of the face value (paid at maturity)\n    bond_price += face_value / ((1 + required_return_rate / payments_per_year) ** (years_to_maturity * payments_per_year))\n\n    # Return the bond price\n    return round(bond_price, 2)\n\n# Call the function and print the result if you want to see the numeric output\n# print(solution())\n``` \n\nThe `solution` function calculates the present value of each of the coupon payments and the face value (paid at maturity) for a bond with semi-annual payments to get its price if the required return rate is different than the coupon rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-782",
        "question": "What is the association between the returns of the hedge fund and the market index as per the covariance matrix of returns constructed by a researcher?",
        "tables": [
            "|           | Hedge Fund | Market Index |\n|-----------|------------|--------------|\n| Hedge Fund   | 256        | 110          |\n| Market Index | 110        | 81           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program to calculate the association, or covariance, between the returns of the hedge fund and the market index using the given covariance matrix:\n\n```python\ndef solution():\n    # Define variables name and value\n    # These are the covariance values provided in the matrix between Hedge Fund and Market Index\n    covariance_hedge_fund_market_index = 110\n    \n    # return answer\n    return covariance_hedge_fund_market_index\n\n# Call the function and print result\nprint(solution())\n```\n\nThe association between the returns of the hedge fund and the market index is represented by the off-diagonal element in the covariance matrix, which in this case is 110. This value indicates the degree to which the two returns move in relation to each other. A positive covariance suggests that the hedge fund and market index returns tend to move in the same direction."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-783",
        "question": "If John invests in a fund and the annual returns range between 1.03% ≤ x <4.77%, what will be the cumulative relative frequency?",
        "tables": [
            "|     |     |     |     |\n|-----|-----|-----|-----|\n|**Return in 2006-2017(%)**||||\n| 2006 | 1.48 | 2012 | -8.19|\n| 2007 | -1.59| 2013 | -4.11|\n| 2008 | 8.47 | 2014 | 0.33 |\n| 2009 | -1.55| 2015 | 5.84 |\n| 2010 | -2.69| 2016 | 2.04 |\n| 2011 | -1.89| 2017 | 3.72 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [1.48, -1.59, 8.47, -1.55, -2.69, -1.89, -8.19, -4.11, 0.33, 5.84, 2.04, 3.72]\n    \n    # Do math calculation to get the answer\n    # Calculate how many returns are within the specified range\n    count_within_range = sum(1 for x in returns if 1.03 <= x < 4.77)\n    cumulative_relative_frequency = count_within_range / len(returns)\n    \n    # return answer\n    return cumulative_relative_frequency\n\n# Call the function and print the result\nprint(solution())\n```\n\nBy running this program, it would iterate over the list of returns and count how many of them are within the specified range. Then it would divide that count by the total number of returns to get the cumulative relative frequency. Finally, it prints the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-784",
        "question": "Grand Rapids Titanium Corp (GRTC) sustains an 80 percent dividend payout ratio due to its restricted growth possibilities. The company's return on equity stands at 15 percent. The obligatory return rate on GRTC's equity is 12 percent, while its anticipated long-term growth rate is 3 percent. Can you determine the justified P/B using the projected fundamentals, in accordance with the residual income model and under the assumption of a constant growth rate?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_ratio = 0.80\n    return_on_equity = 0.15\n    required_return = 0.12\n    growth_rate = 0.03\n\n    # Calculate the sustainable growth rate\n    sustainable_growth_rate = return_on_equity * (1 - dividend_payout_ratio)\n\n    # Calculate the Book value per share (P/B ratio)\n    # According to the residual income model:\n    # P/B = (ROE - g) / (r - g)\n    justified_PB_ratio = (return_on_equity - growth_rate) / (required_return - growth_rate)\n    \n    # return answer\n    return justified_PB_ratio\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-785",
        "question": "In the latest financial year, Farrow Inc. had average days of sales outstanding of 19 days. Farrow is aiming to enhance its credit policies and collection methodologies and reduce its collection phase in the forthcoming financial year to align with the market average of 15 days. The credit sales in the latest fiscal year were $300 million, and they are estimated to rise to $390 million in the next fiscal year. What should be the alteration in the average accounts receivable balance to accomplish Farrow's objective of decreasing the collection period?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    current_days_outstanding = 19\n    target_days_outstanding = 15\n    credit_sales_current_year = 300000000  # $300 million\n    credit_sales_next_year = 390000000     # $390 million\n\n    # Calculate current average accounts receivable balance using the formula:\n    # Average Account Receivable = Credit Sales / Accounts Receivable Turnover\n    # and Accounts Receivable Turnover = 365 / Days of Sales Outstanding\n    current_receivables_turnover = 365 / current_days_outstanding\n    current_avg_accounts_receivable = credit_sales_current_year / current_receivables_turnover\n\n    # Calculate target average accounts receivable balance for the next year\n    target_receivables_turnover = 365 / target_days_outstanding\n    target_avg_accounts_receivable = credit_sales_next_year / target_receivables_turnover\n\n    # Calculate the change required\n    change_in_avg_receivable = target_avg_accounts_receivable - current_avg_accounts_receivable\n    \n    # return answer\n    return round(change_in_avg_receivable, 2)\n\n# Call the solution function and print the answer\nprint(solution())\n```\n\nThis program will calculate the change in average accounts receivable balance needed for Farrow Inc. to achieve its target of decreasing the collection period from 19 to 15 days, considering the increase from $300 million to $390 million in credit sales for the next fiscal year. The `round()` function is used to round off the change to 2 decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-786",
        "question": "In a set of mortgages, 50% are deemed as subprime. The principal balance of 50% of these subprime mortgages and 25% of the non-subprime mortgages are higher than the value of the property used as collateral. If you randomly pick a mortgage from this set for inspection and its principal balance is more than the value of the collateral, what is the likelihood that it is a subprime mortgage?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program that calculates the likelihood that a randomly picked mortgage (with a principal balance more than the value of the collateral) is a subprime mortgage:\n\n```python\ndef solution():\n    # Probability that a mortgage is subprime\n    prob_subprime = 0.5\n    \n    # Probability that a subprime mortgage has a principal balance higher than the value of the property\n    prob_higher_balance_subprime = 0.5\n    \n    # Probability that a non-subprime mortgage has a principal balance higher than the value of the property\n    prob_higher_balance_non_subprime = 0.25\n    \n    # Probability of a randomly chosen mortgage having a higher principal balance than the value of the property\n    # This is a total probability considering both subprime and non-subprime mortgages\n    prob_higher_balance = (prob_subprime * prob_higher_balance_subprime) + \\\n                          ((1 - prob_subprime) * prob_higher_balance_non_subprime)\n    \n    # Using Bayes' theorem to find the probability that a mortgage is subprime given it has higher balance than value\n    prob_subprime_given_higher_balance = (prob_higher_balance_subprime * prob_subprime) / prob_higher_balance\n    \n    # Return the answer\n    return prob_subprime_given_higher_balance\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis code uses Bayes' theorem to calculate the conditional probability that a mortgage is subprime given that its principal balance is higher than the value of the collateral. The calculations involve finding the total probability of a higher principal balance across all mortgages, then using that to find the desired conditional probability."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-787",
        "question": "What is the value per 100 of par value for a two-year, 3.5% coupon bond, where interest payments are disbursed once a year, considering all rates mentioned are annual rates with a periodicity of one (effective annual rates)?",
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.80%        |\n| 1y1y        | 1.12%        |\n| Z           | 3.94%        |\n| 3y1y        | 3.28%        |\n| 4y1y        | 3.14%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.035\n    coupon_payment = par_value * coupon_rate\n    forward_rate_0y1y = 0.0080\n    forward_rate_1y1y = 0.0112\n    # Since we don't use the rates for Z, 3y1y, and 4y1y, they are not defined here.\n\n    # Present value of the first coupon payment\n    pv_first_coupon = coupon_payment / (1 + forward_rate_0y1y)\n\n    # Present value of the second coupon payment + par value since it's at maturity\n    pv_second_coupon_par = (coupon_payment + par_value) / ((1 + forward_rate_1y1y) ** 2)\n    \n    # The bond value is the sum of both present values\n    bond_value = pv_first_coupon + pv_second_coupon_par\n    \n    # return answer\n    return round(bond_value, 2)\n\n# Call the solution function and print the result\nprint(solution())\n```\nPlease note that the program has used the rounded value of 2 decimal places for returning the result as we are dealing with currency related calculations where two decimal precision is standard. If you need more precision you can change the `round` function accordingly."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-788",
        "question": "Based on the provided data chart, what is the standard deviation of X?",
        "tables": [
            "|  X  | Y=5 | Y=2 | Y=-3 |\n| --- | --- | --- | ---- |\n| -2  | 0.2 | 0   | 0    |\n|  1  | 0   | 0.6 | 0    |\n|  4  | 0   | 0   | 0.2  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the standard deviation of X, we must multiply each value of X by its corresponding probability given the conditions of Y, sum these products to get the expected value (mean) of X, and then compute the variance by taking the weighted sum of the squared differences from the mean. Finally, we will take the square root of the variance to obtain the standard deviation.\n\nHere's a Python program that does just that:\n\n```python\nimport math\n\ndef solution():\n    # Define the values of X and their associated probabilities (weights)\n    values_and_weights = {\n        -2: (0.2 + 0 + 0),\n        1: (0 + 0.6 + 0),\n        4: (0 + 0 + 0.2)\n    }\n    \n    # Calculate expected value (mean) of X\n    mean_x = sum(x * weight for x, weight in values_and_weights.items())\n    \n    # Calculate variance\n    variance_x = sum(weight * ((x - mean_x) ** 2) for x, weight in values_and_weights.items())\n    \n    # Calculate standard deviation (square root of variance)\n    std_deviation_x = math.sqrt(variance_x)\n    \n    # return standard deviation\n    return std_deviation_x\n\n# This will print the standard deviation of X\nprint(solution())\n```\n\nWhen you run this program, it will return the standard deviation of X, based on the probabilities given in the table."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-789",
        "question": "What is the chance of a profit between $1 and $4, as depicted by the following table displaying the discrete uniform probability distribution of gross profits from buying an option?",
        "tables": [
            "| Profit | Cumulative  Distribution  Function |\n|--------|-----------------------------------|\n| $0     | 0.2                               |\n| $1     | 0.4                               |\n| $2     | 0.6                               |\n| $3     | 0.8                               |\n| $4     | 1.0                               |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cdf_profit_1 = 0.4  # Cumulative Distribution Function at profit $1\n    cdf_profit_4 = 1.0  # Cumulative Distribution Function at profit $4\n    \n    # Do math calculation to get the answer\n    # The chance of a profit between $1 and $4 is the difference in the CDFs at $4 and $1\n    chance = cdf_profit_4 - cdf_profit_1\n    \n    # return answer\n    return chance\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-790",
        "question": "In the year 2018, a firm that utilized US GAAP did cash disbursements of $6 million for employee wages, $2 million for interest liabilities, and $4 million for income tax obligations. Based solely on the data provided in the chart, what is the firm's cash flow from operations for 2018?",
        "tables": [
            "| ($ millions)          | 2017 | 2018 |\n|-----------------------|------|------|\n| Revenue               | 42   | 37   |\n| Cost of goods sold    | 18   | 16   |\n| Inventory             | 36   | 40   |\n| Accounts receivable   | 22   | 19   |\n| Accounts payable      | 14   | 12   |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the firm's cash flow from operations for the year 2018, we can use the indirect method starting with the net income and adjusting for non-cash expenses, changes in working capital, and other non-operating cash flows.\n\nThe net income can be estimated by subtracting the Cost of Goods Sold (COGS) and other expenses from the Revenue. However, it's important to note that without additional information such as operating expenses, depreciation, and amortization, we cannot accurately calculate net income.\n\nFor the purposes of this example, I'll assume that the only expenses are COGS and the cash disbursements mentioned. We will also need to calculate the changes in working capital. The change in working capital involves changes in accounts receivable, inventory, and accounts payable from the previous year.\n\nAccounts Receivable, Inventory, and Accounts Payable influence the cash flow. When accounts receivable decrease, it is a source of cash. When inventory increases, it is a use of cash. When accounts payable decrease, it is a use of cash, since the company is paying off its liabilities.\n\nWe don't have the information on other possible adjustments such as depreciation, amortization, or other non-cash charges which would typically be accounted for in a detailed cash flow statement. Given these constraints, we'll perform a simplified calculation.\n\nThe program should look like this:\n\n```python\ndef solution():\n    # Define variables from the table\n    revenue_2018 = 37  # millions\n    cogs_2018 = 16  # millions\n    inventory_2017 = 36\n    inventory_2018 = 40\n    accounts_receivable_2017 = 22\n    accounts_receivable_2018 = 19\n    accounts_payable_2017 = 14\n    accounts_payable_2018 = 12\n    \n    # Cash disbursements\n    wages_disbursement = 6\n    interest_disbursement = 2\n    tax_disbursement = 4\n    \n    # Calculate changes in working capital\n    change_in_receivables = accounts_receivable_2017 - accounts_receivable_2018\n    change_in_inventory = inventory_2017 - inventory_2018\n    change_in_payables = accounts_payable_2017 - accounts_payable_2018\n    \n    # Estimate net income (assuming no other expenses other than COGS)\n    # Addition of non-operating cash disbursement\n    net_income = revenue_2018 - cogs_2018\n    \n    # Calculate operating cash flow\n    cash_flow_from_operations = (\n        net_income\n        + change_in_receivables  # source of cash if receivables decrease\n        - change_in_inventory  # use of cash if inventory increases\n        + change_in_payables  # source of cash if payables decrease\n        - wages_disbursement\n        - interest_disbursement\n        - tax_disbursement\n    )\n    \n    # Return result\n    return cash_flow_from_operations\n\n# Let's execute the function and print the result\nprint(solution())\n```\n\nThis function, when executed, will return the firm's estimated cash flow from operations in 2018 based on the provided data. Remember that the actual cash flow from operations would typically include other adjustments which are not accounted for in this simplified calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-791",
        "question": "Given that the cost per unit for savings account services is 0.5%, the anticipated overhead costs assigned to these services is 1.2%, the targeted profit margin per unit sold is 0.3%, the variable cost rate is 1.2%, and the mean interest rate is 4.5%, what would be the savings rate as per the Cost Plus Profit Margin method of pricing Savings-related Services?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_per_unit = 0.005  # 0.5% as a decimal\n    overhead_costs = 0.012  # 1.2% as a decimal\n    profit_margin = 0.003  # 0.3% as a decimal\n    variable_cost_rate = 0.012  # 1.2% as a decimal\n    mean_interest_rate = 0.045  # 4.5% as a decimal\n    \n    # Do math calculation to get the answer\n    # Total cost rate is the sum of the cost components\n    total_cost_rate = cost_per_unit + overhead_costs + variable_cost_rate\n    \n    # The savings rate is the sum of the total cost rate and the targeted profit margin, subtracted from the mean interest rate.\n    savings_rate = mean_interest_rate - (total_cost_rate + profit_margin)\n    \n    # return answer\n    return savings_rate\n    \n# Calling the function and printing the result\nprint(solution())\n```\nWhen run, this program will calculate and return the savings rate according to the Cost Plus Profit Margin method based on the inputs provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-792",
        "question": "If a client wishes to purchase a ball from a store that has 200 balls, three of which are of the same size, what is the likelihood that one of the three balls will be chosen?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_balls = 200\n    desired_balls = 3\n    \n    # Do math calculation to get the answer\n    probability = desired_balls / total_balls\n    \n    # return answer\n    return probability\n\n# To get the result as a percentage, you might consider multiplying the result by 100.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-793",
        "question": "Imagine the present 1-year rate for zero-coupon bonds stays at 6%, and the coming 1-year will fall by 2%. What would be the 2-year spot rate?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.06  # current 1-year zero-coupon bond rate\n    r2 = 0.04  # next 1-year zero-coupon bond rate (6% - 2%)\n\n    # Do math calculation to get the answer\n    # The 2-year spot rate can be calculated using the 1-year rates and compounding them\n    # (1 + s2)^2 = (1 + r1) * (1 + r2)\n    s2 = ( (1 + r1) * (1 + r2) )**(1/2) - 1\n    \n    # return answer\n    return s2\n\n# Calling the function to check the answer\nprint(solution())\n```\n\nThis code snippet should compute the 2-year spot rate, based on the given present and future 1-year zero-coupon bond rates, through the process of compounding."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-794",
        "question": "Given the same circumstances, what is the USD/AUD spot rate?",
        "tables": [
            "| Current spot rate for the USD/EUR | 0.7500 |\n| --- | --- |\n| Forward rate for the EUR/AUD | 1.4300 |\n| EUR/AUD forward premium to the spot rate | 400 points |\n| USD: US dollar; EUR: Euro; AUD: Australian dollar | |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is the Python program to find the USD/AUD spot rate:\n\n```python\ndef solution():\n    # Given values\n    usd_eur_spot_rate = 0.7500\n    eur_aud_forward_rate = 1.4300\n    forward_premium_points = 400\n\n    # Convert forward premium points to decimal\n    forward_premium = forward_premium_points / 10000\n    \n    # Calculate the EUR/AUD spot rate \n    # Spot rate = Forward rate / (1 + Forward premium)\n    eur_aud_spot_rate = eur_aud_forward_rate / (1 + forward_premium)\n    \n    # Calculate the USD/AUD spot rate\n    # We have USD/EUR and EUR/AUD, so USD/AUD = USD/EUR * EUR/AUD\n    usd_aud_spot_rate = usd_eur_spot_rate * eur_aud_spot_rate\n    \n    # return answer\n    return usd_aud_spot_rate\n\n# Call function and print the result\nprint(solution())\n```\n\nThis program defines the given values, calculates the EUR/AUD spot rate from the forward rate and the forward premium, then multiplies the spot rates of USD/EUR and EUR/AUD to obtain the USD/AUD spot rate. After the calculation, it prints out the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-795",
        "question": "If a bond's current price is $101.45 and a financial advisor anticipates that the price will increase to $103.28 if interest rates drop by 0.25% or decrease to $100.81 if interest rates go up by 0.25%, what is the bond's effective duration?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that calculates the effective duration of the bond based on the information provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_price = 101.45\n    new_price_if_rates_fall = 103.28\n    new_price_if_rates_rise = 100.81\n    change_in_interest_rates = 0.25 / 100 # Convert basis points to decimal\n\n    # Calculate the change in price for an increase and a decrease in rates\n    price_increase = new_price_if_rates_fall - bond_price\n    price_decrease = bond_price - new_price_if_rates_rise\n\n    # Calculate the average change in price\n    average_price_change = (price_increase - price_decrease) / 2\n\n    # Calculate the effective duration using the formula\n    effective_duration = -average_price_change / (bond_price * change_in_interest_rates)\n    \n    # return answer\n    return effective_duration\n```\n\nThis simple program follows the standard calculations for effective duration, which measures the price sensitivity of a bond when interest rates change. The duration estimates how much the price of a bond is expected to change when the yield to maturity changes by one percentage point. In this case, we use the provided bond prices if interest rates either increase or decrease by 0.25% (or 25 basis points), and the given current bond price to calculate the bond's effective duration."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-796",
        "question": "What is the operational cash flow, taking into account the chosen data from the business's activities?",
        "tables": [
            "|                       |        |\n| --------------------- | ------ |\n| Net income $          | 100,000|\n| Increase in accounts receivable | 12,000 |\n| Increase in accounts payable | 9,000   |\n| Depreciation and amortization   | 8,000   |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 100000\n    increase_in_accounts_receivable = 12000\n    increase_in_accounts_payable = 9000\n    depreciation_amortization = 8000\n    \n    # Do math calculation to get the answer\n    operational_cash_flow = (net_income - increase_in_accounts_receivable \n                             + increase_in_accounts_payable \n                             + depreciation_amortization)\n    \n    # return answer\n    return operational_cash_flow\n\n# Uncomment the line below to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-797",
        "question": "The XY corporation is an American business that follows US GAAP. It also owns two European subsidiary companies: FS financial service and FC financial consultant. John, a CFA, has compiled a forecast of XY's 2018 financial statement. If XY chooses the current rate method to convert the data of FS into US dollars and the temporal method for converting the data of FC into US dollars, what will the total assets be on 31 December 2018 when XY translates FS's results into US dollars?",
        "tables": [
            "|                           |         |\n|---------------------------|---------|\n| Forecasted Balance Sheet Data for LI at 31 December 2018    |         |\n| Cash                      | 120     |\n| Accounts receivable       | 30      |\n| Inventory                 | 450     |\n| Fixed assets              | 800     |\n| Total assets              | 1,400   |\n| Liabilities               | 320     |\n| Common stock              | 780     |\n| Retained earnings         | 300     |",
            "|                            | Exchange rates ($/€) |\n|----------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018           | 1.77                 |\n| 2018 average               | 1.68                 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # These values are given in euros and we need to convert them into US dollars.\n    cash_euros = 120\n    accounts_receivable_euros = 30\n    inventory_euros = 450\n    fixed_assets_euros = 800\n    total_assets_euros = 1400\n    \n    # Exchange rates\n    current_rate = 1.77 # Current rate at 31 December 2018 for conversion\n    \n    # For the current rate method, we convert all the balance sheet items using the current rate.\n    cash_dollars = cash_euros * current_rate\n    accounts_receivable_dollars = accounts_receivable_euros * current_rate\n    inventory_dollars = inventory_euros * current_rate\n    fixed_assets_dollars = fixed_assets_euros * current_rate\n    total_assets_dollars = total_assets_euros * current_rate\n    \n    # Do math calculation to get the answer\n    # Since we're asked for just the total assets, we can use the total_assets and convert using the current rate\n    # Or we can add up all the converted assets.\n    # total_assets_converted = total_assets_euros * current_rate\n    # or\n    total_assets_converted = cash_dollars + accounts_receivable_dollars + inventory_dollars + fixed_assets_dollars\n    \n    # return answer\n    return total_assets_converted\n\n# Execute the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-798",
        "question": "Basing on the information provided in Exhibit 1, what would be the most suitable price-to-earnings ratio to apply in the assessment of value for the soft drink manufacturing and distribution company, Delite Beverage, especially considering their recent acquisition of a large water bottling firm?",
        "tables": [
            "|                         | Delite Beverage |\n|------------------------ |-----------------|\n| 2010 Earnings per share (EPS) | $3.44         |\n| 2011 estimated EPS      | $3.50          |\n| Book value per share end of year | $62.05    |\n| Current share price     | $65.50         |\n| Sales (billions)        | $32.13         |\n| Free cash flow per share| $2.68          |\n| Shares outstanding end of year | 2,322,034,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To determine the most suitable price-to-earnings (P/E) ratio for Delite Beverage, we would typically look at the industry average P/E ratio, historical P/E ratios of the company, and adjust for growth prospects and current market conditions. However, since the question asks for an assessment of value \"especially considering their recent acquisition of a large water bottling firm,\" the P/E ratio should reflect the company's capacity to grow earnings as a result of this acquisition.\n\nThe recent acquisition might lead to increased earnings in the future due to synergies and expanded market share. However, since we do not have the specific data regarding how the acquisition impacts earnings, we can only calculate the current P/E ratio based on the given data for 2010 EPS and the current share price.\n\nHere is the program to calculate the current Price-to-Earnings ratio:\n\n```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share_2010 = 3.44\n    current_share_price = 65.50\n    \n    # Do math calculation to get the current P/E ratio\n    price_to_earnings_ratio = current_share_price / earnings_per_share_2010\n    \n    # return answer\n    return price_to_earnings_ratio\n\n# Execute the function and print the P/E ratio\nprint(solution())\n```\n\nExecuting this function will give us the P/E ratio based on the 2010 EPS, which can serve as a baseline for the company's valuation. Alterations to the calculation should be made to incorporate factors such as the potential for earnings growth from the acquisition when information is available for a forward-looking assessment. Without specifics on how the acquisition impacts earnings or the industry's average P/E ratio, we cannot programmatically adjust the P/E ratio to reflect the acquisition's potential value accurately."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-799",
        "question": "The following data is provided for the returns on shares X and shares Y: the return variance for shares X is 100; the return variance for shares Y is 225, and the covariance between the returns on shares X and Y is 53.2. At the conclusion of 1999, you have USD 4 million in shares X. It's under consideration to move USD 1 million to shares Y while preserving USD 3 million in shares X. What is the risk reduction percentage, denoted by return standard deviation, that can be achieved with this strategy?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\nfrom math import sqrt\n\ndef solution():\n    # Define variables name and value\n    variance_x = 100  # Variance of returns on shares X\n    variance_y = 225  # Variance of returns on shares Y\n    covariance_xy = 53.2  # Covariance between the returns on X and Y\n    \n    # Initial investment in shares X\n    investment_x_initial = 4e6  # USD 4 million\n    # Planned investment in shares X and Y after reallocation\n    investment_x_final = 3e6  # USD 3 million remains in shares X\n    investment_y_final = 1e6  # USD 1 million to be moved to shares Y\n    \n    # Calculate initial and final portfolio standard deviation\n    std_dev_x_initial = sqrt(variance_x)\n    # Portfolio variance calculation using initial and final weights\n    portfolio_variance_initial = variance_x\n    portfolio_variance_final = (\n        (investment_x_final/investment_x_initial)**2 * variance_x +\n        (investment_y_final/investment_x_initial)**2 * variance_y +\n        2 * (investment_x_final/investment_x_initial) * (investment_y_final/investment_x_initial) * covariance_xy\n    )\n    std_dev_final = sqrt(portfolio_variance_final)\n    \n    # Calculate risk reduction percentage in terms of return standard deviation\n    risk_reduction = ((std_dev_x_initial - std_dev_final) / std_dev_x_initial) * 100\n    \n    # return answer\n    return risk_reduction\n\n# Example usage:\nprint(solution())\n```\nThis program defines a function `solution()` that calculates the risk reduction percentage when reallocating funds from share X to share Y. The reduction is computed in terms of the standard deviation of the portfolio's return. It makes use of the initial variance and covariance information provided and considers a $4 million initial investment in share X with a planned reallocation of $1 million to share Y, keeping $3 million in share X. The calculation proceeds to work out the initial and final standard deviations of the investment portfolio and concludes by working out the percentage reduction in risk after reallocation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-800",
        "question": "Based on the provided table, what is the value of F(4)?",
        "tables": [
            "| X     | 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    |\n|-------|------|------|------|------|------|------|------|------|\n| P(X)  | 0.14 | 0.09 | 0.19 | 0.25 | 0.17 | 0.06 | 0.03 | 0.07 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define probabilities for each value of X\n    probabilities = {\n        0: 0.14,\n        1: 0.09,\n        2: 0.19,\n        3: 0.25,\n        4: 0.17,\n        5: 0.06,\n        6: 0.03,\n        7: 0.07\n    }\n    \n    # Calculate the cumulative probability up to X = 4 (F(4))\n    cumulative_probability = sum([prob for x, prob in probabilities.items() if x <= 4])\n    \n    # return answer\n    return cumulative_probability\n\n# Program execution\nprint(solution())  # This print statement is for testing and can be removed.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-801",
        "question": "A bond was purchased by Robert with a remaining maturity of two years. The face value of the bond is 1000. The annual interest rate is 4% and the interest is paid once a year. The current market discount rate is 4.5%. What is the cost of the bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    annual_coupon_rate = 0.04\n    annual_discount_rate = 0.045\n    years_to_maturity = 2\n    \n    # Calculate annual coupon payment\n    annual_coupon_payment = face_value * annual_coupon_rate\n    \n    # Present value of the coupon payments\n    present_value_coupons = 0\n    for i in range(1, years_to_maturity+1):\n        present_value_coupons += annual_coupon_payment / ((1 + annual_discount_rate) ** i)\n    \n    # Present value of the face value paid at maturity\n    present_value_face_value = face_value / ((1 + annual_discount_rate) ** years_to_maturity)\n    \n    # Calculate the cost of the bond\n    cost_of_bond = present_value_coupons + present_value_face_value\n    \n    # return answer\n    return round(cost_of_bond, 2)\n\n# uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-802",
        "question": "In order to make use of the cash position of assets under management, an investment strategist decides to engage in a long futures position on the S&P 500 index with a multiplier of 250. The cash position stands at $15 million and given the existing futures value of 1,000, requires the strategist to hold 60 contracts long. Given that the present initial margin is $12,500 per contract and the maintenance margin stands at $10,000 per contract, what amount of variation margin is required by the investment strategist if the value of the futures contract drops to 995 on the closing day of the position being initiated?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    contract_multiplier = 250\n    initial_futures_value = 1000\n    final_futures_value = 995\n    number_of_contracts = 60\n    initial_margin_per_contract = 12500\n    maintenance_margin_per_contract = 10000\n\n    # Do math calculation to get the answer\n\n    # Calculate the loss per contract\n    loss_per_contract = (initial_futures_value - final_futures_value) * contract_multiplier\n\n    # Calculate the total loss\n    total_loss = loss_per_contract * number_of_contracts\n\n    # Calculate the total initial margin\n    total_initial_margin = initial_margin_per_contract * number_of_contracts\n\n    # Calculate the total maintenance margin\n    total_maintenance_margin = maintenance_margin_per_contract * number_of_contracts\n\n    # Calculate the variation margin that is needed\n    # This is the amount required to bring the account back up to the initial margin if it falls below the maintenance margin\n    variation_margin_required = total_loss - (total_initial_margin - total_maintenance_margin) if total_loss > (total_initial_margin - total_maintenance_margin) else 0\n\n    # return answer\n    return variation_margin_required\n\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-803",
        "question": "Based on the provided frequency distribution table, can you compute the sample size?",
        "tables": [
            "| Return, R     | Frequency |\n| ------------- |:---------:|\n| -5% up to 0%  | 1         |\n| 0% up to 5%   | 6         |\n| 5% up to 10%  | 4         |\n| 10% up to 15% | 3         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    frequencies = [1, 6, 4, 3]\n    \n    # Compute the sample size by summing the frequencies\n    sample_size = sum(frequencies)\n    \n    # Return the answer\n    return sample_size\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-804",
        "question": "If we aim to incorporate seasons such as spring, summer, autumn, and winter as independent variables, how many dummy variables are required to construct a regression model?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # To incorporate 'n' categories (seasons in this case) as independent variables \n    # in a regression model, we need 'n - 1' dummy variables.\n    number_of_seasons = 4\n    number_of_dummy_variables_required = number_of_seasons - 1\n    \n    # return the number of dummy variables required\n    return number_of_dummy_variables_required\n\n# You can call the function and print its return value to get the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-805",
        "question": "John is interested in purchasing a 2-year bond with an annual coupon rate of 5%. The spot rates are listed as 4% for one year and 4.5% for two years. What is the cost of the bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # assumed, as it's not given in the question, but typical for bonds\n    coupon_rate = 0.05\n    spot_rate_year_1 = 0.04\n    spot_rate_year_2 = 0.045\n    \n    # Do math calculation to get the answer\n    # A bond's price is the present value of its cash flows (coupons + face value)\n    coupon_payment = face_value * coupon_rate\n    present_value_coupon_1 = coupon_payment / (1 + spot_rate_year_1)\n    present_value_coupon_2 = coupon_payment / ((1 + spot_rate_year_2) ** 2)\n    present_value_face_value = face_value / ((1 + spot_rate_year_2) ** 2)\n    \n    price_of_bond = present_value_coupon_1 + present_value_coupon_2 + present_value_face_value\n    \n    # return answer\n    return price_of_bond\n    \n# This will print the calculated price of the bond to the console\nprint(solution())\n```\n\nThis code calculates the present value of the future cash flows from the bond (both the annual coupon payments and the face value at maturity) and then sums them up to determine the cost of the bond today, given the spot rates for years one and two."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-806",
        "question": "An executive initiates a one-year currency swap which involves receiving RMB fixed and paying USD fixed. She utilizes the following data to determine the annualized fixed swap rate for USD: The annualized fixed swap rate for USD is:",
        "tables": [
            "| Days to maturity | RMB Spot Interest Rates | USD Spot Interest Rates |\n|-----------------|------------------------|------------------------|\n| 90              | 1%                     | 0.4%                   |\n| 180             | 1.5%                   | 0.6%                   |\n| 270             | 2.0%                   | 0.8%                   |\n| 360             | 2.5%                   | 1.0%                   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the annualized fixed swap rate for USD, we will need to calculate the average of the USD spot interest rates for the one-year period, taking into account the different days to maturity according to the data given. We can use the spot rates for 90, 180, 270, and 360 days to calculate the average rate. In this case, we can use a simple average since the intervals are equal (90 days between each spot rate).\n\nHere's the Python program to calculate the average:\n\n```python\ndef solution():\n    # Define variables name and value\n    # USD Spot Interest Rates for different Days to Maturity\n    spot_rates = {\n        90: 0.4,\n        180: 0.6,\n        270: 0.8,\n        360: 1.0\n    }\n\n    # Calculate the weighted average of the USD interest rates\n    # For simplicity, the weights are the same since the intervals are equal,\n    # so it is just a simple average\n    total_rate = sum(spot_rates.values())\n    number_of_rates = len(spot_rates)\n    \n    # Calculate the average rate\n    average_rate = total_rate / number_of_rates\n    \n    # Annualized fixed swap rate for USD would be the calculated average rate\n    annualized_swap_rate = average_rate\n    \n    # return answer\n    return annualized_swap_rate\n\n# You can now call the solution function\nprint(solution())\n```\n\nRunning the function `solution()` would calculate and print the average annualized fixed swap rate for USD based on the provided spot interest rates."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-807",
        "question": "What is the risk premium for business bonds a researcher notes in the following historic geometric returns?",
        "tables": [
            "| Asset Class     | Geometric Return (%) |\n|-----------------|----------------------|\n| Equities        | 8.0                  |\n| Corporate Bonds | 6.5                  |\n| Treasury bills  | 2.5                  |\n| Inflation       | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    inflation_rate = 2.1\n    \n    # Do math calculation to get the answer\n    risk_premium = corporate_bonds_return - inflation_rate\n    \n    # return answer\n    return risk_premium\n\n# The risk premium is the difference between the return \n# of the corporate bonds and the rate of inflation.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-808",
        "question": "What is the bond-equivalent yield if the yield-to-maturity on a yearly-pay bond is 7.75%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ytm_annual = 7.75  # Yield to maturity on an annual basis (in percent)\n    \n    # Do math calculation to get the answer\n    # Since the bond pays annually, the bond-equivalent yield (BEY) is simply twice the semi-annual yield.\n    semi_annual_yield = ytm_annual / 2\n    bey = semi_annual_yield * 2\n    \n    # return answer\n    return bey\n\n# The function can then be called to obtain the answer.\nprint(solution())\n```\nThe bond-equivalent yield for this question is straight forward to calculate because the bond already pays annually. Thus, it is the same as the annual yield."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-809",
        "question": "After the financial crises starting in 2008, the squad deliberates on the potential long-term growth trajectory for the U.S. GDP in the wake of external shocks. Reports from several external sources are scrutinized and an agreed perception of the next decade's annual growth projections for the objects in Exhibit 1 is formed. Using the data from Exhibit 1 and adopting the simplest method to review the total trend growth for the U.S. GDP, the most probable projection for the GDP annual growth over the next decade (in %) would be:",
        "tables": [
            "|                                             |      |                                        |      |\n|---------------------------------------------|------|----------------------------------------|------|\n| **Exhibit 1 U.S.  Macroeconomic  Data**        |      |                                        |      |\n| Growth in real consumer spending           | 3.1% | Yield on  10-yr. U.S. Treasury bonds   | 2.7% |\n| Growth in potential labor force            | 1.9% | Growth in real investment spending     | 3.1% |\n| Growth in labor force participation        | -0.3%| Growth in total factor productivity    | 0.5% |\n| Growth in labor productivity               | 1.4% | Change in trade deficit                | -0.5%|"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To project the annual growth of U.S. GDP over the next decade, we can use the simplest method that takes the given inputs from the exhibit, assuming they are all growth contributors, and sum them up, since they all affect the GDP growth in their way. The formula for potential GDP growth is:\n\n- Long-term GDP growth = Growth in labor force + Growth in labor productivity + Growth in total factor productivity\n\nWe don't need to factor in the changes in the trade deficit directly as it affects the components already included in the calculation. However, the labor force growth is determined by the growth in the potential labor force and the labor force participation rate.\n\nHere's the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    growth_in_potential_labor_force = 1.9\n    growth_in_labor_force_participation = -0.3\n    growth_in_labor_productivity = 1.4\n    growth_in_total_factor_productivity = 0.5\n    \n    # Growth in labor force = Growth in potential labor force + Growth in labor force participation\n    growth_in_labor_force = growth_in_potential_labor_force + growth_in_labor_force_participation\n\n    # Do math calculation to get the GDP growth\n    gdp_growth = growth_in_labor_force + growth_in_labor_productivity + growth_in_total_factor_productivity\n    \n    # return answer\n    return gdp_growth\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate the most probable projection for the GDP annual growth over the next decade based on the provided data. Note that real-world GDP projections would likely involve more complex models."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-810",
        "question": "The likelihood of Occurrence X is 40%. The likelihood of Occurrence Y is 60%. The combined likelihood of XY is 40%. What is the likelihood (P) that X or Y happens, or both happen?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability_X = 0.40\n    probability_Y = 0.60\n    probability_XY = 0.40\n    \n    # Do math calculation to get the answer\n    # The formula to calculate the combined probability of X or Y or both (union) is:\n    # P(X ∪ Y) = P(X) + P(Y) - P(X ∩ Y)\n    probability_X_or_Y = probability_X + probability_Y - probability_XY\n    \n    # return answer\n    return probability_X_or_Y\n    \n# You can call the function to see the result\nprint(solution())\n```\nThe program defines the probabilities for X, Y, and the intersection of X and Y (XY), and calculates the combined probability of X or Y or both happening. The result is then returned and also printed out."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-811",
        "question": "What should the coupon rate be for the interest payment made on December 15 if Beta Co. issued a five-year semi-annual floating rate bond where the coupon rate is the six-month MRR plus 100 bps, with interest payments made every 15 June and 15 December, and which has a six-month MRR of 3% on June 15 and 3.2% on December 15?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define the MRR (Market Reference Rate) value on December 15\n    six_month_MRR = 3.2\n    \n    # Define basis points to be added to MRR\n    basis_points_added = 100\n    \n    # Convert basis points to percentage points\n    percentage_points_added = basis_points_added / 100\n    \n    # Calculate the coupon rate as the sum of the MRR and the added percentage points \n    coupon_rate = six_month_MRR + percentage_points_added\n    \n    # return the coupon rate\n    return coupon_rate\n\n# Call the function to get the coupon rate\nprint(solution())  # Output should be the coupon rate for December 15\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-812",
        "question": "On the following day, Thompson asks Green to go over their study on ABC Corp again. Green's study leads her to think that its stocks are underpriced. She gives her study findings to Thompson, and at 10 o'clock in the morning, he tells her to buy 120,000 shares at a price of $40.00 each using a limit order of $42.00. When the price is $40.50, the buy-side trader submits the order for market execution. The only cost involved is a share commission of $0.02. By the day's end, 90,000 shares of the order have been acquired, and ABC Corp concludes at $42.50. The trade was completed at an estimate price of $41.42. Exhibit 1 gives additional details about the completed trades. The arrival cost for buying the 90,000 shares of ABC Corp is:",
        "tables": [
            "| Trades | Execution Price | Shares Executed |\n|--------|-----------------|-----------------|\n| Trade 1 | $40.75 | 10,000 |\n| Trade 2 | $41.25 | 30,000 |\n| Trade 3 | $41.50 | 20,000 |\n| Trade 4 | $41.75 | 30,000 |\n| Total | | 90,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's a Python program that calculates the total arrival cost for buying the 90,000 shares of ABC Corp:\n\n```python\ndef solution():\n    # Define variables name and value for each trade\n    trades = [\n        {'price': 40.75, 'shares': 10000},\n        {'price': 41.25, 'shares': 30000},\n        {'price': 41.50, 'shares': 20000},\n        {'price': 41.75, 'shares': 30000},\n    ]\n    \n    # Define variable for buy price\n    buy_price = 40.00\n    \n    # Commission per share\n    commission = 0.02\n    \n    # Calculate the weighted average purchase price\n    total_cost = sum(trade['price'] * trade['shares'] for trade in trades)\n    total_shares = sum(trade['shares'] for trade in trades)\n    avg_purchase_price = total_cost / total_shares\n    \n    # Calculate the commission cost\n    total_commission = total_shares * commission\n    \n    # Calculate the total cost including commission\n    total_cost_including_commission = total_cost + total_commission\n    \n    # Calculate the arrival cost per share\n    arrival_cost_per_share = (avg_purchase_price - buy_price) + commission\n    \n    # Calculate the total arrival cost\n    total_arrival_cost = arrival_cost_per_share * total_shares\n    \n    # return answer\n    return total_arrival_cost\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis will compute the total arrival cost for the trades that were completed, given the provided information."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-813",
        "question": "If we consider that the yearly continuously compounded spot rates are: Z1=5%, Z2=5.1%, Z3=5.2%, and a 1.5-year bond has a face value of $100 and a 6% semiannual coupon payment, how would you compute the bond price?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Given spot rates for 1, 2 and 3 years\n    Z1 = 0.05\n    Z2 = 0.051\n    Z3 = 0.052\n\n    # The bond details\n    FV = 100         # Face value of the bond\n    C = FV * 0.06    # 6% semiannual coupon payment\n    t = 1.5          # Time to maturity in years\n\n    # The bond pays semiannual coupons, so there will be 3 coupon payments\n    # The discount factors are calculated using the formula: DF(t) = e^(-Z*t)\n    # Since the Z1 is the 1 year rate, for the first coupon (t=0.5), we discount by 0.5 * Z1\n    DF1 = math.exp(-Z1 * 0.5)\n    # For the second coupon (t=1), we use Z2 since it is the second year's spot rate\n    DF2 = math.exp(-Z2 * 1)\n    # For the third coupon and the face value (t=1.5), we need to interpolate between Z2 and Z3\n    # Linear interpolation for spot rate at 1.5 years\n    Z1_5 = Z2 + (Z3 - Z2) * (0.5 / 1.0)\n    DF3 = math.exp(-Z1_5 * 1.5)\n\n    # Calculate the bond price as the present value of future cash flows\n    price = C * DF1 + C * DF2 + (C + FV) * DF3\n\n    # return the price of the bond\n    return price\n\n# Call the solution function to get the bond price\nbond_price = solution()\nprint(\"The bond price is:\", bond_price)\n```\n\nHere, we calculate the discount factors for three periods, considering the given spot rates and the formulas above. After that, we compute the present value of each future cash flow (coupon payments and the face value) and sum them up to arrive at the bond price."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-814",
        "question": "A two-year outstanding US Treasury bond has a yield of 3.5%. The swap spread for a 2-year interest rate swap is said to be 80 bps. What does the fixed payer in a two-year interest rate swap have to pay?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program to calculate the fixed payment rate for the payer in an interest rate swap based on the given information:\n\n```python\ndef solution():\n    # Define the yield of the US Treasury bond\n    treasury_yield = 3.5\n    \n    # Define the swap spread in basis points (bps)\n    # Convert basis points to percentage\n    swap_spread = 80 / 100.0\n    \n    # Calculate the fixed payment rate for the interest rate swap\n    # by adding the swap spread to the yield of the US Treasury bond\n    fixed_payment_rate = treasury_yield + swap_spread\n    \n    # return the fixed payment rate\n    return fixed_payment_rate\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nBut before we take this as the final answer, we need to make an adjustment: basis points are traditionally expressed as a portion of 1%, where 100 basis points equal 1%:\n\n```python\ndef solution():\n    # Define the yield of the US Treasury bond\n    treasury_yield = 3.5\n    \n    # Define the swap spread in basis points\n    # Convert basis points to percentage\n    swap_spread = 80 / 10000.0  # 80 bps are equal to 0.80%\n    \n    # Calculate the fixed payment rate for the interest rate swap\n    # by adding the swap spread to the yield of the US Treasury bond\n    fixed_payment_rate = treasury_yield + swap_spread\n    \n    # return the fixed payment rate\n    return fixed_payment_rate\n```\n\nThis is the correct program; the initial explanation regarding the basis points was inaccurate, but the corrected script should return the right answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-815",
        "question": "If the necessary rate of return is 4%, what is the intrinsic worth per share of a standing issue of 5% never-ending preferred stock with a face value of 100 and zero incorporated options?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_rate_of_return = 0.04  # 4%\n    preferred_dividend_rate = 0.05  # 5%\n    face_value = 100  # $100\n    \n    # Do math calculation to get the answer\n    # Intrinsic value of a preferred stock is calculated by dividing the annual dividend payment\n    # by the required rate of return.\n    intrinsic_value = (preferred_dividend_rate * face_value) / required_rate_of_return\n    \n    # return answer\n    return intrinsic_value\n\n# You can run the function and print the result to see the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-816",
        "question": "The following set of 10 elements is chosen from a group. The variance of the group is unclear. What is the standard error of the average of the sample?",
        "tables": [
            "| 10 | 20 | -8 | 2 | -9 | 5 | 0 | -8 | 3 | 21 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To calculate the standard error of the mean (SEM) for the given sample, we use the following steps:\n\n1. First, calculate the mean of the sample.\n2. Calculate the variance or the standard deviation of the sample.\n3. The formula for the SEM is the standard deviation divided by the square root of the sample size (n).\n\nHere is a Python program that accomplishes this task:\n\n```python\nimport math\n\ndef solution():\n    # Define the sample values\n    sample = [10, 20, -8, 2, -9, 5, 0, -8, 3, 21]\n    \n    # Calculate the mean of the sample\n    mean = sum(sample) / len(sample)\n    \n    # Calculate the variance of the sample\n    variance = sum((x - mean) ** 2 for x in sample) / (len(sample) - 1)\n    \n    # Calculate the standard deviation of the sample\n    std_deviation = math.sqrt(variance)\n    \n    # Calculate the standard error of the mean (SEM)\n    sem = std_deviation / math.sqrt(len(sample))\n    \n    # return answer\n    return sem\n\n# You can call the function and print the result to check\nprint(solution())\n```\n\nRemember to include the appropriate import statement for the `math` module, as it will provide the necessary functions for square root calculations. The function above computes the standard deviation, not with the population formula (N), but with the sample formula (N-1), which is more appropriate in this context, since the variance of the group to which the sample belongs is unclear."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-817",
        "question": "A researcher collects the following data for an equal-weighted index made up of assets X, Y, and Z: What is the price return of the index?",
        "tables": [
            "| Security | Beginning of Period Price(E) | End of Period Price(E) | Total Dividends(E) |\n|----------|------------------------------|------------------------|---------------------|\n| Able     | 10.00                        | 12.00                  | 0.75                |\n| Baker    | 20.00                        | 19.00                  | 1.00                |\n| Charlie  | 30.00                        | 30.00                  | 2.00                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Since there's information for securities Able, Baker, and Charlie but you mentioned assets X, Y, and Z, let's assume that the researcher wants to use the data from Able, Baker, and Charlie as proxies for the data of X, Y, and Z.\n\nTo calculate the price return of an equal-weighted index, you sum the price changes and then divide by the number of assets. Here's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value for each security\n    price_begin_Able = 10.00\n    price_end_Able = 12.00\n    price_begin_Baker = 20.00\n    price_end_Baker = 19.00\n    price_begin_Charlie = 30.00\n    price_end_Charlie = 30.00\n    \n    # Calculate the price returns for individual securities\n    return_Able = (price_end_Able - price_begin_Able) / price_begin_Able\n    return_Baker = (price_end_Baker - price_begin_Baker) / price_begin_Baker\n    return_Charlie = (price_end_Charlie - price_begin_Charlie) / price_begin_Charlie\n    \n    # Calculate the average of the individual returns to get the index return\n    index_return = (return_Able + return_Baker + return_Charlie) / 3\n    \n    # return answer\n    return index_return\n\n# Call the function and print the result if necessary\n# print(solution())\n```\n\nWhen run, this Python program will calculate and return the price return for the equal-weighted index based on the provided data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-818",
        "question": "John has determined that the DDM model is suitable to evaluate Corporation X. With the present dividend and the necessary rate of return of $0.5 per share and 10% respectively. He anticipates that the dividend will rise at 20% per annum for the first three years and then ascend at 5% annually into the unforeseeable future. What's the present value of Corporation X shares?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Below is the Python program to calculate the present value of Corporation X shares using the Dividend Discount Model (DDM) with a two-stage growth model.\n\n```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.5\n    required_rate_of_return = 0.1\n    initial_growth_rate = 0.2\n    final_growth_rate = 0.05\n    high_growth_duration = 3\n\n    # Calculate the present value of dividends during the high growth period\n    high_growth_present_value = sum(\n        current_dividend * (1 + initial_growth_rate) ** t / (1 + required_rate_of_return) ** t\n        for t in range(1, high_growth_duration + 1)\n    )\n\n    # Calculate the present value of the stock at the beginning of the stable growth period\n    # which is the end of the high growth period\n    stable_growth_dividend = current_dividend * (1 + initial_growth_rate) ** high_growth_duration\n    stable_growth_value = stable_growth_dividend * (1 + final_growth_rate) / (required_rate_of_return - final_growth_rate)\n\n    # Discount the stable growth value back to present value\n    stable_growth_present_value = stable_growth_value / (1 + required_rate_of_return) ** high_growth_duration\n\n    # Sum of high growth present value and stable growth present value\n    share_present_value = high_growth_present_value + stable_growth_present_value\n\n    # return answer\n    return share_present_value\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines a function called `solution` that calculates the present value of Corporation X shares by first considering the dividends during the high growth period and then adding the present value of the perpetual dividends expected to grow at a stable rate into the foreseeable future."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-819",
        "question": "Sam, a market analyst at an investment bank, is conducting research on companies operating in the housing market sector. The leading company in this sector, named LoveYourHome, has recently released its annual financial report, revealing a basic EPS of $56, and a diluted EPS of $52. After examining the footnotes in LoveYourHome's financial report, Sam identifies a nonrecurring profit of $2 per share and a one-time restructuring cost of $3 per share, stemming from an acquisition in the previous year. Utilising a top-down analysis approach, Sam projects that LoveYourHome's basic EPS will rise to 76 in the upcoming year. The company's current share price is $72. Sam is keen to assess the relative worth within the housing sector using the trailing P/E ratio. Given the information provided, what is LoveYourHome's trailing Price/Earnings (P/E) ratio?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    basic_eps = 56\n    share_price = 72\n    \n    # Calculate the trailing P/E ratio using the basic EPS\n    pe_ratio = share_price / basic_eps\n    \n    # return answer\n    return pe_ratio\n\n# Calling the function and printing the result\nprint(f\"Trailing P/E Ratio: {solution()}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-820",
        "question": "A business aiming to increase profits expended $1,000,000 on equipment with two crucial parts, as shown in the table. The equipment is projected to be functional for a total of 10 years, and the business applies the straight-line depreciation approach.",
        "tables": [
            "| Component | Cost      | Useful Life |\n|-----------|-----------|-------------|\n| A         | $500,000  | 10 years    |\n| B         | $500,000  | 5 years     |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_A = 500000\n    useful_life_A = 10\n    cost_B = 500000\n    useful_life_B = 5\n    \n    # Do math calculation to get the answer\n    # Calculate the yearly depreciation for both components\n    annual_depreciation_A = cost_A / useful_life_A\n    annual_depreciation_B = cost_B / useful_life_B\n    \n    # Since component B will fully depreciate before the total useful life period ends,\n    # by the time component B is fully depreciated, we can start depreciating it again\n    # as it is assumed that replacement of component B is done and the cycle repeats.\n    total_annual_depreciation = annual_depreciation_A + annual_depreciation_B\n\n    # return answer\n    return total_annual_depreciation\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-821",
        "question": "A financier bought an annuity quite some time ago and is projected to get $1,200 annually for the following 40 years from this annuity. If the anticipated interest rate is 7%, what is the current worth of the cashflows the financier is set to receive?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 1200\n    interest_rate = 0.07\n    number_of_years = 40\n    present_value = 0\n    \n    # Do math calculation to get the answer\n    for i in range(1, number_of_years + 1):\n        present_value += annual_payment / (1 + interest_rate)**i\n    \n    # return answer\n    return present_value\n\n# You can call the function to get the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-822",
        "question": "Under the accrual basis of accounting, what is the net revenue equivalent to?",
        "tables": [
            "| Revenue | $ 500,000 |\n|---|---|\n| Volume Discounts | $ 20,000 |\n| Cash Received | $ 450,000 |\n| Cost of Goods Sold | $ 300,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 500000\n    volume_discounts = 20000\n    \n    # Do math calculation to get the answer\n    # Under the accrual basis, net revenue is revenue minus any discounts given\n    net_revenue = revenue - volume_discounts\n    \n    # return answer\n    return net_revenue\n\n# This will call the solution function and print the returned value\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-823",
        "question": "Compute GDP using the income approach based on the information in the given table",
        "tables": [
            "| Compensation of employees | 1,044,005 |\n|---------------------------|-----------|\n| Gross operating surplus | 518,979 |\n| Gross mixed income | 241,415 |\n| Net mixed income | 180,653 |\n| taxes less subsidies on production | 90,507 |\n| taxes less subsidies on products and imports | 139,443 |\n| Statistical discrepancy | 1,157 |\n| Net property income | 136,011 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    compensation_of_employees = 1044005\n    gross_operating_surplus = 518979\n    gross_mixed_income = 241415\n    taxes_less_subsidies_on_production = 90507\n    taxes_less_subsidies_on_products_and_imports = 139443\n    net_property_income = 136011\n\n    # Do math calculation to get the answer\n    # Using the income approach: \n    # GDP = Compensation of employees + Gross operating surplus +\n    #       Gross mixed income + Taxes less subsidies on production and imports +\n    #       Net property income\n    gdp = (compensation_of_employees + gross_operating_surplus +\n           gross_mixed_income + taxes_less_subsidies_on_production +\n           taxes_less_subsidies_on_products_and_imports + \n           net_property_income)\n    \n    # return answer\n    return gdp\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines variables according to the table of data, employs the income approach formula to calculate the GDP, and then returns the result. The income approach formula sums the compensation of employees, gross operating surplus, gross mixed income, taxes less subsidies on production, taxes less subsidies on products and imports, and net property income to arrive at GDP. The statistical discrepancy is not typically included in the GDP calculation using the income approach."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-824",
        "question": "The fee structure of Cedar Ridge Associates, a fund of hedge funds, is as follows: 2/20 underlying fund fees with independently calculated incentive fees, Cedar Ridge's fees are calculated net of all underlying fund fees, a 1% management fee (based on year-end market value), a 10% incentive fee calculated net of the management fee, and there are no hurdle rate or high-water mark fee conditions for the fund and all underlying funds. In the most recent year, Cedar Ridge’s fund value increased from $100 million to $133 million before any deductions for the fund's management and incentive fees or any underlying funds. Given this information, what is the cumulative fee earned by all the funds?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Initial fund value and final fund value before fees\n    initial_fund_value = 100e6\n    final_fund_value_before_fees = 133e6\n\n    # Gain before any fees\n    total_gain = final_fund_value_before_fees - initial_fund_value\n\n    # Underlying fund fees (2% management fee and 20% incentive fee)\n    underlying_management_fee = 0.02 * final_fund_value_before_fees\n    underlying_incentive_fee = 0.20 * total_gain\n    total_underlying_fees = underlying_management_fee + underlying_incentive_fee\n\n    # Adjusted final value after underlying fees\n    final_fund_value_after_underlying_fees = final_fund_value_before_fees - total_underlying_fees\n\n    # Cedar Ridge's fees (1% management fee and 10% incentive fee net of management fee)\n    cedar_management_fee = 0.01 * final_fund_value_after_underlying_fees\n    cedar_incentive_fee = 0.10 * (final_fund_value_after_underlying_fees - initial_fund_value - cedar_management_fee)\n    total_cedar_fees = cedar_management_fee + cedar_incentive_fee\n\n    # Cumulative fees by all the funds\n    cumulative_fees = total_underlying_fees + total_cedar_fees\n    \n    return cumulative_fees\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-825",
        "question": "What is the monthly mortgage payment for a level-payment, fixed-rate mortgage with these features: term is 30 years, mortgage rate is 9.0%, servicing fee is 0.5%, and the initial mortgage loan balance is $150,000?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package for financial calculation\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    principal = 150000  # initial mortgage loan balance\n    term_years = 30  # term in years\n    annual_rate = 9.0  # mortgage annual interest rate in percent\n    servicing_fee_percentage = 0.5  # annual servicing fee in percent\n\n    # Compute monthly rates\n    monthly_interest_rate = (annual_rate - servicing_fee_percentage) / 12 / 100\n    term_months = term_years * 12  # convert term to months\n\n    # Calculate monthly mortgage using numpy's pmt function\n    payment = -np.pmt(monthly_interest_rate, term_months, principal)\n    \n    # return monthly mortgage payment\n    return payment\n\n# Execute the function and print the payment\nmonthly_payment = solution()\nprint(f\"The monthly mortgage payment is: ${monthly_payment:.2f}\")\n```\n\nThis program calculates the monthly mortgage payment using the numpy financial function np.pmt, which computes the payment for a loan given the constant interest rate per period (monthly in this case), the number of periods (term in months), and the principal amount. The negative sign in front of np.pmt corrects for the fact that np.pmt returns a negative cash flow (which represents an outflow of cash). The final monthly payment is stored in `monthly_payment` and then printed."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-826",
        "question": "If a bond with a face value of $100 has a 15-year term, an annual payment rate of 10%, and a YTM of 12%, what is its cost?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To determine the cost of the bond, we need to calculate the present value of all future coupon payments plus the present value of the face value of the bond at maturity. The present value (PV) of a cash flow is calculated using the formula:\n\n\\[ PV = \\frac{C}{(1 + r)^t} \\]\n\nWhere:\nC = cash flow (either coupon payment or face value)\nr = discount rate per period (Yield to Maturity, YTM)\nt = number of periods until the cash flow occurs\n\nFor the bond in question, the coupon payment (C) is the annual interest payment, which is the face value times the annual payment rate (APR):\n\n\\[ C = \\text{Face Value} \\times \\frac{\\text{APR}}{100} \\]\n\nSince the bond pays annually, we will discount the coupon payments and the face value separately for each year until maturity at the given YTM.\n\nHere is the program to calculate the cost of the bond:\n\n```python\ndef solution():\n    # Define variables\n    face_value = 100\n    term = 15\n    coupon_rate = 0.10\n    ytm = 0.12\n    \n    # Calculate annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n    \n    # Initialize the present value of the bond\n    bond_pv = 0\n    \n    # Calculate the present value of the coupon payments\n    for year in range(1, term + 1):\n        bond_pv += annual_coupon_payment / ((1 + ytm) ** year)\n    \n    # Calculate and add the present value of the face value\n    bond_pv += face_value / ((1 + ytm) ** term)\n    \n    # Return the present value as the cost of the bond\n    return bond_pv\n\n# Call the function\nprint(solution())\n```\n\nPlease note that the actual market price could be different due to market conditions, liquidity, and other factors, but the present value calculated here reflects the theoretical cost based on the bond's cash flows and the given YTM."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-827",
        "question": "In 2017, the revenue for Fortune Enterprise was $5000, with a cost of goods sold standing at $900 and depreciation at $700. Given that the firm has an interest coverage ratio that's three times larger, what were its interest expenses in 2017?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000\n    cogs = 900\n    depreciation = 700\n    interest_coverage_ratio = 3\n\n    # Calculate EBIT (Earnings Before Interest and Taxes)\n    ebit = revenue - cogs - depreciation\n    \n    # Calculate interest expenses\n    interest_expenses = ebit / interest_coverage_ratio\n    \n    # return answer\n    return interest_expenses\n\n# You can call the function to get the result\n# print(solution())\n```\nThis program will calculate the interest expenses for Fortune Enterprise in 2017 based on the given information. The calculation includes finding the Earnings Before Interest and Taxes (EBIT) by subtracting the Cost of Goods Sold (COGS) and depreciation from the revenue, then dividing the EBIT by the interest coverage ratio to find the interest expenses."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-828",
        "question": "The subsequent data is derived from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "tables": [
            "|                    | Income Statement |         | Balance Sheet Changes |      |\n|--------------------|-----------------:|---------|-----------------------|-----:|\n| Revenue            |         $ 56,800 | Decrease in accounts receivable | $1,324 |\n|                    |                  |         |                       |       |\n| Cost of goods sold |           27,264 | Decrease in inventory          |   501 |\n| Other operating expense           |   562 | Increase in prepaid expense   |     6 |\n| Depreciation expense          |  2,500 | Increase in accounts payable   | 1,063 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    # Cash paid to suppliers = Cost of Goods Sold + Decrease in Inventory - Increase in Accounts Payable\n    cash_paid_to_suppliers = cost_of_goods_sold + (decrease_in_inventory - increase_in_accounts_payable)\n    \n    # return answer\n    return cash_paid_to_suppliers\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-829",
        "question": "Assume that the earnings from a merger arbitrage operation conducted by XYZ Corporation results in $5 million if it's successful, but —$20 million if it isn't. If the likelihood of success is 83%, what would be the expected payoff on this operation?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    success_payoff = 5e6  # Positive payoff for success\n    failure_payoff = -20e6  # Negative payoff for failure\n    probability_success = 0.83  # Probability of success\n    \n    # Do math calculation to get the expected payoff\n    expected_payoff = (success_payoff * probability_success) + (failure_payoff * (1 - probability_success))\n    \n    # return answer\n    return expected_payoff\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-830",
        "question": "As a portfolio manager, Martin is thinking about including a 2-year bond with a 7% coupon rate and a par value of 100 in his investment portfolio. The bond's interest is paid yearly. Given the current 1-year and 2-year spot rates of 4% and 5% respectively, what is the bond's value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the value of the bond, we need to discount the future cash flows back to the present value. The future cash flows for this 2-year bond with a 7% coupon rate and a par value of 100 are:\n\n- Year 1: 7 (coupon payment)\n- Year 2: 107 (final coupon payment + par value)\n\nWe will use the 1-year and 2-year spot rates to discount these cash flows:\n\n- The present value of the year 1 cash flow = 7 / (1 + 0.04)\n- The present value of the year 2 cash flow = 107 / (1 + 0.05)^2\n\nLet's calculate this in a Python function:\n\n```python\ndef solution():\n    # Define variables\n    coupon_rate = 0.07\n    par_value = 100\n    spot_rate_year_1 = 0.04\n    spot_rate_year_2 = 0.05\n    \n    # Calculate the present value of year 1 and year 2 cash flows\n    cash_flow_year_1 = coupon_rate * par_value\n    cash_flow_year_2 = coupon_rate * par_value + par_value\n    present_value_year_1 = cash_flow_year_1 / (1 + spot_rate_year_1)\n    present_value_year_2 = cash_flow_year_2 / ((1 + spot_rate_year_2) ** 2)\n    \n    # Calculate the bond's current value\n    bond_value = present_value_year_1 + present_value_year_2\n    \n    # return answer\n    return round(bond_value, 2)\n```\n\nCall the function to get the bond's value:\n\n```python\nprint(solution())\n```\n\nThis program will give you the bond's present value rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-831",
        "question": "According to the Exhibit 1 Option Contract Pricing Details, what is the break-even price for an at-the-money (ATM) protective put strategy for Dropqik Corporation, where Justine Fisher, a client of Erica Taylor, holds a significant position and which is currently trading at $30.50 per share?",
        "tables": [
            "|                       | 40 | 35 | 30 | 25 | 20 |\n|-----------------------|----|----|----|----|----|\n| 3-month call option price | 0.56 | 1.45 | 4.05 | 10.30 | 12.42 |\n| 3-month put option price | 9.56 | 5.20 | 2.78 | 1.56 | 0.72 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_stock_price = 30.50\n    atm_put_option_price = 2.78  # ATM when stock price $30\n\n    # Do math calculation to get the break-even price\n    break_even_price = current_stock_price + atm_put_option_price\n    \n    # return answer\n    return break_even_price\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines the solution function which calculates the break-even price for an at-the-money (ATM) protective put strategy, using the current stock price and the price of the put option. The function then returns the calculated break-even price."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-832",
        "question": "In a living community, the landlords want to choose 3 out of 5 tenants to form a new landlords committee. How many possible scenarios can happen?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! To solve this problem, we can use the concept of combinations from combinatorial mathematics. A combination is a way of selecting items from a collection, such that the order of selection does not matter. In Python, we can use the `itertools.combinations` function or calculate the combination using the formula for combinations which is `n! / (r! * (n - r)!)`, where `n` is the total number of items, `r` is the number of items to choose, and `!` denotes factorial.\n\nHowever, we can directly calculate the number of combinations using the `math` module which provides the `comb` function since Python 3.8. Here is the program using the `math.comb` function:\n\n```python\nimport math\n\ndef solution():\n    # There are 5 tenants and we are choosing 3 to form a committee\n    tenants = 5\n    committee_members = 3\n    \n    # Calculate the number of possible scenarios for choosing 3 out of 5 tenants\n    possible_scenarios = math.comb(tenants, committee_members)\n    \n    # return the answer\n    return possible_scenarios\n```\nIf you are using Python version prior to 3.8 which doesn't have `comb`, you may calculate the factorial manually or use the `itertools` package alternatively."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-833",
        "question": "If a bond's current value is $101.45, and the director predicts an increase to $103.28 should interest rates drop 0.25%, or a decrease to $100.81 should interest rates rise 0.25%, what is the bond's effective duration?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price_up = 103.28\n    bond_price_down = 100.81\n    current_price = 101.45\n    interest_rate_change = 0.25 / 100  # convert to decimal\n    \n    # Calculate Effective Duration\n    duration = ((bond_price_down - bond_price_up) /\n                (2 * current_price * interest_rate_change))\n    \n    # return answer\n    return duration\n\n# Call the function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-834",
        "question": "If a manufacturing company examines its cost structure, and the detailed data is provided in the accompanying table, what is the marginal cost if the production units are elevated from 3 to 4?",
        "tables": [
            "| Quantity (unit) | Total Fixed Cost ($) | Total Variable Cost ($) |\n| --- | --- | --- |\n| 0 | 400 | 0 |\n| 1 | 400 | 100 |\n| 2 | 400 | 190 |\n| 3 | 400 | 275 |\n| 4 | 400 | 360 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define cost variables\n    total_variable_cost_3_units = 275\n    total_variable_cost_4_units = 360\n\n    # Calculate marginal cost: the change in total cost when production is increased by one unit.\n    marginal_cost = total_variable_cost_4_units - total_variable_cost_3_units\n    \n    # return answer\n    return marginal_cost\n\n# Uncomment to test the solution function:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-835",
        "question": "Using the provided data, determine the equity value using the CCM.",
        "tables": [
            "|   |   |\n|---|---|\n| FCFE0  | $10 million  |\n| Growth rate of FCFE  | 2%  |\n| Risk free rate | 2.5%  |\n| Equity Risk Premium  | 4%  |\n| Size Premium  | 1.5%  |\n| Market value of debt | $4 million |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To determine the equity value using the Constant-Growth Constant-Cost of Equity Model (CCM), we first need to calculate the cost of equity using the CAPM (Capital Asset Pricing Model) formula and then use that to discount the free cash flow to equity (FCFE).\n\nThe formula to calculate the cost of equity (Ke) is:\n```Ke = Risk-free rate + Beta * Equity Risk Premium + Size Premium```\n\nSince the Beta (systematic risk measure of the stock) is not provided, we will assume a Beta of 1 for this calculation, meaning the stock is as volatile as the market.\n\nThe formula for the Constant-Growth CCM equity value is:\n```Equity Value = FCFE1 / (Ke - growth rate)```\n\nWhere FCFE1 is next year’s expected free cash flow to equity (FCFE0 * (1 + Growth rate)).\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    FCFE0 = 10_000_000  # Free cash flow to equity at time 0\n    growth_rate = 0.02  # Growth rate of FCFE\n    risk_free_rate = 0.025  # Risk free rate\n    equity_risk_premium = 0.04  # Equity Risk Premium\n    size_premium = 0.015  # Size Premium\n    \n    # Assuming Beta is 1\n    beta = 1\n    \n    # Calculate the cost of equity (Ke)\n    Ke = risk_free_rate + beta * equity_risk_premium + size_premium\n    \n    # Calculate next year's FCFE (FCFE1)\n    FCFE1 = FCFE0 * (1 + growth_rate)\n    \n    # Calculate equity value using CCM\n    equity_value = FCFE1 / (Ke - growth_rate)\n    \n    # Return answer\n    return equity_value\n\n# Please run this function to get the answer\nprint(solution())\n```\n\nWhen you run this function, it will calculate and return the equity value using the provided data according to the Constant-Growth Constant-Cost of Equity Model."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-836",
        "question": "A yearly coupon bond with a yield-to-maturity rate of 7% has a price tag of 94.75 per 100 of par value, with a coupon rate standing at 5%. There are 3 years left until it matures. What is the Macaulay duration of this bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    yield_to_maturity = 0.07\n    price = 94.75\n    coupon_rate = 0.05\n    par_value = 100\n    maturity = 3\n    coupon = coupon_rate * par_value\n\n    # We'll calculate the Macaulay Duration using its definition for bonds:\n    # Duration = (1 + y)^(-t) * (c + (t*(FV-PV)/y)) / P\n    # where y = yield to maturity, t = time period, c = coupon payment, FV = par value, PV = price of the bond\n\n    # Calculate the total cash flows\n    cash_flows = np.array([coupon if period < maturity else coupon + par_value for period in range(1, maturity + 1)])\n    \n    # Calculate the present value of each cash flows\n    discount_factors = [(1 / (1 + yield_to_maturity))**period for period in range(1, maturity + 1)]\n    discounted_cash_flows = cash_flows * discount_factors\n\n    # Calculate the weights of each cash flows\n    weights = discounted_cash_flows / price\n    \n    # Calculate the weighted average period\n    periods = np.arange(1, maturity + 1)\n    weighted_average_period = np.sum(weights * periods)\n\n    # return answer\n    return weighted_average_period\n\n# Note: The answer to this question requires the use of financial mathematics and is more complex than a simple calculation.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-837",
        "question": "What are the odds that the returns from a portfolio with an average return rate of 8% and a standard deviation of 14% will range from 8% to 11%?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To answer this question, we'll need to use the properties of the standard normal distribution because we are dealing with percentages that are already in the form of a standard deviation from the mean. The Z-score can be used to calculate the probability of a score being within a certain range. The Z-score is given by the formula:\n\n\\[ Z = \\frac{(X - \\mu)}{\\sigma} \\]\n\nWhere:\n- \\( X \\) is the value for which we are calculating the Z-score,\n- \\( \\mu \\) is the mean, and \n- \\( \\sigma \\) is the standard deviation.\n\nWe are interested in calculating the probabilities for the range 8% to 11%, so we will need to calculate the Z-scores for 8% and 11% and then use the cumulative distribution function (CDF) to find the probabilities corresponding to those Z-scores. The difference between these probabilities will give us the chance that the return will be between 8% and 11%.\n\nSince the average return rate is 8% and we're looking at a range starting from 8%, the Z-score at the lower end (8%) will be 0. For the upper limit (11%), we need to calculate the Z-score based on a 14% standard deviation.\n\nLet's generate a Python program for this calculation. We'll use the `scipy.stats` package for acquiring the cumulative normal distribution function:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 8  # average return rate in percentage\n    std = 14  # standard deviation in percentage\n    low_range = 8  # lower range of interest in percentage\n    high_range = 11  # upper range of interest in percentage\n    \n    # Calculate the Z-score for the upper range of interest\n    z_score_low = (low_range - mean) / std  # for 8%, Z-score = 0 since (8-8)/14 = 0\n    z_score_high = (high_range - mean) / std  # for 11%\n    \n    # Now calculate the cumulative probabilities for the Z-scores\n    cumulative_prob_low = norm.cdf(z_score_low)  # should be 0.5 for the mean\n    cumulative_prob_high = norm.cdf(z_score_high)\n    \n    # The probability that the return rate is between 8% and 11%\n    probability_between = cumulative_prob_high - cumulative_prob_low\n    \n    # return answer\n    return probability_between\n    \n# You can execute this function and get the answer\n# print(solution())\n```\n\nPlease note that this will return the probability, which technically is a ratio or chance and may need to be interpreted or multiplied by 100 to get a percentage if required."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-838",
        "question": "Let's say the present value (S0) of a stock that does not pay dividends is 100, and a put option for this stock has a strike price (X) of $95 with one year left until expiration. Now, a trader thinks that the share price will either rise by 10% or fall by 20%. Which of the subsequent computations of the worth of a put option is correct, presuming a 4% risk-free rate?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To solve this problem, we will use the binomial option pricing model to estimate the value of the put option, which accounts for the discrete future paths the stock price can take. Specifically, the stock price can move up by 10% or down by 20% in the next year, and the put option has a strike price of $95.\n\nWe will calculate the expected value of the option under the two scenarios (up and down) and then discount it back to the present value using the risk-free rate.\n\nHere's how you would implement this in Python:\n\n```python\nimport math\n\ndef solution():\n    # Define given values\n    S0 = 100  # Present value of the stock\n    X = 95    # Strike price\n    u = 1.10  # Upward movement factor\n    d = 0.80  # Downward movement factor\n    r = 0.04  # Risk-free rate\n    T = 1     # Time to expiry in years\n\n    # Calculate risk-neutral probabilities\n    # p = (e^(r*T) - d) / (u - d)\n    p = (math.exp(r * T) - d) / (u - d)\n    \n    # Calculate the expected put option payoff in the up and down state\n    # Put payoff = max(X - S, 0)\n    put_up = max(X - S0 * u, 0)\n    put_down = max(X - S0 * d, 0)\n    \n    # Calculate the expected value of the put option\n    expected_put_value = (p * put_up + (1 - p) * put_down)\n    \n    # Discount the expected value back to present value\n    put_option_value = expected_put_value / math.exp(r * T)\n    \n    # return the put option value\n    return put_option_value\n\n# You can now call the function to get the answer\nput_option_value = solution()\nprint(put_option_value)\n```\n\nRunning this program will yield the estimated value of the put option given the specific scenario."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-839",
        "question": "Based on the regression output shown in the Exhibit, what is the predicted quarterly sales value for March 2016 if John is developing a model to predict future quarterly sales, and he starts by running this regression: ln Salest – ln Salest–1 = b0 + b1(ln Salest–1 – ln Salest–2) + b2(ln Salest–4 – ln Salest–5)+εt?",
        "tables": [
            "|     |     | Coefficient |    | Standard Error | t-Statistic |\n|-----|-----|-------------|----|----------------|-------------|\n|     | Intercept | 0.0092 |    | 0.0087 | 1.0582 |\n|     | In Salest-1-In Salest-2 | -0.1279 |    | 0.1137 | -1.1252 |\n|     | In Salest-4-In Salest-5 | 0.7239 |    | 0.1093 | 6.6209 |\n|     | Most Recent Quarterly Sales Data (in billions) |  |    |  |  |\n|     | Dec 2015 (Salest-1) | $3.868 |    |  |  |\n|     | Sept 2015 (Salest-2) | $3.780 |    |  |  |\n|     | June 2015 (Salest-3) | $3.692 |    |  |  |\n|     | Mar 2015 (Salest-4) | $3.836 |    |  |  |\n|     | Dec 2014 (Salest-5) | $3.418 |    |  |  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To predict the quarterly sales value for March 2016, we can use the calculated regression coefficients and the past sales data to calculate the predicted ln(Salest) and then take the exponential of that value to convert it back to the sales value. Here is a Python program that does that calculation:\n\n```python\nimport numpy as np\n\ndef solution():\n    # Coefficients and intercepts given\n    intercept = 0.0092\n    coeff_b1 = -0.1279\n    coeff_b2 = 0.7239\n    \n    # Sales data from the previous quarters\n    sales_t1 = 3.868  # Dec 2015\n    sales_t2 = 3.780  # Sept 2015\n    sales_t4 = 3.836  # Mar 2015\n    sales_t5 = 3.418  # Dec 2014\n    \n    # Log of sales data\n    ln_sales_t1 = np.log(sales_t1)\n    ln_sales_t2 = np.log(sales_t2)\n    ln_sales_t4 = np.log(sales_t4)\n    ln_sales_t5 = np.log(sales_t5)\n    \n    # Predict the ln(Salest) using the regression model\n    predicted_ln_sales_t = intercept + coeff_b1 * (ln_sales_t1 - ln_sales_t2) + coeff_b2 * (ln_sales_t4 - ln_sales_t5)\n    \n    # Convert the predicted ln(Salest) back to the sales value\n    predicted_sales_t = np.exp(predicted_ln_sales_t)\n    \n    # Return the prediction\n    return predicted_sales_t\n\n# Call the function and print the result\npredicted_sales_value = solution()\nprint(\"Predicted Quarterly Sales Value for Mar 2016: $\", predicted_sales_value)\n```\n\nPlease note that to run this code, you'll need a Python interpreter and the numpy package, which is a common package used for mathematical computations including handling of exponential and logarithmic functions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-840",
        "question": "In 2009, Pinnacle Parcel sold items online on behalf of individuals under a consignment deal. Pinnacle would receive the goods from the owner, list them for online sale, and earn a 25 percent commission from any sold items. Pinnacle was responsible for collecting the full payment from the purchaser and would then pay the owner the remaining balance after deducting their commissions. If the items did not sell within 90 days, they would be returned to the owner. Throughout 2009, Pinnacle had the following records: The total sales price of items sold on consignment was €2,000,000. Pinnacle's commission on these items was €500,000 during 2009. What should Pinnacle declare as revenue in its 2009 income statement?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_sales = 2000000\n    commission_rate = 0.25\n    \n    # Do math calculation to get the answer\n    # Pinnacle should only declare its commission as revenue, not the full sales price\n    revenue = total_sales * commission_rate\n    \n    # return answer\n    return revenue\n\n# Example of calling the function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-841",
        "question": "A valuer has been tasked with calculating the aggregated valuation discounts for a minor shareholding in a privately held firm. The valuer decided that a suitable control premium is 15 percent. A deduction due to the absence of marketability was approximated at 25 percent. In light of these parameters, what is the total discount?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is a Python program to calculate the total discount for a minor shareholding considering the control premium and the lack of marketability:\n\n```python\ndef solution():\n    # Define variables name and value\n    control_premium = 0.15\n    marketability_discount = 0.25\n\n    # Calculate the combined discount factor\n    # A control premium implies an increased value for a controlling interest\n    # While a marketability discount reduces the value for lack of liquidity\n    # The discounts are multiplicative rather than additive because they are percentages of different bases\n    combined_value_multiplier = (1 + control_premium) * (1 - marketability_discount)\n    \n    # To find the discount, subtract from 1 and convert to percentage\n    total_discount = (1 - combined_value_multiplier) * 100\n    \n    # Return answer\n    return total_discount\n\n# Example usage\n# print(solution())\n```\nThis program defines the control premium and marketability discount. It computes the value multiplier that would apply after accounting for both the increase in value due to control premium and the decrease due to marketability discount. Finally, it calculates the total discount by determining the percentage difference from the unaffected value (100%)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-842",
        "question": "From the given data, what will be the other comprehensive income considering, foreign currency conversion benefits amounting to 4, unrealized depreciation on available-for-sale securities sitting at 2, unrealized depreciation on securities held until their maturity estimating 1, and actuarial profits observing 2?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's a Python program that calculates the other comprehensive income based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    foreign_currency_conversion_benefits = 4\n    unrealized_depreciation_on_securities_for_sale = 2\n    unrealized_depreciation_on_held_to_maturity_securities = 1\n    actuarial_profits = 2\n    \n    # Do math calculation to get the answer\n    # Other comprehensive income is the sum of all these items\n    other_comprehensive_income = (foreign_currency_conversion_benefits -\n                                  unrealized_depreciation_on_securities_for_sale -\n                                  unrealized_depreciation_on_held_to_maturity_securities +\n                                  actuarial_profits)\n    \n    # return answer\n    return other_comprehensive_income\n\n# print(solution()) to see the result\n```\n\nWhen you call the function `solution()`, it will return the total other comprehensive income calculated from the provided figures."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-843",
        "question": "Utilizing the given data to compute the total return on an equity share: Buying price: $20 Selling price: $28 Dividend received during the holding period: $1",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Below is a Python program that computes the total return on an equity share given the buying price, selling price, and dividend received during the holding period:\n\n```python\ndef solution():\n    # Define variables name and value\n    buying_price = 20\n    selling_price = 28\n    dividend = 1\n    \n    # Do math calculation to get the answer\n    # Total return is calculated as ((Selling price + Dividend received) - Buying price) / Buying price\n    total_return = ((selling_price + dividend) - buying_price) / buying_price\n    \n    # Return answer\n    return total_return\n\n# Call the function and print the return value if you want to display the output\nprint(solution())\n```\nOutput: 0.45\n\nThe function `solution` will return the total return on equity, which is 0.45 or 45% when the computation is done within the function."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-844",
        "question": "What is the percentage cost of equity for the organization using the CAPM approach and the collected data?",
        "tables": [
            "|                                 |     |         |\n|---------------------------------|-----|---------|\n| Rate of return on 3-month Treasury bills  |     | 3.0%    |\n| Rate of return on 10-year Treasury bonds |     | 3.5%    |\n| Market risk premium                      |     | 6.0%    |\n| The company's equity beta               |     | 1.6     |\n| Dividend growth rate                    |     | 8.0%    |\n| Corporate tax rate                      |     | 35%     |"
        ],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.035  # 10-year Treasury bonds rate\n    market_risk_premium = 0.06  # Market risk premium\n    beta = 1.6  # Company's equity beta\n    \n    # Do math calculation to get the answer\n    # CAPM formula: Cost of Equity = Risk-Free Rate + Beta * Market Risk Premium\n    cost_of_equity = risk_free_rate + (beta * market_risk_premium)\n    \n    # Convert to percentage\n    cost_of_equity_percentage = cost_of_equity * 100\n    \n    # return answer\n    return cost_of_equity_percentage\n\n# Call the function and print the result\nprint(f\"The percentage cost of equity for the organization using the CAPM approach is: {solution()}%\")\n```\n\nThe `solution` function calculates the cost of equity using the Capital Asset Pricing Model (CAPM) formula, converting it to a percentage before returning it. The print statement at the end calls the `solution` function and outputs the result formatted as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-845",
        "question": "The annual return for a fund purchased by John is illustrated below: What will be the geometric mean of the fund?",
        "tables": [
            "| Year | The return of this fund(%) |\n| ---- |------------------------ |\n| 2015 | 4.5                    |\n| 2014 | 3                      |\n| 2013 | 16                     |\n| 2012 | 20.1                   |\n| 2011 | -1                     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define variables name and value\n    returns = [4.5, 3, 16, 20.1, -1]\n    \n    # Convert percentages to multiples (e.g., 4.5% becomes 1.045)\n    multiples = [(1 + r / 100) for r in returns]\n\n    # Calculate the product of the multiples\n    product_of_multiples = math.prod(multiples)\n\n    # Calculate the geometric mean by taking the nth root of the product\n    # where n is the number of years\n    n = len(multiples)\n    geometric_mean = (product_of_multiples ** (1/n)) - 1\n\n    # Convert back to percentage\n    geometric_mean_percentage = geometric_mean * 100\n    \n    # return answer\n    return geometric_mean_percentage\n\n# output the result\nprint(solution())\n```\nThe code above will calculate the geometric mean of the annual returns of the fund, convert it to a percent, and print the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-846",
        "question": "Considering a security's anticipated price fluctuation for the next two durations as follows: The starting price of the security is $80. There's a 75% chance of a rise in any given duration and a 25% chance of a decline in any given duration. Employing the binomial model, what are the chances that the security's value will stand at $79.20 after two durations?",
        "tables": [
            "| Time | Value |\n| --- | --- |\n| Time=0 | SO=80 |\n| Time=1 | Su=88 |\n| Time=1 | Sd=72 |\n| Time=2 | Suu=96.80 |\n| Time=2 | Sud,du=79.20 |\n| Time=2 | Sdd=64.80 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom math import comb\n\ndef solution():\n    # Define variables name and value\n    probability_up = 0.75\n    probability_down = 0.25\n    \n    # The pattern to reach a price of $79.20 is SUd or Sdu (up then down or down then up)\n    # Thus we need to calculate the probabilities of these two patterns\n    # Since the order of up and down doesn't matter for the final price, we can treat them as equivalent\n\n    # The number of paths to get to Sud or Sdu is the number of combinations of 1 up move and 1 down move in 2 moves\n    number_of_paths = comb(2, 1)  # This is 2C1, which is the number of ways to choose 1 up move from 2 moves \n\n    # Therefore, the overall probability is the number of paths multiplied by the probability of each individual path\n    probability_sud_or_sdu = number_of_paths * (probability_up * probability_down)\n    \n    # return answer\n    return probability_sud_or_sdu\n\n# Call the function and print the result\nprint(solution())\n```\nThis program calculates the probability of a security's value reaching $79.20 after two periods using a binomial model, taking into account two paths (up then down, and down then up) with a starting value of $80."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-847",
        "question": "An investment firm possesses the subsequent fee structure: 2% Annual management fee dependent on year-end AUM, 20% Incentive fee, and a 4% Hurdle rate prior to starting incentive fee collection. The current high-water mark is at $610 million. The firm's value was $583.1 million at start of the year and reached $642 million before the fees deduction after a year. What would be the net return to an investor for this year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program to calculate the net return to an investor for the year:\n\n```python\ndef solution():\n    # Define variables name and value\n    starting_value = 583100000  # Starting value in dollars\n    ending_value = 642000000   # Ending value before fees in dollars\n    high_water_mark = 610000000  # High-water mark in dollars\n    management_fee_rate = 0.02  # Annual management fee rate\n    incentive_fee_rate = 0.20   # Incentive fee rate\n    hurdle_rate = 0.04          # Hurdle rate\n    \n    # Calculating management fee\n    management_fee = ending_value * management_fee_rate\n    \n    # Calculate performance above the high-water mark and hurdle rate\n    performance_above_high_water = max(0, ending_value - high_water_mark)\n    performance_above_hurdle = performance_above_high_water * (1 + hurdle_rate)\n    \n    # Calculate incentive fee only if performance above hurdle rate is positive\n    incentive_fee = 0\n    if performance_above_hurdle > 0:\n        incentive_fee = performance_above_hurdle * incentive_fee_rate\n        \n    # Total fees\n    total_fees = management_fee + incentive_fee\n    \n    # Ending value after fees\n    ending_value_after_fees = ending_value - total_fees\n    \n    # Net performance to the investor\n    net_performance = (ending_value_after_fees - starting_value) / starting_value\n    \n    # return answer as a percentage\n    return net_performance * 100\n    \n# Calling the function to get the net return to an investor\nnet_return = solution()\nprint(f\"The net return to an investor for this year: {net_return:.2f}%\")\n```\n\nWhen you call `solution()`, it calculates the net return to an investor after deducting the relevant fees based on the firm's fee structure. It returns the net return as a percentage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-848",
        "question": "John is an entrepreneur who sells socks in the nearby marketplace. If he sells 100 pairs of socks, he generates an earning of $500. However, if he managed to sell 120 pairs, his overall income would be $590. What is the marginal revenue for socks if the market capacity is 120 pairs?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here's the Python program to calculate the marginal revenue for socks in the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    pairs_sold_initial = 100\n    revenue_initial = 500\n    \n    pairs_sold_final = 120\n    revenue_final = 590\n    \n    # Do math calculation to get the answer\n    additional_pairs = pairs_sold_final - pairs_sold_initial\n    additional_revenue = revenue_final - revenue_initial\n    \n    # Marginal Revenue (MR) is the change in revenue divided by the change in quantity\n    marginal_revenue = additional_revenue / additional_pairs\n    \n    # return answer\n    return marginal_revenue\n\n# You can call the function to get the result\nprint(solution())  # This print statement is for demonstration purposes and can be omitted.\n```\n\nThis function defines the initial and final sales and revenues, calculates the additional pairs of socks sold and the additional income earned from them, and then calculates the marginal revenue by dividing the additional income by the additional number of pairs sold. It returns the marginal revenue for the socks."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-849",
        "question": "What does the exhibit indicate as the return for the fourth quintile for the MSCI World Index over a span of 10 years?",
        "tables": [
            "| Year 1 | 15.25% | Year 6 | 30.79% |\n|--------|--------|--------|--------|\n| Year 2 | -10.02% | Year 7 | 12.34% |\n| Year 3 | 20.65% | Year 8 | -5.02% |\n| Year 4 | 9.57% | Year 9 | 16.54% |\n| Year 5 | -40.33% | Year 10 | 27.37% |"
        ],
        "topic": "Accounting",
        "output": [
            "From the information provided, it looks like the exhibit is showing the annual return percentages for each year over a span of 10 years. However, to calculate the \"return for the fourth quintile,\" we would need to understand how you are defining a quintile in this context.\n\nIn finance and statistics, a quintile is a statistical value that represents 20% of a given population. When a dataset is divided into quintiles, each quintile represents 20% of the data points. For a 10-year period, each quintile would typically consist of 2 years of data.\n\nIf we are to interpret the data you provided and calculate the return for the fourth quintile (which would be comprised of Year 7 and Year 8), we would take the return percentages for those years and perform the calculations. However, it is important to note that combining returns across different years doesn't involve simply averaging the percentages. Returns compound, so we would need to treat them as such.\n\nHere is how the Python program to calculate the fourth quintile returns might look:\n\n```python\ndef solution():\n    # Define variables name and value\n    year_7_return = 12.34\n    year_8_return = -5.02\n    \n    # Convert percentages to multipliers\n    year_7_multiplier = 1 + (year_7_return / 100)\n    year_8_multiplier = 1 + (year_8_return / 100)\n    \n    # Calculate compounded return for the quintile\n    compounded_return = (year_7_multiplier * year_8_multiplier) - 1\n    \n    # Convert back to percentage\n    quintile_return_percentage = compounded_return * 100\n    \n    # return answer\n    return quintile_return_percentage\n\n# Calling the function should provide the desired output\nprint(solution())\n```\nThis program will give you the compounded return for the fourth quintile which comprises of Year 7 and Year 8. It is important to note that returns are compounded and not simply averaged when dealing with multiple periods."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-850",
        "question": "Over the past month, a food corporation based in the US had these transactions: How much is the US current account expected to increase by due to these transactions?",
        "tables": [
            "| Transaction  Amount | (US$ millions) |\n|---------------------|----------------|\n| Bought raw material from Indonesia | 50.0 |\n| Sold food products to France | 65.0 |\n| Received royalty fees from its branch in the United Kingdom | 0.5 |\n| Donated to a charitable institution in Africa | 0.1 |\n| Borrowed from a bank in Singapore | 2.0 |\n| Paid legal fees to its German legal consultant company | 1.2 |\n| Received interest coupon from its investment in Eurobonds issued in Luxembourg | 0.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "In the context of a nation's balance of payments, the current account generally records a country's transactions with the rest of the world, specifically its net trade in goods and services, its net earnings on cross-border investments, and its net transfer payments over a period of time. \n\nIn the case of the US-based food corporation, we need to identify which of these transactions would affect the US current account. Transactions that typically affect the current account include trades in goods and services, primary income (like interest and dividends), and secondary income (like remittances and donations).\n\nHere's a breakdown of which transactions would typically affect the current account:\n- Bought raw materials from Indonesia: Increase in imports (negative for the current account).\n- Sold food products to France: Increase in exports (positive for the current account).\n- Received royalty fees from its branch in the United Kingdom: Primary income (positive for the current account).\n- Donated to a charitable institution in Africa: Secondary income (negative for the current account).\n\nTransactions involving the borrowing from banks, paying legal fees, or receiving investment income like interest coupon payments are part of the financial and capital accounts and typically do not affect the current account balance.\n\nHere's the Python program to calculate the expected increase in the US current account:\n\n```python\ndef solution():\n    # Define variables name and value\n    raw_materials_imports = -50.0\n    food_products_exports = 65.0\n    royalty_fees_received = 0.5\n    charitable_donations = -0.1\n    # bank_loans, legal_fees_paid, interest_coupon_received do not affect the current account\n\n    # Do math calculation to get the answer\n    current_account_change = (raw_materials_imports +\n                              food_products_exports +\n                              royalty_fees_received +\n                              charitable_donations)\n\n    # return answer\n    return current_account_change\n\n# Example usage:\n# print(solution())\n```\n\nThis function only includes transactions that affect the current account and calculates the net effect on the current account. When you run this function, it will return the value signifying the estimated change in the US current account due to these transactions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-851",
        "question": "What is the debt-to-capital ratio of the firm as per the latest balance sheet showcasing the following values (NZ$ thousands)?",
        "tables": [
            "| Accounts payable | 3,800 |\n|------------------|-------|\n| Long-term debt | 5,590 |\n| Other long-term liabilities | 800 |\n| Common stock | 1,200 |\n| Retained earnings | 1,810 |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the debt-to-capital ratio, we use the formula:\n\nDebt-to-Capital Ratio = Total Debt / (Total Debt + Shareholder's Equity)\n\nWhere:\n- Total Debt is the sum of short-term debt (usually includes accounts payable) and long-term debt.\n- Shareholder's Equity is the sum of common stock and retained earnings.\n\nFrom the provided table, we'll sum up the accounts payable, long-term debt, and other long-term liabilities for Total Debt. For Shareholder's Equity, we sum the common stock and retained earnings.\n\nLet's write the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    accounts_payable = 3800\n    long_term_debt = 5590\n    other_long_term_liabilities = 800\n    common_stock = 1200\n    retained_earnings = 1810\n    \n    # Calculate total debt and total shareholder's equity\n    total_debt = accounts_payable + long_term_debt + other_long_term_liabilities\n    total_shareholders_equity = common_stock + retained_earnings\n    \n    # Calculate debt-to-capital ratio\n    debt_to_capital_ratio = total_debt / (total_debt + total_shareholders_equity)\n    \n    # return answer\n    return debt_to_capital_ratio\n\n# Call the function and print the result if you want to see the output\n# print(solution())\n```\n\nThis function `solution` will calculate and return the debt-to-capital ratio for the firm based on the given data. Note that numbers are assumed to be in NZ$ thousands, and therefore no additional scaling is needed. If you need to convert these values to another unit like dollars, multiply each by the conversion factor (e.g., 1000 for thousands to units)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-852",
        "question": "Assume you simulate the price path of stock ZYX using a geometric Brownian motion model with drift μ = 0, volatility σ = 0.14, and time step Δ = 0.01. Let StS_t St​ be the price of the stock at time t. If S0S_0S0​ = 100, and the first two simulated (randomly chosen) standard normal variables are ε1 \\varepsilon_1 ε1​ = 0.263 and ε2 \\varepsilon_2 ε2​= -0.475, what is the simulated stock price after the second step?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To simulate the price path of stock ZYX using a geometric Brownian motion, the stock price at step 't+1' can be calculated using the formula:\n\nSt+1 = St * exp((μ - σ^2 / 2) * Δ + σ * ε * sqrt(Δ))\n\nwhere:\n- St is the stock price at time t,\n- μ is the drift,\n- σ is the volatility,\n- Δ is the time step,\n- ε is the standard normal variable.\n\nGiven the parameters for μ, σ, Δ, ε1, and ε2, we can compute S1 and then S2 using the above formula.\n\nHere is the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Given variables\n    mu = 0                # drift\n    sigma = 0.14          # volatility\n    delta = 0.01          # time step\n    S0 = 100              # initial stock price\n    epsilon1 = 0.263      # first standard normal variable\n    epsilon2 = -0.475     # second standard normal variable\n    \n    # Calculate the stock price after the first step\n    S1 = S0 * math.exp((mu - sigma**2 / 2) * delta + sigma * epsilon1 * math.sqrt(delta))\n    \n    # Calculate the stock price after the second step\n    S2 = S1 * math.exp((mu - sigma**2 / 2) * delta + sigma * epsilon2 * math.sqrt(delta))\n    \n    # Return the second step stock price\n    return S2\n\n# You can call the function to get the result\n# result = solution()\n# print(result)\n```\n\nThis program defines a function named `solution` which calculates and returns the simulated stock price S2 after the second step from the initial stock price S0 using the given parameters and random standard normal variables."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-853",
        "question": "What is the output, in units, that maximizes profit for this organization, based on the developed equations provided for the business?",
        "tables": [
            "|                          |                       |\n|--------------------------|-----------------------|\n| Demand curve             | P = 150-5xQ           |\n| Total revenue curve      | TR =150xQ-5xQ2        |\n| Marginal revenue curve   | MR =150-10xQ          |\n| Total cost curve         | TC = Q^3-10xQ^2+73xQ+120 |\n| Average cost curve       | AC = Q-10xQ +73 +120/Q  |\n| Marginal cost curve      | MC=3xQ^2-20xQ+73      |\n|                          | P: price per unit Q: cost per unit    |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "Profit is maximized where Marginal Revenue (MR) equals Marginal Cost (MC). Therefore, we'll need to solve the equation MR = MC for Q, which represents the output quantity.\n\nGiven the Marginal Revenue curve MR = 150 - 10xQ and Marginal Cost curve MC = 3xQ^2 - 20xQ + 73, we can write the program like this:\n\n```python\nfrom sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol for quantity (Q)\n    Q = symbols('Q')\n    \n    # Define the Marginal Revenue (MR) function\n    MR = 150 - 10*Q\n    \n    # Define the Marginal Cost (MC) function\n    MC = 3*Q**2 - 20*Q + 73\n    \n    # Solve for Q where MR equals MC\n    profit_maximizing_output = solve(Eq(MR, MC), Q)\n    \n    # Find the Q which maximizes profit (ignoring negative output, as it's not feasible)\n    max_profit_output = max(q.evalf() for q in profit_maximizing_output if q > 0)\n    \n    # return answer\n    return max_profit_output\n\n# This line is just for testing purposes. In a real program, you probably don't want to execute\n# the function directly like this as it will run when the module is imported.\n# print(solution())\n```\n\nWhen you call `solution()`, it will calculate the output that maximizes profit. Note that we've imported the `symbols`, `Eq`, and `solve` functions from the `sympy` package to find the solution symbolically for the equation. The use of `evalf()` ensures that the symbolic solution is converted to a numerical value if required, and by using `max()` function we ignore any negative values for quantity as they are not feasible in economic terms."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-854",
        "question": "Based on the provided chart, what is the variance of Y?",
        "tables": [
            "|  X  | Y=5 | Y=2 | Y=-3 |\n|-----|-----|-----|------|\n| -2  | 0.2 |  0  |   0   |\n|  1  |  0  | 0.6 |   0   |\n|  4  |  0  |  0  |  0.2  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the variance of Y values provided in the table:\n\n```python\ndef solution():\n    # Define the Y values and their frequencies\n    frequencies = [0.2, 0.6, 0.2]\n    Y_values = [5, 2, -3]\n    \n    # Calculate the mean of Y\n    mean_Y = sum(f * y for f, y in zip(frequencies, Y_values))\n    \n    # Calculate the variance of Y\n    variance_Y = sum(f * ((y - mean_Y) ** 2) for f, y in zip(frequencies, Y_values))\n    \n    # Return the answer\n    return variance_Y\n\n# Calling the function\nprint(solution())\n```\n\nWhen the program is run, it will call the `solution` function, which calculates and then prints the variance of Y based on the values given in the provided chart."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-855",
        "question": "Referring to the table with pertinent data about four bonds in a portfolio, what is the price fluctuation for the bond with an 8% interest rate using effective duration, if its YTM drops by 10 basis points?",
        "tables": [
            "| Par Value         | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n|-------------------|------------|--------|-------------------|--------------------|-----------|\n| $25million        | 105        | 8%     | 7.9               | 8                  | 122       |\n| $25million        | 100        | 7%     | 8.5               | 8.5                | 154       |\n| $20million        | 95         | 5%     | 6.3               | 2                  | 87        |\n| $30million        | 87         | 0%     | 10.2              | 10.2               | 32        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Given values\n    bond_price = 105\n    effective_duration = 8\n    delta_ytm = 0.001  # 10 basis points = 0.1% = 0.001\n    \n    # Calculate price fluctuation using effective duration\n    price_fluctuation = -effective_duration * delta_ytm * bond_price  # The formula for price change using duration\n    \n    # return answer rounded to two decimal points\n    return round(price_fluctuation, 2)\n```\n\nThis program will return the price fluctuation (in percentage terms) for a bond with an 8% interest rate using the effective duration, assuming its yield to maturity (YTM) drops by 10 basis points. The 'delta_ytm' is 0.001 because 10 basis points equal 0.1%, which is 0.001 in decimal form. The negative sign in front of 'effective_duration' represents the inverse relationship between YTM and bond prices (when yield falls, the bond price increases)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-856",
        "question": "Based on the 2017 annual report data from company B, what is the debt/capital ratio of company B? Given Depreciation and amortization: $265 million, Total assets: $11,324 million, Total debt: $1,756 million, and Shareholders' equity: $5,217 million.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! Below is the Python program that calculates the debt/capital ratio of company B based on the given data.\n\n```python\ndef solution():\n    # Define variables name and value\n    total_debt = 1756  # in million dollars\n    shareholders_equity = 5217  # in million dollars\n    \n    # Do math calculation to get the answer\n    # debt/capital ratio = total debt / (total debt + shareholders' equity)\n    debt_to_capital_ratio = total_debt / (total_debt + shareholders_equity)\n    \n    # return answer\n    return debt_to_capital_ratio\n\n# Call solution function to get the debt/capital ratio\ndebt_capital_ratio = solution()\nprint(f\"The debt/capital ratio of Company B is: {debt_capital_ratio}\")\n```\n\nBy running the `solution()` function, it calculates the debt/capital ratio by dividing the total debt by the sum of total debt and shareholders' equity. The print statement isn't necessary for the function to return the value, but it has been added here for demonstration purposes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-857",
        "question": "A futures contract for a stock index has two months left until it matures. The annual risk-free rate, when compounded continuously, is 0.25%, while the dividend yield on the stock index, also compounded continuously, is 0.8%. If the index is currently at 1,350, what would be the no-arbitrage futures price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S = 1350         # Current index\n    r = 0.0025       # Risk-free rate\n    q = 0.008        # Dividend yield\n    T = 2/12         # Time to maturity in years (2 months)\n\n    # Do math calculation to get the no-arbitrage futures price\n    # Use the formula F = S * e^( (r - q) * T )\n    F = S * math.exp((r - q) * T)\n\n    # return answer\n    return F\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-858",
        "question": "The American company named BBQ Company has exported steel to an English firm and is expected to receive payment of 3,600,000 GBP in six months, which the firm will then convert into dollars. To protect against currency risk, BBQ Company decided to enter into a 6 month forward contract to sell GBP at 1.5512USD/GBP. After three months have passed, given the information on the spot exchange market rate, forward rates, and the 90-Day Libor, what is the mark-to-market value for BBQ Company's forward position?",
        "tables": [
            "|            |                |\n|------------|----------------|\n| Table1: Forward Rates | |\n| Maturity   | Forward Points |\n| Three months | 5.3/6.1        |\n| Six months | 7.8/8.9        |\n| 90-Day Libor | |\n| Currency   | Annualized Rate|\n| GBP        | 0.60%          |\n| USD        | 0.45%          |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "Before proceeding, we need to know the current spot exchange market rate for GBP to USD after three months. This is required to calculate the mark-to-market value of the forward contract. Since the spot rate is not provided in the prompt, it is not possible to write a Python program to compute the precise answer.\n\nHowever, I can provide you with a general structure of the program, assuming `current_spot_rate` is given or can be calculated using other means. \n\nHere's a template for the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_forward_rate = 1.5512\n    notional_amount_gbp = 3600000\n    contract_maturity_months = 6\n    current_spot_rate = 0  # This value needs to be provided\n\n    three_month_forward_points = (5.3, 6.1)  # Not used in the calculation\n    six_month_forward_points = (7.8, 8.9)    # Not used in the calculation\n\n    # Calculate 3-month forward rate from spot rate (this assumes that the 6-month forward points are annualized)\n    # In practice, forward points can be added to or subtracted from the spot rate but require proper handling\n    # depending on whether they are discount or premium points. Here, we would need additional info to use them.\n    # However, since we are marking to market after three months, what we need is the current spot rate.\n\n    # Calculate the forward contract's value after three months\n    # The mark-to-market value is the difference between the contract rate and the prevailing spot rate\n    forward_contract_value = notional_amount_gbp * (initial_forward_rate - current_spot_rate)\n\n    return forward_contract_value\n\n# Note: The current_spot_rate and the use of the forward points need to be appropriately determined to make the program accurate.\n```\n\nNote that this specific problem would require the current spot exchange market rate after three months, which would then be used to calculate the mark-to-market value. The forward points provided in the table usually adjust the initial spot rate to give the forward rate, but since the spot rate is not given, they are not directly used in the calculation above.\n\nIf the current spot rate or a method to calculate it were provided, the `current_spot_rate` variable in the program would need to be set accordingly, and the calculations adjusted to reflect the data given."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-859",
        "question": "Chosen data is extracted from the GDP statistics of a fictitious nation. What is the trade shortfall in $ trillions for this nation?",
        "tables": [
            "| Account Name                              | Amount ($ billions) |\n| ---------------------------------------- | ------------------- |\n| Personal income                          | 2,456               |\n| Personal disposable income               | 1,930               |\n| Government spending                      | 666                 |\n| Government fixed investment              | 118                 |\n| Business gross fixed investment          | 538                 |\n| Government transfer payments to consumers| 348                 |\n| Total domestic savings                   | 638                 |\n| Tax revenue other than from households   | 440                 |\n| Change in inventories                    | -16                 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the trade shortfall (trade deficit), we need to know the total exports and total imports of a nation. The trade shortfall is calculated by subtracting the total value of a country's exports from the total value of its imports.\n\nHowever, the data provided in the table does not directly indicate the figures for exports and imports. Typically, the Gross Domestic Product (GDP) can be calculated using different methods, one of which is the expenditure approach. The expenditure approach adds together:\n- Consumption (C)\n- Investment (I)\n- Government Spending (G)\n- Net Exports (Exports minus Imports, X-M)\n\nThe trade shortfall is equivalent to negative net exports.\n\nTo find the trade shortfall, we need information about consumption (which is generally the sum of Personal disposable income and Government transfer payments to consumers, minus savings) and net exports. The total GDP is the sum of Personal income, Government spending, Gross fixed investment, and Change in inventories. However, without the explicit data on exports and imports, we can't directly compute the trade shortfall.\n\nAssuming the trade shortfall is referring to the savings-investment gap, which is often called the current account balance - this is represented as total domestic savings minus total domestic investment. The investment here takes into account both government and business investments.\n\nWe can provide a program to calculate this gap, but please keep in mind that this is an assumption and may not be the correct interpretation without further data (such as actual exports or imports):\n\n```python\ndef solution():\n    # Define variables name and amount\n    total_domestic_savings = 638  # in billions\n    government_fixed_investment = 118  # in billions\n    business_gross_fixed_investment = 538  # in billions\n    change_in_inventories = -16  # in billions\n    \n    # Total investment is the sum of government and business investment plus changes in inventories\n    total_investment = government_fixed_investment + business_gross_fixed_investment + change_in_inventories\n    \n    # The trade shortfall (savings-investment gap) is calculated\n    savings_investment_gap = total_domestic_savings - total_investment\n    \n    # Convert the answer to trillions\n    answer = savings_investment_gap / 1000\n    \n    # return answer\n    return answer\n\n# Calling the function to get the result\nprint(solution())\n```\n\nThe calculated savings-investment gap (as an assumption for trade shortfall) will be returned in $ trillions."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-860",
        "question": "The Chief Vice President of XY investment requests John to apply the market approach to assessment prioritizing the guideline transactions methodology. John states that the control premium paid for the most comparable guideline company used for the evaluation implies a lack of control discount of 15 percent. The discount for absence of marketability was assessed at 20 percent. What is the cumulative discount for both control and marketability?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define the individual discounts\n    lack_of_control_discount = 0.15\n    discount_for_absence_of_marketability = 0.20\n    \n    # Instead of simply adding the discounts together, we need to calculate the cumulative effect \n    # as they are sequential, not additive. If we apply a 15% control discount, we are left with 85% value (1 - 0.15).\n    # Then we apply a 20% marketability discount to the remaining 85%, which is (1 - 0.20).\n    cumulative_discount = 1 - ((1 - lack_of_control_discount) * (1 - discount_for_absence_of_marketability))\n    \n    # return the cumulative discount as a percentage\n    return cumulative_discount * 100\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-861",
        "question": "In an economy, there exist two firms, Firm X and Firm Y. The default rate for Firm X stands at 10%, while for Firm Y, it is 20%. Presuming defaults for both firms happen independently, what is the likelihood that either Firm X or Firm Y defaults?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the likelihood that either Firm X or Firm Y defaults:\n\n```python\ndef solution():\n    # Define the default rates for Firm X and Firm Y\n    default_rate_X = 0.10  # 10% chance of default for Firm X\n    default_rate_Y = 0.20  # 20% chance of default for Firm Y\n    \n    # Calculate the probability that neither defaults\n    neither_defaults = (1 - default_rate_X) * (1 - default_rate_Y)\n    \n    # The probability that either Firm X or Firm Y defaults is the complement of neither defaulting\n    either_defaults = 1 - neither_defaults\n    \n    # Return the answer\n    return either_defaults\n    \n# Call the solution function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will output the likelihood that either Firm X or Firm Y defaults. The calculation is based on the complementary probability of the event where neither firm defaults."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-862",
        "question": "Given the same sequence of spot rates, what is the cost of Bond X?",
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity | Spot Rates |\n|------|-------------|------------------|------------|\n| X    | 8%          | 3 years          | 8%         |\n| Y    | 7%          | 3 years          | 9%         |\n| Z    | 6%          | 3 years          | 10%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the cost of Bond X, we need to discount its future cash flows by the corresponding spot rates. Since all the spot rates for the bonds are given as annual rates, we will assume annual coupon payments. The cash flows for Bond X consist of the annual coupon payments and the face value returned at maturity. The cost of the bond is then the present value of these cash flows.\n\nHere's the Python program to compute it:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08  # 8%\n    face_value = 1000  # Assuming a standard face value\n    time_to_maturity = 3  # in years\n    spot_rate = 0.08  # 8% as decimal\n    \n    # Initialize the cost of bond\n    bond_cost = 0\n    \n    # Calculate the present value of the coupon payments\n    for t in range(1, time_to_maturity + 1):\n        coupon_payment = coupon_rate * face_value\n        present_value_coupon = coupon_payment / ((1 + spot_rate) ** t)\n        bond_cost += present_value_coupon\n    \n    # Calculate the present value of the face value (maturity value)\n    present_value_face_value = face_value / ((1 + spot_rate) ** time_to_maturity)\n    bond_cost += present_value_face_value\n    \n    # Return answer\n    return bond_cost\n\n# Let's call the function and print out the result\nprint(solution())\n```\n\nRunning this program will calculate and print out the cost of Bond X, based on the given spot rate and assuming annual payment of the coupon rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-863",
        "question": "The Greenleaf company employs an exponentially weighted moving average model (EWMA) to predict the daily volatility of a stock. With a decay factor of 0.85, the latest estimate for daily volatility sits at 2.5%. If the stock closed at $35 yesterday and stands at $33 today, assuming we use continuously compounded returns, what would be the revised estimate of volatility?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    lambda_factor = 0.85\n    previous_volatility = 0.025\n    previous_price = 35\n    current_price = 33\n    \n    # Calculate daily return using continuously compounded returns formula\n    ln_return = math.log(current_price / previous_price)\n    \n    # Calculate the variance of the return\n    variance_return = ln_return**2\n    \n    # Calculate the new estimated volatility using the EWMA formula\n    new_variance = lambda_factor * previous_volatility**2 + (1 - lambda_factor) * variance_return\n    new_volatility = math.sqrt(new_variance)\n    \n    # Return answer\n    return new_volatility\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the daily return using continuously compounded returns, computes the variance of that return, and then uses the EWMA model to update the estimate for the volatility. Finally, it prints out the new estimated volatility."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-864",
        "question": "An analyst with an investment management firm named James Collins is examining the consequences of leverage on yearly ROE in the company's Eurozone equities fund (\"the fund\"). He gathers data on the 72 stocks in the fund, taking company size as an independent variable. The results of estimating the model Ri = b0 + b1(Sizei) + b2(D/Ei) + ει are shown in Exhibit 1. Collins compares the projections of his model to the actual ROE for two portfolio stocks, X and Y, both with identical debt ratios but with market capitalizations of EUR 100 million and 200 million respectively. According to Collins' regression analysis, how much higher is the ROE for company X than for company Y (in percentage points)?",
        "tables": [
            "\n|                | Coefficient | Standard Error |\n|----------------|-------------|----------------|\n| Intercept      | 0.2248      |                |\n| Sizei          | -0.012      |                |\n| D/Ei           | -0.0172     | 0.00986        |\n|                |             |                |\n| **ANOVA**      | **Degrees of freedom** | **Sum of squares** |\n| Regression     | 2           | 0.0960         |\n| Residual       | 69          | 0.5704         |\n\nNote: Sizei= In (market capitalization)\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Given coefficients\n    intercept_b0 = 0.2248\n    coefficient_b1 = -0.012\n    # No need for coefficient b2 (debt-to-equity ratio) since both companies have identical debt ratios.\n\n    # Market capitalizations for companies X and Y\n    market_cap_x = math.log(100e6)  # Natural logarithm of company X's market cap\n    market_cap_y = math.log(200e6)  # Natural logarithm of company Y's market cap\n\n    # Calculating the predicted ROE for both companies\n    predicted_roe_x = intercept_b0 + coefficient_b1 * market_cap_x\n    predicted_roe_y = intercept_b0 + coefficient_b1 * market_cap_y\n\n    # Finding the difference in predicted ROE between company X and company Y\n    roe_difference = predicted_roe_x - predicted_roe_y\n\n    # The difference is in percentage points\n    return roe_difference * 100  # Convert from proportion to percentage points\n\n# Calling the function and printing the result.\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-865",
        "question": "Assuming John Smith has short-sold 100 shares of Mega Marts at a rate of $42 for each share and concurrently placed a \"good-till-cancelled, stop 50, limit 55 buy\" order, which would be executed once the stipulated stop condition is met, what is the highest potential loss Smith may incur, ignoring transaction expenses?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program that calculates the highest potential loss that John Smith may incur:\n\n```python\ndef solution():\n    # Define variables for the short-sale\n    shares_short_sold = 100\n    short_sale_price = 42\n    stop_price = 50\n    limit_price = 55\n    \n    # Calculate the potential loss scenarios\n    # Loss if stock price goes to stop price ($50)\n    loss_at_stop_price = (stop_price - short_sale_price) * shares_short_sold\n    \n    # Loss if stock price goes to limit price ($55) or above\n    loss_at_limit_price = (limit_price - short_sale_price) * shares_short_sold\n    \n    # The highest potential loss would be at the limit price or above\n    highest_potential_loss = loss_at_limit_price\n    \n    # return highest potential loss\n    return highest_potential_loss\n\n# Execute the function\nsolution()\n```\nThe function `solution` computes the highest potential loss by taking the difference between the limit price (the maximum price he's willing to pay to cover the short position) and the short sale price, then multiplying by the amount of shares short sold. The stop price does not determine the loss in this scenario as the limit order must also be considered. The limit order means that the order will not execute until the price is at or below $55, which would result in the greatest loss. Transaction expenses are ignored as per the question's stipulation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-866",
        "question": "What is the calculated worth of the preferred shares of the corporation, based on the data collected by a shareholder?",
        "tables": [
            "| Par value of preferred stock offered at a 6% dividend rate | 100  |\n|---------------------------------------------------|------|\n| Company's sustainable growth rate                 | 5%   |\n| Yield on comparable preferred stock issues        | 11.5%|\n| Investor's marginal tax rate                      | 30%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    dividend_rate = 0.06\n    yield_on_comparable_issues = 0.115\n    tax_rate = 0.30\n\n    # Calculate the annual dividend for the preferred stock\n    annual_dividend = par_value * dividend_rate\n\n    # Adjusting the yield by the investor's marginal tax rate\n    after_tax_yield = yield_on_comparable_issues * (1 - tax_rate)\n    \n    # Calculate the worth of the preferred stock for the shareholder\n    worth_of_preferred_stock = annual_dividend / after_tax_yield\n\n    # Return answer\n    return worth_of_preferred_stock\n\n# Call the function and print result for verification\nprint(f\"The calculated worth of the preferred shares: {solution():.2f}\")\n```\n\nThe above program calculates the worth of the preferred shares considering the dividend paid, the comparable yield on similar preferred stock issues, and the investor's marginal tax rate. It returns the calculated worth value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-867",
        "question": "The following is the demand function for smartphones: QDmobile=10,000-2Pmobile+0.05income+2Pfixed-linetelephone-5Pwireless. As of now, a smartphone is priced at 3,000 RMB, while a landline and wireless solutions are priced at 1500 RMB and 500 RMB, respectively. With an assumption that income is 10,000 RMB, what would be the respective income elasticity of demand for a smartphone?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the income elasticity of demand for a smartphone using the given demand function, we will first compute the quantity demanded at the initial income level. Then, we'll compute the percentage change in quantity demanded resulting from a small change in income while keeping other factors constant. Finally, we'll determine the income elasticity of demand by the ratio of the percentage change in quantity to the percentage change in income.\n\nHere is the Python program to calculate the income elasticity of demand:\n\n```python\ndef solution():\n    # Given values\n    Pmobile = 3000  # Price of smartphone\n    Pfixed_line = 1500  # Price of landline\n    Pwireless = 500  # Price of wireless\n    initial_income = 10000  # Initial level of income\n    delta_income = 1  # Change in income for elasticity calculation\n\n    # Initial quantity demanded\n    QDmobile_initial = 10000 - 2*Pmobile + 0.05*initial_income + 2*Pfixed_line - 5*Pwireless\n\n    # Quantity demanded after increase in income\n    new_income = initial_income + delta_income\n    QDmobile_new = 10000 - 2*Pmobile + 0.05*new_income + 2*Pfixed_line - 5*Pwireless\n\n    # Calculate the change in quantity demanded\n    delta_QDmobile = QDmobile_new - QDmobile_initial\n\n    # Calculate the percentage change in quantity demanded\n    percent_change_QD = (delta_QDmobile / QDmobile_initial) * 100\n\n    # Calculate the percentage change in income\n    percent_change_income = (delta_income / initial_income) * 100\n\n    # Calculate the income elasticity of demand\n    income_elasticity = percent_change_QD / percent_change_income\n\n    # Return the income elasticity of demand\n    return income_elasticity\n\n# Call the function and print the result\nprint(solution())\n```\n\nNotice, the `delta_income` is set to a very small value and is used to approximate the derivative of the demand with respect to income. In practice, you might want to use the method of finite differences with a sufficiently small value of `delta_income` to accurately determine elasticity or use more advanced mathematical techniques such as calculus to evaluate the derivative directly."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-868",
        "question": "The SW bond offers a 4% annual coupon and matures in three years. It's a callable bond that could be exercised at par at the conclusion of years 1 and 2. In calculating and assessing SW's bonds, Huang employs a projected interest rate volatility of 15% and develops the binomial interest rate tree as outlined in the Exhibit below. Green, a lead analyst, instructs Huang to determine the impact of a 20 bps parallel shift of the benchmark yield curve on the price of this callable bond. What does Huang's computations reveal in the table below about the effective duration of SW's callable bond?",
        "tables": [
            "| Magnitude of the Parallel Shift in the Benchmark Yield Curve | +20bps | -20bps |\n|-------------------------------------------------------------|--------|--------|\n| Full Price of the Bond (% of par)                           | 100.478| 101.238|"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the effective duration of the callable bond, the following formula can be used:\n\nEffective Duration = (P(-) - P(+)) / (2 * Δyield * P(0))\n\nWhere:\n- P(-) is the full price of the bond if the yield decreases by Delta yield (in our case, 101.238% of par).\n- P(+) is the full price of the bond if the yield increases by Delta yield (in our case, 100.478% of par).\n- P(0) is the current price of the bond, which is typically assumed to be at par (100% of par) in this scenario.\n- Delta yield is the change in yield in decimal form (in our case, 20 basis points, or 0.0020).\n\nLet's proceed with the Python program to calculate the effective duration:\n\n```python\ndef solution():\n    # Define variables\n    P_minus = 101.238 / 100  # Full price of the bond when yield decreases by 20bps (% of par to decimal)\n    P_plus = 100.478 / 100   # Full price of the bond when yield increases by 20bps (% of par to decimal)\n    P_0 = 1.0                # Current full price of the bond at par\n    bps_shift = 20           # basis points\n    delta_yield = bps_shift / 10000  # 20 bps converted to decimal\n    \n    # Calculate effective duration\n    effective_duration = (P_minus - P_plus) / (2 * delta_yield * P_0)\n    \n    # Return answer\n    return effective_duration\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run the function `solution()`, it will return the effective duration of SW's callable bond. The print statement will display the result. Please note this calculation assumes the pricing model yields a current bond price at par, which is consistent with typical convention unless more specific market data is provided."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-869",
        "question": "If a PE fund has a total committed capital of $100 million, and the cumulative paid-in capital by the end of the most recent year was $90 million, with cumulative distributions tallying up to $30 million. Additionally, the end-of-year NAV, taking into consideration the balance before and after distributions, stood at $160 million and $130 million respectively. Moreover, the estimated NAV prior to distributions for the ensuing year is projected to be $250 million and the carried interest rate stands at 20%. Based on these financial figures of the PE fund, what was the TVPI (Total Value to Paid-In Capital) ratio at the close of the most recent year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cumulative_paid_in_capital = 90000000  # Cumulative Paid-In Capital ($90 million)\n    cumulative_distributions = 30000000  # Cumulative Distributions ($30 million)\n    end_of_year_NAV = 130000000  # End-of-Year NAV after distributions ($130 million)\n    \n    # Do math calculation to get the answer\n    # TVPI = (Cumulative distributions + End-of-Year NAV) / Cumulative paid-in capital\n    tvpi = (cumulative_distributions + end_of_year_NAV) / cumulative_paid_in_capital\n    \n    # return answer\n    return tvpi\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the Total Value to Paid-In (TVPI) capital ratio by dividing the sum of cumulative distributions and the end-of-year Net Asset Value (NAV) by the cumulative paid-in capital. The TVPI ratio is a metric used in private equity to measure the overall value generated by the fund relative to the capital that has been invested."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-870",
        "question": "If a bond provides a yearly coupon rate of 5%, paying interest every six months, and it matures in seven years, what would be the bond's price per 100 of par value, given the market discount rate of 3%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\ndef present_value(rate, cash_flow, t):\n    \"\"\"Compute the present value of a cash flow.\"\"\"\n    return cash_flow / ((1 + rate)**t)\n\ndef solution():\n    # Define variables name and values\n    coupon_rate = 0.05\n    market_discount_rate = 0.03\n    par_value = 100\n    maturity = 7\n    frequency = 2  # Semi-annual payments\n    \n    # Semi-annual coupon payment\n    semi_annual_coupon = (par_value * coupon_rate) / frequency\n    \n    # Semi-annual market discount rate\n    semi_annual_market_rate = market_discount_rate / frequency\n    \n    # Total number of coupon payments\n    num_payments = maturity * frequency\n\n    # Calculate present value of each coupon payment\n    pv_coupons = sum(present_value(semi_annual_market_rate, semi_annual_coupon, i)\n                     for i in range(1, num_payments + 1))\n\n    # Calculate present value of the par value (paid at maturity)\n    pv_par = present_value(semi_annual_market_rate, par_value, num_payments)\n    \n    # Calculate bond's price\n    bond_price = pv_coupons + pv_par\n    \n    # return answer (rounding to two decimal places for currency)\n    return round(bond_price, 2)\n\n# Example run\nprint(solution())  # Remove this line when you copy this code into another environment.\n```\nThe `solution` function first computes the present value of all semi-annual coupon payments and also the present value of the par value to be received at maturity. It then sums these present values to get the bond's price. Note that the bond's price is generally expressed per 100 of par value, and so this result matches the format requested. The bond price is rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-871",
        "question": "Jane Doe possesses a spreadsheet comprised of 108 monthly returns for shares in the ABC Company. She constructs a software program that employs bootstrap resampling to generate 200 resamples of the ABC data by sampling with replacement. Each resample similarly contains 108 data points. Doe's software measures the average of all 200 resamples and determines that the mean of these 200 resample averages is 0.0261. The software then subtracts 0.0261 from all 200 resample averages, squares each of these 200 differences, and sums up the squared differences. The outcome is 0.835. Subsequently, the software calculates an estimation of the standard error of the sample average. What is the estimated standard error of the sample average?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables\n    mean_of_resample_averages = 0.0261\n    sum_of_squared_differences = 0.835\n    number_of_resamples = 200\n    \n    # Calculate the variance of the sample average\n    variance_of_sample_average = sum_of_squared_differences / (number_of_resamples - 1)\n    \n    # Calculate the standard error of the sample average (square root of variance)\n    standard_error_of_sample_average = math.sqrt(variance_of_sample_average)\n    \n    # return the estimated standard error of the sample average\n    return standard_error_of_sample_average\n\n# You can call the function and print the result to screen\n#print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-872",
        "question": "Given a discrete uniform distribution, the possible outcome contains 25 integers from 1 to 25, what is the accurate value of P( 5 ≤ X < 10 )?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # In a discrete uniform distribution, each outcome is equally likely.\n    # The number of outcomes where 5 ≤ X < 10 is the number of integers\n    # from 5 to 9 (inclusive), which is 5 (i.e., 5, 6, 7, 8, 9).\n\n    # Total possible outcomes are from 1 to 25, which makes 25 possible outcomes.\n\n    # Probability (P) of an event in a uniform distribution is given by\n    # P = Number of desired outcomes / Total number of possible outcomes\n\n    # The number of desired outcomes is 5 (from 5 to 9)\n    desired_outcomes = 5\n\n    # Total number of possible outcomes is 25 (from 1 to 25)\n    total_possible_outcomes = 25\n\n    # Calculate the probability\n    probability = desired_outcomes / total_possible_outcomes\n\n    # return answer\n    return probability\n\n# You can print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-873",
        "question": "Travelpro has just distributed a dividend of 500 per share. The annual dividend will increase by 5% per annum over the coming four years. The corporation's shares are projected to be sold for $10,000 at the conclusion of the fourth year. If the necessary return rate is 15%, what is the inherent value of Travelpro's shares?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 500\n    growth_rate = 0.05\n    required_return = 0.15\n    future_stock_price = 10000\n    inherent_value = 0\n    \n    # Calculate the present value of dividends over the next four years\n    for year in range(1, 5):\n        # Each year dividend grows by the growth rate\n        dividend = dividend * (1 + growth_rate)\n        # Discount each year's dividend to its present value\n        inherent_value += dividend / ((1 + required_return) ** year)\n\n    # Calculate the present value of the projected stock price at the end of the fourth year\n    inherent_value += future_stock_price / ((1 + required_return) ** 4)\n    \n    # return the answer\n    return inherent_value\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis Python program defines the base dividend, the growth rate of the dividend, the required return and the projected future stock price. It then calculates the present value of each year's dividend for the first four years taking into account the dividend growth and discounts accordingly. It also calculates the present value of the projected stock price at the end of the fourth year and includes it in the final inherent value. Finally, it prints out the calculated inherent value of Travelpro's shares."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-874",
        "question": "Based on the provided probability matrix, what is the covariance of stock X and stock Y?",
        "tables": [
            "| Probability Matrix |         |         |         |\n|--------------------|---------|---------|---------|\n| Returns            | RB=70%  | RB=30%  | RB=-20% |\n| RA=-20%, 30%       |         | 0%      | 0%      |\n| RA=20%, 0%         |         | 40%     | 0%      |\n| RA=30%, 0%         |         | 0%      | 30%     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define the returns for each stock and the corresponding probabilities\n    # Format: (RA return, RB return, Probability)\n    events = [(-0.2, 0.7, 0.3),\n              (-0.2, -0.2, 0),\n              (0.2, 0.7, 0),\n              (0.2, -0.2, 0.4),\n              (0.3, 0.7, 0),\n              (0.3, -0.2, 0.3)]\n    \n    # Calculate expected returns for each stock\n    expected_return_A = sum(ra * p for ra, _, p in events)\n    expected_return_B = sum(rb * p for _, rb, p in events)\n    \n    # Calculate covariance\n    covariance = sum((ra - expected_return_A) * (rb - expected_return_B) * p for ra, rb, p in events)\n\n    return covariance\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThe code defines a function `solution()` that first lays out the possible outcomes and their associated probabilities from the provided probability matrix. Then, it calculates the expected return for both stocks A and B by multiplying the return with the probability for each state and summing up these products. Finally, the covariance is computed using the formula for covariance, and the result is returned."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-875",
        "question": "Based on the data provided in Exhibit 1, which consists of the results of a regression of the monthly returns for an index related to a power company's equity over the past 203 months (the dependent variable), against the monthly returns for the S&P 500 Index and the difference between the monthly returns on long-term U.S. government bonds and one-month U.S. Treasury bills (SPREAD) (the two independent variables), what is the test statistic value related to Peterson's null hypothesis on the coefficient value of SPREAD? Peterson's null hypothesis is that this coefficient equals 1, while his alternative hypothesis claims it does not equal to 1.",
        "tables": [
            "| Variable | Coefficient | t-statistic | p-value |\n| -------- | ----------- | ----------- | ------- |\n| Constant | -0.0069     | -0.013      | 0.99    |\n| S&P 500  | 0.3625      | 6.190       | <0.01   |\n| SPREAD   | 1.0264      | 4.280       | <0.01   |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # SPREAD's estimated coefficient\n    coefficient_spread = 1.0264\n    # SPREAD's t-statistic\n    t_statistic_spread = 4.280\n    # Peterson's null hypothesis value for SPREAD's coefficient\n    null_hypothesis_value = 1.0\n\n    # Under the null hypothesis, the expected coefficient value is 1\n    # To test the null hypothesis that the coefficient equals 1, we can use the formula:\n    # t = (estimated_coefficient - null_hypothesis_value) / standard_error\n    # estimated_coefficient is the coefficient from the regression output\n    # null_hypothesis_value is the value under the null hypothesis (1 in this case)\n    # standard_error can be derived from the t-statistic: t_statistic = (estimated_coefficient - null_hypothesis_value) / standard_error\n\n    # Since the t_statistic is given, we can rearrange the formula to calculate the standard_error as:\n    # standard_error = (estimated_coefficient - null_hypothesis_value) / t_statistic\n    standard_error = (coefficient_spread - null_hypothesis_value) / t_statistic_spread\n    \n    # The actual t-statistic for testing the null hypothesis is:\n    # t = (coefficient_spread - null_hypothesis_value) / standard_error\n    # But since we subtract the null_hypothesis_value (1) from the coefficient_spread (1.0264),\n    # this will give us the same number as the standard error of the estimate, but positive or negative\n    # depending on the sign of (coefficient_spread - null_hypothesis_value). \n    t_statistic_null_hypothesis = (coefficient_spread - null_hypothesis_value) / standard_error\n    \n    # return answer\n    return t_statistic_null_hypothesis\n\n# Call the function to get the answer\nsolution()\n```\n\nThe program calculates the t-statistic for Peterson's null hypothesis by dividing the difference between the estimated coefficient and the hypothesized value by the estimated standard error. Since the standard error is not directly provided in the given information, it is calculated using the given t-statistic and then used to compute the t-statistic for the hypothesis test."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-876",
        "question": "Three merchants are creating a market for Light Systems shares. From these prices, Wilson's trading desk carries out a market sell order for 1,100 shares of Light Systems. Based on the information in Exhibit 1, what is the cumulative amount that Wilson will receive, per share, for making the market sell order?",
        "tables": [
            "|     | Bid     |       |     | Ask     |       |     |     |\n|-----|---------|-------|-----|---------|-------|-----|-----|\n| Dealer | Time Entered | Price | Size | Dealer | Time Entered | Price | Size |\n| B |   10.10 a.m. | $17.15 | 900 | C | 10.11 a.m. | $17.19 | 1,200 |\n| C |   10.11 a.m. | $17.14 | 1,500 | B | 10.10 a.m. | $17.20 | 800 |\n| A |   10.11 a.m. | $17.12 | 1,100 | A | 10.12 a.m. | $17.22 | 1,100 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables for the bid side since the sell order will fulfill the bid prices\n    bids = [(900, 17.15), (1500, 17.14), (1100, 17.12)]  # Format (Size, Price)\n\n    # Sort bids by price in descending order to prioritize higher bid prices\n    bids.sort(key=lambda x: x[1], reverse=True)\n\n    # Define variables for tracking the sell order\n    shares_to_sell = 1100\n    cumulative_amount = 0\n\n    # Process the sell order using the bid side data\n    for size, price in bids:\n        if shares_to_sell > 0:\n            shares_sold = min(shares_to_sell, size)\n            cumulative_amount += shares_sold * price\n            shares_to_sell -= shares_sold\n        else:\n            break\n\n    # Calculate the average sell price per share\n    average_price_per_share = cumulative_amount / 1100\n    \n    # return answer\n    return round(average_price_per_share, 2)  # round to 2 decimal places\n\n# Example usage\nprint(solution())  # Will print the average price per share for a sell order of 1100 shares\n```\n\nThis program will calculate the cumulative amount Wilson will receive for a market sell order of 1,100 shares of Light Systems by matching the highest bid prices first. The amounts are multiplied by the price at which the shares are sold and then divided by the total shares to get the average price per share. It returns the average price per share rounded to two decimal places."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-877",
        "question": "John is tasked with approximating the equity value of Company X using the Merton approach. 1)The value of Company X's assets stand at 180. 2)There's a risk-free rate of 5%.3)The company puts forth one-year zero interest bonds with a face value of 100. 4)The worth of a European put option on the company's asset is 3.50 and the strike price is set at 100.",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "To calculate the equity value of Company X using the Merton approach, we need to understand that the equity value is equivalent to the value of a call option on the firm’s assets, with the strike price equal to the debt face value. According to the Merton model, the following relationship holds true:\n\n\\[\nEquity = Asset\\ Value - Debt + Value\\ of\\ Put\\ Option\n\\]\n\nGiven that the risk-free rate and the maturity of the option is not used directly in the calculation of equity (as the value of the put has been provided), the formula simplifies to:\n\n\\[\nEquity = Asset\\ Value - (Debt - Value\\ of\\ Put\\ Option)\n\\]\n\nHere's a Python program that uses this relationship to calculate the equity value:\n\n```python\ndef solution():\n    # Define variables name and value\n    asset_value = 180\n    debt_face_value = 100\n    put_option_value = 3.50\n\n    # Do math calculation to get the answer\n    equity_value = asset_value - (debt_face_value - put_option_value)\n\n    # return answer\n    return equity_value\n\n# Example usage\n# print(solution())\n```\n\nTo get the answer, simply call the function `solution()` and it will return the equity value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-878",
        "question": "A corporate bond with a 5-year timeline and a 5% semiannual coupon payment is valued at 104.967 for every 100 of face value. It has a yield-to-maturity of 3.897%, as quoted on a semiannual bond basis. If an economist is instructed to convert this to a monthly rate, what would be the yield-to-maturity?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    semi_annual_yield = 3.897 / 100  # Convert percentage to decimal\n    periods_per_year = 2  # Semi-annual\n    \n    # Do math calculation to get semi-annual rate\n    semi_annual_rate = (1 + semi_annual_yield)**(1/periods_per_year) - 1\n    \n    # Convert semi-annual rate to monthly rate\n    monthly_rate = (1 + semi_annual_rate)**(1/6) - 1\n    \n    # Convert the monthly rate to percentage\n    monthly_yield = monthly_rate * 100\n    \n    # return answer\n    return monthly_yield\n\n# Print the solution to see the result.\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-879",
        "question": "Based on the provided information that the available stable funding for Bank X is $180 million, their high-quality liquid assets are $200 million, their required stable funding amounts to $330 million, and they have Net cash outflows of $120 million expected over the next 30 days, what is the liquidity coverage ratio of Bank X?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    high_quality_liquid_assets = 200e6\n    net_cash_outflows = 120e6\n    \n    # Do math calculation to get the answer\n    liquidity_coverage_ratio = high_quality_liquid_assets / net_cash_outflows\n    \n    # return answer\n    return liquidity_coverage_ratio\n\n# Example usage:\n# lcr = solution()\n# print(f\"The Liquidity Coverage Ratio of Bank X is: {lcr}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-880",
        "question": "Sephora is a corporation from the United States that deals with cosmetics. Its Canadian branch, Beauty company, operates exclusively in Canada. It was established on 31st December 2015, and Beauty company uses the US dollar as its working currency. Fixed assets were acquired when the company was instituted. The table provides financial statement data for the years finalised in 2015 and 2016. Could you compute the balance sheet exposure if the working currency were modified?",
        "tables": [
            "|                             | 2015 | 2016 |\n|-----------------------------|------|------|\n| Cash                        | 210  | 310  |\n| Accounts receivable         |      | 31   |\n| Inventory                   | 60   | 80   |\n| Fixed assets                | 200  | 200  |\n| Accumulated depreciation    | -    | (35) |\n| Total assets                | 470  | 586  |\n| Accounts payable            | 105  | 162  |\n| Long-term debt              | 235  | 273  |\n| Common stock                | 130  | 130  |\n| Retained earnings           | -    | 21   |\n| Total liabilities and shareholders' equity | 470  | 586  |",
            "|                          |                    |    US $/C$    |\n|--------------------------|--------------------|--------------|\n| Rate on                  | 31 December 2015   |    0.89      |\n| Average  rate in 2016    |                    |    0.96      |\n| Weighted-average rate for inventory purchases | |    0.94      |\n| Rate  on  31 December 2016 |                  |    0.94      |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the balance sheet exposure if the working currency were modified, we need to determine the difference in assets and liabilities in Canadian dollars that would arise due to the change in the exchange rate. However, since we have to consider functional currency translation, we should use the appropriate historical and current rates for different items on the balance sheet.\n\nWe will translate each balance sheet item using the rates provided, where:\n\n- Monetary assets and liabilities will be translated at the current rate (0.94 US$/C$ for 2016).\n- Non-monetary assets (like inventory and fixed assets) will be translated at the historical rate (weighted average for inventory purchases (0.94) and the rate on 31st December 2015 (0.89) for fixed assets, since they were acquired on establishment).\n- Equity items remain at historical rates.\n\nWe simply need to:\n\n1. Translate each item in the 2016 column for both assets and liabilities.\n2. Compute the total translated assets and translated liabilities.\n3. The balance sheet exposure will be the difference between total translated assets and total translated liabilities.\n\nHere is the corresponding Python program:\n\n```python\ndef solution():\n    # Define variables with the rates\n    current_rate = 0.94\n    historical_rate_fixed_assets = 0.89\n    weighted_average_rate_inventory = 0.94\n\n    # Balance sheet in Canadian dollars for 2016 as given\n    cash_2016_cad = 310\n    accounts_receivable_2016_cad = 31\n    inventory_2016_cad = 80\n    fixed_assets_2016_cad = 200  # before depreciation\n    accumulated_depreciation_2016_cad = 35\n    accounts_payable_2016_cad = 162\n    long_term_debt_2016_cad = 273\n    common_stock_2016_cad = 130\n    retained_earnings_2016_cad = 21\n\n    # Translation of each item at appropriate rates\n    cash_2016_usd = cash_2016_cad / current_rate\n    accounts_receivable_2016_usd = accounts_receivable_2016_cad / current_rate\n    inventory_2016_usd = inventory_2016_cad / weighted_average_rate_inventory\n    fixed_assets_2016_usd = fixed_assets_2016_cad / historical_rate_fixed_assets\n    accumulated_depreciation_2016_usd = accumulated_depreciation_2016_cad / current_rate\n    net_fixed_assets_2016_usd = fixed_assets_2016_usd - accumulated_depreciation_2016_usd\n\n    accounts_payable_2016_usd = accounts_payable_2016_cad / current_rate\n    long_term_debt_2016_usd = long_term_debt_2016_cad / current_rate\n\n    # Equity and common stock aren't translated because they remain at the historical rate.\n    common_stock_2016_usd = common_stock_2016_cad  # Assuming contribution on establishment.\n    retained_earnings_2016_usd = retained_earnings_2016_cad  # Assumes all earnings retained.\n\n    # Compute total assets and liabilities in USD\n    total_assets_2016_usd = cash_2016_usd + accounts_receivable_2016_usd + \\\n                            inventory_2016_usd + net_fixed_assets_2016_usd\n    total_liabilities_and_equity_2016_usd = accounts_payable_2016_usd + \\\n                                            long_term_debt_2016_usd + \\\n                                            common_stock_2016_usd + \\\n                                            retained_earnings_2016_usd\n\n    # Calculate balance sheet exposure\n    exposure = total_assets_2016_usd - total_liabilities_and_equity_2016_usd\n\n    # Return the exposure value\n    return exposure\n\n# Use the function and print the result\nexposure_result = solution()\nprint(f\"The balance sheet exposure is: {exposure_result:.2f} USD\")\n```\n\nPlease note that common stock and retained earnings are carried at their historical values since no specific translation rate is mentioned for these equity items. If they were issued or earned at a different rate, the program would need to be adjusted to account for this."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-881",
        "question": "A business acquired machinery for $50,000 on the 1st of January 2009. The company is implementing straight-line depreciation for accounting reasons over a decade, but applying a declining balance method at a rate of 20% for taxation. Given a 30% tax rate, what is the deferred tax obligation by the end of 2011?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 50000\n    straight_line_rate = 1 / 10\n    declining_balance_rate = 0.20\n    tax_rate = 0.30\n    \n    # Calculate accumulated straight-line depreciation until end of 2011\n    # Assuming straight line depreciation starts from the first year itself\n    straight_line_depreciation_per_year = initial_cost * straight_line_rate\n    accumulated_straight_line_depreciation = straight_line_depreciation_per_year * 3\n    \n    # Calculate accumulated declining balance depreciation until end of 2011\n    accumulated_declining_balance_depreciation = initial_cost\n    for _ in range(3):  # For each year until end of 2011\n        annual_declining_balance_depreciation = accumulated_declining_balance_depreciation * declining_balance_rate\n        accumulated_declining_balance_depreciation -= annual_declining_balance_depreciation\n    \n    # Calculate the difference in depreciation methods\n    depreciation_difference = accumulated_declining_balance_depreciation - accumulated_straight_line_depreciation\n    \n    # Calculate the deferred tax obligation\n    deferred_tax_obligation = depreciation_difference * tax_rate\n    \n    # return answer\n    return round(deferred_tax_obligation, 2)\n\n# Call the function and print the result to verify the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-882",
        "question": "Johnson inquires Chen to gauge the likelihood of default linked with a five-year investment-grade bond offered by Polaris Corporation. Chosen information on the Polaris Corporation bond is displayed in Exhibit 1.Exhibit 1. Based on Exhibit 1, what is the possibility of Polaris failing to repay the bond within the first three years, taking into account the specific data on Polaris Corporation Five-Year Bond?",
        "tables": [
            "| Year | Hazard Rate |\n|---|---|\n| 1 | 0.22% |\n| 2 | 0.35% |\n| 3 | 0.50% |\n| 4 | 0.65% |\n| 5 | 0.80% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Assuming that the hazard rate signifies the probability of default within that year given survival until the beginning of that year, we can calculate the probability of not defaulting in each year and multiply these probabilities to find the overall probability of survival up until the end of the third year. Then we will subtract this survival probability from 1 to determine the cumulative default probability by the end of year 3.\n\n```python\ndef solution():\n    # Define hazard rates for each year\n    hazard_rates = [0.0022, 0.0035, 0.0050]\n    \n    # Initialize survival probability (probability of no default)\n    survival_probability = 1\n    \n    # Calculate compounded survival probability for each year\n    for rate in hazard_rates:\n        survival_probability *= (1 - rate)\n    \n    # Probability of default within the first three years\n    default_probability = 1 - survival_probability\n    \n    # return answer\n    return default_probability\n    \n# Execute the function and print the result\nprint(solution())\n```\n\nWhen you run the function `solution()`, it will output the probability of Polaris Corporation failing to repay its five-year bond within the first three years."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-883",
        "question": "Duhamel starts reviewing the asset collection of an American citizen, Brooke Jensen. Jensen's investments are in American and European securities. On January 1, 2019, Jensen held assets of USD 50 million and EUR 50 million, distributed between shares and bonds. The exchange rate on this day was 1.1 USD/EUR. A year later, on January 1, 2020, the value of Jensen's European asset increased from EUR 50 million to EUR 54 million, having EUR 20 million in shares and EUR 34 million in bonds. The USD/EUR exchange rate at this time is 1.16. Can you determine the domestic currency return on Jensen's European portfolio over the preceding year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program to calculate the domestic currency return on Jensen's European portfolio over the preceding year:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_assets_EUR = 50_000_000\n    final_assets_EUR = 54_000_000\n    initial_exchange_rate = 1.1\n    final_exchange_rate = 1.16\n    \n    # Converting the initial and final asset values from EUR to USD\n    initial_assets_USD = initial_assets_EUR * initial_exchange_rate\n    final_assets_USD = final_assets_EUR * final_exchange_rate\n    \n    # Calculate the absolute return in USD\n    absolute_return_USD = final_assets_USD - initial_assets_USD\n    \n    # Calculate the percentage return based on the initial USD value\n    return_percentage = (absolute_return_USD / initial_assets_USD) * 100\n    \n    # return answer\n    return return_percentage\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program will provide the domestic currency return on Jensen's European portfolio over the previous year by first converting the initial and final asset values from EUR to USD, then calculating the absolute return in USD and finally deriving the percentage return based on the initial USD value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-884",
        "question": "What should be the projection of the analyst for the final retained earnings of a corporation, ahead of its end-of-year profit declaration (in millions)?",
        "tables": [
            "| Estimated net income | $200 |\n| --- | --- |\n| Beginning retained earnings | $1,400 |\n| Estimated distributions to owners | $100 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    estimated_net_income = 200\n    beginning_retained_earnings = 1400\n    estimated_distributions_to_owners = 100\n\n    # Do math calculation to get the answer\n    final_retained_earnings = (beginning_retained_earnings + estimated_net_income \n                               - estimated_distributions_to_owners)\n\n    # return answer\n    return final_retained_earnings\n\n# You can call the function to see the result\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-885",
        "question": "Given the below details about a company's bond, what is the financial duration of this particular bond?",
        "tables": [
            "| Full price of bond (PVFull) | $100,367,242    |\n|-----------------------------|-----------------|\n| Modified duration (AnnModDur) | 8.124 years |\n| Accrued interest               | $303,218        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    full_price_of_bond = 100367242\n    modified_duration = 8.124\n    accrued_interest = 303218\n    \n    # Calculate the full price of the bond excluding the accrued interest (clean price)\n    clean_price_of_bond = full_price_of_bond - accrued_interest\n    \n    # Since financial duration is often considered equivalent to modified duration\n    # for bonds with no option features, we can use the modified duration\n    financial_duration = modified_duration\n    \n    # return financial duration\n    return financial_duration\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-886",
        "question": "A business sells a non-refundable, two-year service agreement for €420. According to previous trends, the business anticipates that the first year will see 25% of service expenses, with the rest expected in the second year. How much revenue does the business acknowledge in the first year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    service_agreement_fee = 420\n    first_year_expense_percentage = 0.25\n    \n    # Do math calculation to get the answer\n    first_year_revenue = service_agreement_fee * first_year_expense_percentage\n    \n    # return answer\n    return first_year_revenue\n\n# Calling the function to get the result\nprint(solution())\n```\n\nThis function calculates the revenue recognized in the first year by taking the service agreement fee and multiplying it by the percentage that is expected to be expended in the first year (25%)."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-887",
        "question": "Anna, a researcher, carried out a basic regression to understand the fluctuation in electricity usage based on temperature. She found out that the overall variation of the dependent variable was 132.08 and the variation that was explained stood at 60.38. Given that she had 60 monthly data points, can you calculate the coefficient of determination?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! The coefficient of determination, often denoted as \\( R^2 \\), is the proportion of the variance in the dependent variable that is predictable from the independent variable(s). It is calculated as the ratio of the explained variation to the total variation.\n\nHere is the Python program to calculate the coefficient of determination:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_variation = 132.08\n    explained_variation = 60.38\n    \n    # Do math calculation to get the coefficient of determination\n    r_squared = explained_variation / total_variation\n    \n    # return answer\n    return r_squared\n\n# You can call the function to get the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print the value of the coefficient of determination based on the provided data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-888",
        "question": "John wants to assist his pal, Lisa, in forecasting the revenue of her store in October 20X9. To do this, he uses the income data from January 20X6 to September 20X9 as examples to create an AR(2) model. The resulting formula is: Xt+1  =1.3458+0.8912Xt+0.3372Xt-1. What would be the anticipated earnings of Lisa’s store in October 20X9 if it is known that the income in August 20X9 was $2746.72 and the income in September 20X9 was $2957.63?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program that calculates the predicted revenue of Lisa's store in October 20X9 using the provided AR(2) model.\n\n```python\ndef solution():\n    # Define variables name and value\n    # Xt represents the revenue in September 20X9\n    Xt = 2957.63\n    # Xt_minus_1 represents the revenue in August 20X9\n    Xt_minus_1 = 2746.72\n    \n    # AR(2) model parameters\n    intercept = 1.3458\n    coefficient_1 = 0.8912\n    coefficient_2 = 0.3372\n    \n    # Do math calculation to get the predicted revenue for October 20X9\n    # Using the AR(2) model: Xt+1 = intercept + coefficient_1 * Xt + coefficient_2 * Xt_minus_1\n    predicted_revenue_October_20X9 = intercept + coefficient_1 * Xt + coefficient_2 * Xt_minus_1\n    \n    # return answer\n    return predicted_revenue_October_20X9\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program defines the necessary variables, applies the AR(2) model formula to calculate the predicted revenue for October 20X9, and then returns the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-889",
        "question": "Assume a call option priced at $4 where the strike price is $50. Calculate the worth at expiration and the earnings for a purchaser if the cost of the underlying asset at expiration is $48.",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    strike_price = 50\n    asset_price_at_expiration = 48\n    \n    # Do math calculation to get the answer\n    # The option is not exercised because the asset price is less than the strike price\n    worth_at_expiration = 0\n    \n    # Earnings for the purchaser is negative because the option is not exercised\n    # and the purchaser loses the price paid for the option\n    earnings_for_purchaser = worth_at_expiration - option_price\n    \n    # return answer\n    return worth_at_expiration, earnings_for_purchaser\n    \n# Call the solution function and print the result for testing\nworth, earnings = solution()\nprint(\"Worth at Expiration:\", worth)\nprint(\"Earnings for Purchaser:\", earnings)\n```\n\nThe provided code calculates the worth at expiration and the earnings for a purchaser of a call option if the price of the underlying asset at expiration is less than the strike price. In this case, because the asset price at expiration ($48) is less than the strike price ($50), the call option is not exercised, meaning its worth at expiration is $0, and the purchaser's earnings are negative, equal to the price paid for the option ($4). The `solution` function returns the computed worth at expiration and earnings for the purchaser, and these values are printed out at the end for testing purposes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-890",
        "question": "Using the same figures highlighted in the comparative balance sheets, how much money did Globex Metals International, a global metals corporation, gain from the sale of machinery, following their reported equipment sale loss of $2 million in 2018, a noted depreciation expense of $8 million, and capital outlays amounting to $10 million which was completely used on new machinery purchases?",
        "tables": [
            "| Balance Sheet Item | 12/31/2017 | 12/31/2018 | Change |\n| ------------------ | ---------- | ---------- | ------ |\n| Equipment          | $100 million  | $105 million | $5 million  |\n| Accumulated  depreciation - equipment | $40 million | $46 million | $6 million |"
        ],
        "topic": "Accounting",
        "output": [
            "To solve for the amount of money Globex Metals International gained from the sale of machinery, we can use the equipment accounts and accumulated depreciation information to determine the net book value of the equipment that was sold. Then we can include the loss on sale and the depreciation expense to find the original cost of the sold equipment. The amount received from the sale is the original cost minus the loss on the sale.\n\nHere's how to set up and solve this using a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    equipment_beginning = 100  # in millions\n    equipment_end = 105  # in millions\n    accumulated_depreciation_beginning = 40  # in millions\n    accumulated_depreciation_end = 46  # in millions\n    depreciation_expense = 8  # in millions\n    capital_outlays = 10  # in millions\n    loss_on_sale = 2  # in millions\n    \n    # Calculate the change in net equipment\n    net_equipment_change = (equipment_end - equipment_beginning) - (accumulated_depreciation_end - (accumulated_depreciation_beginning + depreciation_expense))\n    \n    # Determine the original cost of the equipment sold \n    # We know that the net change should include the capital outlays and subtract any equipment sold.\n    # And the net equipment change should equal capital outlays - original_cost_of_sold_equipment + loss_on_sale\n    original_cost_of_sold_equipment = capital_outlays - net_equipment_change + loss_on_sale\n    \n    # Calculate the amount received from the sale\n    money_gained_from_sale = original_cost_of_sold_equipment - loss_on_sale  # in millions\n    \n    # return answer\n    return money_gained_from_sale\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe program defines the necessary variables and then uses the balance sheet to determine the net change in equipment after accounting for depreciation. With some algebraic manipulation, we can determine the original cost of the sold equipment and thus the amount received from the sale. \n\nPlease note that the problem presents numbers in millions, which is why the calculation does not include the word \"million\" within the coding; it's assumed. When interpreting the result, one should remember to think of the answer in terms of millions of dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-891",
        "question": "Suppose interest rate parity is valid and the present spot rate is 1.4808 CAD/EUR. The annual interest rates in the nation of Canada (CAD) and the country of France (EUR) stand at 3% and 4% respectively. What is the 1-year forward rate in CAD/EUR?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 1.4808  # CAD/EUR\n    interest_rate_cad = 0.03  # Canada\n    interest_rate_eur = 0.04  # France\n    \n    # Calculating the future 1-year forward rate based on interest rate parity\n    forward_rate = spot_rate * ((1 + interest_rate_cad) / (1 + interest_rate_eur))\n    \n    # return answer\n    return forward_rate\n\n# Uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-892",
        "question": "Bill is examining a food distribution enterprise, RapidSnacks's fair forward P/E using the Gordon growth offer discount model. The EPS and dividends of RapidSnacks are indicated previously. Bill assumes that the company's necessary rate of return would be 12%, and hypothesizes that the growth rate of the company would be consistent at 5%. Based on this data, what is the justified forward P/E of the enterprise?",
        "tables": [
            "|  | 2015 | 2016 | 2017 | 2018(E) |\n|---|---|---|---|---|\n| Earnings per share | 6 | 6.3 | 6.62 | 6.95 |\n| Dividends per share | 1.8 | 1.89 | 2.00 | 2.10 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Below is the Python program that calculates the justified forward P/E of the enterprise based on the Gordon growth model:\n\n```python\ndef solution():\n    # Define variables name and value\n    required_rate_return = 0.12\n    growth_rate = 0.05\n    dividends_per_share = 2.10  # Note: We use the dividends of the future year (2018E)\n    earnings_per_share = 6.95   # Note: We use the earnings of the future year (2018E)\n\n    # Calculate the stock price using Gordon Growth Model\n    stock_price = dividends_per_share / (required_rate_return - growth_rate)\n    \n    # Calculate the justified forward P/E\n    justified_forward_PE = stock_price / earnings_per_share\n    \n    # return answer\n    return justified_forward_PE\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThis program defines the necessary variables based on the Gordon growth model and calculates the justified forward P/E by dividing the stock price (as determined by the model) by the earnings per share for the forecasted year."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-893",
        "question": "A life insurance firm from Canada has an outstanding issue of perpetual, non-convertible, non-callable preferred shares with a 4.80 percent coupon rate and a par value of $25. If the required return on similar issues is 4.49 percent, what would be the intrinsic value of one of these preferred shares?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.048\n    par_value = 25\n    required_return = 0.0449\n    \n    # Do math calculation to get the answer\n    annual_dividend = coupon_rate * par_value\n    intrinsic_value = annual_dividend / required_return\n    \n    # return answer\n    return intrinsic_value\n\nprint(solution())\n```\n\nThis program will calculate the intrinsic value of a preferred share based on the given coupon rate, par value, and required return. The annual dividend is computed by multiplying the coupon rate by the par value. The intrinsic value is then computed by dividing the annual dividend by the required return rate. The print statement at the end will output the result when you run this Python script."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-894",
        "question": "An expert finds out that roughly 99% of the observations of daily revenue for a corporation lie between $230,000 and $480,000 and that daily revenue for the corporation follows a normal distribution. If about 99% of all the observations lie in the interval μ ± 3σ, then using the approximate z-value instead of the exact table, what is the standard deviation of daily revenue for the corporation?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "In this problem, we can use the property of the normal distribution that approximately 99% of data lies within μ ± 3σ for a normal distribution. Given that the range between $230,000 and $480,000 includes approximately 99% of the observations, this range can be considered to be μ ± 3σ.\n\nWe can calculate the standard deviation σ using the following steps:\n\n1. Determine the width of the interval which equates to 6σ (because the range from μ - 3σ to μ + 3σ spans 6 standard deviations).\n2. Divide the width of the interval by 6 to find σ.\n\nNow let's implement this in a Python function.\n\n```python\ndef solution():\n    # Define variables for endpoints of the range\n    lower_bound = 230000\n    upper_bound = 480000\n    \n    # Calculate the width of the interval that covers 99% of the observations\n    range_width = upper_bound - lower_bound\n    \n    # Calculate standard deviation, the range width is equal to 6 standard deviations\n    standard_deviation = range_width / 6\n    \n    # return standard deviation\n    return standard_deviation\n    \n# Call the solution function and print the result\nprint(solution())\n```\n\nThe function calculates the standard deviation and the print statement at the end is used to output the result. Please note, the `print` call is for demonstration purposes and is not required if you are simply returning the result from the function.\n\nNow, let's write the code within the specified format without the extra print statement.\n\n```python\ndef solution():\n    # Define variables for the range of the interval\n    lower_bound = 230000\n    upper_bound = 480000\n    \n    # Calculate the range of the interval that covers 99% of the observations\n    range_width = upper_bound - lower_bound\n    \n    # Now calculate standard deviation: the range width is equal to 6 standard deviations\n    standard_deviation = range_width / 6\n    \n    # return standard deviation\n    return standard_deviation\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-895",
        "question": "A manager in charge of market risk intends to determine the cost of a 2-year zero-coupon bond. The 1-year interest rate currently stands at 10.0%. It's projected that there's a 50% chance that the 1-year interest rate will reach 12.0% and a 50% chance that it could be 8.0% in the next year. If the risk premium of duration risk is assumed to be 50 bps annually, and the bond’s face value is worth EUR 1,000, which would be the accurate price of this zero-coupon bond?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    face_value = 1000\n    current_interest_rate = 0.10\n    projected_interest_rate_high = 0.12\n    projected_interest_rate_low = 0.08\n    risk_premium = 0.005 # 50 basis points (bps) in decimal\n    \n    # Calculate the expected 1-year interest rate in the next year\n    expected_interest_rate_next_year = 0.5 * (projected_interest_rate_high + projected_interest_rate_low)\n    \n    # Calculate the 2-year zero-coupon bond's yield taking into account the risk premium\n    two_year_bond_yield = expected_interest_rate_next_year + risk_premium\n    \n    # Discount the face value by the 2-year yield compounded for 2 years to get the price of the bond\n    bond_price = face_value / ((1 + current_interest_rate) * (1 + two_year_bond_yield))\n    \n    # return answer\n    return bond_price\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-896",
        "question": "What is the contribution from the investment in Alme to the net earnings (in thousands) for 2017 of Brecht and Co, a European manufacturing company that prepares its financial statements according to International Financial Reporting Standards (IFRS)? This is being reviewed by two treasury group members of Brecht and Co, Hans Braun and Olga Schmitt.",
        "tables": [
            "|     |      |\n| ----| ----|\n| EXHIBIT 1  SELECTED INFORMATION O N INVESTMENTS FOR THE YEAR ENDED 31 DECEMBER 2017 (£ THOUSANDS, EXCEPT PER SHARE DATA) | |\n| Company Name | Alme AG |\n| Security  description | Bonds maturing  31 December 2026, 5% coupon payable  annually, 6% effective market rate when issued  1 January 2012 |\n| Classification at purchase | Held to maturity |\n| Date of purchase | 1 January 2016 |\n| Amount owned by Dagmar | Face value £4,000 |\n| Market value on  1 January 2017 | £3,600.60 |\n| Market value on  31 December 2017 | £3,634.76 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 4000\n    market_value_start = 3600.60\n    market_value_end = 3634.76\n    coupon_rate = 0.05\n    market_rate = 0.06\n    \n    # Calculate the Annual Coupon Payment\n    annual_coupon_payment = face_value * coupon_rate\n    \n    # Calculate the Interest Income using the Effective Interest Rate Method\n    # Interest income = Carrying amount at the beginning of period * Effective Interest Rate\n    interest_income = market_value_start * market_rate\n    \n    # Calculate the Amortization of Premium or Discount\n    # In this case, it is a discount because the bond was purchased at a price below face value.\n    amortization = annual_coupon_payment - interest_income\n    \n    # Adjust the Carrying Amount of the Investment\n    # Since it's a Held to Maturity investment, the carrying amount will be adjusted for the amortization.\n    adjusted_carrying_amount = market_value_start + amortization\n    \n    # Calculate the Change in Fair Value\n    # For held to maturity investments, gains or losses due to changes in fair value are not recognized in earnings.\n    # Therefore, there's no need to consider the market value at the end of the year for IFRS net earnings purposes.\n    change_in_fair_value = market_value_end - market_value_start\n    \n    # Contribution to Net Earnings\n    # The contribution from investment in Alme to the net earnings is the sum of the Interest Income and the Amortization of Discount.\n    net_earnings_contribution = interest_income + amortization\n    \n    # return answer\n    return net_earnings_contribution\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program provides the answer by calculating the interest income using the effective interest rate method and the amortization of the discount since the bond was bought at a price below its face value. However, the change in fair value is not considered for net earnings purposes according to IFRS for held to maturity investments, instead, the contribution from the investment to the net earnings is the sum of interest income and amortization."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-897",
        "question": "John is assessing the FCFF of Corporation N for the upcoming year, which records an annual turnover of $100 million. He has projected the pertinent details in the given table. What is the FCFF?",
        "tables": [
            "| Revenue growth | 5% |\n| --- | --- |\n| Gross profit margin | 30% |\n| Depreciation Expense | 2.5% of revenues |\n| SG&A | 15% of revenues |\n| WCInv | 5% of the incremental revenues |\n| CapEx | 15% of the incremental revenues |\n| Tax rate | 30% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 100000000\n    revenue_growth_rate = 0.05\n    gross_profit_margin = 0.30\n    depreciation_expense_rate = 0.025\n    sg_and_a_rate = 0.15\n    working_capital_investment_rate = 0.05\n    capital_expenditure_rate = 0.15\n    tax_rate = 0.30\n\n    # Projected revenue for the upcoming year\n    projected_revenue = revenue * (1 + revenue_growth_rate)\n    \n    # Incremental revenue\n    incremental_revenue = projected_revenue - revenue\n\n    # Calculations\n    gross_profit = projected_revenue * gross_profit_margin\n    depreciation_expense = projected_revenue * depreciation_expense_rate\n    sg_and_a = projected_revenue * sg_and_a_rate\n    working_capital_investment = incremental_revenue * working_capital_investment_rate\n    capital_expenditure = incremental_revenue * capital_expenditure_rate\n    operating_income = gross_profit - sg_and_a - depreciation_expense\n    tax_on_operating_income = operating_income * tax_rate\n    net_operating_profit_less_adjusted_taxes = operating_income - tax_on_operating_income\n\n    # Free Cash Flow to the Firm (FCFF)\n    fcff = net_operating_profit_less_adjusted_taxes + depreciation_expense - working_capital_investment - capital_expenditure\n\n    # return answer\n    return fcff\n\n# Call the solution function and print the result\nprint(f\"The Free Cash Flow to the Firm (FCFF) is: {solution()}\")\n```\n\nThis program calculates the Free Cash Flow to the Firm (FCFF) based on the provided table of projections for Corporation N. It first calculates the projected revenue for the upcoming year by applying the given revenue growth rate. Then it computes gross profit, depreciation expense, selling, general and administrative expenses (SG&A), and incremental working capital investment and capital expenditures based on the rates given in the table. After calculating the operating income, taxes on that income are computed to obtain the net operating profit less taxes. Finally, the FCFF is obtained by adding back the non-cash depreciation expense and subtracting working capital investment and capital expenditures from the net operating profit less taxes."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-898",
        "question": "If we assume an annual interest rate of 8% and an investment made today of $50,000. Let's suppose equal distributions are made at the end of each year for the following twelve years, leaving the account to be closed at the end of the twelfth year. How much would each yearly distribution amount be?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program using the `numpy` library to calculate the yearly distribution amount using the annuity formula:\n\n```python\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables name and value\n    present_value = 50000  # Present value of the investment\n    annual_rate = 0.08     # Annual interest rate\n    years = 12             # Number of years for the distribution\n    \n    # Calculate the annuity payment using the numpy_financial.pmt function\n    distribution_amount = npf.pmt(rate=annual_rate, nper=years, pv=-present_value, fv=0)\n    \n    # return answer\n    return round(distribution_amount, 2)\n```\nNote: In the `numpy_financial.pmt` function, it's important to pass the present value as a negative number, because it represents an outflow of money.\n\nMake sure to install the `numpy-financial` library to use the `numpy_financial` module as it may not come by default with Python. You can install it using pip:\n\n```sh\npip install numpy-financial\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-899",
        "question": "Given that Occurrence A and Occurrence B are independent events. The probability of A is 0.2 [P(A) = 0.2] and the probability of B is 0.5 [P(B) = 0.5]. What is the combined probability of A and B, P(AB)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability_A = 0.2 # P(A)\n    probability_B = 0.5 # P(B)\n    \n    # Since A and B are independent, we multiply the probabilities\n    combined_probability = probability_A * probability_B # P(A and B)\n    \n    # return answer\n    return combined_probability\n\n# You can optionally run the function to get the result.\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-900",
        "question": "The portfolio manager of AB pension, Monique, is contemplating the addition of XY Corp. (New York Stock Exchange: XY) to her portfolio. After a thorough evaluation of the company and its competitors, she is of the view that the company will exhibit exceptional growth for the coming 4 years and regular growth following that. Therefore, she has inferred that a two-stage DDM is most suitable for evaluating the stock. The total dividends paid by XY in 2017 amounted to $0.22. She predicts a growth rate of 12 percent for the next 4 years and 6 percent thereafter. She estimates that the required return is 9 percent. What percentage of the total value of the stock is associated with the value of the second stage based on this method?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 0.22\n    growth_rate_first_stage = 0.12\n    growth_rate_second_stage = 0.06\n    required_return = 0.09\n    first_stage_years = 4\n\n    # Calculate the present value of dividends during the high-growth stage\n    present_value_first_stage = sum([initial_dividend * (1 + growth_rate_first_stage)**i / (1 + required_return)**i for i in range(1, first_stage_years + 1)])\n    \n    # Calculate the terminal value at the end of the high-growth stage, which is the start of the second stage\n    terminal_dividend = initial_dividend * (1 + growth_rate_first_stage)**first_stage_years\n    terminal_value = terminal_dividend * (1 + growth_rate_second_stage) / (required_return - growth_rate_second_stage)\n    \n    # Discount terminal value back to present value\n    present_value_second_stage = terminal_value / (1 + required_return)**first_stage_years\n    \n    # Calculate total value of the stock (sum of first and second stage values)\n    total_value = present_value_first_stage + present_value_second_stage\n    \n    # Calculate percentage of total value associated with the value of the second stage\n    answer = (present_value_second_stage / total_value) * 100\n    \n    # return answer\n    return round(answer, 2)\n\n# Function call to check the result\nprint(solution())\n```\n\nThe above program defines the necessary variables and calculates the present value of dividends for both stages. Then it calculates the percentage of the total value that is associated with the value of the second stage and rounds the answer to two decimal places before returning it."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-901",
        "question": "Taking into account the following financial information for a financial institution, in millions of dollars: shareholders' funds: 627.4; retained earnings: 65.6; undisclosed reserves: 33.5; goodwill: 21.3; subordinated debt: 180.0; specific provisions: 11.7. What is the ratio of tier 2 capital to tier 1 capital?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "Here is the Python program to find the ratio of Tier 2 capital to Tier 1 capital:\n\n```python\ndef solution():\n    # Define variables name and value\n    shareholders_funds = 627.4 \n    retained_earnings = 65.6\n    undisclosed_reserves = 33.5\n    goodwill = 21.3\n    subordinated_debt = 180.0\n    specific_provisions = 11.7\n\n    # Tier 1 capital calculation\n    tier1_capital = shareholders_funds + retained_earnings - goodwill\n\n    # Tier 2 capital calculation\n    tier2_capital = subordinated_debt + undisclosed_reserves + specific_provisions\n\n    # Calculate the ratio of Tier 2 to Tier 1 capital\n    tier_ratio = tier2_capital / tier1_capital\n\n    # return answer\n    return tier_ratio\n\n# Call the function and print the answer\nprint(solution())\n```\n\nRemember that Tier 1 capital is the core capital of a bank and includes shareholders' equity and retained earnings, but does not include intangible assets such as goodwill. Tier 2 capital includes supplementary capital like revaluation reserves, undisclosed reserves, subordinated term debt, and general provisions.\n\nHere we have calculated Tier 1 capital by adding the shareholders' funds to retained earnings and then subtracting the goodwill. Tier 2 capital is the total of subordinated debt, undisclosed reserves, and specific provisions. The ratio is then simply the Tier 2 capital divided by Tier 1 capital."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-902",
        "question": "A dealer submits a limit order to purchase stocks at a rate of $49.94, with the market bid price being $49.49 and the bid-ask spread standing at 0.7%. What will likely be the final fill price for the order?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    limit_order_price = 49.94\n    bid_price = 49.49\n    bid_ask_spread_percentage = 0.7\n    \n    # Calculate ask price using the bid price and bid-ask spread\n    ask_price = (1 + bid_ask_spread_percentage / 100) * bid_price\n    \n    # The final fill price will be the least of the limit order price and the calculated ask price\n    # since the order cannot be filled at a price higher than the limit order price\n    final_fill_price = min(limit_order_price, ask_price)\n    \n    # return answer\n    return final_fill_price\n\n# Calling the function to find the answer\nprint(solution())\n```\n\nIn this case, the `solution()` function calculates the ask price based on the bid price and the bid-ask spread. Then, it determines the final fill price as the lesser of the limit order price and the calculated ask price, essentially simulating a limit order transaction. The print statement is used to output the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-903",
        "question": "Currently possessing $750,000 in cash and short investment, Robert consults his investment manager Smith to discuss his investment portfolio. Robert's human capital amounts to $1.2 million with 30% demonstrating an equity-like characteristic according to calculations. Deciding that an overall target allocation of 45% equity is fitting for Robert, Smith must now determine the financial capital equity allocation required for Robert to meet the total economic wealth's targeted equity allocation. What should this allocation amount to?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_and_investments = 750000\n    human_capital = 1200000\n    human_capital_equity_like = 0.3\n    target_equity_allocation_total_wealth = 0.45\n\n    # Calculate the financial capital (cash_plus_investments + equity-like part of human capital)\n    financial_capital = cash_and_investments\n    equity_like_human_capital = human_capital * human_capital_equity_like\n    total_capital = financial_capital + human_capital\n\n    # Calculate the target equity in terms of total wealth\n    target_equity_total_wealth = total_capital * target_equity_allocation_total_wealth\n\n    # The financial capital's equity allocation needed\n    required_equity_allocation_financial_capital = target_equity_total_wealth - equity_like_human_capital\n\n    # return answer\n    return required_equity_allocation_financial_capital\n\n# Example usage:\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-904",
        "question": "At what level of default in par value would Bond Class A incur a loss if issued by a special purpose vehicle in the following structure?",
        "tables": [
            "| Bond Class | Par Value(Emillions) |\n|------------|---------------------|\n| A(senior)  | 200                 |\n| B(subordinated) | 20           |\n| C(subordinated) | 5            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value for each bond class\n    par_value_class_a = 200\n    par_value_class_b = 20\n    par_value_class_c = 5\n\n    # Define the total par value of subordinate bonds (B and C)\n    subordinated_par_value = par_value_class_b + par_value_class_c\n\n    # Class A would incur a loss only after subordinate classes (B and C) have been fully depleted.\n    # Therefore, default level for Class A to incur a loss is the sum of par values of B and C.\n    loss_level_for_class_a = subordinated_par_value\n\n    # return answer\n    return loss_level_for_class_a\n\n# Call the function to test\nprint(solution())\n```\n\nWhen you call the `solution()` function, it will return the total par value of the subordinated bonds (B and C), which is the level at which the senior bond (A) would start incurring a loss in case of default."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-905",
        "question": "What is the contribution per unit (in £) this product adds to the present GDP, taking into account the production and sale expenses as shown in the subsequent table?",
        "tables": [
            "| Activity                           | Cost of Input (£/unit) | Price of Output (£/unit) in Current Period |\n| ---------------------------------- | ---------------------- | ----------------------------------------- |\n| Input materials                    | 3.50                   | 5.42                                      |\n| Production                         | 5.42                   | 8.02                                      |\n| Distributing good to stores (wholesale) | 8.02            | 11.23                                     |\n| Selling good to consumers (retail) | 11.23                  | 16.50                                     |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "Certainly! Here's a Python program that calculates the contribution per unit to GDP, taking into consideration the production and sale expenses:\n\n```python\ndef solution():\n    # Define variables for input cost and price at each stage\n    input_materials_cost = 3.50\n    input_materials_price = 5.42\n    production_cost = 5.42\n    production_price = 8.02\n    wholesale_cost = 8.02\n    wholesale_price = 11.23\n    retail_cost = 11.23\n    retail_price = 16.50\n    \n    # Value added at each stage is the price of output minus the cost of input\n    input_materials_value_added = input_materials_price - input_materials_cost\n    production_value_added = production_price - production_cost\n    wholesale_value_added = wholesale_price - wholesale_cost\n    retail_value_added = retail_price - retail_cost\n    \n    # Total contribution to GDP is the sum of value added at each stage\n    total_contribution_to_GDP = (input_materials_value_added +\n                                 production_value_added +\n                                 wholesale_value_added +\n                                 retail_value_added)\n    \n    # return total contribution to GDP\n    return total_contribution_to_GDP\n\n# This is the answer\nprint(solution())\n```\n\nThis program defines variables for the cost and price at each production and distribution stage, calculates the value added at each stage, and then sums these values to calculate the total contribution per unit to the GDP."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-906",
        "question": "Exhibit 1 Smith Family: Personal and Financial Information:Personal Information:1. Estimated present value of the Smiths’ future earnings is $3,900,000.2. The family has two children, ages 10 and 8. Cost of four years of university for the two children, with an estimated present value of $250,000.3. Purchase of a vacation home in the next five years, with an estimated present value of $325,000.4. Estimated present value of the Grahams’ future consumption is $3,500,000. Using the data in Exhibit 1, what is the Smiths’ economic net worth (in thousands)?",
        "tables": [
            "| Checking account | $27,000 |\n|------------------|---------|\n| Taxable investment account | $625,000 |\n| Residence | $525,000 |\n| Residential mortgage | $285,000 |\n| Outstanding balance on a $100,000 home equity line of credit | $38,000 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    checking_account = 27  # in thousands\n    taxable_investment_account = 625  # in thousands\n    residence_value = 525  # in thousands\n    residential_mortgage = 285  # in thousands\n    home_equity_credit_balance = 38  # in thousands\n    future_earnings = 3900  # in thousands\n    education_cost = 250  # in thousands\n    vacation_home_cost = 325  # in thousands\n    future_consumption = 3500  # in thousands\n\n    # Calculate total assets\n    total_assets = (checking_account + taxable_investment_account + \n                    residence_value + future_earnings)\n\n    # Calculate total liabilities\n    total_liabilities = (residential_mortgage + home_equity_credit_balance + \n                         education_cost + vacation_home_cost + future_consumption)\n\n    # Calculate economic net worth\n    economic_net_worth = total_assets - total_liabilities\n\n    # return answer (in thousands)\n    return economic_net_worth\n\n# Call function and print the answer\nprint(solution())\n```\n\nThe provided Python code defines the monetary values of the Smith family's assets and liabilities, calculates the total assets and liabilities, and then determines their economic net worth by subtracting the liabilities from the assets. It returns the economic net worth in thousands of dollars."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-907",
        "question": "If John has put money into 50,000 shares of Company N's stock that is being sold for $25 each and the company announces a cash dividend of $2, assuming John will be using all dividends received to buy more shares and considering he is a tax-exempt investor, how many shares will he possess after reinvesting the dividends at the ex-dividend price?",
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "output": [
            "To solve this, we first need to calculate the total dividend that John will receive by multiplying the cash dividend per share by the number of shares he owns. Then, if we assume the stock's price drops by the dividend amount (which typically happens on the ex-dividend date), we can calculate how many additional shares he can buy with the dividend received. Here's how the Python program would look:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_owned = 50000\n    share_price = 25\n    dividend_per_share = 2\n    \n    # Calculate total dividends\n    total_dividends = shares_owned * dividend_per_share\n    \n    # Assume the price of the stock drops by the amount of the dividend on the ex-dividend date\n    ex_dividend_price = share_price - dividend_per_share\n    \n    # Calculate how many additional shares he can purchase\n    additional_shares = total_dividends / ex_dividend_price\n    \n    # Total shares after reinvestment\n    total_shares = shares_owned + additional_shares\n    \n    # return answer\n    return total_shares\n\n# Execute the function and print the results\nprint(solution())\n```\nKeep in mind that in reality, stock prices do not always decrease by the amount of the dividend, and there could be transaction fees associated with buying the shares, but this example assumes a simplified scenario."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-908",
        "question": "Assuming a trader acquired a stock initially priced at $20 and sold it at the end of the year for $25, what is the continuously compounded annual rate of return?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To answer the given question, we'll use the formula for continuously compounded return, which can be stated as:\n\n\\( r = \\ln (\\frac{P_{end}}{P_{start}}) \\)\n\nwhere \\( r \\) is the continuously compounded annual rate of return, \\( P_{end} \\) is the final price of the stock, and \\( P_{start} \\) is the initial price of the stock.\n\nHere is the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    P_start = 20  # Initial price\n    P_end = 25    # Final price\n    \n    # Do math calculation to get the answer\n    # Calculate the continuously compounded annual rate of return\n    rate_of_return = math.log(P_end / P_start)\n    \n    # return answer\n    return rate_of_return\n\n# Example usage:\n# rate = solution()\n# print(f\"The continuously compounded annual rate of return is: {rate:.2f}\")\n```\n\nThis program imports the `math` module to utilize the natural logarithm function `math.log`. The function `solution` calculates the continuously compounded annual rate of return from the given initial and final stock prices."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-909",
        "question": "What is the value of a bond with a par value of $100, a coupon rate of 6% paid twice a year, a YTM of 7%, and a maturity period of a decade?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program to calculate the value of the bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.06\n    ytm = 0.07\n    maturity = 10\n    payment_frequency = 2  # Semi-annual payments\n\n    # Calculate the coupon payment per period\n    coupon_payment = (coupon_rate / payment_frequency) * par_value\n    \n    # Initialize present value of the coupon payments\n    present_value_coupons = 0\n    \n    # Calculate present value of each coupon payment\n    for period in range(1, maturity * payment_frequency + 1):\n        present_value_coupons += coupon_payment / ((1 + ytm / payment_frequency) ** period)\n    \n    # Calculate present value of the par value\n    present_value_par = par_value / ((1 + ytm / payment_frequency) ** (maturity * payment_frequency))\n    \n    # Value of the bond is the sum of the present value of the coupons and par value\n    value_of_bond = present_value_coupons + present_value_par\n    \n    # return answer\n    return round(value_of_bond, 2)\n\n# Output the result\nprint(solution())\n```\n\nThis function calculates the present value of the future coupon payments and the par value at maturity, discounted back to the present at the given yield to maturity (YTM) rate. It adds up the present values of these cash flows to determine the current bond value, then rounds the calculation to two decimal places before returning the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-910",
        "question": "Michael wishes to assist his buddy James in forecasting the sales volume of his store in January 20X9, so he employs the sales volume data from January 20X6 to December 20X8 as examples to construct a log-linear trend model, achieving the result: Ln( ŷt ) =2.3748+0.0912t. What is the forecasted sales volume of James's store in January 20X9?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    intercept = 2.3748\n    slope = 0.0912\n    # January 20X9 means 3 years after January 20X6, so t = 36 (since t is usually in months for this kind of time series model)\n    t_jan_20X9 = 36\n    \n    # Do math calculation to get the log-linear trend forecast\n    log_forecast = intercept + slope * t_jan_20X9\n    forecasted_sales = np.exp(log_forecast)\n    \n    # return the forecasted sales volume\n    return forecasted_sales\n\n# You can execute this function and it will return the forecasted sales value\nforecasted_sales_volume = solution()\nforecasted_sales_volume\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-911",
        "question": "If a Property B has an appraised worth of $36,000,000 with a predicted Year 1 NOI of 900,000, What would be the highest loan amount that Property B could receive if the loan provider is interested in an interest-only loan at 5% mortgage rate, given that the maximum loan to value doesn't exceed 80% and the minimum debt service coverage ratio is no less than 1.2x?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Provided data points\n    appraised_value = 36000000\n    year_1_noi = 900000\n    interest_rate = 0.05\n    max_loan_to_value_ratio = 0.80\n    min_debt_service_coverage_ratio = 1.2\n\n    # Maximum loan based on loan to value ratio\n    max_loan_value_based = appraised_value * max_loan_to_value_ratio\n    \n    # Maximum loan based on debt service coverage ratio\n    annual_debt_service = year_1_noi / min_debt_service_coverage_ratio\n    max_loan_debt_service_based = annual_debt_service / interest_rate\n    \n    # The lesser of the two will be the maximum loan amount allowable\n    max_loan_amount = min(max_loan_value_based, max_loan_debt_service_based)\n    \n    return max_loan_amount\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe function `solution` calculates the highest loan amount that Property B could receive under the given conditions by considering both the loan-to-value ratio and the debt service coverage ratio constraints. It compares the maximum loan amounts allowed by each constraint and returns the lesser value, which is the maximum amount the property could be lent."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-912",
        "question": "XYZ, a wealth management company based in France, is planning to buy CDS on a firm called E to secure its existing portfolio position. The yearly coupon rate for the CDS is 5%, and the term of the CDS agreement is 5 years. The credit spread for firm E stands at 650 bps. Based on the details provided, what is the initial premium as a percent of the notional for the CDS on firm E?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that calculates the initial premium as a percent of the notional for the CDS on firm E:\n\n```python\ndef solution():\n    # Define variables name and value\n    yearly_coupon_rate = 0.05  # 5% is converted to a decimal\n    credit_spread = 650 / 10000 # 650 basis points converted to decimal\n    \n    # The initial premium for the CDS is equivalent to the credit spread\n    initial_premium_percent = credit_spread\n    \n    # return answer\n    return initial_premium_percent\n\n# If the function is called, it will return the value calculated\n# However, you would typically call this function elsewhere to obtain the result\n```\n\nThis simple program assumes that the initial premium for a CDS corresponds to the credit spread. Credit spreads are used as a measure of the annual amount a CDS buyer must pay, so the initial premium for the CDS should match the credit spread. The coupon rate provided does not directly impact the initial premium. However, if the coupon rate were meant to reflect the initial premium, the premium would then be the coupon rate as a percent. But the question specifies that the credit spread is the variable of interest for the CDS initial premium."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-913",
        "question": "A merchant initiates an equity swap with a notional principle of $500,000. He will acquire the return on stock ABC and give the return on Dow Jones Index. At the end of the quarter, if the stock ABC has increased by 5% and the index has risen by 1%, what would be the merchant's payoff?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 500000\n    stock_abc_return = 0.05\n    dow_jones_index_return = 0.01\n    \n    # Do math calculation to get the answer\n    swap_payoff = notional_principal * (stock_abc_return - dow_jones_index_return)\n    \n    # return answer\n    return swap_payoff\n\n# Note: It's important to mention that the actual implementation of equity swaps can be much more complex\n#       and may involve additional terms and considerations not captured in this simple calculation.\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-914",
        "question": "If an individual puts $1000 into an investment now at a 6% interest rate, how much will they make in 10 years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 1000\n    interest_rate = 0.06\n    time_in_years = 10\n    \n    # Calculate the future value of the investment\n    future_value = principal * ((1 + interest_rate) ** time_in_years)\n    \n    # Calculate the total interest earned by subtracting the initial investment from the future value\n    interest_earned = future_value - principal\n    \n    # return answer\n    return interest_earned\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-915",
        "question": "In March 2017, John purchased 500 pen units at a price of $2 each. Then in April 2017, John acquired 600 pen units at a cost of $3 each. Throughout 2017, he made sales of 1000 units at $5 for each unit. Utilizing the Weighted Average method, what will be the cost of goods sold in 2017 for John?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is the Python program that calculates the cost of goods sold for John in 2017 using the Weighted Average method:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_stock = 500 * 2  # 500 pens at $2 each\n    additional_stock = 600 * 3  # 600 pens at $3 each\n    total_units_purchased = 500 + 600\n    total_cost = initial_stock + additional_stock\n    \n    # Calculate the weighted average cost per unit\n    weighted_average_cost_per_unit = total_cost / total_units_purchased\n    \n    # Calculate the cost of goods sold for 1000 units sold\n    cost_of_goods_sold = 1000 * weighted_average_cost_per_unit\n    \n    # return answer\n    return cost_of_goods_sold\n    \n# This will run the solution and print the answer\nprint(solution())\n```\n\nThis program defines the initial and additional stock values based on the number of units purchased and their respective prices. It then calculates the weighted average cost per unit and uses this to compute the cost of goods sold for the 1000 units that were sold. The result is then returned when the solution function is called. The print statement at the end is provided to display the output of the function when the program is run."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-916",
        "question": "XYZ Inc. is a global company that adheres to IFRS and uses RMB as the currency for reporting. XYZ owns a subsidiary named QRS, located in the US and uses the US dollar (USD) as its operational currency. QRS's revenue for 2017 is USD90 million. What amount should XYZ Inc. report as its December 31, 2017 revenue from QRS?",
        "tables": [
            "| Date | Spot Exchange Rate (USD/RMB) | CPI |\n| --- | --- | --- |\n| 31 Dec 2015 | 6.2 | 100 |\n| 31 Dec 2016 | 8.6 | 130 |\n| 31 Dec 2017 | 17.3 | 200 |\n| Average 2017 | 15.2 | 165 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_exchange_rate_end_2017 = 17.3  # Exchange rate at 31 Dec 2017 (USD/RMB)\n    qrs_revenue_2017_usd = 90e6         # QRS's revenue for 2017 in USD\n\n    # Do math calculation to get the answer\n    # Convert the QRS's revenue from USD to RMB using the spot exchange rate\n    qrs_revenue_2017_rmb = qrs_revenue_2017_usd * spot_exchange_rate_end_2017\n    \n    # Return answer (converted revenue)\n    return qrs_revenue_2017_rmb\n\n# Calling the solution function and printing the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-917",
        "question": "Assuming a continuous compound interest rate of 2.5%, how much will John receive after 5 years from his $1million investment?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define variables name and value\n    principal = 1000000 # initial investment amount\n    rate = 0.025        # Continuous compound interest rate\n    time = 5            # Time period in years\n    \n    # Do math calculation to get the answer\n    final_amount = principal * math.exp(rate * time)\n    \n    # return answer\n    return final_amount\n\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-918",
        "question": "Based on the information given in Exhibit 2, what is the GDP growth rate in Country A using the Solow growth accounting equation, which is the preferred method of calculation by Thompson?",
        "tables": [
            "| country  | Inflation rate (%) | Growth in total factor productivity (%) | Output elasticity of capital | Growth rate of capital (%) | Growth rate of labor (%) |\n|----------|----------------|---------------------------------------|-----------------------------|----------------------------|--------------------------|\n| Country A | 1.7              | 1.5                                                 | 0.3                                           | 3.2                                   | 0.4                                     |\n| Country B | 1.8              | 1.3                                                 | 0.4                                           | 3.7                                   | 0.5                                     |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the GDP growth rate for Country A using the Solow growth accounting equation, we will need to follow this equation:\n\nGDP Growth Rate = Growth in Total Factor Productivity (TFP) + (Output Elasticity of Capital * Growth rate of capital) + ((1 - Output Elasticity of Capital) * Growth rate of labor)\n\nNow let's define the values given for Country A and calculate the GDP growth rate using the formula above.\n\n```python\ndef solution():\n    # Define variables name and value\n    growth_tfp = 1.5\n    output_elasticity_capital = 0.3\n    growth_rate_capital = 3.2\n    growth_rate_labor = 0.4\n\n    # Do math calculation to get the answer\n    gdp_growth_rate = (growth_tfp + \n                       (output_elasticity_capital * growth_rate_capital) + \n                       ((1 - output_elasticity_capital) * growth_rate_labor))\n    \n    # return answer\n    return gdp_growth_rate\n\n# Call the function and print out the result\nprint(solution())\n```\nThis program will calculate and print the GDP growth rate for Country A as requested."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-919",
        "question": "At the onset of 2017, Corporation Beta had a retained earnings amount of $800. The company's anticipated net income for the entire year falls around $150, and they're planning to distribute a dividend of $200 to the shareholders. What amount of retained earnings will Corporation Beta have by the end of 2017?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_retained_earnings = 800\n    net_income = 150\n    dividends_paid = 200\n    \n    # Do math calculation to get the answer\n    # Retained Earnings at the end of the year would equal initial Retained Earnings plus Net Income minus Dividends Paid\n    end_retained_earnings = initial_retained_earnings + net_income - dividends_paid\n    \n    # return answer\n    return end_retained_earnings\n\n# Uncomment the line below to test the function\n# print(solution())\n```\n\nThis Python program calculates the amount of retained earnings that Corporation Beta will have by the end of 2017 by starting with the initial retained earnings amount, adding the net income, and then subtracting any dividends that are paid out to shareholders."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-920",
        "question": "What is the sector's concentration ratio for four companies, based on the market share data collected by the analyst for a particular industry?",
        "tables": [
            "| Company   | Sales(in millions of) |\n|-----------|----------------------|\n| ABC       | 300                  |\n| Brown     | 250                  |\n| Coral     | 200                  |\n| Delta     | 150                  |\n| Erie      | 100                  |\n| All others| 50                   |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_sector_sales = 300 + 250 + 200 + 150 + 100 + 50\n    top_four_company_sales = 300 + 250 + 200 + 150\n\n    # Calculate market share of top four companies\n    concentration_ratio = (top_four_company_sales / total_sector_sales) * 100\n\n    # Return answer\n    return concentration_ratio\n\n# You can test the function with the following line\n# print(solution()) # Uncomment this line to test\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-921",
        "question": "An investment fund implements the succeeding payment structure: Yearly administrative fee based on year-end AUM: 2% Incentive fee: 20% Initial requirement rate before incentive fee starts: 4% Present top earning point: $610 million. The fund starts off the year with a value of $580 million and after one year, it ends with a value of $650 million before the fees are considered. What is the annual net percentage return to a shareholder for this year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beginning_value = 580e6  # $580 million\n    ending_value = 650e6    # $650 million\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.04\n    \n    # Calculate total growth\n    total_growth = ending_value - beginning_value\n    \n    # Calculate management fee\n    management_fee = ending_value * management_fee_rate\n    \n    # Calculate incentive fee if applicable\n    incentive_fee = 0\n    if total_growth > beginning_value * hurdle_rate:\n        incentive_fee = (total_growth - beginning_value * hurdle_rate) * incentive_fee_rate\n    \n    # Calculate ending value after fees\n    net_ending_value = ending_value - management_fee - incentive_fee\n    \n    # Calculate the net percentage return\n    net_return_percentage = ((net_ending_value - beginning_value) / beginning_value) * 100\n    \n    # Return answer\n    return net_return_percentage\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines variables for the beginning and ending fund values, the management fee rate, the incentive fee rate, and the hurdle rate. It calculates the total growth of the fund's value, the management fee, and the incentive fee if the growth exceeds the hurdle rate. Then it calculates the net ending value of the fund after fees and the net percentage return to a shareholder. Finally, the solution function is called, and the net percentage return is printed."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-922",
        "question": "In 2009, which was its inaugural year of operations, GameSquare recorded certain data concerning the sale of its products. Under the accrual basis of accounting, how much net revenue would appear on GameSquare's 2009 income statement?",
        "tables": [
            "| Revenue | $1,000,000 |\n|---------|------------|\n| Returns of goods sold | $100,000 |\n| Cash collected | $800,000 |\n| Cost of goods sold | $700,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 1000000\n    returns_of_goods_sold = 100000\n    \n    # Do math calculation to get the answer\n    net_revenue = total_revenue - returns_of_goods_sold\n    \n    # return answer\n    return net_revenue\n\n# You can call the function and print the result if you want to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-923",
        "question": "A financial advisor was requested to look for opportunities for arbitrage in the market of Treasury bonds through a comparison of the cash flows from some selected bonds and the cash flows of other bond combinations. If the price of a 1-year zero-coupon bond is USD 97 and a 1-year bond with a 7% coupon and payments every six months comes at USD 102, using a duplication method, what would be the cost of a 1-year Treasury bond with a 6% coupon that has semi-annual payments?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To solve this problem, we will use the principle of no-arbitrage to find the price of the 6% semi-annual coupon bond by duplicating its cash flows using the other two bonds. Here's how we'll do it:\n\n- The 7% coupon bond pays 3.5% every six months.\n- The 6% coupon bond we want to price pays 3% every six months.\n\nFor every 1 (100%) of the 6% bond we want to replicate, we would need to combine the following:\n\n- \\( \\frac{3}{3.5} \\) of the 7% semi-annual coupon bond to get the same semi-annual payment as the 6% coupon bond. This gives us the coupon payment match.\n\n- Enough of the 1-year zero-coupon bond such that the total redemption value is 100%.\n\nSo for the coupon payment part, we need \\( \\frac{3}{3.5} \\) of the 7% semi-annual coupon bond which costs \\( \\frac{3}{3.5} \\times 102 \\).\n\nFor the redemption value match, we need the rest of the redemption value to add up to 100 from the zero-coupon bond. Since the zero-coupon bond will be redeemed at 100, we need \\( 100 - \\frac{3}{3.5} \\) in face value of the zero-coupon bond. The cost of this part is \n\\( (100 - \\frac{3}{3.5}) \\times \\frac{97}{100} \\).\n\nNow let's write the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    zero_coupon_price = 97\n    semi_annual_7_bond_price = 102\n    semi_annual_6_bond_coupon_rate = 3 # 6% per year, so 3% per six months\n\n    # The fraction of the 7% semi-annual coupon bond needed\n    fraction_of_semi_annual_7 = semi_annual_6_bond_coupon_rate / 3.5\n\n    # The cost for the coupon part from the 7% bond\n    cost_for_coupon_part = fraction_of_semi_annual_7 * semi_annual_7_bond_price\n\n    # The value needed from the zero-coupon bond to reach the face value at redemption\n    face_value_needed = 100 - (fraction_of_semi_annual_7 * 100)\n\n    # The cost for the redemption value part from the zero-coupon bond\n    cost_for_redemption_part = face_value_needed * (zero_coupon_price / 100)\n\n    # The total cost of the 6% coupon bond\n    six_percent_bond_cost = cost_for_coupon_part + cost_for_redemption_part\n    \n    # return answer\n    return six_percent_bond_cost\n    \n# Now let's call the function and print the result for verification\nprint(solution())  # This is optional, for verification purposes only\n```\n\nIn this code, `solution()` will return the estimated cost of the 1-year Treasury bond with a 6% coupon that has semi-annual payments based on the principle of no-arbitrage."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-924",
        "question": "A researcher collects the subsequent details (in $ millions) regarding a private investment fund: The supervisor's reward fee is 20% of the earnings. If there is no clawback clause applicable, the total reward fee (in $ millions) under a U.S.-style waterfall is:",
        "tables": [
            "|                | Investment A | Investment B | Total |\n|----------------|--------------|--------------|-------|\n| Initial cost   | 100          | 150          | 250   |\n| Profit/loss    | -50          | 30           | -20   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    profit_loss_A = -50\n    profit_loss_B = 30\n    total_profit_loss = profit_loss_A + profit_loss_B\n\n    # Supervisor's reward fee\n    reward_fee_percentage = 0.20\n    # In a U.S. style waterfall, losses are not accounted for when calculating rewards\n    # Hence, only positive profits are considered\n    positive_profit = max(profit_loss_A, 0) + max(profit_loss_B, 0)\n\n    # Calculate the total reward fee\n    total_reward_fee = reward_fee_percentage * positive_profit\n\n    # return answer\n    return total_reward_fee\n\n# If we want to use the function and print out the answer\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-925",
        "question": "If the stated price of an option is $1.25, what is the value of a single option contract?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Here is the Python program that calculates the value of a single option contract:\n\n```python\ndef solution():\n    # Define variables name and value\n    option_price_per_share = 1.25\n    shares_per_contract = 100  # Each standard option contract represents 100 shares of the underlying stock\n    \n    # Do math calculation to get the answer\n    value_of_single_contract = option_price_per_share * shares_per_contract\n    \n    # return answer\n    return value_of_single_contract\n    \n# call the function and print the answer\nprint(solution())\n```\n\nWhen you run this program, it will calculate the value of a single option contract based on the stated price of $1.25 per option."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-926",
        "question": "What is the yearly yield-to-maturity, noted with a 12 period frequency, for a 4-year, zero coupon bond priced at 75% of par value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To calculate the yield-to-maturity (YTM) on the given zero-coupon bond, we will use the following formula:\n\n\\[\nYTM = \\left( \\left( \\frac{Face \\ Value}{Current \\ Price} \\right) ^ \\frac{1}{n} - 1 \\right) \\times  m\n\\]\n\nwhere:\n- Face Value is the par value of the bond, which we'll assume to be 100% or simply 1 since it's a percentage (par value is typically $1,000, but we're using a percentage for simplicity).\n- Current Price is the purchase price of the bond, which is given as 75% or 0.75.\n- n is the number of years until maturity, which is 4 years.\n- m is the number of periods per year, which is 12 in this case, as stated in the problem that we are to provide a yield with 12 period frequency.\n\nHere is the Python code for the calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1  # Par value at 100%\n    current_price = 0.75  # 75% of par value\n    years_to_maturity = 4\n    periods_per_year = 12  # frequency\n    \n    # Do math calculation to get the answer\n    ytm_per_period = ((face_value / current_price) ** (1/years_to_maturity) - 1)\n    ytm_annualized = ytm_per_period * periods_per_year\n\n    # return answer\n    return ytm_annualized\n    \n# This will print the answer to standard output\nprint(solution())\n```\n\nNote: The output of this code is the solution. If you want to obtain the answer without printing it, you can simply call the solution() function."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-927",
        "question": "The analyst, Jane, performed a straightforward regression that accounted for the changes in electric usage based on temperature fluctuations. The total variation for the dependent variable totaled 132.08, with the explained variation being 60.38. She made 60 observations on a monthly basis. Can you compute the F-statistic to assess the model's fit?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program that computes the F-statistic:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_variation = 132.08\n    explained_variation = 60.38\n    number_of_observations = 60\n    number_of_predictors = 1  # Since no information is given about multiple predictors, we assume one predictor\n    \n    # Do math calculation to get the answer\n    unexplained_variation = total_variation - explained_variation\n    \n    # Calculate Mean Squared Regression (MSR) and Mean Squared Error (MSE)\n    MSR = explained_variation / number_of_predictors\n    MSE = unexplained_variation / (number_of_observations - number_of_predictors - 1)\n    \n    # Calculate F-statistic\n    F_statistic = MSR / MSE\n    \n    # return answer\n    return F_statistic\n\n# Invoke the function and print the answer to verify\nprint(solution())\n```\n\nPlease note that the F-statistic formula is calculated assuming that there is one predictor variable because no specific information about the number of predictors was provided. If there are more predictors, you would change `number_of_predictors` to the appropriate value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-928",
        "question": "A one-year zero-coupon bond has a return of 4.0%. The yields on a two-year and a three-year zero-coupon bond are 5.0% and 6.0% respectively. What would be the forward rate for a loan for two years starting in one year?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Below is a Python program to calculate the forward rate for a loan for two years starting in one year using the given zero-coupon bond yields.\n\n```python\ndef solution():\n    # Define the given annual yield rates\n    one_year_yield = 0.04  # 4.0%\n    two_year_yield = 0.05  # 5.0%\n    three_year_yield = 0.06  # 6.0%\n    \n    # Calculate the present values of the zero-coupon bonds\n    pv_one_year = 1/(1 + one_year_yield)\n    pv_two_year = 1/((1 + two_year_yield)**2)\n    pv_three_year = 1/((1 + three_year_yield)**3)\n    \n    # Calculate the forward rate using the formula:\n    # (1 + forward_rate) = (PV_Future/PV_Start)^(1/n_years) - 1\n    # Where n_years is the duration of the loan, PV_Future is the present value of the bond\n    # at the time the loan ends, and PV_Start is the present value of the bond when the loan starts.\n    forward_rate = ((pv_one_year / pv_three_year)**(1/(3-1)) - 1)\n    \n    # Return the forward rate\n    return forward_rate\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis code snippet defines the bond yields, calculates the present values for the one-, two-, and three-year bonds, and then uses these values to calculate the forward rate using the formula. It finally calls the solution function, calculates, and prints the forward rate rounded for a loan for two years starting in one year based on the yields of zero-coupon bonds."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-929",
        "question": "Four years ago, Mike deposited $2,000 into his savings account for home renovations, it compounded annually at an annual interest rate of 3%. Now, Mike has altered his plan and has decided to leave the money in the bank for an additional five years. What is the current value of Mike's account?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Below is a Python program to calculate the current value of Mike's savings account, considering his initial deposit, the annual interest rate, and the compounding period.\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 2000  # Initial amount deposited\n    annual_interest_rate = 0.03  # Annual interest rate as a decimal\n    time_in_years = 4  # The initial number of years the money was compounded\n    \n    # Do math calculation to get the answer\n    # Calculation for compound interest = P * (1 + r/n)^(nt) where P = principal, r = annual interest rate, n = number of times the interest is compounded per year, t = time in years\n    \n    # Since it is compounded annually, n = 1\n    n = 1\n    \n    # Calculate the account's value after the initial 4 years\n    compounded_amount = principal * (1 + (annual_interest_rate / n))**(n * time_in_years)\n    \n    # return answer\n    return compounded_amount\n    \n# Call solution function and print the answer\nprint(solution())\n```\n\nBy running this function, you will be able to find out the current value of Mike's savings account after the initial four years of compound interest."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-930",
        "question": "What is the actual yield for stocks, as per the historic geometric returns observed by a research analyst?",
        "tables": [
            "| Asset Class     | Geometric Return (%) |\n| --------------- | -------------------- |\n| Equities        | 8.0                  |\n| Corporate Bonds | 6.5                  |\n| Treasury bills  | 2.5                  |\n| Inflation       | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\n# No package import needed\ndef solution():\n    # Define variables name and value\n    equities_geometric_return = 8.0\n    inflation_rate = 2.1\n    \n    # Calculate the actual yield for stocks, adjusting for inflation\n    actual_yield_stocks = equities_geometric_return - inflation_rate\n    \n    # return answer\n    return actual_yield_stocks\n\n# Uncomment the line below to test the function\n# print(solution())\n```\n\nPlease note that the actual yield in this context is simply the nominal yield (geometric return for equities) adjusted for inflation. This might also be referred to as the real yield. The calculation does not account for taxes or any investment fees that might apply."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-931",
        "question": "Assuming quarterly compounding, what is the stated annual interest rate if a financial institution offers an effective annual rate (EAR) of 12%?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is a Python program that calculates the stated annual interest rate with quarterly compounding, given an effective annual rate (EAR) of 12%.\n\n```python\ndef solution():\n    # Define the effective annual rate\n    ear = 0.12\n\n    # The formula to calculate the stated annual interest rate is:\n    # (1 + stated_rate/number_of_compounding_periods)^(number_of_compounding_periods) - 1 = EAR\n    # We need to find the stated_rate for quarterly compounding, so number_of_compounding_periods is 4.\n    \n    # Rearranging the formula to solve for the stated interest rate per period:\n    # stated_rate = (1 + EAR)^(1/number_of_compounding_periods) - 1\n    number_of_compounding_periods = 4\n    stated_rate_per_period = (1 + ear) ** (1/number_of_compounding_periods) - 1\n\n    # To find the stated annual interest rate, multiply the per period rate by the number of periods\n    stated_annual_rate = stated_rate_per_period * number_of_compounding_periods\n    \n    return stated_annual_rate\n\n# Execute the function\nprint(solution())\n```\nThis code defines a function that solves for the stated annual interest rate given an effective annual rate and the number of compounding periods, which is 4 for quarterly compounding. The formula inside the function rearranges the relationship between the effective annual rate and the stated rate to isolate the stated interest rate, and then calculates it. The result is returned by the function and printed out when the function is called."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-932",
        "question": "Johnson collects data on spot rates for on-the-run yearly-coupon government securities and swap spreads, as shown in the Exhibit below. Johnson purchases a four-year, zero-coupon corporate bond and then sells it after two years. Johnson demonstrates the returns from this approach using the swap rate as a substitute for corporate yields. What should Johnson display as a total return?",
        "tables": [
            "|                        | Maturity (Years) |     |     |     |\n|------------------------|------------------|-----|-----|-----|\n|                        | 1                | 2   | 3   | 4   |\n| Government spot rate   | 2.25%            | 2.70% | 3.30% | 4.05% |\n| Swap spread            | 0.25%            | 0.30% | 0.45% | 0.70% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "To solve this problem, we need to first determine the zero-coupon corporate bond's yield to maturity (YTM) as if it were purchased at the 4-year spot rate plus the 4-year swap spread. The swap rate will be used as a proxy for the corporate bond yield, hence to buy a zero-coupon bond, one would pay a present value that is discounted by the yield equal to the government spot rate plus the swap spread.\n\nThe YTM for the zero-coupon bond at the time of purchase (t=0) is the sum of the corresponding government spot rate for 4 years and the 4-year swap spread.\n\n\\[ YTM_{purchase} = SpotRate_{4year} + SwapSpread_{4year} \\]\n\nAfter holding it for two years, we'll need to find the selling price by discounting the face value (which we can assume to be 1 for simplicity) by the 2-year government spot rate plus the 2-year swap spread at the time of sale.\n\n\\[ Price_{sale} = \\frac{FaceValue}{(1 + YTM_{sale})^{2}} \\]\n\nWhere\n\n\\[ YTM_{sale} = SpotRate_{2year} + SwapSpread_{2year} \\]\n\nThe total return can be calculated by looking at the increase in the price of the bond, which will be the selling price over the purchase price (assuming a face value of 1):\n\n\\[ TotalReturn = \\frac{Price_{sale} - Price_{purchase}}{Price_{purchase}} \\times 100\\% \\]\n\nNow let's implement this logic in Python code:\n\n```python\ndef solution():\n    # Define variables name and value for spot rates and swap spreads\n    spot_rates = {'1': 0.0225, '2': 0.0270, '3': 0.0330, '4': 0.0405}\n    swap_spreads = {'1': 0.0025, '2': 0.0030, '3': 0.0045, '4': 0.0070}\n    \n    # Calculate the YTM at the time of purchase for 4 years\n    YTM_purchase = spot_rates['4'] + swap_spreads['4']\n    \n    # Calculate the purchase price of the zero-coupon bond\n    price_purchase = 1 / ((1 + YTM_purchase)**4)\n    \n    # Calculate the YTM at the time of sale for 2 years\n    YTM_sale = spot_rates['2'] + swap_spreads['2']\n    \n    # Calculate the sale price of the zero-coupon bond after 2 years\n    price_sale = 1 / ((1 + YTM_sale)**2)\n    \n    # Calculate the total return\n    total_return = (price_sale - price_purchase) / price_purchase * 100\n    \n    # return answer\n    return total_return\n\n# Call the function and print the result to verify it works correctly \nprint(solution())\n```\n\nPlease note that the variables `spot_rates` and `swap_spreads` represent a dictionary where the key is the year and the value is the corresponding spot rate or swap spread.\n\nWe then calculate the `price_purchase` of the bond at a 4-year YTM and the `price_sale` of the bond at a 2-year YTM when it is sold, finally determining the `total_return` as a percentage. The face value is assumed to be 1 for simplicity. If the bond had a different face value, the `price_purchase` and `price_sale` would need to be adjusted accordingly."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-933",
        "question": "If an investment advisor has a bond position valued at USD 100 million with a modified duration of eight years and a convexity of 150 years, with the term structure being flat, what would be the change in the position's value if interest rates were to rise by 25 basis points?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_value = 100e6  # USD 100 million\n    modified_duration = 8  # years\n    convexity = 150  # years\n    interest_rate_change = 0.0025  # 25 basis points\n\n    # Calculate the percentage change in price due to duration\n    duration_effect = -modified_duration * interest_rate_change\n\n    # Calculate the percentage change in price due to convexity\n    convexity_effect = convexity * 0.5 * interest_rate_change ** 2\n\n    # Calculate the total percentage change in price\n    total_percentage_change = duration_effect + convexity_effect\n\n    # Calculate the change in the bond position's value\n    change_in_value = bond_value * total_percentage_change\n\n    # return answer\n    return change_in_value\n    \n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program calculates the change in the bond position's value when interest rates rise by 25 basis points, incorporating the effects of modified duration and convexity."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-934",
        "question": "The women's apparel producer, Ivory Ensign, recorded a $20 million expense in salaries. The initial balance of payable salaries was at $3 million and eventually ended at $1 million. How much in salaries did the firm distribute in cash?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program that calculates the cash paid for salaries by the firm:\n\n```python\ndef solution():\n    # Define variables name and value\n    salaries_expense = 20000000  # Total salaries expense\n    initial_payable_salaries = 3000000   # Initial balance of payable salaries\n    ending_payable_salaries = 1000000    # Ending balance of payable salaries\n    \n    # Do math calculation to get the answer\n    # Salaries paid in cash = Salaries Expense - Increase in Salaries Payable\n    cash_paid_for_salaries = salaries_expense + (initial_payable_salaries - ending_payable_salaries)\n    \n    # return answer\n    return cash_paid_for_salaries\n\n# Call the function and print the answer\nprint(solution())\n```\n\nTo calculate the cash paid, we start with the salary expense and then adjust for any changes in the salaries payable. Since the payable salaries decreased, we add this decrease to the expense to find out the actual cash paid out."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-935",
        "question": "The annual spot rate r(1) is 5% and the forward price for a one-year zero-coupon bond starting in a year stands at 0.9346. What would be the spot price of a two-year zero-coupon bond?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here is the Python program to calculate the spot price of a two-year zero-coupon bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_spot_rate_r1 = 0.05\n    forward_price_one_year = 0.9346\n    \n    # The spot price of a two year zero coupon bond can be found using the relationship:\n    # Spot Price = Forward Price / (1 + Spot Rate)\n    # The spot price is the present value of the $1 to be received in two years.\n    # However, since we have a forward price for one-year starting in a year,\n    # the present value must take into account this year's spot rate as well as next year's forward rate.\n    # Hence, we need to discount the forward price at the spot rate for one year in order to get the current spot price value for two years.\n    spot_price_two_years = forward_price_one_year / (1 + annual_spot_rate_r1)\n    \n    # return answer\n    return round(spot_price_two_years, 4)\n\n# You can call the function to see the result\nprint(solution())\n```\n\nA call to `solution()` will return the spot price of the two-year zero-coupon bond. Note that the rounding to four decimal places is included to ensure that the answer is in a standardized format which is common in financial calculations."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-936",
        "question": "The possibility of a variable, which follows a normal distribution with an average of 0.9 and a standard deviation of 1.5, being in the range of 0.9 and 1.2 is:",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the probability of a normally distributed variable being within a certain range, we can use the cumulative distribution function (CDF). For a variable \\( X \\) following a normal distribution with mean \\( \\mu \\) and standard deviation \\( \\sigma \\), the probability that \\( X \\) falls between two values \\( a \\) and \\( b \\) is given by \\( P(a < X < b) = \\Phi(\\frac{b-\\mu}{\\sigma}) - \\Phi(\\frac{a-\\mu}{\\sigma}) \\), where \\( \\Phi \\) is the CDF of a standard normal distribution.\n\nHere's a Python function that uses the `scipy.stats` package to calculate this probability:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Given values\n    mean = 0.9\n    std_dev = 1.5\n    lower_bound = 0.9\n    upper_bound = 1.2\n    \n    # Calculate the cumulative probability for the lower and upper bound\n    lower_cumulative_prob = norm.cdf(lower_bound, mean, std_dev)\n    upper_cumulative_prob = norm.cdf(upper_bound, mean, std_dev)\n    \n    # The probability of being between the lower and upper bound\n    probability = upper_cumulative_prob - lower_cumulative_prob\n    \n    # return answer\n    return probability\n\n# Execute the function and print the result\nprint(solution())\n```\n\nTo use this code, you should have the `scipy.stats` module installed in your Python environment. You can install it using pip if it's not already installed:\n\n```bash\npip install scipy\n``` \n\nWhen you run this Python function, it calculates the probability that the variable is between 0.9 and 1.2."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-937",
        "question": "In 2009, Pelican Enterprises reported a net profit of $1,000,000. On the first of January, 2009, there were 1,000,000 shares in circulation. The company issued an additional 100,000 shares at $20 per share on July 1, 2009. Common shareholders received $200,000 in dividends. What is the basic earnings per share for Pelican Enterprises for the year 2009?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_profit = 1000000\n    initial_shares = 1000000\n    new_shares_issued = 100000\n    new_shares_issued_date = '2009-07-01'  # date when new shares were issued\n\n    # Calculate weighted average shares outstanding\n    # I assume a non-leap year\n    days_before_new_shares_issued = 181  # days from Jan 1 to Jun 30 (inclusive)\n    days_after_new_shares_issued = 184   # days from Jul 1 to Dec 31 (inclusive)\n    weighted_average_shares = initial_shares + (new_shares_issued * days_after_new_shares_issued / 365)\n\n    # Calculate basic earnings per share\n    earnings_per_share = net_profit / weighted_average_shares\n\n    # return answer\n    return earnings_per_share\n\n# Call the function and print the answer\nprint(solution())\n```\nWhen you run this Python program, it will calculate the basic earnings per share for Pelican Enterprises for the year 2009 based on the given facts."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-938",
        "question": "A company is planning to acquire 10,000 barrels of West Texas Intermediate Crude Oil and intends to hedge its purchase utilizing the Brent Crude Oil futures contract. Given that the correlation between the spot and futures prices is 0.72 and the annual volatility of the spot price and the Brent Crude Oil futures price are 0.35 and 0.27 respectively, what is the hedge ratio for the company?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    correlation = 0.72\n    volatility_spot = 0.35\n    volatility_futures = 0.27\n    \n    # Do math calculation to get the answer\n    # The hedge ratio is determined using the formula:\n    # Hedge ratio = correlation * (volatility of spot / volatility of futures)\n    hedge_ratio = correlation * (volatility_spot / volatility_futures)\n    \n    # return answer\n    return hedge_ratio\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-939",
        "question": "What is the cost per 100 of face value for a bond offering a 3% annual interest rate that will mature in two years, given a market discount rate of 4%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Certainly! To determine the cost per 100 of face value for the bond with the given parameters, we need to calculate the present values of the interest payments and the repayment of the face value at maturity. Since the bond offers a 3% annual interest rate, this interest amount will be paid annually. Also, since it matures in two years and the market discount rate is 4%, we will discount these future payments using the market discount rate. Here is a Python program that does the calculation:\n\n```python\ndef solution():\n    # Define variables\n    face_value = 100  # assuming the face value is 100 as it's per 100 of face value\n    annual_interest_rate = 0.03  # 3%\n    market_discount_rate = 0.04  # 4%\n    maturity_years = 2\n    \n    # Calculate annual interest payment\n    annual_interest_payment = face_value * annual_interest_rate\n    \n    # Calculate present value of interest payments\n    pv_interest_payments = sum([annual_interest_payment / ((1 + market_discount_rate) ** i) for i in range(1, maturity_years + 1)])\n    \n    # Calculate present value of the face value at maturity\n    pv_face_value_at_maturity = face_value / ((1 + market_discount_rate) ** maturity_years)\n    \n    # Calculate total present value (cost) of the bond\n    total_present_value = pv_interest_payments + pv_face_value_at_maturity\n    \n    # return answer rounded to two decimals\n    return round(total_present_value, 2)\n```\n\nThis program calculates and returns the cost per 100 of face value for the bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-940",
        "question": "Estimate the approximate modified duration of the bond given the details below:",
        "tables": [
            "| coupon | 15% annual-pay coupon |\n| --- | --- |\n| years to maturity | 7 years |\n| current price | trading at par |\n| basis point change in yield | 25 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Modified duration is a measure used to determine the sensitivity of a bond's price to changes in interest rates. To estimate the modified duration, we use the following formula:\n\nModified Duration = Macaulay Duration / (1 + (YTM / Frequency))\n\nWhere:\n- Macaulay Duration is the weighted average time to receive the present values of all the cash flows from the bond.\n- YTM is the yield to maturity.\n- Frequency is the number of coupon payments per year.\n\nSince the bond is trading at par, we can assume that the YTM is equal to the coupon rate for this computation.\n\nFurther, the modified duration can be estimated as:\n\nModified Duration ≈ (Macaulay Duration) / (1 + (YTM / 2))\n\nBut, to simplify the calculation without calculating the exact Macaulay Duration (since the question does not provide enough cash flow details), we will use the following approximation method:\n\nApproximate Modified Duration = (Duration Estimate) / (1 + (YTM / 2))\n\nWhere Duration Estimate = (1 - (1 + YTM) ** (-N)) / YTM, with N representing the number of years to maturity.\n\nFor our case, the YTM is the coupon rate since the bond is trading at par, and the coupons are paid annually, so our frequency will be 1.\n\nLet's generate the Python program to calculate the approximate modified duration of the bond:\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.15  # 15%\n    years_to_maturity = 7\n    frequency = 1 # annual-pay coupon, so frequency is 1\n    \n    # Calculate YTM - For bond trading at par, the coupon rate is the YTM\n    ytm = coupon_rate\n    \n    # Calculate the Duration Estimate\n    duration_estimate = (1 - (1 + ytm) ** -years_to_maturity) / ytm\n    \n    # Calculate the approximate Modified Duration\n    modified_duration = duration_estimate / (1 + (ytm / frequency))\n    \n    # Return the solution\n    return modified_duration\n\n# You can call the function and print the result to test the function\nprint(solution())\n```\nThe `solution()` function should calculate the approximate modified duration. If you want a more accurate answer or if you have more detailed cash flow information, the Macaulay Duration would need to be precisely calculated using the present value of each cash flow. However, for an estimate and given the details you provided, the above program should suffice."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-941",
        "question": "A financier purchases a Treasury bill that matures in one month for $987. When it matures, he receives $1,000. Work out the effective annual rate (EAR) for him.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 987\n    maturity_value = 1000\n    maturity_period_month = 1\n    months_in_a_year = 12\n    \n    # Do math calculation to get the answer\n    interest_earned = maturity_value - purchase_price\n    monthly_rate = interest_earned / purchase_price\n    EAR = (1 + monthly_rate)**months_in_a_year - 1\n    \n    # return answer\n    return EAR\n\n# Calling the function and printing the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-942",
        "question": "Firm B declared COGS of $50 million. Over the year, there was an increase of $8 million in inventory and a decrease of $5 million in accounts payable. What is the total cash the firm paid to its suppliers?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    COGS = 50000000\n    increase_in_inventory = 8000000\n    decrease_in_accounts_payable = 5000000\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = COGS + increase_in_inventory - decrease_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n\n# You could call the function here to test it, e.g. print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-943",
        "question": "In New York, Mia peddles homemade cakes. On a daily basis, she can sell 250 cakes at $10 each. On Mother's Day, she offers a special discount and anticipates a sale of 350 cakes at the discounted rate of $8 per cake. What is the marginal revenue per cake she earns from the special discount?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    normal_price = 10\n    discount_price = 8\n    normal_sales = 250\n    discounted_sales = 350\n    \n    # Do math calculation to get the answer\n    normal_revenue = normal_sales * normal_price\n    discounted_revenue = discounted_sales * discount_price\n    marginal_revenue = discounted_revenue - normal_revenue\n    \n    # The marginal revenue per cake is the additional revenue divided by the additional number of cakes sold\n    marginal_revenue_per_cake = marginal_revenue / (discounted_sales - normal_sales)\n    \n    # return answer\n    return marginal_revenue_per_cake\n\n# Calling the function and printing the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-944",
        "question": "If a bond has an annual coupon rate of 4%, and it pays interest twice a year, and is due in two years. Given a 6% market discount rate, what is the cost of this bond for every 100 of nominal value?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_coupon_rate = 0.04  # Annual coupon rate\n    semi_annual_coupon_rate = annual_coupon_rate / 2  # Semi-annual coupon rate\n    market_discount_rate = 0.06  # Market discount rate\n    semi_annual_market_rate = market_discount_rate / 2  # Semi-annual market discount rate\n    years_to_maturity = 2\n    face_value = 100  # Face value of the bond\n    number_of_payments = years_to_maturity * 2  # Number of semi-annual payments\n    \n    # Calculate the present value of the semi-annual coupon payments\n    coupon_payment = face_value * semi_annual_coupon_rate\n    present_value_of_coupons = sum(coupon_payment / ((1 + semi_annual_market_rate) ** n) for n in range(1, number_of_payments + 1))\n    \n    # Calculate the present value of the face value (to be paid at maturity)\n    present_value_of_face_value = face_value / ((1 + semi_annual_market_rate) ** number_of_payments)\n    \n    # Calculate the total present value of the bond\n    bond_value = present_value_of_coupons + present_value_of_face_value\n    \n    # return answer\n    return bond_value\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will calculate the present value of all future cash flows from the bond (coupon payments and face value at maturity) discounted at the market rate, which is the price an investor would be willing to pay for the bond."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-945",
        "question": "If a portfolio contains two investments, both of equal value, with a VaR of $15 million and $30 million respectively, and if these two investments are perfectly correlated, what would be the calculated VaR of the portfolio?",
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    var1 = 15e6  # VaR of the first investment\n    var2 = 30e6  # VaR of the second investment\n    \n    # Do math calculation to get the answer\n    # If two investments are perfectly correlated, their VaRs would add up\n    portfolio_var = var1 + var2\n    \n    # return answer\n    return portfolio_var\n\n# Function call to check the answer\nprint(solution())\n```\n\nThe `solution()` function calculates the Value at Risk (VaR) of a portfolio with two perfectly correlated investments by summing their individual VaRs. Since both investments' VaRs are positively correlated, the combined VaR is just the sum of the individual VaRs. The function returns the calculated portfolio VaR when called. The `print` function call at the end is used to check the returned value from the solution."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-946",
        "question": "Based on the given information, what is the worth of Asset A utilizing the direct capitalization approach?",
        "tables": [
            "| | | Year 1 | Year 2 | Year 3 | Year 4 |\n|---|---|---|---|---|---|\n| | NOI | $1,100,000 | $1,166,000 | $1,236,000 | $1,310,000 |\n| | | **DCF Assumptions** | | | |\n| | | | Investment Hold Period | | 3 years |\n| | | | Going-in Cap Rate | | 5.00% |\n| | | | Terminal Cap Rate | | 6.00% |\n| | | | Discount Rate | | 7.00% |\n| | | | Income /Value  Growth Rate | | Constant |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Direct capitalization is a real estate valuation method that uses the income approach. \n# In this case, we would typically use the Net Operating Income (NOI) for the first year \n# and divide it by the going-in cap rate to determine the value of the property.\n\ndef solution():\n    # Define variables name and value\n    noi_year1 = 1100000\n    going_in_cap_rate = 0.05  # Convert cap rate to decimal\n    \n    # Do math calculation to get the answer\n    # Value = NOI / Cap Rate\n    value = noi_year1 / going_in_cap_rate\n    \n    # return answer\n    return value\n\n# Execute the function and print the result\nprint(solution())\n```\n\nThis program calculates the worth of Asset A using the direct capitalization approach by taking the Net Operating Income for Year 1 and dividing it by the given going-in capitalization rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-947",
        "question": "A business offers a two-year, non-refundable service agreement for €420. Historically, the business anticipates meeting 25% of service expenses in the first year of the contract, with the rest covered in the second year. How much revenue does the business recognize in the first year? (2020-Mock-C-PM 54)",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_contract_value = 420\n    first_year_expense_percentage = 0.25\n    \n    # Since the revenue is recognized when the service is performed,\n    # in the first year, they recognize the percentage of revenue\n    # that corresponds to the percentage of service expenses covered.\n    first_year_revenue = total_contract_value * first_year_expense_percentage\n    \n    # return answer\n    return first_year_revenue\n    \n# To execute the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-948",
        "question": "If Sarah intends to purchase a property five years from now, anticipated to be worth $250,000 then, how much should she invest currently, given an annual rate of 3% that is compounded monthly?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define variables name and value\n    future_value = 250000\n    rate_of_return = 0.03\n    compound_frequency = 12\n    investment_duration = 5\n    \n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + (rate_of_return / compound_frequency)) ** (compound_frequency * investment_duration))\n    \n    # return answer\n    return round(present_value, 2)\n\n# Uncomment for testing the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-949",
        "question": "A researcher collects the following information for a value-weighted index: What is the return on the value-weighted index for the given period?",
        "tables": [
            "| Security | Beginning of Period: Price(E) | Beginning of Period: Shares | End of Period: Price(€) | End of Period: Shares |\n|----------|-------------------------------|-----------------------------|-------------------------|-----------------------|\n| A        | 20.00                         | 300                         | 22.00                   | 300                   |\n| B        | 50.00                         | 300                         | 48.00                   | 300                   |\n| C        | 26.00                         | 2,000                       | 30.00                   | 2,000                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Security A\n    beginning_price_A = 20.00\n    beginning_shares_A = 300\n    ending_price_A = 22.00\n    # Security B\n    beginning_price_B = 50.00\n    beginning_shares_B = 300\n    ending_price_B = 48.00\n    # Security C\n    beginning_price_C = 26.00\n    beginning_shares_C = 2000\n    ending_price_C = 30.00\n\n    # Calculate total market value at the beginning and end for each security\n    total_market_value_beginning_A = beginning_price_A * beginning_shares_A\n    total_market_value_end_A = ending_price_A * beginning_shares_A\n    \n    total_market_value_beginning_B = beginning_price_B * beginning_shares_B\n    total_market_value_end_B = ending_price_B * beginning_shares_B\n    \n    total_market_value_beginning_C = beginning_price_C * beginning_shares_C\n    total_market_value_end_C = ending_price_C * beginning_shares_C\n\n    # Calculate the total market value at the beginning and the end for the index\n    total_market_value_beginning = (\n        total_market_value_beginning_A +\n        total_market_value_beginning_B +\n        total_market_value_beginning_C\n    )\n\n    total_market_value_end = (\n        total_market_value_end_A +\n        total_market_value_end_B +\n        total_market_value_end_C\n    )\n\n    # Calculate the return on the value-weighted index\n    return_on_index = (total_market_value_end - total_market_value_beginning) / total_market_value_beginning\n    \n    # return answer\n    return return_on_index\n\n# Call the function to get the answer\nprint(solution())  # This print statement is just for checking the output\n```\n\nThe program above calculates the total market value of the index at the beginning and at the end of the period for each security by multiplying the price per share by the number of shares. Afterwards, it sums these totals for all the securities to find the total market value of the index at the beginning and the end. The return on the index is then calculated by subtracting the beginning market value from the ending market value and dividing the result by the beginning market value."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-950",
        "question": "If Corporation X employs the double-declining balance method for amortizing a patent worth $120,000 with a useful lifespan of 4 years, what would be the difference in the net book value at the end of the 3rd year if it switched to the straight-line method?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Variables definition\n    patent_value = 120000\n    lifespan = 4\n    annual_amortization_straight_line = patent_value / lifespan\n\n    # Calculations for double-declining balance method\n    # Year 1\n    amortization_1st_year = (patent_value * 2) / lifespan\n    book_value_end_1st_year = patent_value - amortization_1st_year\n    \n    # Year 2\n    amortization_2nd_year = (book_value_end_1st_year * 2) / lifespan\n    book_value_end_2nd_year = book_value_end_1st_year - amortization_2nd_year\n    \n    # Year 3\n    amortization_3rd_year = (book_value_end_2nd_year * 2) / lifespan\n    book_value_end_3rd_year_double_declining = book_value_end_2nd_year - amortization_3rd_year\n\n    # Calculations for straight-line method\n    # At the end of the third year, 3 years worth of amortization occurred\n    book_value_end_3rd_year_straight_line = patent_value - (annual_amortization_straight_line * 3)\n    \n    # Calculate the difference between the two methods\n    difference = book_value_end_3rd_year_straight_line - book_value_end_3rd_year_double_declining\n    \n    return difference\n\n# Call the function and print the answer\nprint(solution())\n```\n\nThe above program defines the initial value of a patent and calculates its book value at the end of the third year using both the double-declining balance method and the straight-line method. The difference in the net book value between the two methods is then returned as the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-951",
        "question": "A financier from Australia presently possesses an equity portfolio worth A$240 million. Based on his evaluation of the risk and return potential of the Australian economy, he is thinking about reconfiguring his portfolio. A table was generated containing data relevant to the Australian investment markets and the economy: Use the data from the table to determine the historical Australian equity risk premium using the \"equity-vs-bonds\" premium approach.",
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n| ----------------- | ------- | ---------------------------- |\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% |   |\n| Average annual equity return:4.6% | Year-over-year equity return:-9.4% |   |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E:14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% |   | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% |   | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    average_annual_equity_return = 4.6  # percent\n    average_government_bond_yield = 2.8  # percent\n\n    # Calculate the historical Australian equity risk premium\n    equity_risk_premium = average_annual_equity_return - average_government_bond_yield\n    \n    # return answer\n    return equity_risk_premium\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nThis program defines the variables for the average annual equity return and average government bond yield, based on historical data provided in the table. It then calculates the equity risk premium by subtracting the average government bond yield from the average annual equity return."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-952",
        "question": "What is the analyst attempting to calculate the selling price of the intangible asset of corporation TDC based on the data provided?",
        "tables": [
            "| acquisition cost | $500,000 |\n|---|---|\n| accumulated depreciation | $90,000 |\n| loss on the sale | $100,000 |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 500000\n    accumulated_depreciation = 90000\n    loss_on_sale = 100000\n    \n    # Do math calculation to get the selling price\n    selling_price = acquisition_cost - accumulated_depreciation - loss_on_sale\n    \n    # return answer\n    return selling_price\n\n# Calling the function to get the answer\nprint(solution())\n```\n\nThis program calculates and returns the selling price of the intangible asset based on the provided data on acquisition cost, accumulated depreciation, and loss on the sale."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-953",
        "question": "By utilizing the two-stage dividend discount model, John has appraised the worth of Corporation N. The firm has given a dividend of $1 per share in the latest year. In this model, it is forecasted that the dividend will have an annual growth of 10% for the initial three years, then continue to grow at a rate of 5% per year indefinitely. With a required return rate of 10%, what is the present value of Corporation N's stock?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    D0 = 1          # Initial dividend\n    g1 = 0.10       # Growth rate for the initial three years\n    g2 = 0.05       # Growth rate after the initial three years\n    r = 0.10        # Required rate of return\n    \n    # Calculate the projected dividends for the initial three years\n    D1 = D0 * (1 + g1)\n    D2 = D1 * (1 + g1)\n    D3 = D2 * (1 + g1)\n    \n    # Calculate the present value of dividends for the first three years\n    PV1 = D1 / (1 + r)\n    PV2 = D2 / ((1 + r) ** 2)\n    PV3 = D3 / ((1 + r) ** 3)\n    \n    # Calculate the terminal value at the end of year 3\n    D4 = D3 * (1 + g2)\n    TerminalValue = D4 / (r - g2)\n    \n    # Calculate the present value of the terminal value\n    PVT = TerminalValue / ((1 + r) ** 3)\n    \n    # Add up the present value of the dividends and the terminal value for the stock price\n    stock_price = PV1 + PV2 + PV3 + PVT\n    \n    # return answer\n    return stock_price\n\n# Call the function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-954",
        "question": "Given the following spot rates term structure: 1-year at 2.50%, 2-year at 3.00%, 3-year at 3.50%, 4-year at 4.00%, and 5-year at 4.50%, can you calculate the two-year forward rate that begins after three years?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Certainly! To calculate the two-year forward rate that begins after three years, we need to use the spot rates for the 3-year and 5-year terms. The forward rate can be derived using the formula:\n\n(1 + forward_rate)^(forward_term) = (1 + longer_spot_rate)^(longer_term) / (1 + shorter_spot_rate)^(shorter_term)\n\nIn this case:\n\nlonger_term = 5 years\nshorter_term = 3 years\nforward_term = 2 years (since we are looking at the forward rate for 2 years beginning after 3 years)\n\nThus, we need to rearrange the formula for forward_rate:\n\nforward_rate = ((1 + longer_spot_rate)^(longer_term) / (1 + shorter_spot_rate)^(shorter_term))^(1 / forward_term) - 1\n\nSubstituting the provided spot rates into the formula should give us the desired forward rate. Here is the Python program that performs this calculation:\n\n```python\ndef solution():\n    # Define spot rates for respective terms\n    shorter_spot_rate = 0.035  # 3-year spot rate\n    longer_spot_rate = 0.045   # 5-year spot rate\n\n    # Define terms\n    shorter_term = 3\n    longer_term = 5\n    forward_term = 2\n\n    # Calculate the forward rate using the formula\n    forward_rate = (((1 + longer_spot_rate)**longer_term) / ((1 + shorter_spot_rate)**shorter_term))**(1 / forward_term) - 1\n\n    # Convert forward rate to percentage\n    forward_rate_percent = forward_rate * 100\n    \n    # return the two-year forward rate that begins after three years\n    return forward_rate_percent\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you execute this program, it will calculate and return the two-year forward rate that begins after three years."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-955",
        "question": "A researcher ascertains that roughly 99% of the daily sales observations for a firm fall within the $230,000 to $480,000 bracket, with the sales being distributed normally. If about 99% of all observations fit in the μ±3σ range, what is the standard deviation of the corporation's daily sales when using the approximate z-value instead of the accurate table?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program to calculate the standard deviation of the corporation's daily sales using the z-value approximation provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 230000  # Lower boundary of the 99% confidence interval\n    upper_bound = 480000  # Upper boundary of the 99% confidence interval\n    z_value_approx = 3  # Approximate z-value for 99% confidence interval\n    \n    # Do math calculation to get the answer\n    # The mean (μ) is the midpoint between the lower and upper bounds.\n    mean = (lower_bound + upper_bound) / 2\n    \n    # The range of μ±3σ is from the lower bound to the upper bound, so 3σ is half the range.\n    three_sigma = (upper_bound - lower_bound) / 2\n    \n    # Hence, we divide by 3 to find σ (standard deviation)\n    standard_deviation = three_sigma / z_value_approx\n    \n    # return answer\n    return standard_deviation\n\n# call the function and print the answer\nprint(solution())\n```\n\nThis program defines the lower and upper bounds of the daily sales, which encompass 99% of the observations. It then uses these bounds to calculate the mean (μ) and the value of 3σ. Dividing 3σ by the z-value approximation gives us the standard deviation, which is returned as the answer.\n\nRunning this program will print out the standard deviation of the corporation's daily sales."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-956",
        "question": "XYZ corporation rents a machine for its operations for a duration of 6 years with an annual payment of $3000, an 8% interest rate, under an operating lease, what is the present value of the lease payment?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program that uses the present value of an annuity formula to calculate the present value of the lease payments. The formula for the present value of an annuity is:\n\nPV = P * [(1 - (1 + r)^-n) / r]\n\nWhere:\nPV = present value\nP = payment per period (in this case, $3000 annually)\nr = interest rate per period (8% annually)\nn = number of periods (6 years)\n\n```python\ndef solution():\n    # Define variables name and value\n    payment_per_period = 3000\n    interest_rate_per_period = 0.08\n    number_of_periods = 6\n    \n    # Do math calculation to get the answer\n    present_value = payment_per_period * ((1 - (1 + interest_rate_per_period) ** -number_of_periods) / interest_rate_per_period)\n    \n    # return answer\n    return present_value\n\n# This can be used to check the function output\nprint(solution())\n```\n\nThis function will return the present value of the future lease payments made by XYZ corporation for the specified period at the given interest rate."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-957",
        "question": "If in 2016, Serena purchased a machine for $50,000 that has a useful life of ten years and a residual value of $5,000, what would the depreciation of this machine be in 2017 if we use the straight-line method?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Certainly! Below is the Python program to calculate the annual depreciation using the straight-line method.\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 50000\n    salvage_value = 5000\n    useful_life = 10\n    \n    # Do math calculation to get the annual depreciation\n    annual_depreciation = (purchase_price - salvage_value) / useful_life\n    \n    # return answer\n    return annual_depreciation\n\n# Call the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will give you the amount of annual depreciation for the machine in 2017 following the straight-line method."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-958",
        "question": "On the 1st of January, a company releases ten-year bonds with a principal amount of €10,000,000 and with yearly interest payments due every 31st of December. The coupon rate is 2.0 percent, and the effective interest rate is 3.0 percent. By applying the effective interest rate method, what is the amortized discount at the conclusion of the first year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here is a Python program to calculate the amortized discount at the end of the first year using the effective interest method:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal_amount = 10000000\n    coupon_rate = 0.02\n    effective_interest_rate = 0.03\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = principal_amount * coupon_rate\n\n    # Calculate the interest expense based on the effective interest rate\n    interest_expense = principal_amount * effective_interest_rate\n\n    # Calculate the amortized discount for the first year\n    amortized_discount = interest_expense - annual_coupon_payment\n\n    # return answer\n    return amortized_discount\n\n# Call the solution function and print the result\nprint(solution())\n```\nThis program defines the principal amount, coupon rate, and effective interest rate. It then calculates the annual coupon payment and interest expense. The amortized discount is the difference between the interest expense and the annual coupon payment, and it is returned as the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-959",
        "question": "The net income reported by Corporation B was $56 million. Given the subsequent balance sheets (in $millions), what was the known net financing cash flows for 2017? The assumption is that dividends paid are considered as CFF.",
        "tables": [
            "| Balance Sheet Item                          | 12/31/2016 | 12/31/2017 |\n| ------------------------------------------- | ---------- | ---------- |\n| Common stock                                | $50        | $55        |\n| Additional paid-in capital  common stock    | $80        | $100       |\n| Retained earnings                           | $95        | $150       |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Equity components in 2016 and 2017\n    common_stock_2016 = 50\n    common_stock_2017 = 55\n    paid_in_capital_2016 = 80\n    paid_in_capital_2017 = 100\n    retained_earnings_2016 = 95\n    retained_earnings_2017 = 150\n\n    # Net income reported for 2017\n    net_income_2017 = 56\n\n    # Calculate change in each balance sheet equity component\n    change_common_stock = common_stock_2017 - common_stock_2016\n    change_paid_in_capital = paid_in_capital_2017 - paid_in_capital_2016\n    change_retained_earnings = retained_earnings_2017 - retained_earnings_2016\n\n    # Calculate dividends paid\n    dividends_paid = change_retained_earnings - net_income_2017\n\n    # Calculate net financing cash flows (assuming all changes in equity are due to financing activities)\n    net_financing_cash_flows = change_common_stock + change_paid_in_capital - dividends_paid\n    \n    # return answer\n    return net_financing_cash_flows\n\n# Call the function and print the result for verification\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-960",
        "question": "If there is a positive parallel shift in the yield curve of 25 basis points, which of the following answers best estimates the resulting change in the value of Michael’s portfolio which contains a fixed-income position with a market value of USD 70 million, a modified duration of 6.44 years, and yields 6.7% compounded semiannually?",
        "tables": [],
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value = 70000000\n    modified_duration = 6.44\n    yield_change_basis_points = 25\n    \n    # Convert basis points to decimal\n    yield_change_decimal = yield_change_basis_points / 10000\n    \n    # Calculate percentage change in portfolio value\n    percentage_change_value = -modified_duration * yield_change_decimal\n    \n    # Calculate the dollar change in portfolio value\n    change_in_value = market_value * percentage_change_value\n    \n    # return answer\n    return change_in_value\n\n# You can uncomment the following line to test the function\n# print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-961",
        "question": "Assume that the hedge fund known as Global Finance started with an initial capital of $250 million. Global charges a 2% administrative fee based upon assets managed at the close of the year, and a bonus fee of 20% calculated on gains surpassing the 8% mark. The fund's value increased by 16% in its inaugural year. Given that management fees are calculated using end-of-year valuation, what will an investor's net return be, taking into consideration that the performance fee is calculated after the management fee?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's the Python program to calculate the investor's net return:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 250000000\n    management_fee_rate = 0.02\n    performance_fee_rate = 0.20\n    hurdle_rate = 0.08\n    gain_rate = 0.16\n\n    # Calculate end-of-year value before fees\n    end_year_value = initial_capital * (1 + gain_rate)\n\n    # Calculate management fee\n    management_fee = end_year_value * management_fee_rate\n\n    # Calculate new fund value after management fee\n    fund_value_after_management_fee = end_year_value - management_fee\n\n    # Calculate gain for performance fee calculation\n    performance_fee_base = fund_value_after_management_fee - (initial_capital * (1 + hurdle_rate))\n\n    # Apply performance fee only if gain is above the hurdle rate\n    performance_fee = performance_fee_base * performance_fee_rate if performance_fee_base > 0 else 0\n\n    # Calculate net gain after all fees\n    net_gain = fund_value_after_management_fee - performance_fee - initial_capital\n\n    # Calculate net return as a percentage\n    net_return_percentage = net_gain / initial_capital\n\n    # return answer\n    return net_return_percentage\n\n# Example usage:\n# print(solution())\n```\nWhen you call the function `solution()`, it will return the net return percentage. If you want to see the result, you can uncomment the `print(solution())` line and run the code."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-962",
        "question": "Every day, a prominent credit card corporation evaluates 10,000,000 transactions for possible scams. Among these transactions, 0.001% are identified as scam attempts. Should their system detect 90% of all scam transactions, while also erroneously flagging 0.0001% of legitimate transactions, what are the chances that a flagged transaction is actually a scam?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_transactions = 10000000\n    scam_transactions = total_transactions * 0.001 / 100\n    legit_transactions = total_transactions - scam_transactions\n    detection_rate = 0.9\n    false_positive_rate = 0.0001 / 100\n\n    # True Positive: scam transactions caught\n    true_positive = scam_transactions * detection_rate\n    # False Positive: legit transactions wrongly flagged as scam\n    false_positive = legit_transactions * false_positive_rate\n\n    # Probability that a flagged transaction is actually a scam\n    prob_actual_scam = true_positive / (true_positive + false_positive)\n\n    # return answer\n    return prob_actual_scam\n\n# Function call\nprint(solution())\n```\n\nThis program calculates the number of scam and legitimate transactions, the number of correct detections (true positives), the number of false positives (legitimate transactions wrongly flagged), and then uses these numbers to calculate the probability that a flagged transaction is actually a scam."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-963",
        "question": "Assuming a correlation of -0.8 between two securities, what would be the anticipated standard deviation if the two assets are given equal weight, as recently structured by Laurel, a manager at an investment firm?",
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| A | 20 | 16 |\n| B | 20 | 12 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "Here's a Python program that calculates the anticipated standard deviation of a portfolio consisting of two assets with equal weight and a correlation of -0.8:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_A = weight_B = 0.5  # Equal weight for both securities\n    return_A = 0.20  # Expected Annual Return for A\n    return_B = 0.20  # Expected Annual Return for B\n    sd_A = 0.16  # Expected Standard Deviation for A\n    sd_B = 0.12  # Expected Standard Deviation for B\n    correlation_AB = -0.8  # Correlation between security A and B\n    \n    # Do math calculation to get the answer\n    portfolio_variance = (weight_A**2 * sd_A**2) \\\n                         + (weight_B**2 * sd_B**2) \\\n                         + (2 * weight_A * weight_B * correlation_AB * sd_A * sd_B)\n    \n    portfolio_sd = math.sqrt(portfolio_variance)\n    \n    # return answer\n    return portfolio_sd\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program will return the anticipated standard deviation of the portfolio with the given weights and correlation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-964",
        "question": "What is the financial leverage ratio for a business, given the provided selected financial data?",
        "tables": [
            "|                                       | $ Millions |\n|---------------------------------------|------------|\n| Short-term borrowing                  | 4,231      |\n| Current portion of long-term interest-bearing debt |    |\n| Long-term interest-bearing debt       | 925        |\n| Average shareholders' equity          | 18,752     |\n| Average total assets                  | 45,981     |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the financial leverage ratio, we use the formula:\n\nFinancial Leverage Ratio = Average Total Assets / Average Shareholders' Equity\n\nNow let's create the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    average_total_assets = 45981  # $ Millions\n    average_shareholders_equity = 18752  # $ Millions\n\n    # Do math calculation to get the financial leverage ratio\n    financial_leverage_ratio = average_total_assets / average_shareholders_equity\n    \n    # return answer\n    return financial_leverage_ratio\n\n# Example usage\n# print(solution())\n```\nTo execute the program, simply call the `solution()` function. Uncomment the `print(solution())` line at the bottom if you want to directly print the result when the script runs."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-965",
        "question": "The F(18) is supposed to be what, in a continuous uniform distribution defined as U(5, 15)?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here is the Python program to find F(18) in a continuous uniform distribution defined as U(5, 15):\n\n```python\ndef solution():\n    # In a continuous uniform distribution U(a, b), the cumulative distribution function (CDF), F(x), is given by:\n    # F(x) = (x - a) / (b - a) for a <= x <= b\n    \n    # Define the lower and upper bounds of the distribution\n    a = 5\n    b = 15\n    x = 18  # We want to find F(18)\n    \n    # Since 18 is greater than the upper bound (15), in a continuous uniform distribution, F(x) will be 1 beyond the upper bound.\n    # That means the probability of the random variable being less than or equal to any number greater than 15 is 1.\n    # Therefore, F(18), when the distribution is U(5, 15), would simply be 1.\n    F_x = 1\n    \n    # return answer\n    return F_x\n\n# Call the function and print the result\nprint(solution())\n```\n\nPlease note that in this scenario, 18 is outside the range of the uniform distribution defined from 5 to 15. The cumulative distribution function for a value outside of this range is trivial -- it's simply 0 for x < 5 and 1 for x > 15, since the CDF represents the probability that a random variable X will take a value less than or equal to x, and all the probability mass lies between 5 and 15."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-966",
        "question": "According to the given chart and the details about inflation and GDP growth data, what is the yield for Portfolio X and Z, made up of a 55% allocation to portfolio X and a 45% allocation to portfolio Z?",
        "tables": [
            "| Fund | Expected Return | GDP Factor Sensitivity | Inflation Factor Sensitivity |\n|------|-----------------|------------------------|------------------------------|\n| A    | 15%             | 1.2                    | 1                            |\n| B    | 20%             | 2                      | 0.2                          |\n| C    | 10%             | 1.5                    | 0                            |",
            "| Factor     | Forecast | Actual |\n| -----------| ---------| -------|\n| inflation  | 3.5%     | 4.2%   |\n| GDP growth | 6%       | 6.5%   |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "In order to provide an answer to this question, there's missing information about the composition of Portfolio X and Z, including the allocation of funds A, B, and C within these portfolios. Without this information, I can't provide an exact Python program that would calculate the yield for these portfolios.\n\nHowever, I can give you a Python program template that will calculate the yield of a portfolio provided we have the composition details of how much of each fund A, B, and C is included in Portfolios X and Z:\n\n```python\ndef calculate_yield(expected_return, gdp_sensitivity, inflation_sensitivity, actual_gdp, forecast_gdp, actual_inflation, forecast_inflation):\n    # Adjust the expected return based on the sensitivity factors and the actual vs forecast differences\n    adjusted_return = expected_return + (gdp_sensitivity * (actual_gdp - forecast_gdp)) + (inflation_sensitivity * (actual_inflation - forecast_inflation))\n    return adjusted_return\n\ndef calculate_portfolio_yield(allocations, funds_performance):\n    # Calculate the yield for a portfolio based on its allocations and the performance of the funds\n    portfolio_yield = sum(allocations[i] * funds_performance[i] for i in range(len(allocations)))\n    return portfolio_yield\n\ndef solution():\n    # Define variables for expected returns, GDP and inflation factor sensitivities\n    funds = {\n        'A': {'expected_return': 0.15, 'gdp_sensitivity': 1.2, 'inflation_sensitivity': 1},\n        'B': {'expected_return': 0.20, 'gdp_sensitivity': 2, 'inflation_sensitivity': 0.2},\n        'C': {'expected_return': 0.10, 'gdp_sensitivity': 1.5, 'inflation_sensitivity': 0},\n    }\n    \n    # Define variables for actual and forecasted inflation and GDP growth\n    actual_inflation = 0.042\n    forecast_inflation = 0.035\n    actual_gdp = 0.065\n    forecast_gdp = 0.06\n    \n    # Calculate adjusted performance for each fund\n    funds_performance = [calculate_yield(funds[fund]['expected_return'], funds[fund]['gdp_sensitivity'],\n                                         funds[fund]['inflation_sensitivity'], actual_gdp, forecast_gdp,\n                                         actual_inflation, forecast_inflation) for fund in funds]\n    \n    # Define allocations to Portfolio X and Z (This is just an example, actual allocations are needed)\n    allocations_x = [0.5, 0.3, 0.2]  # Example: 50% A, 30% B, 20% C in Portfolio X\n    allocations_z = [0.4, 0.4, 0.2]  # Example: 40% A, 40% B, 20% C in Portfolio Z\n    \n    # Calculate yields for Portfolio X and Z\n    yield_x = calculate_portfolio_yield(allocations_x, funds_performance)\n    yield_z = calculate_portfolio_yield(allocations_z, funds_performance)\n    \n    # Calculate overall yield for the combined Portfolio X and Z\n    overall_yield = 0.55 * yield_x + 0.45 * yield_z\n    \n    return overall_yield\n\n# This function call is for demonstration purposes; actual allocations are required.\nprint(solution())\n```\n\nThis code will not run correctly without the actual allocations to Portfolio X and Z. Once you have the specific allocations of each fund within these portfolios, you can replace the example allocations in `allocations_x` and `allocations_z` with the real ones to calculate the yield."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-967",
        "question": "According to the selected financial data given, what is the cash conversion cycle (in days) of the business?",
        "tables": [
            "| Metric                        |        |\n|-------------------------------|--------|\n| Sales                         | $421,000 |\n| Cost of goods sold (COGS)     | $315,000 |\n| Cash                          | $30,000  |\n| Average accounts receivable   | $40,000  |\n| Average inventories           | $36,000  |\n| Average accounts payable      | $33,000  |"
        ],
        "topic": "Accounting",
        "output": [
            "To calculate the cash conversion cycle (CCC), we need to consider three components: Days Sales Outstanding (DSO), Days Inventory Outstanding (DIO), and Days Payable Outstanding (DPO). The formula for CCC is:\n\n`CCC = DSO + DIO - DPO`\n\nDSO is the average number of days that a company takes to collect payment after a sale has been made, DIO is the average number of days that a company takes to turn its inventory into sales, and DPO is the average number of days it takes a company to pay its invoices from trade creditors.\n\nDSO can be calculated as `(Average Accounts Receivable / Sales) * 365`.\n\nDIO can be calculated as `(Average Inventories / COGS) * 365`.\n\nDPO can be calculated as `(Average Accounts Payable / COGS) * 365`.\n\nNow we can proceed with the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales = 421000\n    cogs = 315000\n    avg_accounts_receivable = 40000\n    avg_inventories = 36000\n    avg_accounts_payable = 33000\n    \n    # Calculate Days Sales Outstanding (DSO)\n    dso = (avg_accounts_receivable / sales) * 365\n    \n    # Calculate Days Inventory Outstanding (DIO)\n    dio = (avg_inventories / cogs) * 365\n    \n    # Calculate Days Payable Outstanding (DPO)\n    dpo = (avg_accounts_payable / cogs) * 365\n    \n    # Calculate Cash Conversion Cycle (CCC)\n    ccc = dso + dio - dpo\n    \n    # Return answer\n    return round(ccc)  # The value is rounded to the nearest integer\n\n# Call the function and print the result\nprint(solution())\n```\nThe returned value should be the cash conversion cycle in days, rounded to the nearest integer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-968",
        "question": "If you have a portfolio made up of five shares, how many distinct covariance terms, without considering variances, are needed to compute the return variance of the portfolio?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To find the number of distinct covariance terms needed to compute the return variance of a portfolio of n assets (in this case, five shares), without considering variances, we use the formula n(n - 1) / 2. Here's the Python code to calculate this:\n\n```python\ndef solution():\n    # Define number of shares\n    num_of_shares = 5\n    \n    # Calculate the number of distinct covariance terms\n    num_covariance_terms = num_of_shares * (num_of_shares - 1) // 2\n    \n    # Return answer\n    return num_covariance_terms\n\n# You can test the function by calling it\n# print(solution()) \n```\n\nWhen you run the `solution()` function, it will calculate and return the number of distinct covariance terms for a portfolio of five shares."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-969",
        "question": "In 2016, Corporation X had a net income of $20,000 and paid out cash dividends of $1,500 to its common shareholders and another $2,000 to preferred shareholders. At the beginning of the year, there were 20,000 shares of common stock. On July 1st, 1,000 additional shares were issued. What is the Basic EPS?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "Here's the Python program for calculating the Basic EPS:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 20000\n    dividends_to_common = 1500\n    dividends_to_preferred = 2000\n    common_shares_beginning = 20000\n    common_shares_issued = 1000\n    # Since shares are issued on July 1st, they count for half of the year\n    time_factor_after_issuance = 0.5\n\n    # Calculating Weighted Average Common Shares\n    weighted_avg_common_shares = common_shares_beginning + (common_shares_issued * time_factor_after_issuance)\n\n    # Calculate earnings available to common shareholders\n    earnings_to_common = net_income - dividends_to_preferred\n\n    # Calculate Basic EPS\n    basic_eps = earnings_to_common / weighted_avg_common_shares\n\n    # return answer\n    return round(basic_eps, 2) # rounding for better presentation\n\n# print the answer\nprint(solution())\n```\n\nWhen executed, the `solution` function will return the Basic EPS for Corporation X. The answer is rounded to two decimal places for better presentation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-970",
        "question": "If the company Atlantic Preserve prepares its financial statements following U.S. GAAP, what is the reported periodic pension cost on the income statement for 2013 (in $ thousands), as Loris has asked Paul to work out using the data in Exhibit 2?",
        "tables": [
            "|                                            |        |\n|--------------------------------------------|--------|\n| **Exhibit 2  Atlantic Preserves, Inc.**                |        |\n| **Selected Information from Note F of the 2013 Annual Financial Statements** |        |\n| **Relating to the Company's Defined Benefit Pension Plan (in $ thousands)**   |        |\n| Start-of-year pension obligation           | 72,544 |\n| Start-of-year plan assets                  | 60,096 |\n| End-of-year pension obligation             | 74,077 |\n| End-of-year plan assets                    | 61,812 |\n| Current service cost                       | 1,151  |\n| Interest cost                              | 5,441  |\n| Actual return on plan assets               | 5,888  |\n| Expected return on plan assets             | 4,597  |\n| Benefits paid to retired employees         | 5,059  |\n| Employer's contributions                   | 887    |\n| Amortization of past service costs         | 272    |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables using the data provided\n    current_service_cost = 1151\n    interest_cost = 5441\n    actual_return_on_plan_assets = 5888\n    expected_return_on_plan_assets = 4597\n    amortization_of_past_service_costs = 272\n\n    # Calculate periodic pension cost using U.S. GAAP\n    # Periodic Pension Cost = Current Service Cost + Interest Cost - Expected Return on Plan Assets + Amortization of Past Service Costs\n    periodic_pension_cost = current_service_cost + interest_cost - expected_return_on_plan_assets + amortization_of_past_service_costs\n    \n    # return answer\n    return periodic_pension_cost\n\n# Invoke the function and print the result\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the reported periodic pension cost on the income statement for 2013 according to U.S. GAAP, and then returns the answer."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-971",
        "question": "In the latest fiscal report, the depreciation expense for Smiths Ltd. stands at £20,000. Given the company's general information, what is the presumed residual useful life of the factory and machinery?",
        "tables": [
            "|           | Gross plant and equipments | Accumulated depreciation |\n|-----------|---------------------------|-------------------------|\n| Last year | £460,000                  | £110,000                |\n| This year | £500,000                  | £120,000                |"
        ],
        "topic": "Accounting",
        "output": [
            "Here is the Python program to calculate the presumed residual useful life of the factory and machinery for Smiths Ltd.\n\n```python\ndef solution():\n    # Define variables name and value\n    last_year_accumulated_depreciation = 110000\n    this_year_accumulated_depreciation = 120000\n    depreciation_expense = 20000\n    \n    # Do math calculation to get the answer\n    # Calculate the net increase in accumulated depreciation\n    net_increase_in_accumulated_depreciation = this_year_accumulated_depreciation - last_year_accumulated_depreciation\n    \n    # Calculate the presumed remaining useful life\n    # The net increase should equal the annual depreciation expense\n    if net_increase_in_accumulated_depreciation == depreciation_expense:\n        # Gather the currently registered accumulated depreciation\n        current_accumulated_depreciation = this_year_accumulated_depreciation\n        # Assuming linear depreciation, the remaining life is defined by how many times the annual depreciation fits into the current accumulated depreciation\n        presumed_residual_useful_life = current_accumulated_depreciation / depreciation_expense\n    else:\n        # If there is an anomaly (which should not happen with the given information), presumed useful life cannot be determined\n        return \"Data discrepancy detected; unable to compute presumed residual useful life.\"\n    \n    # return answer\n    return presumed_residual_useful_life\n\n# Call function and print answer\nprint(solution())\n```\n\nThis program starts by defining the known variables, specifically the accumulated depreciation for the last year and this year, and the annual depreciation expense. It calculates the net increase in accumulated depreciation to affirm it matches the annual depreciation expense, which it should in a linear depreciation scenario. Subsequently, it figures out how many years it would take for the accumulated depreciation to equal the current level at the annual pace, which gives us the presumed residual useful life. If there is any inconsistency between the net increase and the annual expense, the program notifies about the data discrepancy."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-972",
        "question": "In nation Y, the odds of a letter sent via the mail service getting to its intended destination are 2/3. Suppose that each mail delivery is not influenced by any other, and if a girlfriend gets a letter from her boyfriend, she will definitely send a reply to him. Imagine a guy in nation Y mails a letter to his girlfriend (also in nation Y) using the mail service. Assuming the guy doesn't get a return letter from his girlfriend, what are the chances that his girlfriend received his letter?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Probability a letter sent is received: P(Received) = 2/3\n    # Probability a letter sent is not received: P(Not_Received) = 1 - P(Received)\n    # Probability a reply is not received: P(No_Reply)\n    # Using Bayes' theorem: P(Received | No_Reply) = P(No_Reply | Received) * P(Received) / P(No_Reply)\n    # Since a reply is always sent if the letter is received, P(No_Reply | Received) = P(Not_Received)\n    \n    P_Received = 2/3\n    P_Not_Received = 1 - P_Received\n    P_No_Reply = P_Not_Received  # Since reply is certain if the letter is received\n    \n    # Calculate the conditional probability that the letter was received given no reply was received\n    P_Received_No_Reply = P_Not_Received * P_Received / P_No_Reply\n    \n    # return answer\n    return P_Received_No_Reply\n    \n# Test the solution function\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-973",
        "question": "Under IFRS, the impairment loss for a machine from company TDC is listed as follows:",
        "tables": [
            "|                   |         |\n|-------------------|---------|\n| Fair value        | $500,000|\n| Costs to sell     | $90,000 |\n| Value in use      | $460,000|\n| Net carrying amount | $600,000|"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fair_value = 500000\n    costs_to_sell = 90000\n    value_in_use = 460000\n    net_carrying_amount = 600000\n    \n    # Calculate recoverable amount\n    recoverable_amount = max(fair_value - costs_to_sell, value_in_use)\n    \n    # Do math calculation to get the answer\n    impairment_loss = net_carrying_amount - recoverable_amount\n    \n    # return answer\n    return impairment_loss\n\n# Use the function to get the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-974",
        "question": "If the market discount rate is 5%, what is the variance in the pricing for two bonds per 100 of face value that pay out interest every year?",
        "tables": [
            "| Bond | A   | B   |\n|------|-----|-----|\n| Number of periods to maturity | 4 years | 4 years |\n| Coupon rate | 6% | 9% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\ndef present_value_of_bond(face_value, coupon_rate, market_rate, periods):\n    # Calculate the present value of the annuity (coupon payments)\n    annuity_pv = (coupon_rate * face_value) * (1 - (1 + market_rate) ** -periods) / market_rate\n    # Calculate the present value of the face value (lump-sum payment at maturity)\n    face_value_pv = face_value / ((1 + market_rate) ** periods)\n    # Sum the present value of the annuity and the face value to get total present value of the bond\n    return annuity_pv + face_value_pv\n\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate_A = 0.06\n    coupon_rate_B = 0.09\n    market_rate = 0.05\n    periods = 4\n\n    # Calculate the price of bond A and bond B using the present value of a bond formula\n    price_A = present_value_of_bond(face_value, coupon_rate_A, market_rate, periods)\n    price_B = present_value_of_bond(face_value, coupon_rate_B, market_rate, periods)\n\n    # Calculate the variance in pricing between the two bonds\n    prices = [price_A, price_B]\n    mean_price = sum(prices) / len(prices)\n    variance = sum((x - mean_price) ** 2 for x in prices) / len(prices)\n    \n    # return answer\n    return variance\n\n# Call the function to get the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-975",
        "question": "ABC has a three-year floating rate loan. To hedge the risk of increasing interest rates, the organization is considering entering into an interest rate swap. The notional principle of the floating loan is $5 million, the rate is Libor+1%. The swap's fixed rate is 5% and the floating rate is Libor, with payments made every six months. The notional principle of the swap is also $5 million. What is the first net interest payment?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 5000000  # Notional principal of the loan and swap\n    fixed_rate = 0.05  # Fixed rate of the swap\n    libor_rate = 0.01  # Initial Libor rate for this example (as the exact current Libor rate is not provided)\n    loan_interest_rate = libor_rate + 0.01  # Loan interest rate is Libor + 1%\n    payment_frequency = 2  # Payments made semi-annually\n\n    # Calculate the interest payment for the fixed rate of the swap\n    fixed_interest_payment = (notional_principal * fixed_rate) / payment_frequency\n\n    # Calculate the interest payment for the floating rate of the loan\n    floating_interest_payment = (notional_principal * loan_interest_rate) / payment_frequency\n\n    # Net interest payment is the difference between the fixed and floating payments\n    net_interest_payment = fixed_interest_payment - floating_interest_payment\n    \n    # return answer\n    return net_interest_payment\n\n# Call the function and print the result\nprint(f\"The first net interest payment is: ${solution():.2f}\")\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-976",
        "question": "In 2017, the net sales of the XYZ corporation were $300,000. Given that accounts receivable fell by $56,000 and accounts payable rose by $9,000, and that the inventory increased by $20,000, what were their cash collections?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales = 300000\n    decrease_in_accounts_receivable = 56000\n    # Note: Increases in accounts payable and inventory are not directly related to cash collections from sales\n    \n    # Do math calculation to get the answer\n    # Cash collections is net sales plus the decrease in accounts receivable (since a decrease in AR means cash was received)\n    cash_collections = net_sales + decrease_in_accounts_receivable\n    \n    # return answer\n    return cash_collections\n\n# Function call to check the result\nprint(solution())\n``` \n\nThis program defines the variables for net sales and the decrease in accounts receivable, which are directly related to cash collections. Increases in accounts payable and inventory are not typically considered in computing cash collections from customers. The program calculates cash collections by adding the decrease in accounts receivable to the net sales, as this decrease signifies that cash has been received from customers. Finally, it returns the result."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-977",
        "question": "Jane Smith is interested in taking a loan of $40,000 to purchase a vehicle with no down payments. She's expected to make even payments at the end of each month for the coming 3 years. If her monthly payment is $1,350, what is the principal portion of her second installment?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "To compute the principal portion of Jane Smith's second installment, we need to calculate the interest for the first month and subtract it from the first monthly payment to find the principal paid in the first month. Then, we'll deduct the principal of the first month from the total loan to find the new balance, calculate the interest for the second month on the new balance, and subtract it from the second monthly payment to determine the principal portion of the second installment.\n\nHere's the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 40000\n    annual_interest_rate = 0.05  # This is an assumption as the interest rate is not provided in the problem\n    monthly_interest_rate = annual_interest_rate / 12\n    monthly_payment = 1350\n\n    # Calculate interest and principal for the first month\n    first_month_interest = loan_amount * monthly_interest_rate\n    first_month_principal = monthly_payment - first_month_interest\n    \n    # Calculate remaining balance after the first month\n    remaining_balance = loan_amount - first_month_principal\n\n    # Calculate interest and principal for the second month\n    second_month_interest = remaining_balance * monthly_interest_rate\n    second_month_principal = monthly_payment - second_month_interest\n    \n    # return answer\n    return second_month_principal\n    \n# Since we assumed the annual interest rate, let's run the function to get the principal for the second installment\nprint(solution())\n```\n\nNote that in the real world, the interest rate would be provided in the loan agreement. To obtain an accurate answer, you would need to know the specific interest rate associated with Jane's loan. Here, I've assumed an annual interest rate of 5% as an example; the actual rate may differ."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-978",
        "question": "Given the data provided, what is the standard error of the mean sample?",
        "tables": [
            "| Sample mean | 15% |\n|-------------|-----|\n| Sample size | 90  |\n| Population variance | 128 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needs\nimport math\n\ndef solution():\n    # Define variables name and value\n    population_variance = 128\n    sample_size = 90\n    \n    # Do math calculation to get the standard error\n    standard_error = math.sqrt(population_variance / sample_size)\n    \n    # return answer\n    return standard_error\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-979",
        "question": "What is the highest possible value for Qy, considering the inverse demand function Py = 13 – 3.7Q where Py equals the price per unit for good Y and Qy is the quantity demanded of good Y?",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "Given the inverse demand function `Py = 13 – 3.7Qy`, where `Py` is the price per unit and `Qy` is the quantity demanded, the highest possible value for `Qy` occurs when the price `Py` can no longer be positive, essentially when `Py` is zero. To find this, we can set the inverse demand function equal to zero and solve for `Qy`.\n\nHere's the Python program that calculates this value:\n\n```python\ndef solution():\n    # Define the intercept and slope of the demand function\n    price_intercept = 13\n    price_slope = 3.7\n    \n    # Calculate the highest possible value for Qy when Py is zero\n    highest_Qy = price_intercept / price_slope\n    \n    # return answer\n    return highest_Qy\n\n# You can print the result by:\nprint(solution())\n```\nThis Python program returns the maximum possible quantity demanded, `Qy`, where the price `Py` will be zero."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-980",
        "question": "In reference to Exhibit 1: Common-Size Balance Sheets for Corporation X, Corporation Y, and Sector Average, what is the financial leverage ratio for Corporation Y?",
        "tables": [
            "| Assets                                         |   |   |   |   |\n|------------------------------------------------|---|---|---|---|\n| Current assets                                 |   |   |   |   |\n| Cash and cash equivalents 0                    | 5 | 7 |   |   |\n| Marketable securities 5                        | 0 | 2 |   |   |\n| Accounts receivable, net 5                     | 15|12 |   |   |\n| Inventories 15                                 | 20|16 |   |   |\n| Prepaid expenses 5                             | 15|11 |   |   |\n| Total current assets 35                        | 55|48 |   |   |\n| Property, plant,and equipment, net 40          | 35|37 |   |   |\n| Goodwill 25                                    |  0| 8 |   |   |\n| Other assets 0                                 | 10| 7 |   |   |\n| Total assets 100                               |100|100|   |   |\n| Liabilities and Shareholders' Equity           |   |   |   |   |\n|                                                |   |   |   |   |\n| Accounts payable, Short-term debt              |10 & 10, 25 & 10 & 15| | | |\n| Accrued expenses                               |   |0, 5, 3      |   |   |\n| Total current liabilities                      |   |35, 25, 28   |   |   |\n| Long-term debt                                 |   |45, 20, 28   |   |   |\n| Other non-current liabilities                  |   |0, 10, 7     |   |   |\n| Total liabilities                              |   |80, 55, 63   |   |   |\n| Total shareholders' equity, total liabilities and shareholders' equity | |20 & 45 & 37, 100 & 100 & 100 | | |"
        ],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_y = 100\n    total_shareholders_equity_y = 45\n    \n    # Calculate financial leverage ratio\n    leverage_ratio_y = total_assets_y / total_shareholders_equity_y\n    \n    # return answer\n    return leverage_ratio_y\n\n# Call function and print the result for verification\nprint(solution())\n```\n\nThe financial leverage ratio is calculated as Total Assets / Total Shareholders' Equity. For Corporation Y, based on the given information, Total Assets are 100 and Total Shareholders' Equity is 45, so the ratio would be 100 / 45."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-981",
        "question": "A put option from Europe possesses the following traits: S0 = $50; X = $45; r = 5%; T = 1 year; and σ = 25%. Utilizing the BSM formula, could you determine which value is closest to the put's value? Here are some values for reference: N(-0.78644) = 0.2158, N(-0.74644) = 0.2266, N(-0.49644) = 0.3085, N(-0.56644) = 0.2855.",
        "tables": [],
        "topic": "Market Analysis & Economics",
        "output": [
            "To calculate the value of a European put option using the Black-Scholes-Merton (BSM) formula, we first need to determine the d1 and d2 parameters, which are given by:\n\n\\[\nd1 = \\frac{1}{\\sigma\\sqrt{T}} \\left[ \\ln\\left(\\frac{S_0}{X}\\right) + \\left(r + \\frac{\\sigma^2}{2}\\right)T \\right]\n\\]\n\n\\[\nd2 = d1 - \\sigma\\sqrt{T}\n\\]\n\nOnce we have d1 and d2, the value of the put option (P) is given by:\n\n\\[\nP = Xe^{-rT}N(-d2) - S_0N(-d1)\n\\]\n\nwhere:\n- \\( S_0 \\) is the current stock price\n- \\( X \\) is the strike price\n- \\( r \\) is the risk-free interest rate\n- \\( T \\) is the time to expiration\n- \\( \\sigma \\) is the volatility\n- \\( N(\\cdot) \\) is the cumulative distribution function of the standard normal distribution\n\nFor the BSM calculations, we will use the `scipy.stats.norm.cdf` function to calculate the cumulative distribution function of the standard normal distribution for given values of d1 and d2. Given the provided values for \\( N(-0.78644) \\), \\( N(-0.74644) \\), \\( N(-0.49644) \\), and \\( N(-0.56644) \\), we can calculate the value.\n\nHere's the Python function that implements the calculation:\n\n```python\nfrom math import log, sqrt, exp\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    S0 = 50  # Current stock price\n    X = 45   # Strike price\n    r = 0.05 # Risk-free interest rate\n    T = 1    # Time to expiration in years\n    sigma = 0.25 # Volatility\n    \n    # Calculate d1 and d2\n    d1 = (log(S0 / X) + (r + sigma**2 / 2) * T) / (sigma * sqrt(T))\n    d2 = d1 - sigma * sqrt(T)\n    \n    # Values of N(-d1) and N(-d2) according to the question data\n    N_minus_d1 = 0.2855 # Assuming the d1 calculated would have N(-d1) close to 0.2855 based on given values\n    N_minus_d2 = 0.2158 # Assuming the d2 calculated would have N(-d2) close to 0.2158 based on given values\n    \n    # Calculate the put option price using the BSM formula\n    put_price = X * exp(-r * T) * N_minus_d2 - S0 * N_minus_d1\n\n    # return answer, rounded to the closest value as required\n    return round(put_price, 2)\n\n# Call the function to get the answer\nsolution()\n```\n\nPlease note that normally, we would find `N(-d1)` and `N(-d2)` programmatically, but since the question provides specific values, we would choose the closest values from the provided reference to those typically calculated from the actual `d1` and `d2`."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-982",
        "question": "Venture Holdings is a hedge fund that started with $250 million in capital. Venture charges a 2% management fee based on assets managed at the end of the year, and a 20% incentive fee if their returns exceed an 8% benchmark in its first year. Venture experienced a 16% increase in its first year. Let's assume that the management fees are calculated using the end-of-period valuation. What would be the net return for the investor, assuming that the performance fee is calculated after deducting the management fee?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Initial capital\n    initial_capital = 250e6  # $250 million\n    \n    # Management fee rate\n    management_fee_rate = 0.02  # 2%\n    \n    # Incentive fee rate\n    incentive_fee_rate = 0.20  # 20%\n    \n    # Performance threshold\n    performance_threshold = 0.08  # 8%\n    \n    # Actual performance\n    actual_performance = 0.16  # 16%\n    \n    # Calculate end-of-year value before any fees\n    end_of_year_value = initial_capital * (1 + actual_performance)\n    \n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_rate\n    \n    # Calculate net value after management fee\n    net_value_after_management_fee = end_of_year_value - management_fee\n    \n    # Incentive fee only applies to the performance over the 8% threshold\n    incentive_fee = (net_value_after_management_fee - initial_capital * (1 + performance_threshold)) * incentive_fee_rate\n    \n    # Calculate net value after all fees\n    net_value_after_all_fees = net_value_after_management_fee - incentive_fee\n    \n    # Calculate the net return for the investor\n    net_return = (net_value_after_all_fees - initial_capital) / initial_capital\n    \n    return net_return\n\n# Call the function and print the result\nprint(solution())\n```\n\nNote that in the solution above:\n\n- `250e6` represents the initial capital of $250 million.\n- The management fee and incentive fee rates are represented as decimal equivalents of the percentage (e.g., `2%` as `0.02`).\n- The end-of-year value and the fees are calculated based on the given information and the assumption that performance fees are calculated after deducting the management fee.\n- The net return is calculated as the ratio of the net gain (after all fees) to the initial investment."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-983",
        "question": "Assuming Cash flow from investing activities as per U.S. GAAP is:",
        "tables": [
            "|                                   |        |\n|-----------------------------------|--------|\n| Net income                        | $55,000|\n| Depreciation                      | $60,000|\n| Taxes paid                        | $25,000|\n| Interest paid                     | $5,000 |\n| Dividends paid                    | $10,000|\n| Cash received from sale of company building | $40,000|\n| Issuance of preferred stock       | $45,000|\n| Repurchase of common stock        | $20,000|\n| Purchase of machinery             | $20,000|\n| Issuance of bonds                 | $40,000|\n| Debt retired through issuance of common stock | $45,000|\n| Paid off long-term bank borrowings | $15,000|\n| Profit on sale of building        | $15,000|"
        ],
        "topic": "Accounting",
        "output": [
            "Cash flow from investing activities typically includes cash transactions involving the purchase and sale of long-term assets and other investments. According to the table you provided, we have the following relevant activities that would impact investing cash flows according to U.S. GAAP:\n\n- Cash received from the sale of the company building\n- Purchase of machinery\n- Profit on the sale of the building is not an independent cash flow item; it is the income component of the sale of the building already included in the cash received from the sale.\n\nOther items listed such as issuance and repurchase of stocks, issuance of bonds, and retirement of debt, dividends paid, interest paid, and taxes paid are part of financing activities or operating activities, not the investing activities.\n\nHere is a Python program to calculate the cash flow from investing activities:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash_received_sale_company_building = 40000\n    purchase_of_machinery = 20000\n    # profit_on_sale_building = 15000 (this is not directly included in cash flows)\n    \n    # Do math calculation to get the answer\n    # Note: Purchase of machinery is an outflow and thus negative\n    cash_flow_investing_activities = cash_received_sale_company_building - purchase_of_machinery\n    \n    # return answer\n    return cash_flow_investing_activities\n\n# Call the function and print the result for verification\nprint(solution())\n```\n\nWhen you run this program, it will calculate and return the cash flow from investing activities based on the provided data."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-984",
        "question": "A fund manager is evaluating if the 1-year default probability of a longevity bond provided by a life assurance corporation is not related to equity market returns. The fund manager establishes the following probability matrix using 1-year probabilities from the initial investigation: With the data in the table, what is the likelihood that the longevity bond will default in 1 year considering the market declines by 20% over 1 year?",
        "tables": [
            "|    |    | Longevity Bond |   |\n|----|----|---------------|---|\n|    |    | No Default    | Default |\n| Market Returns | 20% Increase | 61% | 1% |\n|                | 20% Decrease | 35% | 3% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # These are the probabilities given for default and no default when market decreases by 20%\n    probability_market_decreases = 0.20\n    probability_default_given_market_decreases = 0.03\n    \n    # Do math calculation to get the answer\n    # The likelihood of default when the market decrease is the joint probability of both events occurring\n    # However, as we are given the conditional probability of default given that the market decreases,\n    # the probability of default is simply the probability of default given that the market decreases\n    probability_default = probability_default_given_market_decreases\n    \n    # return answer\n    return probability_default\n\n# call the function and print the returned value\nprint(solution())\n```\n\nPlease note that the probability that the longevity bond will default considering the market declines by 20% over 1 year is the conditional probability given in the table, which is 3% or 0.03 in decimal form. This needs no additional calculation as the fund manager is not asking for the joint probability of both events occurring but merely the probability of default given the market decline event."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-985",
        "question": "If a population with a variance of 2.45 was used to compute a sample mean and the sample size is 40, what would be the standard error of this sample mean?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    population_variance = 2.45\n    sample_size = 40\n    \n    # Do math calculation to get the answer\n    standard_error = math.sqrt(population_variance / sample_size)\n    \n    # return answer\n    return standard_error\n    \n```\nThis function calculates the standard error of the sample mean based on the given population variance and sample size."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-986",
        "question": "At the start of the year, XY corporation purchased a new mini-computer for $35,000. The computer is predicted to be used for a decade and then resold for $1,000. Using the double-declining-balance method, what is the declared depreciation expense in the third year?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 35000\n    salvage_value = 1000\n    useful_life = 10\n    \n    # Double-declining balance depreciation rate\n    rate = (2 / useful_life)\n    \n    # Calculate the accumulated depreciation for the first two years\n    year_one_depreciation = initial_cost * rate\n    book_value_end_of_year_one = initial_cost - year_one_depreciation\n    \n    year_two_depreciation = book_value_end_of_year_one * rate\n    book_value_end_of_year_two = book_value_end_of_year_one - year_two_depreciation\n    \n    # Now we calculate the depreciation for the third year\n    third_year_depreciation = book_value_end_of_year_two * rate\n    answer = third_year_depreciation\n    \n    # return answer\n    return answer\n\n# Call the function and print the result\nprint(solution())\n```\nThis program defines the initial cost, salvage value, useful life of the asset, and the double-declining balance rate. It then calculates the depreciation expense for the first and second years to find the book value at the end of the second year. Using this book value, it calculates and returns the depreciation expense for the third year."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-987",
        "question": "John is interested in purchasing a 3-year bond that has a coupon rate of 5%, paid yearly. The spot rates are as follows: 1-year spot rate is 4%; 2-year spot rate is 4.5%; 3-year spot rate is 5%. What is the bond's price?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming the face value is $1,000, typical for a bond\n    coupon_rate = 0.05  # Coupon rate of 5%\n    coupon_payment = face_value * coupon_rate  # Yearly coupon payment\n    spot_rates = [0.04, 0.045, 0.05]  # Spot rates for 1-year, 2-year, and 3-year\n    \n    # Calculate the present value of coupon payments and the face value\n    present_value_coupons = sum([coupon_payment / ((1 + spot_rates[i]) ** (i+1)) for i in range(3)])\n    present_value_face_value = face_value / ((1 + spot_rates[-1]) ** 3)\n    \n    # Sum the present values to get the bond's price\n    bond_price = present_value_coupons + present_value_face_value\n    \n    # return answer\n    return round(bond_price, 2)  # Rounding to two decimal places for currency\n\n# Call the function to test\nprint(solution())  # Should output the bond's price\n```\n\nThe program calculates the present value of both the coupon payments and the face value, given the respective spot rates. Then, it sums these present values to get the bond's price. The rounding is to ensure the bond's price is in a customary currency format."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-988",
        "question": "Suppose there exists a bond with an annual modified duration of 8.05 and an annual convexity of 58.32. What is the anticipated percentage change in price if the yield-to-maturity of the bond rises by 20 basis points?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "Here's a Python program that calculates the anticipated percentage change in price of a bond given its modified duration, convexity, and a change in yield-to-maturity.\n\n```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 8.05\n    convexity = 58.32\n    delta_yield = 0.20 / 100  # 20 basis points converted to decimal\n    \n    # Do math calculation to get the answer\n    # Price change due to duration = -Duration * Change in Yield\n    duration_effect = -modified_duration * delta_yield\n    # Price change due to convexity = 1/2 * Convexity * (Change in Yield)^2\n    convexity_effect = 0.5 * convexity * (delta_yield ** 2)\n    \n    # Total expected percentage change in price\n    price_change_percentage = (duration_effect + convexity_effect) * 100  # Convert to percentage\n    \n    # return answer\n    return price_change_percentage\n\n# Uncomment below to test the solution function:\n# print(solution())\n```\n\nThis function defines the necessary variables and performs the calculations to estimate the percentage change in bond price using the bond's modified duration and convexity measures. The change in yield is first converted from basis points to a decimal before being used in the calculation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-989",
        "question": "According to the provided table, what is the target semideviation for the investment portfolio?",
        "tables": [
            "|     |     |\n| --- | --- |\n| Exhibit 1 10-Year Trailing Risk-Adjusted Performance |     |\n| Average annual return | 8.20% |\n| Minimum acceptable return (MAR) | 5.00% |\n| Sharpe ratio | 0.95 |\n| Sortino ratio | 0.87 |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "The Sortino ratio is a variation of the Sharpe ratio that differentiates harmful volatility from total overall volatility by using the standard deviation of negative asset returns, called downside deviation. The Sortino ratio is calculated as follows:\n\nSortino ratio = (Return - MAR) / Target Semideviation\n\nWhere:\n- Return is the average annual return of the investment.\n- MAR is the Minimum Acceptable Return.\n- Target Semideviation is the semideviation of the portfolio's returns that fall below the MAR.\n\nWe can rearrange the formula to solve for the Target Semideviation:\n\nTarget Semideviation = (Return - MAR) / Sortino ratio\n\nLet's create the Python program to calculate the target semideviation:\n\n```python\ndef solution():\n    # Define variables name and value\n    avg_annual_return = 8.20  # in percent\n    mar = 5.00  # in percent\n    sortino_ratio = 0.87\n    \n    # Convert percentages to decimals\n    avg_annual_return = avg_annual_return / 100\n    mar = mar / 100\n    \n    # Do math calculation to get the answer\n    target_semideviation = (avg_annual_return - mar) / sortino_ratio\n    \n    # return answer in percentage form\n    return target_semideviation * 100\n\n# The returned value would be the target semideviation in percentage form\nprint(solution())\n```\n\nThis program will return the target semideviation for the investment portfolio in percentage terms. We convert the annual average return and the MAR to decimals to perform the calculation, then convert the result back to a percentage before returning it."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-990",
        "question": "What will the mean absolute deviation be when referring to the range of 1-10?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # No package is needed for this calculation\n    \n    # Range of 1-10\n    numbers = list(range(1, 11))  # This will create a list [1, 2, ..., 10]\n    \n    # Mean of numbers 1-10\n    mean = sum(numbers) / len(numbers)  # The mean of numbers 1-10 is 5.5\n    \n    # The absolute deviation for each number in the range\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Mean absolute deviation (MAD)\n    mean_absolute_deviation = sum(absolute_deviations) / len(absolute_deviations)\n    \n    # return the answer\n    return mean_absolute_deviation\n\n# You can call the function and print the result to check\n# print(solution())\n```\n\nThis program defines a function that calculates the Mean Absolute Deviation (MAD) for the numbers in the range 1 to 10. The program first computes the mean of the numbers, then calculates the absolute difference of each number from the mean. Finally, it calculates the mean of these absolute differences to get the MAD."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-991",
        "question": "Thompson is a tax consultant, providing tax-related guidance to individual clients. One of his clients is Jennifer, an American citizen residing within the U.S. Jennifer recently became the owner of AAPL shares, left to her by a deceased relative who was also a U.S. resident. The U.S. uses the \"step-up\" in basis at death system. The shares were originally purchased 20 years ago at a cost of $15,000 (inclusive of commissions and other costs). When the relative passed away, the market value of the AAPL stock was $220,000, and Jennifer just sold these shares for $190,000. Jennifer’s tax rate for capital gains is 20%. The tax obligation from the sale of the AAPL shares is:",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    step_up_basis_value = 220000\n    sale_price = 190000\n    capital_gains_tax_rate = 0.20\n\n    # Do math calculation to get the answer\n    # Since the step-up basis is applied, the cost basis is the value of the stock at the time of the deceased relative's death\n    capital_gain_loss = sale_price - step_up_basis_value\n    tax_obligation = capital_gain_loss * capital_gains_tax_rate if capital_gain_loss > 0 else 0\n    \n    # return answer\n    return tax_obligation\n\n# This should print the tax obligation, which is $0 in this case because Jeniffer sold the stocks at a loss.\nprint(solution())\n```\nThe calculation shows no capital gains tax obligation since the sale price is lower than the step-up basis value, leading to a capital loss rather than a gain. In the US, capital losses can be used to offset other capital gains, but they do not result in a tax obligation when realized on their own."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-992",
        "question": "The cost of a three-year zero-coupon bond from the government is $85.16, while a four-year bond of the same type is $79.81. Can you calculate the one-year implied forward rate from the third to the fourth year?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "Here's the Python program to calculate the one-year implied forward rate from the third to the fourth year given the prices of zero-coupon bonds:\n\n```python\ndef solution():\n    # Define the prices of the bonds\n    price_3yr_bond = 85.16\n    price_4yr_bond = 79.81\n    \n    # Calculate the yield to maturity for both bonds\n    ytm_3yr = (1 / price_3yr_bond)**(1/3) - 1\n    ytm_4yr = (1 / price_4yr_bond)**(1/4) - 1\n    \n    # Using the yields to maturity, calculate the spot rates for each year\n    spot_rate_3yr = ytm_3yr\n    spot_rate_4yr = ytm_4yr\n    \n    # Calculate the forward rate from the third to the fourth year\n    forward_rate = ((1 + spot_rate_4yr)**4 / (1 + spot_rate_3yr)**3) - 1\n    \n    # Return the result\n    return forward_rate\n\n# You can call the function and print the result for verification\n# print(solution())\n```\n\nThis program will calculate the implied forward rate using the yields to maturity of both bonds and then using the spot rates to find the forward rate from the third to the fourth year."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-993",
        "question": "If a bond that has a face value of $100 matures in 10 years and pays a 4.5% coupon semiannually, is priced to yield 5.83%, and has a modified duration of 7.81. What is the approximate percentage price change for the bond if the bond's yield decreases by 0.25%?",
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Given variables\n    modified_duration = 7.81  # Modified duration of the bond\n    delta_yield = 0.0025  # Change in yield (0.25%)\n\n    # Calculate the approximate percentage price change\n    percentage_price_change = -modified_duration * delta_yield\n    \n    # return answer\n    return round(percentage_price_change * 100, 2)  # Convert to percentage and round two decimal places\n\n# Example usage\n# price_change = solution()\n# print(f\"The approximate percentage price change is {price_change}%\")\n```\n\nWhen you run the function solution(), it returns the approximate percentage price change for the bond if the bond's yield decreases by 0.25%. The modified duration is used to estimate the percentage change in bond price for a given change in yield."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-994",
        "question": "A business that aims to increase its earnings has invested $1,000,000 in a machine with two key parts, as seen in the provided chart. The machine's anticipated total lifespan is 10 years, and the business employs the straight-line technique of depreciation. How does the first year's depreciation expense calculated in accordance with the International Financial Reporting Standards (IFRS) compare to the one under the US GAAP?",
        "tables": [
            "| Component | Cost | Useful Life |\n|-----------|------|-------------|\n| A         | $500,000 | 10 years |\n| B         | $500,000 | 5 years  |"
        ],
        "topic": "Accounting",
        "output": [
            "To answer the question, we need to understand the difference between the International Financial Reporting Standards (IFRS) and the US Generally Accepted Accounting Principles (GAAP) in terms of depreciation:\n\nUnder IFRS, components of an asset with different useful lives are depreciated separately. In this case, Component A has a useful life of 10 years, and Component B has a useful life of 5 years.\n\nUnder US GAAP, there is no requirement to separate the components when calculating depreciation unless the components can be identified as separate assets. Usually, the entire cost would be depreciated over the useful life of the primary asset, which is assumed to be 10 years in this case.\n\nWe'll calculate the first year's depreciation under both standards for comparison.\n\n```python\ndef solution():\n    # Defining the variables\n    total_cost = 1000000\n    component_A_cost = 500000\n    component_B_cost = 500000\n    useful_life_total = 10\n    useful_life_component_A = 10\n    useful_life_component_B = 5\n    \n    # Calculating depreciation\n    # Under IFRS:\n    depreciation_component_A = component_A_cost / useful_life_component_A  # annual depreciation for Component A\n    depreciation_component_B = component_B_cost / useful_life_component_B  # annual depreciation for Component B\n    total_depreciation_IFRS = depreciation_component_A + depreciation_component_B  # Total IFRS depreciation for first year\n    \n    # Under US GAAP:\n    total_depreciation_GAAP = total_cost / useful_life_total  # annual depreciation for whole machine\n    \n    # Calculate the difference\n    difference = total_depreciation_IFRS - total_depreciation_GAAP\n    \n    # Return the result as a tuple (IFRS Depreciation, GAAP Depreciation, Difference)\n    return (total_depreciation_IFRS, total_depreciation_GAAP, difference)\n\n# Call the solution function and print the results\nprint(solution())\n```\n\nThis Python program defines the cost and useful lives of the machine's components, then it calculates the depreciation expense for the first year under both IFRS and GAAP, and finally, it determines the difference between the two values."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-995",
        "question": "A portion of the financial statement of Alpha Enterprises is presented below: Assets at the end of 2015: $5,000 Revenues for the year: $1,750 Expenses for the year: $1,200 Distributions to owners: $250 Retained earnings at the conclusion of 2014: $2,000 Contributed capital at the conclusion of 2015: $800 What should be the liabilities of Alpha Enterprises at the end of 2015?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    assets_end_2015 = 5000\n    revenues_2015 = 1750\n    expenses_2015 = 1200\n    distributions_2015 = 250\n    retained_earnings_end_2014 = 2000\n    contributed_capital_end_2015 = 800\n\n    # Calculate retained earnings at the end of 2015\n    net_income_2015 = revenues_2015 - expenses_2015\n    retained_earnings_end_2015 = retained_earnings_end_2014 + net_income_2015 - distributions_2015\n\n    # Owners' equity at the end of 2015\n    owners_equity_end_2015 = retained_earnings_end_2015 + contributed_capital_end_2015\n\n    # Calculate liabilities using the accounting equation:\n    # Assets = Liabilities + Owners' Equity\n    liabilities_end_2015 = assets_end_2015 - owners_equity_end_2015\n\n    # return answer\n    return liabilities_end_2015\n    \n# Print out the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-996",
        "question": "If a fund manager constructs a portfolio with a standard deviation of 14.40%, what is the covariance between the two assets?",
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation (%) |\n|----------|-------------------|--------------------------------|\n| 1        | 30                | 20                             |\n| 2        | 70                | 12                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight1 = 0.3\n    weight2 = 0.7\n    std_dev1 = 0.20\n    std_dev2 = 0.12\n    portfolio_std_dev = 0.1440\n    \n    # Calculate covariance using the formula:\n    # portfolio_variance = weight1^2 * std_dev1^2 + weight2^2 * std_dev2^2 + 2 * weight1 * weight2 * covariance\n    # Rearrange the formula to solve for covariance\n    covariance = (portfolio_std_dev**2 - (weight1**2 * std_dev1**2) - (weight2**2 * std_dev2**2)) / (2 * weight1 * weight2)\n    \n    # return answer\n    return covariance\n    \n# Call the function and print the result for testing\nprint(solution())  # This line is for testing purpose and should be commented out or removed in the final solution.\n```\nThis program calculates the covariance between two assets given their weights, standard deviations, and the portfolio standard deviation."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-997",
        "question": "If Corporations D and F combined to form a new Entity, G, what would the three-company concentration ratio in the industry be considering that there are six corporations in the sector with respective market shares?",
        "tables": [
            "| Company | A  | B  | C  | D  | E  | F  |\n|---------|----|----|----|----|----|----|\n| Market  | 30 | 25 | 16 | 12 | 10 | 7  |\n| Share (%) | |  |  |  |  |  |"
        ],
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_shares = [30, 25, 16, 12, 10, 7]  # Market shares of A, B, C, D, E, F respectively\n    \n    # Combine market shares for D and F to form G\n    market_share_g = market_shares[3] + market_shares[5]  # Market share of D + Market share of F\n    market_shares.append(market_share_g)  # Add G to the list\n    \n    # Sort the market shares to find the top three, after forming G\n    market_shares.sort(reverse=True)\n    \n    # Calculate the three-company concentration ratio\n    concentration_ratio = sum(market_shares[:3])  # Sum the top three market shares\n    \n    # return answer\n    return concentration_ratio\n\n# Call the function and print the answer\nprint(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-998",
        "question": "If John's Industries recently acquired a manufacturing machine for $60,000 which is predicted to produce an annual cash inflow of $25,000 for six years, and plans to depreciate the machine over six years for accounting reasons, while the tax authority calculates the machine's useful life to be 5 years. If we consider the tax rate to be 40% and the machines have no resale value. What would be the pretax income for John's Industries in the 6th year using the straight-line method?",
        "tables": [],
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_machine = 60000\n    annual_cash_inflow = 25000\n    tax_rate = 0.40\n    machine_life_for_depreciation = 6\n    machine_life_for_taxes = 5\n    \n    # Do math calculation to get the answer\n    # Calculate annual depreciation\n    annual_depreciation = cost_of_machine / machine_life_for_depreciation\n    \n    # Calculate tax depreciation\n    tax_depreciation = cost_of_machine / machine_life_for_taxes\n    \n    # Calculate tax shield for the 6th year (there is no tax depreciation in the 6th year as its life is 5 years for tax purpose)\n    tax_shield = tax_depreciation * tax_rate\n\n    # Calculate the pretax income\n    # Since there is no tax depreciation in the 6th year, the tax shield does not need to be subtracted from the cash inflow\n    pretax_income = annual_cash_inflow + tax_shield - annual_depreciation\n    \n    # return answer\n    return pretax_income\n    \n# Call the function and print the result\nprint(solution())\n```\n\nNote: In year 6, there is no more tax depreciation because the tax life of the machine is considered 5 years. Therefore, despite the annual cash inflow, the tax shield does not apply for the 6th year, and we still have to account for the financial depreciation which will reduce the pretax income."
        ],
        "ground_truth": null,
        "python_solution": ""
    },
    {
        "question_id": "test-999",
        "question": "John thinks that the average cost of the commercial residential property is more than $155,000. The population standard deviation is $25,000. A random sample of 36 commercial residential properties in the region has an average cost of $159,750. John carry out the hypothesis test at a 1% significance level. What is the value of the computed test statistic?",
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needs\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mu = 155000\n    sigma = 25000\n    n = 36\n    sample_mean = 159750\n    \n    # Do math calculation to get the answer\n    # Calculate the Z-score\n    z = (sample_mean - mu) / (sigma / (n ** 0.5))\n    \n    # return answer\n    return z\n\n# You can uncomment the following lines to check the value of the test statistic by running the script\n# if __name__ == '__main__':\n#     print(solution())\n```"
        ],
        "ground_truth": null,
        "python_solution": ""
    }
]