[
    {
        "tables": [
            "| Asset Class    | Geometric Return(%) |\n| -------------- | ------------------- |\n| Equities       | 8.0                 |\n| Corporate Bonds| 6.5                 |\n| Treasury bills | 2.5                 |\n| Inflation      | 2.1                 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-0",
        "python_solution": "",
        "ground_truth": null,
        "question": "What historical geometric real rate of return for corporate bonds does a researcher identify?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    inflation_rate = 2.1\n    \n    # Do math calculation to get the answer\n    real_rate_of_return = ((1 + corporate_bonds_return/100) / (1 + inflation_rate/100) - 1) * 100\n    \n    # return answer\n    return round(real_rate_of_return, 2)\n```\n\nThis Python program calculates the historical geometric real rate of return for corporate bonds based on the given information. Here's how it works:\n\n1. We define the geometric return for corporate bonds (6.5%) and the inflation rate (2.1%) as percentages.\n\n2. To calculate the real rate of return, we use the Fisher equation:\n   Real Rate = ((1 + Nominal Rate) / (1 + Inflation Rate)) - 1\n\n3. We convert the percentages to decimals in the calculation by dividing by 100.\n\n4. After calculating, we convert the result back to a percentage by multiplying by 100.\n\n5. Finally, we round the result to two decimal places for better readability.\n\nThe program will return the historical geometric real rate of return for corporate bonds, which accounts for the effect of inflation on the nominal return."
        ]
    },
    {
        "tables": [
            "| Period | Years | Forward Rate |\n|--------|-------|--------------|\n| 1      | 0.5   | 1.20%        |\n| 2      | 1     | 1.80%        |\n| 3      | 1.5   | 2.30%        |\n| 4      | 2     | 2.70%        |\n| 5      | 2.5   | 3.00%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-1",
        "python_solution": "",
        "ground_truth": null,
        "question": "With the given US Treasury forward rates, what's the value of a 2.5-year $100 face value Treasury bond with a 5% interest rate?",
        "output": [
            "Here's a Python program to calculate the value of a 2.5-year $100 face value Treasury bond with a 5% interest rate, using the given forward rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.05\n    coupon_payment = face_value * coupon_rate\n    forward_rates = [0.0120, 0.0180, 0.0230, 0.0270, 0.0300]\n    periods = [0.5, 1.0, 1.5, 2.0, 2.5]\n\n    # Do math calculation to get the answer\n    bond_value = 0\n    for i in range(5):\n        if i < 4:\n            # Calculate present value of coupon payments\n            discount_factor = 1 / ((1 + forward_rates[i]) ** periods[i])\n            bond_value += (coupon_payment / 2) * discount_factor\n        else:\n            # Calculate present value of final coupon payment and face value\n            discount_factor = 1 / ((1 + forward_rates[i]) ** periods[i])\n            bond_value += ((coupon_payment / 2) + face_value) * discount_factor\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis program does the following:\n\n1. Defines the necessary variables:\n   - `face_value`: The face value of the bond ($100)\n   - `coupon_rate`: The annual interest rate (5% or 0.05)\n   - `coupon_payment`: The annual coupon payment (face_value * coupon_rate)\n   - `forward_rates`: A list of the given forward rates\n   - `periods`: A list of the corresponding time periods\n\n2. Calculates the bond value by:\n   - Iterating through each period\n   - For the first four periods, it calculates the present value of the semi-annual coupon payments\n   - For the last period, it calculates the present value of both the final coupon payment and the face value\n\n3. Returns the calculated bond value, rounded"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-2",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming U.S. GAAP is in effect unless stated otherwise, imagine a highly profitable company, Alpha Enterprises, acquired a new asset for $1,000,000 on January 1, 2002. How does the asset acquisition impact Alpha Enterprises' deferred tax liability for 2002 given the following conditions for the asset: for financial statements purposes, straight-line depreciation over 10 years with no salvage value; for tax purposes, the asset is classified under three-year MACRS depreciation with the first year MACRS factor being 0.333, and the tax rate stands at 40%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_cost = 1000000\n    financial_depreciation = asset_cost / 10  # Straight-line over 10 years\n    tax_depreciation = asset_cost * 0.333  # First year MACRS factor\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    book_tax_difference = tax_depreciation - financial_depreciation\n    deferred_tax_liability = book_tax_difference * tax_rate\n\n    # return answer\n    return deferred_tax_liability\n```\n\nThis Python program calculates the impact on Alpha Enterprises' deferred tax liability for 2002 based on the given conditions. Here's an explanation of the calculation:\n\n1. We define the asset cost, calculate the financial depreciation (straight-line over 10 years), and the tax depreciation (using the MACRS factor for the first year).\n\n2. We calculate the difference between tax depreciation and financial depreciation. This difference represents a temporary difference that will result in a deferred tax liability.\n\n3. We multiply this difference by the tax rate to get the deferred tax liability.\n\n4. The function returns the deferred tax liability, which represents the impact on Alpha Enterprises' deferred tax liability for 2002 due to the asset acquisition.\n\nThis calculation assumes that a higher tax depreciation compared to financial depreciation leads to a deferred tax liability, as it represents future taxable amounts."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-3",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the average P/E of 30 shares in a particular manufacturing sector is 18 and the sample standard deviation is 3.5, what is the standard error of the mean closest to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_size = 30\n    sample_standard_deviation = 3.5\n\n    # Do math calculation to get the answer\n    standard_error = sample_standard_deviation / (sample_size ** 0.5)\n    \n    # return answer\n    return round(standard_error, 4)\n```\n\nThis Python program calculates the standard error of the mean for the given scenario. Here's a breakdown of the solution:\n\n1. We define the sample size (30 shares) and the sample standard deviation (3.5) as variables.\n\n2. The formula for the standard error of the mean is:\n   Standard Error = Sample Standard Deviation / √(Sample Size)\n\n3. We calculate this using the given values and the square root function (implemented as ** 0.5 for simplicity).\n\n4. The result is rounded to 4 decimal places to provide a precise answer.\n\n5. The calculated standard error is then returned.\n\nWhen you run this function, it will return the standard error of the mean, which should be close to 0.6389. This represents the variability of the sample mean P/E ratio in the given manufacturing sector."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-4",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose there are two stocks, X and Y. If their annual returns are jointly normally distributed, the marginal distribution of each stock has a mean of 2% and a standard deviation of 10%, and the correlation is 0.9, can you tell me the expected annual return of stock X if the annual return of stock Y is 3%?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    mean_x = 0.02  # 2% mean return for stock X\n    mean_y = 0.02  # 2% mean return for stock Y\n    std_x = 0.10   # 10% standard deviation for stock X\n    std_y = 0.10   # 10% standard deviation for stock Y\n    correlation = 0.9\n    y_return = 0.03  # 3% return for stock Y\n\n    # Do math calculation to get the answer\n    # Using the formula for conditional expectation in bivariate normal distribution\n    # E[X|Y=y] = μx + ρ * (σx / σy) * (y - μy)\n    expected_x_return = mean_x + correlation * (std_x / std_y) * (y_return - mean_y)\n\n    # return answer\n    return expected_x_return\n\n```\n\nThis program calculates the expected annual return of stock X given that the annual return of stock Y is 3%, using the properties of bivariate normal distribution.\n\nThe formula used is the conditional expectation formula for bivariate normal distribution:\n\nE[X|Y=y] = μx + ρ * (σx / σy) * (y - μy)\n\nWhere:\n- μx is the mean of X (stock X's mean return)\n- ρ is the correlation coefficient between X and Y\n- σx is the standard deviation of X\n- σy is the standard deviation of Y\n- y is the observed value of Y (stock Y's return)\n- μy is the mean of Y (stock Y's mean return)\n\nThe program defines all these variables based on the given information and then applies the formula to calculate the expected return of stock X. The result is then returned as the answer."
        ]
    },
    {
        "tables": [
            "| Balances as of year ended 31 December | 2004 | 2005 |\n| ------------------------------------- | ---- | ---- |\n| Retained earnings                     | 120  | 145  |\n| Accounts receivable                   | 38   | 43   |\n| Inventory                             | 45   | 48   |\n| Accounts payable                      | 36   | 29   |"
        ],
        "topic": "Accounting",
        "question_id": "test-5",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's consider that U.S. GAAP is applicable unless stated differently. A research analyst has collected this data from a corporation's financial statements for the year 2005 (in millions of dollars): The firm announced and distributed cash dividends worth $10 million in 2005 and accounted for a depreciation cost of $25 million for the same year. What was the corporation's cash flow from operations, in millions, for 2005?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2004 = 120\n    retained_earnings_2005 = 145\n    accounts_receivable_2004 = 38\n    accounts_receivable_2005 = 43\n    inventory_2004 = 45\n    inventory_2005 = 48\n    accounts_payable_2004 = 36\n    accounts_payable_2005 = 29\n    dividends = 10\n    depreciation = 25\n\n    # Do math calculation to get the answer\n    net_income = retained_earnings_2005 - retained_earnings_2004 + dividends\n    \n    change_in_accounts_receivable = accounts_receivable_2005 - accounts_receivable_2004\n    change_in_inventory = inventory_2005 - inventory_2004\n    change_in_accounts_payable = accounts_payable_2005 - accounts_payable_2004\n    \n    cash_flow_from_operations = (net_income \n                                 + depreciation \n                                 - change_in_accounts_receivable \n                                 - change_in_inventory \n                                 + change_in_accounts_payable)\n\n    # return answer\n    return cash_flow_from_operations\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-6",
        "python_solution": "",
        "ground_truth": null,
        "question": "In early 2009, Steel Production procured a new assembly line equipment for $600,000. The equipment is anticipated to have a useful life of 10 years and an estimated salvage value of $50,000. What amount of depreciation would Steel Production record in 2009 for financial statements using the double-declining balance method?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost = 600000\n    useful_life = 10\n    salvage_value = 50000\n    depreciation_rate = 2 / useful_life  # Double-declining balance rate\n\n    # Do math calculation to get the answer\n    depreciable_base = cost - salvage_value\n    annual_depreciation = cost * depreciation_rate\n    \n    # For the first year (2009), we use the full annual depreciation\n    depreciation_2009 = annual_depreciation\n\n    # return answer\n    return depreciation_2009\n\n# Uncomment the following lines to test the function\n# result = solution()\n# print(f\"The depreciation for 2009 is ${result:.2f}\")\n```\n\nThis program calculates the depreciation for 2009 using the double-declining balance method. Here's a breakdown of the calculation:\n\n1. We define the initial cost, useful life, and salvage value.\n2. The depreciation rate for double-declining balance is (2 / useful life).\n3. We calculate the annual depreciation by multiplying the cost by the depreciation rate.\n4. For the first year (2009), we use the full annual depreciation amount.\n\nNote that in subsequent years, the depreciation would be calculated based on the remaining book value, but for 2009 (the first year), we simply use the initial cost as the base.\n\nThe function returns the depreciation amount for 2009. You can uncomment the last two lines to test the function and print the result."
        ]
    },
    {
        "tables": [
            "| ASSETS                         |         | Company A | Company B | Sector Average |\n|--------------------------------|---------|-----------|-----------|----------------|\n| Current assets                 |         |           |           |                |\n| Cash and cash equivalents      |         | 5         | 7         |                |\n| Marketable securities          |         | 0         | 2         |                |\n| Accounts receivable, net       |         | 15        | 12        |                |\n| Inventories                    |         | 20        | 16        |                |\n| Prepaid expenses               |         | 15        | 11        |                |\n| Total current assets           |         | 55        | 48        |                |\n| Property, plant, and equipment | net     | 35        | 37        |                |\n| Goodwill                       |         | 0         | 8         |                |\n| Other assets                   |         | 10        | 7         |                |\n| Total assets                   | 100     | 100       | 100       | 100            |\n|--------------------------------|---------|-----------|-----------|----------------|\n| LIABILITIES AND SHAREHOLDERS' EQUITY | | | | |\n| Current liabilities                 |   | | | |\n| Accounts payable                    |   | 10 | 10 | 10 |\n| Short-term debt                     |   | 25 | 10 | 15 |\n| Accrued expenses                    |   | 5  | 3  |    |\n| Total current liabilities           |   | 35 | 25 | 28 |\n| Long-term debt                      |   | 45 | 20 | 28 |\n| Other non-current liabilities       |   | 0  | 10 | 7  |\n| Total liabilities                   |   | 80 | 55 | 63 |\n| Total shareholders' equity          |   | 20 | 45 | 37 |\n| Total liabilities and shareholders' equity | | 100 | 100 | 100 |"
        ],
        "topic": "Accounting",
        "question_id": "test-7",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the quick ratio for Company B as per the common-size balance sheets displayed in Exhibit 1 for Company A, Company B, and the Sector Average?",
        "output": [
            "Here's the Python program to calculate the quick ratio for Company B based on the provided common-size balance sheet:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash_and_equivalents = 7\n    marketable_securities = 2\n    accounts_receivable = 12\n    current_liabilities = 25\n\n    # Do math calculation to get the answer\n    quick_assets = cash_and_equivalents + marketable_securities + accounts_receivable\n    quick_ratio = quick_assets / current_liabilities\n\n    # return answer\n    return quick_ratio\n```\n\nThis program calculates the quick ratio for Company B using the following steps:\n\n1. We define the variables based on the data from the common-size balance sheet for Company B:\n   - Cash and cash equivalents: 7\n   - Marketable securities: 2\n   - Accounts receivable: 12\n   - Total current liabilities: 25\n\n2. We calculate the quick assets by summing cash and cash equivalents, marketable securities, and accounts receivable.\n\n3. We then calculate the quick ratio by dividing quick assets by current liabilities.\n\n4. Finally, we return the calculated quick ratio.\n\nWhen you run this function, it will return the quick ratio for Company B based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-8",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, the portfolio of Frontier Investment Group, a hedge fund, was valued at $475,000,000. A year later, the value of assets under management has grown to $541,500,000. The hedge fund imposes a 1.5% management fee based on the portfolio value at the end of the year and a 10% incentive fee. If these two fees are calculated separately, what would be the effective return for an investor in this hedge fund?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 475000000\n    end_value = 541500000\n    management_fee_rate = 0.015\n    incentive_fee_rate = 0.10\n\n    # Do math calculation to get the answer\n    gross_return = (end_value - initial_value) / initial_value\n    \n    management_fee = end_value * management_fee_rate\n    incentive_fee = (end_value - initial_value) * incentive_fee_rate\n    \n    total_fees = management_fee + incentive_fee\n    \n    net_return = (end_value - initial_value - total_fees) / initial_value\n    \n    effective_return = net_return * 100  # Convert to percentage\n\n    # return answer\n    return round(effective_return, 2)\n```\n\nThis Python program calculates the effective return for an investor in the Frontier Investment Group hedge fund. Here's a breakdown of the calculation:\n\n1. We define the initial and end values of the portfolio, as well as the management and incentive fee rates.\n2. We calculate the gross return before fees.\n3. We calculate the management fee based on the end-of-year portfolio value.\n4. We calculate the incentive fee based on the increase in portfolio value.\n5. We sum up the total fees.\n6. We calculate the net return by subtracting the total fees from the gross return.\n7. We convert the net return to a percentage for the effective return.\n8. Finally, we round the result to two decimal places and return it.\n\nThe returned value represents the effective return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-9",
        "python_solution": "",
        "ground_truth": null,
        "question": "What does an analyst project as the expected return on equity for a corporation using the Bond yield plus risk premium approach, given a yield on the corporation's bonds at 4.3% and a 6.1% historical risk premium obtained by equity investors compared to long-term corporate bond yields?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 0.043  # 4.3%\n    risk_premium = 0.061  # 6.1%\n    \n    # Do math calculation to get the answer\n    expected_return_on_equity = bond_yield + risk_premium\n    \n    # return answer\n    return expected_return_on_equity * 100  # Convert to percentage\n```\n\nThis Python program calculates the expected return on equity using the Bond yield plus risk premium approach. Here's how it works:\n\n1. We define two variables:\n   - `bond_yield`: The yield on the corporation's bonds, which is 4.3% (0.043 in decimal form)\n   - `risk_premium`: The historical risk premium obtained by equity investors compared to long-term corporate bond yields, which is 6.1% (0.061 in decimal form)\n\n2. We calculate the expected return on equity by adding the bond yield and the risk premium.\n\n3. We return the result multiplied by 100 to convert it from decimal to percentage form.\n\nWhen you run this function, it will return the expected return on equity as a percentage. In this case, it would be 10.4% (4.3% + 6.1%)."
        ]
    },
    {
        "tables": [
            "|         | RDI=30% | RDI=25% | RDI=15% |\n|---------|---------|---------|---------|\n| RFI=25% | 0.25    |         |         |\n| RFI=15% |         | 0.5     |         |\n| RFI=10% |         |         | 0.25    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-10",
        "python_solution": "",
        "ground_truth": null,
        "question": "A specialist generates the subsequent joint probability function for an international index (FI) and a local index (DI). What is the covariance of returns on the international index and the returns on the local index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = {\n        (30, 25): 0.25,\n        (25, 15): 0.5,\n        (15, 10): 0.25\n    }\n    \n    # Calculate expected values\n    E_FI = sum(rfi * prob for (rdi, rfi), prob in probabilities.items())\n    E_DI = sum(rdi * prob for (rdi, rfi), prob in probabilities.items())\n    \n    # Calculate E(FI * DI)\n    E_FI_DI = sum(rfi * rdi * prob for (rdi, rfi), prob in probabilities.items())\n    \n    # Calculate covariance\n    covariance = E_FI_DI - (E_FI * E_DI)\n    \n    # return answer\n    return covariance\n\n```\n\nThis Python program calculates the covariance between the returns on the international index (FI) and the returns on the local index (DI) based on the given joint probability function.\n\nThe program does the following:\n\n1. Defines the joint probabilities in a dictionary where the keys are tuples of (DI, FI) percentages and the values are the probabilities.\n\n2. Calculates the expected values of FI and DI.\n\n3. Calculates E(FI * DI), which is the expected value of the product of FI and DI.\n\n4. Calculates the covariance using the formula: Cov(FI, DI) = E(FI * DI) - E(FI) * E(DI)\n\n5. Returns the calculated covariance.\n\nThis program will give you the correct covariance based on the provided joint probability function."
        ]
    },
    {
        "tables": [
            "| Cost of the equipment | UYP 1,200,000       |\n|----------------------|---------------------|\n| Estimated residual value | UYP 200,000      |\n| Expected useful life | 8 years             |\n| Total productive capacity| 800,000 units    |\n| Production in FY 2009 | 135,000 units      | \n| Expected production for the next 7 years | 95,000 units each |"
        ],
        "topic": "Accounting",
        "question_id": "test-11",
        "python_solution": "",
        "ground_truth": null,
        "question": "If MARIO S.A., a corporation based in Uruguay, uses the straight-line method, then how much is the depreciation expense on their income statement related to the manufacturing equipment, considering that Carlos Lopez from the company is calculating it for the fiscal year ended 31 December 2009? The equipment was obtained on 1 January 2009, and Lopez has gathered the following data (currency in Uruguayan pesos, UYP).",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 1200000\n    residual_value = 200000\n    useful_life = 8\n\n    # Do math calculation to get the answer\n    depreciable_amount = cost - residual_value\n    annual_depreciation = depreciable_amount / useful_life\n\n    # return answer\n    return annual_depreciation\n```\n\nThis Python program calculates the annual depreciation expense using the straight-line method based on the information provided. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `cost`: The cost of the equipment (UYP 1,200,000)\n   - `residual_value`: The estimated residual value (UYP 200,000)\n   - `useful_life`: The expected useful life (8 years)\n\n2. We calculate the depreciable amount by subtracting the residual value from the cost.\n\n3. We then calculate the annual depreciation by dividing the depreciable amount by the useful life.\n\n4. Finally, we return the annual depreciation as the answer.\n\nThis calculation assumes that MARIO S.A. uses the straight-line method for depreciation, which results in an equal depreciation expense each year over the asset's useful life. The program will return the depreciation expense for the fiscal year ended 31 December 2009, which is the same as it would be for any other full year in the asset's life under this method."
        ]
    },
    {
        "tables": [
            "|                                      |            |\n|--------------------------------------|------------|\n| **Wood Balance Sheet 2017**          |            |\n| **Assets**                           |            |\n| Cash                                 | $650,000   |\n| Inventory                            | 27,000     |\n| Accounts receivable                  | 25,000     |\n| Plant and equipment (cost less depreciation) | 300,000 |\n| TimberLand                           | 8,086,000  |\n| **Total assets**                     | $9,088,000 |\n| Accounts payables                    | $ 88,000   |\n| Long-term bank loan                  | 2,500,000  |\n| Common stock                         | 6,500,000  |\n| **Total liabilities and equity**     | $9,088,000 |\n| TimberLand (market value)            | 50,000,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-12",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the balance sheet as of 31 December 2017, Pierre thinks that an asset-based assessment is suitable for Oak. Based on the extra presumption that other assets and liabilities on the balance sheet, what is the asset-based valuation of Oak?",
        "output": [
            "Here's a Python program to calculate the asset-based valuation of Oak based on the given balance sheet and the extra presumption:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash = 650000\n    inventory = 27000\n    accounts_receivable = 25000\n    plant_and_equipment = 300000\n    timberland_market_value = 50000000\n    accounts_payable = 88000\n    long_term_bank_loan = 2500000\n\n    # Do math calculation to get the answer\n    total_assets = cash + inventory + accounts_receivable + plant_and_equipment + timberland_market_value\n    total_liabilities = accounts_payable + long_term_bank_loan\n    asset_based_valuation = total_assets - total_liabilities\n\n    # return answer\n    return asset_based_valuation\n```\n\nThis program calculates the asset-based valuation of Oak by:\n\n1. Defining the variables for all relevant assets and liabilities from the balance sheet.\n2. Using the market value of TimberLand ($50,000,000) instead of its book value.\n3. Calculating the total assets by summing up all asset values.\n4. Calculating the total liabilities by summing up all liability values.\n5. Subtracting total liabilities from total assets to get the asset-based valuation.\n\nThe program returns the asset-based valuation as the answer."
        ]
    },
    {
        "tables": [
            "| End of Year | Call Price |\n|-------------|------------|\n| 3           | 102        |\n| 4           | 101        |\n| 5           | 100        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-13",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond that has 5 years left until it matures is presently being traded for 101 for every 100 of par value. It provides a coupon rate of 6%, with interest being paid every six months. Considering that the bond can be first called in 3 years, and can be called following that date on interest payment dates per the provided schedule, what is the bond's yearly yield-to-first-call?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    market_price = 101\n    coupon_rate = 0.06\n    years_to_first_call = 3\n    periods_per_year = 2\n    \n    # Do math calculation to get the answer\n    coupon_payment = (coupon_rate * par_value) / periods_per_year\n    total_periods = years_to_first_call * periods_per_year\n    call_price = 102  # From the table, call price at year 3 is 102\n    \n    # Use Newton's method to find the yield-to-first-call\n    r = 0.03  # Initial guess\n    for _ in range(100):  # Max 100 iterations\n        price = 0\n        dr = 0\n        for i in range(1, total_periods + 1):\n            df = (1 + r / periods_per_year) ** -i\n            price += coupon_payment * df\n            dr -= i * coupon_payment * df / (1 + r / periods_per_year)\n        price += call_price * df\n        dr -= total_periods * call_price * df / (1 + r / periods_per_year)\n        \n        price -= market_price\n        if abs(price) < 0.0001:\n            break\n        r -= price / dr\n    \n    ytfc = r * periods_per_year  # Convert to annual rate\n    \n    # return answer\n    return round(ytfc * 100, 4)  # Convert to percentage and round to 4 decimal places\n```\n\nThis Python program calculates the yield-to-first-call (YTFC) for the bond described in the question. Here's a breakdown of the solution:\n\n1. We define the known variables: par value, market price, coupon rate, years to first call, and periods per year.\n\n2. We calculate the coupon payment and total number of periods until the first call date.\n\n3. We use Newton's method to iteratively solve for the yield-to-first-call. This is because the bond pricing equation cannot be solved analytically"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-14",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Corporation A disclosed a salary expenditure of $30 million and wage payable rose by $2 million, how much money was actually disbursed to workers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    salary_expenditure = 30000000\n    wage_payable_increase = 2000000\n    \n    # Do math calculation to get the answer\n    actual_disbursement = salary_expenditure - wage_payable_increase\n    \n    # return answer\n    return actual_disbursement\n```\n\nThis Python program calculates the actual amount of money disbursed to workers by Corporation A. Here's how it works:\n\n1. We define two variables:\n   - `salary_expenditure`: The total salary expenditure disclosed by Corporation A ($30 million)\n   - `wage_payable_increase`: The amount by which wage payable rose ($2 million)\n\n2. To calculate the actual disbursement, we subtract the increase in wage payable from the total salary expenditure. This is because the increase in wage payable represents salaries that were accounted for but not yet paid out.\n\n3. The program returns the `actual_disbursement`, which is the amount of money actually paid to workers.\n\nWhen you run this function, it will return 28000000, which represents $28 million. This is the amount of money that was actually disbursed to workers by Corporation A."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-15",
        "python_solution": "",
        "ground_truth": null,
        "question": "Peterson Energy Inc, a US-based, publicly traded energy firm, recently stated its plans to acquire Heartland Energy Inc, a smaller energy company based in the US. The offer from Peterson values Heartland at an enterprise worth of USD40.6 billion, which includes USD4.3 billion of existing Heartland debt. In order to finance the consideration of USD55 in cash along with 2.25 Peterson shares for each Heartland share, Peterson intends to issue 104 million new shares and will raise approximately USD26 billion in new debt, with the remaining being funded by cash on hand. Once the deal has closed, Peterson anticipates having an outstanding debt of nearly USD62 billion. Before the acquisition, Peterson had 1.096 billion shares in circulation, each trading at USD125. With the assumption of a constant share price and the book value of debt being equal to its market value, Jackson plans to ascertain the change in the proportions of debt and equity in Peterson’s capital structure following",
        "output": [
            "Here's a Python program to calculate the change in the proportions of debt and equity in Peterson's capital structure following the acquisition:\n\n```python\ndef solution():\n    # Define variables name and value\n    heartland_enterprise_value = 40.6e9\n    heartland_existing_debt = 4.3e9\n    new_debt_raised = 26e9\n    peterson_existing_shares = 1.096e9\n    peterson_share_price = 125\n    new_shares_issued = 104e6\n    peterson_post_acquisition_debt = 62e9\n\n    # Do math calculation to get the answer\n    \n    # Pre-acquisition calculations\n    pre_acquisition_equity = peterson_existing_shares * peterson_share_price\n    pre_acquisition_debt = peterson_post_acquisition_debt - heartland_existing_debt - new_debt_raised\n    pre_acquisition_total = pre_acquisition_equity + pre_acquisition_debt\n    \n    pre_acquisition_debt_ratio = pre_acquisition_debt / pre_acquisition_total\n    pre_acquisition_equity_ratio = pre_acquisition_equity / pre_acquisition_total\n\n    # Post-acquisition calculations\n    post_acquisition_equity = (peterson_existing_shares + new_shares_issued) * peterson_share_price\n    post_acquisition_debt = peterson_post_acquisition_debt\n    post_acquisition_total = post_acquisition_equity + post_acquisition_debt\n    \n    post_acquisition_debt_ratio = post_acquisition_debt / post_acquisition_total\n    post_acquisition_equity_ratio = post_acquisition_equity / post_acquisition_total\n\n    # Calculate changes\n    debt_ratio_change = post_acquisition_debt_ratio - pre_acquisition_debt_ratio\n    equity_ratio_change = post_acquisition_equity_ratio - pre_acquisition_equity_ratio\n\n    # return answer\n    return (debt_ratio_change, equity_ratio_change)\n```\n\nThis program calculates the change in debt and equity ratios for Peterson Energy Inc before and after the acquisition of Heartland Energy Inc. The function returns a tuple containing two values:\n\n1. The change in debt ratio (as a decimal)\n2. The change in equity ratio (as a decimal)"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-16",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the performance metrics for a different investment option: Let's assume that the highest drawdown risk remains constant at 10.2% for every time interval. Also, suppose that the mean drawdown risk is unchanging at 6.8% for every time interval. Based on the data given, compute the Calmar ratio in the usual manner. What is the resulting Calmar ratio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = {\n        '1_year': 0.053,\n        '3_years': 0.062,\n        '5_years': 0.047,\n        'since_inception': 0.044\n    }\n    max_drawdown = 0.102  # 10.2% constant for all periods\n    \n    # Do math calculation to get the answer\n    # Calmar ratio is typically calculated using the return since inception\n    # and the maximum drawdown\n    calmar_ratio = returns['since_inception'] / max_drawdown\n    \n    # return answer\n    return calmar_ratio\n```\n\nThis Python program calculates the Calmar ratio based on the given information. Here's a breakdown of the solution:\n\n1. We define a dictionary `returns` with the performance metrics for different time periods.\n2. We set `max_drawdown` to 0.102 (10.2%) as it's given to be constant for all time periods.\n3. The Calmar ratio is typically calculated using the return since inception divided by the maximum drawdown.\n4. We calculate the Calmar ratio by dividing the return since inception (4.4% or 0.044) by the maximum drawdown (10.2% or 0.102).\n5. The function returns the calculated Calmar ratio.\n\nNote that we don't use the mean drawdown risk in this calculation, as the Calmar ratio typically uses the maximum drawdown, not the average drawdown."
        ]
    },
    {
        "tables": [
            "| Returns | RB=50% | RB=20% | RB=-30% |\n|---------|--------|--------|---------|\n| RA=-10% | 0.4    | 0      | 0       |\n| RA=10%  | 0      | 0.3    | 0       |\n| RA=30%  | 0      | 0      | 0.3     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-17",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the above probability matrix, what is the covariance of returns on Portfolio X and Portfolio Y?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_matrix = {\n        (-0.10, 0.50): 0.4,\n        (-0.10, 0.20): 0.0,\n        (-0.10, -0.30): 0.0,\n        (0.10, 0.50): 0.0,\n        (0.10, 0.20): 0.3,\n        (0.10, -0.30): 0.0,\n        (0.30, 0.50): 0.0,\n        (0.30, 0.20): 0.0,\n        (0.30, -0.30): 0.3\n    }\n    \n    # Do math calculation to get the answer\n    E_X = sum(ra * prob for (ra, rb), prob in prob_matrix.items())\n    E_Y = sum(rb * prob for (ra, rb), prob in prob_matrix.items())\n    \n    E_XY = sum(ra * rb * prob for (ra, rb), prob in prob_matrix.items())\n    \n    covariance = E_XY - E_X * E_Y\n    \n    # return answer\n    return covariance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-18",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Fairfield Inc. intends to borrow sufficient funds to buy back 100,000 stocks, what would be Fairfield’s earnings per share following the repurchase, with the following data related to the share buyback: Shares outstanding before buyback 3.1 million, Earnings per share before buyback US$4.00, Share price at the time of buyback US$50, and After-tax cost of borrowing 6%?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding_before = 3_100_000\n    eps_before = 4.00\n    share_price = 50\n    buyback_shares = 100_000\n    after_tax_borrowing_cost = 0.06\n\n    # Do math calculation to get the answer\n    total_earnings_before = shares_outstanding_before * eps_before\n    buyback_cost = buyback_shares * share_price\n    interest_expense = buyback_cost * after_tax_borrowing_cost\n    \n    shares_outstanding_after = shares_outstanding_before - buyback_shares\n    earnings_after = total_earnings_before - interest_expense\n    \n    eps_after = earnings_after / shares_outstanding_after\n\n    # return answer\n    return round(eps_after, 2)\n```\n\nThis program calculates the earnings per share (EPS) after the share buyback, considering the given information:\n\n1. We first define all the given variables.\n2. We calculate the total earnings before the buyback by multiplying the number of shares outstanding by the EPS before buyback.\n3. We calculate the cost of the buyback by multiplying the number of shares to be bought back by the share price.\n4. We calculate the interest expense on the borrowed funds using the after-tax cost of borrowing.\n5. We determine the new number of shares outstanding after the buyback.\n6. We calculate the new earnings by subtracting the interest expense from the total earnings before buyback.\n7. Finally, we calculate the new EPS by dividing the new earnings by the new number of shares outstanding.\n8. The result is rounded to two decimal places for better readability.\n\nThis program will return the new earnings per share after the share buyback."
        ]
    },
    {
        "tables": [
            "|      | Adesivo | Enviado | Gesticular |\n|------|---------|---------|------------|\n| Stock's current price | 14.72 | 72.20 | 132.16 |\n| Diluted EPS (last four quarters) | 0.81 | 2.92 | -0.05 |\n| Diluted EPS (next four quarters) | 0.91 | 3.10 | 2.85 |\n| Dividend rate (annualized most recent dividend) | 0.44 | 1.24 | 0.00 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-19",
        "python_solution": "",
        "ground_truth": null,
        "question": "Pinho instructs Martins to utilize a valuation metric to facilitate a comprehensive evaluation of the relative share value of the three corporations. The essential financial data for these businesses are shown in Exhibit 1. For Adesivo, Martins examines the base trailing EPS. With a basic trailing EPS of R$0.84, he found a note in the financial reports of Adesivo stating that“On a per share basis, Adesivo incurred in the last four quartersi. from a lawsuit, a non-recurring gain of R$0.04; andii. Based on Exhibit 1 and Adesivo’s financial reports, what is the trailing P/E for Adesivo using the base EPS?",
        "output": [
            "Here's a Python program to calculate the trailing P/E for Adesivo using the base EPS:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_price = 14.72\n    diluted_eps_trailing = 0.81\n    non_recurring_gain = 0.04\n\n    # Do math calculation to get the answer\n    base_eps = diluted_eps_trailing - non_recurring_gain\n    trailing_pe = current_price / base_eps\n\n    # return answer\n    return round(trailing_pe, 2)\n```\n\nThis program does the following:\n\n1. We define the variables:\n   - `current_price`: Adesivo's current stock price from the table (14.72)\n   - `diluted_eps_trailing`: Diluted EPS for the last four quarters from the table (0.81)\n   - `non_recurring_gain`: The non-recurring gain mentioned in the financial reports (0.04)\n\n2. We calculate the base EPS by subtracting the non-recurring gain from the diluted EPS.\n\n3. We then calculate the trailing P/E ratio by dividing the current price by the base EPS.\n\n4. Finally, we return the result rounded to two decimal places.\n\nThis program will return the trailing P/E ratio for Adesivo using the base EPS, taking into account the non-recurring gain mentioned in the financial reports."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-20",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investor bought 200 stocks of a company that doesn't pay dividends on margin for a price of $50 each. The leverage ratio stands at 2.5. Half a year later, the investor offloads these stocks at $60 apiece. Disregarding the interest accrued on the borrowed sum and the transaction costs, what was the investor's return over the half-year period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_stocks = 200\n    buy_price = 50\n    sell_price = 60\n    leverage_ratio = 2.5\n    \n    # Do math calculation to get the answer\n    total_investment = num_stocks * buy_price\n    investor_capital = total_investment / leverage_ratio\n    \n    total_sale = num_stocks * sell_price\n    profit = total_sale - total_investment\n    \n    return_on_investment = (profit / investor_capital) * 100\n    \n    # return answer\n    return return_on_investment\n```\n\nThis Python program calculates the investor's return over the half-year period based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the total investment (number of stocks * buy price).\n3. We determine the investor's actual capital contribution by dividing the total investment by the leverage ratio.\n4. We calculate the total sale amount (number of stocks * sell price).\n5. We compute the profit by subtracting the total investment from the total sale.\n6. Finally, we calculate the return on investment by dividing the profit by the investor's capital and multiplying by 100 to get a percentage.\n\nThe program returns this percentage as the answer. Note that this return is significantly higher than it would be without leverage, which is the effect of using margin trading."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| BVPS  | $28.25  |\n| ROE  | 14.5%  |\n| Constant long-term growth  | 5.5%  |\n| Cost of equity  | 10.9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-21",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is assessing the value of Corporation Z using the single-stage residual income model and has compiled pertinent data in the listed table. What is the justified price-to-book ratio for Corporation Z?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    BVPS = 28.25\n    ROE = 0.145\n    g = 0.055\n    k = 0.109\n    \n    # Do math calculation to get the answer\n    RI = BVPS * (ROE - k)\n    PV_RI = RI / (k - g)\n    V0 = BVPS + PV_RI\n    P_B_ratio = V0 / BVPS\n    \n    # return answer\n    return round(P_B_ratio, 2)\n```\n\nThis Python function calculates the justified price-to-book ratio for Corporation Z using the single-stage residual income model. Here's a breakdown of the calculation:\n\n1. We define the given variables:\n   - BVPS (Book Value Per Share): $28.25\n   - ROE (Return on Equity): 14.5% or 0.145\n   - g (Constant long-term growth rate): 5.5% or 0.055\n   - k (Cost of equity): 10.9% or 0.109\n\n2. We calculate the Residual Income (RI) per share:\n   RI = BVPS * (ROE - k)\n\n3. We calculate the Present Value of future Residual Income (PV_RI):\n   PV_RI = RI / (k - g)\n\n4. We calculate the intrinsic value per share (V0):\n   V0 = BVPS + PV_RI\n\n5. Finally, we calculate the Price-to-Book ratio:\n   P_B_ratio = V0 / BVPS\n\n6. We round the result to two decimal places and return it.\n\nThis function will return the justified price-to-book ratio for Corporation Z based on the given information and the single-stage residual income model."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-22",
        "python_solution": "",
        "ground_truth": null,
        "question": "An employee at a capital management firm, Jonathan, is given the task to determine the gain in 6 months on a transaction of $2,000,000 vega notional of a one-year variance swap on the S&P 500 at a 20% strike (expressed as annual volatility). After a period of six months, the S&P 500 shows a realized volatility of 16%, while the fair strike of a fresh 6-month variance swap on the S&P 500 is now 18%. The yearly interest rate is 2.00%. What is the updated value of the variance swap?",
        "output": [
            "def solution():\n    # Define variables name and value\n    notional = 2000000\n    initial_strike = 0.20\n    realized_volatility = 0.16\n    new_6month_strike = 0.18\n    interest_rate = 0.02\n    time_elapsed = 0.5  # 6 months out of a year\n\n    # Do math calculation to get the answer\n    \n    # Calculate the variance difference\n    variance_diff = (initial_strike**2 - realized_volatility**2) * time_elapsed + \\\n                    (initial_strike**2 - new_6month_strike**2) * (1 - time_elapsed)\n    \n    # Calculate the gain\n    gain = 0.5 * notional * variance_diff\n    \n    # Apply interest rate adjustment\n    updated_value = gain * (1 + interest_rate * time_elapsed)\n    \n    # return answer\n    return updated_value\n\n```\n\nThis Python program calculates the updated value of the variance swap based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables, converting percentages to decimals where necessary.\n2. We calculate the variance difference using the formula that accounts for both the realized period and the remaining period.\n3. We multiply half the notional by the variance difference to get the gain.\n4. We apply an interest rate adjustment for the 6-month period.\n5. The function returns the updated value of the variance swap.\n\nNote that this calculation assumes that the variance swap pays out based on the difference in variances (squared volatilities) rather than volatilities directly, which is the standard approach for variance swaps."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-23",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a four-factor market model is being used for the return process of 100 companies, then what is the number of parameters that need to be estimated?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_companies = 100\n    num_factors = 4\n    intercept = 1  # Each company has an intercept (alpha)\n\n    # Do math calculation to get the answer\n    parameters_per_company = num_factors + intercept\n    total_parameters = num_companies * parameters_per_company\n\n    # return answer\n    return total_parameters\n```\n\nThis Python program calculates the number of parameters that need to be estimated in a four-factor market model for 100 companies. Here's the explanation:\n\n1. We define the number of companies (100) and the number of factors in the model (4).\n2. We also account for the intercept (often called alpha) for each company, which is an additional parameter.\n3. For each company, we need to estimate parameters for each factor plus the intercept. So, parameters per company = number of factors + intercept = 4 + 1 = 5.\n4. The total number of parameters is then the number of parameters per company multiplied by the number of companies: 5 * 100 = 500.\n\nThe function will return 500, which is the total number of parameters that need to be estimated in this four-factor market model for 100 companies."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-24",
        "python_solution": "",
        "ground_truth": null,
        "question": "A significant purchase has just been declared, aiming at corporation Y. The proposal from corporation X features an exchange offer with a ratio of 2. Directly following the declaration, corporation X and Y's prices are at $50 and $90, respectively. A hedge fund opts to take a long position in corporation Y, hedged with shares from X. Following the completion of the acquisition, the prices shift to $60 and $120. Therefore, the profit for each share from corporation Y is",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    x_price_before = 50\n    y_price_before = 90\n    x_price_after = 60\n    y_price_after = 120\n    exchange_ratio = 2\n\n    # Do math calculation to get the answer\n    long_y = y_price_after - y_price_before\n    short_x = (x_price_before - x_price_after) * exchange_ratio\n    profit_per_share = long_y + short_x\n\n    # return answer\n    return profit_per_share\n```\n\nThis Python program calculates the profit per share for the hedge fund's strategy in the given scenario. Here's a breakdown of the calculation:\n\n1. We define the initial and final prices for both corporations X and Y, as well as the exchange ratio.\n\n2. The profit from going long on corporation Y is the difference between its final and initial price.\n\n3. The profit from shorting corporation X is the difference between its initial and final price, multiplied by the exchange ratio (because for each share of Y, we short 2 shares of X).\n\n4. The total profit per share of Y is the sum of these two components.\n\nThe function will return this profit per share, which represents the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-25",
        "python_solution": "",
        "ground_truth": null,
        "question": "Presuming the exercise price of a share option is $50, if the share undergoes a 2-to-1 split, what would be the fresh exercise price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_exercise_price = 50\n    split_ratio = 2  # 2-to-1 split\n\n    # Do math calculation to get the answer\n    new_exercise_price = original_exercise_price / split_ratio\n\n    # return answer\n    return new_exercise_price\n```\n\nThis Python function calculates the new exercise price of a share option after a stock split. Here's how it works:\n\n1. We define the original exercise price as $50.\n2. We define the split ratio as 2, representing a 2-to-1 split.\n3. To calculate the new exercise price, we divide the original exercise price by the split ratio.\n4. The function returns the new exercise price.\n\nWhen you run this function, it will return 25.0, which means the new exercise price after the 2-to-1 split would be $25."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-26",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, Firm B had 10,000 shares and 1,000 outstanding warrants with an exercise price of $20/share. The average stock price was $25 over the course of that year. What was the net shares issued when computing the EPS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares = 10000\n    warrants = 1000\n    exercise_price = 20\n    avg_stock_price = 25\n    \n    # Do math calculation to get the answer\n    if avg_stock_price > exercise_price:\n        dilutive_effect = warrants * (avg_stock_price - exercise_price) / avg_stock_price\n        net_shares = shares + dilutive_effect\n    else:\n        net_shares = shares\n    \n    # return answer\n    return net_shares\n```\n\nThis Python program calculates the net shares issued when computing the EPS (Earnings Per Share) for Firm B in 2016, taking into account the dilutive effect of the outstanding warrants.\n\nThe program does the following:\n\n1. Defines the given variables:\n   - Number of shares: 10,000\n   - Number of outstanding warrants: 1,000\n   - Exercise price of warrants: $20/share\n   - Average stock price: $25/share\n\n2. Checks if the average stock price is greater than the exercise price. If it is, the warrants are dilutive and we need to calculate their effect.\n\n3. Calculates the dilutive effect using the treasury stock method:\n   dilutive_effect = warrants * (avg_stock_price - exercise_price) / avg_stock_price\n\n4. Adds the dilutive effect to the original number of shares to get the net shares.\n\n5. If the average stock price is not greater than the exercise price, the warrants are not dilutive, so the net shares remain the same as the original number of shares.\n\n6. Returns the calculated net shares.\n\nThis calculation gives us the number of shares to be used in the diluted EPS calculation, taking into account the potential dilution from the outstanding warrants."
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-27",
        "python_solution": "",
        "ground_truth": null,
        "question": "The fund overseen by John displays the following returns in year1,2,3: What will be the time-weighted rate of return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [1.12, 1.05, 1.01]  # 12% = 1.12, 5% = 1.05, 1% = 1.01\n    \n    # Do math calculation to get the answer\n    time_weighted_return = 1\n    for r in returns:\n        time_weighted_return *= r\n    \n    time_weighted_return = (time_weighted_return ** (1/3)) - 1  # Geometric mean\n    \n    # Convert to percentage\n    time_weighted_return_percentage = time_weighted_return * 100\n    \n    # return answer rounded to 2 decimal places\n    return round(time_weighted_return_percentage, 2)\n```\n\nThis Python program calculates the time-weighted rate of return based on the given data:\n\n1. We define the returns for each year as factors (1 + rate). For example, 12% return is represented as 1.12.\n\n2. We calculate the time-weighted return by multiplying all these factors together.\n\n3. To get the average annual return, we take the cube root of this product (since we have 3 years of data), and then subtract 1 to get the rate.\n\n4. Finally, we convert this to a percentage by multiplying by 100 and round to 2 decimal places.\n\nThe function will return the time-weighted rate of return as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-28",
        "python_solution": "",
        "ground_truth": null,
        "question": "On today's date, 5 June 2013, a semi-annual bond lasting three years that comes with a coupon rate of 6% just issued its initial coupon payment. The face value stands at 100. The due dates for interest payments are the 5th of April and the 5th of October. The bond's yield-to-maturity is equal to 5%. If the count convention is based on 30/360, figure out the accrued interest on this bond as of 5 June 2013.",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.06\n    coupon_frequency = 2  # semi-annual\n    days_in_period = 180  # 30/360 convention\n    days_since_last_coupon = 61  # June 5 to April 5\n\n    # Do math calculation to get the answer\n    annual_coupon = face_value * coupon_rate\n    coupon_amount = annual_coupon / coupon_frequency\n    daily_interest = coupon_amount / days_in_period\n    accrued_interest = daily_interest * days_since_last_coupon\n\n    # return answer\n    return round(accrued_interest, 4)\n```\n\nThis program calculates the accrued interest for the bond as of June 5, 2013. Here's a breakdown of the calculation:\n\n1. We define the necessary variables based on the given information.\n2. We calculate the annual coupon payment and then the amount for each semi-annual payment.\n3. Using the 30/360 day count convention, we determine the daily interest.\n4. We multiply the daily interest by the number of days since the last coupon payment (61 days from April 5 to June 5).\n5. The result is rounded to 4 decimal places for precision.\n\nThis program will return the accrued interest as a decimal number representing the dollar amount. For example, if the result is 1.0167, it means the accrued interest is $1.0167."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-29",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Steel Production acquired a new machine for its production line at an expense of $600,000. The machine is expected to be useful for 10 years and has an approximate residual value of $50,000. Using the straight-line method, what amount of depreciation should Steel report in 2010 for financial accounting?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 600000\n    useful_life = 10\n    residual_value = 50000\n    \n    # Do math calculation to get the answer\n    depreciable_amount = initial_cost - residual_value\n    annual_depreciation = depreciable_amount / useful_life\n    \n    # return answer\n    return annual_depreciation\n```\n\nThis program calculates the annual depreciation using the straight-line method for the machine acquired by Steel Production. The variables are defined based on the information provided in the question, and the calculation follows the straight-line depreciation formula: (Cost - Residual Value) / Useful Life. The result represents the amount of depreciation that Steel should report in 2010 for financial accounting purposes."
        ]
    },
    {
        "tables": [
            "| Asset | Annual Return | Volatility of Annual Return | Value |\n|-------|---------------|-----------------------------|-------|\n| A     | 10%           | 25%                         | 100   |\n| B     | 20%           | 20%                         | 50    |"
        ],
        "topic": "Risk Management",
        "question_id": "test-30",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 250 trading days in a year, how would the daily VaR at 99% level change if the financial institution sells $50 worth of asset A and purchases $50 worth of asset B, given that the institution's trading portfolio includes two assets with a Correlation (A, B) = 0.2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_A_return = 0.10\n    asset_A_volatility = 0.25\n    asset_A_value = 100\n    asset_B_return = 0.20\n    asset_B_volatility = 0.20\n    asset_B_value = 50\n    correlation_AB = 0.2\n    confidence_level = 0.99\n    trading_days = 250\n    transfer_amount = 50\n\n    # Do math calculation to get the answer\n    \n    # Calculate initial portfolio values\n    initial_A_value = asset_A_value\n    initial_B_value = asset_B_value\n    initial_portfolio_value = initial_A_value + initial_B_value\n\n    # Calculate new portfolio values after transfer\n    new_A_value = initial_A_value - transfer_amount\n    new_B_value = initial_B_value + transfer_amount\n    new_portfolio_value = new_A_value + new_B_value\n\n    # Calculate portfolio weights before and after transfer\n    initial_w_A = initial_A_value / initial_portfolio_value\n    initial_w_B = initial_B_value / initial_portfolio_value\n    new_w_A = new_A_value / new_portfolio_value\n    new_w_B = new_B_value / new_portfolio_value\n\n    # Calculate initial portfolio volatility\n    initial_portfolio_variance = (initial_w_A**2 * asset_A_volatility**2 +\n                                  initial_w_B**2 * asset_B_volatility**2 +\n                                  2 * initial_w_A * initial_w_B * correlation_AB * asset_A_volatility * asset_B_volatility)\n    initial_portfolio_volatility = initial_portfolio_variance**0.5\n\n    # Calculate new portfolio volatility\n    new_portfolio_variance = (new_w_A**2 * asset_A_volatility**2 +\n                              new_w_B**2 * asset_B_volatility**2 +\n                              2 * new_"
        ]
    },
    {
        "tables": [
            "|Maturity(years)|STRIPS Price|Spot Rate|Forward Rate|\n|---|---|---|---|\n|0.5|98.7654|2.50%|2.50%|\n|1.0|97.0662|3.00%|3.50%|\n|1.5|95.2652|3.26%|3.78%|\n|2.0|93.2775|?.??%|?.??%|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-31",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the chart, what is the worth of a 1.5-year, 6% semiannual coupon, $100 face value bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.06\n    coupon_frequency = 2\n    maturity = 1.5\n    spot_rates = {0.5: 0.0250, 1.0: 0.0300, 1.5: 0.0326}\n\n    # Do math calculation to get the answer\n    bond_value = 0\n    for t in [0.5, 1.0, 1.5]:\n        if t < maturity:\n            coupon_payment = face_value * (coupon_rate / coupon_frequency)\n            discount_factor = 1 / (1 + spot_rates[t])**(t * coupon_frequency)\n            bond_value += coupon_payment * discount_factor\n        else:\n            final_payment = face_value * (1 + coupon_rate / coupon_frequency)\n            discount_factor = 1 / (1 + spot_rates[t])**(t * coupon_frequency)\n            bond_value += final_payment * discount_factor\n    \n    # return answer\n    return round(bond_value, 4)\n```\n\nThis Python program calculates the value of a 1.5-year, 6% semiannual coupon, $100 face value bond using the spot rates provided in the table. Here's a breakdown of the solution:\n\n1. We define the bond characteristics: face value, coupon rate, coupon frequency, and maturity.\n2. We create a dictionary of spot rates for the given maturities.\n3. We iterate through the cash flow times (0.5, 1.0, 1.5 years).\n4. For each time point before maturity, we calculate the coupon payment and discount it using the corresponding spot rate.\n5. At maturity, we calculate the final payment (face value plus last coupon) and discount it.\n6. We sum up all the present values to get the bond value.\n7. Finally, we round the result to 4 decimal places and return it.\n\nThis program will give you the worth of the bond based on the provided spot rates"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-32",
        "python_solution": "",
        "ground_truth": null,
        "question": "The hedge fund known as Sovereign Wealth starts out with an initial capital of $300 million. They levy a 1% management fee anchored on year-end asset value and a 20% incentive fee that applies when returns surpass an 8% hurdle rate. Considering that Sovereign Wealth's first-year appreciation rate stands at 10% and its management fees are predicated on valuation at period's end, what will be the net return for the investor, provided the performance fee is computed after subtracting the management fee?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 300000000  # $300 million\n    appreciation_rate = 0.10  # 10%\n    management_fee_rate = 0.01  # 1%\n    incentive_fee_rate = 0.20  # 20%\n    hurdle_rate = 0.08  # 8%\n\n    # Do math calculation to get the answer\n    gross_return = initial_capital * (1 + appreciation_rate)\n    management_fee = gross_return * management_fee_rate\n    \n    profit = gross_return - initial_capital\n    hurdle_amount = initial_capital * hurdle_rate\n    excess_return = max(0, profit - hurdle_amount)\n    \n    incentive_fee = excess_return * incentive_fee_rate\n    \n    total_fees = management_fee + incentive_fee\n    net_return = gross_return - total_fees\n    \n    investor_net_return_rate = (net_return / initial_capital) - 1\n    \n    # return answer\n    return investor_net_return_rate\n```"
        ]
    },
    {
        "tables": [
            "| Asset class | Portfolio Weight(%) | Benchmark Weight(%) | Portfolio Return(%) | Benchmark Return(%) |\n| ----------- | ------------------ | ------------------- | ------------------- | ------------------ |\n| Domestic equities | 55 | 40 | 10 | 8 |\n| International equities | 20 | 30 | 10 | 9 |\n| Bonds | 25 | 30 | 5 | 6 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-33",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the asset class returns for the 2016 financial year, what is the value added or active return for the supervised investment portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_classes = ['Domestic equities', 'International equities', 'Bonds']\n    portfolio_weights = [0.55, 0.20, 0.25]\n    benchmark_weights = [0.40, 0.30, 0.30]\n    portfolio_returns = [0.10, 0.10, 0.05]\n    benchmark_returns = [0.08, 0.09, 0.06]\n\n    # Do math calculation to get the answer\n    portfolio_return = sum(w * r for w, r in zip(portfolio_weights, portfolio_returns))\n    benchmark_return = sum(w * r for w, r in zip(benchmark_weights, benchmark_returns))\n    \n    active_return = portfolio_return - benchmark_return\n\n    # return answer\n    return active_return\n```\n\nThis Python program calculates the active return (value added) for the supervised investment portfolio based on the given data. Here's how it works:\n\n1. We define lists for the asset classes, portfolio weights, benchmark weights, portfolio returns, and benchmark returns.\n\n2. We calculate the total portfolio return by multiplying each asset class's portfolio weight by its return and summing these products.\n\n3. We calculate the total benchmark return in the same way, using benchmark weights and returns.\n\n4. The active return is the difference between the portfolio return and the benchmark return.\n\n5. Finally, we return the active return.\n\nThis program will return the value added or active return as a decimal. To convert it to a percentage, you could multiply the result by 100."
        ]
    },
    {
        "tables": [
            "| Exhibit 4.Arch way's 2015 Forecasted Price and Volume Changes ||\n| --- | --- |\n| Average price increase per unit | 5.00% |\n| Volume growth | -3.00% |"
        ],
        "topic": "Accounting",
        "question_id": "test-34",
        "python_solution": "",
        "ground_truth": null,
        "question": "French indicates that for the recently concluded year (2014), the cost of goods sold by Bridgeport was 30% of sales. When projecting Bridgeport's income statement for 2015, French assumes that all firms in the industry will encounter an inflation rate of 8% on the cost of goods sold. Exhibit 4 presents French’s predictions about Bridgeport’s price and volume variations. According to Exhibit 4, what is Bridgeport’s anticipated gross profit margin for 2015?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cogs_percentage_2014 = 0.30\n    inflation_rate = 0.08\n    price_increase = 0.05\n    volume_change = -0.03\n\n    # Do math calculation to get the answer\n    \n    # Calculate the change in sales\n    sales_change = (1 + price_increase) * (1 + volume_change) - 1\n    \n    # Calculate new sales percentage (relative to 2014 sales)\n    new_sales_percentage = 1 + sales_change\n    \n    # Calculate new COGS percentage (relative to 2014 sales)\n    new_cogs_percentage = cogs_percentage_2014 * (1 + inflation_rate)\n    \n    # Calculate COGS as a percentage of 2015 sales\n    cogs_percentage_2015 = new_cogs_percentage / new_sales_percentage\n    \n    # Calculate gross profit margin for 2015\n    gross_profit_margin_2015 = 1 - cogs_percentage_2015\n    \n    # Convert to percentage\n    gross_profit_margin_2015_percent = gross_profit_margin_2015 * 100\n\n    # return answer\n    return round(gross_profit_margin_2015_percent, 2)\n```\n\nThis Python program calculates Bridgeport's anticipated gross profit margin for 2015 based on the given information. Here's a breakdown of the calculation:\n\n1. We define the known variables: COGS percentage for 2014, inflation rate, price increase, and volume change.\n2. We calculate the overall change in sales considering both price increase and volume change.\n3. We determine the new sales and COGS percentages relative to 2014 sales.\n4. We then calculate COGS as a percentage of 2015 sales by dividing the new COGS percentage by the new sales percentage.\n5. The gross profit margin is calculated as 1 minus the COGS percentage for 2015.\n6. Finally, we convert the result to a percentage and round it to two decimal places.\n\nThe function will return the anticipated gross profit margin for 2"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-35",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a periodic inventory system, what was the cost of sales in 2008 (€ thousands) for Nutmeg Enterprises, which launched in 2007 and employs the weighted average cost method? During its first year, the company bought 45,000 units of inventory for €10 each and sold 40,000 units for €20 each. The following year, it acquired an additional 50,000 units at €11 each and sold 45,000 units for €22 each.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    units_purchased_2007 = 45000\n    cost_per_unit_2007 = 10\n    units_sold_2007 = 40000\n    \n    units_purchased_2008 = 50000\n    cost_per_unit_2008 = 11\n    units_sold_2008 = 45000\n    \n    # Do math calculation to get the answer\n    total_units = units_purchased_2007 + units_purchased_2008\n    total_cost = (units_purchased_2007 * cost_per_unit_2007) + (units_purchased_2008 * cost_per_unit_2008)\n    \n    weighted_avg_cost = total_cost / total_units\n    \n    cost_of_sales_2008 = units_sold_2008 * weighted_avg_cost\n    \n    # Convert to thousands of euros and round to nearest thousand\n    cost_of_sales_2008_thousands = round(cost_of_sales_2008 / 1000)\n    \n    # return answer\n    return cost_of_sales_2008_thousands\n```\n\nThis Python program calculates the cost of sales for Nutmeg Enterprises in 2008 using the weighted average cost method in a periodic inventory system. Here's a breakdown of the calculation:\n\n1. We define the variables for units purchased, cost per unit, and units sold for both 2007 and 2008.\n2. We calculate the total units and total cost across both years.\n3. We compute the weighted average cost per unit.\n4. We multiply the units sold in 2008 by the weighted average cost to get the cost of sales for 2008.\n5. Finally, we convert the result to thousands of euros and round to the nearest thousand before returning the answer.\n\nThis approach takes into account all inventory purchased up to the point of the 2008 sales, which is appropriate for the weighted average cost method in a periodic inventory system."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-36",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a security is valued at 88.692 per 100 of par value, and the security's complete price decreases to 88.642 if the yield-to-maturity rises by 10 basis points and increases to 88.762 if the yield-to-maturity is reduced by 10 basis points, what is the approximate convexity of the security?",
        "output": [
            "Here's a Python program to calculate the approximate convexity of the security based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    price = 88.692\n    price_up = 88.762\n    price_down = 88.642\n    yield_change = 0.001  # 10 basis points = 0.1% = 0.001\n\n    # Do math calculation to get the answer\n    price_change_up = price_up - price\n    price_change_down = price_down - price\n    \n    # Convexity formula: (P+ + P- - 2P0) / (2 * P0 * (Δy)^2)\n    convexity = (price_up + price_down - 2 * price) / (2 * price * yield_change ** 2)\n    \n    # Convert to per 100 of par value\n    convexity_per_100 = convexity * 100\n\n    # return answer\n    return convexity_per_100\n```\n\nThis program calculates the approximate convexity of the security using the following steps:\n\n1. We define the variables for the current price, price after yield increase, price after yield decrease, and the yield change (10 basis points = 0.001).\n\n2. We calculate the price changes for both the upward and downward yield movements.\n\n3. We use the convexity formula: (P+ + P- - 2P0) / (2 * P0 * (Δy)^2), where:\n   - P+ is the price after yield decrease (price_up)\n   - P- is the price after yield increase (price_down)\n   - P0 is the current price\n   - Δy is the yield change\n\n4. We multiply the result by 100 to express it per 100 of par value.\n\n5. Finally, we return the calculated convexity.\n\nThis program will return the approximate convexity of the security per 100 of par value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-37",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of 2013, company N released bonds with a face value of $2,000,000 that would mature in 5 years. With the market interest rate being 7%, the bonds will provide an 8% coupon payment every 31st December. What would be the interest expenditure according to the effective interest rate method on the 31st December 2013?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    market_rate = 0.07\n    coupon_rate = 0.08\n    years_to_maturity = 5\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the present value of the bond\n    coupon_payment = face_value * coupon_rate\n    present_value = coupon_payment * (1 - (1 + market_rate) ** -years_to_maturity) / market_rate\n    present_value += face_value / (1 + market_rate) ** years_to_maturity\n    \n    # Calculate the bond discount\n    discount = face_value - present_value\n    \n    # Calculate the effective interest for the first year\n    effective_interest = present_value * market_rate\n    \n    # Calculate the interest expense for 2013\n    interest_expense = effective_interest\n    \n    # return answer\n    return round(interest_expense, 2)\n```\n\nThis Python program calculates the interest expenditure for the first year (2013) using the effective interest rate method. Here's a breakdown of the steps:\n\n1. We define the variables: face value, market interest rate, coupon rate, and years to maturity.\n\n2. We calculate the present value of the bond using the formula for the present value of an annuity (for the coupon payments) plus the present value of the face value at maturity.\n\n3. We calculate the bond discount, which is the difference between the face value and the present value.\n\n4. We calculate the effective interest for the first year by multiplying the present value of the bond by the market interest rate.\n\n5. For the first year, the interest expense is equal to the effective interest.\n\n6. Finally, we return the interest expense rounded to two decimal places.\n\nThis program will give you the interest expenditure for December 31, 2013, according to the effective interest rate method."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-38",
        "python_solution": "",
        "ground_truth": null,
        "question": "If at the start of the year, Alpine Peak Investments, a hedge fund, had a portfolio valued at $475,000,000, which increased to $541,500,000 after a year, what would be the efficient yield for an investor? This is keeping in mind that the hedge fund levies a 1.5% management fee on the final portfolio value and a 10% incentive fee that are calculated separately.",
        "output": [
            "def solution():\n    # Define variables name and value\n    initial_value = 475000000\n    final_value = 541500000\n    management_fee_rate = 0.015\n    incentive_fee_rate = 0.10\n\n    # Do math calculation to get the answer\n    gross_profit = final_value - initial_value\n    management_fee = final_value * management_fee_rate\n    incentive_fee = gross_profit * incentive_fee_rate\n    total_fees = management_fee + incentive_fee\n    net_profit = gross_profit - total_fees\n    efficient_yield = (net_profit / initial_value) * 100\n\n    # return answer\n    return round(efficient_yield, 2)\n\n```\n\nThis Python program calculates the efficient yield for an investor in Alpine Peak Investments hedge fund. Here's a breakdown of the calculation:\n\n1. We define the initial and final portfolio values, as well as the management and incentive fee rates.\n2. We calculate the gross profit by subtracting the initial value from the final value.\n3. The management fee is calculated as 1.5% of the final portfolio value.\n4. The incentive fee is calculated as 10% of the gross profit.\n5. We sum up the total fees.\n6. The net profit is calculated by subtracting the total fees from the gross profit.\n7. Finally, we calculate the efficient yield as the percentage of net profit relative to the initial investment.\n8. The result is rounded to two decimal places for better readability.\n\nThe function will return the efficient yield as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-39",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a daily compounded annual interest rate of 2.5%, how long would it take for Alex, who currently has an investment of $1 million, to save up to his required retirement goal of $2million for his everyday costs?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 1000000\n    target_amount = 2000000\n    annual_rate = 0.025\n    daily_rate = annual_rate / 365\n\n    # Do math calculation to get the answer\n    current_amount = initial_investment\n    days = 0\n    while current_amount < target_amount:\n        current_amount *= (1 + daily_rate)\n        days += 1\n\n    years = days / 365\n\n    # return answer\n    return years\n```\n\nThis Python program calculates how long it would take for Alex's investment to grow from $1 million to $2 million with a daily compounded annual interest rate of 2.5%. Here's a breakdown of the solution:\n\n1. We define the initial investment, target amount, annual interest rate, and calculate the daily rate.\n\n2. We use a while loop to simulate the daily compounding. Each day, we increase the current amount by the daily rate and increment the day count.\n\n3. Once the target amount is reached, we convert the number of days to years.\n\n4. The function returns the number of years it would take to reach the goal.\n\nThis solution takes into account daily compounding, which is more accurate than using a simple compound interest formula. The result will be the number of years (including fractional years) it takes to reach the $2 million goal."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-40",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financial expert predicts that a share may have a $2 dividend next year and could be sold for $38 by the end of next year. What would the share's value be if the required rate of return is 20%?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_dividend = 2\n    expected_price = 38\n    required_rate_of_return = 0.20  # 20% expressed as a decimal\n\n    # Do math calculation to get the answer\n    present_value = (expected_dividend + expected_price) / (1 + required_rate_of_return)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis program calculates the present value of the share based on the given information:\n\n1. We define the variables:\n   - `expected_dividend`: The predicted dividend of $2 for next year\n   - `expected_price`: The predicted selling price of $38 by the end of next year\n   - `required_rate_of_return`: The required rate of return of 20% (expressed as 0.20)\n\n2. We calculate the present value using the dividend discount model formula:\n   Present Value = (Expected Dividend + Expected Price) / (1 + Required Rate of Return)\n\n3. We round the result to two decimal places for a more practical representation of currency.\n\n4. The function returns the calculated present value, which represents the share's value given the provided information and required rate of return.\n\nWhen you run this function, it will return the share's value based on the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-41",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business is pondering on the idea of transitioning from a completely equity-based capital structure to a capital structure comprising of equal parts of equity and debt, keeping assets constant. This alteration would decrease the net income by 30%. If the present return on equity (ROE) is 10%, what would the ROE be with the suggested capital structure?",
        "output": [
            "def solution():\n    # Define variables name and value\n    current_roe = 0.10  # 10% ROE\n    net_income_decrease = 0.30  # 30% decrease in net income\n    equity_ratio_new = 0.50  # Equal parts equity and debt, so equity is now 50%\n\n    # Do math calculation to get the answer\n    \n    # Calculate the new net income as a proportion of the old\n    new_net_income_ratio = 1 - net_income_decrease\n    \n    # The new equity is half of the original (as we're moving to 50% equity)\n    equity_ratio_old = 1  # Originally 100% equity\n    equity_ratio_new = 0.50  # Now 50% equity\n    \n    # Calculate the new ROE\n    new_roe = (current_roe * new_net_income_ratio) / (equity_ratio_new / equity_ratio_old)\n\n    # return answer\n    return new_roe\n\n```\n\nThis Python program calculates the new Return on Equity (ROE) based on the given information. Here's a breakdown of the calculation:\n\n1. We start with the current ROE of 10% and the fact that net income will decrease by 30%.\n2. We calculate the new net income as a proportion of the old (70% of the original).\n3. We account for the fact that equity is now only half of what it was before (50% instead of 100%).\n4. The new ROE is calculated by adjusting the current ROE for both the decrease in net income and the decrease in equity.\n\nThe function will return the new ROE as a decimal. To get the percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [
            "|                     | Value  |\n|---------------------|--------|\n| Initial Value       | 87.1876|\n| 2-year shift for 1bp| 87.3212|\n| 5-year shift for 1bp| 87.2545|\n| 10-year shift for 1bp|87.1454|\n| 30-year shift for 1bp|87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-42",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given table, what is the key rate duration for a shift of 10 years for a zero-coupon bond?",
        "output": [
            "def solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    shift_10_year = 87.1454\n    basis_point = 0.0001  # 1 basis point = 0.01% = 0.0001\n\n    # Do math calculation to get the answer\n    value_change = initial_value - shift_10_year\n    key_rate_duration = value_change / (initial_value * basis_point)\n\n    # return answer\n    return key_rate_duration\n\n```\n\nThis Python program calculates the key rate duration for a shift of 10 years for a zero-coupon bond based on the given table. Here's how it works:\n\n1. We define the initial value and the value after a 10-year shift for 1 basis point, as provided in the table.\n2. We define a basis point as 0.0001 (1 bp = 0.01% = 0.0001).\n3. We calculate the change in value by subtracting the 10-year shift value from the initial value.\n4. We then calculate the key rate duration using the formula: \n   Key Rate Duration = (Change in Value) / (Initial Value * Basis Point Change)\n5. Finally, we return the calculated key rate duration.\n\nThis program will return the key rate duration for a 10-year shift, which represents the sensitivity of the bond's price to a change in the 10-year spot rate."
        ]
    },
    {
        "tables": [
            "| X   | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| P(X)| 0.14| 0.09| 0.19| 0.25| 0.17| 0.06| 0.03| 0.07|\n\nNote: A discrete random variable X follows the probability distribution as given in the table above."
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-43",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data, what is the value of P(3≤X≤6)?",
        "output": [
            "Here's the Python program to calculate P(3≤X≤6) based on the given probability distribution:\n\n```python\ndef solution():\n    # Define variables name and value\n    probabilities = {\n        3: 0.25,\n        4: 0.17,\n        5: 0.06,\n        6: 0.03\n    }\n    \n    # Do math calculation to get the answer\n    probability_sum = sum(probabilities.values())\n    \n    # return answer\n    return probability_sum\n```\n\nThis program does the following:\n\n1. We define a dictionary `probabilities` that contains the probabilities for X values from 3 to 6, as given in the table.\n\n2. We calculate the sum of these probabilities using the `sum()` function on the values of the dictionary. This gives us P(3≤X≤6).\n\n3. We return this sum as the answer.\n\nThe program will return 0.51, which is the probability that X is between 3 and 6 (inclusive) based on the given distribution."
        ]
    },
    {
        "tables": [
            "| company | Share price | Call premium | Strike price |\n|---------|-------------|--------------|--------------|\n| NZT     | 53.37       | 1.62         | 58           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-44",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data in Exhibit 1, if Michael is planning to implement a covered call strategy, what would be the breakeven share price for this strategy? Exhibit 1: Share Price and Option Premiums (share prices and option premiums in $)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price = 53.37\n    call_premium = 1.62\n\n    # Do math calculation to get the answer\n    breakeven_price = share_price - call_premium\n\n    # return answer\n    return round(breakeven_price, 2)\n```\n\nThis Python program calculates the breakeven share price for a covered call strategy based on the given data.\n\nHere's an explanation of the calculation:\n\n1. We define the current share price and the call premium from the provided table.\n\n2. The breakeven price for a covered call strategy is calculated by subtracting the call premium from the current share price. This is because the investor receives the premium upfront, effectively reducing their cost basis in the stock.\n\n3. We round the result to two decimal places to represent it as a currency value.\n\n4. The function returns this calculated breakeven price.\n\nWhen you run this function, it will return 51.75, which represents the breakeven share price in dollars for Michael's covered call strategy on NZT stock."
        ]
    },
    {
        "tables": [
            "| Acquisition cost                                       | €2,300,000           |\n|-------------------------------------------------------|----------------------|\n| Acquisition date                                      | 1 January 2008       |\n| Expected residual value at time of acquisition        | €500,000             |\n| The customer list is expected to result in extra sales for three years after acquisition. The present value of these expected extra sales exceeds the cost of the list. | |"
        ],
        "topic": "Accounting",
        "question_id": "test-45",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an analyst in the finance team of a French company, PLECCO Inc., calculates the amortization of a client list, an intangible asset, for the fiscal year concluded 31 December 2009 using the straight-line method, what would be the sum of accumulated amortization associated with the client list as of 31 December 2009, based on the data she has collected about the asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 2300000\n    residual_value = 500000\n    useful_life_years = 3\n    years_since_acquisition = 2  # 2008 to 2009, inclusive\n\n    # Do math calculation to get the answer\n    depreciable_amount = acquisition_cost - residual_value\n    annual_amortization = depreciable_amount / useful_life_years\n    accumulated_amortization = annual_amortization * years_since_acquisition\n\n    # return answer\n    return accumulated_amortization\n```\n\nThis Python program calculates the accumulated amortization for the client list as of 31 December 2009. Here's a breakdown of the calculation:\n\n1. We define the necessary variables based on the given information.\n2. We calculate the depreciable amount by subtracting the residual value from the acquisition cost.\n3. We determine the annual amortization by dividing the depreciable amount by the useful life (3 years).\n4. We calculate the accumulated amortization by multiplying the annual amortization by the number of years since acquisition (2 years, as it includes 2008 and 2009).\n5. The function returns the accumulated amortization.\n\nWhen you run this function, it will return the accumulated amortization in euros. The result will be 1,200,000 euros, which represents the total amortization for the client list as of 31 December 2009."
        ]
    },
    {
        "tables": [
            "|                   | 2017($) | 2018($) |\n|-------------------|---------|---------|\n| net income        | 320,000 | 360,000 |\n| accounts receivable | 23,000  | 25,000  |\n| accounts payable  | 31,000  | 35,000  |\n| depreciation      | 7,000   | 7,000   |"
        ],
        "topic": "Accounting",
        "question_id": "test-46",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you compute the operational cash flow for the year 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 360000\n    accounts_receivable_2017 = 23000\n    accounts_receivable_2018 = 25000\n    accounts_payable_2017 = 31000\n    accounts_payable_2018 = 35000\n    depreciation_2018 = 7000\n    \n    # Do math calculation to get the answer\n    change_in_accounts_receivable = accounts_receivable_2018 - accounts_receivable_2017\n    change_in_accounts_payable = accounts_payable_2018 - accounts_payable_2017\n    \n    operational_cash_flow = net_income_2018 + depreciation_2018 - change_in_accounts_receivable + change_in_accounts_payable\n    \n    # return answer\n    return operational_cash_flow\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-47",
        "python_solution": "",
        "ground_truth": null,
        "question": "An agriculturist intends to sell 50,000 tons of soybeans in six months and opts to short futures contracts to protect against a decrease in price. The present price of soybeans is $508/ton, the contract size is 100 tons, with a soybean storage cost of 1.5% annually. The exponentially compounded rate is 5%, what's the cost of the futures contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quantity = 50000  # tons\n    current_price = 508  # $/ton\n    contract_size = 100  # tons\n    storage_cost_annual = 0.015  # 1.5% annually\n    time = 0.5  # 6 months = 0.5 years\n    rate = 0.05  # 5% exponentially compounded rate\n\n    # Do math calculation to get the answer\n    spot_price = current_price\n    storage_cost = spot_price * storage_cost_annual * time\n    future_price = spot_price * math.exp(rate * time) + storage_cost\n    \n    # Calculate the number of contracts needed\n    num_contracts = quantity / contract_size\n    \n    # Calculate the total cost of the futures contracts\n    contract_cost = future_price * contract_size * num_contracts\n\n    # return answer\n    return contract_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-48",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the effective annual rate (EAR) if the declared yearly interest rate is 20% and the compounding occurs on a monthly basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    declared_rate = 0.20  # 20% yearly interest rate\n    compounding_frequency = 12  # monthly compounding\n\n    # Do math calculation to get the answer\n    ear = (1 + declared_rate / compounding_frequency) ** compounding_frequency - 1\n\n    # return answer\n    return round(ear, 4)  # Rounding to 4 decimal places for readability\n```\n\nThis Python program calculates the Effective Annual Rate (EAR) based on the given information:\n\n1. We define the declared yearly interest rate as 20% (0.20 in decimal form) and the compounding frequency as 12 (for monthly compounding).\n\n2. We use the formula for EAR: EAR = (1 + r/n)^n - 1, where r is the declared rate and n is the number of compounding periods per year.\n\n3. The result is rounded to 4 decimal places for readability, which is a common practice in financial calculations.\n\nWhen you run this function, it will return the EAR as a decimal. To get the percentage, you would multiply the result by 100. The answer should be approximately 0.2191 or 21.91%."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-49",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the correlation coefficient of the returns of XYZ company and the overall market, given that the covariance of the returns is 0.009, the standard deviation of the overall market returns is 0.08, and the standard deviation of XYZ's returns is 0.15?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.009\n    market_std_dev = 0.08\n    xyz_std_dev = 0.15\n    \n    # Do math calculation to get the answer\n    correlation_coefficient = covariance / (market_std_dev * xyz_std_dev)\n    \n    # return answer\n    return correlation_coefficient\n```\n\nThis program calculates the correlation coefficient using the formula:\n\nCorrelation Coefficient = Covariance / (Standard Deviation of X * Standard Deviation of Y)\n\nWhere:\n- X is the overall market returns\n- Y is the XYZ company returns\n\nThe program defines the given values, performs the calculation, and returns the result. When you run this function, it will return the correlation coefficient between XYZ company's returns and the overall market returns."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-50",
        "python_solution": "",
        "ground_truth": null,
        "question": "The trader, Michael, is preparing to establish a regression hedge. He plans to sell a Treasury bond worth $500,000 and buy TIPS as a hedge. Based on past data, the DV01on the T-bond is 0.085, the DV01on the TIPS is 0.063, and the regression beta coefficient (hedge adjustment factor) is 1.1. How much TIPS should Michael acquire?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    tbond_value = 500000\n    tbond_dv01 = 0.085\n    tips_dv01 = 0.063\n    hedge_adjustment_factor = 1.1\n\n    # Do math calculation to get the answer\n    tbond_risk = tbond_value * tbond_dv01\n    tips_risk_needed = tbond_risk * hedge_adjustment_factor\n    tips_value = tips_risk_needed / tips_dv01\n\n    # return answer\n    return tips_value\n```\n\nThis Python program calculates the amount of TIPS (Treasury Inflation-Protected Securities) that Michael should acquire for his regression hedge. Here's a breakdown of the calculation:\n\n1. We define the given variables:\n   - The value of the Treasury bond to be sold: $500,000\n   - The DV01 (Dollar Value of 01) for the T-bond: 0.085\n   - The DV01 for the TIPS: 0.063\n   - The regression beta coefficient (hedge adjustment factor): 1.1\n\n2. We calculate the risk exposure of the T-bond by multiplying its value by its DV01.\n\n3. We determine the required risk exposure for the TIPS by multiplying the T-bond risk by the hedge adjustment factor.\n\n4. Finally, we calculate the value of TIPS needed by dividing the required TIPS risk exposure by the TIPS DV01.\n\nThe function will return the value of TIPS that Michael should acquire to establish the regression hedge."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-51",
        "python_solution": "",
        "ground_truth": null,
        "question": "Over the previous 36 months, the standard deviation of monthly returns within a fund's portfolio was recorded at 4.9%. What is the test statistic value to verify an assertion that this fund's investment approach results in a standard deviation of monthly returns of less than 5.0%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    observed_std_dev = 0.049  # 4.9% converted to decimal\n    hypothesized_std_dev = 0.05  # 5.0% converted to decimal\n    sample_size = 36  # 36 months\n    \n    # Do math calculation to get the answer\n    # The test statistic for a one-sample test about standard deviation is:\n    # (n-1) * s^2 / σ^2, where s is the sample standard deviation and σ is the hypothesized standard deviation\n    test_statistic = (sample_size - 1) * (observed_std_dev ** 2) / (hypothesized_std_dev ** 2)\n    \n    # return answer\n    return test_statistic\n```\n\nThis Python program calculates the test statistic for a one-sample test about the standard deviation. Here's a breakdown of the calculation:\n\n1. We define the observed standard deviation (4.9%), the hypothesized standard deviation (5.0%), and the sample size (36 months).\n\n2. We use the formula for the test statistic: (n-1) * s^2 / σ^2\n   Where:\n   n = sample size\n   s = observed standard deviation\n   σ = hypothesized standard deviation\n\n3. We calculate this value and return it as the test statistic.\n\nThis test statistic can be compared to the critical value from a chi-square distribution with (n-1) degrees of freedom to determine if we can reject the null hypothesis that the standard deviation is 5.0% or greater."
        ]
    },
    {
        "tables": [
            "|         | November 2010 |       | December 2010 |       |\n|---------|---------------|-------|---------------|-------|\n| Goods   | Quantity      | Price | Quantity      | Price |\n| Sugar   | 70kg          | £0.90/kg  | 120kg         | £1.00/kg  |\n| Cotton  | 60kg          | €0.60/kg  | 50kg          | €0.80/kg  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-52",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we set the base period for 2010's consumption to be November and the starting price index at 100, what would be the inflation rate after determining the December price index as a Laspeyres index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nov_sugar_qty = 70\n    nov_sugar_price = 0.90\n    nov_cotton_qty = 60\n    nov_cotton_price = 0.60\n    \n    dec_sugar_price = 1.00\n    dec_cotton_price = 0.80\n    \n    base_index = 100\n\n    # Do math calculation to get the answer\n    nov_total = (nov_sugar_qty * nov_sugar_price) + (nov_cotton_qty * nov_cotton_price)\n    dec_total = (nov_sugar_qty * dec_sugar_price) + (nov_cotton_qty * dec_cotton_price)\n    \n    laspeyres_index = (dec_total / nov_total) * base_index\n    \n    inflation_rate = ((laspeyres_index - base_index) / base_index) * 100\n\n    # return answer\n    return round(inflation_rate, 2)\n```\n\nThis Python program calculates the inflation rate based on the Laspeyres price index for the given data. Here's a breakdown of the solution:\n\n1. We define the quantities and prices for November (base period) and December for both sugar and cotton.\n2. We set the base index to 100 as specified in the question.\n3. We calculate the total value of goods for November and December using November's quantities (as per Laspeyres index formula).\n4. We compute the Laspeyres index by dividing December's total by November's total and multiplying by the base index.\n5. Finally, we calculate the inflation rate by finding the percentage change between the Laspeyres index and the base index.\n6. The result is rounded to two decimal places for clarity.\n\nThe function will return the inflation rate as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-53",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is interested in forecasting the earnings of his manufacturing plant in October 20X9, thus he employs income data from January 20X6 to September 20X9 as samples to create a AR(1) model, achieving the following outcome: Xt=293.5742+0.9387Xt−1X_t=293.5742+0.9387X_{t-1}Xt​=293.5742+0.9387Xt−1​ Can you determine the long-term average?",
        "output": [
            "Here's a Python program to calculate the long-term average for the given AR(1) model:\n\n```python\ndef solution():\n    # Define variables name and value\n    constant = 293.5742\n    coefficient = 0.9387\n\n    # Do math calculation to get the answer\n    # The long-term average (μ) for an AR(1) model is given by:\n    # μ = constant / (1 - coefficient)\n    long_term_average = constant / (1 - coefficient)\n\n    # return answer\n    return round(long_term_average, 4)\n```\n\nThis program calculates the long-term average for the AR(1) model:\n\n1. We define the constant term (293.5742) and the coefficient of the AR(1) term (0.9387) from the given equation.\n\n2. The long-term average (μ) for an AR(1) model is calculated using the formula:\n   μ = constant / (1 - coefficient)\n\n3. We apply this formula using the defined values.\n\n4. The result is rounded to 4 decimal places for precision.\n\n5. The calculated long-term average is returned as the answer.\n\nThis program will return the long-term average of the AR(1) model, which represents the value that the series is expected to converge to over time."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| 1. | Purchased a customer list for $100,000, which is expected to provide equal annual benefits for the next 4 years. |\n| 2. | Recorded $200,000 of goodwill in the acquisition of a competitor. It is estimated that the acquisition would provide substantial benefits for the company for at least the next 10 years. |\n| 3. | Spent $300,000 on media placements announcing the company had donated products and services to the community. The CEO believes the firm's reputation was enhanced substantially and the company will likely benefit from it for the next 5 years. |"
        ],
        "topic": "Accounting",
        "question_id": "test-54",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2010, certain incidents took place at a corporation. Given those incidents, what should be the corporation's documented amortization expense in 2011?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    customer_list_cost = 100000\n    customer_list_years = 4\n    goodwill_cost = 200000\n    goodwill_years = 10\n    media_cost = 300000  # Not amortizable\n\n    # Do math calculation to get the answer\n    customer_list_amortization = customer_list_cost / customer_list_years\n    goodwill_amortization = goodwill_cost / goodwill_years\n    \n    total_amortization = customer_list_amortization + goodwill_amortization\n\n    # return answer\n    return total_amortization\n```\n\nThis Python program calculates the amortization expense for 2011 based on the given information. Here's an explanation of the calculation:\n\n1. The customer list ($100,000) is amortized over 4 years, so the annual amortization is $100,000 / 4 = $25,000.\n\n2. The goodwill ($200,000) is amortized over 10 years, so the annual amortization is $200,000 / 10 = $20,000.\n\n3. The media placement expense ($300,000) is not amortizable. Even though the CEO believes it will benefit the company for 5 years, advertising expenses are generally not capitalized or amortized under accounting principles.\n\nThe total amortization expense for 2011 is the sum of the customer list amortization and the goodwill amortization: $25,000 + $20,000 = $45,000.\n\nThe function will return this value (45000) as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-55",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier is considering a property valued at $2.5 million. To purchase this property, he needs to pay up front 25% of the total cost and the remaining amount is to be financed at 10%, compounded monthly for a duration of 25 years. Determine the monthly mortgage payment for this scenario.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    property_value = 2500000\n    down_payment_percentage = 0.25\n    loan_amount = property_value * (1 - down_payment_percentage)\n    annual_interest_rate = 0.10\n    monthly_interest_rate = annual_interest_rate / 12\n    loan_term_years = 25\n    number_of_payments = loan_term_years * 12\n\n    # Do math calculation to get the answer\n    monthly_payment = loan_amount * (monthly_interest_rate * (1 + monthly_interest_rate)**number_of_payments) / ((1 + monthly_interest_rate)**number_of_payments - 1)\n\n    # return answer\n    return round(monthly_payment, 2)\n```\n\nThis Python program calculates the monthly mortgage payment for the given scenario. Here's a breakdown of the calculation:\n\n1. We first define the variables based on the given information.\n2. We calculate the loan amount by subtracting the down payment from the property value.\n3. We convert the annual interest rate to a monthly rate by dividing it by 12.\n4. We calculate the total number of payments over the loan term.\n5. We use the mortgage payment formula to calculate the monthly payment:\n   P = L[c(1 + c)^n]/[(1 + c)^n - 1]\n   Where:\n   P = monthly payment\n   L = loan amount\n   c = monthly interest rate\n   n = number of payments\n6. We round the result to two decimal places for cents accuracy.\n7. Finally, we return the calculated monthly payment.\n\nWhen you run this function, it will return the monthly mortgage payment for the given scenario."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-56",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a reversed head and shoulders formation, if the collar is at €100, the shoulders are priced at €90, and the head is at €75. What is the intended price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    collar_price = 100\n    shoulder_price = 90\n    head_price = 75\n\n    # Do math calculation to get the answer\n    price_difference = collar_price - head_price\n    intended_price = collar_price + price_difference\n\n    # return answer\n    return intended_price\n```\n\nThis Python program calculates the intended price for a reversed head and shoulders formation in technical analysis. Here's how it works:\n\n1. We define the known prices:\n   - `collar_price`: The price at the collar (neckline) is €100\n   - `shoulder_price`: The price at the shoulders is €90\n   - `head_price`: The price at the head is €75\n\n2. We calculate the price difference between the collar and the head:\n   `price_difference = collar_price - head_price`\n\n3. In a reversed head and shoulders pattern, the expected move after the breakout is typically equal to the distance from the head to the neckline (collar). So, we add this difference to the collar price to get the intended price:\n   `intended_price = collar_price + price_difference`\n\n4. Finally, we return the intended price.\n\nThis calculation gives us the projected target price after the breakout in a reversed head and shoulders pattern. The shoulder price is not used in this calculation but is provided for context of the formation."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|--------------------|--------------------------------|\n| Equity   | 40                 | 30                             |\n| Bond     | 60                 | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-57",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the covariance between stocks and bonds is 0.058, what is the projected standard deviation of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equity_weight = 0.40\n    bond_weight = 0.60\n    equity_std_dev = 0.30\n    bond_std_dev = 0.15\n    covariance = 0.058\n\n    # Do math calculation to get the answer\n    variance_equity = (equity_weight * equity_std_dev) ** 2\n    variance_bond = (bond_weight * bond_std_dev) ** 2\n    covariance_term = 2 * equity_weight * bond_weight * covariance\n\n    portfolio_variance = variance_equity + variance_bond + covariance_term\n    portfolio_std_dev = (portfolio_variance) ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis Python function calculates the projected standard deviation of the portfolio using the following steps:\n\n1. Define the variables based on the given information.\n2. Calculate the variance contribution from equity and bonds separately.\n3. Calculate the covariance term.\n4. Sum up the variance components to get the portfolio variance.\n5. Take the square root of the portfolio variance to get the portfolio standard deviation.\n6. Return the calculated portfolio standard deviation.\n\nThe function will return the projected standard deviation of the portfolio as a decimal. To get the percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-58",
        "python_solution": "",
        "ground_truth": null,
        "question": "During the same period last year, the stock price of Company H surged by 2.5 times its initial price. What was the continuously compounded return on the company's stock price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 1  # We can use any arbitrary initial price\n    final_price = 2.5  # The price surged by 2.5 times\n\n    # Do math calculation to get the answer\n    import math\n    continuously_compounded_return = math.log(final_price / initial_price)\n\n    # return answer\n    return continuously_compounded_return\n```\n\nThis Python function calculates the continuously compounded return for Company H's stock price that surged by 2.5 times its initial price.\n\nHere's an explanation of the calculation:\n\n1. We set an arbitrary initial price of 1 and a final price of 2.5 (2.5 times the initial price).\n2. The formula for continuously compounded return is: ln(final price / initial price)\n3. We use the natural logarithm (math.log) to calculate this.\n\nThe function will return approximately 0.9163, which represents a continuously compounded return of about 91.63%."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-59",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a portfolio contains 80 assets, what should be the estimated number of covariances?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_assets = 80\n\n    # Do math calculation to get the answer\n    num_covariances = (num_assets * (num_assets - 1)) // 2\n\n    # return answer\n    return num_covariances\n```\n\nThis Python program calculates the number of covariances in a portfolio with 80 assets. Here's an explanation of the calculation:\n\n1. In a portfolio with n assets, the number of unique covariances is given by the formula: n * (n - 1) / 2.\n\n2. This is because:\n   - For each asset, we need to calculate its covariance with every other asset.\n   - We don't need to calculate the covariance of an asset with itself.\n   - The covariance of asset A with asset B is the same as the covariance of asset B with asset A, so we only need to calculate this once.\n\n3. In this case, with 80 assets:\n   80 * (80 - 1) / 2 = 80 * 79 / 2 = 3160\n\n4. We use integer division (//) to ensure we get an integer result.\n\nThe function will return 3160, which is the number of unique covariances in a portfolio of 80 assets."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-60",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the worth of a bond that has a face value of EUR 1,000, a three-year maturity period, and annually pays a 5% coupon? Please note the following spot rate curve: 1-year, 6%; 2-year, 7%; and 3-year, 8%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    maturity = 3\n    spot_rates = [0.06, 0.07, 0.08]\n\n    # Do math calculation to get the answer\n    bond_value = 0\n    for year in range(1, maturity + 1):\n        coupon_payment = face_value * coupon_rate\n        discount_factor = 1 / ((1 + spot_rates[year-1]) ** year)\n        bond_value += coupon_payment * discount_factor\n\n    # Add the present value of the face value at maturity\n    bond_value += face_value * (1 / ((1 + spot_rates[-1]) ** maturity))\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of the bond using the spot rate curve provided. Here's a breakdown of the solution:\n\n1. We define the variables: face value, coupon rate, maturity period, and the spot rates for each year.\n\n2. We calculate the present value of each coupon payment using the corresponding spot rate for that year.\n\n3. We add the present value of the face value, discounted at the 3-year spot rate.\n\n4. The function returns the total bond value, rounded to two decimal places.\n\nThis solution takes into account the different discount rates for each year, as provided by the spot rate curve, which gives a more accurate valuation of the bond compared to using a single discount rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-61",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the critical value at the 0.05 level of significance is 9.4877, when will Samantha, a data analyst, reject the null hypothesis while using a chi-square distributed test statistic to check the independence of two categorical variables?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    critical_value = 9.4877\n    significance_level = 0.05\n\n    # Do math calculation to get the answer\n    # In this case, no calculation is needed. The answer is a conditional statement.\n    answer = \"when the calculated chi-square test statistic is greater than 9.4877\"\n\n    # return answer\n    return answer\n```\n\nThis Python function provides the answer to the question. In a chi-square test for independence, the null hypothesis is rejected when the calculated test statistic exceeds the critical value. Given that the critical value at the 0.05 level of significance is 9.4877, Samantha will reject the null hypothesis when her calculated chi-square test statistic is greater than this value.\n\nNote that this function doesn't perform any calculations, as the question is asking for a condition rather than a numerical result. The answer is returned as a string describing when Samantha should reject the null hypothesis."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-62",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company has to choose two out of four executives to join the finance committee. What are the possible combinations of two that can be created?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_executives = 4\n    committee_size = 2\n    \n    # Do math calculation to get the answer\n    from math import comb\n    combinations = comb(total_executives, committee_size)\n    \n    # return answer\n    return combinations\n```\n\nThis Python program calculates the number of possible combinations when choosing 2 executives out of 4 to join the finance committee. Here's how it works:\n\n1. We define the variables:\n   - `total_executives`: The total number of executives (4)\n   - `committee_size`: The number of executives needed for the committee (2)\n\n2. We use the `comb` function from the `math` module to calculate the number of combinations. The `comb(n, k)` function calculates the number of ways to choose `k` items from `n` items without repetition and without order.\n\n3. The program returns the calculated number of combinations.\n\nWhen you run this function, it will return 6, which means there are 6 possible combinations of choosing 2 executives out of 4 for the finance committee."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-63",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier is interested in establishing a bull call spread with the next options: a call option with a strike price of $35 that costs $12.65, and a call option with a strike price of $40 priced at $8.85. What is the maximum profit that can be made from this bull call spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lower_strike = 35\n    higher_strike = 40\n    lower_option_cost = 12.65\n    higher_option_cost = 8.85\n    spread_width = higher_strike - lower_strike\n\n    # Do math calculation to get the answer\n    net_premium_paid = lower_option_cost - higher_option_cost\n    max_profit = spread_width - net_premium_paid\n\n    # return answer\n    return max_profit\n```\n\nThis Python program calculates the maximum profit that can be made from the bull call spread described in the question. Here's a breakdown of the calculation:\n\n1. We define the strike prices and costs of both options.\n2. We calculate the spread width (difference between higher and lower strike prices).\n3. We calculate the net premium paid (cost of buying the lower strike option minus the premium received from selling the higher strike option).\n4. The maximum profit is the spread width minus the net premium paid.\n\nThe function will return the maximum profit that can be made from this bull call spread."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-64",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is trying to determine the worth of Sovereign Corporation's shares. The corporation has recently issued a dividend of $0.58 per share. The dividends are projected to increase by 20 percent in the coming year and 15 percent in the following year. From the third year onwards, the dividends are expected to rise at a rate of 5.6 percent per annum perpetually. If the necessary rate of return is 8.3 percent, what is the inherent value of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.58\n    growth_rate_year1 = 0.20\n    growth_rate_year2 = 0.15\n    growth_rate_perpetual = 0.056\n    required_rate_of_return = 0.083\n\n    # Do math calculation to get the answer\n    dividend_year1 = current_dividend * (1 + growth_rate_year1)\n    dividend_year2 = dividend_year1 * (1 + growth_rate_year2)\n    dividend_year3 = dividend_year2 * (1 + growth_rate_perpetual)\n\n    # Calculate present value of first two years' dividends\n    pv_year1 = dividend_year1 / (1 + required_rate_of_return)\n    pv_year2 = dividend_year2 / (1 + required_rate_of_return)**2\n\n    # Calculate present value of perpetuity starting from year 3\n    pv_perpetuity = (dividend_year3 / (required_rate_of_return - growth_rate_perpetual)) / (1 + required_rate_of_return)**2\n\n    # Sum up all present values to get stock value\n    stock_value = pv_year1 + pv_year2 + pv_perpetuity\n\n    # return answer\n    return round(stock_value, 2)\n```"
        ]
    },
    {
        "tables": [
            "| Scenario | Probability of Scenario (%) | Amount Recovered ($) | Probability of Amount (%) |\n|----------|-----------------------------|----------------------|--------------------------|\n| 1        | 40                          | 50,000               | 60                       |\n| 1        | 40                          | 30,000               | 40                       |\n| 2        | 60                          | 80,000               | 90                       |\n| 2        | 60                          | 60,000               | 10                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-65",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the two scenarios proposed by a financial examiner, what is the anticipated recovery value from the principal of defaulted loans amounting to $100,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    scenario1_prob = 0.40\n    scenario2_prob = 0.60\n    \n    scenario1_amount1 = 50000\n    scenario1_prob1 = 0.60\n    scenario1_amount2 = 30000\n    scenario1_prob2 = 0.40\n    \n    scenario2_amount1 = 80000\n    scenario2_prob1 = 0.90\n    scenario2_amount2 = 60000\n    scenario2_prob2 = 0.10\n    \n    principal = 100000\n\n    # Do math calculation to get the answer\n    expected_recovery1 = scenario1_prob * (scenario1_amount1 * scenario1_prob1 + scenario1_amount2 * scenario1_prob2)\n    expected_recovery2 = scenario2_prob * (scenario2_amount1 * scenario2_prob1 + scenario2_amount2 * scenario2_prob2)\n    \n    total_expected_recovery = expected_recovery1 + expected_recovery2\n    \n    recovery_rate = total_expected_recovery / principal\n    \n    anticipated_recovery = recovery_rate * principal\n\n    # return answer\n    return anticipated_recovery\n```\n\nThis Python program calculates the anticipated recovery value from the principal of defaulted loans amounting to $100,000 based on the given scenarios and probabilities. Here's a breakdown of the calculation:\n\n1. We define all the probabilities and amounts for each scenario.\n2. We calculate the expected recovery for each scenario, considering the probability of the scenario and the weighted average of the possible recovery amounts within that scenario.\n3. We sum up the expected recoveries from both scenarios to get the total expected recovery.\n4. We calculate the recovery rate by dividing the total expected recovery by the principal amount.\n5. Finally, we multiply the recovery rate by the principal to get the anticipated recovery value.\n\nThe function will return this anticipated recovery value in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-66",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the chances of stock A underperforming the market, given an analyst's discovery that it has a 60% probability of outdoing the market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability_outperforming = 0.60\n\n    # Do math calculation to get the answer\n    probability_underperforming = 1 - probability_outperforming\n\n    # return answer\n    return probability_underperforming\n```\n\nThis Python program calculates the probability of stock A underperforming the market based on the given information. Here's how it works:\n\n1. We define the variable `probability_outperforming` as 0.60, which represents the 60% probability of the stock outdoing the market.\n\n2. To find the probability of underperforming, we subtract the probability of outperforming from 1. This is because the probabilities of all possible outcomes must sum to 1 (or 100%).\n\n3. The function returns the calculated probability of underperforming.\n\nWhen you run this function, it will return 0.40, which means there is a 40% chance (or 0.40 probability) of stock A underperforming the market."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-67",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bank that complies with the Basel I Accord issues a loan of $100 million to a company having a risk weight of 50%. What is the fundamental on-balance-sheet credit risk charge?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 100000000  # $100 million\n    risk_weight = 0.50  # 50%\n    basel_1_capital_requirement = 0.08  # 8%\n\n    # Do math calculation to get the answer\n    risk_weighted_asset = loan_amount * risk_weight\n    credit_risk_charge = risk_weighted_asset * basel_1_capital_requirement\n\n    # return answer\n    return credit_risk_charge\n```\n\nThis Python program calculates the fundamental on-balance-sheet credit risk charge for a bank complying with the Basel I Accord. Here's an explanation of the calculation:\n\n1. We define the loan amount as $100 million (100,000,000).\n2. The risk weight is given as 50% (0.50).\n3. Under Basel I, the minimum capital requirement is 8% (0.08) of risk-weighted assets.\n4. We calculate the risk-weighted asset by multiplying the loan amount by the risk weight.\n5. The credit risk charge is then calculated by multiplying the risk-weighted asset by the Basel I capital requirement (8%).\n\nThe function will return the credit risk charge, which represents the amount of capital the bank needs to hold against this loan under Basel I regulations."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-68",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood that a portfolio with an expected mean return of 8 percent and a standard deviation of 14 percent will have a return between 8 and 11 percent?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    import scipy.stats as stats\n    \n    mean_return = 0.08  # 8%\n    std_dev = 0.14  # 14%\n    lower_bound = 0.08  # 8%\n    upper_bound = 0.11  # 11%\n    \n    # Do math calculation to get the answer\n    z_score_lower = (lower_bound - mean_return) / std_dev\n    z_score_upper = (upper_bound - mean_return) / std_dev\n    \n    probability = stats.norm.cdf(z_score_upper) - stats.norm.cdf(z_score_lower)\n    \n    # return answer\n    return probability\n\n# Note: This solution requires the scipy library to be installed\n```\n\nThis program calculates the probability that a normally distributed portfolio return will fall between 8% and 11%, given a mean return of 8% and a standard deviation of 14%. Here's a breakdown of the steps:\n\n1. We import the `scipy.stats` module to use the normal distribution functions.\n2. We define the given values: mean return, standard deviation, and the lower and upper bounds of the range we're interested in.\n3. We calculate the z-scores for the lower and upper bounds.\n4. We use the cumulative distribution function (CDF) of the standard normal distribution to find the probability. The difference between the CDF at the upper z-score and the lower z-score gives us the probability of the return falling within this range.\n5. We return the calculated probability.\n\nThe returned value will be a decimal between 0 and 1, representing the likelihood (or probability) that the portfolio return will fall between 8% and 11%."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-69",
        "python_solution": "",
        "ground_truth": null,
        "question": "Calculate Jensen's alpha measure for portfolio named P, which has a beta of 0.7, an expected return of 12.8%, and an equity risk premium of 5.25%. The risk-free rate is 4.85%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta_p = 0.7\n    expected_return_p = 0.128\n    equity_risk_premium = 0.0525\n    risk_free_rate = 0.0485\n\n    # Do math calculation to get the answer\n    market_return = risk_free_rate + equity_risk_premium\n    expected_return_capm = risk_free_rate + beta_p * equity_risk_premium\n    jensen_alpha = expected_return_p - expected_return_capm\n\n    # return answer\n    return jensen_alpha\n```\n\nThis Python program calculates Jensen's alpha for the given portfolio P. Here's a breakdown of the calculation:\n\n1. We define the given variables: beta of the portfolio, expected return of the portfolio, equity risk premium, and risk-free rate.\n\n2. We calculate the market return by adding the risk-free rate and the equity risk premium.\n\n3. We calculate the expected return according to the Capital Asset Pricing Model (CAPM) using the formula: \n   E(R_p) = R_f + β_p * (E(R_m) - R_f)\n   Where E(R_m) - R_f is the equity risk premium.\n\n4. Jensen's alpha is then calculated as the difference between the actual expected return of the portfolio and the expected return according to CAPM.\n\n5. The function returns Jensen's alpha as the answer.\n\nThis program will give you Jensen's alpha measure for the portfolio P."
        ]
    },
    {
        "tables": [
            "| Expected Security Standard Deviation (%) | Beta |\n|------------------------------------------|------|\n| Security 1 25                            | 1.50 |\n| Security 2 15                            | 1.40 |\n| Security 3 20                            | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-70",
        "python_solution": "",
        "ground_truth": null,
        "question": "In regards to the capital asset pricing model, if the anticipated return for Bond 2 is 11.4% and the risk-free rate is 3%, what would be the expected market return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_security2 = 0.114  # 11.4%\n    risk_free_rate = 0.03  # 3%\n    beta_security2 = 1.40\n\n    # Do math calculation to get the answer\n    # Using CAPM formula: E(Ri) = Rf + βi(E(Rm) - Rf)\n    # Where E(Ri) is the expected return of security i\n    # Rf is the risk-free rate\n    # βi is the beta of security i\n    # E(Rm) is the expected market return\n\n    # Rearranging the formula to solve for E(Rm):\n    # E(Rm) = (E(Ri) - Rf) / βi + Rf\n\n    expected_market_return = (expected_return_security2 - risk_free_rate) / beta_security2 + risk_free_rate\n\n    # Convert to percentage\n    expected_market_return_percent = expected_market_return * 100\n\n    # return answer\n    return round(expected_market_return_percent, 2)\n```\n\nThis Python program calculates the expected market return using the Capital Asset Pricing Model (CAPM) formula, based on the given information for Security 2 (which we assume is the same as Bond 2 mentioned in the question).\n\nThe program does the following:\n\n1. Defines the known variables: expected return for Security 2 (11.4%), risk-free rate (3%), and beta for Security 2 (1.40).\n2. Rearranges the CAPM formula to solve for the expected market return.\n3. Calculates the expected market return.\n4. Converts the result to a percentage.\n5. Returns the answer rounded to two decimal places.\n\nWhen you run this function, it will return the expected market return as a percentage."
        ]
    },
    {
        "tables": [
            "|               | Global Equity | Global Bonds |\n|---------------|---------------|--------------|\n| Global Equity | 0.0225        | 0.0022       |\n| Global Bonds  | 0.0022        | 0.0025       |",
            "|           | Sensitivities |      | Residual Risk |\n|-----------|---------------|------|---------------|\n|           | Global Equity | Global Bonds |   |\n| Market 1  | 1.20          | 0.00 | 12.00%        |\n| Market 2  | 0.90          | 0.00 | 7.00%         |\n| Market 3  | 0.00          | 0.95 | 1.80%         |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-71",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the factor covariance matrix for global equity and global bonds presented by Schultz in Exhibit 1, along with market factor sensitivities and residual risk displayed in Exhibit 2, what is the covariance between Market 1 and Market 2?",
        "output": [
            "I'll create a Python program to calculate the covariance between Market 1 and Market 2 based on the given information. Here's the solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    global_equity_variance = 0.0225\n    global_bonds_variance = 0.0025\n    global_equity_bonds_covariance = 0.0022\n\n    market1_global_equity_sensitivity = 1.20\n    market1_global_bonds_sensitivity = 0.00\n    market1_residual_risk = 0.12\n\n    market2_global_equity_sensitivity = 0.90\n    market2_global_bonds_sensitivity = 0.00\n    market2_residual_risk = 0.07\n\n    # Do math calculation to get the answer\n    covariance = (\n        market1_global_equity_sensitivity * market2_global_equity_sensitivity * global_equity_variance +\n        market1_global_bonds_sensitivity * market2_global_bonds_sensitivity * global_bonds_variance +\n        (market1_global_equity_sensitivity * market2_global_bonds_sensitivity +\n         market1_global_bonds_sensitivity * market2_global_equity_sensitivity) * global_equity_bonds_covariance\n    )\n\n    # return answer\n    return covariance\n```\n\nThis program calculates the covariance between Market 1 and Market 2 using the factor model approach. Here's a breakdown of the calculation:\n\n1. We define the variances and covariances of the global factors (equity and bonds) from the factor covariance matrix.\n2. We define the sensitivities of Market 1 and Market 2 to the global factors, as well as their residual risks.\n3. We calculate the covariance using the formula:\n   Cov(Market1, Market2) = β1,E * β2,E * Var(E) + β1,B * β2,B * Var(B) + (β1,E * β2,B + β1,B * β2,E) * Cov(E,B)\n   Where:\n   - β1,E and β2,"
        ]
    },
    {
        "tables": [
            "| Company | Market Share (%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-72",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the three-firm Herfindahl–Hirschmann Index for the sector, taking into account the market share information collected for a sector consisting of five firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    zeta_share = 35\n    yusef_share = 25\n    xenon_share = 20\n    \n    # Do math calculation to get the answer\n    hhi = (zeta_share/100)**2 + (yusef_share/100)**2 + (xenon_share/100)**2\n    hhi *= 10000  # Convert to standard HHI scale\n    \n    # return answer\n    return hhi\n```\n\nThis Python program calculates the three-firm Herfindahl–Hirschmann Index (HHI) for the sector based on the market share information provided in the table. Here's a breakdown of the solution:\n\n1. We define variables for the market shares of the top three firms: Zeta, Yusef, and Xenon.\n\n2. The HHI is calculated by summing the squared market shares of these three firms. We divide each market share by 100 to convert the percentage to a decimal before squaring.\n\n3. The result is then multiplied by 10,000 to convert it to the standard HHI scale, where 10,000 represents a perfect monopoly.\n\n4. The final HHI value is returned as the answer.\n\nThis calculation gives us the concentration of the market among the top three firms, which is what the three-firm HHI represents. It's worth noting that this is different from the full HHI, which would include all five firms in the calculation."
        ]
    },
    {
        "tables": [
            "|            | as of 31 December |    |\n|------------|------------------|----|\n| Assets     | 2016             | 2017 |\n| Cash and cash equivalents | 5 | 15 |\n| Short-term marketable securities | 5 | 15 |\n| Trade and other receivables | 15 | 5 |\n| Other non-financial assets | 5 | 18 |\n| Tax assets | 5 | 2 |\n| Total current assets | 35 | 55 |",
            "|                       |  as of  31 December  |     |    \n| ---------------       | :--------------:     | :-----:|    \n|   Assets              | 2016                 |  2017  |      \n| Total non-current assets | 65             |  55 |\n| Total assets         | 100                 | 110  |  \n| Equity and Liabilities |  |  |\n| Total current liabilities | 35 | 28 |\n| Total non-current liabilities | 45 | 45 |\n| Total liabilities | 80 | 73 |\n| Total equity | 20 | 37 |\n| Equity and liabilities | 100 | 110 |"
        ],
        "topic": "Accounting",
        "question_id": "test-73",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the financial leverage ratio for Business B, according to the balance sheet below, as of 31 December 2017?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_2017 = 110\n    total_equity_2017 = 37\n    \n    # Do math calculation to get the answer\n    financial_leverage_ratio = total_assets_2017 / total_equity_2017\n    \n    # return answer\n    return financial_leverage_ratio\n```\n\nThis Python function calculates the financial leverage ratio for Business B as of 31 December 2017 based on the provided balance sheet information. \n\nThe financial leverage ratio is calculated by dividing total assets by total equity. From the balance sheet:\n\n- Total assets for 2017 = 110\n- Total equity for 2017 = 37\n\nThe function performs this calculation and returns the result, which represents the financial leverage ratio for Business B as of 31 December 2017."
        ]
    },
    {
        "tables": [
            "| Par value | $100.00 |\n|---|---|\n| Annual coupon rate | 8% |\n| Coupon payment frequency | Semiannual |\n| Coupon payment dates | 15 May and 15 November |\n| Maturity date | 15 November 2017 |\n| Day count convention | Actual/Actual |\n| Annual  yield to maturity | 5.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-74",
        "python_solution": "",
        "ground_truth": null,
        "question": "The bonds of a corporation named Whakatane and Co. are scheduled for settlement on 15 July 2014 and have several distinct attributes. Given these details, can you identify the discrepancy between the full and flat prices?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.08\n    coupon_frequency = 2\n    settlement_date = (2014, 7, 15)\n    next_coupon_date = (2014, 11, 15)\n    maturity_date = (2017, 11, 15)\n    yield_to_maturity = 0.055\n\n    # Do math calculation to get the answer\n    \n    # Calculate days between settlement and next coupon\n    from datetime import date\n    days_to_next_coupon = (date(*next_coupon_date) - date(*settlement_date)).days\n    \n    # Calculate number of remaining coupon payments\n    total_days = (date(*maturity_date) - date(*settlement_date)).days\n    remaining_coupons = round(total_days / 365 * coupon_frequency)\n    \n    # Calculate present value of coupons and par value\n    coupon_amount = par_value * coupon_rate / coupon_frequency\n    pv_coupons = sum([coupon_amount / ((1 + yield_to_maturity/coupon_frequency)**(i+days_to_next_coupon/365*2)) for i in range(1, remaining_coupons+1)])\n    pv_par = par_value / ((1 + yield_to_maturity/coupon_frequency)**(remaining_coupons))\n    \n    # Calculate full price\n    full_price = pv_coupons + pv_par\n    \n    # Calculate accrued interest\n    days_since_last_coupon = 180 - days_to_next_coupon\n    accrued_interest = par_value * coupon_rate * (days_since_last_coupon / 365)\n    \n    # Calculate flat price\n    flat_price = full_price - accrued_interest\n    \n    # Calculate the difference between full and flat price\n    price_difference = full_price - flat_price\n    \n    # return answer\n    return round(price_difference, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-75",
        "python_solution": "",
        "ground_truth": null,
        "question": "A spreadsheet containing 108 monthly returns for shares in Saraswoti Inc is owned by Kaleb Perkins. He designs a software program that applies bootstrap resampling to generate 200 resamples from this Saraswoti data through sampling with replacement. Each resample comprises of 108 data points. The software programmed by Perkins computes the average of each of the 200 resamples, then determines that the mean of these 200 resample means equals 0.0261. The program subtracts 0.0261 from each of the 200 resample means, squares each of these 200 differences, and totals up the squared differences, resulting in 0.835. An estimate of the standard error of the sample mean is then calculated by the program. What is the estimated standard error of the sample mean?",
        "output": [
            "Here's a Python program to calculate the estimated standard error of the sample mean based on the information provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    num_resamples = 200\n    mean_of_resample_means = 0.0261\n    sum_of_squared_differences = 0.835\n\n    # Do math calculation to get the answer\n    variance = sum_of_squared_differences / (num_resamples - 1)\n    standard_error = (variance / num_resamples) ** 0.5\n\n    # return answer\n    return standard_error\n```\n\nThis program calculates the estimated standard error of the sample mean using the following steps:\n\n1. We define the variables based on the given information:\n   - `num_resamples`: The number of bootstrap resamples (200)\n   - `mean_of_resample_means`: The mean of the 200 resample means (0.0261)\n   - `sum_of_squared_differences`: The sum of squared differences (0.835)\n\n2. We calculate the variance of the resample means:\n   - Variance = sum of squared differences / (number of resamples - 1)\n\n3. We calculate the standard error of the sample mean:\n   - Standard Error = square root of (variance / number of resamples)\n\n4. Finally, we return the calculated standard error.\n\nThis program will return the estimated standard error of the sample mean based on the bootstrap resampling results provided in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-76",
        "python_solution": "",
        "ground_truth": null,
        "question": "The financial institution formalized a $30 million credit facility agreement with Firm B, with an outstanding amount of $20 million. Firm B has minimal collateral, therefore, the financial institution estimated the probability of default to be 1% per annum. Because the collateral is industry-specific, the financial institution assigned a loss rate of 90%. What is the projected loss (EL) of the financial institution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_facility = 30_000_000\n    outstanding_amount = 20_000_000\n    probability_of_default = 0.01  # 1% per annum\n    loss_given_default = 0.90  # 90% loss rate\n\n    # Do math calculation to get the answer\n    expected_loss = outstanding_amount * probability_of_default * loss_given_default\n\n    # return answer\n    return expected_loss\n```\n\nThis Python program calculates the Expected Loss (EL) for the financial institution based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with their respective values:\n   - The total credit facility is $30 million, but we use the outstanding amount of $20 million for the calculation.\n   - The probability of default is 1% per annum, which is represented as 0.01 in decimal form.\n   - The loss given default (or loss rate) is 90%, represented as 0.90 in decimal form.\n\n2. We calculate the Expected Loss using the formula:\n   EL = Exposure at Default (EAD) * Probability of Default (PD) * Loss Given Default (LGD)\n   \n   In this case:\n   - EAD is the outstanding amount ($20 million)\n   - PD is 1% (0.01)\n   - LGD is 90% (0.90)\n\n3. The function returns the calculated Expected Loss.\n\nWhen you run this function, it will return the projected loss (EL) for the financial institution in dollars."
        ]
    },
    {
        "tables": [
            "|                   | 2011 | 2012 | 2013 | 2014 | 2015 | 2016 |\n|-------------------|------|------|------|------|------|------|\n| Called Down       | 120  | 40   | 25   | 60   | 25   | 10   |\n| Realized Results  | 0    | 0    | 25   | 80   | 100  | 195  |\n| Unrealized Results| -15  | -35  | 35   | 25   | 35   | 60   |\n| Distributions     |      |      |      | 60   | 110  | 175  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-77",
        "python_solution": "",
        "ground_truth": null,
        "question": "Reviewing the latest annual report for Fund VI (displayed in Exhibit 1) to assess Yushan's previous performance, what is the DPI value that Madan determines for Fund VI, taking into account a fund worth £300 million from 2011, management costs of 2%, a 20% carried interest, a 7% hurdle rate, and a term of 2018 up to 31st December 2016?",
        "output": [
            "Here's a Python program to calculate the DPI (Distributions to Paid-In Capital) value for Fund VI based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    fund_size = 300000000  # £300 million\n    management_fee_rate = 0.02  # 2%\n    term_years = 6  # 2011 to 2016, inclusive\n    total_distributions = 60000000 + 110000000 + 175000000  # Sum of distributions from 2014 to 2016\n\n    # Calculate total management fees\n    total_management_fees = fund_size * management_fee_rate * term_years\n\n    # Calculate total paid-in capital (fund size + management fees)\n    total_paid_in = fund_size + total_management_fees\n\n    # Calculate DPI\n    dpi = total_distributions / total_paid_in\n\n    # return answer\n    return dpi\n```\n\nThis program calculates the DPI value for Fund VI based on the following steps:\n\n1. We define the fund size, management fee rate, term years, and total distributions from the given data.\n2. We calculate the total management fees over the 6-year period.\n3. We calculate the total paid-in capital, which is the fund size plus the total management fees.\n4. We calculate the DPI by dividing the total distributions by the total paid-in capital.\n\nNote that this calculation doesn't take into account the carried interest, hurdle rate, or unrealized results, as the DPI is typically calculated based on actual distributions and paid-in capital. The carried interest and hurdle rate would affect the distribution of profits but not the DPI calculation itself."
        ]
    },
    {
        "tables": [
            "| Revenue | $2,600,000 |\n| --- | --- |\n| Net profit margin | 35% |\n| Depreciation on PP&E | 180,000 |\n| Increase in accounts receivable | 90,000 |\n| Decrease in accounts payable | 70,000 |\n| Increase in inventory | 500,000 |\n| Gain on sale of equipment | 20,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-78",
        "python_solution": "",
        "ground_truth": null,
        "question": "Provided the following: The cash flow from operations is:",
        "output": [
            "Here's the Python program to calculate the cash flow from operations based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 2600000\n    net_profit_margin = 0.35\n    depreciation = 180000\n    increase_accounts_receivable = 90000\n    decrease_accounts_payable = 70000\n    increase_inventory = 500000\n    gain_on_sale_equipment = 20000\n\n    # Do math calculation to get the answer\n    net_income = revenue * net_profit_margin\n    \n    # Cash flow from operations calculation\n    cash_flow = net_income + depreciation - gain_on_sale_equipment\n    cash_flow -= increase_accounts_receivable\n    cash_flow -= decrease_accounts_payable\n    cash_flow -= increase_inventory\n\n    # return answer\n    return cash_flow\n\n```\n\nThis program calculates the cash flow from operations using the indirect method. Here's a breakdown of the calculation:\n\n1. We start with net income (revenue * net profit margin).\n2. We add back depreciation (a non-cash expense).\n3. We subtract the gain on sale of equipment (as it's not part of operations).\n4. We adjust for changes in working capital:\n   - Subtract the increase in accounts receivable\n   - Subtract the decrease in accounts payable\n   - Subtract the increase in inventory\n\nThe result gives us the cash flow from operations."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-79",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the annual discount rate is 4% and it's compounded yearly, what is the (PV5) present value of $50,000, received as a cash flow at the end of the 20th year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 50000\n    discount_rate = 0.04\n    years = 20\n\n    # Do math calculation to get the answer\n    present_value = future_value / (1 + discount_rate)**years\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value (PV) of a future cash flow using the following formula:\n\nPV = FV / (1 + r)^n\n\nWhere:\n- FV is the future value ($50,000 in this case)\n- r is the annual discount rate (4% or 0.04)\n- n is the number of years (20)\n\nThe function returns the present value rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "| Years | Present Value Factor |\n|-------|---------------------|\n| 0.25  | 0.997506            |\n| 0.5   | 0.992556            |\n| 0.75  | 0.985222            |\n| 1     | 0.975610            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-80",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the following information, the annualized fixed swap rate is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pv_factors = {0.25: 0.997506, 0.5: 0.992556, 0.75: 0.985222, 1: 0.975610}\n    \n    # Do math calculation to get the answer\n    sum_pv_factors = sum(pv_factors.values())\n    \n    # Calculate the annualized fixed swap rate\n    # The formula is: (1 - PV_factor_at_maturity) / sum_of_PV_factors\n    annualized_swap_rate = (1 - pv_factors[1]) / sum_pv_factors\n    \n    # Convert to percentage and round to 4 decimal places\n    answer = round(annualized_swap_rate * 100, 4)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the annualized fixed swap rate based on the given present value factors. Here's how it works:\n\n1. We define a dictionary `pv_factors` with the given present value factors for each time period.\n\n2. We calculate the sum of all present value factors using the `sum()` function.\n\n3. We then apply the formula for the annualized fixed swap rate:\n   (1 - PV factor at maturity) / sum of all PV factors\n   \n   The PV factor at maturity is the factor for 1 year (pv_factors[1]).\n\n4. We convert the result to a percentage by multiplying by 100 and round it to 4 decimal places.\n\n5. Finally, we return the calculated answer.\n\nThis program will return the annualized fixed swap rate as a percentage, rounded to 4 decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-81",
        "python_solution": "",
        "ground_truth": null,
        "question": "For the end of its fiscal year, Tangerine Inc. reported a net income of $200 million and an average of 50,000,000 common shares in circulation. There are 2,000,000 convertible preferred shares circulating that paid a yearly dividend of $5. Each preferred share can be converted into two common shares. What would be the diluted EPS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 200_000_000\n    avg_common_shares = 50_000_000\n    convertible_preferred_shares = 2_000_000\n    preferred_dividend_per_share = 5\n    conversion_ratio = 2\n\n    # Do math calculation to get the answer\n    total_preferred_dividends = convertible_preferred_shares * preferred_dividend_per_share\n    adjusted_net_income = net_income - total_preferred_dividends\n    \n    potential_additional_shares = convertible_preferred_shares * conversion_ratio\n    total_diluted_shares = avg_common_shares + potential_additional_shares\n    \n    diluted_eps = adjusted_net_income / total_diluted_shares\n\n    # return answer\n    return round(diluted_eps, 2)\n```\n\nThis Python program calculates the diluted Earnings Per Share (EPS) for Tangerine Inc. based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the total preferred dividends by multiplying the number of convertible preferred shares by the dividend per share.\n3. We adjust the net income by subtracting the total preferred dividends.\n4. We calculate the potential additional common shares if all preferred shares were converted.\n5. We add these potential shares to the average common shares to get the total diluted shares.\n6. Finally, we divide the adjusted net income by the total diluted shares to get the diluted EPS.\n7. The result is rounded to 2 decimal places for better readability.\n\nThis solution assumes that the convertible preferred shares are dilutive (i.e., their conversion would decrease EPS) and includes them in the diluted EPS calculation."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| Equity | 40 | 30 |\n| Bond | 60 | 25 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-82",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the covariance of the two investments? Presuming the portfolio's standard deviation is 27%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equity_weight = 0.40\n    bond_weight = 0.60\n    equity_std = 0.30\n    bond_std = 0.25\n    portfolio_std = 0.27\n\n    # Do math calculation to get the answer\n    portfolio_variance = portfolio_std ** 2\n    weighted_individual_variances = (equity_weight * equity_std) ** 2 + (bond_weight * bond_std) ** 2\n    cross_product_term = 2 * equity_weight * bond_weight * equity_std * bond_std\n\n    covariance = (portfolio_variance - weighted_individual_variances) / cross_product_term\n\n    # return answer\n    return covariance\n```\n\nThis Python program calculates the covariance between the equity and bond investments based on the given information and the portfolio's standard deviation. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given table and the portfolio standard deviation.\n2. We calculate the portfolio variance by squaring the portfolio standard deviation.\n3. We calculate the weighted sum of individual variances.\n4. We set up the cross-product term from the portfolio variance formula.\n5. We solve for the covariance using the portfolio variance formula:\n   Portfolio Variance = (w1 * σ1)^2 + (w2 * σ2)^2 + 2 * w1 * w2 * σ1 * σ2 * ρ\n   where ρ is the correlation coefficient, which is equal to covariance / (σ1 * σ2)\n\n6. We return the calculated covariance.\n\nThis program will return the covariance between the equity and bond investments that results in the given portfolio standard deviation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-83",
        "python_solution": "",
        "ground_truth": null,
        "question": "For the financial year-end, Everest Aqua Enterprises (EAE) announced a net profit of $12 million and an average of 2,000,000 ordinary shares circulating. The firm disbursed $800,000 as preferred dividends and there were 100,000 options with an average exercise price of $20 still to be exercised. Over the course of the year, EAE's average market price was $25 a share. What is EAE’s diluted EPS?",
        "output": [
            "Here's the Python program to calculate Everest Aqua Enterprises' diluted EPS:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_profit = 12000000\n    average_ordinary_shares = 2000000\n    preferred_dividends = 800000\n    options = 100000\n    exercise_price = 20\n    average_market_price = 25\n\n    # Do math calculation to get the answer\n    profit_available_to_ordinary_shareholders = net_profit - preferred_dividends\n    \n    # Calculate the number of additional shares from options\n    incremental_shares = options * (average_market_price - exercise_price) / average_market_price\n    \n    # Calculate diluted number of shares\n    diluted_shares = average_ordinary_shares + incremental_shares\n    \n    # Calculate diluted EPS\n    diluted_eps = profit_available_to_ordinary_shareholders / diluted_shares\n\n    # return answer\n    return round(diluted_eps, 2)\n```\n\nThis program calculates the diluted EPS for Everest Aqua Enterprises based on the given information. It first calculates the profit available to ordinary shareholders by subtracting preferred dividends from net profit. Then it determines the number of additional shares from options using the treasury stock method. Finally, it calculates the diluted EPS by dividing the profit available to ordinary shareholders by the diluted number of shares. The result is rounded to two decimal places for better readability."
        ]
    },
    {
        "tables": [
            "| S&P Rating | G-Spread | S&P Rating | G-Spread |\n|------------|----------|------------|----------|\n| AAA        | 0.30     | A          | 1.00     |\n| AA+        | 0.45     | A-         | 1.10     |\n| AA         | 0.60     | BBB+       | 1.30     |\n| AA-        | 0.70     | BBB        | 1.45     |\n| A+         | 0.85     | BBB-       | 1.60     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-84",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jones mentions that the shift of a firm's ratings can affect the overall return of a bond asset. For instance, he chooses a 10-year maturity, 5% coupon bond presently trading at par and rated A+ by Moody's. He requests Smith to compute the anticipated total return over a one-year term assuming the bond is demoted by two notches and to figure out why the year-end duration for the bond is 6.9. Assuming no modification in market conditions and a horizontal yield curve and utilizing Table 2, what is the projected yield on Jones' demo bond over a one-year span?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_rating = 'A+'\n    initial_g_spread = 0.85\n    downgraded_rating = 'A-'  # Two notches down from A+\n    downgraded_g_spread = 1.10\n    coupon_rate = 0.05\n    maturity = 10\n    current_price = 100  # Trading at par\n\n    # Do math calculation to get the answer\n    spread_increase = downgraded_g_spread - initial_g_spread\n    new_yield = coupon_rate + spread_increase\n\n    # return answer\n    return new_yield\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The projected yield after one year is: {result:.2%}\")\n```\n\nThis program calculates the projected yield on Jones' demo bond over a one-year span, assuming a two-notch downgrade and no other changes in market conditions. Here's an explanation of the calculation:\n\n1. We start with an A+ rated bond (initial_g_spread = 0.85%).\n2. After a two-notch downgrade, the bond becomes A- rated (downgraded_g_spread = 1.10%).\n3. The spread increase is the difference between these two G-spreads: 1.10% - 0.85% = 0.25%.\n4. Since the bond was initially trading at par with a 5% coupon, we assume this was also its initial yield.\n5. The new yield after the downgrade is the initial yield (coupon rate) plus the spread increase: 5% + 0.25% = 5.25%.\n\nThe function returns this new yield of 5.25% as the projected yield over a one-year span.\n\nNote: This calculation assumes a horizontal yield curve and no other changes in market conditions, as specified in the question. The year-end duration of 6.9 mentioned in the question is not directly used in this calculation but would be relevant for calculating the price change of the bond given the yield change."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2015 | 5         |\n| 2016 | -8        |\n| 2017 | 10        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-85",
        "python_solution": "",
        "ground_truth": null,
        "question": "What's the return on investment for a three-year holding period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    return_2015 = 0.05\n    return_2016 = -0.08\n    return_2017 = 0.10\n    \n    # Do math calculation to get the answer\n    total_return = (1 + return_2015) * (1 + return_2016) * (1 + return_2017) - 1\n    \n    # Convert to percentage and round to 2 decimal places\n    return_percentage = round(total_return * 100, 2)\n    \n    # return answer\n    return return_percentage\n```\n\nThis Python program calculates the return on investment for a three-year holding period based on the given annual returns. Here's how it works:\n\n1. We define variables for each year's return, converting the percentages to decimals.\n\n2. We calculate the total return using the compound annual growth rate (CAGR) formula. We add 1 to each year's return, multiply these values, and then subtract 1 to get the total return.\n\n3. We convert the result to a percentage by multiplying by 100 and round to two decimal places for readability.\n\n4. Finally, we return the calculated percentage as the answer.\n\nWhen you run this function, it will return the three-year return on investment as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-86",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier invested $500 million in a hedge fund with a \"2 and 20\" fee arrangement. The management fee is determined by the assets under management at the end of the year, and the incentive fee is based on an 8% hurdle rate. If the hedge fund appreciates by 20% at the end of the year, what is the net return if the incentive fee is calculated after the management fee?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 500000000  # $500 million\n    appreciation_rate = 0.20  # 20% appreciation\n    management_fee_rate = 0.02  # 2% management fee\n    incentive_fee_rate = 0.20  # 20% incentive fee\n    hurdle_rate = 0.08  # 8% hurdle rate\n\n    # Do math calculation to get the answer\n    gross_value = initial_investment * (1 + appreciation_rate)\n    management_fee = gross_value * management_fee_rate\n    value_after_management_fee = gross_value - management_fee\n\n    hurdle_amount = initial_investment * hurdle_rate\n    profit_above_hurdle = value_after_management_fee - initial_investment - hurdle_amount\n    incentive_fee = max(0, profit_above_hurdle * incentive_fee_rate)\n\n    final_value = value_after_management_fee - incentive_fee\n    net_return = (final_value / initial_investment) - 1\n\n    # return answer\n    return net_return * 100  # Convert to percentage\n```\n\nThis Python program calculates the net return for the investor after considering the \"2 and 20\" fee arrangement, the 8% hurdle rate, and the 20% appreciation of the hedge fund. The result is returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-87",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bright Blossom Ltd., a garden supply wholesale company, announced an annual cost of goods sold amounting to $80 million. The total properties increased by $55 million, incorporating a rise of $5 million in their stocks. The total obligations increased by $45 million, which also includes a $2 million rise in bills to be paid. What is the probable amount of cash that the company has paid to its vendors?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 80000000\n    increase_in_inventory = 5000000\n    increase_in_accounts_payable = 2000000\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold + increase_in_inventory - increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\n\nThis Python program calculates the probable amount of cash that Bright Blossom Ltd. has paid to its vendors. Here's how it works:\n\n1. We define the known variables:\n   - `cost_of_goods_sold`: $80 million\n   - `increase_in_inventory`: $5 million\n   - `increase_in_accounts_payable`: $2 million\n\n2. To calculate the cash paid to suppliers, we use the formula:\n   Cash paid to suppliers = Cost of goods sold + Increase in inventory - Increase in accounts payable\n\n3. We perform this calculation and store the result in `cash_paid_to_suppliers`.\n\n4. Finally, we return the calculated value.\n\nWhen you run this function, it will return $83 million, which represents the probable amount of cash that Bright Blossom Ltd. has paid to its vendors."
        ]
    },
    {
        "tables": [
            "| Income Statement        | 2007  | 2008  |\n|------------------------ |-------|-------|\n| Revenue                 | $474  | $598  |\n| Depreciation            | 20    | 23    |\n| Other operating costs   | 368   | 460   |\n| Income before taxes     | 86    | 115   |\n| Taxes                   | 26    | 35    |\n| Net income              | 60    | 80    |\n| Dividends               | 18    | 24    |\n| Earnings per share      | $0.714| $0.952|\n| Dividends per share     | $0.214| $0.286|\n| Common shares outstanding|84.0  | 84.0  |",
            "| Required rate of ROE | 14% |\n|----------------------|-----|\n| Growth rate of industry | 13% |\n| Industry P/E | 26 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-88",
        "python_solution": "",
        "ground_truth": null,
        "question": "Claire Smith, CFA, has been tasked with examining Shyrdak. Smith anticipates that Shyrdak's earnings and dividends will experience a consistent growth rate of 13 percent. The financial statements for the most recent two years (2007 and 2008) along with other details for Shyrdak are supplied in Exhibits 1 and 2. These exhibits offer actual 2007 and 2008 Financial Statements as of May 31st (in Millions exceptPer-ShareData) and selected Financial Information respectively. Based on the data from Exhibits 1 and 2 and Smith's projections for Shyrdak, what are the justified forward P/Es for this company?",
        "output": [
            "Here's a Python program to calculate the justified forward P/E for Shyrdak based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend_2008 = 24  # in millions\n    shares_outstanding = 84.0  # in millions\n    growth_rate = 0.13  # 13% growth rate\n    required_roe = 0.14  # 14% required rate of return on equity\n\n    # Do math calculation to get the answer\n    \n    # Calculate dividend per share for 2008\n    dps_2008 = dividend_2008 / shares_outstanding\n    \n    # Project dividend per share for 2009 (next year)\n    dps_2009 = dps_2008 * (1 + growth_rate)\n    \n    # Calculate justified price using the constant growth dividend discount model\n    # P = D1 / (r - g), where P is price, D1 is next year's dividend, r is required return, and g is growth rate\n    justified_price = dps_2009 / (required_roe - growth_rate)\n    \n    # Calculate EPS for 2008\n    net_income_2008 = 80  # in millions\n    eps_2008 = net_income_2008 / shares_outstanding\n    \n    # Project EPS for 2009\n    eps_2009 = eps_2008 * (1 + growth_rate)\n    \n    # Calculate justified forward P/E\n    justified_forward_pe = justified_price / eps_2009\n\n    # return answer\n    return round(justified_forward_pe, 2)\n```\n\nThis program calculates the justified forward P/E ratio for Shyrdak using the following steps:\n\n1. It defines the necessary variables based on the given information.\n2. It calculates the dividend per share for 2008 and projects it for 2009 using the anticipated growth rate.\n3. It uses the constant growth dividend discount model to calculate the justified price.\n4. It calculates the EPS for 2008 and projects it for 2009.\n5. Finally, it calculates the justified forward P"
        ]
    },
    {
        "tables": [
            "| Variable          | Coefficient | Std. Error | t-Statistic |\n|-------------------|-------------|------------|-------------|\n| Intercept         | -2582.791   | 940.613    | -2.746      |\n| GDP               | 0.022       | 0.006      | 3.667       |\n| Fiscal Expenditure| 0.702       | 0.033      | 21.273      |\n| RPI               | 23.985      | 8.738      | 2.745       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-89",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Sarah desires to forecast her nation's tax revenue, she chooses GDP, Fiscal expenditure and RPI (Retail Price Index) as three independent variables. She finds that this year's GDP is 104790.6, Fiscal expenditure is 22053.15, and RPI is 98.7. What is the expected value of the tax revenue for this year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = -2582.791\n    gdp_coefficient = 0.022\n    fiscal_expenditure_coefficient = 0.702\n    rpi_coefficient = 23.985\n    \n    gdp = 104790.6\n    fiscal_expenditure = 22053.15\n    rpi = 98.7\n    \n    # Do math calculation to get the answer\n    tax_revenue = (\n        intercept +\n        (gdp_coefficient * gdp) +\n        (fiscal_expenditure_coefficient * fiscal_expenditure) +\n        (rpi_coefficient * rpi)\n    )\n    \n    # return answer\n    return round(tax_revenue, 2)\n```\n\nThis Python program calculates the expected tax revenue based on the given coefficients and values for GDP, Fiscal Expenditure, and RPI. Here's a breakdown of what the program does:\n\n1. It defines the coefficients for each variable and the intercept as provided in the table.\n2. It sets the values for GDP, Fiscal Expenditure, and RPI as given in the question.\n3. It calculates the tax revenue using the multiple linear regression equation:\n   Tax Revenue = Intercept + (GDP Coefficient * GDP) + (Fiscal Expenditure Coefficient * Fiscal Expenditure) + (RPI Coefficient * RPI)\n4. Finally, it returns the calculated tax revenue, rounded to two decimal places.\n\nWhen you run this function, it will return the expected value of the tax revenue for the given year based on the provided data and coefficients."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-90",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the maximum leverage ratio for a position financed by a minimum margin requirement of 55 percent, as set by an internet-based trading company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    minimum_margin_requirement = 0.55\n\n    # Do math calculation to get the answer\n    max_leverage_ratio = 1 / minimum_margin_requirement\n\n    # return answer\n    return max_leverage_ratio\n```\n\nThis Python program calculates the maximum leverage ratio based on the given minimum margin requirement. Here's an explanation of the solution:\n\n1. We define the minimum margin requirement as 55%, which is represented as 0.55 in decimal form.\n\n2. The maximum leverage ratio is calculated as the reciprocal of the minimum margin requirement. This is because the leverage ratio represents how many times the total position value can be relative to the investor's equity.\n\n3. We calculate this by dividing 1 by the minimum margin requirement (1 / 0.55).\n\n4. The function returns the calculated maximum leverage ratio.\n\nWhen you run this function, it will return approximately 1.8181818181818181, which means the maximum leverage ratio is about 1.82:1. In other words, for every $1 of investor's equity, the total position value can be up to $1.82."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-91",
        "python_solution": "",
        "ground_truth": null,
        "question": "The stock collection has a market value of $6,000,000. The retirement fund is planning to use a futures contract priced at $250,000 to raise the beta from 0.9 to 1.2 for a span of one month. The futures contract has a beta of 0.95. After one month, the return of the stock market is 5%, the market value of the stock collection becomes $6,250,000, and the cost of the futures contract is $262,000. What is the effective beta of the stock element of the fund?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_market_value = 6000000\n    target_beta = 1.2\n    initial_beta = 0.9\n    futures_beta = 0.95\n    futures_price = 250000\n    market_return = 0.05\n    final_stock_value = 6250000\n    final_futures_value = 262000\n\n    # Do math calculation to get the answer\n    \n    # Calculate the number of futures contracts needed\n    n_futures = (target_beta - initial_beta) * initial_market_value / (futures_beta * futures_price)\n    \n    # Calculate the total return of the portfolio\n    total_return = (final_stock_value + (final_futures_value - futures_price) * n_futures - initial_market_value) / initial_market_value\n    \n    # Calculate the effective beta of the stock element\n    effective_beta = (total_return / market_return) - (n_futures * futures_beta * futures_price / initial_market_value)\n\n    # return answer\n    return effective_beta\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-92",
        "python_solution": "",
        "ground_truth": null,
        "question": "You are creating models to predict earnings per share for two building firms, X and Y. The likelihood of Firm X's EPS growing by the year's end stands at 0.45. The chance of Firm Y's EPS swelling by the end of the year is 0.25. The probability that both firms' EPS will hike is 0.10. According to the predictive models, what is the likelihood that the EPS of at least one of these building firms will surge?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_X = 0.45  # Probability of Firm X's EPS growing\n    prob_Y = 0.25  # Probability of Firm Y's EPS growing\n    prob_both = 0.10  # Probability of both firms' EPS growing\n\n    # Do math calculation to get the answer\n    # P(at least one) = P(X) + P(Y) - P(X and Y)\n    prob_at_least_one = prob_X + prob_Y - prob_both\n\n    # return answer\n    return prob_at_least_one\n```\n\nThis Python program calculates the probability that at least one of the two building firms (X and Y) will experience an increase in Earnings Per Share (EPS) by the end of the year.\n\nThe solution uses the addition rule of probability:\nP(A or B) = P(A) + P(B) - P(A and B)\n\nWhere:\nA is the event of Firm X's EPS growing\nB is the event of Firm Y's EPS growing\n\nThis formula accounts for the overlap (the probability of both firms' EPS growing) to avoid double-counting.\n\nThe program will return the calculated probability as a decimal (0.60 or 60%)."
        ]
    },
    {
        "tables": [
            "|                        | Company X      |\n|------------------------|----------------|\n|                        | As of 31 December |\n| Ending shareholders' equity | £10,000,000   |\n| Tax rate               | 25%            |\n| Dividends              | £0.00          |\n| Net income             | £750,000       |"
        ],
        "topic": "Accounting",
        "question_id": "test-93",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rates. They have the same transactions all year and report them in the same way, except for one. Both firms purchase a printer worth £300,000 with a lifespan of three years and a salvage value of £0 at the start of the year. Firm A capitalizes the printer and depreciates it using a straight-line method, while Firm B expenses the printer. The following information is collected for Firm A at the end of the year. Given this information, what would be Firm B's return on equity using year-end equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ending_equity_A = 10000000\n    tax_rate = 0.25\n    net_income_A = 750000\n    printer_cost = 300000\n    depreciation_period = 3\n\n    # Do math calculation to get the answer\n    \n    # Calculate annual depreciation for Firm A\n    annual_depreciation = printer_cost / depreciation_period\n    \n    # Calculate pre-tax income for Firm A\n    pretax_income_A = net_income_A / (1 - tax_rate)\n    \n    # Calculate pre-tax income for Firm B (expensing the printer)\n    pretax_income_B = pretax_income_A + annual_depreciation - printer_cost\n    \n    # Calculate net income for Firm B\n    net_income_B = pretax_income_B * (1 - tax_rate)\n    \n    # Calculate ending equity for Firm B\n    ending_equity_B = ending_equity_A - (net_income_A - net_income_B)\n    \n    # Calculate ROE for Firm B\n    roe_B = net_income_B / ending_equity_B\n    \n    # Convert to percentage\n    roe_B_percentage = roe_B * 100\n\n    # return answer\n    return round(roe_B_percentage, 2)\n```\n\nThis Python program calculates the return on equity (ROE) for Firm B based on the given information about Firm A and the differences in accounting treatment for the printer purchase. \n\nThe program first defines the known variables from the provided information. Then it calculates the annual depreciation for the printer, determines the pre-tax income for both firms, and calculates the net income for Firm B. \n\nUsing this information, it then calculates the ending equity for Firm B by adjusting Firm A's ending equity for the difference in net income between the two firms.\n\nFinally, it calculates the ROE for Firm B by dividing its net income by its ending equity, converts it to a percentage, rounds it to two decimal places, and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-94",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that active returns do not correlate, according to the basic law of active management, how many securities would a fund overseen by an investment strategist with a 0.75 information ratio, a 0.1819 information coefficient, and a transfer coefficient of 1.0 contain?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    information_ratio = 0.75\n    information_coefficient = 0.1819\n    transfer_coefficient = 1.0\n\n    # Do math calculation to get the answer\n    # The basic law of active management states that:\n    # IR = IC * sqrt(N) * TC\n    # Where IR is Information Ratio, IC is Information Coefficient,\n    # N is the number of securities, and TC is Transfer Coefficient\n    # Rearranging the formula to solve for N:\n    # N = (IR / (IC * TC))^2\n    \n    n_securities = (information_ratio / (information_coefficient * transfer_coefficient)) ** 2\n    \n    # Round to the nearest whole number, as we can't have a fractional number of securities\n    answer = round(n_securities)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the number of securities based on the given information ratio, information coefficient, and transfer coefficient using the basic law of active management. The result is rounded to the nearest whole number, as it's not possible to have a fractional number of securities in a fund."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-95",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is trying to forecast the sales volume of his store in December 20X8, therefore he utilizes the sales volume from January 20X7 to November 20X8 as examples to create a linear trend model and obtains the following result: ŷt =264.75+2.58t. What is the anticipated sales volume of December 20X8?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = 264.75\n    slope = 2.58\n    \n    # Do math calculation to get the answer\n    # December 20X8 is the 24th month from January 20X7\n    t = 24\n    \n    forecast = intercept + (slope * t)\n    \n    # return answer\n    return round(forecast, 2)\n```\n\nThis Python program calculates the anticipated sales volume for December 20X8 based on the given linear trend model. Here's an explanation of the code:\n\n1. We define the intercept (264.75) and slope (2.58) from the given equation ŷt = 264.75 + 2.58t.\n\n2. We set t = 24 because December 20X8 is the 24th month counting from January 20X7 (23 months have passed, and December 20X8 is the 24th).\n\n3. We calculate the forecast using the equation: forecast = intercept + (slope * t)\n\n4. Finally, we return the result rounded to two decimal places.\n\nWhen you run this function, it will return the anticipated sales volume for December 20X8 according to the linear trend model."
        ]
    },
    {
        "tables": [
            "| Spot rate (RMB/USD) | 6.7659 |\n|---|---|\n| 180-day Libor(RMB) | 4.80% |\n| 180-day Libor(USD) | 3.55% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-96",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data, can you compute the forward premium for a half-year RMB/USD forward agreement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 6.7659\n    rmb_rate = 0.0480  # 180-day Libor(RMB)\n    usd_rate = 0.0355  # 180-day Libor(USD)\n    time = 0.5  # half year\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate * ((1 + rmb_rate * time) / (1 + usd_rate * time))\n    forward_premium = (forward_rate - spot_rate) / spot_rate * 100\n\n    # return answer\n    return round(forward_premium, 4)\n```\n\nThis Python program calculates the forward premium for a half-year RMB/USD forward agreement based on the given data. Here's a breakdown of the solution:\n\n1. We define the variables with the given data:\n   - `spot_rate`: The current spot rate for RMB/USD\n   - `rmb_rate`: The 180-day Libor rate for RMB (converted to decimal form)\n   - `usd_rate`: The 180-day Libor rate for USD (converted to decimal form)\n   - `time`: Half a year expressed as 0.5\n\n2. We calculate the forward rate using the interest rate parity formula:\n   Forward Rate = Spot Rate * ((1 + Domestic Interest Rate * Time) / (1 + Foreign Interest Rate * Time))\n\n3. We then calculate the forward premium as a percentage:\n   Forward Premium = (Forward Rate - Spot Rate) / Spot Rate * 100\n\n4. The result is rounded to 4 decimal places for precision.\n\n5. The calculated forward premium is returned as the answer.\n\nThis program will give you the forward premium as a percentage, which represents the expected change in the exchange rate over the next half year based on the interest rate differential between RMB and USD."
        ]
    },
    {
        "tables": [
            "| Asset | Position | Individual VAR | Marginal VAR | VAR Contribution |\n|-------|----------|----------------|--------------|------------------|\n| 1     | USD 100  | USD 23.3       | 0.176        | USD 17.6         |\n| 2     | USD 100  | USD 46.6       | 0.440        | USD 44.0         |\n| Total | USD 200  | USD 61.6       |              | USD 61.6         |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-97",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a risk analyst supposes the joint distribution of returns is multivariate normal and calculates the ensuing risk measures for a portfolio of two assets: what would be the decrease in portfolio VAR if we eliminate asset 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_var = 61.6\n    var_contribution_asset2 = 44.0\n\n    # Do math calculation to get the answer\n    decrease_in_var = var_contribution_asset2\n    \n    # return answer\n    return decrease_in_var\n```\n\nThis Python program calculates the decrease in portfolio Value at Risk (VAR) if Asset 2 is eliminated from the portfolio. \n\nHere's the explanation:\n\n1. We define the total VAR of the portfolio (USD 61.6) and the VAR contribution of Asset 2 (USD 44.0) based on the provided table.\n\n2. In a multivariate normal distribution, the VAR contributions are additive. This means that if we remove an asset, the portfolio VAR will decrease by that asset's VAR contribution.\n\n3. Therefore, the decrease in portfolio VAR if we eliminate Asset 2 is equal to Asset 2's VAR contribution, which is USD 44.0.\n\n4. The function returns this value as the answer.\n\nThis solution assumes that the risk measures are calculated under the assumption of a multivariate normal distribution of returns, as stated in the question. It's worth noting that this is a simplification, and in real-world scenarios, the relationship between asset returns might be more complex."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-98",
        "python_solution": "",
        "ground_truth": null,
        "question": "The portfolio manager of AB pension, Jacques, has recently contemplated incorporating PZ Inc. (New York Stock Exchange: PZ) into the portfolio. Instead of utilizing the two-stage DDM, Jacques intends to use his forecast that the stock of PZ will be valued at 20 times its earnings per share (trailing P/E of 20) in 4 years. With a projected earnings retention ratio of 0.6 and a dividend of $ 0.3461 at that point, what will be the terminal value of the stock according to this method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_pe_ratio = 20\n    years = 4\n    future_retention_ratio = 0.6\n    future_dividend = 0.3461\n\n    # Do math calculation to get the answer\n    future_earnings_per_share = future_dividend / (1 - future_retention_ratio)\n    terminal_value = future_earnings_per_share * future_pe_ratio\n\n    # return answer\n    return terminal_value\n```\n\nThis Python program calculates the terminal value of PZ Inc.'s stock based on the information provided:\n\n1. We define the variables based on the given information:\n   - Future P/E ratio of 20\n   - Time horizon of 4 years\n   - Future earnings retention ratio of 0.6\n   - Future dividend of $0.3461\n\n2. We calculate the future earnings per share by dividing the future dividend by (1 - retention ratio). This is because the dividend is the portion of earnings that is not retained, so: \n   Dividend = EPS * (1 - Retention Ratio)\n   Therefore, EPS = Dividend / (1 - Retention Ratio)\n\n3. We then calculate the terminal value by multiplying the future earnings per share by the future P/E ratio of 20.\n\n4. Finally, we return the terminal value as the answer.\n\nThis program will return the terminal value of the stock according to Jacques' method."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-99",
        "python_solution": "",
        "ground_truth": null,
        "question": "Compute the correlation of the two properties: return variance of property X: 0.16, return variance of property Y: 0.09, covariance between the returns of X and Y: 0.009.",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    var_x = 0.16\n    var_y = 0.09\n    cov_xy = 0.009\n    \n    # Do math calculation to get the answer\n    correlation = cov_xy / (var_x**0.5 * var_y**0.5)\n    \n    # return answer\n    return correlation\n```\n\nThis program calculates the correlation between two properties X and Y using the given information:\n1. Return variance of property X: 0.16\n2. Return variance of property Y: 0.09\n3. Covariance between the returns of X and Y: 0.009\n\nThe correlation coefficient is calculated using the formula:\ncorrelation = covariance(X,Y) / (standard_deviation(X) * standard_deviation(Y))\n\nWhere standard deviation is the square root of variance.\n\nThe program defines the variables, performs the calculation, and returns the correlation coefficient as the answer."
        ]
    },
    {
        "tables": [
            "|                                             | Fund A | Fund B |\n|---------------------------------------------|--------|--------|\n| Portfolio weights (%)                       | 70     | 30     |\n| Expected returns (%)                        | 10     | 16     |\n| Standard deviations (%)                     | 7      | 13     |\n| Correlation between the returns of Fund A and Fund B | 0.80 |      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-100",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the standard deviation of return for a portfolio made up of Investment X and Investment Y?",
        "output": [
            "def solution():\n    # Define variables name and value\n    w_A = 0.70  # weight of Fund A\n    w_B = 0.30  # weight of Fund B\n    r_A = 0.10  # expected return of Fund A\n    r_B = 0.16  # expected return of Fund B\n    std_A = 0.07  # standard deviation of Fund A\n    std_B = 0.13  # standard deviation of Fund B\n    corr_AB = 0.80  # correlation between Fund A and Fund B\n\n    # Do math calculation to get the answer\n    var_A = std_A ** 2\n    var_B = std_B ** 2\n    cov_AB = corr_AB * std_A * std_B\n\n    portfolio_variance = (w_A ** 2 * var_A) + (w_B ** 2 * var_B) + (2 * w_A * w_B * cov_AB)\n    portfolio_std_dev = (portfolio_variance) ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n\n```\n\nThis Python program calculates the standard deviation of return for a portfolio made up of Fund A and Fund B using the provided data. The portfolio standard deviation is calculated using the formula:\n\nσp = √(w_A^2 * σ_A^2 + w_B^2 * σ_B^2 + 2 * w_A * w_B * ρ_AB * σ_A * σ_B)\n\nWhere:\n- w_A and w_B are the portfolio weights\n- σ_A and σ_B are the standard deviations of the individual funds\n- ρ_AB is the correlation between the returns of Fund A and Fund B\n\nThe program defines the variables, performs the calculation, and returns the portfolio standard deviation as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-101",
        "python_solution": "",
        "ground_truth": null,
        "question": "George Smith and his group gather a lot of analytical and statistical information about the automobile market. Based on this information, they infer that the average cost of SUVs exceeds $46,435 in their nation. Following this, they randomly pick 64 SUVs with an average cost of $46,760. The standard deviation of this sample is assumed to be 1370. George Smith performs a hypothesis test to validate their inference. At what significance level should George Smith reject the null hypothesis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    population_mean = 46435\n    sample_mean = 46760\n    sample_size = 64\n    sample_std_dev = 1370\n    \n    # Do math calculation to get the answer\n    standard_error = sample_std_dev / (sample_size ** 0.5)\n    z_score = (sample_mean - population_mean) / standard_error\n    \n    # Calculate p-value (two-tailed test)\n    from scipy import stats\n    p_value = 2 * (1 - stats.norm.cdf(abs(z_score)))\n    \n    # return answer\n    return p_value\n```\n\nThis Python program calculates the p-value for the given hypothesis test. Here's a breakdown of the steps:\n\n1. We define the variables based on the information provided in the question.\n2. We calculate the standard error and z-score.\n3. We use the scipy.stats module to calculate the p-value for a two-tailed test.\n4. The p-value is returned as the answer.\n\nThe significance level at which George Smith should reject the null hypothesis is equal to this p-value. If you need to round the result or format it in a specific way, you can modify the return statement accordingly."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-102",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial performance evaluator is working on some performance indicators for portfolio XYZ. Portfolio XYZ has a projected return of 9%, a volatility of 21%, and a beta of 0.3. If the riskless rate is 3%, what is the Treynor ratio of portfolio XYZ?",
        "output": [
            "Here's the Python program to calculate the Treynor ratio for portfolio XYZ based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_return = 0.09  # 9% projected return\n    risk_free_rate = 0.03    # 3% riskless rate\n    beta = 0.3               # beta of the portfolio\n\n    # Do math calculation to get the answer\n    excess_return = portfolio_return - risk_free_rate\n    treynor_ratio = excess_return / beta\n\n    # return answer\n    return treynor_ratio\n```\n\nThis program calculates the Treynor ratio, which is a measure of returns earned in excess of that which could have been earned on a riskless investment per unit of market risk. The formula for the Treynor ratio is:\n\nTreynor Ratio = (Portfolio Return - Risk-Free Rate) / Portfolio Beta\n\nIn this case:\n- Portfolio Return = 9% = 0.09\n- Risk-Free Rate = 3% = 0.03\n- Portfolio Beta = 0.3\n\nThe program subtracts the risk-free rate from the portfolio return to get the excess return, then divides this by the portfolio's beta to obtain the Treynor ratio.\n\nNote that the volatility (21%) is not used in the Treynor ratio calculation, which is why it's not included in the program."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-103",
        "python_solution": "",
        "ground_truth": null,
        "question": "The monthly return correlation of equities in a portfolio adheres to the law of mean reverting and the long-term monthly return correlation is approximately 30%. Upon carrying out regression, we determine the mean reverting rate to be around 0.8. If the current month's return correlation is 56%, what would be the projected next monthly return correlation of equities in the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    long_term_correlation = 0.30\n    mean_reverting_rate = 0.8\n    current_correlation = 0.56\n\n    # Do math calculation to get the answer\n    delta = current_correlation - long_term_correlation\n    change = delta * mean_reverting_rate\n    next_month_correlation = current_correlation - change\n\n    # return answer\n    return next_month_correlation\n```\n\nThis Python program calculates the projected next monthly return correlation of equities in the portfolio based on the given information:\n\n1. We define the variables:\n   - `long_term_correlation`: The long-term monthly return correlation (30% or 0.30)\n   - `mean_reverting_rate`: The mean reverting rate (0.8)\n   - `current_correlation`: The current month's return correlation (56% or 0.56)\n\n2. We calculate the next month's correlation:\n   - First, we find the difference (`delta`) between the current correlation and the long-term correlation.\n   - Then, we calculate the change by multiplying this delta with the mean reverting rate.\n   - Finally, we subtract this change from the current correlation to get the next month's projected correlation.\n\n3. The function returns the calculated next month's correlation.\n\nThis solution applies the concept of mean reversion, where the correlation is expected to move back towards the long-term average at a rate determined by the mean reverting rate."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-104",
        "python_solution": "",
        "ground_truth": null,
        "question": "A Chinese business organization primarily exports products to US and offers 90 days credit term to US firms. The transactions are settled in USD. The organization from China is concerned that the USD will lose its value and wants to hedge the potential risk by engaging in a short forward contract. The local risk-free rate is 4% and the foreign risk-free rate is 2%. The current spot rate is 6.7523￥per $. What is the cost of the forward contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 6.7523  # Current spot rate (CNY per USD)\n    local_rate = 0.04  # Local (Chinese) risk-free rate\n    foreign_rate = 0.02  # Foreign (US) risk-free rate\n    time = 90 / 365  # Time in years (90 days)\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate * ((1 + local_rate) / (1 + foreign_rate)) ** time\n    \n    # Calculate the cost of the forward contract\n    cost = forward_rate - spot_rate\n\n    # return answer\n    return cost\n```\n\nThis Python program calculates the cost of the forward contract based on the given information:\n\n1. We define the variables with the given values:\n   - The spot rate is 6.7523 CNY per USD\n   - The local (Chinese) risk-free rate is 4% (0.04)\n   - The foreign (US) risk-free rate is 2% (0.02)\n   - The time period is 90 days, which we convert to years by dividing by 365\n\n2. We calculate the forward rate using the formula:\n   Forward Rate = Spot Rate * ((1 + Local Rate) / (1 + Foreign Rate)) ^ Time\n\n3. The cost of the forward contract is the difference between the forward rate and the spot rate.\n\n4. The function returns this cost, which represents the premium or discount for the forward contract in CNY per USD.\n\nThis program will give you the cost of the forward contract, which is the amount above or below the spot rate that the Chinese business will need to pay to hedge their currency risk for the 90-day period."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-105",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the holding period return for a trader who purchased 200 shares at $20 each and later sold them all at $22.5 per share, after obtaining a dividend of $0.2 per share for a quarter?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 20\n    selling_price = 22.5\n    shares = 200\n    dividend_per_share = 0.2\n\n    # Do math calculation to get the answer\n    initial_investment = initial_price * shares\n    final_value = selling_price * shares\n    total_dividends = dividend_per_share * shares\n    \n    total_return = (final_value - initial_investment + total_dividends)\n    holding_period_return = total_return / initial_investment\n    \n    # Convert to percentage\n    holding_period_return_percentage = holding_period_return * 100\n\n    # return answer\n    return round(holding_period_return_percentage, 2)\n```\n\nThis Python program calculates the holding period return for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the variables for the initial price, selling price, number of shares, and dividend per share.\n2. We calculate the initial investment and the final value of the shares.\n3. We calculate the total dividends received.\n4. We then calculate the total return by subtracting the initial investment from the final value and adding the dividends.\n5. The holding period return is calculated by dividing the total return by the initial investment.\n6. We convert the result to a percentage by multiplying by 100.\n7. Finally, we round the result to two decimal places and return it.\n\nThe function will return the holding period return as a percentage."
        ]
    },
    {
        "tables": [
            "|                       |       |                         |       |\n|-----------------------|-------|-------------------------|-------|\n| **Exhibit 1. Blanca Co. Balance Sheet at 31 December 2016 ($ millions)** |       |                         |       |\n| Cash                 | 20    | Current liabilities     | 25    |\n| Accounts receivable  | 50    | Noncurrent liabilities  | 30    |\n| Other assets         | 30    | Shareholders' equity    | 45    |\n| Total assets         | 100   | Total liabilities and equity | 100   |"
        ],
        "topic": "Accounting",
        "question_id": "test-106",
        "python_solution": "",
        "ground_truth": null,
        "question": "An analyst from an international securities firm's research department, named John Thronen, is working on a research report for Topmaker, Inc. This publicly-traded company adheres to IFRS. Now, a company named Castello Corp. has a plan to generate $40 million in capital through loans backed by its financial receivables. The plan entails formation of a special-purpose entity (SPE), injecting $10 million into the SPE, getting the SPE to secure a $40 million loan, and then use this capital to acquire $50 million worth of receivables from Castello Corp. Castello Corp., which fits the concept of control, aims to consolidate the SPE, with its balance sheet displayed in Exhibit 1. Considering Exhibit 1 and Castello Corp.'s method of lending against its financial receivables, what will the total assets on the consolidated balance sheet look like?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_total_assets = 100  # From Exhibit 1\n    spe_cash = 40  # Cash from the loan secured by SPE\n    spe_loan = 40  # Loan amount taken by SPE\n    \n    # Do math calculation to get the answer\n    # The SPE's $50 million of receivables are already included in Castello Corp's balance sheet\n    # We only need to add the additional cash from the loan\n    new_total_assets = current_total_assets + spe_cash\n    \n    # return answer\n    return new_total_assets\n```\n\nThis solution takes into account the following:\n\n1. The current total assets of Castello Corp. are $100 million (from Exhibit 1).\n2. The SPE secures a $40 million loan, which becomes cash on the consolidated balance sheet.\n3. The $50 million of receivables transferred to the SPE are already included in Castello Corp's balance sheet (in the $50 million of accounts receivable), so we don't need to add them again.\n4. The $10 million injected into the SPE by Castello Corp. is likely already accounted for in the current balance sheet, so we don't need to consider it separately.\n\nThe program adds the $40 million cash from the SPE's loan to the current total assets, resulting in the new total assets figure for the consolidated balance sheet."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-107",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer acquires an annual coupon bond with a 8% coupon rate and exactly 20 years left until maturity at a price equivalent to its par value. The buyer's investment horizon spans eight years. The approximate modified duration of the bond is 12.480 years. What is the duration gap at the moment of acquisition?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08\n    years_to_maturity = 20\n    investment_horizon = 8\n    modified_duration = 12.480\n\n    # Do math calculation to get the answer\n    duration_gap = modified_duration - investment_horizon\n\n    # return answer\n    return duration_gap\n```\n\nThis Python function calculates the duration gap for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the known variables:\n   - The coupon rate is 8% (0.08)\n   - The bond has 20 years left until maturity\n   - The buyer's investment horizon is 8 years\n   - The approximate modified duration is 12.480 years\n\n2. The duration gap is calculated as the difference between the modified duration and the investment horizon.\n\n3. The function returns the calculated duration gap.\n\nNote that in this case, we don't need to use the coupon rate or years to maturity in the calculation, as the modified duration is already provided. The duration gap is simply the difference between the modified duration and the investment horizon."
        ]
    },
    {
        "tables": [
            "|               | Coefficients | Standard Error | t-Statistic |\n|---------------|--------------|----------------|-------------|\n| Intercept     | 3.7642       | 2.5743         | 1.4622      |\n| Season dummy  | 20.5732      | 10.3958        | 1.9790      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-108",
        "python_solution": "",
        "ground_truth": null,
        "question": "Brown is curious about how the change in seasons impacts the sales of the down jacket. He structures a regression model incorporating a dummy variable (1 for winter and 0 for summer) as an independent variable and the sales volume (in thousands) as the dependent variable and achieves the following outcomes: What is the variance in the sales volume between summer and winter in thousands?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    season_dummy_coefficient = 20.5732\n\n    # Do math calculation to get the answer\n    sales_difference = season_dummy_coefficient\n\n    # return answer\n    return sales_difference\n```\n\nThis Python function calculates the difference in sales volume between summer and winter based on the given regression results. \n\nHere's the explanation:\n\n1. We define the coefficient for the season dummy variable from the regression table (20.5732).\n\n2. The season dummy variable is coded as 1 for winter and 0 for summer. The coefficient represents the change in sales volume (in thousands) when going from summer (0) to winter (1).\n\n3. Therefore, the difference in sales volume between summer and winter is directly represented by this coefficient.\n\n4. We return this value as the answer.\n\nThe function will return 20.5732, which represents the difference in sales volume (in thousands of units) between summer and winter. This means that, on average, 20,573.2 more down jackets are sold in winter compared to summer, according to this regression model."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-109",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive is looking to establish a synthetic tracker fund tied to the S&P 500. The primary investment stands at $500,000,000. Given that an S&P 500 futures contract is valued at $1,000 with a multiplier of $250, and considering a risk-free rate of 3% and a futures expiration in three months, how many futures contracts does he need to purchase?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_amount = 500000000\n    futures_value = 1000\n    futures_multiplier = 250\n    risk_free_rate = 0.03\n    time_to_expiration = 3 / 12  # 3 months expressed in years\n\n    # Do math calculation to get the answer\n    futures_price = futures_value * futures_multiplier\n    discount_factor = 1 / (1 + risk_free_rate * time_to_expiration)\n    adjusted_investment = investment_amount * discount_factor\n    num_contracts = adjusted_investment / futures_price\n    \n    # Round down to the nearest whole number of contracts\n    num_contracts = int(num_contracts)\n\n    # return answer\n    return num_contracts\n```\n\nThis Python program calculates the number of S&P 500 futures contracts needed for the synthetic tracker fund. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the price of one futures contract by multiplying the futures value by the multiplier.\n3. We calculate the discount factor using the risk-free rate and time to expiration.\n4. We adjust the investment amount by multiplying it with the discount factor. This step is necessary because futures contracts are priced to include the expected return at the risk-free rate.\n5. We divide the adjusted investment amount by the price of one futures contract to get the number of contracts needed.\n6. We round down to the nearest whole number of contracts, as partial contracts can't be purchased.\n7. Finally, we return the number of contracts.\n\nThis solution takes into account the time value of money and provides the most accurate number of futures contracts needed for the synthetic tracker fund."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-110",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business owner purchased the property B using loans. They borrowed $220 and their equity is $110. Based on the provided data, what is their leverage ratio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    borrowed_amount = 220\n    equity = 110\n    \n    # Do math calculation to get the answer\n    leverage_ratio = borrowed_amount / equity\n    \n    # return answer\n    return leverage_ratio\n```\n\nThis Python program calculates the leverage ratio based on the given information. The leverage ratio is a measure of how much a company is financed by debt compared to its equity. It's calculated by dividing the borrowed amount (total debt) by the equity.\n\nIn this case:\n- The borrowed amount is $220\n- The equity is $110\n\nThe program calculates the leverage ratio by dividing 220 by 110, which will result in 2. This means the leverage ratio is 2:1, or simply 2, indicating that for every dollar of equity, the business has two dollars of debt."
        ]
    },
    {
        "tables": [
            "| Quanty(Q) | Total Fixed Cost(TFC) | Total Variable Cost(TVC) |\n|-----------|-----------------------|--------------------------|\n| 0         | 200                   | 0                        |\n| 1         | 200                   | 100                      |\n| 2         | 200                   | 150                      |\n| 3         | 200                   | 200                      |\n| 4         | 200                   | 240                      |\n| 5         | 200                   | 320                      |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-111",
        "python_solution": "",
        "ground_truth": null,
        "question": "The operations manager of a company collects the following data about the company's cost structure at various output levels: Please refer to the information in Exhibit 1. What is the average fixed cost (AFC) when the production quantity is 4 units?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    quantity = 4\n    total_fixed_cost = 200\n\n    # Do math calculation to get the answer\n    average_fixed_cost = total_fixed_cost / quantity\n\n    # return answer\n    return average_fixed_cost\n```\n\nThis program calculates the Average Fixed Cost (AFC) when the production quantity is 4 units. Here's how it works:\n\n1. We define the variables:\n   - `quantity` is set to 4, as we're asked about the production quantity of 4 units.\n   - `total_fixed_cost` is set to 200, which remains constant for all production levels according to the table.\n\n2. We calculate the Average Fixed Cost by dividing the Total Fixed Cost by the quantity.\n\n3. The function returns the calculated Average Fixed Cost.\n\nWhen you run this function, it will return 50, which means the Average Fixed Cost (AFC) is $50 per unit when the production quantity is 4 units."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-112",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, the S&P 500 had quarterly returns of 8%, -5%, 3%, and 1%. What is the quarterly arithmetic mean return for the S&P 500?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    q1_return = 0.08  # 8%\n    q2_return = -0.05  # -5%\n    q3_return = 0.03  # 3%\n    q4_return = 0.01  # 1%\n    num_quarters = 4\n\n    # Do math calculation to get the answer\n    total_return = q1_return + q2_return + q3_return + q4_return\n    arithmetic_mean = total_return / num_quarters\n\n    # return answer\n    return arithmetic_mean\n```\n\nThis program calculates the quarterly arithmetic mean return for the S&P 500 in 2016 based on the given quarterly returns. The arithmetic mean is calculated by summing up all the returns and dividing by the number of quarters."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-113",
        "python_solution": "",
        "ground_truth": null,
        "question": "A consultant has projected that the intrinsic worth of company B's share would be $25. If the latest dividend was $2 and is anticipated to rise at 3%, what's the necessitated return rate of a stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intrinsic_value = 25\n    latest_dividend = 2\n    growth_rate = 0.03\n\n    # Do math calculation to get the answer\n    # Using the Gordon Growth Model: P = D / (r - g)\n    # Where P is the intrinsic value, D is the next year's dividend, r is the required rate of return, and g is the growth rate\n    # Rearranging the formula: r = (D / P) + g\n\n    next_year_dividend = latest_dividend * (1 + growth_rate)\n    required_return = (next_year_dividend / intrinsic_value) + growth_rate\n\n    # Convert to percentage\n    required_return_percentage = required_return * 100\n\n    # return answer\n    return round(required_return_percentage, 2)\n```\n\nThis Python program calculates the required rate of return for company B's stock using the Gordon Growth Model. Here's a breakdown of the solution:\n\n1. We define the given variables: intrinsic value ($25), latest dividend ($2), and growth rate (3% or 0.03).\n\n2. We calculate the next year's dividend by multiplying the latest dividend by (1 + growth rate).\n\n3. We use the Gordon Growth Model formula, rearranged to solve for the required rate of return: r = (D / P) + g\n   Where r is the required rate of return, D is the next year's dividend, P is the intrinsic value, and g is the growth rate.\n\n4. We convert the result to a percentage by multiplying by 100.\n\n5. Finally, we round the result to two decimal places for readability and return it.\n\nThe program will return the required rate of return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-114",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an organization's pretax income stands at $1,500,000, with taxable income amounting to $1,000,000 and a tax rate of 35%, what should be the declared current tax expense for the corporation?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    pretax_income = 1500000\n    taxable_income = 1000000\n    tax_rate = 0.35\n\n    # Do math calculation to get the answer\n    current_tax_expense = taxable_income * tax_rate\n\n    # return answer\n    return current_tax_expense\n```\n\nThis program calculates the current tax expense for the corporation based on the given information. The current tax expense is determined by multiplying the taxable income by the tax rate. The pretax income is not directly used in this calculation, as the tax is applied to the taxable income."
        ]
    },
    {
        "tables": [
            "| Days to Maturity | LIBOR | Present Value Factors |\n|------------------|-------|-----------------------|\n| 180              | 3.0%  | 0.985222              |\n| 360              | 3.5%  | 0.966184              |\n| 540              | 4.0%  | 0.943396              |\n| 720              | 4.5%  | 0.917431              |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-115",
        "python_solution": "",
        "ground_truth": null,
        "question": "The two-year Libor-based interest rate swap with semi-annual resets (30/360 day count). In light of the following data, what is the swap's fixed rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pv_factors = [0.985222, 0.966184, 0.943396, 0.917431]\n    libor_rates = [0.03, 0.035, 0.04, 0.045]\n    days_to_maturity = [180, 360, 540, 720]\n    \n    # Do math calculation to get the answer\n    sum_pv_factors = sum(pv_factors)\n    \n    weighted_libor = sum(pv * rate for pv, rate in zip(pv_factors, libor_rates))\n    \n    fixed_rate = weighted_libor / sum_pv_factors\n    \n    # Convert to percentage and round to 4 decimal places\n    fixed_rate_percentage = round(fixed_rate * 100, 4)\n    \n    # return answer\n    return fixed_rate_percentage\n```\n\nThis Python program calculates the fixed rate for the two-year Libor-based interest rate swap with semi-annual resets. Here's a breakdown of the calculation:\n\n1. We define the present value factors, LIBOR rates, and days to maturity from the given table.\n\n2. We calculate the sum of all present value factors.\n\n3. We calculate the weighted LIBOR by multiplying each LIBOR rate with its corresponding present value factor and summing these products.\n\n4. The fixed rate is then calculated by dividing the weighted LIBOR by the sum of present value factors.\n\n5. Finally, we convert the rate to a percentage and round it to 4 decimal places for presentation.\n\nThis approach uses the principle that in a fair swap, the present value of the fixed leg should equal the present value of the floating leg at initiation. The program returns the fixed rate as a percentage."
        ]
    },
    {
        "tables": [
            "| Sales price per unit | £85               |\n|---------------------|------------------|\n| Variable cost per unit  | £65               |\n| Fixed operating costs   | £50 million   |\n| Fixed financial costs   | £30 million   |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-116",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the company's breakeven volume of sales in million units, given the following data is available for a company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_price_per_unit = 85\n    variable_cost_per_unit = 65\n    fixed_operating_costs = 50000000\n    fixed_financial_costs = 30000000\n\n    # Do math calculation to get the answer\n    contribution_margin_per_unit = sales_price_per_unit - variable_cost_per_unit\n    total_fixed_costs = fixed_operating_costs + fixed_financial_costs\n    breakeven_volume = total_fixed_costs / contribution_margin_per_unit\n\n    # Convert to millions of units\n    breakeven_volume_millions = breakeven_volume / 1000000\n\n    # return answer\n    return breakeven_volume_millions\n```\n\nThis Python program calculates the breakeven volume of sales in million units based on the given data. Here's how it works:\n\n1. We define the variables with the given values from the table.\n2. We calculate the contribution margin per unit by subtracting the variable cost per unit from the sales price per unit.\n3. We sum up the fixed operating costs and fixed financial costs to get the total fixed costs.\n4. The breakeven volume is calculated by dividing the total fixed costs by the contribution margin per unit.\n5. We convert the result to millions of units by dividing by 1,000,000.\n6. Finally, we return the breakeven volume in millions of units.\n\nWhen you run this function, it will return the company's breakeven volume of sales in million units."
        ]
    },
    {
        "tables": [
            "| Risk free interest rate (1-year, incorporating 2.6% inflation expectation) | 3.8% |\n| --- | --- |\n| Term premium(10-year vs.1-year government bond) | 1% |\n| 10-year BBB credit premium (over 10-year government bond) | 75bp |\n| Estimated liquidity premium on 10-year corporate bonds | 55bp |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-117",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial backer is pondering including three new assets into his globally focused fixed income collection. He is focusing on these non-callable assets: 1-year government bond, 10-year government bond and a 10-year BBB rated corporate bond. His plan is to either equally invest in all three assets under scrutiny, or he'll avoid all of them for the time being. His condition to make the additional investment is that the projected spread/premium of the equally weighed investment must be at least 1.5 percent (150bp) greater than the 1-year government bond. Using just the given details, calculate the estimated return that an equal-weighted investment in these three assets could offer.",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.038  # 3.8%\n    term_premium = 0.01  # 1%\n    bbb_credit_premium = 0.0075  # 75bp\n    liquidity_premium = 0.0055  # 55bp\n\n    # Do math calculation to get the answer\n    \n    # 1-year government bond yield\n    one_year_gov_yield = risk_free_rate\n    \n    # 10-year government bond yield\n    ten_year_gov_yield = risk_free_rate + term_premium\n    \n    # 10-year BBB rated corporate bond yield\n    ten_year_bbb_yield = ten_year_gov_yield + bbb_credit_premium + liquidity_premium\n    \n    # Calculate the average yield of the three assets\n    average_yield = (one_year_gov_yield + ten_year_gov_yield + ten_year_bbb_yield) / 3\n    \n    # Convert to percentage\n    average_yield_percentage = average_yield * 100\n\n    # return answer\n    return round(average_yield_percentage, 2)\n```\n\nThis program calculates the estimated return of an equal-weighted investment in the three assets mentioned:\n\n1. 1-year government bond\n2. 10-year government bond\n3. 10-year BBB rated corporate bond\n\nThe program first defines the given rates and premiums. Then it calculates the yield for each asset:\n\n1. The 1-year government bond yield is simply the risk-free rate.\n2. The 10-year government bond yield is the risk-free rate plus the term premium.\n3. The 10-year BBB rated corporate bond yield is the 10-year government bond yield plus the BBB credit premium and the liquidity premium.\n\nFinally, it calculates the average yield of these three assets, converts it to a percentage, rounds it to two decimal places, and returns the result.\n\nThis average yield represents the estimated return that an equal-weighted investment in these three assets could offer."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-118",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Apple View Corp.'s dividend policy is characterized by a slow adaptation towards a specific dividend payout proportion, and the company has projected its earnings per share for this year to be $4.00, given that last year, their earnings per share were $3.00 and they paid out a dividend of $0.60 per share, what will be this year's dividend per share, given that they have a predetermined payout proportion of 25 percent and employ a five-year period to adjust their dividend?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    target_payout_ratio = 0.25\n    adjustment_period = 5\n    last_year_eps = 3.00\n    last_year_dividend = 0.60\n    current_year_eps = 4.00\n    \n    # Do math calculation to get the answer\n    last_year_payout_ratio = last_year_dividend / last_year_eps\n    target_dividend = current_year_eps * target_payout_ratio\n    \n    adjustment = (target_dividend - last_year_dividend) / adjustment_period\n    current_year_dividend = last_year_dividend + adjustment\n    \n    # return answer\n    return round(current_year_dividend, 2)\n```\n\nThis Python program calculates the dividend per share for the current year based on the given information and the company's dividend policy. Here's a breakdown of the calculation:\n\n1. We define the variables with the given information.\n2. We calculate the payout ratio from last year.\n3. We determine the target dividend based on the current year's EPS and the target payout ratio.\n4. We calculate the adjustment needed to reach the target dividend over the 5-year period.\n5. We add this adjustment to last year's dividend to get the current year's dividend.\n6. Finally, we round the result to two decimal places and return it.\n\nThis approach reflects the company's policy of slow adaptation towards a specific dividend payout proportion over a five-year period."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-119",
        "python_solution": "",
        "ground_truth": null,
        "question": "A firm releases a leveraged floating-rate note which offers a coupon of 1.5 times Libor on notional principle of $1 million. This firm uses the capital to purchase a fixed-rate bond with 6% coupon rate. To counter the risk of fluctuating payments, the firm partakes in a swap with a fixed rate of 5% and a floating rate of 1.5 times Libor. Determine the net income from these transactions.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 1000000\n    fixed_rate_bond_coupon = 0.06\n    swap_fixed_rate = 0.05\n    \n    # Do math calculation to get the answer\n    \n    # Income from fixed-rate bond\n    income_from_bond = notional_principal * fixed_rate_bond_coupon\n    \n    # Payment on swap (firm pays fixed rate)\n    swap_payment = notional_principal * swap_fixed_rate\n    \n    # Net income\n    net_income = income_from_bond - swap_payment\n    \n    # return answer\n    return net_income\n```\n\nThis Python program calculates the net income from the transactions described in the question. Here's a breakdown of the calculation:\n\n1. We define the notional principal ($1 million), the coupon rate of the fixed-rate bond (6%), and the fixed rate of the swap (5%).\n\n2. We calculate the income from the fixed-rate bond by multiplying the notional principal by the bond's coupon rate.\n\n3. We calculate the payment on the swap by multiplying the notional principal by the swap's fixed rate. The firm pays this fixed rate and receives the floating rate (which cancels out the floating rate payment on the note).\n\n4. The net income is the difference between the income from the bond and the payment on the swap.\n\n5. We return this net income as the answer.\n\nNote that the floating rate payments (1.5 times Libor) cancel out between the note and the swap, so they don't affect the net income calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-120",
        "python_solution": "",
        "ground_truth": null,
        "question": "A production company named Silver borrowed USD 500 million from Star Bank. To protect its debt exposure to Silver, Star Bank engages in a credit default swap transaction with Metro Bank, where Metro Bank would wholly reimburse Star Bank if Silver defaults. If the defaults of Star Bank, Metro Bank, and Silver are independent and their default probabilities are considered to be 0.5%, 0.6%, and 4.0%, respectively. What is the likelihood that Star Bank will encounter a credit loss in its exposure to Silver?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    star_bank_default_prob = 0.005  # 0.5%\n    metro_bank_default_prob = 0.006  # 0.6%\n    silver_default_prob = 0.04  # 4.0%\n\n    # Do math calculation to get the answer\n    # Star Bank will encounter a credit loss if:\n    # 1. Silver defaults AND\n    # 2. Either Star Bank does not default AND Metro Bank defaults, OR Star Bank defaults\n\n    prob_star_no_default = 1 - star_bank_default_prob\n    prob_metro_default = metro_bank_default_prob\n\n    prob_loss = silver_default_prob * (\n        (prob_star_no_default * prob_metro_default) + star_bank_default_prob\n    )\n\n    # return answer\n    return prob_loss\n```\n\nThis Python program calculates the probability that Star Bank will encounter a credit loss in its exposure to Silver. Here's how it works:\n\n1. We define the default probabilities for Star Bank, Metro Bank, and Silver.\n\n2. We calculate the probability of the credit loss scenario:\n   - Silver must default (probability: silver_default_prob)\n   - AND EITHER:\n     a) Star Bank does not default (probability: 1 - star_bank_default_prob) AND Metro Bank defaults (probability: metro_bank_default_prob)\n     OR\n     b) Star Bank defaults (probability: star_bank_default_prob)\n\n3. We multiply these probabilities together to get the final probability of a credit loss.\n\n4. The function returns this probability as the answer.\n\nThis solution takes into account all possible scenarios where Star Bank could face a credit loss, considering the independence of the default events."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 3% |\n| 2 years | 4% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-121",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming the sequence of spot rates provided, what would be the cost of a 2-year bond with a 5% coupon rate, with interest paid yearly, that a trader is thinking about buying?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000\n    coupon_rate = 0.05\n    spot_rate_1year = 0.03\n    spot_rate_2year = 0.04\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    present_value_coupon1 = coupon_payment / (1 + spot_rate_1year)\n    present_value_coupon2 = coupon_payment / (1 + spot_rate_2year)**2\n    present_value_face = face_value / (1 + spot_rate_2year)**2\n\n    bond_price = present_value_coupon1 + present_value_coupon2 + present_value_face\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a 2-year bond with a 5% coupon rate, given the spot rates provided in the table. Here's a breakdown of the calculation:\n\n1. We define the variables: face value (assumed to be $1000), coupon rate (5% or 0.05), and the spot rates for 1 and 2 years.\n\n2. We calculate the coupon payment, which is the face value multiplied by the coupon rate.\n\n3. We calculate the present value of each cash flow:\n   - The first coupon payment is discounted using the 1-year spot rate\n   - The second coupon payment and the face value are discounted using the 2-year spot rate\n\n4. We sum up all the present values to get the bond price.\n\n5. Finally, we return the bond price rounded to two decimal places.\n\nThis program will return the cost of the bond that the trader is thinking about buying, based on the given spot rates and coupon rate."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-122",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond portfolio contains two bonds, bond X and bond Y. The values of bond X and bond Y are $60 millions and $40 millions respectively. The one-year probabilities of default and the recovery rate of bond X are 5% and 60% respectively, while for bond Y are 7% and 50%. Can you compute the one-year expected credit loss of this compilation? Assume that the default risk between X and Y is independent.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_x_value = 60000000\n    bond_y_value = 40000000\n    bond_x_default_prob = 0.05\n    bond_y_default_prob = 0.07\n    bond_x_recovery_rate = 0.60\n    bond_y_recovery_rate = 0.50\n\n    # Do math calculation to get the answer\n    bond_x_loss = bond_x_value * bond_x_default_prob * (1 - bond_x_recovery_rate)\n    bond_y_loss = bond_y_value * bond_y_default_prob * (1 - bond_y_recovery_rate)\n    \n    total_expected_loss = bond_x_loss + bond_y_loss\n\n    # return answer\n    return total_expected_loss\n```\n\nThis Python program calculates the one-year expected credit loss for the bond portfolio as follows:\n\n1. We define the variables for the bond values, default probabilities, and recovery rates.\n\n2. For each bond, we calculate the expected loss using the formula:\n   Expected Loss = Bond Value * Probability of Default * (1 - Recovery Rate)\n\n3. We sum up the expected losses from both bonds to get the total expected credit loss for the portfolio.\n\n4. The function returns the total expected credit loss.\n\nNote that this calculation assumes independence between the default risks of Bond X and Bond Y, as stated in the question. The result will be in dollars, representing the expected credit loss for the entire portfolio over a one-year period."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-123",
        "python_solution": "",
        "ground_truth": null,
        "question": "The demand schedule in an entirely competitive market is dictated by P = 93 – 1.5Q (for Q ≤ 62) and the enduring cost organization of each corporation is: Total cost: 256 + 2Q +  4Q2 Average cost: 256/Q + 2 + 4Q Marginal cost: 2 + 8Q New corporations will infiltrate the market at any price above:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Q = 0  # We'll start with Q = 0 and increase it until we find the minimum of the average cost\n\n    # Do math calculation to get the answer\n    min_avg_cost = float('inf')\n    \n    while Q <= 62:  # The demand function is only valid for Q ≤ 62\n        avg_cost = 256/Q + 2 + 4*Q if Q != 0 else float('inf')\n        \n        if avg_cost < min_avg_cost:\n            min_avg_cost = avg_cost\n        elif avg_cost > min_avg_cost:\n            # Once the average cost starts increasing, we've found the minimum\n            break\n        \n        Q += 0.01  # Small increment for more precise result\n\n    # The minimum average cost is the price at which new corporations will enter\n    answer = round(min_avg_cost, 2)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the minimum average cost, which is the price at which new corporations will enter the market. Here's how it works:\n\n1. We start with Q = 0 and gradually increase it.\n2. For each Q, we calculate the average cost using the given formula: AC = 256/Q + 2 + 4Q.\n3. We keep track of the minimum average cost we've seen so far.\n4. We continue this process until the average cost starts increasing, which indicates we've found the minimum.\n5. We round the result to two decimal places for a reasonable level of precision.\n\nThe program returns this minimum average cost, which is the price above which new corporations will enter the market."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-124",
        "python_solution": "",
        "ground_truth": null,
        "question": "The demand function for groceries is denoted by the equation Qdpg = 80 - 3Ppg + 0.1I + 0.5Ppdr where Qdpg is the quantity of groceries, Ppg is the price of groceries, I is the income, and Ppdr is the price of beverages. We understand that: Ppg = 30, I = 110, and Ppdr = 20. What will the price elasticity of demand for groceries be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Ppg = 30\n    I = 110\n    Ppdr = 20\n    \n    # Do math calculation to get the answer\n    Qdpg = 80 - 3*Ppg + 0.1*I + 0.5*Ppdr\n    \n    # Calculate the slope of the demand function with respect to Ppg\n    slope = -3\n    \n    # Calculate price elasticity of demand\n    elasticity = slope * (Ppg / Qdpg)\n    \n    # return answer\n    return abs(elasticity)\n```\n\nThis Python program calculates the price elasticity of demand for groceries based on the given demand function and values. Here's a breakdown of the steps:\n\n1. We define the known variables: Ppg (price of groceries), I (income), and Ppdr (price of beverages).\n\n2. We calculate Qdpg (quantity of groceries demanded) using the given demand function.\n\n3. We identify the slope of the demand function with respect to Ppg, which is -3.\n\n4. We calculate the price elasticity of demand using the formula: elasticity = (∆Q/∆P) * (P/Q), which simplifies to slope * (P/Q) in this case.\n\n5. We return the absolute value of the elasticity, as elasticity is typically expressed as a positive number.\n\nThis program will return the price elasticity of demand for groceries given the specified conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-125",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is assessing the liquidity of XYZ Corporation based on the financial data from 2016 and 2017. The total debt was $200 in 2016 and rose to $300 in 2017. The total assets were $500 in 2016, increasing to $800 in 2017. The total equity was $250 in 2016 and went up to $400 in 2017. What is the financial leverage ratio in 2017?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_2017 = 800\n    total_equity_2017 = 400\n    \n    # Do math calculation to get the answer\n    financial_leverage_ratio_2017 = total_assets_2017 / total_equity_2017\n    \n    # return answer\n    return financial_leverage_ratio_2017\n```\n\nThis Python program calculates the financial leverage ratio for XYZ Corporation in 2017. The financial leverage ratio is calculated by dividing total assets by total equity. \n\nIn this case:\n- Total assets in 2017 = $800\n- Total equity in 2017 = $400\n\nThe program defines these values, performs the calculation, and returns the result. When executed, this function will return the financial leverage ratio for 2017, which is 2.0 (800 / 400 = 2)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-126",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment director purchased 600 call options on a stock that doesn't pay dividends, with a strike price of USD 60, at a cost of USD 3 each. If the current stock price is at USD 62, the daily stock return volatility is pegged at 1.82%, and the delta of the option stands at 0.5. How can we approximate the 1-day 95% VaR of this position using the delta-normal approach?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_options = 600\n    option_cost = 3\n    stock_price = 62\n    daily_volatility = 0.0182\n    delta = 0.5\n    confidence_level = 0.95\n    \n    # Do math calculation to get the answer\n    position_value = num_options * stock_price * delta\n    z_score = 1.645  # Z-score for 95% confidence level\n    \n    daily_var = position_value * daily_volatility * z_score\n    \n    # return answer\n    return daily_var\n```\n\nThis Python program calculates the 1-day 95% Value at Risk (VaR) using the delta-normal approach for the given option position. Here's a breakdown of the calculation:\n\n1. We define all the given variables, including the number of options, option cost, current stock price, daily volatility, delta, and confidence level.\n\n2. We calculate the position value using the formula: number of options * current stock price * delta. This gives us the equivalent stock position.\n\n3. We use a z-score of 1.645, which corresponds to a 95% confidence level in a normal distribution.\n\n4. The daily VaR is then calculated using the formula: position value * daily volatility * z-score.\n\n5. The function returns the calculated daily VaR.\n\nThis approach assumes a normal distribution of returns and uses the delta of the option to approximate the option's price change based on the underlying stock's price change. It's a simplified method that provides a reasonable estimate of VaR for options, especially for short time horizons."
        ]
    },
    {
        "tables": [
            "|        | £ thousands |\n|--------|-------------|\n| Carrying amount | 132 |\n| Undiscounted expected future cash flows | 120 |\n| Present value of expected future cash flows | 100 |\n| Fair value if sold | 105 |\n| Costs to sell | 1 |"
        ],
        "topic": "Accounting",
        "question_id": "test-127",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the data analyzed, what will be the impairment loss on this manufacturing plant (in thousands) under IFRS?",
        "output": [
            "Here's the Python program to calculate the impairment loss on the manufacturing plant under IFRS based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    carrying_amount = 132\n    present_value_cash_flows = 100\n    fair_value = 105\n    costs_to_sell = 1\n\n    # Do math calculation to get the answer\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    recoverable_amount = max(present_value_cash_flows, fair_value_less_costs_to_sell)\n    impairment_loss = carrying_amount - recoverable_amount\n\n    # return answer\n    return impairment_loss\n```\n\nThis program calculates the impairment loss according to IFRS principles:\n\n1. It first defines the relevant variables from the provided data.\n2. It calculates the fair value less costs to sell.\n3. It determines the recoverable amount, which is the higher of the present value of expected future cash flows and the fair value less costs to sell.\n4. Finally, it calculates the impairment loss as the difference between the carrying amount and the recoverable amount.\n\nThe function will return the impairment loss in thousands of pounds, as requested in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-128",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a tax rate of 28%, what is the annual after-tax cost of debt (%) for a business that releases fresh 20-year $1,000 bonds with a coupon rate of 6.2% payable semiannually at an issuance price of $1,030.34?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.28\n    face_value = 1000\n    coupon_rate = 0.062\n    issuance_price = 1030.34\n    payments_per_year = 2\n\n    # Do math calculation to get the answer\n    annual_interest_payment = face_value * coupon_rate\n    pre_tax_yield = (annual_interest_payment + (face_value - issuance_price) / 20) / issuance_price\n    after_tax_cost_of_debt = pre_tax_yield * (1 - tax_rate)\n\n    # Convert to percentage and round to 4 decimal places\n    answer = round(after_tax_cost_of_debt * 100, 4)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the annual after-tax cost of debt as follows:\n\n1. It defines the given variables: tax rate, face value of the bond, coupon rate, issuance price, and number of payments per year.\n\n2. It calculates the annual interest payment by multiplying the face value by the coupon rate.\n\n3. It computes the pre-tax yield to maturity using the formula:\n   (Annual Interest Payment + (Face Value - Issuance Price) / Years to Maturity) / Issuance Price\n\n4. The after-tax cost of debt is then calculated by multiplying the pre-tax yield by (1 - tax rate).\n\n5. Finally, it converts the result to a percentage, rounds it to 4 decimal places, and returns the answer.\n\nThis solution takes into account the tax shield effect on the cost of debt and provides the annual after-tax cost of debt as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-129",
        "python_solution": "",
        "ground_truth": null,
        "question": "Kelly is working on the valuation for XYZ Corp. She calculates that the long-term expected dividend payout rate for XYZ is 35 percent and the return on equity will be 12 percent in the long run. What is the long-term FCFE Sustainable growth rate for XYZ Corp.?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_rate = 0.35\n    return_on_equity = 0.12\n    \n    # Do math calculation to get the answer\n    retention_rate = 1 - dividend_payout_rate\n    sustainable_growth_rate = return_on_equity * retention_rate\n    \n    # return answer\n    return sustainable_growth_rate\n```\n\nThis Python program calculates the long-term FCFE Sustainable growth rate for XYZ Corp. based on the given information:\n\n1. We define the variables:\n   - `dividend_payout_rate` is set to 0.35 (35%)\n   - `return_on_equity` is set to 0.12 (12%)\n\n2. We calculate the retention rate, which is 1 minus the dividend payout rate.\n\n3. The sustainable growth rate is calculated by multiplying the return on equity by the retention rate.\n\n4. The function returns the calculated sustainable growth rate.\n\nWhen you run this function, it will return the long-term FCFE Sustainable growth rate for XYZ Corp."
        ]
    },
    {
        "tables": [
            "|                |          | Actual Training |        |\n|----------------|----------|--------------|--------------|\n|                |          | results     |              |\n| Predicted      |          | Class \"1\"   | Class \"0\"    |\n| Results        | Class \"1\"| TP=182      | FP=52        |\n|                | Class \"0\"| FN=31       | TN=96        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-130",
        "python_solution": "",
        "ground_truth": null,
        "question": "After settling on the last set of features, Johnson chooses and executes a model on the training set which labels the text as having either positive sentiment (Class \"1\") or negative sentiment (Class \"0\"). He subsequently inspects its performance through error analysis. As per Exhibit 1, what is the F1 score of the model?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    TP = 182  # True Positives\n    FP = 52   # False Positives\n    FN = 31   # False Negatives\n    \n    # Do math calculation to get the answer\n    precision = TP / (TP + FP)\n    recall = TP / (TP + FN)\n    \n    F1_score = 2 * (precision * recall) / (precision + recall)\n    \n    # return answer\n    return round(F1_score, 4)\n```\n\nThis Python function calculates the F1 score based on the confusion matrix provided in the table. Here's a breakdown of the steps:\n\n1. We define the variables from the confusion matrix:\n   - TP (True Positives) = 182\n   - FP (False Positives) = 52\n   - FN (False Negatives) = 31\n\n2. We calculate precision and recall:\n   - Precision = TP / (TP + FP)\n   - Recall = TP / (TP + FN)\n\n3. We then calculate the F1 score using the formula:\n   F1 = 2 * (precision * recall) / (precision + recall)\n\n4. Finally, we return the F1 score rounded to 4 decimal places.\n\nThis function will return the F1 score, which is a measure of the model's accuracy that takes both precision and recall into account."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-131",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we consider a decrease in the yield by 90 basis points, what would be the percentage change in the price of a bond with a modified duration of 9.6?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yield_decrease = 0.90  # 90 basis points = 0.90%\n    modified_duration = 9.6\n\n    # Do math calculation to get the answer\n    price_change_percentage = yield_decrease * modified_duration\n\n    # return answer\n    return price_change_percentage\n```\n\nThis Python program calculates the percentage change in the price of a bond given a decrease in yield and the bond's modified duration. Here's an explanation of the code:\n\n1. We define two variables:\n   - `yield_decrease`: 90 basis points is equal to 0.90% or 0.0090 in decimal form.\n   - `modified_duration`: Given as 9.6 in the question.\n\n2. To calculate the percentage change in price, we multiply the yield change by the modified duration. This is based on the approximate relationship between price change and yield change for bonds:\n\n   Percentage Price Change ≈ -Modified Duration × Yield Change\n\n   Note that we don't use a negative sign here because the question asks about a decrease in yield, which would result in an increase in price.\n\n3. The function returns `price_change_percentage`, which represents the percentage change in the bond's price.\n\nWhen you run this function, it will return 8.64, meaning the bond's price would increase by approximately 8.64% given a 90 basis point decrease in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-132",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the corporation buys back 1 million stocks at the current market rate, what would be the ensuing book value per share, considering the facts about another company revealed by an investigator which includes: 10 million shares in circulation, Earnings per share is US$2.00, P/E is 20, Book value per share is US$30?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding = 10000000\n    book_value_per_share = 30\n    shares_buyback = 1000000\n    \n    # Do math calculation to get the answer\n    total_book_value = shares_outstanding * book_value_per_share\n    remaining_shares = shares_outstanding - shares_buyback\n    new_book_value_per_share = total_book_value / remaining_shares\n    \n    # return answer\n    return round(new_book_value_per_share, 2)\n```\n\nThis Python program calculates the new book value per share after the corporation buys back 1 million shares. Here's how it works:\n\n1. We define the initial variables:\n   - `shares_outstanding`: The current number of shares in circulation (10 million)\n   - `book_value_per_share`: The current book value per share ($30)\n   - `shares_buyback`: The number of shares the company is buying back (1 million)\n\n2. We calculate the total book value by multiplying the current shares outstanding by the current book value per share.\n\n3. We calculate the remaining shares after the buyback by subtracting the buyback shares from the original shares outstanding.\n\n4. We calculate the new book value per share by dividing the total book value by the remaining shares.\n\n5. Finally, we return the result rounded to two decimal places.\n\nNote that this calculation assumes that the buyback is done at the market price and doesn't affect the total book value of the company. In reality, if the buyback price is different from the book value, it would affect the total book value, but this information isn't provided in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-133",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the carried interest paid to the general partner of the DeepSleep Investment, referenced in the brochure and having a committed capital of $150 million, a management fee of 2%, carried interest of 20%, and a hurdle rate of 9%, at the end of the second year? In the example given in the brochure, the fund demands $100 million in commitments at the start of the first year and disburses $40 million in Company X and $60 million in Company Y. At the onset of the second year, it calls the residual $50 million and invests into Company Z. By the end of the second year, the investment in Company Y is sold for $70 million. The investment in Company X amounts to $54 million by the end of the third year, the investment in Company Z is worth $40 million, and a cash reserve of $46 million is maintained.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    committed_capital = 150000000\n    management_fee = 0.02\n    carried_interest_rate = 0.20\n    hurdle_rate = 0.09\n    \n    # Investment amounts\n    company_x = 40000000\n    company_y = 60000000\n    company_z = 50000000\n    \n    # End of second year values\n    company_y_sale = 70000000\n    cash_reserve = 46000000\n    \n    # Do math calculation to get the answer\n    total_invested = company_x + company_y + company_z\n    total_value_end_year2 = company_y_sale + company_x + company_z + cash_reserve\n    \n    # Calculate profits\n    profit = total_value_end_year2 - total_invested\n    \n    # Calculate hurdle amount\n    hurdle_amount = total_invested * hurdle_rate * 2  # for 2 years\n    \n    # Calculate excess profit above hurdle\n    excess_profit = max(0, profit - hurdle_amount)\n    \n    # Calculate carried interest\n    carried_interest = excess_profit * carried_interest_rate\n    \n    # return answer\n    return carried_interest\n\n```\n\nThis Python program calculates the carried interest paid to the general partner of the DeepSleep Investment at the end of the second year based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the relevant variables, including the fund details and investment amounts.\n2. We calculate the total invested amount and the total value at the end of year 2.\n3. We determine the profit by subtracting the total invested from the total value.\n4. We calculate the hurdle amount (the minimum return before carried interest applies) for two years.\n5. We calculate the excess profit above the hurdle rate.\n6. Finally, we calculate the carried interest as 20% of the excess profit.\n\nThe function returns the carried interest amount. Note that this calculation assumes that carried interest is calculated on a deal-by-deal basis rather than on the overall fund performance, which is a simplification and may not reflect all real-world carried"
        ]
    },
    {
        "tables": [
            "| Compensation of employees | 1,044,005 |\n|---------------------------|-----------|\n| Gross operating surplus | 518,979 |\n| Gross mixed income | 241,415 |\n| Net mixed income | 180,653 |\n| Taxes less subsidies on production | 90,507 |\n| Taxes less subsidies on products and imports | 139,443 |\n| Statistical discrepancy | 1,157 |\n| Net property income | 136,011 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-134",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the income approach, compute the personal income using the details in the succeeding table.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    compensation_of_employees = 1044005\n    net_mixed_income = 180653\n    net_property_income = 136011\n    \n    # Do math calculation to get the answer\n    personal_income = compensation_of_employees + net_mixed_income + net_property_income\n    \n    # return answer\n    return personal_income\n```\n\nThis Python program calculates the personal income using the income approach based on the provided table. The components used in the calculation are:\n\n1. Compensation of employees\n2. Net mixed income\n3. Net property income\n\nThese components are added together to derive the personal income. Note that we use the net mixed income rather than gross mixed income, as net values are typically used in personal income calculations.\n\nThe program defines the variables with the given values, performs the addition, and returns the result as the personal income."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-135",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive intends to determine the price of a put option using a one-period binomial tree. The specifics are as such: The existing stock price is $30, with the put option's exercise price also at $30 The up factor sits at 1.12, while the down factor is at 0.92 The risk-free rate remains at 5%. What is the value of this particular put option?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 30  # Current stock price\n    K = 30   # Strike price\n    u = 1.12 # Up factor\n    d = 0.92 # Down factor\n    r = 0.05 # Risk-free rate\n\n    # Do math calculation to get the answer\n    Su = S0 * u  # Stock price in up state\n    Sd = S0 * d  # Stock price in down state\n\n    Pu = max(0, K - Su)  # Put payoff in up state\n    Pd = max(0, K - Sd)  # Put payoff in down state\n\n    p = (1 + r - d) / (u - d)  # Risk-neutral probability\n\n    # Calculate the put option value\n    put_value = (p * Pu + (1 - p) * Pd) / (1 + r)\n\n    # return answer\n    return round(put_value, 2)\n```\n\nThis Python program calculates the value of the put option using a one-period binomial tree model. Here's a breakdown of the calculation:\n\n1. We define all the given variables: current stock price (S0), strike price (K), up factor (u), down factor (d), and risk-free rate (r).\n\n2. We calculate the stock prices in the up state (Su) and down state (Sd).\n\n3. We determine the put option payoffs in both states (Pu and Pd).\n\n4. We calculate the risk-neutral probability (p).\n\n5. Using these values, we compute the put option value using the risk-neutral pricing formula.\n\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the value of the put option as requested in the question."
        ]
    },
    {
        "tables": [
            "|            | Classification  | Cost   | Market value  2018 | Market value 2019 |\n|------------|-----------------|--------|------------------- |-------------------|\n| Shoes Corp | FVOCI           | 12,000 | 15,000             | 16,000            |\n| Angle PD   | Amortized cost  | 35,000 | 32,000             | 33,000            |\n| T-vision   | FVPL            | 42,000 | 45,000             | 56,000            |"
        ],
        "topic": "Accounting",
        "question_id": "test-136",
        "python_solution": "",
        "ground_truth": null,
        "question": "A CFA named Fabian, who is employed at the Equity investment firm, is in the process of preparing an analytical report on the PZ company, which is registered on the HK Exchange and is in compliance with IFRS 9. She has gathered data on three fixed-income investments from the PZ's 2019 year-end financial report (assuming cost equals par value). Could you determine the carrying value of PZ company's investment portfolio at the end of 2019?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shoes_corp_value = 16000  # FVOCI, use market value 2019\n    angle_pd_value = 35000  # Amortized cost, use cost\n    t_vision_value = 56000  # FVPL, use market value 2019\n    \n    # Do math calculation to get the answer\n    total_carrying_value = shoes_corp_value + angle_pd_value + t_vision_value\n    \n    # return answer\n    return total_carrying_value\n```\n\nThis Python program calculates the carrying value of PZ company's investment portfolio at the end of 2019 based on the given information and IFRS 9 rules:\n\n1. For Shoes Corp (FVOCI - Fair Value through Other Comprehensive Income), we use the 2019 market value.\n2. For Angle PD (Amortized cost), we use the original cost.\n3. For T-vision (FVPL - Fair Value through Profit or Loss), we use the 2019 market value.\n\nThe program sums up these values to get the total carrying value of the investment portfolio."
        ]
    },
    {
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.80%        |\n| 1y1y        | 1.12%        |\n| Z           | 3.94%        |\n| 3y1y        | 3.28%        |\n| 4y1y        | 3.14%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-137",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the 3-year implied spot rate if all rates are annual rates stated for a periodicity of one (effective annual rates)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r0_1 = 0.0080  # 0y1y forward rate\n    r1_2 = 0.0112  # 1y1y forward rate\n    r2_3 = 0.0394  # 2y1y forward rate (Z in the table)\n\n    # Do math calculation to get the answer\n    # The 3-year implied spot rate is the geometric mean of (1 + r0_1), (1 + r1_2), and (1 + r2_3)\n    implied_spot_rate = ((1 + r0_1) * (1 + r1_2) * (1 + r2_3)) ** (1/3) - 1\n\n    # Convert to percentage\n    answer = implied_spot_rate * 100\n\n    # return answer rounded to 2 decimal places\n    return round(answer, 2)\n```\n\nThis Python program calculates the 3-year implied spot rate based on the given forward rates. Here's how it works:\n\n1. We define the forward rates for the first three years (0y1y, 1y1y, and Z which is 2y1y) as decimal values.\n\n2. To calculate the 3-year implied spot rate, we use the geometric mean of (1 + forward rate) for each year, then subtract 1 to get the rate.\n\n3. We convert the result to a percentage by multiplying by 100.\n\n4. Finally, we round the answer to 2 decimal places and return it.\n\nThis program will return the 3-year implied spot rate as a percentage."
        ]
    },
    {
        "tables": [
            "| Investment | Expected Return(%) | Expected Standard Deviation(%) |\n|-----------|------------------|-----------------------------|\n| 1         | 19               | 3                           |\n| 2         | 21               | 9                           |\n| 3         | 24               | 20                          |\n| 4         | 19               | 35                          |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-138",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming the measure of risk aversion is -3, where is Mauricio Garcia, a daring investor who applies utility theory to select his investment portfolio, most likely to invest given a table of potential investments with expected returns and expected standard deviations?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investments = [\n        {\"return\": 19, \"std_dev\": 3},\n        {\"return\": 21, \"std_dev\": 9},\n        {\"return\": 24, \"std_dev\": 20},\n        {\"return\": 19, \"std_dev\": 35}\n    ]\n    risk_aversion = -3\n\n    # Do math calculation to get the answer\n    max_utility = float('-inf')\n    best_investment = 0\n\n    for i, inv in enumerate(investments):\n        # Calculate utility using the formula: U = E(r) + 0.5 * A * σ^2\n        # where A is the risk aversion coefficient, E(r) is expected return, and σ is standard deviation\n        utility = inv[\"return\"] + 0.5 * risk_aversion * (inv[\"std_dev\"] ** 2)\n        \n        if utility > max_utility:\n            max_utility = utility\n            best_investment = i + 1  # Adding 1 because investments are numbered from 1\n\n    # return answer\n    return best_investment\n```\n\nThis Python program calculates the utility for each investment option using the formula U = E(r) + 0.5 * A * σ^2, where A is the risk aversion coefficient (-3 in this case), E(r) is the expected return, and σ is the standard deviation. It then selects the investment with the highest utility, which is where Mauricio Garcia is most likely to invest according to utility theory.\n\nThe program returns the number of the best investment (1, 2, 3, or 4) based on the highest calculated utility."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-139",
        "python_solution": "",
        "ground_truth": null,
        "question": "A $1 million loan was granted to a vehicle manufacturing corporation by Bank B. The bank has projected a default likelihood of 10% for the vehicle manufacturer and an 80% recovery rate owing to strong collateral. What is the anticipated loss for the bank?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 1000000  # $1 million loan\n    default_probability = 0.10  # 10% default likelihood\n    recovery_rate = 0.80  # 80% recovery rate\n    \n    # Do math calculation to get the answer\n    loss_given_default = loan_amount * (1 - recovery_rate)\n    expected_loss = loss_given_default * default_probability\n    \n    # return answer\n    return expected_loss\n```\n\nThis Python program calculates the expected loss for Bank B based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `loan_amount`: The total loan amount of $1 million\n   - `default_probability`: The 10% (0.10) likelihood of default\n   - `recovery_rate`: The 80% (0.80) recovery rate due to strong collateral\n\n2. We calculate the loss given default by multiplying the loan amount by (1 - recovery_rate). This gives us the amount the bank would lose if a default occurs.\n\n3. We then calculate the expected loss by multiplying the loss given default by the default probability. This gives us the anticipated loss for the bank, considering both the probability of default and the recovery rate.\n\n4. Finally, we return the expected loss.\n\nWhen you run this function, it will return the anticipated loss for the bank in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-140",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company bond is set to mature in the coming year with a face value of 100 RMB, a market price of 88, a true default-free interest rate of 2.5%, anticipated inflation rate of 3%, and an unexpected inflation rate of 0.5%. Could you determine the implied credit risk premium embedded in the corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    market_price = 88\n    default_free_rate = 0.025\n    anticipated_inflation = 0.03\n    unexpected_inflation = 0.005\n    \n    # Do math calculation to get the answer\n    total_yield = (face_value / market_price) - 1\n    nominal_risk_free_rate = default_free_rate + anticipated_inflation + unexpected_inflation\n    credit_risk_premium = total_yield - nominal_risk_free_rate\n    \n    # return answer\n    return credit_risk_premium\n```\n\nThis Python program calculates the implied credit risk premium for the company bond based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the total yield of the bond using the formula: (Face Value / Market Price) - 1\n3. We calculate the nominal risk-free rate by adding the default-free interest rate, anticipated inflation rate, and unexpected inflation rate.\n4. The credit risk premium is then calculated by subtracting the nominal risk-free rate from the total yield.\n5. The function returns the credit risk premium as the answer.\n\nThe credit risk premium represents the additional return investors demand for taking on the risk of the corporation potentially defaulting on the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-141",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a constant 6% interest rate, how much does a shareholder need to invest today in order to make $10,000 in twenty years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 10000\n    interest_rate = 0.06\n    time_period = 20\n\n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + interest_rate) ** time_period)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of an investment that will grow to $10,000 in 20 years, assuming a constant 6% interest rate. Here's how it works:\n\n1. We define the variables:\n   - `future_value`: The desired amount after 20 years ($10,000)\n   - `interest_rate`: The constant interest rate (6% or 0.06)\n   - `time_period`: The number of years (20)\n\n2. We use the present value formula to calculate how much needs to be invested today:\n   Present Value = Future Value / (1 + Interest Rate)^Time\n\n3. The result is rounded to two decimal places for cents accuracy.\n\n4. The function returns this calculated present value.\n\nWhen you run this function, it will return the amount that needs to be invested today to reach $10,000 in 20 years at a 6% interest rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-142",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation known as Delta Enterprises has authorized 160,000 shares of common stock. It has issued 88,000 shares and has 75,000 shares outstanding. How many shares of treasury stock does Delta Enterprises possess?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    authorized_shares = 160000\n    issued_shares = 88000\n    outstanding_shares = 75000\n    \n    # Do math calculation to get the answer\n    treasury_stock = issued_shares - outstanding_shares\n    \n    # return answer\n    return treasury_stock\n```\n\nThis Python program calculates the number of shares of treasury stock that Delta Enterprises possesses. Here's how it works:\n\n1. We define the variables:\n   - `authorized_shares`: The total number of shares the company is allowed to issue (160,000)\n   - `issued_shares`: The number of shares the company has actually issued (88,000)\n   - `outstanding_shares`: The number of shares currently held by shareholders (75,000)\n\n2. To calculate the treasury stock, we subtract the outstanding shares from the issued shares. This is because treasury stock represents shares that the company has issued but then repurchased from shareholders.\n\n3. The function returns the calculated number of treasury stock shares.\n\nWhen you run this function, it will return 13,000, which is the number of shares of treasury stock Delta Enterprises possesses."
        ]
    },
    {
        "tables": [
            "| Company M                    | $ millions |\n|---------------------------|----------|\n| Net Income                      | 485        |\n| Depreciation expense      | 270        |\n| Increase in accounts receivable | 59         |\n| Increase in accounts payable    | 33         |\n| Purchase of fixed assets        | 523        |\n| Increase in notes payable       | 15         |\n| Increase in long-term debt      | 60         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-143",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is getting ready to assess the value of Company X's equity using the two-stage FCFE model. The anticipated growth rates for the initial three years are projected at 10%, 8%, and 6%, in that order, before potentially growing at 5% annually for an indefinite period. The necessary rate of return on equity for Company X stands at 10%. What is the fundamental value of Company X’s equity?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income = 485\n    depreciation = 270\n    increase_accounts_receivable = 59\n    increase_accounts_payable = 33\n    purchase_fixed_assets = 523\n    increase_notes_payable = 15\n    increase_long_term_debt = 60\n    \n    growth_rates = [0.10, 0.08, 0.06]\n    terminal_growth_rate = 0.05\n    required_return = 0.10\n    \n    # Calculate FCFE for the base year\n    fcfe_base = net_income + depreciation - increase_accounts_receivable + increase_accounts_payable - purchase_fixed_assets + increase_notes_payable + increase_long_term_debt\n    \n    # Calculate FCFE for the first three years\n    fcfe_1 = fcfe_base * (1 + growth_rates[0])\n    fcfe_2 = fcfe_1 * (1 + growth_rates[1])\n    fcfe_3 = fcfe_2 * (1 + growth_rates[2])\n    \n    # Calculate the terminal value\n    fcfe_4 = fcfe_3 * (1 + terminal_growth_rate)\n    terminal_value = fcfe_4 / (required_return - terminal_growth_rate)\n    \n    # Calculate the present value of FCFE for the first three years and terminal value\n    pv_fcfe_1 = fcfe_1 / (1 + required_return)\n    pv_fcfe_2 = fcfe_2 / (1 + required_return)**2\n    pv_fcfe_3 = fcfe_3 / (1 + required_return)**3\n    pv_terminal = terminal_value / (1 + required_return)**3\n    \n    # Calculate the fundamental value of Company X's equity\n    equity_value = pv_fcfe_1 + pv_fcfe_2 + pv_fcfe_3 + pv_terminal\n    \n    # Return answer\n    return round(equity_value"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-144",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a buyer acquires a three-year bond that has a 5% annual coupon rate, is bought at a rate of 105.657223 per 100 of par value and has a yield-to-maturity of 3%, what would be the estimated modified duration of this bond given a 5-basis point shift in yield-to-maturity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.05\n    price = 105.657223\n    ytm = 0.03\n    years = 3\n    basis_point_shift = 0.0005  # 5 basis points = 0.05%\n\n    # Do math calculation to get the answer\n    # Calculate the cash flows\n    coupon_payment = par_value * coupon_rate\n    \n    # Calculate the present value of cash flows\n    pv_cashflows = 0\n    for t in range(1, years + 1):\n        pv_cashflows += coupon_payment / (1 + ytm) ** t\n    pv_cashflows += par_value / (1 + ytm) ** years\n\n    # Calculate the duration\n    weighted_cashflows = 0\n    for t in range(1, years + 1):\n        weighted_cashflows += (t * coupon_payment) / (1 + ytm) ** t\n    weighted_cashflows += (years * par_value) / (1 + ytm) ** years\n    \n    duration = weighted_cashflows / price\n    \n    # Calculate the modified duration\n    modified_duration = duration / (1 + ytm)\n    \n    # Estimate the modified duration using the basis point shift\n    price_up = pv_cashflows / (1 + ytm + basis_point_shift) ** years\n    price_down = pv_cashflows / (1 + ytm - basis_point_shift) ** years\n    \n    estimated_modified_duration = (price_down - price_up) / (2 * price * basis_point_shift)\n\n    # return answer\n    return estimated_modified_duration\n```\n\nThis Python program calculates the estimated modified duration of a bond given the specified parameters. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the coupon payment and the present value of all cash flows.\n3. We calculate the duration by weighting each cash flow by its time and dividing by the bond price.\n4. We convert duration to modified duration."
        ]
    },
    {
        "tables": [
            "|       | Beginning of Period Price($) | End of Period Price($) | Total Dividends($) |\n|-------|------------------------------|------------------------|--------------------|\n| A     | 8.00                         | 10.00                  | 0.50               |\n| B     | 22.00                        | 19.00                  | 1.20               |\n| C     | 25.00                        | 25.00                  | 1.50               |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-145",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Ahern from a financial firm gathered data for an equal-weighted index made up of assets A, B, and C: What is the index's price return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    start_prices = [8.00, 22.00, 25.00]\n    end_prices = [10.00, 19.00, 25.00]\n    \n    # Do math calculation to get the answer\n    start_index_value = sum(start_prices) / len(start_prices)\n    end_index_value = sum(end_prices) / len(end_prices)\n    \n    price_return = (end_index_value - start_index_value) / start_index_value\n    \n    # Convert to percentage and round to 2 decimal places\n    price_return_percentage = round(price_return * 100, 2)\n    \n    # return answer\n    return price_return_percentage\n```\n\nThis Python program calculates the price return of the equal-weighted index composed of assets A, B, and C. Here's how it works:\n\n1. We define two lists: `start_prices` and `end_prices`, containing the beginning and end of period prices for each asset.\n\n2. We calculate the start and end index values by taking the average of the prices for each period. Since it's an equal-weighted index, we simply sum the prices and divide by the number of assets.\n\n3. We calculate the price return using the formula: (End Index Value - Start Index Value) / Start Index Value\n\n4. We convert the price return to a percentage by multiplying by 100 and round it to 2 decimal places for better readability.\n\n5. Finally, we return the price return percentage.\n\nThis program will return the index's price return as a percentage, which answers the given question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-146",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John purchased a security for $55 in the first year, $60 in the second year, $64 in the third year, and $70 in the fourth year, what would be the harmonic mean of the price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prices = [55, 60, 64, 70]\n    n = len(prices)\n    \n    # Do math calculation to get the answer\n    sum_reciprocals = sum(1/price for price in prices)\n    harmonic_mean = n / sum_reciprocals\n    \n    # return answer\n    return round(harmonic_mean, 2)\n```\n\nThis Python program calculates the harmonic mean of the security prices John paid over four years. Here's how it works:\n\n1. We define a list `prices` containing the prices John paid each year.\n2. We calculate the number of prices `n`.\n3. We use a list comprehension to calculate the sum of reciprocals of the prices.\n4. The harmonic mean is calculated as the number of prices divided by the sum of reciprocals.\n5. We round the result to two decimal places for precision.\n6. The function returns the calculated harmonic mean.\n\nThe harmonic mean is particularly useful for averaging prices or rates, as it gives lower weighting to higher values."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-147",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2013, AskIt bought a customer list for $100,000, expected to yield equal annual benefits for four years. It also registered $200,000 in goodwill from the takeover of a rival firm, with projections indicating substantial benefits for at least a decade. Furthermore, it allocated $300,000 on media slots publicizing the firm's donations of goods and services in the local community, a move which the CEO believes significantly boosted the company's reputation and anticipates it to yield rewards for five years. Consequently, how much should the company declare as amortization expense in 2014?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    customer_list_cost = 100000\n    customer_list_years = 4\n    goodwill_cost = 200000\n    goodwill_years = 10\n    advertising_cost = 300000  # This is not amortizable\n\n    # Do math calculation to get the answer\n    customer_list_amortization = customer_list_cost / customer_list_years\n    goodwill_amortization = goodwill_cost / goodwill_years\n    \n    total_amortization = customer_list_amortization + goodwill_amortization\n\n    # return answer\n    return total_amortization\n```\n\nThis program calculates the amortization expense for 2014 based on the given information. Here's a breakdown of the calculation:\n\n1. The customer list cost ($100,000) is amortized over 4 years.\n2. The goodwill ($200,000) is amortized over 10 years.\n3. The advertising expense ($300,000) is not amortized because it's an expense that should be recognized in the year it was incurred, regardless of the CEO's expectations of future benefits.\n\nThe program calculates the annual amortization for the customer list and goodwill, then adds them together to get the total amortization expense for 2014."
        ]
    },
    {
        "tables": [
            "| Bond Class      | Par Value (毛 millions) |\n| ----------- | ----------- |\n| A (senior)      | 200       |\n| B (subordinated)   | 20        |\n| C (subordinated)   | 5        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-148",
        "python_solution": "",
        "ground_truth": null,
        "question": "At what level of default in par value would Bond Class A suffer a loss, if issued by a special purpose entity as part of asset-backed securities structure?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_a_par_value = 200\n    bond_b_par_value = 20\n    bond_c_par_value = 5\n    total_par_value = bond_a_par_value + bond_b_par_value + bond_c_par_value\n\n    # Do math calculation to get the answer\n    default_level = total_par_value - bond_a_par_value\n\n    # return answer\n    return default_level\n\n# Call the function and print the result\nresult = solution()\nprint(f\"Bond Class A would suffer a loss at a default level of {result} million par value.\")\n```\n\nThis program calculates the level of default in par value at which Bond Class A would suffer a loss in an asset-backed securities structure.\n\nThe logic is as follows:\n1. We define the par values for each bond class as given in the table.\n2. We calculate the total par value of all bonds.\n3. The default level at which Bond Class A would start to suffer a loss is equal to the total par value minus the par value of Bond A.\n\nThis is because in an asset-backed securities structure, the subordinated bonds (B and C in this case) act as a buffer for the senior bond (A). Bond A will only start to suffer losses after the entire value of bonds B and C has been wiped out.\n\nThe function returns 25, which means Bond Class A would start to suffer a loss when the default reaches 25 million par value."
        ]
    },
    {
        "tables": [
            "|                                                    | ¥millions |\n|----------------------------------------------------|-----------|\n| Net income reported                                | 42        |\n| Dividends paid                                     | 7         |\n| Unrealized loss on investments carried at fair value through other comprehensive income | 3         |\n| Repurchase of company stock, to be held as Treasury stock | 6         |"
        ],
        "topic": "Accounting",
        "question_id": "test-149",
        "python_solution": "",
        "ground_truth": null,
        "question": "During the year, the following events happened: At the start of the year, an organization had total equity from shareholders comprising of ¥200 million in common share capital and ¥50 million in preserved profits. What is the total equity from shareholders (in ¥ millions) at the conclusion of the year?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_common_share_capital = 200\n    initial_retained_earnings = 50\n    net_income = 42\n    dividends_paid = 7\n    unrealized_loss = 3\n    stock_repurchase = 6\n    \n    # Do math calculation to get the answer\n    final_common_share_capital = initial_common_share_capital - stock_repurchase\n    final_retained_earnings = initial_retained_earnings + net_income - dividends_paid\n    total_equity = final_common_share_capital + final_retained_earnings - unrealized_loss\n    \n    # return answer\n    return total_equity\n```\n\nThis program calculates the total equity from shareholders at the conclusion of the year by:\n1. Subtracting the stock repurchase from the initial common share capital\n2. Adding net income and subtracting dividends paid from the initial retained earnings\n3. Summing the final common share capital and final retained earnings\n4. Subtracting the unrealized loss on investments from the total\n\nThe function will return the total equity from shareholders in ¥ millions."
        ]
    },
    {
        "tables": [
            "|                  | Asset 1 | Asset 2 | Asset 3 |\n|------------------|---------|---------|---------|\n| Expected return  | 5%      | 6%      | 7%      |\n| Portfolio weight | 0.20    | 0.30    | 0.50    |\n|                  | Asset 1 | Asset 2 | Asset 3 |\n| Asset 1          | 196     | 105     | 140     |\n| Asset 2          | 105     | 225     | 150     |\n| Asset 3          | 140     | 150     | 400     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-150",
        "python_solution": "",
        "ground_truth": null,
        "question": "The three-asset portfolio designed by Sophia Milligan is outlined below. Milligan estimated the portfolio return to be 6.3%. What is the standard deviation of the portfolio?",
        "output": [
            "Here's a Python program to calculate the standard deviation of the portfolio based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    weights = [0.20, 0.30, 0.50]\n    variances = [196, 225, 400]\n    covariances = [(105, 140), (105, 150), (150, 140)]\n\n    # Do math calculation to get the answer\n    portfolio_variance = 0\n\n    # Calculate weighted variances\n    for i in range(3):\n        portfolio_variance += weights[i]**2 * variances[i]\n\n    # Calculate weighted covariances\n    for i in range(3):\n        for j in range(i+1, 3):\n            portfolio_variance += 2 * weights[i] * weights[j] * covariances[i][j-i-1]\n\n    # Calculate standard deviation\n    portfolio_std_dev = (portfolio_variance)**0.5\n\n    # Convert to percentage\n    portfolio_std_dev_percent = portfolio_std_dev * 100\n\n    # return answer\n    return round(portfolio_std_dev_percent, 2)\n```\n\nThis program calculates the portfolio standard deviation using the following steps:\n\n1. Define the portfolio weights, variances (from the diagonal of the variance-covariance matrix), and covariances (from the off-diagonal elements of the matrix).\n\n2. Calculate the portfolio variance by summing:\n   a. The weighted variances of each asset\n   b. The weighted covariances between each pair of assets\n\n3. Take the square root of the portfolio variance to get the standard deviation.\n\n4. Convert the standard deviation to a percentage by multiplying by 100.\n\n5. Round the result to two decimal places and return it.\n\nThe program will return the portfolio standard deviation as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "| Income Statement       | Millions ($) |\n|-----------------------|--------------|\n| Revenues              | 10.2         |\n| Variable operating costs | 4.6       |\n| Fixed operating costs    | 2.0       |\n| Operating income        | 3.6        |\n| Interest                | 1.2        |\n| Taxable income          | 2.4        |\n| Tax                     | 1.0        |\n| Net income              | 1.4        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-151",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the degree of financial leverage (DFL) accessible for a company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_income = 3.6\n    interest = 1.2\n    taxable_income = 2.4\n\n    # Do math calculation to get the answer\n    dfl = operating_income / taxable_income\n\n    # return answer\n    return dfl\n```\n\nThis Python function calculates the Degree of Financial Leverage (DFL) for the company based on the provided income statement data.\n\nThe DFL is calculated as:\n\nDFL = Operating Income / Earnings Before Taxes (EBT)\n\nIn this case:\n- Operating Income is given as 3.6 million\n- Earnings Before Taxes (EBT) is the same as Taxable Income, which is 2.4 million\n\nThe function defines these values, performs the calculation, and returns the result.\n\nNote that this calculation gives the DFL at the current level of earnings before interest and taxes (EBIT). It measures how sensitive the company's earnings per share (EPS) is to changes in its EBIT due to the use of financial leverage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-152",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the duration model with convexity adjustment, how much will the bond's price change, in percentage, if interest rates drop 2%, given that the bond's duration is 7.31 and its convexity is -24.85?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    duration = 7.31\n    convexity = -24.85\n    interest_rate_change = -0.02  # -2% expressed as a decimal\n\n    # Do math calculation to get the answer\n    price_change_duration = -duration * interest_rate_change\n    price_change_convexity = 0.5 * convexity * (interest_rate_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n\n    # Convert to percentage\n    price_change_percentage = total_price_change * 100\n\n    # return answer\n    return price_change_percentage\n```\n\nThis Python program calculates the bond's price change using the duration model with convexity adjustment. Here's a breakdown of the calculation:\n\n1. We define the given variables: duration (7.31), convexity (-24.85), and the interest rate change (-2% or -0.02 in decimal form).\n\n2. We calculate the price change due to duration: -duration * interest_rate_change\n\n3. We calculate the price change due to convexity: 0.5 * convexity * (interest_rate_change ** 2)\n\n4. We sum these two components to get the total price change.\n\n5. Finally, we convert the result to a percentage by multiplying by 100.\n\nThe program will return the percentage change in the bond's price given the 2% drop in interest rates, taking into account both duration and convexity."
        ]
    },
    {
        "tables": [
            "| Bond | Price | Par Amount Held | Modified Duration |\n|------|-------|-----------------|-------------------|\n| A    | 101.43| 3               | 2.36              |\n| B    | 84.89 | 5               | 4.13              |\n| C    | 121.87| 8               | 6.27              |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-153",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the given portfolio of bonds (par amounts listed in millions of USD). What is the value of the portfolio's DV01 (dollar value of 1 basis point)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bonds = [\n        {\"name\": \"A\", \"price\": 101.43, \"par_amount\": 3, \"modified_duration\": 2.36},\n        {\"name\": \"B\", \"price\": 84.89, \"par_amount\": 5, \"modified_duration\": 4.13},\n        {\"name\": \"C\", \"price\": 121.87, \"par_amount\": 8, \"modified_duration\": 6.27}\n    ]\n    \n    # Do math calculation to get the answer\n    total_dv01 = 0\n    for bond in bonds:\n        market_value = bond[\"price\"] * bond[\"par_amount\"] * 10  # Convert millions to thousands\n        dv01 = market_value * bond[\"modified_duration\"] * 0.0001  # 1 basis point = 0.0001\n        total_dv01 += dv01\n    \n    # return answer\n    return round(total_dv01, 2)\n```\n\nThis Python program calculates the DV01 (Dollar Value of 1 Basis Point) for the given portfolio of bonds. Here's how it works:\n\n1. We define a list of dictionaries, each representing a bond with its properties.\n\n2. We iterate through each bond in the portfolio.\n\n3. For each bond, we calculate its market value by multiplying its price by its par amount. We multiply by 10 to convert from millions to thousands of dollars.\n\n4. We then calculate the DV01 for each bond using the formula: \n   DV01 = Market Value * Modified Duration * 0.0001 (where 0.0001 represents 1 basis point)\n\n5. We sum up the DV01 of all bonds to get the total DV01 for the portfolio.\n\n6. Finally, we return the total DV01 rounded to two decimal places.\n\nThis program will return the portfolio's DV01 in thousands of dollars."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| Coupon rate  | 5%  |\n| Interest paid  | semiannually  |\n| Mature time  | 2 years  |\n| Required rate of return  | 6%  |\n| Par value of the bond  | 100 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-154",
        "python_solution": "",
        "ground_truth": null,
        "question": "The bond purchased by Brian has some detailed information summarized below. What is the price of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05\n    interest_frequency = 2  # semiannually\n    maturity_years = 2\n    required_return = 0.06\n    par_value = 100\n\n    # Do math calculation to get the answer\n    periods = maturity_years * interest_frequency\n    coupon_payment = (coupon_rate * par_value) / interest_frequency\n    periodic_rate = required_return / interest_frequency\n\n    # Calculate present value of coupon payments\n    pv_coupons = coupon_payment * (1 - (1 + periodic_rate)**-periods) / periodic_rate\n\n    # Calculate present value of par value\n    pv_par = par_value / (1 + periodic_rate)**periods\n\n    # Sum up to get bond price\n    bond_price = pv_coupons + pv_par\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of the bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the number of periods and the coupon payment per period.\n3. We calculate the periodic rate (required return per period).\n4. We use the present value of an annuity formula to calculate the present value of all coupon payments.\n5. We calculate the present value of the par value to be received at maturity.\n6. We sum these two present values to get the bond price.\n7. We round the result to two decimal places for currency representation.\n\nThe function will return the price of the bond as a float value rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-155",
        "python_solution": "",
        "ground_truth": null,
        "question": "The XYZ Company is situated in a region with a 40 percent business tax rate on pre-tax income and a 30 percent individual tax rate on dividends. XYZ hands out all its post-tax income to its shareholders. What is the effective tax rate on XYZ's pre-tax income that is distributed as dividends?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    business_tax_rate = 0.40\n    individual_tax_rate = 0.30\n    \n    # Do math calculation to get the answer\n    \n    # Step 1: Calculate the portion of income left after business tax\n    after_business_tax = 1 - business_tax_rate\n    \n    # Step 2: Calculate the portion of remaining income left after individual tax\n    after_individual_tax = 1 - individual_tax_rate\n    \n    # Step 3: Calculate the total portion left after both taxes\n    total_after_tax = after_business_tax * after_individual_tax\n    \n    # Step 4: Calculate the effective tax rate\n    effective_tax_rate = 1 - total_after_tax\n    \n    # return answer\n    return effective_tax_rate\n```\n\nThis Python program calculates the effective tax rate on XYZ's pre-tax income that is distributed as dividends. Here's how it works:\n\n1. We define the business tax rate (40%) and individual tax rate (30%) as decimal values.\n\n2. We calculate the portion of income left after business tax (60% or 0.60).\n\n3. We calculate the portion of the remaining income left after individual tax (70% or 0.70).\n\n4. We multiply these two portions to get the total portion left after both taxes.\n\n5. Finally, we subtract this from 1 to get the effective tax rate.\n\nThe program will return the effective tax rate as a decimal. To get the percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-156",
        "python_solution": "",
        "ground_truth": null,
        "question": "A note with a par of $100 and a semiannually paid coupon rate of 6%, with a YTM of 8% and a 10-year maturity timeframe. What is the DV01 of this note?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.06\n    ytm = 0.08\n    maturity = 10\n    payments_per_year = 2\n\n    # Do math calculation to get the answer\n    coupon_payment = (par_value * coupon_rate) / payments_per_year\n    periods = maturity * payments_per_year\n    \n    # Calculate the price of the bond\n    price = 0\n    for t in range(1, periods + 1):\n        price += coupon_payment / ((1 + ytm/payments_per_year) ** t)\n    price += par_value / ((1 + ytm/payments_per_year) ** periods)\n    \n    # Calculate the price if yield decreases by 1 basis point\n    ytm_minus_1bp = ytm - 0.0001\n    price_minus_1bp = 0\n    for t in range(1, periods + 1):\n        price_minus_1bp += coupon_payment / ((1 + ytm_minus_1bp/payments_per_year) ** t)\n    price_minus_1bp += par_value / ((1 + ytm_minus_1bp/payments_per_year) ** periods)\n    \n    # Calculate DV01\n    dv01 = price_minus_1bp - price\n\n    # return answer\n    return dv01\n```\n\nThis Python program calculates the DV01 (Dollar Value of 01) of the note as described in the question. Here's a breakdown of the steps:\n\n1. We define the given variables: par value, coupon rate, yield to maturity (YTM), maturity, and payments per year.\n\n2. We calculate the coupon payment and the total number of periods.\n\n3. We calculate the current price of the bond using the given YTM.\n\n4. We then calculate the price of the bond if the yield decreases by 1 basis point (0.01%).\n\n5. Finally, we calculate the DV01 by subtracting the current price from the price after the 1 basis point decrease in yield"
        ]
    },
    {
        "tables": [
            "| Amount | $1,000.00 |\n| ------- | ------------ |\n| Coupon | 5.00% |\n| Maturity | 3 years |\n| Probability of Default | Year 1: 2.0%. Year 2: 2.5%. Year 3: 3.0% |\n| Recovery Rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-157",
        "python_solution": "",
        "ground_truth": null,
        "question": "BTB Bank is a top-tier corporate and institutional bank that runs a client-facing credit default swap (CDS) desk. Steve McQueen is a CDS client strategist. Paul Starr is BTB's chief CDS trader. McQueen and Starr are setting up a meeting with Adam Lopez, a portfolio manager for AEB Fund, to explore investment and trading techniques concerning bonds, CDSs, and equities. Lopez kick-starts the conversation by requesting a recap on fundamental CDS principles and parameters. McQueen responds by explaining that a CDS comprises both a premium leg and a payment leg and that anticipated loss forms one of the elements that impact its valuation. McQueen provides data for a bond issued by Zeus Corporation. According to the facts presented in Exhibit 1, what is the forecasted loss for the Zeus Corporation bond?",
        "output": [
            "Here's the Python program to calculate the forecasted loss for the Zeus Corporation bond based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000.00\n    default_prob_year1 = 0.02\n    default_prob_year2 = 0.025\n    default_prob_year3 = 0.03\n    recovery_rate = 0.40\n\n    # Do math calculation to get the answer\n    loss_given_default = 1 - recovery_rate\n    \n    expected_loss_year1 = face_value * default_prob_year1 * loss_given_default\n    expected_loss_year2 = face_value * default_prob_year2 * loss_given_default\n    expected_loss_year3 = face_value * default_prob_year3 * loss_given_default\n    \n    total_expected_loss = expected_loss_year1 + expected_loss_year2 + expected_loss_year3\n\n    # return answer\n    return round(total_expected_loss, 2)\n```\n\nThis program calculates the forecasted loss for the Zeus Corporation bond over the three-year period. Here's how it works:\n\n1. We define the variables based on the given information:\n   - Face value of the bond\n   - Default probabilities for each year\n   - Recovery rate\n\n2. We calculate the loss given default, which is 1 minus the recovery rate.\n\n3. For each year, we calculate the expected loss by multiplying:\n   - The face value of the bond\n   - The probability of default for that year\n   - The loss given default\n\n4. We sum up the expected losses for all three years to get the total forecasted loss.\n\n5. Finally, we return the result rounded to two decimal places, as it represents a monetary value.\n\nThis calculation takes into account the varying probabilities of default for each year and the recovery rate, providing a comprehensive estimate of the forecasted loss for the Zeus Corporation bond over its 3-year maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-158",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the interest from the coupon is reinvested at the bond's YTM, how much interest will a financier receive over the bond's 10-year lifespan if they buy a bond with a 6% annual coupon for $1,000 at par and holds it until it matures?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.06\n    years = 10\n    ytm = coupon_rate  # Since the bond is bought at par, YTM equals coupon rate\n\n    # Do math calculation to get the answer\n    annual_coupon = face_value * coupon_rate\n    total_interest = 0\n\n    for year in range(1, years + 1):\n        total_interest += annual_coupon\n        total_interest *= (1 + ytm)\n\n    # Subtract the initial investment to get only the interest\n    total_interest -= face_value\n\n    # return answer\n    return round(total_interest, 2)\n```\n\nThis program calculates the total interest received over the 10-year lifespan of the bond, assuming that the coupon payments are reinvested at the bond's yield to maturity (YTM).\n\nHere's a breakdown of the solution:\n\n1. We define the variables: face value of the bond, coupon rate, number of years, and YTM (which is equal to the coupon rate since the bond is bought at par).\n\n2. We calculate the annual coupon payment.\n\n3. We use a loop to simulate each year:\n   - Add the annual coupon to the total interest.\n   - Compound the total interest at the YTM rate.\n\n4. After the loop, we subtract the initial investment (face value) to get only the interest earned.\n\n5. We round the result to two decimal places for a currency-appropriate answer.\n\nThis solution takes into account the compound interest effect of reinvesting the coupon payments at the YTM rate each year."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-159",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer bought a stock 20 years ago for $15 and it paid no dividends throughout the investment period, but it had an annual compounded rate of 16%. Based on this information, what is the stock's value today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 15\n    years = 20\n    annual_rate = 0.16  # 16% converted to decimal\n\n    # Do math calculation to get the answer\n    current_value = initial_price * (1 + annual_rate) ** years\n\n    # return answer\n    return round(current_value, 2)\n```\n\nThis Python program calculates the current value of the stock based on the given information:\n\n1. We define the initial price ($15), the number of years (20), and the annual compounded rate (16% or 0.16 in decimal form).\n\n2. We use the compound interest formula to calculate the current value: \n   `current_value = initial_price * (1 + annual_rate) ** years`\n\n3. The result is rounded to two decimal places for better readability, as it represents a monetary value.\n\n4. The function returns this calculated value.\n\nWhen you run this function, it will return the stock's value today based on the given parameters."
        ]
    },
    {
        "tables": [
            "| Information Ratio | 0.66 |\n|-------------------|------|\n| Information Coefficient | 0.5 |\n| Transfer Coefficient | 0.89 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-160",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on essential foundational rules, the researchers gathered some data. Could you compute the annual number of autonomous choices made?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    information_ratio = 0.66\n    information_coefficient = 0.5\n    transfer_coefficient = 0.89\n    \n    # Do math calculation to get the answer\n    # The fundamental law of active management states that:\n    # Information Ratio = Information Coefficient * sqrt(Breadth)\n    # Where Breadth is the number of independent bets or decisions\n    \n    # We also know that Transfer Coefficient = Information Ratio / (Information Coefficient * sqrt(Breadth))\n    # Rearranging this, we get:\n    # Breadth = (Information Ratio / (Information Coefficient * Transfer Coefficient))^2\n    \n    breadth = (information_ratio / (information_coefficient * transfer_coefficient)) ** 2\n    \n    # Assuming the question is asking for annual decisions, we round to the nearest whole number\n    annual_decisions = round(breadth)\n    \n    # return answer\n    return annual_decisions\n```\n\nThis Python program calculates the number of annual autonomous choices (or independent bets) based on the fundamental law of active management and the relationship between Information Ratio, Information Coefficient, and Transfer Coefficient.\n\nThe program defines the given values, performs the calculation to find the breadth (number of independent decisions), and then rounds this to the nearest whole number to get the annual number of autonomous choices. The result is then returned as the answer."
        ]
    },
    {
        "tables": [
            "|      | Current Year ($ thousands) | Projection for Next Year ($ thousands) |\n|------|---------------------------|---------------------------------------|\n| Sales | 2,200 | 2,500 |\n| Variable operating costs (% of sales) | 28% | 30% |\n| Fixed operating costs | 1,400 | 1,400 |\n| Tax rate | 25% | 25% |\n| Dividends paid | 55 | 60 |\n| Interest bearing debt at 5% | 500 | 500 |"
        ],
        "topic": "Accounting",
        "question_id": "test-161",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the chosen details, what is the projected net income (in $ thousands) for the corporation next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 2500\n    variable_costs_percentage = 0.30\n    fixed_costs = 1400\n    tax_rate = 0.25\n    interest_rate = 0.05\n    debt = 500\n\n    # Do math calculation to get the answer\n    variable_costs = sales * variable_costs_percentage\n    operating_costs = variable_costs + fixed_costs\n    operating_income = sales - operating_costs\n    interest_expense = debt * interest_rate\n    income_before_tax = operating_income - interest_expense\n    tax = income_before_tax * tax_rate\n    net_income = income_before_tax - tax\n\n    # return answer\n    return round(net_income)\n```\n\nThis Python program calculates the projected net income for the corporation next year based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the relevant variables from the provided table.\n2. We calculate the variable costs by multiplying sales by the variable costs percentage.\n3. We sum up the variable and fixed costs to get total operating costs.\n4. Operating income is calculated by subtracting operating costs from sales.\n5. We calculate interest expense based on the given debt and interest rate.\n6. Income before tax is determined by subtracting interest expense from operating income.\n7. Tax is calculated by multiplying income before tax by the tax rate.\n8. Finally, net income is calculated by subtracting tax from income before tax.\n\nThe function returns the net income rounded to the nearest thousand dollars, as the original figures were given in thousands."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-162",
        "python_solution": "",
        "ground_truth": null,
        "question": "The floral products seller, Lavender Bloom Corp., announced a yearly cost of goods sold amounting to $75 million. There was an increase in total assets by $55 million, though there was a decrease in inventory by $6 million. Meanwhile, total liabilities escalated by $45 million and there was a surge in accounts payable by $2 million. What would be the probable total of cash that the company paid to its vendors?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 75000000\n    increase_in_total_assets = 55000000\n    decrease_in_inventory = 6000000\n    increase_in_total_liabilities = 45000000\n    increase_in_accounts_payable = 2000000\n    \n    # Do math calculation to get the answer\n    cash_paid_to_vendors = cost_of_goods_sold + decrease_in_inventory - increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_vendors\n```\n\nThis Python program calculates the probable total cash paid to vendors by Lavender Bloom Corp. based on the given information. Here's how it works:\n\n1. We define the variables with the given values from the question.\n2. To calculate the cash paid to vendors, we use the formula:\n   Cash paid to vendors = Cost of goods sold + Decrease in inventory - Increase in accounts payable\n3. This formula accounts for the fact that:\n   - The company had to pay for all the goods sold (cost of goods sold)\n   - A decrease in inventory means more goods were sold or used than purchased, so we add this to the amount paid\n   - An increase in accounts payable means some purchases weren't paid for in cash, so we subtract this amount\n4. The function returns the calculated value, which represents the probable total cash paid to vendors.\n\nNote that the increase in total assets and total liabilities, while provided in the question, are not directly relevant to calculating the cash paid to vendors in this case."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-163",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the equity's proportion in a business's capital structure, with a marginal tax rate of 30%, a weighted average cost of capital of 7.4%, a before-tax cost of debt of 5%, and a 10% cost of equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    marginal_tax_rate = 0.30\n    wacc = 0.074\n    before_tax_cost_of_debt = 0.05\n    cost_of_equity = 0.10\n\n    # Do math calculation to get the answer\n    after_tax_cost_of_debt = before_tax_cost_of_debt * (1 - marginal_tax_rate)\n    \n    # Let x be the proportion of equity\n    # WACC = (1-x) * after_tax_cost_of_debt + x * cost_of_equity\n    # 0.074 = (1-x) * (0.05 * 0.7) + x * 0.10\n    # 0.074 = 0.035 - 0.035x + 0.10x\n    # 0.074 - 0.035 = 0.065x\n    # 0.039 = 0.065x\n    \n    equity_proportion = 0.039 / 0.065\n\n    # return answer\n    return equity_proportion\n```\n\nThis Python program calculates the equity's proportion in the business's capital structure based on the given information. Here's a breakdown of the calculation:\n\n1. We define the given variables: marginal tax rate, weighted average cost of capital (WACC), before-tax cost of debt, and cost of equity.\n\n2. We calculate the after-tax cost of debt by multiplying the before-tax cost of debt by (1 - marginal tax rate).\n\n3. We use the WACC formula: WACC = (1-x) * after_tax_cost_of_debt + x * cost_of_equity, where x is the proportion of equity we're solving for.\n\n4. We substitute the known values into the equation and solve for x algebraically.\n\n5. Finally, we calculate the equity proportion and return it as the answer.\n\nThe program will return the equity's proportion as a decimal (approximately 0.6, or 60%) when executed."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-164",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is R2R^2R2 if the estimate for beta, β^=0\\widehat\\beta = 0β​=0?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta_hat = 0\n    \n    # Do math calculation to get the answer\n    R_squared = beta_hat ** 2\n    \n    # return answer\n    return R_squared\n```\n\nThis Python program calculates R² (R-squared) when the estimate for beta (β̂) is 0. In simple linear regression, R² is equal to the square of the correlation coefficient between the dependent and independent variables, which is also equal to the square of the standardized regression coefficient (beta).\n\nWhen β̂ = 0, it means there is no linear relationship between the dependent and independent variables. As a result, R² will also be 0, indicating that the model explains none of the variability of the response data around its mean.\n\nThe program simply squares the given beta_hat value (which is 0) and returns the result, which will be 0."
        ]
    },
    {
        "tables": [
            "| Current year's earnings per share | $2.50 |\n|---|---|\n| Dividend payout ratio | 60% |\n| Dividend growth rate expected during Year 1 and 2 | 25% |\n| Dividend growth rate expected after Year 2 | 5% |\n| Investors' required rate of return | 12% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-165",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of the common stock a stockholder has collected data on for possible investment in a business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    eps = 2.50\n    payout_ratio = 0.60\n    growth_rate_year1_2 = 0.25\n    growth_rate_after_year2 = 0.05\n    required_return = 0.12\n\n    # Do math calculation to get the answer\n    current_dividend = eps * payout_ratio\n    dividend_year1 = current_dividend * (1 + growth_rate_year1_2)\n    dividend_year2 = dividend_year1 * (1 + growth_rate_year1_2)\n    dividend_year3 = dividend_year2 * (1 + growth_rate_after_year2)\n\n    # Calculate the present value of dividends for years 1 and 2\n    pv_dividend_year1 = dividend_year1 / (1 + required_return)\n    pv_dividend_year2 = dividend_year2 / (1 + required_return)**2\n\n    # Calculate the terminal value using the Gordon Growth Model\n    terminal_value = (dividend_year3 / (required_return - growth_rate_after_year2)) / (1 + required_return)**2\n\n    # Sum up the present values to get the stock value\n    stock_value = pv_dividend_year1 + pv_dividend_year2 + terminal_value\n\n    # return answer\n    return round(stock_value, 2)\n```\n\nThis Python program calculates the per share value of the common stock using the dividend discount model. Here's a breakdown of the calculation:\n\n1. We first calculate the current dividend and the expected dividends for years 1, 2, and 3.\n2. We then calculate the present value of the dividends for years 1 and 2.\n3. We use the Gordon Growth Model to calculate the terminal value after year 2, assuming the 5% growth rate continues indefinitely.\n4. Finally, we sum up the present values of the dividends for years 1 and 2 and the terminal value to get the stock value.\n\nThe result is rounded to two decimal places to represent a dollar value. This calculated value represents"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-166",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, Bob Inc. acquired a production equipment for $60,000, which is anticipated to produce an annual cash inflow of $25,000 for a duration of six years. The company plans to depreciate the equipment over six years for accounting reasons. Nonetheless, the tax department approximates the useful life of the equipment to be 5 years. Assuming a tax rate of 40% and the equipment has no residual value. What would be the tax payable by Bob Inc. in the 6th year if they use the straight-line depreciation method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equipment_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_life = 6\n    tax_life = 5\n    tax_rate = 0.40\n    residual_value = 0\n\n    # Do math calculation to get the answer\n    annual_depreciation_accounting = (equipment_cost - residual_value) / accounting_life\n    annual_depreciation_tax = (equipment_cost - residual_value) / tax_life\n\n    taxable_income_6th_year = annual_cash_inflow - annual_depreciation_accounting\n    tax_deductible_depreciation_6th_year = 0  # No tax depreciation in 6th year as tax life is 5 years\n\n    taxable_income_for_tax_purposes = annual_cash_inflow - tax_deductible_depreciation_6th_year\n    tax_payable = taxable_income_for_tax_purposes * tax_rate\n\n    # return answer\n    return tax_payable\n```"
        ]
    },
    {
        "tables": [
            "|                            |                |\n|----------------------------|----------------|\n| Exhibit 1 Commercial Property Information |       |\n| Net operating income       | $700,000       |\n| Mortgage on property       | $9,000,000     |\n| Debt service               | $600,000       |\n| Market value of property   | $10,000,000    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-167",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson inquires from Smith about the most frequently utilized financial ratios for assessing private real estate investments, such as commercial property. Based on the data in Exhibit 1, what is the cash-on-cash return for the property that Smith requires analysis for?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 700000\n    debt_service = 600000\n    market_value = 10000000\n    mortgage = 9000000\n\n    # Do math calculation to get the answer\n    equity_investment = market_value - mortgage\n    cash_flow = net_operating_income - debt_service\n    cash_on_cash_return = (cash_flow / equity_investment) * 100\n\n    # return answer\n    return cash_on_cash_return\n```\n\nThis Python program calculates the cash-on-cash return for the commercial property based on the information provided in Exhibit 1. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given data.\n2. We calculate the equity investment by subtracting the mortgage from the market value of the property.\n3. We calculate the cash flow by subtracting the debt service from the net operating income.\n4. The cash-on-cash return is then calculated by dividing the cash flow by the equity investment and multiplying by 100 to get a percentage.\n5. The function returns the cash-on-cash return as a percentage.\n\nWhen you run this function, it will return the cash-on-cash return for the property, which is one of the most frequently utilized financial ratios for assessing private real estate investments, as Smith would likely explain to Johnson."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-168",
        "python_solution": "",
        "ground_truth": null,
        "question": "By employing the Black-Scholes model, determine the worth of a European call option with these details: spot price = 100; strike rate = 110; risk-free interest rate = 10%; duration until expiration = 0.5 years; N(d1) is 0.457185 and N(d2) is 0.374163.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 100  # spot price\n    K = 110  # strike price\n    r = 0.10  # risk-free interest rate\n    t = 0.5  # time to expiration in years\n    N_d1 = 0.457185  # N(d1)\n    N_d2 = 0.374163  # N(d2)\n\n    # Do math calculation to get the answer\n    call_option_value = S * N_d1 - K * math.exp(-r * t) * N_d2\n\n    # return answer\n    return round(call_option_value, 2)\n```\n\nThis Python program calculates the value of a European call option using the Black-Scholes model with the given parameters. Here's a breakdown of the solution:\n\n1. We define all the given variables: spot price (S), strike price (K), risk-free interest rate (r), time to expiration (t), N(d1), and N(d2).\n\n2. We then use the Black-Scholes formula for a call option:\n   C = S * N(d1) - K * e^(-r * t) * N(d2)\n\n   Where:\n   C is the call option value\n   S is the spot price\n   N(d1) and N(d2) are the cumulative normal distribution functions\n   K is the strike price\n   e is the mathematical constant (base of natural logarithm)\n   r is the risk-free interest rate\n   t is the time to expiration\n\n3. We calculate the result and round it to two decimal places for a typical financial representation.\n\n4. Finally, we return the calculated value of the call option.\n\nThis program will return the value of the European call option based on the given parameters and the Black-Scholes model."
        ]
    },
    {
        "tables": [
            "| xor z 0 |     | 0.01 0.02 0.03 0.04 0.05 0.06 0.07                                   | 0.08 | 0.09 |\n| 0.10 |     | 0.5398 0.5438 0.5478 0.5517 0.5557 0.5596 0.5636 0.5675 0.5714 0.5753 |     |     |\n| 0.20 |     | 0.5793 0.5832 0.5871 0.5910 0.5948 0.5987 0.6026 0.6064 0.6103 0.6141 |     |     |\n| 0.30 |     | 0.6179 0.6217 0.6255 0.6293 0.6331 0.6368 0.6406 0.6443 0.6480 0.6517 |     |     |\n| 0.40 |     | 0.6554 0.6591 0.6628 0.6664 0.6700 0.6736 0.6772 0.6808 0.6844 0.6879 |     |     |\n| 1.10 |     | 0.8643 0.8665 0.8686 0.8708 0.8729 0.8749 0.8770 0.8790 0.8810 0.883  |     |     |\n| 1.20 | 0.8849 0.8869 0.8888 0.8907 0.8925 0.8944 0.8962 0.8980 0.8997 0.9015 |      |     |\n| 1.30 | 0.9032 0.9049 0.9066 0.9082 0.9099 0.9115 0.9131 0.9147 0.9162 0.9177 |      |     |\n| 1."
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-169",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the given extract from the cumulative distribution function for the standard normal random variable table: Cumulative Probabilities for a Standard Normal DistributionP(Z ≤ x) = N(x) for x ≥ 0 or P(Z ≤ z) = N(z) for z ≥ 0, If a variable follows a normal distribution with an average of 2.00 and a variance of 16.00, what's the likelihood of getting a value that is 7.40 or lower?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean = 2.00\n    variance = 16.00\n    x = 7.40\n    \n    # Do math calculation to get the answer\n    standard_deviation = variance ** 0.5\n    z_score = (x - mean) / standard_deviation\n    \n    # Since z_score is 1.35, which is between 1.30 and 1.40 in the table\n    # We'll use the closest value in the table, which is 1.35\n    probability = 0.9115\n    \n    # return answer\n    return probability\n```\n\nThis solution follows these steps:\n\n1. We define the given values: mean (2.00), variance (16.00), and the x value we're interested in (7.40).\n\n2. We calculate the standard deviation by taking the square root of the variance.\n\n3. We calculate the z-score using the formula: z = (x - μ) / σ\n   Where x is the value of interest, μ is the mean, and σ is the standard deviation.\n\n4. The calculated z-score is 1.35. In the provided table, this falls between 1.30 and 1.40.\n\n5. The closest value in the table is 1.35, which corresponds to a probability of 0.9115.\n\n6. We return this probability as our answer.\n\nNote: This solution uses an approximation from the table. For a more precise answer, you would need a more detailed table or a computational method to calculate the exact probability."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-170",
        "python_solution": "",
        "ground_truth": null,
        "question": "If under LIFO, the ABC organization reported a COGS of $500,000, and an ending inventory of $600,000 in 2017, and it was noted in the footnotes that LIFO reserve increased by $10,000, what would be its cost of goods sold if ABC organization switched its accounting method from LIFO to FIFO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lifo_cogs = 500000\n    lifo_ending_inventory = 600000\n    lifo_reserve_increase = 10000\n\n    # Do math calculation to get the answer\n    fifo_ending_inventory = lifo_ending_inventory + lifo_reserve_increase\n    total_goods_available = lifo_cogs + fifo_ending_inventory\n    fifo_cogs = total_goods_available - fifo_ending_inventory\n\n    # return answer\n    return fifo_cogs\n```\n\nThis Python program calculates the cost of goods sold (COGS) under the FIFO (First-In, First-Out) method based on the given information about LIFO (Last-In, First-Out) accounting.\n\nHere's how it works:\n\n1. We define the known variables:\n   - LIFO COGS: $500,000\n   - LIFO ending inventory: $600,000\n   - LIFO reserve increase: $10,000\n\n2. We calculate the FIFO ending inventory by adding the LIFO reserve increase to the LIFO ending inventory.\n\n3. We calculate the total goods available for sale by adding the LIFO COGS and the FIFO ending inventory.\n\n4. Finally, we calculate the FIFO COGS by subtracting the FIFO ending inventory from the total goods available.\n\nThe program will return the FIFO COGS, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-171",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that in the futures market, the 1-year forward rate stands at NZD/AUD 1.1079. Given that the yearly interest rate is 2.5% in Australia (AUD) and 3% in New Zealand (NZD), what would be the NZD/AUD spot rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.1079\n    aud_interest_rate = 0.025\n    nzd_interest_rate = 0.030\n    time = 1  # 1 year\n\n    # Do math calculation to get the answer\n    spot_rate = forward_rate / ((1 + nzd_interest_rate) / (1 + aud_interest_rate)) ** time\n\n    # return answer\n    return round(spot_rate, 4)\n```\n\nThis Python program calculates the NZD/AUD spot rate using the given information:\n\n1. We define the variables:\n   - `forward_rate`: The 1-year forward rate (1.1079)\n   - `aud_interest_rate`: The yearly interest rate in Australia (2.5% or 0.025)\n   - `nzd_interest_rate`: The yearly interest rate in New Zealand (3% or 0.030)\n   - `time`: The time period (1 year)\n\n2. We use the interest rate parity formula to calculate the spot rate:\n   Spot Rate = Forward Rate / ((1 + Foreign Interest Rate) / (1 + Domestic Interest Rate)) ^ Time\n\n3. We round the result to 4 decimal places for currency precision.\n\n4. The function returns the calculated spot rate.\n\nWhen you run this function, it will return the NZD/AUD spot rate based on the given forward rate and interest rates."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-172",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a credit commitment totals $10 million, with $8.5 million currently still due, and there's a 1% chance of default with a recovery rate of 40%, what's the predicted loss for the credit?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_commitment = 10000000\n    amount_due = 8500000\n    default_probability = 0.01\n    recovery_rate = 0.40\n\n    # Do math calculation to get the answer\n    exposure_at_default = amount_due\n    loss_given_default = 1 - recovery_rate\n    expected_loss = exposure_at_default * default_probability * loss_given_default\n\n    # return answer\n    return expected_loss\n```\n\nThis Python program calculates the predicted loss for the credit based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values:\n   - Total commitment: $10 million\n   - Amount still due: $8.5 million\n   - Probability of default: 1% (0.01)\n   - Recovery rate: 40% (0.40)\n\n2. The exposure at default is the amount still due: $8.5 million\n\n3. The loss given default is calculated as 1 minus the recovery rate: 1 - 0.40 = 0.60\n\n4. The expected loss is then calculated by multiplying:\n   Exposure at Default * Probability of Default * Loss Given Default\n\n5. The function returns the expected loss, which represents the predicted loss for the credit.\n\nWhen you run this function, it will return the dollar amount of the predicted loss for the credit commitment."
        ]
    },
    {
        "tables": [
            "| Height interval | Absolute Frequency |\n|----------------|---------------------|\n| 155~160         | 10                       |\n| 160~165         | 20                       |\n| 165~170         | 30                       |\n| 170~175         | 24                       |\n| 175~180         | 10                       |\n| 180~185         | 6                         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-173",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the relative frequency of the height range \"170 ~175\" in the student height distribution for the class?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    frequency_170_175 = 24\n    total_students = 10 + 20 + 30 + 24 + 10 + 6\n    \n    # Do math calculation to get the answer\n    relative_frequency = frequency_170_175 / total_students\n    \n    # return answer\n    return relative_frequency\n```\n\nThis Python program calculates the relative frequency of the height range \"170~175\" in the student height distribution for the class. Here's how it works:\n\n1. We define the frequency of the \"170~175\" height range, which is 24 according to the table.\n2. We calculate the total number of students by summing up all the frequencies in the table.\n3. We calculate the relative frequency by dividing the frequency of the \"170~175\" range by the total number of students.\n4. The program returns this relative frequency as the answer.\n\nWhen you run this function, it will return the relative frequency as a decimal. If you want to express it as a percentage, you can multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-174",
        "python_solution": "",
        "ground_truth": null,
        "question": "Calculate the forward price of a 6-month forward contract on a bond that is priced at $1,058, has a biannual coupon payment of $30 and had its last payment three months ago, given a continuous interest rate of 5%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price = 1058\n    coupon_payment = 30\n    time_to_maturity = 6/12  # 6 months in years\n    time_since_last_payment = 3/12  # 3 months in years\n    interest_rate = 0.05  # 5% continuous interest rate\n\n    # Do math calculation to get the answer\n    # Calculate the present value of the next coupon payment\n    next_coupon_time = 0.5 - time_since_last_payment  # Time until next coupon payment\n    pv_next_coupon = coupon_payment * math.exp(-interest_rate * next_coupon_time)\n\n    # Calculate the forward price\n    forward_price = (bond_price - pv_next_coupon) * math.exp(interest_rate * time_to_maturity)\n\n    # return answer\n    return round(forward_price, 2)\n```\n\nThis Python program calculates the forward price of a 6-month forward contract on a bond, given the specifications in the question. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the time until the next coupon payment (6 months - 3 months = 3 months or 0.25 years).\n3. We calculate the present value of the next coupon payment using the continuous compounding formula.\n4. We then calculate the forward price using the formula: F = (S - I) * e^(r*T), where:\n   - F is the forward price\n   - S is the spot price of the bond\n   - I is the present value of the coupon payment\n   - r is the risk-free interest rate\n   - T is the time to maturity of the forward contract\n5. Finally, we round the result to two decimal places and return it.\n\nNote: This solution assumes that the bond's coupon payments align with the forward contract's maturity. If they don't, a more complex calculation considering multiple coupon payments might be necessary."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-175",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Lawson Company has recently paid a dividend of $1.75 per share. If the necessary annual return rate is 12.3 percent and dividends are predicted to consistently grow at 9.2 percent per year without end, what is the intrinsic worth of Lawson Company stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 1.75\n    required_return = 0.123\n    growth_rate = 0.092\n    \n    # Do math calculation to get the answer\n    intrinsic_value = current_dividend * (1 + growth_rate) / (required_return - growth_rate)\n    \n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of Lawson Company stock using the Gordon Growth Model (also known as the Dividend Discount Model). Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `current_dividend`: The most recent dividend paid ($1.75)\n   - `required_return`: The necessary annual return rate (12.3% or 0.123)\n   - `growth_rate`: The predicted constant growth rate of dividends (9.2% or 0.092)\n\n2. We use the formula: P = D1 / (r - g)\n   Where:\n   - P is the intrinsic value\n   - D1 is the expected dividend in the next period (current dividend * (1 + growth rate))\n   - r is the required return rate\n   - g is the growth rate\n\n3. The result is rounded to two decimal places for a reasonable representation of a stock price.\n\nThis calculation assumes that the dividend growth rate will remain constant indefinitely and that the required return rate is greater than the growth rate."
        ]
    },
    {
        "tables": [
            "|        | Spot Rate | Expected Spot Rate in One Year |\n|--------|-----------|------------------------|\n| USD/EUR| 1.3960    | 1.3860                 |\n| USD/CAD| 1.0110    | 1.0300                 |\n| EUR/GBP| 1.2850    | 1.2790                 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-176",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to a study carried out by a broker, what is the predicted increase (%) in value of the Canadian dollar (CAD) compared to the British pound (GBP)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    usd_eur_spot = 1.3960\n    usd_eur_future = 1.3860\n    usd_cad_spot = 1.0110\n    usd_cad_future = 1.0300\n    eur_gbp_spot = 1.2850\n    eur_gbp_future = 1.2790\n\n    # Do math calculation to get the answer\n    \n    # Calculate current CAD/GBP rate\n    cad_gbp_spot = (usd_eur_spot * eur_gbp_spot) / usd_cad_spot\n    \n    # Calculate future CAD/GBP rate\n    cad_gbp_future = (usd_eur_future * eur_gbp_future) / usd_cad_future\n    \n    # Calculate percentage change\n    percent_change = ((cad_gbp_future - cad_gbp_spot) / cad_gbp_spot) * 100\n\n    # return answer\n    return round(percent_change, 2)\n```\n\nThis Python function calculates the predicted percentage increase in the value of the Canadian dollar (CAD) compared to the British pound (GBP) based on the given spot rates and expected future rates.\n\nThe function does the following:\n\n1. Defines the given spot rates and expected future rates as variables.\n2. Calculates the current CAD/GBP rate using cross-rates.\n3. Calculates the future CAD/GBP rate using the expected future rates.\n4. Calculates the percentage change between the current and future rates.\n5. Returns the result rounded to two decimal places.\n\nThe returned value represents the predicted percentage increase in the value of CAD compared to GBP. A positive value indicates an increase in CAD's value (or depreciation of GBP), while a negative value would indicate a decrease in CAD's value (or appreciation of GBP) relative to each other."
        ]
    },
    {
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity |\n|------|-------------|------------------|\n| A    | 5%          | 2 years          |\n| B    | 3%          | 2 years          |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-177",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering two bonds that pay interest annually, what is the price difference between Bond 1 and Bond 2 per 100 of par value at a market discount rate of 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    discount_rate = 0.04\n    time_to_maturity = 2\n    coupon_rate_a = 0.05\n    coupon_rate_b = 0.03\n\n    # Do math calculation to get the answer\n    \n    # Calculate price of Bond A\n    coupon_a = par_value * coupon_rate_a\n    present_value_coupon_a = coupon_a * (1 - (1 + discount_rate)**(-time_to_maturity)) / discount_rate\n    present_value_par_a = par_value / (1 + discount_rate)**time_to_maturity\n    price_a = present_value_coupon_a + present_value_par_a\n\n    # Calculate price of Bond B\n    coupon_b = par_value * coupon_rate_b\n    present_value_coupon_b = coupon_b * (1 - (1 + discount_rate)**(-time_to_maturity)) / discount_rate\n    present_value_par_b = par_value / (1 + discount_rate)**time_to_maturity\n    price_b = present_value_coupon_b + present_value_par_b\n\n    # Calculate price difference\n    price_difference = price_a - price_b\n\n    # return answer\n    return round(price_difference, 2)\n```\n\nThis Python program calculates the price difference between Bond A and Bond B per 100 of par value at a market discount rate of 4%. Here's a breakdown of what the program does:\n\n1. It defines the variables for par value (100), discount rate (4% or 0.04), time to maturity (2 years), and the coupon rates for both bonds (5% and 3% respectively).\n\n2. It calculates the price of Bond A using the bond pricing formula:\n   - Calculates the present value of coupon payments\n   - Calculates the present value of the par value\n   - Adds these together to get the bond price\n\n3. It performs the same calculations for Bond B.\n\n4. It calc"
        ]
    },
    {
        "tables": [
            "|                     | Bond A       | Bond B       | Bond C       |\n|---------------------|--------------|--------------|--------------|\n| Time to maturity (years) | 10     | 6     | 4     |\n| Par value         | $10,000,000  | $10,000,000  | $10,000,000  |\n| Market value      | $9,323,381   | $11,189,092  | $10,000,000  |\n| Annualized modified duration  | 7.3105  | 4.6880  | 3.4370  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-178",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the data on three securities: Security X, Security Y, and Security Z. A dividend income portfolio includes Security X and Security Y. If an additional $10 million is invested into the portfolio to acquire Security Z, what will be the yearly modified duration of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_a_value = 9323381\n    bond_a_duration = 7.3105\n    bond_b_value = 11189092\n    bond_b_duration = 4.6880\n    bond_c_value = 10000000\n    bond_c_duration = 3.4370\n    \n    # Do math calculation to get the answer\n    total_portfolio_value = bond_a_value + bond_b_value + bond_c_value\n    \n    weighted_duration_a = (bond_a_value / total_portfolio_value) * bond_a_duration\n    weighted_duration_b = (bond_b_value / total_portfolio_value) * bond_b_duration\n    weighted_duration_c = (bond_c_value / total_portfolio_value) * bond_c_duration\n    \n    portfolio_duration = weighted_duration_a + weighted_duration_b + weighted_duration_c\n    \n    # return answer\n    return portfolio_duration\n```\n\nThis Python program calculates the yearly modified duration of the portfolio after investing an additional $10 million into Security Z (Bond C). Here's how it works:\n\n1. We define the market values and durations for each bond based on the given table.\n\n2. We calculate the total portfolio value by summing up the market values of all three bonds.\n\n3. We then calculate the weighted duration for each bond by multiplying its proportion in the portfolio (market value / total portfolio value) by its duration.\n\n4. Finally, we sum up these weighted durations to get the overall portfolio duration.\n\n5. The function returns this portfolio duration, which is the yearly modified duration of the portfolio after the additional investment.\n\nThis approach assumes that Security X is Bond A, Security Y is Bond B, and Security Z (the new investment) is Bond C. The program will return the yearly modified duration of the entire portfolio after the new investment is made."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-179",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the base value is $20 at expiration, the strike price is $18, what is the worth of the European put?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    base_value = 20\n    strike_price = 18\n    \n    # Do math calculation to get the answer\n    put_value = max(strike_price - base_value, 0)\n    \n    # return answer\n    return put_value\n```\n\nThis Python program calculates the value of a European put option at expiration. Here's an explanation of the code:\n\n1. We define two variables:\n   - `base_value`: The value of the underlying asset at expiration, which is $20.\n   - `strike_price`: The strike price of the put option, which is $18.\n\n2. To calculate the value of the put option at expiration, we use the formula:\n   put_value = max(strike_price - base_value, 0)\n\n   This formula reflects that:\n   - If the strike price is higher than the base value, the put option has value.\n   - If the strike price is lower than or equal to the base value, the put option is worthless.\n\n3. The `max()` function ensures that the put value cannot be negative.\n\n4. Finally, we return the calculated put_value.\n\nIn this case, since the base value ($20) is higher than the strike price ($18), the put option is worthless at expiration, so the function will return 0."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| Net income  | \\$1,000,000.00  |\n| Debt outstanding with a coupon rate of 4%  | \\$5,000,000.00  |\n| Preferred stocks with dividend rate of 4%  | \\$1,000,000.00  |\n| Tax rate  | 35%  |\n| Average weighted number of shares issued  | 500,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-180",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher gathered information about a corporation wherein the preferred shares can be transformed into 10,000 ordinary shares and the debt cannot be converted. What is the diluted earnings per share?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income = 1000000\n    debt = 5000000\n    debt_interest_rate = 0.04\n    preferred_stock = 1000000\n    preferred_dividend_rate = 0.04\n    tax_rate = 0.35\n    shares_outstanding = 500000\n    convertible_preferred_shares = 10000\n\n    # Do math calculation to get the answer\n    interest_expense = debt * debt_interest_rate\n    after_tax_interest = interest_expense * (1 - tax_rate)\n    preferred_dividends = preferred_stock * preferred_dividend_rate\n\n    adjusted_earnings = net_income + after_tax_interest - preferred_dividends\n    total_shares = shares_outstanding + convertible_preferred_shares\n\n    diluted_eps = adjusted_earnings / total_shares\n\n    # return answer\n    return round(diluted_eps, 2)\n\n```\n\nThis Python program calculates the diluted earnings per share based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the variables given in the table and the question.\n2. We calculate the interest expense on the debt and adjust it for tax.\n3. We calculate the preferred dividends.\n4. We adjust the earnings by adding back the after-tax interest (as if the debt was converted to equity) and subtracting the preferred dividends.\n5. We calculate the total number of shares, including the potential conversion of preferred shares to ordinary shares.\n6. Finally, we divide the adjusted earnings by the total number of shares to get the diluted EPS.\n7. The result is rounded to 2 decimal places for better readability.\n\nThis calculation assumes that the preferred shares are converted to ordinary shares, but the debt is not converted, as specified in the question. The program will return the diluted earnings per share as a float value rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-181",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 225 days in a year, what is the highest number of daily losses that can go beyond the 1-day 99% VaR acceptable in a 1-year backtest for a financial risk analyst to determine, with 95% certainty, that the model is properly calibrated?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    days_in_year = 225\n    confidence_level = 0.95\n    \n    # Do math calculation to get the answer\n    expected_failures = days_in_year * 0.01  # 1% failures expected\n    \n    # Using binomial distribution properties\n    from scipy import stats\n    \n    # Find the highest number of failures that still gives us 95% confidence\n    max_failures = 0\n    while stats.binom.cdf(max_failures, days_in_year, 0.01) <= 1 - confidence_level:\n        max_failures += 1\n    \n    # We subtract 1 because we want the highest number that's still acceptable\n    answer = max_failures - 1\n    \n    # return answer\n    return answer\n```\n\nThis program uses the binomial distribution to calculate the maximum number of allowable VaR breaches. Here's a breakdown of the solution:\n\n1. We set the number of days in a year to 225 as given in the question.\n2. The confidence level is set to 95% (0.95) as we need to determine with 95% certainty.\n3. We calculate the expected number of failures, which is 1% of 225 days (as VaR is at 99% level).\n4. We use the cumulative distribution function (CDF) of the binomial distribution to find the highest number of failures that still gives us 95% confidence that the model is properly calibrated.\n5. We increment the `max_failures` until the CDF exceeds our confidence level.\n6. Finally, we subtract 1 from `max_failures` to get the highest acceptable number of failures.\n\nNote: This solution requires the `scipy` library for the binomial distribution calculations. If you're running this in an environment without scipy, you may need to install it first."
        ]
    },
    {
        "tables": [
            "| estimated beta of TMT Inc. against the S&P 500 Index | 1.4   |\n|------------------------------------------------|-------|\n| 10-year Treasury bond yield                             | 3.5% |\n| Return on S&P 500 Index used as a proxy for the market | 8%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-182",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is contemplating incorporating ABC Corp. into his portfolio. The last dividend payment of the company was 1.45 per share. He observes that the company's dividends have experienced an average growth rate of 6 percent. Using the data provided below, could you calculate the stock’s value of ABC Corp.?",
        "output": [
            "Here's a Python program to calculate the stock's value of ABC Corp based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    beta = 1.4\n    risk_free_rate = 0.035  # 10-year Treasury bond yield\n    market_return = 0.08  # Return on S&P 500 Index\n    last_dividend = 1.45\n    dividend_growth_rate = 0.06\n\n    # Do math calculation to get the answer\n    \n    # Calculate required return using CAPM\n    equity_risk_premium = market_return - risk_free_rate\n    required_return = risk_free_rate + beta * equity_risk_premium\n    \n    # Calculate stock value using Gordon Growth Model\n    stock_value = last_dividend * (1 + dividend_growth_rate) / (required_return - dividend_growth_rate)\n    \n    # Round the result to two decimal places\n    stock_value = round(stock_value, 2)\n\n    # return answer\n    return stock_value\n```\n\nThis program uses the Capital Asset Pricing Model (CAPM) to calculate the required return and then applies the Gordon Growth Model to determine the stock's value. The calculation steps are as follows:\n\n1. Calculate the equity risk premium by subtracting the risk-free rate from the market return.\n2. Use CAPM to calculate the required return: risk-free rate + (beta * equity risk premium).\n3. Apply the Gordon Growth Model: stock value = D1 / (r - g), where:\n   - D1 is the next year's expected dividend: last dividend * (1 + growth rate)\n   - r is the required return\n   - g is the dividend growth rate\n4. Round the result to two decimal places for a more practical representation of the stock value.\n\nThe program will return the calculated stock value as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-183",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, the quarterly returns for the S&P 500 were 8%, -5%, 3% and 1%. What is the S&P 500's quarterly geometric mean return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    q1_return = 0.08  # 8%\n    q2_return = -0.05  # -5%\n    q3_return = 0.03  # 3%\n    q4_return = 0.01  # 1%\n    \n    # Do math calculation to get the answer\n    total_return = (1 + q1_return) * (1 + q2_return) * (1 + q3_return) * (1 + q4_return)\n    geometric_mean = (total_return ** (1/4)) - 1\n    \n    # return answer\n    return geometric_mean\n```\n\nThis Python program calculates the quarterly geometric mean return for the S&P 500 based on the given quarterly returns for 2016. Here's how it works:\n\n1. We define variables for each quarterly return, converting the percentages to decimal form.\n\n2. We calculate the total return by multiplying (1 + each quarterly return). This gives us the cumulative return for the year.\n\n3. To get the geometric mean, we take the 4th root of the total return (since there are 4 quarters) and subtract 1. This gives us the average quarterly return.\n\n4. The function returns the geometric mean as a decimal. To convert to a percentage, you would multiply the result by 100.\n\nWhen you run this function, it will return the quarterly geometric mean return for the S&P 500 in 2016 based on the given data."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-184",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher establishes that 60% of all US retirement funds possess hedge funds. In assessing this probability, a random array of 10 US retirement funds is selected. Utilizing the binomial probability function, what is the likelihood that precisely 6 of the 10 organizations in the group possess hedge funds?",
        "output": [
            "Here's a Python program to answer the given question using the binomial probability function:\n\n```python\ndef solution():\n    # Define variables name and value\n    import math\n\n    n = 10  # number of trials (retirement funds selected)\n    k = 6   # number of successes (funds with hedge funds)\n    p = 0.60  # probability of success (60% of funds have hedge funds)\n\n    # Do math calculation to get the answer\n    def binomial_probability(n, k, p):\n        return math.comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n\n    probability = binomial_probability(n, k, p)\n\n    # return answer\n    return probability\n```\n\nThis program calculates the probability of exactly 6 out of 10 randomly selected US retirement funds possessing hedge funds, given that 60% of all US retirement funds possess hedge funds.\n\nThe `math.comb(n, k)` function is used to calculate the binomial coefficient (number of ways to choose k items from n items). The rest of the formula follows the binomial probability function:\n\nP(X = k) = C(n,k) * p^k * (1-p)^(n-k)\n\nWhere:\n- n is the number of trials (10 in this case)\n- k is the number of successes (6 in this case)\n- p is the probability of success on each trial (0.60 in this case)\n\nThe program returns the calculated probability as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-185",
        "python_solution": "",
        "ground_truth": null,
        "question": "A finance expert is working out the beta for a collection of large-cap utility firm shares. They establish that the correlation between the portfolio's return and the benchmark's return stands at 0.7, the portfolio return's volatility is 6.5%, and the benchmark return's volatility is 5.0%. What is the portfolio's beta in relation to its benchmark?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.7\n    portfolio_volatility = 0.065  # 6.5% expressed as decimal\n    benchmark_volatility = 0.05  # 5.0% expressed as decimal\n\n    # Do math calculation to get the answer\n    beta = correlation * (portfolio_volatility / benchmark_volatility)\n\n    # return answer\n    return beta\n```\n\nThis Python program calculates the portfolio's beta in relation to its benchmark using the given information. Here's a breakdown of the solution:\n\n1. We define the variables with the given values:\n   - correlation between the portfolio's return and the benchmark's return (0.7)\n   - portfolio return's volatility (6.5% or 0.065 as a decimal)\n   - benchmark return's volatility (5.0% or 0.05 as a decimal)\n\n2. We calculate the beta using the formula:\n   beta = correlation * (portfolio volatility / benchmark volatility)\n\n3. The calculated beta is then returned as the answer.\n\nWhen you run this function, it will return the portfolio's beta, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-186",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the odds of Jack Frost correctly answering more than 3 questions on a challenging multiple choice test that contains 5 questions, each with four nearly identical options, if he's answering randomly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_questions = 5\n    options_per_question = 4\n    min_correct_answers = 4  # \"more than 3\" means 4 or 5 correct\n\n    # Do math calculation to get the answer\n    probability_correct = 1 / options_per_question\n    probability_incorrect = 1 - probability_correct\n\n    # Probability of exactly 4 correct answers\n    prob_4_correct = (\n        5 * (probability_correct ** 4) * probability_incorrect\n    )\n\n    # Probability of all 5 correct answers\n    prob_5_correct = probability_correct ** 5\n\n    # Total probability of more than 3 correct answers\n    total_probability = prob_4_correct + prob_5_correct\n\n    # return answer\n    return total_probability\n```\n\nThis Python program calculates the probability of Jack Frost correctly answering more than 3 questions (i.e., 4 or 5 questions) on a 5-question multiple-choice test with 4 options per question, assuming he's answering randomly.\n\nThe program uses the binomial probability formula to calculate the chances of getting exactly 4 correct and exactly 5 correct, then sums these probabilities to get the total probability of getting more than 3 correct."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-187",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial consultant is studying the potential anticipated returns of a novel fund created to imitate the directional shifts of the China Shanghai Composite Stock Market Index (SHANGHAI), but with double the volatility of the index. SHANGHAI has an anticipated yearly return of 7.6% and a volatility of 14.0%, and the risk-free rate is 3.0% annually. If the correlation between the fund’s returns and the index's returns is 1.0, what would be the projected return of the fund according to the CAPM?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shanghai_return = 0.076\n    shanghai_volatility = 0.14\n    risk_free_rate = 0.03\n    fund_volatility = 2 * shanghai_volatility\n    correlation = 1.0\n\n    # Do math calculation to get the answer\n    shanghai_risk_premium = shanghai_return - risk_free_rate\n    shanghai_sharpe_ratio = shanghai_risk_premium / shanghai_volatility\n    \n    fund_beta = (fund_volatility / shanghai_volatility) * correlation\n    fund_risk_premium = fund_beta * shanghai_risk_premium\n    fund_return = risk_free_rate + fund_risk_premium\n\n    # return answer\n    return fund_return\n```\n\nThis Python program calculates the projected return of the fund according to the Capital Asset Pricing Model (CAPM). Here's a breakdown of the calculations:\n\n1. We define the given variables: Shanghai index return and volatility, risk-free rate, fund volatility (which is double the Shanghai index volatility), and correlation.\n\n2. We calculate the risk premium of the Shanghai index by subtracting the risk-free rate from its return.\n\n3. We calculate the Sharpe ratio of the Shanghai index (though it's not directly used in this case, it can be useful for comparison).\n\n4. We calculate the beta of the fund. Since the correlation is 1.0 and the fund's volatility is double that of the index, the beta is simply 2.\n\n5. We use the CAPM formula to calculate the fund's risk premium: beta * market risk premium\n\n6. Finally, we calculate the fund's expected return by adding the risk-free rate to the fund's risk premium.\n\nThe function returns this expected return of the fund."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-188",
        "python_solution": "",
        "ground_truth": null,
        "question": "The bond's clean price was set at $1,000. The transaction occurred between coupon dates, with accrued interest equating to $35.50 per bond. What is the bond's dirty price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    clean_price = 1000\n    accrued_interest = 35.50\n    \n    # Do math calculation to get the answer\n    dirty_price = clean_price + accrued_interest\n    \n    # return answer\n    return dirty_price\n```\n\nThis Python program calculates the dirty price of a bond given its clean price and accrued interest. Here's a breakdown of the solution:\n\n1. We define two variables:\n   - `clean_price`: The clean price of the bond, which is $1,000.\n   - `accrued_interest`: The accrued interest per bond, which is $35.50.\n\n2. We calculate the dirty price by adding the clean price and the accrued interest.\n\n3. The function returns the dirty price.\n\nThe dirty price of a bond is the price that includes the accrued interest, which is the amount of interest that has been earned but not yet paid since the last coupon payment. This is the actual price an investor would pay when purchasing the bond between coupon dates.\n\nWhen you run this function, it will return 1035.50, which is the dirty price of the bond in dollars."
        ]
    },
    {
        "tables": [
            "| | Cdn $ millions |\n| --- | --- |\n| Cash flow from operating activities | 105.9 |\n| Cash flow from investing activities | (11.8) |\n| Cash flow from financing activities | 46.5 |\n| Net change in cash for the year | 140.6 |\n| Interest paid (included in CFO) | 22.4 |\n| Taxes paid (tax rate of 30%) | 18.0 |\n| Total debt, end of year | 512.8 |"
        ],
        "topic": "Accounting",
        "question_id": "test-189",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the data collected by a researcher, what is the company's cash flow debt coverage ratio for this year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_flow_from_operating_activities = 105.9\n    interest_paid = 22.4\n    taxes_paid = 18.0\n    total_debt = 512.8\n\n    # Do math calculation to get the answer\n    adjusted_operating_cash_flow = cash_flow_from_operating_activities + interest_paid + taxes_paid\n    cash_flow_debt_coverage_ratio = adjusted_operating_cash_flow / total_debt\n\n    # return answer\n    return cash_flow_debt_coverage_ratio\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The company's cash flow debt coverage ratio is: {result:.4f}\")\n```\n\nThis Python program calculates the cash flow debt coverage ratio based on the provided data. Here's a breakdown of the calculation:\n\n1. We define the necessary variables from the given table.\n2. We calculate the adjusted operating cash flow by adding back interest paid and taxes paid to the cash flow from operating activities.\n3. We then divide the adjusted operating cash flow by the total debt to get the cash flow debt coverage ratio.\n4. The function returns this ratio.\n\nThe cash flow debt coverage ratio shows how well a company can pay off its total debt with its yearly cash flow from operations. A higher ratio indicates better ability to cover debt obligations with operating cash flow."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-190",
        "python_solution": "",
        "ground_truth": null,
        "question": "On 1 January 2015, a corporation releases $1,000,000 nominal value of 10-year bonds, when the market interest rate for bonds with similar risk and terms is 5%. These bonds yield 6% interest yearly on 31 December. What is the recorded value of these outstanding bonds on the balance sheet at the time they were issued?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nominal_value = 1000000\n    market_rate = 0.05\n    coupon_rate = 0.06\n    years = 10\n\n    # Do math calculation to get the answer\n    annual_interest = nominal_value * coupon_rate\n    present_value = 0\n    \n    for year in range(1, years + 1):\n        present_value += annual_interest / ((1 + market_rate) ** year)\n    \n    present_value += nominal_value / ((1 + market_rate) ** years)\n    \n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of the bonds at the time of issuance, which is the recorded value on the balance sheet. Here's how it works:\n\n1. We define the variables:\n   - `nominal_value`: The face value of the bonds ($1,000,000)\n   - `market_rate`: The market interest rate (5% or 0.05)\n   - `coupon_rate`: The interest rate the bonds yield (6% or 0.06)\n   - `years`: The term of the bonds (10 years)\n\n2. We calculate the annual interest payment: $1,000,000 * 6% = $60,000\n\n3. We use a loop to calculate the present value of all future interest payments:\n   - For each year, we discount the annual interest by the market rate\n   - We sum these discounted values\n\n4. We add to this the present value of the principal repayment at maturity\n\n5. We round the result to 2 decimal places (cents) and return it\n\nThis calculation gives us the fair value of the bonds at issuance, which is what would be recorded on the balance sheet. Since the coupon rate (6%) is higher than the market rate (5%), the bonds will be issued at a premium, meaning their recorded value will be higher than the nominal value of $1,000,000."
        ]
    },
    {
        "tables": [
            "| Year | End_of-Year Payment |\n|------|---------------------|\n| 1    | $ 100,000           |\n| 2    | $ 150,000           |\n| 3    | $ 200,000           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-191",
        "python_solution": "",
        "ground_truth": null,
        "question": "A freelancer commences a job today which is projected to go on for three years. If he anticipates investing these sums at an annual interest rate of 3%, compounded annually until his retirement a decade from now, what is the worth after 10 years, keeping in mind his payment plan encompasses the following?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    payments = [100000, 150000, 200000]\n    interest_rate = 0.03\n    total_years = 10\n\n    # Do math calculation to get the answer\n    total_value = 0\n    for i, payment in enumerate(payments):\n        years_invested = total_years - i\n        total_value += payment * (1 + interest_rate) ** years_invested\n\n    # return answer\n    return round(total_value, 2)\n```\n\nThis Python program calculates the total value of the freelancer's investments after 10 years, considering the given payment plan and interest rate. Here's how it works:\n\n1. We define the variables:\n   - `payments`: A list of the end-of-year payments for each of the three years.\n   - `interest_rate`: The annual interest rate of 3% (0.03 in decimal form).\n   - `total_years`: The total number of years until retirement (10 years).\n\n2. We initialize `total_value` to 0, which will store the sum of all investments.\n\n3. We loop through each payment:\n   - `i` is the index (0, 1, 2) representing the year of payment (1, 2, 3).\n   - We calculate `years_invested` by subtracting `i` from `total_years`. This gives us 10, 9, and 8 years for each payment respectively.\n   - We calculate the future value of each payment using the compound interest formula: `payment * (1 + interest_rate) ** years_invested`\n   - We add this value to `total_value`.\n\n4. Finally, we return the `total_value` rounded to 2 decimal places.\n\nThis program will calculate the total worth of the freelancer's investments after 10 years, taking into account the different investment periods for each payment."
        ]
    },
    {
        "tables": [
            "| Position (par value) | $100,000,000 |\n|---|---|\n| Flat price | 97.1251 |\n| Accrued interest | 0.4392 |\n| Macaulay duration | 8.586 |\n| Annual modified duration | 8.450 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-192",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data collected by a researcher, what is the monetary duration of the bond position?",
        "output": [
            "def solution():\n    # Define variables name and value\n    par_value = 100_000_000\n    flat_price = 97.1251\n    accrued_interest = 0.4392\n    annual_modified_duration = 8.450\n\n    # Do math calculation to get the answer\n    full_price = (flat_price + accrued_interest) / 100  # Convert percentage to decimal\n    market_value = par_value * full_price\n    monetary_duration = market_value * annual_modified_duration / 100  # Convert percentage to decimal\n\n    # return answer\n    return monetary_duration\n\n```\n\nThis Python program calculates the monetary duration of the bond position based on the given data. Here's a breakdown of the calculation:\n\n1. We define the variables using the provided data.\n2. We calculate the full price by adding the flat price and accrued interest, then divide by 100 to convert from percentage to decimal.\n3. We calculate the market value by multiplying the par value by the full price.\n4. The monetary duration is calculated by multiplying the market value by the annual modified duration (converted to decimal).\n\nThe function will return the monetary duration in dollar terms, which represents the dollar change in the bond's value for a 1% change in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-193",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Second-Hand Bookshop run by Susan generates its financial statements in line with IFRS. Inventory was obtained for £1 million and afterwards reduced to £550,000. However, it was later found out that one of the books is a rare collector's piece, and the inventory is now approximated to be worth £3 million. The inventory is probably listed on the balance sheet at:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 1000000  # Original cost of inventory in pounds\n    reduced_value = 550000   # Reduced value of inventory in pounds\n    market_value = 3000000   # Current market value of inventory in pounds\n\n    # Do math calculation to get the answer\n    # Under IFRS, inventory is valued at the lower of cost and net realizable value\n    listed_value = min(original_cost, reduced_value)\n\n    # return answer\n    return listed_value\n```\n\nThis Python program follows the International Financial Reporting Standards (IFRS) for inventory valuation. According to IFRS, inventory should be valued at the lower of cost and net realizable value. \n\nIn this case:\n1. The original cost was £1 million.\n2. The value was reduced to £550,000.\n3. Later, it was found that the inventory is worth £3 million due to a rare book.\n\nHowever, despite the increase in market value, IFRS still requires using the lower of cost or net realizable value. Therefore, the inventory would be listed on the balance sheet at £550,000, which is the lower of the original cost and the reduced value.\n\nThe program returns this value, which is the correct answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-194",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that there is no need for an industry risk adjustment, use the build-up method to determine the equity discount rate for a small business. Here's the information you need:• 5.0 percent is the equity risk premium• The mid-cap equity risk premium is 3.5 percent• A small stock risk premium is 4.2 percent• The income return on long-term bonds is 5.1 percent• The total return on intermediate-term bonds stands at 5.3 percent• 3.0 percent is the company-specific risk premium• As of the valuation date, the 20-year Treasury bond yield is 4.5 percent.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.045  # 20-year Treasury bond yield\n    equity_risk_premium = 0.050\n    mid_cap_premium = 0.035\n    small_stock_premium = 0.042\n    company_specific_premium = 0.030\n\n    # Do math calculation to get the answer\n    equity_discount_rate = (\n        risk_free_rate +\n        equity_risk_premium +\n        mid_cap_premium +\n        small_stock_premium +\n        company_specific_premium\n    )\n\n    # return answer\n    return equity_discount_rate\n```\n\nThis Python program calculates the equity discount rate using the build-up method as requested. Here's a breakdown of the calculation:\n\n1. We start with the risk-free rate, which is the 20-year Treasury bond yield (4.5%).\n2. We add the equity risk premium (5.0%).\n3. We add the mid-cap equity risk premium (3.5%).\n4. We add the small stock risk premium (4.2%).\n5. Finally, we add the company-specific risk premium (3.0%).\n\nThe program sums up all these components to get the final equity discount rate. Note that we don't use the income return on long-term bonds or the total return on intermediate-term bonds in this calculation, as they're not relevant to the build-up method for determining the equity discount rate in this case."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-195",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an average year, 5% of all enterprise leaders are dismissed due to \"performance\" issues. Presume that the leader's performance is evaluated on the basis of share performance and that 50% of shares earn above-average returns or showcase \"good\" performance. From observed data, 30% of all enterprise leaders who were dismissed demonstrated \"good\" performance. Applying Bayes' theorem, what is the likelihood that an enterprise leader will be dismissed given \"good\" performance? (Hint, let P(A) be the likelihood of an enterprise leader being dismissed, P(B) be the probability of a \"good\" performance rating, P(B I A) represent the possibility of a \"good\" performance rating given that the enterprise leader was dismissed, and P(A I B) signify the probability of the enterprise leader being dismissed given a \"good\" performance rating.)",
        "output": [
            "Here's a Python program to solve the problem using Bayes' theorem:\n\n```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.05  # Probability of being dismissed\n    P_B = 0.50  # Probability of \"good\" performance\n    P_B_given_A = 0.30  # Probability of \"good\" performance given dismissal\n\n    # Do math calculation to get the answer\n    # Bayes' theorem: P(A|B) = P(B|A) * P(A) / P(B)\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n\n    # Convert to percentage\n    result_percentage = P_A_given_B * 100\n\n    # return answer\n    return round(result_percentage, 2)\n```\n\nThis program calculates the probability that an enterprise leader will be dismissed given \"good\" performance using Bayes' theorem. Here's a breakdown of the variables:\n\n- `P_A`: Probability of being dismissed (5% or 0.05)\n- `P_B`: Probability of \"good\" performance (50% or 0.50)\n- `P_B_given_A`: Probability of \"good\" performance given dismissal (30% or 0.30)\n\nThe program then applies Bayes' theorem to calculate `P_A_given_B`, which is the probability of dismissal given \"good\" performance. The result is converted to a percentage and rounded to two decimal places before being returned."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n| --- | --- |\n| 1-year | 5% |\n| 2-year | 6% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-196",
        "python_solution": "",
        "ground_truth": null,
        "question": "The maturity time for Bond B is 2 years with annual interest payments and an 8% coupon rate. The spot rates are given as follows: Compute the cost of Bond B using these spot rates.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000 for the bond\n    coupon_rate = 0.08\n    spot_rate_1year = 0.05\n    spot_rate_2year = 0.06\n    \n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    # Present value of first year's coupon payment\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1year)\n    \n    # Present value of second year's coupon payment plus face value\n    pv_coupon_2_and_face = (coupon_payment + face_value) / (1 + spot_rate_2year)**2\n    \n    # Total present value (cost) of the bond\n    bond_cost = pv_coupon_1 + pv_coupon_2_and_face\n    \n    # return answer\n    return round(bond_cost, 2)\n```\n\nThis Python program calculates the cost of Bond B using the given spot rates. Here's a breakdown of the calculation:\n\n1. We define the variables: face value (assumed to be $1000), coupon rate (8% or 0.08), and the spot rates for 1 and 2 years.\n\n2. We calculate the annual coupon payment, which is the face value multiplied by the coupon rate.\n\n3. We calculate the present value of the first year's coupon payment using the 1-year spot rate.\n\n4. We calculate the present value of the second year's coupon payment plus the face value, using the 2-year spot rate.\n\n5. We sum these present values to get the total cost of the bond.\n\n6. Finally, we return the bond cost rounded to two decimal places.\n\nThis program will return the cost of Bond B in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-197",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say a random variable follows a standard distribution with a mean value of 80 and a deviation standard of 24. What is the percentage of this distribution that does not lie between 32 and 116?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean = 80\n    std_dev = 24\n    lower_bound = 32\n    upper_bound = 116\n\n    # Do math calculation to get the answer\n    import scipy.stats as stats\n\n    # Calculate z-scores for the bounds\n    z_lower = (lower_bound - mean) / std_dev\n    z_upper = (upper_bound - mean) / std_dev\n\n    # Calculate the probability outside the bounds\n    prob_outside = 1 - (stats.norm.cdf(z_upper) - stats.norm.cdf(z_lower))\n\n    # Convert to percentage\n    percentage_outside = prob_outside * 100\n\n    # return answer\n    return percentage_outside\n```\n\nThis Python program calculates the percentage of a normal distribution that lies outside the range of 32 to 116, given a mean of 80 and a standard deviation of 24. Here's a breakdown of the solution:\n\n1. We import the `scipy.stats` module to use its normal distribution functions.\n\n2. We calculate the z-scores for the lower and upper bounds using the formula: z = (x - μ) / σ, where x is the bound value, μ is the mean, and σ is the standard deviation.\n\n3. We use the cumulative distribution function (CDF) of the standard normal distribution to find the probability between the z-scores.\n\n4. The probability outside the bounds is 1 minus the probability between the bounds.\n\n5. We convert this probability to a percentage by multiplying by 100.\n\n6. The function returns this percentage as the answer.\n\nNote: This solution requires the SciPy library to be installed. If you're running this in an environment where you can't install additional libraries, you might need to use a different approach or approximation method."
        ]
    },
    {
        "tables": [
            "| Items | price$ |\n| --- | --- |\n| replacement cost | 50 |\n| original costs | 41 |\n| selling price | 45 |\n| normal profit margin | 10% |\n| selling costs | 5 |"
        ],
        "topic": "Accounting",
        "question_id": "test-198",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under US GAAP, how should the cost of running shoes be recorded by the Goodluck Company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    replacement_cost = 50\n    original_cost = 41\n    selling_price = 45\n    normal_profit_margin = 0.10\n    selling_costs = 5\n    \n    # Do math calculation to get the answer\n    net_realizable_value = selling_price - selling_costs\n    lower_of_cost_or_market = min(original_cost, net_realizable_value)\n    \n    # return answer\n    return original_cost\n```\n\nUnder US GAAP, the cost of inventory (in this case, running shoes) should be recorded at the lower of cost or market (LCM). However, the \"cost\" in this case is always the original cost, not the replacement cost.\n\nThe market value is defined as the current replacement cost, but it's bounded by two constraints:\n1. It should not exceed the net realizable value (NRV = selling price - selling costs)\n2. It should not be less than the NRV reduced by a normal profit margin\n\nIn this case, we don't need to consider these constraints because the question specifically asks how the cost should be recorded, which under US GAAP, is always at the original cost.\n\nTherefore, the program returns the original cost of $41, as this is how the cost of the running shoes should be recorded by Goodluck Company under US GAAP."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-199",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio manager is looking to hedge the interest risk of a bond position with a 5-year key rate exposure of $9.84. What would be the amount of face value employed to hedge if a hedge instrument with a similar 5-year key rate exposure of 4.12 per $100 of face value can be utilized?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_key_rate_exposure = 9.84\n    hedge_instrument_exposure_per_100 = 4.12\n    \n    # Do math calculation to get the answer\n    face_value_needed = (bond_key_rate_exposure / hedge_instrument_exposure_per_100) * 100\n    \n    # return answer\n    return face_value_needed\n```\n\nThis Python program calculates the face value of the hedge instrument needed to hedge the interest risk of the bond position. Here's how it works:\n\n1. We define two variables:\n   - `bond_key_rate_exposure`: The 5-year key rate exposure of the bond position ($9.84)\n   - `hedge_instrument_exposure_per_100`: The 5-year key rate exposure of the hedge instrument per $100 of face value (4.12)\n\n2. We calculate the face value needed using the formula:\n   face value = (bond exposure / hedge instrument exposure per 100) * 100\n\n3. The program returns the calculated face value.\n\nWhen you run this function, it will return the amount of face value of the hedge instrument needed to hedge the interest risk of the bond position."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-200",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the bond-equivalent yield if the yield to maturity on a yearly-payment bond is 7.75%?",
        "output": [
            "Here's the Python program to calculate the bond-equivalent yield based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_ytm = 0.0775  # 7.75% yield to maturity\n\n    # Do math calculation to get the answer\n    bond_equivalent_yield = 2 * (((1 + annual_ytm) ** 0.5) - 1)\n\n    # return answer\n    return bond_equivalent_yield * 100  # Convert to percentage\n```\n\nThis program calculates the bond-equivalent yield using the following steps:\n\n1. We define the annual yield to maturity (YTM) as 0.0775 (7.75%).\n\n2. To convert the annual YTM to a bond-equivalent yield (which is a semiannual yield), we use the formula:\n   Bond-equivalent yield = 2 * (((1 + annual_ytm) ** 0.5) - 1)\n\n3. We multiply the result by 100 to express it as a percentage.\n\nThe function will return the bond-equivalent yield as a percentage. When you run this function, it will give you the answer to the question."
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m| $25.27      | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-201",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Exhibit 1, what is the market impact per share relating to Trade 2 if Smith talks about a market buy order for 5,000 shares of an illiquid stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trade_2_price = 25.22\n    bid_price_before_trade = 25.19\n    \n    # Do math calculation to get the answer\n    market_impact_per_share = trade_2_price - bid_price_before_trade\n    \n    # return answer\n    return market_impact_per_share\n```\n\nThis Python program calculates the market impact per share for Trade 2 based on the information provided in the table. Here's the explanation:\n\n1. We define two variables:\n   - `trade_2_price`: The price at which Trade 2 was executed ($25.22)\n   - `bid_price_before_trade`: The bid price immediately before Trade 2 ($25.19)\n\n2. The market impact per share is calculated as the difference between the trade price and the bid price before the trade.\n\n3. The function returns this calculated value.\n\nNote that this calculation assumes that the market impact is measured by how much the trade price exceeded the prevailing bid price. This is a reasonable assumption for a market buy order in an illiquid stock, as the buyer typically has to pay a premium above the current bid to encourage sellers to trade.\n\nThe actual market impact for a 5,000 share order might be larger, especially for an illiquid stock, but the question specifically asks for the impact related to Trade 2, which we can calculate from the given data."
        ]
    },
    {
        "tables": [
            "| Revenue              | $1,000,000 |\n|----------------------|------------|\n| Returns of goods sold| $100,000   |\n| Cash collected       | $800,000   |\n| Cost of goods sold   | $700,000   |"
        ],
        "topic": "Accounting",
        "question_id": "test-202",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under the accrual basis of accounting, how much net revenue would be reported on the 2009 income statement of a company called Fairplay, considering that it was their initial business year and this is the information they have about the sale of their products?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 1000000\n    returns_of_goods_sold = 100000\n    \n    # Do math calculation to get the answer\n    net_revenue = revenue - returns_of_goods_sold\n    \n    # return answer\n    return net_revenue\n```\n\nThis program calculates the net revenue for Fairplay's initial business year under the accrual basis of accounting. Here's an explanation of the solution:\n\n1. We define the variables based on the information provided in the table:\n   - `revenue` is set to $1,000,000\n   - `returns_of_goods_sold` is set to $100,000\n\n2. To calculate the net revenue, we subtract the returns of goods sold from the total revenue. This is because under the accrual basis of accounting, revenue is recognized when it is earned, regardless of when cash is received. Returns are subtracted to reflect the actual revenue earned.\n\n3. The program returns the calculated net revenue.\n\nThe answer returned by this program will be $900,000, which is the net revenue that would be reported on Fairplay's 2009 income statement under the accrual basis of accounting."
        ]
    },
    {
        "tables": [
            "|                  | 2015  | 2014  |\n|------------------|-------|-------|\n| COGS             |50,800 |48,500 |\n| Ending inventories|10,550|10,000 |\n| LIFO reserve     |4,320  |2,600  |"
        ],
        "topic": "Accounting",
        "question_id": "test-203",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price of goods sold in 2015 employing the FIFO technique for a business that usually uses the LIFO strategy, as stated in pounds sterling?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cogs_lifo_2015 = 50800\n    lifo_reserve_2015 = 4320\n    lifo_reserve_2014 = 2600\n    \n    # Do math calculation to get the answer\n    lifo_reserve_change = lifo_reserve_2015 - lifo_reserve_2014\n    cogs_fifo_2015 = cogs_lifo_2015 - lifo_reserve_change\n    \n    # return answer\n    return cogs_fifo_2015\n```\n\nThis Python program calculates the price of goods sold in 2015 using the FIFO (First-In, First-Out) technique for a business that usually uses the LIFO (Last-In, First-Out) strategy.\n\nHere's how it works:\n\n1. We define the necessary variables:\n   - `cogs_lifo_2015`: The Cost of Goods Sold (COGS) for 2015 using LIFO\n   - `lifo_reserve_2015`: The LIFO reserve for 2015\n   - `lifo_reserve_2014`: The LIFO reserve for 2014\n\n2. We calculate the change in LIFO reserve from 2014 to 2015:\n   `lifo_reserve_change = lifo_reserve_2015 - lifo_reserve_2014`\n\n3. To convert LIFO COGS to FIFO COGS, we subtract the change in LIFO reserve from the LIFO COGS:\n   `cogs_fifo_2015 = cogs_lifo_2015 - lifo_reserve_change`\n\n4. Finally, we return the calculated FIFO COGS for 2015.\n\nThis program will return 49,080 pounds sterling, which is the price of goods sold in 2015 using the FIFO technique."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-204",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say :P(occasion X happens)=15%, P(occasion Y happens)=35%, and P(occasion Z happens)=20%. If the occasions X, Y and Z are all not dependent on each other, what is the P(occasion X or occasion Z happens)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_x = 0.15  # Probability of occasion X happening\n    p_y = 0.35  # Probability of occasion Y happening (not used in this calculation)\n    p_z = 0.20  # Probability of occasion Z happening\n    \n    # Do math calculation to get the answer\n    # P(X or Z) = P(X) + P(Z) - P(X and Z)\n    # Since X and Z are independent, P(X and Z) = P(X) * P(Z)\n    p_x_or_z = p_x + p_z - (p_x * p_z)\n    \n    # return answer\n    return p_x_or_z\n```\n\nThis Python program calculates the probability of either occasion X or occasion Z happening, given that they are independent events. Here's how it works:\n\n1. We define the probabilities of each event occurring as decimal values.\n2. We use the formula for the probability of either of two independent events occurring: P(A or B) = P(A) + P(B) - P(A and B)\n3. Since X and Z are independent, the probability of both occurring is the product of their individual probabilities: P(X and Z) = P(X) * P(Z)\n4. We calculate P(X or Z) using these principles and store it in p_x_or_z.\n5. Finally, we return p_x_or_z as the answer.\n\nThe result will be a decimal representing the probability of either occasion X or occasion Z happening."
        ]
    },
    {
        "tables": [
            "|                         |                      |\n|-------------------------|----------------------|\n| Seagraves Supply Company Operating Cash Flow - Direct Method For the year ended December 31, 20X7 |                      |\n| Cash paid to suppliers  | 265,866              |\n| Cash paid for operating expenses | 124,784             |\n| Cash paid for interest  | 4,326                |\n| Cash paid for taxes     | 14,956               |\n| Operating cash flow     | $ 20,048             |"
        ],
        "topic": "Accounting",
        "question_id": "test-205",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the direct method, determine the cash received from the client:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_paid_to_suppliers = 265866\n    cash_paid_for_operating_expenses = 124784\n    cash_paid_for_interest = 4326\n    cash_paid_for_taxes = 14956\n    operating_cash_flow = 20048\n    \n    # Do math calculation to get the answer\n    total_cash_outflows = cash_paid_to_suppliers + cash_paid_for_operating_expenses + cash_paid_for_interest + cash_paid_for_taxes\n    cash_received_from_clients = total_cash_outflows + operating_cash_flow\n    \n    # return answer\n    return cash_received_from_clients\n```\n\nThis Python program calculates the cash received from clients using the direct method based on the information provided in the table. Here's how it works:\n\n1. We define variables for all the given cash outflows and the operating cash flow.\n2. We calculate the total cash outflows by summing up all the cash paid items.\n3. Since the operating cash flow is the difference between cash inflows and outflows, we can determine the cash received from clients by adding the total cash outflows to the operating cash flow.\n4. The function returns the calculated cash received from clients.\n\nWhen you run this function, it will return the amount of cash received from clients, which answers the question using the direct method."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-206",
        "python_solution": "",
        "ground_truth": null,
        "question": "When we apply vertical common-size analysis to the following financial data from a different business entity: Total liabilities $19 million, Total stockholders’ equity $25 million, what is the percentage of total liabilities represented on the balance sheet?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 19000000  # $19 million\n    total_stockholders_equity = 25000000  # $25 million\n    \n    # Do math calculation to get the answer\n    total_assets = total_liabilities + total_stockholders_equity\n    liabilities_percentage = (total_liabilities / total_assets) * 100\n    \n    # return answer\n    return round(liabilities_percentage, 2)\n```\n\nThis Python program calculates the percentage of total liabilities represented on the balance sheet using vertical common-size analysis. Here's how it works:\n\n1. We define the given values: total liabilities ($19 million) and total stockholders' equity ($25 million).\n\n2. We calculate the total assets by adding total liabilities and total stockholders' equity.\n\n3. We then calculate the percentage of total liabilities by dividing total liabilities by total assets and multiplying by 100.\n\n4. Finally, we return the result rounded to two decimal places.\n\nWhen you run this function, it will return the percentage of total liabilities represented on the balance sheet."
        ]
    },
    {
        "tables": [
            "| Date     | Closing Price |\n|----------|---------------|\n| 1 August | 112           |\n| 8 August | 160           |\n| 15 August| 120           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-207",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the continuously compounded return of shares for Riddle Inc between August 1 and August 15, taking into account the weekly closing prices of Riddle Inc's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 112  # Closing price on August 1\n    final_price = 120    # Closing price on August 15\n    time_period = 2      # 2 weeks between August 1 and August 15\n\n    # Do math calculation to get the answer\n    import math\n    \n    # Calculate continuously compounded return\n    continuous_return = math.log(final_price / initial_price) / time_period\n    \n    # Convert to percentage and round to 4 decimal places\n    answer = round(continuous_return * 100, 4)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the continuously compounded return of Riddle Inc's shares between August 1 and August 15, based on the weekly closing prices provided in the table.\n\nHere's a breakdown of the calculation:\n\n1. We define the initial price (August 1) and final price (August 15) from the table.\n2. The time period is 2 weeks (from August 1 to August 15).\n3. We use the formula for continuously compounded return: r = ln(P_t / P_0) / t\n   Where:\n   - r is the continuously compounded return\n   - P_t is the final price\n   - P_0 is the initial price\n   - t is the time period\n4. We use math.log() for the natural logarithm (ln).\n5. The result is multiplied by 100 to convert to a percentage and rounded to 4 decimal places.\n\nThe program will return the continuously compounded return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-208",
        "python_solution": "",
        "ground_truth": null,
        "question": "What's the value of Corporation Z, which is currently being appraised by John using the dividend discount model? The latest dividend is $1.0 per share with a required return rate of 7.5%. It is anticipated to have a high growth rate of 5% for the initial three years, and thereafter, the dividend growth rate will be 3% annually indefinitely.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 1.0\n    required_return = 0.075\n    initial_growth_rate = 0.05\n    long_term_growth_rate = 0.03\n    high_growth_years = 3\n\n    # Do math calculation to get the answer\n    # Calculate dividends for the first three years\n    dividend_1 = current_dividend * (1 + initial_growth_rate)\n    dividend_2 = dividend_1 * (1 + initial_growth_rate)\n    dividend_3 = dividend_2 * (1 + initial_growth_rate)\n\n    # Calculate the present value of dividends for the first three years\n    pv_dividend_1 = dividend_1 / (1 + required_return)\n    pv_dividend_2 = dividend_2 / (1 + required_return)**2\n    pv_dividend_3 = dividend_3 / (1 + required_return)**3\n\n    # Calculate the terminal value at the end of year 3\n    terminal_dividend = dividend_3 * (1 + long_term_growth_rate)\n    terminal_value = terminal_dividend / (required_return - long_term_growth_rate)\n    pv_terminal_value = terminal_value / (1 + required_return)**3\n\n    # Sum up all the present values to get the stock value\n    stock_value = pv_dividend_1 + pv_dividend_2 + pv_dividend_3 + pv_terminal_value\n\n    # return answer\n    return round(stock_value, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-209",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume a share that has daily returns following a random walk, with an annualized volatility of 34%. Can you calculate the weekly volatility of this share assuming there are 52 weeks in a year?",
        "output": [
            "Here's a Python program to calculate the weekly volatility of a share based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_volatility = 0.34  # 34% annualized volatility\n    trading_days_per_year = 252  # Typical number of trading days in a year\n    trading_days_per_week = 5  # Typical number of trading days in a week\n\n    # Do math calculation to get the answer\n    daily_volatility = annual_volatility / (trading_days_per_year ** 0.5)\n    weekly_volatility = daily_volatility * (trading_days_per_week ** 0.5)\n\n    # return answer\n    return weekly_volatility\n\n```\n\nThis program does the following:\n\n1. We define the annual volatility as 0.34 (34%).\n2. We use 252 trading days per year, which is a common assumption in finance for the number of trading days in a year.\n3. We assume 5 trading days per week.\n4. We first calculate the daily volatility by dividing the annual volatility by the square root of the number of trading days in a year.\n5. Then, we calculate the weekly volatility by multiplying the daily volatility by the square root of the number of trading days in a week.\n6. Finally, we return the weekly volatility.\n\nThis calculation assumes that volatility scales with the square root of time, which is a common assumption in finance based on the properties of Brownian motion (which underlies the random walk model)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-210",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the odds for an event X if the probability for X is 14% (i.e., P(X) = 14%)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability = 0.14\n\n    # Do math calculation to get the answer\n    odds = probability / (1 - probability)\n\n    # return answer\n    return odds\n```\n\nThis Python program calculates the odds for an event X given its probability. Here's how it works:\n\n1. We define the probability as 0.14 (which is 14% expressed as a decimal).\n\n2. We calculate the odds using the formula: odds = p / (1-p), where p is the probability.\n\n3. The function returns the calculated odds.\n\nWhen you run this function, it will return approximately 0.1628, which can be expressed as about 1:6.14 or 0.1628:1. This means that for every 1.1628 times the event occurs, it is expected not to occur 1 time.\n\nRemember, odds and probability are different ways of expressing the same information. While probability expresses the likelihood of an event as a ratio of favorable outcomes to total outcomes, odds express it as a ratio of favorable outcomes to unfavorable outcomes."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-211",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that S0=400 and the risk-free rate stands at 5%. Figure out the forward price of a 6-month forward contract with continuous compounding.",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    S0 = 400  # Initial stock price\n    r = 0.05  # Risk-free rate (5%)\n    T = 0.5   # Time to maturity (6 months = 0.5 years)\n\n    # Do math calculation to get the answer\n    forward_price = S0 * math.exp(r * T)\n\n    # return answer\n    return forward_price\n\nimport math\n```\n\nThis program calculates the forward price of a 6-month forward contract with continuous compounding, given the initial stock price (S0) of 400 and a risk-free rate of 5%.\n\nThe formula used is:\nF = S0 * e^(r * T)\n\nWhere:\nF is the forward price\nS0 is the initial stock price\ne is the mathematical constant (base of natural logarithm)\nr is the risk-free rate\nT is the time to maturity in years\n\nThe program uses the `math.exp()` function to calculate e raised to the power of (r * T).\n\nWhen you run this function, it will return the forward price for the given parameters."
        ]
    },
    {
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n|----------|--------------|--------|--------|\n| G        | 15.00        | 17.00  | 500    |\n| H        | 35.00        | 33.00  | 300    |\n| 1        | 37.00        | 40.00  | 200    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-212",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Benedict from a investment firm collected data for a value-weighted index consisting of securities G,H,I. What was the return of the value-weighted index during this period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = {\n        'G': {'begin': 15.00, 'end': 17.00, 'shares': 500},\n        'H': {'begin': 35.00, 'end': 33.00, 'shares': 300},\n        'I': {'begin': 37.00, 'end': 40.00, 'shares': 200}\n    }\n    \n    # Do math calculation to get the answer\n    total_begin_value = sum(sec['begin'] * sec['shares'] for sec in securities.values())\n    total_end_value = sum(sec['end'] * sec['shares'] for sec in securities.values())\n    \n    value_weighted_return = (total_end_value - total_begin_value) / total_begin_value\n    \n    # Convert to percentage and round to 4 decimal places\n    answer = round(value_weighted_return * 100, 4)\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "|     | $ Millions |\n| --- | --- |\n| Short-term interest-bearing debt | 1,258 |\n| Long-term interest-bearing debt | 321 |\n| Total shareholder's equity | 4,285 |\n| Total assets | 8,750 |\n| EBIT | 2,504 |\n| Interest payments | 52 |"
        ],
        "topic": "Accounting",
        "question_id": "test-213",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the corporation's debt-to-assets ratio based on the data compiled by an analyst reviewing the corporation's solvency?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    short_term_debt = 1258\n    long_term_debt = 321\n    total_assets = 8750\n\n    # Do math calculation to get the answer\n    total_debt = short_term_debt + long_term_debt\n    debt_to_assets_ratio = total_debt / total_assets\n\n    # return answer\n    return debt_to_assets_ratio\n```\n\nThis Python program calculates the debt-to-assets ratio based on the data provided in the table. Here's a breakdown of the solution:\n\n1. We define the variables for short-term debt, long-term debt, and total assets using the values from the table (in millions of dollars).\n\n2. We calculate the total debt by adding short-term and long-term debt.\n\n3. We then calculate the debt-to-assets ratio by dividing the total debt by total assets.\n\n4. Finally, we return the calculated debt-to-assets ratio.\n\nThe debt-to-assets ratio shows the proportion of a company's assets that are financed by debt. A higher ratio indicates that the company is more leveraged and has a higher degree of financial risk."
        ]
    },
    {
        "tables": [
            "| Next year's earnings per share | $3.00 |\n|---------------------------|-------|\n| Return on equity         | 12.5% |\n| Dividend payout ratio    | 60%   |\n| Required return on shares| 10%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-214",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier collects the same information to calculate the intrinsic worth of a corporation’s stock using the justified forward P/E method. What is the intrinsic value per share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    eps = 3.00  # Next year's earnings per share\n    roe = 0.125  # Return on equity\n    payout_ratio = 0.60  # Dividend payout ratio\n    required_return = 0.10  # Required return on shares\n\n    # Do math calculation to get the answer\n    retention_ratio = 1 - payout_ratio\n    growth_rate = roe * retention_ratio\n    justified_pe = (payout_ratio * (1 + growth_rate)) / (required_return - growth_rate)\n    intrinsic_value = justified_pe * eps\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value per share using the justified forward P/E method. Here's a breakdown of the calculation:\n\n1. We first define the given variables.\n2. We calculate the retention ratio (1 - payout ratio).\n3. We calculate the growth rate (ROE * retention ratio).\n4. We calculate the justified P/E ratio using the formula: (payout ratio * (1 + growth rate)) / (required return - growth rate).\n5. Finally, we multiply the justified P/E ratio by the next year's earnings per share to get the intrinsic value.\n\nThe result is rounded to two decimal places for better readability. This program will return the intrinsic value per share based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-215",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager wants to understand the systematic risk of a stock portfolio and thus estimates the following linear regression: RPt−RF=αP+βP[RMt−RF]+εPtRPt​−RF​=αP​+βP​[RMt​−RF​]+εPt​, where RPtRPt​ represents the return of the portfolio at time t, RMtRMt​ represents the return of the market portfolio at time t, and RFRFRF​ is the risk-free rate, remaining constant throughout. Consider that α is 0.008, β is 0.977, σ(RP)\\sigma{(R_P)}σ(RP​) is 0.167, and σ(RM)\\sigma{(R_M)}σ(RM​) is 0.156. What is the likely coefficient of determination in this regression?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    alpha = 0.008\n    beta = 0.977\n    sigma_Rp = 0.167\n    sigma_Rm = 0.156\n    \n    # Do math calculation to get the answer\n    R_squared = (beta * sigma_Rm / sigma_Rp) ** 2\n    \n    # return answer\n    return R_squared\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The likely coefficient of determination (R-squared) is: {result:.4f}\")\n```\n\nThis program calculates the coefficient of determination (R-squared) for the given regression model. Here's an explanation of the calculation:\n\n1. We define the given variables: alpha (α), beta (β), standard deviation of portfolio returns (σ(RP)), and standard deviation of market returns (σ(RM)).\n\n2. The formula for R-squared in this case is: R² = (β * σ(RM) / σ(RP))²\n\n3. We calculate R-squared using this formula and return the result.\n\n4. The result is rounded to 4 decimal places for readability.\n\nWhen you run this program, it will output the likely coefficient of determination (R-squared) for the regression model. This value represents the proportion of variance in the dependent variable (portfolio returns) that is predictable from the independent variable (market returns)."
        ]
    },
    {
        "tables": [
            "| Item | Current Period |\n| --- | --- |\n| Total assets | 24,130 |\n| Total liabilities | 17,560 |\n| Total equity | 6,570 |\n| Total pension cost | 96 |\n| Pension contribution | 66 |\n| Financing cash flow | 2,323 |\n| Operating cash flow | -1,087 |\n| Effective tax rate | 30% |",
            "|   Item                    | 100-bp Increase | 100-bp Decrease |\n|---------------------------|-----------------|-----------------|\n| Benefit obligation change | $93             | -$76            |\n| Benefit expense change    | $12             | -$10            |"
        ],
        "topic": "Accounting",
        "question_id": "test-216",
        "python_solution": "",
        "ground_truth": null,
        "question": "Alexander Boone, a senior portfolio manager, collaborates with Rachel Stevens, a junior analyst. They are assessing the financial records of Corporation ABC (ABC), focusing on post-employment rewards. Stevens modifies the balance sheet and cash flow statement details presented in Exhibit 2 to more accurately represent the financial aspect of certain pension plan related items. Finally, Stevens scrutinizes the details present in Exhibit 3 and determines the effect of a 100-basis-point hike in health care inflation on ABC's debt-to-equity ratio. Considering Exhibits 2 and 3, alongside Boone's projection about future health care inflation, what should the debt-to-equity ratio computed by Stevens for ABC be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 24130\n    total_liabilities = 17560\n    total_equity = 6570\n    benefit_obligation_change = 93\n    \n    # Do math calculation to get the answer\n    \n    # Adjust liabilities for 100-bp increase in health care inflation\n    adjusted_liabilities = total_liabilities + benefit_obligation_change\n    \n    # Calculate adjusted debt-to-equity ratio\n    debt_to_equity_ratio = adjusted_liabilities / total_equity\n    \n    # return answer\n    return debt_to_equity_ratio\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The adjusted debt-to-equity ratio is: {result:.4f}\")\n```\n\nThis Python program calculates the adjusted debt-to-equity ratio for Corporation ABC after considering the effect of a 100-basis-point increase in health care inflation. Here's a breakdown of the solution:\n\n1. We define the given variables from the financial statements and the sensitivity analysis.\n\n2. We adjust the total liabilities by adding the benefit obligation change for a 100-bp increase ($93).\n\n3. We calculate the new debt-to-equity ratio by dividing the adjusted liabilities by the total equity.\n\n4. The function returns this adjusted debt-to-equity ratio.\n\nThe result is rounded to four decimal places for clarity. When you run this program, it will output the adjusted debt-to-equity ratio, which represents Stevens' calculation for ABC considering the 100-basis-point increase in health care inflation."
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012         |\n|----------------------------|------------|\n| Revenues                   | $6,456     |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA)   | 1,349     |\n| Depreciation expense       | 243        |\n| Operating income           | 1,106      |\n| Interest expense           | 186        |\n| Pretax income              | 920        |\n| Income tax (32%)           | 294        |\n| Net income                 | $626       |\n|                            |            |\n| Number of outstanding shares (millions) | 411     |\n| 2012 earnings per share    | $1.52      |\n| 2012 dividends paid (millions) | 148     |\n| 2012 dividends per share   | 0.36       |\n| 2012 fixed capital investment (millions) | 535  |\n|                            |            |\n| Cost of equity             | 12.0%      |\n| Weighted average cost of capital (WACC) | 9.0%  |",
            "|                                             | 2012  |       | 2011  |\n|---------------------------------------------|-------|-------|-------|\n| **Assets**                                  |       |       |       |\n| Cash and cash equivalents                   | $32   |       | $21   |\n| Accounts receivable                         | 413   |       | 417   |\n| Inventories                                 | 709   |       | 638   |\n| Other current assets                        | 136   |       | 123   |\n| Total current assets                        | $1,290|       | $1,199|\n|                                             |       |       |       |\n| **Liabilities and Stockholders' Equity**   |       |       |       |\n| Current liabilities                         | $2,783|       | $2,678|\n| Long-term debt                              | 2,249 |       | 2,449 |\n| Common stockholders' equity                 | 1,072 |       | 594   |\n| Total liabilities and stockholders' equity  | $6,104|       | $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-217",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the financial documents in Exhibits 1 and 2, Barnes' fiscal year concludes on December 31st. If the 2012 FCFF is equal to $500 million, what would be Barnes' FCFE ($ millions) for 2012, based on the information found in Exhibits 1 and 2?",
        "output": [
            "Here's a Python program to calculate Barnes' Free Cash Flow to Equity (FCFE) for 2012 based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    fcff = 500  # Free Cash Flow to Firm (given in the question)\n    interest_expense = 186  # From the income statement\n    tax_rate = 0.32  # From the income statement (32%)\n    net_borrowing = 2249 - 2449  # Change in long-term debt from 2011 to 2012\n\n    # Do math calculation to get the answer\n    tax_shield = interest_expense * tax_rate\n    fcfe = fcff - interest_expense + tax_shield + net_borrowing\n\n    # return answer (rounded to nearest million)\n    return round(fcfe)\n```\n\nThis program calculates the FCFE using the following formula:\n\nFCFE = FCFF - Interest Expense * (1 - Tax Rate) + Net Borrowing\n\nWhere:\n- FCFF is given as $500 million\n- Interest Expense is $186 million (from the income statement)\n- Tax Rate is 32% (from the income statement)\n- Net Borrowing is the change in long-term debt from 2011 to 2012 ($2,249 million - $2,449 million = -$200 million)\n\nThe program calculates these components and returns the FCFE rounded to the nearest million dollars."
        ]
    },
    {
        "tables": [
            "| | |\n| --- | --- |\n| Consumption function | C = 2,500+0.80*(Y-T) |\n| Investment function | l= 500+0.30*Y-25*r |\n| Government spending | G = 1,000 |\n| Tax function | T=-250+0.30*Y |\n| *Y* : Aggregate income *r*:Real interest rate | |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-218",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the real interest rate in a basic economy with no foreign trade stands at 3% and there's an upsurge in state expenditure to 2,000, what will be the surge in overall earnings?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r = 3  # Real interest rate\n    G_initial = 1000  # Initial government spending\n    G_new = 2000  # New government spending\n    \n    # Do math calculation to get the answer\n    def equilibrium_income(G):\n        # Create a function to solve for Y iteratively\n        Y = 10000  # Initial guess for Y\n        for _ in range(100):  # Iterate to converge on solution\n            C = 2500 + 0.80 * (Y - (-250 + 0.30*Y))\n            I = 500 + 0.30*Y - 25*r\n            T = -250 + 0.30*Y\n            Y_new = C + I + G\n            if abs(Y - Y_new) < 0.01:  # Check for convergence\n                break\n            Y = Y_new\n        return Y\n    \n    Y_initial = equilibrium_income(G_initial)\n    Y_new = equilibrium_income(G_new)\n    \n    change_in_Y = Y_new - Y_initial\n    \n    # return answer\n    return round(change_in_Y, 2)\n```\n\nThis Python program calculates the change in aggregate income (Y) when government spending (G) increases from 1,000 to 2,000, with a real interest rate (r) of 3%.\n\nThe program defines an inner function `equilibrium_income(G)` that solves for the equilibrium income iteratively, given a level of government spending. It then calculates the equilibrium income for both the initial and new levels of government spending, and returns the difference rounded to two decimal places.\n\nThis solution takes into account the interdependencies between income, consumption, investment, and taxes as defined in the provided equations."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-219",
        "python_solution": "",
        "ground_truth": null,
        "question": "A customer buys a 6-year bond at face value with an 8% coupon rate, where the interest is disbursed once a year. If the customer decides to sell the bond at the close of the 5th year, and the prevailing market interest rate is 7% at that moment. Can you determine the capital gain or loss?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000\n    coupon_rate = 0.08\n    original_term = 6\n    years_held = 5\n    market_rate = 0.07\n\n    # Do math calculation to get the answer\n    annual_coupon = face_value * coupon_rate\n    remaining_years = original_term - years_held\n\n    # Calculate the present value of remaining coupons\n    pv_coupons = sum([annual_coupon / (1 + market_rate) ** t for t in range(1, remaining_years + 1)])\n\n    # Calculate the present value of the face value at maturity\n    pv_face_value = face_value / (1 + market_rate) ** remaining_years\n\n    # Calculate the bond's price at the end of the 5th year\n    bond_price = pv_coupons + pv_face_value\n\n    # Calculate capital gain or loss\n    capital_gain_loss = bond_price - face_value\n\n    # return answer\n    return round(capital_gain_loss, 2)\n```\n\nThis program calculates the capital gain or loss when selling a 6-year bond after 5 years, given the following conditions:\n- 8% coupon rate, paid annually\n- Face value purchase\n- 7% market interest rate at the time of sale\n\nThe program assumes a face value of $1000 for the calculation. It computes the present value of the remaining coupon payments and the face value at maturity, using the new market rate of 7%. The sum of these present values gives the bond's price at the end of the 5th year.\n\nThe capital gain or loss is then calculated by subtracting the face value from this bond price. The result is rounded to two decimal places for better readability.\n\nA positive result indicates a capital gain, while a negative result indicates a capital loss."
        ]
    },
    {
        "tables": [
            "| Trades | Execution Price | Shares Executed |\n|--------|-----------------|-----------------|\n| Trade 1| $40.75 |    10,000     |\n| Trade 2| $41.25 |    30,000     |\n| Trade 3| $41.50 |    20,000     |\n| Trade 4| $41.75 |    30,000     |\n| Total  |        |    90,000     |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-220",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following day, Morris instructs Blue to go over their analysis on XYZ Corporation. Blue’s evaluation leads her to believe that the company's shares are undervalued. She shares her discoveries with Morris, who then directs her at 10 a.m. to purchase 120,000 shares at a price of $40.00 through a limit order of $42.00. The buy-side trader proceeds with the market execution when the cost is at $40.50. The sole charge is a commission of $0.02 per share. By the time the market closes, 90,000 shares from the order were bought, with XYZ Corporation closing at $42.50. The transaction was carried out at an average cost of $41.42, with detailed information about the executed trades in Exhibit 1. Based on the details in Exhibit 1, what is the execution cost for buying the 90,000 shares of XYZ Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trade1_price = 40.75\n    trade1_shares = 10000\n    trade2_price = 41.25\n    trade2_shares = 30000\n    trade3_price = 41.50\n    trade3_shares = 20000\n    trade4_price = 41.75\n    trade4_shares = 30000\n    total_shares = 90000\n    commission_per_share = 0.02\n\n    # Do math calculation to get the answer\n    total_cost = (trade1_price * trade1_shares +\n                  trade2_price * trade2_shares +\n                  trade3_price * trade3_shares +\n                  trade4_price * trade4_shares)\n    \n    commission_cost = total_shares * commission_per_share\n    \n    execution_cost = total_cost + commission_cost\n\n    # return answer\n    return execution_cost\n```"
        ]
    },
    {
        "tables": [
            "|                      | as of 31 December |       |\n|----------------------|-------------------|-------|\n| Assets               | 2009              | 2008  |\n| Cash and cash equivalents     | 1,884             | 1,280 |\n| Other financial assets        | 486               | 588   |\n| Trade and other receivables   | 2,546             | 3,178 |\n| Other non-financial assets    | 147               | 126   |\n| Tax assets                    | 192               | 399   |\n| Total  current assets         | 5,255             | 5,571 |",
            "|                         | as of 31 December |\n|------------------------ |---------- |---------- |\n| Assets                  | 2009      | 2008      |\n| Total non-current assets| 8,119     | 3,329     |\n| Total assets            | 13,374    | 13,900    |\n| Equity and Liabilities  |           |           |\n| Total current liabilities| 3,416     | 5,824     |\n| Total non-current liabilities| 1,467 | 905       |\n| Total liabilities       | 4,883     | 6,729     |\n| Total equity            | 8,491     | 7,171     |\n| Equity and liabilities  | 13,374    | 13,900    |"
        ],
        "topic": "Accounting",
        "question_id": "test-221",
        "python_solution": "",
        "ground_truth": null,
        "question": "From the data provided in Exhibit 4, what's the nearest quick ratio for the Oracle Corporation as of December 31, 2009? Exhibit 4. Oracle Corporation Consolidated Statements of Financial Position (Excerpt: Current Assets Detail)(In millions of €)",
        "output": [
            "Here's the Python program to calculate the quick ratio for Oracle Corporation as of December 31, 2009:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash_and_equivalents = 1884\n    other_financial_assets = 486\n    trade_and_other_receivables = 2546\n    total_current_liabilities = 3416\n\n    # Do math calculation to get the answer\n    quick_assets = cash_and_equivalents + other_financial_assets + trade_and_other_receivables\n    quick_ratio = quick_assets / total_current_liabilities\n    \n    # Round to the nearest decimal place\n    rounded_quick_ratio = round(quick_ratio, 1)\n    \n    # return answer\n    return rounded_quick_ratio\n```\n\nThis program calculates the quick ratio for Oracle Corporation as of December 31, 2009. The quick ratio is a measure of a company's ability to meet its short-term obligations using its most liquid assets. It's calculated by dividing quick assets (cash and cash equivalents, marketable securities, and accounts receivable) by current liabilities.\n\nIn this case:\n1. We sum up cash and cash equivalents, other financial assets, and trade and other receivables to get the quick assets.\n2. We divide this sum by the total current liabilities.\n3. We round the result to the nearest decimal place to get the nearest quick ratio.\n\nThe program will return this rounded quick ratio as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-222",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive is interested in determining the cost of a put option using a one-period binomial tree. Here are the relevant details: The existing stock price is $30, while the exercise price of the put option is also $30. The up factor is valued at 1.12 and the down factor stands at 0.92. The risk-free rate is set at 5%. What is the hedge ratio?",
        "output": [
            "def solution():\n    # Define variables name and value\n    S = 30  # Current stock price\n    K = 30  # Exercise price of the put option\n    u = 1.12  # Up factor\n    d = 0.92  # Down factor\n    r = 0.05  # Risk-free rate\n\n    # Do math calculation to get the answer\n    Su = S * u  # Stock price in up state\n    Sd = S * d  # Stock price in down state\n    \n    Pu = max(0, K - Su)  # Put option value in up state\n    Pd = max(0, K - Sd)  # Put option value in down state\n    \n    hedge_ratio = (Pd - Pu) / (Sd - Su)\n    \n    # return answer\n    return hedge_ratio\n\n```\n\nThis Python program calculates the hedge ratio for a put option using a one-period binomial tree model. Here's a breakdown of the calculation:\n\n1. We first define all the given variables: current stock price (S), exercise price (K), up factor (u), down factor (d), and risk-free rate (r).\n\n2. We calculate the stock prices in the up state (Su) and down state (Sd) by multiplying the current stock price with the respective factors.\n\n3. We then calculate the put option values in the up state (Pu) and down state (Pd) using the max function to ensure the option value is non-negative.\n\n4. Finally, we calculate the hedge ratio using the formula: (Pd - Pu) / (Sd - Su).\n\n5. The function returns the calculated hedge ratio.\n\nThis hedge ratio represents the number of shares of the underlying stock that should be sold short for each put option purchased to create a risk-free hedge."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-223",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the two-period binomial model, Matt estimates the value of a two-year American-style call option on Alpha Corporation's common shares. The parameters are as follows: the present stock price sits at 96, while the call option's exercise price is 70. The up factor (u) equates to 1.20, with the down factor (d) at 0.83. The risk-free rate of return, calculated with continuous compounding, is 4%. How much is the option worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 96  # Current stock price\n    K = 70  # Strike price\n    u = 1.20  # Up factor\n    d = 0.83  # Down factor\n    r = 0.04  # Risk-free rate\n    T = 2  # Time to expiration in years\n\n    # Do math calculation to get the answer\n    import math\n\n    # Calculate risk-neutral probability\n    p = (math.exp(r * T / 2) - d) / (u - d)\n\n    # Calculate possible stock prices at expiration\n    Su = S * u * u\n    Sm = S * u * d\n    Sd = S * d * d\n\n    # Calculate option values at expiration\n    Cu = max(Su - K, 0)\n    Cm = max(Sm - K, 0)\n    Cd = max(Sd - K, 0)\n\n    # Calculate option values one period before expiration\n    Cu1 = max((p * Cu + (1 - p) * Cm) * math.exp(-r * T / 2), S * u - K)\n    Cd1 = max((p * Cm + (1 - p) * Cd) * math.exp(-r * T / 2), S * d - K)\n\n    # Calculate option value at t=0\n    C = max((p * Cu1 + (1 - p) * Cd1) * math.exp(-r * T / 2), S - K)\n\n    # return answer\n    return round(C, 2)\n```\n\nThis Python program implements the two-period binomial model to price an American-style call option. Here's a breakdown of the steps:\n\n1. We define all the given parameters.\n2. We calculate the risk-neutral probability using the formula: p = (e^(rT/2) - d) / (u - d)\n3. We calculate the possible stock prices at expiration (after two periods).\n4. We calculate the option values at expiration for each possible stock price.\n5. We work backwards, calculating the option values one period before expiration, taking into account the"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-224",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financier utilizes a multivariate normal distribution to accurately model the returns on 3 stocks, how many parameters does he need to determine at the outset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_stocks = 3\n    \n    # Do math calculation to get the answer\n    num_means = num_stocks\n    num_variances = num_stocks\n    num_covariances = (num_stocks * (num_stocks - 1)) // 2\n    \n    total_parameters = num_means + num_variances + num_covariances\n    \n    # return answer\n    return total_parameters\n```\n\nThis Python function calculates the number of parameters needed to determine a multivariate normal distribution for 3 stocks. Here's the breakdown:\n\n1. We need to determine the mean return for each stock (3 parameters)\n2. We need to determine the variance for each stock (3 parameters)\n3. We need to determine the covariances between each pair of stocks. The number of covariances is calculated as (n * (n-1)) / 2, where n is the number of stocks. In this case, it's (3 * 2) / 2 = 3 parameters.\n\nThe total number of parameters is the sum of these three components: 3 + 3 + 3 = 9.\n\nThe function will return 9 as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-225",
        "python_solution": "",
        "ground_truth": null,
        "question": "What's the chance of a pupil correctly answering less than two questions on a multiple-choice test that has four choices for a total of six questions, by just guessing?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    import math\n    \n    total_questions = 6\n    choices_per_question = 4\n    target_correct = 1  # Less than 2 means 0 or 1 correct\n    prob_correct = 1 / choices_per_question\n\n    # Do math calculation to get the answer\n    prob_0_correct = math.comb(total_questions, 0) * (prob_correct ** 0) * ((1 - prob_correct) ** (total_questions - 0))\n    prob_1_correct = math.comb(total_questions, 1) * (prob_correct ** 1) * ((1 - prob_correct) ** (total_questions - 1))\n    \n    total_probability = prob_0_correct + prob_1_correct\n\n    # return answer\n    return total_probability\n```\n\nThis program calculates the probability of a student correctly answering less than two questions (i.e., 0 or 1 question) on a multiple-choice test with 6 questions and 4 choices per question, by just guessing.\n\nThe solution uses the binomial probability formula to calculate the chances of getting exactly 0 correct and exactly 1 correct, then sums these probabilities to get the total chance of getting less than 2 correct.\n\nThe `math.comb()` function is used to calculate the number of ways to choose k items from n items (combination).\n\nThe result returned by this function will be the probability (a number between 0 and 1) of getting less than two questions correct by guessing."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-226",
        "python_solution": "",
        "ground_truth": null,
        "question": "The head credit analyst of Vigilant Consultants recently stated that the five-year bond of Atlas Co. is currently yielding 7% and a similar CDS contract has a credit spread of 4.25%. Given that the MRR is 2.5%, Lopez advised performing a basis trade to exploit the pricing of Atlas Co.'s bonds and CDS. The basis trade would involve buying both the bond and the CDS contract. Considering the basis trade for Atlas Co., what will be the gain if convergence happens in the bond and CDS markets?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 0.07  # 7% bond yield\n    cds_spread = 0.0425  # 4.25% CDS spread\n    mrr = 0.025  # 2.5% MRR (Minimum Required Return)\n\n    # Do math calculation to get the answer\n    theoretical_spread = bond_yield - mrr\n    basis = theoretical_spread - cds_spread\n    gain = basis * 100  # Convert to basis points\n\n    # return answer\n    return gain\n```\n\nThis Python program calculates the potential gain from the basis trade described in the question. Here's a breakdown of the calculation:\n\n1. We define the given variables: bond yield (7%), CDS spread (4.25%), and MRR (2.5%).\n\n2. We calculate the theoretical spread, which is the difference between the bond yield and the MRR.\n\n3. The basis is then calculated as the difference between the theoretical spread and the actual CDS spread.\n\n4. The gain is expressed in basis points, so we multiply the basis by 100.\n\n5. The function returns the gain in basis points.\n\nIf convergence happens in the bond and CDS markets, this calculation will show the potential gain from the basis trade."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-227",
        "python_solution": "",
        "ground_truth": null,
        "question": "Think about the purchaser of a 6x9 FRA. The contract rate is 6.35% on a notional sum of $10 million. Determine the settlement sum for the vendor if the settlement rate is 6.85%. Assume a 30/360-day count basis.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional = 10000000  # $10 million\n    contract_rate = 0.0635  # 6.35%\n    settlement_rate = 0.0685  # 6.85%\n    days = 180  # 6 months (assuming 30/360 day count)\n    year_days = 360  # 360-day year\n\n    # Do math calculation to get the answer\n    rate_difference = settlement_rate - contract_rate\n    fra_payment = (notional * rate_difference * days) / (year_days + (settlement_rate * days))\n    \n    # return answer\n    return fra_payment\n```\n\nThis Python program calculates the settlement sum for the vendor of a 6x9 FRA (Forward Rate Agreement) based on the given information:\n\n1. We define the variables:\n   - `notional`: The notional sum of $10 million\n   - `contract_rate`: The contract rate of 6.35%\n   - `settlement_rate`: The settlement rate of 6.85%\n   - `days`: 180 days (6 months, assuming 30/360 day count)\n   - `year_days`: 360 days (for 30/360 day count basis)\n\n2. We calculate the rate difference between the settlement rate and the contract rate.\n\n3. We use the FRA payment formula to calculate the settlement sum:\n   FRA Payment = (Notional * (Settlement Rate - Contract Rate) * Days) / (Year Days + (Settlement Rate * Days))\n\n4. The function returns the calculated FRA payment, which is the settlement sum for the vendor.\n\nNote that the result will be in dollars. If you need it rounded or formatted, you can modify the return statement accordingly."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-228",
        "python_solution": "",
        "ground_truth": null,
        "question": "A task has been assigned to Jack, a consultant for a global investment firm, to evaluate the worth of an advanced technology enterprise. The collected information about the enterprise is as follows: It has 500 million ordinary shares in circulation. It has a current share price of $7. The enterprise has a declared debt of $3500 million, and its market value equals this figure. The enterprise has reported a cash holding of $1500 million. Furthermore, it has $50 million in preferred equity and $100 million in short-term investments. For this year, its reported net sales are $3000 million. With regard to the information provided, what is the enterprise EV to sales ratio?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    ordinary_shares = 500000000\n    share_price = 7\n    debt = 3500000000\n    cash = 1500000000\n    preferred_equity = 50000000\n    short_term_investments = 100000000\n    net_sales = 3000000000\n\n    # Do math calculation to get the answer\n    market_cap = ordinary_shares * share_price\n    enterprise_value = market_cap + debt + preferred_equity - cash - short_term_investments\n    ev_to_sales_ratio = enterprise_value / net_sales\n\n    # return answer\n    return round(ev_to_sales_ratio, 2)\n```\n\nThis program calculates the Enterprise Value to Sales ratio (EV/Sales) for the given technology enterprise. Here's a breakdown of the calculations:\n\n1. We first define all the given variables.\n2. We calculate the market capitalization by multiplying the number of ordinary shares by the share price.\n3. We then calculate the Enterprise Value (EV) using the formula:\n   EV = Market Cap + Debt + Preferred Equity - Cash - Short-term Investments\n4. Finally, we calculate the EV/Sales ratio by dividing the Enterprise Value by the net sales.\n5. The result is rounded to two decimal places for clarity.\n\nThe function will return the EV/Sales ratio, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-229",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the discount rate if the cash price stands at 97.63 and there are 60 calendar days left on the life of the government bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_price = 97.63\n    days_to_maturity = 60\n    face_value = 100  # Assuming a face value of 100 for the bond\n\n    # Do math calculation to get the answer\n    discount = face_value - cash_price\n    discount_rate = (discount / face_value) * (365 / days_to_maturity) * 100\n\n    # return answer\n    return round(discount_rate, 2)\n```\n\nThis Python program calculates the discount rate for a government bond based on the given information. Here's an explanation of the calculation:\n\n1. We define the cash price (97.63) and the number of days left until maturity (60).\n2. We assume a face value of 100 for the bond, which is standard for many government bonds.\n3. We calculate the discount as the difference between the face value and the cash price.\n4. The discount rate is then calculated using the formula:\n   Discount Rate = (Discount / Face Value) * (365 / Days to Maturity) * 100\n   This formula annualizes the discount rate by scaling it to 365 days.\n5. We round the result to 2 decimal places for better readability.\n\nThe program will return the annualized discount rate as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-230",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the present value of a 10-year annuity due with yearly payments of $2,000 and an annual compound interest rate of 5%, if the present value of a 10-year regular annuity with the same payments and interest rate is $15,443.47?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    regular_annuity_pv = 15443.47\n    interest_rate = 0.05\n    \n    # Do math calculation to get the answer\n    annuity_due_pv = regular_annuity_pv * (1 + interest_rate)\n    \n    # return answer\n    return round(annuity_due_pv, 2)\n```\n\nThis Python program calculates the present value of an annuity due based on the given information. Here's how it works:\n\n1. We define the present value of the regular annuity (`regular_annuity_pv`) and the interest rate (`interest_rate`) as variables.\n\n2. To calculate the present value of an annuity due, we multiply the present value of the regular annuity by (1 + interest rate). This is because an annuity due has payments at the beginning of each period, effectively giving each payment one extra period of interest compared to a regular annuity.\n\n3. We round the result to two decimal places for currency precision.\n\n4. The function returns the calculated present value of the annuity due.\n\nWhen you run this function, it will return the present value of the 10-year annuity due, which should be slightly higher than the regular annuity's present value due to the timing difference of the payments."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-231",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a 2-year zero-coupon bond's present cost is $0.88035 and its face value is $1, then what is the 2-year spot rate given risk-neutral investors?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    present_value = 0.88035\n    face_value = 1\n    time = 2  # years\n\n    # Do math calculation to get the answer\n    spot_rate = ((face_value / present_value) ** (1 / time) - 1) * 100\n\n    # return answer\n    return round(spot_rate, 4)\n```\n\nThis program calculates the 2-year spot rate for a zero-coupon bond given its present value, face value, and time to maturity. Here's a breakdown of the calculation:\n\n1. We use the formula: (Face Value / Present Value)^(1/t) - 1\n   Where t is the time to maturity in years.\n\n2. We then multiply the result by 100 to convert it to a percentage.\n\n3. The result is rounded to 4 decimal places for precision.\n\nThis calculation assumes risk-neutral investors and continuous compounding. The returned value will be the 2-year spot rate expressed as a percentage."
        ]
    },
    {
        "tables": [
            "| Year | Spot Rate | Forward Rate |\n|------|-----------|--------------|\n| 1    | 3.00%     |              |\n| 2    | 4.00%     | 5.01%        |\n| 3    | 5.00%     | 7.03%        |\n| 4    | 6.00%     | 9.06%        |\n| 5    | 7.00%     | 11.10%       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-232",
        "python_solution": "",
        "ground_truth": null,
        "question": "John acknowledges that this specific US Treasury bond might not be the best choice for investors seeking zero reinvestment risk. He proposes a different vehicle, namely a US Treasury zero-coupon note. This note is fresh off the press, has a term of five years, and is valued at $71.30 (with a face value of $100.00) to yield 7.00% at maturity. John explains that some investors might choose to buy this Treasury zero-coupon note now and keep it until it matures in five years. He also mentions that there are investors who might buy this Treasury zero-coupon note in two years and then keep it for three years until it matures. John requests that Bird calculate the forward rate that would make investors indifferent to either acquiring the Treasury zero-coupon note now or buying it two years down the line. Current spot rates and extrapolated one year forward rates are available in Exhibit 1. Using the data in Exhibit 1, what forward rate would make an",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 71.30\n    face_value = 100.00\n    years_to_maturity = 5\n    spot_rate_2yr = 0.04\n    spot_rate_5yr = 0.07\n\n    # Do math calculation to get the answer\n    future_value_2yr = current_price * (1 + spot_rate_2yr) ** 2\n    forward_rate = (face_value / future_value_2yr) ** (1/3) - 1\n\n    # Convert to percentage and round to 2 decimal places\n    forward_rate_percent = round(forward_rate * 100, 2)\n\n    # return answer\n    return forward_rate_percent\n```\n\nThis Python program calculates the forward rate that would make investors indifferent between buying the Treasury zero-coupon note now or in two years. Here's a breakdown of the calculation:\n\n1. We define the current price ($71.30), face value ($100.00), years to maturity (5), and the relevant spot rates from the table.\n\n2. We calculate the future value of the bond after 2 years using the 2-year spot rate.\n\n3. We then use this future value to calculate the forward rate for the remaining 3 years that would result in the face value at maturity.\n\n4. The forward rate is converted to a percentage and rounded to two decimal places for readability.\n\nThe program will return the forward rate as a percentage that would make investors indifferent between buying now or in two years."
        ]
    },
    {
        "tables": [
            "|                         |          |                       |         |\n|-------------------------|----------|-----------------------|---------|\n|Price per Share and Shares Outstanding|        ||             |\n|Current market price per share  | $15.0  |    |            |\n|Number of shares outstanding(millions)  | 1.0 |    |            |\n|Balance Sheet Data As of 2012 ($ millions)   |     |            ||\n|Cash and cash equivalents | 0.4 | Current liabilities    | 1.0       |\n|Accounts receivable | 1.2 | Long-term liabilities | 61.0   |\n|Inventories | 40.0 |  |  |\n|Investment securities |   6.0 |Common shareholders' equity | 15.6 |\n|Property, plant, and equipment | 30.0 | | |\n|Total assets  |  77.6 |Total liabilities and equity | 77.6 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-233",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a researcher predicts that the market worth of the corporation's investment securities is 115% of their recorded value, what is the corporation's price to adjusted book value ratio, taking into account the corporation's market data and balance sheet details at the close of the fiscal year 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_price_per_share = 15.0\n    shares_outstanding = 1.0  # in millions\n    book_value = 15.6  # Common shareholders' equity\n    investment_securities = 6.0\n    predicted_market_worth = 1.15 * investment_securities  # 115% of recorded value\n\n    # Do math calculation to get the answer\n    market_cap = market_price_per_share * shares_outstanding\n    \n    # Adjust book value\n    adjusted_book_value = book_value - investment_securities + predicted_market_worth\n    \n    # Calculate price to adjusted book value ratio\n    price_to_adjusted_book_value = market_cap / adjusted_book_value\n\n    # return answer\n    return price_to_adjusted_book_value\n\n```\n\nThis Python program calculates the corporation's price to adjusted book value ratio based on the given information. Here's a breakdown of the calculation:\n\n1. We define the necessary variables from the provided data.\n2. We calculate the market capitalization by multiplying the market price per share by the number of shares outstanding.\n3. We adjust the book value by subtracting the recorded value of investment securities and adding the predicted market worth (115% of recorded value).\n4. Finally, we calculate the price to adjusted book value ratio by dividing the market capitalization by the adjusted book value.\n\nThe function will return this ratio as the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-234",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial instrument has a beta of 1.30. If the risk-free interest rate stands at 3% and the market's expected return is 8%, what is the anticipated return of this particular financial instrument, using the capital asset pricing model (CAPM)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 1.30\n    risk_free_rate = 0.03\n    market_return = 0.08\n    \n    # Do math calculation to get the answer\n    market_risk_premium = market_return - risk_free_rate\n    expected_return = risk_free_rate + (beta * market_risk_premium)\n    \n    # return answer\n    return expected_return\n```\n\nThis Python program calculates the expected return of the financial instrument using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the calculation:\n\n1. We define the given variables: beta of the instrument, risk-free rate, and market return.\n2. We calculate the market risk premium by subtracting the risk-free rate from the market return.\n3. We then use the CAPM formula: Expected Return = Risk-free Rate + Beta * (Market Return - Risk-free Rate)\n4. The function returns the expected return as a decimal (e.g., 0.095 for 9.5%).\n\nTo get the result as a percentage, you could multiply the return value by 100 after calling the function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-235",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Sakamoto Company has recently distributed a dividend of ¥450 for each share. It is anticipated that the annual dividends will rise at a rate of 4 percent yearly for the forthcoming four years. By the conclusion of these four years, the Sakamoto Company's shares are predicted to have a selling price of ¥9000. If a 12 percent return rate is necessary, what would be the fundamental value of a share of Sakamoto Company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 450\n    growth_rate = 0.04\n    years = 4\n    selling_price = 9000\n    required_return = 0.12\n\n    # Do math calculation to get the answer\n    present_value = 0\n\n    # Calculate present value of dividends for the next 4 years\n    for year in range(1, years + 1):\n        dividend = initial_dividend * (1 + growth_rate) ** (year - 1)\n        present_value += dividend / (1 + required_return) ** year\n\n    # Add present value of selling price\n    present_value += selling_price / (1 + required_return) ** years\n\n    # Round to 2 decimal places\n    answer = round(present_value, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the fundamental value of a share of Sakamoto Company based on the given information. Here's how it works:\n\n1. We define the variables with the given values:\n   - Initial dividend: ¥450\n   - Annual growth rate: 4% (0.04)\n   - Number of years: 4\n   - Predicted selling price after 4 years: ¥9000\n   - Required return rate: 12% (0.12)\n\n2. We initialize a variable `present_value` to store our calculations.\n\n3. We use a loop to calculate the present value of dividends for each of the next 4 years:\n   - For each year, we calculate the dividend by growing it at 4% annually.\n   - We then discount this dividend back to the present using the required return rate.\n   - We add this discounted value to our `present_value`.\n\n4. After the loop, we add the present value of the predicted selling price after 4 years, discounted back to the present.\n\n5. We round the result to 2 decimal places for a reasonable level of precision.\n\n6. Finally, we return this value as the fundamental value of a share.\n\nThis program will give you the fundamental value of a share of Sakamoto Company based on the dividend discount model."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|--------------------------|--------------------------------|\n| 1        | 16                       | 20                             |\n| 2        | 12                       | 20                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-236",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a fund manager constructs a portfolio with two securities that has a projected return of 15%, what is the percentage invested in Security1?",
        "output": [
            "def solution():\n    # Define variables name and value\n    r1 = 0.16  # Expected Annual Return for Security 1\n    r2 = 0.12  # Expected Annual Return for Security 2\n    rp = 0.15  # Projected return of the portfolio\n\n    # Do math calculation to get the answer\n    # Let x be the percentage invested in Security 1\n    # Then (1-x) is the percentage invested in Security 2\n    # Portfolio return: rp = x * r1 + (1-x) * r2\n    # 0.15 = x * 0.16 + (1-x) * 0.12\n    # 0.15 = 0.16x + 0.12 - 0.12x\n    # 0.15 = 0.04x + 0.12\n    # 0.03 = 0.04x\n    x = 0.03 / 0.04\n\n    # Convert to percentage\n    percentage_security1 = x * 100\n\n    # return answer\n    return percentage_security1\n\n```\n\nThis Python program calculates the percentage invested in Security 1 to achieve a portfolio return of 15%. Here's how it works:\n\n1. We define the variables for the expected annual returns of both securities and the projected return of the portfolio.\n\n2. We use the formula for portfolio return: rp = x * r1 + (1-x) * r2, where x is the fraction invested in Security 1.\n\n3. We solve this equation for x:\n   0.15 = x * 0.16 + (1-x) * 0.12\n   0.15 = 0.16x + 0.12 - 0.12x\n   0.15 = 0.04x + 0.12\n   0.03 = 0.04x\n   x = 0.03 / 0.04\n\n4. We calculate x and convert it to a percentage.\n\n5. The function returns this percentage as the answer.\n\nThe answer represents the percentage that should be invested in Security 1 to achieve the projected portfolio return of 15%."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-237",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager employs a valuation model to calculate the worth of a bond portfolio at USD 125.00 million when the term structure is level. With the same model, the fund manager anticipates that the portfolio's value would surge to USD 127.70 million if all interest rates reduce by 20 bps and would drop to USD 122.20 million if all interest rates increase by 20 bps. Given these assumptions, what is the effective duration of the bond portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 125.00  # million USD\n    value_after_decrease = 127.70  # million USD\n    value_after_increase = 122.20  # million USD\n    rate_change = 0.0020  # 20 bps = 0.20% = 0.0020\n\n    # Do math calculation to get the answer\n    delta_value_decrease = value_after_decrease - initial_value\n    delta_value_increase = value_after_increase - initial_value\n    \n    # Calculate average change in value\n    avg_delta_value = (abs(delta_value_decrease) + abs(delta_value_increase)) / 2\n    \n    # Calculate effective duration\n    effective_duration = (avg_delta_value / initial_value) / rate_change\n\n    # return answer\n    return effective_duration\n```\n\nThis Python program calculates the effective duration of the bond portfolio based on the given information. Here's a breakdown of the calculation:\n\n1. We define the initial value of the portfolio, its value after a 20 bps decrease in interest rates, its value after a 20 bps increase in interest rates, and the rate change (20 bps = 0.0020).\n\n2. We calculate the change in value for both the rate decrease and increase scenarios.\n\n3. We take the average of these absolute changes to get the average change in value.\n\n4. Finally, we calculate the effective duration using the formula:\n   Effective Duration = (Average Change in Value / Initial Value) / Change in Interest Rate\n\nThe program will return the effective duration of the bond portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-238",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current trading price of ABC shares is $50. A 1-year put option on these shares, with an exercise price of $50, is valued at $2.08. Given a continuously compounded risk-free rate of 4%, what would be the value of a call option that has the same exercise price and date?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 50  # Current stock price\n    K = 50  # Exercise price\n    P = 2.08  # Put option price\n    r = 0.04  # Risk-free rate\n    T = 1  # Time to expiration in years\n\n    # Do math calculation to get the answer\n    import math\n    \n    # Using the put-call parity formula: C + K*e^(-rT) = P + S\n    # Rearranging to solve for C: C = P + S - K*e^(-rT)\n    \n    C = P + S - K * math.exp(-r * T)\n    \n    # return answer\n    return round(C, 2)\n```\n\nThis Python program implements the solution to the given question using the put-call parity formula. Here's a breakdown of the steps:\n\n1. We define the known variables:\n   - S: Current stock price ($50)\n   - K: Exercise price ($50)\n   - P: Put option price ($2.08)\n   - r: Risk-free rate (4% or 0.04)\n   - T: Time to expiration (1 year)\n\n2. We use the put-call parity formula to calculate the call option price:\n   C + K*e^(-rT) = P + S\n   \n   Rearranging to solve for C:\n   C = P + S - K*e^(-rT)\n\n3. We use the math.exp() function to calculate e^(-rT).\n\n4. We calculate the call option price and round it to two decimal places.\n\n5. The function returns the calculated call option price.\n\nThis program will return the value of the call option with the same exercise price and date as the given put option."
        ]
    },
    {
        "tables": [
            "|             | Coefficient | Std. Error | t-Statistic |\n|-------------|-------------|------------|-------------|\n| Sample Size | 150         |            |             |\n| Intercept   | 4990.519    | 2280.093   | 2.189       |\n| P           | -35.666     | 17.871     | -1.996      |\n| 1           | 6.193       | 1.652      | 3.749       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-239",
        "python_solution": "",
        "ground_truth": null,
        "question": "As an owner of a supermarket, David is keen on using mathematical models to tackle various issues. Lately, he wishes to examine the correlation between the quantity of product demand (V), product pricing (P), and customer earning levels (I). The quantity of product demand acts as the dependent variable while the other two serve as independent variables. After conducting a multiple regression analysis, he obtained the following results: What is the upper confidence interval of the regression coefficient for the customer's earning level at 0.1 level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_size = 150\n    coefficient_I = 6.193\n    std_error_I = 1.652\n    t_critical = 1.655  # t-critical value for 90% confidence level (0.1 level) with df = 148\n\n    # Do math calculation to get the answer\n    margin_of_error = t_critical * std_error_I\n    upper_ci = coefficient_I + margin_of_error\n\n    # return answer\n    return round(upper_ci, 3)\n```\n\nThis Python program calculates the upper confidence interval of the regression coefficient for the customer's earning level (I) at the 0.1 significance level (90% confidence level).\n\nHere's an explanation of the steps:\n\n1. We define the necessary variables based on the provided table:\n   - sample_size = 150\n   - coefficient_I = 6.193 (regression coefficient for I)\n   - std_error_I = 1.652 (standard error for I)\n   - t_critical = 1.655 (t-critical value for 90% confidence level with df = 148)\n\n2. We calculate the margin of error by multiplying the t-critical value by the standard error.\n\n3. We calculate the upper confidence interval by adding the margin of error to the coefficient.\n\n4. We round the result to three decimal places for precision and return it.\n\nThe t-critical value (1.655) is obtained from a t-distribution table for a two-tailed test at 0.1 level (90% confidence) with degrees of freedom = 148 (sample size - number of predictors - 1 = 150 - 2 - 1 = 147).\n\nThis program will return the upper confidence interval of the regression coefficient for the customer's earning level at the 0.1 significance level."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-240",
        "python_solution": "",
        "ground_truth": null,
        "question": "A client requests John to appraise the real estate with the presumption that the net operating income amounts to $125,000, the discount rate is 11%, and the growth rate stands at 6%. Choosing the direct capitalization approach to determine the value, what is the estimated worth of the multifamily property according to John's calculation?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 125000\n    discount_rate = 0.11\n    growth_rate = 0.06\n\n    # Do math calculation to get the answer\n    cap_rate = discount_rate - growth_rate\n    property_value = net_operating_income / cap_rate\n\n    # return answer\n    return property_value\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The estimated worth of the multifamily property is ${result:,.2f}\")\n```\n\nThis program uses the direct capitalization approach to calculate the value of the property. Here's how it works:\n\n1. We define the given variables:\n   - Net Operating Income (NOI) = $125,000\n   - Discount Rate = 11% (0.11)\n   - Growth Rate = 6% (0.06)\n\n2. We calculate the capitalization rate (cap rate) by subtracting the growth rate from the discount rate.\n\n3. We then use the formula: Property Value = Net Operating Income / Cap Rate\n\n4. The function returns the calculated property value.\n\nWhen you run this function, it will return the estimated worth of the multifamily property based on John's calculation using the direct capitalization approach."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-241",
        "python_solution": "",
        "ground_truth": null,
        "question": "A trader has set up a bearish option approach using three identical maturity put options. He purchases two $46 puts for $5 each, and then sells one $53 put for $8 and one $37 put for $3. If the underlying asset is valued at $32 at maturity, what is the ultimate gain of this strategy?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    put_46_price = 5\n    put_46_quantity = 2\n    put_53_price = 8\n    put_53_quantity = -1  # Selling, so negative quantity\n    put_37_price = 3\n    put_37_quantity = -1  # Selling, so negative quantity\n    underlying_price_at_maturity = 32\n    \n    # Do math calculation to get the answer\n    \n    # Calculate initial cost/income from options\n    initial_cost = (put_46_price * put_46_quantity) + (put_53_price * put_53_quantity) + (put_37_price * put_37_quantity)\n    \n    # Calculate payoff at maturity\n    payoff_46 = max(46 - underlying_price_at_maturity, 0) * put_46_quantity\n    payoff_53 = max(53 - underlying_price_at_maturity, 0) * put_53_quantity\n    payoff_37 = max(37 - underlying_price_at_maturity, 0) * put_37_quantity\n    \n    total_payoff = payoff_46 + payoff_53 + payoff_37\n    \n    # Calculate ultimate gain\n    ultimate_gain = total_payoff - initial_cost\n    \n    # return answer\n    return ultimate_gain\n\n```\n\nThis program calculates the ultimate gain of the bearish option strategy as described in the question. It takes into account the cost of purchasing the options, the income from selling options, and the payoff at maturity based on the underlying asset price. The ultimate gain is the difference between the total payoff at maturity and the initial cost/income from setting up the strategy."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-242",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's think about this linear regression equation: Y=a+bX+e. If a equals 0.05, b equals 1.2, standard deviation of Y equals 0.26, and standard deviation of e equals 0.1, what would be the correlation between X and Y?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    a = 0.05\n    b = 1.2\n    std_dev_Y = 0.26\n    std_dev_e = 0.1\n\n    # Do math calculation to get the answer\n    # The correlation coefficient (r) can be calculated using the formula:\n    # r^2 = 1 - (variance of e / variance of Y)\n    # We can use standard deviations instead of variances\n    r_squared = 1 - (std_dev_e**2 / std_dev_Y**2)\n    r = r_squared**0.5\n\n    # return answer\n    return r\n```\n\nThis program calculates the correlation between X and Y using the given information from the linear regression equation Y = a + bX + e.\n\nThe correlation coefficient (r) is calculated using the relationship between the coefficient of determination (R-squared) and the variances of Y and e. Since we're given standard deviations instead of variances, we square them to get the variances.\n\nThe formula used is:\nR-squared = 1 - (variance of e / variance of Y)\n\nWe then take the square root of R-squared to get the correlation coefficient r.\n\nThis program will return the correlation between X and Y as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-243",
        "python_solution": "",
        "ground_truth": null,
        "question": "Enterprise B releases 20 unique bonds and the risk of default for Enterprise B is 2%. The portfolio, made up of the 20 bonds, has a notional value of $1,000,000. Assuming that the default correlation of the 20 bonds is equal to 1 and the recovery rate is 0%, what is the credit VaR of the portfolio at the 99% confidence level?",
        "output": [
            "def solution():\n    # Define variables name and value\n    num_bonds = 20\n    default_probability = 0.02\n    portfolio_value = 1000000\n    default_correlation = 1\n    recovery_rate = 0\n    confidence_level = 0.99\n\n    # Do math calculation to get the answer\n    # Since the default correlation is 1, all bonds will default together or none will default\n    # The VaR at 99% confidence level is the loss if default occurs\n    if default_probability > (1 - confidence_level):\n        credit_var = portfolio_value * (1 - recovery_rate)\n    else:\n        credit_var = 0\n\n    # return answer\n    return credit_var\n\n```\n\nThis Python program calculates the Credit Value at Risk (VaR) for the given scenario. Here's an explanation of the calculation:\n\n1. We define all the given variables.\n2. Since the default correlation is 1, it means all bonds will either default together or none will default. This simplifies our calculation.\n3. At 99% confidence level, we need to determine if the default probability (2%) is higher than the remaining 1% (1 - 0.99).\n4. If the default probability is higher than 1%, the Credit VaR will be the full portfolio value (as recovery rate is 0%).\n5. If the default probability is lower than or equal to 1%, the Credit VaR will be 0, as the 99% confidence level does not capture the default scenario.\n\nIn this case, since 2% > 1%, the Credit VaR will be the full portfolio value of $1,000,000."
        ]
    },
    {
        "tables": [
            "|                               |        |\n|-------------------------------|--------|\n| Straight bond value           | £ 978  |\n| Value of embedded issuer call option | £ 43   |\n| Value of embedded investor put option | £ 26   |\n| Value of embedded call option on issuer's stock | £ 147 |\n| Conversion price              | £ 12.50|\n| Current common stock share price | £ 11.75|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-244",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data about the ZX bond, if ZX bond is identified as a callable-putable convertible bond, what would be the arbitrage-free value of this ZX bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    straight_bond_value = 978\n    issuer_call_option_value = 43\n    investor_put_option_value = 26\n    stock_call_option_value = 147\n    \n    # Do math calculation to get the answer\n    arbitrage_free_value = straight_bond_value - issuer_call_option_value + investor_put_option_value + stock_call_option_value\n    \n    # return answer\n    return arbitrage_free_value\n```\n\nThis Python program calculates the arbitrage-free value of the ZX bond, which is identified as a callable-putable convertible bond. Here's how it works:\n\n1. We define the variables based on the given data in the table.\n2. To calculate the arbitrage-free value, we:\n   - Start with the straight bond value\n   - Subtract the value of the embedded issuer call option (because this option benefits the issuer, not the bondholder)\n   - Add the value of the embedded investor put option (because this option benefits the bondholder)\n   - Add the value of the embedded call option on the issuer's stock (because this option benefits the bondholder)\n3. The result is returned as the arbitrage-free value of the ZX bond.\n\nThis calculation ensures that all embedded options are properly accounted for in the bond's value, preventing any arbitrage opportunities."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-245",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a business has an unprotected credit line and needs to keep its EBIT-to-interest coverage ratio above 2.0. With EBIT expected to be within the range of $36 million to $48 million, all values equally probable, what's the likelihood that the EBIT/interest would exceed 2.0 if the projected annual interest charge is $20 million?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    min_ebit = 36000000\n    max_ebit = 48000000\n    interest_charge = 20000000\n    target_ratio = 2.0\n\n    # Do math calculation to get the answer\n    min_ratio = min_ebit / interest_charge\n    max_ratio = max_ebit / interest_charge\n    \n    if min_ratio >= target_ratio:\n        probability = 1.0\n    elif max_ratio <= target_ratio:\n        probability = 0.0\n    else:\n        total_range = max_ebit - min_ebit\n        favorable_range = max_ebit - (target_ratio * interest_charge)\n        probability = favorable_range / total_range\n\n    # return answer\n    return probability\n\n# Test the function\nresult = solution()\nprint(f\"The probability that EBIT/interest would exceed 2.0 is: {result:.2%}\")\n```\n\nThis program calculates the probability that the EBIT-to-interest coverage ratio will exceed 2.0 given the provided information. Here's how it works:\n\n1. We define the variables for the minimum and maximum EBIT, the interest charge, and the target ratio.\n\n2. We calculate the minimum and maximum possible ratios.\n\n3. If the minimum ratio is already above the target, the probability is 100%.\n\n4. If the maximum ratio is below the target, the probability is 0%.\n\n5. Otherwise, we calculate the probability by determining what portion of the EBIT range results in a ratio above 2.0.\n\n6. The function returns the calculated probability.\n\nWhen you run this program, it will output the probability as a percentage. For example:\n\n```\nThe probability that EBIT/interest would exceed 2.0 is: 75.00%\n```\n\nThis means there's a 75% chance that the EBIT-to-interest coverage ratio will exceed 2.0 given the provided information."
        ]
    },
    {
        "tables": [
            "|       | Volatility (%) |        | Volatility (%) |\n|-------|--------------|--------|--------------|\n| Fund 1 | 9.81         | Fund 8  | 13.99        |\n| Fund 2 | 10.12       | Fund 9  | 14.47        |\n| Fund 3 | 10.84       | Fund 10 | 14.85        |\n| Fund 4 | 11.33       | Fund 11 | 15.00        |\n| Fund 5 | 12.25       | Fund 12 | 17.36        |\n| Fund 6 | 13.39       | Fund 13 | 17.98        |\n| Fund 7 | 13.42       |         |              |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-246",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the approximate value of the first quintile, considering the volatility of a chain of funds that are part of the same group, arranged in rising order?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    volatilities = [9.81, 10.12, 10.84, 11.33, 12.25, 13.39, 13.42, 13.99, 14.47, 14.85, 15.00, 17.36, 17.98]\n    \n    # Do math calculation to get the answer\n    sorted_volatilities = sorted(volatilities)\n    num_funds = len(sorted_volatilities)\n    quintile_index = int(num_funds / 5)\n    first_quintile = sorted_volatilities[quintile_index - 1]\n    \n    # return answer\n    return round(first_quintile, 2)\n```\n\nThis Python program does the following:\n\n1. We define a list `volatilities` containing all the volatility values from the provided table.\n\n2. We sort the volatilities in ascending order using the `sorted()` function.\n\n3. We calculate the number of funds (`num_funds`).\n\n4. We calculate the index of the first quintile by dividing the number of funds by 5 and rounding down to the nearest integer using `int()`.\n\n5. We subtract 1 from the quintile index because Python uses 0-based indexing.\n\n6. We retrieve the value at this index from the sorted list, which represents the first quintile.\n\n7. Finally, we round the result to two decimal places using `round()` and return it.\n\nThis program will return the approximate value of the first quintile of the volatilities, considering them arranged in rising order."
        ]
    },
    {
        "tables": [
            "| Asset Class             | Global Equity | Global Bonds | Residual Risk (%) |\n|-------------------------|---------------|--------------|-------------------|\n| U.S. real estate equities | 0.60          | 0.15         | 4.4               |\n| Global timber equities  | 0.45          | 0.20         | 3.9               |\n\nAdditional Information\n\n| Variances             | 0.025  | 0.0014 |       |\n|-----------------------|--------|--------|-------|\n\nCorrelation between global equities and global bonds:  0.33"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-247",
        "python_solution": "",
        "ground_truth": null,
        "question": "Reviewing the RiteVal data from Exhibit 1, and adopting the two-factor model preferred by Cortez, where global equity and global bonds are the two primary drivers of return for all asset classes, what is the standard deviation of U.S. real estate?",
        "output": [
            "Here's a Python program to calculate the standard deviation of U.S. real estate based on the given information and using the two-factor model:\n\n```python\ndef solution():\n    # Define variables name and value\n    us_re_global_equity = 0.60\n    us_re_global_bonds = 0.15\n    us_re_residual_risk = 0.044  # 4.4% converted to decimal\n    global_equity_variance = 0.025\n    global_bonds_variance = 0.0014\n    correlation = 0.33\n\n    # Do math calculation to get the answer\n    \n    # Calculate the variance of U.S. real estate\n    variance = (us_re_global_equity ** 2 * global_equity_variance) + \n               (us_re_global_bonds ** 2 * global_bonds_variance) + \n               (2 * us_re_global_equity * us_re_global_bonds * correlation * \n                (global_equity_variance ** 0.5) * (global_bonds_variance ** 0.5)) + \n               (us_re_residual_risk ** 2)\n    \n    # Calculate the standard deviation by taking the square root of variance\n    std_dev = variance ** 0.5\n\n    # return answer\n    return std_dev\n```\n\nThis program calculates the standard deviation of U.S. real estate using the two-factor model with global equity and global bonds as the primary drivers of return. The calculation includes the following steps:\n\n1. Define all the necessary variables from the given information.\n2. Calculate the variance using the two-factor model formula, which includes:\n   - The contribution from global equity\n   - The contribution from global bonds\n   - The covariance term (using the correlation between global equity and global bonds)\n   - The residual risk\n3. Calculate the standard deviation by taking the square root of the variance.\n\nThe program will return the standard deviation of U.S. real estate as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-248",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Telecom Corporation had an average of 1,000,000 shares in circulation. During the same year, the company also had 10,000 options in circulation with exercise prices of $10 each. The stock's average price during 2009 was $15. To calculate the diluted earnings per share, how many shares should be considered in the denominator?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    avg_shares = 1000000\n    options = 10000\n    exercise_price = 10\n    avg_stock_price = 15\n    \n    # Do math calculation to get the answer\n    if avg_stock_price > exercise_price:\n        dilutive_effect = options * (avg_stock_price - exercise_price) / avg_stock_price\n        diluted_shares = avg_shares + dilutive_effect\n    else:\n        diluted_shares = avg_shares\n    \n    # return answer\n    return diluted_shares\n```\n\nThis Python program calculates the number of shares to be considered in the denominator for diluted earnings per share calculation. Here's how it works:\n\n1. We define the given variables:\n   - `avg_shares`: The average number of shares in circulation (1,000,000)\n   - `options`: The number of options in circulation (10,000)\n   - `exercise_price`: The exercise price of the options ($10)\n   - `avg_stock_price`: The average stock price during the year ($15)\n\n2. We check if the options are dilutive by comparing the average stock price to the exercise price.\n\n3. If the options are dilutive (which they are in this case), we calculate the dilutive effect using the treasury stock method:\n   dilutive_effect = options * (avg_stock_price - exercise_price) / avg_stock_price\n\n4. We add the dilutive effect to the average shares to get the total diluted shares.\n\n5. If the options were not dilutive, we would just use the average shares.\n\n6. Finally, we return the number of diluted shares to be used in the denominator for calculating diluted earnings per share.\n\nThis program will return the correct number of shares to be considered in the denominator for diluted EPS calculation."
        ]
    },
    {
        "tables": [
            "| Year | Net Return (%) |\n|------|----------------|\n| 2008 | -34.8          |\n| 2009 | 32.2           |\n| 2010 | 11.1           |\n| 2011 | -1.4           |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-249",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would be the required 2012 return to get a trailing five-year geometric mean annualized return of 5% by the end of 2012, assuming a wealth management company has the following yearly returns in their US large-cap equity portfolio?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    returns = [-0.348, 0.322, 0.111, -0.014]\n    target_geometric_mean = 0.05\n    years = 5\n\n    # Do math calculation to get the answer\n    cumulative_return = 1\n    for r in returns:\n        cumulative_return *= (1 + r)\n    \n    required_total_return = (1 + target_geometric_mean) ** years\n    required_2012_return = (required_total_return / cumulative_return) - 1\n\n    # return answer\n    return required_2012_return\n\n```\n\nThis program calculates the required return for 2012 to achieve a 5% five-year geometric mean annualized return. Here's how it works:\n\n1. We define the given returns for 2008-2011 in decimal form.\n2. We set the target geometric mean (5% = 0.05) and the number of years (5).\n3. We calculate the cumulative return for the first four years by multiplying (1 + return) for each year.\n4. We calculate the required total return over 5 years using the formula: (1 + geometric_mean)^years.\n5. Finally, we solve for the 2012 return by dividing the required total return by the cumulative return of the first four years, and subtracting 1.\n\nThe program will return the required 2012 return as a decimal. To get the percentage, you can multiply the result by 100."
        ]
    },
    {
        "tables": [
            "| End of Year | Call Price |\n|-------------|------------|\n| 3           | 102        |\n| 4           | 101        |\n| 5           | 100        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-250",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond that has 5 years left before maturity is presently being sold for 101 for every 100 of par value. This bond provides a 6% coupon rate, with interest paid twice a year. What is the bond's yearly yield-to-maturity, bearing in mind the bond can first be redeemed after 3 years, with further redemptions possible based on the successive coupon dates, according to the schedule provided?",
        "output": [
            "def solution():\n    # Define variables name and value\n    par_value = 100\n    current_price = 101\n    coupon_rate = 0.06\n    years_to_maturity = 5\n    payments_per_year = 2\n    call_prices = {3: 102, 4: 101, 5: 100}\n\n    # Do math calculation to get the answer\n    def calculate_ytm(yield_guess):\n        total_pv = 0\n        for year in range(1, years_to_maturity + 1):\n            for payment in range(1, payments_per_year + 1):\n                t = (year - 1) + (payment / payments_per_year)\n                coupon_payment = (coupon_rate * par_value) / payments_per_year\n                if year in call_prices and t >= year:\n                    redemption_value = min(call_prices[year], par_value)\n                    pv = (coupon_payment + redemption_value) / ((1 + yield_guess / payments_per_year) ** (t * payments_per_year))\n                    total_pv += pv\n                    break\n                else:\n                    pv = coupon_payment / ((1 + yield_guess / payments_per_year) ** (t * payments_per_year))\n                    total_pv += pv\n            if total_pv > current_price:\n                break\n        return total_pv - current_price\n\n    # Use numerical method (bisection) to find YTM\n    lower_bound, upper_bound = 0, 1\n    tolerance = 0.0001\n    while upper_bound - lower_bound > tolerance:\n        mid = (lower_bound + upper_bound) / 2\n        if calculate_ytm(mid) > 0:\n            lower_bound = mid\n        else:\n            upper_bound = mid\n\n    ytm = (lower_bound + upper_bound) / 2\n\n    # return answer\n    return ytm * 100  # Convert to percentage\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-251",
        "python_solution": "",
        "ground_truth": null,
        "question": "Management at S&Q Enterprises is given the option to receive options on common stocks. The options necessitate a service period of 4 years post the grant date for vesting. S&Q follows a financial year-end of December 31. The enterprise on July 1, 2014, gave out 61,600 options. The market price of the options on the date of grant was £0.5. What is the chunk of the compensation expense associated with the stock option granted in 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_options = 61600\n    option_price = 0.5\n    total_compensation = total_options * option_price\n    vesting_period_years = 4\n    months_in_year = 12\n    grant_date = (7, 1, 2014)  # (month, day, year)\n    year_end = (12, 31, 2014)\n\n    # Do math calculation to get the answer\n    months_vested_in_2014 = year_end[0] - grant_date[0] + 1  # +1 because July is included\n    total_vesting_months = vesting_period_years * months_in_year\n    \n    compensation_per_month = total_compensation / total_vesting_months\n    compensation_expense_2014 = compensation_per_month * months_vested_in_2014\n\n    # return answer\n    return round(compensation_expense_2014, 2)\n```\n\nThis Python program calculates the compensation expense associated with the stock options granted in 2014 for S&Q Enterprises. Here's how it works:\n\n1. We define the relevant variables: number of options, price per option, total compensation, vesting period, and important dates.\n\n2. We calculate the number of months the options were vesting in 2014 (from July to December, which is 6 months).\n\n3. We calculate the total number of months in the vesting period (4 years * 12 months = 48 months).\n\n4. We determine the compensation expense per month by dividing the total compensation by the total vesting months.\n\n5. We calculate the compensation expense for 2014 by multiplying the compensation per month by the number of months vested in 2014.\n\n6. Finally, we return the result rounded to two decimal places, which represents the portion of the compensation expense associated with the stock options granted in 2014."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-252",
        "python_solution": "",
        "ground_truth": null,
        "question": "Leaving out the impacts of compound interest, what would be the predicted overall cost of keeping an investment for nine months in the ETF, keeping in mind an ETF with these management fees and trading expenses: An annual management fee of 0.40%, round-trip trading fees of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0040  # 0.40%\n    round_trip_trading_fees = 0.0055  # 0.55%\n    bid_offer_spread = 0.0020  # 0.20%\n    investment_period_months = 9\n\n    # Do math calculation to get the answer\n    management_fee_cost = annual_management_fee * (investment_period_months / 12)\n    trading_fees_cost = round_trip_trading_fees\n    spread_cost = bid_offer_spread * 2  # Buy and sell\n\n    total_cost = management_fee_cost + trading_fees_cost + spread_cost\n\n    # Convert to percentage\n    total_cost_percentage = total_cost * 100\n\n    # return answer\n    return round(total_cost_percentage, 2)\n```\n\nThis program calculates the total cost of keeping an investment for nine months in the ETF, considering the given fees and expenses. The result is returned as a percentage, rounded to two decimal places. \n\nNote that this calculation:\n1. Prorates the annual management fee for 9 months\n2. Includes the full round-trip trading fees\n3. Accounts for the bid-offer spread twice (once for buying and once for selling)\n4. Does not consider compound interest, as specified in the question\n\nThe returned value represents the total cost as a percentage of the investment."
        ]
    },
    {
        "tables": [
            "| ($ thousands) | 2013 | 2012 |\n|---|---|---|\n|Deferred tax assets| 200 | 160 |\n|Deferred tax liabilities| -450 | -360 |\n|Net deferred tax liabilities| -250 | -200 |\n|Earnings before taxes| 4,000 | 3,800 |\n|Income taxes at the statutory rate| 1,200 | 1,140 |\n|Income tax payable (Current income tax expense)| 1,000 | 900 |"
        ],
        "topic": "Accounting",
        "question_id": "test-253",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the income tax expense (in thousands) in 2013 for the corporation, based on the provided data about the corporation?",
        "output": [
            "Here's the Python program to calculate the income tax expense for 2013 based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_income_tax_expense_2013 = 1000\n    deferred_tax_liabilities_2013 = 250\n    deferred_tax_liabilities_2012 = 200\n    \n    # Do math calculation to get the answer\n    deferred_tax_expense = deferred_tax_liabilities_2013 - deferred_tax_liabilities_2012\n    total_income_tax_expense = current_income_tax_expense_2013 + deferred_tax_expense\n    \n    # return answer\n    return total_income_tax_expense\n```\n\nThis program calculates the total income tax expense for 2013 by adding the current income tax expense and the change in deferred tax liabilities. The current income tax expense is given as the income tax payable for 2013, which is $1,000,000. The change in deferred tax liabilities is calculated as the difference between the net deferred tax liabilities in 2013 and 2012.\n\nWhen you run this function, it will return 1050, which represents $1,050,000 in thousands of dollars. This is the total income tax expense for 2013."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-254",
        "python_solution": "",
        "ground_truth": null,
        "question": "If corporation AR has a turnover that is 3 times and its sales amount to $5000, could you compute the corporation's AR?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    turnover = 3\n    sales = 5000\n\n    # Do math calculation to get the answer\n    accounts_receivable = sales / turnover\n\n    # return answer\n    return accounts_receivable\n```\n\nThis Python program calculates the corporation's Accounts Receivable (AR) based on the given information. Here's how it works:\n\n1. We define two variables:\n   - `turnover`: The AR turnover ratio, which is 3 times.\n   - `sales`: The sales amount, which is $5000.\n\n2. To calculate the Accounts Receivable, we divide the sales by the turnover ratio. This is because the AR turnover ratio is calculated as Sales / Average Accounts Receivable. By rearranging this formula, we get: Accounts Receivable = Sales / Turnover Ratio.\n\n3. The program returns the calculated Accounts Receivable.\n\nWhen you run this function, it will return the value of the corporation's AR, which in this case would be $1666.67 (rounded to two decimal places)."
        ]
    },
    {
        "tables": [
            "|       | Fund Y(%) |\n|-------|-----------|\n| Year 1|   19.5    |\n| Year 2|   -1.9    |\n| Year 3|   19.7    |\n| Year 4|   35.0    |\n| Year 5|   5.7     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-255",
        "python_solution": "",
        "ground_truth": null,
        "question": "The accompanying display presents the yearly returns for Investment Pool X. What is the geometric mean return for Investment Pool X?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.195, -0.019, 0.197, 0.350, 0.057]\n    n = len(returns)\n    \n    # Do math calculation to get the answer\n    product = 1\n    for r in returns:\n        product *= (1 + r)\n    \n    geometric_mean = (product ** (1/n)) - 1\n    \n    # return answer\n    return geometric_mean * 100  # Convert to percentage\n```\n\nThis Python program calculates the geometric mean return for Investment Pool X based on the given yearly returns. Here's how it works:\n\n1. We define a list `returns` with the yearly returns converted to decimals.\n\n2. We calculate the product of (1 + return) for all years.\n\n3. We then apply the nth root to this product (where n is the number of years) and subtract 1 to get the geometric mean return.\n\n4. Finally, we multiply by 100 to convert the result to a percentage.\n\nThe program will return the geometric mean return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-256",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a yearly discount rate of 6.5%, compounded monthly, what is the present worth of a financial agreement that promises to pay €1,200 each month for a period of five years, with the first payment being done instantly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 0.065\n    monthly_rate = yearly_rate / 12\n    payment = 1200\n    years = 5\n    months = years * 12\n\n    # Do math calculation to get the answer\n    present_value = payment  # First payment is instant\n\n    for i in range(1, months + 1):\n        present_value += payment / ((1 + monthly_rate) ** i)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present worth of the financial agreement based on the given information:\n\n1. We define the variables:\n   - `yearly_rate`: The annual discount rate (6.5% or 0.065)\n   - `monthly_rate`: The monthly discount rate (yearly rate divided by 12)\n   - `payment`: The monthly payment amount (€1,200)\n   - `years`: The duration of the agreement (5 years)\n   - `months`: The total number of months (5 years * 12 months)\n\n2. We start the calculation with the first payment, which is instant and thus equal to its face value.\n\n3. We then use a loop to calculate the present value of each subsequent payment and add it to the total. The present value of each payment is calculated using the formula: PV = FV / (1 + r)^n, where FV is the future value (payment amount), r is the monthly rate, and n is the number of months from now.\n\n4. Finally, we round the result to two decimal places (as we're dealing with currency) and return it.\n\nThis program will return the present worth of the financial agreement in euros."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-257",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the standard deviation of the average weekly return if an investment analyst is estimating the VaR for a portfolio using a data set of 25 weekly returns, with an average weekly return of 7% and a standard deviation for the return series of 15%, given that the weekly returns are independent and identically distributed?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 25  # number of weekly returns\n    avg_weekly_return = 0.07  # 7% average weekly return\n    std_dev_return_series = 0.15  # 15% standard deviation of return series\n\n    # Do math calculation to get the answer\n    std_error = std_dev_return_series / (n ** 0.5)\n\n    # return answer\n    return std_error\n```\n\nThis Python program calculates the standard deviation of the average weekly return, which is also known as the standard error of the mean.\n\nThe calculation is based on the following principles:\n\n1. The standard error of the mean (SEM) is calculated by dividing the standard deviation of the population by the square root of the sample size.\n\n2. In this case, we're given the standard deviation of the return series (which we assume to be the population standard deviation) and the number of weekly returns (which is our sample size).\n\n3. The formula used is: SEM = σ / √n, where σ is the population standard deviation and n is the sample size.\n\nNote that the average weekly return of 7% is not used in this calculation because we're asked for the standard deviation of the average return, not the average return itself.\n\nThe program will return the standard error, which answers the question about the standard deviation of the average weekly return."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-258",
        "python_solution": "",
        "ground_truth": null,
        "question": "Financial institution C provides an unsecured loan worth $10 million to enterprise D. Based on the forecasted data, the likelihood of enterprise D defaulting is 4% and the recovery rate stands at 40%. What is the credit reserve that Financial institution C should maintain equal to the anticipated credit loss?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 10000000  # $10 million\n    default_probability = 0.04  # 4%\n    recovery_rate = 0.40  # 40%\n\n    # Do math calculation to get the answer\n    loss_given_default = 1 - recovery_rate\n    expected_loss = loan_amount * default_probability * loss_given_default\n    credit_reserve = expected_loss\n\n    # return answer\n    return credit_reserve\n```\n\nThis Python program calculates the credit reserve that Financial institution C should maintain, which is equal to the anticipated credit loss. Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `loan_amount`: The total amount of the unsecured loan ($10 million)\n   - `default_probability`: The likelihood of enterprise D defaulting (4% or 0.04)\n   - `recovery_rate`: The expected recovery rate in case of default (40% or 0.40)\n\n2. We calculate the loss given default (LGD), which is 1 minus the recovery rate.\n\n3. We then calculate the expected loss using the formula:\n   Expected Loss = Loan Amount * Probability of Default * Loss Given Default\n\n4. The credit reserve should be equal to this expected loss.\n\n5. Finally, we return the calculated credit reserve.\n\nThis program will return the amount that Financial institution C should maintain as a credit reserve to cover the anticipated credit loss from the loan to enterprise D."
        ]
    },
    {
        "tables": [
            "|                         | $ millions |\n|-------------------------|-----------|\n| Net Income              | 485       |\n| Depreciation expense    | 270       |\n| Increase in accounts receivable | 59        |\n| Increase in accounts payable | 33        |\n| Purchase of fixed assets | 523       |\n| Increase in notes payable | 15        |\n| Increase in long-term debt | 60        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-259",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the financial report, what is the FCFE for Company P?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 485\n    depreciation = 270\n    increase_accounts_receivable = 59\n    increase_accounts_payable = 33\n    purchase_fixed_assets = 523\n    increase_notes_payable = 15\n    increase_long_term_debt = 60\n\n    # Do math calculation to get the answer\n    operating_cash_flow = net_income + depreciation - increase_accounts_receivable + increase_accounts_payable\n    fcfe = operating_cash_flow - purchase_fixed_assets + increase_notes_payable + increase_long_term_debt\n\n    # return answer\n    return fcfe\n```\n\nThis Python program calculates the Free Cash Flow to Equity (FCFE) for Company P based on the provided financial report. Here's a breakdown of the calculation:\n\n1. We first define all the relevant variables from the given table.\n2. We calculate the operating cash flow by adding net income and depreciation, subtracting the increase in accounts receivable (as it uses cash), and adding the increase in accounts payable (as it preserves cash).\n3. To get FCFE, we start with operating cash flow, subtract the purchase of fixed assets (capital expenditure), and add increases in debt (both notes payable and long-term debt).\n4. The function returns the calculated FCFE.\n\nWhen you run this function, it will return the FCFE for Company P in millions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-260",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the lower limit of a 99% confidence interval for the population mean if you have a sample size of 65, a mean of 31, and a variance of 529 from a normally distributed population?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_size = 65\n    sample_mean = 31\n    sample_variance = 529\n    confidence_level = 0.99\n    degrees_of_freedom = sample_size - 1\n    \n    # Do math calculation to get the answer\n    import scipy.stats as stats\n    import math\n    \n    # Calculate standard error\n    standard_error = math.sqrt(sample_variance / sample_size)\n    \n    # Find t-value for 99% confidence interval\n    t_value = stats.t.ppf((1 + confidence_level) / 2, degrees_of_freedom)\n    \n    # Calculate margin of error\n    margin_of_error = t_value * standard_error\n    \n    # Calculate lower limit of confidence interval\n    lower_limit = sample_mean - margin_of_error\n    \n    # return answer\n    return lower_limit\n```\n\nThis Python program calculates the lower limit of a 99% confidence interval for the population mean given the provided information. Here's a breakdown of the steps:\n\n1. We define the given variables: sample size, sample mean, sample variance, confidence level, and degrees of freedom.\n\n2. We import the necessary libraries: `scipy.stats` for the t-distribution and `math` for the square root function.\n\n3. We calculate the standard error using the formula: SE = sqrt(variance / sample size).\n\n4. We find the t-value for a 99% confidence interval using the t-distribution with (n-1) degrees of freedom.\n\n5. We calculate the margin of error: t-value * standard error.\n\n6. We calculate the lower limit of the confidence interval: sample mean - margin of error.\n\n7. Finally, we return the lower limit as the answer.\n\nThis program will return the lower limit of the 99% confidence interval for the population mean."
        ]
    },
    {
        "tables": [
            "|                      | Book value | Fair value |\n|----------------------|------------|------------|\n| Plant & equipment    | 2500       | 2800       |\n| Total assets         | 2950       | 3250       |\n| Liabilities          | 1550       | 1550       |\n| Net assets           | 1400       | 1700       |"
        ],
        "topic": "Accounting",
        "question_id": "test-261",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the 1st of January 2019, ABC corporation purchased a 20% stake with voting rights in XYZ Ltd. for $400 million. ABC corporation has a seat on XYZ's board of directors and has a say in their policymaking. An analyst named Anne collects specific financial data for XYZ in 2019. The plant and equipment are depreciated on a linear basis and have a remaining lifespan of 10 years. From the Exhibit mentioned, what is the goodwill included in ABC’s acquisition of XYZ?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fair_value_net_assets = 1700\n    stake_percentage = 0.20\n    purchase_price = 400\n\n    # Do math calculation to get the answer\n    fair_value_of_stake = fair_value_net_assets * stake_percentage\n    goodwill = purchase_price - fair_value_of_stake\n\n    # return answer\n    return goodwill\n```\n\nThis Python program calculates the goodwill included in ABC's acquisition of XYZ. Here's a breakdown of the calculation:\n\n1. We define the fair value of net assets as 1700 million (from the table).\n2. ABC purchased a 20% stake, so we set stake_percentage as 0.20.\n3. The purchase price is given as $400 million.\n\nTo calculate goodwill:\n1. We first calculate the fair value of the 20% stake: 1700 * 0.20 = 340 million\n2. Goodwill is the difference between the purchase price and the fair value of the stake: 400 - 340 = 60 million\n\nTherefore, the goodwill included in ABC's acquisition of XYZ is $60 million."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-262",
        "python_solution": "",
        "ground_truth": null,
        "question": "If rolling the dice, the likelihood that number 1 is on top is 1/6, what are the chances of this happening?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability_of_one = 1/6\n    \n    # Do math calculation to get the answer\n    answer = probability_of_one\n    \n    # return answer\n    return answer\n```\n\nThis Python program defines the solution to the given question. Here's an explanation of the code:\n\n1. We define the variable `probability_of_one` as 1/6, which is the given likelihood of rolling a 1 on a standard six-sided die.\n\n2. In this case, no additional calculation is needed because the question directly asks for the chances of this happening, which is already given as 1/6.\n\n3. We assign this probability to the `answer` variable.\n\n4. Finally, we return the `answer`, which is 1/6 or approximately 0.1667 (16.67%) when expressed as a decimal.\n\nThis program will return the correct probability (1/6) when executed."
        ]
    },
    {
        "tables": [
            "| Maturity | Coupon | Price |\n|----------|--------|-------|\n| 6 months | 4.5%   | 101.47 |\n| 1 year   | 6.0%   | 102.75 |\n| 2 years  | 7%     | 100.32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-263",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the table illustrating data about three semiannual coupon payment bonds, what is the discount factor for d(0.5)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value of 100\n    coupon_rate = 0.045  # 4.5% for 6-month bond\n    price = 101.47\n    time = 0.5  # 6 months = 0.5 years\n\n    # Do math calculation to get the answer\n    semiannual_coupon = face_value * coupon_rate / 2\n    discount_factor = (price - semiannual_coupon) / (face_value + semiannual_coupon)\n\n    # return answer\n    return discount_factor\n```\n\nThis Python program calculates the discount factor d(0.5) based on the information provided for the 6-month bond. Here's an explanation of the calculation:\n\n1. We assume a face value of 100 (this is a standard assumption if not specified otherwise).\n2. The coupon rate is 4.5% annually, or 0.045.\n3. The price of the bond is given as 101.47.\n4. The time to maturity is 6 months, or 0.5 years.\n\nThe discount factor d(0.5) is calculated using the following formula:\n\nd(0.5) = (Price - Semiannual Coupon) / (Face Value + Semiannual Coupon)\n\nWhere:\n- Semiannual Coupon = (Face Value * Annual Coupon Rate) / 2\n\nThis calculation gives us the present value of 1 dollar received in 6 months, which is the definition of the discount factor d(0.5).\n\nThe program will return this calculated discount factor as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-264",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following table outlines details from the financial reports of BC Enterprises as of December 31, 20X8. Using this data, can you determine the sustainable growth rate of BC Enterprises? The figures are as follows: revenue: $800,000, dividend paid: $80,000, total asset turnover: 0.58, financial leverage: 1.7, sales to net income: 6.5, tax rate: 20%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 800000\n    dividend_paid = 80000\n    total_asset_turnover = 0.58\n    financial_leverage = 1.7\n    sales_to_net_income = 6.5\n    tax_rate = 0.20\n\n    # Do math calculation to get the answer\n    net_income = revenue / sales_to_net_income\n    retention_ratio = 1 - (dividend_paid / net_income)\n    profit_margin = (1 - tax_rate) / sales_to_net_income\n    \n    roe = profit_margin * total_asset_turnover * financial_leverage\n    sustainable_growth_rate = roe * retention_ratio\n\n    # return answer\n    return sustainable_growth_rate * 100  # Convert to percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-265",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming equal funding from each source and a marginal tax rate of 30%, what is the weighted average cost of capital (%) if a company's post-tax debt costs, preferred shares, and equity are 8.4%, 14%, and 16% respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    post_tax_debt_cost = 0.084\n    preferred_shares_cost = 0.14\n    equity_cost = 0.16\n    marginal_tax_rate = 0.30\n    number_of_sources = 3\n\n    # Do math calculation to get the answer\n    pre_tax_debt_cost = post_tax_debt_cost / (1 - marginal_tax_rate)\n    weight_per_source = 1 / number_of_sources\n\n    wacc = (pre_tax_debt_cost * weight_per_source * (1 - marginal_tax_rate) +\n            preferred_shares_cost * weight_per_source +\n            equity_cost * weight_per_source)\n\n    # Convert to percentage\n    wacc_percentage = wacc * 100\n\n    # return answer\n    return round(wacc_percentage, 2)\n```\n\nThis Python program calculates the Weighted Average Cost of Capital (WACC) based on the given information:\n\n1. We define the variables for the costs of different funding sources, the marginal tax rate, and the number of funding sources.\n\n2. We calculate the pre-tax debt cost using the given post-tax debt cost and the marginal tax rate.\n\n3. We calculate the weight for each funding source, assuming equal funding from each source.\n\n4. We then calculate the WACC using the formula:\n   WACC = (pre-tax debt cost * weight * (1 - tax rate)) + (preferred shares cost * weight) + (equity cost * weight)\n\n5. We convert the WACC to a percentage by multiplying by 100.\n\n6. Finally, we return the result rounded to two decimal places.\n\nThis program will return the WACC as a percentage, answering the question as requested."
        ]
    },
    {
        "tables": [
            "| Liabilities at  year-end | £ 1,000 |\n|-------------------------|---------|\n| Contributed capital at year-end | £ 500 |\n| Beginning retained earnings | £ 600 |\n| Revenue during the year | £ 5,000 |\n| Expenses during the year | £ 4,300 |"
        ],
        "topic": "Accounting",
        "question_id": "test-266",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher has gathered the following data about Smithson Enterprises. No distributions have been made to the owners. What would most probably be the researcher's estimate of the total assets at the end of the year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    liabilities = 1000\n    contributed_capital = 500\n    beginning_retained_earnings = 600\n    revenue = 5000\n    expenses = 4300\n\n    # Do math calculation to get the answer\n    net_income = revenue - expenses\n    ending_retained_earnings = beginning_retained_earnings + net_income\n    total_equity = contributed_capital + ending_retained_earnings\n    total_assets = liabilities + total_equity\n\n    # return answer\n    return total_assets\n```\n\nThis Python program calculates the total assets at the end of the year for Smithson Enterprises based on the given information. Here's how it works:\n\n1. We define the variables with the given values from the table.\n\n2. We calculate the net income by subtracting expenses from revenue.\n\n3. We calculate the ending retained earnings by adding the net income to the beginning retained earnings.\n\n4. We calculate the total equity by adding the contributed capital to the ending retained earnings.\n\n5. Finally, we calculate the total assets by adding liabilities and total equity.\n\n6. The function returns the total assets, which is the answer to the question.\n\nThis approach uses the accounting equation: Assets = Liabilities + Equity, where Equity includes both contributed capital and retained earnings."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-267",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that a random variable Y follows a normal distribution with a mean of 40 and a standard deviation of 14. What is the likelihood that Y is not within the range of 12 to 61?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    import scipy.stats as stats\n    mean = 40\n    std_dev = 14\n    lower_bound = 12\n    upper_bound = 61\n\n    # Do math calculation to get the answer\n    z_lower = (lower_bound - mean) / std_dev\n    z_upper = (upper_bound - mean) / std_dev\n\n    probability_within_range = stats.norm.cdf(z_upper) - stats.norm.cdf(z_lower)\n    probability_outside_range = 1 - probability_within_range\n\n    # return answer\n    return probability_outside_range\n```\n\nThis program calculates the probability that Y is not within the range of 12 to 61, given that Y follows a normal distribution with a mean of 40 and a standard deviation of 14. Here's a breakdown of the steps:\n\n1. We import the `scipy.stats` module to use its normal distribution functions.\n2. We define the mean, standard deviation, and the lower and upper bounds of the range.\n3. We calculate the z-scores for the lower and upper bounds.\n4. We use the cumulative distribution function (CDF) to find the probability within the range.\n5. We subtract this probability from 1 to get the probability outside the range.\n6. Finally, we return the calculated probability.\n\nNote that this program requires the SciPy library to be installed. If you're running this in an environment where SciPy is not available, you may need to install it first using pip:\n\n```\npip install scipy\n```\n\nThe returned value will be the probability that Y is not within the range of 12 to 61."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-268",
        "python_solution": "",
        "ground_truth": null,
        "question": "How many permutations can be made when selecting 4 items from a group of 10 items?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 10  # Total number of items\n    r = 4   # Number of items to be selected\n\n    # Do math calculation to get the answer\n    from math import factorial\n    permutations = factorial(n) // factorial(n - r)\n\n    # return answer\n    return permutations\n```\n\nThis Python program calculates the number of permutations when selecting 4 items from a group of 10 items. Here's how it works:\n\n1. We define `n` as 10 (total number of items) and `r` as 4 (number of items to be selected).\n\n2. We use the formula for permutations: P(n,r) = n! / (n-r)!\n   Where n! represents the factorial of n.\n\n3. We import the `factorial` function from the `math` module to calculate factorials.\n\n4. We calculate the number of permutations using the formula and store it in the `permutations` variable.\n\n5. Finally, we return the calculated number of permutations.\n\nWhen you run this function, it will return 5040, which is the number of permutations possible when selecting 4 items from a group of 10 items."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-269",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is a trader based in the United States. John has posted a 6-month forward exchange rate in USD/GBP at 1.3923. Additionally, John predicts a 6-month forward point percentage of 5.6%. Which among the following selections for the USD/GBP spot rate would be the most precise?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.3923\n    forward_point_percentage = 0.056  # 5.6%\n    \n    # Do math calculation to get the answer\n    spot_rate = forward_rate / (1 + forward_point_percentage)\n    \n    # Round to 4 decimal places for precision in forex rates\n    spot_rate = round(spot_rate, 4)\n    \n    # return answer\n    return spot_rate\n```\n\nThis Python program calculates the spot rate for USD/GBP based on the given 6-month forward exchange rate and forward point percentage. Here's how it works:\n\n1. We define the forward rate as 1.3923 and the forward point percentage as 0.056 (5.6% converted to decimal).\n\n2. To calculate the spot rate, we divide the forward rate by (1 + forward point percentage). This is because the forward rate includes the expected change over the 6-month period.\n\n3. We round the result to 4 decimal places, which is standard for forex rates.\n\n4. The function returns the calculated spot rate.\n\nWhen you run this function, it will return the most precise USD/GBP spot rate based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-270",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Chief Information Officer of a private equity firm in Canada is looking to secure the interest on a three-month \"bridge\" loan that his company will acquire in six months to finalize an LBO transaction. He trades the applicable interest rate futures contracts at 98.05. After six months, he starts the loan at 2.70% and neutralizes the hedge at 97.30. What is the effective interest rate on the loan?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_futures_price = 98.05\n    final_futures_price = 97.30\n    actual_loan_rate = 0.0270  # 2.70%\n    \n    # Do math calculation to get the answer\n    futures_implied_rate = (100 - initial_futures_price) / 100\n    futures_actual_rate = (100 - final_futures_price) / 100\n    rate_difference = futures_actual_rate - futures_implied_rate\n    effective_interest_rate = actual_loan_rate - rate_difference\n    \n    # return answer\n    return effective_interest_rate * 100  # Convert to percentage\n```\n\nThis program calculates the effective interest rate on the loan after considering the hedging strategy using interest rate futures. Here's a breakdown of the calculation:\n\n1. We define the initial futures price (98.05), final futures price (97.30), and the actual loan rate (2.70%).\n\n2. We calculate the implied interest rate from the initial futures price and the actual interest rate from the final futures price.\n\n3. We determine the difference between the actual and implied rates from the futures contracts.\n\n4. We subtract this difference from the actual loan rate to get the effective interest rate.\n\n5. Finally, we convert the result to a percentage by multiplying by 100.\n\nThe returned value will be the effective interest rate on the loan as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-271",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a functional procedure has a 5% chance of resulting in a substantial financial loss and if not, no significant loss is recorded (i.e., Bernoulli). If the substantial loss happens, the intensity is normally distributed with an average of $4 million and a standard deviation of $2 million. What is the expected shortfall at the 95% confidence level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    import numpy as np\n    from scipy import stats\n\n    prob_loss = 0.05\n    mean_loss = 4000000\n    std_loss = 2000000\n    confidence_level = 0.95\n\n    # Do math calculation to get the answer\n    \n    # Calculate VaR at 95% confidence level\n    var_95 = stats.norm.ppf(confidence_level, mean_loss, std_loss)\n    \n    # Calculate Expected Shortfall\n    def expected_shortfall(x):\n        return x * stats.norm.pdf((x - mean_loss) / std_loss) / std_loss\n    \n    es_95 = stats.norm.expect(expected_shortfall, loc=mean_loss, scale=std_loss, lb=var_95)\n    \n    # Adjust for probability of loss occurring\n    adjusted_es_95 = es_95 * prob_loss\n\n    # return answer\n    return adjusted_es_95\n```\n\nThis Python program calculates the Expected Shortfall (ES) at the 95% confidence level for the given scenario. Here's a breakdown of the solution:\n\n1. We import necessary libraries: numpy and scipy.stats.\n\n2. We define the given parameters:\n   - Probability of substantial loss: 5% (0.05)\n   - Mean of loss distribution: $4 million\n   - Standard deviation of loss distribution: $2 million\n   - Confidence level: 95% (0.95)\n\n3. We calculate the Value at Risk (VaR) at 95% confidence level using the normal distribution's percent point function (ppf).\n\n4. We define a function to calculate the Expected Shortfall, which is the conditional expectation of loss above the VaR.\n\n5. We use scipy's expect function to calculate the ES at 95% confidence level.\n\n6. Finally, we adjust the ES by multiplying it with the probability of the substantial loss occurring (5%).\n\nThe function returns the adjusted Expected Shortfall at the 95% confidence level, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-272",
        "python_solution": "",
        "ground_truth": null,
        "question": "Miller is a tax consultant who gives tax awareness counsel to individual clients. Miller's client is Jane who currently has $10 million invested in a tax-deferred account earning 8% annually. Jane intends to liquidate the investment after five years, accrue the sale proceeds in a lump sum (which are taxed at a 20% rate), and utilize the proceeds to buy a mansion. Jane requested Miller to determine the leftover after-tax wealth after five years. What will be the after-tax wealth in Jane's tax-deferred account at the conclusion of the five years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000  # $10 million\n    annual_return_rate = 0.08  # 8% annual return\n    investment_period = 5  # 5 years\n    tax_rate = 0.20  # 20% tax rate\n\n    # Do math calculation to get the answer\n    # Calculate the investment value after 5 years\n    future_value = initial_investment * (1 + annual_return_rate) ** investment_period\n    \n    # Calculate the tax amount\n    tax_amount = (future_value - initial_investment) * tax_rate\n    \n    # Calculate the after-tax wealth\n    after_tax_wealth = future_value - tax_amount\n\n    # return answer\n    return after_tax_wealth\n```\n\nThis Python program calculates Jane's after-tax wealth after five years in her tax-deferred account. Here's how it works:\n\n1. We define the initial variables:\n   - `initial_investment`: Jane's current investment of $10 million\n   - `annual_return_rate`: The 8% annual return, expressed as 0.08\n   - `investment_period`: The 5-year investment period\n   - `tax_rate`: The 20% tax rate, expressed as 0.20\n\n2. We calculate the future value of the investment after 5 years using the compound interest formula: FV = PV * (1 + r)^t\n\n3. We calculate the tax amount, which is applied only to the gains (future_value - initial_investment)\n\n4. We subtract the tax amount from the future value to get the after-tax wealth\n\n5. Finally, we return the after-tax wealth\n\nThis program will return the exact amount of Jane's after-tax wealth after five years."
        ]
    },
    {
        "tables": [
            "|                          | Portfolio W       | Futures Contract and CTD Bond |\n| ------------------------ | --------------- | ----------------------------- |\n| Market value            | $120,349,000      | Price                         | 143.20                      |\n| Modified duration       | 9.30             | Modified duration             | 9.00                         |\n| Basis point value       | $111,924.57      | Basis point value             | 128.88                       |\n|                          |                   | Conversion factor             | 0.75                         |\n|                          |                   | Contract size                 | $100,000                     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-273",
        "python_solution": "",
        "ground_truth": null,
        "question": "John, a beginner analyst, oversees a portfolio X. The portfolio is completely committed to US Treasuries. John aims to fully safeguard this bond portfolio against any increase in interest rates. Exhibit 1 discloses certain information regarding Portfolio X, along with the related Treasury futures contract, and the cheapest-to-deliver (CTD) bond. Considering the data in Exhibit 1, how many Treasury futures contracts does John need to sell to fully protect Portfolio X?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 120349000\n    portfolio_bpv = 111924.57\n    futures_price = 143.20\n    futures_bpv = 128.88\n    conversion_factor = 0.75\n    contract_size = 100000\n\n    # Do math calculation to get the answer\n    futures_value = futures_price * conversion_factor * contract_size\n    futures_contracts_needed = portfolio_bpv / (futures_bpv * conversion_factor)\n    \n    # Round up to the nearest whole number\n    answer = int(futures_contracts_needed + 0.5)\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the number of Treasury futures contracts John needs to sell to fully protect Portfolio X against an increase in interest rates. Here's a breakdown of the calculation:\n\n1. We define all the relevant variables from the given table.\n2. We calculate the value of one futures contract: `futures_value = futures_price * conversion_factor * contract_size`\n3. We calculate the number of futures contracts needed by dividing the portfolio's basis point value by the adjusted basis point value of the futures contract: `futures_contracts_needed = portfolio_bpv / (futures_bpv * conversion_factor)`\n4. We round the result to the nearest whole number, as fractional contracts can't be traded.\n\nThe program will return the number of Treasury futures contracts John needs to sell to fully protect Portfolio X."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-274",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current status of the PlayPoint Resort Company is that it has 1.2 million outstanding common shares with a beta of 2.2. Also, it has bonds of a face value of $10 million that will mature in five years and these bonds have an 8% coupon with payments every 6 months, and are calculated to yield 13.65 percent. If PlayPoint decides to issue new bonds up to $2.5 million, the bonds will be priced at par value and will yield 13.65 percent. However, if the company decides to issue bonds beyond $2.5 million, the expected yield on the entire issuance will be 16 percent. PlayPoint recently determined that they can issue new common stock at $10 per share. The present risk-free interest rate is at 3 percent while the expected market return is 10 percent. PlayPoint's marginal tax rate is at 30 percent. What is the weighted average cost of capital if PlayPoint ac",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outstanding_shares = 1.2e6\n    beta = 2.2\n    existing_bonds_face_value = 10e6\n    risk_free_rate = 0.03\n    market_return = 0.10\n    tax_rate = 0.30\n    new_stock_price = 10\n    new_bond_yield = 0.1365\n    \n    # Do math calculation to get the answer\n    \n    # Calculate cost of equity using CAPM\n    cost_of_equity = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # Calculate market value of equity\n    market_value_equity = outstanding_shares * new_stock_price\n    \n    # Calculate market value of debt (existing + new bonds)\n    market_value_debt = existing_bonds_face_value + 2.5e6\n    \n    # Calculate after-tax cost of debt\n    cost_of_debt = new_bond_yield * (1 - tax_rate)\n    \n    # Calculate total market value\n    total_market_value = market_value_equity + market_value_debt\n    \n    # Calculate weights\n    weight_equity = market_value_equity / total_market_value\n    weight_debt = market_value_debt / total_market_value\n    \n    # Calculate WACC\n    wacc = (weight_equity * cost_of_equity) + (weight_debt * cost_of_debt)\n    \n    # Convert to percentage\n    wacc_percentage = wacc * 100\n    \n    # return answer\n    return round(wacc_percentage, 2)\n```"
        ]
    },
    {
        "tables": [
            "|                               |         |\n|-------------------------------|---------|\n|Exhibit 1 10-Year Trailing Risk-Adjusted Performance| |\n| Average annual return        | 8.20%   |\n| Minimum acceptable return (MAR) | 5.00%   |\n| Sharpe ratio                 | 0.95    |\n| Sortino ratio                | 0.87    |\n| Upside capture               | 0.66    |\n| Downside capture             | 0.50    |\n| Maximum drawdown             | -24.00% |\n| Drawdown duration            | 4 months|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-275",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to Exhibit 1, what is the projected semi-deviation for the investment portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    avg_annual_return = 0.082\n    mar = 0.05\n    sortino_ratio = 0.87\n\n    # Do math calculation to get the answer\n    excess_return = avg_annual_return - mar\n    semi_deviation = excess_return / sortino_ratio\n\n    # return answer\n    return semi_deviation\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The projected semi-deviation is approximately {result:.4f} or {result*100:.2f}%\")\n```\n\nThis Python program calculates the projected semi-deviation for the investment portfolio based on the information provided in Exhibit 1. Here's how it works:\n\n1. We define the relevant variables from the table:\n   - Average annual return: 8.20% (0.082)\n   - Minimum acceptable return (MAR): 5.00% (0.05)\n   - Sortino ratio: 0.87\n\n2. We calculate the excess return by subtracting the MAR from the average annual return.\n\n3. We use the Sortino ratio formula to calculate the semi-deviation:\n   Sortino ratio = (Average Return - MAR) / Semi-deviation\n   \n   Rearranging this formula, we get:\n   Semi-deviation = (Average Return - MAR) / Sortino ratio\n\n4. The function returns the calculated semi-deviation.\n\n5. We call the function and print the result, formatting it as a percentage for better readability.\n\nThis program will calculate and return the projected semi-deviation based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-276",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive is considering pricing a put option through a one-period binomial tree. The relevant data include: The present stock price is $30, the strike price of the put option stands at $30. The upward adjustment factor is 1.12, while the downward one rests at 0.92. The risk-free rate comes at 5%. The risk-neutral likelihood of a downward movement is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 30  # present stock price\n    K = 30   # strike price\n    u = 1.12  # upward adjustment factor\n    d = 0.92  # downward adjustment factor\n    r = 0.05  # risk-free rate\n\n    # Do math calculation to get the answer\n    R = 1 + r  # risk-free return\n    p = (R - d) / (u - d)  # risk-neutral probability of upward movement\n    q = 1 - p  # risk-neutral probability of downward movement\n\n    # return answer\n    return q\n```\n\nThis program calculates the risk-neutral probability of a downward movement in a one-period binomial tree model for option pricing. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate R, which is the risk-free return (1 + risk-free rate).\n3. We use the risk-neutral pricing formula to calculate p, the risk-neutral probability of an upward movement: p = (R - d) / (u - d)\n4. The probability of a downward movement, q, is simply 1 - p.\n5. We return q as the answer.\n\nThis solution uses the standard risk-neutral pricing approach in a binomial tree model. The risk-neutral probabilities are calculated such that the expected return on the stock under these probabilities is equal to the risk-free rate, which is a fundamental principle of risk-neutral pricing."
        ]
    },
    {
        "tables": [
            "| ($ millions) | 2016 | 2017 |\n| --- | --- | --- |\n| Revenue | 50 | 45 |\n| Cost of goods sold | 17 | 20 |\n| Inventory | 24 | 20 |\n| Accounts receivable | 20 | 17 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "test-277",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data, how much money was paid to the vendor?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold_2017 = 20\n    accounts_payable_2016 = 30\n    accounts_payable_2017 = 33\n\n    # Do math calculation to get the answer\n    payments_to_vendors = cost_of_goods_sold_2017 + accounts_payable_2016 - accounts_payable_2017\n\n    # return answer\n    return payments_to_vendors\n```\n\nThis Python program calculates how much money was paid to vendors based on the given data. Here's an explanation of the calculation:\n\n1. We use the cost of goods sold for 2017 as the starting point, which represents the goods purchased from vendors during that year.\n2. We add the accounts payable from the beginning of the year (end of 2016) because this represents additional amounts owed to vendors that would have been paid during 2017.\n3. We subtract the accounts payable at the end of 2017 because this represents amounts still owed to vendors and not yet paid.\n\nThe resulting calculation (20 + 30 - 33 = 17) gives us the total amount paid to vendors during 2017, which is $17 million."
        ]
    },
    {
        "tables": [
            "| | Exports | Imports |\n|---|---|---|\n| Initial Value (DCU) | 4,800 | 6,500 |\n| Demand elasticity | 0.70 | 0.55 |\n| **Note:** DCU:  domestic currency units | | |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-278",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will the trade balance be for a theoretical economy given the following international trade data if the value of the ZRB depreciates by 12%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_exports = 4800\n    initial_imports = 6500\n    export_elasticity = 0.70\n    import_elasticity = 0.55\n    depreciation = 0.12  # 12% depreciation\n\n    # Do math calculation to get the answer\n    \n    # Calculate change in exports and imports\n    change_in_exports = initial_exports * export_elasticity * depreciation\n    change_in_imports = initial_imports * import_elasticity * -depreciation\n\n    # Calculate new exports and imports\n    new_exports = initial_exports + change_in_exports\n    new_imports = initial_imports + change_in_imports\n\n    # Calculate trade balance (exports - imports)\n    trade_balance = new_exports - new_imports\n\n    # return answer\n    return trade_balance\n```\n\nThis Python program calculates the trade balance for the theoretical economy given the provided international trade data and a 12% depreciation of the ZRB. Here's a breakdown of the calculation:\n\n1. We define the initial values for exports and imports, their respective elasticities, and the depreciation rate.\n2. We calculate the change in exports and imports using the formula: initial value * elasticity * depreciation rate. For imports, we use a negative depreciation rate because imports become more expensive when the currency depreciates.\n3. We calculate the new values for exports and imports by adding the changes to the initial values.\n4. Finally, we calculate the trade balance by subtracting the new imports from the new exports.\n\nThe function will return the trade balance in domestic currency units (DCU)."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-279",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio manager possesses a portfolio of options on a non-dividend paying stock named LYR. The portfolio includes 10,000 deep in-the-money call options on LYR and 50,000 deep out-of-the money call options on LYR. Along with this, there are 20,000 forward contracts on LYR. The current trading price of LYR is USD 100. Given 252 trading days in a year and 30 percent per-year volatility of LYR, what would be the 1-day VaR of the portfolio at the 95 percent confidence level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    in_the_money_calls = 10000\n    out_of_the_money_calls = 50000\n    forward_contracts = 20000\n    stock_price = 100\n    trading_days = 252\n    annual_volatility = 0.30\n    confidence_level = 0.95\n\n    # Do math calculation to get the answer\n    import math\n    from scipy import stats\n\n    # Calculate daily volatility\n    daily_volatility = annual_volatility / math.sqrt(trading_days)\n\n    # Calculate the total delta of the portfolio\n    # Deep in-the-money calls have delta ≈ 1\n    # Deep out-of-the-money calls have delta ≈ 0\n    # Forward contracts have delta = 1\n    total_delta = in_the_money_calls * 1 + out_of_the_money_calls * 0 + forward_contracts * 1\n\n    # Calculate the portfolio value\n    portfolio_value = total_delta * stock_price\n\n    # Calculate the z-score for 95% confidence level\n    z_score = stats.norm.ppf(confidence_level)\n\n    # Calculate 1-day VaR\n    var = portfolio_value * daily_volatility * z_score\n\n    # return answer\n    return var\n\n```\n\nThis Python program calculates the 1-day Value at Risk (VaR) for the given portfolio at a 95% confidence level. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the daily volatility by dividing the annual volatility by the square root of trading days.\n3. We calculate the total delta of the portfolio. Deep in-the-money calls have a delta close to 1, deep out-of-the-money calls have a delta close to 0, and forward contracts have a delta of 1.\n4. We calculate the portfolio value by multiplying the total delta by the stock price.\n5. We use the scipy.stats module to calculate the z-score for a 95% confidence level.\n6. Finally, we calculate the 1-day VaR using the formula: VaR"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-280",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the total assets of the Silver Airways company are $3,275,000 and their total debt is $2,315,000. Determine the financial leverage assuming Silver Airways securitized $200,000 of its account receivables to a SPE.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 3275000\n    total_debt = 2315000\n    securitized_receivables = 200000\n    \n    # Do math calculation to get the answer\n    adjusted_assets = total_assets - securitized_receivables\n    adjusted_debt = total_debt - securitized_receivables\n    financial_leverage = adjusted_assets / (adjusted_assets - adjusted_debt)\n    \n    # return answer\n    return financial_leverage\n```\n\nThis Python program calculates the financial leverage for Silver Airways, taking into account the securitization of account receivables. Here's a breakdown of the calculation:\n\n1. We first define the given values: total assets, total debt, and the amount of securitized receivables.\n\n2. We then adjust the assets and debt by subtracting the securitized receivables from both. This is because securitized receivables are removed from both the assets and liabilities of the company's balance sheet.\n\n3. Finally, we calculate the financial leverage using the formula:\n   Financial Leverage = Adjusted Assets / (Adjusted Assets - Adjusted Debt)\n\n4. The program returns the calculated financial leverage.\n\nThis solution provides a more accurate picture of the company's financial leverage by accounting for the off-balance-sheet financing through securitization."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-281",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the portfolio beta for an investor who opts to borrow an additional $5,000 at the risk-free rate and invest a total of $10,000 in the market portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 5000\n    borrowed_amount = 5000\n    total_investment = initial_investment + borrowed_amount\n    market_portfolio_beta = 1.0  # By definition, the market portfolio has a beta of 1\n\n    # Do math calculation to get the answer\n    leverage_ratio = total_investment / initial_investment\n    portfolio_beta = market_portfolio_beta * leverage_ratio\n\n    # return answer\n    return portfolio_beta\n```\n\nThis Python program calculates the portfolio beta for the given scenario. Here's an explanation of the calculation:\n\n1. We define the initial investment as $5,000 and the borrowed amount as $5,000, resulting in a total investment of $10,000 in the market portfolio.\n\n2. The market portfolio, by definition, has a beta of 1.0.\n\n3. The leverage ratio is calculated as the total investment divided by the initial investment (10,000 / 5,000 = 2).\n\n4. The portfolio beta is then calculated by multiplying the market portfolio beta (1.0) by the leverage ratio (2).\n\nThis results in a portfolio beta of 2.0, which means the portfolio is twice as volatile as the market due to the leverage introduced by borrowing additional funds."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-282",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose the Peterson account experienced a return of -5.3% in a particular month, during which the portfolio benchmark saw a return of -5.5% and the market index had a return of -2.8%. What is the return of the Peterson account attributable to active management?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    peterson_return = -0.053\n    benchmark_return = -0.055\n    market_return = -0.028\n    \n    # Do math calculation to get the answer\n    active_return = peterson_return - benchmark_return\n    \n    # return answer\n    return active_return\n```\n\nThis program calculates the return attributable to active management for the Peterson account. Here's how it works:\n\n1. We define the variables:\n   - `peterson_return`: The actual return of the Peterson account (-5.3% or -0.053)\n   - `benchmark_return`: The return of the portfolio benchmark (-5.5% or -0.055)\n   - `market_return`: The return of the market index (-2.8% or -0.028)\n\n2. To calculate the return attributable to active management, we subtract the benchmark return from the Peterson account's return. This difference represents the excess return (positive or negative) that resulted from active management decisions.\n\n3. The function returns this active return.\n\nNote that we don't actually use the `market_return` in this calculation. The market return is typically used in other performance attribution metrics, but for calculating the return attributable to active management, we only need to compare the account's return to its benchmark.\n\nThe result will be a small positive number (0.002 or 0.2%), indicating that the Peterson account slightly outperformed its benchmark in this particular month, despite both having negative returns."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-283",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an employee named Anna, FRM, who works as an analyst at Meyer Industries, is calculating the value at risk (VaR) for the company's profit/loss distribution, which is supposed to be normally distributed with a yearly average of $2 million and a standard deviation of $1 million, what would be the VaR at a 99% confidence level using a parametric method?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    mean = 2000000  # yearly average profit in dollars\n    std_dev = 1000000  # standard deviation in dollars\n    confidence_level = 0.99  # 99% confidence level\n    \n    # Do math calculation to get the answer\n    import scipy.stats as stats\n    \n    # Calculate the z-score for the given confidence level\n    z_score = stats.norm.ppf(confidence_level)\n    \n    # Calculate VaR using the parametric method\n    var = mean - (z_score * std_dev)\n    \n    # return answer\n    return abs(var)\n```\n\nThis program calculates the Value at Risk (VaR) for Meyer Industries' profit/loss distribution using the parametric method, assuming a normal distribution.\n\nThe program does the following:\n\n1. Defines the variables: mean (average yearly profit), standard deviation, and confidence level.\n2. Uses the SciPy library to calculate the z-score for the given confidence level (99%).\n3. Calculates the VaR using the formula: VaR = Mean - (Z-score * Standard Deviation)\n4. Returns the absolute value of the VaR, as VaR is typically expressed as a positive number representing the potential loss.\n\nNote: This program assumes that the SciPy library is installed. If it's not, you may need to install it using `pip install scipy` before running the program.\n\nThe returned value will be the VaR at a 99% confidence level, which represents the minimum potential loss that the company might experience in the worst 1% of cases, given the assumed normal distribution of profits and losses."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-284",
        "python_solution": "",
        "ground_truth": null,
        "question": "John Doe bought a mortgage-backed security that has an 8% coupon rate and a par value of $1,000 for $960. The coupon payments are made monthly. How much is the monthly coupon payment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    annual_coupon_rate = 0.08\n    payments_per_year = 12\n\n    # Do math calculation to get the answer\n    annual_coupon_payment = par_value * annual_coupon_rate\n    monthly_coupon_payment = annual_coupon_payment / payments_per_year\n\n    # return answer\n    return monthly_coupon_payment\n```\n\nThis Python program calculates the monthly coupon payment for the mortgage-backed security described in the question. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `par_value`: The face value of the security, which is $1,000.\n   - `annual_coupon_rate`: The annual coupon rate, which is 8% or 0.08.\n   - `payments_per_year`: The number of payments per year, which is 12 for monthly payments.\n\n2. We calculate the answer:\n   - First, we calculate the annual coupon payment by multiplying the par value by the annual coupon rate.\n   - Then, we divide the annual coupon payment by the number of payments per year to get the monthly coupon payment.\n\n3. Finally, we return the monthly_coupon_payment as the answer.\n\nWhen you run this function, it will return the monthly coupon payment, which is $6.67 (rounded to two decimal places).\n\nNote: The purchase price of $960 is not relevant for calculating the coupon payment, as coupon payments are based on the par value of the security, not the market price."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price($) | End of Period Price ($) | Dividends per Share ($) | Shares Outstanding |\n|---|---|---|---|---|\n| D | 3,400 | 3,600 | 120 | 1,500 |\n| E | 4,600 | 3,500 | 150 | 1,100 |\n| F | 1,200 | 1,300 | 180 | 5,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-285",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, the total return of a market-capitalization-weighted index made up of securities D, E, F, has been compiled by Stacy, a research analyst from a financial investment firm. What is the total return of the index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = ['D', 'E', 'F']\n    begin_prices = [3400, 4600, 1200]\n    end_prices = [3600, 3500, 1300]\n    dividends = [120, 150, 180]\n    shares = [1500, 1100, 5000]\n    \n    # Do math calculation to get the answer\n    total_market_cap_begin = sum([begin_prices[i] * shares[i] for i in range(3)])\n    \n    weighted_returns = []\n    for i in range(3):\n        price_return = (end_prices[i] - begin_prices[i]) / begin_prices[i]\n        dividend_yield = dividends[i] / begin_prices[i]\n        total_return = price_return + dividend_yield\n        weight = (begin_prices[i] * shares[i]) / total_market_cap_begin\n        weighted_returns.append(total_return * weight)\n    \n    index_total_return = sum(weighted_returns)\n    \n    # return answer\n    return index_total_return\n```\n\nThis Python program calculates the total return of a market-capitalization-weighted index composed of securities D, E, and F. Here's a breakdown of the solution:\n\n1. We define the variables for each security: beginning prices, ending prices, dividends per share, and shares outstanding.\n\n2. We calculate the total market capitalization at the beginning of the period, which will be used for weighting.\n\n3. For each security, we calculate:\n   - Price return: (End Price - Begin Price) / Begin Price\n   - Dividend yield: Dividends per Share / Begin Price\n   - Total return: Price return + Dividend yield\n   - Weight: (Begin Price * Shares) / Total Market Cap\n\n4. We multiply each security's total return by its weight and sum these weighted returns to get the index's total return.\n\n5. Finally, we return the calculated index total return.\n\nThis approach ensures that the total return of the index accurately reflects the performance of its constituent securities, weighted by their market capitalizations."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-286",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the yield-to-maturity of Bond B decreases by 30 basis points, and given that its annual modified duration is 6.932 and the annual convexity is 59.270, what should be the expected percentage price change?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yield_change = -0.0030  # 30 basis points decrease = -0.30%\n    modified_duration = 6.932\n    convexity = 59.270\n\n    # Do math calculation to get the answer\n    duration_effect = modified_duration * yield_change\n    convexity_effect = 0.5 * convexity * (yield_change ** 2)\n    price_change = duration_effect + convexity_effect\n\n    # Convert to percentage\n    price_change_percentage = price_change * 100\n\n    # return answer\n    return price_change_percentage\n```\n\nThis Python program calculates the expected percentage price change of Bond B given the provided information. Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `yield_change` is -0.0030 (30 basis points decrease)\n   - `modified_duration` is 6.932\n   - `convexity` is 59.270\n\n2. We calculate the price change using the duration-convexity approximation:\n   - Duration effect: Modified Duration * Yield Change\n   - Convexity effect: 0.5 * Convexity * (Yield Change)^2\n   - Total price change: Duration effect + Convexity effect\n\n3. We convert the price change to a percentage by multiplying by 100.\n\n4. The function returns the price change percentage.\n\nThis calculation takes into account both the first-order effect (duration) and the second-order effect (convexity) of the yield change on the bond price."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-287",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would the corresponding call option be worth, taking into account that the present share price is $25, an European put option on the share with a $27 strike price and a 9-month expiration is priced at $3, and the risk-free rate stands at 4%?",
        "output": [
            "Here's a Python program to solve the given problem using the put-call parity formula:\n\n```python\ndef solution():\n    # Define variables name and value\n    S = 25  # Current stock price\n    K = 27  # Strike price\n    P = 3   # Put option price\n    r = 0.04  # Risk-free rate\n    t = 9/12  # Time to expiration in years (9 months = 9/12 years)\n\n    # Do math calculation to get the answer\n    # Using put-call parity: C + K * e^(-r*t) = P + S\n    # We need to solve for C (call option price)\n    import math\n    \n    discounted_strike = K * math.exp(-r * t)\n    C = P + S - discounted_strike\n\n    # return answer\n    return round(C, 2)\n```\n\nThis program uses the put-call parity formula to calculate the price of the call option. The put-call parity is a fundamental relationship between the prices of European put and call options with the same strike price and expiration.\n\nThe formula used is:\nC + K * e^(-r*t) = P + S\n\nWhere:\nC = Call option price (what we're solving for)\nK = Strike price\nr = Risk-free rate\nt = Time to expiration in years\nP = Put option price\nS = Current stock price\n\nWe solve this equation for C to get the call option price. The `math.exp()` function is used to calculate e^(-r*t).\n\nThe result is rounded to two decimal places as option prices are typically quoted with cent precision."
        ]
    },
    {
        "tables": [
            "| Fair value of investment in Gama Company | $ 150,000 |\n| --- | --- |\n| Retained earning | $ 782,000 |\n| Common stock, $1 par value | $ 560,000 |\n| Preferred stock, $100 par value | $ 126,000 |\n| Deferred taxes | $ 75,000 |\n| Accumulated OCI | $ 35,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-288",
        "python_solution": "",
        "ground_truth": null,
        "question": "The subsequent balance sheet belongs to Omega Firm and includes chosen data at the year's conclusion: The investment in Alpha Firm was $130,000 and is categorised as FVOCI. By the year's end, what is the total owners' equity for Omega Firm?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings = 782000\n    common_stock = 560000\n    preferred_stock = 126000\n    accumulated_oci = 35000\n    \n    # Do math calculation to get the answer\n    total_owners_equity = retained_earnings + common_stock + preferred_stock + accumulated_oci\n    \n    # return answer\n    return total_owners_equity\n```\n\nThis Python function calculates the total owners' equity for Omega Firm based on the information provided in the balance sheet. Here's a breakdown of the calculation:\n\n1. We define the variables for the components of owners' equity given in the table:\n   - Retained earnings: $782,000\n   - Common stock: $560,000\n   - Preferred stock: $126,000\n   - Accumulated Other Comprehensive Income (OCI): $35,000\n\n2. We sum up these components to get the total owners' equity.\n\n3. The function returns the calculated total.\n\nNote that the investment in Alpha Firm ($130,000) and the fair value of investment in Gama Company ($150,000) are not included in the calculation of owners' equity. The deferred taxes ($75,000) are also not included as they are typically a liability, not a component of owners' equity."
        ]
    },
    {
        "tables": [
            "| Time=0 | Time=1 | Time=2 |\n|---|---|---|\n| SO=100 | Su=110 | Suu=121 |\n|   | Sd=92 | Sud/du=101.20 |\n|   |   | Sdd=84.64 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-289",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose a company's share is expected to move as displayed below in the next two periods. The starting price for the share is $100. Considering the odds of an increase in any given period as 40% and the chance of a decrease is 60%, what is the likelihood of the share's price reaching $101.20 after two periods, using the binomial model?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    p_up = 0.4  # probability of price going up\n    p_down = 0.6  # probability of price going down\n    \n    # Do math calculation to get the answer\n    # To reach 101.20 after two periods, we need one up and one down movement\n    # This can happen in two ways: up then down, or down then up\n    \n    # Probability of up then down\n    p_up_down = p_up * p_down\n    \n    # Probability of down then up\n    p_down_up = p_down * p_up\n    \n    # Total probability of reaching 101.20\n    total_probability = p_up_down + p_down_up\n    \n    # return answer\n    return total_probability\n```\n\nThis program calculates the probability of the share price reaching $101.20 after two periods using the binomial model. Here's how it works:\n\n1. We define the probabilities of the price going up (40%) and down (60%) in any given period.\n\n2. To reach $101.20 after two periods, we need one up movement and one down movement. This can happen in two ways:\n   - Up movement followed by down movement\n   - Down movement followed by up movement\n\n3. We calculate the probability of each of these scenarios:\n   - Probability of up then down: 0.4 * 0.6 = 0.24\n   - Probability of down then up: 0.6 * 0.4 = 0.24\n\n4. We sum these probabilities to get the total probability of reaching $101.20 after two periods.\n\n5. The function returns this total probability as the answer.\n\nThe result of this calculation will be 0.48 or 48%, which is the probability of the share price reaching $101.20 after two periods under the given conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-290",
        "python_solution": "",
        "ground_truth": null,
        "question": "If PYTHON Ltd. sells an intangible asset that was originally acquired for €12 million and has an accumulated amortization of €2 million, and reported a loss of €3.2 million on its sale, what is a probable sale price of the asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 12000000  # €12 million\n    accumulated_amortization = 2000000  # €2 million\n    reported_loss = 3200000  # €3.2 million\n    \n    # Do math calculation to get the answer\n    book_value = original_cost - accumulated_amortization\n    sale_price = book_value - reported_loss\n    \n    # return answer\n    return sale_price\n```\n\nThis Python program calculates the probable sale price of the intangible asset based on the given information. Here's a breakdown of the calculation:\n\n1. We define the original cost, accumulated amortization, and reported loss as variables.\n2. We calculate the book value of the asset by subtracting the accumulated amortization from the original cost.\n3. The sale price is then determined by subtracting the reported loss from the book value.\n\nThe function will return the sale price, which is the answer to the question. When you run this function, it will output the probable sale price of the intangible asset in euros."
        ]
    },
    {
        "tables": [
            "|                            |REIT B  |\n|----------------------------|--------|\n|Funds from operations (FFO)|$320,514|\n|Shares outstanding          |76,000  |\n|Property subsector average P/FFO multiple|15.3x|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-291",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of REIT B using the average P/FFO multiple method of the property subsector?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ffo = 320514\n    shares_outstanding = 76000\n    avg_p_ffo_multiple = 15.3\n    \n    # Do math calculation to get the answer\n    ffo_per_share = ffo / shares_outstanding\n    per_share_value = ffo_per_share * avg_p_ffo_multiple\n    \n    # return answer\n    return round(per_share_value, 2)\n```\n\nThis Python program calculates the per share value of REIT B using the average P/FFO multiple method of the property subsector. Here's how it works:\n\n1. We define the variables based on the given information:\n   - `ffo` (Funds from operations) is $320,514\n   - `shares_outstanding` is 76,000\n   - `avg_p_ffo_multiple` (Property subsector average P/FFO multiple) is 15.3x\n\n2. We calculate the FFO per share by dividing the total FFO by the number of shares outstanding.\n\n3. We then multiply the FFO per share by the average P/FFO multiple to get the per share value.\n\n4. Finally, we round the result to two decimal places (as it represents a monetary value) and return it.\n\nThis program will return the per share value of REIT B using the given method."
        ]
    },
    {
        "tables": [
            "|  | Number of Options | Weighted Average | Exercise Price |\n| --- | --- | --- | --- |\n| Balance, start of year | 3,666,500 | £3.06 | |\n| Granted  during the  year | 872,000 | £3.30 | |\n| Exercised during the year | -278,400 | £2.88 | |\n| Forfeited during the year | -123,700 | £2.96 | |\n| Balance, end of year | 4,136,400 | £3.13 | |\n| Exercisable at end of the year | 827,280 | £2.90 | |",
            "|               | Share Price | Option Fair Value |\n|---------------|-------------|-------------------|\n| January 1,2014  | £2.85       | £0.370            |\n| July 1, 2014    | £3.00       | £0.390            |\n| December 31, 2014 | £3.06     | £0.400            |\n| Average for 2014 | £2.97      | £0.386            |"
        ],
        "topic": "Accounting",
        "question_id": "test-292",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under the present LTIP, the Board awards options on common shares to the management team. These options necessitate a 6-year service period after the date they are granted before they vest. This information about the stock options granted this year under the LTIP is reviewed by Morrison as shown in Exhibit 2. The financial statements of Clarion are prepared in line with International Financial Reporting Standards (IFRS) and their year-end is December 31. All the options in 2014 were granted on July 1, 2014. Given the market price of shares and the fair value of stock options at crucial dates throughout the year as shown in Exhibit 3, what is the chunk of the compensation expense related to the stock option of the LTIP granted in 2014?",
        "output": [
            "Here's a Python program to calculate the compensation expense related to the stock options granted in 2014 under the LTIP:\n\n```python\ndef solution():\n    # Define variables name and value\n    options_granted = 872000\n    option_fair_value = 0.39  # Fair value on July 1, 2014\n    vesting_period_years = 6\n    months_in_2014 = 6  # July 1 to December 31\n\n    # Do math calculation to get the answer\n    total_compensation_expense = options_granted * option_fair_value\n    annual_expense = total_compensation_expense / vesting_period_years\n    expense_2014 = annual_expense * (months_in_2014 / 12)\n\n    # return answer\n    return expense_2014\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The compensation expense for 2014 is £{result:.2f}\")\n```\n\nThis program calculates the compensation expense for the stock options granted in 2014 under the LTIP. Here's a breakdown of the calculation:\n\n1. We define the number of options granted (872,000) and the fair value of each option on the grant date (July 1, 2014), which is £0.39.\n2. The vesting period is 6 years, as stated in the question.\n3. Since the options were granted on July 1, 2014, only 6 months of expense should be recognized in 2014.\n4. We calculate the total compensation expense over the entire vesting period.\n5. We then calculate the annual expense by dividing the total expense by the vesting period.\n6. Finally, we calculate the expense for 2014 by taking half of the annual expense (6 months / 12 months).\n\nThe result represents the portion of the compensation expense related to the stock options of the LTIP granted in 2014 that should be recognized in the 2014 financial statements."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-293",
        "python_solution": "",
        "ground_truth": null,
        "question": "The yield for a one-year zero-coupon bond is 4.0%. The yields for zero-coupon bonds for the second and third years are 5.0% and 6.0% respectively. The spot rate for a five-year bond is not provided; however, the future price for a two-year zero-coupon bond starting in three years is 0.8479. What is today's price for a five-year zero-coupon bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    y1 = 0.04  # 1-year yield\n    y2 = 0.05  # 2-year yield\n    y3 = 0.06  # 3-year yield\n    f23 = 0.8479  # Future price for 2-year bond starting in 3 years\n\n    # Do math calculation to get the answer\n    \n    # Calculate spot rates for years 1-3\n    r1 = 1 / (1 + y1)\n    r2 = 1 / (1 + y2)**2\n    r3 = 1 / (1 + y3)**3\n    \n    # Calculate the implied 4-5 year forward rate\n    r45 = f23 / ((1 + y3)**3)\n    \n    # Calculate the 5-year spot rate\n    r5 = (r3 * r45)**(1/5)\n    \n    # Calculate the price of a 5-year zero-coupon bond\n    price = r5**5\n\n    # return answer\n    return price\n```\n\nThis Python program calculates the price of a five-year zero-coupon bond based on the given information. Here's a breakdown of the calculation:\n\n1. We first define the known yields and the future price of the two-year bond starting in three years.\n2. We calculate the spot rates for years 1-3 using the given yields.\n3. We then use the future price of the two-year bond starting in three years to calculate the implied 4-5 year forward rate.\n4. Using this information, we can calculate the 5-year spot rate.\n5. Finally, we use the 5-year spot rate to calculate the price of a 5-year zero-coupon bond.\n\nThe program returns this price as the answer. Note that the price is returned as a decimal (e.g., 0.7835 would represent a price of $78.35 for a $100 face value bond)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-294",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the continually compounded return rate if a stock's price increases from $15.00 to $16.20 over the course of a year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 15.00\n    final_price = 16.20\n    time = 1  # 1 year\n\n    # Do math calculation to get the answer\n    import math\n    continually_compounded_rate = math.log(final_price / initial_price) / time\n\n    # return answer\n    return continually_compounded_rate\n```\n\nThis Python program calculates the continually compounded return rate for a stock whose price increases from $15.00 to $16.20 over the course of a year. Here's how it works:\n\n1. We define the initial price, final price, and the time period (1 year).\n\n2. We use the formula for continuous compounding: r = ln(FV/PV) / t\n   Where:\n   r = continually compounded rate\n   FV = Final Value\n   PV = Present Value\n   t = time\n   ln = natural logarithm\n\n3. We use the `math.log()` function to calculate the natural logarithm.\n\n4. The function returns the calculated continually compounded rate.\n\nWhen you run this function, it will return the continually compounded return rate as a decimal. To convert it to a percentage, you can multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-295",
        "python_solution": "",
        "ground_truth": null,
        "question": "A corporation bought a storage facility for €35 million and invested an extra €2.0 million for improvements to the building's roof and windows, €0.5 million to adapt the inner arrangement to their standards (repositioning walls, adding and removing dividers, etc.) and €0.1 million on a training and introduction program to acquaint workers with the premises. What is the cost to be capitalized to the building account (in millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 35\n    roof_windows_improvements = 2.0\n    inner_arrangement_adaptations = 0.5\n    training_program = 0.1\n\n    # Do math calculation to get the answer\n    capitalized_cost = purchase_price + roof_windows_improvements + inner_arrangement_adaptations\n\n    # return answer\n    return capitalized_cost\n```\n\nThis Python program calculates the cost to be capitalized to the building account based on the given information. Here's an explanation of the solution:\n\n1. We define variables for each cost component:\n   - The initial purchase price of the storage facility (€35 million)\n   - The cost of improvements to the roof and windows (€2.0 million)\n   - The cost of adapting the inner arrangement (€0.5 million)\n   - The cost of the training and introduction program (€0.1 million)\n\n2. To calculate the capitalized cost, we add the purchase price, the roof and windows improvements, and the inner arrangement adaptations. The training program cost is not included because it's typically expensed rather than capitalized.\n\n3. The function returns the calculated capitalized cost.\n\nWhen you run this function, it will return 37.5, which represents €37.5 million as the cost to be capitalized to the building account."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-296",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that JJ Corporation initially reported an operating income of $360,000, which later changed to $420,000. If the financial cost stands at $120,000, how would you calculate JJ Corporation's degree of financial leverage (DFL)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_operating_income = 360000\n    revised_operating_income = 420000\n    financial_cost = 120000\n\n    # Do math calculation to get the answer\n    initial_ebit = initial_operating_income - financial_cost\n    revised_ebit = revised_operating_income - financial_cost\n    \n    percentage_change_ebit = (revised_ebit - initial_ebit) / initial_ebit\n    percentage_change_operating_income = (revised_operating_income - initial_operating_income) / initial_operating_income\n    \n    dfl = percentage_change_ebit / percentage_change_operating_income\n\n    # return answer\n    return dfl\n```\n\nThis Python program calculates the Degree of Financial Leverage (DFL) for JJ Corporation based on the given information. Here's a breakdown of the calculation:\n\n1. We define the initial operating income, revised operating income, and financial cost.\n2. We calculate the initial and revised Earnings Before Interest and Taxes (EBIT) by subtracting the financial cost from the operating incomes.\n3. We calculate the percentage change in EBIT and the percentage change in operating income.\n4. Finally, we calculate the DFL by dividing the percentage change in EBIT by the percentage change in operating income.\n\nThe function returns the calculated DFL, which represents how sensitive the company's earnings per share (EPS) is to changes in its operating income."
        ]
    },
    {
        "tables": [
            "| Name National Annual ID Salary Number | Loan Amount | | Model Prediction | Actual Result | Prediction Result | Type 1 Error | Type 2 Error |\n|---|---|---|---|---|---|---|---|\n| Garcia XXX 099 $105,000 | $25,000 | | Default | Default | 1 | 0 | 0 |\n| Rodriquez XXX 810 $58,000 | $10,000 | | No Default | No Default | 1 | 0 | 0 |\n| Brown XXX 129 $75,000 | $15,000 | | Default | No Default | 0 | 1 | 0 |\n| Anderson XXX 193 $43,000 | $7,500 | | No Default | No Default | 1 | 0 | 0 |\n| Lewis XXX 122 $64,500 | $42,000 | | No Default | Default | 0 | 0 | 1 |\n| Number and use of client records | | | | | | | |\n| Total # of historical records | | | | 10,014 | | | |\n| Records removed in data cleansing | | | | 2,996 | | | |\n| Records modeled with correct predictions and errors | | | | 7,018 | 5,851 | 273 | 894 |\n\nNote: 1 in Prediction Result column is a correct prediction; 0 is an incorrect prediction."
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-297",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the results presented for the BETA model (Exhibit 1) along with its relevant documentation, what is the model's precision? The model was confirmed by Thompson to have accurately forecasted a default in 5,290 cases from the model prediction set after the data was fully processed. This is from a sample of loans taken from the BETA model where anticipated and actual defaults were compared for the previous 12 months.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    true_positives = 5290  # Accurately forecasted defaults\n    total_predicted_defaults = 5290 + 273  # True positives + False positives\n\n    # Do math calculation to get the answer\n    precision = true_positives / total_predicted_defaults\n\n    # return answer\n    return precision\n```\n\nThis Python program calculates the precision of the BETA model based on the given information. \n\nPrecision is defined as the ratio of true positives (correctly predicted defaults) to the total number of predicted positives (both true positives and false positives).\n\nWe know that:\n1. The model accurately forecasted 5,290 defaults (true positives).\n2. From the table, we can see that there were 273 Type 1 errors, which represent false positives (predicted default when actually no default).\n\nThe total predicted defaults is the sum of true positives and false positives.\n\nThe program calculates this ratio and returns the precision value."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-298",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the performance of the Russell 1000 from February 1990 to December 2016, with a monthly arithmetic return of 0.878% and a volatility characterized by a 4.199% standard deviation of return, what would be the geometric return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    arithmetic_return = 0.00878  # 0.878% converted to decimal\n    std_dev = 0.04199  # 4.199% converted to decimal\n\n    # Do math calculation to get the answer\n    variance = std_dev ** 2\n    geometric_return = arithmetic_return - (variance / 2)\n    \n    # Convert to percentage\n    geometric_return_percent = geometric_return * 100\n\n    # return answer\n    return round(geometric_return_percent, 4)\n```\n\nThis Python program calculates the geometric return based on the given arithmetic return and standard deviation of return for the Russell 1000 from February 1990 to December 2016. Here's an explanation of the calculation:\n\n1. We define the arithmetic return (0.878%) and standard deviation (4.199%) as decimal values.\n\n2. We calculate the variance by squaring the standard deviation.\n\n3. We use the relationship between arithmetic and geometric returns:\n   Geometric Return ≈ Arithmetic Return - (Variance / 2)\n\n4. We convert the result to a percentage by multiplying by 100.\n\n5. Finally, we round the result to 4 decimal places for precision and return it.\n\nThis program will return the geometric return as a percentage, rounded to 4 decimal places."
        ]
    },
    {
        "tables": [
            "| Factor    | Time to Maturity (years) - 5 | Time to Maturity (years) - 20 |\n| --------- | ---------------------------- | ----------------------------- |\n| Level     | -0.4352%                     | -0.5128%                      |\n| Steepness | -0.0515%                     | -0.3015%                      |\n| Curvature | 0.3963%                      | 0.5227%                       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-299",
        "python_solution": "",
        "ground_truth": null,
        "question": "Display 1. Tri-Factor Model of Term Structure Note: The entries show how the yields would alter for a one standard deviation boost in a factor. How much would you expect the yield on the 20-year bond to change due to an increase in the steepness factor by two standard deviations?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    steepness_20year = -0.3015  # Steepness factor for 20-year bond\n    std_deviations = 2  # Number of standard deviations increase\n\n    # Do math calculation to get the answer\n    yield_change = steepness_20year * std_deviations\n\n    # Convert to percentage and round to 4 decimal places\n    answer = round(yield_change * 100, 4)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the expected change in yield for the 20-year bond due to an increase in the steepness factor by two standard deviations. Here's how it works:\n\n1. We define the steepness factor for the 20-year bond (-0.3015%) and the number of standard deviations increase (2).\n\n2. We multiply these two values to get the yield change. The steepness factor is already given as the change for one standard deviation, so multiplying by 2 gives us the change for two standard deviations.\n\n3. We convert the result to a percentage by multiplying by 100, and round it to 4 decimal places for precision.\n\n4. The program returns this value as the answer.\n\nWhen you run this function, it will return the expected change in yield as a percentage, with a negative value indicating a decrease in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-300",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a manufacturing firm, the accountant named Samuel discovered that the acquisition cost of a certain equipment was $50,000 and noted a $10,000 loss in the income statement upon the equipment's sale. If the accumulated depreciation amounted to $35,000, what was the selling price of the equipment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 50000\n    loss_on_sale = 10000\n    accumulated_depreciation = 35000\n    \n    # Do math calculation to get the answer\n    book_value = acquisition_cost - accumulated_depreciation\n    selling_price = book_value - loss_on_sale\n    \n    # return answer\n    return selling_price\n```\n\nThis Python program calculates the selling price of the equipment based on the given information:\n\n1. We define the variables:\n   - `acquisition_cost`: The original cost of the equipment ($50,000)\n   - `loss_on_sale`: The loss recorded in the income statement ($10,000)\n   - `accumulated_depreciation`: The total depreciation of the equipment ($35,000)\n\n2. We calculate the book value of the equipment by subtracting the accumulated depreciation from the acquisition cost.\n\n3. We then calculate the selling price by subtracting the loss on sale from the book value.\n\n4. Finally, we return the selling price.\n\nWhen you run this function, it will return the selling price of the equipment, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-301",
        "python_solution": "",
        "ground_truth": null,
        "question": "When the 95% confidence level VaR model of Chase Corporation is being backtested using the data from the last 750 trading days, how many anticipated irregularities would we expect to find?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_trading_days = 750\n    confidence_level = 0.95\n    \n    # Do math calculation to get the answer\n    expected_violations = total_trading_days * (1 - confidence_level)\n    \n    # return answer\n    return expected_violations\n```\n\nThis Python program calculates the expected number of irregularities (or violations) when backtesting a 95% confidence level Value at Risk (VaR) model using 750 trading days of data.\n\nHere's an explanation of the calculation:\n\n1. We start with 750 trading days.\n2. The confidence level is 95% or 0.95, which means we expect the VaR to be exceeded 5% of the time (1 - 0.95 = 0.05).\n3. To find the expected number of violations, we multiply the total number of trading days by the probability of a violation on any given day: 750 * 0.05 = 37.5\n\nThe function will return 37.5, which means we would expect to find approximately 37 to 38 irregularities when backtesting this VaR model over 750 trading days."
        ]
    },
    {
        "tables": [
            "| Country       | Currency   | Spot Exchange Ratea    | One Year Risk-free Rate | Expected Annual Inflation Rate |\n|:-------------:|:----------:|:----------------------:|:-----------------------:|:----------------------:|\n| United States | US$        | NA                     | 4.80%                   | 2.30%                  |\n| Canada        | C$         | 1.2138-1.2259          | 4.10%                   | 1.90%                  |\n| Brazil        | Real (BRL) | 2.3844-2.4082          | 8.80%                   | 6.30%                  |\n\naNumber of foreign currency units per one U.S. dollar."
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-302",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the bid-side quote for the CAD/BRL from a merchant is C$0.5250, what is the profit for Johnson from a US$1,000,000 initial investment in the triangular arbitrage opportunity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    usd_investment = 1000000\n    usd_cad_bid = 1.2138\n    usd_brl_ask = 2.4082\n    cad_brl_bid = 0.5250\n    \n    # Do math calculation to get the answer\n    \n    # Step 1: Convert USD to CAD\n    cad_amount = usd_investment * usd_cad_bid\n    \n    # Step 2: Convert CAD to BRL\n    brl_amount = cad_amount / cad_brl_bid\n    \n    # Step 3: Convert BRL back to USD\n    usd_final = brl_amount / usd_brl_ask\n    \n    # Calculate profit\n    profit = usd_final - usd_investment\n    \n    # return answer\n    return profit\n```\n\nThis Python program calculates the profit from a triangular arbitrage opportunity involving USD, CAD, and BRL. Here's a breakdown of the steps:\n\n1. We define the initial investment in USD and the relevant exchange rates.\n2. We convert the USD investment to CAD using the bid rate for USD/CAD.\n3. We then convert the CAD amount to BRL using the bid rate for CAD/BRL provided by the merchant.\n4. Finally, we convert the BRL amount back to USD using the ask rate for USD/BRL.\n5. The profit is calculated as the difference between the final USD amount and the initial investment.\n\nThe function will return the profit from this triangular arbitrage opportunity."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-303",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the study, 65% of all businesses possess a scanner. If we choose 8 businesses, what are the chances that five businesses would own a scanner?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    n = 8  # number of businesses chosen\n    k = 5  # number of businesses we want to have a scanner\n    p = 0.65  # probability of a business having a scanner\n\n    # Do math calculation to get the answer\n    from math import comb\n    \n    # Calculate the probability using the binomial probability formula\n    probability = comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n    \n    # Convert probability to percentage and round to 4 decimal places\n    answer = round(probability * 100, 4)\n    \n    # return answer\n    return answer\n```\n\nThis program uses the binomial probability formula to calculate the chance of exactly 5 out of 8 randomly chosen businesses owning a scanner, given that 65% of all businesses possess a scanner.\n\nThe formula used is:\n\nP(X = k) = C(n,k) * p^k * (1-p)^(n-k)\n\nWhere:\n- n is the number of trials (8 businesses in this case)\n- k is the number of successes (5 businesses with scanners)\n- p is the probability of success on each trial (0.65 or 65%)\n\nThe `comb` function from the `math` module is used to calculate the binomial coefficient C(n,k).\n\nThe result is then converted to a percentage and rounded to 4 decimal places for clarity."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-304",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume that the continuously compounded 5-year spot rate is 10% and the 4-year spot rate is 8.8%. Could you determine the 1-year forward rate four years in the future?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    r5 = 0.10  # 5-year spot rate (continuously compounded)\n    r4 = 0.088  # 4-year spot rate (continuously compounded)\n    t5 = 5  # 5-year time period\n    t4 = 4  # 4-year time period\n\n    # Do math calculation to get the answer\n    # Using the formula: (1 + r5)^5 = (1 + r4)^4 * (1 + f1)\n    # Where f1 is the 1-year forward rate four years in the future\n    left_side = (1 + r5)**t5\n    right_side = (1 + r4)**t4\n    \n    f1 = (left_side / right_side) - 1\n\n    # Convert to continuously compounded rate\n    f1_continuous = math.log(1 + f1)\n\n    # return answer\n    return f1_continuous\n\n```\n\nThis program calculates the 1-year forward rate four years in the future using the given 5-year and 4-year spot rates. Here's a breakdown of the steps:\n\n1. We define the variables for the given spot rates and time periods.\n2. We use the relationship between spot rates and forward rates to set up our equation.\n3. We solve for the forward rate (f1) using the equation.\n4. We convert the forward rate to a continuously compounded rate using the natural logarithm.\n5. Finally, we return the calculated forward rate.\n\nNote that we need to import the `math` module to use the `log` function. You can add `import math` at the beginning of your script if it's not already included.\n\nThe returned value will be the 1-year forward rate four years in the future, expressed as a continuously compounded rate."
        ]
    },
    {
        "tables": [
            "| Asset class     | Portfolio weight (%) | Benchmark weight (%) | Portfolio return (%) | Benchmark return (%) |\n|-----------------|----------------------|----------------------|----------------------|----------------------|\n| Domestic        | 45                   | 50                   | 12                   | 10                   |\n| International equity | 25           | 20                   | 15                   | 12                   |\n| Bonds           | 30                   | 30                   | 7                    | 8                    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-305",
        "python_solution": "",
        "ground_truth": null,
        "question": "The research team gathered the following data: Can you compute the value added for the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    domestic_weight = 0.45\n    international_weight = 0.25\n    bonds_weight = 0.30\n\n    domestic_benchmark = 0.50\n    international_benchmark = 0.20\n    bonds_benchmark = 0.30\n\n    domestic_return = 0.12\n    international_return = 0.15\n    bonds_return = 0.07\n\n    domestic_benchmark_return = 0.10\n    international_benchmark_return = 0.12\n    bonds_benchmark_return = 0.08\n\n    # Do math calculation to get the answer\n    portfolio_return = (domestic_weight * domestic_return +\n                        international_weight * international_return +\n                        bonds_weight * bonds_return)\n\n    benchmark_return = (domestic_benchmark * domestic_benchmark_return +\n                        international_benchmark * international_benchmark_return +\n                        bonds_benchmark * bonds_benchmark_return)\n\n    value_added = portfolio_return - benchmark_return\n\n    # return answer\n    return value_added * 100  # Convert to percentage\n```\n\nThis Python program calculates the value added for the portfolio based on the given data. It first defines the weights and returns for each asset class in both the portfolio and the benchmark. Then it calculates the overall portfolio return and benchmark return using weighted averages. Finally, it computes the value added by subtracting the benchmark return from the portfolio return and converts it to a percentage."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 22        |\n| 2009 | -25       |\n| 2010 | 11        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-306",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the yearly geometric mean return of a mutual fund based on the noted annual returns rates?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [1.22, 0.75, 1.11]  # Convert percentages to decimals and add 1\n    n_years = 3\n\n    # Do math calculation to get the answer\n    geometric_mean = 1\n    for r in returns:\n        geometric_mean *= r\n    \n    geometric_mean = (geometric_mean) ** (1/n_years) - 1  # Subtract 1 to get the percentage\n\n    # Convert to percentage and round to 2 decimal places\n    answer = round(geometric_mean * 100, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the geometric mean return of the mutual fund based on the given annual return rates. Here's how it works:\n\n1. We define the returns as a list, converting the percentages to decimals and adding 1 (e.g., 22% becomes 1.22).\n2. We set the number of years to 3.\n3. We calculate the geometric mean by multiplying all the returns together and then taking the nth root, where n is the number of years.\n4. We subtract 1 from the result to convert it back to a percentage.\n5. Finally, we multiply by 100 to express it as a percentage and round to 2 decimal places.\n\nThe function will return the yearly geometric mean return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-307",
        "python_solution": "",
        "ground_truth": null,
        "question": "Position 1 (FTSE 100 Futures Contract): Harmony Capital maintains a long position in a FTSE 100 futures contract that is set to mature in three months. The Nikkei 225 Stock Index has a continuously compounded dividend yield of 1.1%, and the current level of the stock index is 16,080. The constantly compounded yearly interest rate is 0.2996%. What is the prevailing no-arbitrage futures price of the FTSE 100 futures contract (Position 1)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 16080  # Current level of the stock index\n    r = 0.002996  # Continuously compounded yearly interest rate (0.2996%)\n    q = 0.011  # Continuously compounded dividend yield (1.1%)\n    T = 3 / 12  # Time to maturity in years (3 months = 1/4 year)\n\n    # Do math calculation to get the answer\n    F = S * math.exp((r - q) * T)\n\n    # return answer\n    return round(F, 2)\n```\n\nThis Python function calculates the no-arbitrage futures price for the FTSE 100 futures contract based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `S`: The current level of the stock index (16,080)\n   - `r`: The continuously compounded yearly interest rate (0.2996% = 0.002996)\n   - `q`: The continuously compounded dividend yield (1.1% = 0.011)\n   - `T`: Time to maturity in years (3 months = 3/12 = 0.25 years)\n\n2. We use the formula for the futures price with continuous compounding:\n   F = S * e^((r-q)T)\n\n3. We calculate this value and round it to two decimal places.\n\n4. The function returns the calculated futures price.\n\nNote: This function assumes that the `math` module is imported. If it's not, you should add `import math` at the beginning of your script."
        ]
    },
    {
        "tables": [
            "| Revenue        | £800,000 |\n| -------------- | -------- |\n| Variable cost  | £400,000 |\n| Fixed cost     | £200,000 |\n| Operating income | £200,000 |\n| Interest       | £60,000  |\n| Net income     | £140,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-308",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the company's total degree of leverage (DTL), based on the information provided for the company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 800000\n    variable_cost = 400000\n    fixed_cost = 200000\n    operating_income = 200000\n    interest = 60000\n    net_income = 140000\n\n    # Do math calculation to get the answer\n    \n    # Calculate Degree of Operating Leverage (DOL)\n    contribution_margin = revenue - variable_cost\n    dol = contribution_margin / operating_income\n    \n    # Calculate Degree of Financial Leverage (DFL)\n    dfl = operating_income / net_income\n    \n    # Calculate Total Degree of Leverage (DTL)\n    dtl = dol * dfl\n    \n    # return answer\n    return dtl\n```\n\nThis Python program calculates the Total Degree of Leverage (DTL) based on the information provided in the table. Here's a breakdown of the calculation:\n\n1. We first define all the given variables from the table.\n2. We calculate the Degree of Operating Leverage (DOL) by first finding the contribution margin (revenue - variable cost) and then dividing it by the operating income.\n3. We calculate the Degree of Financial Leverage (DFL) by dividing the operating income by the net income.\n4. Finally, we calculate the Total Degree of Leverage (DTL) by multiplying DOL and DFL.\n\nThe function returns the DTL, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "\n|                                             |                               |\n|---------------------------------------------|-------------------------------|\n| Cost of the equipment                       | UYP 1,200,000                 |\n| Estimated residual value                    | UYP 200,000                   |\n| Expected useful life                        | 8 years                       |\n| Total productive capacity                   | 800,000 units                 |\n| Production in FY 2009                       | 135,000 units                 |\n| Expected production for the next 7 years    | 95,000 units each year        |\n"
        ],
        "topic": "Accounting",
        "question_id": "test-309",
        "python_solution": "",
        "ground_truth": null,
        "question": "Carlos Perez from the Uruguayan company LUIGI Ltd., is calculating the depreciation expense of manufacturing machinery for the financial year closing on 31 December 2009. The machinery was purchased on 1 January 2009. Given the information gathered by Perez, what would be the amount of depreciation expense (in UYP) on LUIGI's profit and loss statement related to the manufacturing machinery, if LUIGI uses the units-of-production method? (Currency in Uruguayan pesos, UYP).",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 1200000\n    residual_value = 200000\n    total_capacity = 800000\n    production_2009 = 135000\n\n    # Do math calculation to get the answer\n    depreciable_amount = cost - residual_value\n    depreciation_per_unit = depreciable_amount / total_capacity\n    depreciation_expense = depreciation_per_unit * production_2009\n\n    # return answer\n    return depreciation_expense\n```\n\nThis Python program calculates the depreciation expense for LUIGI Ltd. using the units-of-production method. Here's a breakdown of the calculation:\n\n1. We define the relevant variables based on the given information.\n2. We calculate the depreciable amount by subtracting the residual value from the cost of the equipment.\n3. We determine the depreciation per unit by dividing the depreciable amount by the total productive capacity.\n4. Finally, we calculate the depreciation expense for 2009 by multiplying the depreciation per unit by the production in FY 2009.\n\nThe function will return the depreciation expense in Uruguayan pesos (UYP) for the financial year 2009."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-310",
        "python_solution": "",
        "ground_truth": null,
        "question": "A risk assessor is computing the VaR for a portfolio using a data set of 50 weekly returns. The average weekly return calculated from the sample is 8% with a standard deviation of 17%. Given that weekly returns are assumed to be independent and identically distributed, what is the standard deviation of the average weekly return?",
        "output": [
            "def solution():\n    # Define variables name and value\n    sample_size = 50\n    weekly_return_std = 0.17  # 17% standard deviation\n\n    # Do math calculation to get the answer\n    # Standard Error of the Mean (SEM) = σ / √n\n    # where σ is the population standard deviation and n is the sample size\n    std_error_of_mean = weekly_return_std / (sample_size ** 0.5)\n\n    # return answer\n    return std_error_of_mean\n\n```\n\nThis Python program calculates the standard deviation of the average weekly return, which is also known as the Standard Error of the Mean (SEM).\n\nHere's an explanation of the calculation:\n\n1. We define the sample size (50) and the standard deviation of weekly returns (17% or 0.17).\n\n2. The formula for the Standard Error of the Mean is: SEM = σ / √n\n   Where σ is the population standard deviation and n is the sample size.\n\n3. We assume that the sample standard deviation (17%) is a good estimate of the population standard deviation.\n\n4. We calculate the SEM by dividing the weekly return standard deviation by the square root of the sample size.\n\n5. The function returns this calculated value, which is the standard deviation of the average weekly return.\n\nThis solution assumes that weekly returns are indeed independent and identically distributed, as stated in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-311",
        "python_solution": "",
        "ground_truth": null,
        "question": "The preferred stock of Company N has a par value of $50 per share and it provides an annual dividend of 3.8%. If Nick thinks that it's reasonably priced at the market cost of $30, what is the capitalization rate of the preferred stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 50\n    annual_dividend_rate = 0.038\n    market_price = 30\n\n    # Do math calculation to get the answer\n    annual_dividend = par_value * annual_dividend_rate\n    capitalization_rate = (annual_dividend / market_price) * 100\n\n    # return answer\n    return capitalization_rate\n```\n\nThis Python program calculates the capitalization rate of the preferred stock based on the given information:\n\n1. We define the variables:\n   - `par_value`: The par value of the stock ($50)\n   - `annual_dividend_rate`: The annual dividend rate (3.8% or 0.038)\n   - `market_price`: The market price of the stock ($30)\n\n2. We calculate the annual dividend by multiplying the par value by the annual dividend rate.\n\n3. We then calculate the capitalization rate by dividing the annual dividend by the market price and multiplying by 100 to convert it to a percentage.\n\n4. Finally, we return the capitalization rate.\n\nThis program will return the capitalization rate as a percentage, which is what investors typically use to evaluate preferred stocks."
        ]
    },
    {
        "tables": [
            "markdown\n|                                      | 2015 | 2016 |\n|--------------------------------------|------|------|\n| **Cosmetic firm B.S for the ending 31 December** |      |      |\n| Cash                                 | 210  | 310  |\n| Accounts receivable                  |      | 31   |\n| Inventory                            | 60   | 80   |\n| Fixed assets                         | 200  | 200  |\n| Accumulated depreciation             |      | (35) |\n| Total assets                         | 470  | 586  |\n| Accounts payable                     | 105  | 162  |\n| Long-term debt                       | 235  | 273  |\n| Common stock                         | 130  | 130  |\n| Retained earnings                    |      | 21   |\n| Total liabilities and shareholders' equity | 470  | 586  |\n",
            "|                                  | US $/C$ |\n|----------------------------------|---------|\n| Rate on 31 December 2015         | 0.89    |\n|                                  |         |\n| Average rate in 2016             | 0.96    |\n| Weighted-average rate for inventory purchases | 0.94    |\n| Rate on 31 December 2016         | 0.94    |"
        ],
        "topic": "Accounting",
        "question_id": "test-312",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sephora is a US-operated company that specializes in the sale of beauty products. It has a Canadian branch, Glossy Inc, that only carries out operations in Canada. It was established on 31 December 2015, and Glossy Inc uses the US dollar as its main currency. Let's consider that fixed assets were purchased at the company's conceptual stage. The financial statement details for the years ending 2015 and 2016 are provided in the adjacent table: Can you compute the converted value of Glossy Inc's retained earnings as of 31 December 2016?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_2016 = 586\n    total_liabilities_2016 = 162 + 273  # Accounts payable + Long-term debt\n    common_stock = 130\n    exchange_rate_2016 = 0.94\n    \n    # Do math calculation to get the answer\n    \n    # Retained earnings in CAD\n    retained_earnings_cad = total_assets_2016 - total_liabilities_2016 - common_stock\n    \n    # Convert retained earnings to USD\n    retained_earnings_usd = retained_earnings_cad * exchange_rate_2016\n    \n    # Round to nearest whole number\n    answer = round(retained_earnings_usd)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the retained earnings of Glossy Inc as of 31 December 2016 in US dollars. Here's how it works:\n\n1. We define the relevant values from the provided financial statement and exchange rate table.\n\n2. We calculate the retained earnings in Canadian dollars by subtracting total liabilities and common stock from total assets for 2016.\n\n3. We then convert the retained earnings from Canadian dollars to US dollars using the exchange rate on 31 December 2016 (0.94).\n\n4. The result is rounded to the nearest whole number for simplicity.\n\n5. The calculated value is returned as the answer.\n\nThis program should return the converted value of Glossy Inc's retained earnings as of 31 December 2016 in US dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-313",
        "python_solution": "",
        "ground_truth": null,
        "question": "A data set with 25 entries has an average of 8 and a standard deviation of 15. What is the standard error of this data set's mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 25  # number of entries in the data set\n    standard_deviation = 15  # given standard deviation\n    \n    # Do math calculation to get the answer\n    standard_error = standard_deviation / (n ** 0.5)\n    \n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the standard error of the mean for the given data set. The standard error is calculated by dividing the standard deviation by the square root of the sample size. \n\nIn this case:\n- We have a sample size (n) of 25\n- The standard deviation is given as 15\n- We don't actually need the average (8) for this calculation\n\nThe formula for standard error is: SE = σ / √n, where σ is the standard deviation and n is the sample size.\n\nThe program calculates this and returns the result. When you run this function, it will return the standard error of the mean for the given data set."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-314",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of 2013, corporation X released 5-year bonds with a face value of $2,000,000. The market interest rate stands at 6%, and on each 31 December, a 5% coupon is paid on the bonds. What could be the calculated bonds payable at the time they were issued?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    market_rate = 0.06\n    coupon_rate = 0.05\n    years = 5\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    present_value_factor = (1 - (1 + market_rate) ** -years) / market_rate\n    present_value_coupons = coupon_payment * present_value_factor\n    present_value_principal = face_value / (1 + market_rate) ** years\n    bond_value = present_value_coupons + present_value_principal\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of the bonds at the time they were issued. Here's a breakdown of the calculation:\n\n1. We define the variables: face value, market interest rate, coupon rate, and the number of years.\n\n2. We calculate the annual coupon payment.\n\n3. We use the present value of an annuity formula to calculate the present value of all future coupon payments.\n\n4. We calculate the present value of the principal (face value) to be paid at maturity.\n\n5. We sum the present value of coupons and the present value of the principal to get the bond value.\n\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the calculated bonds payable at the time they were issued, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Net income | | $55 million |\n|---|---|---|\n| Depreciation | | $3 million |\n| Balance Sheet Item | 12/31/2016 | 12/31/2017 |\n| Accounts receivable | $18 million | $20 million |\n| Inventory | $22 million | $17 million |\n| Accounts payable | $6 million | $3 million |"
        ],
        "topic": "Accounting",
        "question_id": "test-315",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given financial reports for Company B, what is the value of the operating cash flow?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 55_000_000\n    depreciation = 3_000_000\n    \n    accounts_receivable_2016 = 18_000_000\n    accounts_receivable_2017 = 20_000_000\n    \n    inventory_2016 = 22_000_000\n    inventory_2017 = 17_000_000\n    \n    accounts_payable_2016 = 6_000_000\n    accounts_payable_2017 = 3_000_000\n\n    # Do math calculation to get the answer\n    change_in_accounts_receivable = accounts_receivable_2017 - accounts_receivable_2016\n    change_in_inventory = inventory_2017 - inventory_2016\n    change_in_accounts_payable = accounts_payable_2017 - accounts_payable_2016\n\n    operating_cash_flow = (net_income + depreciation - \n                           change_in_accounts_receivable - \n                           change_in_inventory + \n                           change_in_accounts_payable)\n\n    # return answer\n    return operating_cash_flow\n```\n\nThis Python program calculates the operating cash flow based on the given financial reports for Company B. Here's a breakdown of the calculation:\n\n1. We start with net income and add back depreciation.\n2. We subtract the increase in accounts receivable (or add the decrease).\n3. We subtract the increase in inventory (or add the decrease).\n4. We add the increase in accounts payable (or subtract the decrease).\n\nThe result gives us the operating cash flow for the company."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-316",
        "python_solution": "",
        "ground_truth": null,
        "question": "A trader takes a short stance on a gold futures contract at a price of USD 294.20. Each contract oversees 100 troy ounces. The starting margin stands at USD 3,200, while the sustaining margin is set at USD 2,900. After the initial day, the futures price decreases to USD 286.6. What is the sum of the variation margin at the closure of the first day?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 294.20\n    final_price = 286.6\n    contract_size = 100  # troy ounces\n    \n    # Do math calculation to get the answer\n    price_change = initial_price - final_price\n    variation_margin = price_change * contract_size\n    \n    # return answer\n    return variation_margin\n```\n\nThis Python program calculates the variation margin for a short position in a gold futures contract. Here's how it works:\n\n1. We define the initial price (294.20), the final price after the first day (286.6), and the contract size (100 troy ounces).\n\n2. We calculate the price change by subtracting the final price from the initial price. Since this is a short position, a decrease in price is beneficial to the trader.\n\n3. The variation margin is calculated by multiplying the price change by the contract size. This gives us the total dollar amount of the variation margin.\n\n4. The function returns this variation margin.\n\nNote that the starting margin and sustaining margin are not used in this calculation, as they don't affect the variation margin. The variation margin is simply the change in the contract's value over the given period."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-317",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a price-weighted index made up of securities XYZ, MNOP, and QRST, an analyst has collected the following data: The starting and ending prices (in €) and total dividends (in €) are as follows: XYZ with 25.00 to 27.00 along with 1.00 in dividends, MNOP with 35.00 to 25.00 and 1.50 in dividends, and QRST from 15.00 to 16.00 with 1.00 in dividends. What is the price return of the index?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_prices = [25.00, 35.00, 15.00]\n    final_prices = [27.00, 25.00, 16.00]\n    \n    # Do math calculation to get the answer\n    initial_index_value = sum(initial_prices)\n    final_index_value = sum(final_prices)\n    \n    price_return = (final_index_value - initial_index_value) / initial_index_value\n    \n    # Convert to percentage and round to 4 decimal places\n    price_return_percentage = round(price_return * 100, 4)\n    \n    # return answer\n    return price_return_percentage\n\n```\n\nThis program calculates the price return of the price-weighted index based on the given information. Here's how it works:\n\n1. We define two lists: `initial_prices` and `final_prices`, containing the starting and ending prices of the three securities.\n\n2. We calculate the initial and final index values by summing up the prices in each list. For a price-weighted index, the index value is simply the sum of the prices of its components.\n\n3. We calculate the price return using the formula: (Final Index Value - Initial Index Value) / Initial Index Value\n\n4. We convert the price return to a percentage by multiplying by 100 and round it to 4 decimal places for precision.\n\n5. Finally, we return the price return as a percentage.\n\nNote that this calculation focuses solely on the price return, disregarding the dividends. The price return only considers the change in prices of the securities in the index."
        ]
    },
    {
        "tables": [
            "| Operating profit margin | 17.5% |\n|-------------------------|-------|\n| Net profit margin       | 11.7% |\n| Total asset turnover    | 0.89 times |\n| Return on assets (ROA)  | 10.4% |\n| Financial leverage      | 1.46  |\n| Debt to equity          | 0.46  |"
        ],
        "topic": "Accounting",
        "question_id": "test-318",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the return on equity (ROE) of the business that a financial examiner has determined?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    roa = 0.104  # Return on assets (ROA) is 10.4%\n    financial_leverage = 1.46\n\n    # Do math calculation to get the answer\n    roe = roa * financial_leverage\n\n    # return answer\n    return roe * 100  # Convert to percentage\n```\n\nThis Python program calculates the Return on Equity (ROE) using the given information. Here's how it works:\n\n1. We define the variables:\n   - `roa` is set to 0.104 (10.4% as given in the table)\n   - `financial_leverage` is set to 1.46 (as given in the table)\n\n2. To calculate ROE, we use the formula: ROE = ROA * Financial Leverage\n\n3. We multiply ROA by the financial leverage to get ROE.\n\n4. Finally, we return the result multiplied by 100 to convert it to a percentage.\n\nWhen you run this function, it will return the ROE as a percentage. The financial examiner would have determined this ROE based on the given financial ratios."
        ]
    },
    {
        "tables": [
            "| Interest Rate Assumption | Present Value of Liabilities |\n|-------------------------|-----------------------------|\n| 8%                      | $ 436.2 million             |\n| 9%                      | $ 357.5 million             |\n| 10%                     | $ 298.1 million             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-319",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is a manager of a retirement fund who is interested in assessing the responsiveness of his retirement obligations to fluctuations in market interest rates. Supposing the base rate is 9%, with a 100 basis point rise in rates up to 10%, and a 100 basis point decrease in rates down to 8%. The associated data is given as follows: The effective duration of the retirement fund's obligations is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    base_rate = 0.09  # 9%\n    base_value = 357.5  # million dollars\n    up_rate = 0.10  # 10%\n    up_value = 298.1  # million dollars\n    down_rate = 0.08  # 8%\n    down_value = 436.2  # million dollars\n\n    # Do math calculation to get the answer\n    percent_change_up = (up_value - base_value) / base_value\n    percent_change_down = (down_value - base_value) / base_value\n    \n    rate_change = 0.01  # 100 basis points = 1%\n    \n    duration_up = -percent_change_up / rate_change\n    duration_down = -percent_change_down / rate_change\n    \n    effective_duration = (duration_up + duration_down) / 2\n\n    # return answer\n    return effective_duration\n```\n\nThis Python program calculates the effective duration of the retirement fund's obligations based on the given data. Here's a breakdown of the calculation:\n\n1. We define the variables for the base rate (9%), and the values at 8%, 9%, and 10% interest rates.\n\n2. We calculate the percentage change in value for both a 100 basis point increase and decrease in rates.\n\n3. We calculate the duration for both the upward and downward rate changes using the formula: Duration = -(%ΔPrice / ΔYield)\n\n4. The effective duration is the average of these two durations.\n\nThe program will return the effective duration, which measures the sensitivity of the retirement fund's obligations to interest rate changes."
        ]
    },
    {
        "tables": [
            "|                     | $ millions |\n|---------------------|------------|\n| Sales               | 4,800      |\n| Cost of goods sold  | 2,880      |\n| Purchases           | 2,940      |\n| Average receivables | 625        |\n| Average inventory   | 710        |\n| Average payables    | 145        |"
        ],
        "topic": "Accounting",
        "question_id": "test-320",
        "python_solution": "",
        "ground_truth": null,
        "question": "The details for a particular business are given. What is the cash conversion cycle (in days) of this business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 4800\n    cogs = 2880\n    purchases = 2940\n    avg_receivables = 625\n    avg_inventory = 710\n    avg_payables = 145\n    \n    # Do math calculation to get the answer\n    \n    # Calculate Days Sales Outstanding (DSO)\n    dso = (avg_receivables / sales) * 365\n    \n    # Calculate Days Inventory Outstanding (DIO)\n    dio = (avg_inventory / cogs) * 365\n    \n    # Calculate Days Payables Outstanding (DPO)\n    dpo = (avg_payables / purchases) * 365\n    \n    # Calculate Cash Conversion Cycle (CCC)\n    ccc = dso + dio - dpo\n    \n    # return answer\n    return round(ccc, 2)\n```\n\nThis Python program calculates the Cash Conversion Cycle (CCC) for the given business details. Here's a breakdown of the calculation:\n\n1. We define all the variables given in the table.\n2. We calculate Days Sales Outstanding (DSO) by dividing average receivables by sales and multiplying by 365.\n3. We calculate Days Inventory Outstanding (DIO) by dividing average inventory by cost of goods sold and multiplying by 365.\n4. We calculate Days Payables Outstanding (DPO) by dividing average payables by purchases and multiplying by 365.\n5. The Cash Conversion Cycle is then calculated as DSO + DIO - DPO.\n6. The result is rounded to two decimal places for precision.\n\nThis program will return the Cash Conversion Cycle in days when executed."
        ]
    },
    {
        "tables": [
            "| Expected Security Standard Deviation (%) | Beta |\n| --- | --- |\n| Security 1 25 | 1.50 |\n| Security 2 15 | 1.40 |\n| Security 3 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-321",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the data collected by the researcher, using the capital asset pricing model, what is the predicted return for Investment A if the anticipated market risk premium is 6% and the risk-free rate is 3%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_risk_premium = 0.06  # 6%\n    risk_free_rate = 0.03  # 3%\n    beta = 1.50  # Beta for Security 1 (assuming this is Investment A)\n\n    # Do math calculation to get the answer\n    # Using CAPM formula: Expected Return = Risk-free rate + Beta * Market Risk Premium\n    expected_return = risk_free_rate + (beta * market_risk_premium)\n\n    # Convert to percentage\n    expected_return_percentage = expected_return * 100\n\n    # return answer\n    return expected_return_percentage\n```\n\nThis Python program calculates the expected return for Investment A using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the solution:\n\n1. We define the given variables:\n   - Market risk premium: 6% (0.06 in decimal form)\n   - Risk-free rate: 3% (0.03 in decimal form)\n   - Beta: 1.50 (assuming Security 1 is Investment A, as it has the highest beta)\n\n2. We use the CAPM formula to calculate the expected return:\n   Expected Return = Risk-free rate + (Beta * Market Risk Premium)\n\n3. We multiply the result by 100 to convert it to a percentage.\n\n4. The function returns the expected return as a percentage.\n\nThis program will calculate and return the predicted return for Investment A based on the given information and the CAPM model."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-322",
        "python_solution": "",
        "ground_truth": null,
        "question": "When a business releases face value bonds worth €10,000,000 with a 10-year term dated 1 January 2015, the market interest rate of bonds with similar level of risk and terms stands at 6%. These bonds provide a yearly interest rate of 7%, paid out on December 31. Utilizing the effective interest rate method, what would be the interest cost on 31 December 2015?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    coupon_rate = 0.07\n    market_rate = 0.06\n    years = 10\n\n    # Do math calculation to get the answer\n    annual_coupon_payment = face_value * coupon_rate\n    present_value = annual_coupon_payment * (1 - (1 + market_rate)**-years) / market_rate + face_value / (1 + market_rate)**years\n    bond_carrying_value = round(present_value, 2)\n    interest_expense = round(bond_carrying_value * market_rate, 2)\n    interest_paid = annual_coupon_payment\n    amortization = interest_paid - interest_expense\n\n    # return answer\n    return interest_expense\n```\n\nThis Python program calculates the interest cost for the given bond scenario using the effective interest rate method. Here's a breakdown of the steps:\n\n1. We define the variables: face value of the bond, coupon rate, market rate, and term in years.\n\n2. We calculate the annual coupon payment and the present value of the bond using the market rate.\n\n3. The bond's carrying value is set to the present value (rounded to 2 decimal places).\n\n4. The interest expense for the first year is calculated by multiplying the bond's carrying value by the market rate.\n\n5. We calculate the interest paid (which is the annual coupon payment) and the amortization (difference between interest paid and interest expense).\n\n6. Finally, we return the interest expense, which is the answer to the question.\n\nThis program will return the interest cost for December 31, 2015, using the effective interest rate method."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-323",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith investigates a technique driven by an event, precisely a potential fusion of B Corporation and U, Inc. B has proposed to acquire Unicorn through a stock-for-stock agreement: the offer ratio is 2 shares of B for every 3 Unicorn shares. B's trading price was €50 per share before the announcement of fusion, but it decreased to 45 euros per share after the declaration. Before the announcement, U's transaction price per share was 15 euros, and it appreciated to €20 per share with the expectation of the fusion deal getting necessary permissions and successfully concluding. If we assume the fusion between B and U comes to a successful close, what will be the result of Smith’s merger arbitrage trade if he purchases 24,000 U shares at a rate of 20 euros per share, and goes short on 16,000 B shares at a rate of 45 euros per share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    u_shares_bought = 24000\n    u_price_per_share = 20\n    b_shares_shorted = 16000\n    b_price_per_share = 45\n    exchange_ratio = 2/3  # 2 B shares for 3 U shares\n\n    # Do math calculation to get the answer\n    cost_u_shares = u_shares_bought * u_price_per_share\n    revenue_b_shares_short = b_shares_shorted * b_price_per_share\n\n    b_shares_received = u_shares_bought * exchange_ratio\n    cost_to_cover_short = b_shares_received * b_price_per_share\n\n    profit = revenue_b_shares_short - cost_u_shares + cost_to_cover_short\n\n    # return answer\n    return profit\n```\n\nThis Python program calculates the profit from Smith's merger arbitrage trade. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the cost of buying U shares and the revenue from shorting B shares.\n3. We calculate how many B shares Smith will receive based on the exchange ratio.\n4. We calculate the cost to cover the short position with the B shares received from the merger.\n5. The final profit is calculated by subtracting the cost of U shares from the revenue of shorting B shares, and adding the cost to cover the short position (which is effectively a gain in this case).\n\nThe function will return the profit (or loss) from this merger arbitrage trade."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-324",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's assume that X and Y are random variables, each adheres to a standard normal distribution, and the covariance between X and Y is 0.35. What is the variance of (3X+2Y)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    var_x = 1  # Variance of standard normal distribution\n    var_y = 1  # Variance of standard normal distribution\n    cov_xy = 0.35  # Given covariance between X and Y\n\n    # Do math calculation to get the answer\n    # Var(aX + bY) = a^2 * Var(X) + b^2 * Var(Y) + 2ab * Cov(X,Y)\n    var_3x_plus_2y = (3**2 * var_x) + (2**2 * var_y) + (2 * 3 * 2 * cov_xy)\n\n    # return answer\n    return var_3x_plus_2y\n```\n\nThis Python program calculates the variance of (3X+2Y) given the information provided:\n\n1. X and Y are random variables following standard normal distribution, which means their variances are 1.\n2. The covariance between X and Y is 0.35.\n\nThe program uses the formula for the variance of a linear combination of random variables:\n\nVar(aX + bY) = a^2 * Var(X) + b^2 * Var(Y) + 2ab * Cov(X,Y)\n\nWhere a = 3 and b = 2 in this case.\n\nThe function will return the calculated variance as the answer."
        ]
    },
    {
        "tables": [
            "| Date        | 6-month LIBOR |\n|-------------|---------------|\n| Sep 7, 2016 | 2.46%         |\n| Mar 7, 2017 | 1.13%         |\n| Sept 7, 2017| 0.79%         |\n| Mar 7, 2018 | 0.42%         |\n| Sep 7, 2018 | 0.56%         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-325",
        "python_solution": "",
        "ground_truth": null,
        "question": "On September 7, 2016, Bank XYZ initiated a 2-year interest rate swap contract. Per the terms of the swap, Bank XYZ was slated to receive a fixed 4.10% rate while paying a rate equivalent to LIBOR plus 1.30% on a principal amount of USD 7.5 million. Payments were scheduled biannually. The table below presents the actual annual 6-month LIBOR rates measured over the contract's 2-year lifespan: Assuming there was no default, what amount did Bank XYZ receive on September 7, 2018?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 7500000  # USD 7.5 million\n    fixed_rate = 0.0410  # 4.10%\n    libor_spread = 0.0130  # 1.30%\n    payments_per_year = 2  # biannual payments\n    years = 2  # 2-year contract\n\n    libor_rates = [0.0246, 0.0113, 0.0079, 0.0042, 0.0056]  # LIBOR rates from the table\n\n    # Do math calculation to get the answer\n    fixed_payment = (principal * fixed_rate) / payments_per_year\n    total_received = 0\n\n    for i in range(payments_per_year * years):\n        libor_payment = (principal * (libor_rates[i] + libor_spread)) / payments_per_year\n        net_received = fixed_payment - libor_payment\n        total_received += net_received\n\n    # return answer\n    return round(total_received, 2)\n```\n\nThis program calculates the total amount Bank XYZ received over the 2-year period of the interest rate swap contract. Here's how it works:\n\n1. We define the principal amount, fixed rate, LIBOR spread, number of payments per year, and contract duration.\n\n2. We create a list of the LIBOR rates from the table provided.\n\n3. We calculate the fixed payment amount that Bank XYZ receives each period.\n\n4. We iterate through each payment period (4 times, as it's biannual over 2 years):\n   - Calculate the floating payment based on LIBOR + spread for that period\n   - Calculate the net amount received (fixed payment - floating payment)\n   - Add this to the total received\n\n5. Finally, we return the total amount received, rounded to 2 decimal places.\n\nThis program will give you the total amount Bank XYZ received over the entire 2-year period of the swap contract, assuming no default."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-326",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith is a tax consultant who gives tax planning guidance to individual clients. A client of Smith's is Rose who presently has $10 million invested in a tax-deferred account that generates 8% every year. Rose will offload the investment after five years, collect the sales revenue all at once (withdrawals are taxed at 20%), and use the funds to buy a mansion. Rose requested Smith to estimate the after-tax wealth available after five years. What will be the after-tax wealth in Rose's tax-deferred account at the end of the five years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000\n    annual_return_rate = 0.08\n    investment_period = 5\n    tax_rate = 0.20\n\n    # Do math calculation to get the answer\n    # Calculate the total value before tax\n    final_value_before_tax = initial_investment * (1 + annual_return_rate) ** investment_period\n    \n    # Calculate the tax amount\n    tax_amount = (final_value_before_tax - initial_investment) * tax_rate\n    \n    # Calculate the after-tax wealth\n    after_tax_wealth = final_value_before_tax - tax_amount\n\n    # return answer\n    return after_tax_wealth\n```\n\nThis Python program calculates the after-tax wealth in Rose's tax-deferred account at the end of five years. Here's how it works:\n\n1. We define the initial variables:\n   - `initial_investment`: $10 million\n   - `annual_return_rate`: 8% (0.08 in decimal form)\n   - `investment_period`: 5 years\n   - `tax_rate`: 20% (0.20 in decimal form)\n\n2. We calculate the final value before tax using the compound interest formula:\n   `final_value_before_tax = initial_investment * (1 + annual_return_rate) ** investment_period`\n\n3. We calculate the tax amount, which is applied only to the gains:\n   `tax_amount = (final_value_before_tax - initial_investment) * tax_rate`\n\n4. Finally, we calculate the after-tax wealth by subtracting the tax amount from the final value before tax:\n   `after_tax_wealth = final_value_before_tax - tax_amount`\n\n5. The function returns the `after_tax_wealth`, which is the answer to the question.\n\nThis program will give you the exact after-tax wealth available to Rose after five years."
        ]
    },
    {
        "tables": [
            "| Statistic | Value |\n| --- | --- |\n| Covariance between market return and security return [Cov(Rj,Rm)] | 0.01104 |\n| Correlation coefficient between market return and security return (pi,m) | 0.3 |\n| Standard deviation of market return (σm) | 0.16 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-327",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the beta of security x, βx, considering the following information about a stock market index y and security x?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cov_rj_rm = 0.01104\n    correlation_coefficient = 0.3\n    std_dev_market = 0.16\n    \n    # Do math calculation to get the answer\n    # Beta is defined as Cov(Rj,Rm) / Var(Rm)\n    # Var(Rm) is the square of standard deviation of market return\n    var_rm = std_dev_market ** 2\n    beta_x = cov_rj_rm / var_rm\n    \n    # return answer\n    return beta_x\n```\n\nThis Python function calculates the beta of security x using the provided information. Here's a breakdown of the calculation:\n\n1. We define the given variables: covariance between market return and security return, correlation coefficient, and standard deviation of market return.\n\n2. To calculate beta, we use the formula: β = Cov(Rj,Rm) / Var(Rm)\n   Where Var(Rm) is the variance of market return, which is the square of the standard deviation of market return.\n\n3. We calculate the variance of market return by squaring the standard deviation.\n\n4. Finally, we calculate beta by dividing the covariance by the variance of market return.\n\n5. The function returns the calculated beta value.\n\nThis solution directly uses the covariance value provided, which is the most straightforward approach given the information in the table."
        ]
    },
    {
        "tables": [
            "| Portfolio Number | Expected Nominal Returns | Standard Deviation | Sharpe Ratio |\n|------------------|--------------------------|--------------------|--------------|\n| 1                | 3%                       | 2.50%              | 0.4          |\n| 2                | 4%                       | 4.44%              | 0.45         |\n| 3                | 5%                       | 6%                 | 0.5          |\n| 4                | 6%                       | 6.15%              | 0.65         |\n| 5                | 7%                       | 8.33%              | 0.6          |\n| 6                | 8%                       | 10.90%             | 0.55         |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-328",
        "python_solution": "",
        "ground_truth": null,
        "question": "The overall investment goal of XY endowment is to sustain the real buying power of its portfolio after disbursements. The risk-free rate stands at 2%. An anticipated inflation rate is 1.5%. The cost of returns on earnings investment is 50 bp. XY aims at a 3% annual distribution of assets. Exhibit 1 presents key findings from a mean-variance optimization where the weights of the asset class are bound to be non-negative. To reach XY’s expected return, what is the most suitable percentage for XY’s investment in the corner portfolio?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.02\n    inflation_rate = 0.015\n    cost_of_investment = 0.005  # 50 bp = 0.5% = 0.005\n    annual_distribution = 0.03\n    \n    # Calculate the required return\n    required_return = risk_free_rate + inflation_rate + cost_of_investment + annual_distribution\n    \n    # Define the corner portfolios\n    portfolios = [\n        {\"return\": 0.03, \"std_dev\": 0.0250, \"sharpe\": 0.4},\n        {\"return\": 0.04, \"std_dev\": 0.0444, \"sharpe\": 0.45},\n        {\"return\": 0.05, \"std_dev\": 0.06, \"sharpe\": 0.5},\n        {\"return\": 0.06, \"std_dev\": 0.0615, \"sharpe\": 0.65},\n        {\"return\": 0.07, \"std_dev\": 0.0833, \"sharpe\": 0.6},\n        {\"return\": 0.08, \"std_dev\": 0.1090, \"sharpe\": 0.55}\n    ]\n    \n    # Find the two portfolios that bracket the required return\n    lower_portfolio = None\n    upper_portfolio = None\n    \n    for i in range(len(portfolios)):\n        if portfolios[i][\"return\"] > required_return:\n            upper_portfolio = portfolios[i]\n            lower_portfolio = portfolios[i-1] if i > 0 else None\n            break\n    \n    if not upper_portfolio or not lower_portfolio:\n        return None  # Required return is out of range\n    \n    # Calculate the percentage of investment in the upper portfolio\n    total_return_difference = upper_portfolio[\"return\"] - lower_portfolio[\"return\"]\n    required_return_difference = required_return - lower_portfolio[\"return\"]\n    \n    percentage_in_upper_portfolio = required_return_difference / total_"
        ]
    },
    {
        "tables": [
            "|   | Cumulative Distribution Function |\n|---|---|\n| Y=y  | F(y)=P(Y≤y) |\n| 20 | 0.08 |\n| 21 | 0.20 |\n| 22 | 0.30 |\n| 23 | 0.55 |\n| 24 | 0.75 |\n| 25 | 1.00 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-329",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that 'Z' is a discrete random variable, and the set of potential Z values constitutes Z= {20,21,22,23,24,25}. With the cumulative distribution function's probable value denoted in the chart, can you tell the likelihood that Z equals either 23 or 25?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cdf = {\n        20: 0.08,\n        21: 0.20,\n        22: 0.30,\n        23: 0.55,\n        24: 0.75,\n        25: 1.00\n    }\n    \n    # Do math calculation to get the answer\n    # P(Z=23) = F(23) - F(22)\n    p_23 = cdf[23] - cdf[22]\n    \n    # P(Z=25) = F(25) - F(24)\n    p_25 = cdf[25] - cdf[24]\n    \n    # P(Z=23 or Z=25) = P(Z=23) + P(Z=25)\n    answer = p_23 + p_25\n    \n    # return answer\n    return answer\n```\n\nThis Python function calculates the probability that Z equals either 23 or 25 based on the given cumulative distribution function (CDF).\n\nHere's how it works:\n\n1. We define a dictionary `cdf` that represents the cumulative distribution function given in the table.\n\n2. To find P(Z=23), we subtract F(22) from F(23). This gives us the probability mass for Z=23.\n\n3. Similarly, for P(Z=25), we subtract F(24) from F(25).\n\n4. The probability of Z being either 23 or 25 is the sum of these individual probabilities.\n\n5. The function returns this sum as the answer.\n\nThis approach correctly calculates the desired probability based on the properties of the cumulative distribution function for discrete random variables."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-330",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation engages in a 2 × 5 receive-fixed FRA that has an advanced set, advanced settled with a notional amount of $100,000,000. The correct discount rate for the FRA settlement cash flows stands at 1.5%. Following 60 days, the 90-day Libor is 0.80%, and the 60-day Libor is 0.7%. If the original price of the FRA was pegged at 1.20%, what will be the settlement payment received for the 2 × 5 FRA?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_amount = 100000000\n    discount_rate = 0.015\n    libor_90_day = 0.0080\n    libor_60_day = 0.0070\n    original_fra_price = 0.0120\n    days_in_period = 90\n\n    # Do math calculation to get the answer\n    fra_rate = libor_90_day\n    forward_rate = (fra_rate - original_fra_price) / (1 + fra_rate * days_in_period / 360)\n    settlement_amount = notional_amount * forward_rate * (days_in_period / 360)\n    present_value_factor = 1 / (1 + discount_rate * days_in_period / 360)\n    settlement_payment = settlement_amount * present_value_factor\n\n    # return answer\n    return round(settlement_payment, 2)\n```\n\nThis Python program calculates the settlement payment received for the 2 × 5 FRA based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the forward rate using the formula: (FRA rate - Original FRA price) / (1 + FRA rate * days/360)\n3. We then calculate the settlement amount: Notional amount * Forward rate * (days/360)\n4. We apply a present value factor to account for the discount rate.\n5. Finally, we calculate the settlement payment by multiplying the settlement amount by the present value factor.\n\nThe function returns the rounded settlement payment to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-331",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager possesses five bonds in his holdings, and each bond carries a single-year default risk of 17%. The default occurrence for each bond is autonomous. What are the odds that only two bonds will default within the coming year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 5  # total number of bonds\n    p = 0.17  # probability of default for each bond\n    k = 2  # number of bonds we want to default\n\n    # Do math calculation to get the answer\n    from math import comb\n\n    # Calculate the probability using binomial probability formula\n    probability = comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n\n    # Convert probability to percentage\n    answer = probability * 100\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the probability that exactly two bonds out of five will default within the coming year, given that each bond has a 17% chance of defaulting independently.\n\nHere's a breakdown of the solution:\n\n1. We define the variables:\n   - `n = 5` (total number of bonds)\n   - `p = 0.17` (probability of default for each bond)\n   - `k = 2` (number of bonds we want to default)\n\n2. We use the binomial probability formula to calculate the probability:\n   P(X = k) = C(n,k) * p^k * (1-p)^(n-k)\n   \n   Where:\n   - C(n,k) is the number of ways to choose k items from n items (calculated using the `comb` function from the `math` module)\n   - p^k is the probability of k successes\n   - (1-p)^(n-k) is the probability of (n-k) failures\n\n3. We multiply the result by 100 to convert it to a percentage.\n\n4. Finally, we return the answer.\n\nThis program will return the percentage chance that exactly two out of the five bonds will default within the coming year."
        ]
    },
    {
        "tables": [
            "| Date | Closing Price |\n|------|---------------|\n| May  | 132           |\n| June | 145           |\n| July | 159           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-332",
        "python_solution": "",
        "ground_truth": null,
        "question": "The stocks of BBB corporation have experienced shifting closing prices over the past 3 months: From May to July, what is the continuously compounded return of BBB corporation's stocks?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 132  # May closing price\n    final_price = 159    # July closing price\n    \n    # Do math calculation to get the answer\n    import math\n    \n    continuously_compounded_return = math.log(final_price / initial_price)\n    \n    # return answer\n    return continuously_compounded_return\n```\n\nThis Python program calculates the continuously compounded return for BBB corporation's stocks from May to July. Here's how it works:\n\n1. We define the initial price (May closing price) and final price (July closing price) based on the given table.\n\n2. We use the formula for continuously compounded return: ln(Final Price / Initial Price)\n   - The `math.log()` function in Python calculates the natural logarithm, which is equivalent to ln in finance calculations.\n\n3. The calculated continuously compounded return is then returned as the answer.\n\nThis program will return the continuously compounded return as a decimal. To convert it to a percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-333",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 250 trading days in a year and the daily returns are independently and identically distributed, what is the highest number of daily losses over a 10-year period exceeding the 1-day 99.5% VaR that would still indicate the model being correctly calibrated, for a risk manager who is backtesting an organization's VaR model at the 95% confidence level?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    trading_days_per_year = 250\n    years = 10\n    total_trading_days = trading_days_per_year * years\n    var_confidence_level = 0.995\n    expected_exceedances_per_day = 1 - var_confidence_level\n    expected_total_exceedances = total_trading_days * expected_exceedances_per_day\n    backtesting_confidence_level = 0.95\n\n    # Do math calculation to get the answer\n    from scipy.stats import poisson\n\n    answer = poisson.ppf(backtesting_confidence_level, expected_total_exceedances)\n\n    # return answer\n    return int(answer)\n```\n\nThis program calculates the highest number of daily losses exceeding the 1-day 99.5% VaR over a 10-year period that would still indicate the model being correctly calibrated at a 95% confidence level.\n\nHere's a breakdown of the calculation:\n\n1. We calculate the total number of trading days over 10 years.\n2. We determine the expected number of exceedances per day based on the VaR confidence level.\n3. We calculate the expected total number of exceedances over the 10-year period.\n4. We use the Poisson distribution to find the critical value at the 95% confidence level for backtesting.\n5. The answer is rounded down to the nearest integer, as we're looking for the highest number of losses that still indicates correct calibration.\n\nNote: This program requires the SciPy library for the Poisson distribution calculation. Make sure to have it installed (pip install scipy) before running the program."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-334",
        "python_solution": "",
        "ground_truth": null,
        "question": "Eight weeks prior, an investor bought a stock forward contract with a maturity of three months. The starting forward price was $108.5, but the present forward price is $107.6. The risk-free rate remains 3%. What is the value of this forward contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_forward_price = 108.5\n    current_forward_price = 107.6\n    risk_free_rate = 0.03\n    time_elapsed = 8 / 52  # 8 weeks out of 52 weeks in a year\n    time_to_maturity = 3 / 12 - time_elapsed  # 3 months minus time elapsed\n\n    # Do math calculation to get the answer\n    value = (initial_forward_price - current_forward_price) * math.exp(-risk_free_rate * time_to_maturity)\n\n    # return answer\n    return value\n```\n\nThis Python function calculates the value of the forward contract based on the given information. Here's a breakdown of the calculation:\n\n1. We define the initial forward price, current forward price, and risk-free rate.\n2. We calculate the time elapsed (8 weeks converted to years) and the remaining time to maturity (3 months minus the elapsed time, also in years).\n3. The value of the forward contract is calculated using the formula:\n   Value = (Initial Forward Price - Current Forward Price) * e^(-r * t)\n   Where r is the risk-free rate and t is the time to maturity.\n4. The calculated value is then returned.\n\nNote that this calculation assumes continuous compounding for the discounting factor. The result will be the value of the forward contract in the same currency units as the forward prices (presumably dollars in this case)."
        ]
    },
    {
        "tables": [
            "|               |           | Actual training |      |\n|---------------|-----------|-----------------|------|\n|               |           | results         |      |\n| Predicted     |           | Class \"1\"       | Class \"0\"     |\n| Results       | Class \"1\" | TP=182          | FP=52 |\n|               | Class \"0\" | FN=31           | TN=96 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-335",
        "python_solution": "",
        "ground_truth": null,
        "question": "After finalizing the chosen features, Thompson executes a model on the training set which identifies the text as either positive sentiment (Class “1”) or negative sentiment (Class “0”). Subsequently, she assesses its effectiveness through error analysis. Referring to Exhibit 1, what is the precision metric of the model as per the given confusion matrix?",
        "output": [
            "Here's the Python program to calculate the precision metric based on the given confusion matrix:\n\n```python\ndef solution():\n    # Define variables name and value\n    true_positives = 182\n    false_positives = 52\n    \n    # Do math calculation to get the answer\n    precision = true_positives / (true_positives + false_positives)\n    \n    # return answer\n    return precision\n```\n\nThis program calculates the precision metric, which is defined as:\n\nPrecision = True Positives / (True Positives + False Positives)\n\nIn this case:\n- True Positives (TP) = 182\n- False Positives (FP) = 52\n\nThe function will return the calculated precision value, which represents the proportion of correct positive predictions (Class \"1\") out of all positive predictions made by the model."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-336",
        "python_solution": "",
        "ground_truth": null,
        "question": "A shareholder is evaluating the market risk of Orion Portfolio. The portfolio delivers an anticipated annual return of 6.8% and a volatility of 7.0%, and it is benchmarked in contrast with the S&P 500 Index. The shareholder presupposes that the S&P 500 Index has a projected annual return of 7.2% and a volatility of 8.2%. In accordance with the CAPM, if the risk-free rate is 2.2% per annum, what is the beta of Orion Portfolio?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    orion_return = 0.068\n    orion_volatility = 0.070\n    sp500_return = 0.072\n    sp500_volatility = 0.082\n    risk_free_rate = 0.022\n\n    # Do math calculation to get the answer\n    market_risk_premium = sp500_return - risk_free_rate\n    orion_risk_premium = orion_return - risk_free_rate\n    \n    # Calculate beta using CAPM formula\n    beta = orion_risk_premium / market_risk_premium\n\n    # return answer\n    return beta\n```\n\nThis program calculates the beta of Orion Portfolio using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the calculation:\n\n1. We define the given variables: Orion's return and volatility, S&P 500's return and volatility, and the risk-free rate.\n\n2. We calculate the market risk premium (S&P 500 return minus risk-free rate) and Orion's risk premium (Orion return minus risk-free rate).\n\n3. Using the CAPM formula, we calculate beta as the ratio of Orion's risk premium to the market risk premium.\n\n4. The calculated beta is then returned as the answer.\n\nNote that this calculation assumes that the correlation between Orion Portfolio and the S&P 500 is implicit in the given returns and volatilities. The program provides the beta value, which represents the sensitivity of Orion Portfolio's returns to the market (S&P 500) movements."
        ]
    },
    {
        "tables": [
            "| Exercise Price ($) | Option Premium ($) | Delta |\n|--------------------|--------------------|-------|\n| 88                 | 4.40               | 0.75  |\n| 94                 | 1.00               | 0.30  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-337",
        "python_solution": "",
        "ground_truth": null,
        "question": "A customer, Alice Thompson, thinks that large-cap stock prices will witness a slight increase, and she wishes to benefit from this trend using a bull spread technique. Parker suggests that Thompson utilize 1/100 options of the Dow Jones Industrial Average (DJX) which will expire in two months. The current DJX price stands at $91. Exhibit 1 offers current information on two DJX call options which will expire within two months. Exhibit 1 DJX Call Options Expiring in Two Months Thompson decides to use 100 contracts for each position. Each contract equals 100 shares. At the DJX call options expiration, what is the maximum potential gain from the bull spread strategy suggested for Thompson?\n",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lower_strike = 88\n    higher_strike = 94\n    lower_premium = 4.40\n    higher_premium = 1.00\n    contracts = 100\n    shares_per_contract = 100\n\n    # Do math calculation to get the answer\n    cost = (lower_premium - higher_premium) * contracts * shares_per_contract\n    max_payoff = (higher_strike - lower_strike) * contracts * shares_per_contract\n    max_gain = max_payoff - cost\n\n    # return answer\n    return max_gain\n```\n\nThis Python function calculates the maximum potential gain from the bull spread strategy suggested for Alice Thompson. Here's a breakdown of the calculation:\n\n1. We define the strike prices, option premiums, number of contracts, and shares per contract based on the given information.\n\n2. We calculate the cost of establishing the position:\n   - Buy the lower strike call and sell the higher strike call\n   - Cost = (Premium paid - Premium received) * Number of contracts * Shares per contract\n\n3. We calculate the maximum payoff:\n   - Maximum payoff occurs when the stock price is at or above the higher strike price\n   - Max payoff = (Higher strike - Lower strike) * Number of contracts * Shares per contract\n\n4. The maximum gain is the difference between the maximum payoff and the cost of establishing the position.\n\nThe function returns this maximum potential gain in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-338",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you calculate the net operating cycle for XY corporation given that they have credit sales of $50,000, cost of goods sold is $30,000, average accounts receivable is $3,000, average accounts payable is $2,600, average inventory is $5,000 and purchase inventory is $46,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 50000\n    cogs = 30000\n    avg_accounts_receivable = 3000\n    avg_accounts_payable = 2600\n    avg_inventory = 5000\n    purchase_inventory = 46000\n\n    # Do math calculation to get the answer\n    # Calculate Days Sales Outstanding (DSO)\n    dso = (avg_accounts_receivable / credit_sales) * 365\n\n    # Calculate Days Inventory Outstanding (DIO)\n    dio = (avg_inventory / cogs) * 365\n\n    # Calculate Days Payables Outstanding (DPO)\n    dpo = (avg_accounts_payable / purchase_inventory) * 365\n\n    # Calculate Net Operating Cycle\n    net_operating_cycle = dso + dio - dpo\n\n    # return answer\n    return net_operating_cycle\n```\n\nThis Python program calculates the net operating cycle for XY corporation based on the given financial information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate Days Sales Outstanding (DSO) by dividing average accounts receivable by credit sales and multiplying by 365.\n3. We calculate Days Inventory Outstanding (DIO) by dividing average inventory by cost of goods sold and multiplying by 365.\n4. We calculate Days Payables Outstanding (DPO) by dividing average accounts payable by purchase inventory and multiplying by 365.\n5. Finally, we calculate the net operating cycle by adding DSO and DIO, then subtracting DPO.\n\nThe function will return the net operating cycle in days."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-339",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a monthly compounded annual discount rate of 6.5%, what is the present value of a financial agreement that proposes to provide €1,200 monthly for a period of five years with the initial payment being made instantly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    monthly_payment = 1200\n    annual_rate = 0.065\n    monthly_rate = annual_rate / 12\n    num_payments = 5 * 12  # 5 years * 12 months\n    \n    # Do math calculation to get the answer\n    present_value = monthly_payment  # Initial payment made instantly\n    for i in range(1, num_payments):\n        present_value += monthly_payment / ((1 + monthly_rate) ** i)\n    \n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of the financial agreement as described in the question. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `monthly_payment` is €1,200\n   - `annual_rate` is 6.5% or 0.065\n   - `monthly_rate` is the annual rate divided by 12\n   - `num_payments` is 5 years * 12 months = 60\n\n2. We start the calculation with the initial payment of €1,200, which is made instantly.\n\n3. We then use a loop to calculate the present value of each subsequent payment, discounting it based on its timing. The formula used is: PV = FV / (1 + r)^n, where PV is present value, FV is future value (monthly payment), r is the monthly rate, and n is the number of periods.\n\n4. We sum up all these present values to get the total present value of the agreement.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThis program will return the present value of the financial agreement in euros."
        ]
    },
    {
        "tables": [
            "|   | Six lowest week returns | Hybrid  Weights | Hybrid  Cumulative weights |\n|---|-----------------------|--------------|---------------------------|\n| 1 | -10.2%                   | 0.0105         | 0.0105                           |\n| 2 | -9.1%                   | 0.0150          | 0.0255                           |\n| 3 | -7.8%                   | 0.0082          | 0.0337                           |\n| 4 | -6.0%                   | 0.0043          | 0.0380                           |\n| 5 | -5.5%                   | 0.0153          | 0.0533                           |\n| 6 | -4.9%                   | 0.0115          | 0.0648                           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-340",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the hybrid approach, what is the 5% VaR for a portfolio with 100 weeks of return history, with its lowest returns over six weeks illustrated in the chart?",
        "output": [
            "Here's a Python program to calculate the 5% VaR using the hybrid approach based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    lowest_returns = [-10.2, -9.1, -7.8, -6.0, -5.5, -4.9]\n    hybrid_weights = [0.0105, 0.0150, 0.0082, 0.0043, 0.0153, 0.0115]\n    cumulative_weight_5th = 0.0533  # Cumulative weight up to the 5th lowest return\n\n    # Do math calculation to get the answer\n    weighted_sum = sum(r * w for r, w in zip(lowest_returns[:5], hybrid_weights[:5]))\n    var_5_percent = -weighted_sum / cumulative_weight_5th\n\n    # return answer\n    return var_5_percent\n\n```\n\nThis program calculates the 5% VaR using the hybrid approach as follows:\n\n1. We define the six lowest returns and their corresponding hybrid weights from the given table.\n\n2. We use the cumulative weight up to the 5th lowest return (0.0533) as our reference point for the 5% VaR calculation.\n\n3. We calculate the weighted sum of the five lowest returns multiplied by their respective weights.\n\n4. We divide the negative of this weighted sum by the cumulative weight to get the 5% VaR.\n\n5. The function returns the calculated 5% VaR.\n\nThis approach uses the hybrid weights to calculate a weighted average of the worst returns up to the 5% cumulative probability, which corresponds to the 5th lowest return in this case."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-341",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the yield decreases by 90 basis points, what would be the convexity impact for a bond having a convexity of 120?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yield_decrease = 0.0090  # 90 basis points = 0.90% = 0.0090\n    convexity = 120\n    \n    # Do math calculation to get the answer\n    convexity_impact = 0.5 * convexity * (yield_decrease ** 2) * 100\n    \n    # return answer\n    return convexity_impact\n```\n\nThis Python program calculates the convexity impact for a bond given a decrease in yield and the bond's convexity. Here's an explanation of the calculation:\n\n1. We define the yield decrease as 0.0090 (90 basis points = 0.90% = 0.0090 in decimal form).\n2. The convexity is given as 120.\n3. The formula for convexity impact is: 0.5 * convexity * (yield change)^2\n4. We multiply the result by 100 to express it as a percentage.\n\nWhen you run this function, it will return the convexity impact as a percentage. This represents the additional price change due to the bond's convexity, beyond what would be predicted by duration alone."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-342",
        "python_solution": "",
        "ground_truth": null,
        "question": "Determine the beta of the shares, if the covariance of the market returns with the returns of a particular share is 0.0035 and the standard deviation of the market returns is 0.05.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.0035\n    market_std_dev = 0.05\n    \n    # Do math calculation to get the answer\n    market_variance = market_std_dev ** 2\n    beta = covariance / market_variance\n    \n    # return answer\n    return beta\n```\n\nThis Python program calculates the beta of the shares based on the given information. Here's a breakdown of the calculation:\n\n1. We define the covariance of the market returns with the returns of the particular share (0.0035) and the standard deviation of the market returns (0.05).\n\n2. We calculate the market variance by squaring the market standard deviation.\n\n3. The beta is then calculated by dividing the covariance by the market variance.\n\n4. The calculated beta is returned as the answer.\n\nThe beta is a measure of a stock's volatility in relation to the overall market. A beta of 1 indicates that the stock's price moves with the market. A beta greater than 1 indicates that the stock is more volatile than the market, while a beta less than 1 means it's less volatile."
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December 2017-2018 |      |      |\n|-------------------------------------------------|------|------|\n| Retained earnings                               |120 145|      |\n| Accounts receivable                             | 38 43|      |\n| Inventory                                       | 45  48|      |\n| Accounts payable                                | 36 29|      |"
        ],
        "topic": "Accounting",
        "question_id": "test-343",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher obtained the data from a business's 2018 financial reports (in $ millions): The business proclaimed and paid cash dividends of $10 million and recognized depreciation expenses of $25 million in 2018. The business views the disbursal of dividends as a financing operation. What was the business's operational cash flow in 2018 (in $ millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2017 = 120\n    retained_earnings_2018 = 145\n    accounts_receivable_2017 = 38\n    accounts_receivable_2018 = 43\n    inventory_2017 = 45\n    inventory_2018 = 48\n    accounts_payable_2017 = 36\n    accounts_payable_2018 = 29\n    dividends = 10\n    depreciation = 25\n\n    # Do math calculation to get the answer\n    net_income = retained_earnings_2018 - retained_earnings_2017 + dividends\n    \n    change_in_accounts_receivable = accounts_receivable_2018 - accounts_receivable_2017\n    change_in_inventory = inventory_2018 - inventory_2017\n    change_in_accounts_payable = accounts_payable_2018 - accounts_payable_2017\n    \n    operational_cash_flow = (net_income \n                             + depreciation \n                             - change_in_accounts_receivable \n                             - change_in_inventory \n                             + change_in_accounts_payable)\n\n    # return answer\n    return operational_cash_flow\n```\n\nThis Python program calculates the operational cash flow for the business in 2018 based on the provided financial data. Here's a breakdown of the calculation:\n\n1. We calculate the net income by finding the change in retained earnings and adding back the dividends paid.\n2. We calculate the changes in accounts receivable, inventory, and accounts payable.\n3. We then use the indirect method to calculate operational cash flow:\n   - Start with net income\n   - Add back non-cash expenses (depreciation)\n   - Adjust for changes in working capital (accounts receivable, inventory, and accounts payable)\n\nThe function will return the operational cash flow in millions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-344",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an analyst named Mary is attempting to evaluate a corporation's stocks, considering that the company recently paid a dividend of $0.50 per share and the dividend is predicted to increase by 25% in the following year, and by 10% in the subsequent year. Furthermore, from the third year and onwards, the dividend expansion is foreseen to be 5% per annum. Given an 8% required rate of return, what would be the stock's intrinsic value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.50\n    year1_growth = 0.25\n    year2_growth = 0.10\n    ongoing_growth = 0.05\n    required_return = 0.08\n\n    # Do math calculation to get the answer\n    dividend_year1 = current_dividend * (1 + year1_growth)\n    dividend_year2 = dividend_year1 * (1 + year2_growth)\n    dividend_year3 = dividend_year2 * (1 + ongoing_growth)\n\n    # Calculate present value of first two years' dividends\n    pv_year1 = dividend_year1 / (1 + required_return)\n    pv_year2 = dividend_year2 / (1 + required_return)**2\n\n    # Calculate terminal value using Gordon Growth Model\n    terminal_value = (dividend_year3 / (required_return - ongoing_growth)) / (1 + required_return)**2\n\n    # Sum up to get intrinsic value\n    intrinsic_value = pv_year1 + pv_year2 + terminal_value\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of the stock using the Dividend Discount Model. It considers the different growth rates for the first two years and the ongoing growth rate from the third year onwards. The program uses the Gordon Growth Model to calculate the terminal value. The final intrinsic value is rounded to two decimal places for better readability."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-345",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the 99.9% credit var for a bond valued at $100 million that has a one-year cumulative default probability of 2% with no recovery rate and a 99.9% confidence level for the coming month?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_value = 100000000  # $100 million\n    default_probability_annual = 0.02  # 2% annual default probability\n    confidence_level = 0.999  # 99.9% confidence level\n    time_horizon = 1/12  # 1 month (1/12 of a year)\n    recovery_rate = 0  # No recovery rate\n\n    # Do math calculation to get the answer\n    # Convert annual default probability to monthly\n    default_probability_monthly = 1 - (1 - default_probability_annual) ** time_horizon\n    \n    # Calculate VaR\n    var = bond_value * default_probability_monthly * (1 - recovery_rate)\n    \n    # Adjust for confidence level (using normal distribution approximation)\n    import scipy.stats as stats\n    z_score = stats.norm.ppf(confidence_level)\n    credit_var = var * z_score\n\n    # return answer\n    return credit_var\n```\n\nThis Python program calculates the 99.9% Credit VaR for a bond with the given specifications. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We convert the annual default probability to a monthly probability.\n3. We calculate the basic VaR as the product of bond value, monthly default probability, and loss given default (which is 100% due to zero recovery rate).\n4. We then adjust this VaR for the 99.9% confidence level using the inverse normal distribution (z-score).\n\nNote that this is a simplified approach and assumes a normal distribution of credit losses. In practice, credit risk often follows more complex distributions, and more sophisticated models might be used for precise calculations."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-346",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the shares of the BBB corporation have a 30% chance of increasing each year, assuming each yearly attempt is unrelated to the others, what are the odds that it does not manage to increase more than once in the next 3 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    increase_probability = 0.30\n    years = 3\n    \n    # Do math calculation to get the answer\n    # Probability of not increasing in a single year\n    no_increase_prob = 1 - increase_probability\n    \n    # Probability of no increase in 3 years\n    prob_no_increase = no_increase_prob ** years\n    \n    # Probability of exactly one increase in 3 years\n    prob_one_increase = 3 * increase_probability * (no_increase_prob ** 2)\n    \n    # Probability of no increase or exactly one increase\n    answer = prob_no_increase + prob_one_increase\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the probability that the shares of the BBB corporation do not increase more than once in the next 3 years, given a 30% chance of increasing each year.\n\nHere's how it works:\n\n1. We define the probability of increase (30% or 0.30) and the number of years (3).\n\n2. We calculate the probability of not increasing in a single year (1 - 0.30 = 0.70).\n\n3. We calculate the probability of no increase in all 3 years (0.70^3).\n\n4. We calculate the probability of exactly one increase in 3 years. This is done using the binomial probability formula for exactly one success in three trials: 3C1 * 0.30 * 0.70^2, where 3C1 = 3.\n\n5. We sum these two probabilities to get the total probability of the shares not increasing more than once in 3 years.\n\n6. Finally, we return this calculated probability as the answer.\n\nThis solution assumes that each year's outcome is independent of the others, as stated in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-347",
        "python_solution": "",
        "ground_truth": null,
        "question": "A one-year zero-coupon bond has a yield of 4.0%. The yields of the zero-coupon bonds for two and three years are 5.0% and 6.0% respectively. What would be the forward rate for a one-year loan that starts in two years?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    y1 = 0.04  # 1-year zero-coupon bond yield\n    y2 = 0.05  # 2-year zero-coupon bond yield\n    y3 = 0.06  # 3-year zero-coupon bond yield\n    \n    # Do math calculation to get the answer\n    p2 = 1 / (1 + y2)**2  # Present value of 1 dollar in 2 years\n    p3 = 1 / (1 + y3)**3  # Present value of 1 dollar in 3 years\n    \n    forward_rate = (p2 / p3) - 1\n    \n    # return answer\n    return forward_rate * 100  # Convert to percentage\n```\n\nThis program calculates the forward rate for a one-year loan starting in two years based on the given zero-coupon bond yields. Here's how it works:\n\n1. We define the yields for 1-year, 2-year, and 3-year zero-coupon bonds.\n\n2. We calculate the present value of 1 dollar in 2 years and 3 years using the given yields.\n\n3. The forward rate is calculated using the formula: (p2 / p3) - 1, where p2 and p3 are the present values calculated in step 2.\n\n4. Finally, we return the forward rate as a percentage by multiplying by 100.\n\nThis solution uses the concept of implied forward rates, which can be derived from the spot rates (yields) of zero-coupon bonds. The forward rate represents the interest rate for a future period implied by the current term structure of interest rates."
        ]
    },
    {
        "tables": [
            "| Mature time | 10 years |\n|-------------|----------|\n| Market discount rate | 4% |\n| Par value of the bond | 1000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-348",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming yearly compounding, what will be the price of the zero coupon bond given the details below?",
        "output": [
            "Here's the Python program to calculate the price of the zero coupon bond based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    mature_time = 10  # years\n    market_discount_rate = 0.04  # 4%\n    par_value = 1000\n\n    # Do math calculation to get the answer\n    bond_price = par_value / (1 + market_discount_rate) ** mature_time\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis program does the following:\n\n1. We define the variables based on the given information:\n   - `mature_time`: 10 years\n   - `market_discount_rate`: 0.04 (4%)\n   - `par_value`: 1000\n\n2. We calculate the bond price using the zero coupon bond pricing formula:\n   Bond Price = Par Value / (1 + Market Discount Rate)^Mature Time\n\n3. We round the result to two decimal places for currency precision.\n\n4. Finally, we return the calculated bond price.\n\nThis program will return the price of the zero coupon bond assuming yearly compounding, given the mature time, market discount rate, and par value of the bond."
        ]
    },
    {
        "tables": [
            "|                                                     | 2018  | 2017  | 2016  |\n|-----------------------------------------------------|-------|-------|-------|\n| Net income                                          | 3,560 | 2,071 | 1,295 |\n| Net cash flow provided by (used in) CFO             | 8,850 | 4,220 | 2,990 |\n| Net cash flow provided by (used in) CFI             | (9,880)| (3,250)| (4,875)|\n| Net cash flow provided by (used in) CFF             | (5,120)| 1,050 | (1,910)|\n| Average net operating assets                         | 42,000| 40,530| 41,600|"
        ],
        "topic": "Accounting",
        "question_id": "test-349",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the cash flow data in the following table, what was the cash-flow-based accruals ratio for the company PZ in the year 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 3560\n    cfo_2018 = 8850\n    avg_net_operating_assets_2018 = 42000\n\n    # Do math calculation to get the answer\n    accruals = net_income_2018 - cfo_2018\n    cash_flow_based_accruals_ratio = accruals / avg_net_operating_assets_2018\n\n    # return answer\n    return cash_flow_based_accruals_ratio\n\n```\n\nThis Python program calculates the cash-flow-based accruals ratio for the company PZ in 2018 based on the given data. Here's a breakdown of the calculation:\n\n1. We define the relevant variables from the 2018 data:\n   - Net income\n   - Net cash flow provided by CFO (Cash Flow from Operations)\n   - Average net operating assets\n\n2. We calculate the accruals by subtracting CFO from net income.\n\n3. We then calculate the cash-flow-based accruals ratio by dividing the accruals by the average net operating assets.\n\n4. Finally, we return this ratio as the answer.\n\nThe cash-flow-based accruals ratio provides information about the difference between reported earnings and cash flow relative to the company's operating assets. A negative ratio (which will be the case here) indicates that cash flow from operations exceeds reported earnings."
        ]
    },
    {
        "tables": [
            "| Operating cash flow | 500 |\n|---------------------|-----|\n| Interest paid       | 30  |\n| Investment in working capital | 80 |\n| Investment in fixed asset | 60 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "test-350",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business expert intends to evaluate a private corporation using the FCF Model. To calculate the free cash flow for all capital providers, what is the free cash flow value the expert intends to find, considering the gathered information (in million)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_cash_flow = 500\n    interest_paid = 30\n    investment_working_capital = 80\n    investment_fixed_asset = 60\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    tax_shield = interest_paid * tax_rate\n    free_cash_flow = operating_cash_flow + interest_paid - tax_shield - investment_working_capital - investment_fixed_asset\n\n    # return answer\n    return free_cash_flow\n```\n\nThis Python program calculates the free cash flow for all capital providers using the FCF Model, based on the information provided in the table. Here's a breakdown of the calculation:\n\n1. We start with the operating cash flow.\n2. We add back the interest paid (since we're calculating FCF for all capital providers, including debt holders).\n3. We subtract the tax shield on interest (interest paid * tax rate) to account for the tax benefit of debt.\n4. We subtract investments in working capital and fixed assets.\n\nThe result gives us the free cash flow value that the business expert intends to find, considering the gathered information (in million)."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-351",
        "python_solution": "",
        "ground_truth": null,
        "question": "What should be the projected total owners' equity by an analyst, if a firm is expected to have €2,000 of assets and €1,200 liabilities by the end of the year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_assets = 2000\n    expected_liabilities = 1200\n    \n    # Do math calculation to get the answer\n    projected_owners_equity = expected_assets - expected_liabilities\n    \n    # return answer\n    return projected_owners_equity\n```\n\nThis Python program calculates the projected total owners' equity based on the accounting equation: Assets = Liabilities + Owners' Equity.\n\nThe program defines two variables:\n1. `expected_assets`: set to 2000 (€2,000 as given in the question)\n2. `expected_liabilities`: set to 1200 (€1,200 as given in the question)\n\nThen, it calculates the projected owners' equity by subtracting the expected liabilities from the expected assets.\n\nThe function returns the calculated value, which is the answer to the question. When you run this function, it will return 800, meaning the projected total owners' equity is €800."
        ]
    },
    {
        "tables": [
            "|                               |   C$   |\n|-------------------------------|--------|\n| Carrying value of equipment (net book value)   | 500,000|\n| Undiscounted expected future cash flows | 550,000|\n| Fair value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-352",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the impairment loss (in C$) associated with the printing equipment of a Canadian printing firm that complies with IFRS, given the drop in demand for its products during this fiscal year end?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    fair_value = 480000\n    costs_to_sell = 50000\n    value_in_use = 440000\n\n    # Do math calculation to get the answer\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n\n    # return answer\n    return impairment_loss if impairment_loss > 0 else 0\n```\n\nThis Python program calculates the impairment loss for the printing equipment according to IFRS standards. Here's an explanation of the calculation:\n\n1. We define the variables based on the given information.\n\n2. We calculate the fair value less costs to sell by subtracting the costs to sell from the fair value.\n\n3. The recoverable amount is the higher of the fair value less costs to sell and the value in use.\n\n4. The impairment loss is the difference between the carrying value and the recoverable amount, but only if this difference is positive (i.e., if the carrying value is higher than the recoverable amount).\n\n5. The function returns the impairment loss if it's positive, or 0 if there's no impairment.\n\nThis calculation follows IFRS standards, which require an asset to be carried at no more than its recoverable amount, where the recoverable amount is the higher of its fair value less costs of disposal and its value in use."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-353",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond with a face value of $100 has a semiannual-pay interest rate of 5% over 10 years, what would be its price assuming that its YTM is 8%?",
        "output": [
            "Here's a Python program to calculate the price of the bond based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.05  # 5% annual rate\n    years = 10\n    ytm = 0.08  # 8% annual yield to maturity\n    payments_per_year = 2  # semiannual payments\n\n    # Do math calculation to get the answer\n    periods = years * payments_per_year\n    coupon_payment = (face_value * coupon_rate) / payments_per_year\n    periodic_yield = ytm / payments_per_year\n\n    # Calculate present value of coupon payments\n    coupon_pv = coupon_payment * (1 - (1 + periodic_yield) ** -periods) / periodic_yield\n\n    # Calculate present value of face value\n    face_value_pv = face_value / (1 + periodic_yield) ** periods\n\n    # Calculate bond price\n    bond_price = coupon_pv + face_value_pv\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis program calculates the price of a bond using the following steps:\n\n1. We define the given variables: face value, coupon rate, years to maturity, yield to maturity (YTM), and payments per year.\n\n2. We calculate the total number of periods and the coupon payment per period.\n\n3. We calculate the periodic yield (YTM per period).\n\n4. We use the present value formula for an annuity to calculate the present value of all coupon payments.\n\n5. We calculate the present value of the face value to be received at maturity.\n\n6. We sum up the present values of coupon payments and face value to get the bond price.\n\n7. Finally, we round the result to two decimal places and return it.\n\nThis program will return the price of the bond given the specified conditions. The returned value represents the fair price of the bond in dollars."
        ]
    },
    {
        "tables": [
            "| Valuation Screen | Probability of Passing |\n|------------------|------------------------|\n| 1                | 0.65                   |\n| 2                | 0.45                   |\n| 3                | 0.40                   |\n| 4                | 0.30                   |"
        ],
        "topic": "Accounting",
        "question_id": "test-354",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a researcher uses four separate assessment measures on a group of 1,200 possible investments, what is the estimated number that will successfully pass through all four assessments?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_investments = 1200\n    probability_screen1 = 0.65\n    probability_screen2 = 0.45\n    probability_screen3 = 0.40\n    probability_screen4 = 0.30\n    \n    # Do math calculation to get the answer\n    probability_all_screens = (probability_screen1 * \n                               probability_screen2 * \n                               probability_screen3 * \n                               probability_screen4)\n    \n    estimated_successful_investments = total_investments * probability_all_screens\n    \n    # return answer\n    return round(estimated_successful_investments)\n```\n\nThis program calculates the estimated number of investments that will successfully pass through all four assessments. Here's how it works:\n\n1. We define the variables:\n   - `total_investments`: The total number of possible investments (1,200)\n   - `probability_screen1` to `probability_screen4`: The probability of passing each screen as given in the table\n\n2. We calculate the probability of an investment passing all four screens by multiplying the individual probabilities together.\n\n3. We multiply the total number of investments by the probability of passing all screens to get the estimated number of successful investments.\n\n4. We round the result to the nearest whole number, as we can't have a fractional number of investments.\n\n5. The function returns this rounded number as the answer.\n\nWhen you run this function, it will return the estimated number of investments that will successfully pass through all four assessments."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-355",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the fiscal multiplier of the administration with a 25% tax rate and a 70% marginal propensity to consume?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.25\n    marginal_propensity_to_consume = 0.70\n\n    # Do math calculation to get the answer\n    marginal_propensity_to_save = 1 - marginal_propensity_to_consume\n    fiscal_multiplier = 1 / (marginal_propensity_to_save + tax_rate)\n\n    # return answer\n    return fiscal_multiplier\n```\n\nThis Python program calculates the fiscal multiplier based on the given tax rate and marginal propensity to consume. Here's a breakdown of the calculation:\n\n1. We define the tax rate as 25% (0.25) and the marginal propensity to consume as 70% (0.70).\n\n2. We calculate the marginal propensity to save as 1 minus the marginal propensity to consume.\n\n3. The fiscal multiplier is calculated using the formula: 1 / (MPS + t), where MPS is the marginal propensity to save and t is the tax rate.\n\n4. The function returns the calculated fiscal multiplier.\n\nThis program will give you the fiscal multiplier for the administration with the specified tax rate and marginal propensity to consume."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-356",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher has collected the below stats: the chance of economic prosperity is 75%, while the possibility of recession stands at 25%. For a business, there's a 10% probability of its EPS being $2.0 and a 90% likelihood of having an EPS of $4.0 during prosperous times. However, during a recession, there is a 25% chance that the EPS might be $2.0 and a 75% possibility that the EPS might be $4.0. What is the variance of this business's EPS in an economic downturn?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    recession_prob_eps_2 = 0.25\n    recession_prob_eps_4 = 0.75\n    eps_2 = 2.0\n    eps_4 = 4.0\n\n    # Do math calculation to get the answer\n    expected_eps = recession_prob_eps_2 * eps_2 + recession_prob_eps_4 * eps_4\n    \n    variance = (recession_prob_eps_2 * (eps_2 - expected_eps)**2 + \n                recession_prob_eps_4 * (eps_4 - expected_eps)**2)\n\n    # return answer\n    return variance\n```\n\nThis Python program calculates the variance of the business's EPS during an economic downturn (recession). Here's a breakdown of the calculation:\n\n1. We define the probabilities and EPS values for the recession scenario.\n2. We calculate the expected EPS during a recession.\n3. We then calculate the variance using the formula: Σ(P(X) * (X - E(X))^2), where X is the EPS value, P(X) is the probability of that EPS, and E(X) is the expected EPS.\n4. The program returns the calculated variance.\n\nThis solution focuses specifically on the recession scenario as requested in the question, disregarding the prosperity scenario and overall economic probabilities."
        ]
    },
    {
        "tables": [
            "| Carrying amount of plant | 1,604 |\n|-------------------------|-------|\n| Undiscounted expected future net cash flows | 1,350 |\n| Present value of expected future net cash flows | 1,050 |\n| Fair value of plant | 1,225 |\n| Revised estimate of useful life | 4 years |\n| Depreciation method | Straight line |\n| Revised estimate of residual value | $200 |"
        ],
        "topic": "Accounting",
        "question_id": "test-357",
        "python_solution": "",
        "ground_truth": null,
        "question": "In early January 2015, a market researcher spotted a news report stating that a company he's tracking (which submits reports under US GAAP) would be compelled to cut production from a key product line at its highly specialized ceramics factory, due to a new technology launched by a main competitor. The table encapsulates data and predictions from different sources regarding the factory and its forthcoming possibilities. Assuming the chosen information associated with the Ceramics Production Plant by the close of 2014 (in $ thousands) is correct, what would be the depreciation expense to be accounted for in 2015 concerning the factory?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_amount = 1604\n    fair_value = 1225\n    revised_useful_life = 4\n    residual_value = 200\n\n    # Do math calculation to get the answer\n    recoverable_amount = fair_value  # recoverable amount is the higher of fair value and value in use\n    impairment_loss = carrying_amount - recoverable_amount\n    new_carrying_amount = carrying_amount - impairment_loss\n    depreciable_amount = new_carrying_amount - residual_value\n    annual_depreciation = depreciable_amount / revised_useful_life\n\n    # return answer\n    return annual_depreciation\n```\n\nThis Python program calculates the depreciation expense for 2015 based on the given information. Here's a breakdown of the steps:\n\n1. We define the relevant variables from the provided table.\n2. We determine the recoverable amount, which is the higher of fair value and value in use. In this case, we use the fair value.\n3. We calculate the impairment loss by subtracting the recoverable amount from the carrying amount.\n4. We determine the new carrying amount after impairment.\n5. We calculate the depreciable amount by subtracting the residual value from the new carrying amount.\n6. Finally, we calculate the annual depreciation by dividing the depreciable amount by the revised useful life.\n\nThe function will return the annual depreciation expense for 2015 in thousands of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-358",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price value of a basis point (PVBP) for the bonds that are presently valued at 108.50, issued by GTS Inc., considering that according to a portfolio manager's valuation model, a 1bp rise in interest rates will cause the bond price to drop to 108.40, and a 1bp fall in interest rates will cause the bond price to increase to 108.59?",
        "output": [
            "Here's the Python program to calculate the price value of a basis point (PVBP) for the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_price = 108.50\n    price_after_1bp_rise = 108.40\n    price_after_1bp_fall = 108.59\n    \n    # Do math calculation to get the answer\n    price_change_rise = current_price - price_after_1bp_rise\n    price_change_fall = price_after_1bp_fall - current_price\n    \n    # PVBP is the average of the absolute price changes\n    pvbp = (abs(price_change_rise) + abs(price_change_fall)) / 2\n    \n    # return answer\n    return pvbp\n```\n\nThis program calculates the PVBP as follows:\n\n1. We define the current bond price and the prices after a 1bp rise and fall in interest rates.\n2. We calculate the price change for both the rise and fall scenarios.\n3. The PVBP is then calculated as the average of the absolute values of these price changes.\n4. The function returns the PVBP value.\n\nThis approach takes into account both the upward and downward price movements, providing a more accurate PVBP value that considers potential asymmetry in price changes."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-359",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bergen Inc. commenced business operations in 2007 and implements the FIFO method. In its first year, it bought 45,000 units of inventory for €10 per unit and sold 40,000 units at €20 each. The following year, it acquired another 50,000 units at a cost of €11 each and made sales of 45,000 units priced at €22 each. Using a periodic inventory system, what was Bergen Inc.'s ending inventory balance in € thousands for 2008?",
        "output": [
            "Here's the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    units_bought_2007 = 45000\n    cost_per_unit_2007 = 10\n    units_sold_2007 = 40000\n    \n    units_bought_2008 = 50000\n    cost_per_unit_2008 = 11\n    units_sold_2008 = 45000\n    \n    # Do math calculation to get the answer\n    units_remaining_2007 = units_bought_2007 - units_sold_2007\n    total_units_available_2008 = units_remaining_2007 + units_bought_2008\n    units_in_ending_inventory_2008 = total_units_available_2008 - units_sold_2008\n    \n    value_of_2007_units = min(units_remaining_2007, units_in_ending_inventory_2008) * cost_per_unit_2007\n    value_of_2008_units = max(0, units_in_ending_inventory_2008 - units_remaining_2007) * cost_per_unit_2008\n    \n    total_ending_inventory_value = value_of_2007_units + value_of_2008_units\n    \n    # Convert to thousands of euros and round to nearest thousand\n    answer = round(total_ending_inventory_value / 1000)\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the ending inventory balance for Bergen Inc. in 2008 using the FIFO (First-In, First-Out) method and a periodic inventory system. Here's a breakdown of the calculation:\n\n1. We first calculate the remaining units from 2007 and the total units available in 2008.\n2. Then we determine how many units are in the ending inventory for 2008.\n3. Using FIFO, we value the older inventory (from 2007) first, then the newer inventory (from 2008) if needed.\n4. We sum up the values to get the total ending inventory value.\n5. Finally, we convert the result to thousands of"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-360",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is looking to aid his friend Lisa in forecasting the revenue of her store in October 20X9, thus he uses the income from January 20X6 to September 20X9 as examples to create an AR(2) model and attains the following result: X ^ t+1 =1.3458+0.8912Xt+0.3372Xt-1. What would the forecasted revenue of Lisa's store be in October 20X9, provided the income for August 20X9 is $2746.72 and the income for September 20X9 is $2957.63?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    constant = 1.3458\n    coefficient_1 = 0.8912\n    coefficient_2 = 0.3372\n    september_revenue = 2957.63\n    august_revenue = 2746.72\n\n    # Do math calculation to get the answer\n    forecasted_revenue = constant + (coefficient_1 * september_revenue) + (coefficient_2 * august_revenue)\n\n    # return answer\n    return round(forecasted_revenue, 2)\n```\n\nThis Python program calculates the forecasted revenue for Lisa's store in October 20X9 using the given AR(2) model:\n\n1. We define the variables:\n   - `constant`: The constant term in the AR(2) model (1.3458)\n   - `coefficient_1`: The coefficient for Xt (0.8912)\n   - `coefficient_2`: The coefficient for Xt-1 (0.3372)\n   - `september_revenue`: The revenue for September 20X9 ($2957.63)\n   - `august_revenue`: The revenue for August 20X9 ($2746.72)\n\n2. We calculate the forecasted revenue using the AR(2) model equation:\n   X^t+1 = 1.3458 + 0.8912Xt + 0.3372Xt-1\n\n3. We round the result to two decimal places to represent currency accurately.\n\n4. The function returns the forecasted revenue for October 20X9.\n\nWhen you run this function, it will return the forecasted revenue for Lisa's store in October 20X9 based on the given AR(2) model and the revenue data from August and September 20X9."
        ]
    },
    {
        "tables": [
            "| Borrowing date   | 1-Jan-09                                |\n|------------------|-----------------------------------------|\n| Amount borrowed  | 500 million Brazilian real (BRL)  |\n| Annual interest rate  | 14 percent                        |\n| Term of the loan | 3 years                                 |\n| Payment method   | Annual payment of interest only. Principal amortization is due at the end of the loan term. |"
        ],
        "topic": "Accounting",
        "question_id": "test-361",
        "python_solution": "",
        "ground_truth": null,
        "question": "A Brazilian firm, CRIXUS Inc., takes out a loan from a domestic bank to fund the building of its factory. The terms of the loan are as follows: It takes two years to construct the factory, during which CRIXUS made BRL 10 million by momentarily investing the loan amount. What is the value of interest pertaining to the factory construction (in BRL million) that can be capitalized on CRIXUS's balance sheet?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 500  # in million BRL\n    interest_rate = 0.14  # 14%\n    construction_years = 2\n    income_during_construction = 10  # in million BRL\n\n    # Do math calculation to get the answer\n    total_interest = loan_amount * interest_rate * construction_years\n    capitalizable_interest = total_interest - income_during_construction\n\n    # return answer\n    return capitalizable_interest\n\n# Test the function\nprint(f\"The capitalizable interest is {solution()} million BRL\")\n```\n\nThis program calculates the amount of interest that can be capitalized on CRIXUS's balance sheet during the factory construction period. Here's how it works:\n\n1. We define the variables based on the given information:\n   - The loan amount is 500 million BRL\n   - The annual interest rate is 14% (0.14 in decimal form)\n   - The construction period is 2 years\n   - The income earned during construction is 10 million BRL\n\n2. We calculate the total interest paid during the construction period:\n   `total_interest = loan_amount * interest_rate * construction_years`\n\n3. To get the capitalizable interest, we subtract the income earned during construction from the total interest:\n   `capitalizable_interest = total_interest - income_during_construction`\n\n4. The function returns the capitalizable interest.\n\nWhen you run this program, it will output the amount of interest that can be capitalized on CRIXUS's balance sheet during the factory construction period, in million BRL."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-362",
        "python_solution": "",
        "ground_truth": null,
        "question": "In compliance with the rules of the trading platform, investing in wheat futures calls for an initial margin of $2000 and a maintenance margin of $1500. A trader shorts a wheat future contract at $216, with each contract incorporating 100 tons. The contract's value escalates to $222 after a day. What would the varying margin amount be at the conclusion of day one?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_margin = 2000\n    maintenance_margin = 1500\n    initial_price = 216\n    new_price = 222\n    contract_size = 100  # tons\n\n    # Do math calculation to get the answer\n    price_change = new_price - initial_price\n    loss_per_ton = price_change  # Short position, so price increase means loss\n    total_loss = loss_per_ton * contract_size\n    varying_margin = initial_margin - total_loss\n\n    # return answer\n    return varying_margin\n```\n\nThis Python program calculates the varying margin amount at the end of day one for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the initial variables based on the information provided in the question.\n2. We calculate the price change, which is the difference between the new price and the initial price.\n3. Since the trader has a short position, an increase in price means a loss. So the loss per ton is equal to the price change.\n4. We multiply the loss per ton by the contract size (100 tons) to get the total loss.\n5. The varying margin is calculated by subtracting the total loss from the initial margin.\n\nThe program will return the varying margin amount, which represents the remaining margin after accounting for the day's loss."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-363",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose a hedge fund manager is aiming to build a protective put approach. If the stock's current price is $25.1, and the premium of 23 put is $1.8, what would be the maximum loss for this strategy?",
        "output": [
            "Here's a Python program to answer the given question about the maximum loss for a protective put strategy:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_price = 25.1\n    put_strike = 23\n    put_premium = 1.8\n\n    # Do math calculation to get the answer\n    max_loss = stock_price - put_strike + put_premium\n\n    # return answer\n    return max_loss\n```\n\nThis program calculates the maximum loss for a protective put strategy. Here's how it works:\n\n1. We define the variables:\n   - `stock_price`: The current price of the stock ($25.1)\n   - `put_strike`: The strike price of the put option ($23)\n   - `put_premium`: The premium paid for the put option ($1.8)\n\n2. We calculate the maximum loss:\n   - The maximum loss occurs when the stock price falls to or below the put strike price.\n   - In this case, the loss is the difference between the stock purchase price and the put strike price, plus the premium paid for the put option.\n\n3. The function returns the calculated maximum loss.\n\nThe maximum loss for this protective put strategy would be $3.9 per share ($25.1 - $23 + $1.8)."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-364",
        "python_solution": "",
        "ground_truth": null,
        "question": "In March 2017, John purchased 500 pen units at a cost of $2 each. Then in April of the same year, he bought another 600 pen units at an expense of $3 each. John managed to sell 1000 units at $5 each during 2017. When employing the FIFO method, what would be the cost of goods he sold in 2017?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    march_purchase_quantity = 500\n    march_purchase_cost = 2\n    april_purchase_quantity = 600\n    april_purchase_cost = 3\n    total_units_sold = 1000\n\n    # Do math calculation to get the answer\n    march_units_sold = min(march_purchase_quantity, total_units_sold)\n    april_units_sold = total_units_sold - march_units_sold\n\n    cost_of_goods_sold = (march_units_sold * march_purchase_cost) + (april_units_sold * april_purchase_cost)\n\n    # return answer\n    return cost_of_goods_sold\n```\n\nThis Python program calculates the cost of goods sold using the FIFO (First-In-First-Out) method based on the given information. Here's how it works:\n\n1. We define the variables for the quantities and costs of pens purchased in March and April, as well as the total number of units sold.\n\n2. We calculate how many units from the March purchase were sold. This is either all 500 units (if total sales were 500 or more) or the total number of units sold (if less than 500).\n\n3. We then calculate how many units from the April purchase were sold, which is the remaining units after subtracting the March units sold from the total units sold.\n\n4. The cost of goods sold is calculated by multiplying the number of units sold from each purchase by their respective costs and adding these together.\n\n5. Finally, we return the calculated cost of goods sold.\n\nThis approach ensures that we're using the FIFO method, where the earliest purchased inventory (March) is sold first, followed by the later purchased inventory (April)."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| Fair value  | £ 16,800,000  |\n| Costs to sell  | £800,000  |\n| Value in use  | £14,500,000  |\n| Net carrying amount  | £19,100,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-365",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher is examining the degradation of the production machinery of Alpha Industries, a corporation based in the UK that abides by IFRS. What is the value of the impairment loss on Alpha Industries' income statement connected to its production machinery, based on the data collected about the machinery?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fair_value = 16800000\n    costs_to_sell = 800000\n    value_in_use = 14500000\n    net_carrying_amount = 19100000\n\n    # Do math calculation to get the answer\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n    impairment_loss = net_carrying_amount - recoverable_amount\n\n    # return answer\n    return impairment_loss if impairment_loss > 0 else 0\n```\n\nThis Python program calculates the impairment loss for Alpha Industries' production machinery based on the given data. Here's how it works:\n\n1. We define the variables with the given values from the table.\n\n2. We calculate the fair value less costs to sell by subtracting the costs to sell from the fair value.\n\n3. The recoverable amount is the higher of the fair value less costs to sell and the value in use. We use the `max()` function to determine this.\n\n4. The impairment loss is calculated as the difference between the net carrying amount and the recoverable amount.\n\n5. Finally, we return the impairment loss if it's positive, or 0 if it's negative (as impairment losses can't be negative).\n\nThis program will return the value of the impairment loss that should be recorded on Alpha Industries' income statement for their production machinery."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-366",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a discrete uniform distribution with 20 potential results ranging from 1 to 20, what is the probability that X is not less than 3 but not exceeding 5, P(3 ≤ X < 6)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_outcomes = 20\n    favorable_outcomes = 3  # 3, 4, and 5\n\n    # Do math calculation to get the answer\n    probability = favorable_outcomes / total_outcomes\n\n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability for the given scenario in a discrete uniform distribution. Here's an explanation of the code:\n\n1. We define the total number of outcomes in the distribution, which is 20 (ranging from 1 to 20).\n\n2. We count the number of favorable outcomes that satisfy the condition 3 ≤ X < 6, which are 3, 4, and 5 (three numbers in total).\n\n3. The probability is calculated by dividing the number of favorable outcomes by the total number of outcomes.\n\n4. The function returns this probability as the answer.\n\nIn a discrete uniform distribution, each outcome has an equal probability of occurring. Therefore, the probability of X being 3, 4, or 5 is simply the number of these outcomes divided by the total number of possible outcomes."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-367",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume an investment portfolio consists of 40% in property A and 60% in property B. The average and variance of the return on A are 0 and 25 respectively. The average and variance of the return on B are 1 and 121 correspondingly. The correlation coefficient between A and B is 0.3. What is the closest estimate for portfolio volatility?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_A = 0.40\n    weight_B = 0.60\n    mean_A = 0\n    mean_B = 1\n    var_A = 25\n    var_B = 121\n    corr_AB = 0.3\n\n    # Do math calculation to get the answer\n    std_A = var_A ** 0.5\n    std_B = var_B ** 0.5\n    \n    cov_AB = corr_AB * std_A * std_B\n    \n    portfolio_variance = (weight_A ** 2 * var_A) + (weight_B ** 2 * var_B) + (2 * weight_A * weight_B * cov_AB)\n    portfolio_volatility = portfolio_variance ** 0.5\n\n    # return answer\n    return round(portfolio_volatility, 2)\n```\n\nThis Python program calculates the portfolio volatility based on the given information:\n\n1. We define the variables for the weights, means, variances, and correlation coefficient of the two properties.\n\n2. We calculate the standard deviations of A and B by taking the square root of their variances.\n\n3. We calculate the covariance between A and B using the correlation coefficient and standard deviations.\n\n4. We use the portfolio variance formula: σ²p = w²A * σ²A + w²B * σ²B + 2wAwB * cov(A,B)\n\n5. We take the square root of the portfolio variance to get the portfolio volatility.\n\n6. Finally, we round the result to two decimal places for a close estimate and return it.\n\nThis program will return the closest estimate for the portfolio volatility."
        ]
    },
    {
        "tables": [
            "| Quarter                   | Income   |\n|---------------------------|----------|\n| The last quarter in 20X8 | $ 4257.63|\n| The third quarter in 20X8| $4153.98 |\n| The second quarter in 20X8| $4322.01 |\n| The first quarter in 20X8| $5763.42 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-368",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson is looking to forecast the earnings of his manufacturing plant in the first quarter of 20X9. To do this he utilizes earnings data from the first quarter of 20X8 to the last quarter of 20X8 as examples to create an AR(1) model. However, he discovers that the autocorrelations of the residuals indicate a significant, strong seasonal autocorrelation. Johnson then adjusts the model to obtain the new equation, which is Xt=126.7537+0.1387Xt−1+0.9324Xt−4X_t=126.7537+0.1387X_{t-1}+0.9324X_{t-4}Xt​=126.7537+0.1387Xt−1​+0.9324Xt−4​. The income for each quarter in 20X8 is presented in the table below. Based on this new model, what is the",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Q4_20X8 = 4257.63\n    Q3_20X8 = 4153.98\n    Q2_20X8 = 4322.01\n    Q1_20X8 = 5763.42\n    \n    # Do math calculation to get the answer\n    forecast_Q1_20X9 = 126.7537 + 0.1387 * Q4_20X8 + 0.9324 * Q1_20X8\n    \n    # return answer\n    return round(forecast_Q1_20X9, 2)\n```\n\nThis Python function calculates the forecast for the first quarter of 20X9 using the given AR(1) model equation:\n\nXt = 126.7537 + 0.1387Xt-1 + 0.9324Xt-4\n\nWhere:\n- Xt is the forecast for Q1 20X9\n- Xt-1 is the income from Q4 20X8 (the previous quarter)\n- Xt-4 is the income from Q1 20X8 (the same quarter from the previous year)\n\nThe function uses the provided quarterly income data, applies the equation, and returns the result rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "|    | Borrowing date                             | 1 January 2009                          |\n|:--:|---------------------------------------|----------------------------------|\n|    | Amount borrowed                          | 500 million Brazilian real (BRL) |\n|    | Annual interest rate                 | 14 percent                             |\n|    | Term of the loan                       | 3 years                                   |\n| Payment method  |                                       | Annual payment of interest only. Principal amortization is due at the end of the loan term. |"
        ],
        "topic": "Accounting",
        "question_id": "test-369",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Brazilian corporation, RIO GRANDE, Inc., borrows money from a local financial institution to fund the building of its manufacturing facility. The loan conditions indicate that the facility build will take two years, during which RIO GRANDE generated BRL 10 million via temporary investment of the loan funds. What would be the sum of the interest associated with the plant's build (in BRL million) that RIO GRANDE could include in its financial statement?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 500  # in million BRL\n    interest_rate = 0.14  # 14%\n    loan_term = 3  # years\n    construction_period = 2  # years\n    temporary_investment_income = 10  # in million BRL\n\n    # Do math calculation to get the answer\n    total_interest = loan_amount * interest_rate * loan_term\n    interest_during_construction = loan_amount * interest_rate * construction_period\n    capitalizable_interest = interest_during_construction - temporary_investment_income\n\n    # return answer\n    return capitalizable_interest\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The sum of interest that RIO GRANDE could include in its financial statement is BRL {result} million.\")\n```\n\nThis program calculates the interest that RIO GRANDE could capitalize (include in its financial statement) during the construction period. Here's the explanation:\n\n1. We define the variables based on the given information.\n2. We calculate the total interest for the entire loan term.\n3. We calculate the interest accrued during the construction period (2 years).\n4. We subtract the temporary investment income from the interest during construction to get the net capitalizable interest.\n5. The function returns the capitalizable interest.\n\nWhen you run this program, it will output the amount of interest that RIO GRANDE could include in its financial statement, in million BRL."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-370",
        "python_solution": "",
        "ground_truth": null,
        "question": "John, CFA, is assessing the value of Corporation X. With the present dividend and the necessary return rate of $0.5 per share and 10% respectively, he anticipates that the dividend will continue to grow at its current rate of 4.5% per year indefinitely. What is the intrinsic value of Corporation X shares according to the Gordon Growth Model?",
        "output": [
            "Here's the Python program to answer the question using the Gordon Growth Model:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.5  # Current dividend per share\n    required_return = 0.10  # Required rate of return (10%)\n    growth_rate = 0.045  # Expected growth rate (4.5%)\n    \n    # Do math calculation to get the answer\n    # Gordon Growth Model: P = D / (r - g)\n    # Where P is the intrinsic value, D is the current dividend,\n    # r is the required rate of return, and g is the growth rate\n    intrinsic_value = current_dividend / (required_return - growth_rate)\n    \n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis program calculates the intrinsic value of Corporation X shares using the Gordon Growth Model. The variables are defined based on the information provided in the question. The calculation is performed using the formula P = D / (r - g), where P is the intrinsic value, D is the current dividend, r is the required rate of return, and g is the growth rate. The result is rounded to two decimal places for better readability."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n| --- | --- | --- | --- | --- | --- |\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-371",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the provided table, can you compute the mean absolute deviation of the monthly stock returns for Ivy Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.20, 0.04, -0.05, 0.12, 0.03, 0.12]\n    \n    # Do math calculation to get the answer\n    mean_return = sum(returns) / len(returns)\n    absolute_deviations = [abs(r - mean_return) for r in returns]\n    mean_absolute_deviation = sum(absolute_deviations) / len(absolute_deviations)\n    \n    # return answer\n    return mean_absolute_deviation\n```\n\nThis Python program calculates the mean absolute deviation of the monthly stock returns for Ivy Corporation based on the provided table. Here's a breakdown of what the program does:\n\n1. We define a list `returns` containing the monthly stock returns from the table.\n\n2. We calculate the mean return by summing all returns and dividing by the number of returns.\n\n3. We create a new list `absolute_deviations` that contains the absolute value of the difference between each return and the mean return.\n\n4. We calculate the mean absolute deviation by summing all absolute deviations and dividing by the number of deviations.\n\n5. Finally, we return the calculated mean absolute deviation.\n\nThis program will return the mean absolute deviation, which measures the average distance between each data point and the mean, giving us a measure of variability in the stock returns."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-372",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Corporation has gone into a forward rate agreement (FRA) in which they will receive a continuous compounding rate of 3.75% on a principal amount of USD 1 million from the end of the first year to the end of the second year. The zero rates for one and two years are 3.25% and 3.50%, respectively. What is the value of the FRA at the inception of the agreement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000\n    fra_rate = 0.0375\n    zero_rate_1yr = 0.0325\n    zero_rate_2yr = 0.0350\n    time_to_start = 1\n    time_to_end = 2\n\n    # Do math calculation to get the answer\n    forward_rate = (2 * zero_rate_2yr - zero_rate_1yr) / (1 + zero_rate_1yr)\n    \n    fra_value = principal * (math.exp(fra_rate) - math.exp(forward_rate)) * \\\n                math.exp(-zero_rate_2yr * time_to_end)\n\n    # return answer\n    return fra_value\n\n# Note: This solution requires the math module. Add 'import math' at the top of your script.\n```\n\nThis Python program calculates the value of the Forward Rate Agreement (FRA) at inception. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the implied forward rate using the given zero rates.\n3. We then use the formula for valuing an FRA at inception:\n   FRA Value = Principal * (e^(FRA rate) - e^(forward rate)) * e^(-r * T)\n   Where r is the zero rate for the end of the FRA period, and T is the time to the end of the FRA period.\n4. The calculated value is returned.\n\nNote that this solution uses continuous compounding as specified in the question. The math.exp() function is used for e^x calculations, which is why the math module needs to be imported."
        ]
    },
    {
        "tables": [
            "| Bond                         | Coupon Rate | Time-to-Maturity | Price  |\n|------------------------------|-------------|------------------|--------|\n| UK Government Benchmark Bond | 2%          | 3 years          | 100.25 |\n| UK Corporate Bond            | 5%          | 3 years          | 100.65 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-373",
        "python_solution": "",
        "ground_truth": null,
        "question": "The present three-year EUR interest rate benchmark for swap is 2.12% and both bonds annually yield interest. What is the G-spread measured in basis points (bps) on the corporate bond from the UK?",
        "output": [
            "def solution():\n    # Define variables name and value\n    corporate_bond_coupon = 0.05  # 5% coupon rate\n    corporate_bond_price = 100.65\n    benchmark_rate = 0.0212  # 3-year EUR interest rate benchmark for swap\n    years_to_maturity = 3\n\n    # Do math calculation to get the answer\n    # Calculate the yield to maturity (YTM) of the corporate bond\n    def calculate_ytm(coupon, price, years):\n        return (coupon + (100 - price) / years) / ((100 + price) / 200)\n\n    corporate_ytm = calculate_ytm(corporate_bond_coupon, corporate_bond_price, years_to_maturity)\n\n    # Calculate G-spread\n    g_spread = (corporate_ytm - benchmark_rate) * 10000  # Convert to basis points\n\n    # return answer\n    return round(g_spread, 2)  # Round to 2 decimal places\n\n```\n\nThis Python program calculates the G-spread for the UK Corporate Bond based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables for the corporate bond's coupon rate, price, the benchmark rate, and time to maturity.\n\n2. We create a helper function `calculate_ytm` to estimate the yield to maturity (YTM) of the corporate bond using a simplified formula.\n\n3. We calculate the YTM of the corporate bond using the helper function.\n\n4. We calculate the G-spread by subtracting the benchmark rate from the corporate bond's YTM and converting the result to basis points (multiplying by 10000).\n\n5. Finally, we return the G-spread rounded to two decimal places.\n\nThis solution provides an approximation of the G-spread. For more precise calculations, you might need to use more complex bond pricing models or iterative methods to determine the exact yield to maturity."
        ]
    },
    {
        "tables": [
            "|Exhibit 1  Atlantic Preserves, Inc.                   |        |\n|Selected Information from Note F of the 2013 Annual Financial Statements|        |\n|Relating to the Company's Defined Benefit Pension Plan (in $ thousands) |        |\n|Start-of-year pension obligation                      |72,544  |\n|Start-of-year plan assets                             |60,096  |\n|End-of-year pension obligation                        |74,077  |\n|End-of-year plan assets                               |61,812  |\n|Current service cost                                  |1,151   |\n|Interest cost                                         |5,441   |\n|Actual return on plan assets                          |5,888   |\n|Expected return on plan assets                        |4,597   |\n|Benefits paid to retired employees                    |5,059   |\n|Employer's contributions                              |887     |\n|Amortization of past service costs                    |272     |"
        ],
        "topic": "Accounting",
        "question_id": "test-374",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering that the actual return on pension plan assets of Pacific Reserve surpasses its predicted return, what is the company's total periodical pension expense (in $ thousands) for 2013 as displayed in Exhibit 1?",
        "output": [
            "Here's the Python program to calculate the total periodic pension expense for Atlantic Preserves, Inc. in 2013:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_service_cost = 1151\n    interest_cost = 5441\n    expected_return_on_plan_assets = 4597\n    amortization_of_past_service_costs = 272\n    actual_return_on_plan_assets = 5888\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the adjustment for the difference between actual and expected return\n    return_adjustment = expected_return_on_plan_assets - actual_return_on_plan_assets\n    \n    # Calculate total periodic pension expense\n    pension_expense = (\n        current_service_cost\n        + interest_cost\n        - expected_return_on_plan_assets\n        + amortization_of_past_service_costs\n        + return_adjustment\n    )\n    \n    # return answer (in $ thousands)\n    return pension_expense\n```\n\nThis program calculates the total periodic pension expense based on the components provided in Exhibit 1. It includes the current service cost, interest cost, expected return on plan assets, amortization of past service costs, and an adjustment for the difference between actual and expected return on plan assets. The result is returned in thousands of dollars, as per the original data."
        ]
    },
    {
        "tables": [
            "| Shares outstanding before buyback | 3.1 million |\n| --- | --- |\n| Earnings per share before buyback | $4.00 |\n| Share price at time of buyback | $50 |\n| After-tax cost of borrowing | 6% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-375",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will be the earnings per share for Blanchard Inc. after repurchasing 100,000 stocks, assuming they borrow precisely the required amount of money for this transaction?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding_before = 3100000\n    eps_before = 4.00\n    share_price = 50\n    cost_of_borrowing = 0.06\n    shares_repurchased = 100000\n\n    # Do math calculation to get the answer\n    total_earnings_before = shares_outstanding_before * eps_before\n    cost_of_buyback = shares_repurchased * share_price\n    interest_expense = cost_of_buyback * cost_of_borrowing\n    earnings_after_interest = total_earnings_before - interest_expense\n    shares_outstanding_after = shares_outstanding_before - shares_repurchased\n    \n    eps_after = earnings_after_interest / shares_outstanding_after\n\n    # return answer\n    return round(eps_after, 2)\n```\n\nThis Python function calculates the earnings per share (EPS) after Blanchard Inc. repurchases 100,000 stocks. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the total earnings before the buyback by multiplying the number of shares outstanding by the EPS before buyback.\n3. We calculate the cost of the buyback by multiplying the number of shares repurchased by the share price.\n4. We calculate the interest expense on the borrowed money for the buyback.\n5. We subtract the interest expense from the total earnings to get the earnings after interest.\n6. We calculate the new number of shares outstanding after the buyback.\n7. Finally, we divide the earnings after interest by the new number of shares outstanding to get the new EPS.\n8. We round the result to two decimal places for a typical financial presentation.\n\nThe function will return the new EPS after the stock repurchase."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-376",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the return of the perpetual annuity if its price is 870,000 and it pays annually $50,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 870000\n    annual_payment = 50000\n    \n    # Do math calculation to get the answer\n    return_rate = (annual_payment / price) * 100\n    \n    # return answer\n    return round(return_rate, 2)\n```\n\nThis Python program calculates the return of a perpetual annuity based on its price and annual payment. Here's how it works:\n\n1. We define two variables:\n   - `price`: The price of the perpetual annuity, which is 870,000.\n   - `annual_payment`: The annual payment of the annuity, which is 50,000.\n\n2. To calculate the return rate, we use the formula:\n   return rate = (annual payment / price) * 100\n\n3. We multiply by 100 to convert the decimal to a percentage.\n\n4. The `round()` function is used to round the result to two decimal places for better readability.\n\n5. Finally, the program returns the calculated return rate.\n\nWhen you run this function, it will return approximately 5.75, which means the return of the perpetual annuity is about 5.75%."
        ]
    },
    {
        "tables": [
            "|        | Bid Size      | Offer Size     |\n|--------|---------------|----------------|\n| Buyer  |(Number of shares)| Limit price(£) | (Number of shares) | Seller|\n|-------|---------------|--------------|----------------|--------|\n| Keith  | 1,000         | 19.70        |                |       |\n| Paul   | 200          | 19.84        |                |       |\n| Ann    | 400          | 19.89        |                |       |\n| Mary   | 300          | 20.02        |                |       |\n|        |               | 20.03        | 800            | Jack  |\n|        |               | 20.11        | 1,100          | Margaret |\n|        |               | 20.16        | 400            | Jeff   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-377",
        "python_solution": "",
        "ground_truth": null,
        "question": "A marketplace has the following limit orders standing on its book for a specific share: John places a day order to sell 1,000 shares, limit £19.83. Supposing that no further purchase orders are placed on that day after John's order, what would be John’s average trade price?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    john_shares = 1000\n    john_limit_price = 19.83\n    \n    buyers = [\n        {\"name\": \"Keith\", \"shares\": 1000, \"price\": 19.70},\n        {\"name\": \"Paul\", \"shares\": 200, \"price\": 19.84},\n        {\"name\": \"Ann\", \"shares\": 400, \"price\": 19.89},\n        {\"name\": \"Mary\", \"shares\": 300, \"price\": 20.02}\n    ]\n    \n    # Do math calculation to get the answer\n    total_value = 0\n    shares_sold = 0\n    \n    for buyer in buyers:\n        if buyer[\"price\"] >= john_limit_price:\n            if shares_sold + buyer[\"shares\"] <= john_shares:\n                total_value += buyer[\"shares\"] * buyer[\"price\"]\n                shares_sold += buyer[\"shares\"]\n            else:\n                remaining_shares = john_shares - shares_sold\n                total_value += remaining_shares * buyer[\"price\"]\n                shares_sold = john_shares\n                break\n    \n    if shares_sold > 0:\n        average_trade_price = total_value / shares_sold\n    else:\n        average_trade_price = 0\n    \n    # return answer\n    return round(average_trade_price, 2)\n```\n\nThis program calculates John's average trade price based on the given limit orders and John's sell order. Here's how it works:\n\n1. We define John's order details and the list of buyers with their respective share quantities and limit prices.\n\n2. We iterate through the buyers, checking if their limit price is greater than or equal to John's limit price (£19.83).\n\n3. For each eligible buyer, we calculate the value of the trade and add it to the total value. We also keep track of the number of shares sold.\n\n4. We stop the calculation when all of John's shares are sold or when we've gone through all the buyers.\n\n5. Finally, we calculate the average trade price by dividing the total value by the number of shares sold.\n\n6."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-378",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the Break-even inflation rate for Microsoft is 5%, the real default-free interest rate is 4.5%, and the anticipated future inflation is 3.5%. Can you determine the uncertainty of future inflation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    break_even_inflation_rate = 0.05\n    real_default_free_rate = 0.045\n    anticipated_future_inflation = 0.035\n    \n    # Do math calculation to get the answer\n    uncertainty = break_even_inflation_rate - anticipated_future_inflation\n    \n    # return answer\n    return uncertainty\n```\n\nThis Python function calculates the uncertainty of future inflation based on the given information. Here's how it works:\n\n1. We define the variables with the given values:\n   - Break-even inflation rate: 5% = 0.05\n   - Real default-free interest rate: 4.5% = 0.045\n   - Anticipated future inflation: 3.5% = 0.035\n\n2. To calculate the uncertainty of future inflation, we subtract the anticipated future inflation from the break-even inflation rate.\n\n3. The function returns this difference, which represents the uncertainty of future inflation.\n\nNote that the real default-free interest rate (4.5%) is not used in this calculation. The uncertainty is derived from the difference between the break-even inflation rate (which is a market-based measure of expected inflation) and the anticipated future inflation.\n\nWhen you run this function, it will return 0.015, or 1.5%, which represents the uncertainty of future inflation based on the given information."
        ]
    },
    {
        "tables": [
            "| Purchase price | $12,980 |\n|----------------|---------|\n| Freight and insurance | $1,200 |\n| Installation | $700 |\n| Testing | $100 |\n| Maintenance staff training costs | $500 |"
        ],
        "topic": "Accounting",
        "question_id": "test-379",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation TechnoSphere recently acquired and set up a new apparatus for its production factory. What should be the cumulative expense of the apparatus displayed on TechnoSphere's financial statement, given the costs the company had to bear?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 12980\n    freight_and_insurance = 1200\n    installation = 700\n    testing = 100\n    maintenance_staff_training = 500\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + maintenance_staff_training\n    \n    # return answer\n    return total_cost\n```\n\nThis program calculates the cumulative expense of the apparatus that should be displayed on TechnoSphere's financial statement. It includes all the costs provided in the table: purchase price, freight and insurance, installation, testing, and maintenance staff training costs. The total cost is the sum of all these individual expenses."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-380",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the discount rate if a 30-day Treasury bill is priced at 99.5?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value of $100 for simplicity\n    price = 99.5\n    days = 30\n\n    # Do math calculation to get the answer\n    discount = face_value - price\n    discount_rate = (discount / face_value) * (365 / days) * 100\n\n    # return answer\n    return round(discount_rate, 2)\n```\n\nThis Python program calculates the discount rate for a 30-day Treasury bill priced at 99.5. Here's how it works:\n\n1. We define the variables:\n   - `face_value`: Assumed to be $100 for simplicity (Treasury bills are typically issued at a $100 face value)\n   - `price`: The given price of 99.5\n   - `days`: The maturity period of 30 days\n\n2. We calculate the discount, which is the difference between the face value and the price.\n\n3. We then calculate the discount rate using the formula:\n   Discount Rate = (Discount / Face Value) * (365 / Days to Maturity) * 100\n\n4. The result is rounded to two decimal places for readability.\n\n5. The calculated discount rate is returned as the answer.\n\nThis program will return the annualized discount rate as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-381",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a one-year bond rated BBB, the spread over risk-free Treasuries of the same maturity is 2.5%. If all non-credit factors such as liquidity risk and taxes contribute to a 1% spread, what's the assumed default probability for this bond, if the loss given default rate is 60%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_spread = 0.025  # 2.5% spread over risk-free Treasuries\n    non_credit_spread = 0.01  # 1% spread due to non-credit factors\n    credit_spread = total_spread - non_credit_spread\n    loss_given_default = 0.60  # 60% loss given default rate\n\n    # Do math calculation to get the answer\n    # The credit spread is approximately equal to the probability of default times the loss given default\n    # So, probability of default = credit spread / loss given default\n    probability_of_default = credit_spread / loss_given_default\n\n    # return answer\n    return probability_of_default\n```\n\nThis Python program calculates the assumed default probability for the BBB-rated one-year bond based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `total_spread`: The total spread over risk-free Treasuries (2.5% or 0.025)\n   - `non_credit_spread`: The spread due to non-credit factors (1% or 0.01)\n   - `credit_spread`: The spread due to credit risk, calculated as the difference between total spread and non-credit spread\n   - `loss_given_default`: The loss given default rate (60% or 0.60)\n\n2. We calculate the probability of default using the formula:\n   probability of default = credit spread / loss given default\n\n3. The function returns the calculated probability of default.\n\nThis calculation is based on the approximation that the credit spread is roughly equal to the probability of default multiplied by the loss given default. The result will give you the assumed default probability for the bond."
        ]
    },
    {
        "tables": [
            "|  | Bond A |\n| --- | --- |\n| Periodicity | semiannually |\n| Par | 100 |\n| Price | 105 |\n| YTM | 4% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-382",
        "python_solution": "",
        "ground_truth": null,
        "question": "The specific data of bond B is given below: What would be the YTM if it is transformed into a quarterly periodicity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_a_ytm = 0.04  # 4% YTM for Bond A\n    bond_a_periodicity = 2  # semiannual\n\n    # Do math calculation to get the answer\n    \n    # Convert semiannual YTM to annual YTM\n    annual_ytm = (1 + bond_a_ytm/bond_a_periodicity)**bond_a_periodicity - 1\n    \n    # Convert annual YTM to quarterly YTM\n    quarterly_ytm = (1 + annual_ytm)**(1/4) - 1\n    \n    # return answer\n    return quarterly_ytm\n```\n\nThis Python program calculates the YTM (Yield to Maturity) of Bond B if it were to be transformed into quarterly periodicity, based on the information provided for Bond A.\n\nHere's the step-by-step explanation:\n\n1. We define the YTM of Bond A as 4% (0.04) and its periodicity as semiannual (2 times per year).\n\n2. We first convert the semiannual YTM to an annual YTM using the formula: (1 + r/m)^m - 1, where r is the semiannual rate and m is the number of compounding periods per year.\n\n3. Then, we convert the annual YTM to a quarterly YTM using the formula: (1 + r)^(1/n) - 1, where r is the annual rate and n is the number of compounding periods per year (4 for quarterly).\n\n4. The function returns the quarterly YTM.\n\nThis solution assumes that the YTM should be converted to an equivalent rate with a different compounding frequency, maintaining the same effective annual rate. The returned value will be the quarterly YTM as a decimal (e.g., 0.00990099 for 0.990099%)."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-383",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a business purchased a client database for $300,000, foreseeing its usefulness for three years, along with a trademark worth $5,000,000 expecting it to be useful indefinitely but it's required to renew it every 10 years with the Patent and Trademark Bureau for a small fee or it will become void. Given that the business applies straight-line depreciation for all its non-physical properties, what would the yearly amortization cost for these two properties amount to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    client_database_cost = 300000\n    client_database_useful_life = 3\n    trademark_cost = 5000000\n    trademark_useful_life = 10  # Renewal period is considered as useful life\n\n    # Do math calculation to get the answer\n    client_database_amortization = client_database_cost / client_database_useful_life\n    trademark_amortization = trademark_cost / trademark_useful_life\n    \n    total_yearly_amortization = client_database_amortization + trademark_amortization\n\n    # return answer\n    return total_yearly_amortization\n```\n\nThis Python program calculates the yearly amortization cost for the client database and trademark as follows:\n\n1. It defines the cost and useful life for both the client database and trademark.\n2. For the client database, it calculates the yearly amortization by dividing the cost by its useful life of 3 years.\n3. For the trademark, although it's expected to be useful indefinitely, the renewal requirement every 10 years is considered as its useful life for amortization purposes. So it calculates the yearly amortization by dividing the cost by 10 years.\n4. It then sums up the yearly amortization costs for both assets to get the total yearly amortization.\n5. Finally, it returns this total yearly amortization cost.\n\nThis approach adheres to the straight-line depreciation method as specified in the question."
        ]
    },
    {
        "tables": [
            "| Net income                           | $200,000 |\n|--------------------------------------|----------|\n| Decrease in accounts receivable      | 10,000   |\n| Depreciation                         | 36,000   |\n| Increase in inventory                | 12,000   |\n| Increase in accounts payable         | 17,000   |\n| Decrease in wages payable            | 8,000    |\n| Increase in deferred tax liabilities | 12,000   |\n| Profit from the sale of equipment    | 6,000    |"
        ],
        "topic": "Accounting",
        "question_id": "test-384",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the data provided, what is the company's cash flow generated from operations?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income = 200000\n    decrease_accounts_receivable = 10000\n    depreciation = 36000\n    increase_inventory = 12000\n    increase_accounts_payable = 17000\n    decrease_wages_payable = 8000\n    increase_deferred_tax_liabilities = 12000\n    profit_sale_equipment = 6000\n\n    # Do math calculation to get the answer\n    cash_flow_operations = (\n        net_income\n        + decrease_accounts_receivable\n        + depreciation\n        - increase_inventory\n        + increase_accounts_payable\n        - decrease_wages_payable\n        + increase_deferred_tax_liabilities\n        - profit_sale_equipment\n    )\n\n    # return answer\n    return cash_flow_operations\n\n```\n\nThis Python program calculates the cash flow generated from operations based on the provided data. Here's a breakdown of the calculation:\n\n1. We start with net income.\n2. We add back non-cash expenses (depreciation) and adjust for changes in working capital:\n   - Add decrease in accounts receivable (as it represents cash received)\n   - Subtract increase in inventory (as it represents cash spent)\n   - Add increase in accounts payable (as it represents less cash spent)\n   - Subtract decrease in wages payable (as it represents cash spent)\n   - Add increase in deferred tax liabilities (as it doesn't represent a cash outflow)\n3. We subtract the profit from the sale of equipment, as it's not part of regular operations.\n\nThe function will return the calculated cash flow from operations."
        ]
    },
    {
        "tables": [
            "| Total asset | $5,000 million |\n| --- | --- |\n| ROE | 15% |\n| Cost of equity | 12.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-385",
        "python_solution": "",
        "ground_truth": null,
        "question": "Company N is financed with a 60% debt and 40% equity ratio. Using the RI model for valuation, John has gathered the necessary data in the provided chart. What is Company N's residual income?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 5000  # in millions\n    roe = 0.15\n    cost_of_equity = 0.125\n    equity_ratio = 0.40\n\n    # Do math calculation to get the answer\n    equity = total_assets * equity_ratio\n    net_income = roe * equity\n    required_return = cost_of_equity * equity\n    residual_income = net_income - required_return\n\n    # return answer\n    return residual_income\n\n# You can test the function by calling it\nprint(solution())\n```\n\nThis Python program calculates the residual income for Company N based on the given information. Here's a breakdown of the calculation:\n\n1. We define the given variables: total assets, ROE, cost of equity, and the equity ratio (40% or 0.40).\n2. We calculate the equity by multiplying total assets by the equity ratio.\n3. Net income is calculated by multiplying ROE by equity.\n4. The required return is calculated by multiplying the cost of equity by equity.\n5. Finally, residual income is calculated by subtracting the required return from net income.\n\nThe function returns the residual income in millions of dollars. When you run this program, it will output the residual income for Company N."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-386",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a customer buys a 6-year bond at a price of 109.83, with an 8% coupon rate where the interest is paid yearly. Supposing the consistent market rate during this time is 6%, what would be the horizon yield if the customer decides to offload the bond at the close of year 5?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value of 100\n    purchase_price = 109.83\n    coupon_rate = 0.08\n    market_rate = 0.06\n    bond_term = 6\n    sell_year = 5\n\n    # Do math calculation to get the answer\n    annual_coupon = face_value * coupon_rate\n    \n    # Calculate the present value of coupons for 5 years\n    pv_coupons = sum([annual_coupon / (1 + market_rate)**t for t in range(1, sell_year+1)])\n    \n    # Calculate the present value of the bond at the end of year 5\n    pv_bond_year5 = (face_value + annual_coupon) / (1 + market_rate)**(bond_term - sell_year)\n    \n    # Total present value at the end of year 5\n    total_pv_year5 = pv_coupons + pv_bond_year5\n    \n    # Calculate the horizon yield\n    horizon_yield = ((total_pv_year5 / purchase_price)**(1/sell_year)) - 1\n\n    # return answer\n    return horizon_yield * 100  # Convert to percentage\n```\n\nThis Python program calculates the horizon yield for the given scenario. Here's a breakdown of the calculation:\n\n1. We define all the necessary variables based on the given information.\n2. We calculate the annual coupon payment.\n3. We calculate the present value of all coupon payments for 5 years.\n4. We calculate the present value of the bond at the end of year 5 (which includes the face value plus the last coupon payment).\n5. We sum these to get the total present value at the end of year 5.\n6. Finally, we calculate the horizon yield using the formula: ((PV at horizon / Purchase Price)^(1/n)) - 1, where n is the number of years until the horizon (5 in this case).\n7. We return the result as a percentage.\n\nThis program will return the horizon yield as a percentage, which is the"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-387",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the preferred shares of Baxter corporation are anticipated to pay a perpetual annual dividend of $12 and the constant required rate of return is 15%, what should the value of the preferred stock be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_dividend = 12\n    required_rate_of_return = 0.15  # 15% expressed as a decimal\n    \n    # Do math calculation to get the answer\n    preferred_stock_value = annual_dividend / required_rate_of_return\n    \n    # return answer\n    return preferred_stock_value\n```\n\nThis Python program calculates the value of the preferred stock using the dividend discount model for perpetual preferred stock. The formula used is:\n\nValue of Preferred Stock = Annual Dividend / Required Rate of Return\n\nIn this case:\n- The annual dividend is $12\n- The required rate of return is 15% (or 0.15 in decimal form)\n\nThe program calculates this value and returns it. When you run this function, it will return 80, meaning the value of the preferred stock should be $80."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-388",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood of a variable falling between 10 and 20 for a random variable adhering to a continuous uniform distribution within the span of 5 to 25?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 5\n    upper_bound = 25\n    interval_start = 10\n    interval_end = 20\n    \n    # Do math calculation to get the answer\n    total_range = upper_bound - lower_bound\n    interval_range = interval_end - interval_start\n    \n    # For a continuous uniform distribution, the probability is the ratio of the interval to the total range\n    probability = interval_range / total_range\n    \n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability of a random variable falling between 10 and 20 for a continuous uniform distribution between 5 and 25. \n\nHere's how it works:\n\n1. We define the variables:\n   - `lower_bound` and `upper_bound` represent the range of the uniform distribution (5 to 25)\n   - `interval_start` and `interval_end` represent the interval we're interested in (10 to 20)\n\n2. We calculate the total range of the distribution and the range of our interval of interest.\n\n3. For a continuous uniform distribution, the probability of a value falling within an interval is equal to the ratio of the interval's length to the total range of the distribution.\n\n4. We calculate this probability and return it.\n\nThe answer returned by this function will be 0.5, or 50%, because the interval 10 to 20 represents half of the total range 5 to 25."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-389",
        "python_solution": "",
        "ground_truth": null,
        "question": "Ultimately, in 2016, Henderson stated that BBBC bought 100% of SongBox (SB), a specific cable music channel in an all-stock transaction. At the point of acquisition, SB had intangible assets for broadcast licenses valued at $2,500. BBBC evaluated the fair market value of these licenses to be $5,500 at that date and estimated the SongBox brand name value to be $2,000, all values are in thousands. The acquisition did not create any goodwill. Prior to the amortization expense calculation, what is the rise in BBBC's intangible assets (in thousands) resulting from the 2016 purchase of SB?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sb_book_value_licenses = 2500\n    fair_value_licenses = 5500\n    brand_name_value = 2000\n    \n    # Do math calculation to get the answer\n    increase_in_licenses = fair_value_licenses - sb_book_value_licenses\n    total_increase = increase_in_licenses + brand_name_value\n    \n    # return answer\n    return total_increase\n```\n\nThis Python program calculates the increase in BBBC's intangible assets resulting from the 2016 purchase of SongBox (SB). Here's how it works:\n\n1. We define the known values:\n   - The book value of SB's broadcast licenses: $2,500,000\n   - The fair market value of these licenses: $5,500,000\n   - The estimated value of SongBox's brand name: $2,000,000\n\n2. We calculate the increase in intangible assets:\n   - The increase in the value of licenses: $5,500,000 - $2,500,000 = $3,000,000\n   - The brand name value is a new intangible asset: $2,000,000\n   - The total increase is the sum of these two: $3,000,000 + $2,000,000 = $5,000,000\n\n3. The function returns this total increase of $5,000,000.\n\nNote that the values are in thousands, so the actual return value is 5000, representing $5,000,000."
        ]
    },
    {
        "tables": [
            "|                 | Coefficients | Standard Error | t- Statistic | p-Value |\n|-----------------|--------------|----------------|--------------|---------|\n| Intercept       | 0.5987       | 0.0561         | 10.6749      | 0.0000  |\n| FATO            | 0.2951       | 0.0077         | 38.5579      | 0.0000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-390",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the model lnNPMi=b0+b1FATOi, which is based on data collected from a sample of 35 companies in the most recent fiscal year, what is the projected net profit margin for a corporation that has a fixed asset turnover ratio of 2 times? This is what Sam Braxton is studying, focusing on the relationship between companies' net profit margins (in percent) and their fixed asset turnover (FATO).",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    b0 = 0.5987  # Intercept coefficient\n    b1 = 0.2951  # FATO coefficient\n    fato = 2     # Given fixed asset turnover ratio\n\n    # Do math calculation to get the answer\n    ln_npm = b0 + b1 * fato\n    npm = 100 * (math.exp(ln_npm) - 1)  # Convert from ln to percentage\n\n    # return answer\n    return round(npm, 2)\n```\n\nThis Python function calculates the projected net profit margin based on the given regression model and fixed asset turnover ratio. Here's a breakdown of the calculation:\n\n1. We define the coefficients b0 (intercept) and b1 (FATO) from the provided table.\n2. We set the FATO value to 2 as given in the question.\n3. We calculate ln(NPM) using the model equation: lnNPMi = b0 + b1 * FATOi\n4. We then convert this ln(NPM) back to a regular NPM percentage using the exponential function and subtracting 1 (since e^ln(1+x) = 1+x for small x).\n5. We multiply by 100 to convert to a percentage and round to 2 decimal places for readability.\n\nThe function will return the projected net profit margin as a percentage."
        ]
    },
    {
        "tables": [
            "| (all figures in $ thousands) | 2010 | 2009 |\n|-----------------------------|------|------|\n| Deferred tax assets        | 200  | 160  |\n| Deferred tax liabilities   | (450)| (360)|\n| Net deferred tax liabilities | (250)| (200)|\n|                             |      |      |\n| Earning before taxes         | 4000 | 3800 |\n| Income taxes at the statutory rate| 1200| 1140|\n| Income tax payable (Current income tax expense)| 1000 | 900 |"
        ],
        "topic": "Accounting",
        "question_id": "test-391",
        "python_solution": "",
        "ground_truth": null,
        "question": "What was the 2010 income tax expense (in thousands) for the business, based on the provided details about the business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_tax_expense_2010 = 1000\n    deferred_tax_liabilities_2010 = 250\n    deferred_tax_liabilities_2009 = 200\n    \n    # Do math calculation to get the answer\n    deferred_tax_expense = deferred_tax_liabilities_2010 - deferred_tax_liabilities_2009\n    total_tax_expense = current_tax_expense_2010 + deferred_tax_expense\n    \n    # return answer\n    return total_tax_expense\n```\n\nThis Python program calculates the total income tax expense for 2010 based on the information provided in the table. Here's how it works:\n\n1. We define the relevant variables:\n   - The current tax expense (income tax payable) for 2010 is $1,000,000 (given as 1000 in thousands).\n   - The net deferred tax liabilities for 2010 and 2009 are $250,000 and $200,000 respectively (given as 250 and 200 in thousands).\n\n2. We calculate the deferred tax expense, which is the change in net deferred tax liabilities from 2009 to 2010.\n\n3. We then add the current tax expense and the deferred tax expense to get the total tax expense.\n\n4. The function returns this total tax expense.\n\nWhen you run this function, it will return 1050, which represents $1,050,000 (as the original figures were in thousands). This is the total income tax expense for 2010, comprising $1,000,000 in current tax expense and $50,000 in deferred tax expense."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-392",
        "python_solution": "",
        "ground_truth": null,
        "question": "A set of 25 data points has an average of 8 and a standard deviation of 15. What is the standard error of this average?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 25  # number of data points\n    std_dev = 15  # standard deviation\n    \n    # Do math calculation to get the answer\n    standard_error = std_dev / (n ** 0.5)\n    \n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the standard error of the mean for the given set of data points. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `n` is the number of data points (25)\n   - `std_dev` is the standard deviation (15)\n\n2. We calculate the standard error using the formula:\n   Standard Error = Standard Deviation / √n\n   \n   In Python, we express this as `std_dev / (n ** 0.5)`, where `**` is the exponentiation operator and `0.5` is equivalent to a square root.\n\n3. Finally, we return the calculated standard error.\n\nNote that we don't need to use the average (8) in this calculation, as the standard error of the mean only depends on the standard deviation and the sample size."
        ]
    },
    {
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n| -------- | ------------ | ------ | ------ |\n| G        | 15.00        | 17.00  | 500    |\n| H        | 35.00        | 33.00  | 300    |\n| 1        | 37.00        | 40.00  | 200    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-393",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Benedict from a finance corporation collected data for a price-weighted index made up of securities G,H,I. What is the index's price return for that period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = ['G', 'H', 'I']\n    beginning_prices = [15.00, 35.00, 37.00]\n    end_prices = [17.00, 33.00, 40.00]\n    \n    # Do math calculation to get the answer\n    beginning_index = sum(beginning_prices) / len(securities)\n    end_index = sum(end_prices) / len(securities)\n    \n    price_return = (end_index - beginning_index) / beginning_index\n    \n    # Convert to percentage and round to 2 decimal places\n    price_return_percentage = round(price_return * 100, 2)\n    \n    # return answer\n    return price_return_percentage\n```\n\nThis Python program calculates the price return for the price-weighted index as follows:\n\n1. It defines the securities and their beginning and end prices.\n2. It calculates the beginning index value by summing the beginning prices and dividing by the number of securities.\n3. It calculates the end index value in the same way using the end prices.\n4. It then calculates the price return using the formula: (End Index - Beginning Index) / Beginning Index\n5. The result is converted to a percentage and rounded to two decimal places.\n6. The function returns this percentage as the answer.\n\nThis program will return the price return of the index as a percentage, which answers the question asked by the analyst Benedict."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-394",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firm N adheres to U.S.GAAP, it expended $150 million on acquiring inventory, $10 million on transporting the goods to their existing location and an extra $10 million on their sale. What is the inventory cost of firm N?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 150000000\n    transportation_cost = 10000000\n    selling_cost = 10000000\n    \n    # Do math calculation to get the answer\n    inventory_cost = acquisition_cost + transportation_cost\n    \n    # return answer\n    return inventory_cost\n```\n\nThis Python program calculates the inventory cost for Firm N according to U.S. GAAP (Generally Accepted Accounting Principles). Here's an explanation of the solution:\n\n1. We define three variables:\n   - `acquisition_cost`: The cost of acquiring the inventory ($150 million)\n   - `transportation_cost`: The cost of transporting the goods ($10 million)\n   - `selling_cost`: The cost associated with selling the goods ($10 million)\n\n2. To calculate the inventory cost, we add the acquisition cost and the transportation cost. Under U.S. GAAP, the cost of inventory includes the purchase price and all costs necessary to bring the inventory to its present location and condition. This includes transportation costs but excludes selling costs.\n\n3. The selling cost of $10 million is not included in the inventory cost calculation because selling expenses are not part of the inventory cost under U.S. GAAP. These costs are typically expensed as incurred.\n\n4. The function returns the `inventory_cost`, which is the sum of the acquisition cost and transportation cost.\n\nThis solution correctly calculates the inventory cost as $160 million (150 million + 10 million), adhering to U.S. GAAP principles."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-395",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the $150 million distressed bond portfolio managed by Sarah Brown undergoes a 4-sigma daily event, can you estimate the change in the portfolio's value? Sarah, who conducts stress tests on the portfolio, has experienced numerous days over the past two years where the portfolio's daily value change was more than 3 standard deviations. This portfolio has an annualized return of 12% and an annualized return volatility of 25%.",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 150_000_000  # $150 million\n    annual_return = 0.12  # 12%\n    annual_volatility = 0.25  # 25%\n    sigma_event = 4  # 4-sigma event\n    trading_days = 252  # Typical number of trading days in a year\n\n    # Do math calculation to get the answer\n    daily_volatility = annual_volatility / (trading_days ** 0.5)\n    daily_value_change = portfolio_value * daily_volatility * sigma_event\n\n    # return answer\n    return daily_value_change\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The estimated change in the portfolio's value for a 4-sigma daily event is ${result:,.2f}\")\n```\n\nThis program calculates the estimated change in the portfolio's value for a 4-sigma daily event. Here's a breakdown of the steps:\n\n1. We define the variables:\n   - Portfolio value: $150 million\n   - Annual return: 12% (not used in this calculation)\n   - Annual volatility: 25%\n   - Sigma event: 4 (for a 4-sigma event)\n   - Trading days: 252 (typical number of trading days in a year)\n\n2. We calculate the daily volatility by dividing the annual volatility by the square root of the number of trading days.\n\n3. We then calculate the daily value change for a 4-sigma event by multiplying the portfolio value, daily volatility, and the number of standard deviations (4 in this case).\n\n4. The function returns the calculated daily value change.\n\nWhen you run this program, it will output the estimated change in the portfolio's value for a 4-sigma daily event. The result will be a dollar amount representing the potential loss (or gain) in the portfolio's value under such an extreme event."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-396",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a firm has total variable expenses of $4 million and set expenses of $3 million, what should be its minimal total income to remain in business over the long haul?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_variable_expenses = 4000000\n    fixed_expenses = 3000000\n    \n    # Do math calculation to get the answer\n    minimal_total_income = total_variable_expenses + fixed_expenses\n    \n    # return answer\n    return minimal_total_income\n```\n\nThis program calculates the minimal total income required for a firm to remain in business over the long haul, given its total variable expenses and fixed expenses.\n\nIn the long run, a firm needs to cover all of its costs to stay in business. This includes both variable expenses (which change with the level of output) and fixed expenses (which remain constant regardless of output level).\n\nThe minimal total income is therefore the sum of these two types of expenses. This is known as the break-even point, where total revenue equals total costs, resulting in zero profit. Any income below this point would result in a loss, which is not sustainable in the long term.\n\nThe program returns $7,000,000 as the answer, which represents the minimal total income needed to cover both the $4 million in variable expenses and the $3 million in fixed expenses."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-397",
        "python_solution": "",
        "ground_truth": null,
        "question": "Henry Miller and his team gather extensive statistical data on the automobile market. From the information, they deduce that the average cost of SUVs exceeds $46,435 in their nation. Subsequently, they randomly pick 64 SUVs with an average value of $46,760. Assuming that the population's standard deviation is 1370, Henry Miller performs a hypothesis test to verify their hypothesis. What is the figure for the calculated test statistic?",
        "output": [
            "Here's a Python program to calculate the test statistic for the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    population_mean = 46435\n    sample_mean = 46760\n    population_std_dev = 1370\n    sample_size = 64\n\n    # Do math calculation to get the answer\n    standard_error = population_std_dev / (sample_size ** 0.5)\n    test_statistic = (sample_mean - population_mean) / standard_error\n\n    # return answer\n    return test_statistic\n```\n\nThis program calculates the z-score (test statistic) for a one-sample z-test. Here's a breakdown of the steps:\n\n1. We define the given values:\n   - Population mean (μ₀) = $46,435\n   - Sample mean (x̄) = $46,760\n   - Population standard deviation (σ) = $1,370\n   - Sample size (n) = 64\n\n2. We calculate the standard error of the mean:\n   SE = σ / √n\n\n3. We then calculate the test statistic (z-score) using the formula:\n   z = (x̄ - μ₀) / SE\n\n4. The calculated test statistic is returned as the answer.\n\nThis program will return the test statistic, which is the z-score for this hypothesis test."
        ]
    },
    {
        "tables": [
            "|                               | 31 Dec 05 |  31 Dec 06  |\n| ----------------------------- | --------- | ----------- |\n| Inventory reported on balance sheet | $500,000  | $600,000 |\n| LIFO reserve                  | $50,000   | $70,000  |\n| Average tax rate              | 30%       | 30%       |"
        ],
        "topic": "Accounting",
        "question_id": "test-398",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would be the inventory on 31 December 2006 for a US business that employs the last in, first out (LIFO) accounting system for inventory, according to the data reviewed by the analyst, once the values have been adjusted to adapt to the first in, first out (FIFO) method?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lifo_inventory_2006 = 600000\n    lifo_reserve_2006 = 70000\n    \n    # Do math calculation to get the answer\n    fifo_inventory_2006 = lifo_inventory_2006 + lifo_reserve_2006\n    \n    # return answer\n    return fifo_inventory_2006\n```\n\nThis program calculates the inventory value under the FIFO method for 31 December 2006. Here's an explanation of the calculation:\n\n1. We start with the LIFO inventory value reported on the balance sheet for 31 Dec 2006, which is $600,000.\n2. To convert from LIFO to FIFO, we need to add the LIFO reserve, which is $70,000 for 31 Dec 2006.\n3. The sum of these two values gives us the FIFO inventory value.\n\nThe program returns the FIFO inventory value, which is $670,000. This represents what the inventory value would be if the company had been using the FIFO method instead of LIFO."
        ]
    },
    {
        "tables": [
            "| Maturity | Par Rate | Spot Rate |\n|----------|---------|---------|\n| 1        | 2.5000% | 2.5000% |\n| 2        | 3.5000% | 3.5177% |",
            "|          | Time 0   | Time 1                  |\n|----------|----------|-------------------------|\n|          |          | 5.8365%                 |\n|          | 2.500%   |                         |\n|          |          | Lower one-period forward rate |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-399",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the information in Displays 1 and 2, when aligning a binomial interest rate tree beginning with the computation of implied forward rates illustrated in Display 2, what is the worth of the inferior one-period forward rate?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1 = 0.025  # 2.5000% for 1-year spot rate\n    spot_rate_2 = 0.035177  # 3.5177% for 2-year spot rate\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the implied forward rate\n    implied_forward_rate = ((1 + spot_rate_2) ** 2 / (1 + spot_rate_1)) - 1\n    \n    # Calculate the upper one-period forward rate (given in the table)\n    upper_forward_rate = 0.058365  # 5.8365%\n    \n    # Calculate the lower one-period forward rate\n    lower_forward_rate = (1 + spot_rate_2) ** 2 / ((1 + spot_rate_1) * (1 + upper_forward_rate)) - 1\n    \n    # Convert to percentage\n    answer = lower_forward_rate * 100\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the lower one-period forward rate based on the information provided in the table. Here's how it works:\n\n1. We define the spot rates for 1-year and 2-year maturities.\n2. We calculate the implied forward rate using the formula: (1 + r2)^2 / (1 + r1) - 1, where r2 is the 2-year spot rate and r1 is the 1-year spot rate.\n3. We use the upper one-period forward rate given in the table (5.8365%).\n4. We calculate the lower one-period forward rate using the formula: (1 + r2)^2 / ((1 + r1) * (1 + upper_rate)) - 1\n5. Finally, we convert the result to a percentage by multiplying by 100.\n\nThe program will return the lower one-period forward rate as a percentage, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-400",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose the Smith account had a return of -5.3% in a specific month, during which the portfolio benchmark yielded a return of -5.5% and the market index returned -2.8%. What is the return of the Smith account attributing to the manager's style?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    smith_return = -0.053\n    benchmark_return = -0.055\n    market_return = -0.028\n    \n    # Do math calculation to get the answer\n    style_return = smith_return - benchmark_return\n    \n    # return answer\n    return style_return\n```\n\nThis Python program calculates the return attributable to the manager's style for the Smith account. Here's an explanation of the calculation:\n\n1. We define the given returns as variables:\n   - Smith account return: -5.3% (-0.053 in decimal form)\n   - Portfolio benchmark return: -5.5% (-0.055 in decimal form)\n   - Market index return: -2.8% (-0.028 in decimal form)\n\n2. To calculate the return attributable to the manager's style, we subtract the benchmark return from the Smith account return.\n\n3. The result (style_return) is returned as the answer.\n\nThis calculation assumes that the difference between the Smith account's performance and the benchmark's performance is due to the manager's style. It's worth noting that the market return, while provided, is not used in this specific calculation. The market return would typically be used in a more comprehensive performance attribution analysis, which might also consider factors like asset allocation and security selection."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-401",
        "python_solution": "",
        "ground_truth": null,
        "question": "A telecommunications company based in Europe adheres to International Financial Reporting Standards (IFRS) and capitalizes costs of new product development. In 2014, they invested €25 million into new product development and reported an amortization expense of €10 million from the previous year's new product development. The cash flow from operations for this company was reported as €290 million. An analyst is drawing a comparison between this European company and a telecommunications provider in the US, and has chosen to adjust his financial statements to the US GAAP. Considering US GAAP and not taking tax effects into account, what would be the operational cash flow for the European telecommunications provider?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    reported_cash_flow = 290000000  # €290 million\n    new_product_development_cost = 25000000  # €25 million\n    amortization_expense = 10000000  # €10 million\n\n    # Do math calculation to get the answer\n    # Under US GAAP, R&D costs are expensed as incurred\n    # We need to subtract the capitalized R&D costs and add back the amortization\n    adjusted_cash_flow = reported_cash_flow - new_product_development_cost + amortization_expense\n\n    # return answer\n    return adjusted_cash_flow\n```\n\nThis Python program calculates the operational cash flow for the European telecommunications provider according to US GAAP standards. Here's what the program does:\n\n1. It defines the given values as variables:\n   - The reported cash flow from operations (€290 million)\n   - The cost of new product development (€25 million)\n   - The amortization expense from the previous year's development (€10 million)\n\n2. It then calculates the adjusted cash flow:\n   - It subtracts the new product development cost because under US GAAP, R&D costs are expensed immediately rather than capitalized.\n   - It adds back the amortization expense because this would not exist under US GAAP (since R&D costs were not capitalized in the first place).\n\n3. Finally, it returns the adjusted cash flow.\n\nThis calculation gives us the operational cash flow as it would be reported under US GAAP, without considering tax effects."
        ]
    },
    {
        "tables": [
            "| Time to Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 8.0%      |\n| 2 years          | 7.5%      |\n| 3 years          | 7.0%      |\n| 4 years          | 6.5%      |\n| 5 years          | 6.0%      |\n| 6 years          | 5.5%      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-402",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given spot rates, what is the present value of the bond issued by Valencia Corp. that pays no coupon for the initial two years, and then commences to pay an annual coupon at a 9% rate until the bond matures after six years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000\n    coupon_rate = 0.09\n    spot_rates = {1: 0.08, 2: 0.075, 3: 0.07, 4: 0.065, 5: 0.06, 6: 0.055}\n\n    # Do math calculation to get the answer\n    pv = 0\n\n    # Calculate PV of coupon payments (years 3-6)\n    for year in range(3, 7):\n        coupon = face_value * coupon_rate\n        pv += coupon / ((1 + spot_rates[year]) ** year)\n\n    # Calculate PV of face value at maturity\n    pv += face_value / ((1 + spot_rates[6]) ** 6)\n\n    # Return answer rounded to 2 decimal places\n    return round(pv, 2)\n```\n\nThis Python program calculates the present value of the bond based on the given spot rates and bond characteristics. Here's a breakdown of the solution:\n\n1. We define the face value of the bond (assumed to be $1000), the coupon rate (9%), and a dictionary of spot rates for each year.\n\n2. We initialize the present value (pv) to 0.\n\n3. We calculate the present value of the coupon payments for years 3 through 6. The bond pays no coupon for the first two years, so we start from year 3.\n\n4. We calculate the present value of the face value paid at maturity (year 6).\n\n5. We sum up all these present values to get the total present value of the bond.\n\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the present value of the bond, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-403",
        "python_solution": "",
        "ground_truth": null,
        "question": "Utilizing a two-period binomial model, Emily is looking to compute the terminal value of a put option. Given the current price of the underlying asset is $150 and the strike price stands at $120, the extent of an upward move is 1.69 and a downward move is 0.59. The option will only hold a positive value if the price falls below the strike price, otherwise its value will remain zero. How many terminal nodes could potentially offer a positive return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 150\n    strike_price = 120\n    up_move = 1.69\n    down_move = 0.59\n    \n    # Do math calculation to get the answer\n    price_up = current_price * up_move\n    price_down = current_price * down_move\n    \n    positive_nodes = 0\n    \n    # Check bottom node\n    if price_down * down_move < strike_price:\n        positive_nodes += 1\n    \n    # Check middle node\n    if price_down * up_move < strike_price:\n        positive_nodes += 1\n    \n    # return answer\n    return positive_nodes\n```\n\nThis Python program calculates the number of terminal nodes in a two-period binomial model that could potentially offer a positive return for a put option.\n\nHere's how it works:\n\n1. We define the given variables: current price, strike price, up move, and down move factors.\n\n2. We calculate the price after one up move and one down move.\n\n3. We initialize a counter for positive nodes.\n\n4. We check the bottom node (two down moves) by multiplying the down price by the down move factor again and comparing it to the strike price.\n\n5. We check the middle node (one down move followed by one up move) by multiplying the down price by the up move factor and comparing it to the strike price.\n\n6. We don't need to check the top node (two up moves) because it will always be above the current price, which is already above the strike price.\n\n7. We return the count of positive nodes.\n\nThis program will return the number of terminal nodes that could potentially offer a positive return for the put option."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-404",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the one-year spot rate r(1) equals 4%, the forward rate for a one-year loan commencing in one year is 6%, and the forward rate for a one-year loan starting in two years is 8%, which one is the three-year spot rate out of the given rates?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04  # one-year spot rate\n    f2 = 0.06  # forward rate for year 2\n    f3 = 0.08  # forward rate for year 3\n    \n    # Do math calculation to get the answer\n    r3 = ((1 + r1) * (1 + f2) * (1 + f3)) ** (1/3) - 1\n    \n    # return answer\n    return r3\n\n# Test the function\nresult = solution()\nprint(f\"The three-year spot rate is approximately {result:.4f} or {result*100:.2f}%\")\n```\n\nThis Python program calculates the three-year spot rate using the given information. Here's how it works:\n\n1. We define the known rates:\n   - `r1`: one-year spot rate (4% = 0.04)\n   - `f2`: forward rate for year 2 (6% = 0.06)\n   - `f3`: forward rate for year 3 (8% = 0.08)\n\n2. We use the relationship between spot rates and forward rates to calculate the three-year spot rate. The formula is:\n   (1 + r3)^3 = (1 + r1) * (1 + f2) * (1 + f3)\n\n   Where r3 is the three-year spot rate we're solving for.\n\n3. We solve this equation for r3:\n   r3 = ((1 + r1) * (1 + f2) * (1 + f3)) ** (1/3) - 1\n\n4. The function returns this calculated value.\n\nWhen you run this program, it will output the three-year spot rate, which is approximately 0.0599 or 5.99%. This is the answer to the question, as it's the only rate that isn't given in the problem statement and needs to be calculated based on the other rates."
        ]
    },
    {
        "tables": [
            "|       | Time 0  | Time 1  | Time 2  |\n|-------|---------|---------|---------|\n|       |         |         | 2.7183% |\n|       |         | 2.8853% |         |\n|       | 1.500%  |         | 1.6487% |\n|       |         | 1.7500% |         |\n|       |         |         | 1.0000% |",
            "| Bond | Maturity | Coupon Rate |\n| --- | --- | --- |\n| Bond C | 2 years | 2.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-405",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of Bond Z at the upper node at Time 1, when valuing it using the binomial tree shown in Display 1 and the selected data for both bonds given in Display 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.025  # 2.5% coupon rate for Bond C\n    face_value = 100  # Assuming a face value of 100\n    up_rate_t1 = 0.028853  # Upper rate at Time 1\n    up_rate_t2 = 0.027183  # Upper rate at Time 2\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the bond value at Time 2 (upper node)\n    value_t2_up = (face_value + coupon_rate * face_value) / (1 + up_rate_t2)\n    \n    # Calculate the bond value at Time 1 (upper node)\n    value_t1_up = (value_t2_up + coupon_rate * face_value) / (1 + up_rate_t1)\n    \n    # return answer\n    return round(value_t1_up, 4)\n```\n\nThis Python program calculates the value of Bond C at the upper node at Time 1 using the binomial tree method. Here's a breakdown of the calculation:\n\n1. We define the known variables: coupon rate, face value, and interest rates for the upper nodes at Time 1 and Time 2.\n\n2. We first calculate the bond value at the upper node of Time 2 by discounting the final cash flow (face value plus coupon) using the Time 2 upper interest rate.\n\n3. Then, we calculate the bond value at the upper node of Time 1 by discounting the sum of the Time 2 upper node value and the coupon payment, using the Time 1 upper interest rate.\n\n4. The result is rounded to 4 decimal places for precision.\n\nThis approach uses backward induction, which is typical for binomial tree valuation of bonds. The program will return the value of Bond C at the upper node at Time 1."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-406",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is looking to determine the comprehensive yield of an recent transaction carried out by an asset fund. The fund entered a completely secured long futures agreement in nearby soybean futures agreements at the listed futures cost of 755.0 (US cents/bushel). After three months, the entire futures agreement was shifted when the near-term futures cost was 768.0 and the further-term futures cost was 773.0. Throughout the three-month timeframe between the initiation of the initial long agreement and the adjustment of the contract, the security earned an yearly rate of 0.40%. What is the fund's three-month comprehensive yield on the soybean futures transaction?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_futures_price = 755.0\n    final_nearby_futures_price = 768.0\n    final_farther_futures_price = 773.0\n    annual_interest_rate = 0.40 / 100  # 0.40% converted to decimal\n    months = 3\n\n    # Do math calculation to get the answer\n    price_change = final_nearby_futures_price - initial_futures_price\n    price_change_percentage = price_change / initial_futures_price\n\n    # Calculate interest earned over 3 months\n    interest_earned = (annual_interest_rate / 12) * months\n\n    # Calculate comprehensive yield\n    comprehensive_yield = price_change_percentage + interest_earned\n\n    # Convert to percentage\n    comprehensive_yield_percentage = comprehensive_yield * 100\n\n    # return answer rounded to 2 decimal places\n    return round(comprehensive_yield_percentage, 2)\n```\n\nThis Python program calculates the comprehensive yield for the soybean futures transaction as described in the question. Here's a breakdown of the calculation:\n\n1. We define the initial and final futures prices, the annual interest rate, and the time period.\n2. We calculate the price change and convert it to a percentage.\n3. We calculate the interest earned over the 3-month period.\n4. We sum the price change percentage and the interest earned to get the comprehensive yield.\n5. We convert the yield to a percentage and round it to two decimal places.\n\nThe function will return the three-month comprehensive yield as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-407",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the delta of a long forward contract on a property with a 10% annum dividend yield and six months to maturity?",
        "output": [
            "Here's a Python program to calculate the delta of a long forward contract on a property with a 10% annual dividend yield and six months to maturity:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend_yield = 0.10  # 10% annual dividend yield\n    time_to_maturity = 0.5  # 6 months = 0.5 years\n\n    # Do math calculation to get the answer\n    delta = 1 * (1 - dividend_yield * time_to_maturity)\n    \n    # return answer\n    return delta\n```\n\nIn this solution:\n\n1. We define the dividend yield as 0.10 (10% per annum) and the time to maturity as 0.5 years (6 months).\n\n2. The delta of a long forward contract is calculated using the formula: \n   Delta = 1 * e^(-q * T), where q is the dividend yield and T is the time to maturity.\n\n3. For simplicity, we use the approximation e^(-q * T) ≈ (1 - q * T) for small values of q * T.\n\n4. We calculate the delta as 1 * (1 - dividend_yield * time_to_maturity).\n\n5. The function returns the calculated delta.\n\nThis program will return a value close to 0.95, indicating that the delta of the long forward contract is approximately 0.95 or 95%. This means that for a small change in the underlying asset price, the forward contract price will change by about 95% of that amount."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-408",
        "python_solution": "",
        "ground_truth": null,
        "question": "In compliance with IFRS, ABC Corporation obtained a loan to fund the construction of new manufacturing lanes last year. The associated details are provided below: The loan was taken on: 1/1/2017, The borrowed sum was: $100 million, The yearly interest rate: 12%, The loan period: 4 years. The repayment method includes yearly interest payments only, with the principal due at loan maturity. The new manufacturing lanes will take one year to build, and during this time, ABC Corporation succeeded in generating $2 million by investing the loan funds. What would be the total capitalized interest over the loan period?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 100000000  # $100 million\n    interest_rate = 0.12  # 12% yearly interest rate\n    construction_period = 1  # 1 year to build\n    investment_income = 2000000  # $2 million generated from investing loan funds\n\n    # Do math calculation to get the answer\n    annual_interest = loan_amount * interest_rate\n    interest_during_construction = annual_interest * construction_period\n    \n    # Calculate capitalized interest\n    capitalized_interest = interest_during_construction - investment_income\n    \n    # return answer\n    return capitalized_interest\n\n```\n\nThis program calculates the total capitalized interest over the loan period based on the information provided. Here's a breakdown of the calculation:\n\n1. We define the loan amount, interest rate, construction period, and investment income as variables.\n2. We calculate the annual interest by multiplying the loan amount by the interest rate.\n3. We calculate the total interest during the construction period (1 year) by multiplying the annual interest by the construction period.\n4. To get the capitalized interest, we subtract the investment income generated during the construction period from the interest incurred during construction.\n5. The function returns the capitalized interest amount.\n\nNote that according to IFRS, the company should capitalize the borrowing costs directly attributable to the construction of the asset, less any investment income earned on those borrowed funds. The capitalization period is typically the time it takes to get the asset ready for its intended use, which in this case is the one-year construction period."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-409",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Cindy Corp. recently bought a manufacturing device for $60,000 that is anticipated to usher in an annual cash inflow of $25,000 for six years, how much tax will they have to pay in the first year, given that they will depreciate the equipment over six years for accounting purposes and taxation authorities will deem the machine useful for five years, with no salvage value and a 40% tax rate, assuming the straight-line method is used?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equipment_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_useful_life = 6\n    tax_useful_life = 5\n    tax_rate = 0.40\n    \n    # Do math calculation to get the answer\n    accounting_depreciation = equipment_cost / accounting_useful_life\n    tax_depreciation = equipment_cost / tax_useful_life\n    \n    taxable_income = annual_cash_inflow - tax_depreciation\n    tax_expense = taxable_income * tax_rate\n    \n    # return answer\n    return tax_expense\n```\n\nThis Python program calculates the tax that Cindy Corp. will have to pay in the first year based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the annual depreciation for both accounting and tax purposes using the straight-line method.\n3. We calculate the taxable income by subtracting the tax depreciation from the annual cash inflow.\n4. We then calculate the tax expense by multiplying the taxable income by the tax rate.\n5. Finally, we return the tax expense, which is the amount of tax Cindy Corp. will have to pay in the first year.\n\nNote that this calculation assumes that the entire annual cash inflow is subject to tax and that there are no other expenses or deductions besides depreciation."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-410",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier acquires a 6% annual payment bond that matures in three years. If the bond's yield-to-maturity stands at 8% and it's currently valued at 94.845806 per 100 of par, what would be the bond's Macaulay duration?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.06\n    years_to_maturity = 3\n    yield_to_maturity = 0.08\n    price = 94.845806\n    face_value = 100\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    pv_factor1 = 1 / (1 + yield_to_maturity)\n    pv_factor2 = 1 / (1 + yield_to_maturity)**2\n    pv_factor3 = 1 / (1 + yield_to_maturity)**3\n    \n    weighted_time1 = 1 * coupon_payment * pv_factor1\n    weighted_time2 = 2 * coupon_payment * pv_factor2\n    weighted_time3 = 3 * (coupon_payment + face_value) * pv_factor3\n    \n    total_weighted_time = weighted_time1 + weighted_time2 + weighted_time3\n    \n    macaulay_duration = total_weighted_time / price\n\n    # return answer\n    return macaulay_duration\n```\n\nThis Python program calculates the Macaulay duration of the bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the coupon payment, which is the face value multiplied by the coupon rate.\n3. We calculate the present value factors for each year.\n4. We calculate the weighted time for each cash flow (coupon payments and final face value).\n5. We sum up the weighted times.\n6. Finally, we divide the total weighted time by the current price of the bond to get the Macaulay duration.\n\nThe function will return the Macaulay duration of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-411",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an economy, there are two firms, Firm X and Firm Y. The default rate for Firm X is 10%, and the default rate for Firm Y is 20%. Assuming defaults for the two firms transpire separately, what is the likelihood of both firms defaulting?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    default_rate_x = 0.10  # 10% default rate for Firm X\n    default_rate_y = 0.20  # 20% default rate for Firm Y\n    \n    # Do math calculation to get the answer\n    # Probability of both firms defaulting is the product of their individual default probabilities\n    probability_both_default = default_rate_x * default_rate_y\n    \n    # return answer\n    return probability_both_default\n```\n\nThis Python program calculates the probability of both Firm X and Firm Y defaulting, given their individual default rates and assuming the defaults occur independently.\n\nThe calculation is based on the multiplication rule of probability for independent events. Since the defaults are assumed to transpire separately (independently), we multiply the individual probabilities to get the joint probability.\n\nThe program will return the result as a decimal. To get the percentage, you would multiply the result by 100. In this case, the result would be 0.02, or 2% when expressed as a percentage."
        ]
    },
    {
        "tables": [
            "|                   | 2018   | 2017   | 2016   |\n|------------------| ------- | ------- | ------- |\n| Revenue          | 56,455  | 45,882  | 27,265  |\n| EBIT              | 4,579   | 3,671   | 2,905   |\n| EBT               | 4,012   | 2,878   | 1,987   |\n| Net Income   | 3,560   | 2,071   | 1,295   |\n| Asset Turnover | 0.56     | 0.52     | 0.49     |\n| Asset/Equity  | 2.55     | 2.86     | 2.98     |",
            "|   | 2018 | 2017 | 2016 |\n|---|---|---|---|\n| **Net income** | 3,560 | 2,071 | 1,295 |\n| **Net cash flow provided by (used in) CFO** | 8,850 | 4,220 | 2,990 |\n| **Net cash flow provided by (used in) CFI** | (9,880) | (3,250) | (4,875) |\n| **Net cash flow provided by (used in) CFF** | (5,120) | 1,050 | (1,910) |\n| **Average net operating assets** | 42,000 | 40,530 | 41,600 |"
        ],
        "topic": "Accounting",
        "question_id": "test-412",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the ratio of operating cash flow before interest and taxes to operating income for XYZ Company for 2018, given the financial data and cash flow data gathered by the analyst, and considering that the CFF involves cash paid for interest of 1260 and the CFO involves taxes of 1850 in 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_income = 4579  # EBIT for 2018\n    cfo = 8850  # Net cash flow from operating activities for 2018\n    interest_paid = 1260  # Cash paid for interest in 2018\n    taxes_paid = 1850  # Taxes paid in 2018\n    \n    # Do math calculation to get the answer\n    operating_cash_flow_before_interest_and_taxes = cfo + interest_paid + taxes_paid\n    ratio = operating_cash_flow_before_interest_and_taxes / operating_income\n    \n    # return answer\n    return ratio\n```\n\nThis Python program calculates the ratio of operating cash flow before interest and taxes to operating income for XYZ Company in 2018. Here's a breakdown of the calculation:\n\n1. We define the necessary variables based on the given information:\n   - Operating income (EBIT) for 2018 is 4,579\n   - Net cash flow from operating activities (CFO) for 2018 is 8,850\n   - Cash paid for interest in 2018 is 1,260\n   - Taxes paid in 2018 is 1,850\n\n2. To get the operating cash flow before interest and taxes, we add back the interest and taxes paid to the CFO:\n   operating_cash_flow_before_interest_and_taxes = CFO + interest_paid + taxes_paid\n\n3. We then calculate the ratio by dividing this figure by the operating income (EBIT).\n\n4. The function returns this ratio as the answer.\n\nThis ratio will give us an indication of how much cash the company's operations are generating relative to its operating income, before the effects of interest and taxes."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-413",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the yield drops by 200 basis points on a bond that has an effective duration of 11 and a convexity of 120, what is the percentage change in the bond's price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yield_change = -0.02  # 200 basis points = 2%\n    duration = 11\n    convexity = 120\n\n    # Do math calculation to get the answer\n    price_change_duration = -duration * yield_change\n    price_change_convexity = 0.5 * convexity * (yield_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n\n    # Convert to percentage\n    percentage_change = total_price_change * 100\n\n    # return answer\n    return percentage_change\n```\n\nThis Python program calculates the percentage change in a bond's price given a change in yield, considering both duration and convexity effects. Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `yield_change` is -0.02 (negative because the yield drops by 200 basis points, which is 2%)\n   - `duration` is 11 (given effective duration)\n   - `convexity` is 120 (given)\n\n2. We calculate the price change due to duration:\n   `price_change_duration = -duration * yield_change`\n\n3. We calculate the price change due to convexity:\n   `price_change_convexity = 0.5 * convexity * (yield_change ** 2)`\n\n4. We sum these effects to get the total price change:\n   `total_price_change = price_change_duration + price_change_convexity`\n\n5. We convert the decimal to a percentage by multiplying by 100.\n\n6. Finally, we return the percentage change.\n\nThis program will return the percentage change in the bond's price, considering both duration and convexity effects."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-414",
        "python_solution": "",
        "ground_truth": null,
        "question": "Christopher is looking to calculate the foreign-currency return for Portfolio Z. The domestic currency is EUR while the foreign currency is GBP. The data shows that the domestic-currency return is 2% and GBP appreciated by 7% against the EUR. What is the return for the foreign-currency portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    domestic_currency_return = 0.02  # 2% in decimal form\n    gbp_appreciation = 0.07  # 7% in decimal form\n\n    # Do math calculation to get the answer\n    foreign_currency_return = (1 + domestic_currency_return) * (1 + gbp_appreciation) - 1\n\n    # return answer\n    return foreign_currency_return * 100  # Convert to percentage\n```\n\nThis Python program calculates the foreign-currency return for Portfolio Z based on the given information:\n\n1. We define the domestic-currency return (2%) and the GBP appreciation against EUR (7%) as decimal values.\n\n2. To calculate the foreign-currency return, we use the formula:\n   (1 + domestic_currency_return) * (1 + currency_appreciation) - 1\n\n3. We multiply the result by 100 to convert it to a percentage before returning.\n\nWhen you run this function, it will return the foreign-currency return for Portfolio Z as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-415",
        "python_solution": "",
        "ground_truth": null,
        "question": "Following a six-month period, the growth portfolio managed by Mia Williams has surpassed its benchmark. Williams posits that her chances of outperforming the benchmark annually stand at 3 to 1. Assuming these odds hold true, what is the likelihood that Williams' portfolio will top the benchmark for the year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    odds_outperform = 3  # 3 to 1 odds of outperforming\n    odds_underperform = 1\n    total_odds = odds_outperform + odds_underperform\n    \n    # Do math calculation to get the answer\n    probability_outperform = odds_outperform / total_odds\n    \n    # return answer\n    return probability_outperform\n```\n\nThis Python program calculates the probability that Williams' portfolio will outperform the benchmark for the year, based on the given odds of 3 to 1.\n\nHere's an explanation of the calculation:\n\n1. We define the odds as 3 (for outperforming) to 1 (for underperforming).\n2. The total possible outcomes are the sum of these odds: 3 + 1 = 4.\n3. The probability of an event occurring is the favorable outcomes divided by the total possible outcomes.\n4. In this case, the probability of outperforming is 3 / 4 = 0.75 or 75%.\n\nThe program will return 0.75, which means there's a 75% chance that Williams' portfolio will top the benchmark for the year, assuming the stated odds hold true."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-416",
        "python_solution": "",
        "ground_truth": null,
        "question": "A community has an average of 25 with an undetermined standard deviation. We choose 100 individuals from this community to create a sample whose mean is 22.5 and variance is 16. What is the standard error of the sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_size = 100\n    sample_variance = 16\n    \n    # Do math calculation to get the answer\n    standard_error = (sample_variance / sample_size) ** 0.5\n    \n    # return answer\n    return standard_error\n```\n\nThis program calculates the standard error of the sample mean based on the given information. Here's a breakdown of the calculation:\n\n1. We define the sample size (n) as 100 and the sample variance as 16.\n\n2. The formula for the standard error of the sample mean is:\n   SE = √(s² / n)\n   Where:\n   - SE is the standard error\n   - s² is the sample variance\n   - n is the sample size\n\n3. We calculate this by dividing the sample variance by the sample size and then taking the square root of the result.\n\n4. The function returns the calculated standard error.\n\nNote that we don't need to use the population mean (25) or the sample mean (22.5) for this calculation, as the standard error of the sample mean only depends on the sample variance and sample size."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-417",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the current annualized short-term rate is 3.2% and the annual basis point-volatility is 2.1%, a finance specialist constructs a binomial interest rate tree using the Ho-Lee model with an annualized drift of 80 bps in the first month and 120 bps in the second month using a monthly time step. What is the interest rate in the lowest node after two months?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_rate = 0.032  # 3.2%\n    volatility = 0.021  # 2.1%\n    drift_month1 = 0.0080  # 80 bps = 0.80%\n    drift_month2 = 0.0120  # 120 bps = 1.20%\n    time_step = 1/12  # monthly step\n\n    # Do math calculation to get the answer\n    # Calculate the down move for each month\n    down_move = volatility * (time_step ** 0.5)\n    \n    # Calculate the rate after first month's down move and drift\n    rate_after_month1 = current_rate - down_move + drift_month1\n    \n    # Calculate the rate after second month's down move and drift\n    rate_after_month2 = rate_after_month1 - down_move + drift_month2\n    \n    # Convert to percentage\n    answer = rate_after_month2 * 100\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the interest rate in the lowest node after two months using the Ho-Lee model with the given parameters. Here's a breakdown of the calculation:\n\n1. We start with the current rate of 3.2%.\n2. For each month, we calculate the down move using the volatility and time step.\n3. We subtract the down move and add the drift for each month.\n4. After two months, we get the lowest rate in the tree.\n5. Finally, we convert the rate to a percentage for the answer.\n\nThe program will return the interest rate as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-418",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a normally distributed random variable, what is the likelihood that the random variable exceeds the mean by more than three standard deviations（F（3）=0.9987）?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    F_3 = 0.9987  # Given F(3) value\n\n    # Do math calculation to get the answer\n    probability_within_3_std = F_3 - (1 - F_3)  # Probability within 3 std deviations\n    probability_exceeding_3_std = 1 - probability_within_3_std\n    \n    # Convert to percentage and round to 4 decimal places\n    answer = round(probability_exceeding_3_std * 100, 4)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the likelihood that a normally distributed random variable exceeds the mean by more than three standard deviations. Here's how it works:\n\n1. We define the given value F(3) = 0.9987, which represents the cumulative probability up to 3 standard deviations above the mean.\n\n2. We calculate the probability within 3 standard deviations on both sides of the mean. This is done by subtracting the probability below -3 standard deviations (which is 1 - F(3)) from F(3).\n\n3. The probability of exceeding 3 standard deviations (in either direction) is the complement of the probability within 3 standard deviations.\n\n4. We convert this probability to a percentage by multiplying by 100, and round to 4 decimal places for precision.\n\n5. Finally, we return the answer.\n\nThis program will return the percentage likelihood that the random variable exceeds the mean by more than three standard deviations."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-419",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the beginning of 2011, the spot exchange rate between the UK pound (GBP) and the New Zealand dollar (NZD) was pinned at 2.0979. The GBP interest rates, calculated on a 360-day year basis, were established as 1.6025% for the UK pound and 3.2875% for the NZD. What would the 180-day forward points (multiplied by four decimal points) in NZD/GBP look like?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 2.0979\n    gbp_interest_rate = 0.016025\n    nzd_interest_rate = 0.032875\n    days = 180\n    year_days = 360\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate * ((1 + nzd_interest_rate * (days / year_days)) / \n                                (1 + gbp_interest_rate * (days / year_days)))\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    # return answer\n    return round(forward_points, 4)\n```\n\nThis program calculates the 180-day forward points for the NZD/GBP exchange rate. Here's a breakdown of the calculation:\n\n1. We define the spot rate, interest rates for both currencies, the number of days for the forward contract (180), and the number of days in the year basis (360).\n\n2. We calculate the forward rate using the interest rate parity formula:\n   Forward Rate = Spot Rate * ((1 + Foreign Interest Rate * (Days / Year)) / (1 + Domestic Interest Rate * (Days / Year)))\n\n3. We then calculate the forward points by subtracting the spot rate from the forward rate and multiplying by 10000 (to express it in basis points and multiply by four decimal points as requested).\n\n4. Finally, we round the result to 4 decimal places and return it.\n\nThis program will return the 180-day forward points (multiplied by four decimal points) for the NZD/GBP exchange rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-420",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the consistent sum that, when deposited every quarter, will increase to £25,000 in 10 years at a yearly interest rate of 6% weighted quarterly?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    future_value = 25000\n    years = 10\n    annual_rate = 0.06\n    periods_per_year = 4\n    total_periods = years * periods_per_year\n\n    # Do math calculation to get the answer\n    periodic_rate = annual_rate / periods_per_year\n    \n    # Calculate the periodic payment using the formula:\n    # FV = PMT * ((1 + r)^n - 1) / r\n    # Where FV is future value, PMT is periodic payment, r is periodic rate, and n is total periods\n    \n    periodic_payment = future_value / ((pow(1 + periodic_rate, total_periods) - 1) / periodic_rate)\n    \n    # Round the result to two decimal places\n    answer = round(periodic_payment, 2)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the consistent sum (periodic payment) that needs to be deposited every quarter to reach £25,000 in 10 years with a 6% annual interest rate compounded quarterly. Here's a breakdown of the solution:\n\n1. We define the known variables: future value, number of years, annual interest rate, and the number of periods per year (quarterly in this case).\n\n2. We calculate the periodic (quarterly) interest rate by dividing the annual rate by the number of periods per year.\n\n3. We use the formula for future value of an annuity to solve for the periodic payment:\n   FV = PMT * ((1 + r)^n - 1) / r\n   Where FV is future value, PMT is periodic payment, r is periodic rate, and n is total number of periods.\n\n4. We rearrange this formula to solve for PMT (periodic payment).\n\n5. Finally, we round the result to two decimal places for a more practical answer.\n\nThe returned value will be the quarterly deposit amount needed to reach £25,000 in 10 years at the given interest rate."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-421",
        "python_solution": "",
        "ground_truth": null,
        "question": "In their next analysis, Tseng and Collin study a possible investment in the leveraged buyout of Peterson Enterprises. Specifically, they are considering buying all the preference shares and 90% of the common equity in the LBO. The specifics of the LBO are as follows: An initial investment of $10 million is required. The financing includes $6 million in debt, $3.6 million in preference shares with a 15% annual return paid out at exit, and $0.4 million in common equity. The projected exit value in six years is $15 million, with an expected decline in debt of $2.8 million in the six years before exit. What would be the multiple of anticipated proceeds at the time of exiting in relation to the funds invested for JRR’s Peterson LBO investment?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000\n    debt = 6000000\n    preference_shares = 3600000\n    common_equity = 400000\n    preference_return_rate = 0.15\n    exit_years = 6\n    exit_value = 15000000\n    debt_decline = 2800000\n    \n    # Do math calculation to get the answer\n    \n    # Calculate preference shares value at exit\n    preference_shares_exit = preference_shares * (1 + preference_return_rate) ** exit_years\n    \n    # Calculate remaining value for common equity\n    remaining_value = exit_value - (debt - debt_decline) - preference_shares_exit\n    \n    # Calculate JRR's share of common equity (90%)\n    jrr_common_equity = 0.9 * remaining_value\n    \n    # Calculate total proceeds for JRR\n    total_proceeds = preference_shares_exit + jrr_common_equity\n    \n    # Calculate JRR's initial investment (preference shares + 90% of common equity)\n    jrr_investment = preference_shares + (0.9 * common_equity)\n    \n    # Calculate multiple of anticipated proceeds\n    multiple = total_proceeds / jrr_investment\n    \n    # return answer\n    return multiple\n```\n\nThis program calculates the multiple of anticipated proceeds at the time of exiting in relation to the funds invested for JRR's Peterson LBO investment. It takes into account the preference shares with their 15% annual return, the common equity (of which JRR owns 90%), the debt reduction, and the exit value after 6 years."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-422",
        "python_solution": "",
        "ground_truth": null,
        "question": "A trader quotes the BRL/MXN spot rate at 0.1378. The 6-month forward rate is 0.14193. What are the 6-month forward points?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 0.1378\n    forward_rate = 0.14193\n    \n    # Do math calculation to get the answer\n    forward_points = (forward_rate - spot_rate) * 10000\n    \n    # return answer\n    return round(forward_points, 2)\n```\n\nThis Python function calculates the 6-month forward points for the BRL/MXN exchange rate. Here's how it works:\n\n1. We define the spot rate and 6-month forward rate as given in the question.\n\n2. To calculate the forward points, we subtract the spot rate from the forward rate and multiply by 10,000. This is because forward points are typically quoted in the fourth decimal place for most currency pairs.\n\n3. We round the result to 2 decimal places for clarity.\n\n4. The function returns the calculated forward points.\n\nWhen you run this function, it will return 41.30, which represents 413 forward points. In the forex market, this would typically be quoted as \"413\"."
        ]
    },
    {
        "tables": [
            "|        | 2009 | 2008 |\n|--------|------|------|\n| COGS   | 1200 | 1430 |\n| LIFO Reserve | 800  | 820  |"
        ],
        "topic": "Accounting",
        "question_id": "test-423",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financier gathered inventory information from a business and the business utilized the FIFO technique for recognition, what would be the cost of goods sold?",
        "output": [
            "def solution():\n    # Define variables name and value\n    cogs_lifo = 1200  # COGS for 2009 using LIFO\n    lifo_reserve = 800  # LIFO Reserve for 2009\n\n    # Do math calculation to get the answer\n    cogs_fifo = cogs_lifo - lifo_reserve\n\n    # return answer\n    return cogs_fifo\n\n```\n\nThis Python program calculates the cost of goods sold (COGS) using the FIFO (First-In, First-Out) method based on the given LIFO (Last-In, First-Out) information.\n\nHere's an explanation of the calculation:\n\n1. We start with the COGS value using LIFO, which is 1200 for 2009.\n2. The LIFO reserve represents the difference between LIFO and FIFO inventory valuations. It's given as 800 for 2009.\n3. To convert from LIFO to FIFO, we subtract the LIFO reserve from the LIFO COGS.\n\nTherefore, COGS_FIFO = COGS_LIFO - LIFO_Reserve = 1200 - 800 = 400\n\nThe program will return 400, which is the cost of goods sold using the FIFO method."
        ]
    },
    {
        "tables": [
            "|    Face value    |  £50 million  |\n|------------------|---------------|\n| Coupon rate, paid annually |  4%  |\n|  Maturity  date  | December 31,2019 (10 years) |\n|  Issue  price  | 92.28|"
        ],
        "topic": "Accounting",
        "question_id": "test-424",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a business adopts IFRS and its bonds have a market interest rate of 5 percent as of January 1, 2010, what might be the interest expense (in millions) for 2010 based on those bond characteristics?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 50  # £50 million\n    coupon_rate = 0.04  # 4%\n    market_rate = 0.05  # 5%\n    issue_price = 0.9228  # 92.28%\n    \n    # Do math calculation to get the answer\n    bond_carrying_value = face_value * issue_price\n    annual_coupon_payment = face_value * coupon_rate\n    \n    # Calculate interest expense using effective interest method\n    interest_expense = bond_carrying_value * market_rate\n    \n    # Calculate amortization\n    amortization = interest_expense - annual_coupon_payment\n    \n    # return answer rounded to 3 decimal places\n    return round(interest_expense, 3)\n```\n\nThis Python program calculates the interest expense for 2010 based on the given bond characteristics and using the effective interest method under IFRS. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the initial carrying value of the bond (bond_carrying_value) by multiplying the face value by the issue price.\n3. We calculate the annual coupon payment.\n4. The interest expense is calculated by multiplying the bond's carrying value by the market interest rate.\n5. We also calculate the amortization, which is the difference between the interest expense and the coupon payment (though it's not used in the final answer).\n6. Finally, we return the interest expense rounded to three decimal places.\n\nThe result represents the interest expense in millions of pounds for the year 2010."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-425",
        "python_solution": "",
        "ground_truth": null,
        "question": "If American and Spanish bonds have return standard deviations of 0.64 and 0.56, respectively, and the correlation between these two bonds is 0.24, what is the return covariance?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    std_dev_american = 0.64\n    std_dev_spanish = 0.56\n    correlation = 0.24\n    \n    # Do math calculation to get the answer\n    covariance = correlation * std_dev_american * std_dev_spanish\n    \n    # return answer\n    return covariance\n```\n\nThis program calculates the return covariance between American and Spanish bonds based on their standard deviations and correlation. The formula used is:\n\nCovariance = Correlation * Standard Deviation (Asset 1) * Standard Deviation (Asset 2)\n\nThe function will return the calculated covariance as the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-426",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the market price for a zero-coupon bond that matures in 18 years and has a maturity value of $1,000, if it's discounted at an annual interest rate of 12% with compounding happening twice a year?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    maturity_value = 1000\n    years_to_maturity = 18\n    annual_interest_rate = 0.12\n    compounding_frequency = 2\n\n    # Do math calculation to get the answer\n    total_periods = years_to_maturity * compounding_frequency\n    periodic_rate = annual_interest_rate / compounding_frequency\n    \n    market_price = maturity_value / (1 + periodic_rate) ** total_periods\n\n    # return answer\n    return round(market_price, 2)\n```\n\nThis program calculates the market price of a zero-coupon bond using the present value formula. Here's a breakdown of the calculation:\n\n1. We define the given variables: maturity value, years to maturity, annual interest rate, and compounding frequency.\n\n2. We calculate the total number of compounding periods by multiplying years to maturity by the compounding frequency.\n\n3. We calculate the periodic interest rate by dividing the annual interest rate by the compounding frequency.\n\n4. We use the present value formula for a zero-coupon bond: PV = FV / (1 + r)^n\n   Where:\n   PV = Present Value (market price)\n   FV = Future Value (maturity value)\n   r = periodic interest rate\n   n = total number of periods\n\n5. Finally, we round the result to two decimal places to represent currency accurately.\n\nWhen you run this function, it will return the market price of the zero-coupon bond under the given conditions."
        ]
    },
    {
        "tables": [
            "| Accounting profit (earnings before taxes) | $250,000  |\n|-----------------------------------------|-------|\n| Taxable income                           | $215,000  |\n| Tax rate                                   | 30%   |\n| Income taxes paid in year                | $61,200  |\n| Deferred tax liability, start of year | $82,400  |\n| Deferred tax liability, end of year    | $90,650  |"
        ],
        "topic": "Accounting",
        "question_id": "test-427",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the available information, what is the reported income tax expense on this year's earnings statement for a corporation during its current financial year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    taxes_paid = 61200\n    deferred_tax_liability_start = 82400\n    deferred_tax_liability_end = 90650\n    \n    # Do math calculation to get the answer\n    change_in_deferred_tax = deferred_tax_liability_end - deferred_tax_liability_start\n    income_tax_expense = taxes_paid + change_in_deferred_tax\n    \n    # return answer\n    return income_tax_expense\n```\n\nThis Python program calculates the reported income tax expense for the corporation during its current financial year. Here's how it works:\n\n1. We define the relevant variables from the given information:\n   - `taxes_paid`: The income taxes paid in the year ($61,200)\n   - `deferred_tax_liability_start`: The deferred tax liability at the start of the year ($82,400)\n   - `deferred_tax_liability_end`: The deferred tax liability at the end of the year ($90,650)\n\n2. We calculate the change in deferred tax liability:\n   `change_in_deferred_tax = deferred_tax_liability_end - deferred_tax_liability_start`\n\n3. We calculate the income tax expense by adding the taxes paid and the change in deferred tax liability:\n   `income_tax_expense = taxes_paid + change_in_deferred_tax`\n\n4. Finally, we return the calculated income tax expense.\n\nThis calculation reflects the total tax expense reported on the income statement, which includes both the current taxes paid and the change in deferred tax liability."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-428",
        "python_solution": "",
        "ground_truth": null,
        "question": "The asset has a 9% rate of return and the debt costs 3%. A buyer purchased the asset with equity totaling 15 and a debt of 30. What is the equity return rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_return_rate = 0.09\n    debt_cost_rate = 0.03\n    equity = 15\n    debt = 30\n    total_asset = equity + debt\n\n    # Do math calculation to get the answer\n    asset_return = total_asset * asset_return_rate\n    debt_cost = debt * debt_cost_rate\n    equity_return = asset_return - debt_cost\n    equity_return_rate = equity_return / equity\n\n    # return answer\n    return equity_return_rate\n```\n\nThis Python program calculates the equity return rate based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the total asset value by adding equity and debt.\n3. We compute the asset return by multiplying the total asset value by the asset return rate.\n4. We calculate the debt cost by multiplying the debt amount by the debt cost rate.\n5. The equity return is the difference between the asset return and the debt cost.\n6. Finally, we calculate the equity return rate by dividing the equity return by the equity amount.\n\nThe function will return the equity return rate as a decimal. To get the percentage, you can multiply the result by 100 if needed."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-429",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine a piece of art is made and bought in 2010 for £5,000. The costs for creating this piece of art came to £2,000. Based on the sum-of-value-added technique for GDP calculation, what is the value added by the final process of making the artwork?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    selling_price = 5000\n    production_cost = 2000\n    \n    # Do math calculation to get the answer\n    value_added = selling_price - production_cost\n    \n    # return answer\n    return value_added\n```\n\nThis Python program calculates the value added by the final process of making the artwork using the sum-of-value-added technique for GDP calculation. \n\nHere's how it works:\n\n1. We define two variables:\n   - `selling_price`: The price at which the artwork was sold (£5,000)\n   - `production_cost`: The costs for creating the piece of art (£2,000)\n\n2. We calculate the value added by subtracting the production cost from the selling price.\n\n3. The function returns the calculated value added.\n\nWhen you run this function, it will return 3000, which represents £3,000. This is the value added by the final process of making the artwork according to the sum-of-value-added technique for GDP calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-430",
        "python_solution": "",
        "ground_truth": null,
        "question": "If ten portfolio managers are in the running for the first, second, and third top portfolio manager award of 2012, determined by the individual assessments of a team of investment analysts, how many possible combinations can each analyst come up with for their rankings?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_managers = 10\n    positions = 3\n\n    # Do math calculation to get the answer\n    combinations = 1\n    for i in range(positions):\n        combinations *= (portfolio_managers - i)\n\n    # return answer\n    return combinations\n```\n\nThis program calculates the number of possible combinations for ranking the top three portfolio managers out of ten candidates. Here's how it works:\n\n1. We define two variables:\n   - `portfolio_managers`: The total number of portfolio managers (10)\n   - `positions`: The number of top positions being awarded (3)\n\n2. We calculate the number of combinations using the permutation formula:\n   - For the first position, there are 10 choices\n   - For the second position, there are 9 choices\n   - For the third position, there are 8 choices\n\n3. We multiply these choices together: 10 * 9 * 8 = 720\n\nThe program returns 720, which is the number of possible combinations each analyst can come up with for their rankings of the top three portfolio managers out of ten candidates."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rates |\n|----------------|-----------|\n| 1-year         | 7%        |\n| 2-year         | 8%        |\n| 3-year         | 9%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-431",
        "python_solution": "",
        "ground_truth": null,
        "question": "The maturity period of Bond A is 3 years, with annual interest payments and a coupon rate of 6%. Given the spot rates outlined below, what would be the price of Bond A?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a standard face value of $1000\n    coupon_rate = 0.06\n    spot_rate_1y = 0.07\n    spot_rate_2y = 0.08\n    spot_rate_3y = 0.09\n    \n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1y)**1\n    pv_coupon_2 = coupon_payment / (1 + spot_rate_2y)**2\n    pv_coupon_3 = coupon_payment / (1 + spot_rate_3y)**3\n    \n    pv_face_value = face_value / (1 + spot_rate_3y)**3\n    \n    bond_price = pv_coupon_1 + pv_coupon_2 + pv_coupon_3 + pv_face_value\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of Bond A based on the given information:\n\n1. We define the variables, including the face value (assumed to be $1000), coupon rate, and spot rates for each year.\n\n2. We calculate the annual coupon payment.\n\n3. We calculate the present value of each coupon payment using the corresponding spot rate.\n\n4. We calculate the present value of the face value to be received at maturity.\n\n5. We sum up all these present values to get the bond price.\n\n6. Finally, we return the bond price rounded to two decimal places.\n\nThis program will return the price of Bond A in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-432",
        "python_solution": "",
        "ground_truth": null,
        "question": "Corporation X is a crude oil provider. As a researcher, you are tasked with assessing whether Corporation X will undergo new growth by predicting if Corporation X's biggest client, Corporation Y, will enhance their order quantity. You predict that the likelihood of Corporation Y augmenting the order quantity is 30%. If Corporation Y does amplify the order quantity, Corporation X will have a new growth probability of 80%. However, if Corporation Y does not augment the order quantity, then Corporation X will only have a new growth probability of 10%. Later on, you found out that crude oil provider Corporation X has initiated a new growth. Given this scenario, what is the probability that you estimate Corporation Y to enhance the order quantity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_y_enhance = 0.30  # Probability of Y enhancing order quantity\n    p_growth_given_y_enhance = 0.80  # Probability of X's growth if Y enhances\n    p_growth_given_y_not_enhance = 0.10  # Probability of X's growth if Y doesn't enhance\n    \n    # Do math calculation to get the answer\n    p_growth = p_y_enhance * p_growth_given_y_enhance + (1 - p_y_enhance) * p_growth_given_y_not_enhance\n    \n    # Given that X has initiated new growth, we use Bayes' theorem\n    p_y_enhance_given_growth = (p_y_enhance * p_growth_given_y_enhance) / p_growth\n    \n    # return answer\n    return p_y_enhance_given_growth\n```\n\nThis program uses Bayes' theorem to calculate the probability that Corporation Y enhanced their order quantity, given that Corporation X has initiated new growth. The final probability is returned as the solution."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-433",
        "python_solution": "",
        "ground_truth": null,
        "question": "The table underneath indicates the monthly stock returns for Ivy Corp. Based on the information provided in this table, can you compute the mode of the returns for Ivy Corp.?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.20, 0.04, -0.05, 0.12, 0.03, 0.12]\n    \n    # Do math calculation to get the answer\n    from statistics import multimode\n    \n    # Using multimode in case there are multiple modes\n    modes = multimode(returns)\n    \n    # If there's only one mode, return it; otherwise, return the first mode\n    answer = modes[0] if len(modes) == 1 else modes[0]\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the mode of the stock returns for Ivy Corp. based on the given table. Here's how it works:\n\n1. We define a list `returns` containing the monthly stock returns as decimal values.\n\n2. We use the `multimode` function from the `statistics` module to find the mode(s) of the returns. This function is used because it can handle cases where there might be multiple modes.\n\n3. We then check if there's only one mode (len(modes) == 1). If so, we return that single mode. If there are multiple modes, we return the first one.\n\n4. The program will return 0.12, as it appears twice in the list and is the most frequent value.\n\nNote: In this case, 12% (or 0.12) appears twice and is the mode. If there were no repeated values, the `multimode` function would return all values, and our program would return the first value in the list."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-434",
        "python_solution": "",
        "ground_truth": null,
        "question": "There are 6000 software developers in the population which is expected to have a normal distribution. A sample of 100 is taken from this population. Given a z-statistic, the 95% confidence interval of the sample mean for the yearly salary is 32.5 (in thousands) dollars, fluctuating between 22 (in thousands) dollars and 43 (in thousands) dollars. Compute the standard error of the mean yearly salary:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    confidence_interval = 32.5  # in thousands of dollars\n    lower_bound = 22  # in thousands of dollars\n    upper_bound = 43  # in thousands of dollars\n    z_score_95 = 1.96  # z-statistic for 95% confidence interval\n\n    # Do math calculation to get the answer\n    margin_of_error = (upper_bound - lower_bound) / 2\n    standard_error = margin_of_error / z_score_95\n\n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the standard error of the mean yearly salary based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the information provided in the question.\n2. We calculate the margin of error, which is half the width of the confidence interval.\n3. We then divide the margin of error by the z-score for a 95% confidence interval (which is approximately 1.96) to get the standard error.\n\nThe function will return the standard error of the mean yearly salary in thousands of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-435",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert has been tasked with identifying potential arbitrage openings in the Treasury bond market by contrasting the cash flows of selected bonds with mixtures of other bonds. If a 1-year zero-coupon bond is valued at USD 98, and a 1-year bond which pays an 8% coupon semi-annually costs USD 103, utilizing a replication methodology, what should be the cost of a 1-year Treasury bond that offers a 6% semi-annual coupon?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    zero_coupon_price = 98\n    coupon_8_price = 103\n    target_coupon_rate = 0.06  # 6% semi-annual coupon\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the implied interest rate\n    implied_rate = (100 / zero_coupon_price) - 1\n    \n    # Calculate the present value of the 8% coupon payments\n    coupon_8_pv = (0.08 / 2) * 100 * (1 + (1 / (1 + implied_rate/2)))\n    \n    # Calculate the present value of the principal for the 8% bond\n    principal_8_pv = coupon_8_price - coupon_8_pv\n    \n    # Calculate the present value of the 6% coupon payments\n    coupon_6_pv = (target_coupon_rate / 2) * 100 * (1 + (1 / (1 + implied_rate/2)))\n    \n    # Calculate the price of the 6% coupon bond\n    price_6_coupon = coupon_6_pv + principal_8_pv\n    \n    # return answer\n    return round(price_6_coupon, 2)\n```\n\nThis Python program calculates the price of a 1-year Treasury bond with a 6% semi-annual coupon using the replication methodology. Here's a breakdown of the steps:\n\n1. We define the given values: price of the zero-coupon bond, price of the 8% coupon bond, and the target coupon rate (6%).\n\n2. We calculate the implied interest rate using the zero-coupon bond price.\n\n3. We calculate the present value of the 8% coupon payments.\n\n4. We derive the present value of the principal for the 8% bond by subtracting the coupon payments' present value from the bond's price.\n\n5. We calculate the present value of the 6% coupon payments using the same methodology.\n\n6. Finally, we sum the present value of the 6% coupon payments and the"
        ]
    },
    {
        "tables": [
            "| Items               | Times |\n|---------------------|-------|\n| Receivable turnover | 5     |\n| Inventory turnover  | 4     |\n| Payable turnover    | 10    |"
        ],
        "topic": "Accounting",
        "question_id": "test-436",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you compute the cash conversion cycle for the firm?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    receivable_turnover = 5\n    inventory_turnover = 4\n    payable_turnover = 10\n    days_in_year = 365\n\n    # Do math calculation to get the answer\n    days_sales_outstanding = days_in_year / receivable_turnover\n    days_inventory_outstanding = days_in_year / inventory_turnover\n    days_payables_outstanding = days_in_year / payable_turnover\n\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payables_outstanding\n\n    # return answer\n    return cash_conversion_cycle\n```\n\nThis Python program calculates the cash conversion cycle for the firm based on the given information. Here's how it works:\n\n1. We define the variables using the provided data: receivable turnover, inventory turnover, and payable turnover.\n\n2. We calculate the components of the cash conversion cycle:\n   - Days Sales Outstanding (DSO) = 365 / Receivable turnover\n   - Days Inventory Outstanding (DIO) = 365 / Inventory turnover\n   - Days Payables Outstanding (DPO) = 365 / Payable turnover\n\n3. We then calculate the Cash Conversion Cycle using the formula:\n   Cash Conversion Cycle = DSO + DIO - DPO\n\n4. Finally, we return the calculated cash conversion cycle.\n\nThis program will return the number of days in the firm's cash conversion cycle, which represents how long it takes for the company to convert its investments in inventory and other resources into cash flows from sales."
        ]
    },
    {
        "tables": [
            "| Revenue | $4,000,000 |\n| --- | --- |\n| Cost of goods sold | $3,000,000 |\n| Other operating expenses | $500,000 |\n| Interest expense | $100,000 |\n| Tax expense | $120,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-437",
        "python_solution": "",
        "ground_truth": null,
        "question": "The manufacturing company, Denali Limited, provided the following income statement data: What is the equivalent of Denali's gross profit?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 4000000\n    cost_of_goods_sold = 3000000\n    \n    # Do math calculation to get the answer\n    gross_profit = revenue - cost_of_goods_sold\n    \n    # return answer\n    return gross_profit\n```\n\nThis Python function calculates the gross profit for Denali Limited based on the provided income statement data. The gross profit is the difference between revenue and cost of goods sold. The function defines the variables for revenue and cost of goods sold, performs the calculation, and returns the result."
        ]
    },
    {
        "tables": [
            "|     | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|-----|------------------|------------------|------------------|------------------|\n| Domestic | 25% | 15% | 50% | 35% |\n| Bond 9% | - | 5% | 30% | 35% |\n| International 15% | - | 18% | 20% | 30% |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-438",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you calculate the value added from asset allocation according to the given table?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    domestic_portfolio_return = 0.25\n    domestic_benchmark_return = 0.15\n    domestic_portfolio_weight = 0.50\n    domestic_benchmark_weight = 0.35\n\n    bond_portfolio_return = 0.09\n    bond_benchmark_return = 0.05\n    bond_portfolio_weight = 0.30\n    bond_benchmark_weight = 0.35\n\n    international_portfolio_return = 0.15\n    international_benchmark_return = 0.18\n    international_portfolio_weight = 0.20\n    international_benchmark_weight = 0.30\n\n    # Do math calculation to get the answer\n    domestic_allocation = (domestic_portfolio_weight - domestic_benchmark_weight) * domestic_benchmark_return\n    bond_allocation = (bond_portfolio_weight - bond_benchmark_weight) * bond_benchmark_return\n    international_allocation = (international_portfolio_weight - international_benchmark_weight) * international_benchmark_return\n\n    value_added = domestic_allocation + bond_allocation + international_allocation\n\n    # return answer\n    return value_added\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-439",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering that the December 2010 annual report of Adidas AG indicates Depreciation and amortization: €249 million, Total assets: €10,618 million, Total debt: €1,613 million, Shareholders’ equity: €4,616 million, what is the company's debt/capital ratio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_debt = 1613  # in million euros\n    shareholders_equity = 4616  # in million euros\n\n    # Do math calculation to get the answer\n    total_capital = total_debt + shareholders_equity\n    debt_to_capital_ratio = total_debt / total_capital\n\n    # return answer\n    return debt_to_capital_ratio\n```\n\nThis Python function calculates the debt/capital ratio for Adidas AG based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables for total debt and shareholders' equity using the provided values.\n\n2. We calculate the total capital by adding total debt and shareholders' equity.\n\n3. The debt/capital ratio is then calculated by dividing total debt by total capital.\n\n4. The function returns the calculated debt/capital ratio.\n\nNote that the depreciation and amortization, and total assets figures are not needed for this specific calculation, so they are not included in the function."
        ]
    },
    {
        "tables": [
            "|    |    |\n|---|---|\n| Net income | 45.8 |\n| Depreciation | 18.2 |\n| Loss on sale of equipment | 1.6 |\n| Decrease in accounts receivable | 4.2 |\n| Increase in inventories | 5.4 |\n| Increase in accounts payable | 4.5 |\n| Capital expenditures | 7.3 |\n| Proceeds from sale of stock | 8.5 |"
        ],
        "topic": "Accounting",
        "question_id": "test-440",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's take U.S. GAAP into account unless specified otherwise. What is the annual free cash flow to equity for the business, taking into account that it does not pay out any dividends, carries no debt, and this information was collected over one year by a market researcher?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 45.8\n    depreciation = 18.2\n    loss_on_sale_equipment = 1.6\n    decrease_accounts_receivable = 4.2\n    increase_inventories = -5.4  # Negative because it's an outflow\n    increase_accounts_payable = 4.5\n    capital_expenditures = -7.3  # Negative because it's an outflow\n    proceeds_from_stock_sale = 8.5\n\n    # Do math calculation to get the answer\n    operating_cash_flow = net_income + depreciation + loss_on_sale_equipment + decrease_accounts_receivable + increase_inventories + increase_accounts_payable\n    \n    free_cash_flow_to_equity = operating_cash_flow + capital_expenditures + proceeds_from_stock_sale\n\n    # return answer\n    return free_cash_flow_to_equity\n```\n\nThis Python function calculates the free cash flow to equity (FCFE) based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the variables based on the provided table.\n2. We calculate the operating cash flow by adding net income, depreciation, loss on sale of equipment, and changes in working capital (accounts receivable, inventories, and accounts payable).\n3. To get the FCFE, we add the operating cash flow, capital expenditures (as a negative value since it's an outflow), and proceeds from the sale of stock.\n4. The function returns the calculated FCFE.\n\nNote that we don't need to account for debt repayments or dividends as the question states that the company carries no debt and doesn't pay out dividends."
        ]
    },
    {
        "tables": [
            "|                                   |                 |\n|-----------------------------------|-----------------|\n| Oakstar Timber Balance Sheet (Year Ended 31 December 2008) |        |\n|        **Assets**                    |                 |\n| Cash                                | $500,000        |\n| Inventory                           | $25,000         |\n| Accounts receivable                 | $50,000         |\n| Plant and equipment (cost less depreciation) | $750,000      |\n| Land                                | $10,000,000     |\n| **Total assets**                    | $11,325,000     |\n|       **Liabilities and Equity**   |                 |\n| Accounts payables                   | $75,000         |\n| Long-term bank loan                 | $1,500,000      |\n| Common stock                        | $9,750,000      |\n| **Total liabilities and equity**   | $11,325,000     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-441",
        "python_solution": "",
        "ground_truth": null,
        "question": "The primary asset of the company Cedarstar consists of 10,000 hectares of timberland in western Canada, containing both new and mature Douglas fir trees. As of December 31, 2008, Cedarstar's financial details are as follows with additional data collected by Johnson regarding the recent sales of similar timberland properties in western Canada. For pieces of land possessing the same characteristics as Cedarstar, the going rate is $8,750 per hectare. Using these details and an asset-based approach, what is the net worth (after deducting any liabilities) of Cedarstar?",
        "output": [
            "Here's a Python program to calculate the net worth of Cedarstar using an asset-based approach:\n\n```python\ndef solution():\n    # Define variables name and value\n    land_hectares = 10000\n    price_per_hectare = 8750\n    cash = 500000\n    inventory = 25000\n    accounts_receivable = 50000\n    plant_and_equipment = 750000\n    accounts_payable = 75000\n    long_term_loan = 1500000\n\n    # Do math calculation to get the answer\n    land_value = land_hectares * price_per_hectare\n    total_assets = land_value + cash + inventory + accounts_receivable + plant_and_equipment\n    total_liabilities = accounts_payable + long_term_loan\n    net_worth = total_assets - total_liabilities\n\n    # return answer\n    return net_worth\n```\n\nThis program calculates the net worth of Cedarstar based on the asset-based approach. Here's how it works:\n\n1. We define the variables based on the given information and the comparable land value.\n2. We calculate the total value of the land by multiplying the number of hectares by the price per hectare.\n3. We sum up all the assets (land value, cash, inventory, accounts receivable, and plant and equipment).\n4. We sum up all the liabilities (accounts payable and long-term loan).\n5. We calculate the net worth by subtracting total liabilities from total assets.\n6. Finally, we return the net worth.\n\nWhen you run this function, it will return the net worth of Cedarstar after deducting liabilities."
        ]
    },
    {
        "tables": [
            "| 2012 | 2013 | 2014 | 2015 | 2016 | 2017 |\n|------|------|------|------|------|------|\n| 10%  | 15%  | -8%  | 12%  | -6%  | 8%   |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-442",
        "python_solution": "",
        "ground_truth": null,
        "question": "Calculate the arithmetic mean return for the stock of Boulder Corporation, according to the given table showcasing their annual stock returns.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.10, 0.15, -0.08, 0.12, -0.06, 0.08]\n    \n    # Do math calculation to get the answer\n    total_return = sum(returns)\n    number_of_years = len(returns)\n    arithmetic_mean = total_return / number_of_years\n    \n    # return answer\n    return arithmetic_mean\n```\n\nThis Python program calculates the arithmetic mean return for Boulder Corporation's stock based on the given annual returns. Here's how it works:\n\n1. We define a list `returns` containing the annual stock returns from 2012 to 2017 as decimal values.\n\n2. We calculate the total return by summing up all the values in the `returns` list using the `sum()` function.\n\n3. We determine the number of years by getting the length of the `returns` list using the `len()` function.\n\n4. We calculate the arithmetic mean by dividing the total return by the number of years.\n\n5. Finally, we return the calculated arithmetic mean.\n\nWhen you run this function, it will return the arithmetic mean return, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Bond | Par Value Owned | Market Value Owned | Duration |\n|------|-----------------|-------------------|--------- |\n| A    | $8,000,000     | $12,000,000       | 3       |\n| B    | $8,000,000     | $6,000,000        | 7       |\n| C    | $4,000,000     | $6,000,000        | 6       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-443",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio manager possesses the following three bonds, all of which are free of options and carry the specified durations. What is the duration of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bonds = {\n        'A': {'par_value': 8000000, 'market_value': 12000000, 'duration': 3},\n        'B': {'par_value': 8000000, 'market_value': 6000000, 'duration': 7},\n        'C': {'par_value': 4000000, 'market_value': 6000000, 'duration': 6}\n    }\n    \n    # Do math calculation to get the answer\n    total_market_value = sum(bond['market_value'] for bond in bonds.values())\n    weighted_duration = sum(bond['market_value'] * bond['duration'] for bond in bonds.values())\n    \n    portfolio_duration = weighted_duration / total_market_value\n    \n    # return answer\n    return round(portfolio_duration, 2)\n```\n\nThis Python program calculates the duration of the portfolio based on the provided information. Here's a breakdown of the solution:\n\n1. We define a dictionary `bonds` containing the information for each bond (A, B, and C) including their par values, market values, and durations.\n\n2. We calculate the total market value of all bonds by summing up their individual market values.\n\n3. We calculate the weighted duration by multiplying each bond's market value by its duration and summing these products.\n\n4. The portfolio duration is then calculated by dividing the weighted duration by the total market value.\n\n5. Finally, we return the portfolio duration rounded to two decimal places.\n\nThis approach uses the market value-weighted average of the individual bond durations to determine the overall portfolio duration, which is the standard method for calculating the duration of a bond portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-444",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three years ago, Hamilton Insurance Company launched a fixed-rate perpetual preferred stock and it was privately distributed among institutional investors. The stock was dispensed at $25 per share with a dividend of $1.75. Today, if the firm were to issue preferred stock, the yield would be 6.5 percent. So, what is the present value of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 25  # Initial price per share\n    dividend = 1.75  # Annual dividend per share\n    current_yield = 0.065  # Current yield as a decimal (6.5%)\n\n    # Do math calculation to get the answer\n    present_value = dividend / current_yield\n\n    # return answer\n    return present_value\n```\n\nThis Python program calculates the present value of the preferred stock based on the given information. Here's an explanation of the calculation:\n\n1. We define the initial variables:\n   - `par_value`: The initial price per share ($25)\n   - `dividend`: The annual dividend per share ($1.75)\n   - `current_yield`: The current yield as a decimal (6.5% = 0.065)\n\n2. To calculate the present value, we use the formula:\n   Present Value = Annual Dividend / Current Yield\n\n3. We perform this calculation: `present_value = dividend / current_yield`\n\n4. The function returns the calculated present value.\n\nNote that the initial par value ($25) is not used in the calculation because the present value of a perpetual preferred stock is determined by its dividend and the current market yield, not its original issue price."
        ]
    },
    {
        "tables": [
            "|  | Maturity (Years) |  |  |  |\n|---|---|---|---|---|\n|  | 1 | 2 | 3 | 4 |\n| Government spot rate | 2.25% | 2.70% | 3.30% | 4.05% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-445",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer purchases a lesser-quality, two-year corporate bond that has a coupon rate of 4.15%. The exhibit underneath displays the Government Spot Rates. The Z-Spreads for this corporate bond is at 0.65%. The bond is possibly trading at a price of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.0415\n    coupon_payment = face_value * coupon_rate\n    govt_spot_rate_1y = 0.0225\n    govt_spot_rate_2y = 0.0270\n    z_spread = 0.0065\n    \n    # Do math calculation to get the answer\n    discount_rate_1y = govt_spot_rate_1y + z_spread\n    discount_rate_2y = govt_spot_rate_2y + z_spread\n    \n    pv_coupon_1 = coupon_payment / (1 + discount_rate_1y)\n    pv_coupon_2 = coupon_payment / (1 + discount_rate_2y)**2\n    pv_face_value = face_value / (1 + discount_rate_2y)**2\n    \n    bond_price = pv_coupon_1 + pv_coupon_2 + pv_face_value\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a two-year corporate bond given the provided information. Here's a breakdown of the calculation:\n\n1. We define the face value of the bond as 100 (assuming it's a $100 par value bond).\n2. The coupon rate is 4.15% or 0.0415.\n3. We use the government spot rates for 1 and 2 years from the table.\n4. The Z-spread is given as 0.65% or 0.0065.\n5. We calculate the discount rates by adding the Z-spread to the government spot rates.\n6. We then calculate the present value of each coupon payment and the face value using these discount rates.\n7. The bond price is the sum of these present values.\n8. Finally, we round the result to two decimal places to represent dollars and cents.\n\nThis program will return the price at which the bond is likely trading."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-446",
        "python_solution": "",
        "ground_truth": null,
        "question": "The formula: Qod = 3 - 0.05P0 + 0.009I - 0.16Pt represents a person's demand for onions: with Qod being the demanded quantity of onions, P0 represents the cost per pound of onions, I symbolizes the household income, and Pt indicates the price per pound of tomatoes. Considering a case where the cost of onions is $1.25 per pound, the income of the household is $2,500, and tomatoes are priced at $3.75 per pound, what would be the cross-price elasticity of demand concerning the price of tomatoes for this person's onion demand?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P0 = 1.25  # Price of onions per pound\n    I = 2500   # Household income\n    Pt = 3.75  # Price of tomatoes per pound\n\n    # Do math calculation to get the answer\n    \n    # Calculate the quantity of onions demanded\n    Qod = 3 - 0.05 * P0 + 0.009 * I - 0.16 * Pt\n    \n    # Calculate the cross-price elasticity of demand\n    # Formula: (ΔQod / Qod) / (ΔPt / Pt)\n    # In the given formula, the coefficient of Pt is -0.16\n    \n    elasticity = (-0.16 * Pt) / Qod\n    \n    # return answer\n    return elasticity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-447",
        "python_solution": "",
        "ground_truth": null,
        "question": "After deciding to sell off its non-core assets, experts forecast that the standard deviation of returns for Dell Inc. will increase to 30% and its correlation with the market portfolio will stay the same at 0.8. The risk-free rate and the market risk premium are predicted to stay at 6% and 8% respectively. However, the market portfolio's standard deviation of returns is anticipated to drop to 15%. What is the projected return for the company after the restructuring?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    std_dev_dell = 0.30\n    correlation = 0.8\n    risk_free_rate = 0.06\n    market_risk_premium = 0.08\n    std_dev_market = 0.15\n\n    # Do math calculation to get the answer\n    beta = correlation * (std_dev_dell / std_dev_market)\n    expected_return = risk_free_rate + beta * market_risk_premium\n\n    # return answer\n    return expected_return\n```\n\nThis Python program calculates the projected return for Dell Inc. after restructuring using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the steps:\n\n1. We define the given variables:\n   - Standard deviation of Dell's returns (std_dev_dell): 30% or 0.30\n   - Correlation with the market portfolio (correlation): 0.8\n   - Risk-free rate (risk_free_rate): 6% or 0.06\n   - Market risk premium (market_risk_premium): 8% or 0.08\n   - Standard deviation of market returns (std_dev_market): 15% or 0.15\n\n2. We calculate Dell's beta using the formula:\n   beta = correlation * (standard deviation of stock / standard deviation of market)\n\n3. We then use the CAPM formula to calculate the expected return:\n   Expected Return = Risk-free rate + Beta * Market Risk Premium\n\n4. The function returns the calculated expected return.\n\nThis program will give you the projected return for Dell Inc. after the restructuring, taking into account the changes in standard deviation and market conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-448",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the spot rate for 4 years is at 5% and for 2 years it's at 3.7%, what would be the forward rate for 2 years starting from 2 years in the future?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_4y = 0.05  # 5% for 4 years\n    spot_rate_2y = 0.037  # 3.7% for 2 years\n    \n    # Do math calculation to get the answer\n    # Using the formula: (1 + r4)^4 = (1 + r2)^2 * (1 + f2,2)^2\n    # Where r4 is 4-year spot rate, r2 is 2-year spot rate, and f2,2 is the forward rate\n    \n    left_side = (1 + spot_rate_4y) ** 4\n    right_side_part = (1 + spot_rate_2y) ** 2\n    \n    forward_rate_squared = left_side / right_side_part\n    forward_rate = (forward_rate_squared ** 0.5) - 1\n    \n    # Convert to percentage and round to 3 decimal places\n    answer = round(forward_rate * 100, 3)\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "|                       | Year 1 | Year 2 | Year 3 |\n|-----------------------|--------|--------|--------|\n| Bt-1                  | $28.25 |        |        |\n| EPS                   | $6.50  | $7.82  | $6.93  |\n| Dividends per share   | $1.75  | $2.63  | $1.97  |\n| Long-term ROE         | 14.5%  | 14.5%  | 14.5%  |\n| Constant long-term growth | 5.5%   | 5.5%   | 5.5%   |\n| Cost of equity        | 10.9%  | 10.9%  | 10.9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-449",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is examining Company N utilizing the multistage residual income model. He has projected that the residual income per share will remain unchanged from year 3 onwards forever and the short-term ROE exceeds the long-term ROE. He has also calculated the profits and dividends for the upcoming three years as shown in the table below. What is the intrinsic value of Company N?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    B0 = 28.25  # Book value at t=0\n    EPS1, EPS2, EPS3 = 6.50, 7.82, 6.93\n    DPS1, DPS2, DPS3 = 1.75, 2.63, 1.97\n    ke = 0.109  # Cost of equity\n    g = 0.055   # Constant long-term growth rate\n\n    # Do math calculation to get the answer\n    \n    # Calculate book values\n    B1 = B0 + EPS1 - DPS1\n    B2 = B1 + EPS2 - DPS2\n    B3 = B2 + EPS3 - DPS3\n\n    # Calculate residual incomes\n    RI1 = EPS1 - (ke * B0)\n    RI2 = EPS2 - (ke * B1)\n    RI3 = EPS3 - (ke * B2)\n\n    # Calculate present values of residual incomes\n    PV_RI1 = RI1 / (1 + ke)\n    PV_RI2 = RI2 / ((1 + ke) ** 2)\n    PV_RI3 = RI3 / ((1 + ke) ** 3)\n\n    # Calculate terminal value\n    TV = RI3 / (ke - g)\n    PV_TV = TV / ((1 + ke) ** 3)\n\n    # Calculate intrinsic value\n    intrinsic_value = B0 + PV_RI1 + PV_RI2 + PV_RI3 + PV_TV\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of Company N using the multistage residual income model. Here's a breakdown of the calculation:\n\n1. We define the given variables including book value at t=0, EPS and DPS for three years, cost of equity, and long-term growth rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-450",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, a large corporation acquired all 600,000 shares of a smaller corporation, priced at $25 per share. The smaller corporation had recognized net assets worth $6.5 million prior to being acquired. The larger corporation determined that the smaller corporation's fair value had appreciated by $3 million. What should be the 'goodwill' amount reported by the larger corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_acquired = 600000\n    price_per_share = 25\n    recognized_net_assets = 6500000\n    fair_value_appreciation = 3000000\n\n    # Do math calculation to get the answer\n    acquisition_cost = shares_acquired * price_per_share\n    fair_value_net_assets = recognized_net_assets + fair_value_appreciation\n    goodwill = acquisition_cost - fair_value_net_assets\n\n    # return answer\n    return goodwill\n```\n\nThis Python program calculates the goodwill amount reported by the larger corporation after acquiring the smaller corporation. Here's a breakdown of the calculation:\n\n1. We define the given values as variables.\n2. We calculate the total acquisition cost by multiplying the number of shares acquired by the price per share.\n3. We determine the fair value of net assets by adding the recognized net assets and the fair value appreciation.\n4. Goodwill is calculated as the difference between the acquisition cost and the fair value of net assets.\n5. The program returns the calculated goodwill amount.\n\nWhen you run this function, it will return the goodwill amount in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-451",
        "python_solution": "",
        "ground_truth": null,
        "question": "Analyst Johnson is employing a GARCH(1,1) model to calculate daily variance on daily returns(rt) : ht:=α0 + α1r2t-1 + βht-1 while α0 = 0.000003 α1 = 0.03 β = 0.94. Can you provide the estimate for the long-run annualized volatility (taking into consideration that volatility increases by the square root of time and there are 252 trading days in a year)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    alpha_0 = 0.000003\n    alpha_1 = 0.03\n    beta = 0.94\n    trading_days = 252\n\n    # Do math calculation to get the answer\n    long_run_daily_variance = alpha_0 / (1 - alpha_1 - beta)\n    long_run_daily_volatility = long_run_daily_variance ** 0.5\n    long_run_annual_volatility = long_run_daily_volatility * (trading_days ** 0.5)\n    \n    # Convert to percentage\n    answer = long_run_annual_volatility * 100\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the long-run annualized volatility based on the given GARCH(1,1) model parameters. Here's a breakdown of the calculation:\n\n1. We define the given parameters: α0 (alpha_0), α1 (alpha_1), β (beta), and the number of trading days in a year.\n\n2. We calculate the long-run daily variance using the formula: α0 / (1 - α1 - β)\n\n3. We take the square root of the long-run daily variance to get the long-run daily volatility.\n\n4. To annualize the volatility, we multiply the daily volatility by the square root of the number of trading days (252).\n\n5. Finally, we convert the result to a percentage by multiplying by 100.\n\nThe program returns the long-run annualized volatility as a percentage."
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-452",
        "python_solution": "",
        "ground_truth": null,
        "question": "The arithmetic mean annual return for a fund managed by John for year 1,2,3 will be:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.12, 0.05, 0.01]  # Returns for years 1, 2, and 3\n    num_years = len(returns)\n    \n    # Do math calculation to get the answer\n    total_return = sum(returns)\n    arithmetic_mean = total_return / num_years\n    \n    # Convert to percentage and round to 2 decimal places\n    answer = round(arithmetic_mean * 100, 2)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the arithmetic mean annual return for John's fund over the three years. Here's how it works:\n\n1. We define a list `returns` with the annual returns for each year (12%, 5%, and 1% converted to decimals).\n2. We calculate the total return by summing all the returns.\n3. We divide the total return by the number of years to get the arithmetic mean.\n4. We convert the result to a percentage by multiplying by 100 and round to 2 decimal places for clarity.\n5. Finally, we return the answer.\n\nWhen you run this function, it will return 6.0, which represents the arithmetic mean annual return of 6.0%."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-453",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data that Roberts Inc. (RI) announced an accounts receivable of $66 million at the end of its second fiscal quarter, and $55 million at the conclusion of its third fiscal quarter, with revenues reported to be $72 million during that quarter. What is the amount of cash RI received from clients during the third fiscal quarter?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    accounts_receivable_start = 66000000  # AR at the end of second quarter\n    accounts_receivable_end = 55000000    # AR at the end of third quarter\n    revenue = 72000000                    # Revenue during the third quarter\n\n    # Do math calculation to get the answer\n    change_in_ar = accounts_receivable_start - accounts_receivable_end\n    cash_received = revenue + change_in_ar\n\n    # return answer\n    return cash_received\n```\n\nThis program calculates the amount of cash Roberts Inc. (RI) received from clients during the third fiscal quarter. Here's how it works:\n\n1. We define the variables:\n   - `accounts_receivable_start`: AR at the end of the second quarter ($66 million)\n   - `accounts_receivable_end`: AR at the end of the third quarter ($55 million)\n   - `revenue`: Revenue reported during the third quarter ($72 million)\n\n2. We calculate the change in accounts receivable:\n   `change_in_ar = accounts_receivable_start - accounts_receivable_end`\n\n3. We calculate the cash received:\n   `cash_received = revenue + change_in_ar`\n\n   This is based on the principle that cash received equals revenue plus the decrease in accounts receivable (or minus the increase in accounts receivable).\n\n4. Finally, we return the `cash_received` value, which represents the amount of cash RI received from clients during the third fiscal quarter.\n\nThe answer returned by this function will be $83,000,000 (83 million dollars)."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-454",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financial institution has total interest costs of 65 million, total raised funds of 1000 million with 750 million of it being earning assets, and other operating costs of 10 million, and the current tax rate is 35%, taking into account that shareholders have invested 100 million with an expected return rate of 12%, what is the weighted average total cost of capital according to the historical average cost methodology?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    interest_costs = 65_000_000\n    total_funds = 1_000_000_000\n    earning_assets = 750_000_000\n    other_operating_costs = 10_000_000\n    tax_rate = 0.35\n    shareholders_investment = 100_000_000\n    expected_return_rate = 0.12\n\n    # Do math calculation to get the answer\n    \n    # Calculate the cost of funds\n    cost_of_funds = interest_costs / total_funds\n    \n    # Calculate the cost of operations\n    cost_of_operations = other_operating_costs / earning_assets\n    \n    # Calculate the pre-tax cost of capital\n    pre_tax_cost = cost_of_funds + cost_of_operations\n    \n    # Calculate the after-tax cost of capital\n    after_tax_cost = pre_tax_cost * (1 - tax_rate)\n    \n    # Calculate the cost of equity\n    cost_of_equity = expected_return_rate\n    \n    # Calculate the weights\n    weight_of_debt = (total_funds - shareholders_investment) / total_funds\n    weight_of_equity = shareholders_investment / total_funds\n    \n    # Calculate the weighted average total cost of capital\n    wacc = (after_tax_cost * weight_of_debt) + (cost_of_equity * weight_of_equity)\n    \n    # Convert to percentage\n    wacc_percentage = wacc * 100\n\n    # return answer\n    return round(wacc_percentage, 2)\n```"
        ]
    },
    {
        "tables": [
            "|                                                 |         |\n|-------------------------------------------------|---------|\n| Exhibit 3. Selected Financial Data for Topmaker, Inc. ,Estimated Year Ending 31 December 2017 ($ millions) |         |\n| Carrying value of cash-generating unit/reporting unit  | 15,200 |\n| Recoverable amount of cash-generating unit/reporting unit  | 14,900 |\n| Fair value of reporting unit       | 14,800 |\n| Identifiable net assets            | 14,400 |\n| Goodwill                           | 520    |"
        ],
        "topic": "Accounting",
        "question_id": "test-455",
        "python_solution": "",
        "ground_truth": null,
        "question": "Thomas Brooks, a research analyst in a global securities firm, is crafting a research summary on Megacreator, Inc., a company that adheres to IFRS and is publicly traded. On 1 January 2016, Megacreator bought a 15% stake in Brewster Co., holding voting rights, for $300 million. Megacreator maintains a seat at the Brewster board of directors table and has a say in policy decisions. Brooks is anxious about the potential impact of goodwill impairment due to anticipated industry shifts set to take place late in 2017. He computes the impairment loss using the predicted consolidated balance sheet data depicted in Exhibit 3, assuming that Megacreator's cash-generating unit and reporting unit are identical. According to Exhibit 3, the IFRS impairment loss for Megacreator is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 15200\n    recoverable_amount = 14900\n    \n    # Do math calculation to get the answer\n    impairment_loss = carrying_value - recoverable_amount\n    \n    # return answer\n    return impairment_loss\n```\n\nThis Python function calculates the IFRS impairment loss for Megacreator based on the information provided in Exhibit 3.\n\nUnder IFRS, an impairment loss is recognized when the carrying value of an asset or cash-generating unit exceeds its recoverable amount. The impairment loss is calculated as the difference between the carrying value and the recoverable amount.\n\nIn this case:\n- The carrying value of the cash-generating unit is $15,200 million\n- The recoverable amount is $14,900 million\n\nThe function subtracts the recoverable amount from the carrying value to determine the impairment loss, which is $300 million.\n\nNote that this calculation assumes that the cash-generating unit and reporting unit are identical, as stated in the question. The function returns the impairment loss in millions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-456",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the total revenue generated by the hedge fund company, Bearing, this year, considering it had $288 million in assets under management (AUM) at the end of the previous year, a 2% management fee (based on year-end AUM), 20% incentive fee calculated after the management fee, a 5% soft hurdle rate, and a high-water mark of $357 million, and its fund return for the current year is 25%?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    previous_aum = 288000000  # $288 million AUM at the end of previous year\n    management_fee_rate = 0.02  # 2% management fee\n    incentive_fee_rate = 0.20  # 20% incentive fee\n    hurdle_rate = 0.05  # 5% soft hurdle rate\n    high_water_mark = 357000000  # $357 million high-water mark\n    fund_return = 0.25  # 25% fund return for the current year\n\n    # Do math calculation to get the answer\n    \n    # Calculate current year's AUM\n    current_aum = previous_aum * (1 + fund_return)\n    \n    # Calculate management fee\n    management_fee = previous_aum * management_fee_rate\n    \n    # Calculate fund performance after management fee\n    performance_after_mgmt_fee = current_aum - previous_aum - management_fee\n    \n    # Calculate performance above hurdle rate\n    hurdle_amount = previous_aum * hurdle_rate\n    performance_above_hurdle = max(0, performance_after_mgmt_fee - hurdle_amount)\n    \n    # Calculate performance above high-water mark\n    performance_above_hwm = max(0, current_aum - high_water_mark)\n    \n    # Calculate incentive fee\n    incentive_fee = min(performance_above_hurdle, performance_above_hwm) * incentive_fee_rate\n    \n    # Calculate total revenue\n    total_revenue = management_fee + incentive_fee\n\n    # return answer\n    return total_revenue\n\n```\n\nThis program calculates the total revenue generated by the hedge fund company, Bearing, based on the given information. It takes into account the management fee, incentive fee, hurdle rate, and high-water mark. The function returns the total revenue as the answer."
        ]
    },
    {
        "tables": [
            "| Bond | Maturity | Market Value Price | Coupon | Yield-to-Maturity | Modified Duration |\n|------|----------|--------------------|--------|-------------------|-------------------|\n| A    | 6 years  | 170,000            | 2.00%  | 4.95%             | 5.42              |\n| B    | 10 years | 120,000            | 2.40%  | 4.99%             | 8.44              |\n| C    | 15 years | 100,000            | 5.00%  | 5.00%             | 10.38             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-457",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming annual coupon payments and no accrued interest, a collection of bonds includes the following three fixed-rate bonds. Prices are given per 100 of par value. What is the modified duration of this bond portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_A = {\"market_value\": 170000, \"modified_duration\": 5.42}\n    bond_B = {\"market_value\": 120000, \"modified_duration\": 8.44}\n    bond_C = {\"market_value\": 100000, \"modified_duration\": 10.38}\n    \n    total_market_value = bond_A[\"market_value\"] + bond_B[\"market_value\"] + bond_C[\"market_value\"]\n    \n    # Do math calculation to get the answer\n    weighted_duration_A = (bond_A[\"market_value\"] / total_market_value) * bond_A[\"modified_duration\"]\n    weighted_duration_B = (bond_B[\"market_value\"] / total_market_value) * bond_B[\"modified_duration\"]\n    weighted_duration_C = (bond_C[\"market_value\"] / total_market_value) * bond_C[\"modified_duration\"]\n    \n    portfolio_modified_duration = weighted_duration_A + weighted_duration_B + weighted_duration_C\n    \n    # return answer\n    return round(portfolio_modified_duration, 2)\n```\n\nThis Python program calculates the modified duration of the bond portfolio using the following steps:\n\n1. We define dictionaries for each bond, containing their market values and modified durations.\n2. We calculate the total market value of the portfolio.\n3. We calculate the weighted duration for each bond by multiplying its weight in the portfolio (market value / total market value) by its modified duration.\n4. We sum up the weighted durations to get the portfolio's modified duration.\n5. We round the result to two decimal places and return it.\n\nThis approach gives us the weighted average modified duration of the portfolio, which is the correct way to calculate the modified duration of a bond portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-458",
        "python_solution": "",
        "ground_truth": null,
        "question": "How many shares should be accounted for when calculating the diluted EPS under these circumstances? There are 500,000 shares in circulation. Plus, there are 200,000 exercisable warrants at $42 per share. The average share price stands at $45 while the share price at the end of the year is $50.",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding = 500000\n    warrants = 200000\n    warrant_exercise_price = 42\n    average_share_price = 45\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the number of additional shares from warrants\n    additional_shares = warrants * (average_share_price - warrant_exercise_price) / average_share_price\n    \n    # Calculate total diluted shares\n    total_diluted_shares = shares_outstanding + additional_shares\n    \n    # return answer\n    return round(total_diluted_shares)\n```\n\nThis program calculates the number of shares that should be accounted for when calculating the diluted EPS under the given circumstances. Here's a breakdown of the solution:\n\n1. We define the variables based on the information provided in the question.\n2. We calculate the number of additional shares from warrants using the treasury stock method: \n   `additional_shares = warrants * (average_share_price - warrant_exercise_price) / average_share_price`\n3. We add the additional shares to the shares outstanding to get the total diluted shares.\n4. We round the result to the nearest whole number, as fractional shares are typically not considered.\n\nThe program will return the total number of shares that should be accounted for in the diluted EPS calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-459",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, Corporation A announced: Net earnings $50,000, Weighted average of ordinary shares 6,000, Convertible privileged shares 1,000 (Each of these privileged shares can be converted into 3 ordinary shares) preferred dividends are $0.2 per share. What will be the diluted EPS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_earnings = 50000\n    weighted_avg_ordinary_shares = 6000\n    convertible_privileged_shares = 1000\n    conversion_ratio = 3\n    preferred_dividend_per_share = 0.2\n\n    # Do math calculation to get the answer\n    total_preferred_dividends = convertible_privileged_shares * preferred_dividend_per_share\n    adjusted_earnings = net_earnings - total_preferred_dividends\n    \n    potential_additional_shares = convertible_privileged_shares * conversion_ratio\n    total_diluted_shares = weighted_avg_ordinary_shares + potential_additional_shares\n    \n    diluted_eps = adjusted_earnings / total_diluted_shares\n\n    # return answer\n    return round(diluted_eps, 2)\n```\n\nThis Python program calculates the diluted Earnings Per Share (EPS) based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the total preferred dividends by multiplying the number of convertible privileged shares by the dividend per share.\n3. We adjust the net earnings by subtracting the total preferred dividends.\n4. We calculate the potential additional ordinary shares that could result from converting the privileged shares.\n5. We add these potential additional shares to the existing weighted average of ordinary shares to get the total diluted shares.\n6. Finally, we divide the adjusted earnings by the total diluted shares to get the diluted EPS.\n7. The result is rounded to 2 decimal places for better readability.\n\nThis program will return the diluted EPS as a float value."
        ]
    },
    {
        "tables": [
            "| Stock price per share | $60.75 |\n|-----------------------|--------|\n| Comprehensive income (millions) | $193.0 |\n| Other comprehensive income (millions) | $87.6 |\n| Common shares outstanding (millions) | 46.5 |"
        ],
        "topic": "Accounting",
        "question_id": "test-460",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the existing data on the corporation, what is its P/E on a net income basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 60.75\n    comprehensive_income = 193.0\n    other_comprehensive_income = 87.6\n    shares_outstanding = 46.5\n\n    # Do math calculation to get the answer\n    net_income = comprehensive_income - other_comprehensive_income\n    earnings_per_share = net_income / shares_outstanding\n    pe_ratio = stock_price / earnings_per_share\n\n    # return answer\n    return pe_ratio\n```\n\nThis Python program calculates the P/E ratio on a net income basis using the given information. Here's a breakdown of the calculation:\n\n1. We first define the variables with the given data.\n2. We calculate the net income by subtracting other comprehensive income from comprehensive income.\n3. We then calculate earnings per share (EPS) by dividing net income by the number of shares outstanding.\n4. Finally, we calculate the P/E ratio by dividing the stock price per share by the earnings per share.\n\nThe function will return the P/E ratio, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-461",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 250 trading days in a year and the portfolio returns are independent and follow the same normal distribution with zero mean, what is the estimated yearly VaR at the 95% confidence level for a local credit union's investment securities portfolio that has a current market value of USD 3,700,000 with a daily variance of 0.0004?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trading_days = 250\n    confidence_level = 0.95\n    portfolio_value = 3700000\n    daily_variance = 0.0004\n    \n    # Do math calculation to get the answer\n    import math\n    from scipy import stats\n    \n    # Calculate daily standard deviation\n    daily_std_dev = math.sqrt(daily_variance)\n    \n    # Calculate yearly standard deviation\n    yearly_std_dev = daily_std_dev * math.sqrt(trading_days)\n    \n    # Calculate z-score for 95% confidence level\n    z_score = stats.norm.ppf(confidence_level)\n    \n    # Calculate VaR\n    var = portfolio_value * z_score * yearly_std_dev\n    \n    # return answer\n    return var\n```\n\nThis Python program calculates the Value at Risk (VaR) for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the given variables: number of trading days, confidence level, portfolio value, and daily variance.\n\n2. We import the necessary math functions and the stats module from scipy.\n\n3. We calculate the daily standard deviation by taking the square root of the daily variance.\n\n4. We calculate the yearly standard deviation by multiplying the daily standard deviation by the square root of the number of trading days.\n\n5. We use the norm.ppf function from scipy.stats to calculate the z-score for the 95% confidence level.\n\n6. Finally, we calculate the VaR by multiplying the portfolio value, z-score, and yearly standard deviation.\n\n7. The function returns the calculated VaR.\n\nThis program will give you the estimated yearly VaR at the 95% confidence level for the credit union's investment securities portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-462",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current worth of a portfolio is $89.32, and its anticipated value after 1 year is $100. What is the rate of return for this portfolio when compounded continuously?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_value = 89.32\n    future_value = 100\n    time = 1  # year\n\n    # Do math calculation to get the answer\n    import math\n    rate = math.log(future_value / current_value) / time\n\n    # return answer\n    return rate * 100  # Convert to percentage\n```\n\nThis Python program calculates the continuously compounded rate of return for the given portfolio. Here's how it works:\n\n1. We define the variables:\n   - `current_value`: The current worth of the portfolio ($89.32)\n   - `future_value`: The anticipated value after 1 year ($100)\n   - `time`: The time period (1 year)\n\n2. We use the formula for continuous compound interest:\n   A = P * e^(r * t)\n   Where:\n   A is the future value\n   P is the present value\n   e is the mathematical constant e (base of natural logarithm)\n   r is the rate (what we're solving for)\n   t is the time\n\n3. Rearranging the formula to solve for r:\n   r = ln(A / P) / t\n\n4. We use `math.log()` which is the natural logarithm function in Python to calculate this.\n\n5. Finally, we multiply the result by 100 to convert it to a percentage before returning.\n\nThis program will return the continuously compounded rate of return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-463",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the annual spot rate r(1) equals to 4% and the forward price for a one-year zero coupon bond starting in one year equals to 0.9434, then what is the present cost of a two-year zero-coupon bond?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04  # Annual spot rate for year 1\n    f1 = 0.9434  # Forward price for a one-year zero coupon bond starting in one year\n\n    # Do math calculation to get the answer\n    \n    # Calculate the spot rate for year 2 using the forward rate\n    r2 = (1 / f1) - 1\n    \n    # Calculate the present value of a two-year zero-coupon bond\n    present_value = 1 / ((1 + r1) * (1 + r2))\n    \n    # Round the result to 4 decimal places\n    answer = round(present_value, 4)\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the present cost of a two-year zero-coupon bond given the annual spot rate for the first year and the forward price for a one-year zero coupon bond starting in one year.\n\nThe calculation steps are as follows:\n1. We define the given variables: `r1` for the first-year spot rate and `f1` for the forward price.\n2. We calculate the implied forward rate for year 2 using the formula: r2 = (1 / f1) - 1\n3. We then use these rates to calculate the present value of a two-year zero-coupon bond using the formula: PV = 1 / ((1 + r1) * (1 + r2))\n4. Finally, we round the result to 4 decimal places for precision.\n\nThe returned value represents the present cost of a two-year zero-coupon bond."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| 1 | 16 | 20 |\n| 2 | 12 | 20 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-464",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the anticipated standard deviation of an equal-weighted portfolio made by an investment analyst, if the correlation of returns between the two securities is -0.15?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w1 = 0.5  # weight of security 1\n    w2 = 0.5  # weight of security 2\n    sigma1 = 0.20  # standard deviation of security 1\n    sigma2 = 0.20  # standard deviation of security 2\n    rho = -0.15  # correlation coefficient between security 1 and 2\n\n    # Do math calculation to get the answer\n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2 * w1 * w2 * rho * sigma1 * sigma2)\n    portfolio_std_dev = variance**0.5\n\n    # return answer\n    return portfolio_std_dev * 100  # Convert to percentage\n```\n\nThis Python program calculates the standard deviation of an equal-weighted portfolio consisting of two securities, given their individual standard deviations and the correlation between their returns.\n\nHere's a breakdown of the calculation:\n\n1. We define the weights (w1 and w2) as 0.5 each for an equal-weighted portfolio.\n2. We set the standard deviations (sigma1 and sigma2) to 0.20 (20%) as given in the table.\n3. The correlation coefficient (rho) is set to -0.15 as stated in the question.\n4. We use the portfolio variance formula: \n   Variance = (w1^2 * σ1^2) + (w2^2 * σ2^2) + (2 * w1 * w2 * ρ * σ1 * σ2)\n5. We then take the square root of the variance to get the standard deviation.\n6. Finally, we multiply by 100 to convert the result to a percentage.\n\nThis program will return the anticipated standard deviation of the equal-weighted portfolio as a percentage."
        ]
    },
    {
        "tables": [
            "| Comparable Companies | Tax Rate (%) | Debt/Equity | Equity Beta |\n| -------------------- | ------------ | ----------- | ----------- |\n| Private company      | 30.0         | 1.00        | N.A.        |\n| Public company       | 35.0         | 0.90        | 1.75        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-465",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the projected equity beta for a private firm using the pure-play approach and the data obtained from its publicly traded rival?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    public_tax_rate = 0.35\n    public_debt_equity = 0.90\n    public_equity_beta = 1.75\n    \n    private_tax_rate = 0.30\n    private_debt_equity = 1.00\n\n    # Do math calculation to get the answer\n    public_unlevered_beta = public_equity_beta / (1 + (1 - public_tax_rate) * public_debt_equity)\n    private_equity_beta = public_unlevered_beta * (1 + (1 - private_tax_rate) * private_debt_equity)\n\n    # return answer\n    return round(private_equity_beta, 4)\n```\n\nThis Python program calculates the projected equity beta for the private firm using the pure-play approach and the data from its publicly traded rival. Here's a breakdown of the calculation:\n\n1. We first calculate the unlevered beta of the public company using the formula:\n   Unlevered Beta = Levered Beta / [1 + (1 - Tax Rate) * (Debt/Equity)]\n\n2. Then, we use this unlevered beta to calculate the levered beta (equity beta) for the private company using the formula:\n   Levered Beta = Unlevered Beta * [1 + (1 - Tax Rate) * (Debt/Equity)]\n\nThe result is rounded to 4 decimal places for precision. This approach assumes that the businesses of the public and private companies are similar enough for this comparison to be valid."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-466",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment manager is looking to build a bull spread utilizing call options. A strike price of $50 costs $8 and a strike price of $60 costs $2. Both these calls mature in a month and have the same underlying, currently valued at $55. What is the breakeven underlying price?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lower_strike = 50\n    higher_strike = 60\n    lower_premium = 8\n    higher_premium = 2\n\n    # Do math calculation to get the answer\n    net_premium = lower_premium - higher_premium\n    breakeven_price = lower_strike + net_premium\n\n    # return answer\n    return breakeven_price\n```\n\nThis program calculates the breakeven underlying price for a bull call spread option strategy. Here's how it works:\n\n1. We define the variables:\n   - `lower_strike`: The strike price of the call option being bought ($50)\n   - `higher_strike`: The strike price of the call option being sold ($60)\n   - `lower_premium`: The premium paid for the lower strike call option ($8)\n   - `higher_premium`: The premium received for the higher strike call option ($2)\n\n2. We calculate the net premium paid, which is the difference between the premium paid for the lower strike call and the premium received for the higher strike call.\n\n3. The breakeven price is calculated by adding the net premium to the lower strike price. This is because the strategy will start to profit when the underlying price exceeds the lower strike price plus the net cost of entering the position.\n\n4. The function returns the breakeven price.\n\nWhen you run this function, it will return 56, which means the breakeven underlying price for this bull call spread is $56."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-467",
        "python_solution": "",
        "ground_truth": null,
        "question": "Last year, Corporation Z issued a dividend of $0.5. Earnings for this year are estimated to be $3.0. Assuming the desired payout ratio is 30%, and the dividend is adjusted over a 4-year term. What is the anticipated dividend for the current year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    last_year_dividend = 0.5\n    current_year_earnings = 3.0\n    desired_payout_ratio = 0.30\n    adjustment_years = 4\n\n    # Do math calculation to get the answer\n    target_dividend = current_year_earnings * desired_payout_ratio\n    dividend_change = target_dividend - last_year_dividend\n    annual_adjustment = dividend_change / adjustment_years\n    current_year_dividend = last_year_dividend + annual_adjustment\n\n    # return answer\n    return round(current_year_dividend, 2)\n```\n\nThis Python program calculates the anticipated dividend for the current year based on the given information:\n\n1. We define the variables with the given values.\n2. We calculate the target dividend by multiplying the current year's earnings by the desired payout ratio.\n3. We determine the total change needed in the dividend by subtracting last year's dividend from the target dividend.\n4. We calculate the annual adjustment by dividing the total change by the number of adjustment years.\n5. We determine the current year's dividend by adding the annual adjustment to last year's dividend.\n6. Finally, we return the result rounded to two decimal places, as dividends are typically expressed in cents.\n\nThe program will return the anticipated dividend for the current year."
        ]
    },
    {
        "tables": [
            "| Product | Quantity Produced in 2012 | Quantity Produced in 2013 | Product Unit Prices in 2012 | Product Unit Prices in 2013 |\n|-------|-------------------------|-------------------------|---------------------------|---------------------------|\n| X     | 351.0                   | 352.0                   | 13.3                          | 13.8                          |\n| Y     | 179.0                   | 182.5                   | unknown                    | 11.1                          |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-468",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we take 2012 as the reference year for calculating GDP and the GDP deflator for the economic climate in 2013 is 102.4, what would be the unit cost of item B in 2012 in an economy consisting of two items, A and B, given the details below?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    x_quantity_2012 = 351.0\n    x_quantity_2013 = 352.0\n    x_price_2012 = 13.3\n    x_price_2013 = 13.8\n    \n    y_quantity_2012 = 179.0\n    y_quantity_2013 = 182.5\n    y_price_2013 = 11.1\n    \n    gdp_deflator_2013 = 102.4\n    \n    # Do math calculation to get the answer\n    \n    # Calculate nominal GDP for 2013\n    nominal_gdp_2013 = (x_quantity_2013 * x_price_2013) + (y_quantity_2013 * y_price_2013)\n    \n    # Calculate real GDP for 2013 (using 2012 as base year)\n    real_gdp_2013 = nominal_gdp_2013 / (gdp_deflator_2013 / 100)\n    \n    # Calculate the total value of product X in 2012 prices\n    x_value_2012_prices = x_quantity_2013 * x_price_2012\n    \n    # Calculate the value of product Y in 2012 prices\n    y_value_2012_prices = real_gdp_2013 - x_value_2012_prices\n    \n    # Calculate the unit price of Y in 2012\n    y_price_2012 = y_value_2012_prices / y_quantity_2013\n    \n    # return answer\n    return round(y_price_2012, 2)\n```\n\nThis program calculates the unit price of product Y (which we're calling B in the question) in 2012. Here's a breakdown of the steps:\n\n1. We define all the known variables from the given information.\n2. We calculate the nominal GDP for 2013 using the quantities and prices for that year.\n3. We use the GDP deflator to calculate the real GDP for 2013 in "
        ]
    },
    {
        "tables": [
            "|                             | 5-Year T-Note | 10-Year T-Note |\n|-----------------------------|---------------|----------------|\n| Yield to maturity           | 6.02%         | 6.41%          |\n| Modified duration           | 4.8           | 9.1            |\n| BPV per 100,000 in par value| 47.22         | 88.41          |\n| Conversion factor for cheapest-to-deliver | 0.88          | 0.90           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-469",
        "python_solution": "",
        "ground_truth": null,
        "question": "In addition to contemplating the implementation of financial instruments to control interest rate risk, Sullivan is also contemplating a fresh approach for Shoreline. Sullivan calculates how many bond futures are required to shield the company's total exposure to interest rate risk. The asset portfolio has a basis point value (BPV) of 96,000, while the liability portfolio's BPV is 44,000. Based on the extra data about bond futures that Sullivan has gathered in Exhibit 1, how many five-year note futures contracts need to be sold to readjust the immunizing portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_bpv = 96000\n    liability_bpv = 44000\n    net_bpv = asset_bpv - liability_bpv\n    five_year_note_bpv = 47.22  # BPV per 100,000 in par value for 5-Year T-Note\n    conversion_factor = 0.88  # Conversion factor for cheapest-to-deliver for 5-Year T-Note\n    contract_size = 100000  # Standard futures contract size\n\n    # Do math calculation to get the answer\n    bpv_per_contract = five_year_note_bpv * contract_size / 100000 * conversion_factor\n    num_contracts = net_bpv / bpv_per_contract\n    \n    # Round up to the nearest whole number, as fractional contracts can't be traded\n    num_contracts_rounded = round(num_contracts)\n\n    # return answer\n    return num_contracts_rounded\n```\n\nThis Python program calculates the number of five-year note futures contracts needed to readjust the immunizing portfolio. Here's a breakdown of the calculation:\n\n1. We calculate the net BPV exposure by subtracting the liability BPV from the asset BPV.\n2. We determine the BPV per contract by adjusting the given BPV (which is per 100,000 in par value) for the actual contract size and the conversion factor.\n3. We divide the net BPV exposure by the BPV per contract to get the number of contracts needed.\n4. Finally, we round to the nearest whole number, as fractional contracts cannot be traded.\n\nThe program will return the number of five-year note futures contracts that need to be sold to readjust the immunizing portfolio."
        ]
    },
    {
        "tables": [
            "|                               |                               |                                           |                        |\n|-------------------------------|-------------------------------|-------------------------------------------|------------------------|\n| An individual consumer's demand for tea |                                               | Qdt=1, 800-40Pt+0.5/+150Pc                |                        |\n| Seller's supply of tea        |                                               | QSt=-516+350Pt-120W                        |                        |\n|                               |                               |                                           |                        |\n|                               |                               | **Legend and Initial Values**              | **Assumed Values**     |\n| ad t                          |               Quantity of tea |                                           |                        |\n| Pt                            | Price of tea per 100 grams    |                                           |                        |\n| I                             |       Household income        |                                           | £2,400                 |\n| W                             | Hourly wage rate for labor    |                                           |                        |\n| Pc                            | Price of coffee per 100 grams |                                           | £22.4                  |\n|                               | Equilibrium price of tea      |                                           | £30.6                  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-470",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there is a 2.5% rise in the income of the family while G and T remain constant, what would be the adjusted equilibrium quantity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_income = 2400\n    income_increase = 0.025  # 2.5% increase\n    price_coffee = 22.4\n    initial_equilibrium_price = 30.6\n\n    # Do math calculation to get the answer\n    new_income = initial_income * (1 + income_increase)\n    \n    # Demand function: Qdt = 1800 - 40Pt + 0.5I + 150Pc\n    # Supply function: QSt = -516 + 350Pt - 120W\n    \n    # At equilibrium, Qdt = QSt\n    # 1800 - 40Pt + 0.5I + 150Pc = -516 + 350Pt - 120W\n    # Solving for Pt (price of tea) isn't necessary as it's given to remain constant\n    \n    # Calculate new demand at the initial equilibrium price\n    new_demand = 1800 - 40 * initial_equilibrium_price + 0.5 * new_income + 150 * price_coffee\n    \n    # Calculate supply at the initial equilibrium price\n    # Note: We don't have information about W (wage), but since price is constant, supply remains the same\n    supply = -516 + 350 * initial_equilibrium_price  # - 120W term omitted as W is unknown and constant\n    \n    # The new equilibrium quantity is the minimum of new demand and supply\n    new_equilibrium_quantity = min(new_demand, supply)\n    \n    # return answer\n    return round(new_equilibrium_quantity, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-471",
        "python_solution": "",
        "ground_truth": null,
        "question": "If you were to invest 1 million dollars in a financial product today with a stated annual interest rate of 6%, what would its value be three years from now considering it is compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000  # Initial investment of 1 million dollars\n    rate = 0.06  # Annual interest rate of 6%\n    years = 3  # Time period of 3 years\n    compounds_per_year = 12  # Compounded monthly (12 times per year)\n\n    # Do math calculation to get the answer\n    future_value = principal * (1 + rate/compounds_per_year) ** (compounds_per_year * years)\n\n    # return answer\n    return round(future_value, 2)  # Rounded to 2 decimal places for cents\n```\n\nThis Python program calculates the future value of an investment using the compound interest formula. Here's a breakdown of what the program does:\n\n1. We define the variables:\n   - `principal`: The initial investment amount (1 million dollars)\n   - `rate`: The annual interest rate (6% or 0.06)\n   - `years`: The time period (3 years)\n   - `compounds_per_year`: The number of times interest is compounded per year (12 for monthly compounding)\n\n2. We use the compound interest formula to calculate the future value:\n   future_value = principal * (1 + rate/compounds_per_year) ** (compounds_per_year * years)\n\n3. We round the result to two decimal places to represent dollars and cents, and return this value.\n\nWhen you run this function, it will return the future value of the investment after 3 years of monthly compounding at a 6% annual interest rate."
        ]
    },
    {
        "tables": [
            "| Stock | Shares Outstanding | % Shares in Market Float | Beginning of Period Price | End of Period Price | Dividends Per Share |\n|-------|-------------------|--------------------------|---------------------------|---------------------|---------------------|\n| A     | 5,000             | 90                       | 40                        | 45                  | 1.00                |\n| B     | 2,000             | 100                      | 68                        | 60                  | 0.50                |\n| C     | 6,000             | 70                       | 60                        | 70                  | 1.50                |\n| D     | 4,000             | 40                       | 20                        | 24                  | 0.80                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-472",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we consider the initial value of the float-adjusted market-capitalization-weighted equity index to be 100, what would be the final value considering the data for four stocks in the index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stocks = ['A', 'B', 'C', 'D']\n    shares_outstanding = [5000, 2000, 6000, 4000]\n    float_percentage = [90, 100, 70, 40]\n    start_price = [40, 68, 60, 20]\n    end_price = [45, 60, 70, 24]\n    dividends = [1.00, 0.50, 1.50, 0.80]\n    initial_index_value = 100\n\n    # Do math calculation to get the answer\n    total_start_market_cap = 0\n    total_end_market_cap = 0\n\n    for i in range(len(stocks)):\n        float_shares = shares_outstanding[i] * (float_percentage[i] / 100)\n        start_cap = float_shares * start_price[i]\n        end_cap = float_shares * (end_price[i] + dividends[i])\n        \n        total_start_market_cap += start_cap\n        total_end_market_cap += end_cap\n\n    index_return = total_end_market_cap / total_start_market_cap\n    final_index_value = initial_index_value * index_return\n\n    # return answer\n    return round(final_index_value, 2)\n```\n\nThis Python function calculates the final value of the float-adjusted market-capitalization-weighted equity index based on the provided data. Here's a breakdown of the calculation:\n\n1. We define the data for each stock in lists.\n2. We calculate the total market capitalization at the start and end of the period, considering only the float shares.\n3. For the end market cap, we add the dividends to the end price.\n4. We calculate the index return by dividing the total end market cap by the total start market cap.\n5. We multiply the initial index value (100) by this return to get the final index value.\n6. The result is rounded to two decimal places for precision.\n\nThis approach takes into account the float-adjusted shares, the price changes, and the dividends paid"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-473",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price elasticity of demand at the neighborhood fitness center if the membership fee is $35, given that their membership demand is dictated by the equation: Qdfc = 400 - 5 Pfc, with Qdfc representing the number of gym members and Pfc being the membership cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P = 35  # Price (membership fee)\n    Q = 400 - 5 * P  # Quantity demanded at P = 35\n    \n    # Do math calculation to get the answer\n    dQ = -5  # Change in quantity with respect to price (slope of demand curve)\n    elasticity = (dQ / Q) * (P / 1)\n    \n    # return answer\n    return abs(elasticity)\n```\n\nThis Python program calculates the price elasticity of demand for the neighborhood fitness center based on the given information. Here's a breakdown of the solution:\n\n1. We define the price (P) as $35 and calculate the quantity demanded (Q) using the given demand equation: Q = 400 - 5P.\n\n2. The slope of the demand curve (dQ/dP) is -5, which represents the change in quantity with respect to price.\n\n3. We use the point elasticity formula: Elasticity = (dQ/dP) * (P/Q)\n\n4. We simplify this to: Elasticity = (dQ/Q) * (P/1) since we're looking at a specific point.\n\n5. We take the absolute value of the result, as elasticity is typically expressed as a positive number.\n\nThe program will return the calculated elasticity value, which represents the price elasticity of demand at the given price point."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-474",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the true risk-free return rate is 3%, the anticipated inflation premium is 5% and the interest rate determined by the market for a certain investment is 12%, what is the total of the default risk premium, the liquidity premium, and the maturity premium for the investment?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03  # 3%\n    inflation_premium = 0.05  # 5%\n    market_interest_rate = 0.12  # 12%\n    \n    # Do math calculation to get the answer\n    nominal_risk_free_rate = risk_free_rate + inflation_premium\n    total_other_premiums = market_interest_rate - nominal_risk_free_rate\n    \n    # return answer\n    return total_other_premiums\n\n```\n\nThis program calculates the total of the default risk premium, liquidity premium, and maturity premium for the investment. Here's how it works:\n\n1. We define the given values as variables:\n   - The true risk-free return rate is 3% (0.03)\n   - The anticipated inflation premium is 5% (0.05)\n   - The market interest rate for the investment is 12% (0.12)\n\n2. We calculate the nominal risk-free rate by adding the true risk-free rate and the inflation premium.\n\n3. We then subtract the nominal risk-free rate from the market interest rate. This difference represents the total of all other premiums (default risk premium, liquidity premium, and maturity premium).\n\n4. The function returns this total, which is the answer to the question.\n\nWhen you run this function, it will return the decimal value representing the total of the default risk premium, liquidity premium, and maturity premium for the investment."
        ]
    },
    {
        "tables": [
            "| Buyer   | Bid Size (Number of shares) | Limit price($) | Offer size (Number of shares) | Seller   |\n|---------|-----------------------------|----------------|-------------------------------|----------|\n| Liam    | 7,000                       | 20.70          |                               |          |\n| Debbie  | 200                         | 20.88          |                               |          |\n| Philips | 400                         | 21.02          |                               |          |\n| Fiona   | 300                         | 21.89          |                               |          |\n|         |                             | 21.90          | 300                           | Kevin    |\n|         |                             | 22.01          | 1,300                         | Veronica |\n|         |                             | 22.06          | 1,500                         | Ethel    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-475",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine that a limit order is listed in the stock's order book. Let's say Alex placed a day order with a limit price of $20.87 and sold 1,000 shares, with no other investors placing a buy order after his was submitted. What would be the average price for Alex's transaction?",
        "output": [
            "def solution():\n    # Define variables name and value\n    alex_limit_price = 20.87\n    alex_sell_shares = 1000\n    \n    bid_prices = [20.70, 20.88, 21.02, 21.89]\n    bid_sizes = [7000, 200, 400, 300]\n    \n    # Do math calculation to get the answer\n    total_value = 0\n    shares_sold = 0\n    \n    for price, size in zip(bid_prices, bid_sizes):\n        if price >= alex_limit_price:\n            if shares_sold + size <= alex_sell_shares:\n                total_value += price * size\n                shares_sold += size\n            else:\n                remaining_shares = alex_sell_shares - shares_sold\n                total_value += price * remaining_shares\n                shares_sold = alex_sell_shares\n                break\n    \n    if shares_sold == 0:\n        return 0  # No shares sold\n    \n    average_price = total_value / shares_sold\n    \n    # return answer\n    return round(average_price, 2)\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-476",
        "python_solution": "",
        "ground_truth": null,
        "question": "The investment portfolio is worth $10,000,000. The retirement fund intends to employ a futures contract valued at $125,000 to reduce the beta from 1.2 to 0.9 over a span of two months. The futures contract has a beta of 0.95. How many futures contracts should be sold?",
        "output": [
            "def solution():\n    # Define variables name and value\n    portfolio_value = 10_000_000\n    futures_contract_value = 125_000\n    current_beta = 1.2\n    target_beta = 0.9\n    futures_beta = 0.95\n    \n    # Do math calculation to get the answer\n    beta_change = current_beta - target_beta\n    hedge_ratio = beta_change / futures_beta\n    hedge_value = hedge_ratio * portfolio_value\n    num_contracts = hedge_value / futures_contract_value\n    \n    # return answer\n    return round(num_contracts)\n\n```"
        ]
    },
    {
        "tables": [
            "|  |  |  | Year 3 | Year 2 | Year 1 |\n| --- | --- | --- | --- | --- | --- |\n| Earnings before income taxes: | | United States | $88,157 | $75,658 | $59,973 |\n|  | | Foreign | $116,704 | $113,509 | $94,760 |\n|  |  | Total | $204,861 | $189,167 | $154,733 |\n| The components of the provision for income taxes are as follows ($ thousands): | | |  | | |\n| Income taxes: | Current: | Federal | $30,632 | $22,031 | $18,959  |\n|  | | Foreign | $28,140 | $27,961 | $22,263  |\n|  | | | $58,772 | $49,992 | $41,222 |\n| | Deferred: | Federal | ($4,752) | $5,138 | $2,336 |\n|  | | Foreign | $124 | $1,730 | $621 |\n|  | | | ($4,628) | $6,868 | $2,957 |\n|  |  | Total | $54,144 | $56,860 | $44,179 |"
        ],
        "topic": "Accounting",
        "question_id": "test-477",
        "python_solution": "",
        "ground_truth": null,
        "question": "What was the provision for income taxes recorded in the US GAAP income statement of the firm in Year 3, given the elements of earnings before income taxes (in $ thousands)?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_federal = 30632\n    current_foreign = 28140\n    deferred_federal = -4752\n    deferred_foreign = 124\n    \n    # Do math calculation to get the answer\n    total_provision = current_federal + current_foreign + deferred_federal + deferred_foreign\n    \n    # return answer\n    return total_provision\n```\n\nThis program calculates the total provision for income taxes in Year 3 by summing up the current and deferred taxes for both federal and foreign components. The result, which is the value returned by the function, represents the provision for income taxes recorded in the US GAAP income statement for Year 3, given in thousands of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-478",
        "python_solution": "",
        "ground_truth": null,
        "question": "A takeover private equity fund intends to invest in all of Business A's preferred shares and 70% of the ordinary shares. Business A's present valuation stands at $10 million, comprising $6.5 million in debt, $2.8 million in preferred shares and $0.7 million in ordinary shares. The projected exit value in five years time is $15 million, with a predicted decrease in debt by $2.5 million and a 15% yearly return on preferred shares. What is the ratio of anticipated proceeds at exit to the funds invested?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    present_valuation = 10_000_000\n    present_debt = 6_500_000\n    present_preferred_shares = 2_800_000\n    present_ordinary_shares = 700_000\n    exit_value = 15_000_000\n    debt_decrease = 2_500_000\n    preferred_shares_yearly_return = 0.15\n    years = 5\n    ordinary_shares_percentage = 0.70\n\n    # Do math calculation to get the answer\n    investment_preferred = present_preferred_shares\n    investment_ordinary = present_ordinary_shares * ordinary_shares_percentage\n    total_investment = investment_preferred + investment_ordinary\n\n    exit_debt = present_debt - debt_decrease\n    exit_preferred = investment_preferred * (1 + preferred_shares_yearly_return) ** years\n    exit_ordinary = exit_value - exit_debt - exit_preferred\n\n    proceeds = exit_preferred + (exit_ordinary * ordinary_shares_percentage)\n\n    ratio = proceeds / total_investment\n\n    # return answer\n    return ratio\n```\n\nThis Python program calculates the ratio of anticipated proceeds at exit to the funds invested for the takeover private equity fund. Here's a breakdown of the calculation:\n\n1. We define all the given values as variables.\n2. We calculate the total investment by adding the full amount of preferred shares and 70% of ordinary shares.\n3. We calculate the exit values for debt, preferred shares, and ordinary shares.\n4. We calculate the proceeds by adding the exit value of preferred shares and 70% of the exit value of ordinary shares.\n5. Finally, we calculate and return the ratio of proceeds to total investment.\n\nThe function will return the ratio as a float value."
        ]
    },
    {
        "tables": [
            "|         |           |                   |      |\n|---------|-----------|-------------------|------|\n|         |           | Underlying Bond   |      |\n| Futures Contract |   |                   |      |\n| Quoted futures price | 125.00 | Quoted bond price | 112.00 |\n| Conversion factor | 0.90 | Accrued interest since last coup on payment | 0.08 |\n| Time remaining to contract expiration | Three months | Accrued interest at futures contract expiration |0.20 |\n| Accrued interest over life of futures contract | 0.00 |   |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-479",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Minstrel identifies an arbitrage opportunity involving a fixed-income futures contract and its related bond, and the current details on the futures contract and related bond are displayed in Exhibit 1, what would be the arbitrage profit on the bond futures contract given that the existing yearly compounded risk-free rate is 0.30%, assuming annual compounding?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    futures_price = 125.00\n    conversion_factor = 0.90\n    bond_price = 112.00\n    accrued_interest_now = 0.08\n    accrued_interest_expiration = 0.20\n    risk_free_rate = 0.0030  # 0.30% converted to decimal\n    time_to_expiration = 3/12  # 3 months converted to years\n\n    # Do math calculation to get the answer\n    \n    # Calculate the implied futures price\n    implied_futures_price = (bond_price + accrued_interest_expiration) * conversion_factor\n    \n    # Calculate the cost of carrying the bond\n    carry_cost = (bond_price + accrued_interest_now) * (1 + risk_free_rate)**time_to_expiration - (bond_price + accrued_interest_now)\n    \n    # Calculate the theoretical futures price\n    theoretical_futures_price = implied_futures_price + carry_cost\n    \n    # Calculate the arbitrage profit\n    arbitrage_profit = futures_price - theoretical_futures_price\n    \n    # return answer\n    return round(arbitrage_profit, 4)\n```\n\nThis Python program calculates the arbitrage profit on the bond futures contract based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the necessary variables from the provided table and question.\n\n2. We calculate the implied futures price, which is the (bond price + accrued interest at expiration) * conversion factor.\n\n3. We calculate the cost of carrying the bond for 3 months (the time to expiration) using the given risk-free rate.\n\n4. We then calculate the theoretical futures price by adding the implied futures price and the carry cost.\n\n5. Finally, we calculate the arbitrage profit by subtracting the theoretical futures price from the quoted futures price.\n\n6. The result is rounded to 4 decimal places for precision.\n\nThis program will return the arbitrage profit, which represents the potential gain from exploiting the price discrepancy between the futures contract and its underlying bond."
        ]
    },
    {
        "tables": [
            "|                     | $ millions |\n|---------------------|------------|\n| Sales               | 4,800      |\n| Cost of goods sold  | 2,880      |\n| Purchases           | 2,940      |\n| Average receivables | 625        |\n| Average inventory   | 710        |\n| Average payables    | 145        |"
        ],
        "topic": "Accounting",
        "question_id": "test-480",
        "python_solution": "",
        "ground_truth": null,
        "question": "The details for a certain business are given below. How many days does it take for that business to complete its cash conversion cycle?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 4800\n    cogs = 2880\n    purchases = 2940\n    avg_receivables = 625\n    avg_inventory = 710\n    avg_payables = 145\n    \n    # Do math calculation to get the answer\n    \n    # Days Sales Outstanding (DSO)\n    dso = (avg_receivables / sales) * 365\n    \n    # Days Inventory Outstanding (DIO)\n    dio = (avg_inventory / cogs) * 365\n    \n    # Days Payables Outstanding (DPO)\n    dpo = (avg_payables / purchases) * 365\n    \n    # Cash Conversion Cycle (CCC)\n    ccc = dso + dio - dpo\n    \n    # return answer\n    return round(ccc, 2)\n```\n\nThis Python program calculates the Cash Conversion Cycle (CCC) for the business based on the provided financial data. Here's a breakdown of the calculation:\n\n1. We first define all the necessary variables from the given table.\n\n2. We then calculate the components of the CCC:\n   - Days Sales Outstanding (DSO): (Average Receivables / Sales) * 365\n   - Days Inventory Outstanding (DIO): (Average Inventory / COGS) * 365\n   - Days Payables Outstanding (DPO): (Average Payables / Purchases) * 365\n\n3. The Cash Conversion Cycle is then calculated as: CCC = DSO + DIO - DPO\n\n4. The result is rounded to two decimal places for precision.\n\nThis program will return the number of days it takes for the business to complete its cash conversion cycle."
        ]
    },
    {
        "tables": [
            "| Bond | Maturity | Market Value Price | Coupon | Yield-to-Maturity | Modified Duration |\n| --- | --- | --- | --- | --- | --- |\n| A | 3 years | 150,000 95.0000 | 3.00% | 5.67% | 4.98 |\n| B | 5 years | 110,000 90.0000 | 4.00% | 5.97% | 7.86 |\n| C | 10 years | 100,000 100.0000 | 6.00% | 6.00% | 9.27 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-481",
        "python_solution": "",
        "ground_truth": null,
        "question": "The modified duration of a bond collection, which consists of three fixed-rate bonds that pay annual coupons without any accrued interest, is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_a = {\"market_value\": 150000 * 0.95, \"modified_duration\": 4.98}\n    bond_b = {\"market_value\": 110000 * 0.90, \"modified_duration\": 7.86}\n    bond_c = {\"market_value\": 100000 * 1.00, \"modified_duration\": 9.27}\n    \n    # Do math calculation to get the answer\n    total_market_value = bond_a[\"market_value\"] + bond_b[\"market_value\"] + bond_c[\"market_value\"]\n    \n    weighted_duration_a = (bond_a[\"market_value\"] / total_market_value) * bond_a[\"modified_duration\"]\n    weighted_duration_b = (bond_b[\"market_value\"] / total_market_value) * bond_b[\"modified_duration\"]\n    weighted_duration_c = (bond_c[\"market_value\"] / total_market_value) * bond_c[\"modified_duration\"]\n    \n    portfolio_modified_duration = weighted_duration_a + weighted_duration_b + weighted_duration_c\n    \n    # return answer\n    return round(portfolio_modified_duration, 2)\n```\n\nThis Python program calculates the modified duration of the bond collection as follows:\n\n1. It defines the market value and modified duration for each bond.\n2. It calculates the total market value of all bonds.\n3. For each bond, it calculates its weighted duration by multiplying its proportion of the total market value by its modified duration.\n4. It sums up all the weighted durations to get the portfolio's modified duration.\n5. Finally, it rounds the result to two decimal places and returns it.\n\nThe returned value will be the modified duration of the bond collection."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-482",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Bull Corporation anticipates growth rates of 10% and 20% for the initial two years, after which it will drop to 6%. If we consider that the return rate is 10% and Bull's recent dividend was $1, what is the value of Bull's ordinary shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    recent_dividend = 1\n    growth_rate_year1 = 0.10\n    growth_rate_year2 = 0.20\n    growth_rate_subsequent = 0.06\n    return_rate = 0.10\n\n    # Do math calculation to get the answer\n    dividend_year1 = recent_dividend * (1 + growth_rate_year1)\n    dividend_year2 = dividend_year1 * (1 + growth_rate_year2)\n    dividend_year3 = dividend_year2 * (1 + growth_rate_subsequent)\n\n    # Calculate the present value of dividends for years 1 and 2\n    pv_year1 = dividend_year1 / (1 + return_rate)\n    pv_year2 = dividend_year2 / (1 + return_rate)**2\n\n    # Calculate the terminal value using the Gordon Growth Model\n    terminal_value = (dividend_year3 / (return_rate - growth_rate_subsequent)) / (1 + return_rate)**2\n\n    # Sum up the present values\n    share_value = pv_year1 + pv_year2 + terminal_value\n\n    # return answer\n    return round(share_value, 2)\n```\n\nThis Python program calculates the value of Bull Corporation's ordinary shares using the dividend discount model. Here's a breakdown of the calculation:\n\n1. We define the given variables: recent dividend, growth rates for the first two years and subsequent years, and the required return rate.\n\n2. We calculate the dividends for years 1, 2, and 3 based on the given growth rates.\n\n3. We calculate the present value of dividends for years 1 and 2.\n\n4. We use the Gordon Growth Model to calculate the terminal value from year 3 onwards, assuming a constant growth rate of 6% after year 2.\n\n5. We sum up the present values of the first two years' dividends and the terminal value to get the total share value.\n\n6. Finally, we round the result to two decimal places and return it.\n\nThis program provides a comprehensive valuation of Bull Corporation's shares"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-483",
        "python_solution": "",
        "ground_truth": null,
        "question": "The financial institution, TK Bank, gains arbitrage profit from the money market. They utilize a money market tool, a certificate of deposit, that has a maturity period of 300 days under the assumption that a year comprises 360 days. Given that the present value of this instrument is 93.2 and the maturity price is 100, can you determine the bond equivalent yield?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    present_value = 93.2\n    maturity_price = 100\n    days_to_maturity = 300\n    days_in_year = 360\n\n    # Do math calculation to get the answer\n    simple_interest = (maturity_price - present_value) / present_value\n    annual_yield = simple_interest * (days_in_year / days_to_maturity)\n    bond_equivalent_yield = annual_yield * 2  # Convert to bond equivalent yield\n\n    # return answer\n    return bond_equivalent_yield * 100  # Convert to percentage\n```\n\nThis Python program calculates the bond equivalent yield for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the variables based on the information provided:\n   - present_value: 93.2\n   - maturity_price: 100\n   - days_to_maturity: 300\n   - days_in_year: 360 (as per the assumption in the question)\n\n2. We calculate the simple interest rate:\n   (maturity_price - present_value) / present_value\n\n3. We annualize this rate:\n   simple_interest * (days_in_year / days_to_maturity)\n\n4. To convert to bond equivalent yield, we multiply by 2 (as bond equivalent yield is typically expressed on a semi-annual basis).\n\n5. Finally, we multiply by 100 to convert the decimal to a percentage.\n\nThe function will return the bond equivalent yield as a percentage."
        ]
    },
    {
        "tables": [
            "| Equity | Asset Allocation (%) | Asset Class Return (%) |\n|--------|----------------------|------------------------|\n| Equity A | 10.0 | 3.0 |\n| Equity B | 20.0 | 19.0 |\n| Equity C | 55.0 | -1.0 |\n| Equity D | 15.0 | 6.0 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-484",
        "python_solution": "",
        "ground_truth": null,
        "question": "The yield of a portfolio with four stocks is equivalent to:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equities = {\n        'A': {'allocation': 10.0, 'return': 3.0},\n        'B': {'allocation': 20.0, 'return': 19.0},\n        'C': {'allocation': 55.0, 'return': -1.0},\n        'D': {'allocation': 15.0, 'return': 6.0}\n    }\n\n    # Do math calculation to get the answer\n    portfolio_yield = 0\n    for equity in equities.values():\n        portfolio_yield += (equity['allocation'] / 100) * equity['return']\n\n    # return answer\n    return round(portfolio_yield, 2)\n```\n\nThis Python program calculates the yield of a portfolio with four stocks as follows:\n\n1. It defines a dictionary `equities` containing the asset allocation and return for each equity.\n\n2. It then calculates the portfolio yield by iterating through each equity, multiplying its allocation (as a decimal) by its return, and summing these products.\n\n3. Finally, it rounds the result to two decimal places and returns it.\n\nThis calculation gives us the weighted average return of the portfolio, which is equivalent to the portfolio's yield."
        ]
    },
    {
        "tables": [
            "| Trades | Execution  Price | Shares Executed |\n|--------|------------------|-----------------|\n| Trade 1 | $40.75 | 10,000 |\n| Trade 2 | $41.25 | 30,000 |\n| Trade 3 | $41.50 | 20,000 |\n| Trade 4 | $41.75 | 30,000 |\n| Total |  | 90,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-485",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the following day, Roberts advises Green to take another look at her analysis on XYZ Corp. Green's study leads her to conclude that the company's shares are underpriced. She communicates her findings to Roberts, who directs her to buy 120,000 shares at $40.00 using a limit order of $42.00 at 10 a.m. The buy-side dealer implements the order for market execution as the price hits $40.50. The exclusive fee is a commission of $0.02 per share. By market close, 90,000 shares of the order were bought, with XYZ Corp ending at $42.50. The transaction was discharged at an average cost of $41.42. Information about the completed deals is given in Exhibit 1. Based on the information provided in Exhibit 1, what is the opportunity cost of buying the 90,000 shares of XYZ Corp?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_shares = 90000\n    average_execution_price = 41.42\n    closing_price = 42.50\n    \n    # Do math calculation to get the answer\n    actual_cost = total_shares * average_execution_price\n    potential_cost = total_shares * closing_price\n    opportunity_cost = potential_cost - actual_cost\n    \n    # return answer\n    return opportunity_cost\n\n```\n\nThis Python program calculates the opportunity cost of buying the 90,000 shares of XYZ Corp based on the information provided in the question. Here's a breakdown of the calculation:\n\n1. We define the total number of shares executed (90,000), the average execution price ($41.42), and the closing price ($42.50).\n\n2. We calculate the actual cost of the shares by multiplying the total shares by the average execution price.\n\n3. We calculate the potential cost if the shares were bought at the closing price.\n\n4. The opportunity cost is the difference between the potential cost and the actual cost.\n\n5. The function returns this opportunity cost.\n\nThe opportunity cost represents the additional amount that would have been paid if the shares were purchased at the closing price instead of the average execution price. A positive opportunity cost indicates that the actual purchase was made at a lower price than the closing price, which is favorable for the buyer."
        ]
    },
    {
        "tables": [
            "| Dealer | Time   Entered | Price  | Size | Dealer | Time   Entered | Price  | Size |\n|--------|---------------|--------|------|--------|---------------|--------|------|\n| B      | 10.10 a.m.    | $17.15 | 900  | C      | 10.11 a.m.    | $17.19 | 1,200|\n| C      | 10.11 a.m.    | $17.14 | 1,500| B      | 10.10 a.m.    | $17.20 | 800  |\n| A      | 10.11 a.m.    | $17.12 | 1,100| A      | 10.12 a.m.    | $17.22 | 1,100|"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-486",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three brokers are involved in making the market for the stocks of Bright Systems. Using these rates, YNSM's trading desk carries out a market sell order for 1,100 stocks of Bright Systems. Based on Exhibit 1, what is the inside bid–ask spread for the limit order book for Bright Systems?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bids = [17.15, 17.14, 17.12]\n    asks = [17.19, 17.20, 17.22]\n    \n    # Do math calculation to get the answer\n    best_bid = max(bids)\n    best_ask = min(asks)\n    inside_spread = best_ask - best_bid\n    \n    # return answer\n    return inside_spread\n```\n\nThis Python function calculates the inside bid-ask spread for Bright Systems based on the provided limit order book data. Here's how it works:\n\n1. We define two lists: `bids` containing all bid prices, and `asks` containing all ask prices from the table.\n\n2. To find the inside bid-ask spread, we need to find the highest bid (best_bid) and the lowest ask (best_ask).\n\n3. We use the `max()` function to find the highest bid and the `min()` function to find the lowest ask.\n\n4. The inside bid-ask spread is calculated by subtracting the best bid from the best ask.\n\n5. The function returns this spread as the answer.\n\nWhen you run this function, it will return 0.04, which represents the inside bid-ask spread of $0.04 for Bright Systems' stock based on the given limit order book."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-487",
        "python_solution": "",
        "ground_truth": null,
        "question": "Enterprise Z announced a COGS of $75 million. Over the year, there was a decrease of $12 million in inventory and an increase of $8 million in accounts payable. What is the total cash given to suppliers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cogs = 75000000\n    inventory_decrease = 12000000\n    accounts_payable_increase = 8000000\n    \n    # Do math calculation to get the answer\n    cash_to_suppliers = cogs - inventory_decrease + accounts_payable_increase\n    \n    # return answer\n    return cash_to_suppliers\n```\n\nThis Python program calculates the total cash given to suppliers based on the information provided in the question. Here's how it works:\n\n1. We define the variables:\n   - `cogs`: Cost of Goods Sold, which is $75 million\n   - `inventory_decrease`: The decrease in inventory, which is $12 million\n   - `accounts_payable_increase`: The increase in accounts payable, which is $8 million\n\n2. We calculate the cash given to suppliers using the formula:\n   Cash to Suppliers = COGS - Decrease in Inventory + Increase in Accounts Payable\n\n3. The program returns the calculated value, which represents the total cash given to suppliers.\n\nWhen you run this function, it will return 71000000, which is $71 million. This is the amount of cash that Enterprise Z gave to its suppliers during the year."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-488",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the covariance of returns for Stock X and Stock Y, given the correlation of their historical returns is 0.75, and the variances for Stock X and Stock Y are 0.16 and 0.09, respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.75\n    variance_x = 0.16\n    variance_y = 0.09\n    \n    # Do math calculation to get the answer\n    std_dev_x = variance_x ** 0.5\n    std_dev_y = variance_y ** 0.5\n    covariance = correlation * std_dev_x * std_dev_y\n    \n    # return answer\n    return covariance\n```\n\nThis Python program calculates the covariance of returns for Stock X and Stock Y based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `correlation`: The correlation of historical returns (0.75)\n   - `variance_x`: The variance for Stock X (0.16)\n   - `variance_y`: The variance for Stock Y (0.09)\n\n2. We calculate the standard deviations for both stocks by taking the square root of their respective variances.\n\n3. We use the formula for covariance:\n   Covariance = Correlation * Standard Deviation of X * Standard Deviation of Y\n\n4. The calculated covariance is then returned as the answer.\n\nThis program will return the covariance of returns for Stock X and Stock Y when executed."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-489",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the worth of a preferred share if the necessary return is 10% and the yearly dividend is $5?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_return = 0.10  # 10% expressed as a decimal\n    annual_dividend = 5  # $5 annual dividend\n    \n    # Do math calculation to get the answer\n    share_value = annual_dividend / required_return\n    \n    # return answer\n    return share_value\n```\n\nThis Python program calculates the value of a preferred share using the dividend discount model for preferred stocks. Here's how it works:\n\n1. We define the required return (discount rate) as 10% (0.10 in decimal form) and the annual dividend as $5.\n\n2. The formula for valuing a preferred share is:\n   Value = Annual Dividend / Required Return\n\n3. We perform this calculation: 5 / 0.10\n\n4. The function returns the result, which is the value of the preferred share.\n\nWhen you run this function, it will return 50, meaning the preferred share is worth $50 given the specified required return and annual dividend."
        ]
    },
    {
        "tables": [
            "| Fiscal year end (USD  millions) | December 2018 |\n|---------------------------------|---------------|\n| Revenue                         | $31,218.00    |\n| Cost of goods sold              | $25,454.00    |\n| Sales, general, and administrative| $1,638.00    |\n| Depreciation and amortization   | $441.00       |\n| Operating income                | $3,685.00     |\n| Interest expense                | $103.00       |\n| Income before taxes             | $3,582.00     |\n| Provision for income taxes      | $1,121.00     |\n| Net income                      | $2,461.00     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-490",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the interest coverage ratio of the operating statement, if calculated by the more conservative interest coverage ratio method, for the corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_income = 3685\n    interest_expense = 103\n\n    # Do math calculation to get the answer\n    interest_coverage_ratio = operating_income / interest_expense\n\n    # return answer\n    return interest_coverage_ratio\n```\n\nThis Python program calculates the interest coverage ratio using the more conservative method, which uses operating income (also known as EBIT - Earnings Before Interest and Taxes) divided by interest expense.\n\nThe interest coverage ratio measures how easily a company can pay interest on its outstanding debt. A higher ratio indicates that the company is more capable of meeting its interest obligations from its operating earnings.\n\nIn this case:\n- Operating income: $3,685 million\n- Interest expense: $103 million\n\nThe program divides these two values to get the interest coverage ratio. The result will show how many times the company's operating income can cover its interest expenses."
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-491",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher is determining a historical ERP for a market based on the same data. What is the historical ERP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    long_term_market_return = 9.96\n    long_term_govt_bond_return = 3.15\n    \n    # Do math calculation to get the answer\n    historical_erp = long_term_market_return - long_term_govt_bond_return\n    \n    # return answer\n    return historical_erp\n```\n\nThis Python function calculates the historical Equity Risk Premium (ERP) based on the data provided in the table. The historical ERP is the difference between the long-term geometric average return of the market equity index and the long-term geometric average return of short-term government bonds."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-492",
        "python_solution": "",
        "ground_truth": null,
        "question": "If r stands for 4% and E(MR) equals 10%, then what would be the expected yield for a security with a beta of 1.3?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r = 0.04  # risk-free rate (4%)\n    E_MR = 0.10  # Expected Market Return (10%)\n    beta = 1.3  # beta of the security\n\n    # Do math calculation to get the answer\n    market_risk_premium = E_MR - r\n    expected_yield = r + (beta * market_risk_premium)\n\n    # return answer\n    return expected_yield\n```\n\nThis Python program calculates the expected yield for a security using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the calculation:\n\n1. We define the given variables:\n   - `r` is the risk-free rate (4% or 0.04)\n   - `E_MR` is the Expected Market Return (10% or 0.10)\n   - `beta` is the beta of the security (1.3)\n\n2. We calculate the market risk premium by subtracting the risk-free rate from the expected market return.\n\n3. We then use the CAPM formula to calculate the expected yield:\n   Expected Yield = Risk-free rate + (Beta * Market Risk Premium)\n\n4. The function returns the calculated expected yield.\n\nTo get the answer, you would call this function and it will return the expected yield as a decimal. To convert it to a percentage, you can multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-493",
        "python_solution": "",
        "ground_truth": null,
        "question": "A yearly coupon bond is valued at par value, with a coupon rate of 5%, and it will mature in 10 years. If one plans to invest for five years and the approximate modified duration of the bond is 6.872, what should the duration gap be at the point of buying?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05\n    maturity = 10\n    investment_horizon = 5\n    modified_duration = 6.872\n\n    # Do math calculation to get the answer\n    duration_gap = modified_duration - investment_horizon\n\n    # return answer\n    return duration_gap\n```\n\nThis Python program calculates the duration gap for the given scenario. Here's a breakdown of the solution:\n\n1. We define the variables based on the information provided:\n   - `coupon_rate` is 5% or 0.05\n   - `maturity` is 10 years\n   - `investment_horizon` is 5 years\n   - `modified_duration` is given as 6.872\n\n2. The duration gap is calculated as the difference between the modified duration and the investment horizon.\n\n3. The function returns the calculated duration gap.\n\nNote that while the coupon rate and maturity are provided in the question, they are not directly used in the calculation of the duration gap. However, they are included in the variables section for completeness, as they are part of the bond's characteristics and might be useful for further calculations or analysis."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-494",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an investment analyst is looking into buying a bond that has a 5.5% annual interest rate and matures in three years, and if the anticipated rate of return on the bond is 5%, what should be the bond's price per 100 of par value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.055  # 5.5% annual interest rate\n    years_to_maturity = 3\n    required_yield = 0.05  # 5% anticipated rate of return\n    \n    # Do math calculation to get the answer\n    coupon_payment = par_value * coupon_rate\n    \n    # Calculate present value of coupon payments\n    pv_coupons = 0\n    for t in range(1, years_to_maturity + 1):\n        pv_coupons += coupon_payment / (1 + required_yield) ** t\n    \n    # Calculate present value of par value at maturity\n    pv_par = par_value / (1 + required_yield) ** years_to_maturity\n    \n    # Sum up the present values to get the bond price\n    bond_price = pv_coupons + pv_par\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a bond given the following information:\n- Par value: $100\n- Coupon rate: 5.5% annually\n- Years to maturity: 3\n- Required yield (anticipated rate of return): 5%\n\nThe program does the following:\n1. Calculates the annual coupon payment.\n2. Computes the present value of all future coupon payments.\n3. Calculates the present value of the par value to be received at maturity.\n4. Sums up these present values to get the bond price.\n5. Rounds the result to two decimal places and returns it.\n\nThe returned value will be the bond's price per 100 of par value."
        ]
    },
    {
        "tables": [
            "|                                         | Emillions   |\n|-----------------------------------------|-------------|\n| Revenues for the year                   | 12,500      |\n| Total expenses for the year             | 10,000      |\n| Unrealized gains from available-for-sale securities | 1,475       |\n| Loss on foreign currency translation adjustments on a foreign subsidiary | 325         |\n| Dividends paid                          | 500         |"
        ],
        "topic": "Accounting",
        "question_id": "test-495",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the total comprehensive income (in millions) of the firm as per the data available from the firm's financial documents?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenues = 12500\n    expenses = 10000\n    unrealized_gains = 1475\n    foreign_currency_loss = 325\n    \n    # Do math calculation to get the answer\n    net_income = revenues - expenses\n    other_comprehensive_income = unrealized_gains - foreign_currency_loss\n    total_comprehensive_income = net_income + other_comprehensive_income\n    \n    # return answer\n    return total_comprehensive_income\n```\n\nThis Python program calculates the total comprehensive income based on the given financial data. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values from the table.\n2. We calculate the net income by subtracting total expenses from revenues.\n3. We calculate other comprehensive income by subtracting the foreign currency translation loss from the unrealized gains.\n4. Finally, we calculate the total comprehensive income by adding net income and other comprehensive income.\n\nThe function returns the total comprehensive income in millions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-496",
        "python_solution": "",
        "ground_truth": null,
        "question": "John just got $30 million. His blueprint is to put this money at a risk-free rate of 3% and subsequently switch them into euros after six months. To safeguard against the currency risk, John opts to buy forward contracts. The rate for six-month forward is 1.10 USD/EUR, with the spot rate currently at 1.13 USD/EUR. The day-count convention being used is 30/360. If John utilizes a six-month forward contract as his risk hedge, what will his calculated annualized return in euros be?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment_usd = 30000000\n    risk_free_rate = 0.03\n    investment_period = 0.5  # 6 months = 0.5 years\n    forward_rate = 1.10  # USD/EUR\n    spot_rate = 1.13  # USD/EUR\n\n    # Do math calculation to get the answer\n    # Calculate the USD amount after 6 months\n    usd_after_6_months = initial_investment_usd * (1 + risk_free_rate * investment_period)\n    \n    # Convert USD to EUR using the forward rate\n    eur_after_6_months = usd_after_6_months / forward_rate\n    \n    # Calculate the initial amount in EUR\n    initial_investment_eur = initial_investment_usd / spot_rate\n    \n    # Calculate the return in EUR\n    return_eur = (eur_after_6_months - initial_investment_eur) / initial_investment_eur\n    \n    # Annualize the return (multiply by 2 since it's a 6-month period)\n    annualized_return_eur = return_eur * 2\n\n    # Convert to percentage\n    annualized_return_eur_percentage = annualized_return_eur * 100\n\n    # return answer\n    return round(annualized_return_eur_percentage, 2)\n```\n\nThis program calculates the annualized return in euros based on the given information. It first calculates the USD amount after 6 months, then converts it to EUR using the forward rate. It also calculates the initial investment in EUR using the spot rate. The return is then calculated and annualized. The final result is rounded to two decimal places and returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-497",
        "python_solution": "",
        "ground_truth": null,
        "question": "A supervisor is interested in implementing a collar strategy. The existing price of shares is $20, a put option with a strike price of $15 is sold at $2.0, and a call option with a strike price of $30 is going for $2.0. What is the profit of this strategy if the price of the base share at the end is $35?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_share_price = 20\n    put_strike_price = 15\n    put_premium = 2.0\n    call_strike_price = 30\n    call_premium = 2.0\n    final_share_price = 35\n\n    # Do math calculation to get the answer\n    premium_received = put_premium + call_premium\n    \n    if final_share_price > call_strike_price:\n        profit = (call_strike_price - current_share_price) + premium_received\n    elif final_share_price < put_strike_price:\n        profit = (current_share_price - put_strike_price) + premium_received\n    else:\n        profit = (final_share_price - current_share_price) + premium_received\n\n    # return answer\n    return profit\n```\n\nThis Python program calculates the profit of the collar strategy based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the total premium received from selling the put and call options.\n3. We then check the final share price against the strike prices:\n   - If the final price is above the call strike price (which it is in this case), the profit is the difference between the call strike price and the current share price, plus the premium received.\n   - If the final price were below the put strike price, the profit would be the difference between the current share price and the put strike price, plus the premium received.\n   - If the final price were between the two strike prices, the profit would be the difference between the final share price and the current share price, plus the premium received.\n4. Finally, we return the calculated profit.\n\nIn this case, since the final share price ($35) is above the call strike price ($30), the profit will be:\n(30 - 20) + (2.0 + 2.0) = 10 + 4 = $14\n\nThe function will return 14, representing a profit of $14 per share for this collar strategy."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-498",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price of a Treasury bond quoted at 97-19+ as a percentage of par?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    full_points = 97\n    thirty_seconds = 19\n    plus = 0.5  # The '+' represents half of a thirty-second\n\n    # Do math calculation to get the answer\n    points = full_points + (thirty_seconds / 32) + (plus / 32)\n    percentage_of_par = points\n\n    # return answer\n    return percentage_of_par\n```\n\nThis Python program calculates the price of a Treasury bond quoted at 97-19+ as a percentage of par. Here's how it works:\n\n1. We define the variables:\n   - `full_points` is 97 (the whole number part of the quote)\n   - `thirty_seconds` is 19 (the fractional part of the quote)\n   - `plus` is 0.5 because the '+' represents half of a thirty-second\n\n2. We calculate the total points:\n   - We add the full points\n   - We add the thirty-seconds divided by 32 (because there are 32 thirty-seconds in a point)\n   - We add the 'plus' (0.5) divided by 32\n\n3. The result is the percentage of par, so we can directly return it.\n\nWhen you run this function, it will return approximately 97.609375, which represents the price as 97.609375% of par value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-499",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher predicts that 20% of high-risk bonds will become insolvent. If he uses an insolvency prediction model, he discovers that 70% of the bonds will be given a \"good\" rating, suggesting they are less likely to become insolvent. Of the bonds that became insolvent, only 50% had a \"good\" rating. Use Bayes' theorem to determine the probability of insolvency given a \"good\" rating. (Hint, let P(A) be the probability of insolvency, P(B) be the probability of a \"good\" rating, P(B | A) be the likelihood of a \"good\" rating given insolvency, and P(A | B) be the likelihood of insolvency given a \"good\" rating.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # Probability of insolvency\n    P_B = 0.70  # Probability of \"good\" rating\n    P_B_given_A = 0.50  # Probability of \"good\" rating given insolvency\n    \n    # Do math calculation to get the answer\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n    \n    # return answer\n    return P_A_given_B\n```\n\nThis Python program uses Bayes' theorem to calculate the probability of insolvency given a \"good\" rating. Here's a breakdown of the variables and calculation:\n\n1. P_A: Probability of insolvency (20% or 0.20)\n2. P_B: Probability of a \"good\" rating (70% or 0.70)\n3. P_B_given_A: Probability of a \"good\" rating given insolvency (50% or 0.50)\n\nThe Bayes' theorem formula used is:\nP(A|B) = (P(B|A) * P(A)) / P(B)\n\nWhere P(A|B) is the probability of insolvency given a \"good\" rating, which is what we're solving for.\n\nThe program calculates this probability and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-500",
        "python_solution": "",
        "ground_truth": null,
        "question": "If f(0,1)=0.75%, f(1,1)=0.98%, f(2,1)=1.75%, f(2,2)=2.21%, what is the worth of a three-year bond from XYZ Corp. that pays a 6% coupon on a yearly basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    f_0_1 = 0.0075  # f(0,1) = 0.75%\n    f_1_1 = 0.0098  # f(1,1) = 0.98%\n    f_2_1 = 0.0175  # f(2,1) = 1.75%\n    f_2_2 = 0.0221  # f(2,2) = 2.21%\n    face_value = 100  # Assuming a face value of $100\n    coupon_rate = 0.06  # 6% yearly coupon\n    \n    # Do math calculation to get the answer\n    # Calculate discount factors\n    df1 = 1 / (1 + f_0_1)\n    df2 = 1 / (1 + f_0_1) / (1 + f_1_1)\n    df3 = 1 / (1 + f_0_1) / (1 + f_1_1) / (1 + f_2_2)\n    \n    # Calculate present value of coupons and face value\n    coupon = face_value * coupon_rate\n    pv_coupon1 = coupon * df1\n    pv_coupon2 = coupon * df2\n    pv_coupon3 = (coupon + face_value) * df3\n    \n    # Sum up to get bond price\n    bond_price = pv_coupon1 + pv_coupon2 + pv_coupon3\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the worth of a three-year bond from XYZ Corp. that pays a 6% coupon on a yearly basis, given the forward rates provided in the question. Here's a breakdown of the solution:\n\n1. We define the given forward rates as variables, converting percentages to decimals.\n2. We assume a face value of $100 for the bond (this is a common convention, but the actual face value doesn't affect"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-501",
        "python_solution": "",
        "ground_truth": null,
        "question": "By the conclusion of 2016, Corporation A had an accounts receivable totaling $50 million. By the conclusion of 2017, Corporation A had generated revenues of $60 million, with the year's accounts receivable amounting to $30. What should be the sum of cash collected from the clientele?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    accounts_receivable_2016 = 50000000\n    accounts_receivable_2017 = 30\n    revenue_2017 = 60000000\n    \n    # Do math calculation to get the answer\n    cash_collected = revenue_2017 + accounts_receivable_2016 - accounts_receivable_2017\n    \n    # return answer\n    return cash_collected\n```\n\nThis Python program calculates the cash collected from clientele based on the given information:\n\n1. We define the variables:\n   - `accounts_receivable_2016`: The accounts receivable at the end of 2016 ($50 million)\n   - `accounts_receivable_2017`: The accounts receivable at the end of 2017 ($30)\n   - `revenue_2017`: The revenue generated in 2017 ($60 million)\n\n2. To calculate the cash collected, we use the formula:\n   Cash Collected = Revenue + Beginning Accounts Receivable - Ending Accounts Receivable\n\n3. We apply this formula using our variables:\n   `cash_collected = revenue_2017 + accounts_receivable_2016 - accounts_receivable_2017`\n\n4. Finally, we return the calculated value of `cash_collected`.\n\nThis program will return the sum of cash collected from the clientele, which should be $109,999,970."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-502",
        "python_solution": "",
        "ground_truth": null,
        "question": "Two years earlier, a corporation released $20 million in long-term bonds at face value with a 9 percent coupon rate. The firm plans to release another $20 million in bonds and anticipates that the new issue will be priced at face value with a 7 percent coupon rate. The firm has no other outstanding liabilities and is taxed at a rate of 40 percent. What is the proper after-tax debt cost to calculate the firm's weighted average cost of capital?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    old_bond_amount = 20000000\n    old_coupon_rate = 0.09\n    new_bond_amount = 20000000\n    new_coupon_rate = 0.07\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    total_bond_amount = old_bond_amount + new_bond_amount\n    weighted_coupon_rate = (old_bond_amount * old_coupon_rate + new_bond_amount * new_coupon_rate) / total_bond_amount\n    after_tax_debt_cost = weighted_coupon_rate * (1 - tax_rate)\n\n    # return answer\n    return after_tax_debt_cost\n```\n\nThis Python program calculates the after-tax debt cost for the firm's weighted average cost of capital. Here's how it works:\n\n1. We define the variables:\n   - The amount and coupon rate for both the old and new bond issues\n   - The tax rate\n\n2. We calculate the weighted average coupon rate by:\n   - Multiplying each bond amount by its respective coupon rate\n   - Adding these products together\n   - Dividing by the total bond amount\n\n3. We then calculate the after-tax debt cost by multiplying the weighted coupon rate by (1 - tax rate)\n\n4. Finally, we return this after-tax debt cost\n\nThis solution takes into account both bond issues and the tax effects, providing the correct after-tax debt cost for the firm's weighted average cost of capital calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-503",
        "python_solution": "",
        "ground_truth": null,
        "question": "Two years prior, Johnson Industries bought equipment for $800,000. By the close of last year, the equipment was worth $720,000. If Johnson Industries uses the revaluation model, how much, if any, is recorded in Johnson's net income this year if the equipment's fair value has risen to $810,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 800000\n    previous_value = 720000\n    current_fair_value = 810000\n    \n    # Do math calculation to get the answer\n    previous_revaluation = previous_value - original_cost\n    current_revaluation = current_fair_value - original_cost\n    change_in_revaluation = current_revaluation - previous_revaluation\n    \n    # Under the revaluation model, increases in value are recorded in other comprehensive income,\n    # not in net income, unless they are reversing a previous decrease that was recorded in net income.\n    # The amount recorded in net income is limited to the amount of the previous decrease.\n    \n    if change_in_revaluation > 0:\n        net_income_impact = min(change_in_revaluation, -previous_revaluation)\n    else:\n        net_income_impact = 0\n    \n    # return answer\n    return net_income_impact\n```\n\nThis Python program calculates the impact on net income when using the revaluation model for the equipment. Here's how it works:\n\n1. We define the original cost, the previous value (from last year), and the current fair value of the equipment.\n\n2. We calculate the previous revaluation (which was negative) and the current revaluation.\n\n3. We then calculate the change in revaluation.\n\n4. Under the revaluation model, increases in value are generally recorded in other comprehensive income, not in net income. However, if the increase is reversing a previous decrease that was recorded in net income, then the reversal (up to the amount of the previous decrease) is recorded in net income.\n\n5. Therefore, if there's an increase in value (positive change in revaluation), we record in net income the smaller of:\n   a) The change in revaluation\n   b) The negative of the previous revaluation (i.e., reversing the previous decrease)\n\n6. If there's no increase in value, nothing is recorded in net income.\n\n7. The function returns the amount to be recorded in net income.\n\nThis program will correctly calculate that $80,000 should be recorded in net income, as"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-504",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sagittarius Portfolio of Portfolios invests GBP 100 million in each of Gamma Hedge Fund and XYZ Hedge Fund. Sagittarius POP has a \"1 and 10\" fee structure. Management fees and incentive fees are calculated separately at the end of each year. After one year, net of their respective management and incentive fees, the investment in Gamma is valued at GBP80 million and the investment in XYZ is valued at GBP140 million. What is the yearly return to a shareholder in Sagittarius, after deducting fees at the portfolio of portfolios level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100000000 * 2  # GBP 100 million in each fund\n    gamma_value = 80000000\n    xyz_value = 140000000\n    management_fee_rate = 0.01  # 1%\n    incentive_fee_rate = 0.10  # 10%\n\n    # Do math calculation to get the answer\n    total_value = gamma_value + xyz_value\n    gross_profit = total_value - initial_investment\n    \n    # Calculate management fee\n    management_fee = initial_investment * management_fee_rate\n    \n    # Calculate incentive fee (only on positive performance)\n    incentive_fee = max(0, gross_profit * incentive_fee_rate)\n    \n    # Calculate net profit after fees\n    net_profit = gross_profit - management_fee - incentive_fee\n    \n    # Calculate yearly return as a percentage\n    yearly_return = (net_profit / initial_investment) * 100\n\n    # return answer\n    return round(yearly_return, 2)\n```\n\nThis Python program calculates the yearly return to a shareholder in Sagittarius Portfolio of Portfolios after deducting fees at the portfolio of portfolios level. Here's a breakdown of the calculation:\n\n1. We define the initial investment, final values of both funds, and the fee structure.\n2. We calculate the total value and gross profit.\n3. The management fee is calculated as 1% of the initial investment.\n4. The incentive fee is calculated as 10% of the gross profit, but only if it's positive.\n5. We then calculate the net profit after deducting both fees.\n6. Finally, we calculate the yearly return as a percentage of the initial investment.\n\nThe function returns the yearly return rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "|      | Beginning of Period Price(€) | End of Period Price(毛) | Total Dividends(€) |\n|------|-------------------------------|-------------------------|---------------------|\n| A    | 8.00                          | 10.00                   | 0.50                |\n| B    | 22.00                         | 19.00                   | 1.20                |\n| C    | 25.00                         | 25.00                   | 1.50                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-505",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial analyst named Ahern from a certain investment firm recently compiled data for an equal-weighted index which includes assets A, B, and C: What is the combined return of this index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    assets = ['A', 'B', 'C']\n    start_prices = [8.00, 22.00, 25.00]\n    end_prices = [10.00, 19.00, 25.00]\n    dividends = [0.50, 1.20, 1.50]\n    \n    # Do math calculation to get the answer\n    total_return = 0\n    for i in range(len(assets)):\n        asset_return = (end_prices[i] - start_prices[i] + dividends[i]) / start_prices[i]\n        total_return += asset_return\n    \n    # Calculate average return for equal-weighted index\n    index_return = total_return / len(assets)\n    \n    # Convert to percentage and round to 2 decimal places\n    index_return_percentage = round(index_return * 100, 2)\n    \n    # return answer\n    return index_return_percentage\n```\n\nThis Python program calculates the combined return of the equal-weighted index including assets A, B, and C. Here's a breakdown of what the program does:\n\n1. It defines lists for the starting prices, ending prices, and dividends for each asset.\n\n2. It calculates the return for each asset using the formula: (End Price - Start Price + Dividends) / Start Price\n\n3. It sums up the returns of all assets.\n\n4. Since it's an equal-weighted index, it divides the total return by the number of assets to get the average return.\n\n5. The result is converted to a percentage and rounded to two decimal places for readability.\n\n6. Finally, it returns this percentage as the answer.\n\nThe returned value represents the combined return of the equal-weighted index in percentage form."
        ]
    },
    {
        "tables": [
            "| Financial Statement for Company M | $ millions |\n| --- | --- |\n| Net Income | 212 |\n| Depreciation expense | 88 |\n| Increase in inventories | 50 |\n| Increase in accounts payable | 25 |\n| Purchase of fixed assets | 100 |\n| Increase in notes payable | 60 |\n| Decrease in long-term debt | 50 |\n| Interest expense | 100 |\n\n| Additional information | |\n| --- | --- |\n| Tax rate | 30% |\n| Beta | 0.8 |\n| Before-tax cost of debt | 5% |\n| D/A ratio | 40% |\n| Risk-free rate | 2.4% |\n| Market risk premium | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-506",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is getting ready to compute the intrinsic value of Company N's equity utilizing the FCFF model with an infinite growth rate of 5%. The pertinent information can be found in the table below. What's the value of Company N's equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 212\n    depreciation = 88\n    increase_inventories = 50\n    increase_accounts_payable = 25\n    purchase_fixed_assets = 100\n    tax_rate = 0.30\n    beta = 0.8\n    cost_of_debt = 0.05\n    debt_to_assets = 0.40\n    risk_free_rate = 0.024\n    market_risk_premium = 0.07\n    growth_rate = 0.05\n    \n    # Do math calculation to get the answer\n    \n    # Calculate FCFF\n    fcff = net_income + depreciation * (1 - tax_rate) - increase_inventories + increase_accounts_payable - purchase_fixed_assets\n    \n    # Calculate WACC\n    equity_to_assets = 1 - debt_to_assets\n    cost_of_equity = risk_free_rate + beta * market_risk_premium\n    wacc = (equity_to_assets * cost_of_equity) + (debt_to_assets * cost_of_debt * (1 - tax_rate))\n    \n    # Calculate enterprise value\n    enterprise_value = fcff * (1 + growth_rate) / (wacc - growth_rate)\n    \n    # Calculate equity value (assuming no debt)\n    equity_value = enterprise_value\n    \n    # return answer\n    return round(equity_value, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-507",
        "python_solution": "",
        "ground_truth": null,
        "question": "By the conclusion of 2016, XYZ Corporation possessed assets worth $10 million and shareholders' equity of $3 million. What are the liabilities of XYZ Corporation?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 10000000  # $10 million\n    shareholders_equity = 3000000  # $3 million\n    \n    # Do math calculation to get the answer\n    liabilities = total_assets - shareholders_equity\n    \n    # return answer\n    return liabilities\n```\n\nThis program calculates the liabilities of XYZ Corporation using the accounting equation: Assets = Liabilities + Shareholders' Equity. \n\nBy rearranging this equation, we get: Liabilities = Assets - Shareholders' Equity.\n\nThe program defines the given values for total assets and shareholders' equity, then subtracts the shareholders' equity from the total assets to determine the liabilities. The result (which would be $7 million) is then returned as the answer."
        ]
    },
    {
        "tables": [
            "| Issuer             | Coupon Rate | Price   | Bond Description        |\n|--------------------|-------------|---------|-------------------------|\n| Ayrault, Inc. (Al) | 5.25%       | 100.200 | Callable at par in one  |\n|                    |             |         | year and two years from |\n|                    |             |         | today                   |",
            "| Exhibit 2. Binomial Interest Rate Trees | |\n| --- | --- |\n| Panel A Interest Rates Shift Down by 30 bps | | | | | |\n| Year 0, Year 1, Year 2 | | | | | |\n| | |5.1968% | |7.0037% | |\n| 3.7000% | | | |5.7342% | |\n| | |4.2548% | | | |\n| | | | |4.6947% | |\n\n| Panel B Interest Rates Shift Up by 30 bps | | | | | |\n| Year 0, Year 1, Year 2 | | | | | |\n| | |5.8605% | |7.7432% | |\n| 4.3000% | | | |6.3396% | |\n| | |4.7982% | | | |\n| | | | |5.1904% | |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-508",
        "python_solution": "",
        "ground_truth": null,
        "question": "Keeping in mind that each bond has three years left in its maturity, makes annual coupon payments, and has a BBB credit rating, when Jones constructs a binomial interest rate tree based on a 10% interest rate volatility assumption, with the present one-year rate being 1%, Panel A of Exhibit 2 gives an interest rate tree under the assumption that the benchmark yield curve drops by 30 bps. Panel B offers an interest rate tree presuming an increase in the benchmark yield curve by 30 bps. Jones concludes that the SM bond is currently being traded at an option-adjusted spread (OAS) of 13.95 bps in relation to the benchmark yield curve. Based on the data present in Exhibits 1 and 2, can you determine the effective duration for the SM bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.0525\n    current_price = 100.200\n    oas = 0.1395 / 100  # Convert OAS from bps to decimal\n    \n    # Calculate prices under up and down scenarios\n    def calculate_bond_price(rates):\n        price = 0\n        for i in range(1, 4):\n            coupon = face_value * coupon_rate\n            if i == 3:\n                payment = face_value + coupon\n            else:\n                payment = coupon\n            discount_rate = rates[i-1] / 100 + oas\n            price += payment / (1 + discount_rate) ** i\n        return price\n    \n    down_rates = [4.2548, 5.7342, 7.0037]\n    up_rates = [4.7982, 6.3396, 7.7432]\n    \n    price_down = calculate_bond_price(down_rates)\n    price_up = calculate_bond_price(up_rates)\n    \n    # Calculate effective duration\n    delta_yield = 0.0060  # 60 bps difference between up and down scenarios\n    effective_duration = (price_down - price_up) / (current_price * delta_yield)\n    \n    # Return answer\n    return round(effective_duration, 4)\n```\n\nThis Python program calculates the effective duration of the SM bond based on the given information. Here's a breakdown of the solution:\n\n1. We define the known variables: face value, coupon rate, current price, and option-adjusted spread (OAS).\n\n2. We create a helper function `calculate_bond_price` that calculates the bond price given a set of interest rates for the next three years.\n\n3. We use the interest rates from Panel A (down scenario) and Panel B (up scenario) of Exhibit 2 to calculate the bond prices in both scenarios.\n\n4. We then calculate the effective duration using the formula:\n   Effective Duration = (Price_down - Price_up) / (Current_Price * Change_"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-509",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the year 2009, PlayJoy Ltd, a company that started operating in October of that year, bought 10,000 units of a toy costing ₤10 each in October. The toy had a good sale in October. Expecting high sales in December, PlayJoy acquired another 5,000 units at ₤11 each in November. During 2009, PlayJoy managed to sell 12,000 units each at a price of ₤15. What would be the cost of goods sold by PlayJoy under the weighted average cost method?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    oct_units = 10000\n    oct_cost_per_unit = 10\n    nov_units = 5000\n    nov_cost_per_unit = 11\n    total_units_purchased = oct_units + nov_units\n    total_units_sold = 12000\n\n    # Do math calculation to get the answer\n    total_cost = (oct_units * oct_cost_per_unit) + (nov_units * nov_cost_per_unit)\n    weighted_avg_cost_per_unit = total_cost / total_units_purchased\n    cost_of_goods_sold = total_units_sold * weighted_avg_cost_per_unit\n\n    # return answer\n    return round(cost_of_goods_sold, 2)\n```\n\nThis program calculates the cost of goods sold using the weighted average cost method. Here's a breakdown of the calculation:\n\n1. We define the variables for the number of units and cost per unit for October and November purchases.\n2. We calculate the total units purchased and the total cost of all purchases.\n3. We calculate the weighted average cost per unit by dividing the total cost by the total units purchased.\n4. We then multiply the number of units sold by the weighted average cost per unit to get the cost of goods sold.\n5. Finally, we round the result to 2 decimal places and return it.\n\nThe program will return the cost of goods sold under the weighted average cost method for PlayJoy Ltd in 2009."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-510",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the annual amortization expense for the third year if firm N employs the double-declining balance method to amortize an $80,000 patent with a useful life of 4 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 80000\n    useful_life = 4\n    year = 3\n    \n    # Do math calculation to get the answer\n    straight_line_rate = 1 / useful_life\n    double_declining_rate = 2 * straight_line_rate\n    \n    book_value_year1 = initial_cost * (1 - double_declining_rate)\n    book_value_year2 = book_value_year1 * (1 - double_declining_rate)\n    \n    amortization_year3 = book_value_year2 * double_declining_rate\n    \n    # return answer\n    return amortization_year3\n```\n\nThis Python program calculates the annual amortization expense for the third year using the double-declining balance method for a patent with an initial cost of $80,000 and a useful life of 4 years. Here's how it works:\n\n1. We define the initial variables: initial cost, useful life, and the year we're calculating for (3rd year).\n\n2. We calculate the straight-line rate (1/4 = 0.25) and double it to get the double-declining rate (0.5 or 50%).\n\n3. We calculate the book value at the end of year 1 and year 2 by applying the double-declining rate.\n\n4. For the third year, we multiply the book value at the end of year 2 by the double-declining rate to get the amortization expense.\n\n5. Finally, we return this value as the answer.\n\nThis method ensures that we're calculating the correct amortization for the third year specifically, taking into account the reduced book value from the previous two years of accelerated amortization."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-511",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood that a portfolio with a projected return of 7% and a standard deviation of 13%, won't meet the minimum annual return target of 4%, set by an investor?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    projected_return = 0.07  # 7%\n    standard_deviation = 0.13  # 13%\n    minimum_return = 0.04  # 4%\n    \n    # Do math calculation to get the answer\n    from scipy import stats\n    \n    # Calculate z-score\n    z_score = (minimum_return - projected_return) / standard_deviation\n    \n    # Calculate probability using cumulative distribution function (CDF)\n    probability = stats.norm.cdf(z_score)\n    \n    # Convert to percentage\n    likelihood = probability * 100\n    \n    # return answer\n    return likelihood\n```\n\nThis Python program calculates the likelihood that the portfolio won't meet the minimum annual return target using the following steps:\n\n1. We define the given variables: projected return (7%), standard deviation (13%), and minimum return target (4%).\n\n2. We use the scipy.stats module to perform the statistical calculation.\n\n3. We calculate the z-score, which measures how many standard deviations the minimum return is from the projected return.\n\n4. We use the cumulative distribution function (CDF) of the normal distribution to calculate the probability that the return will be less than or equal to the minimum return.\n\n5. We convert the probability to a percentage to get the likelihood.\n\n6. Finally, we return the calculated likelihood.\n\nNote: This calculation assumes that the returns are normally distributed, which is a common assumption in finance for simplifying calculations. In reality, returns might not perfectly follow a normal distribution."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|---------------------------|--------------------------------|\n| 1        | 25                        | 30                             |\n| 2        | 20                        | 30                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-512",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio intends to build a portfolio with the following two securities. If the portfolio's return is 21.5%, what is the weighting in Security 1?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    return_security1 = 25\n    return_security2 = 20\n    portfolio_return = 21.5\n\n    # Do math calculation to get the answer\n    # Let x be the weight of Security 1\n    # Portfolio return = x * return_security1 + (1-x) * return_security2\n    # 21.5 = x * 25 + (1-x) * 20\n    # 21.5 = 25x + 20 - 20x\n    # 1.5 = 5x\n    weight_security1 = 1.5 / 5\n\n    # return answer\n    return weight_security1\n```\n\nThis Python program calculates the weighting of Security 1 in the portfolio based on the given information. Here's how it works:\n\n1. We define the variables for the expected annual returns of both securities and the desired portfolio return.\n\n2. We use the portfolio return formula to set up an equation:\n   Portfolio return = (Weight of Security 1 * Return of Security 1) + (Weight of Security 2 * Return of Security 2)\n   \n   Since the weights must sum to 1, we can express the weight of Security 2 as (1 - Weight of Security 1).\n\n3. We solve this equation for the weight of Security 1:\n   21.5 = x * 25 + (1-x) * 20\n   21.5 = 25x + 20 - 20x\n   1.5 = 5x\n   x = 1.5 / 5 = 0.3\n\n4. The program returns this value (0.3 or 30%) as the weight of Security 1 in the portfolio.\n\nThis solution assumes that only these two securities are in the portfolio and that short selling is not involved (i.e., weights are between 0 and 1)."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-513",
        "python_solution": "",
        "ground_truth": null,
        "question": "XY Corporation has established a defined benefit pension plan with $150m in assets and $135m in commitments. It is predicted that: The expected annual income of the pension plan is 7.5percent, with a volatility of 10percent. The liabilities are expected to increase yearly at a rate of 5 percent and have a variation of 4.5 percent. The correlation coefficient between income from assets and liability growth is 0.7. Determine the 95% risk of surplus of the pension.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    assets = 150000000\n    liabilities = 135000000\n    asset_return_rate = 0.075\n    asset_volatility = 0.10\n    liability_growth_rate = 0.05\n    liability_volatility = 0.045\n    correlation = 0.7\n    z_score = 1.645  # 95% confidence level\n\n    # Do math calculation to get the answer\n    surplus = assets - liabilities\n    expected_surplus_growth = (assets * asset_return_rate) - (liabilities * liability_growth_rate)\n    \n    asset_variance = (assets * asset_volatility) ** 2\n    liability_variance = (liabilities * liability_volatility) ** 2\n    covariance = correlation * asset_volatility * liability_volatility * assets * liabilities\n    \n    surplus_volatility = (asset_variance + liability_variance - 2 * covariance) ** 0.5\n    \n    risk_of_surplus = surplus - (z_score * surplus_volatility)\n\n    # return answer\n    return risk_of_surplus\n```\n\nThis Python program calculates the 95% risk of surplus for the XY Corporation's defined benefit pension plan. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the current surplus (assets - liabilities).\n3. We calculate the expected surplus growth.\n4. We calculate the variance of assets and liabilities.\n5. We calculate the covariance between assets and liabilities.\n6. We calculate the volatility of the surplus using the variances and covariance.\n7. Finally, we calculate the 95% risk of surplus using the formula: current surplus - (z-score * surplus volatility).\n\nThe z-score for a 95% confidence level is approximately 1.645. The program returns the calculated risk of surplus, which represents the worst-case scenario for the surplus at a 95% confidence level."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-514",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is thinking about incorporating ABC Corp. into his investment portfolio. The latest dividend payment by the company is 1.45 per share. He observes that ABC Corp.'s dividends have risen at a standard pace of 6 percent. John concluded that the required return on equity for ABC Corp. is 12%. Can you estimate the value of ABC Corp.'s stock based on this information?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 1.45\n    dividend_growth_rate = 0.06\n    required_return = 0.12\n\n    # Do math calculation to get the answer\n    # Using the Gordon Growth Model: P = D1 / (r - g)\n    # Where P is the stock price, D1 is next year's dividend,\n    # r is the required return, and g is the dividend growth rate\n    next_year_dividend = current_dividend * (1 + dividend_growth_rate)\n    stock_value = next_year_dividend / (required_return - dividend_growth_rate)\n\n    # return answer\n    return round(stock_value, 2)\n```\n\nThis Python program calculates the value of ABC Corp.'s stock using the Gordon Growth Model, which is appropriate for valuing stocks with a constant dividend growth rate. The program does the following:\n\n1. Defines the given variables:\n   - `current_dividend`: The latest dividend payment (1.45 per share)\n   - `dividend_growth_rate`: The standard pace of dividend growth (6% or 0.06)\n   - `required_return`: John's required return on equity (12% or 0.12)\n\n2. Calculates the next year's dividend by growing the current dividend by the growth rate.\n\n3. Applies the Gordon Growth Model formula to calculate the stock value:\n   Stock Value = Next Year's Dividend / (Required Return - Dividend Growth Rate)\n\n4. Rounds the result to two decimal places for a more realistic stock price representation.\n\n5. Returns the calculated stock value.\n\nThis program will estimate the value of ABC Corp.'s stock based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-515",
        "python_solution": "",
        "ground_truth": null,
        "question": "A banker's acceptance with a term of 150 days has a quoted discount rate of 5.62% based on a 360-day year. What is the bond equivalent yield?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    days = 150\n    discount_rate = 0.0562\n    days_in_year = 360\n    \n    # Do math calculation to get the answer\n    face_value = 100  # Assume a face value of $100 for simplicity\n    purchase_price = face_value * (1 - discount_rate * (days / days_in_year))\n    \n    interest = face_value - purchase_price\n    bond_equivalent_yield = (interest / purchase_price) * (365 / days)\n    \n    # Convert to percentage and round to 4 decimal places\n    bond_equivalent_yield = round(bond_equivalent_yield * 100, 4)\n    \n    # return answer\n    return bond_equivalent_yield\n```\n\nThis Python program calculates the bond equivalent yield for a banker's acceptance with the given parameters. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information: 150 days term, 5.62% discount rate, and a 360-day year.\n\n2. We assume a face value of $100 for simplicity (the actual face value doesn't affect the yield calculation).\n\n3. We calculate the purchase price using the discount rate formula:\n   Purchase Price = Face Value * (1 - Discount Rate * (Days / Days in Year))\n\n4. We calculate the interest, which is the difference between the face value and the purchase price.\n\n5. We then calculate the bond equivalent yield using the formula:\n   Bond Equivalent Yield = (Interest / Purchase Price) * (365 / Days)\n\n6. Finally, we convert the yield to a percentage and round it to 4 decimal places for precision.\n\nThe program will return the bond equivalent yield as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-516",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine the following 6x9 FRA, where the purchaser of the FRA consents to a contract rate of 6.35% on a notional value of 10 million USD. Assume a 30/360 day count basis. What would be the settlement sum for the vendor if the settlement rate is 6.85%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    contract_rate = 0.0635\n    settlement_rate = 0.0685\n    notional_value = 10000000\n    days = 180  # 6 months in 30/360 day count basis\n    \n    # Do math calculation to get the answer\n    rate_difference = settlement_rate - contract_rate\n    days_fraction = days / 360\n    settlement_amount = (rate_difference * days_fraction * notional_value) / (1 + settlement_rate * days_fraction)\n    \n    # return answer\n    return round(settlement_amount, 2)\n```\n\nThis Python program calculates the settlement amount for the vendor of a 6x9 Forward Rate Agreement (FRA) based on the given information:\n\n1. We define the variables:\n   - `contract_rate`: The agreed contract rate of 6.35% (0.0635)\n   - `settlement_rate`: The settlement rate of 6.85% (0.0685)\n   - `notional_value`: The notional value of 10 million USD\n   - `days`: 180 days (6 months in 30/360 day count basis)\n\n2. We calculate the settlement amount using the FRA pricing formula:\n   - First, we calculate the rate difference\n   - Then, we calculate the days fraction (180/360 = 0.5)\n   - Finally, we apply the formula: (rate_difference * days_fraction * notional_value) / (1 + settlement_rate * days_fraction)\n\n3. We round the result to 2 decimal places (cents) and return it.\n\nThis program will return the settlement amount in USD that the vendor of the FRA will receive."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-517",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Orion Enterprises recently released deferred coupon bonds of $100 par value that will not make any coupon payments for the following four years, and will then offer regular yearly coupon payments at an 8% rate until the end of their 10-year maturity period, and these bonds are currently valued at $87.00, what is the yield to maturity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    current_price = 87\n    maturity = 10\n    coupon_rate = 0.08\n    deferred_years = 4\n\n    # Do math calculation to get the answer\n    from scipy import optimize\n\n    def bond_price(ytm):\n        price = 0\n        for t in range(deferred_years + 1, maturity + 1):\n            price += coupon_rate * par_value / (1 + ytm) ** t\n        price += par_value / (1 + ytm) ** maturity\n        return price - current_price\n\n    ytm = optimize.newton(bond_price, 0.1)  # Use 10% as initial guess\n\n    # return answer\n    return ytm * 100  # Convert to percentage\n```\n\nThis Python program calculates the yield to maturity (YTM) for the given deferred coupon bond. Here's a breakdown of the solution:\n\n1. We define the known variables: par value, current price, maturity, coupon rate, and deferred years.\n\n2. We use the scipy.optimize module to find the root of the bond pricing equation. This root is the YTM we're looking for.\n\n3. The bond_price function calculates the difference between the theoretical bond price at a given YTM and the actual current price. When this difference is zero, we've found the correct YTM.\n\n4. We use the Newton-Raphson method (optimize.newton) to find the root of the bond_price function, starting with an initial guess of 10%.\n\n5. Finally, we return the YTM as a percentage.\n\nNote: This solution requires the scipy library to be installed. If you're running this in an environment where you can't install additional libraries, let me know, and I can provide an alternative solution using a more manual approach."
        ]
    },
    {
        "tables": [
            "| Year | EPS  | DPS  | ROE |\n|------|------|------|-----|\n| 2009 | $3.20| $1.92| 12% |\n| 2008 | $3.60| $1.85| 17% |\n| 2007 | $2.44| $1.74| 13% |\n| 2006 | $2.08| $1.62| 15% |\n| 2005 | $2.76| $1.35| 11% |\n| 2004 | $2.25| $1.25| 9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-518",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the identical information below and the same perpetual growth model, if a trader uses the mean value of the dividend growth rate between 2004 and 2009, along with the sustainable growth rate for 2009 to predict growth, and if the trader's required return is at 15 percent, what would be the anticipated value of the enterprise's common shares?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    eps_2009 = 3.20\n    dps_2009 = 1.92\n    roe_2009 = 0.12\n    dps_2004 = 1.25\n    required_return = 0.15\n    years = 5\n\n    # Do math calculation to get the answer\n    \n    # Calculate dividend growth rate between 2004 and 2009\n    dividend_growth_rate = (dps_2009 / dps_2004) ** (1/years) - 1\n    \n    # Calculate sustainable growth rate for 2009\n    retention_ratio = 1 - (dps_2009 / eps_2009)\n    sustainable_growth_rate = roe_2009 * retention_ratio\n    \n    # Calculate mean growth rate\n    mean_growth_rate = (dividend_growth_rate + sustainable_growth_rate) / 2\n    \n    # Calculate anticipated value using Gordon Growth Model\n    anticipated_value = dps_2009 * (1 + mean_growth_rate) / (required_return - mean_growth_rate)\n    \n    # return answer\n    return round(anticipated_value, 2)\n```\n\nThis program calculates the anticipated value of the enterprise's common shares using the following steps:\n\n1. Define the necessary variables from the given data.\n2. Calculate the dividend growth rate between 2004 and 2009 using the compound annual growth rate formula.\n3. Calculate the sustainable growth rate for 2009 using the retention ratio and ROE.\n4. Calculate the mean growth rate by averaging the dividend growth rate and sustainable growth rate.\n5. Use the Gordon Growth Model to calculate the anticipated value of the shares.\n6. Return the result rounded to two decimal places.\n\nThe Gordon Growth Model formula used is: P = D1 / (r - g)\nWhere:\nP = Anticipated value\nD1 = Next year's dividend (DPS_2009 * (1 + mean_growth_rate))\nr = Required return\ng = Mean growth rate\n\nThis program should provide the anticipated value of the enterprise's"
        ]
    },
    {
        "tables": [
            "|  |  |\n|---|---|\n| Acquisition cost | $60,000,000 |\n| Acquisition date | 1 January 2012 |\n| Patent expiration date | 31 December 2017 |\n| Total plant capacity of patented product | 60,000 units per year |\n| Production of patented product in fiscal year ended 31 December 2012 | 25,000 units |\n| Expected production of patented product during life of the patent | 225,000 units |"
        ],
        "topic": "Accounting",
        "question_id": "test-519",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following information pertains to a patent owned by TDC Corporation. If we use the units-of-production depreciation method, what will be the first year's amortization cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 60000000\n    total_expected_production = 225000\n    first_year_production = 25000\n\n    # Do math calculation to get the answer\n    amortization_rate = acquisition_cost / total_expected_production\n    first_year_amortization = amortization_rate * first_year_production\n\n    # return answer\n    return first_year_amortization\n```\n\nThis Python program calculates the first year's amortization cost using the units-of-production depreciation method. Here's how it works:\n\n1. We define the relevant variables:\n   - `acquisition_cost`: The total cost of acquiring the patent ($60,000,000)\n   - `total_expected_production`: The expected production of the patented product during the life of the patent (225,000 units)\n   - `first_year_production`: The production of the patented product in the first fiscal year (25,000 units)\n\n2. We calculate the amortization rate by dividing the acquisition cost by the total expected production.\n\n3. We then multiply this rate by the first year's production to get the first year's amortization cost.\n\n4. Finally, we return this value as the answer.\n\nWhen you run this function, it will return the first year's amortization cost based on the units-of-production depreciation method."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-520",
        "python_solution": "",
        "ground_truth": null,
        "question": "Marie, the portfolio manager of BC pension, is currently contemplating on incorporating NY Inc. (New York Stock Exchange: NY) into her portfolio. After a thorough evaluation of the company and its competition, she discerns that the company's growth rate steadily decreases from 12 percent in the initial year to 6 percent in year five. The total dividends paid by NY in 2017 amounted to $0.22. The required return is calculated to be at 9 percent. What is the stock's inherent worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 0.22\n    required_return = 0.09\n    growth_rates = [0.12, 0.105, 0.09, 0.075, 0.06]  # Decreasing growth rates over 5 years\n    \n    # Do math calculation to get the answer\n    value = 0\n    for i, g in enumerate(growth_rates):\n        dividend *= (1 + g)\n        value += dividend / ((1 + required_return) ** (i + 1))\n    \n    # Calculate terminal value\n    terminal_growth = 0.06  # Assuming the last growth rate continues indefinitely\n    terminal_dividend = dividend * (1 + terminal_growth)\n    terminal_value = terminal_dividend / (required_return - terminal_growth)\n    \n    # Discount terminal value to present\n    value += terminal_value / ((1 + required_return) ** 5)\n    \n    # return answer rounded to 2 decimal places\n    return round(value, 2)\n```\n\nThis Python program calculates the intrinsic value of NY Inc.'s stock using the Dividend Discount Model (DDM) with varying growth rates. Here's how it works:\n\n1. We define the initial dividend, required return, and a list of decreasing growth rates over 5 years.\n\n2. We calculate the present value of dividends for the first 5 years, adjusting the dividend each year based on the corresponding growth rate.\n\n3. We then calculate a terminal value assuming the last growth rate (6%) continues indefinitely.\n\n4. The terminal value is discounted back to the present and added to the sum of the present values of the first 5 years' dividends.\n\n5. The final result is rounded to 2 decimal places and returned as the stock's intrinsic value.\n\nThis approach takes into account the varying growth rates and provides a more accurate valuation than assuming a constant growth rate."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-521",
        "python_solution": "",
        "ground_truth": null,
        "question": "The expected return for Portfolio C is 9% with a volatility of 20%. Meanwhile, the expected return for the market index is forecasted to be 7% with a volatility of 15%, and the correlation between Portfolio C and the market is anticipated to be 0.9. Given that the risk-free rate is observed to be 3%, can you calculate the Jensen's alpha for Portfolio C?",
        "output": [
            "Here's a Python program to calculate Jensen's alpha for Portfolio C based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_return = 0.09  # 9%\n    portfolio_volatility = 0.20  # 20%\n    market_return = 0.07  # 7%\n    market_volatility = 0.15  # 15%\n    correlation = 0.9\n    risk_free_rate = 0.03  # 3%\n\n    # Do math calculation to get the answer\n    \n    # Calculate beta\n    beta = correlation * (portfolio_volatility / market_volatility)\n    \n    # Calculate expected return using CAPM\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # Calculate Jensen's alpha\n    jensens_alpha = portfolio_return - expected_return\n\n    # return answer\n    return jensens_alpha\n\n```\n\nThis program calculates Jensen's alpha for Portfolio C using the following steps:\n\n1. We define all the given variables.\n2. We calculate the beta of Portfolio C using the formula: β = ρ * (σp / σm), where ρ is the correlation, σp is the portfolio volatility, and σm is the market volatility.\n3. We calculate the expected return of Portfolio C using the Capital Asset Pricing Model (CAPM) formula: E(R) = Rf + β * (Rm - Rf), where Rf is the risk-free rate and Rm is the market return.\n4. Finally, we calculate Jensen's alpha by subtracting the expected return from the actual portfolio return.\n\nThe function will return the value of Jensen's alpha for Portfolio C."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-522",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ is a firm that trades in derivatives. This firm offloaded a five-year CDS protection on Firm E worth $10 million. The duration of this CDS contract is 3.5 years. After a quarter of a year, the credit spread on Firm E diminished from 225bps to 165 bps. Based on the details provided, how much profit can be expected if XYZ establishes a counterbalancing position?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_amount = 10000000  # $10 million\n    duration = 3.5  # years\n    initial_spread = 0.0225  # 225 bps = 2.25%\n    new_spread = 0.0165  # 165 bps = 1.65%\n    time_passed = 0.25  # quarter of a year\n\n    # Do math calculation to get the answer\n    spread_change = initial_spread - new_spread\n    remaining_duration = duration - time_passed\n    profit = notional_amount * remaining_duration * spread_change\n\n    # return answer\n    return profit\n```\n\nThis Python program calculates the profit XYZ can expect if they establish a counterbalancing position after the credit spread on Firm E diminished.\n\nHere's a breakdown of the calculation:\n\n1. We define the notional amount ($10 million), the duration (3.5 years), the initial and new credit spreads (converted from basis points to percentages), and the time passed (0.25 years).\n\n2. We calculate the change in spread by subtracting the new spread from the initial spread.\n\n3. We calculate the remaining duration by subtracting the time passed from the original duration.\n\n4. The profit is then calculated using the formula: \n   Profit = Notional Amount * Remaining Duration * Spread Change\n\n5. The function returns this calculated profit.\n\nWhen you run this function, it will return the expected profit in dollars. Note that this is a simplified calculation and doesn't account for factors like discounting or the exact shape of the credit curve, which might be considered in more complex real-world scenarios."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-523",
        "python_solution": "",
        "ground_truth": null,
        "question": "Due to marketing consumer staples, Bayside Essentials (BE) is capable of utilizing significant debt in its capital structure; in particular, 90 percent of the company's total assets of $450,000,000 are financed with debt capital. Its debt costs are 8 percent before taxes, and its equity capital costs are 12 percent. BE attained a pretax income of $5.1 million in 2006 and was taxed at a rate of 40 percent. What was BE's residual income?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 450000000\n    debt_ratio = 0.90\n    debt_cost = 0.08\n    equity_cost = 0.12\n    pretax_income = 5100000\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    debt = total_assets * debt_ratio\n    equity = total_assets - debt\n    \n    after_tax_income = pretax_income * (1 - tax_rate)\n    \n    capital_charge = (debt * debt_cost * (1 - tax_rate)) + (equity * equity_cost)\n    \n    residual_income = after_tax_income - capital_charge\n\n    # return answer\n    return residual_income\n```\n\nThis Python program calculates the residual income for Bayside Essentials (BE) based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the amount of debt and equity based on the total assets and debt ratio.\n3. We calculate the after-tax income.\n4. We calculate the capital charge, which is the cost of debt (adjusted for tax) plus the cost of equity.\n5. Finally, we calculate the residual income by subtracting the capital charge from the after-tax income.\n\nThe function will return the residual income as the answer to the question."
        ]
    },
    {
        "tables": [
            "| Interest Rate Assumption | Present Value of Liabilities |\n|-------------------------|-------------------------------|\n| 6%                      | CAD 510.1 million           |\n| 7%                      | CAD 455.4 million           |\n| 8%                      | CAD 373.6 million           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-524",
        "python_solution": "",
        "ground_truth": null,
        "question": "A pension fund manager from Canada is trying to gauge the impact of changes in market interest rates on his pension obligations. He calculates the present value of these obligations under three potential interest rate circumstances: a foundational rate of 7%, a rate boosted by 100 basis points to 8%, and a rate lowered by 100 basis points to 6%. Based on the analysis outcomes provided below, what is the effective duration of the liabilities of the pension fund?",
        "output": [
            "Here's the Python program to calculate the effective duration of the pension fund liabilities based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    pv_6_percent = 510.1  # Present value at 6% interest rate\n    pv_7_percent = 455.4  # Present value at 7% interest rate (base rate)\n    pv_8_percent = 373.6  # Present value at 8% interest rate\n    rate_change = 0.01    # 100 basis points = 1%\n\n    # Do math calculation to get the answer\n    \n    # Calculate the percentage change in present value for +100bps\n    pct_change_plus = (pv_7_percent - pv_8_percent) / pv_7_percent\n    \n    # Calculate the percentage change in present value for -100bps\n    pct_change_minus = (pv_6_percent - pv_7_percent) / pv_7_percent\n    \n    # Calculate the average percentage change\n    avg_pct_change = (pct_change_plus + pct_change_minus) / 2\n    \n    # Calculate effective duration\n    effective_duration = avg_pct_change / rate_change\n\n    # return answer\n    return effective_duration\n```\n\nThis program calculates the effective duration of the pension fund liabilities using the following steps:\n\n1. We define the present values of liabilities at different interest rates and the rate change (100 basis points = 1%).\n\n2. We calculate the percentage change in present value when the interest rate increases by 100bps (from 7% to 8%).\n\n3. We calculate the percentage change in present value when the interest rate decreases by 100bps (from 7% to 6%).\n\n4. We take the average of these two percentage changes.\n\n5. We divide this average percentage change by the rate change (0.01) to get the effective duration.\n\n6. Finally, we return the calculated effective duration.\n\nThis approach uses the central difference method to approximate the effective duration, which provides a more accurate result than using just one side of the interest rate change."
        ]
    },
    {
        "tables": [
            "| Path | Time 0 | Time 1 | Time 2 |\n|------|--------|--------|--------|\n| 1    | 1.500% | 2.8853%| 2.7183%|\n| 2    | 1.500  | 2.8853 | 1.6487 |\n| 3    | 1.500  | 1.7500 | 1.6487 |\n| 4    | 1.500  | 1.7500 | 1.0000 |",
            "| Bond   | Maturity | Coupon Rate |\n|--------|----------|-------------|\n| Bond C | 2 years  | 2.5%        |\n| Bond D | 3 years  | 3.0%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-525",
        "python_solution": "",
        "ground_truth": null,
        "question": "In his discussion about pathwise valuations being an alternative way of valuing bonds through a binomial interest rate tree, Thompson describes how Peterson uses the binomial interest rate tree to predict the potential interest rate paths for Bond M shown in Exhibit 9. Referencing Exhibits 6 and 9, what's the current value of Bond M's cash flows along Path 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.03  # 3% coupon rate for Bond D (3-year bond)\n    discount_rates = [0.015, 0.28853, 0.16487]  # Discount rates for Path 2\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    \n    for t in range(1, 4):  # 3 years\n        if t == 3:  # Final year\n            cash_flow = face_value + (face_value * coupon_rate)\n        else:\n            cash_flow = face_value * coupon_rate\n        \n        present_value += cash_flow / ((1 + discount_rates[t-1]) ** t)\n    \n    # Round to 4 decimal places\n    answer = round(present_value, 4)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the present value of Bond M's cash flows along Path 2. Here's a breakdown of the logic:\n\n1. We define the face value as 100 (assuming a $100 par value, which is standard).\n2. We use the coupon rate of 3% from Bond D, as it's a 3-year bond like Bond M.\n3. We use the discount rates from Path 2 in the given table.\n4. We calculate the present value of each year's cash flow:\n   - For years 1 and 2, the cash flow is just the coupon payment.\n   - For year 3, the cash flow includes both the coupon payment and the return of face value.\n5. We sum these present values to get the total present value of the bond.\n6. We round the result to 4 decimal places for precision.\n\nThis approach follows the pathwise valuation method described in the question, using the specific interest rate path (Path 2) to discount the bond's cash flows."
        ]
    },
    {
        "tables": [
            "\n| Year | Net Return (%) |\n|------|----------------|\n| 2008 | -34.8          |\n| 2009 | 32.2           |\n| 2010 | 11.1           |\n| 2011 | -1.4           |\n"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-526",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the 2012 return required to realize a trailing five-year geometric mean annualized return of 5% at the conclusion of 2012 for a wealth management company that produced the following annual returns in their US large-cap equity portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [-0.348, 0.322, 0.111, -0.014]  # Given returns for 2008-2011\n    target_geometric_mean = 0.05  # 5% target geometric mean\n    num_years = 5  # We want a 5-year geometric mean\n\n    # Do math calculation to get the answer\n    cumulative_return = 1\n    for r in returns:\n        cumulative_return *= (1 + r)\n    \n    # The equation: (cumulative_return * (1 + x))^(1/5) = 1 + target_geometric_mean\n    # Where x is the required return for 2012\n    required_return_2012 = ((1 + target_geometric_mean)**num_years / cumulative_return) - 1\n\n    # Convert to percentage\n    answer = required_return_2012 * 100\n\n    # return answer rounded to 1 decimal place\n    return round(answer, 1)\n```\n\nThis Python program calculates the required return for 2012 to achieve a 5% five-year geometric mean annualized return, given the returns from 2008 to 2011. Here's how it works:\n\n1. We define the given returns for 2008-2011, the target geometric mean (5% or 0.05), and the number of years (5).\n\n2. We calculate the cumulative return for the first four years by multiplying (1 + return) for each year.\n\n3. We then use the geometric mean formula to solve for the required 2012 return:\n   (cumulative_return * (1 + x))^(1/5) = 1 + target_geometric_mean\n   Where x is the required return for 2012.\n\n4. We solve this equation for x, which gives us the required return for 2012.\n\n5. Finally, we convert the result to a percentage and round it to one decimal place before returning.\n\nThis program will return the required 2012 return as a percentage."
        ]
    },
    {
        "tables": [
            "|                        | Income Statement | Balance Sheet Changes                               |\n|------------------------|------------------|-----------------------------------------------------|\n| Revenue                | $22,100          | accounts receivable +$550<br> inventory -131<br> prepaid expense +6<br> accounts payable +1,230   |\n| Cost of goods sold     | $16,230          |                                                     |\n| Other operating expense| $508             |                                                     |\n| Depreciation expense   | $1,500           |                                                     |"
        ],
        "topic": "Accounting",
        "question_id": "test-527",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the financial records of Corporation X provided, what is the quantity of cash disbursed to vendors in 2017?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 22100\n    cost_of_goods_sold = 16230\n    accounts_payable_increase = 1230\n    inventory_decrease = 131\n    \n    # Do math calculation to get the answer\n    purchases = cost_of_goods_sold - inventory_decrease\n    cash_disbursed = purchases + accounts_payable_increase\n    \n    # return answer\n    return cash_disbursed\n```\n\nThis Python program calculates the cash disbursed to vendors based on the provided financial information. Here's the explanation:\n\n1. We define the relevant variables from the given data:\n   - Revenue\n   - Cost of goods sold\n   - Increase in accounts payable\n   - Decrease in inventory\n\n2. To calculate cash disbursed to vendors:\n   - First, we calculate purchases: Cost of goods sold - Decrease in inventory\n   - Then, we calculate cash disbursed: Purchases + Increase in accounts payable\n\n3. The program returns the calculated cash disbursed to vendors.\n\nThis calculation assumes that the change in accounts payable is entirely related to inventory purchases, which is a common simplification in financial analysis. The actual cash disbursed to vendors in 2017 would be $17,329 according to this calculation."
        ]
    },
    {
        "tables": [
            "| Assets                           | 31 Dec 2017 | 31 Dec 2016 |\n|----------------------------------|-------------|-------------|\n| Total current assets             | 11,930      | 11,564      |\n| Total non-current assets         | 30,567      | 32,713      |\n| Total assets                     | 42,497      | 44,277      |\n| Total current liabilities        | 10,210      | 9,674       |\n| Total non-current liabilities    | 6,747       | 8,205       |\n| Total liabilities                | 16,958      | 17,880      |\n| Issued capital                   | 1,229       | 1,229       |\n| Share premium                    | 570         | 599         |\n| Retained earnings                | 24,794      | 22,302      |\n| Other components of equity       | 508         | 3,346       |\n| Treasury shares                  | (1,591)     | (1,099)     |\n| Equity attributable to owners of parent | 25,509  | 26,376  |\n| Non-controlling interests        | 31          | 21          |\n| Total equity                     | 25,540      | 26,397      |\n| Total equity and liabilities     | £42,497     | £44,277     |"
        ],
        "topic": "Accounting",
        "question_id": "test-528",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the financial leverage ratio for SAP Group on December 31, 2017, based on the data provided in the Exhibit?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 42497\n    total_equity = 25540\n    \n    # Do math calculation to get the answer\n    financial_leverage_ratio = total_assets / total_equity\n    \n    # return answer\n    return financial_leverage_ratio\n```\n\nThis Python function calculates the financial leverage ratio for SAP Group on December 31, 2017, based on the data provided in the table. \n\nThe financial leverage ratio is calculated by dividing total assets by total equity. This ratio shows how much of a company's assets are financed by equity versus debt.\n\nFrom the table:\n- Total assets on 31 Dec 2017: 42,497 million\n- Total equity on 31 Dec 2017: 25,540 million\n\nThe function defines these values, performs the division, and returns the result. When you call this function, it will return the financial leverage ratio for SAP Group as of December 31, 2017."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-529",
        "python_solution": "",
        "ground_truth": null,
        "question": "Currently, XYZ is rated A in terms of credit and has issued two-year zero-coupon bonds. The market anticipates that the company will either maintain its A rating, be downgraded to BBB, or upgraded to AA in the span of a year with chances of 85%, 10%, and 5%, respectively. Presuming a flat risk-free yield curve with a 1% value, and credit spreads of 70, 100 and 300 basis points for the AA, A, and BBB ratings respectively, with all interest rates compounding annually, what is the predicted worth of a zero-coupon bond after a year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.01\n    credit_spread_AA = 0.0070\n    credit_spread_A = 0.0100\n    credit_spread_BBB = 0.0300\n    prob_A = 0.85\n    prob_BBB = 0.10\n    prob_AA = 0.05\n\n    # Do math calculation to get the answer\n    rate_AA = risk_free_rate + credit_spread_AA\n    rate_A = risk_free_rate + credit_spread_A\n    rate_BBB = risk_free_rate + credit_spread_BBB\n\n    value_AA = 1 / (1 + rate_AA)\n    value_A = 1 / (1 + rate_A)\n    value_BBB = 1 / (1 + rate_BBB)\n\n    expected_value = (prob_AA * value_AA) + (prob_A * value_A) + (prob_BBB * value_BBB)\n\n    # return answer\n    return expected_value\n```\n\nThis Python program calculates the expected value of a zero-coupon bond after one year, given the probabilities of different credit rating scenarios and their corresponding interest rates. Here's a breakdown of the solution:\n\n1. We define the risk-free rate and credit spreads for each rating (AA, A, BBB), as well as the probabilities of each rating scenario.\n\n2. We calculate the total interest rate for each rating by adding the risk-free rate to the respective credit spread.\n\n3. We calculate the value of the bond for each rating scenario using the formula: 1 / (1 + rate). This gives us the present value of 1 dollar received in one year at the given interest rate.\n\n4. We calculate the expected value by multiplying each scenario's value by its probability and summing these products.\n\n5. Finally, we return the expected value, which represents the predicted worth of the zero-coupon bond after a year.\n\nThe returned value will be a decimal between 0 and 1, representing the fraction of the bond's face value that it's expected to be worth after one year."
        ]
    },
    {
        "tables": [
            "| Asset Class     | Geometric Return(%) |\n| --------------  | ------------------- |\n| Equities        | 8.0                 |\n| Corporate Bonds | 6.5                 |\n| Treasury bills  | 2.5                 |\n| Inflation       | 2.1                 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-530",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the reported historical geometric returns for the real rate of return for equities according to the expert?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equity_return = 8.0\n    inflation_rate = 2.1\n    \n    # Do math calculation to get the answer\n    real_rate_of_return = ((1 + equity_return/100) / (1 + inflation_rate/100) - 1) * 100\n    \n    # return answer\n    return round(real_rate_of_return, 2)\n```\n\nThis Python program calculates the real rate of return for equities based on the given geometric return and inflation rate. Here's how it works:\n\n1. We define the variables for the equity return (8.0%) and inflation rate (2.1%) from the provided table.\n\n2. We calculate the real rate of return using the Fisher equation:\n   Real Rate of Return = ((1 + Nominal Rate) / (1 + Inflation Rate)) - 1\n\n3. We convert the percentages to decimals for the calculation, then convert the result back to a percentage.\n\n4. We round the result to two decimal places for clarity.\n\n5. The function returns the calculated real rate of return for equities.\n\nThis program will return the historical geometric real rate of return for equities, accounting for inflation."
        ]
    },
    {
        "tables": [
            "| | Roil =30% | Roil=15% | Roil=10% |\n| - | - | - | - |\n| RMkt=25% | 30% | 0 | 0 |\n| RMkt=20% | 0 | 40% | 0 |\n| RMkt=0% | 0 | 0 | 30% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-531",
        "python_solution": "",
        "ground_truth": null,
        "question": "Analyst John has compiled the following data for the return on the market and the return on Crude Oil. Can you compute the covariance of returns between the market and Crude Oil? Probability Matrix",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = {\n        (0.25, 0.30): 0.30,\n        (0.20, 0.15): 0.40,\n        (0.00, 0.10): 0.30\n    }\n    \n    # Calculate expected returns\n    E_Rmkt = sum(rmkt * prob for (rmkt, _), prob in probabilities.items())\n    E_Roil = sum(roil * prob for (_, roil), prob in probabilities.items())\n    \n    # Calculate covariance\n    covariance = sum((rmkt - E_Rmkt) * (roil - E_Roil) * prob \n                     for (rmkt, roil), prob in probabilities.items())\n    \n    # return answer\n    return covariance\n```\n\nThis Python program calculates the covariance between the market returns and crude oil returns based on the given probability matrix. Here's a breakdown of the solution:\n\n1. We define a dictionary `probabilities` that represents the joint probability distribution of market returns and oil returns.\n\n2. We calculate the expected returns for both the market (E_Rmkt) and oil (E_Roil) by summing the products of each return and its probability.\n\n3. We then calculate the covariance using the formula:\n   Cov(X,Y) = E[(X - E[X])(Y - E[Y])]\n   \n   We do this by summing the products of:\n   - The deviation of market return from its mean\n   - The deviation of oil return from its mean\n   - The probability of that particular combination\n\n4. Finally, we return the calculated covariance.\n\nThis program will give you the covariance between the market returns and crude oil returns based on the provided probability matrix."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-532",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond with a Macaulay duration of 6.0, modified duration of 6.5, and convexity of 50.25 experiences a decrease in yield to maturity by 50 bps, what will be the anticipated percentage change in its price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 6.5\n    convexity = 50.25\n    yield_change = -0.005  # 50 bps decrease = -0.50% = -0.005\n\n    # Do math calculation to get the answer\n    price_change_duration = -modified_duration * yield_change\n    price_change_convexity = 0.5 * convexity * (yield_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n\n    # Convert to percentage\n    percentage_price_change = total_price_change * 100\n\n    # return answer\n    return percentage_price_change\n```\n\nThis Python program calculates the anticipated percentage change in the bond's price based on the given information:\n\n1. We define the variables: modified duration, convexity, and the yield change (converted from basis points to decimal form).\n\n2. We calculate the price change due to duration using the formula: -modified_duration * yield_change\n\n3. We calculate the price change due to convexity using the formula: 0.5 * convexity * (yield_change ** 2)\n\n4. We sum these two components to get the total price change.\n\n5. We convert the price change to a percentage by multiplying by 100.\n\n6. Finally, we return the percentage price change.\n\nThe program will return the anticipated percentage change in the bond's price, which will be positive since the yield decreased (bond prices move inversely to yields)."
        ]
    },
    {
        "tables": [
            "| Hi | P(Hi|Good) | P(Hi|Poor) |\n|---|------------|------------|\n| 0 | 0.1           | 0.5            |\n| 10 | 0.3           | 0.3            |\n| 20 | 0.6           | 0.2            |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-533",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that there's a 0.4 chance of a strong economy and a 0.6 chance of a weak economy. The table below shows the conditional probabilities of product Z's profit. What will be the anticipated profit of product Z?",
        "output": [
            "def solution():\n    # Define variables name and value\n    p_strong_economy = 0.4\n    p_weak_economy = 0.6\n\n    profits = [0, 10, 20]\n    p_good = [0.1, 0.3, 0.6]\n    p_poor = [0.5, 0.3, 0.2]\n\n    # Do math calculation to get the answer\n    expected_profit = 0\n\n    for i in range(len(profits)):\n        profit = profits[i]\n        prob_good = p_good[i] * p_strong_economy\n        prob_poor = p_poor[i] * p_weak_economy\n        expected_profit += profit * (prob_good + prob_poor)\n\n    # return answer\n    return expected_profit\n\n```\n\nThis Python program calculates the expected profit for product Z based on the given probabilities and possible profit outcomes. Here's a breakdown of the solution:\n\n1. We define the probabilities of strong and weak economies.\n2. We create lists for the possible profits and their corresponding probabilities in good and poor economic conditions.\n3. We calculate the expected profit by iterating through each possible profit outcome:\n   - For each profit, we multiply it by the sum of:\n     a) The probability of that profit in a good economy multiplied by the probability of a strong economy\n     b) The probability of that profit in a poor economy multiplied by the probability of a weak economy\n4. We sum up all these values to get the total expected profit.\n5. Finally, we return the expected profit.\n\nThis program will return the anticipated profit of product Z considering both economic scenarios and their respective probabilities."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-534",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that ABC Corporation saw a rise in operating income by 16%, and a 10% increase in units sold. If the financial leverage degree (DFL) of ABC Corporation is 1.5, what is most likely the degree of total leverage (DTL) for ABC Corporation?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_income_increase = 0.16  # 16% increase\n    units_sold_increase = 0.10  # 10% increase\n    dfl = 1.5  # Degree of Financial Leverage\n\n    # Do math calculation to get the answer\n    degree_of_operating_leverage = operating_income_increase / units_sold_increase\n    dtl = degree_of_operating_leverage * dfl\n\n    # return answer\n    return dtl\n```\n\nThis program calculates the Degree of Total Leverage (DTL) for ABC Corporation based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `operating_income_increase`: 16% increase in operating income (0.16)\n   - `units_sold_increase`: 10% increase in units sold (0.10)\n   - `dfl`: Degree of Financial Leverage (1.5)\n\n2. We calculate the Degree of Operating Leverage (DOL) by dividing the percentage change in operating income by the percentage change in units sold:\n   `degree_of_operating_leverage = operating_income_increase / units_sold_increase`\n\n3. We then calculate the Degree of Total Leverage (DTL) by multiplying the Degree of Operating Leverage (DOL) by the Degree of Financial Leverage (DFL):\n   `dtl = degree_of_operating_leverage * dfl`\n\n4. Finally, we return the calculated DTL.\n\nThis program will return the Degree of Total Leverage (DTL) for ABC Corporation, which is the most likely value based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-535",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio is made up of options on Apple and Verizon. The Apple options have a delta of 1000, while the Verizon options have a delta of 20000. The share price of Apple is $120, and Verizon's share price is $30. If we assume that the daily volatility of Apple is 2% and the daily volatility of Verizon is 1%, and the correlation between the daily changes is 0.3, what is the 5-day 95% VaR?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    apple_delta = 1000\n    verizon_delta = 20000\n    apple_price = 120\n    verizon_price = 30\n    apple_daily_volatility = 0.02\n    verizon_daily_volatility = 0.01\n    correlation = 0.3\n    days = 5\n    confidence_level = 0.95\n\n    # Do math calculation to get the answer\n    apple_exposure = apple_delta * apple_price\n    verizon_exposure = verizon_delta * verizon_price\n    \n    apple_variance = (apple_exposure * apple_daily_volatility) ** 2\n    verizon_variance = (verizon_exposure * verizon_daily_volatility) ** 2\n    \n    covariance = correlation * (apple_exposure * apple_daily_volatility) * (verizon_exposure * verizon_daily_volatility)\n    \n    portfolio_variance = apple_variance + verizon_variance + 2 * covariance\n    \n    portfolio_daily_volatility = portfolio_variance ** 0.5\n    \n    import scipy.stats as stats\n    z_score = abs(stats.norm.ppf(1 - confidence_level))\n    \n    var_5day = portfolio_daily_volatility * (days ** 0.5) * z_score\n\n    # return answer\n    return var_5day\n```\n\nThis Python program calculates the 5-day 95% Value at Risk (VaR) for a portfolio consisting of options on Apple and Verizon stocks. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the exposure for each stock by multiplying the delta by the stock price.\n3. We calculate the variance for each stock.\n4. We calculate the covariance between the two stocks.\n5. We sum up the variances and covariance to get the portfolio variance.\n6. We take the square root of the portfolio variance to get the daily portfolio volatility.\n7. We use the inverse of the standard normal cumulative distribution (z-score)"
        ]
    },
    {
        "tables": [
            "| CompanyM            | $(millions) |\n|---------------------|-------------|\n| Operating income (EBIT) | 2,000       |\n| Depreciation expense     | 750         |\n| Interest expense         | 300         |\n| Increase in accounts receivable | 1,000   |\n| Increase in inventories  | 100         |\n| Increase in accounts payable | 500     |\n| Purchases of PP&E        | 600         |\n| Borrowing (repayment)    | 400         |\n| Tax rate                 | 30%         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-536",
        "python_solution": "",
        "ground_truth": null,
        "question": "As per the financial report, what is the FCFE for Company N?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ebit = 2000\n    depreciation = 750\n    interest = 300\n    increase_receivables = 1000\n    increase_inventories = 100\n    increase_payables = 500\n    capex = 600\n    borrowing = 400\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    net_income = (ebit - interest) * (1 - tax_rate)\n    \n    # Add back non-cash charges\n    cash_flow = net_income + depreciation\n    \n    # Adjust for changes in working capital\n    cash_flow -= increase_receivables\n    cash_flow -= increase_inventories\n    cash_flow += increase_payables\n    \n    # Subtract capital expenditures\n    cash_flow -= capex\n    \n    # Add net borrowing\n    cash_flow += borrowing\n    \n    # FCFE is the final cash flow\n    fcfe = cash_flow\n\n    # return answer\n    return fcfe\n```\n\nThis Python program calculates the Free Cash Flow to Equity (FCFE) for Company M based on the provided financial data. Here's a breakdown of the calculation:\n\n1. We start with EBIT and calculate net income after tax and interest.\n2. We add back depreciation (a non-cash expense).\n3. We adjust for changes in working capital (increases in receivables and inventories decrease cash flow, while an increase in payables increases cash flow).\n4. We subtract capital expenditures (purchases of PP&E).\n5. Finally, we add net borrowing.\n\nThe result is the FCFE, which represents the cash available to equity shareholders after all expenses, reinvestment, and debt repayment."
        ]
    },
    {
        "tables": [
            "|         |     |\n| ------- | --- |\n| ROE     | 10% |\n| Growth rate (first three years) | 6.0% |\n| Growth rate (after first three years) | 4.0% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-537",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is assessing the sustainable growth rate of Firm M and has gathered the following data in the provided table. What is the dividend payout ratio of Firm M?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    roe = 0.10\n    growth_rate_initial = 0.06\n    growth_rate_later = 0.04  # Not used in this calculation\n\n    # Do math calculation to get the answer\n    retention_ratio = growth_rate_initial / roe\n    dividend_payout_ratio = 1 - retention_ratio\n\n    # return answer\n    return dividend_payout_ratio\n```\n\nThis Python program calculates the dividend payout ratio for Firm M based on the given information. Here's how it works:\n\n1. We define the variables for ROE (Return on Equity) and the initial growth rate.\n\n2. We calculate the retention ratio using the formula: growth rate / ROE. This is because the sustainable growth rate is the product of ROE and the retention ratio.\n\n3. The dividend payout ratio is the complement of the retention ratio (1 - retention ratio).\n\n4. We return the calculated dividend payout ratio as the answer.\n\nNote that we only use the initial growth rate (6.0%) for this calculation, as the sustainable growth rate typically refers to the near-term growth rate that a company can maintain without needing to issue new equity or change its financial leverage."
        ]
    },
    {
        "tables": [
            "| Maturity | Coupon | Price |\n|---|---|---|\n| 6 months | 4.5% | 101.47 |\n| 1 year | 6.0% | 102.75 |\n| 2 years | 7.0% | 100.32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-538",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the data table providing details about three bonds with twice-yearly coupon payments, what is the discount factor for d(1)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate_6m = 0.045\n    price_6m = 101.47\n    face_value = 100  # Assuming face value of 100\n\n    # Do math calculation to get the answer\n    semi_annual_coupon = (coupon_rate_6m / 2) * face_value\n    discount_factor = (face_value + semi_annual_coupon - price_6m) / semi_annual_coupon\n\n    # return answer\n    return discount_factor\n```\n\nThis Python program calculates the discount factor d(1) based on the 6-month bond data provided in the table. Here's an explanation of the calculation:\n\n1. We use the 6-month bond data because d(1) represents the discount factor for the first period (6 months in this case).\n\n2. The semi-annual coupon is calculated as half of the annual coupon rate (since coupons are paid twice yearly) multiplied by the face value.\n\n3. The discount factor d(1) is then calculated using the formula:\n   d(1) = (Face Value + Semi-annual Coupon - Bond Price) / Semi-annual Coupon\n\n4. We assume a face value of 100 for the bond, which is a common convention.\n\nThis calculation gives us the discount factor d(1) based on the provided bond data."
        ]
    },
    {
        "tables": [
            "|                    | Maturity (Years) |     |     |     |\n|--------------------|------------------|-----|-----|-----|\n|                    | 1                | 2   | 3   | 4   |\n| Government spot rate | 2.25%           | 2.70% | 3.30% | 4.05% |\n| Swap spread        | 0.25%           | 0.30% | 0.45% | 0.70% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-539",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Johnson collects data on spot rates for current annual-coupon government bonds and swap spreads, as shown in the Exhibit below, and purchased a government bond, he would receive an almost risk-free annualized return. According to the no-arbitrage principle, what could Johnson demonstrate the forward price of a one-year government bond, set to be issued in one year, to be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1y = 0.0225\n    spot_rate_2y = 0.0270\n    \n    # Do math calculation to get the answer\n    # Calculate the forward rate using the relationship between spot rates\n    forward_rate = ((1 + spot_rate_2y)**2 / (1 + spot_rate_1y)) - 1\n    \n    # Convert to percentage and round to 2 decimal places\n    answer = round(forward_rate * 100, 2)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the forward price (forward rate) of a one-year government bond to be issued in one year, based on the no-arbitrage principle and the given spot rates.\n\nHere's the explanation of the calculation:\n\n1. We use the spot rates for 1-year and 2-year government bonds (2.25% and 2.70% respectively).\n2. The forward rate is calculated using the relationship between spot rates:\n   (1 + r₂)² = (1 + r₁)(1 + f)\n   Where r₂ is the 2-year spot rate, r₁ is the 1-year spot rate, and f is the forward rate.\n3. Rearranging this equation, we get:\n   f = ((1 + r₂)² / (1 + r₁)) - 1\n4. We implement this formula in the code, then convert the result to a percentage and round to two decimal places.\n\nThe program will return the forward price as a percentage, which Johnson could demonstrate as the theoretical forward price of a one-year government bond to be issued in one year, according to the no-arbitrage principle."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-540",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming equal financing from each source and a marginal tax rate of 30%, what is the weighted average cost of capital (%) if a company's pre-tax costs of debt, preferred stock, and equity are 12%, 14%, and 16%, respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pre_tax_cost_debt = 0.12\n    cost_preferred_stock = 0.14\n    cost_equity = 0.16\n    tax_rate = 0.30\n    equal_weight = 1/3\n\n    # Do math calculation to get the answer\n    after_tax_cost_debt = pre_tax_cost_debt * (1 - tax_rate)\n    wacc = (after_tax_cost_debt * equal_weight) + (cost_preferred_stock * equal_weight) + (cost_equity * equal_weight)\n    \n    # Convert to percentage and round to two decimal places\n    wacc_percentage = round(wacc * 100, 2)\n\n    # return answer\n    return wacc_percentage\n```\n\nThis Python program calculates the Weighted Average Cost of Capital (WACC) based on the given information:\n\n1. We define the variables for the pre-tax costs of debt, preferred stock, and equity, as well as the tax rate and equal weight for each source of financing.\n\n2. We calculate the after-tax cost of debt by multiplying the pre-tax cost of debt by (1 - tax rate).\n\n3. We then calculate the WACC by summing the weighted costs of each financing source:\n   - After-tax cost of debt * 1/3\n   - Cost of preferred stock * 1/3\n   - Cost of equity * 1/3\n\n4. We convert the result to a percentage by multiplying by 100 and round it to two decimal places for better readability.\n\n5. Finally, we return the WACC as a percentage.\n\nThis program will return the weighted average cost of capital as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-541",
        "python_solution": "",
        "ground_truth": null,
        "question": "Several months down the line, Jordan gets a phone call from Fatimah. She has now become a board member of the Polar Foundation for Medical Advancements (PFMA). PFMA was created to fund a range of medical research endeavors. Fatimah is thrilled and requests Jordan to work out the return objective of PFMA's portfolio. Kyoto points out the following:• PFMA’s main investment goal is to preserve the real purchasing power of its portfolio after distributions.• The risk-free rate is 4.0%.• An expected inflation rate is 3.5%.• The portfolio’s standard deviation is 15.0%.• The cost of earning investment returns is 50 bp.• PFMA aims for a 5.5% annual distribution of assets. What is PFMA’s return objective?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.040  # 4.0%\n    inflation_rate = 0.035  # 3.5%\n    portfolio_std_dev = 0.150  # 15.0%\n    investment_cost = 0.0050  # 50 bp = 0.50%\n    distribution_rate = 0.055  # 5.5%\n\n    # Do math calculation to get the answer\n    return_objective = (\n        risk_free_rate +\n        inflation_rate +\n        investment_cost +\n        distribution_rate\n    )\n\n    # return answer\n    return return_objective * 100  # Convert to percentage\n```\n\nThis Python program calculates PFMA's return objective based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given rates as variables, converting percentages to decimals.\n2. The return objective is calculated by summing:\n   - The risk-free rate (4.0%)\n   - The expected inflation rate (3.5%)\n   - The cost of earning investment returns (0.50%)\n   - The annual distribution rate (5.5%)\n3. We multiply the result by 100 to convert it back to a percentage before returning.\n\nNote that the portfolio's standard deviation (15.0%) is not used in this calculation. The return objective is focused on maintaining purchasing power and meeting distribution goals, rather than being directly tied to the portfolio's volatility."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-542",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the second model, given that the present short-term rate stands at 5%, the annual drift is 80bps, and the standard deviation of the short-term rate is 3%. Moreover, consider the ex-post realization of the dw random variable being 0.3. What would the interest rate be in the central node after building a 2-period interest rate tree with yearly periods by the conclusion of the second year?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_rate = 0.05  # 5% short-term rate\n    annual_drift = 0.008  # 80bps annual drift\n    std_dev = 0.03  # 3% standard deviation\n    dw = 0.3  # ex-post realization of dw random variable\n    periods = 2  # 2-period interest rate tree\n\n    # Do math calculation to get the answer\n    rate_change = annual_drift + std_dev * dw\n    rate_after_one_year = current_rate + rate_change\n    rate_after_two_years = rate_after_one_year + annual_drift\n\n    # return answer\n    return rate_after_two_years\n\n# Uncomment the following lines to test the function\n# result = solution()\n# print(f\"The interest rate in the central node after 2 years: {result:.4f}\")\n```\n\nThis program calculates the interest rate in the central node of a 2-period interest rate tree by the end of the second year, given the provided information. Here's a breakdown of the calculation:\n\n1. We start with the current short-term rate of 5%.\n2. For the first year, we calculate the rate change using the drift and the standard deviation: `annual_drift + std_dev * dw`.\n3. We add this change to the current rate to get the rate after one year.\n4. For the second year (central node), we only add the annual drift to the rate from the first year, as the central node represents the expected value without considering volatility.\n\nThe function returns the final interest rate as a decimal (e.g., 0.0668 for 6.68%). You can uncomment the last two lines to test the function and print the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-543",
        "python_solution": "",
        "ground_truth": null,
        "question": "The joint probability distribution of random variables A and B is presented by f{(a,b)}=k * a * b where a = 1,2,3, b = 1,2,3, and k is a positive constant. What is the likelihood that A+B will go beyond 5?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    k = 1/36  # We can set k=1/36 to make the total probability 1\n\n    # Do math calculation to get the answer\n    probability = 0\n    \n    # Calculate probability for A+B > 5\n    for a in [1, 2, 3]:\n        for b in [1, 2, 3]:\n            if a + b > 5:\n                probability += k * a * b\n\n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability that A+B will exceed 5 given the joint probability distribution f(a,b) = k * a * b, where a and b can take values 1, 2, or 3.\n\nHere's how it works:\n\n1. We set k = 1/36. This value is chosen to make the total probability equal to 1 (you can verify this by summing k*a*b for all combinations of a and b).\n\n2. We initialize the probability to 0.\n\n3. We use nested loops to iterate through all possible combinations of a and b.\n\n4. For each combination where a + b > 5, we add the probability (k * a * b) to our total.\n\n5. Finally, we return the calculated probability.\n\nThe cases where A + B > 5 are:\n- A = 3, B = 3\n- A = 3, B = 2\n- A = 2, B = 3\n\nRunning this function will give you the probability that A + B exceeds 5."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-544",
        "python_solution": "",
        "ground_truth": null,
        "question": "If each futures contract is for 100 shares and the company undergoes a 2-for-1 split, how many shares does each futures contract now cover?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_shares_per_contract = 100\n    split_ratio = 2  # 2-for-1 split\n\n    # Do math calculation to get the answer\n    new_shares_per_contract = original_shares_per_contract * split_ratio\n\n    # return answer\n    return new_shares_per_contract\n```\n\nThis Python program calculates the number of shares each futures contract covers after a 2-for-1 stock split. Here's how it works:\n\n1. We define two variables:\n   - `original_shares_per_contract`: Set to 100, as each futures contract originally covers 100 shares.\n   - `split_ratio`: Set to 2, representing a 2-for-1 split.\n\n2. We calculate the new number of shares per contract by multiplying the original number of shares by the split ratio.\n\n3. The function returns the result, which is the new number of shares each futures contract covers after the split.\n\nWhen you run this function, it will return 200, indicating that after the 2-for-1 split, each futures contract now covers 200 shares."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-545",
        "python_solution": "",
        "ground_truth": null,
        "question": "We have a bond assortment containing two bonds, namely bond X and bond Y. The worth of bond X is $60 million, while bond Y is worth $40 million. The one-year default probability for bond X is 5% with a recovery rate of 60%, whereas bond Y has a default probability of 7% and a recovery rate of 50%. Determine the anticipated credit loss for this collection over one year, given that the likelihood of both bonds defaulting is 0.7% and the default relationship is observed to be 20%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_x_value = 60000000\n    bond_y_value = 40000000\n    bond_x_default_prob = 0.05\n    bond_y_default_prob = 0.07\n    bond_x_recovery_rate = 0.60\n    bond_y_recovery_rate = 0.50\n    joint_default_prob = 0.007\n    default_correlation = 0.20\n\n    # Do math calculation to get the answer\n    \n    # Calculate individual expected losses\n    expected_loss_x = bond_x_value * bond_x_default_prob * (1 - bond_x_recovery_rate)\n    expected_loss_y = bond_y_value * bond_y_default_prob * (1 - bond_y_recovery_rate)\n\n    # Calculate joint expected loss\n    joint_expected_loss = bond_x_value * (1 - bond_x_recovery_rate) + bond_y_value * (1 - bond_y_recovery_rate)\n    joint_expected_loss *= joint_default_prob\n\n    # Calculate correlation effect\n    correlation_effect = default_correlation * (bond_x_default_prob * bond_y_default_prob) ** 0.5\n    correlation_effect *= (bond_x_value * (1 - bond_x_recovery_rate) * bond_y_value * (1 - bond_y_recovery_rate)) ** 0.5\n\n    # Calculate total expected credit loss\n    total_expected_loss = expected_loss_x + expected_loss_y + joint_expected_loss + correlation_effect\n\n    # return answer\n    return total_expected_loss\n\n```"
        ]
    },
    {
        "tables": [
            "|                                               | REIT A        |\n|-----------------------------------------------|---------------|\n| Estimated 12 months cash net operating income (NOI) | $ 280,000    |\n| Cash and equivalents                          | $ 335,000    |\n| Accounts receivable                           | $ 230,000    |\n| Debt and other liabilities                    | $ 1,680,000  |\n|                                               |               |\n| Shares outstanding                            | 82,000       |\n| Assumed cap rate                              | 8.00%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-546",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of REIT B when the net asset value valuation method is applied?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    noi = 280000\n    cash = 335000\n    receivables = 230000\n    liabilities = 1680000\n    shares = 82000\n    cap_rate = 0.08\n\n    # Do math calculation to get the answer\n    property_value = noi / cap_rate\n    total_assets = property_value + cash + receivables\n    net_asset_value = total_assets - liabilities\n    per_share_value = net_asset_value / shares\n\n    # return answer\n    return round(per_share_value, 2)\n```\n\nThis Python program calculates the per share value of REIT A (not B, as the question seems to have a typo) using the net asset value valuation method. Here's a breakdown of the calculation:\n\n1. We first calculate the property value by dividing the NOI by the cap rate.\n2. We then sum up the total assets (property value, cash, and receivables).\n3. We subtract the liabilities from total assets to get the net asset value.\n4. Finally, we divide the net asset value by the number of shares outstanding to get the per share value.\n\nThe result is rounded to two decimal places to represent a reasonable dollar amount. The function will return this value when called."
        ]
    },
    {
        "tables": [
            "|                      | 2018 | 2019 |\n|----------------------|------|------|\n| Revenue              | 5000 | 7000 |\n| Cost                 | 2000 | 2300 |\n| Operating income     | 3000 | 4700 |\n| Net profit           | 1650 | 2300 |\n| Total assets         | 4000 | 6000 |\n| Total liabilities    | 1200 | 900  |\n| Equity               | 2800 | 5100 |",
            "|                        | 2018  | 2019  |\n| ---------------------- | ----  | ----  |\n| Revenue                | 2000  | 2500  |\n| Cost                   | 1200  | 1300  |\n| Operating income       | 800   | 1200  |\n| Net profit             | 460   | 820   |\n| Dividends paid         | 230   | 410   |\n| Total assets           | 1000  | 1100  |\n| Total liabilities      | 600   | 650   |\n| Equity                 | 400   | 450   |"
        ],
        "topic": "Accounting",
        "question_id": "test-547",
        "python_solution": "",
        "ground_truth": null,
        "question": "The educational firm based in China, company PZ, operates under IFRS. In 2018, it had a passive equity ownership interest of 15% in the T-internet company. By the close of 2018, PZ decided to increase its ownership to 50% as of 1st January 2019, via a cash purchase. There have been no transactions between companies. In the table containing financial statements for both companies that follows: Could you determine the total liabilities for company PZ under the proportionate consolidation method for 2019?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pz_liabilities_2019 = 900\n    t_internet_liabilities_2019 = 650\n    ownership_percentage = 0.50  # 50% ownership\n\n    # Do math calculation to get the answer\n    proportionate_t_internet_liabilities = t_internet_liabilities_2019 * ownership_percentage\n    total_liabilities = pz_liabilities_2019 + proportionate_t_internet_liabilities\n\n    # return answer\n    return total_liabilities\n```\n\nThis Python function calculates the total liabilities for company PZ under the proportionate consolidation method for 2019. Here's how it works:\n\n1. We define the known variables:\n   - PZ's liabilities in 2019: 900\n   - T-internet's liabilities in 2019: 650\n   - PZ's ownership percentage in T-internet: 50% (0.50)\n\n2. We calculate the proportionate share of T-internet's liabilities that PZ should consolidate:\n   650 * 0.50 = 325\n\n3. We add this proportionate share to PZ's own liabilities:\n   900 + 325 = 1225\n\n4. The function returns this total, which represents PZ's total liabilities under the proportionate consolidation method for 2019.\n\nThe answer returned by this function will be 1225, which represents the total liabilities for company PZ under the proportionate consolidation method for 2019."
        ]
    },
    {
        "tables": [
            "|     |             |\n|-----|-------------|\n| Revenue | $5,000,000 |\n| Cost of goods sold | $3,000,000 |\n| SG&A | $100,000 |\n| Interest expense | $200,000 |\n| Tax expense | $100,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-548",
        "python_solution": "",
        "ground_truth": null,
        "question": "In this document, it is revealed that the operating income amounts to:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000000\n    cost_of_goods_sold = 3000000\n    sga = 100000\n    \n    # Do math calculation to get the answer\n    gross_profit = revenue - cost_of_goods_sold\n    operating_income = gross_profit - sga\n    \n    # return answer\n    return operating_income\n```\n\nThis Python program calculates the operating income based on the information provided in the table. Here's a breakdown of the calculation:\n\n1. We define the variables for revenue, cost of goods sold, and SG&A (Selling, General, and Administrative expenses) based on the given table.\n\n2. We calculate the gross profit by subtracting the cost of goods sold from the revenue.\n\n3. Then, we calculate the operating income by subtracting the SG&A expenses from the gross profit.\n\n4. Finally, we return the operating income as the answer.\n\nThe operating income represents the profit earned from a company's core business operations, excluding the effects of interest and taxes. This calculation aligns with the standard formula for operating income: Revenue - Cost of Goods Sold - Operating Expenses (SG&A in this case)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-549",
        "python_solution": "",
        "ground_truth": null,
        "question": "A risk analyst calculates daily variance hth_tht​ using a GARCH method on daily yield rt:ht=α0 +α1rt−12+βht−1, with α0=0.005,α1 =0.04,β=0.94r_t:h_t=\\alpha_0\\;+\\alpha_1r_{t-1}^2+\\beta h_{t-1},\\;with\\;\\alpha_0=0.005,α1\\;=0.04,\\beta=0.94rt​:ht​=α0​+α1​rt−12​+βht−1​,withα0​=0.005,α1​=0.04,β=0.94. The long-term annual volatility is roughly.",
        "output": [
            "def solution():\n    # Define variables name and value\n    alpha_0 = 0.005\n    alpha_1 = 0.04\n    beta = 0.94\n\n    # Do math calculation to get the answer\n    # Long-term daily variance\n    long_term_daily_variance = alpha_0 / (1 - alpha_1 - beta)\n\n    # Convert daily variance to annual variance\n    annual_variance = long_term_daily_variance * 252  # Assuming 252 trading days in a year\n\n    # Convert annual variance to annual volatility\n    annual_volatility = (annual_variance) ** 0.5\n\n    # Convert to percentage\n    annual_volatility_percentage = annual_volatility * 100\n\n    # return answer\n    return round(annual_volatility_percentage, 2)\n\n```\n\nThis Python program calculates the long-term annual volatility based on the given GARCH model parameters. Here's a breakdown of the calculation:\n\n1. We define the given parameters: α0 (alpha_0), α1 (alpha_1), and β (beta).\n\n2. We calculate the long-term daily variance using the formula: α0 / (1 - α1 - β)\n\n3. We convert the daily variance to annual variance by multiplying by 252 (assuming 252 trading days in a year).\n\n4. We take the square root of the annual variance to get the annual volatility.\n\n5. We convert the volatility to a percentage by multiplying by 100.\n\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the long-term annual volatility as a percentage, which answers the question asked."
        ]
    },
    {
        "tables": [
            "| Year ending 31 December | 2012 |\n|-------------------------|------|\n| Revenue                | 2,230|\n| Operating income       | 322  |\n| Net income             | 102  |\n| Total assets           | 2,100|\n| Shareholders' equity   | 950  |"
        ],
        "topic": "Accounting",
        "question_id": "test-550",
        "python_solution": "",
        "ground_truth": null,
        "question": "P-tech Corporation, adheres to US GAAP and has been growing by purchasing other web-based businesses, the biggest of which is Surge web business. Currently, P-tech Corporation is establishing a 50/50 joint venture with Bravo company where they will together govern Surge web business. P-tech's accounting strategy for the joint venture will employ the equity method. Bravo company, complying with IFRS, will apply the proportionate consolidation method for their joint venture accounting. Joseph, a CFA, is an employee at Investment Equity Corp, and he has predicted the financial specifics for the joint venture in 2012. Joseph is making his approximations regarding each company’s profits and overall financial performance. In light of Joseph's projections, what will the Surge web business's total asset (in ￥ millions) be at the end of 2012, as noted in the chart below, that Bravo company will include in their consolidated financial statements?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100  # Total assets from the provided table\n\n    # Do math calculation to get the answer\n    bravo_share = 0.5  # Bravo's share in the 50/50 joint venture\n    bravo_reported_assets = total_assets * bravo_share\n\n    # return answer\n    return bravo_reported_assets\n```\n\nThis Python program calculates the amount of total assets that Bravo company will report in their consolidated financial statements for the Surge web business joint venture at the end of 2012.\n\nHere's the explanation:\n\n1. We define the total assets as 2100 million yen, based on the information provided in the table.\n\n2. Since it's a 50/50 joint venture, Bravo's share is 0.5 or 50%.\n\n3. Bravo company is using the proportionate consolidation method under IFRS. This means they will include their proportionate share of the joint venture's assets in their consolidated financial statements.\n\n4. We calculate Bravo's reported assets by multiplying the total assets by Bravo's share (2100 * 0.5).\n\n5. The function returns this calculated value, which represents the amount of Surge web business's total assets that Bravo company will include in their consolidated financial statements at the end of 2012.\n\nThis solution assumes that the total assets figure in the provided table represents the full amount for the Surge web business. If this assumption is incorrect, the calculation would need to be adjusted based on additional information about Surge's specific assets."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-551",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a property generates an annual yield of 19.9%, shows a standard deviation of returns of 18.5%, and has a market correlation of 0.9, with the market's standard deviation of returns being 15.9% and a risk-free rate of 1%, what is the beta for this property?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    property_yield = 0.199\n    property_std_dev = 0.185\n    market_correlation = 0.9\n    market_std_dev = 0.159\n    risk_free_rate = 0.01\n\n    # Do math calculation to get the answer\n    beta = (market_correlation * property_std_dev) / market_std_dev\n\n    # return answer\n    return beta\n```\n\nThis Python program calculates the beta of the property based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables with their respective values.\n2. The formula for beta is: β = (Correlation between property and market * Standard deviation of property returns) / Standard deviation of market returns\n3. We apply this formula using the defined variables.\n4. The function returns the calculated beta.\n\nNote that we don't actually need the property yield or risk-free rate for this calculation, but I've included them in the variable definitions for completeness, as they were provided in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-552",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following calculations have been derived for XYZ Inc.: Demand curve: P = 150 – 5 × Q Total revenue curve: TR = 150 × Q – 5 × Q2 Marginal revenue curve: MR = 150 – 10 × Q Total cost curve: TC = Q3 – 10 × Q2 + 73 × Q + 120 Average cost curve: AC = Q2 – 10 × Q + 73 + 120/Q Marginal cost curve: MC = 3 × Q2 – 20 × Q + 73 P stands for price per unit, and Q stands for cost per unit. What output (in units) will maximize the profit for XYZ Inc.?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # We don't need to define variables for the given equations as we'll use them directly\n\n    # Do math calculation to get the answer\n    # To maximize profit, we need to find where MR = MC\n    # MR = 150 - 10Q\n    # MC = 3Q^2 - 20Q + 73\n    # Set them equal: 150 - 10Q = 3Q^2 - 20Q + 73\n    # Rearrange: 3Q^2 - 10Q + 73 = 150 - 10Q\n    # Simplify: 3Q^2 + 77 = 150\n    # 3Q^2 = 73\n    # Q^2 = 73/3\n    \n    # Solve for Q\n    Q = (73/3) ** 0.5\n\n    # Round to the nearest whole unit\n    answer = round(Q)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the output (Q) that maximizes profit for XYZ Inc. Here's how it works:\n\n1. We don't need to define variables for the given equations as we'll use them directly in our calculations.\n\n2. To maximize profit, we need to find where Marginal Revenue (MR) equals Marginal Cost (MC).\n\n3. We set up the equation MR = MC using the given formulas:\n   150 - 10Q = 3Q^2 - 20Q + 73\n\n4. We solve this equation algebraically:\n   3Q^2 - 10Q + 73 = 150 - 10Q\n   3Q^2 + 77 = 150\n   3Q^2 = 73\n   Q^2 = 73/3\n\n5. We then solve for Q by taking the square root of both sides:\n   Q = (73/3) ** 0.5\n\n6. Since we're dealing with units of output, we round the result to the nearest whole number.\n\n7. Finally, we return this rounded value as our answer.\n\nThis program will return the output (in units) that will maximize"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-553",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher is analyzing a collection that includes 2,500 non-prime mortgages and 800 prime home loans. Out of the non-prime mortgages, 500 are delayed in their payments. Out of the prime home loans, 64 are delayed in their payments. If the researcher randomly picks a home loan from the collection and it is presently delayed on its payments, what is the likelihood that it is a non-prime mortgage?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    non_prime_total = 2500\n    prime_total = 800\n    non_prime_delayed = 500\n    prime_delayed = 64\n    \n    # Do math calculation to get the answer\n    total_delayed = non_prime_delayed + prime_delayed\n    probability_non_prime_given_delayed = non_prime_delayed / total_delayed\n    \n    # return answer\n    return probability_non_prime_given_delayed\n\n# Call the function to get the result\nresult = solution()\nprint(f\"The likelihood that a delayed loan is a non-prime mortgage is approximately {result:.4f} or {result*100:.2f}%\")\n```\n\nThis program calculates the probability using Bayes' theorem. Here's a breakdown of the steps:\n\n1. We define the variables for the total number of non-prime and prime mortgages, as well as the number of delayed loans in each category.\n\n2. We calculate the total number of delayed loans by adding non-prime and prime delayed loans.\n\n3. We then calculate the probability that a delayed loan is a non-prime mortgage by dividing the number of delayed non-prime mortgages by the total number of delayed loans.\n\n4. The function returns this probability.\n\nWhen you run this program, it will output the result as both a decimal and a percentage. The likelihood that a randomly selected delayed loan is a non-prime mortgage is approximately 0.8865, or 88.65%."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-554",
        "python_solution": "",
        "ground_truth": null,
        "question": "There were no additions to or subtractions from the portfolio during the year. Fees for administration are determined by the value at the end of the period. The fees for administration and incentive are computed separately. What's the return after deductions for the client given the following details: Starting portfolio assets valued at $100M, portfolio assets at the period's close (prior to fee deductions) amounting to $110M, a management fee pegged to the assets under management at 2%, an incentive fee based on the gains of 20%, and a soft hurdle rate of 8%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    starting_assets = 100_000_000\n    ending_assets_before_fees = 110_000_000\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.08\n    \n    # Do math calculation to get the answer\n    gross_gain = ending_assets_before_fees - starting_assets\n    hurdle_amount = starting_assets * hurdle_rate\n    \n    management_fee = ending_assets_before_fees * management_fee_rate\n    \n    if gross_gain > hurdle_amount:\n        incentive_fee = (gross_gain - hurdle_amount) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    total_fees = management_fee + incentive_fee\n    net_gain = gross_gain - total_fees\n    \n    net_return = net_gain / starting_assets\n    \n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-555",
        "python_solution": "",
        "ground_truth": null,
        "question": "If two stocks have identical volatility and a correlation of -0.5, what is their minimum variance hedge ratio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    correlation = -0.5\n    volatility_ratio = 1  # Since volatilities are identical\n\n    # Do math calculation to get the answer\n    hedge_ratio = -correlation * volatility_ratio\n\n    # return answer\n    return hedge_ratio\n```\n\nThis Python program calculates the minimum variance hedge ratio for two stocks with identical volatility and a correlation of -0.5. Here's an explanation of the solution:\n\n1. We define the correlation as -0.5 as given in the question.\n2. Since the volatilities are identical, their ratio is 1.\n3. The formula for the minimum variance hedge ratio is: h* = -ρ * (σ1 / σ2), where:\n   - h* is the hedge ratio\n   - ρ (rho) is the correlation between the two stocks\n   - σ1 and σ2 are the volatilities of the two stocks\n4. In this case, σ1 / σ2 = 1 (because volatilities are identical), so we simplify to h* = -ρ * 1\n5. We calculate the hedge ratio as -(-0.5) * 1 = 0.5\n6. The function returns this value as the answer.\n\nThe minimum variance hedge ratio in this case is 0.5, meaning that for each unit of the first stock, you should hold 0.5 units of the second stock to minimize the overall portfolio variance."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-556",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Thompson plans to secure a three-month loan using an interest-rate futures contract and decides to sell the interest rate futures contract at 98.00. Then, after six months, he gets a loan directly from the market at 2.4%, and undoes the hedge at 97.00. What would be the overall borrowing rate throughout this procedure?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    futures_price_initial = 98.00\n    futures_price_final = 97.00\n    loan_rate = 0.024  # 2.4%\n    \n    # Do math calculation to get the answer\n    implied_rate_initial = (100 - futures_price_initial) / 100\n    implied_rate_final = (100 - futures_price_final) / 100\n    \n    rate_difference = implied_rate_final - implied_rate_initial\n    \n    overall_borrowing_rate = loan_rate + rate_difference\n    \n    # return answer\n    return overall_borrowing_rate\n```\n\nThis Python program calculates the overall borrowing rate based on the given information:\n\n1. We define the initial futures price (98.00), final futures price (97.00), and the actual loan rate (2.4% or 0.024).\n\n2. We calculate the implied rates from the futures prices:\n   - Initial implied rate = (100 - 98.00) / 100 = 0.02 or 2%\n   - Final implied rate = (100 - 97.00) / 100 = 0.03 or 3%\n\n3. We calculate the difference between the final and initial implied rates, which represents the change in the interest rate futures contract.\n\n4. The overall borrowing rate is the sum of the actual loan rate and the rate difference from the futures contract.\n\n5. The function returns this overall borrowing rate.\n\nWhen you run this function, it will return the overall borrowing rate as a decimal. To get the percentage, you would need to multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-557",
        "python_solution": "",
        "ground_truth": null,
        "question": "Conservative Fund that has USD 50 million in assets has been performing poorly recently, prompting the institutional sales team to suggest a merger with Assertive Fund, a larger fund valued at USD 200 million. Conservative Fund's returns are usually distributed with an average of 3% and a standard deviation of 7%. As for Assertive Fund, its returns follow a normal distribution with an average of 7% and a standard deviation of 15%. The top executives have tasked a financial analyst to calculate the possibility that the returns on the merged portfolio might surpass 26%. Given that the returns on both funds don't influence each other, how would the analyst estimate the chances of the returns on the merged fund exceeding 26%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    conservative_assets = 50_000_000\n    assertive_assets = 200_000_000\n    total_assets = conservative_assets + assertive_assets\n    \n    conservative_weight = conservative_assets / total_assets\n    assertive_weight = assertive_assets / total_assets\n    \n    conservative_mean = 0.03\n    conservative_std = 0.07\n    assertive_mean = 0.07\n    assertive_std = 0.15\n    \n    target_return = 0.26\n    \n    # Do math calculation to get the answer\n    merged_mean = (conservative_weight * conservative_mean) + (assertive_weight * assertive_mean)\n    merged_var = (conservative_weight ** 2 * conservative_std ** 2) + (assertive_weight ** 2 * assertive_std ** 2)\n    merged_std = merged_var ** 0.5\n    \n    z_score = (target_return - merged_mean) / merged_std\n    \n    # Calculate probability using normal distribution\n    from scipy import stats\n    probability = 1 - stats.norm.cdf(z_score)\n    \n    # return answer\n    return probability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-558",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment manager achieved a return rate of 15.5% on a portfolio with a beta of 1.2. If the risk-less return rate is 2.5% and the market return stands at 11.8%, what does Jensen's alpha for the portfolio amount to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_return = 0.155\n    portfolio_beta = 1.2\n    risk_free_rate = 0.025\n    market_return = 0.118\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + portfolio_beta * (market_return - risk_free_rate)\n    jensens_alpha = portfolio_return - expected_return\n    \n    # return answer\n    return jensens_alpha\n```\n\nThis Python program calculates Jensen's alpha for the given portfolio using the following steps:\n\n1. We define the variables with the given values:\n   - portfolio_return: 15.5% = 0.155\n   - portfolio_beta: 1.2\n   - risk_free_rate: 2.5% = 0.025\n   - market_return: 11.8% = 0.118\n\n2. We calculate the expected return using the Capital Asset Pricing Model (CAPM) formula:\n   Expected Return = Risk-free Rate + Beta * (Market Return - Risk-free Rate)\n\n3. We then calculate Jensen's alpha by subtracting the expected return from the actual portfolio return:\n   Jensen's Alpha = Portfolio Return - Expected Return\n\n4. Finally, we return the calculated Jensen's alpha.\n\nWhen you run this function, it will return the value of Jensen's alpha for the given portfolio, which represents the excess return of the portfolio over the theoretical expected return."
        ]
    },
    {
        "tables": [
            "|     | Financial Statement of Company M ($ million) |\n| --- | -------------------------------------------- |\n| Net income | 4,500 |\n| Sales | 40,000 |\n| Total assets, average during year | 50,020 |\n| Shareholders' equity, beginning of year | 39,080 |\n| Dividends paid | 200 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-559",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in the subsequent table, what is the sustainable growth of Company N?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 4500\n    sales = 40000\n    avg_total_assets = 50020\n    beginning_equity = 39080\n    dividends = 200\n\n    # Do math calculation to get the answer\n    retention_ratio = (net_income - dividends) / net_income\n    return_on_equity = net_income / beginning_equity\n    asset_turnover = sales / avg_total_assets\n    equity_multiplier = avg_total_assets / beginning_equity\n    \n    profit_margin = net_income / sales\n    \n    sustainable_growth = retention_ratio * return_on_equity\n    \n    # return answer\n    return sustainable_growth * 100  # Convert to percentage\n```\n\nThis Python program calculates the sustainable growth rate for Company M (not N, as the question seems to have a typo) using the data provided in the table. Here's a breakdown of the calculation:\n\n1. We first define all the relevant variables from the given financial data.\n2. We then calculate the components needed for the sustainable growth formula:\n   - Retention ratio = (Net Income - Dividends) / Net Income\n   - Return on Equity (ROE) = Net Income / Beginning Equity\n3. The sustainable growth rate is then calculated as: Retention Ratio * ROE\n4. The result is multiplied by 100 to convert it to a percentage before returning.\n\nThis approach uses the basic formula for sustainable growth rate, which is the maximum rate at which a company can grow without having to increase financial leverage or seek outside financing."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-560",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a corporation has 1 million shares in circulation and earnings of £2 million, and decides to use £10 million of unused cash to buy back shares on the open market at a trading price of £50 per share, what would be the corporation's earnings per share after the entire £10 million of unused cash is used to buy back shares?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_shares = 1000000\n    earnings = 2000000\n    buyback_amount = 10000000\n    share_price = 50\n\n    # Do math calculation to get the answer\n    shares_bought_back = buyback_amount / share_price\n    remaining_shares = initial_shares - shares_bought_back\n    \n    earnings_per_share = earnings / remaining_shares\n\n    # return answer\n    return round(earnings_per_share, 2)\n```\n\nThis program calculates the earnings per share after the share buyback:\n\n1. We define the initial variables:\n   - `initial_shares`: 1 million shares in circulation\n   - `earnings`: £2 million\n   - `buyback_amount`: £10 million of unused cash\n   - `share_price`: £50 per share\n\n2. We calculate the number of shares bought back by dividing the buyback amount by the share price.\n\n3. We subtract the shares bought back from the initial shares to get the remaining shares.\n\n4. We calculate the new earnings per share by dividing the earnings by the remaining shares.\n\n5. Finally, we return the result rounded to 2 decimal places for better readability.\n\nThis program will return the corporation's earnings per share after the entire £10 million of unused cash is used to buy back shares."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-561",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we presume that the market interest rate abides by the mean reversion law, with the long-term average interest rate at 4%, the current interest rate at 3.5%, and a mean reverting rate of 0.3, what will be the forecasted market interest rate for the subsequent period?",
        "output": [
            "Here's a Python program to answer the given question about forecasting the market interest rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    long_term_average_rate = 0.04  # 4%\n    current_rate = 0.035  # 3.5%\n    mean_reverting_rate = 0.3\n\n    # Do math calculation to get the answer\n    rate_difference = long_term_average_rate - current_rate\n    rate_change = mean_reverting_rate * rate_difference\n    forecasted_rate = current_rate + rate_change\n\n    # return answer\n    return forecasted_rate\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The forecasted market interest rate for the subsequent period is: {result:.4%}\")\n```\n\nThis program uses the mean reversion model to forecast the interest rate for the subsequent period. Here's how it works:\n\n1. We define the variables:\n   - `long_term_average_rate`: The long-term average interest rate (4% or 0.04)\n   - `current_rate`: The current interest rate (3.5% or 0.035)\n   - `mean_reverting_rate`: The mean reverting rate (0.3)\n\n2. We calculate the forecasted rate:\n   - First, we find the difference between the long-term average rate and the current rate.\n   - Then, we multiply this difference by the mean reverting rate to get the expected rate change.\n   - Finally, we add this change to the current rate to get the forecasted rate.\n\n3. The function returns the forecasted rate as a decimal (e.g., 0.0365 for 3.65%).\n\nYou can run this function to get the forecasted market interest rate for the subsequent period. The result will be a decimal representing the interest rate (e.g., 0.0365 for 3.65%)."
        ]
    },
    {
        "tables": [
            "|         | Beginning of the Year (C thousands) | End of the Year ( thousands) |\n|---------|------------------------------------|------------------------------|\n| Investment property | 1,000                            | 1,100                        |\n| Plant    | 1,000                            | 1,200                        |"
        ],
        "topic": "Accounting",
        "question_id": "test-562",
        "python_solution": "",
        "ground_truth": null,
        "question": "A firm adhering to International Financial Reporting Standards (IFRS) doesn't apply the cost model when valuing its investment properties and property, plant, and equipment. Data regarding an investment property and a plant are provided below: The firm will probably record a profit (in thousands) on its income statement for the year of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_property_start = 1000\n    investment_property_end = 1100\n    plant_start = 1000\n    plant_end = 1200\n\n    # Do math calculation to get the answer\n    investment_property_gain = investment_property_end - investment_property_start\n    plant_gain = plant_end - plant_start\n    total_gain = investment_property_gain + plant_gain\n\n    # return answer\n    return total_gain\n```\n\nThis Python function calculates the total gain (profit) that the firm will likely record on its income statement for the year, based on the provided information.\n\nHere's a breakdown of the calculation:\n\n1. We define the beginning and end-of-year values for both the investment property and the plant.\n\n2. We calculate the gain for the investment property by subtracting the beginning value from the end value.\n\n3. We do the same for the plant.\n\n4. We sum these two gains to get the total gain.\n\n5. The function returns this total gain.\n\nUnder IFRS, when a company doesn't use the cost model for investment properties and property, plant, and equipment, it typically uses the fair value model or revaluation model. In these models, changes in fair value are recognized in the income statement (for investment property) or other comprehensive income (for PP&E).\n\nThe calculated gain of 300 thousand (100 from investment property + 200 from plant) represents the increase in fair value that would be recognized as profit in the income statement for the year."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | | Current | Capital Market Expectations |\n| :---: | :---: | :---: | :---: |\n| **Average government bond yield:** 2.8% | | 10-year government bond yield: 2.3% |  |\n| **Average annual equity return:** 4.6% | | Year-over-year equity return: -9.4% |  |\n| **Average annual inflation rate:** 2.3% | | Year-over-year inflation rate:  2.1% | Expected annual inflation: 2.3% |\n| **Equity market P/E (beginning of period):** 15x | | Current equity market P/E: 14.5x | Expected equity market P / E: 14.0x |\n| **Average annual dividend income return:** 2.6% | |  | Expected annual income return: 2.4% |\n| **Average annual real earnings growth:** 6.0% | | |Expected annual real earnings growth:  5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-563",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier from Australia presently owns an equity portfolio worth A$240 million. He's contemplating adjusting the portfolio depending on the evaluation of the risk and return potential concerning the Australian economy. The details associated with the Australian investment markets and economy have all been compiled in this table: Utilizing the data in the table and the Grinold-Kroner model, what is the anticipated yearly equity risk premium?",
        "output": [
            "Here's a Python program to calculate the anticipated yearly equity risk premium using the Grinold-Kroner model based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_dividend_yield = 0.024  # 2.4%\n    expected_inflation = 0.023  # 2.3%\n    expected_real_earnings_growth = 0.050  # 5.0%\n    current_pe = 14.5\n    expected_pe = 14.0\n    bond_yield = 0.023  # 2.3%\n    \n    # Do math calculation to get the answer\n    \n    # Calculate expected total return using Grinold-Kroner model\n    repricing_return = (expected_pe / current_pe) ** (1/10) - 1  # Annualized over 10 years\n    expected_total_return = (\n        expected_dividend_yield +\n        expected_inflation +\n        expected_real_earnings_growth +\n        repricing_return\n    )\n    \n    # Calculate equity risk premium\n    equity_risk_premium = expected_total_return - bond_yield\n    \n    # Convert to percentage\n    equity_risk_premium_percent = equity_risk_premium * 100\n    \n    # return answer\n    return round(equity_risk_premium_percent, 2)\n```\n\nThis program uses the Grinold-Kroner model to calculate the expected total return on equities and then subtracts the bond yield to get the equity risk premium. The result is rounded to two decimal places and returned as a percentage."
        ]
    },
    {
        "tables": [
            "|                            |   2018 |   2019 |\n|----------------------------|--------|--------|\n| Revenue                    | 5,000  | 7,000  |\n| Cost                       | 2,000  | 2,300  |\n| Operating income           | 3,000  | 4,700  |\n| Net profit                 | 1,650  | 2,300  |\n| Total assets               | 4,000  | 6,000  |\n| Total liabilities          | 1,200  | 900    |\n| Equity                     | 2,800  | 5,100  |",
            "|                       | 2018 | 2019 |\n|-----------------------|------|------|\n| Revenue               | 2000 | 2500 |\n| Cost                  | 1200 | 1300 |\n| Operating income      | 800  | 1200 |\n| Net profit            | 460  | 820  |\n| Dividends paid        | 230  | 410  |\n| Total assets          | 1000 | 1100 |\n| Total liabilities     | 600  | 650  |\n| Equity                | 400  | 450  |"
        ],
        "topic": "Accounting",
        "question_id": "test-564",
        "python_solution": "",
        "ground_truth": null,
        "question": "The education company ZP, which is based in China and follows IFRS, had a passive equity interest of 15% in U-web company in 2018. ZP decided to bump up its ownership interest to 50% at the beginning of 2019 through a cash purchase. Both companies have no intercompany transactions. The financial data for ZP and U-web companies are provided in the table below. Could you compute the net income of ZP company for 2019 assuming a significant influence over U-web company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    zp_net_profit_2019 = 2300\n    uweb_net_profit_2019 = 820\n    zp_ownership_2019 = 0.50\n\n    # Do math calculation to get the answer\n    equity_income = uweb_net_profit_2019 * zp_ownership_2019\n    zp_net_income_2019 = zp_net_profit_2019 + equity_income\n\n    # return answer\n    return zp_net_income_2019\n```\n\nThis Python program calculates the net income of ZP company for 2019, assuming significant influence over U-web company. Here's the explanation:\n\n1. We define the relevant variables:\n   - ZP's net profit for 2019 (2300)\n   - U-web's net profit for 2019 (820)\n   - ZP's ownership percentage in U-web for 2019 (50% or 0.50)\n\n2. We calculate the equity income from U-web:\n   - Equity income = U-web's net profit * ZP's ownership percentage\n   - This represents the portion of U-web's profit that ZP can claim due to its significant influence\n\n3. We calculate ZP's net income for 2019:\n   - ZP's net income = ZP's own net profit + Equity income from U-web\n\n4. The function returns the calculated net income for ZP in 2019\n\nThis calculation assumes significant influence, which means ZP uses the equity method to account for its investment in U-web. Under this method, ZP recognizes its proportionate share of U-web's net income in its own income statement."
        ]
    },
    {
        "tables": [
            "|                                         |            |\n|-----------------------------------------|------------|\n| Exhibit 1. Company A Excerpt from Consolidated Income Statement Year|            |       \n| Ending 31 December 2013 ($ in millions) |            |       \n| Gross profit                            |6,290       |     \n| Royalty and commission income            |130         |      \n| Other operating income                   |140         |      \n| Other operating expenses                 |4,985       |      \n| Operating profit                         |906         |      \n| Interest income                          |37          |      \n| Interest expense                         |135         |      \n| Income before taxes                      |988         |      \n| Income taxes                             |257         |      \n| Net income                               |692         |      \n| Additional Information:                  |            |\n| Depreciation and amortization:  $264 million |264     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-565",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided information, what is the EBITDA interest coverage ratio of company B?",
        "output": [
            "def solution():\n    # Define variables name and value\n    operating_profit = 906\n    depreciation_amortization = 264\n    interest_expense = 135\n\n    # Do math calculation to get the answer\n    ebitda = operating_profit + depreciation_amortization\n    ebitda_interest_coverage_ratio = ebitda / interest_expense\n\n    # return answer\n    return ebitda_interest_coverage_ratio\n\n```\n\nThis Python program calculates the EBITDA interest coverage ratio for Company A (not B, as the question mistakenly states) based on the provided information. Here's a breakdown of the calculation:\n\n1. We define the relevant variables from the given financial statement:\n   - Operating profit: $906 million\n   - Depreciation and amortization: $264 million\n   - Interest expense: $135 million\n\n2. We calculate EBITDA by adding operating profit and depreciation/amortization:\n   EBITDA = Operating profit + Depreciation and amortization\n   \n3. We then calculate the EBITDA interest coverage ratio by dividing EBITDA by interest expense:\n   EBITDA interest coverage ratio = EBITDA / Interest expense\n\n4. The function returns the calculated ratio.\n\nThis ratio indicates how many times a company can cover its interest expenses with its earnings before interest, taxes, depreciation, and amortization (EBITDA). A higher ratio suggests that the company is in a better position to meet its interest obligations."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-566",
        "python_solution": "",
        "ground_truth": null,
        "question": "Finally, David concentrates on predicting the anticipated returns from direct real estate investments. He reviews a decade's worth of data on returns from multifamily residential real estate. David doubts whether the fluctuations in the observed returns indicate smoothing. He applies a publicly available REIT index to eliminate the smoothing effect on the return flow and accurately represent the risk (gauge by standard deviation) related to multifamily residential real estate investment (the REIT index's variance for the measurement duration is 16; λ is 0.8). What is David’s adjusted standard deviation for multifamily properties for the investment duration?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    reit_variance = 16\n    lambda_value = 0.8\n\n    # Do math calculation to get the answer\n    adjusted_variance = reit_variance / lambda_value\n    adjusted_std_dev = (adjusted_variance) ** 0.5\n\n    # return answer\n    return adjusted_std_dev\n```\n\nThis Python program calculates the adjusted standard deviation for multifamily properties based on the given information:\n\n1. We define the REIT index variance (16) and the lambda value (0.8) as variables.\n\n2. To calculate the adjusted variance, we divide the REIT variance by lambda. This is based on the formula for unsmoothing returns: Var(R*) = Var(R) / λ, where R* is the unsmoothed return series, R is the observed return series, and λ is the smoothing parameter.\n\n3. To get the standard deviation, we take the square root of the adjusted variance.\n\n4. The function returns the adjusted standard deviation.\n\nWhen you run this function, it will return the adjusted standard deviation for multifamily properties, which represents the more accurate risk measure after eliminating the smoothing effect."
        ]
    },
    {
        "tables": [
            "| Current industrial sector capitalization rate (\"cap\" rate) | 5.7% |\n|-----------------------------------------------------------|-----|\n| Expected cap rate at the end of the period                | 5.5% |\n| NOI growth rate (real)                                    | 1%   |\n| Inflation expectation                                     | 1.5% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-567",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher at a property investment company is trying to set predictions for the return rate of industrial properties for the upcoming year. He has gathered the following information: Calculate the anticipated return from the industrial sector properties based on the data presented.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_cap_rate = 0.057\n    expected_cap_rate = 0.055\n    noi_growth_rate = 0.01\n    inflation_rate = 0.015\n\n    # Do math calculation to get the answer\n    income_return = current_cap_rate\n    capital_growth = (1 + noi_growth_rate) * (1 + inflation_rate) * (current_cap_rate / expected_cap_rate) - 1\n    total_return = income_return + capital_growth\n\n    # return answer\n    return total_return * 100  # Convert to percentage\n```\n\nThis Python function calculates the anticipated return from the industrial sector properties based on the given data. Here's a breakdown of the calculation:\n\n1. We define the variables based on the provided information.\n\n2. The income return is equal to the current cap rate.\n\n3. The capital growth is calculated using the formula:\n   (1 + NOI growth rate) * (1 + inflation rate) * (current cap rate / expected cap rate) - 1\n\n4. The total return is the sum of income return and capital growth.\n\n5. We return the total return as a percentage (multiplied by 100).\n\nThis calculation takes into account the current and expected cap rates, NOI growth rate, and inflation expectations to provide a comprehensive estimate of the anticipated return."
        ]
    },
    {
        "tables": [
            "|          | March 31,20X7                        | April 30,20X7                         |\n|----------|-----------------|---------------------------------|---------------|---------------------------------|\n|          | Share Price     | Number of Shares Outstanding(thousands) | Share Price   | Number of Shares Outstanding(thousands) |\n| Stock X  | $15             | 100                             | $20           | 100                             |\n| Stock Y  | $20             | 1,000                           | $30           | 1,000                           |\n| Stock Z  | $30             | 2,000                           | $25           | 2,000                           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-568",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided for the trio of shares listed in the chart, determine the return on the price-weighted index over a month's span.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    march_prices = [15, 20, 30]\n    april_prices = [20, 30, 25]\n    \n    # Do math calculation to get the answer\n    march_index = sum(march_prices) / len(march_prices)\n    april_index = sum(april_prices) / len(april_prices)\n    \n    return_on_index = (april_index - march_index) / march_index\n    \n    # Convert to percentage and round to 2 decimal places\n    return_percentage = round(return_on_index * 100, 2)\n    \n    # return answer\n    return return_percentage\n```\n\nThis Python program calculates the return on the price-weighted index over a month's span based on the given data. Here's how it works:\n\n1. We define two lists: `march_prices` and `april_prices`, containing the share prices for each stock in March and April respectively.\n\n2. We calculate the price-weighted index for March and April by summing up the prices and dividing by the number of stocks.\n\n3. We then calculate the return on the index using the formula: (New Value - Old Value) / Old Value\n\n4. The result is converted to a percentage by multiplying by 100 and rounded to 2 decimal places for readability.\n\n5. Finally, the program returns the percentage return.\n\nThis solution assumes equal weighting for each stock in the price-weighted index, which is consistent with the concept of a price-weighted index like the Dow Jones Industrial Average."
        ]
    },
    {
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity | Spot Rates |\n|------|-------------|------------------|------------|\n| X    | 8%          | 3 years          | 8%         |\n| Y    | 7%          | 3 years          | 9%         |\n| Z    | 6%          | 3 years          | 10%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-569",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based upon the presented series of spot rates, what is the price of Bond Y if all three bonds pay their interest yearly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming a face value of 100\n    coupon_rate = 0.07  # 7% coupon rate for Bond Y\n    years = 3  # Time-to-maturity\n    spot_rate = 0.09  # 9% spot rate for Bond Y\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    # Calculate present value of coupon payments\n    pv_coupons = sum([coupon_payment / (1 + spot_rate)**t for t in range(1, years+1)])\n    \n    # Calculate present value of face value\n    pv_face_value = face_value / (1 + spot_rate)**years\n    \n    # Sum present values to get bond price\n    bond_price = pv_coupons + pv_face_value\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of Bond Y based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - Face value is assumed to be 100 (standard for bonds)\n   - Coupon rate is 7% (0.07) for Bond Y\n   - Time-to-maturity is 3 years\n   - Spot rate is 9% (0.09) for Bond Y\n\n2. We calculate the annual coupon payment.\n\n3. We calculate the present value of all coupon payments using a list comprehension and the sum function.\n\n4. We calculate the present value of the face value to be received at maturity.\n\n5. We sum these present values to get the bond price.\n\n6. Finally, we return the bond price rounded to two decimal places.\n\nThis program will return the price of Bond Y, taking into account the yearly interest payments and the given spot rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-570",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher compiled the following details about a business: The business has a taxable income of $40,000 and a pretax income of $50,000. The prevailing tax rate is 50% and the tax rate when the reversal happens will be 40%. What is the business's deferred tax liability at the close of the first year?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 40000\n    pretax_income = 50000\n    current_tax_rate = 0.50\n    future_tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    temporary_difference = pretax_income - taxable_income\n    deferred_tax_liability = temporary_difference * future_tax_rate\n\n    # return answer\n    return deferred_tax_liability\n```\n\nThis program calculates the deferred tax liability for the business based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the temporary difference between pretax income and taxable income.\n3. The deferred tax liability is then calculated by multiplying the temporary difference by the future tax rate (40% or 0.40).\n4. The function returns the calculated deferred tax liability.\n\nWhen you run this function, it will return the deferred tax liability at the close of the first year, which is $4,000 (10,000 * 0.40)."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-571",
        "python_solution": "",
        "ground_truth": null,
        "question": "Summit Resale operates through internet for people on an agreed basis. Summit gets the items from the owners, puts them up for sale online, and earns a 25 percent commission for any items sold. Summit collects the entire amount from the buyer and pays the gross amount after commission to the owner. If items remain unsold, they are returned to the owner after 90 days. During 2019, Summit had these details: • Total sales price of items sold on agreed basis during 2019 was €2,000,000. • Total commissions that Summit retained during 2019 for these items totalled €500,000. How much revenue should Summit report on its 2019 income statement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_sales_price = 2000000\n    total_commissions = 500000\n    \n    # Do math calculation to get the answer\n    revenue = total_commissions\n    \n    # return answer\n    return revenue\n```\n\nThis Python program calculates the revenue that Summit Resale should report on its 2019 income statement. Here's an explanation of the solution:\n\n1. We define two variables:\n   - `total_sales_price`: The total sales price of items sold on agreed basis during 2019 (€2,000,000)\n   - `total_commissions`: The total commissions that Summit retained during 2019 (€500,000)\n\n2. For the calculation, we simply set the revenue equal to the total commissions. This is because Summit operates on a commission basis, and their revenue is only the commission they earn from sales, not the total sales price.\n\n3. We return the `revenue` as the answer.\n\nThe program will return 500000, which represents €500,000 in revenue that Summit should report on its 2019 income statement. This is the correct amount because Summit only earns the commission as its revenue, not the entire sales price of the items sold."
        ]
    },
    {
        "tables": [
            "|                   | Asset A, Asset B | A and B |\n|-------------------|------------------|---------|\n| Standard deviation| 4.7%, 7.7%       |         |\n| Portfolio weight  | 0.4, 0.6         |         |\n| Correlation       |                  | 0.3     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-572",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the historical data presented, what is the standard deviation for the two-asset portfolio displayed in the chart?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    std_dev_A = 0.047  # 4.7%\n    std_dev_B = 0.077  # 7.7%\n    weight_A = 0.4\n    weight_B = 0.6\n    correlation = 0.3\n\n    # Do math calculation to get the answer\n    variance_A = std_dev_A ** 2\n    variance_B = std_dev_B ** 2\n    \n    portfolio_variance = (weight_A ** 2 * variance_A) + \\\n                         (weight_B ** 2 * variance_B) + \\\n                         (2 * weight_A * weight_B * std_dev_A * std_dev_B * correlation)\n    \n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis Python program calculates the standard deviation of a two-asset portfolio using the following steps:\n\n1. We define the variables based on the given information:\n   - Standard deviations for Asset A and B\n   - Portfolio weights for Asset A and B\n   - Correlation between Asset A and B\n\n2. We calculate the portfolio variance using the formula:\n   Var(p) = w_A^2 * Var(A) + w_B^2 * Var(B) + 2 * w_A * w_B * StdDev(A) * StdDev(B) * Correlation(A,B)\n\n3. We then calculate the portfolio standard deviation by taking the square root of the portfolio variance.\n\n4. Finally, we return the calculated portfolio standard deviation as the answer.\n\nThis program will return the standard deviation of the two-asset portfolio based on the provided historical data."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-573",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2017, Company B had an inventory on hand of 30 days and aimed to reach the standard industry average of 28 days in 2018. The recent year's cost of goods sold was $1.2 million in 2017, and it was projected to lower to $0.35 million in 2018. What was the inventory change?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    inventory_days_2017 = 30\n    inventory_days_2018 = 28\n    cogs_2017 = 1200000\n    cogs_2018 = 350000\n    \n    # Do math calculation to get the answer\n    inventory_2017 = (inventory_days_2017 / 365) * cogs_2017\n    inventory_2018 = (inventory_days_2018 / 365) * cogs_2018\n    \n    inventory_change = inventory_2018 - inventory_2017\n    \n    # return answer\n    return round(inventory_change, 2)\n```\n\nThis program calculates the inventory change between 2017 and 2018 based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables for inventory days and cost of goods sold (COGS) for both years.\n2. We calculate the inventory for each year by multiplying the ratio of inventory days to total days in a year (365) by the COGS for that year.\n3. We then calculate the inventory change by subtracting the 2017 inventory from the 2018 inventory.\n4. Finally, we return the result rounded to two decimal places.\n\nThe returned value represents the inventory change in dollars. A negative value indicates a decrease in inventory, while a positive value indicates an increase."
        ]
    },
    {
        "tables": [
            "| Year | Investment Return |\n|------|-------------------|\n| 1    | $600 13%          |\n| 2    | $700 5%           |\n| 3    | $1,000 -1%        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-574",
        "python_solution": "",
        "ground_truth": null,
        "question": "The fund managed by John displays the following returns for the first three years: What will the time-weighted rate of return be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    return_year1 = 0.13  # 13%\n    return_year2 = 0.05  # 5%\n    return_year3 = -0.01  # -1%\n\n    # Do math calculation to get the answer\n    time_weighted_return = (1 + return_year1) * (1 + return_year2) * (1 + return_year3) - 1\n    \n    # Convert to percentage and round to 2 decimal places\n    time_weighted_return_percentage = round(time_weighted_return * 100, 2)\n\n    # return answer\n    return time_weighted_return_percentage\n```\n\nThis Python program calculates the time-weighted rate of return for the given investment returns over three years. Here's how it works:\n\n1. We define the return rates for each year as decimal values.\n\n2. To calculate the time-weighted return, we:\n   - Add 1 to each year's return (to get the growth factor)\n   - Multiply these factors together\n   - Subtract 1 from the result to get the overall return rate\n\n3. We then convert this decimal to a percentage by multiplying by 100 and round to 2 decimal places for readability.\n\n4. The function returns this final percentage value.\n\nWhen you run this function, it will return the time-weighted rate of return as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-575",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming 260 days a year, an option on the Nikkei stock index has a strike price at 3,000 Brazilian reais (BRL) with a delta of 0.6 and an annual volatility on the index of 24%. What is the 10-day VaR at 95% confidence level, under the delta-normal assumptions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    days_per_year = 260\n    strike_price = 3000  # in BRL\n    delta = 0.6\n    annual_volatility = 0.24\n    confidence_level = 0.95\n    var_days = 10\n\n    # Do math calculation to get the answer\n    import math\n    \n    # Calculate daily volatility\n    daily_volatility = annual_volatility / math.sqrt(days_per_year)\n    \n    # Calculate 10-day volatility\n    ten_day_volatility = daily_volatility * math.sqrt(var_days)\n    \n    # Calculate z-score for 95% confidence level\n    z_score = 1.645  # This is the z-score for 95% confidence level\n    \n    # Calculate VaR\n    var = strike_price * delta * ten_day_volatility * z_score\n    \n    # return answer\n    return var\n```\n\nThis Python program calculates the 10-day Value at Risk (VaR) for the given option on the Nikkei stock index, using the delta-normal method. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the daily volatility by dividing the annual volatility by the square root of trading days in a year.\n3. We then calculate the 10-day volatility by multiplying the daily volatility by the square root of 10.\n4. The z-score for a 95% confidence level is approximately 1.645 (this is a standard value in statistics).\n5. Finally, we calculate the VaR using the formula: VaR = Position Size * Delta * Volatility * Z-score\n\nThe function returns the calculated VaR in Brazilian reais (BRL). This represents the potential loss in the value of the option over a 10-day period with a 95% confidence level, assuming normal market conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-576",
        "python_solution": "",
        "ground_truth": null,
        "question": "The preferred stock of Alpha Enterprises is traded in the financial market for $88 per share. The annual dividend per share is always $6.60. What is the required rate of return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_price = 88\n    annual_dividend = 6.60\n    \n    # Do math calculation to get the answer\n    required_rate_of_return = (annual_dividend / market_price) * 100\n    \n    # return answer\n    return round(required_rate_of_return, 2)\n```\n\nThis Python program calculates the required rate of return for the preferred stock of Alpha Enterprises. Here's how it works:\n\n1. We define two variables:\n   - `market_price`: The current trading price of the stock, which is $88 per share.\n   - `annual_dividend`: The fixed annual dividend per share, which is $6.60.\n\n2. To calculate the required rate of return, we use the formula:\n   Required Rate of Return = (Annual Dividend / Market Price) * 100\n\n3. We perform this calculation and store the result in `required_rate_of_return`.\n\n4. Finally, we return the result rounded to two decimal places using the `round()` function.\n\nWhen you run this function, it will return the required rate of return as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-577",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a portfolio that consists of four investments, what is the number of unique covariance terms required to calculate the portfolio's return variance?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_investments = 4\n\n    # Do math calculation to get the answer\n    unique_covariance_terms = (num_investments * (num_investments - 1)) // 2\n\n    # return answer\n    return unique_covariance_terms\n```\n\nThis Python program calculates the number of unique covariance terms required for a portfolio with four investments:\n\n1. We define the number of investments as 4.\n\n2. The formula for calculating the number of unique covariance terms in a portfolio is:\n   n * (n - 1) / 2, where n is the number of investments.\n\n3. We use integer division (//) to ensure we get an integer result.\n\n4. The program returns the calculated number of unique covariance terms.\n\nFor a portfolio with 4 investments, this will return 6, which is the correct number of unique covariance terms required to calculate the portfolio's return variance."
        ]
    },
    {
        "tables": [
            "| Acquisition cost | £5,800,000 |\n| --- | --- |\n| Acquisition date | 1 January 2009 |\n| Patent expiration date | 31 December 2015 |\n| Total plant capacity of patented product | 40,000 units per year |\n| Production of patented product in fiscal year ended 31 December 2009 | 20,000 units |\n| Expected production of patented product during life of the patent | 175,000 units |"
        ],
        "topic": "Accounting",
        "question_id": "test-578",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financial expert is examining the amortization of a product patent purchased by the Italian firm, MAKETTI S.p.A., what would be the 2009 fiscal year's amortization expense on the patent using the units-of-production approach, based on the patent information he has collected?",
        "output": [
            "Here's a Python program to calculate the 2009 fiscal year's amortization expense on the patent using the units-of-production approach:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 5800000  # in pounds\n    expected_production = 175000  # units\n    production_2009 = 20000  # units\n\n    # Do math calculation to get the answer\n    amortization_per_unit = acquisition_cost / expected_production\n    amortization_2009 = amortization_per_unit * production_2009\n\n    # return answer\n    return round(amortization_2009, 2)\n```\n\nThis program does the following:\n\n1. We define the relevant variables:\n   - `acquisition_cost`: The cost of acquiring the patent (£5,800,000)\n   - `expected_production`: The total expected production during the life of the patent (175,000 units)\n   - `production_2009`: The actual production in the 2009 fiscal year (20,000 units)\n\n2. We calculate the amortization:\n   - First, we calculate the amortization per unit by dividing the acquisition cost by the total expected production.\n   - Then, we multiply this per-unit amortization by the actual production in 2009 to get the amortization expense for that year.\n\n3. We return the result, rounded to two decimal places for currency representation.\n\nWhen you run this function, it will return the amortization expense for the 2009 fiscal year using the units-of-production approach."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-579",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the justified trailing P/E of the stock, considering that the firm's present intrinsic value and EPS stand at $25.62 and $4 respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intrinsic_value = 25.62\n    eps = 4.00\n    \n    # Do math calculation to get the answer\n    justified_pe = intrinsic_value / eps\n    \n    # return answer\n    return justified_pe\n```\n\nThis Python program calculates the justified trailing P/E ratio based on the given information:\n\n1. We define two variables:\n   - `intrinsic_value`: The present intrinsic value of the stock, which is $25.62\n   - `eps`: The Earnings Per Share (EPS), which is $4\n\n2. To calculate the justified trailing P/E ratio, we divide the intrinsic value by the EPS.\n\n3. The function returns the calculated justified P/E ratio.\n\nWhen you run this function, it will return the justified trailing P/E ratio, which in this case would be approximately 6.405. This means that based on the current intrinsic value and earnings, the justified P/E ratio for this stock is about 6.41."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-580",
        "python_solution": "",
        "ground_truth": null,
        "question": "A shareholder buys 100 stocks at a price of $40 for each. After exactly one year, this shareholder sells all of them for $41.50 per stock. On the same day of the sale, the shareholder gets dividends amounting to $200. What is the HPR on the investment?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100 * 40  # 100 stocks at $40 each\n    selling_price = 100 * 41.50  # 100 stocks at $41.50 each\n    dividends = 200\n\n    # Do math calculation to get the answer\n    capital_gain = selling_price - initial_investment\n    total_return = capital_gain + dividends\n    hpr = (total_return / initial_investment) * 100\n\n    # return answer\n    return round(hpr, 2)\n```\n\nThis program calculates the Holding Period Return (HPR) for the given investment scenario. Here's a breakdown of the calculation:\n\n1. We calculate the initial investment: 100 stocks * $40 per stock = $4000\n2. We calculate the selling price: 100 stocks * $41.50 per stock = $4150\n3. We calculate the capital gain: $4150 - $4000 = $150\n4. We add the dividends ($200) to the capital gain for total return: $150 + $200 = $350\n5. We calculate the HPR: (Total Return / Initial Investment) * 100\n   HPR = ($350 / $4000) * 100 = 8.75%\n\nThe program returns the HPR rounded to two decimal places, which in this case is 8.75%."
        ]
    },
    {
        "tables": [
            "|                        | 2018 | 2017 |\n|------------------------|------|------|\n| Cost of goods sold (COGS) | 50,800 | 48,500 |\n| Ending inventories | 10,550 | 10,000 |\n| LIFO reserve | 4,320 | 2,600 |"
        ],
        "topic": "Accounting",
        "question_id": "test-581",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the FIFO method's reported Cost of Goods Sold in 2018 by a firm adopting the LIFO method in £?",
        "output": [
            "def solution():\n    # Define variables name and value\n    cogs_lifo_2018 = 50800\n    lifo_reserve_2018 = 4320\n    lifo_reserve_2017 = 2600\n\n    # Do math calculation to get the answer\n    change_in_lifo_reserve = lifo_reserve_2018 - lifo_reserve_2017\n    cogs_fifo_2018 = cogs_lifo_2018 - change_in_lifo_reserve\n\n    # return answer\n    return cogs_fifo_2018\n\n```\n\nThis Python program calculates the FIFO method's reported Cost of Goods Sold (COGS) for 2018 when the firm is using the LIFO method. Here's how it works:\n\n1. We define the necessary variables:\n   - `cogs_lifo_2018`: The LIFO COGS for 2018 (50,800)\n   - `lifo_reserve_2018`: The LIFO reserve for 2018 (4,320)\n   - `lifo_reserve_2017`: The LIFO reserve for 2017 (2,600)\n\n2. We calculate the change in LIFO reserve from 2017 to 2018:\n   `change_in_lifo_reserve = lifo_reserve_2018 - lifo_reserve_2017`\n\n3. To get the FIFO COGS, we subtract the change in LIFO reserve from the LIFO COGS:\n   `cogs_fifo_2018 = cogs_lifo_2018 - change_in_lifo_reserve`\n\n4. Finally, we return the calculated FIFO COGS for 2018.\n\nThis program will return the FIFO method's reported Cost of Goods Sold for 2018 in £, which is 49,080."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-582",
        "python_solution": "",
        "ground_truth": null,
        "question": "How many exceptions in backtesting a VAR would we anticipate over a 250-day trading year if we hold a 90% confidence level?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    trading_days = 250\n    confidence_level = 0.90\n    \n    # Do math calculation to get the answer\n    exceptions_rate = 1 - confidence_level\n    expected_exceptions = trading_days * exceptions_rate\n    \n    # return answer\n    return expected_exceptions\n```\n\nThis program calculates the expected number of exceptions in backtesting a Value at Risk (VaR) model over a 250-day trading year with a 90% confidence level. \n\nHere's how it works:\n\n1. We define the number of trading days (250) and the confidence level (0.90 or 90%).\n\n2. We calculate the exception rate, which is 1 minus the confidence level. This gives us the probability of an exception occurring on any given day.\n\n3. We multiply the number of trading days by the exception rate to get the expected number of exceptions over the year.\n\n4. The function returns this expected number of exceptions.\n\nWhen you run this function, it will return 25, meaning we would anticipate approximately 25 exceptions over a 250-day trading year if we hold a 90% confidence level in our VaR model."
        ]
    },
    {
        "tables": [
            "| Investment | Expected Return(%) | Expected Standard Deviation(%) |\n|------------|-------------------|--------------------------------|\n| 1          | 19                | 3                              |\n| 2          | 21                | 9                              |\n| 3          | 24                | 20                             |\n| 4          | 19                | 35                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-583",
        "python_solution": "",
        "ground_truth": null,
        "question": "As a risk-neutral investor, John Smith will use utility theory to select his investment portfolio. Given several investments with their expected return and expected standard deviation on the table, which one would he most probably invest in?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investments = [\n        {\"id\": 1, \"return\": 19, \"std_dev\": 3},\n        {\"id\": 2, \"return\": 21, \"std_dev\": 9},\n        {\"id\": 3, \"return\": 24, \"std_dev\": 20},\n        {\"id\": 4, \"return\": 19, \"std_dev\": 35}\n    ]\n    \n    # Do math calculation to get the answer\n    # For a risk-neutral investor, only the expected return matters\n    best_investment = max(investments, key=lambda x: x[\"return\"])\n    \n    # return answer\n    return best_investment[\"id\"]\n```\n\nThis Python program defines a list of dictionaries representing the investments, with their respective IDs, expected returns, and standard deviations. Since John Smith is described as a risk-neutral investor, he will only consider the expected return when making his decision, ignoring the risk (standard deviation).\n\nThe program uses the `max()` function with a `key` parameter to find the investment with the highest expected return. The `lambda` function `lambda x: x[\"return\"]` is used to specify that we want to compare the investments based on their \"return\" value.\n\nFinally, the program returns the ID of the investment with the highest expected return, which is the one John Smith would most likely choose as a risk-neutral investor."
        ]
    },
    {
        "tables": [
            "| Buyer | Bid Size (# of shares) | Limit Price ($) | Seller | Offer Size (# of shares) | Limit Price ($) |\n|-------|------------------------|-----------------|--------|--------------------------|-----------------|\n| 1     | 500                    | 18.50           | 1      | 200                      | 20.20           |\n| 2     | 300                    | 18.90           | 2      | 300                      | 20.35           |\n| 3     | 400                    | 19.20           | 3      | 400                      | 20.50           |\n| 4     | 200                    | 20.10           | 4      | 100                      | 20.65           |\n| 5     | 100                    | 20.15           | 5      | 200                      | 20.70           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-584",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an investor places an immediate-or-cancel limit purchase order for 700 shares at a price of $20.50 in a market, what would probably be the average price the investor would be required to pay, considering the existing limit orders on its book for a specific stock?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    order_size = 700\n    order_price = 20.50\n    \n    sellers = [\n        {\"size\": 200, \"price\": 20.20},\n        {\"size\": 300, \"price\": 20.35},\n        {\"size\": 400, \"price\": 20.50},\n        {\"size\": 100, \"price\": 20.65},\n        {\"size\": 200, \"price\": 20.70}\n    ]\n\n    # Do math calculation to get the answer\n    total_cost = 0\n    shares_bought = 0\n\n    for seller in sellers:\n        if seller[\"price\"] <= order_price and shares_bought < order_size:\n            shares_to_buy = min(seller[\"size\"], order_size - shares_bought)\n            total_cost += shares_to_buy * seller[\"price\"]\n            shares_bought += shares_to_buy\n\n        if shares_bought == order_size:\n            break\n\n    if shares_bought > 0:\n        average_price = total_cost / shares_bought\n    else:\n        average_price = 0\n\n    # return answer\n    return round(average_price, 2)\n```\n\nThis program calculates the average price the investor would be required to pay for an immediate-or-cancel limit purchase order of 700 shares at $20.50, considering the existing limit orders in the book.\n\nThe program does the following:\n\n1. Defines the order size (700 shares) and the limit price ($20.50).\n2. Creates a list of sellers with their offer sizes and prices from the given table.\n3. Iterates through the sellers, buying shares from those with prices at or below the limit price until the order is filled or no more eligible sellers are available.\n4. Calculates the total cost and the number of shares bought.\n5. Computes the average price by dividing the total cost by the number of shares bought.\n6. Returns the average price rounded to two decimal places.\n\nThis solution assumes that the order will be partially filled if the full 700 shares cannot be purchased at or below the limit price of $"
        ]
    },
    {
        "tables": [
            "| 2015 | | 2014 |\n| --- | --- | --- |\n| Deferred tax assets $1,000,000 | | $800,000 |\n| Deferred tax liabilities $600,000 | | $700,000 |\n| Valuation allowance $500,000 | | $400,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-585",
        "python_solution": "",
        "ground_truth": null,
        "question": "How did the alterations in the firm's deferred tax accounts impact the net income of 2015 according to US GAAP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    deferred_tax_assets_2015 = 1000000\n    deferred_tax_assets_2014 = 800000\n    deferred_tax_liabilities_2015 = 600000\n    deferred_tax_liabilities_2014 = 700000\n    valuation_allowance_2015 = 500000\n    valuation_allowance_2014 = 400000\n    \n    # Do math calculation to get the answer\n    net_deferred_tax_2015 = deferred_tax_assets_2015 - deferred_tax_liabilities_2015 - valuation_allowance_2015\n    net_deferred_tax_2014 = deferred_tax_assets_2014 - deferred_tax_liabilities_2014 - valuation_allowance_2014\n    \n    impact_on_net_income = net_deferred_tax_2015 - net_deferred_tax_2014\n    \n    # return answer\n    return impact_on_net_income\n```\n\nThis Python function calculates the impact of changes in deferred tax accounts on net income for 2015 according to US GAAP. Here's an explanation of the calculation:\n\n1. We define the values for deferred tax assets, deferred tax liabilities, and valuation allowance for both 2015 and 2014.\n\n2. We calculate the net deferred tax position for both years by subtracting deferred tax liabilities and valuation allowance from deferred tax assets.\n\n3. The impact on net income is the difference between the net deferred tax positions of 2015 and 2014.\n\n4. The function returns this difference, which represents the impact on net income.\n\nThe result will be negative, indicating a decrease in net income. This is because:\n- Deferred tax assets increased, which is generally favorable but is offset by the increase in valuation allowance.\n- Deferred tax liabilities decreased, which is favorable.\n- However, the valuation allowance increased significantly, which has a negative impact.\n\nThe net effect of these changes is a decrease in net income for 2015 by $200,000"
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-586",
        "python_solution": "",
        "ground_truth": null,
        "question": "The table underneath displays the monthly stock returns for Oak Inc. Based on the provided table, can you compute the standard deviation for Oak Inc.'s returns, considering that there are 6 observations in the population?",
        "output": [
            "Here's a Python program to calculate the standard deviation of Oak Inc.'s returns based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    returns = [0.20, 0.04, -0.05, 0.12, 0.03, 0.12]\n    n = len(returns)\n\n    # Do math calculation to get the answer\n    mean = sum(returns) / n\n    squared_diff_sum = sum((x - mean) ** 2 for x in returns)\n    variance = squared_diff_sum / n\n    std_dev = variance ** 0.5\n\n    # return answer\n    return std_dev\n\n```\n\nThis program does the following:\n\n1. We define the list of returns based on the given table.\n2. We calculate the mean of the returns.\n3. We calculate the sum of squared differences from the mean.\n4. We calculate the variance by dividing the sum of squared differences by the number of observations (n). We use n instead of n-1 because we're considering the entire population, not a sample.\n5. We calculate the standard deviation by taking the square root of the variance.\n6. Finally, we return the calculated standard deviation.\n\nThis program will return the standard deviation of Oak Inc.'s returns based on the 6 observations provided in the population."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-587",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith is a tax consultant who offers tax consciousness guidance to individual patrons. One of Smith's patrons is Emma. Emma requests Smith to assess Mutual Fund B, which has an inherent gain of 10% of the concluding portfolio value. Emma requests Smith to determine a post-disposal yield over the latest three-year duration. Mutual Fund B showed after-tax yields of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital profits are taxed at a 25% pace. What is the yearly after-tax post-disposal yield measured by Smith?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    year1_yield = 0.09\n    year2_yield = 0.05\n    year3_yield = 0.08\n    capital_gains_tax_rate = 0.25\n    inherent_gain_percentage = 0.10\n    \n    # Do math calculation to get the answer\n    pre_tax_cumulative_return = (1 + year1_yield) * (1 + year2_yield) * (1 + year3_yield) - 1\n    \n    inherent_gain = inherent_gain_percentage\n    tax_on_inherent_gain = inherent_gain * capital_gains_tax_rate\n    \n    post_tax_cumulative_return = pre_tax_cumulative_return - tax_on_inherent_gain\n    \n    annual_post_tax_return = (1 + post_tax_cumulative_return) ** (1/3) - 1\n    \n    # return answer\n    return annual_post_tax_return * 100  # Convert to percentage\n```\n\nThis Python program calculates the yearly after-tax post-disposal yield for Mutual Fund B as requested by Emma. Here's a breakdown of the calculation:\n\n1. We define the given variables: yearly yields, capital gains tax rate, and inherent gain percentage.\n2. We calculate the pre-tax cumulative return over the three-year period.\n3. We calculate the tax on the inherent gain.\n4. We subtract the tax on the inherent gain from the pre-tax cumulative return to get the post-tax cumulative return.\n5. We calculate the annual post-tax return by taking the cube root of (1 + post-tax cumulative return) and subtracting 1.\n6. Finally, we return the result as a percentage.\n\nThis solution takes into account the after-tax yields for each year, the capital gains tax, and the inherent gain of the fund."
        ]
    },
    {
        "tables": [
            "| Quantity (unit) | Total Fixed Cost ($) | Total Variable Cost ($) |\n| --------------- | -------------------- | ---------------------- |\n| 0               | 400                  | 0                       |\n| 1               | 400                  | 100                    |\n| 2               | 400                  | 190                    |\n| 3               | 400                  | 275                    |\n| 4               | 400                  | 360                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-588",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company that makes machines is examining its cost structure, and here lays out the meticulous data as specified in the table: If the company fabricates 3 machines, what is the average fixed cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quantity = 3\n    total_fixed_cost = 400\n\n    # Do math calculation to get the answer\n    average_fixed_cost = total_fixed_cost / quantity\n\n    # return answer\n    return average_fixed_cost\n```\n\nThis Python program calculates the average fixed cost when the company produces 3 machines. Here's how it works:\n\n1. We define the relevant variables:\n   - `quantity` is set to 3, as we're asked about the scenario where 3 machines are produced.\n   - `total_fixed_cost` is set to 400, which is the fixed cost regardless of the quantity produced (as shown in the table).\n\n2. We calculate the average fixed cost by dividing the total fixed cost by the quantity.\n\n3. The function returns the calculated average fixed cost.\n\nWhen this function is called, it will return the average fixed cost for producing 3 machines, which is 400 / 3 = 133.33 (rounded to two decimal places)."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-589",
        "python_solution": "",
        "ground_truth": null,
        "question": "Amelia, as a fund manager, trades off a $50,000 vega notional of a one-year variance swap on the S&P 500 at a strike of 20% (annual volatility mentioned). As half a year has gone by, the S&P 500 has seen a realized volatility of 16% (annualized). The same day, the fair strike of a new six-month variance swap on the S&P 500 stands at 19%. The present value of the variance swap that Amelia sold (taking into account the annual interest rate is 2.5%) is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    vega_notional = 50000\n    initial_strike = 0.20\n    realized_volatility = 0.16\n    new_strike = 0.19\n    time_elapsed = 0.5\n    time_remaining = 0.5\n    interest_rate = 0.025\n\n    # Do math calculation to get the answer\n    variance_notional = 2 * vega_notional / initial_strike\n    \n    # Calculate the realized variance\n    realized_variance = realized_volatility ** 2\n    \n    # Calculate the implied forward variance\n    implied_forward_variance = (new_strike ** 2) * 2\n    \n    # Calculate the total implied variance for the full year\n    total_implied_variance = (realized_variance * time_elapsed) + (implied_forward_variance * time_remaining)\n    \n    # Calculate the payoff\n    payoff = variance_notional * (total_implied_variance - initial_strike ** 2)\n    \n    # Calculate the present value\n    present_value = payoff * math.exp(-interest_rate * time_remaining)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of the variance swap that Amelia sold. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the variance notional from the vega notional.\n3. We calculate the realized variance for the first half-year.\n4. We calculate the implied forward variance for the remaining half-year.\n5. We calculate the total implied variance for the full year.\n6. We calculate the payoff of the variance swap.\n7. We discount the payoff to get the present value.\n8. Finally, we return the present value rounded to two decimal places.\n\nNote: This program uses the `math` module for the exponential function. You may need to import it at the beginning of your script with `import math` if you're running this function in a larger program."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-590",
        "python_solution": "",
        "ground_truth": null,
        "question": "The yield-to-maturity of a bond, which is stated on a semiannual basis, is at 4.769%. What would this yield-to-maturity be if a financial expert were to adjust it to a monthly basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    semiannual_ytm = 0.04769\n    semiannual_periods = 2\n    monthly_periods = 12\n\n    # Do math calculation to get the answer\n    annual_ytm = (1 + semiannual_ytm / 2) ** 2 - 1\n    monthly_ytm = (1 + annual_ytm) ** (1/12) - 1\n    \n    # Convert to percentage and round to 4 decimal places\n    monthly_ytm_percentage = round(monthly_ytm * 100, 4)\n\n    # return answer\n    return monthly_ytm_percentage\n```\n\nThis Python program calculates the monthly yield-to-maturity based on the given semiannual yield-to-maturity. Here's how it works:\n\n1. We define the semiannual yield-to-maturity (4.769% or 0.04769 in decimal form), and the number of periods for semiannual (2) and monthly (12) compounding.\n\n2. We first convert the semiannual yield to an annual yield using the formula: (1 + r/m)^m - 1, where r is the semiannual rate and m is 2 (for semiannual compounding).\n\n3. Then we convert the annual yield to a monthly yield using the formula: (1 + r)^(1/n) - 1, where r is the annual rate and n is 12 (for monthly compounding).\n\n4. Finally, we convert the result to a percentage and round it to 4 decimal places for clarity.\n\n5. The function returns this monthly yield-to-maturity as a percentage.\n\nThis approach ensures that the effective annual rate remains the same, regardless of the compounding frequency."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-591",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business released bonds worth $2,000,000 having a maturity of 20 years at 96. The business redeemed these bonds seven years down the line at 103, at a time when the unamortized discount stood at $39,000. What would probably be the loss reported by the business in the year these bonds were redeemed?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_face_value = 2000000\n    bond_issue_price = 0.96\n    bond_redemption_price = 1.03\n    unamortized_discount = 39000\n\n    # Do math calculation to get the answer\n    bond_issue_amount = bond_face_value * bond_issue_price\n    bond_redemption_amount = bond_face_value * bond_redemption_price\n    \n    book_value = bond_face_value - unamortized_discount\n    \n    loss = bond_redemption_amount - book_value\n\n    # return answer\n    return loss\n```\n\nThis Python program calculates the loss reported by the business when redeeming the bonds. Here's a breakdown of the calculation:\n\n1. We define the known variables:\n   - Face value of the bonds: $2,000,000\n   - Issue price: 96% (0.96)\n   - Redemption price: 103% (1.03)\n   - Unamortized discount at redemption: $39,000\n\n2. We calculate the bond issue amount and redemption amount.\n\n3. We calculate the book value of the bonds at redemption by subtracting the unamortized discount from the face value.\n\n4. The loss is calculated as the difference between the redemption amount and the book value.\n\nThe program will return the loss, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Risk-free rate | 3% |\n| -- | -- |\n| Market risk premium | 7% |\n| Company A's beta | 1.1 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-592",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jessica has projected that corporation B will disburse dividends of $1.5 and $2.5 respectively at the close of the first and second year. After the second year, dividends are anticipated to increase at a rate of 5%. Other relevant details can be found in the table below. What is the inherent value of the corporation's stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    market_risk_premium = 0.07\n    beta = 1.1\n    dividend_year1 = 1.5\n    dividend_year2 = 2.5\n    growth_rate = 0.05\n\n    # Do math calculation to get the answer\n    \n    # Calculate required rate of return using CAPM\n    required_return = risk_free_rate + beta * market_risk_premium\n    \n    # Calculate present value of first two years' dividends\n    pv_dividend1 = dividend_year1 / (1 + required_return)\n    pv_dividend2 = dividend_year2 / ((1 + required_return) ** 2)\n    \n    # Calculate terminal value using Gordon Growth Model\n    dividend_year3 = dividend_year2 * (1 + growth_rate)\n    terminal_value = dividend_year3 / (required_return - growth_rate)\n    pv_terminal_value = terminal_value / ((1 + required_return) ** 2)\n    \n    # Sum all present values to get stock value\n    stock_value = pv_dividend1 + pv_dividend2 + pv_terminal_value\n\n    # return answer\n    return round(stock_value, 2)\n```\n\nThis Python program calculates the intrinsic value of Corporation B's stock based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the required rate of return using the Capital Asset Pricing Model (CAPM).\n3. We calculate the present value of the dividends for the first two years.\n4. We use the Gordon Growth Model to calculate the terminal value after year 2, assuming the 5% growth rate continues indefinitely.\n5. We discount the terminal value back to the present.\n6. We sum up all the present values to get the stock's intrinsic value.\n7. Finally, we round the result to two decimal places and return it.\n\nThis approach combines the dividend discount model for the first two years with the Gordon Growth Model for the terminal value, providing a comprehensive"
        ]
    },
    {
        "tables": [
            "|                                     |      |\n|-------------------------------------|------|\n| Cost of the equipment $5,000,000    |      |\n| Estimated residual value $500,000   |      |\n| Expected useful life 9 years        |      |\n| Total productive capacity 950,000 units |      |\n| Production in FY2015 150,000 units  |      |\n| Expected production for the next 9 years 100,000 units each year |      |"
        ],
        "topic": "Accounting",
        "question_id": "test-593",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the straight-line method, what is the annual depreciation expense for a machine purchased in Jan. 2015, according to the applicable information?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 5000000\n    residual_value = 500000\n    useful_life = 9\n\n    # Do math calculation to get the answer\n    depreciable_amount = cost - residual_value\n    annual_depreciation = depreciable_amount / useful_life\n\n    # return answer\n    return annual_depreciation\n```\n\nThis Python program calculates the annual depreciation expense using the straight-line method based on the information provided. Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `cost`: The initial cost of the equipment ($5,000,000)\n   - `residual_value`: The estimated residual value at the end of its useful life ($500,000)\n   - `useful_life`: The expected useful life of the equipment (9 years)\n\n2. We calculate the depreciable amount by subtracting the residual value from the initial cost.\n\n3. We then divide the depreciable amount by the useful life to get the annual depreciation expense.\n\n4. Finally, we return the calculated annual depreciation expense.\n\nThis method assumes equal depreciation each year over the useful life of the asset, which is consistent with the straight-line method mentioned in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-594",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood of drawing one of the 3 marked balls if 600 ping pong balls are stored in a dark container?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_balls = 600\n    marked_balls = 3\n    \n    # Do math calculation to get the answer\n    probability = marked_balls / total_balls\n    \n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability of drawing one of the 3 marked balls from a container with 600 ping pong balls. Here's a breakdown of the solution:\n\n1. We define two variables:\n   - `total_balls`: The total number of ping pong balls in the container (600)\n   - `marked_balls`: The number of marked balls (3)\n\n2. To calculate the probability, we divide the number of favorable outcomes (marked balls) by the total number of possible outcomes (total balls).\n\n3. The function returns this probability.\n\nWhen you run this function, it will return approximately 0.005, which represents a 0.5% chance of drawing one of the marked balls. This can also be expressed as a 1 in 200 chance."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-595",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a share costs $100.00 and it follows a single-stage binomial system with an increase of 1.05 and a decrease of 0.97, and if 1 million Bernoulli tests are done, and the mean final share price is $102.00, what is the likelihood of an increase (p)?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100.00\n    up_factor = 1.05\n    down_factor = 0.97\n    mean_final_price = 102.00\n    \n    # Do math calculation to get the answer\n    # Using the formula: E[S_T] = S_0 * (p * u + (1-p) * d)\n    # Where S_0 is initial price, u is up_factor, d is down_factor, p is probability of up\n    \n    # Rearranging the formula to solve for p:\n    # p = (E[S_T] - S_0 * d) / (S_0 * (u - d))\n    \n    p = (mean_final_price - initial_price * down_factor) / (initial_price * (up_factor - down_factor))\n    \n    # return answer\n    return p\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The likelihood of an increase (p) is approximately {result:.4f}\")\n```\n\nThis program calculates the probability of an increase (p) based on the given information:\n\n1. We define the variables for the initial share price, up factor, down factor, and mean final price.\n\n2. We use the expected value formula for a single-stage binomial model:\n   E[S_T] = S_0 * (p * u + (1-p) * d)\n   Where S_T is the final price, S_0 is the initial price, u is the up factor, d is the down factor, and p is the probability of an increase.\n\n3. We rearrange this formula to solve for p:\n   p = (E[S_T] - S_0 * d) / (S_0 * (u - d))\n\n4. We plug in the values and calculate p.\n\n5. The function returns the calculated probability p.\n\nThis solution assumes that the mean final share price of $102.00 is equivalent to E[S_T] in the formula, which is a reasonable assumption given"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-596",
        "python_solution": "",
        "ground_truth": null,
        "question": "A yearly annuity of $2,000 is expected to be received for a span of twenty years, with the initial payment anticipated to arrive at the conclusion of year thirteen. If we presume a 7% discount rate for the upcoming years, can you work out the present value of the annuity today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 2000\n    total_years = 20\n    start_year = 13\n    discount_rate = 0.07\n\n    # Do math calculation to get the answer\n    present_value = 0\n    for year in range(start_year, start_year + total_years):\n        present_value += annual_payment / ((1 + discount_rate) ** year)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of the annuity as described in the question. Here's a breakdown of the solution:\n\n1. We define the variables based on the given information:\n   - `annual_payment`: The yearly annuity payment of $2,000\n   - `total_years`: The span of 20 years for which the annuity is received\n   - `start_year`: The year when the first payment is received (end of year 13)\n   - `discount_rate`: The 7% discount rate (expressed as 0.07)\n\n2. We initialize the `present_value` variable to 0.\n\n3. We use a loop to calculate the present value of each payment:\n   - The loop starts from year 13 (when the first payment is received) and goes up to year 32 (13 + 20).\n   - For each year, we calculate the present value of that year's payment and add it to the total.\n   - The present value of each payment is calculated using the formula: PV = FV / (1 + r)^n, where FV is the future value (annual payment), r is the discount rate, and n is the number of years from now.\n\n4. Finally, we round the result to two decimal places (cents) and return it.\n\nThis program will return the present value of the annuity in dollars, considering the delayed start and the given discount rate."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-597",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the spot market, the exchange rate for AUD/USD is 0.50248. If we consider that the yearly interest rate is 3% for USD and 4% for AUD, what would be the one-year forward exchange rate for USD/AUD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_aud_usd = 0.50248\n    usd_interest_rate = 0.03\n    aud_interest_rate = 0.04\n\n    # Do math calculation to get the answer\n    spot_rate_usd_aud = 1 / spot_rate_aud_usd\n    forward_rate_usd_aud = spot_rate_usd_aud * ((1 + usd_interest_rate) / (1 + aud_interest_rate))\n\n    # return answer\n    return forward_rate_usd_aud\n```\n\nThis Python program calculates the one-year forward exchange rate for USD/AUD based on the given spot rate and interest rates. Here's how it works:\n\n1. We define the variables:\n   - `spot_rate_aud_usd`: The given spot rate for AUD/USD\n   - `usd_interest_rate`: The yearly interest rate for USD\n   - `aud_interest_rate`: The yearly interest rate for AUD\n\n2. We calculate the spot rate for USD/AUD by taking the reciprocal of the AUD/USD rate.\n\n3. We then use the interest rate parity formula to calculate the forward rate:\n   Forward Rate = Spot Rate * ((1 + Domestic Interest Rate) / (1 + Foreign Interest Rate))\n\n   In this case, USD is the domestic currency and AUD is the foreign currency.\n\n4. The function returns the calculated forward exchange rate for USD/AUD.\n\nWhen you run this function, it will return the one-year forward exchange rate for USD/AUD based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-598",
        "python_solution": "",
        "ground_truth": null,
        "question": "An eternal bond is a financial instrument that delivers the same sum of money indefinitely. Suppose it provides a payment of $60 every month, and it has a yearly discount rate of 4% compounded on a monthly basis. What would be the current value of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    monthly_payment = 60\n    annual_rate = 0.04\n    monthly_rate = annual_rate / 12\n    \n    # Do math calculation to get the answer\n    present_value = monthly_payment / monthly_rate\n    \n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of an eternal bond based on the given information:\n\n1. We define the variables:\n   - `monthly_payment`: The bond provides $60 every month.\n   - `annual_rate`: The yearly discount rate is 4% or 0.04.\n   - `monthly_rate`: We convert the annual rate to a monthly rate by dividing by 12.\n\n2. To calculate the present value of an eternal bond (also known as a perpetuity), we use the formula:\n   Present Value = Payment / Interest Rate\n\n   In this case, we use the monthly payment and monthly rate.\n\n3. We round the result to two decimal places for currency representation.\n\n4. The function returns the calculated present value.\n\nThis program will give you the current value of the eternal bond based on the provided monthly payment and annual discount rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-599",
        "python_solution": "",
        "ground_truth": null,
        "question": "Our projection is that 15% of secondary school pupils will participate in employment next year. If we randomly choose 5 secondary school pupils, what is the likelihood that precisely two of them will participate in employment next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability_of_employment = 0.15\n    total_pupils = 5\n    target_employed = 2\n\n    # Do math calculation to get the answer\n    from math import comb\n\n    # Calculate the probability using binomial probability formula\n    probability = (\n        comb(total_pupils, target_employed) * \n        (probability_of_employment ** target_employed) * \n        ((1 - probability_of_employment) ** (total_pupils - target_employed))\n    )\n\n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability of exactly 2 out of 5 randomly chosen secondary school pupils participating in employment next year, given that the overall probability of participation is 15% (0.15).\n\nThe program uses the binomial probability formula:\n\nP(X = k) = C(n,k) * p^k * (1-p)^(n-k)\n\nWhere:\n- n is the number of trials (5 pupils in this case)\n- k is the number of successes (2 pupils employed)\n- p is the probability of success on each trial (0.15)\n\nThe `comb` function from the `math` module is used to calculate the binomial coefficient (number of ways to choose k items from n items).\n\nThe result returned by this function will be the probability as a decimal (e.g., 0.1852 would represent an 18.52% chance)."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-600",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Sunshine Primary School provides its staff members with a defined benefit retirement plan. The school is in accordance with IFRS. The chosen details related to the pension plan in 2018 are this: the benefit obligations at the onset of the year being $3,000,000, the plan assets' fair value at the start of the year being $3,100,000 and the plan assets' book value equalling $2,800,000 at the beginning of 2018. So, what is the funded status of the scheme at the start of 2018?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    benefit_obligations_start = 3000000\n    plan_assets_fair_value_start = 3100000\n    \n    # Do math calculation to get the answer\n    funded_status = plan_assets_fair_value_start - benefit_obligations_start\n    \n    # return answer\n    return funded_status\n```\n\nThis program calculates the funded status of the pension scheme at the start of 2018. The funded status is the difference between the fair value of plan assets and the benefit obligations at the beginning of the year. \n\nNote that the book value of plan assets ($2,800,000) is not used in this calculation, as the funded status is based on the fair value of plan assets, not their book value.\n\nThe program will return a positive value of $100,000, indicating that the plan is overfunded by this amount at the start of 2018."
        ]
    },
    {
        "tables": [
            "| Year | Paid-In Capital | Mgmt Fees | Operating Results | NAV before Distributions | Carried Interest | Distributions | NAV after Distributions |\n|------|-----------------|-----------|-------------------|--------------------------|------------------|---------------|-------------------------|\n| 2005 | 40             | 0.8       | -3                | 36.2                     |                  |               | 36.2                    |\n| 2006 | 55             | 1.1       | 4                 | 54.1                     |                  |               | 54.1                    |\n| 2007 | 80             | 1.6       | 11                | 88.5                     |                  |               | 88.5                    |\n| 2008 | 100            | 2         | 27                | 133.5                    | 4.2              | 19            | 110.3                   |\n| 2009 | 125            | 2         | 34                | 167.3                    | 6.6              | 38            | 122.7                   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-601",
        "python_solution": "",
        "ground_truth": null,
        "question": "The pamphlet ends with the backstory of another private equity fund known as Pocatello Fund. As per the cash flows and distributions shown in Exhibit 1 for the initial five years of this fund, what was the total value paid into the Pocatello Fund in 2009?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    paid_in_capital_2009 = 125\n    \n    # Do math calculation to get the answer\n    # The total value paid into the fund is equal to the Paid-In Capital\n    total_value_paid = paid_in_capital_2009\n    \n    # return answer\n    return total_value_paid\n```\n\nThis Python program answers the question by returning the total value paid into the Pocatello Fund in 2009. According to the table provided, the Paid-In Capital for 2009 was 125, which represents the total value paid into the fund for that year."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-602",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the spot market, the conversion rate from Canadian dollar to Euro stands at CAD/EUR 1.4808, while the rate for Japanese yen to Euro is JPY/EUR 132.3894. What is the JPY/CAD cross rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cad_eur_rate = 1.4808\n    jpy_eur_rate = 132.3894\n    \n    # Do math calculation to get the answer\n    jpy_cad_rate = jpy_eur_rate / cad_eur_rate\n    \n    # return answer\n    return round(jpy_cad_rate, 4)\n```\n\nThis Python program calculates the JPY/CAD cross rate based on the given CAD/EUR and JPY/EUR rates. Here's how it works:\n\n1. We define the known exchange rates:\n   - `cad_eur_rate`: The CAD/EUR rate of 1.4808\n   - `jpy_eur_rate`: The JPY/EUR rate of 132.3894\n\n2. To calculate the JPY/CAD rate, we divide the JPY/EUR rate by the CAD/EUR rate:\n   `jpy_cad_rate = jpy_eur_rate / cad_eur_rate`\n\n3. We round the result to 4 decimal places for standard forex quotation and return it.\n\nThe function will return the JPY/CAD cross rate, which represents how many Japanese Yen are equivalent to one Canadian Dollar."
        ]
    },
    {
        "tables": [
            "| Market risk premium | 7.0% |\n|---|---|\n| Risk-free rate | 2.0% |\n| Comparable firm return | 10.4% |\n| Comparable firm debt-to-equity ratio | 1.0 |\n| Comparable firm tax rate | 40.0% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-603",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data, what is the company's unleveraged beta?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_risk_premium = 0.070\n    risk_free_rate = 0.020\n    comparable_firm_return = 0.104\n    comparable_firm_debt_equity_ratio = 1.0\n    comparable_firm_tax_rate = 0.400\n\n    # Do math calculation to get the answer\n    # First, calculate the leveraged beta of the comparable firm\n    leveraged_beta = (comparable_firm_return - risk_free_rate) / market_risk_premium\n\n    # Then, calculate the unleveraged beta using the Hamada equation\n    unleveraged_beta = leveraged_beta / (1 + (1 - comparable_firm_tax_rate) * comparable_firm_debt_equity_ratio)\n\n    # return answer\n    return unleveraged_beta\n```\n\nThis Python program calculates the company's unleveraged beta based on the given data. Here's a breakdown of the steps:\n\n1. We define all the given variables with their respective values.\n2. We calculate the leveraged beta of the comparable firm using the CAPM formula: (Return - Risk-free rate) / Market risk premium\n3. We then use the Hamada equation to calculate the unleveraged beta:\n   Unleveraged Beta = Leveraged Beta / [1 + (1 - Tax Rate) * (Debt/Equity Ratio)]\n4. Finally, we return the calculated unleveraged beta.\n\nThis program will return the unleveraged beta when called, which is the answer to the given question."
        ]
    },
    {
        "tables": [
            "|  |  | Units Purchased and Sold (first quarter) |  |  |  |  |\n|---|---|---|---|---|---|---|\n|  |  | Date |  |  |  |  |\n|  |  | Units Purchased | Purchase Price | Units Sold | Selling Price | Inventory Units on Hand |\n|  | 2 Jan | 1,000 | $20.00 |  |  | 1,000 |\n|  | 17 Jan |  |  | 500 |  | $50.00, 500 |\n|  | 16 Feb | 1,000 | $18.00 |  |  | 1,500 |\n|  | 3 Mar |  |  | 1,200 |  | $50.00, 300 |\n|  | 13 Mar | 1,000 | $17.00 |  |  | 1,300 |\n|  | 23 Mar |  |  | 500 |  | $50.00, 800 |\n|  | End of quarter totals: | 3,000 | $55,000 | 2,200 |  | $110,000 |\n| Identifying Header | Exhibit 2: | Comparison of Inventory Methods and Models |  |  |  |  |\n|  | End of Quarter Valuations |  |  |  |  |  |\n| 31 March |  | Perpetual LIFO,Periodic LIFO, Perpetual FIFO |  |  |  |  |\n| Sales |  | $110,000 | $110,000 | $110,000 |  |  |\n|  | Ending inventory |  | $16,000 | $13,600 |  |  |\n|  | Cost of goods sold |  | $39,000 | $41,400 |  |  |\n|  | Gross profit |  | $71,000 | $68,600 |  |  |\n|  | Inventory turnover ratio | 279% |  |  |  |  |\n|  | Note: LIFO is last in, first out and FIFO is first in, first out. |  |  |  |  |  |"
        ],
        "topic": "Accounting",
        "question_id": "test-604",
        "python_solution": "",
        "ground_truth": null,
        "question": "A merchant is analyzing various methods for assessing inventory worth. The merchant has a single product that they trade for $50. What is the final inventory's value for the first quarter if the merchant employs a continuous LIFO inventory evaluation technique?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    inventory_units = 800\n    last_purchase_price = 17.00\n    second_last_purchase_price = 18.00\n    \n    # Do math calculation to get the answer\n    last_batch_value = 300 * last_purchase_price\n    remaining_units = inventory_units - 300\n    second_batch_value = remaining_units * second_last_purchase_price\n    \n    ending_inventory_value = last_batch_value + second_batch_value\n    \n    # return answer\n    return ending_inventory_value\n\n# Test the function\nprint(solution())\n```\n\nThis Python program calculates the ending inventory value using the perpetual LIFO (Last-In, First-Out) method based on the information provided in the table.\n\nHere's the explanation:\n\n1. We define the ending inventory units as 800 (given in the last row of the table).\n2. The last purchase price was $17.00 on March 13.\n3. The second-last purchase price was $18.00 on February 16.\n\nIn the perpetual LIFO method, we value the most recent purchases first. So:\n\n- The last 300 units are valued at $17.00 each (from the March 13 purchase)\n- The remaining 500 units are valued at $18.00 each (from the February 16 purchase)\n\nThe calculation is:\n(300 * $17.00) + (500 * $18.00) = $5,100 + $9,000 = $14,100\n\nThe function returns this value, which is the ending inventory value using the perpetual LIFO method."
        ]
    },
    {
        "tables": [
            "| Most recent year's net income | $8.0 million | Cost of equity capital | 12.40% |\n|---|---|---|---|\n| Interest expense | $1.2 million | WACC | 10.60% |\n| Equity capital book value | $20.97 million | Tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-605",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the multistage RI model for estimating the value of PBRI, John gathers extra data. He predicts a yearly growth rate for residual income of 15% over a prediction range of 5 years (Years 1 to 5) and decides to discount the final year’s residual income as perpetuity. Considering the information in Exhibit 3, what is John's approximation of the contribution that the terminal value of the income stream will make to the present value of equity after five years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 8000000\n    cost_of_equity = 0.1240\n    equity_book_value = 20970000\n    growth_rate = 0.15\n    forecast_period = 5\n    \n    # Do math calculation to get the answer\n    \n    # Calculate initial residual income\n    required_return = equity_book_value * cost_of_equity\n    residual_income = net_income - required_return\n    \n    # Project residual income for 5 years\n    year_5_ri = residual_income * (1 + growth_rate) ** forecast_period\n    \n    # Calculate terminal value\n    terminal_value = year_5_ri / (cost_of_equity - growth_rate)\n    \n    # Discount terminal value to present\n    present_value_terminal = terminal_value / (1 + cost_of_equity) ** forecast_period\n    \n    # Calculate total equity value\n    total_equity_value = equity_book_value + present_value_terminal\n    \n    # Calculate contribution of terminal value\n    contribution_percentage = (present_value_terminal / total_equity_value) * 100\n    \n    # return answer\n    return round(contribution_percentage, 2)\n```\n\nThis Python program calculates the contribution of the terminal value to the present value of equity after five years using the multistage Residual Income (RI) model. Here's a breakdown of the steps:\n\n1. We define the given variables from the problem statement.\n2. We calculate the initial residual income by subtracting the required return from net income.\n3. We project the residual income to year 5 using the given growth rate.\n4. We calculate the terminal value using the Gordon Growth Model formula.\n5. We discount the terminal value to its present value.\n6. We calculate the total equity value by adding the book value of equity and the present value of the terminal value.\n7. Finally, we calculate the contribution percentage of the terminal value to the total equity value.\n\nThe function returns this percentage rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-606",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the previous year, the total worth of end products and services in nation B escalated from $200 billion to $400 billion, with the GDP deflator surging from 120 to 170. Given this situation, by how much did the actual GDP of nation B increase?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nominal_gdp_initial = 200_000_000_000  # $200 billion\n    nominal_gdp_final = 400_000_000_000  # $400 billion\n    gdp_deflator_initial = 120\n    gdp_deflator_final = 170\n\n    # Do math calculation to get the answer\n    real_gdp_initial = nominal_gdp_initial / (gdp_deflator_initial / 100)\n    real_gdp_final = nominal_gdp_final / (gdp_deflator_final / 100)\n    \n    real_gdp_increase = real_gdp_final - real_gdp_initial\n    \n    # Convert to billions for easier reading\n    real_gdp_increase_billions = real_gdp_increase / 1_000_000_000\n\n    # return answer\n    return round(real_gdp_increase_billions, 2)\n```\n\nThis Python program calculates the increase in real GDP for nation B based on the given information. Here's a breakdown of what the program does:\n\n1. It defines the initial and final nominal GDP values, as well as the initial and final GDP deflator values.\n\n2. It calculates the real GDP for both the initial and final years by dividing the nominal GDP by the GDP deflator (converted to a decimal).\n\n3. It then calculates the increase in real GDP by subtracting the initial real GDP from the final real GDP.\n\n4. The result is converted from dollars to billions of dollars for easier reading.\n\n5. Finally, it returns the rounded result to two decimal places.\n\nThe returned value represents the increase in real GDP in billions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-607",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would the YTM be on a zero-coupon, semiannual compound, 10-year bond with a par value of $1,000 that's currently being traded at $366.21?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    market_price = 366.21\n    years = 10\n    compounds_per_year = 2\n\n    # Do math calculation to get the answer\n    periods = years * compounds_per_year\n    ytm = (par_value / market_price) ** (1 / periods) - 1\n    ytm_annual = ytm * compounds_per_year\n\n    # return answer\n    return ytm_annual * 100  # Convert to percentage\n```\n\nThis Python program calculates the Yield to Maturity (YTM) for a zero-coupon bond with the given specifications. Here's how it works:\n\n1. We define the variables:\n   - `par_value`: The face value of the bond at maturity ($1,000)\n   - `market_price`: The current trading price of the bond ($366.21)\n   - `years`: The time to maturity (10 years)\n   - `compounds_per_year`: The number of compounding periods per year (2 for semiannual)\n\n2. We calculate the total number of compounding periods (`periods`) by multiplying `years` by `compounds_per_year`.\n\n3. We use the formula for YTM of a zero-coupon bond:\n   YTM per period = (Face Value / Market Price)^(1/n) - 1\n   Where n is the number of periods.\n\n4. We then annualize the YTM by multiplying it by the number of compounding periods per year.\n\n5. Finally, we return the YTM as a percentage by multiplying by 100.\n\nThis program will return the YTM as a percentage, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-608",
        "python_solution": "",
        "ground_truth": null,
        "question": "The S&P 500 index currently stands at 1,457, with each futures contract representing 250 times the index. An equity portfolio only long with a market value of USD 300,100,000 has a beta of 1.1. In order to lower the portfolio beta to 0.75, how many S&P futures contracts should be sold?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sp500_index = 1457\n    futures_multiplier = 250\n    portfolio_value = 300100000\n    current_beta = 1.1\n    target_beta = 0.75\n    \n    # Do math calculation to get the answer\n    futures_value = sp500_index * futures_multiplier\n    beta_change = current_beta - target_beta\n    hedge_amount = (beta_change / current_beta) * portfolio_value\n    contracts_to_sell = hedge_amount / futures_value\n    \n    # return answer\n    return round(contracts_to_sell)\n```\n\nThis Python program calculates the number of S&P 500 futures contracts that should be sold to reduce the portfolio beta from 1.1 to 0.75. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the value of one futures contract (futures_value).\n3. We determine the amount of beta change needed (beta_change).\n4. We calculate the amount of the portfolio that needs to be hedged (hedge_amount).\n5. We divide the hedge amount by the value of one futures contract to get the number of contracts to sell.\n6. Finally, we round the result to the nearest whole number, as we can't sell fractional contracts.\n\nThe function will return the number of S&P 500 futures contracts that should be sold to achieve the desired beta reduction."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-609",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is aiming to determine the worth of a 1-year European call option using the BSM model. He has gathered the following data: the present stock price is $90, the strike price is $75, the risk-free rate calculated through continuous compounding is 4%, and the yearly volatility rate is 20%. What would be the call option's value? N(-1.21) =0.1131; N(-1.01) =0.1562.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    import math\n    \n    S = 90  # Current stock price\n    K = 75  # Strike price\n    r = 0.04  # Risk-free rate (continuous compounding)\n    T = 1  # Time to expiration (in years)\n    sigma = 0.20  # Annual volatility\n    \n    # Do math calculation to get the answer\n    d1 = (math.log(S/K) + (r + 0.5 * sigma**2) * T) / (sigma * math.sqrt(T))\n    d2 = d1 - sigma * math.sqrt(T)\n    \n    N_d1 = 1 - 0.1562  # Given N(-1.01) = 0.1562, so N(d1) = 1 - 0.1562\n    N_d2 = 1 - 0.1131  # Given N(-1.21) = 0.1131, so N(d2) = 1 - 0.1131\n    \n    call_value = S * N_d1 - K * math.exp(-r * T) * N_d2\n    \n    # return answer\n    return round(call_value, 2)\n```\n\nThis Python program implements the Black-Scholes-Merton (BSM) model to calculate the value of a European call option. Here's a breakdown of the solution:\n\n1. We import the `math` module to use mathematical functions.\n\n2. We define all the given variables:\n   - `S`: Current stock price ($90)\n   - `K`: Strike price ($75)\n   - `r`: Risk-free rate (4% or 0.04)\n   - `T`: Time to expiration (1 year)\n   - `sigma`: Annual volatility (20% or 0.20)\n\n3. We calculate `d1` and `d2` using the BSM formula.\n\n4. We use the given values of N(-1.21) and N(-1.01) to deduce N(d1) and N(d2). Since the normal distribution is"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-610",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given that a chart from a credit reporting agency indicates that the count of A-ranked entities that upgraded to AAA is 1, those which advanced to AA were 6, those who maintained at A were 41, those who were demoted to BBB were 2, and those that defaulted were 3. Assuming a fresh entity with an A grade credit score, what is the chance that it will experience a reduction in rating or end up defaulting after one year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    upgraded_to_AAA = 1\n    upgraded_to_AA = 6\n    maintained_A = 41\n    downgraded_to_BBB = 2\n    defaulted = 3\n    \n    # Do math calculation to get the answer\n    total_entities = upgraded_to_AAA + upgraded_to_AA + maintained_A + downgraded_to_BBB + defaulted\n    entities_downgraded_or_defaulted = downgraded_to_BBB + defaulted\n    probability = entities_downgraded_or_defaulted / total_entities\n    \n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability that a fresh entity with an A grade credit score will experience a reduction in rating or end up defaulting after one year. Here's how it works:\n\n1. We define variables for each category of entities based on the given information.\n\n2. We calculate the total number of entities by summing up all categories.\n\n3. We sum up the number of entities that were downgraded to BBB or defaulted.\n\n4. We calculate the probability by dividing the number of entities downgraded or defaulted by the total number of entities.\n\n5. Finally, we return this probability as the answer.\n\nThe returned value will be a decimal representing the probability. To convert it to a percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [
            "| Date | November 2010 Quantity | November 2010 Price | December 2010 Quantity | December 2010 Price |\n|------|-----------------|-----------------|------------------|------------------|\n| Sugar| 70kg           | £0.90/kg        | 120kg            | £1.00/kg         |\n| Cotton| 60kg           | £0.60/kg        | 50kg             | £0.80/kg         |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-611",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of the Paasche index for the consumption basket of December displayed in Exhibit 1?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sugar_q_nov = 70\n    sugar_p_nov = 0.90\n    sugar_q_dec = 120\n    sugar_p_dec = 1.00\n    \n    cotton_q_nov = 60\n    cotton_p_nov = 0.60\n    cotton_q_dec = 50\n    cotton_p_dec = 0.80\n    \n    # Do math calculation to get the answer\n    numerator = (sugar_q_dec * sugar_p_dec) + (cotton_q_dec * cotton_p_dec)\n    denominator = (sugar_q_dec * sugar_p_nov) + (cotton_q_dec * cotton_p_nov)\n    \n    paasche_index = (numerator / denominator) * 100\n    \n    # return answer rounded to 2 decimal places\n    return round(paasche_index, 2)\n```\n\nThis Python program calculates the Paasche price index for the consumption basket of December 2010 based on the data provided in the table.\n\nThe Paasche index formula is:\n\nP = (Σ(p1 * q1) / Σ(p0 * q1)) * 100\n\nWhere:\np1 = prices in the current period (December 2010)\nq1 = quantities in the current period (December 2010)\np0 = prices in the base period (November 2010)\n\nThe program defines the quantities and prices for both sugar and cotton in November and December, then calculates the numerator and denominator of the Paasche index formula. Finally, it computes the index and returns the result rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-612",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the business boosts its dividend payout proportion to 40% and employs a necessary return of 12.4%, what would be the justified forward P/E ratio based on the compiled information on the business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_ratio = 0.40\n    required_return = 0.124\n    growth_rate = 0.05  # Assuming a constant growth rate, typically estimated\n\n    # Do math calculation to get the answer\n    retention_ratio = 1 - dividend_payout_ratio\n    sustainable_growth_rate = retention_ratio * required_return\n    \n    # Using the Gordon Growth Model to calculate the justified P/E ratio\n    justified_pe = dividend_payout_ratio / (required_return - sustainable_growth_rate)\n\n    # return answer\n    return justified_pe\n```\n\nThis Python program calculates the justified forward P/E ratio based on the given information. Here's a breakdown of the calculation:\n\n1. We set the dividend payout ratio to 40% (0.40) and the required return to 12.4% (0.124) as given in the question.\n\n2. We assume a constant growth rate of 5% (0.05). This is a typical assumption when not provided with specific growth information.\n\n3. We calculate the retention ratio as 1 minus the dividend payout ratio.\n\n4. The sustainable growth rate is calculated as the product of the retention ratio and the required return.\n\n5. We use the Gordon Growth Model to calculate the justified P/E ratio. The formula is:\n   P/E = Dividend Payout Ratio / (Required Return - Sustainable Growth Rate)\n\n6. The program returns the calculated justified P/E ratio.\n\nNote that this model assumes constant growth and payout ratios, which may not always reflect real-world conditions. The actual justified P/E ratio might vary based on other factors not considered in this simplified model."
        ]
    },
    {
        "tables": [
            "|                   | Fund X | Fund Y | Fund Z | Benchmark |\n|-------------------|--------|--------|--------|-----------|\n| Sharpe ratio (SR) | 0.45   | 0.50   | 0.49   | 0.44      |\nNote: Data are based on a risk-free rate of 2.3%."
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-613",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson requests his research team to generate risk and anticipated return predictions for Funds X, Y, and Z as well as the benchmark, shown in Exhibit 1. Johnson opts to introduce a fourth fund to his group, Fund W, that will utilize the same benchmark embedded in Exhibit 1. Given the information from Exhibit 1, what would be the Sharpe ratio if Fund W, which Johnson estimates to have an information ratio of 0.35, is merged with a fund that mimics the benchmark?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    benchmark_sr = 0.44\n    risk_free_rate = 0.023\n    information_ratio = 0.35\n\n    # Do math calculation to get the answer\n    \n    # Calculate excess return of the benchmark\n    benchmark_excess_return = benchmark_sr * (1 - risk_free_rate)\n    \n    # Calculate excess return of Fund W using the information ratio\n    fund_w_excess_return = information_ratio + benchmark_excess_return\n    \n    # Calculate Sharpe ratio of Fund W\n    fund_w_sr = fund_w_excess_return / (1 - risk_free_rate)\n    \n    # return answer\n    return round(fund_w_sr, 4)\n```\n\nThis Python program calculates the Sharpe ratio for Fund W based on the given information. Here's a breakdown of the steps:\n\n1. We define the known variables: the benchmark Sharpe ratio, risk-free rate, and the information ratio of Fund W.\n\n2. We calculate the excess return of the benchmark using the Sharpe ratio formula rearranged: excess return = SR * (1 - risk-free rate).\n\n3. We calculate the excess return of Fund W by adding the information ratio to the benchmark's excess return. This is because the information ratio represents the additional return over the benchmark.\n\n4. We then calculate the Sharpe ratio of Fund W using the formula: SR = excess return / (1 - risk-free rate).\n\n5. Finally, we return the calculated Sharpe ratio, rounded to 4 decimal places for precision.\n\nThis solution assumes that the volatility of Fund W is the same as the benchmark, which is implied by the question stating that Fund W will be merged with a fund mimicking the benchmark."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-614",
        "python_solution": "",
        "ground_truth": null,
        "question": "The debt-to-asset ratio is: total liabilities: $200 short term debt: $10 long-term debt: $100 total equity: $300.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 200\n    short_term_debt = 10\n    long_term_debt = 100\n    total_equity = 300\n\n    # Do math calculation to get the answer\n    total_assets = total_liabilities + total_equity\n    debt_to_asset_ratio = total_liabilities / total_assets\n\n    # return answer\n    return debt_to_asset_ratio\n```\n\nThis Python program calculates the debt-to-asset ratio based on the given information. Here's a breakdown of what the program does:\n\n1. It defines the variables with the given values:\n   - total_liabilities = 200\n   - short_term_debt = 10\n   - long_term_debt = 100\n   - total_equity = 300\n\n2. It calculates the total assets by adding total liabilities and total equity.\n\n3. It then calculates the debt-to-asset ratio by dividing total liabilities by total assets.\n\n4. Finally, it returns the calculated debt-to-asset ratio.\n\nNote that while short-term debt and long-term debt are provided, they are not directly used in this calculation as the total liabilities already include these amounts. The debt-to-asset ratio is calculated using total liabilities and total assets."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-615",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial advisor is determining the beta of a collection of large-cap industrial firm shares. The advisor establishes that the correlation between the returns from the collection and the returns from its reference point is 0.8, the fluctuation of collection returns is 5%, and the fluctuation of the reference point is 4%. What is the beta of the collection in relation to the reference point?",
        "output": [
            "Here's the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.8\n    collection_volatility = 0.05  # 5%\n    reference_volatility = 0.04  # 4%\n    \n    # Do math calculation to get the answer\n    beta = correlation * (collection_volatility / reference_volatility)\n    \n    # return answer\n    return beta\n```\n\nThis program calculates the beta of the collection in relation to the reference point using the formula:\n\nBeta = Correlation * (Volatility of Collection / Volatility of Reference Point)\n\nThe variables are defined based on the information provided in the question, and the calculation is performed accordingly. The result (beta) is then returned as the answer."
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2009 | 2010 |\n| ------------------------------------- | ---- | ---- |\n| Retained earnings                     | 120  | 145  |\n| Accounts receivable                   | 38   | 43   |\n| Inventory                             | 45   | 48   |\n| Accounts payable                      | 36   | 29   |"
        ],
        "topic": "Accounting",
        "question_id": "test-616",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collected the following data from a corporation's 2010 financial reports (in $ millions): In 2010, the corporation declared and dispersed cash dividends of $10 million, and logged a depreciation expense of $25 million. The corporation classifies dividends paid as a financing activity. What was the corporation’s 2010 operational cash flow (in $ millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2009 = 120\n    retained_earnings_2010 = 145\n    accounts_receivable_2009 = 38\n    accounts_receivable_2010 = 43\n    inventory_2009 = 45\n    inventory_2010 = 48\n    accounts_payable_2009 = 36\n    accounts_payable_2010 = 29\n    dividends_paid = 10\n    depreciation = 25\n\n    # Do math calculation to get the answer\n    net_income = retained_earnings_2010 - retained_earnings_2009 + dividends_paid\n    \n    change_in_accounts_receivable = accounts_receivable_2010 - accounts_receivable_2009\n    change_in_inventory = inventory_2010 - inventory_2009\n    change_in_accounts_payable = accounts_payable_2010 - accounts_payable_2009\n    \n    operational_cash_flow = net_income + depreciation - change_in_accounts_receivable - change_in_inventory + change_in_accounts_payable\n\n    # return answer\n    return operational_cash_flow\n```"
        ]
    },
    {
        "tables": [
            "| - |  Time=0 | Time=1 | Time=2 |\n|---|:---:|:---:|:---:|\n| - | S0=100 | Su=110 | Suu=121 |\n| - |-| Sd=92 | Sud,du=101.20 |\n| - |-| - | Sdd=84.64 |"
        ],
        "topic": "Accounting",
        "question_id": "test-617",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that the price of a bond over the next two periods is detailed below. The starting value of the bond is $100. The likelihood of a rise in any given period is 40% and the chance of a fall in any given period is 60%. If we apply the binomial model, what is the likelihood that the bond's price will reach $101.20 after two periods?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_up = 0.40  # Probability of price going up\n    p_down = 0.60  # Probability of price going down\n\n    # Do math calculation to get the answer\n    # To reach 101.20, we need one up and one down movement in any order\n    probability = 2 * (p_up * p_down)  # Two ways to get this outcome: up-down or down-up\n\n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability of the bond's price reaching $101.20 after two periods using the binomial model and the given information.\n\nHere's an explanation of the calculation:\n\n1. We define the probabilities of an up movement (40% or 0.40) and a down movement (60% or 0.60) in each period.\n\n2. To reach $101.20 after two periods, we need one up movement and one down movement, in either order (up-down or down-up).\n\n3. The probability of an up-down sequence is: p_up * p_down\n   The probability of a down-up sequence is also: p_down * p_up\n\n4. Since there are two ways to reach this outcome, we multiply the probability of one sequence by 2.\n\n5. Therefore, the total probability is: 2 * (p_up * p_down)\n\nThis calculation gives us the likelihood of the bond's price reaching $101.20 after two periods in the binomial model."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-618",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ is a wealth management firm based in France. They have made an investment of $10 million in E Corporation's senior unsecured bond with a term of 10 years. Due to concerns of a potential default by E Corp, XYZ purchased a credit default swap (CDS) on E corp valued at $10 million with a designated coupon rate of 5%. After three months, E Corp goes bankrupt, resulting in a variety of activated CDS contracts. Consequently, XYZ examines the credit quality of the corporate bond they invested and the CDS's value on that bond. Here's some information on the current market status of E Corporation's bonds: Bond 1 is a 5-year senior unsecured bond trading at 40% of par, Bond 2 is a 10-year senior unsecured bond trading at 50% of par. Bond 3 is a 6-year subordinated unsecured bond trading at 30% of par. Based on these details, what is the cheapest",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_1_value = 0.40  # 5-year senior unsecured bond trading at 40% of par\n    bond_2_value = 0.50  # 10-year senior unsecured bond trading at 50% of par\n    bond_3_value = 0.30  # 6-year subordinated unsecured bond trading at 30% of par\n    \n    # Do math calculation to get the answer\n    # The cheapest-to-deliver bond is the one with the lowest market value\n    cheapest_to_deliver = min(bond_1_value, bond_2_value, bond_3_value)\n    \n    # Convert to percentage\n    cheapest_to_deliver_percentage = cheapest_to_deliver * 100\n    \n    # return answer\n    return cheapest_to_deliver_percentage\n```\n\nThis Python function calculates the cheapest-to-deliver bond based on the given information. Here's an explanation of the code:\n\n1. We define variables for the market values of each bond, expressed as a fraction of par value.\n\n2. We use the `min()` function to find the lowest value among the three bonds. This represents the cheapest-to-deliver bond.\n\n3. We convert the result to a percentage by multiplying by 100.\n\n4. The function returns this percentage value.\n\nThe cheapest-to-deliver bond is Bond 3, the 6-year subordinated unsecured bond trading at 30% of par. This is the bond that would likely be used to settle the CDS contract in the event of a default, as it represents the least expensive option for the protection seller to fulfill their obligation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-619",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, XYZ Inc. bought a new machinery for its production process. The machine was priced at $25,000. It is anticipated to have a 4-year lifespan and then be resold for $4,000. Using the double-declining-balance method, what's the depreciation cost to be accounted for in the second year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 25000\n    salvage_value = 4000\n    useful_life = 4\n    depreciation_rate = 2 / useful_life  # Double declining balance rate\n\n    # Do math calculation to get the answer\n    book_value_year1 = initial_cost\n    depreciation_year1 = book_value_year1 * depreciation_rate\n    book_value_year2 = book_value_year1 - depreciation_year1\n    depreciation_year2 = book_value_year2 * depreciation_rate\n\n    # Check if depreciation would reduce book value below salvage value\n    if (book_value_year2 - depreciation_year2) < salvage_value:\n        depreciation_year2 = book_value_year2 - salvage_value\n\n    # return answer\n    return depreciation_year2\n```\n\nThis Python program calculates the depreciation cost for the second year using the double-declining-balance method. Here's how it works:\n\n1. We define the initial variables: initial cost, salvage value, useful life, and calculate the depreciation rate (which is double the straight-line rate).\n\n2. We calculate the depreciation for the first year and the resulting book value at the start of the second year.\n\n3. We then calculate the depreciation for the second year based on the book value at the start of the second year.\n\n4. We include a check to ensure that the depreciation doesn't reduce the book value below the salvage value. If it would, we adjust the depreciation accordingly.\n\n5. Finally, we return the depreciation cost for the second year.\n\nThis program will give you the correct depreciation cost for the second year using the double-declining-balance method."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-620",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the yearly return for a trader who has managed a return of 5% over a six-week span?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    six_week_return = 0.05\n    weeks_in_year = 52\n    periods_in_year = weeks_in_year / 6\n\n    # Do math calculation to get the answer\n    yearly_return = (1 + six_week_return) ** periods_in_year - 1\n\n    # return answer\n    return yearly_return * 100  # Convert to percentage\n```\n\nThis program calculates the yearly return based on a 5% return over a six-week span. Here's how it works:\n\n1. We define the six-week return as 0.05 (5%).\n2. We calculate how many 6-week periods are in a year (52 weeks / 6).\n3. We use the compound interest formula to calculate the yearly return: (1 + r)^n - 1, where r is the six-week return and n is the number of periods in a year.\n4. Finally, we convert the result to a percentage by multiplying by 100.\n\nThis program will return the annualized return as a percentage."
        ]
    },
    {
        "tables": [
            "| Measure     | 2007   | 2006   | 2005  | 2004  | 2003  |\n|-------------|--------|--------|-------|-------|-------|\n| EPS         | $3.03  | $1.45  | $0.23 | $2.13 | $2.55 |\n| BV per share| $19.20 | $16.21 | $14.52| $13.17| $11.84|\n| ROE         | 16.0%  | 8.9%   | 1.6%  | 16.3% | 21.8% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-621",
        "python_solution": "",
        "ground_truth": null,
        "question": "In February 2007, you are investigating a theoretical company called Davis Global that experiences seasonal demand for its offerings. On 2 February 2007, Davis shares ended at $57.98. You believe that the period from 2003 through 2006 provides a fair representation of average earnings. When determining normalized EPS, we can consider the approach of historical average EPS or the average ROE method, so what is the difference in PE calculated using these two methods?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    eps_2006 = 1.45\n    eps_2005 = 0.23\n    eps_2004 = 2.13\n    eps_2003 = 2.55\n    \n    roe_2006 = 0.089\n    roe_2005 = 0.016\n    roe_2004 = 0.163\n    roe_2003 = 0.218\n    \n    bv_per_share_2006 = 16.21\n    \n    stock_price = 57.98\n    \n    # Do math calculation to get the answer\n    \n    # Historical average EPS method\n    avg_eps = (eps_2006 + eps_2005 + eps_2004 + eps_2003) / 4\n    pe_historical = stock_price / avg_eps\n    \n    # Average ROE method\n    avg_roe = (roe_2006 + roe_2005 + roe_2004 + roe_2003) / 4\n    normalized_eps_roe = avg_roe * bv_per_share_2006\n    pe_roe = stock_price / normalized_eps_roe\n    \n    # Calculate the difference in PE ratios\n    pe_difference = abs(pe_historical - pe_roe)\n    \n    # return answer\n    return round(pe_difference, 2)\n```\n\nThis program calculates the difference in PE ratios using two methods:\n\n1. Historical average EPS method: It calculates the average EPS for the years 2003-2006 and uses this to compute the PE ratio.\n\n2. Average ROE method: It calculates the average ROE for the years 2003-2006, then uses this average ROE and the most recent book value per share (2006) to compute a normalized EPS, which is then used to calculate the PE ratio.\n\nThe program then calculates the absolute difference between these two PE ratios and returns the result rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-622",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive agreed to sell an equity forward contract four weeks ago. The contract is set to mature in three months. A profit of $1 will be provided one month prior to the expiry of the contract. The risk-free rate is 3% and is compounded yearly. The existing spot price of the underlying is $56, while the initial forward price was set at $60. What is the value of the executive’s position?\n",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_forward_price = 60\n    current_spot_price = 56\n    risk_free_rate = 0.03\n    time_to_maturity = 3 / 12  # 3 months expressed in years\n    time_to_profit = 2 / 12  # 2 months expressed in years (1 month prior to expiry)\n    profit = 1\n\n    # Do math calculation to get the answer\n    # Calculate the current forward price\n    current_forward_price = current_spot_price * (1 + risk_free_rate) ** time_to_maturity\n\n    # Calculate the value of the forward contract\n    forward_value = (current_forward_price - initial_forward_price) / (1 + risk_free_rate) ** time_to_maturity\n\n    # Calculate the present value of the profit\n    present_value_of_profit = profit / (1 + risk_free_rate) ** time_to_profit\n\n    # Calculate the total value of the executive's position\n    position_value = forward_value + present_value_of_profit\n\n    # return answer\n    return round(position_value, 2)\n```\n\nThis Python program calculates the value of the executive's position in the equity forward contract. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the current forward price using the spot price and risk-free rate.\n3. We then calculate the value of the forward contract as the difference between the current forward price and the initial forward price, discounted to the present.\n4. We calculate the present value of the promised $1 profit.\n5. The total value of the executive's position is the sum of the forward contract value and the present value of the profit.\n6. Finally, we round the result to two decimal places and return it.\n\nThis program should provide the correct value of the executive's position based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-623",
        "python_solution": "",
        "ground_truth": null,
        "question": "A 12-month zero-coupon bond offers a return of 4.0%. The yields for the 24-month and 36-month zero-coupon bonds are 5.0% and 6.0% respectively. What would be the interest rate for a 12-month loan starting in a year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04  # 12-month zero-coupon bond yield\n    r2 = 0.05  # 24-month zero-coupon bond yield\n    r3 = 0.06  # 36-month zero-coupon bond yield\n\n    # Do math calculation to get the answer\n    # Calculate the forward rate using the formula:\n    # (1 + r2)^2 = (1 + r1) * (1 + f)\n    # where f is the forward rate we're solving for\n    f = ((1 + r2)**2 / (1 + r1)) - 1\n\n    # Convert to percentage\n    answer = f * 100\n\n    # return answer\n    return round(answer, 2)\n```\n\nThis Python program calculates the forward interest rate for a 12-month loan starting in a year, based on the given zero-coupon bond yields. Here's how it works:\n\n1. We define the variables for the given yields: r1 for the 12-month yield, r2 for the 24-month yield, and r3 for the 36-month yield (although r3 isn't used in this calculation).\n\n2. We use the formula for forward rates: (1 + r2)^2 = (1 + r1) * (1 + f), where f is the forward rate we're solving for.\n\n3. We solve this equation for f: f = ((1 + r2)^2 / (1 + r1)) - 1\n\n4. We convert the result to a percentage by multiplying by 100.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThis program will return the forward interest rate for a 12-month loan starting in a year, expressed as a percentage."
        ]
    },
    {
        "tables": [
            "|                    | S&P 500 | Indigo Fund |\n|--------------------|---------|-------------|\n| Expected annual return | 9.0%    | 10.5%      |\n| Return standard deviation | 18.0%  | 25.0%      |\n| Sharpe ratio | 0.333   | 0.30       |\n| Active return |         | 1.2%       |\n| Active risk |           | 8.0%       |\n| Information ratio |     | 0.15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-624",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the highest Sharpe ratio achievable by a fund manager when merging the S&P 500 benchmark portfolio and the Indigo Fund?",
        "output": [
            "Here's a Python program to calculate the highest achievable Sharpe ratio by merging the S&P 500 benchmark portfolio and the Indigo Fund:\n\n```python\ndef solution():\n    # Define variables name and value\n    sp500_return = 0.09\n    sp500_std_dev = 0.18\n    indigo_return = 0.105\n    indigo_std_dev = 0.25\n    risk_free_rate = 0.03  # Assuming risk-free rate of 3%\n\n    # Do math calculation to get the answer\n    \n    # Calculate correlation coefficient (assuming perfect positive correlation for maximum Sharpe ratio)\n    correlation = 1\n    \n    # Calculate optimal weight for Indigo Fund\n    numerator = (indigo_return - sp500_return) * sp500_std_dev**2 - (sp500_return - risk_free_rate) * (indigo_std_dev**2 - correlation * sp500_std_dev * indigo_std_dev)\n    denominator = (indigo_return - sp500_return) * (sp500_std_dev**2 + indigo_std_dev**2 - 2 * correlation * sp500_std_dev * indigo_std_dev)\n    w_indigo = numerator / denominator\n    \n    # Ensure weight is between 0 and 1\n    w_indigo = max(0, min(1, w_indigo))\n    w_sp500 = 1 - w_indigo\n    \n    # Calculate portfolio return and standard deviation\n    portfolio_return = w_sp500 * sp500_return + w_indigo * indigo_return\n    portfolio_std_dev = ((w_sp500 * sp500_std_dev)**2 + (w_indigo * indigo_std_dev)**2 + 2 * w_sp500 * w_indigo * correlation * sp500_std_dev * indigo_std_dev)**0.5\n    \n    # Calculate maximum Sharpe ratio\n    max_sharpe_ratio = (portfolio_return - risk_free_rate) / portfolio_std_dev\n\n    # return"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-625",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of an account that a shareholder has deposited ￡2,000 into if it pays 6% per annum compounded continuously after four years?",
        "output": [
            "Here's the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 2000  # Initial deposit in pounds\n    rate = 0.06  # 6% annual interest rate\n    time = 4  # Time in years\n    \n    # Do math calculation to get the answer\n    import math\n    final_value = principal * math.exp(rate * time)\n    \n    # return answer\n    return round(final_value, 2)\n```\n\nThis program calculates the value of an account after 4 years of continuous compound interest. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `principal`: The initial deposit of £2,000\n   - `rate`: The annual interest rate of 6% (0.06 in decimal form)\n   - `time`: The time period of 4 years\n\n2. We use the formula for continuous compound interest:\n   A = P * e^(r * t)\n   Where:\n   A = Final amount\n   P = Principal (initial deposit)\n   e = Euler's number (approximately 2.71828)\n   r = Annual interest rate (as a decimal)\n   t = Time in years\n\n3. We use `math.exp()` function to calculate e^(r * t)\n\n4. The final value is rounded to 2 decimal places for currency representation.\n\n5. The function returns the calculated final value.\n\nWhen you run this function, it will return the value of the account after 4 years of continuous compound interest at 6% per annum."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-626",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the consultancy firm, Blue Street Inc, announced total revenues of $100 million, total expenses of $80 million, and net income of $20 million in the last year, and if accounts receivable rose by $10 million, what amount of cash was received by the firm from clients?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_revenues = 100000000\n    total_expenses = 80000000\n    net_income = 20000000\n    accounts_receivable_increase = 10000000\n    \n    # Do math calculation to get the answer\n    cash_received = total_revenues - accounts_receivable_increase\n    \n    # return answer\n    return cash_received\n```\n\nThis program calculates the amount of cash received by Blue Street Inc from clients. Here's how it works:\n\n1. We define the given variables:\n   - Total revenues: $100 million\n   - Total expenses: $80 million\n   - Net income: $20 million\n   - Increase in accounts receivable: $10 million\n\n2. To calculate the cash received, we subtract the increase in accounts receivable from the total revenues. This is because the increase in accounts receivable represents the portion of revenue that has been earned but not yet received in cash.\n\n3. The function returns the calculated cash received.\n\nWhen you run this function, it will return 90000000, which means the firm received $90 million in cash from clients. This makes sense because out of the $100 million in total revenues, $10 million is still in accounts receivable (not yet received in cash), so the actual cash received is $90 million."
        ]
    },
    {
        "tables": [
            "|                         | 2018 | 2019 |\n|-------------------------|------|------|\n| Revenue                 | 5,000| 7,000|\n| Cost                    | 2,000| 2,300|\n| Operating income        | 3,000| 4,700|\n| Net profit              | 1,650| 2,300|\n| Total assets            | 4,000| 6,000|\n| Total liabilities       | 1,200| 900  |\n| Equity                  | 2,800| 5,100|",
            "|                        | 2018  | 2019  |\n| ---------------------- |:-----:| -----:|\n| Revenue                | 2,000 | 2,500 |\n| Cost                   | 1,200 | 1,300 |\n| Operating income       | 800   | 1,200 |\n| Net profit             | 460   | 820   |\n| Dividends paid         | 230   | 410   |\n| Total assets           | 1,000 | 1,100 |\n| Total liabilities      | 600   | 650   |\n| Equity                 | 400   | 450   |"
        ],
        "topic": "Accounting",
        "question_id": "test-627",
        "python_solution": "",
        "ground_truth": null,
        "question": "In China, there's an education business known as PZ Corporation which adheres to IFRS. As of 2018, the corporation had a 15% non-controlling equity stake in T-web Corporation. The executives at PZ decided to boost the company’s stake in T-web to 50% through a straight cash buy on 1st January 2019, with no transactions between the companies. The table provided includes the financial statement details of both PZ and T-web corporations. Could you please compute the consolidated sales for 2019 for PZ corporation, after gaining control over T-web company:",
        "output": [
            "Here's a Python program to calculate the consolidated sales for PZ Corporation in 2019 after gaining control over T-web:\n\n```python\ndef solution():\n    # Define variables name and value\n    pz_revenue_2019 = 7000\n    tweb_revenue_2019 = 2500\n    \n    # Do math calculation to get the answer\n    \n    # PZ already owned 15% of T-web in 2018, so we only need to add 85% of T-web's revenue\n    additional_revenue = 0.85 * tweb_revenue_2019\n    \n    consolidated_sales = pz_revenue_2019 + additional_revenue\n    \n    # return answer\n    return consolidated_sales\n\n```\n\nThis solution takes into account that PZ Corporation already had a 15% stake in T-web in 2018, so only 85% of T-web's revenue needs to be added to calculate the consolidated sales for 2019. The program adds this 85% of T-web's revenue to PZ's own revenue for 2019 to get the final consolidated sales figure."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-628",
        "python_solution": "",
        "ground_truth": null,
        "question": "A private equity fund employs the individual transaction approach to allot carried interest (20% of profit) to its managing partner. The managing partner put in $10 million in an enterprise three years back and exited with $23 million. What is the share available for the passive investors of the said investment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000\n    exit_value = 23000000\n    carried_interest_rate = 0.20\n    \n    # Do math calculation to get the answer\n    total_profit = exit_value - initial_investment\n    carried_interest = carried_interest_rate * total_profit\n    passive_investors_share = exit_value - carried_interest - initial_investment\n    \n    # return answer\n    return passive_investors_share\n```\n\nThis Python program calculates the share available for passive investors in the given private equity scenario. Here's how it works:\n\n1. We define the initial investment ($10 million), exit value ($23 million), and the carried interest rate (20% or 0.20).\n\n2. We calculate the total profit by subtracting the initial investment from the exit value.\n\n3. The carried interest is calculated as 20% of the total profit.\n\n4. The share for passive investors is then calculated by subtracting both the carried interest and the initial investment from the exit value.\n\n5. Finally, the program returns the passive investors' share.\n\nWhen you run this function, it will return the amount in dollars that is available for the passive investors of this investment."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-629",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will be the fourth quintile number of the series 1-10?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    series = list(range(1, 11))  # Series from 1 to 10\n    n = len(series)\n    \n    # Do math calculation to get the answer\n    q4_position = (4 * n) / 5  # Position of the fourth quintile\n    \n    if q4_position.is_integer():\n        # If position is an integer, take the average of this position and the next\n        q4 = (series[int(q4_position) - 1] + series[int(q4_position)]) / 2\n    else:\n        # If position is not an integer, round up to get the fourth quintile\n        q4 = series[int(q4_position)]\n    \n    # return answer\n    return q4\n```\n\nThis Python program calculates the fourth quintile number of the series 1-10. Here's a breakdown of what it does:\n\n1. It creates a list `series` containing numbers from 1 to 10.\n2. It calculates the position of the fourth quintile using the formula (4 * n) / 5, where n is the length of the series.\n3. If the calculated position is an integer, it takes the average of the value at that position and the next value.\n4. If the calculated position is not an integer, it rounds up to the next integer and takes the value at that position.\n5. Finally, it returns the calculated fourth quintile value.\n\nFor the series 1-10, this program will return 8, which is the fourth quintile number of this series."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-630",
        "python_solution": "",
        "ground_truth": null,
        "question": "In early 2013, corporation X released 5-year bonds with a face value of $2,000,000. Given a market interest rate of 6%, these bonds are set to pay a 7% coupon every 31st of December. What would the bonds payable amount to at the time they were issued?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    coupon_rate = 0.07\n    market_rate = 0.06\n    years = 5\n    \n    # Do math calculation to get the answer\n    annual_coupon_payment = face_value * coupon_rate\n    present_value_of_coupons = 0\n    for year in range(1, years + 1):\n        present_value_of_coupons += annual_coupon_payment / ((1 + market_rate) ** year)\n    \n    present_value_of_principal = face_value / ((1 + market_rate) ** years)\n    \n    bond_value = present_value_of_coupons + present_value_of_principal\n    \n    # return answer\n    return round(bond_value, 2)\n```\n\nThis program calculates the value of the bonds at the time they were issued. Here's how it works:\n\n1. We define the variables: face value, coupon rate, market rate, and the number of years.\n\n2. We calculate the annual coupon payment.\n\n3. We calculate the present value of all future coupon payments using a loop.\n\n4. We calculate the present value of the principal (face value) to be paid at maturity.\n\n5. We sum the present values of coupons and principal to get the bond value.\n\n6. Finally, we return the bond value rounded to two decimal places.\n\nThis program will return the amount that the bonds payable would be at the time they were issued, considering the face value, coupon rate, market rate, and time to maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-631",
        "python_solution": "",
        "ground_truth": null,
        "question": "The private equity portfolio had a net asset value of $120m at the close of 2019 with all capital called upon. The portfolio predicts a distribution payment of 20% by the conclusion of 2020. The portfolio's net asset value is projected to grow 10% before distribution. What is the projected net asset value after distribution at the end of 2020?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_nav = 120000000  # $120m in dollars\n    growth_rate = 0.10  # 10% growth\n    distribution_rate = 0.20  # 20% distribution\n\n    # Do math calculation to get the answer\n    nav_before_distribution = initial_nav * (1 + growth_rate)\n    distribution_amount = nav_before_distribution * distribution_rate\n    final_nav = nav_before_distribution - distribution_amount\n\n    # return answer\n    return final_nav\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The projected net asset value after distribution at the end of 2020 is ${result:,.2f}\")\n```\n\nThis program calculates the projected net asset value after distribution at the end of 2020 based on the given information:\n\n1. It starts with the initial net asset value of $120 million.\n2. It calculates the value after 10% growth.\n3. It then calculates the distribution amount (20% of the grown value).\n4. Finally, it subtracts the distribution amount from the grown value to get the final net asset value.\n\nThe function returns the final net asset value in dollars. If you run this function, it will return the numerical answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-632",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the spot market, the present exchange rate for EUR/USD is 0.8615. In the forward market, the EUR/USD rate for the next 90 days is indicated as +13.5 points. Can you tell me the forward rate for EUR/USD over the next 90 days?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 0.8615\n    forward_points = 0.00135  # 13.5 points = 0.00135\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate + forward_points\n\n    # return answer\n    return round(forward_rate, 6)\n```\n\nThis Python program calculates the forward rate for EUR/USD over the next 90 days based on the given information:\n\n1. We define the spot rate as 0.8615.\n2. The forward points are given as +13.5 points, which in decimal form is 0.00135 (since 1 point = 0.0001 in forex).\n3. We calculate the forward rate by adding the spot rate and the forward points.\n4. The result is rounded to 6 decimal places, which is standard in forex markets.\n\nWhen you run this function, it will return the forward rate for EUR/USD over the next 90 days."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-633",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jacob, a US-based financier, is thinking about purchasing a common stock with a yearly dividend of $2.5. This dividend is predicted to increase at a yearly rate of 5%. If the expected return rate of investors is 8%, what would be the inherent worth of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_dividend = 2.5\n    growth_rate = 0.05\n    expected_return = 0.08\n\n    # Do math calculation to get the answer\n    # Using the Gordon Growth Model: P = D1 / (r - g)\n    # Where P is the intrinsic value, D1 is the next year's dividend,\n    # r is the expected return rate, and g is the growth rate\n    next_year_dividend = annual_dividend * (1 + growth_rate)\n    intrinsic_value = next_year_dividend / (expected_return - growth_rate)\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of the stock using the Gordon Growth Model, which is appropriate for valuing stocks with stable, growing dividends. The program:\n\n1. Defines the given variables: annual dividend, growth rate, and expected return rate.\n2. Calculates the next year's dividend by applying the growth rate to the current dividend.\n3. Applies the Gordon Growth Model formula to calculate the intrinsic value.\n4. Returns the intrinsic value rounded to two decimal places, representing dollars and cents.\n\nWhen you run this function, it will return the estimated intrinsic value of the stock based on the given information."
        ]
    },
    {
        "tables": [
            "| | Truck* | Land** |\n| --- | --- | --- | \n| Original cost | $57,000 | $18,000 |\n| Estimated  life | 8 years | |\n| Estimated salvage value at purchase | $15,000 | |\n| Depreciation method | Declining balance, 20% per year | |\n| Current fair value of item | $27,000 | $21,000 |\n\n\\* The last sale of a similar truck by the company occurred more than six months ago.\n\n\\*\\* The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "test-634",
        "python_solution": "",
        "ground_truth": null,
        "question": "A corporation decided to trade a truck that it had bought three years prior for a piece of land owned by a different corporation. The following chart includes details about both items: The financial statement for the corporation that is getting rid of the truck is most likely going to report a loss of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    salvage_value_truck = 15000\n    depreciation_rate = 0.20\n    years_owned = 3\n    current_fair_value_truck = 27000\n    \n    # Do math calculation to get the answer\n    \n    # Calculate book value of truck after 3 years\n    depreciable_amount = original_cost_truck - salvage_value_truck\n    accumulated_depreciation = depreciable_amount * (1 - (1 - depreciation_rate) ** years_owned)\n    book_value = original_cost_truck - accumulated_depreciation\n    \n    # Calculate loss\n    loss = book_value - current_fair_value_truck\n    \n    # return answer rounded to nearest dollar\n    return round(loss)\n```\n\nThis Python program calculates the loss that the corporation would report when trading the truck. Here's a breakdown of the steps:\n\n1. We define the known variables from the given information.\n\n2. We calculate the book value of the truck after 3 years using the declining balance method with a 20% depreciation rate per year.\n\n3. The loss is calculated as the difference between the book value and the current fair value of the truck.\n\n4. The result is rounded to the nearest dollar before being returned.\n\nThis program will return the loss that the corporation is most likely to report on its financial statement when trading the truck for the piece of land."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n| ---      | ---                | ---                           |\n| 1        | 30                 | 20                            |\n| 2        | 70                 | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-635",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming an investment manager constructs this portfolio, and the covariance of returns for the two securities involved is -0.0240, what is the projected standard deviation of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w1 = 0.30  # weight of security 1\n    w2 = 0.70  # weight of security 2\n    sd1 = 0.20  # standard deviation of security 1\n    sd2 = 0.12  # standard deviation of security 2\n    cov = -0.0240  # covariance between security 1 and 2\n\n    # Do math calculation to get the answer\n    var1 = (w1 * sd1) ** 2\n    var2 = (w2 * sd2) ** 2\n    cov_term = 2 * w1 * w2 * cov\n\n    portfolio_variance = var1 + var2 + cov_term\n    portfolio_sd = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_sd * 100  # Convert to percentage\n```\n\nThis Python program calculates the projected standard deviation of the portfolio using the following steps:\n\n1. We define the variables based on the given information:\n   - Weights of securities (w1, w2)\n   - Standard deviations of securities (sd1, sd2)\n   - Covariance between the securities (cov)\n\n2. We calculate the portfolio variance using the formula:\n   Portfolio Variance = (w1 * sd1)^2 + (w2 * sd2)^2 + 2 * w1 * w2 * cov\n\n3. We take the square root of the portfolio variance to get the portfolio standard deviation.\n\n4. Finally, we multiply by 100 to convert the result to a percentage.\n\nThe function will return the projected standard deviation of the portfolio as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-636",
        "python_solution": "",
        "ground_truth": null,
        "question": "A specialist working on the stable-income trade desk noticed that the annual number of defaults in the bond portfolio adheres to a Poisson process. The mean number of defaults is four every year. Given that defaults are independent, what are the odds that there will be a maximum of one default in the coming year?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    import math\n    \n    lambda_param = 4  # Mean number of defaults per year\n    k = 1  # Maximum number of defaults we're interested in\n\n    # Do math calculation to get the answer\n    p_0 = math.exp(-lambda_param)  # Probability of 0 defaults\n    p_1 = math.exp(-lambda_param) * lambda_param  # Probability of 1 default\n    \n    probability = p_0 + p_1  # Probability of 0 or 1 defaults\n    \n    # Convert probability to odds\n    odds = probability / (1 - probability)\n    \n    # return answer\n    return odds\n```\n\nThis program calculates the odds that there will be a maximum of one default in the coming year, given that the number of defaults follows a Poisson distribution with a mean of 4 per year.\n\nHere's a breakdown of the solution:\n\n1. We import the `math` module to use the exponential function.\n2. We define `lambda_param` as 4, which is the mean number of defaults per year.\n3. We set `k` to 1, as we're interested in the probability of 0 or 1 defaults.\n4. We calculate the probability of 0 defaults using the Poisson formula: P(X=0) = e^(-λ)\n5. We calculate the probability of 1 default using the Poisson formula: P(X=1) = e^(-λ) * λ\n6. We sum these probabilities to get the probability of 0 or 1 defaults.\n7. We convert this probability to odds using the formula: odds = p / (1-p)\n8. Finally, we return the calculated odds.\n\nThis program will return the odds as a decimal number. For example, if the result is 0.2, it means the odds are 1:5 (or \"1 to 5\") that there will be a maximum of one default in the coming year."
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|------------------|---------------------|\n| 0.25                 | 0.997506               |\n| 0.5                  | 0.992556               |\n| 0.75                | 0.985222               |\n| 1                     | 0.975610               |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-637",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three months ago, a supervisor agreed to a receive-fixed and pay-equity swap. The yearly fixed rate was set at 3% and the equity index was 100 at the time the swap was made. The swap will mature in one year and has a quarterly reset, and nominal amount of $100 million. The value of the swap is up for evaluation, assuming the equity index is now 101 and the current spot rates are provided:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nominal_amount = 100000000\n    fixed_rate = 0.03\n    initial_index = 100\n    current_index = 101\n    quarterly_payment = fixed_rate / 4 * nominal_amount\n    \n    pv_factors = {0.25: 0.997506, 0.5: 0.992556, 0.75: 0.985222, 1: 0.975610}\n    \n    # Do math calculation to get the answer\n    fixed_leg_value = 0\n    for time, pv_factor in pv_factors.items():\n        fixed_leg_value += quarterly_payment * pv_factor\n    \n    equity_leg_value = nominal_amount * (current_index / initial_index - 1) * pv_factors[1]\n    \n    swap_value = equity_leg_value - fixed_leg_value\n    \n    # return answer\n    return swap_value\n```\n\nThis Python program calculates the value of the swap based on the given information. Here's a breakdown of the calculation:\n\n1. We define the necessary variables including the nominal amount, fixed rate, initial and current equity index values, and the quarterly fixed payment.\n\n2. We create a dictionary of present value factors for each payment period.\n\n3. We calculate the value of the fixed leg by summing the present values of all future fixed payments.\n\n4. We calculate the value of the equity leg based on the change in the equity index and the present value factor for the maturity date.\n\n5. The swap value is the difference between the equity leg value and the fixed leg value.\n\n6. The function returns this swap value, which represents the current value of the swap to the receiver of the fixed payments (or the negative of this value for the payer of fixed payments)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-638",
        "python_solution": "",
        "ground_truth": null,
        "question": "A study reveals that in this structure, 30% of workspaces are equipped with printers. Given a binomial probability distribution, what is the chance that just three companies will possess a printer in a casual selection of five firms?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    n = 5  # number of firms selected\n    k = 3  # number of firms with printers\n    p = 0.30  # probability of a firm having a printer\n\n    # Do math calculation to get the answer\n    from math import comb\n    \n    # Calculate the binomial probability\n    probability = comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n    \n    # Convert probability to percentage and round to 4 decimal places\n    answer = round(probability * 100, 4)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the probability of exactly 3 out of 5 randomly selected firms having printers, given that 30% of workspaces are equipped with printers. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `n = 5` (total number of firms selected)\n   - `k = 3` (number of firms we want to have printers)\n   - `p = 0.30` (probability of a firm having a printer, i.e., 30%)\n\n2. We use the binomial probability formula:\n   P(X = k) = C(n,k) * p^k * (1-p)^(n-k)\n   Where C(n,k) is the number of combinations of n items taken k at a time.\n\n3. We use the `comb` function from the `math` module to calculate the number of combinations.\n\n4. We calculate the probability and convert it to a percentage, rounding to 4 decimal places.\n\n5. The function returns this percentage as the answer.\n\nThis program will return the probability as a percentage, rounded to 4 decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-639",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the width of a 90% confidence interval using the appropriate t-distribution for a sample size of 37, having a mean of 116.23 and a variance of 245.55?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_size = 37\n    sample_mean = 116.23\n    sample_variance = 245.55\n    confidence_level = 0.90\n    degrees_of_freedom = sample_size - 1\n\n    # Do math calculation to get the answer\n    import scipy.stats as stats\n    import math\n\n    # Calculate the standard error\n    standard_error = math.sqrt(sample_variance / sample_size)\n\n    # Find the t-value for 90% confidence interval\n    t_value = stats.t.ppf((1 + confidence_level) / 2, degrees_of_freedom)\n\n    # Calculate the margin of error\n    margin_of_error = t_value * standard_error\n\n    # Calculate the width of the confidence interval\n    width = 2 * margin_of_error\n\n    # return answer\n    return width\n```\n\nThis Python program calculates the width of a 90% confidence interval using the t-distribution for the given sample statistics. Here's a breakdown of the steps:\n\n1. We define the given variables: sample size, sample mean, sample variance, confidence level, and degrees of freedom.\n\n2. We import the necessary modules: `scipy.stats` for the t-distribution and `math` for square root calculation.\n\n3. We calculate the standard error using the formula: SE = sqrt(variance / sample size).\n\n4. We find the t-value for a 90% confidence interval using the t-distribution with (n-1) degrees of freedom.\n\n5. We calculate the margin of error: t-value * standard error.\n\n6. The width of the confidence interval is twice the margin of error.\n\n7. Finally, we return the calculated width.\n\nThis program will return the width of the 90% confidence interval based on the given sample statistics and using the appropriate t-distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-640",
        "python_solution": "",
        "ground_truth": null,
        "question": "If, in a basic economy without a foreign sector, the ensuing formulas are valid: Consumption formula: C = 2,500 + 0.80 × (Y – T), Investment formula: I = 500 + 0.30 × Y – 25 × r, State expenditure: G = 1,000, Tax formula: T = –250 + 0.30 × Y, where Y signifies total income and r symbolizes real interest rate as a percentage, how much will the total income grow if the actual interest rate is 3% and state expenditure rises to 2,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r = 3  # real interest rate\n    G_initial = 1000  # initial state expenditure\n    G_new = 2000  # new state expenditure\n\n    # Do math calculation to get the answer\n    \n    # Define the equations\n    def C(Y):\n        return 2500 + 0.80 * (Y - T(Y))\n    \n    def I(Y):\n        return 500 + 0.30 * Y - 25 * r\n    \n    def T(Y):\n        return -250 + 0.30 * Y\n\n    # Calculate initial equilibrium\n    def Y_equilibrium(G):\n        return (2500 + 500 - 25*r + G + 250) / (1 - 0.80 - 0.30 + 0.80*0.30)\n\n    Y_initial = Y_equilibrium(G_initial)\n    Y_new = Y_equilibrium(G_new)\n\n    # Calculate the change in total income\n    delta_Y = Y_new - Y_initial\n\n    # return answer\n    return round(delta_Y, 2)\n```\n\nThis Python program calculates the change in total income (Y) when state expenditure (G) increases from 1,000 to 2,000, given the specified equations for consumption (C), investment (I), and taxes (T), with a real interest rate (r) of 3%.\n\nThe program defines functions for C, I, and T based on the given formulas. It then creates a function to calculate the equilibrium income (Y) for a given level of government spending (G).\n\nThe solution calculates the initial equilibrium income and the new equilibrium income after the increase in government spending. The difference between these two values is the answer to the question: how much will the total income grow.\n\nThe result is rounded to two decimal places for clarity."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-641",
        "python_solution": "",
        "ground_truth": null,
        "question": "The details provided are related to a hedge fund named Trident Consultancy, which has:     AUM valued at $300 million as per the end of last year     A management fee set at 2% (calculated based on the AUM at year-end)     An incentive fee of 20% factored in: after deducting the management fee, considering a 5% soft hurdle rate, and utilizing a high-water mark (the high-water mark is $357 million)     The gross return for the current year for the fund stands at 20%. Could you calculate the total fee that Trident has earned this year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    aum = 300000000  # AUM at year-end\n    management_fee_rate = 0.02  # 2% management fee\n    incentive_fee_rate = 0.20  # 20% incentive fee\n    hurdle_rate = 0.05  # 5% soft hurdle rate\n    high_water_mark = 357000000  # High-water mark\n    gross_return = 0.20  # 20% gross return for the current year\n\n    # Do math calculation to get the answer\n    \n    # Calculate management fee\n    management_fee = aum * management_fee_rate\n    \n    # Calculate fund value after gross return\n    fund_value_after_return = aum * (1 + gross_return)\n    \n    # Calculate value above high-water mark\n    value_above_hwm = max(0, fund_value_after_return - high_water_mark)\n    \n    # Calculate hurdle amount\n    hurdle_amount = aum * hurdle_rate\n    \n    # Calculate performance above hurdle\n    performance_above_hurdle = max(0, fund_value_after_return - aum - hurdle_amount - management_fee)\n    \n    # Calculate incentive fee\n    incentive_fee = min(value_above_hwm, performance_above_hurdle) * incentive_fee_rate\n    \n    # Calculate total fee\n    total_fee = management_fee + incentive_fee\n\n    # return answer\n    return total_fee\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-642",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Aquarius Pool of Funds puts GBP150 million into each of Beta Hedge Fund and XYZ Hedge Fund. Aquarius Pool of Funds operates a \"1 and 10\" fee system. Both management and incentive fees are evaluated separately at the end of each calendar year. After one year, factoring in their individual management and incentive fees, the value of Aquarius's investment in Beta stands at GBP 80 million and it's worth GBP240 million in XYZ. What is the yearly return for a investor in the Aquarius Pool of Funds, after taking into account the fees charged at the fund-of-funds level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 150000000 * 2  # Total investment in both funds\n    beta_final_value = 80000000\n    xyz_final_value = 240000000\n    management_fee_rate = 0.01  # 1%\n    incentive_fee_rate = 0.10  # 10%\n\n    # Do math calculation to get the answer\n    total_final_value = beta_final_value + xyz_final_value\n    profit = total_final_value - initial_investment\n    \n    # Calculate fees\n    management_fee = initial_investment * management_fee_rate\n    incentive_fee = max(0, profit * incentive_fee_rate)\n    total_fees = management_fee + incentive_fee\n    \n    # Calculate net profit and return\n    net_profit = profit - total_fees\n    net_return = net_profit / initial_investment\n    \n    # Convert to percentage\n    return_percentage = net_return * 100\n    \n    # return answer\n    return round(return_percentage, 2)\n```\n\nThis Python program calculates the yearly return for an investor in the Aquarius Pool of Funds, taking into account the fees charged at the fund-of-funds level. Here's a breakdown of the calculation:\n\n1. We define the initial investment, final values of both funds, and the fee rates.\n2. We calculate the total final value and the gross profit.\n3. We calculate the management fee (1% of initial investment) and the incentive fee (10% of profit, if positive).\n4. We subtract the total fees from the gross profit to get the net profit.\n5. We calculate the net return by dividing the net profit by the initial investment.\n6. We convert the return to a percentage and round it to two decimal places.\n\nThe function will return the yearly return as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "|                                | 2016 ($US millions) |\n|--------------------------------|---------------------|\n| Cost: Total property, plant, and equipment (PP&E) | 30,815                 |\n| Accumulated depreciation | 16,465                 |\n| Net PP&E                         | 14,350                 |\n| Average net PP&E                 | 12,200                 |\n| Net sales                        | 21,670                 |\n| Net income                       | 2,705                   |"
        ],
        "topic": "Accounting",
        "question_id": "test-643",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the available selected fixed asset details for a firm, what is the firm's fixed asset turnover ratio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales = 21670\n    average_net_ppe = 12200\n    \n    # Do math calculation to get the answer\n    fixed_asset_turnover_ratio = net_sales / average_net_ppe\n    \n    # return answer\n    return fixed_asset_turnover_ratio\n```\n\nThis Python program calculates the fixed asset turnover ratio based on the information provided in the table. The fixed asset turnover ratio is calculated by dividing net sales by the average net property, plant, and equipment (PP&E).\n\nIn this case:\n- Net sales: $21,670 million\n- Average net PP&E: $12,200 million\n\nThe program defines these values, performs the calculation, and returns the result. When executed, this function will return the fixed asset turnover ratio for the firm."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-644",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the historical returns of Company 1's shares and Company 2's shares have a correlation of 0.75, and the variance of Company 1's shares is 0.16 while the variance of Company 2's shares is 0.09, what is the covariance of returns of Company 1's shares and Company 2's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.75\n    variance_company1 = 0.16\n    variance_company2 = 0.09\n    \n    # Do math calculation to get the answer\n    standard_deviation_company1 = variance_company1 ** 0.5\n    standard_deviation_company2 = variance_company2 ** 0.5\n    \n    covariance = correlation * standard_deviation_company1 * standard_deviation_company2\n    \n    # return answer\n    return covariance\n```\n\nThis Python program calculates the covariance of returns between Company 1's shares and Company 2's shares based on the given information:\n\n1. We define the variables for correlation and variances of both companies.\n2. We calculate the standard deviations by taking the square root of the variances.\n3. We use the formula: Covariance = Correlation * Standard Deviation of Company 1 * Standard Deviation of Company 2\n4. The calculated covariance is then returned as the answer.\n\nWhen you run this function, it will return the covariance of returns between Company 1's shares and Company 2's shares."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-645",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine a call option that is sold for $4 and has an exercise price of $50. Calculate the value upon expiry and the profit for a purchaser if the price of the underlying asset at expiry is $55.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    exercise_price = 50\n    underlying_asset_price = 55\n\n    # Do math calculation to get the answer\n    value_at_expiry = max(underlying_asset_price - exercise_price, 0)\n    profit = value_at_expiry - option_price\n\n    # return answer\n    return value_at_expiry, profit\n```\n\nThis Python program calculates the value of the call option at expiry and the profit for the purchaser based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `option_price`: The price at which the call option is sold ($4)\n   - `exercise_price`: The strike price of the option ($50)\n   - `underlying_asset_price`: The price of the underlying asset at expiry ($55)\n\n2. We calculate the value at expiry:\n   - The value of a call option at expiry is the maximum of either the difference between the underlying asset price and the exercise price, or zero.\n   - This is represented by `max(underlying_asset_price - exercise_price, 0)`\n\n3. We calculate the profit:\n   - The profit is the difference between the value at expiry and the initial cost of the option.\n\n4. The function returns both the value at expiry and the profit as a tuple.\n\nWhen you run this function, it will return (5, 1), meaning:\n- The value of the option at expiry is $5\n- The profit for the purchaser is $1"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-646",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a consistent interest rate of 8.87%, how much does a shareholder need to invest now if they aim to have $100 in their account in three years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 100\n    interest_rate = 0.0887\n    time_years = 3\n\n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + interest_rate) ** time_years)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis program calculates the present value of an investment given a future value, interest rate, and time period using the present value formula:\n\nPV = FV / (1 + r)^t\n\nWhere:\nPV = Present Value\nFV = Future Value\nr = Interest Rate\nt = Time in years\n\nThe solution function will return the amount needed to invest now (present value) rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-647",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose a call option is priced at $4 with an exercise price of $50. Calculate the value at expiration and the profit for the vendor if the price of the underlying asset at expiration is $52.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    exercise_price = 50\n    underlying_price_at_expiration = 52\n\n    # Do math calculation to get the answer\n    value_at_expiration = max(underlying_price_at_expiration - exercise_price, 0)\n    profit_for_vendor = option_price - value_at_expiration\n\n    # return answer\n    return (value_at_expiration, profit_for_vendor)\n```\n\nThis Python program calculates the value at expiration of the call option and the profit for the vendor based on the given information. Here's an explanation of the calculations:\n\n1. The value at expiration for a call option is the maximum of either the difference between the underlying asset's price at expiration and the exercise price, or zero. This is because the option holder will only exercise the option if it's profitable to do so.\n\n2. The profit for the vendor (option writer) is the difference between the initial option price they received and the value at expiration they have to pay out.\n\nThe function returns a tuple containing both the value at expiration and the profit for the vendor. You can unpack these values when calling the function if you need to use them separately."
        ]
    },
    {
        "tables": [
            "| Source | Sum of Squares (SS) |\n|--------|---------------------|\n| Explained | 957 |\n| Total | 1580 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-648",
        "python_solution": "",
        "ground_truth": null,
        "question": "What does the term Sum of Squares Residuals (SSR) refer to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    SS_explained = 957\n    SS_total = 1580\n    \n    # Do math calculation to get the answer\n    SS_residual = SS_total - SS_explained\n    \n    # return answer\n    return SS_residual\n```\n\nThe Sum of Squares Residuals (SSR) refers to the unexplained variation in a statistical model. It can be calculated by subtracting the Sum of Squares Explained (SSE) from the Total Sum of Squares (SST).\n\nIn this case, we have:\n- Sum of Squares Explained (SSE) = 957\n- Total Sum of Squares (SST) = 1580\n\nThe program calculates SSR by subtracting SSE from SST, which gives us the unexplained variation or the Sum of Squares Residuals."
        ]
    },
    {
        "tables": [
            "|                                               | 毛 millions |\n|-----------------------------------------------|------------:|\n| Revenues for the year                         |      12,500 |\n| Total expenses for the year                   |      10,000 |\n| Gains from available-for-sale securities      |       1,475 |\n| Loss on foreign currency translation adjustments on a foreign subsidiary |         325 |\n| Dividends paid                                |         500 |"
        ],
        "topic": "Accounting",
        "question_id": "test-649",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the total comprehensive income of the business (in € millions) based on the information from the business's financial records?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenues = 12500\n    expenses = 10000\n    gains_available_for_sale = 1475\n    loss_foreign_currency = 325\n    dividends_paid = 500  # Not used in calculation of comprehensive income\n\n    # Do math calculation to get the answer\n    net_income = revenues - expenses\n    other_comprehensive_income = gains_available_for_sale - loss_foreign_currency\n    total_comprehensive_income = net_income + other_comprehensive_income\n\n    # return answer\n    return total_comprehensive_income\n```\n\nThis Python function calculates the total comprehensive income based on the provided financial information. Here's a breakdown of the calculation:\n\n1. Net Income = Revenues - Expenses\n2. Other Comprehensive Income = Gains from available-for-sale securities - Loss on foreign currency translation adjustments\n3. Total Comprehensive Income = Net Income + Other Comprehensive Income\n\nNote that dividends paid are not included in the calculation of comprehensive income, as they represent a distribution of profits rather than a component of income.\n\nThe function returns the total comprehensive income in € millions."
        ]
    },
    {
        "tables": [
            "| Capital component | Book Value (000) | Market Value(000) | Component cost |\n|------------------|-----------------|-----------------|---------------|\n| Debt             | $100            | $80             | 8%            |\n| Preferred stock  | $20             | $20             | 10%           |\n| Common stock     | $100            | $200            | 12%           |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-650",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collected the subsequent data pertaining to a business's capital structure and pre-tax component costs. What would be the weighted average cost of capital (WACC) of the business, given that the marginal tax rate of the business is 40%?",
        "output": [
            "def solution():\n    # Define variables name and value\n    debt_market_value = 80000\n    preferred_stock_market_value = 20000\n    common_stock_market_value = 200000\n    total_market_value = debt_market_value + preferred_stock_market_value + common_stock_market_value\n    \n    debt_cost = 0.08\n    preferred_stock_cost = 0.10\n    common_stock_cost = 0.12\n    tax_rate = 0.40\n    \n    # Do math calculation to get the answer\n    debt_weight = debt_market_value / total_market_value\n    preferred_stock_weight = preferred_stock_market_value / total_market_value\n    common_stock_weight = common_stock_market_value / total_market_value\n    \n    wacc = (debt_weight * debt_cost * (1 - tax_rate)) + \\\n           (preferred_stock_weight * preferred_stock_cost) + \\\n           (common_stock_weight * common_stock_cost)\n    \n    # Convert to percentage\n    wacc_percentage = wacc * 100\n    \n    # return answer rounded to 2 decimal places\n    return round(wacc_percentage, 2)\n\n```"
        ]
    },
    {
        "tables": [
            "| EV/EBITDA | 9 |\n| --- | --- |\n| EBITDA | $25,000,000 |\n| Market value of debt | $65,000,000 |\n| Cash | $1,300,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-651",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the projected equity value for the Umbrella Corporation as per the data gathered by Paul?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ev_ebitda = 9\n    ebitda = 25000000\n    market_value_debt = 65000000\n    cash = 1300000\n    \n    # Do math calculation to get the answer\n    enterprise_value = ev_ebitda * ebitda\n    equity_value = enterprise_value - market_value_debt + cash\n    \n    # return answer\n    return equity_value\n```\n\nThis Python program calculates the projected equity value for the Umbrella Corporation based on the given data. Here's how it works:\n\n1. We define the variables with the given values:\n   - EV/EBITDA ratio is 9\n   - EBITDA is $25,000,000\n   - Market value of debt is $65,000,000\n   - Cash is $1,300,000\n\n2. We calculate the enterprise value by multiplying the EV/EBITDA ratio by EBITDA.\n\n3. To get the equity value, we subtract the market value of debt from the enterprise value and add back the cash.\n\n4. The function returns the calculated equity value.\n\nWhen you run this function, it will return the projected equity value for the Umbrella Corporation based on the data provided by Paul."
        ]
    },
    {
        "tables": [
            "|                                         |      |\n|-----------------------------------------|------|\n| ABC LA retirement plan information 2018 |      |\n| Current service costs                   | 320  |\n| Past service costs                      | 150  |\n| Employer contributions                  | 1,200|\n| Benefit obligation at beginning of year | 45,000|\n| Benefit obligation at end of year       | 48,395|\n| Plan assets at beginning of year        | 40,800|\n| Plan assets at end of year              | 44,300|\n| Actuarial loss                          | 350  |\n| Actual return on plan assets            | 3,100|\n| Discount rate on plan liabilities       | 7.5% |\n| Expected rate of return on plan assets  | 8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "test-652",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Chicago, a home decor shopping company, provides its employees a defined benefit pension plan. Based on the data provided in the next table, could you compute the regular pension expense to be reported in I/S following IFRS?",
        "output": [
            "def solution():\n    # Define variables name and value\n    current_service_cost = 320\n    past_service_cost = 150\n    benefit_obligation_beginning = 45000\n    plan_assets_beginning = 40800\n    discount_rate = 0.075\n    expected_return_rate = 0.082\n    actuarial_loss = 350\n\n    # Do math calculation to get the answer\n    \n    # Calculate interest cost\n    interest_cost = benefit_obligation_beginning * discount_rate\n    \n    # Calculate expected return on plan assets\n    expected_return = plan_assets_beginning * expected_return_rate\n    \n    # Calculate pension expense\n    pension_expense = (\n        current_service_cost\n        + past_service_cost\n        + interest_cost\n        - expected_return\n        + actuarial_loss\n    )\n\n    # Return answer rounded to nearest whole number\n    return round(pension_expense)\n\n```\n\nThis Python program calculates the regular pension expense to be reported in the Income Statement following IFRS standards. Here's a breakdown of the calculation:\n\n1. Current service cost is included directly.\n2. Past service cost is included directly (IFRS requires immediate recognition).\n3. Interest cost is calculated by multiplying the beginning benefit obligation by the discount rate.\n4. Expected return on plan assets is calculated by multiplying the beginning plan assets by the expected rate of return.\n5. Actuarial loss is included directly (IFRS allows immediate recognition in OCI or profit/loss; this solution assumes recognition in profit/loss).\n\nThe program then sums up these components to get the total pension expense. The result is rounded to the nearest whole number for practical reporting purposes."
        ]
    },
    {
        "tables": [
            "| Net income | $120 |\n|---|---|\n| Decrease in accounts receivable | 20 |\n| Depreciation | 25 |\n| Increase in inventory | 10 |\n| Increase in accounts payable | 7 |\n| Decrease in wages payable | 5 |\n| Increase in deferred tax liabilities | 15 |\n| Profit from the sale of land | 2 |"
        ],
        "topic": "Accounting",
        "question_id": "test-653",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data, what is the company's cash flow from operations?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 120\n    decrease_accounts_receivable = 20\n    depreciation = 25\n    increase_inventory = -10\n    increase_accounts_payable = 7\n    decrease_wages_payable = -5\n    increase_deferred_tax_liabilities = 15\n    profit_sale_land = -2  # Subtracted because it's not an operating cash flow\n\n    # Do math calculation to get the answer\n    cash_flow_operations = (\n        net_income\n        + decrease_accounts_receivable\n        + depreciation\n        + increase_inventory\n        + increase_accounts_payable\n        + decrease_wages_payable\n        + increase_deferred_tax_liabilities\n        + profit_sale_land\n    )\n\n    # return answer\n    return cash_flow_operations\n```\n\nThis Python program calculates the company's cash flow from operations based on the provided data. Here's a breakdown of the calculation:\n\n1. We start with net income.\n2. We add back non-cash expenses (depreciation).\n3. We adjust for changes in working capital:\n   - Decrease in accounts receivable is added (it represents cash received).\n   - Increase in inventory is subtracted (it represents cash spent).\n   - Increase in accounts payable is added (it represents less cash spent).\n   - Decrease in wages payable is subtracted (it represents cash spent).\n4. We add the increase in deferred tax liabilities.\n5. We subtract the profit from the sale of land, as it's not part of operating activities.\n\nThe function will return the calculated cash flow from operations."
        ]
    },
    {
        "tables": [
            "|                   | 2013  | 2012  |\n|-------------------|-------|-------|\n| Sales revenue     | 100,000| 95,000|\n| Cost of goods sold| 47,000 | 47,500|\n| Depreciation expense | 4,000 | 3,500 |\n| Net Income        | 11,122  | 4,556|\n|                   |      |     |\n| **Selected Balance Sheet Data as of 31 August ($ thousands)** |   \n|                   | 2013  | 2012  |\n| Current Assets    ||\n| Cash and investments | 21,122| 25,000|\n| Accounts receivable | 25,000| 13,500|\n| Inventories        | 13,000  | 8,500|\n| Total current assets | 59,122|47,000|\n| Current liabilities |      |     |\n| Accounts payable   | 15,000 |15,000|\n| Other current liabilities | 7,000 |9,000 |\n| Total current liabilities|  22,000|24,000|"
        ],
        "topic": "Accounting",
        "question_id": "test-654",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the amount of money received from clients in the year 2013 based on the chosen data from a corporation's comparative income statement and balance sheet?",
        "output": [
            "Here's the Python program to calculate the amount of money received from clients in 2013:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales_revenue_2013 = 100000\n    accounts_receivable_2013 = 25000\n    accounts_receivable_2012 = 13500\n\n    # Do math calculation to get the answer\n    cash_received = sales_revenue_2013 + accounts_receivable_2012 - accounts_receivable_2013\n\n    # return answer\n    return cash_received\n```\n\nThis program calculates the amount of money received from clients in 2013 using the following logic:\n\n1. We start with the sales revenue for 2013.\n2. We add the accounts receivable from the beginning of the year (which is the end of 2012).\n3. We subtract the accounts receivable at the end of 2013.\n\nThis calculation gives us the actual cash received from clients during 2013, accounting for changes in accounts receivable.\n\nThe program will return the result, which represents the amount of money received from clients in 2013 based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-655",
        "python_solution": "",
        "ground_truth": null,
        "question": "You choose to short sell 100 shares of Monticello Equestrian Centers when it's at its annual peak of 56. Your broker informs you that your margin requirement is 45% and the commission on the acquisition is $155. During the term you are shorting the stock, Monticello pays a dividend of $2.50 per share. At the conclusion of a year, you purchase 100 shares of Monticello at 45 to settle your position and are hit with a commission of $145. What is your investment's rate of return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares = 100\n    initial_price = 56\n    final_price = 45\n    margin_requirement = 0.45\n    initial_commission = 155\n    final_commission = 145\n    dividend_per_share = 2.50\n\n    # Do math calculation to get the answer\n    initial_investment = initial_price * shares * margin_requirement\n    proceeds_from_short_sale = initial_price * shares - initial_commission\n    cost_to_cover = final_price * shares + final_commission\n    dividend_cost = dividend_per_share * shares\n    \n    profit = proceeds_from_short_sale - cost_to_cover - dividend_cost\n    rate_of_return = (profit / initial_investment) * 100\n\n    # return answer\n    return round(rate_of_return, 2)\n```\n\nThis Python program calculates the rate of return for the short selling scenario described in the question. Here's a breakdown of the calculation:\n\n1. We first define all the variables given in the question.\n2. We calculate the initial investment, which is the margin requirement multiplied by the initial share price and number of shares.\n3. We calculate the proceeds from the short sale (initial price * shares - initial commission).\n4. We calculate the cost to cover the short position (final price * shares + final commission).\n5. We calculate the dividend cost (dividend per share * number of shares).\n6. The profit is calculated as proceeds from short sale minus cost to cover minus dividend cost.\n7. The rate of return is calculated as (profit / initial investment) * 100.\n8. Finally, we return the rate of return rounded to two decimal places.\n\nThis program will return the investment's rate of return as a percentage."
        ]
    },
    {
        "tables": [
            "| Discount rate | 11% |\n| --- | --- |\n| Growth rate | 2% |\n| Terminal cap rate | 8% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-656",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the initial capitalization rate of the property based on the following details?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    discount_rate = 0.11\n    growth_rate = 0.02\n    terminal_cap_rate = 0.08\n    \n    # Do math calculation to get the answer\n    initial_cap_rate = discount_rate - growth_rate\n    \n    # return answer\n    return initial_cap_rate\n```\n\nThis Python function calculates the initial capitalization rate based on the given information. The initial cap rate is typically calculated as the difference between the discount rate and the growth rate. \n\nHere's the explanation:\n\n1. We define the variables based on the provided table:\n   - discount_rate = 11% = 0.11\n   - growth_rate = 2% = 0.02\n   - terminal_cap_rate = 8% = 0.08 (though not used in this calculation)\n\n2. The initial capitalization rate is calculated as:\n   initial_cap_rate = discount_rate - growth_rate\n\n3. The function returns this calculated value.\n\nWhen you run this function, it will return 0.09, or 9%, which is the initial capitalization rate for the property based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-657",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager of fixed income wishes to decrease the duration from 5.5 to 4.5 using a 3-year interest rate swap with quarterly payments. If the portfolio's market value is $10,000,000 and the modified duration of the payer swap is -2.125, what is the notional principle of the swap?",
        "output": [
            "Here's the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_duration = 5.5\n    target_duration = 4.5\n    portfolio_value = 10_000_000\n    swap_modified_duration = -2.125\n    \n    # Do math calculation to get the answer\n    duration_change = current_duration - target_duration\n    swap_weight = duration_change / swap_modified_duration\n    notional_principal = swap_weight * portfolio_value\n    \n    # return answer\n    return notional_principal\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The notional principal of the swap is ${result:,.2f}\")\n```\n\nThis program calculates the notional principal of the swap based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the required change in duration (duration_change).\n3. We determine the weight of the swap in the portfolio (swap_weight) by dividing the duration change by the swap's modified duration.\n4. We calculate the notional principal by multiplying the swap weight by the portfolio value.\n\nThe function returns the notional principal of the swap. You can uncomment the last two lines to run the function and print the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-658",
        "python_solution": "",
        "ground_truth": null,
        "question": "On January 1st, 20X5, Vega Holdings Corporation distributed 55,000 shares to employees as stock options. The exercise price for 24,000 of these shares is $32, while the remaining shares have an exercise price of $35. By the end of 20X5, the company's stock price had reached $42, with 1,800,000 common shares in outstanding circulation overall. The mean stock price for 20X5 was $34. Could you calculate the denominator for the diluted earnings per share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_options = 55000\n    options_at_32 = 24000\n    options_at_35 = total_options - options_at_32\n    year_end_stock_price = 42\n    outstanding_shares = 1800000\n    average_stock_price = 34\n\n    # Do math calculation to get the answer\n    dilutive_options_32 = options_at_32 * (year_end_stock_price - 32) / year_end_stock_price\n    dilutive_options_35 = options_at_35 * (year_end_stock_price - 35) / year_end_stock_price\n    total_dilutive_options = dilutive_options_32 + dilutive_options_35\n\n    denominator = outstanding_shares + total_dilutive_options\n\n    # return answer\n    return denominator\n```\n\nThis Python program calculates the denominator for the diluted earnings per share based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the necessary variables based on the given information.\n2. We calculate the number of dilutive options for each exercise price using the treasury stock method:\n   - For $32 options: (42 - 32) / 42 * 24000\n   - For $35 options: (42 - 35) / 42 * 31000\n3. We sum up the dilutive options.\n4. The denominator is the sum of outstanding shares and total dilutive options.\n\nThe function returns this denominator, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-659",
        "python_solution": "",
        "ground_truth": null,
        "question": "A firm purchases a license for $6,500, planning to use it for a duration of four years. However, the firm's management anticipates deriving advantages from the license for three years, applying the straight-line amortization technique. What would be the accumulated amortization at the close of the second year?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    legal_life = 4  # years\n    useful_life = 3  # years\n    amortization_period = 2  # years\n\n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization = annual_amortization * amortization_period\n\n    # return answer\n    return accumulated_amortization\n```\n\nThis program calculates the accumulated amortization at the end of the second year based on the given information. Here's a breakdown of the calculation:\n\n1. We define the license cost, legal life, useful life, and the amortization period (2 years) as variables.\n2. We calculate the annual amortization by dividing the license cost by the useful life (as per the straight-line amortization method).\n3. We then multiply the annual amortization by the number of years (2) to get the accumulated amortization at the end of the second year.\n4. The function returns the accumulated amortization.\n\nWhen you run this function, it will return the accumulated amortization at the close of the second year."
        ]
    },
    {
        "tables": [
            "| Years to maturity | MRR   |\n|------------------ |-------|\n| 1                 | 1%    |\n| 2                 | 1.5%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-660",
        "python_solution": "",
        "ground_truth": null,
        "question": "One year ago, a merchant entered into a three-year interest rate swap in which he receives floating payments. Currently, the established fixed swap rate is 1.4853% (a year after the swap was initially made). The starting swap rate was set at 1.82% and the notional principle stands at $100 million. What is the value of this swap?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 100000000  # $100 million\n    initial_swap_rate = 0.0182  # 1.82%\n    current_swap_rate = 0.014853  # 1.4853%\n    years_remaining = 2  # 3 years total, 1 year has passed\n    mrr_1year = 0.01  # 1% for 1 year\n    mrr_2year = 0.015  # 1.5% for 2 years\n\n    # Do math calculation to get the answer\n    # Calculate the present value of the fixed leg\n    pv_fixed = notional_principal * initial_swap_rate * (\n        1 / (1 + mrr_1year) + 1 / (1 + mrr_2year) ** 2\n    )\n\n    # Calculate the present value of the floating leg\n    pv_floating = notional_principal * current_swap_rate * (\n        1 / (1 + mrr_1year) + 1 / (1 + mrr_2year) ** 2\n    )\n\n    # Calculate the swap value\n    swap_value = pv_floating - pv_fixed\n\n    # return answer\n    return swap_value\n\n```\n\nThis Python program calculates the value of the interest rate swap based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given information.\n2. We calculate the present value of the fixed leg using the initial swap rate.\n3. We calculate the present value of the floating leg using the current swap rate.\n4. The swap value is the difference between the floating leg and the fixed leg.\n\nThe program returns the swap value, which represents how much the swap is worth to the merchant who receives floating payments. A positive value means the swap is an asset for the merchant, while a negative value would indicate a liability."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-661",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the yield-to-maturity of Bond B increases by 20 basis points, and given that the bond's annual modified duration is 6.932 and the annual convexity is 59.270, what should be the anticipated percentage price change?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    yield_change = 0.0020  # 20 basis points = 0.20% = 0.0020\n    modified_duration = 6.932\n    convexity = 59.270\n\n    # Do math calculation to get the answer\n    duration_effect = -modified_duration * yield_change\n    convexity_effect = 0.5 * convexity * (yield_change ** 2)\n    price_change_percentage = (duration_effect + convexity_effect) * 100\n\n    # return answer\n    return price_change_percentage\n\n```\n\nThis program calculates the anticipated percentage price change of Bond B based on the given information:\n\n1. We define the variables:\n   - `yield_change`: 20 basis points converted to decimal (0.0020)\n   - `modified_duration`: 6.932 (given in the question)\n   - `convexity`: 59.270 (given in the question)\n\n2. We calculate the price change using the duration-convexity approximation:\n   - Duration effect: -modified_duration * yield_change\n   - Convexity effect: 0.5 * convexity * (yield_change^2)\n   - Total price change: duration effect + convexity effect\n\n3. We convert the price change to a percentage by multiplying by 100.\n\n4. The function returns the calculated percentage price change.\n\nThis solution takes into account both the duration and convexity effects on the bond price, providing a more accurate estimation of the price change compared to using duration alone."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-662",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the constant maturity mortality if the assumed annual conditional prepayment rate (CPR) for a cluster of mortgages is 5% and the weighted average maturity of the respective mortgages is 15 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_cpr = 0.05  # 5% CPR\n    weighted_avg_maturity = 15  # 15 years\n    \n    # Do math calculation to get the answer\n    single_monthly_mortality = 1 - (1 - annual_cpr) ** (1/12)\n    constant_maturity_mortality = single_monthly_mortality * 12 * weighted_avg_maturity\n    \n    # return answer\n    return constant_maturity_mortality\n```\n\nThis Python program calculates the constant maturity mortality based on the given annual conditional prepayment rate (CPR) and weighted average maturity of the mortgages. Here's a breakdown of the calculation:\n\n1. We first convert the annual CPR to a single monthly mortality (SMM) rate using the formula: SMM = 1 - (1 - CPR)^(1/12)\n\n2. Then, we calculate the constant maturity mortality by multiplying the SMM by 12 (to annualize it) and by the weighted average maturity.\n\nThe program will return the constant maturity mortality as a decimal. To get the percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-663",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the anticipated rate of return for a share with CAPM, given a beta of 1.5, a risk-free rate of 5%, and a market return of 8%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 1.5\n    risk_free_rate = 0.05  # 5%\n    market_return = 0.08  # 8%\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```\n\nThis Python program calculates the expected rate of return using the Capital Asset Pricing Model (CAPM). The formula for CAPM is:\n\nExpected Return = Risk-Free Rate + Beta * (Market Return - Risk-Free Rate)\n\nThe program defines the given variables, performs the calculation using the CAPM formula, and returns the expected rate of return. The result will be a decimal representing the anticipated rate of return for the share."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-664",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the five-year Treasury bond in the US has a yield of 2% and the swap spread is reported at 50 bps, what is the interest rate paid by the fixed payer in a five-year interest rate swap?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    treasury_yield = 0.02  # 2% expressed as a decimal\n    swap_spread = 0.0050  # 50 bps expressed as a decimal\n    \n    # Do math calculation to get the answer\n    fixed_rate = treasury_yield + swap_spread\n    \n    # return answer\n    return fixed_rate\n```\n\nThis Python program calculates the interest rate paid by the fixed payer in a five-year interest rate swap based on the given information. Here's a breakdown of the solution:\n\n1. We define two variables:\n   - `treasury_yield`: The yield of the five-year Treasury bond (2% or 0.02 in decimal form)\n   - `swap_spread`: The reported swap spread (50 bps or 0.0050 in decimal form)\n\n2. To calculate the fixed rate, we add the Treasury yield and the swap spread.\n\n3. The function returns the calculated fixed rate.\n\nWhen you run this function, it will return 0.025, which represents 2.5%. This is the interest rate that the fixed payer would pay in the five-year interest rate swap."
        ]
    },
    {
        "tables": [
            "| Convertible Bond Issued by Pro Star, Inc |      |\n|--------------------------------|------|\n| Issue Date                     | 6 December 20X0 |\n| Maturity Date                  | 6 December 20X4 |\n| Coupon Rate                    | 2%  |\n| Issue Price                    | $1,000 |\n| Conversion Ratio               | 31   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-665",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the conversion price of the bond in Exhibit 3, which was issued by Pro Star as a convertible bond, according to the exhibit below?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    issue_price = 1000\n    conversion_ratio = 31\n    \n    # Do math calculation to get the answer\n    conversion_price = issue_price / conversion_ratio\n    \n    # return answer\n    return conversion_price\n```\n\nThis Python program calculates the conversion price of the convertible bond issued by Pro Star, Inc. The conversion price is determined by dividing the issue price of the bond by the conversion ratio. \n\nIn this case:\n- The issue price is $1,000\n- The conversion ratio is 31\n\nThe program divides 1000 by 31 to get the conversion price, which represents the price per share at which the bond can be converted into common stock."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-666",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, Parker Inc. acquired a production machine for $60,000 that is anticipated to produce an annual cash inflow of $25,000 for six years. The company will depreciate the machine over six years for accounting reasons, but the tax authority assumes a useful lifespan of five years for the machine. If the tax rate is 40% and the machine has no residual value, what would be the taxable income for Parker Inc. in the first year if the straight-line method is applied?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    machine_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_life = 6\n    tax_life = 5\n    tax_rate = 0.40\n    residual_value = 0\n\n    # Do math calculation to get the answer\n    accounting_depreciation = (machine_cost - residual_value) / accounting_life\n    tax_depreciation = (machine_cost - residual_value) / tax_life\n    \n    taxable_income = annual_cash_inflow - tax_depreciation\n\n    # return answer\n    return taxable_income\n```\n\nThis program calculates the taxable income for Parker Inc. in the first year using the straight-line depreciation method. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the annual depreciation for accounting purposes and tax purposes separately.\n3. The taxable income is the difference between the annual cash inflow and the tax depreciation.\n4. We return the taxable income as the answer.\n\nNote that this program assumes that the taxable income is based on the tax authority's depreciation schedule (5 years) rather than the company's accounting depreciation schedule (6 years). The annual cash inflow is considered as revenue, and the tax depreciation is deducted from it to arrive at the taxable income."
        ]
    },
    {
        "tables": [
            "|                                             | 2010 | 2011 | 2012 |\n|---------------------------------------------|------|------|------|\n| **Net sales**                               | 46.8 | 50.5 | 53.9 |\n| **Cost of sales**                           | 18.2 | 18.4 | 18.8 |\n| **Gross profit**                            | 28.6 | 32.1 | 35.1 |\n| **Selling, general, and administrative (SG&A) expenses** | 19.3 | 22.5 | 25.1 |\n| **Operating income**                        | 9.3  | 9.6  | 10.0 |\n| **Interest expense**                        | 0.5  | 0.7  | 0.6  |\n| **Income before provision for income tax**  | 8.8  | 8.9  | 9.4  |\n| **Provision for income taxes**              | 2.8  | 2.8  | 3.1  |\n| **Net income**                              | 6.0  | 6.1  | 6.3  |"
        ],
        "topic": "Accounting",
        "question_id": "test-667",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Exhibits 1, what is Applicant B's prediction for selling, general, and administrative costs in 2013, considering that his forecast states the following: net sales will increase at the average yearly growth rate in net sales for the years 2010-2012 and the 2013 SG&A/net sales ratio will remain consistent with the average ratio during 2010-2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales_2010 = 46.8\n    net_sales_2011 = 50.5\n    net_sales_2012 = 53.9\n    sga_2010 = 19.3\n    sga_2011 = 22.5\n    sga_2012 = 25.1\n\n    # Do math calculation to get the answer\n    \n    # Calculate average yearly growth rate in net sales\n    growth_rate_2011 = (net_sales_2011 - net_sales_2010) / net_sales_2010\n    growth_rate_2012 = (net_sales_2012 - net_sales_2011) / net_sales_2011\n    avg_growth_rate = (growth_rate_2011 + growth_rate_2012) / 2\n\n    # Predict net sales for 2013\n    net_sales_2013 = net_sales_2012 * (1 + avg_growth_rate)\n\n    # Calculate average SG&A/net sales ratio for 2010-2012\n    ratio_2010 = sga_2010 / net_sales_2010\n    ratio_2011 = sga_2011 / net_sales_2011\n    ratio_2012 = sga_2012 / net_sales_2012\n    avg_ratio = (ratio_2010 + ratio_2011 + ratio_2012) / 3\n\n    # Predict SG&A for 2013\n    sga_2013 = net_sales_2013 * avg_ratio\n\n    # return answer\n    return round(sga_2013, 1)\n```"
        ]
    },
    {
        "tables": [
            "| Asset Class    | Geometric Return (%) |\n| -------------- | -------------------- |\n| Equities       | 8.0                  |\n| Corporate Bonds| 6.5                  |\n| Treasury bills | 2.5                  |\n| Inflation      | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-668",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the recorded historical geometric actual return rate for company bonds as per the researcher?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    \n    # Do math calculation to get the answer\n    answer = corporate_bonds_return\n    \n    # return answer\n    return answer\n```\n\nThis Python program defines the geometric return for corporate bonds as 6.5%, which is the value provided in the table for the \"Corporate Bonds\" asset class. Since the question asks for the recorded historical geometric actual return rate for company bonds (which is equivalent to corporate bonds), the program simply returns this value as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-669",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firm N, which uses the IFRS system, allocated $22 million for inventory acquisition last year. Following a natural calamity, the inventory's value was reduced to $19 million. However, by the end of the year, certain equipment was still functional, raising the actual inventory value to $25 million. What should be the reported inventory value for Firm N?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    allocated_amount = 22000000\n    reduced_value = 19000000\n    actual_value = 25000000\n\n    # Do math calculation to get the answer\n    reported_value = min(allocated_amount, actual_value)\n\n    # return answer\n    return reported_value\n```\n\nThis Python program follows the IFRS (International Financial Reporting Standards) principle of reporting inventory at the lower of cost or net realizable value.\n\n1. We define three variables:\n   - `allocated_amount`: The original amount allocated for inventory ($22 million)\n   - `reduced_value`: The value after the natural calamity ($19 million)\n   - `actual_value`: The final inventory value at year-end ($25 million)\n\n2. To determine the reported value, we use the `min()` function to compare the allocated amount (cost) with the actual value (which represents the net realizable value in this case).\n\n3. The function returns the lower of these two values, which adheres to the IFRS principle.\n\nNote that even though the inventory value was temporarily reduced to $19 million, the final actual value of $25 million is what we compare with the original cost. The temporary reduction doesn't affect the final reporting as long as the inventory's value recovered by the end of the reporting period."
        ]
    },
    {
        "tables": [
            "|                      | Portfolio W    | Futures Contract and CTD Bond |\n|----------------------|----------------|------------------------------|\n| Market value         | $120,349,000   | Price                        | 143.20                        |\n| Modified duration    | 9.30           | Modified duration            | 9.00                          |\n| Basis point value    | $111,924.57    | Basis point value            | 128.88                        |\n|                      |                | Conversion factor            | 0.75                          |\n|                      |                | Contract size                | $100,000                      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-670",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Exhibit 1, to meet the goal of junior analyst, Benjamin, to lower the modified duration of his fully invested US Treasuries portfolio, Portfolio B, to 3.00, how many Treasury futures contracts does Benjamin need to sell?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 120349000\n    portfolio_duration = 9.30\n    target_duration = 3.00\n    futures_duration = 9.00\n    futures_price = 143.20\n    conversion_factor = 0.75\n    contract_size = 100000\n\n    # Do math calculation to get the answer\n    duration_to_hedge = portfolio_duration - target_duration\n    hedge_ratio = duration_to_hedge / futures_duration\n    nominal_amount_to_hedge = portfolio_value * hedge_ratio\n    \n    futures_contract_value = futures_price * conversion_factor * contract_size\n    num_contracts = nominal_amount_to_hedge / futures_contract_value\n    \n    # Round up to the nearest whole number as we can't sell fractional contracts\n    num_contracts = round(num_contracts)\n\n    # return answer\n    return num_contracts\n```\n\nThis Python program calculates the number of Treasury futures contracts Benjamin needs to sell to lower the modified duration of Portfolio W from 9.30 to 3.00. Here's a breakdown of the calculation:\n\n1. We first calculate the duration that needs to be hedged (duration_to_hedge).\n2. We then calculate the hedge ratio by dividing the duration to hedge by the futures duration.\n3. The nominal amount to hedge is determined by multiplying the portfolio value by the hedge ratio.\n4. We calculate the value of one futures contract using its price, conversion factor, and contract size.\n5. The number of contracts is then calculated by dividing the nominal amount to hedge by the value of one futures contract.\n6. Finally, we round this number to the nearest whole number, as fractional contracts can't be traded.\n\nThe function will return the number of futures contracts Benjamin needs to sell to achieve his target duration."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-671",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial institution has recently received loan applications amounting to $210 million; it plans to acquire $95M in novel Treasury bonds releasing this week and foresees that its top corporate client's credit line withdrawals will reach $115M. The total funds from deposits and other client funds obtained today amount to $210 million, and the expected funds to be garnered next week amounts to an additional $150M. Based on the provided information, what is the discrepancy in available funds?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_applications = 210_000_000\n    treasury_bonds = 95_000_000\n    credit_line_withdrawals = 115_000_000\n    current_funds = 210_000_000\n    expected_funds = 150_000_000\n\n    # Do math calculation to get the answer\n    total_outflows = loan_applications + treasury_bonds + credit_line_withdrawals\n    total_inflows = current_funds + expected_funds\n    discrepancy = total_outflows - total_inflows\n\n    # return answer\n    return discrepancy\n```\n\nThis Python program calculates the discrepancy in available funds based on the information provided in the question. Here's a breakdown of the calculation:\n\n1. We define variables for all the relevant financial figures mentioned in the question.\n2. We calculate the total outflows by summing up loan applications, treasury bond acquisitions, and credit line withdrawals.\n3. We calculate the total inflows by adding current funds and expected funds.\n4. The discrepancy is then calculated by subtracting total inflows from total outflows.\n5. The function returns this discrepancy as the answer.\n\nThe discrepancy represents the shortfall in available funds to cover all planned financial activities. If the result is positive, it means there's a shortage of funds. If it's negative, it would indicate a surplus."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-672",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a foreign exchange broker determined the correlation between the spot and futures to be 0.875, the yearly standard deviation of the spot price to be $1.10, and the yearly standard deviation of the futures price to be $1.3. What would be the hedge ratio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.875\n    spot_std_dev = 1.10\n    futures_std_dev = 1.3\n    \n    # Do math calculation to get the answer\n    hedge_ratio = correlation * (spot_std_dev / futures_std_dev)\n    \n    # return answer\n    return hedge_ratio\n```\n\nThis Python program calculates the hedge ratio based on the given information:\n\n1. We define the variables:\n   - `correlation`: The correlation between spot and futures (0.875)\n   - `spot_std_dev`: The yearly standard deviation of the spot price ($1.10)\n   - `futures_std_dev`: The yearly standard deviation of the futures price ($1.3)\n\n2. We calculate the hedge ratio using the formula:\n   Hedge Ratio = Correlation * (Standard Deviation of Spot / Standard Deviation of Futures)\n\n3. The function returns the calculated hedge ratio.\n\nWhen you run this function, it will return the hedge ratio, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Book value per share, beginning of 2015 | 5.0 |\n| --------------------------------------- | --- |\n| Cost of equity                          | 8%  |\n| Persistence factor                      | 0.85|",
            "|                       | 2015 | 2016 | 2017 |\n|-----------------------|------|------|------|\n| Expected earnings per share | 2.0  | 2.2  | 2.45 |\n| Expected dividend per share | 1.2  | 0.9  | 1.11 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-673",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in the table below, Henry is getting ready to reassess the worth of XYZ Corp. The business anticipates a return on equity (ROE) of 34.5% in 2017, but it's expected to gradually decrease towards the cost of equity afterward. From the start of 2015, utilizing the multi-stage residual income (RI) model, determine the fundamental value of XYZ Corp's equity. Can you calculate the fundamental price per share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    book_value_2015 = 5.0\n    cost_of_equity = 0.08\n    persistence_factor = 0.85\n    eps_2015 = 2.0\n    eps_2016 = 2.2\n    eps_2017 = 2.45\n    dps_2015 = 1.2\n    dps_2016 = 0.9\n    dps_2017 = 1.11\n    roe_2017 = 0.345\n\n    # Do math calculation to get the answer\n    \n    # Calculate book values for 2016 and 2017\n    book_value_2016 = book_value_2015 + eps_2015 - dps_2015\n    book_value_2017 = book_value_2016 + eps_2016 - dps_2016\n\n    # Calculate residual income for 2015, 2016, and 2017\n    ri_2015 = eps_2015 - (cost_of_equity * book_value_2015)\n    ri_2016 = eps_2016 - (cost_of_equity * book_value_2016)\n    ri_2017 = eps_2017 - (cost_of_equity * book_value_2017)\n\n    # Calculate present values of residual income\n    pv_ri_2015 = ri_2015 / (1 + cost_of_equity)\n    pv_ri_2016 = ri_2016 / ((1 + cost_of_equity) ** 2)\n    pv_ri_2017 = ri_2017 / ((1 + cost_of_equity) ** 3)\n\n    # Calculate continuing value\n    cv = (ri_2017 * persistence_factor) / (cost_of_equity - (roe_2017 - cost_of_equity) * persistence_factor)\n    pv_cv = cv / ((1 + cost_of_equity) ** 3)\n\n    # Calculate fundamental value\n    fundamental_value = book_value"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-674",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood that a stock B from the stock market, with an average return of 18 percent and a standard deviation of the estimate return of 25 percent annually, exceeds a return of 22 percent, assuming the returns are normally distributed? A market researcher is currently investigating this.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    avg_return = 0.18\n    std_dev = 0.25\n    target_return = 0.22\n    \n    # Do math calculation to get the answer\n    from scipy import stats\n    \n    # Calculate z-score\n    z_score = (target_return - avg_return) / std_dev\n    \n    # Calculate probability using the cumulative distribution function\n    probability = 1 - stats.norm.cdf(z_score)\n    \n    # Convert to percentage\n    probability_percentage = probability * 100\n    \n    # return answer\n    return round(probability_percentage, 2)\n```\n\nThis Python program calculates the likelihood that stock B exceeds a return of 22% given the provided information. Here's a breakdown of the solution:\n\n1. We define the variables: average return (18% = 0.18), standard deviation (25% = 0.25), and target return (22% = 0.22).\n\n2. We use the scipy.stats module to perform the probability calculation.\n\n3. We calculate the z-score, which represents how many standard deviations the target return is from the mean.\n\n4. We use the cumulative distribution function (CDF) of the normal distribution to find the probability of getting a value less than or equal to the z-score. Since we want the probability of exceeding the target return, we subtract this value from 1.\n\n5. We convert the probability to a percentage by multiplying by 100.\n\n6. Finally, we round the result to two decimal places and return it.\n\nThe returned value represents the percentage likelihood that stock B will exceed a 22% return, given the stated assumptions.\n\nNote: This program assumes that the scipy library is installed. If it's not, you may need to install it using pip: `pip install scipy`"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-675",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine in 2017, a USD/EUR spot exchange rate hits 1.2865 at a certain period. The one-year forward rate then is 1.28485. What would be the one-year forward points quoted as?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 1.2865\n    forward_rate = 1.28485\n    \n    # Do math calculation to get the answer\n    forward_points = (forward_rate - spot_rate) * 10000\n    \n    # return answer\n    return round(forward_points, 2)\n```\n\nThis Python program calculates the one-year forward points for the given USD/EUR exchange rates. Here's an explanation of the code:\n\n1. We define two variables:\n   - `spot_rate`: The USD/EUR spot exchange rate (1.2865)\n   - `forward_rate`: The one-year forward rate (1.28485)\n\n2. To calculate the forward points, we:\n   - Subtract the spot rate from the forward rate\n   - Multiply the result by 10000 (as forward points are typically quoted in pips, which are the fourth decimal place for most currency pairs)\n\n3. We use the `round()` function to round the result to two decimal places, as forward points are usually quoted with this precision.\n\n4. The function returns the calculated forward points.\n\nWhen you run this function, it will return -16.50, which represents the one-year forward points quoted as -16.50 pips or -0.00165 in decimal form. The negative value indicates that the forward rate is lower than the spot rate, which is often referred to as a forward discount."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-676",
        "python_solution": "",
        "ground_truth": null,
        "question": "Fortune Corporation has a tax burden of 70%, interest burden of 0.8 times, current ratio of 1.5 times, EBIT margin of 20%, asset turnover of 3 times, leverage ratio of 1.6 times. Can you compute the corporation's return on equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    tax_burden = 0.30  # 1 - 0.70 (tax burden of 70%)\n    interest_burden = 0.8\n    current_ratio = 1.5\n    ebit_margin = 0.20\n    asset_turnover = 3\n    leverage_ratio = 1.6\n\n    # Do math calculation to get the answer\n    net_profit_margin = tax_burden * interest_burden * ebit_margin\n    roe = net_profit_margin * asset_turnover * leverage_ratio\n\n    # return answer\n    return roe * 100  # Convert to percentage\n```\n\nThis Python program calculates the Return on Equity (ROE) for Fortune Corporation based on the given financial ratios. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the net profit margin by multiplying tax burden (1 - tax rate), interest burden, and EBIT margin.\n3. We then use the DuPont analysis formula to calculate ROE:\n   ROE = Net Profit Margin * Asset Turnover * Leverage Ratio\n4. Finally, we return the result as a percentage.\n\nThe program will return the ROE as a percentage when called."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-677",
        "python_solution": "",
        "ground_truth": null,
        "question": "The value of the stocks portfolio stands at $10,000,000. The company intends to utilize futures contracts valued at $125,000 to bring down the beta from 1.2 to zero over a span of two months. The beta value of these futures contracts is 0.95. How many futures contracts should the company sell?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 10000000\n    futures_contract_value = 125000\n    current_beta = 1.2\n    target_beta = 0\n    futures_beta = 0.95\n\n    # Do math calculation to get the answer\n    beta_reduction_needed = current_beta - target_beta\n    portfolio_beta_dollars = portfolio_value * beta_reduction_needed\n    futures_beta_dollars = futures_contract_value * futures_beta\n    contracts_needed = portfolio_beta_dollars / futures_beta_dollars\n\n    # return answer\n    return round(contracts_needed)\n```\n\nThis Python program calculates the number of futures contracts the company should sell to reduce its portfolio beta from 1.2 to 0. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the beta reduction needed (1.2 - 0 = 1.2).\n3. We multiply the portfolio value by the beta reduction needed to get the beta dollars that need to be hedged.\n4. We calculate the beta dollars per futures contract by multiplying the futures contract value by its beta.\n5. We divide the portfolio beta dollars by the futures beta dollars to get the number of contracts needed.\n6. Finally, we round the result to the nearest whole number, as we can't trade partial contracts.\n\nThe function will return the number of futures contracts the company should sell."
        ]
    },
    {
        "tables": [
            "| Accounting profit (earnings before taxes) | $250,000 |\n|---|---|\n| Taxable income | $215,000 |\n| Tax rate | 30% |\n| Income taxes paid in year | $61,200 |\n| Deferred tax liability, start of year | $82,400 |\n| Deferred tax liability, end of year | $90,650 |"
        ],
        "topic": "Accounting",
        "question_id": "test-678",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the income tax expense listed on this year's earnings statement for a corporation for the current fiscal year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.30\n    taxable_income = 215000\n    deferred_tax_liability_start = 82400\n    deferred_tax_liability_end = 90650\n\n    # Do math calculation to get the answer\n    current_tax_expense = taxable_income * tax_rate\n    deferred_tax_expense = deferred_tax_liability_end - deferred_tax_liability_start\n    total_tax_expense = current_tax_expense + deferred_tax_expense\n\n    # return answer\n    return total_tax_expense\n```\n\nThis Python program calculates the income tax expense listed on this year's earnings statement for the corporation. Here's how it works:\n\n1. We define the relevant variables from the provided table:\n   - The tax rate is 30% (0.30 in decimal form)\n   - Taxable income is $215,000\n   - Deferred tax liability at the start of the year is $82,400\n   - Deferred tax liability at the end of the year is $90,650\n\n2. We calculate the current tax expense by multiplying the taxable income by the tax rate.\n\n3. We calculate the deferred tax expense by subtracting the start-of-year deferred tax liability from the end-of-year deferred tax liability.\n\n4. We sum the current tax expense and the deferred tax expense to get the total tax expense.\n\n5. The function returns this total tax expense, which is the income tax expense that would be listed on this year's earnings statement.\n\nThis calculation takes into account both the current year's tax based on taxable income and the change in deferred tax liability, which together comprise the total income tax expense for financial reporting purposes."
        ]
    },
    {
        "tables": [
            "| Option        | W     | X     | Y     | z     |\n|---------------|-------|-------|-------|-------|\n| Type of Option| Call  | Call  | Put   | Put   |\n| Exercise Price| $38.00| $46.00| $38.00| $36.00|\n| N (d1)        | 0.56  | 0.30  | 0.56  | 0.64  |\n| N (d2)        | 0.45  | 0.21  | 0.45  | 0.553 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-679",
        "python_solution": "",
        "ground_truth": null,
        "question": "If she chooses to temporarily hedge the 100,000 shares of Apoth she possesses until the FDA's review concludes, how many option X contracts would Smith need to sell to effectuate the hedge plan, based on the information in Exhibit 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_to_hedge = 100000\n    shares_per_contract = 100\n    n_d1 = 0.30  # N(d1) for option X\n\n    # Do math calculation to get the answer\n    contracts_needed = shares_to_hedge / shares_per_contract\n    contracts_to_sell = contracts_needed / n_d1\n    \n    # Round up to the nearest whole number of contracts\n    contracts_to_sell = round(contracts_to_sell)\n\n    # return answer\n    return contracts_to_sell\n```\n\nThis Python program calculates the number of option X contracts Smith would need to sell to hedge 100,000 shares of Apoth stock. Here's an explanation of the calculation:\n\n1. We define the number of shares to hedge (100,000) and the standard number of shares per option contract (100).\n\n2. We use the N(d1) value for option X, which is 0.30 according to the provided table.\n\n3. We first calculate the number of contracts that would cover 100,000 shares if each contract represented exactly 100 shares (contracts_needed = 100,000 / 100 = 1,000).\n\n4. However, because we're using the delta-hedging approach, we need to adjust for the option's delta, which is represented by N(d1). We divide the number of contracts by N(d1) to get the number of contracts to sell (contracts_to_sell = 1,000 / 0.30).\n\n5. Finally, we round the result to the nearest whole number of contracts, as fractional contracts can't be traded.\n\nThe program will return this rounded number as the answer, representing the number of option X contracts Smith needs to sell to hedge her position."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-680",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's assume there's an $80 million exposure to a certain business partner that's backed by $70 million worth of collateral. This collateral is made up of bonds from a company with an A-level rating. The business partner holds a B+ rating. With a 150% risk weight for the business partner and a 50% risk weight for the collateral, what would the risk-weighted assets be for the exposure using a straightforward approach?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    exposure = 80000000  # $80 million exposure\n    collateral_value = 70000000  # $70 million collateral\n    business_partner_risk_weight = 1.5  # 150% risk weight for business partner\n    collateral_risk_weight = 0.5  # 50% risk weight for collateral\n\n    # Do math calculation to get the answer\n    uncovered_exposure = exposure - collateral_value\n    risk_weighted_uncovered = uncovered_exposure * business_partner_risk_weight\n    risk_weighted_collateral = collateral_value * collateral_risk_weight\n    total_risk_weighted_assets = risk_weighted_uncovered + risk_weighted_collateral\n\n    # return answer\n    return total_risk_weighted_assets\n\n```\n\nThis program calculates the risk-weighted assets for the exposure using a straightforward approach. Here's how it works:\n\n1. We define the variables for the exposure, collateral value, and risk weights.\n2. We calculate the uncovered exposure by subtracting the collateral value from the total exposure.\n3. We multiply the uncovered exposure by the business partner's risk weight.\n4. We multiply the collateral value by its risk weight.\n5. We sum these two values to get the total risk-weighted assets.\n6. Finally, we return the result.\n\nWhen you run this function, it will return the risk-weighted assets for the exposure in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-681",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Thompson, a credit analyst, is planning to use the data from a 5-year corporate bond labeled Bond E that is presently yielding a return of 7.5%, with a comparable government bond offering 2.5%, and a suitable CDS contract bearing a credit spread of 4.5% to carry out a basis trade, what will be the accrued profit if there's a convergence in the bond and CDS market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_bond_yield = 0.075  # 7.5%\n    government_bond_yield = 0.025  # 2.5%\n    cds_spread = 0.045  # 4.5%\n\n    # Do math calculation to get the answer\n    credit_spread = corporate_bond_yield - government_bond_yield\n    basis = credit_spread - cds_spread\n    accrued_profit = basis\n\n    # return answer\n    return accrued_profit\n```\n\nThis Python program calculates the accrued profit from a basis trade using the given information:\n\n1. We define the variables for the corporate bond yield (7.5%), government bond yield (2.5%), and CDS spread (4.5%).\n\n2. We calculate the credit spread by subtracting the government bond yield from the corporate bond yield.\n\n3. The basis is calculated by subtracting the CDS spread from the credit spread.\n\n4. In a basis trade, the profit accrues when there's a convergence in the bond and CDS market. This means the basis (difference between credit spread and CDS spread) narrows or closes. In this case, the accrued profit would be equal to the initial basis.\n\n5. The function returns the accrued profit, which is equal to the basis.\n\nNote that the result is in decimal form (e.g., 0.005 for 0.5%). You may want to multiply by 100 to get the percentage value if needed."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-682",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that Corporation N's pretax profits are taxed at the business level of 35%, and the individual tax rate on dividends is at 15%. All the pretax income are dedicated to dividends. What is the effective tax rate on the dividend?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_tax_rate = 0.35\n    individual_dividend_tax_rate = 0.15\n\n    # Do math calculation to get the answer\n    pretax_income = 100  # Assume a pretax income of 100 for calculation\n    after_corporate_tax = pretax_income * (1 - corporate_tax_rate)\n    after_individual_tax = after_corporate_tax * (1 - individual_dividend_tax_rate)\n    \n    total_tax_paid = pretax_income - after_individual_tax\n    effective_tax_rate = total_tax_paid / pretax_income\n\n    # return answer\n    return effective_tax_rate * 100  # Return as percentage\n```\n\nThis Python program calculates the effective tax rate on dividends given the corporate tax rate and individual dividend tax rate. Here's how it works:\n\n1. We define the corporate tax rate (35%) and individual dividend tax rate (15%) as decimals.\n\n2. We assume a pretax income of 100 for ease of calculation. The actual amount doesn't matter as we're calculating a rate.\n\n3. We calculate the amount left after corporate tax, then the amount left after individual tax on dividends.\n\n4. We calculate the total tax paid by subtracting the final amount from the initial pretax income.\n\n5. The effective tax rate is the total tax paid divided by the initial pretax income.\n\n6. We return this rate as a percentage by multiplying by 100.\n\nThis program will return the effective tax rate on the dividend as a percentage."
        ]
    },
    {
        "tables": [
            "|       | Classification | Cost   | Market value 2018 | Market value 2019 |\n|-------|----------------|--------|-------------------|-------------------|\n| Shoes Corp | FVOCI   | 12,000 | 15,000  | 16,000  |\n| Angle PD   | Amortized cost  | 35,000 | 32,000  | 33,000  |\n| T-vision   | FVPL   | 42,000 | 45,000  | 56,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-683",
        "python_solution": "",
        "ground_truth": null,
        "question": "In her role at the Equity investment company, Fabian, a CFA, is preparing a research report on a company known as PZ, which is listed in HK and follows IFRS 9. She pulled information from PZ's year-end 2019 financial report regarding three fixed income investments (assuming cost equals par value). Had Shoes Corp been classified as a Fair Value through P/L in 2019, what would the earnings before taxes have been?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    shoes_corp_cost = 12000\n    shoes_corp_market_value_2018 = 15000\n    shoes_corp_market_value_2019 = 16000\n    \n    # Do math calculation to get the answer\n    \n    # If Shoes Corp was classified as FVPL, the change in fair value would be recognized in P&L\n    fair_value_change = shoes_corp_market_value_2019 - shoes_corp_market_value_2018\n    \n    # The earnings before taxes would increase by this fair value change\n    earnings_before_taxes_increase = fair_value_change\n    \n    # return answer\n    return earnings_before_taxes_increase\n\n```\n\nThis program calculates the change in earnings before taxes if Shoes Corp had been classified as Fair Value through Profit or Loss (FVPL) in 2019 instead of Fair Value through Other Comprehensive Income (FVOCI).\n\nThe key points are:\n\n1. We only need to consider Shoes Corp, as it's the only investment that would change classification.\n2. The change in fair value from 2018 to 2019 (16,000 - 15,000 = 1,000) would be recognized in the profit and loss statement if it were classified as FVPL.\n3. This change would directly increase the earnings before taxes by 1,000.\n\nThe program returns 1000, which represents the increase in earnings before taxes if Shoes Corp had been classified as FVPL in 2019."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-684",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current value of a European-style put option is set to be determined by a CEO using a two-period binomial model. The present stock price is $32, with the put option's exercise price also at $32. The up and down factors are 1.12 and 0.92 respectively, with a risk-free rate of 5%. What is the value of this put option?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 32  # Current stock price\n    K = 32  # Strike price\n    u = 1.12  # Up factor\n    d = 0.92  # Down factor\n    r = 0.05  # Risk-free rate\n    n = 2  # Number of periods\n\n    # Do math calculation to get the answer\n    # Calculate stock prices at each node\n    S_uu = S * u * u\n    S_ud = S * u * d\n    S_dd = S * d * d\n\n    # Calculate option payoffs at expiration\n    P_uu = max(0, K - S_uu)\n    P_ud = max(0, K - S_ud)\n    P_dd = max(0, K - S_dd)\n\n    # Calculate risk-neutral probability\n    p = (1 + r - d) / (u - d)\n\n    # Calculate option values at earlier nodes\n    P_u = (p * P_uu + (1 - p) * P_ud) / (1 + r)\n    P_d = (p * P_ud + (1 - p) * P_dd) / (1 + r)\n\n    # Calculate option value at t=0\n    P = (p * P_u + (1 - p) * P_d) / (1 + r)\n\n    # return answer\n    return round(P, 2)\n```\n\nThis Python program implements a two-period binomial model to price a European put option. Here's a breakdown of the steps:\n\n1. We define all the given variables: stock price (S), strike price (K), up factor (u), down factor (d), risk-free rate (r), and number of periods (n).\n\n2. We calculate the possible stock prices at expiration (S_uu, S_ud, S_dd).\n\n3. We calculate the option payoffs at expiration for each possible stock price.\n\n4. We calculate the risk-neutral probability (p).\n\n5. We work backwards, calculating the option values at each node in the previous period.\n\n6. Finally, we calculate the current option value.\n\n7"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-685",
        "python_solution": "",
        "ground_truth": null,
        "question": "The 15-month investment duration for a bond yielded a 12% return. What is the annualized yield?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    duration_months = 15\n    total_return = 0.12  # 12% expressed as a decimal\n\n    # Do math calculation to get the answer\n    duration_years = duration_months / 12\n    annualized_yield = ((1 + total_return) ** (1 / duration_years)) - 1\n    \n    # Convert to percentage\n    annualized_yield_percentage = annualized_yield * 100\n\n    # return answer\n    return round(annualized_yield_percentage, 2)\n```\n\nThis Python program calculates the annualized yield for a 15-month investment that yielded a 12% return. Here's how it works:\n\n1. We define the variables:\n   - `duration_months` is set to 15 (the investment duration in months)\n   - `total_return` is set to 0.12 (12% expressed as a decimal)\n\n2. We calculate the annualized yield:\n   - First, we convert the duration from months to years by dividing by 12.\n   - Then we use the formula for annualized return: ((1 + total_return) ^ (1 / duration_years)) - 1\n   - This gives us the annualized yield as a decimal\n\n3. We convert the annualized yield to a percentage by multiplying by 100.\n\n4. Finally, we return the result rounded to two decimal places.\n\nThe program will return the annualized yield as a percentage, which answers the question."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-686",
        "python_solution": "",
        "ground_truth": null,
        "question": "A manager of an endowment fund is assessing the market risk of Omega Manufacturing Fund. The fund projects an annual return of 7.1% and a volatility of 7.9%, and it is compared against the Russell 2000 Index. It is assumed by the manager that the anticipated annual return of the Russell 2000 Index is 7.8%, with a yearly volatility of 9.8%. In accordance with the Capital Asset Pricing Model, if the risk-free rate per year is 3.2%, what would be the beta of Omega Manufacturing Fund?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    omega_return = 0.071\n    omega_volatility = 0.079\n    russell_return = 0.078\n    russell_volatility = 0.098\n    risk_free_rate = 0.032\n\n    # Do math calculation to get the answer\n    market_risk_premium = russell_return - risk_free_rate\n    omega_risk_premium = omega_return - risk_free_rate\n    \n    # Calculate beta using the formula: beta = (fund risk premium / market risk premium) * (fund volatility / market volatility)\n    beta = (omega_risk_premium / market_risk_premium) * (omega_volatility / russell_volatility)\n\n    # return answer\n    return beta\n\n```\n\nThis program calculates the beta of the Omega Manufacturing Fund using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the calculation:\n\n1. We define all the given variables: returns and volatilities for Omega fund and Russell 2000 Index, and the risk-free rate.\n\n2. We calculate the market risk premium (Russell 2000 return minus risk-free rate) and the Omega fund's risk premium (Omega return minus risk-free rate).\n\n3. We then use the formula for beta:\n   beta = (fund risk premium / market risk premium) * (fund volatility / market volatility)\n\n4. The calculated beta is returned as the answer.\n\nThis beta value represents the sensitivity of the Omega Manufacturing Fund's returns to the market (Russell 2000 Index) movements, which is a measure of the fund's systematic risk."
        ]
    },
    {
        "tables": [
            "| Year | Hazard Rate |\n|------|-------------|\n| 1    | 0.15%       |\n| 2    | 0.25%       |\n| 3    | 0.35%       |\n| 4    | 0.50%       |\n| 5    | 0.65%       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-687",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood of the firm failing to fulfill its obligations on Bond C, a five-year investment-grade bond, within the initial 4 years, as per the given information?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    hazard_rates = [0.0015, 0.0025, 0.0035, 0.0050]\n    \n    # Do math calculation to get the answer\n    survival_probability = 1\n    for rate in hazard_rates:\n        survival_probability *= (1 - rate)\n    \n    failure_probability = 1 - survival_probability\n    \n    # return answer\n    return failure_probability\n```\n\nThis Python program calculates the probability of the firm failing to fulfill its obligations on Bond C within the first 4 years, based on the given hazard rates.\n\nHere's how it works:\n\n1. We define the hazard rates for the first 4 years in a list.\n\n2. We start with a survival probability of 1 (100%) and iteratively multiply it by (1 - hazard rate) for each year. This gives us the probability of surviving all 4 years.\n\n3. The probability of failing within the 4 years is the complement of the survival probability (1 - survival probability).\n\n4. We return this failure probability as the answer.\n\nThe program will return a decimal value representing the probability of failure within the first 4 years. To get a percentage, you could multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-688",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the neckline is positioned at €100, the shoulders at €90, and the head at €75 in a reversed head and shoulders pattern, what is the target value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    neckline = 100\n    shoulders = 90\n    head = 75\n    \n    # Do math calculation to get the answer\n    pattern_height = neckline - head\n    target = neckline + pattern_height\n    \n    # return answer\n    return target\n```\n\nThis Python program calculates the target value for a reversed head and shoulders pattern based on the given information:\n\n1. We define the variables for the neckline, shoulders, and head positions.\n2. We calculate the pattern height by subtracting the head value from the neckline value.\n3. The target is then calculated by adding the pattern height to the neckline value.\n4. Finally, we return the target value.\n\nIn a reversed head and shoulders pattern, the target is typically the same distance above the neckline as the head is below it. This program implements that calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-689",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the monthly repayment for a customer who buys a car with a loan of €30,000 that is set to be paid off in five years with fixed monthly installments, an annual nominal interest of 8% and interest compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 30000  # Principal loan amount in euros\n    loan_term_years = 5  # Loan term in years\n    annual_interest_rate = 0.08  # 8% annual interest rate\n    compounds_per_year = 12  # Compounded monthly\n\n    # Do math calculation to get the answer\n    monthly_interest_rate = annual_interest_rate / compounds_per_year\n    total_payments = loan_term_years * compounds_per_year\n    \n    # Using the formula for fixed monthly payments with compound interest\n    monthly_payment = (loan_amount * monthly_interest_rate * (1 + monthly_interest_rate)**total_payments) / ((1 + monthly_interest_rate)**total_payments - 1)\n    \n    # Round to two decimal places\n    monthly_payment = round(monthly_payment, 2)\n\n    # return answer\n    return monthly_payment\n```\n\nThis Python program calculates the monthly repayment for the given car loan scenario. It uses the formula for fixed monthly payments with compound interest. The program defines the loan amount, loan term, annual interest rate, and compounding frequency as variables. It then calculates the monthly interest rate and total number of payments. Using these values, it computes the monthly payment and rounds it to two decimal places for a more practical result. The calculated monthly payment is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-690",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming we select 20 students to sit for the university admission test, how many may potentially suffer from anxiety neurosis if it's believed that 45% of all examinees experience it?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_students = 20\n    anxiety_percentage = 0.45  # 45% expressed as a decimal\n\n    # Do math calculation to get the answer\n    students_with_anxiety = total_students * anxiety_percentage\n    \n    # Round down to the nearest whole number, as we can't have partial students\n    answer = int(students_with_anxiety)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the number of students who may potentially suffer from anxiety neurosis based on the given information. It multiplies the total number of students (20) by the percentage of examinees who experience anxiety (45% or 0.45). The result is then rounded down to the nearest whole number using the `int()` function, as we can't have a fractional number of students."
        ]
    },
    {
        "tables": [
            "| Spot rate (USD/AUD) | 0.9062/0.9066 |\n| --- | --- |\n| Three-month points | -36.8/-36.4 |\n| Three-month Libor (AUD) | 2.88% |\n| Three-month Libor (USD) | 0.23% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-691",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the beginning of the year, Brighton offset a major exposure to the Australian dollar (AUD) by selling AUD 5 million forward against the US dollar (USD) at the all-in forward price of 0.8940 (USD/AUD). Currently, it's three months away from the settlement date and Sanderson wants to mark the forward position to market. Exhibit 1 provides data on the current rates in foreign exchange markets. What is the mark-to-market value for Brighton's forward position?",
        "output": [
            "Here's a Python program to calculate the mark-to-market value for Brighton's forward position:\n\n```python\ndef solution():\n    # Define variables name and value\n    forward_contract_rate = 0.8940\n    forward_contract_amount = 5000000  # AUD 5 million\n    spot_rate = 0.9062  # Using the bid rate as we're selling AUD\n    three_month_points = -36.8 / 10000  # Converting points to decimal\n    \n    # Do math calculation to get the answer\n    current_forward_rate = spot_rate + three_month_points\n    \n    # Calculate the mark-to-market value\n    mtm_value = (forward_contract_rate - current_forward_rate) * forward_contract_amount\n    \n    # Convert to USD\n    mtm_value_usd = mtm_value * forward_contract_rate\n    \n    # return answer rounded to 2 decimal places\n    return round(mtm_value_usd, 2)\n```\n\nThis program calculates the mark-to-market value for Brighton's forward position as follows:\n\n1. We define the variables based on the given information.\n2. We calculate the current forward rate by adding the three-month points to the spot rate.\n3. We calculate the difference between the contract forward rate and the current forward rate, multiplied by the contract amount to get the mark-to-market value in AUD.\n4. We convert the mark-to-market value to USD by multiplying it with the forward contract rate.\n5. Finally, we round the result to two decimal places and return it.\n\nThe returned value represents the mark-to-market value of Brighton's forward position in USD. A positive value indicates a gain, while a negative value indicates a loss."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-692",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the worth of a share which is projected to pay a $3 dividend in the subsequent year, with a consistent growth rate of 3% and a needed return rate of 8%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 3  # Projected dividend for the next year\n    growth_rate = 0.03  # Consistent growth rate (3%)\n    required_return = 0.08  # Required return rate (8%)\n\n    # Do math calculation to get the answer\n    # Using the Gordon Growth Model: P = D / (r - g)\n    # Where P is the price, D is the dividend, r is the required return, and g is the growth rate\n    share_price = dividend / (required_return - growth_rate)\n\n    # return answer\n    return round(share_price, 2)  # Rounding to 2 decimal places for currency\n```\n\nThis Python program calculates the worth of a share using the Gordon Growth Model, which is appropriate for valuing stocks with stable dividend growth. Here's a breakdown of the solution:\n\n1. We define the given variables:\n   - `dividend`: The projected dividend for the next year ($3)\n   - `growth_rate`: The consistent growth rate (3% or 0.03)\n   - `required_return`: The required return rate (8% or 0.08)\n\n2. We use the Gordon Growth Model formula to calculate the share price:\n   Price = Dividend / (Required Return - Growth Rate)\n\n3. The result is rounded to two decimal places for currency representation.\n\n4. The calculated share price is returned as the answer.\n\nWhen you run this function, it will return the worth of the share based on the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-693",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a perfectly competitive market where the demand schedule is P = 165 - 3Q (for Q ≤ 55), how is the entry price for new players determined given that the long-term total cost for every business is 125 + Q + 5Q2, the average cost is 125/Q + 1 + 5Q, and the marginal cost is 1 + 10Q?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # We don't need to define the demand schedule or cost functions as they're not directly used in the calculation\n\n    # Do math calculation to get the answer\n    # In a perfectly competitive market, in the long run, firms will enter or exit until economic profits are zero\n    # This occurs where price (P) equals average cost (AC)\n    # We need to find Q where P = AC\n    \n    # P = 165 - 3Q\n    # AC = 125/Q + 1 + 5Q\n    \n    # Solve 165 - 3Q = 125/Q + 1 + 5Q\n    # This is a complex equation. The easiest way to solve this in Python is to use a numerical method\n    \n    def f(Q):\n        return (165 - 3*Q) - (125/Q + 1 + 5*Q)\n    \n    # Use bisection method to find the root\n    a, b = 0, 55  # Q ≤ 55 from the demand schedule\n    tolerance = 1e-6\n    \n    while (b - a) > tolerance:\n        Q = (a + b) / 2\n        if f(Q) == 0:\n            break\n        elif f(Q) * f(a) < 0:\n            b = Q\n        else:\n            a = Q\n    \n    Q_equilibrium = (a + b) / 2\n    \n    # Calculate the entry price (which equals AC at this Q)\n    entry_price = 165 - 3 * Q_equilibrium\n\n    # return answer\n    return round(entry_price, 2)\n```\n\nThis Python program calculates the entry price for new players in the perfectly competitive market described in the question. Here's a breakdown of what the program does:\n\n1. We define a function `f(Q)` that represents the difference between price and average cost. At equilibrium, this difference should be zero.\n\n2. We use the bisection method to find the quantity (Q) where `f(Q)` is zero, which is the equilibrium quantity.\n\n3. Once we have the equilibrium"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-694",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer acquires a five-year bond with a 4% annual coupon for 104.58 and sells it precisely three years subsequent to the purchase. Right after the bond is bought and prior to receiving the first coupon, interest rates drop to 2.25%, and they stay at this rate for the following three years. Assuming that the coupon payments are collected and re-invested at 2.25%, what is the buyer's actualized horizon yield?",
        "output": [
            "Here's a Python program to solve the given bond problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming par value of 100\n    purchase_price = 104.58\n    coupon_rate = 0.04\n    new_interest_rate = 0.0225\n    years_held = 3\n    \n    # Do math calculation to get the answer\n    \n    # Calculate coupon payments and their future values\n    coupon_payment = face_value * coupon_rate\n    fv_coupons = 0\n    for i in range(1, years_held + 1):\n        fv_coupons += coupon_payment * (1 + new_interest_rate) ** (years_held - i)\n    \n    # Calculate the bond's price after 3 years\n    remaining_years = 5 - years_held\n    bond_price_after_3_years = face_value / (1 + new_interest_rate) ** remaining_years\n    for i in range(1, remaining_years + 1):\n        bond_price_after_3_years += (coupon_payment / (1 + new_interest_rate) ** i)\n    \n    # Calculate total return\n    total_return = fv_coupons + bond_price_after_3_years\n    \n    # Calculate horizon yield\n    horizon_yield = (total_return / purchase_price) ** (1 / years_held) - 1\n    \n    # Convert to percentage\n    answer = horizon_yield * 100\n    \n    # return answer\n    return round(answer, 4)\n```\n\nThis program calculates the actualized horizon yield for the bond investment described in the question. Here's a breakdown of the steps:\n\n1. We define the necessary variables, including the face value (assumed to be 100), purchase price, coupon rate, new interest rate, and years held.\n\n2. We calculate the future value of the coupon payments, assuming they are reinvested at the new interest rate of 2.25%.\n\n3. We calculate the bond's price after 3 years, considering the remaining 2 years of payments at the new"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-695",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the factors below, calculate the accrued interest for every 100 of par value for Bond H on the settlement day of 16 June 2014. The factors are: Annual Coupon - 5%, Coupon Payment Frequency - Semiannual, Interest Payment Dates - 10 April and 10 October, Maturity Date - 10 October 2016, Day Count Convention - 30/360, Annual Yield-to-Maturity - 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    annual_coupon_rate = 0.05\n    days_since_last_coupon = 67  # April 10 to June 16\n    days_in_coupon_period = 180  # 30/360 convention for semi-annual\n    \n    # Do math calculation to get the answer\n    semi_annual_coupon = par_value * annual_coupon_rate / 2\n    accrued_interest = semi_annual_coupon * (days_since_last_coupon / days_in_coupon_period)\n    \n    # return answer rounded to 4 decimal places\n    return round(accrued_interest, 4)\n```\n\nThis Python program calculates the accrued interest for Bond H based on the given information. Here's a breakdown of the calculation:\n\n1. We define the par value as 100 (since the question asks for every 100 of par value).\n2. The annual coupon rate is 5% or 0.05.\n3. The number of days since the last coupon payment (April 10 to June 16) is 67 days.\n4. Under the 30/360 day count convention, each month is considered to have 30 days, so a semi-annual period has 180 days.\n5. We calculate the semi-annual coupon payment.\n6. We then calculate the accrued interest by multiplying the semi-annual coupon by the fraction of the coupon period that has elapsed.\n7. Finally, we round the result to 4 decimal places and return it.\n\nThis program will return the accrued interest for every 100 of par value for Bond H on the settlement date of June 16, 2014."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-696",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation Successful Inc. has an operating profit margin of 10%, an asset turnover ratio of 1.5, a financial leverage multiplier of 1.6 times, and an interest burden of 0.8. The firm's ROE is 0.144, can you compute the firm's average tax rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_profit_margin = 0.10\n    asset_turnover_ratio = 1.5\n    financial_leverage_multiplier = 1.6\n    interest_burden = 0.8\n    roe = 0.144\n\n    # Do math calculation to get the answer\n    roa = operating_profit_margin * asset_turnover_ratio\n    roi = roa * financial_leverage_multiplier\n    ebt_rate = roe / (roi * interest_burden)\n    tax_rate = 1 - ebt_rate\n\n    # return answer\n    return tax_rate\n```\n\nThis Python program calculates the average tax rate for Successful Inc. based on the given financial ratios and ROE. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the Return on Assets (ROA) by multiplying the operating profit margin by the asset turnover ratio.\n3. We then calculate the Return on Investment (ROI) by multiplying ROA by the financial leverage multiplier.\n4. We calculate the Earnings Before Taxes (EBT) rate by dividing ROE by (ROI * interest burden).\n5. Finally, we calculate the tax rate as 1 minus the EBT rate.\n\nThe program will return the calculated tax rate as the answer."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price (€) | End of Period Price (£) | Total Dividends (€) |\n|----------|-------------------------------|-------------------------|----------------------|\n| Able     | 10.00                          | 12.00                   | 0.75                 |\n| Baker    | 20.00                          | 19.00                   | 1.00                 |\n| Charlie  | 30.00                          | 30.00                   | 2.00                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-697",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert collects the following data for an equal-weighted index made up of assets Alpha, Beta, and Gamma: What is the total return of the index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = ['Able', 'Baker', 'Charlie']\n    beginning_prices = [10.00, 20.00, 30.00]\n    ending_prices = [12.00, 19.00, 30.00]\n    dividends = [0.75, 1.00, 2.00]\n    num_securities = len(securities)\n\n    # Do math calculation to get the answer\n    total_return = 0\n    for i in range(num_securities):\n        security_return = (ending_prices[i] - beginning_prices[i] + dividends[i]) / beginning_prices[i]\n        total_return += security_return\n\n    # Calculate the average return (equal-weighted index)\n    index_return = total_return / num_securities\n\n    # Convert to percentage\n    index_return_percentage = index_return * 100\n\n    # return answer\n    return round(index_return_percentage, 2)\n```\n\nThis Python program calculates the total return of the equal-weighted index based on the provided data. Here's a breakdown of what the program does:\n\n1. It defines the variables for the securities, their beginning prices, ending prices, and dividends.\n\n2. It calculates the return for each security using the formula: (Ending Price - Beginning Price + Dividends) / Beginning Price\n\n3. It sums up the returns of all securities and then divides by the number of securities to get the average return (since it's an equal-weighted index).\n\n4. The result is converted to a percentage and rounded to two decimal places.\n\n5. The program returns the total return of the index as a percentage.\n\nThis solution assumes that the currency difference between beginning prices (in €) and ending prices (in £) is not relevant or has been accounted for in the provided data. If currency conversion is needed, additional steps would be required."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-698",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we take 2016 as the base period, and the GDP in Nation Y for that year and the following year was $200 billion and $220 billion respectively, what would the GDP deflator be for 2017?",
        "output": [
            "Here's a Python program to calculate the GDP deflator for 2017 based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    base_year_gdp = 200000000000  # GDP in 2016 (base year) in dollars\n    current_year_gdp = 220000000000  # GDP in 2017 in dollars\n\n    # Do math calculation to get the answer\n    gdp_deflator = (current_year_gdp / base_year_gdp) * 100\n\n    # return answer\n    return gdp_deflator\n```\n\nThis program calculates the GDP deflator for 2017 using the following steps:\n\n1. We define the GDP values for the base year (2016) and the current year (2017) in dollars.\n\n2. We calculate the GDP deflator using the formula:\n   GDP Deflator = (Nominal GDP / Real GDP) * 100\n   \n   In this case, the current year's GDP (2017) is the Nominal GDP, and the base year's GDP (2016) is the Real GDP.\n\n3. The function returns the calculated GDP deflator.\n\nThe result will be a percentage value representing the GDP deflator for 2017, with 2016 as the base year. This value indicates the level of price inflation (or deflation) since the base year."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-699",
        "python_solution": "",
        "ground_truth": null,
        "question": "If every yearly trial is independent of each other, what's the probability that BBB company's stock, which has a 30% chance to increase annually, will go up more than once in the coming three years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_increase = 0.30  # Probability of stock increase in a single year\n    years = 3  # Number of years\n    \n    # Do math calculation to get the answer\n    p_no_increase = 1 - p_increase  # Probability of no increase in a single year\n    p_no_increase_all_years = p_no_increase ** years  # Probability of no increase in all years\n    p_increase_at_least_once = 1 - p_no_increase_all_years  # Probability of increase at least once\n    p_increase_more_than_once = p_increase_at_least_once - (years * p_increase * (p_no_increase ** (years - 1)))\n    \n    # return answer\n    return p_increase_more_than_once\n```\n\nThis Python program calculates the probability that BBB company's stock will go up more than once in the coming three years, given that it has a 30% chance to increase annually and each year is independent.\n\nHere's how the calculation works:\n\n1. We first calculate the probability of no increase in a single year (1 - 0.30 = 0.70).\n2. Then we calculate the probability of no increase in all three years (0.70^3).\n3. The probability of an increase at least once is 1 minus the probability of no increase in all years.\n4. To get the probability of an increase more than once, we subtract the probability of exactly one increase from the probability of at least one increase.\n5. The probability of exactly one increase is calculated using the binomial probability formula for one success in three trials: 3 * 0.30 * (0.70^2).\n\nThe function will return this final probability as the answer."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|---------------------------|-------------------------------|\n| A        | 20                        | 16                            |\n| B        | 20                        | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-700",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an manager named Laurel from a finance firm recently built a portfolio with two unrelated assets, what would be the estimated standard deviation assuming equal weightage for both assets?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_A = 0.5\n    weight_B = 0.5\n    std_dev_A = 16\n    std_dev_B = 12\n    \n    # Do math calculation to get the answer\n    portfolio_variance = (weight_A**2 * std_dev_A**2) + (weight_B**2 * std_dev_B**2)\n    portfolio_std_dev = (portfolio_variance)**0.5\n    \n    # return answer\n    return portfolio_std_dev\n```\n\nThis Python program calculates the estimated standard deviation of a portfolio with two unrelated assets, assuming equal weightage for both assets. Here's how it works:\n\n1. We define the variables:\n   - `weight_A` and `weight_B` are both set to 0.5, representing equal weightage (50% each).\n   - `std_dev_A` is set to 16, which is the expected standard deviation for Security A.\n   - `std_dev_B` is set to 12, which is the expected standard deviation for Security B.\n\n2. We calculate the portfolio variance using the formula:\n   Portfolio Variance = (Weight_A^2 * StdDev_A^2) + (Weight_B^2 * StdDev_B^2)\n\n3. We then calculate the portfolio standard deviation by taking the square root of the portfolio variance.\n\n4. Finally, we return the calculated portfolio standard deviation.\n\nThis program assumes that the assets are uncorrelated, which is stated in the question (\"unrelated assets\"). If there was correlation between the assets, we would need to include a correlation term in the calculation."
        ]
    },
    {
        "tables": [
            "| Revenue | $4,000,000 |\n|---------|------------|\n| Cost of goods sold | $3,000,000 |\n| Other operating expenses | $500,000 |\n| Interest expense | $100,000 |\n| Tax expense | $120,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-701",
        "python_solution": "",
        "ground_truth": null,
        "question": "The gross profit of the manufacturing company, Denali Limited, is equal to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 4000000\n    cost_of_goods_sold = 3000000\n    \n    # Do math calculation to get the answer\n    gross_profit = revenue - cost_of_goods_sold\n    \n    # return answer\n    return gross_profit\n```\n\nThis Python program calculates the gross profit for Denali Limited based on the information provided in the table. The gross profit is the difference between revenue and the cost of goods sold. The program defines these values as variables, performs the calculation, and returns the result."
        ]
    },
    {
        "tables": [
            "| Labor(L) | Total Product(TP) | Average Product(AP) |\n|----------|-------------------|---------------------|\n| 1        | 100               | 100                 |\n| 2        | 210               | 105                 |\n| 3        | 300               | 100                 |\n| 4        | 360               | 90                  |\n| 5        | 400               | 80                  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-702",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data chart, what is the marginal product when the labor (L) equals 3?",
        "output": [
            "Here's the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    labor_data = [1, 2, 3, 4, 5]\n    total_product_data = [100, 210, 300, 360, 400]\n\n    # Do math calculation to get the answer\n    labor_index = labor_data.index(3)\n    current_tp = total_product_data[labor_index]\n    previous_tp = total_product_data[labor_index - 1]\n    \n    marginal_product = current_tp - previous_tp\n\n    # return answer\n    return marginal_product\n```\n\nThis program calculates the marginal product when labor (L) equals 3. Here's how it works:\n\n1. We define two lists: `labor_data` and `total_product_data` containing the values from the provided table.\n\n2. We find the index of labor value 3 in the `labor_data` list.\n\n3. We get the total product (TP) for labor = 3 and labor = 2 (the previous labor value).\n\n4. We calculate the marginal product by subtracting the previous TP from the current TP.\n\n5. Finally, we return the calculated marginal product.\n\nThe marginal product when labor (L) equals 3 is the change in total product from L=2 to L=3, which is 300 - 210 = 90. This program will return 90 as the answer."
        ]
    },
    {
        "tables": [
            "|                  |   Prior Year    |        |   Current Year   |        |\n|------------------|-----------------|--------|------------------|--------|\n|      Goods       |    Quantity     | Price  |    Quantity      | Price  |\n| 5 lb.bag sugar   |     150 bags    |  $3.12 |    180 bags      |  $2.92 |\n| 5 lb.bag flour   |     800 bags    |  $2.18 |    750 bags      |  $3.12 |\n| Frozen pizza(each)|    250          |  $2.90 |    250           |  $3.00 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-703",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the Paasche Index if we utilize the consumption basket for this year alongside the subsequent data from a three-item consumption goods basket, which we use to calculate inflation rate?",
        "output": [
            "Here's a Python program to calculate the Paasche Index based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_year = {\n        'sugar': {'quantity': 180, 'price': 2.92},\n        'flour': {'quantity': 750, 'price': 3.12},\n        'pizza': {'quantity': 250, 'price': 3.00}\n    }\n    prior_year = {\n        'sugar': {'quantity': 150, 'price': 3.12},\n        'flour': {'quantity': 800, 'price': 2.18},\n        'pizza': {'quantity': 250, 'price': 2.90}\n    }\n\n    # Do math calculation to get the answer\n    numerator = sum(current_year[item]['quantity'] * current_year[item]['price'] for item in current_year)\n    denominator = sum(current_year[item]['quantity'] * prior_year[item]['price'] for item in current_year)\n\n    paasche_index = (numerator / denominator) * 100\n\n    # return answer\n    return round(paasche_index, 2)\n```\n\nThis program calculates the Paasche Index using the formula:\n\nPaasche Index = (Σ(Pn * Qn) / Σ(Po * Qn)) * 100\n\nWhere:\n- Pn is the price in the current year\n- Qn is the quantity in the current year\n- Po is the price in the prior year\n\nThe program uses the current year's quantities (consumption basket) as specified in the question. It calculates the sum of current year prices multiplied by current year quantities for the numerator, and the sum of prior year prices multiplied by current year quantities for the denominator. The result is then multiplied by 100 to express it as a percentage.\n\nThe final answer is rounded to two decimal places for clarity."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-704",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming the heights of trees in a woodland area are normally distributed and the total number of trees exceeds 10,000. If a z-statistic was calculated using a sample of 200 trees and a 95% confidence interval for the sample mean height ranged from 11 to 35 meters, what would be the standard error of the mean height?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    confidence_level = 0.95\n    lower_bound = 11\n    upper_bound = 35\n    sample_size = 200\n    \n    # Do math calculation to get the answer\n    z_score = 1.96  # z-score for 95% confidence level\n    margin_of_error = (upper_bound - lower_bound) / 2\n    standard_error = margin_of_error / z_score\n    \n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the standard error of the mean height based on the given information:\n\n1. We know that for a 95% confidence interval, the z-score is approximately 1.96.\n2. The margin of error is half the width of the confidence interval.\n3. The standard error is the margin of error divided by the z-score.\n\nThe program defines the necessary variables, performs the calculation, and returns the standard error as the answer."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price(E) | End of Period Price(E) | Total Dividends(E) |\n| --- | --- | --- | --- |\n| Able | 10.00 | 12.00 | 0.75 |\n| Baker | 20.00 | 19.00 | 1.00 |\n| Charlie | 30.00 | 30.00 | 2.00 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-705",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the following data for an equal-weighted index composed of assets X, Y, and Z: The total return of the index is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = ['Able', 'Baker', 'Charlie']\n    begin_prices = [10.00, 20.00, 30.00]\n    end_prices = [12.00, 19.00, 30.00]\n    dividends = [0.75, 1.00, 2.00]\n    num_securities = len(securities)\n\n    # Do math calculation to get the answer\n    total_return = 0\n    for i in range(num_securities):\n        security_return = (end_prices[i] - begin_prices[i] + dividends[i]) / begin_prices[i]\n        total_return += security_return\n\n    # Calculate average return (equal-weighted)\n    avg_return = total_return / num_securities\n\n    # Convert to percentage\n    total_return_percentage = avg_return * 100\n\n    # return answer\n    return round(total_return_percentage, 2)\n```\n\nThis Python program calculates the total return of an equal-weighted index composed of the three securities (Able, Baker, and Charlie) based on the provided data. Here's how it works:\n\n1. We define lists for the securities, their beginning prices, ending prices, and dividends.\n\n2. We calculate the return for each security using the formula: (End Price - Begin Price + Dividends) / Begin Price\n\n3. We sum up these returns and then divide by the number of securities to get the average return (since it's an equal-weighted index).\n\n4. We convert this to a percentage by multiplying by 100.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThe returned value represents the total return of the equal-weighted index as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-706",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith is a tax consultant who offers tax enlightenment counsel to individual customers. One of Smith's client, Rose, is a U.S. citizen and resides in America. Rose recently came into ownership of AAPL shares from a family member who passed on. This departed family member was a resident of the U.S., which applies a \"step-up\" in basis at death. The deceased family member bought AAPL shares at a cost of $15,000 (inclusive of commissions and other spendings) two decades ago. When the family member passed away, the market value of the AAPL stock owned by them was $220,000, and recently Rose sold these shares for $190,000. Rose's capital gains tax rate sits at 20%. The tax obligation on the sale of the AAPL shares is:",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    stepped_up_basis = 220000  # Market value of AAPL stock at the time of family member's death\n    sale_price = 190000  # Price at which Rose sold the shares\n    capital_gains_tax_rate = 0.20  # Rose's capital gains tax rate\n\n    # Do math calculation to get the answer\n    capital_loss = sale_price - stepped_up_basis\n    tax_obligation = 0  # Initialize tax obligation to 0\n\n    # If there's a capital gain, calculate the tax obligation\n    if capital_loss > 0:\n        tax_obligation = capital_loss * capital_gains_tax_rate\n    \n    # return answer\n    return tax_obligation\n```\n\nThis program calculates the tax obligation on the sale of AAPL shares based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `stepped_up_basis`: The market value of the AAPL stock at the time of the family member's death ($220,000), which becomes the new basis due to the \"step-up\" in basis at death rule.\n   - `sale_price`: The price at which Rose sold the shares ($190,000).\n   - `capital_gains_tax_rate`: Rose's capital gains tax rate (20% or 0.20).\n\n2. We calculate the capital loss by subtracting the stepped-up basis from the sale price.\n\n3. We initialize the tax obligation to 0.\n\n4. We check if there's a capital gain (if the capital loss is positive). In this case, there isn't because the sale price is lower than the stepped-up basis, resulting in a capital loss.\n\n5. If there were a capital gain, we would calculate the tax obligation by multiplying the gain by the tax rate. However, since there's a capital loss, the tax obligation remains 0.\n\n6. Finally, we return the tax obligation, which is $0 in this case.\n\nThis program correctly handles the situation where there's a capital loss, resulting in no tax obligation for Rose on the sale of these AAPL shares."
        ]
    },
    {
        "tables": [
            "| Return,R         | Frequency |\n| ---------------- | --------- |\n| -5% up to 0%    | 1         |\n| 0% up to 5%     | 6         |\n| 5% up to 10%    | 4         |\n| 10% up to 15%   | 3         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-707",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the provided frequency distribution table, can you determine the relative frequency of the third interval?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    interval_frequencies = [1, 6, 4, 3]\n    third_interval_frequency = interval_frequencies[2]\n    total_frequency = sum(interval_frequencies)\n\n    # Do math calculation to get the answer\n    relative_frequency = third_interval_frequency / total_frequency\n\n    # return answer\n    return relative_frequency\n```\n\nThis Python program calculates the relative frequency of the third interval in the given frequency distribution table. Here's how it works:\n\n1. We define a list `interval_frequencies` that contains the frequencies for each interval in the order they appear in the table.\n\n2. We extract the frequency of the third interval (which is 4) using `interval_frequencies[2]` (remember that Python uses 0-based indexing).\n\n3. We calculate the total frequency by summing all the frequencies in the list.\n\n4. The relative frequency is calculated by dividing the frequency of the third interval by the total frequency.\n\n5. Finally, we return this relative frequency.\n\nWhen you run this function, it will return the relative frequency of the third interval (5% up to 10%), which is 4 divided by the total number of observations (1 + 6 + 4 + 3 = 14). The result will be approximately 0.2857 or 28.57%."
        ]
    },
    {
        "tables": [
            "| Net income | $55,000 |\n|---|---|\n| Depreciation | $60,000 |\n| Taxes paid | $25,000 |\n| Interest received | $5,000 |\n| Dividends received | $10,000 |\n| Cash received from sale of company's equipment | $40,000 |\n| Issuance of preferred stock | $45,000 |\n| Repurchase of common stock | $20,000 |\n| Purchase of machinery | $20,000 |\n| Issuance of bonds | $40,000 |\n| Debt retired through issuance of common stock | $45,000 |\n| Paid off long-term bank borrowings | $15,000 |\n| Profit on sale of building | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-708",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under American GAAP, what is the cash flow from operations?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income = 55000\n    depreciation = 60000\n    taxes_paid = 25000\n    interest_received = 5000\n    dividends_received = 10000\n    profit_on_sale_of_building = 15000\n\n    # Do math calculation to get the answer\n    cash_flow_from_operations = net_income + depreciation - taxes_paid - interest_received - dividends_received - profit_on_sale_of_building\n\n    # return answer\n    return cash_flow_from_operations\n\n```\n\nThis Python program calculates the cash flow from operations under American GAAP based on the provided information. Here's an explanation of the calculation:\n\n1. We start with net income.\n2. We add back depreciation, as it's a non-cash expense.\n3. We subtract taxes paid, as this is a cash outflow.\n4. We subtract interest received and dividends received, as these are typically considered investing activities under GAAP, not operating activities.\n5. We subtract the profit on sale of building, as gains from sale of assets are typically not included in operating cash flow.\n\nNote that some items from the table are not included in this calculation because they are related to investing or financing activities, not operating activities. The program returns the calculated cash flow from operations as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-709",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the flat price for Bond H, discussed in the display below, which is scheduled for sale on the settlement date of 16 June 2014? Here are some considerations: The Annual Coupon is 5%, the Coupon Payment Frequency is semi-annually, Interest Payment Dates are 10 April and 10 October, the Maturity Date is 10 October 2016, the Day Count Convention is 30/360, and the Annual Yield-to-Maturity is 4%.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value of 100\n    coupon_rate = 0.05\n    coupon_frequency = 2\n    settlement_date = (2014, 6, 16)\n    next_coupon_date = (2014, 10, 10)\n    maturity_date = (2016, 10, 10)\n    ytm = 0.04\n\n    # Do math calculation to get the answer\n    \n    # Calculate days between settlement and next coupon\n    days_to_next_coupon = (next_coupon_date[1] - settlement_date[1]) * 30 + (next_coupon_date[2] - settlement_date[2])\n    \n    # Calculate number of coupons remaining\n    total_days = (maturity_date[0] - settlement_date[0]) * 360 + (maturity_date[1] - settlement_date[1]) * 30 + (maturity_date[2] - settlement_date[2])\n    periods_remaining = total_days / 180\n    \n    # Calculate coupon payment\n    coupon_payment = face_value * (coupon_rate / coupon_frequency)\n    \n    # Calculate present value of coupons\n    pv_coupons = 0\n    for i in range(1, int(periods_remaining) + 1):\n        pv_coupons += coupon_payment / ((1 + ytm/2) ** i)\n    \n    # Calculate present value of face value\n    pv_face_value = face_value / ((1 + ytm/2) ** periods_remaining)\n    \n    # Calculate accrued interest\n    accrued_interest = coupon_payment * (180 - days_to_next_coupon) / 180\n    \n    # Calculate flat price\n    flat_price = pv_coupons + pv_face_value - accrued_interest\n\n    # return answer\n    return round(flat_price, 2)\n```\n\nThis Python program calculates the flat price for Bond H based on"
        ]
    },
    {
        "tables": [
            "|   | Company | Fixed Rate | Floating Rate |\n|---|---------|------------|---------------|\n| a | X       | 8%         | LIBOR+150bps  |\n| b | Y       | 10%        | LIBOR+200bps  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-710",
        "python_solution": "",
        "ground_truth": null,
        "question": "The lending rates for corporation A and corporation B are set as such: corporation A and corporation B borrowed money at their respective preferred borrowing rates before engaging in an interest rate swap. What's the overall savings?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    libor = 0.05  # Assuming LIBOR is 5% for this example\n    \n    company_x_fixed = 0.08\n    company_x_floating = libor + 0.015\n    \n    company_y_fixed = 0.10\n    company_y_floating = libor + 0.02\n    \n    # Do math calculation to get the answer\n    before_swap = company_x_fixed + company_y_fixed\n    after_swap = company_x_floating + company_y_floating\n    \n    overall_savings = before_swap - after_swap\n    \n    # return answer\n    return overall_savings\n```\n\nThis Python program calculates the overall savings from the interest rate swap between Corporation A (Company X) and Corporation B (Company Y). Here's a breakdown of the calculation:\n\n1. We define the lending rates based on the given table. We assume a LIBOR rate of 5% for this example.\n\n2. Before the swap:\n   - Corporation A borrows at its fixed rate: 8%\n   - Corporation B borrows at its fixed rate: 10%\n\n3. After the swap:\n   - Corporation A pays the floating rate: LIBOR + 150bps = 5% + 1.5% = 6.5%\n   - Corporation B pays the fixed rate that Corporation A was paying: 8%\n\n4. We calculate the total cost before and after the swap, then subtract to find the overall savings.\n\nThe function will return the overall savings as a decimal. For example, if the result is 0.015, it means the overall savings is 1.5%.\n\nNote: The actual savings will depend on the current LIBOR rate. You may need to adjust the LIBOR rate in the code to reflect the current market conditions for a more accurate result."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-711",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a marginal tax rate of 40%, what is the after-tax cost of the preferred stock if a corporation is planning a fresh issue of preferred stock with a $100 par and a 12% dividend, and it can be sold for $95 per share with the corporation having to pay flotation costs equating to 5% of the market price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    dividend_rate = 0.12\n    market_price = 95\n    flotation_cost_rate = 0.05\n    marginal_tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    annual_dividend = par_value * dividend_rate\n    flotation_cost = market_price * flotation_cost_rate\n    net_proceeds = market_price - flotation_cost\n    \n    before_tax_cost = annual_dividend / net_proceeds\n    after_tax_cost = before_tax_cost * (1 - marginal_tax_rate)\n    \n    # Convert to percentage and round to 2 decimal places\n    after_tax_cost_percentage = round(after_tax_cost * 100, 2)\n\n    # return answer\n    return after_tax_cost_percentage\n```\n\nThis Python program calculates the after-tax cost of preferred stock based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the annual dividend by multiplying the par value by the dividend rate.\n3. We calculate the flotation cost by multiplying the market price by the flotation cost rate.\n4. We determine the net proceeds by subtracting the flotation cost from the market price.\n5. We calculate the before-tax cost by dividing the annual dividend by the net proceeds.\n6. We apply the tax effect to get the after-tax cost.\n7. Finally, we convert the result to a percentage and round it to two decimal places.\n\nThe program will return the after-tax cost of the preferred stock as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-712",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the net-of-fees return earned in Year 3 by a hedge fund that started with $98 million, charges a 2% management fee based on assets under management at year end, a 20% incentive fee calculated separately from the management fee, and has a high-water mark provision? The fund was valued at $112 million at the end of Year 1, $100 million at the end of Year 2, and $116 million at the end of Year 3.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 98000000\n    year1_value = 112000000\n    year2_value = 100000000\n    year3_value = 116000000\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    \n    # Do math calculation to get the answer\n    high_water_mark = max(initial_value, year1_value, year2_value)\n    \n    gross_return = (year3_value - year2_value) / year2_value\n    \n    management_fee = year3_value * management_fee_rate\n    \n    if year3_value > high_water_mark:\n        incentive_fee = (year3_value - high_water_mark) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    total_fees = management_fee + incentive_fee\n    \n    net_value = year3_value - total_fees\n    \n    net_return = (net_value - year2_value) / year2_value\n    \n    # return answer\n    return net_return\n```\n\nThis Python program calculates the net-of-fees return for Year 3 based on the given information. It takes into account the management fee, incentive fee, and high-water mark provision. The program returns the net return as a decimal (not percentage)."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-713",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the details provided regarding a newly constructed showroom by a corporation, what is the depreciation expense (in millions) for the showroom in 2014? Here are the specifics: Construction commenced on 1 January 2012, the grand opening took place on 1 January 2014, a loan of €30 million was taken out on 1 January 2012, the interest rate on the loan was 8%, payable annually, repayment of the loan was scheduled as a balloon payment due on 1 January 2017. The total construction expenses during 2012 and 2013 amounted to €38.5 million, the estimated useful life of the showroom was 40 years, the projected residual value of the showroom was €5 million, and the depreciation approach used was straight line.",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    construction_cost = 38.5  # million euros\n    loan_amount = 30  # million euros\n    interest_rate = 0.08\n    construction_period = 2  # years\n    useful_life = 40  # years\n    residual_value = 5  # million euros\n    \n    # Do math calculation to get the answer\n    \n    # Calculate total interest during construction\n    total_interest = loan_amount * interest_rate * construction_period\n    \n    # Calculate total cost of the showroom\n    total_cost = construction_cost + total_interest\n    \n    # Calculate depreciable amount\n    depreciable_amount = total_cost - residual_value\n    \n    # Calculate annual depreciation expense\n    annual_depreciation = depreciable_amount / useful_life\n    \n    # return answer\n    return annual_depreciation\n\n```\n\nThis program calculates the depreciation expense for the showroom in 2014 based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the total interest during the construction period (2 years).\n3. We calculate the total cost of the showroom by adding the construction cost and the total interest.\n4. We calculate the depreciable amount by subtracting the residual value from the total cost.\n5. Finally, we calculate the annual depreciation expense using the straight-line method by dividing the depreciable amount by the useful life.\n\nThe function returns the annual depreciation expense in millions of euros, which is the answer to the question for the year 2014."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price(€) | Beginning of Period Shares | End of Period Price(€) | End of Period Shares |\n|----------|------------------------------|---------------------------|------------------------|----------------------|\n| A        | 20.00                        | 300                       | 22.00                  | 300                  |\n| B        | 50.00                        | 300                       | 48.00                  | 300                  |\n| C        | 26.00                        | 2,000                     | 30.00                  | 2,000                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-714",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the subsequent data for an equally-weighted index: What is the index's return over the time span?",
        "output": [
            "Here's a Python program to calculate the index's return for the equally-weighted index based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    securities = ['A', 'B', 'C']\n    begin_prices = [20.00, 50.00, 26.00]\n    end_prices = [22.00, 48.00, 30.00]\n    \n    # Do math calculation to get the answer\n    num_securities = len(securities)\n    \n    # Calculate individual returns\n    individual_returns = [(end - begin) / begin for begin, end in zip(begin_prices, end_prices)]\n    \n    # Calculate average return (equally-weighted)\n    avg_return = sum(individual_returns) / num_securities\n    \n    # Convert to percentage\n    index_return = avg_return * 100\n    \n    # return answer\n    return round(index_return, 2)\n```\n\nThis program does the following:\n\n1. Defines the initial and final prices for each security.\n2. Calculates the individual returns for each security.\n3. Computes the average return, which is the index return for an equally-weighted index.\n4. Converts the result to a percentage and rounds it to two decimal places.\n\nThe returned value is the index's return over the time span, expressed as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-715",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the aforementioned details, what must be the anticipated liquidity requirement for this financial corporation, given that the administration predicts a worst-case scenario next week involving a $25 million liquidity shortage with just a 15% likelihood? Furthermore, the most favorable scenario involves an $80 million liquidity excess, but this has a 10% likelihood. The most likely situation is a $15 million liquidity excess, which has a 75% probability according to administration estimates.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    worst_case_shortage = -25000000  # $25 million shortage\n    worst_case_prob = 0.15  # 15% probability\n    best_case_excess = 80000000  # $80 million excess\n    best_case_prob = 0.10  # 10% probability\n    likely_case_excess = 15000000  # $15 million excess\n    likely_case_prob = 0.75  # 75% probability\n\n    # Do math calculation to get the answer\n    expected_liquidity = (worst_case_shortage * worst_case_prob +\n                          best_case_excess * best_case_prob +\n                          likely_case_excess * likely_case_prob)\n\n    # return answer\n    return expected_liquidity\n```\n\nThis Python program calculates the expected liquidity requirement for the financial corporation based on the given scenarios and their probabilities. Here's how it works:\n\n1. We define variables for each scenario's liquidity amount and probability.\n2. We calculate the expected liquidity by multiplying each scenario's liquidity amount by its probability and summing these products.\n3. The function returns the expected liquidity, which represents the anticipated liquidity requirement.\n\nThe result will be a weighted average of all scenarios, taking into account their probabilities. A positive number indicates an expected excess, while a negative number would indicate an expected shortage."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4% | -5% | 12% | 3% | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-716",
        "python_solution": "",
        "ground_truth": null,
        "question": "The table provided presents the monthly stock returns for Rose Enterprises. Based on the information in the table, can you calculate the median stock return for Rose Enterprises?",
        "output": [
            "Here's a Python program to calculate the median stock return for Rose Enterprises based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_returns = [0.20, 0.04, -0.05, 0.12, 0.03, 0.12]\n    \n    # Do math calculation to get the answer\n    sorted_returns = sorted(stock_returns)\n    n = len(sorted_returns)\n    \n    if n % 2 == 0:\n        # If the number of returns is even, average the two middle values\n        median = (sorted_returns[n//2 - 1] + sorted_returns[n//2]) / 2\n    else:\n        # If the number of returns is odd, take the middle value\n        median = sorted_returns[n//2]\n    \n    # Convert to percentage\n    median_percentage = median * 100\n    \n    # return answer\n    return median_percentage\n\n```\n\nThis program does the following:\n\n1. We define a list `stock_returns` with the given monthly returns as decimals.\n\n2. We sort the returns in ascending order.\n\n3. We calculate the median:\n   - If the number of returns is even, we take the average of the two middle values.\n   - If the number of returns is odd, we take the middle value.\n\n4. We convert the median to a percentage by multiplying by 100.\n\n5. Finally, we return the median as a percentage.\n\nThis program will return the median stock return for Rose Enterprises based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-717",
        "python_solution": "",
        "ground_truth": null,
        "question": "Currently the 1-year rate is at 5%. If a trader predicts the 1-year rate next year to rise up to 7%, and the 1-year rate in two years to reach 9%, what will the 3-year spot rate be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rate_year1 = 0.05  # Current 1-year rate\n    rate_year2 = 0.07  # Predicted 1-year rate next year\n    rate_year3 = 0.09  # Predicted 1-year rate in two years\n    \n    # Do math calculation to get the answer\n    compound_factor = (1 + rate_year1) * (1 + rate_year2) * (1 + rate_year3)\n    spot_rate_3year = (compound_factor ** (1/3)) - 1\n    \n    # return answer\n    return round(spot_rate_3year, 4)\n```\n\nThis Python program calculates the 3-year spot rate based on the given information:\n\n1. We define the variables for the current 1-year rate and the predicted 1-year rates for the next two years.\n\n2. We calculate the compound factor by multiplying (1 + rate) for each year.\n\n3. To get the 3-year spot rate, we take the cube root of the compound factor (because it's a 3-year period) and subtract 1.\n\n4. The result is rounded to 4 decimal places for clarity.\n\nThis calculation uses the principle that the 3-year spot rate should provide the same return as investing in 1-year rates for three consecutive years, assuming the predictions are accurate."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-718",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investor bought 200 stocks of a company that doesn't pay dividends on margin with a cost of $50 each share. The leverage ratio stands at 2.5. Half a year later, the investor offloads these stocks at a price of $60 each share. If we disregard the interest paid on the borrowed money and the transaction expenses, what was the six-month period return for the investor?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_stocks = 200\n    buy_price = 50\n    sell_price = 60\n    leverage_ratio = 2.5\n    \n    # Do math calculation to get the answer\n    total_investment = num_stocks * buy_price\n    investor_equity = total_investment / leverage_ratio\n    \n    total_sale = num_stocks * sell_price\n    profit = total_sale - total_investment\n    \n    return_on_equity = profit / investor_equity\n    six_month_return = return_on_equity * 100  # Convert to percentage\n    \n    # return answer\n    return six_month_return\n```\n\nThis Python program calculates the six-month return for the investor based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the total investment (cost of all stocks).\n3. We determine the investor's equity by dividing the total investment by the leverage ratio.\n4. We calculate the total sale amount when the stocks are sold.\n5. We compute the profit by subtracting the total investment from the total sale.\n6. We calculate the return on equity by dividing the profit by the investor's equity.\n7. Finally, we convert the return to a percentage by multiplying by 100.\n\nThe function will return the six-month period return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-719",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine a portfolio that consists of two properties. Property X makes up 25% of the portfolio and has a standard deviation of 17.9%. Property Y constitutes 75% of the portfolio and comes with a standard deviation of 6.2%. Given that the correlation between these two properties is 0.5, what would be the standard deviation of the portfolio?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.25\n    weight_y = 0.75\n    std_dev_x = 0.179\n    std_dev_y = 0.062\n    correlation = 0.5\n\n    # Do math calculation to get the answer\n    variance_x = std_dev_x ** 2\n    variance_y = std_dev_y ** 2\n    \n    portfolio_variance = (weight_x ** 2 * variance_x) + \\\n                         (weight_y ** 2 * variance_y) + \\\n                         (2 * weight_x * weight_y * correlation * std_dev_x * std_dev_y)\n    \n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis program calculates the portfolio standard deviation using the following steps:\n\n1. Define the variables for weights, standard deviations, and correlation.\n2. Calculate the variances of properties X and Y.\n3. Use the portfolio variance formula, which includes the correlation term.\n4. Calculate the square root of the portfolio variance to get the portfolio standard deviation.\n5. Return the result.\n\nThe formula used for portfolio variance with two assets is:\nσ²p = (w1² * σ1²) + (w2² * σ2²) + (2 * w1 * w2 * ρ12 * σ1 * σ2)\n\nWhere:\n- w1 and w2 are the weights of assets 1 and 2\n- σ1 and σ2 are the standard deviations of assets 1 and 2\n- ρ12 is the correlation coefficient between assets 1 and 2\n\nThe standard deviation of the portfolio is the square root of this variance."
        ]
    },
    {
        "tables": [
            "|    | Joint probabilities |     |     |\n|----|-------------------:|----:|----:|\n|  X |                Y=5 | Y=2 | Y=-3|\n|X=-2|                 0.2|   0 |    0|\n| X=1|                   0| 0.6 |    0|\n|X= 4|                   0|   0 |  0.2|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-720",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given joint probability table, what is the correlation between X and Y?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    joint_probs = {\n        (-2, 5): 0.2,\n        (1, 2): 0.6,\n        (4, -3): 0.2\n    }\n    \n    # Do math calculation to get the answer\n    \n    # Calculate E(X), E(Y), E(XY), E(X^2), E(Y^2)\n    ex = ey = exy = ex2 = ey2 = 0\n    for (x, y), prob in joint_probs.items():\n        ex += x * prob\n        ey += y * prob\n        exy += x * y * prob\n        ex2 += x**2 * prob\n        ey2 += y**2 * prob\n    \n    # Calculate variances\n    var_x = ex2 - ex**2\n    var_y = ey2 - ey**2\n    \n    # Calculate covariance\n    cov_xy = exy - ex * ey\n    \n    # Calculate correlation\n    correlation = cov_xy / (var_x**0.5 * var_y**0.5)\n    \n    # return answer\n    return correlation\n```\n\nThis Python program calculates the correlation between X and Y based on the given joint probability table. Here's a breakdown of the steps:\n\n1. We define the joint probabilities as a dictionary where the keys are tuples of (X, Y) values and the values are the corresponding probabilities.\n\n2. We calculate the expected values E(X), E(Y), E(XY), E(X^2), and E(Y^2) by iterating through the joint probabilities.\n\n3. We calculate the variances of X and Y using the formula Var(X) = E(X^2) - [E(X)]^2.\n\n4. We calculate the covariance of X and Y using the formula Cov(X,Y) = E(XY) - E(X)E(Y).\n\n5. Finally, we calculate the correlation using the formula Correlation = Cov(X,Y) / (sqrt(Var(X))"
        ]
    },
    {
        "tables": [
            "| Probability | Return of Stock A(%) |\n|-------------|----------------------|\n| 0.20        | 30                   |\n| 0.60        | 10                   |\n| 0.20        | -20                  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-721",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the standard deviation of return for stock A according to the above probability distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = [0.20, 0.60, 0.20]\n    returns = [30, 10, -20]\n    \n    # Do math calculation to get the answer\n    \n    # Calculate expected return\n    expected_return = sum([p * r for p, r in zip(probabilities, returns)])\n    \n    # Calculate variance\n    variance = sum([p * ((r - expected_return) ** 2) for p, r in zip(probabilities, returns)])\n    \n    # Calculate standard deviation\n    standard_deviation = variance ** 0.5\n    \n    # return answer\n    return round(standard_deviation, 2)\n```\n\nThis Python program calculates the standard deviation of returns for stock A based on the given probability distribution. Here's a breakdown of the steps:\n\n1. We define two lists: `probabilities` and `returns`, which correspond to the given data.\n\n2. We calculate the expected return using a list comprehension that multiplies each probability by its corresponding return and then sum these products.\n\n3. We calculate the variance using another list comprehension. For each probability-return pair, we subtract the expected return from the actual return, square the difference, multiply by the probability, and then sum all these terms.\n\n4. We calculate the standard deviation by taking the square root of the variance.\n\n5. Finally, we return the standard deviation rounded to two decimal places.\n\nThis program will return the standard deviation of returns for stock A according to the given probability distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-722",
        "python_solution": "",
        "ground_truth": null,
        "question": "A manager at a snowboarding park is contemplating providing discounts on weekday snowboarding passes. With the regular price being €50 per day, it is anticipated that 300 patrons will purchase passes each weekday. However, if the price is lowered to €40 per day, it is expected that 450 patrons will purchase passes each weekday. What is the marginal revenue per patron gained through providing the discounted price?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    regular_price = 50\n    regular_patrons = 300\n    discounted_price = 40\n    discounted_patrons = 450\n    \n    # Do math calculation to get the answer\n    regular_revenue = regular_price * regular_patrons\n    discounted_revenue = discounted_price * discounted_patrons\n    \n    revenue_difference = discounted_revenue - regular_revenue\n    patron_difference = discounted_patrons - regular_patrons\n    \n    marginal_revenue = revenue_difference / patron_difference\n    \n    # return answer\n    return marginal_revenue\n```\n\nThis program calculates the marginal revenue per additional patron gained through providing the discounted price. Here's how it works:\n\n1. We define the variables for the regular price, regular number of patrons, discounted price, and expected number of patrons with the discount.\n\n2. We calculate the total revenue for both scenarios (regular and discounted).\n\n3. We then calculate the difference in revenue and the difference in the number of patrons.\n\n4. Finally, we calculate the marginal revenue per additional patron by dividing the revenue difference by the patron difference.\n\n5. The function returns this marginal revenue.\n\nThe answer returned by this function will be the marginal revenue per patron gained through providing the discounted price."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-723",
        "python_solution": "",
        "ground_truth": null,
        "question": "The probabilities for Z are displayed as follows, P(Z=0.4)=30%, P(Z=0.2)= 30%, P(Z=-0.2)= 40%. What is the standard deviation of Z?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_04 = 0.30\n    prob_02 = 0.30\n    prob_neg02 = 0.40\n    z_values = [0.4, 0.2, -0.2]\n    probabilities = [prob_04, prob_02, prob_neg02]\n    \n    # Do math calculation to get the answer\n    mean = sum(z * p for z, p in zip(z_values, probabilities))\n    \n    variance = sum((z - mean)**2 * p for z, p in zip(z_values, probabilities))\n    \n    standard_deviation = variance ** 0.5\n    \n    # return answer\n    return standard_deviation\n```\n\nThis Python program calculates the standard deviation of the given probability distribution for Z. Here's how it works:\n\n1. We define the probabilities and corresponding Z values.\n\n2. We calculate the mean (expected value) of Z using the formula E[Z] = Σ(z * P(Z=z)).\n\n3. We then calculate the variance using the formula Var(Z) = E[(Z - E[Z])^2] = Σ((z - E[Z])^2 * P(Z=z)).\n\n4. Finally, we calculate the standard deviation as the square root of the variance.\n\nThe function will return the standard deviation of Z."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-724",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the H-model, John is assessing the worth of Company N at $20 per share. The firm has given a dividend of $1 per share in the most recent year. During the initial four years, the growth rate will gradually reduce from 10% to 6%. The dividend growth rate from that point onwards will be 6% per year indefinitely. What is the necessary rate of return in his model?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 20\n    current_dividend = 1\n    initial_growth_rate = 0.10\n    final_growth_rate = 0.06\n    transition_years = 4\n\n    # Do math calculation to get the answer\n    \n    # Calculate average growth rate during transition period\n    avg_growth_rate = (initial_growth_rate + final_growth_rate) / 2\n    \n    # Calculate dividend after transition period\n    dividend_after_transition = current_dividend * (1 + avg_growth_rate) ** transition_years\n    \n    # Use Gordon Growth Model to calculate required return\n    # P = D / (r - g), where P is price, D is dividend, r is required return, g is growth rate\n    \n    # Rearrange formula to solve for r: r = D / P + g\n    required_return = (dividend_after_transition / current_price) + final_growth_rate\n    \n    # Convert to percentage\n    required_return_percent = required_return * 100\n    \n    # return answer\n    return round(required_return_percent, 2)\n```\n\nThis Python program calculates the required rate of return using the H-model for dividend growth. Here's a breakdown of the steps:\n\n1. We define the given variables: current stock price, current dividend, initial growth rate, final growth rate, and the number of transition years.\n\n2. We calculate the average growth rate during the transition period.\n\n3. We calculate the dividend after the transition period using the average growth rate.\n\n4. We use a rearranged form of the Gordon Growth Model to solve for the required return rate. In this case, we use the dividend after the transition period and the final growth rate.\n\n5. We convert the result to a percentage and round it to two decimal places.\n\nThe program will return the required rate of return as a percentage."
        ]
    },
    {
        "tables": [
            "| Comparable Companies | Tax Rate (%) | Debt/Equity | Equity Beta |\n|----------------------|--------------|-------------|-------------|\n| Private company      | 30           | 1           | N.A.        |\n| Public company       | 35           | 0.9         | 1.75        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-725",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the details about a privately-owned corporation and its competitor in the public market and by applying the pure-play method, what would be the projected equity beta for the privately-owned corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    private_tax_rate = 0.30\n    private_debt_equity = 1.0\n    public_tax_rate = 0.35\n    public_debt_equity = 0.9\n    public_equity_beta = 1.75\n\n    # Do math calculation to get the answer\n    \n    # Step 1: Calculate the unlevered beta for the public company\n    public_unlevered_beta = public_equity_beta / (1 + (1 - public_tax_rate) * public_debt_equity)\n    \n    # Step 2: Re-lever the beta for the private company\n    private_equity_beta = public_unlevered_beta * (1 + (1 - private_tax_rate) * private_debt_equity)\n\n    # return answer\n    return round(private_equity_beta, 4)\n```\n\nThis Python program calculates the projected equity beta for the privately-owned corporation using the pure-play method. Here's a breakdown of the steps:\n\n1. We define the given variables for both the private and public companies.\n2. We calculate the unlevered beta for the public company using the formula: \n   Unlevered Beta = Levered Beta / [1 + (1 - Tax Rate) * (Debt/Equity)]\n3. We then re-lever the beta for the private company using the formula:\n   Levered Beta = Unlevered Beta * [1 + (1 - Tax Rate) * (Debt/Equity)]\n4. Finally, we return the result rounded to 4 decimal places.\n\nThis approach assumes that the business risk of the private company is similar to that of the public company, which is a key assumption in the pure-play method."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-726",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the provided table, what is the range for the monthly stock returns of Ivy Corp?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    monthly_returns = [20, 4, -5, 12, 3, 12]\n    \n    # Do math calculation to get the answer\n    highest_return = max(monthly_returns)\n    lowest_return = min(monthly_returns)\n    range_of_returns = highest_return - lowest_return\n    \n    # return answer\n    return range_of_returns\n```\n\nThis Python program calculates the range of monthly stock returns for Ivy Corp based on the provided table. Here's how it works:\n\n1. We define a list `monthly_returns` containing the percentage returns for each month.\n\n2. We use the `max()` function to find the highest return and the `min()` function to find the lowest return.\n\n3. We calculate the range by subtracting the lowest return from the highest return.\n\n4. The function returns this range.\n\nThe range represents the difference between the highest and lowest monthly returns, giving us a measure of the volatility of the stock returns over the given period."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-727",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Natsuki Yamamoto has become a part of a new company where he can choose from 10 mutual funds for the company's retirement plan, and he intends to pick four, how many distinct combinations of mutual funds can he select?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_funds = 10\n    funds_to_select = 4\n    \n    # Do math calculation to get the answer\n    from math import comb\n    combinations = comb(total_funds, funds_to_select)\n    \n    # return answer\n    return combinations\n```\n\nThis Python program calculates the number of distinct combinations of mutual funds Natsuki Yamamoto can select. Here's how it works:\n\n1. We define two variables:\n   - `total_funds`: The total number of mutual funds available (10)\n   - `funds_to_select`: The number of funds Natsuki intends to pick (4)\n\n2. We use the `comb` function from the `math` module to calculate the number of combinations. This function calculates the number of ways to choose `k` items from `n` items without repetition and without order.\n\n3. The formula for this combination is:\n   C(n,k) = n! / (k! * (n-k)!)\n   Where n is the total number of items (10 in this case) and k is the number of items being chosen (4 in this case).\n\n4. The `comb` function does this calculation for us, and we store the result in the `combinations` variable.\n\n5. Finally, we return the `combinations` value as the answer.\n\nThis program will return the number of distinct combinations of 4 mutual funds that can be selected from a total of 10 funds."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-728",
        "python_solution": "",
        "ground_truth": null,
        "question": "A 90-day European put option on Apple has a strike price of $30. The current market price for Apple is $30. What is the delta for this option?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    strike_price = 30\n    current_price = 30\n    option_type = \"put\"\n    time_to_expiration = 90 / 365  # Convert 90 days to years\n\n    # Do math calculation to get the answer\n    # For a European put option at-the-money (strike price = current price),\n    # the delta is approximately -0.5\n    if option_type == \"put\" and strike_price == current_price:\n        delta = -0.5\n    else:\n        # If the conditions are different, we would need more complex calculations\n        # involving the Black-Scholes model, which requires additional inputs\n        delta = \"Cannot be determined with given information\"\n\n    # return answer\n    return delta\n```\n\nNote: This solution provides an approximation for the delta of an at-the-money European put option. In reality, the precise calculation of delta would require additional information such as the risk-free interest rate and the stock's volatility, and would involve using the Black-Scholes option pricing model. The approximation of -0.5 is often used for at-the-money options as a quick estimate."
        ]
    },
    {
        "tables": [
            "|                  |                  |                                  |\n|------------------|------------------|----------------------------------|\n| **Issue price**             |                  |  £ 1,000 at par                     |\n| **Conversion period**       |                  | 13 September 20X5 to 12 September 20X8 |\n| **Initial conversion price**|                  | £ 10.00 per share                  |\n| **Threshold dividend**      |                  | £ 0.50 per share                   |\n| **Change of control conversion price** |                  | £ 8.00 per share                   |\n| **Common stock share price on issue date** |                  | £ 8.70                       |\n| **Share price on**          | 17 September 20X5| £ 9.10                       |\n| **Convertible bond price on 17 September 20X5**  |                  | £ 1,123                      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-729",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share market conversion premium for the DE bond on 17 September 20X5, based on the chosen convertible bond data provided below?",
        "output": [
            "def solution():\n    # Define variables name and value\n    conversion_price = 10.00\n    share_price_17sep = 9.10\n    bond_price_17sep = 1123\n    bond_face_value = 1000\n\n    # Do math calculation to get the answer\n    shares_per_bond = bond_face_value / conversion_price\n    market_conversion_value = shares_per_bond * share_price_17sep\n    market_conversion_premium = bond_price_17sep - market_conversion_value\n    per_share_market_conversion_premium = market_conversion_premium / shares_per_bond\n\n    # return answer\n    return round(per_share_market_conversion_premium, 2)\n\n```\n\nThis Python program calculates the per share market conversion premium for the DE bond on 17 September 20X5 based on the provided data. Here's a breakdown of the calculation:\n\n1. We define the relevant variables from the given information.\n2. We calculate the number of shares per bond by dividing the bond face value by the conversion price.\n3. We calculate the market conversion value by multiplying the number of shares per bond by the share price on 17 September 20X5.\n4. We calculate the market conversion premium by subtracting the market conversion value from the bond price on 17 September 20X5.\n5. Finally, we calculate the per share market conversion premium by dividing the market conversion premium by the number of shares per bond.\n6. The result is rounded to 2 decimal places and returned.\n\nThe program will return the per share market conversion premium in pounds (£)."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-730",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine that in a specific defined benefit scheme, the following situation occurs. Workers serve for 40 years with a wage that grows precisely with inflation rate. Pension equals to 60% of the last salary and grows perfectly with inflation rate. Employees always live for 25 years post-retirement. The money within the retirement plan is invested in bonds that yield an inflation rate. Which is the best approximation of the portion of the worker's income that ought to be put into the retirement plan? (Hint: You should perform all calculations in real and not nominal terms so that the income and pensions stay constant and the interest yield is zero.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    years_working = 40\n    years_retired = 25\n    pension_percentage = 0.60  # 60% of last salary\n\n    # Do math calculation to get the answer\n    total_years = years_working + years_retired\n    years_receiving_pension = years_retired\n    \n    # Calculate the total amount needed for pension\n    total_pension_needed = pension_percentage * years_retired\n    \n    # Calculate the portion of income needed per year of work\n    portion_needed = total_pension_needed / years_working\n    \n    # Convert to percentage\n    portion_percentage = portion_needed * 100\n\n    # return answer\n    return round(portion_percentage, 2)\n```\n\nThis Python program calculates the portion of a worker's income that should be put into the retirement plan based on the given conditions. Here's an explanation of the calculation:\n\n1. We define the known variables: years of working (40), years of retirement (25), and the pension percentage (60% or 0.60).\n\n2. We calculate the total amount needed for pension by multiplying the pension percentage by the number of years in retirement. This gives us the total pension needed in terms of years of salary.\n\n3. We then divide this total by the number of working years to get the portion of income needed to be saved each year.\n\n4. Finally, we convert this to a percentage and round to two decimal places.\n\nThe program will return the percentage of income that should be saved each year for the retirement plan. This approach assumes all calculations are in real terms (adjusted for inflation) as suggested in the hint, which is why we don't need to account for wage growth or investment returns beyond inflation."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-731",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the operating breakeven point in units if the per unit contribution margin for an item is $12 and it is assumed that fixed costs are $12,000, interest costs are $3,000, and there are taxes of $2,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    contribution_margin_per_unit = 12\n    fixed_costs = 12000\n    interest_costs = 3000\n    taxes = 2000\n\n    # Do math calculation to get the answer\n    total_fixed_costs = fixed_costs + interest_costs + taxes\n    breakeven_point = total_fixed_costs / contribution_margin_per_unit\n\n    # return answer\n    return breakeven_point\n```\n\nThis Python program calculates the operating breakeven point in units based on the given information. Here's how it works:\n\n1. We define the variables with the given values:\n   - Contribution margin per unit is $12\n   - Fixed costs are $12,000\n   - Interest costs are $3,000\n   - Taxes are $2,000\n\n2. We calculate the total fixed costs by adding fixed costs, interest costs, and taxes.\n\n3. The breakeven point in units is calculated by dividing the total fixed costs by the contribution margin per unit.\n\n4. The function returns the calculated breakeven point.\n\nThis program will return the number of units that need to be sold to reach the operating breakeven point, considering all the given costs."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-732",
        "python_solution": "",
        "ground_truth": null,
        "question": "A note is presently selling for $109.246 for every $100 of face value. If the note's yield to maturity decreases by 25 bps, the note's total price is projected to increase to $110.481. If the note's yield to maturity increases by 25 bps, the note's total price is predicted to decrease to $108.029. What is the note's estimated convexity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 109.246\n    price_up = 110.481\n    price_down = 108.029\n    yield_change = 0.0025  # 25 bps = 0.25% = 0.0025\n\n    # Do math calculation to get the answer\n    price_change_up = price_up - current_price\n    price_change_down = current_price - price_down\n    \n    # Convexity formula:\n    # Convexity = [ΔP(+) + ΔP(-) - 2P] / (2P * Δy^2)\n    # Where P is the current price, ΔP(+) and ΔP(-) are price changes for up and down yield moves,\n    # and Δy is the yield change\n    \n    convexity = (price_change_up + price_change_down) / (current_price * yield_change**2)\n    \n    # Convert to per $100 of face value\n    convexity_per_100 = convexity * 100\n\n    # return answer\n    return convexity_per_100\n```\n\nThis Python program calculates the estimated convexity of the note based on the given information. Here's a breakdown of the calculation:\n\n1. We define the current price, price after yield decrease, price after yield increase, and the yield change (25 bps = 0.0025).\n2. We calculate the price changes for both the upward and downward yield movements.\n3. We use the convexity formula: Convexity = [ΔP(+) + ΔP(-) - 2P] / (2P * Δy^2)\n   Note: The -2P term cancels out in the numerator because we're using price changes (ΔP) instead of absolute prices.\n4. We multiply the result by 100 to express it per $100 of face value.\n5. The function returns the calculated convexity.\n\nThis solution gives the estimated convexity of the note, which measures the rate of change of the bond's duration with respect"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-733",
        "python_solution": "",
        "ground_truth": null,
        "question": "The 4-year spot rate is 9.45%, and the 1-year spot rate is 8.528%. What would be the 3-year forward rate starting a year from now?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_4year = 0.0945\n    spot_rate_1year = 0.08528\n    \n    # Do math calculation to get the answer\n    # Using the formula: (1 + r4)^4 = (1 + r1) * (1 + f1,3)^3\n    # Where r4 is 4-year spot rate, r1 is 1-year spot rate, and f1,3 is the 3-year forward rate starting in 1 year\n    \n    left_side = (1 + spot_rate_4year)**4\n    right_side_part1 = (1 + spot_rate_1year)\n    \n    forward_rate_cubed = (left_side / right_side_part1)**(1/3) - 1\n    \n    # Convert to percentage\n    answer = forward_rate_cubed * 100\n    \n    # return answer rounded to 3 decimal places\n    return round(answer, 3)\n```"
        ]
    },
    {
        "tables": [
            "|                               | REIT A     |\n| ----------------------------- | ---------- |\n| Funds from operations (FFO)  | $ 396,400  |\n| Non - cash rents              | $ 56,782   |\n| Recurring maintenance-type capital expenditures | $ 78,600   |\n|                               |            |\n| Shares outstanding            | 73,500     |\n| Property subsector average P/AFFO multiple | 17.3x |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-734",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of REIT A by utilizing the property subsector average P/AFFO multiple method?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    ffo = 396400\n    non_cash_rents = 56782\n    recurring_capex = 78600\n    shares_outstanding = 73500\n    subsector_avg_p_affo_multiple = 17.3\n\n    # Do math calculation to get the answer\n    affo = ffo - non_cash_rents - recurring_capex\n    affo_per_share = affo / shares_outstanding\n    per_share_value = affo_per_share * subsector_avg_p_affo_multiple\n\n    # return answer\n    return round(per_share_value, 2)\n```\n\nThis program calculates the per share value of REIT A using the property subsector average P/AFFO multiple method. Here's a breakdown of the steps:\n\n1. We define the given variables from the table.\n2. We calculate the Adjusted Funds from Operations (AFFO) by subtracting non-cash rents and recurring maintenance-type capital expenditures from the Funds from Operations (FFO).\n3. We then calculate the AFFO per share by dividing the AFFO by the number of shares outstanding.\n4. Finally, we multiply the AFFO per share by the property subsector average P/AFFO multiple to get the per share value.\n5. The result is rounded to two decimal places for better readability.\n\nThe function will return the calculated per share value of REIT A."
        ]
    },
    {
        "tables": [
            "|    |    |\n|----|----|\n| Name | Jane Lennon |\n| Occupation and Family Structure | She is the morning news anchor for a national broadcasting company, where she has worked for the past 20 years. She is 56 years of age, divorced, and the sole supporter of her two children, Everett, aged 18, and Marshall, aged 14. Marshall suffers from severe medical and developmental issues. |\n| Current and Expected Future Employment Income | She currently earns $1 million per year as a broadcaster. She plans on retiring in four years. With typical raises in her industry, she estimates that the present value of her pre-retirement income is $4.5 million. |\n| Financial Assets and Liabilities | She has an investment portfolio worth $8 million, which consists of 30% equities and the remainder in fixed-income securities. She also owns $1 million in shares of the broadcasting company she works for, but she is restricted from selling them for two more years. Her primary residence carries no mortgage and was recently valued at $2 million. She also owns a vacation property worth $3 million, with an outstanding mortgage of $1 million. Her defined-contribution pension plan has vested and is valued at $2.5 million. |\n| Aspirational Goals and Extended Liabilities | Everett is just beginning university and plans to pursue a medical degree. Lennon plans on paying for his entire education and living expenses as well as providing some assistance in funding his future practice. She believes that these goals will be covered with $1.5 million in present value terms. She has begun the process of setting up a special needs trust to provide lifetime benefits for Marshall that will not interfere with the government benefits that he is eligible to receive. It will be funded with $2 million within the year. She recently received an honorary doctorate from her alma mater and has started the process of endowing a chair in its communications department. She anticipates that the funding will be made available to the university in two years; it has a present value of $1.75 million. The present value of future consumption is estimated to be $9 million. |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-735",
        "python_solution": "",
        "ground_truth": null,
        "question": "Fox is currently recruiting an asset allocation analyst and has finished interviewing two applicants, Ambrose Kelly and Catherine Trainor, for the role. Based on the data in Exhibit 1, what is Lennon's economic net worth (in $ millions)?",
        "output": [
            "Here's a Python program to calculate Jane Lennon's economic net worth based on the information provided:\n\n```python\ndef solution():\n    # Define variables name and value\n    investment_portfolio = 8\n    company_shares = 1\n    primary_residence = 2\n    vacation_property = 3\n    vacation_property_mortgage = 1\n    pension_plan = 2.5\n    present_value_income = 4.5\n    \n    # Assets\n    total_assets = (investment_portfolio + company_shares + primary_residence + \n                    vacation_property + pension_plan + present_value_income)\n    \n    # Liabilities and future obligations\n    everett_education = 1.5\n    marshall_trust = 2\n    university_endowment = 1.75\n    future_consumption = 9\n    total_liabilities = (vacation_property_mortgage + everett_education + \n                         marshall_trust + university_endowment + future_consumption)\n    \n    # Do math calculation to get the answer\n    economic_net_worth = total_assets - total_liabilities\n    \n    # return answer\n    return economic_net_worth\n\n```\n\nThis program calculates Jane Lennon's economic net worth by summing up all her assets and subtracting her liabilities and future financial obligations. The result is returned in millions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-736",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company is contemplating a venture that would demand a starting investment of THB270 million. The venture will aid in augmenting the company's post-tax net cash flows by THB30 million annually indefinitely, and it has been detected to hold a negative NPV of THB20 million. What is the IRR (%) of the venture?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 270000000  # THB 270 million\n    annual_cash_flow = 30000000  # THB 30 million annually\n    npv = -20000000  # Negative NPV of THB 20 million\n\n    # Do math calculation to get the answer\n    # For IRR, we need to solve the equation: \n    # 0 = -initial_investment + annual_cash_flow / r\n    # Where r is the IRR we're looking for\n    \n    # Rearranging the equation:\n    # r = annual_cash_flow / (initial_investment + npv)\n    \n    irr = annual_cash_flow / (initial_investment + npv)\n    \n    # Convert to percentage\n    irr_percentage = irr * 100\n\n    # return answer\n    return round(irr_percentage, 2)\n```\n\nThis Python function calculates the Internal Rate of Return (IRR) for the given venture. Here's how it works:\n\n1. We define the variables based on the information provided in the question.\n2. We use the formula for IRR calculation in perpetuity, which is:\n   IRR = Annual Cash Flow / (Initial Investment + NPV)\n3. We calculate the IRR and convert it to a percentage.\n4. We round the result to two decimal places for better readability.\n\nThe function will return the IRR as a percentage. For example, if the calculated IRR is 10.7654%, the function will return 10.77."
        ]
    },
    {
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.50%        |\n| 1y1y        | 0.70%        |\n| 2y1y        | 1.00%        |\n| 3y1y        | 1.50%        |\n| 4y1y        | 2.20%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-737",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say the subsequent yearly forward rates were deduced from the yield curve. What would be the spot rate for a four-year period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rates = {\n        '0y1y': 0.0050,\n        '1y1y': 0.0070,\n        '2y1y': 0.0100,\n        '3y1y': 0.0150\n    }\n    \n    # Do math calculation to get the answer\n    compound_factor = 1\n    for rate in forward_rates.values():\n        compound_factor *= (1 + rate)\n    \n    spot_rate = (compound_factor ** (1/4)) - 1\n    \n    # return answer\n    return round(spot_rate * 100, 4)\n```\n\nThis Python program calculates the spot rate for a four-year period based on the given forward rates. Here's how it works:\n\n1. We define a dictionary `forward_rates` with the given forward rates for the first four years.\n\n2. We calculate the compound factor by multiplying (1 + rate) for each of the four forward rates.\n\n3. We then calculate the spot rate using the formula: spot_rate = (compound_factor ^ (1/4)) - 1\n   This gives us the geometric average of the forward rates.\n\n4. Finally, we return the spot rate as a percentage, rounded to 4 decimal places.\n\nThe program will return the four-year spot rate as a percentage."
        ]
    },
    {
        "tables": [
            "|   | Cumulative Distribution Function |\n|---|---|\n| X=x | F(x)=P(X≤x) |\n| 1 | 0.15 |\n| 2 | 0.25 |\n| 3 | 0.50 |\n| 4 | 0.60 |\n| 5 | 0.95 |\n| 6 | 1.00 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-738",
        "python_solution": "",
        "ground_truth": null,
        "question": "The cumulative distribution function for a discrete random variable is displayed in the subsequent table. What is the possibility that Y will assume a value of either 2 or 4?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cdf = {1: 0.15, 2: 0.25, 3: 0.50, 4: 0.60, 5: 0.95, 6: 1.00}\n    \n    # Do math calculation to get the answer\n    prob_2 = cdf[2] - cdf[1]\n    prob_4 = cdf[4] - cdf[3]\n    total_prob = prob_2 + prob_4\n    \n    # return answer\n    return total_prob\n```\n\nThis Python function calculates the probability that the random variable Y will take on a value of either 2 or 4 based on the given cumulative distribution function (CDF).\n\nHere's how it works:\n\n1. We define the CDF as a dictionary where the keys are the values of X and the values are the cumulative probabilities F(x).\n\n2. To find the probability of Y being 2, we subtract F(1) from F(2). This gives us P(1 < Y ≤ 2).\n\n3. Similarly, for the probability of Y being 4, we subtract F(3) from F(4). This gives us P(3 < Y ≤ 4).\n\n4. We sum these two probabilities to get the total probability of Y being either 2 or 4.\n\n5. Finally, we return this total probability as the answer.\n\nThis approach works because in a discrete probability distribution, the probability of a specific value is the difference between its CDF value and the CDF value of the previous number."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-739",
        "python_solution": "",
        "ground_truth": null,
        "question": "Kyle has an equity of $100 in cash. He initiates a short position in stock B. The current price of stock B is 100 and Kyle sells it. The cash from the short sale is kept in the dealer's account and is not available for funding other investments. Furthermore, Kyle deposits $50 as collateral. Based on the details provided, what is the leverage of the position?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_equity = 100\n    stock_price = 100\n    collateral = 50\n    \n    # Do math calculation to get the answer\n    total_investment = cash_equity + collateral\n    position_value = stock_price\n    leverage = position_value / total_investment\n    \n    # return answer\n    return leverage\n```\n\nThis Python program calculates the leverage of Kyle's short position based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `cash_equity`: Kyle's initial cash equity of $100\n   - `stock_price`: The current price of stock B, which is $100\n   - `collateral`: The additional $50 Kyle deposits as collateral\n\n2. We calculate the leverage:\n   - `total_investment`: The sum of Kyle's cash equity and the collateral he deposited\n   - `position_value`: The value of the short position, which is equal to the stock price\n   - `leverage`: Calculated as the position value divided by the total investment\n\n3. The function returns the calculated leverage.\n\nThis calculation assumes that leverage is defined as the ratio of the position value to the total investment (equity + collateral). The cash from the short sale is not considered in this calculation as it's kept in the dealer's account and not available for other investments."
        ]
    },
    {
        "tables": [
            "| Spot rate (CHF/GBP) | 1.4939/1.4941 |\n|---------------------|---------------|\n| One month           | -8.3/-7.9     |\n| Two month           | -17.4/-16.8   |\n| Three month         | -25.4/-24.6   |\n| Four month          | -35.4/-34.2   |\n| Five month          | -45.9/-44.1   |\n| Six month           | -56.5/-54.0   |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-740",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the present comprehensive bid rate for delivery of GBP against the CHF in three months for the CHF/GBP forex pair, taking into account the current spot rate and forward points?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_bid = 1.4939\n    three_month_bid_points = -25.4\n    \n    # Do math calculation to get the answer\n    points_decimal = three_month_bid_points / 10000\n    three_month_bid_rate = spot_bid + points_decimal\n    \n    # return answer\n    return round(three_month_bid_rate, 4)\n```\n\nThis Python program calculates the present comprehensive bid rate for delivery of GBP against the CHF in three months for the CHF/GBP forex pair. Here's how it works:\n\n1. We define the spot bid rate (1.4939) and the three-month bid points (-25.4) as variables.\n\n2. We convert the bid points to decimal form by dividing by 10,000 (since forex points are typically expressed in ten-thousandths).\n\n3. We add the decimal form of the points to the spot bid rate to get the three-month bid rate.\n\n4. We round the result to 4 decimal places (as is common in forex quotes) and return this value.\n\nThe program will return 1.4914, which represents the comprehensive bid rate for a three-month forward contract on the CHF/GBP pair."
        ]
    },
    {
        "tables": [
            "| Exhibit 1. Consumption Baskets and Price Level Over 2 years |\n|-------------------------------------------------------------|",
            "| Time     | 2015 Q   | 2015 P     | 2016 Q   | 2016 P     |\n| -------- | -------- | ---------- | -------- | ---------- |\n| Soybean  | 110 kg   | $4.8/kg    | 150 kg   | $5.1/kg    |\n| Gasoline | 50 liters| $2.62/liter| 80 liters| $3.1/liter |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-741",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of the Paasche index for the consumption basket showcased in Exhibit 1 for the year 2016?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    soybean_2015_q = 110\n    soybean_2015_p = 4.8\n    soybean_2016_q = 150\n    soybean_2016_p = 5.1\n\n    gasoline_2015_q = 50\n    gasoline_2015_p = 2.62\n    gasoline_2016_q = 80\n    gasoline_2016_p = 3.1\n\n    # Do math calculation to get the answer\n    numerator = (soybean_2016_q * soybean_2016_p) + (gasoline_2016_q * gasoline_2016_p)\n    denominator = (soybean_2016_q * soybean_2015_p) + (gasoline_2016_q * gasoline_2015_p)\n    \n    paasche_index = (numerator / denominator) * 100\n\n    # return answer\n    return round(paasche_index, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-742",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bank certificate of deposit with a 365-day year has a starting principal sum of USD 96.5 million and a due amount at maturity of USD 100 million. It has 350 days between settlement and maturation. What is the equivalent yield of the bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 96500000  # Starting principal sum in USD\n    due_amount = 100000000  # Due amount at maturity in USD\n    days_to_maturity = 350  # Days between settlement and maturation\n    days_in_year = 365  # Number of days in a year\n\n    # Do math calculation to get the answer\n    interest = due_amount - principal\n    yield_rate = (interest / principal) * (days_in_year / days_to_maturity) * 100\n\n    # return answer\n    return round(yield_rate, 4)  # Rounding to 4 decimal places for precision\n```\n\nThis Python program calculates the equivalent yield of the bank certificate of deposit based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the interest by subtracting the principal from the due amount.\n3. We then calculate the yield rate using the formula:\n   Yield = (Interest / Principal) * (Days in Year / Days to Maturity) * 100\n4. The result is rounded to 4 decimal places for precision.\n\nThe function will return the equivalent yield as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-743",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current year's consumer price index (CPI) stands at 252 while it was 246 last year. Can you determine this year's rate of inflation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_year_cpi = 252\n    last_year_cpi = 246\n    \n    # Do math calculation to get the answer\n    inflation_rate = (current_year_cpi - last_year_cpi) / last_year_cpi * 100\n    \n    # return answer\n    return round(inflation_rate, 2)\n```\n\nThis Python program calculates the inflation rate based on the Consumer Price Index (CPI) values provided. Here's how it works:\n\n1. We define two variables:\n   - `current_year_cpi`: The CPI for the current year (252)\n   - `last_year_cpi`: The CPI for the previous year (246)\n\n2. We calculate the inflation rate using the formula:\n   Inflation Rate = (Current Year CPI - Last Year CPI) / Last Year CPI * 100\n\n3. The result is rounded to two decimal places using the `round()` function.\n\n4. The calculated inflation rate is returned as the answer.\n\nWhen you run this function, it will return the inflation rate as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-744",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer acquires a nine-year bond with an annual coupon rate of 7% at a price equivalent to its par value. Prior to the receipt of the first coupon, interest rates rise to 8%. After holding the bond for five years, the buyer decides to sell it. Let's assume that the interest rates stayed steady at 8% during the five-year period. How much would the reinvested coupon payments be worth at the end of the holding period per 100 of par value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.07\n    new_interest_rate = 0.08\n    holding_period = 5\n    \n    # Do math calculation to get the answer\n    annual_coupon = par_value * coupon_rate\n    \n    # Calculate the future value of each coupon payment\n    reinvested_coupons = 0\n    for year in range(1, holding_period + 1):\n        future_value = annual_coupon * ((1 + new_interest_rate) ** (holding_period - year))\n        reinvested_coupons += future_value\n    \n    # Round the answer to two decimal places\n    answer = round(reinvested_coupons, 2)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the value of reinvested coupon payments at the end of the holding period for a 9-year bond held for 5 years. Here's a breakdown of the solution:\n\n1. We define the variables based on the given information:\n   - Par value is set to 100 (per 100 of par value)\n   - Coupon rate is 7% (0.07)\n   - New interest rate after the rise is 8% (0.08)\n   - Holding period is 5 years\n\n2. We calculate the annual coupon payment by multiplying the par value by the coupon rate.\n\n3. We use a loop to calculate the future value of each coupon payment at the end of the holding period. For each year:\n   - We calculate the future value of the coupon payment using the compound interest formula\n   - We add this future value to the total of reinvested coupons\n\n4. Finally, we round the result to two decimal places and return the answer.\n\nThis program will return the value of reinvested coupon payments at the end of the 5-year holding period per 100 of par value."
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Mddert  | 45              |\n| Nuki    | 35              |\n| Pefa    | 10              |\n| Serds   | 5               |\n| Rsdf    | 5               |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-745",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an industry consisting of 5 businesses, the market share data of these businesses was provided for the last quarter. What is the three-firm Herfindahl-Hirschmann Index for this industry?",
        "output": [
            "Here's the Python program to calculate the three-firm Herfindahl-Hirschmann Index for the given industry:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_shares = {\n        'Mddert': 45,\n        'Nuki': 35,\n        'Pefa': 10,\n        'Serds': 5,\n        'Rsdf': 5\n    }\n    \n    # Do math calculation to get the answer\n    \n    # Sort market shares in descending order\n    sorted_shares = sorted(market_shares.values(), reverse=True)\n    \n    # Take the top 3 market shares\n    top_3_shares = sorted_shares[:3]\n    \n    # Calculate HHI for top 3 firms\n    hhi = sum(share**2 for share in top_3_shares)\n    \n    # return answer\n    return hhi\n```\n\nThis program does the following:\n\n1. We define a dictionary `market_shares` with the given market share data for each company.\n\n2. We sort the market shares in descending order using the `sorted()` function and the `values()` method of the dictionary.\n\n3. We take the top 3 market shares using slicing `[:3]`.\n\n4. We calculate the Herfindahl-Hirschmann Index (HHI) for the top 3 firms by summing the squares of their market shares.\n\n5. Finally, we return the calculated HHI.\n\nThis program will return the three-firm Herfindahl-Hirschmann Index for the given industry. Note that the market shares are already in percentage form, so we don't need to divide by 100 when calculating the HHI."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-746",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Firm B disclosed a revenue of $80 million and net income of $45 million, what would be the sum of cash obtained from clients if there was a $5 million increase in accounts receivable and a $1 million decrease in accounts payable?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 80_000_000\n    net_income = 45_000_000\n    increase_in_accounts_receivable = 5_000_000\n    decrease_in_accounts_payable = 1_000_000\n\n    # Do math calculation to get the answer\n    cash_from_clients = revenue - increase_in_accounts_receivable + decrease_in_accounts_payable\n\n    # return answer\n    return cash_from_clients\n```\n\nThis Python program calculates the cash obtained from clients based on the given information. Here's how it works:\n\n1. We define the variables with the given values:\n   - Revenue: $80 million\n   - Net income: $45 million (not used in this calculation)\n   - Increase in accounts receivable: $5 million\n   - Decrease in accounts payable: $1 million\n\n2. To calculate the cash obtained from clients:\n   - We start with the revenue ($80 million)\n   - Subtract the increase in accounts receivable ($5 million) because this represents money earned but not yet received\n   - Add the decrease in accounts payable ($1 million) because this represents less money owed to suppliers, which effectively increases cash\n\n3. The function returns the calculated cash_from_clients value.\n\nWhen you run this function, it will return the sum of cash obtained from clients, which in this case is $76 million."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-747",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Jane Doe's portfolio has a fixed-income position with a market value of USD 70 million, a modified duration of 6.44 years and a yield of 6.7% compounded semiannually and if there is a positive parallel shift in the yield curve of 25 basis points, which of the following answers best estimates the resulting change in the value of Jane’s portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value = 70000000  # USD 70 million\n    modified_duration = 6.44  # years\n    yield_change = 0.0025  # 25 basis points = 0.25%\n    \n    # Do math calculation to get the answer\n    # Change in value = -Modified Duration * Yield Change * Market Value\n    change_in_value = -modified_duration * yield_change * market_value\n    \n    # return answer\n    return change_in_value\n\n# To get the result, you can call the function:\n# result = solution()\n# print(result)\n```\n\nThis program calculates the change in the value of Jane Doe's portfolio based on the given information. Here's a breakdown of the calculation:\n\n1. We use the formula: Change in value ≈ -Modified Duration * Yield Change * Market Value\n2. The yield change is 25 basis points, which is 0.25% or 0.0025 in decimal form.\n3. The negative sign in the formula accounts for the inverse relationship between yield and price.\n\nThe result will be in USD. It will be negative, indicating a decrease in the portfolio's value due to the positive shift in the yield curve.\n\nTo get the exact answer, you would run this function and round the result to the nearest thousand or million, depending on the level of precision required in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-748",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Inc. released a five-year floating-rate note (FRN) that provides a quarterly coupon of three-month market reference rate (MRR) plus 125 bps. The FRN is valued at 96 for every 100 of par value. Given a 30/360-day count convention, evenly arranged periods, and a consistent three-month market reference rate (MRR) of 5%, what is the discount margin for the FRN?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    market_price = 96\n    coupon_spread = 0.0125  # 125 bps = 1.25%\n    mrr = 0.05  # 5%\n    years = 5\n    periods_per_year = 4  # quarterly payments\n\n    # Do math calculation to get the answer\n    n = years * periods_per_year\n    coupon_rate = mrr + coupon_spread\n    \n    # Calculate the present value of the coupon payments\n    pv_coupons = 0\n    for t in range(1, n+1):\n        pv_coupons += (coupon_rate * par_value / periods_per_year) / ((1 + mrr/periods_per_year)**t)\n    \n    # Calculate the present value of the principal repayment\n    pv_principal = par_value / ((1 + mrr/periods_per_year)**n)\n    \n    # Calculate the discount margin\n    discount_margin = ((pv_coupons + pv_principal - market_price) / market_price) * (periods_per_year / years)\n    \n    # Convert to basis points\n    discount_margin_bps = discount_margin * 10000\n\n    # return answer\n    return round(discount_margin_bps, 2)\n```\n\nThis Python program calculates the discount margin for the floating-rate note (FRN) based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables, including the par value, market price, coupon spread, market reference rate (MRR), years to maturity, and periods per year.\n\n2. We calculate the total number of periods and the coupon rate.\n\n3. We calculate the present value of all coupon payments using a loop.\n\n4. We calculate the present value of the principal repayment at maturity.\n\n5. We use these values to calculate the discount margin using the formula:\n   Discount Margin = ((PV of Coupons + PV of Principal - Market Price) / Market Price) * (Periods per"
        ]
    },
    {
        "tables": [
            "| Account Name                               | Amount ($ trillions) |\n|--------------------------------------------|---------------------:|\n| GDP                                        |                 18.0 |\n| Wages, salaries, and other labor income    |                  9.0 |\n| Taxes                                      |                  3.5 |\n| Capital consumption allowance              |                  2.3 |\n| Undistributed corporate profits            |                  1.0 |\n| Transfer payments                          |                  1.9 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-749",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the individual earnings (in $ trillions) for a theoretical nation derived from the chosen data in the GDP records?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    wages_salaries = 9.0\n    transfer_payments = 1.9\n    \n    # Do math calculation to get the answer\n    individual_earnings = wages_salaries + transfer_payments\n    \n    # return answer\n    return individual_earnings\n```\n\nThis Python function calculates the individual earnings for a theoretical nation based on the data provided in the GDP records. Here's the explanation:\n\n1. We define two variables:\n   - `wages_salaries`: This represents the \"Wages, salaries, and other labor income\" from the table, which is 9.0 trillion dollars.\n   - `transfer_payments`: This represents the \"Transfer payments\" from the table, which is 1.9 trillion dollars.\n\n2. To calculate individual earnings, we sum these two components:\n   - Wages, salaries, and other labor income (direct earnings from work)\n   - Transfer payments (additional income individuals receive, such as social security, unemployment benefits, etc.)\n\n3. The function returns the sum of these two values, which represents the total individual earnings in trillion dollars.\n\nThis calculation assumes that individual earnings consist of direct labor income plus transfer payments, which is a common approach in economic analysis. The result will be in trillion dollars, consistent with the units used in the provided table."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-750",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will be the 2014 stock-based remuneration cost from the stock grant scheme ($ millions) be, given that since 2010, the yearly executive pay included stock options on the corporation's shares. The enterprise launched a restricted stock grant plan for all non-managerial staff who had been with the enterprise for three years or longer on 1st September 2013. The fair market value of the corporation's shares on the grant date was $4.2 million and the staffer has to stay with the corporation for an additional three years for the shares to vest?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    grant_date_fair_value = 4.2  # $ millions\n    vesting_period_years = 3\n    grant_date = \"2013-09-01\"\n    calculation_year = 2014\n    \n    # Do math calculation to get the answer\n    days_in_2013 = 122  # From Sept 1 to Dec 31\n    days_in_2014 = 365\n    total_vesting_days = vesting_period_years * 365\n    \n    cost_per_day = grant_date_fair_value / total_vesting_days\n    cost_2013 = cost_per_day * days_in_2013\n    cost_2014 = cost_per_day * days_in_2014\n    \n    # return answer\n    return round(cost_2014, 2)\n```\n\nThis Python program calculates the stock-based remuneration cost for 2014 based on the given information. Here's an explanation of the calculation:\n\n1. We define the grant date fair value as $4.2 million, the vesting period as 3 years, and the grant date as September 1, 2013.\n\n2. We calculate the number of days from the grant date to the end of 2013 (122 days) and the full year of days for 2014 (365 days).\n\n3. We calculate the total number of days in the vesting period (3 years * 365 days).\n\n4. We determine the cost per day by dividing the grant date fair value by the total vesting days.\n\n5. We calculate the cost for 2013 and 2014 by multiplying the cost per day by the respective number of days in each year.\n\n6. Finally, we return the cost for 2014, rounded to two decimal places.\n\nThis approach assumes straight-line recognition of the expense over the vesting period, which is a common accounting practice for stock-based compensation."
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n| **ABC LA retirement plan information  2018** | |\n| Current service costs | 320 |\n| Past service costs | 150 |\n| Employer contributions | 1,200 |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year | 48,395 |\n| Plan assets at beginning of year | 40,800 |\n| Plan assets at end of year | 44,300 |\n| Actuarial loss | 350 |\n| Actual return on plan assets | 3,100 |\n| Discount rate on plan liabilities | 7.5% |\n| Expected rate of return on plan assets | 8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "test-751",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ NY, a home decor purchasing corporation, provides its workers with a defined benefit pension scheme. The data in the subsequent table: The regular pension expense that would be documented in OCI as per IFRS is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150\n    benefit_obligation_start = 45000\n    benefit_obligation_end = 48395\n    plan_assets_start = 40800\n    plan_assets_end = 44300\n    actuarial_loss = 350\n    actual_return = 3100\n    discount_rate = 0.075\n    expected_return_rate = 0.082\n\n    # Do math calculation to get the answer\n    interest_cost = benefit_obligation_start * discount_rate\n    expected_return = plan_assets_start * expected_return_rate\n    \n    net_interest = interest_cost - expected_return\n    \n    service_cost = current_service_costs + past_service_costs\n    \n    remeasurements = (benefit_obligation_end - benefit_obligation_start - service_cost - interest_cost + actuarial_loss) + (expected_return - actual_return)\n    \n    oci_pension_expense = remeasurements\n\n    # return answer\n    return round(oci_pension_expense)\n```\n\nThis Python program calculates the regular pension expense that would be documented in Other Comprehensive Income (OCI) according to IFRS standards. Here's a breakdown of the calculation:\n\n1. We define all the relevant variables from the given table.\n2. We calculate the interest cost and expected return on plan assets.\n3. We calculate the net interest.\n4. We sum up the service costs.\n5. We calculate the remeasurements, which include:\n   - Changes in the benefit obligation not due to service cost or interest cost\n   - The difference between actual and expected return on plan assets\n6. The OCI pension expense is equal to the remeasurements.\n7. We round the result to the nearest whole number and return it.\n\nThis approach follows IFRS standards, where remeasurements (including actuarial gains and losses) are recognized in OCI."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-752",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond that Brian purchased has a maturity period of three years with a par value of $1000. The coupon rate is 4% and it pays interest annually. If the required rate of return on the bond is 3.5%, what would be the bond's price?",
        "output": [
            "Here's a Python program to calculate the bond's price based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    coupon_rate = 0.04\n    required_return = 0.035\n    maturity_years = 3\n    \n    # Do math calculation to get the answer\n    coupon_payment = par_value * coupon_rate\n    \n    # Calculate present value of coupon payments\n    pv_coupons = 0\n    for year in range(1, maturity_years + 1):\n        pv_coupons += coupon_payment / (1 + required_return) ** year\n    \n    # Calculate present value of par value at maturity\n    pv_par = par_value / (1 + required_return) ** maturity_years\n    \n    # Calculate bond price\n    bond_price = pv_coupons + pv_par\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis program calculates the bond's price using the following steps:\n\n1. Define the given variables: par value, coupon rate, required rate of return, and maturity period.\n2. Calculate the annual coupon payment.\n3. Calculate the present value of all coupon payments using a loop.\n4. Calculate the present value of the par value at maturity.\n5. Sum up the present values of coupon payments and par value to get the bond price.\n6. Round the result to two decimal places and return it.\n\nThe function will return the bond's price as a float value rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-753",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that the one-year probabilities of default for the bonds rated AAA and BBB are 1% and 4% respectively, and the combined probability of default of these two bonds is 0.07%. What is the correlation of default between these two bonds?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_AAA = 0.01  # Probability of default for AAA bond\n    p_BBB = 0.04  # Probability of default for BBB bond\n    p_combined = 0.0007  # Combined probability of default\n\n    # Do math calculation to get the answer\n    # Using the formula: p(A and B) = p(A) * p(B) + ρ * sqrt(p(A) * (1-p(A)) * p(B) * (1-p(B)))\n    # Where ρ is the correlation coefficient we're solving for\n    \n    # Rearranging the formula to solve for ρ:\n    # ρ = (p(A and B) - p(A) * p(B)) / sqrt(p(A) * (1-p(A)) * p(B) * (1-p(B)))\n    \n    numerator = p_combined - (p_AAA * p_BBB)\n    denominator = (p_AAA * (1-p_AAA) * p_BBB * (1-p_BBB)) ** 0.5\n    \n    correlation = numerator / denominator\n\n    # return answer\n    return correlation\n```\n\nThis Python program calculates the correlation of default between the two bonds based on the given probabilities. Here's a breakdown of the solution:\n\n1. We define the variables for the probabilities of default for AAA and BBB bonds, as well as their combined probability of default.\n\n2. We use the formula for joint probability of two events, which involves the correlation coefficient:\n   p(A and B) = p(A) * p(B) + ρ * sqrt(p(A) * (1-p(A)) * p(B) * (1-p(B)))\n\n3. We rearrange this formula to solve for ρ (the correlation coefficient):\n   ρ = (p(A and B) - p(A) * p(B)) / sqrt(p(A) * (1-p(A)) * p(B) * (1-p(B)))\n\n4. We calculate the"
        ]
    },
    {
        "tables": [
            "|  |  |\n|---|---|\n|Exhibit 1. Adidas AG Excerpt from Consolidated Income Statement Year|   |\n|Ending 31 December 2010(£ in millions)|   |\n|Gross profit|5730|\n|Royalty and commission income|100|\n|Other operating income|110|\n|Other operating expenses|5046|\n|Operating profit|894|\n|Interest income 25| |\n|Interest expense|113|\n|Income before taxes|806|\n|Income taxes|238|\n|Net income|568|\n|Additional Information:| |\n|Depreciation and amortization:  £249 million| |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-754",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the EBITDA interest coverage ratio of Adidas AG as stated in Exhibit 1?",
        "output": [
            "Here's the Python program to calculate the EBITDA interest coverage ratio for Adidas AG based on the information provided in Exhibit 1:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_profit = 894\n    depreciation_amortization = 249\n    interest_expense = 113\n\n    # Do math calculation to get the answer\n    ebitda = operating_profit + depreciation_amortization\n    ebitda_interest_coverage_ratio = ebitda / interest_expense\n\n    # return answer\n    return round(ebitda_interest_coverage_ratio, 2)\n```\n\nThis program calculates the EBITDA interest coverage ratio as follows:\n\n1. We define the relevant variables from the given information:\n   - Operating profit: £894 million\n   - Depreciation and amortization: £249 million\n   - Interest expense: £113 million\n\n2. We calculate EBITDA by adding operating profit and depreciation/amortization:\n   EBITDA = Operating profit + Depreciation and amortization\n\n3. We then calculate the EBITDA interest coverage ratio by dividing EBITDA by the interest expense:\n   EBITDA interest coverage ratio = EBITDA / Interest expense\n\n4. The result is rounded to two decimal places for clarity.\n\nWhen you run this function, it will return the EBITDA interest coverage ratio for Adidas AG based on the information provided in Exhibit 1."
        ]
    },
    {
        "tables": [
            "| Par Value   | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n|-------------|------------|--------|-------------------|--------------------|-----------|\n| $25million  |     105    |  8%    |     7.9           |     8              |   122     |\n| $25million  |     100    |  7%    |     8.5           |     8.5            |   154     |\n| $20million  |     95     |  5%    |     6.3           |     2              |   87      |\n| $30million  |     87     |  0%    |     10.2          |     10.2           |   32      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-755",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the data in the chart concerning four bonds in an investment collection, what is the portfolio's effective duration?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bonds = [\n        {\"par_value\": 25000000, \"price\": 105, \"effective_duration\": 8},\n        {\"par_value\": 25000000, \"price\": 100, \"effective_duration\": 8.5},\n        {\"par_value\": 20000000, \"price\": 95, \"effective_duration\": 2},\n        {\"par_value\": 30000000, \"price\": 87, \"effective_duration\": 10.2}\n    ]\n    \n    # Do math calculation to get the answer\n    total_weighted_duration = 0\n    total_market_value = 0\n    \n    for bond in bonds:\n        market_value = bond[\"par_value\"] * (bond[\"price\"] / 100)\n        weighted_duration = market_value * bond[\"effective_duration\"]\n        \n        total_weighted_duration += weighted_duration\n        total_market_value += market_value\n    \n    portfolio_effective_duration = total_weighted_duration / total_market_value\n    \n    # return answer\n    return round(portfolio_effective_duration, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-756",
        "python_solution": "",
        "ground_truth": null,
        "question": "A 2-year zero-coupon bond with a face value of  USD 1,000 is currently valued at USD 952.48. The corporation uses a binomial pricing model with a 1-year time increment for all its valuations. Should interest rates decrease over the forthcoming year, the model predicts the bond's worth to be USD 970, or USD 950 should interest rates increase. Using the risk-neutral probabilities deduced from the model, and assuming the risk-free interest rate is 1% annually, what ought to be the present value of a 1-year European call option on this bond with a exercise price of USD 960?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    current_value = 952.48\n    up_value = 970\n    down_value = 950\n    risk_free_rate = 0.01\n    strike_price = 960\n    time = 1  # 1 year\n\n    # Do math calculation to get the answer\n    \n    # Calculate risk-neutral probability\n    p = (current_value * (1 + risk_free_rate) - down_value) / (up_value - down_value)\n    \n    # Calculate option payoffs\n    call_up = max(0, up_value - strike_price)\n    call_down = max(0, down_value - strike_price)\n    \n    # Calculate present value of the call option\n    option_value = (p * call_up + (1 - p) * call_down) / (1 + risk_free_rate)\n    \n    # return answer\n    return round(option_value, 2)\n```\n\nThis program calculates the present value of the 1-year European call option on the 2-year zero-coupon bond using the given information and the risk-neutral pricing approach. Here's a breakdown of the steps:\n\n1. We define all the given variables.\n2. We calculate the risk-neutral probability (p) using the current bond value, up and down values, and the risk-free rate.\n3. We calculate the payoffs of the call option in both up and down scenarios.\n4. We use the risk-neutral probability to calculate the expected payoff of the option and discount it back to present value using the risk-free rate.\n5. Finally, we return the option value rounded to two decimal places.\n\nThis solution assumes a risk-neutral world and uses the no-arbitrage principle to price the option."
        ]
    },
    {
        "tables": [
            "| Company M | $(millions) |\n|-----------|-------------|\n| Operating income (EBIT) | 2,000 |\n| Depreciation expense | 750 |\n| Increase in accounts receivable | 1,000 |\n| Increase in inventories | 100 |\n| Increase in accounts payable | 500 |\n| Purchases of PP&E | 600 |\n| Borrowing (repayment) | 400 |\n| Tax rate | 30% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-757",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the financial report, what is the FCFF for Company N?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_income = 2000\n    depreciation = 750\n    increase_accounts_receivable = 1000\n    increase_inventories = 100\n    increase_accounts_payable = 500\n    capex = 600\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    \n    # Calculate NOPAT (Net Operating Profit After Taxes)\n    nopat = operating_income * (1 - tax_rate)\n    \n    # Calculate changes in working capital\n    change_in_working_capital = (increase_accounts_receivable + increase_inventories - increase_accounts_payable)\n    \n    # Calculate FCFF\n    fcff = nopat + depreciation - capex - change_in_working_capital\n\n    # return answer\n    return fcff\n```\n\nThis Python program calculates the Free Cash Flow to Firm (FCFF) for Company M (not N, as the question seems to have a typo) based on the given financial report. Here's a breakdown of the calculation:\n\n1. We first define all the necessary variables from the provided table.\n2. We calculate NOPAT (Net Operating Profit After Taxes) by applying the tax rate to the operating income.\n3. We calculate the changes in working capital by summing the increases in accounts receivable and inventories, and subtracting the increase in accounts payable.\n4. Finally, we calculate FCFF using the formula: FCFF = NOPAT + Depreciation - Capital Expenditures - Changes in Working Capital\n5. The function returns the calculated FCFF.\n\nNote that we don't use the \"Borrowing (repayment)\" figure in this calculation as it's not relevant to FCFF."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-758",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, a corporation acquired a warehouse and accompanying equipment like shelving and forklifts for a whole sum of €50 million. This was divided by an evaluator into: Land €10 million, building structure €35 million, and accompanying gear €5 million. For bookkeeping goals, taking into account additional spending like €2.0 million for enhancements to the building’s roof and windows, €0.5 million for internal remodeling to suit their requirements (repositioning walls and doors, addition and removal of dividers, and so forth), and €0.1 million on an orientation and training workshop for employees to familiarize them with the facility, what is the capitalized cost to the building account in millions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    building_structure = 35\n    roof_windows_enhancement = 2.0\n    internal_remodeling = 0.5\n\n    # Do math calculation to get the answer\n    capitalized_cost = building_structure + roof_windows_enhancement + internal_remodeling\n\n    # return answer\n    return capitalized_cost\n```\n\nThis Python program calculates the capitalized cost to the building account based on the given information. Here's a breakdown of the calculation:\n\n1. We start with the initial cost of the building structure (€35 million).\n2. We add the cost of enhancements to the roof and windows (€2.0 million).\n3. We add the cost of internal remodeling (€0.5 million).\n\nNote that we don't include the cost of the orientation and training workshop (€0.1 million) because this is typically considered an operational expense rather than a capital expenditure.\n\nThe program will return the total capitalized cost to the building account in millions of euros."
        ]
    },
    {
        "tables": [
            "|    | Today's one-year Libor | Currency pair (Price/Base) | Spot rate today | Projected spot rate in one year |\n|----|------------------------|---------------------------|-----------------|---------------------------------|\n| USD | 0.80% | CAD/USD | 1.0055 | 1.0006 |\n| CAD | 1.71% | EUR/CAD | 0.7218 | 0.7279 |\n| EUR | 2.20% |  |  |  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-759",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is contemplating a carry trade between the USD and the Euro. What could be the total USD return on the suggested carry trade, taking into account the spot rates and interest rates?",
        "output": [
            "def solution():\n    # Define variables name and value\n    usd_libor = 0.0080  # 0.80%\n    eur_libor = 0.0220  # 2.20%\n    usd_cad_spot = 1.0055\n    eur_cad_spot = 0.7218\n    eur_cad_projected = 0.7279\n\n    # Do math calculation to get the answer\n    \n    # Calculate USD/EUR spot rate\n    usd_eur_spot = usd_cad_spot / eur_cad_spot\n    \n    # Calculate projected USD/EUR rate in one year\n    usd_eur_projected = usd_cad_spot / eur_cad_projected\n    \n    # Calculate the interest rate differential\n    interest_differential = eur_libor - usd_libor\n    \n    # Calculate the exchange rate return\n    exchange_rate_return = (usd_eur_spot - usd_eur_projected) / usd_eur_spot\n    \n    # Calculate the total return\n    total_return = interest_differential + exchange_rate_return\n    \n    # Convert to percentage\n    total_return_percentage = total_return * 100\n\n    # return answer\n    return round(total_return_percentage, 2)\n\n```"
        ]
    },
    {
        "tables": [
            "| Path | Time 0 | Time 1 | Time 2 |\n|------|--------|--------|--------|\n| 1    | 1.500% | 2.8853%| 2.7183%|\n| 2    | 1.500% | 2.8853%| 1.6487%|\n| 3    | 1.500% | 1.7500%| 1.6487%|\n| 4    | 1.500% | 1.7500%| 1.0000%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-760",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bond D is a 3-year annual pay bond that offers a 3% coupon rate. Smith determines the potential interest rate paths for Bond D as shown in the Exhibit below. According to the Exhibit, what is the current value of Bond D's cash flows if we follow Path 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming a face value of 100\n    coupon_rate = 0.03\n    coupon_payment = face_value * coupon_rate\n    \n    # Interest rates for Path 2\n    r1 = 0.028853\n    r2 = 0.016487\n    r3 = 0.015  # Current rate (Time 0)\n    \n    # Do math calculation to get the answer\n    pv_year1 = coupon_payment / (1 + r1)\n    pv_year2 = coupon_payment / ((1 + r1) * (1 + r2))\n    pv_year3 = (coupon_payment + face_value) / ((1 + r1) * (1 + r2) * (1 + r3))\n    \n    bond_value = pv_year1 + pv_year2 + pv_year3\n    \n    # return answer\n    return round(bond_value, 4)\n```\n\nThis Python function calculates the present value of Bond D's cash flows following Path 2 in the given interest rate tree. Here's a breakdown of the calculation:\n\n1. We define the face value as 100 (assuming a standard $100 face value for bonds), and calculate the coupon payment based on the 3% coupon rate.\n\n2. We use the interest rates from Path 2 in the table: 1.5% (current), 2.8853% (Time 1), and 1.6487% (Time 2).\n\n3. We calculate the present value of each year's cash flow:\n   - Year 1: Coupon payment discounted by r1\n   - Year 2: Coupon payment discounted by r1 and r2\n   - Year 3: Coupon payment plus face value, discounted by r1, r2, and r3\n\n4. We sum these present values to get the current value of the bond.\n\n5. The result is rounded to 4 decimal places for precision.\n\nThis approach uses the concept of discounted cash flow analysis to determine the"
        ]
    },
    {
        "tables": [
            "|  Exhibit 1  | 10 Sample Results of Test Data for Dataset XYZ |\n|-------------|------------------------------------------------|\n| Sentence#   | Actual Sentiment Target p-value               |\n| 1           | 1 0.75                                        |\n| 2           | 0 0.45                                        |\n| 3           | 1 0.64                                        |\n| 4           | 1 0.81                                        |\n| 5           | 0 0.43                                        |\n| 6           | 1 0.78                                        |\n| 7           | 0 0.59                                        |\n| 8           | 1 0.60                                        |\n| 9           | 0 0.67                                        |\n| 10          | 0 0.54                                        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-761",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a threshold p-value of 0.65, Smith wants to implement machine learning (ML) models in the company's analytics procedures. Smith applies the ML model on the test data for Dataset XYZ, as described in Exhibit 1, which includes example results from the testing data collection. What is the accuracy metric for the sample test set of Dataset XYZ according to Exhibit 1?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    threshold = 0.65\n    data = [\n        (1, 0.75), (0, 0.45), (1, 0.64), (1, 0.81), (0, 0.43),\n        (1, 0.78), (0, 0.59), (1, 0.60), (0, 0.67), (0, 0.54)\n    ]\n    \n    # Do math calculation to get the answer\n    correct_predictions = 0\n    total_samples = len(data)\n    \n    for actual, p_value in data:\n        predicted = 1 if p_value >= threshold else 0\n        if predicted == actual:\n            correct_predictions += 1\n    \n    accuracy = correct_predictions / total_samples\n    \n    # return answer\n    return accuracy\n```\n\nThis Python program calculates the accuracy of the machine learning model based on the given data and threshold. Here's how it works:\n\n1. We define the threshold p-value as 0.65 and create a list of tuples representing the data from Exhibit 1. Each tuple contains the actual sentiment (1 or 0) and the p-value.\n\n2. We initialize variables to count correct predictions and total samples.\n\n3. We iterate through the data, comparing each p-value to the threshold to make a prediction. If the prediction matches the actual sentiment, we increment the correct_predictions counter.\n\n4. Finally, we calculate the accuracy by dividing correct predictions by total samples.\n\n5. The function returns the calculated accuracy.\n\nThis program will give you the accuracy metric for the sample test set of Dataset XYZ according to Exhibit 1, assuming a threshold p-value of 0.65."
        ]
    },
    {
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n|----------|--------------|--------|--------|\n| G        |    15.00     |  17.00 |  500   |\n| H        |    35.00     |  33.00 |  300   |\n| 1        |    37.00     |  40.00 |  200   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-762",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Benedict from a finance firm collected this data for an equal-weighted index made up of securities G,H,I: What is the return of the index during this time frame?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = {\n        'G': {'begin': 15.00, 'end': 17.00, 'shares': 500},\n        'H': {'begin': 35.00, 'end': 33.00, 'shares': 300},\n        'I': {'begin': 37.00, 'end': 40.00, 'shares': 200}\n    }\n    num_securities = len(securities)\n\n    # Do math calculation to get the answer\n    total_return = 0\n    for security in securities.values():\n        begin_value = security['begin']\n        end_value = security['end']\n        security_return = (end_value - begin_value) / begin_value\n        total_return += security_return\n\n    index_return = total_return / num_securities\n    \n    # Convert to percentage and round to 2 decimal places\n    index_return_percentage = round(index_return * 100, 2)\n\n    # return answer\n    return index_return_percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-763",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a product has a unit contribution margin of $12, fixed costs are $12,000, the interest costs amount to $3,000, and the tax rate is 40%, what would be the operating breakeven point (in units)?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 12\n    fixed_costs = 12000\n    interest_costs = 3000\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    total_fixed_costs = fixed_costs + interest_costs\n    operating_breakeven_point = total_fixed_costs / unit_contribution_margin\n\n    # return answer\n    return operating_breakeven_point\n```\n\nThis program calculates the operating breakeven point in units. Here's a breakdown of the solution:\n\n1. We define the given variables: unit contribution margin, fixed costs, interest costs, and tax rate.\n\n2. We calculate the total fixed costs by adding the fixed costs and interest costs. Note that the tax rate is not used in this calculation because we're looking for the operating breakeven point, which is determined before taxes.\n\n3. We then calculate the operating breakeven point by dividing the total fixed costs by the unit contribution margin. This gives us the number of units that need to be sold to cover all fixed costs (including interest).\n\n4. Finally, we return the calculated operating breakeven point.\n\nWhen you run this function, it will return the number of units needed to reach the operating breakeven point."
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n| --- | --- | --- |\n| Security 1 | 30 | 1.60 |\n| Security 2 | 20 | 1.70 |\n| Security 3 | 25 | 1.90 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-764",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the capital asset pricing model, can you compute the market risk premium for the market using the provided details? The expected return for Security B is 15.9% and the risk-free rate stands at 4%.",
        "output": [
            "Here's the Python program to calculate the market risk premium based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    security_b_return = 0.159  # 15.9%\n    security_b_beta = 1.70  # Beta for Security 2\n    risk_free_rate = 0.04  # 4%\n\n    # Do math calculation to get the answer\n    # Using CAPM formula: E(R) = Rf + β(Rm - Rf)\n    # Where E(R) is the expected return, Rf is risk-free rate, β is beta, and (Rm - Rf) is market risk premium\n    # Rearranging the formula to solve for market risk premium:\n    # (E(R) - Rf) / β = Rm - Rf\n\n    market_risk_premium = (security_b_return - risk_free_rate) / security_b_beta\n\n    # return answer\n    return market_risk_premium\n```\n\nThis program calculates the market risk premium using the Capital Asset Pricing Model (CAPM) formula. Here's how it works:\n\n1. We define the known variables:\n   - The expected return for Security B (15.9%)\n   - The beta for Security B (1.70, which is Security 2 in the table)\n   - The risk-free rate (4%)\n\n2. We use the CAPM formula: E(R) = Rf + β(Rm - Rf)\n   Where E(R) is the expected return, Rf is the risk-free rate, β is beta, and (Rm - Rf) is the market risk premium.\n\n3. We rearrange the formula to solve for the market risk premium:\n   (E(R) - Rf) / β = Rm - Rf\n\n4. We plug in the values and calculate the market risk premium.\n\n5. The function returns the calculated market risk premium.\n\nThis solution will give you the market risk premium as a decimal. To get it as a percentage, you can multiply the result by 100."
        ]
    },
    {
        "tables": [
            "| Neutral  real policy rate at trend growth and target inflation | 1.2% |\n| --- | --- |\n| Target inflation rate | 0.5% |\n| Expected inflation rate | 1.0% |\n| Trend real GDP growth rate | 1.0% |\n| Expected real GDP growth rate | 2.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-765",
        "python_solution": "",
        "ground_truth": null,
        "question": "In order to predict the return expectations for Swedish bonds, Oliver chooses to figure out the target nominal policy rate of Sweden by implementing the Taylor rule with the data shown in Exhibit 1. What's the calculated target nominal policy rate for Sweden using the Taylor rule?",
        "output": [
            "Here's the Python program to calculate the target nominal policy rate for Sweden using the Taylor rule based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    neutral_real_rate = 0.012  # 1.2%\n    target_inflation = 0.005  # 0.5%\n    expected_inflation = 0.010  # 1.0%\n    trend_gdp_growth = 0.010  # 1.0%\n    expected_gdp_growth = 0.020  # 2.0%\n\n    # Do math calculation to get the answer\n    # Taylor Rule: r = p + y + 0.5(p - p*) + 0.5(y - y*)\n    # Where:\n    # r = target nominal policy rate\n    # p = expected inflation rate\n    # y = expected real GDP growth rate\n    # p* = target inflation rate\n    # y* = trend real GDP growth rate\n\n    inflation_gap = expected_inflation - target_inflation\n    output_gap = expected_gdp_growth - trend_gdp_growth\n\n    target_nominal_rate = neutral_real_rate + expected_inflation + 0.5 * inflation_gap + 0.5 * output_gap\n\n    # return answer\n    return target_nominal_rate\n```\n\nThis program implements the Taylor rule to calculate the target nominal policy rate for Sweden based on the given data. The Taylor rule is a common monetary policy rule used by central banks to determine the appropriate interest rate.\n\nThe formula used is:\nr = p + y + 0.5(p - p*) + 0.5(y - y*)\n\nWhere:\n- r is the target nominal policy rate\n- p is the expected inflation rate\n- y is the expected real GDP growth rate\n- p* is the target inflation rate\n- y* is the trend real GDP growth rate\n\nThe program calculates the inflation gap and output gap, then applies the Taylor rule formula to determine the target nominal policy rate. The result is returned as a decimal (e.g., 0.0275 for 2.75%)."
        ]
    },
    {
        "tables": [
            "|                                          | ($ thousands) |\n|------------------------------------------|-------------:|\n| Book value of Great Lakes                |      3,256.00|\n| Fair value of Suburban's investment in Great Lakes |         940|\n| Carrying value of Suburban's investment in Great Lakes | 1,264.51|"
        ],
        "topic": "Accounting",
        "question_id": "test-766",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Thompson's assessment of Metro's assets in Great Lakes as outlined in Exhibit 3 at the conclusion of 2013, even with government assistance, he thought that the automotive sector was unlikely to make a full recovery. This, coupled with Great Lakes' dependence on the automotive industry, would cause Metro, a company known for acquiring local news organizations across the nation under US GAAP, to possibly consider the investment impaired. According to Thompson's viewpoint concerning the probable impairment of the investment in Great Lakes Free Press as presented in Exhibit 3, what is the impairment loss in thousands as of the end of 2013?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 1264.51  # Carrying value of Suburban's investment in Great Lakes\n    fair_value = 940  # Fair value of Suburban's investment in Great Lakes\n\n    # Do math calculation to get the answer\n    impairment_loss = carrying_value - fair_value\n\n    # return answer rounded to two decimal places\n    return round(impairment_loss, 2)\n```\n\nThis Python program calculates the impairment loss based on the information provided in the question and table. Here's how it works:\n\n1. We define two variables:\n   - `carrying_value`: This is the carrying value of Suburban's investment in Great Lakes, which is $1,264.51 thousand.\n   - `fair_value`: This is the fair value of Suburban's investment in Great Lakes, which is $940 thousand.\n\n2. The impairment loss is calculated as the difference between the carrying value and the fair value.\n\n3. The result is rounded to two decimal places using the `round()` function, as financial figures are typically presented with cents precision.\n\n4. The function returns the calculated impairment loss in thousands of dollars.\n\nWhen you run this function, it will return 324.51, which represents an impairment loss of $324,510 (remember, the original figures were in thousands)."
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|-----------|----------|---------- |\n|One-Year   |   2.50%  |   2.50%   |\n|Two-Year   |   2.99%  |   3.00%   |\n|Three-Year |   3.48%  |   3.50%   |\n|Four-Year  |   3.95%  |   4.00%   |\n|Five-Year  |   4.37%  |           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-767",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in Display 1 about the present par and spot rates of annual-coupon sovereign bonds, what is the forward rate for a loan for one year that starts in three years?",
        "output": [
            "Here's a Python program to calculate the forward rate for a loan for one year that starts in three years, based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate_3year = 0.035\n    spot_rate_4year = 0.04\n\n    # Do math calculation to get the answer\n    price_3year = 1 / (1 + spot_rate_3year)**3\n    price_4year = 1 / (1 + spot_rate_4year)**4\n    \n    forward_rate = (price_3year / price_4year) - 1\n    \n    # Convert to percentage and round to 2 decimal places\n    forward_rate_percentage = round(forward_rate * 100, 2)\n\n    # return answer\n    return forward_rate_percentage\n```\n\nThis program calculates the forward rate using the following steps:\n\n1. We use the 3-year and 4-year spot rates from the given table.\n2. Calculate the present value of $1 received in 3 years and 4 years using these spot rates.\n3. Use these present values to calculate the forward rate for the one-year period between year 3 and year 4.\n4. Convert the rate to a percentage and round to two decimal places for readability.\n\nThe forward rate represents the implied rate for a one-year loan starting three years from now, based on the current term structure of interest rates."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-768",
        "python_solution": "",
        "ground_truth": null,
        "question": "A zero-coupon bond with a maturity term of one year has a yield of 4.0%. The yield on zero-coupon bonds with a maturity of two and three years are 5.0% and 6.0% respectively. The forward price of a zero-coupon bond with a two-year term that begins in three years is established at 0.8479. What's the current price of a zero-coupon bond that matures in five years?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04  # 1-year yield\n    r2 = 0.05  # 2-year yield\n    r3 = 0.06  # 3-year yield\n    f35 = 0.8479  # Forward price of 2-year bond starting in 3 years\n\n    # Do math calculation to get the answer\n    \n    # Calculate the 3-year discount factor\n    df3 = 1 / (1 + r3)**3\n    \n    # Calculate the 5-year discount factor using the forward price\n    df5 = df3 * f35\n    \n    # Calculate the 5-year zero-coupon bond price\n    price = df5 * 100  # Assuming face value of 100\n    \n    # return answer\n    return price\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The current price of a zero-coupon bond that matures in five years is: {result:.4f}\")\n```\n\nThis program calculates the price of a zero-coupon bond maturing in five years based on the given information. Here's a breakdown of the calculation:\n\n1. We first define the known yields and the forward price.\n2. We calculate the 3-year discount factor using the 3-year yield.\n3. We then use the forward price to calculate the 5-year discount factor. The forward price represents the 2-year discount factor starting from year 3, so multiplying it by the 3-year discount factor gives us the 5-year discount factor.\n4. Finally, we calculate the price of the 5-year zero-coupon bond by multiplying the 5-year discount factor by the face value (assumed to be 100).\n\nThe function returns the price of the 5-year zero-coupon bond. You can uncomment the last two lines to see the result when you run the program."
        ]
    },
    {
        "tables": [
            "| Years Ended 31 December | 2007 | 2008 |\n| --- | --- | --- |\n| Assets |  |  |\n| Current assets |  |  |\n| Cash and equivalents | $210 | $248 |\n| Accounts receivable | 474 | 513 |\n| Inventory | 520 | 564 |\n| Total current assets | 1,204 | 1,325 |\n| Gross fixed assets | 2,501 | 2,850 |\n| Accumulated depreciation | (604) | (784) |\n| Net fixed assets | 1,897 | 2,066 |\n| Total assets | $3,101 | $3,391 |",
            "| Years Ended 31  December | 2007  | 2008  |\n|--------------------------|-------|-------|\n| Liabilities and shareholders' equity | | |\n| Current liabilities | | |\n| Accounts payable        | $295  | $317  |\n| Notes payable           | 300   | 310   |\n| Accrued taxes and expenses| 76   | 99    |\n| Total current liabilities| 671   | 726   |\n| Long-term debt          | 1,010 | 1,050 |\n| Common stock            | 50    | 50    |\n| Additional paid-in capital| 300  | 300   |\n| Retained earnings       | 1,070 | 1,265 |\n| Total shareholders' equity| 1,420 | 1,615 |\n| Total liabilities and shareholders' equity | $3,101 | $3,391 |",
            "| Statement of Income<br>In Millions, except Per-Share Data | 31 December 2008 |\n|----------------------------------------------------------|-----------------|\n| Total revenues                                           | $2,215           |\n| Operating costs and expenses                             | 1,430           |\n| EBITDA                                                   | 785             |\n| Depreciation                                             | 180             |\n| EBIT                                                     | 605             |\n| Interest expense                                         | 130             |\n| Income before tax                                        | 475             |\n| Taxes (at 40 percent)                                    | 190             |\n| Net income                                               | 285             |\n| Dividends                                                | 90              |\n| Addition to retained earnings                            | 195             |",
            "| Statement of Cash Flows In Millions | 31 December 2008 |\n|---|---|\n| Operating activities |   |\n| Net income | $285 |\n| Adjustments |   |\n| Depreciation | 180 |\n| Changes in working capital |   |\n| Accounts receivable | (39) |\n| Inventories | (44) |\n| Accounts payable | 22 |\n| Accrued taxes and expenses | 23 |\n| Cash provided by operating activities | $427 |\n| Investing activities |   |\n| Purchases of fixed assets | $349 |\n| Cash used for investing activities | $349 |\n| Financing activities |   |\n| Notes payable | $(10) |\n| Long-term financing issuances | (40) |\n| Common stock dividends | 90 |\n| Cash used for financing activities | $40 |\n| Cash and equivalents increase (decrease) | 38 |\n| Cash and equivalents at beginning of year | 210 |\n| Cash and equivalents at end of year | $248 |\n| Supplemental cash flow disclosures |   |\n| Interest paid | $130 |\n| Income taxes paid | $190 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-769",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the difference between FCFF and FCFE as per the financial statements provided by the organization?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income = 285\n    depreciation = 180\n    interest_expense = 130\n    tax_rate = 0.40\n    change_in_working_capital = -39 - 44 + 22 + 23  # Sum of changes in A/R, inventory, A/P, and accruals\n    capital_expenditures = 349\n    change_in_debt = -10 + 40  # Change in notes payable + change in long-term debt\n\n    # Do math calculation to get the answer\n    # Calculate FCFF\n    fcff = net_income + depreciation + interest_expense * (1 - tax_rate) - change_in_working_capital - capital_expenditures\n\n    # Calculate FCFE\n    fcfe = net_income + depreciation - change_in_working_capital - capital_expenditures + change_in_debt\n\n    # Calculate the difference\n    difference = fcff - fcfe\n\n    # return answer\n    return round(difference, 2)\n\n```\n\nThis Python program calculates the difference between Free Cash Flow to Firm (FCFF) and Free Cash Flow to Equity (FCFE) based on the financial statements provided.\n\nThe program first defines the necessary variables from the given financial data. Then it calculates FCFF and FCFE using the standard formulas:\n\nFCFF = Net Income + Depreciation + Interest Expense * (1 - Tax Rate) - Change in Working Capital - Capital Expenditures\n\nFCFE = Net Income + Depreciation - Change in Working Capital - Capital Expenditures + Net Borrowing\n\nFinally, it computes the difference between FCFF and FCFE and returns this value rounded to two decimal places.\n\nThe difference between FCFF and FCFE represents the cash flow available to all providers of capital (FCFF) versus the cash flow available only to equity holders (FCFE). This difference is primarily due to the treatment of interest and changes in debt."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-770",
        "python_solution": "",
        "ground_truth": null,
        "question": "Did Sesame Corp, which complies with IFRS, charge which amount to inventory expense (€ millions) after it acquired inventory worth €100 million and allocated €5 million for storage before selling the items?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    inventory_cost = 100  # €100 million inventory cost\n    storage_cost = 5  # €5 million storage cost\n    \n    # Do math calculation to get the answer\n    inventory_expense = inventory_cost  # Under IFRS, storage costs are not included in inventory cost\n    \n    # return answer\n    return inventory_expense\n```\n\nThis Python function provides the solution to the question about Sesame Corp's inventory expense under IFRS (International Financial Reporting Standards).\n\nKey points:\n1. Under IFRS, storage costs are not included in the cost of inventory. They are expensed as incurred.\n2. The inventory expense is equal to the cost of the inventory when it's sold.\n3. The €5 million storage cost would be expensed separately and not included in the inventory cost.\n\nTherefore, the amount charged to inventory expense when the items are sold would be €100 million, which is the original cost of the inventory. The storage cost of €5 million would be expensed separately."
        ]
    },
    {
        "tables": [
            "|                       | 2015 | 2016  | 2017 | 2018(E) |\n|-----------------------|------|-------|------|---------|\n| Earnings per share    | 5.56 | 6.23  | 4.72 | 6.5     |\n| Return on equity (ROE)| 11%  | 12.32%| 9.25%| 12.5%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-771",
        "python_solution": "",
        "ground_truth": null,
        "question": "As a junior analyst at a modest investment firm, Jacob was tasked with assessing the value of a food service company known as SpeedyEats, based out of Shanghai. The company's stock price on the 20th of January 2018 stood at $35. Jacob collected data and made projections on the company as illustrated below. Based on the provided data, what is the trailing P/E of the company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_stock_price = 35\n    eps_2017 = 4.72  # Earnings per share for 2017 (most recent completed year)\n    \n    # Do math calculation to get the answer\n    trailing_pe = current_stock_price / eps_2017\n    \n    # return answer\n    return trailing_pe\n```\n\nThis Python function calculates the trailing P/E (Price-to-Earnings) ratio for SpeedyEats based on the given information. Here's how it works:\n\n1. We define the current stock price as $35, which is given in the question for January 20, 2018.\n\n2. We use the Earnings per Share (EPS) value for 2017, which is 4.72. This is the most recent completed year's data, hence it's used for the trailing P/E calculation.\n\n3. The trailing P/E is calculated by dividing the current stock price by the most recent year's EPS.\n\n4. The function returns this calculated value.\n\nWhen you run this function, it will return the trailing P/E ratio for SpeedyEats, which answers the question posed to Jacob in his analysis task."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-772",
        "python_solution": "",
        "ground_truth": null,
        "question": "Think about a call option that is trading at $4 where the strike price is $50. What would be the final value and the earnings for the vendor if the price of the underlying asset at expiration is $49?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    strike_price = 50\n    underlying_price_at_expiration = 49\n\n    # Do math calculation to get the answer\n    final_value = max(0, underlying_price_at_expiration - strike_price)\n    vendor_earnings = option_price - final_value\n\n    # return answer\n    return {\n        \"final_value\": final_value,\n        \"vendor_earnings\": vendor_earnings\n    }\n```\n\nThis Python program calculates the final value of the call option and the earnings for the vendor based on the given information:\n\n1. The call option is trading at $4\n2. The strike price is $50\n3. The price of the underlying asset at expiration is $49\n\nThe program first defines these values as variables. Then it calculates:\n\n1. The final value of the option, which is the maximum of either 0 or the difference between the underlying price at expiration and the strike price. In this case, since the underlying price ($49) is less than the strike price ($50), the final value is $0.\n\n2. The vendor's earnings, which is the difference between the initial option price ($4) and the final value ($0). In this case, the vendor keeps the entire $4 premium.\n\nThe function returns a dictionary with both the final value and the vendor's earnings. When you run this function, it will return:\n\n```python\n{\n    \"final_value\": 0,\n    \"vendor_earnings\": 4\n}\n```\n\nThis means that at expiration, the option is worthless (final value is $0), and the vendor earns $4 (the entire premium paid for the option)."
        ]
    },
    {
        "tables": [
            "| Current share price | 20 |\n|---------------------|----|\n| Book value per share | 15 |\n| Total shares outstanding | 25 millions |\n| Market value of debt | 60 millions |\n| Accounting book value of total capital | 400 millions |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-773",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the market value added of the theoretical company, according to the data in the table below?",
        "output": [
            "Here's the Python program to calculate the market value added based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    share_price = 20\n    total_shares = 25_000_000\n    market_value_debt = 60_000_000\n    book_value_total_capital = 400_000_000\n    \n    # Do math calculation to get the answer\n    market_value_equity = share_price * total_shares\n    market_value_total_capital = market_value_equity + market_value_debt\n    market_value_added = market_value_total_capital - book_value_total_capital\n    \n    # return answer\n    return market_value_added\n\n```\n\nThis program calculates the market value added as follows:\n\n1. It defines the variables based on the given information.\n2. It calculates the market value of equity by multiplying the current share price by the total number of shares outstanding.\n3. It calculates the market value of total capital by adding the market value of equity and the market value of debt.\n4. Finally, it calculates the market value added by subtracting the accounting book value of total capital from the market value of total capital.\n\nThe function will return the market value added in dollars."
        ]
    },
    {
        "tables": [
            "|                               |     | 2018 |     | 2017 |\n|-------------------------------|-----|------|-----|------|\n| Assets                           |     |      |     |      |\n| Current assets                   |     |      |     |      |\n| Accounts receivable              |     | 800  |     | 750  |\n| Inventories                      |     | 850  |     | 720  |\n| Gross fixed assets               |     | 5000 |     | 4250 |\n| Accounts payable                 |     | $ 400  |     | $300 |\n| Accrued taxes and expenses       |     | 120  |     | 90   |\n| Notes payable                    |     | 550  |     | 500  |\n| Long-term debt                   |     | 1,500 |     | 1,400 |\n| Income Statement for the Year Ended 31 December 2018 |     |      |     |      |\n| EBITDA                           |     |      |     | 2000 |\n| Depreciation expense             |     |      |     | 400  |\n| EBIT                             |     |      |     | 1600 |\n| Interest expense                 |     |      |     | 350  |\n| Pretax income                    |     |      |     | 1250 |\n| Income tax (at 30 percent)       |     |      |     | 375  |\n| Net income                       |     |      |     | $ 875  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-774",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the evaluation of PZ Inc.'s 2018 FCFF (in millions) according to the 2017 and 2018 financial statements provided by the company, as assessed by Jacques?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 875\n    depreciation_2018 = 400\n    interest_expense_2018 = 350\n    tax_rate = 0.30\n    \n    accounts_receivable_2018 = 800\n    accounts_receivable_2017 = 750\n    inventories_2018 = 850\n    inventories_2017 = 720\n    accounts_payable_2018 = 400\n    accounts_payable_2017 = 300\n    \n    gross_fixed_assets_2018 = 5000\n    gross_fixed_assets_2017 = 4250\n    \n    # Do math calculation to get the answer\n    \n    # Calculate EBIT * (1 - Tax rate)\n    ebit_after_tax = (net_income_2018 + interest_expense_2018) * (1 - tax_rate)\n    \n    # Add back depreciation\n    ebit_after_tax_plus_depreciation = ebit_after_tax + depreciation_2018\n    \n    # Calculate changes in working capital\n    change_in_receivables = accounts_receivable_2018 - accounts_receivable_2017\n    change_in_inventories = inventories_2018 - inventories_2017\n    change_in_payables = accounts_payable_2018 - accounts_payable_2017\n    \n    change_in_working_capital = (change_in_receivables + change_in_inventories - change_in_payables)\n    \n    # Calculate capital expenditures\n    capex = gross_fixed_assets_2018 - gross_fixed_assets_2017\n    \n    # Calculate FCFF\n    fcff = ebit_after_tax_plus_depreciation - change_in_working_capital - capex\n    \n    # return answer\n    return fcff\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-775",
        "python_solution": "",
        "ground_truth": null,
        "question": "Gemini is planning to buy a two-year Treasury note futures contract. The base 1.2%, semi-annual two-year Treasury note is listed at a clean price of 103. It's been 60 days since the last coupon payment. Gemini is aiming to determine the total spot price of the base two-year Treasury note:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming a face value of $100 for the Treasury note\n    coupon_rate = 0.012  # 1.2% annual coupon rate\n    clean_price = 103\n    days_since_last_coupon = 60\n    days_in_year = 365\n    payments_per_year = 2  # semi-annual payments\n\n    # Do math calculation to get the answer\n    \n    # Calculate accrued interest\n    days_in_period = days_in_year / payments_per_year\n    fraction_of_period = days_since_last_coupon / days_in_period\n    coupon_payment = face_value * coupon_rate / payments_per_year\n    accrued_interest = coupon_payment * fraction_of_period\n\n    # Calculate total spot price (dirty price)\n    total_spot_price = clean_price + accrued_interest\n\n    # return answer\n    return round(total_spot_price, 4)\n```\n\nThis Python program calculates the total spot price (dirty price) of the two-year Treasury note futures contract. Here's a breakdown of the calculation:\n\n1. We define the necessary variables, including the face value (assumed to be $100), coupon rate, clean price, days since last coupon payment, and other relevant information.\n\n2. We calculate the accrued interest:\n   - Determine the number of days in each coupon period (365 / 2 for semi-annual payments)\n   - Calculate the fraction of the period that has passed since the last coupon payment\n   - Compute the coupon payment amount\n   - Calculate the accrued interest by multiplying the coupon payment by the fraction of the period\n\n3. We calculate the total spot price by adding the clean price and the accrued interest.\n\n4. The function returns the total spot price rounded to 4 decimal places.\n\nThis program will give you the total spot price (dirty price) of the base two-year Treasury note, which is what Gemini is aiming to determine."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-776",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the Equivalent YTM if the buying price of a 30-day Treasury Bill is 99.5?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value of 100\n    buying_price = 99.5\n    days_to_maturity = 30\n    days_in_year = 365\n\n    # Do math calculation to get the answer\n    discount = face_value - buying_price\n    ytm = (discount / buying_price) * (days_in_year / days_to_maturity) * 100\n\n    # return answer\n    return round(ytm, 2)\n```\n\nThis Python function calculates the Equivalent Yield to Maturity (YTM) for a 30-day Treasury Bill with a buying price of 99.5.\n\nHere's how the calculation works:\n\n1. We assume a face value of 100 for the Treasury Bill.\n2. We use the given buying price of 99.5.\n3. The maturity period is 30 days.\n4. We use 365 days for a year.\n\nThe formula for YTM is:\nYTM = (Face Value - Buying Price) / Buying Price * (365 / Days to Maturity) * 100\n\nThe function calculates this and returns the result rounded to two decimal places.\n\nWhen you run this function, it will return the Equivalent YTM as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-777",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the interest rates are 10% and they surge by 25 basis points, how much will the bond portfolio value diminish by, given that these are the current specifications: Portfolio X has 8 bonds under a long position, a price of $90,000, and a modified duration of 2.5, Portfolio Y is worth $110,000 and holds a short position in 6 bonds with a modified duration of 3, and Portfolio Z's details are a $120,000 price, a modified duration of 3.3, and a long position in 12 bonds?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    interest_rate_increase = 0.0025  # 25 basis points = 0.25%\n    \n    # Portfolio X\n    x_price = 90000\n    x_modified_duration = 2.5\n    \n    # Portfolio Y\n    y_price = 110000\n    y_modified_duration = 3\n    y_position = -1  # Short position\n    \n    # Portfolio Z\n    z_price = 120000\n    z_modified_duration = 3.3\n    \n    # Do math calculation to get the answer\n    x_change = x_price * x_modified_duration * interest_rate_increase\n    y_change = y_price * y_modified_duration * interest_rate_increase * y_position\n    z_change = z_price * z_modified_duration * interest_rate_increase\n    \n    total_change = x_change + y_change + z_change\n    \n    # return answer\n    return abs(total_change)\n```\n\nThis Python program calculates the total change in value of the bond portfolio given the interest rate increase and the specifications of each portfolio. Here's a breakdown of the calculation:\n\n1. We define the interest rate increase as 0.0025 (25 basis points = 0.25%).\n2. For each portfolio, we calculate the change in value using the formula: \n   Change = Price * Modified Duration * Interest Rate Change\n3. For Portfolio Y, we multiply by -1 to account for the short position.\n4. We sum up the changes from all three portfolios.\n5. We return the absolute value of the total change, as the question asks for how much the portfolio value will diminish.\n\nThe function will return the total decrease in the bond portfolio value due to the interest rate surge."
        ]
    },
    {
        "tables": [
            "|                          |      |\n|--------------------------|------|\n| weight of asset A        | 30%  |\n| weight of asset B        | 70%  |\n| standard deviation of asset A | 10%  |\n| standard deviation of asset B  | 15%  |\n| correlation coefficient  | -0.7 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-778",
        "python_solution": "",
        "ground_truth": null,
        "question": "Compute the standard deviation of the portfolio as per the data presented in the below table:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w_A = 0.30  # weight of asset A\n    w_B = 0.70  # weight of asset B\n    sd_A = 0.10  # standard deviation of asset A\n    sd_B = 0.15  # standard deviation of asset B\n    corr = -0.7  # correlation coefficient\n\n    # Do math calculation to get the answer\n    var_A = sd_A ** 2\n    var_B = sd_B ** 2\n    cov_AB = corr * sd_A * sd_B\n\n    portfolio_variance = (w_A ** 2 * var_A) + (w_B ** 2 * var_B) + (2 * w_A * w_B * cov_AB)\n    portfolio_sd = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_sd\n```\n\nThis Python program calculates the standard deviation of the portfolio using the following steps:\n\n1. We define the variables given in the table.\n2. We calculate the variance of each asset (square of standard deviation).\n3. We calculate the covariance between assets A and B using the correlation coefficient.\n4. We use the portfolio variance formula: σ²p = w_A² * σ²A + w_B² * σ²B + 2 * w_A * w_B * cov_AB\n5. We take the square root of the portfolio variance to get the portfolio standard deviation.\n6. Finally, we return the portfolio standard deviation as the answer.\n\nThis program will return the standard deviation of the portfolio based on the given data."
        ]
    },
    {
        "tables": [
            "|       Factor      | Market |  Size  | Value | Momentum |\n|:-----------------:|:------:|:------:|:-----:|:--------:|\n|    Coefficient    |  1.080 |  0.098 | -0.401|  0.034   |\n| Variance of the market factor return and covariances with the market factor return | 0.00109 | 0.00053 | 0.00022 | -0.00025 |\n| Portfolio's monthly standard deviation of returns | | | | 3.74% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-779",
        "python_solution": "",
        "ground_truth": null,
        "question": "Referring to Exhibit 1, what percentage of the total portfolio risk is accounted for by the market factor in the current portfolio of Fund 1?",
        "output": [
            "def solution():\n    # Define variables name and value\n    market_coefficient = 1.080\n    market_variance = 0.00109\n    portfolio_variance = (0.0374 ** 2)  # Square of monthly standard deviation\n\n    # Do math calculation to get the answer\n    market_contribution = (market_coefficient ** 2) * market_variance\n    market_risk_percentage = (market_contribution / portfolio_variance) * 100\n\n    # return answer\n    return round(market_risk_percentage, 2)\n\n```\n\nThis Python program calculates the percentage of total portfolio risk accounted for by the market factor in the current portfolio of Fund 1. Here's a breakdown of the calculation:\n\n1. We define the market factor coefficient, market factor variance, and portfolio variance (calculated from the given monthly standard deviation).\n\n2. We calculate the market factor's contribution to portfolio risk by squaring the market coefficient and multiplying it by the market variance.\n\n3. We then divide this contribution by the total portfolio variance and multiply by 100 to get the percentage.\n\n4. The result is rounded to two decimal places for clarity.\n\nThe program will return the percentage of total portfolio risk accounted for by the market factor."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-780",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a luxury vehicle, bought for £200,000, is financed for a duration of five years with an annual interest rate of 6% compounded monthly with the initial payment due in a month, how much is the monthly payment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 200000  # Initial loan amount in pounds\n    annual_rate = 0.06  # 6% annual interest rate\n    years = 5  # Loan duration in years\n    compounds_per_year = 12  # Compounded monthly\n\n    # Do math calculation to get the answer\n    rate_per_period = annual_rate / compounds_per_year\n    total_periods = years * compounds_per_year\n    \n    # Use the formula for monthly payments with compound interest\n    monthly_payment = (principal * rate_per_period * (1 + rate_per_period) ** total_periods) / ((1 + rate_per_period) ** total_periods - 1)\n\n    # Round to 2 decimal places for currency\n    monthly_payment = round(monthly_payment, 2)\n\n    # return answer\n    return monthly_payment\n```\n\nThis Python program calculates the monthly payment for the luxury vehicle financing scenario you described. Here's a breakdown of what the code does:\n\n1. We define the variables:\n   - `principal`: The initial loan amount (£200,000)\n   - `annual_rate`: The annual interest rate (6% or 0.06)\n   - `years`: The loan duration (5 years)\n   - `compounds_per_year`: The number of times interest is compounded per year (12 for monthly compounding)\n\n2. We calculate the interest rate per compounding period and the total number of periods.\n\n3. We use the formula for calculating monthly payments with compound interest:\n   Monthly Payment = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n   Where:\n   P = Principal\n   r = interest rate per period\n   n = total number of periods\n\n4. We round the result to two decimal places for currency representation.\n\n5. Finally, we return the calculated monthly payment.\n\nThis program will return the monthly payment amount in pounds for the given financing scenario."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-781",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bondholder has a bond with a 9% coupon rate that pays interest biannually and matures in three years and they are thinking about selling it. If the necessary return rate on the bond is 11%, what is the bond's cost per 100 of nominal value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.09\n    payments_per_year = 2\n    years_to_maturity = 3\n    required_return = 0.11\n\n    # Do math calculation to get the answer\n    coupon_payment = (face_value * coupon_rate) / payments_per_year\n    periods = years_to_maturity * payments_per_year\n    \n    # Calculate present value of coupon payments\n    pv_coupons = 0\n    for t in range(1, periods + 1):\n        pv_coupons += coupon_payment / ((1 + required_return / payments_per_year) ** t)\n    \n    # Calculate present value of face value\n    pv_face_value = face_value / ((1 + required_return / payments_per_year) ** periods)\n    \n    # Sum up to get bond price\n    bond_price = pv_coupons + pv_face_value\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the bond's price per 100 of nominal value given the conditions in the question. Here's a breakdown of the solution:\n\n1. We define the variables based on the given information.\n2. We calculate the coupon payment and the number of periods.\n3. We use a loop to calculate the present value of all coupon payments.\n4. We calculate the present value of the face value to be received at maturity.\n5. We sum up the present values to get the bond price.\n6. Finally, we round the result to two decimal places and return it.\n\nThe program will return the bond's price per 100 of nominal value, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "|           | Hedge Fund | Market Index |\n|-----------|------------|--------------|\n| Hedge Fund   | 256        | 110          |\n| Market Index | 110        | 81           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-782",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the association between the returns of the hedge fund and the market index as per the covariance matrix of returns constructed by a researcher?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    covariance_matrix = {\n        'Hedge Fund': {'Hedge Fund': 256, 'Market Index': 110},\n        'Market Index': {'Hedge Fund': 110, 'Market Index': 81}\n    }\n    \n    # Do math calculation to get the answer\n    covariance = covariance_matrix['Hedge Fund']['Market Index']\n    \n    # return answer\n    return covariance\n```\n\nThis Python program defines the covariance matrix as provided in the table and returns the covariance between the Hedge Fund and Market Index returns.\n\nThe covariance of 110 between the Hedge Fund and Market Index indicates a positive association between their returns. A positive covariance means that the returns of the hedge fund and the market index tend to move in the same direction, although the strength of this relationship would need to be evaluated in context of their variances to determine the correlation coefficient."
        ]
    },
    {
        "tables": [
            "|     |     |     |     |\n|-----|-----|-----|-----|\n|**Return in 2006-2017(%)**||||\n| 2006 | 1.48 | 2012 | -8.19|\n| 2007 | -1.59| 2013 | -4.11|\n| 2008 | 8.47 | 2014 | 0.33 |\n| 2009 | -1.55| 2015 | 5.84 |\n| 2010 | -2.69| 2016 | 2.04 |\n| 2011 | -1.89| 2017 | 3.72 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-783",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John invests in a fund and the annual returns range between 1.03% ≤ x <4.77%, what will be the cumulative relative frequency?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [1.48, -1.59, 8.47, -1.55, -2.69, -1.89, -8.19, -4.11, 0.33, 5.84, 2.04, 3.72]\n    lower_bound = 1.03\n    upper_bound = 4.77\n    total_count = len(returns)\n    \n    # Do math calculation to get the answer\n    count_in_range = sum(1 for return_value in returns if lower_bound <= return_value < upper_bound)\n    cumulative_relative_frequency = count_in_range / total_count\n    \n    # return answer\n    return cumulative_relative_frequency\n```\n\nThis Python program does the following:\n\n1. We define the list of returns from the given table.\n2. We set the lower and upper bounds of the range as specified in the question (1.03% ≤ x < 4.77%).\n3. We count the total number of returns.\n4. We use a list comprehension to count how many returns fall within the specified range.\n5. We calculate the cumulative relative frequency by dividing the count of returns in the range by the total number of returns.\n6. Finally, we return this cumulative relative frequency.\n\nThis program will return the fraction of returns that fall within the specified range, which is the cumulative relative frequency asked for in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-784",
        "python_solution": "",
        "ground_truth": null,
        "question": "Grand Rapids Titanium Corp (GRTC) sustains an 80 percent dividend payout ratio due to its restricted growth possibilities. The company's return on equity stands at 15 percent. The obligatory return rate on GRTC's equity is 12 percent, while its anticipated long-term growth rate is 3 percent. Can you determine the justified P/B using the projected fundamentals, in accordance with the residual income model and under the assumption of a constant growth rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_ratio = 0.80\n    return_on_equity = 0.15\n    required_return = 0.12\n    growth_rate = 0.03\n\n    # Do math calculation to get the answer\n    retention_ratio = 1 - dividend_payout_ratio\n    justified_pb = (return_on_equity - growth_rate) / (required_return - growth_rate)\n\n    # return answer\n    return justified_pb\n```\n\nThis Python program calculates the justified Price-to-Book (P/B) ratio using the residual income model with a constant growth rate. Here's a breakdown of the calculation:\n\n1. We define the given variables:\n   - Dividend payout ratio: 80% or 0.80\n   - Return on equity (ROE): 15% or 0.15\n   - Required return on equity: 12% or 0.12\n   - Long-term growth rate: 3% or 0.03\n\n2. We calculate the justified P/B ratio using the formula:\n   Justified P/B = (ROE - g) / (r - g)\n   Where:\n   - ROE is the return on equity\n   - g is the long-term growth rate\n   - r is the required return on equity\n\n3. The program returns the calculated justified P/B ratio.\n\nThis solution assumes a constant growth rate and uses the residual income model to determine the justified P/B ratio based on the given fundamentals."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-785",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the latest financial year, Farrow Inc. had average days of sales outstanding of 19 days. Farrow is aiming to enhance its credit policies and collection methodologies and reduce its collection phase in the forthcoming financial year to align with the market average of 15 days. The credit sales in the latest fiscal year were $300 million, and they are estimated to rise to $390 million in the next fiscal year. What should be the alteration in the average accounts receivable balance to accomplish Farrow's objective of decreasing the collection period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dso = 19\n    target_dso = 15\n    current_credit_sales = 300000000\n    future_credit_sales = 390000000\n\n    # Do math calculation to get the answer\n    current_avg_receivables = (current_dso / 365) * current_credit_sales\n    future_avg_receivables = (target_dso / 365) * future_credit_sales\n    change_in_receivables = future_avg_receivables - current_avg_receivables\n\n    # return answer\n    return change_in_receivables\n```\n\nThis Python program calculates the required change in average accounts receivable balance to achieve Farrow Inc.'s objective of reducing the collection period from 19 days to 15 days. Here's how it works:\n\n1. We define the given variables:\n   - Current days sales outstanding (DSO): 19 days\n   - Target DSO: 15 days\n   - Current credit sales: $300 million\n   - Future credit sales: $390 million\n\n2. We calculate the current average receivables using the formula:\n   Current Avg Receivables = (Current DSO / 365) * Current Credit Sales\n\n3. We calculate the future average receivables using the formula:\n   Future Avg Receivables = (Target DSO / 365) * Future Credit Sales\n\n4. We then calculate the change in receivables by subtracting the current average receivables from the future average receivables.\n\n5. Finally, we return this change in receivables as the answer.\n\nThe returned value represents the alteration (increase or decrease) in the average accounts receivable balance needed to achieve Farrow's objective."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-786",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a set of mortgages, 50% are deemed as subprime. The principal balance of 50% of these subprime mortgages and 25% of the non-subprime mortgages are higher than the value of the property used as collateral. If you randomly pick a mortgage from this set for inspection and its principal balance is more than the value of the collateral, what is the likelihood that it is a subprime mortgage?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_mortgages = 100  # Assume 100 for easy percentage calculations\n    subprime_mortgages = 0.50 * total_mortgages\n    non_subprime_mortgages = total_mortgages - subprime_mortgages\n    \n    subprime_underwater = 0.50 * subprime_mortgages\n    non_subprime_underwater = 0.25 * non_subprime_mortgages\n    \n    # Do math calculation to get the answer\n    total_underwater = subprime_underwater + non_subprime_underwater\n    probability = subprime_underwater / total_underwater\n    \n    # return answer\n    return probability\n\n# Test the solution\nresult = solution()\nprint(f\"The likelihood that a randomly picked underwater mortgage is subprime: {result:.2%}\")\n```\n\nThis Python program calculates the probability that a randomly selected underwater mortgage (where the principal balance is higher than the property value) is a subprime mortgage. Here's a breakdown of the solution:\n\n1. We define variables based on the given information:\n   - 50% of mortgages are subprime\n   - 50% of subprime mortgages are underwater\n   - 25% of non-subprime mortgages are underwater\n\n2. We calculate the number of underwater mortgages for both subprime and non-subprime categories.\n\n3. We then calculate the total number of underwater mortgages.\n\n4. The probability is calculated by dividing the number of underwater subprime mortgages by the total number of underwater mortgages.\n\n5. Finally, we return this probability as the answer.\n\nThe program will output the result as a percentage. For example, running this program would give you an output like:\n\n\"The likelihood that a randomly picked underwater mortgage is subprime: 66.67%\"\n\nThis means that if you randomly pick a mortgage with a principal balance higher than the collateral value, there's about a 66.67% chance it's a subprime mortgage."
        ]
    },
    {
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.80%        |\n| 1y1y        | 1.12%        |\n| Z           | 3.94%        |\n| 3y1y        | 3.28%        |\n| 4y1y        | 3.14%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-787",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value per 100 of par value for a two-year, 3.5% coupon bond, where interest payments are disbursed once a year, considering all rates mentioned are annual rates with a periodicity of one (effective annual rates)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.035\n    par_value = 100\n    coupon_payment = par_value * coupon_rate\n    spot_rate_1y = 0.0080  # 0y1y rate\n    spot_rate_2y = ((1 + 0.0080) * (1 + 0.0112)) ** 0.5 - 1  # Geometric mean of 0y1y and 1y1y rates\n\n    # Do math calculation to get the answer\n    present_value_coupon1 = coupon_payment / (1 + spot_rate_1y)\n    present_value_coupon2 = coupon_payment / (1 + spot_rate_2y) ** 2\n    present_value_principal = par_value / (1 + spot_rate_2y) ** 2\n    \n    bond_value = present_value_coupon1 + present_value_coupon2 + present_value_principal\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of a two-year, 3.5% coupon bond per 100 of par value, with annual interest payments. Here's a breakdown of the calculation:\n\n1. We define the coupon rate, par value, and calculate the annual coupon payment.\n2. We use the given 0y1y rate (0.80%) as the spot rate for the first year.\n3. For the second year, we calculate the spot rate using the geometric mean of the 0y1y and 1y1y rates, as these are the relevant rates for a two-year period.\n4. We then calculate the present value of each cash flow:\n   - The first coupon payment discounted by one year\n   - The second coupon payment discounted by two years\n   - The par value (principal) discounted by two years\n5. The bond value is the sum of these present values.\n6. The result is rounded to two decimal places, as is common for financial calculations.\n\nThis approach uses the spot rate method, which is appropriate when we have different discount rates for"
        ]
    },
    {
        "tables": [
            "|  X  | Y=5 | Y=2 | Y=-3 |\n| --- | --- | --- | ---- |\n| -2  | 0.2 | 0   | 0    |\n|  1  | 0   | 0.6 | 0    |\n|  4  | 0   | 0   | 0.2  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-788",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data chart, what is the standard deviation of X?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    x_values = [-2, 1, 4]\n    n = len(x_values)\n    \n    # Do math calculation to get the answer\n    mean = sum(x_values) / n\n    squared_diff_sum = sum((x - mean) ** 2 for x in x_values)\n    variance = squared_diff_sum / n\n    std_dev = variance ** 0.5\n    \n    # return answer\n    return std_dev\n```\n\nThis Python program calculates the standard deviation of X based on the provided data chart. Here's a breakdown of the solution:\n\n1. We define the X values from the chart: -2, 1, and 4.\n2. We calculate the mean of these values.\n3. We sum the squared differences between each value and the mean.\n4. We calculate the variance by dividing the sum of squared differences by the number of values.\n5. Finally, we calculate the standard deviation by taking the square root of the variance.\n\nThe program will return the standard deviation of X when executed."
        ]
    },
    {
        "tables": [
            "| Profit | Cumulative  Distribution  Function |\n|--------|-----------------------------------|\n| $0     | 0.2                               |\n| $1     | 0.4                               |\n| $2     | 0.6                               |\n| $3     | 0.8                               |\n| $4     | 1.0                               |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-789",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the chance of a profit between $1 and $4, as depicted by the following table displaying the discrete uniform probability distribution of gross profits from buying an option?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    cdf_1 = 0.4  # Cumulative Distribution Function at $1\n    cdf_4 = 1.0  # Cumulative Distribution Function at $4\n\n    # Do math calculation to get the answer\n    probability = cdf_4 - cdf_1\n\n    # return answer\n    return probability\n```\n\nThis program calculates the probability of a profit between $1 and $4 based on the given cumulative distribution function (CDF) table. The probability is determined by subtracting the CDF value at $1 from the CDF value at $4, which gives us the probability of the profit falling within that range."
        ]
    },
    {
        "tables": [
            "| ($ millions)          | 2017 | 2018 |\n|-----------------------|------|------|\n| Revenue               | 42   | 37   |\n| Cost of goods sold    | 18   | 16   |\n| Inventory             | 36   | 40   |\n| Accounts receivable   | 22   | 19   |\n| Accounts payable      | 14   | 12   |"
        ],
        "topic": "Accounting",
        "question_id": "test-790",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the year 2018, a firm that utilized US GAAP did cash disbursements of $6 million for employee wages, $2 million for interest liabilities, and $4 million for income tax obligations. Based solely on the data provided in the chart, what is the firm's cash flow from operations for 2018?",
        "output": [
            "Here's a Python program to calculate the cash flow from operations for 2018 based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue_2018 = 37\n    cogs_2018 = 16\n    inventory_2017 = 36\n    inventory_2018 = 40\n    accounts_receivable_2017 = 22\n    accounts_receivable_2018 = 19\n    accounts_payable_2017 = 14\n    accounts_payable_2018 = 12\n    wages = 6\n    interest = 2\n    income_tax = 4\n\n    # Do math calculation to get the answer\n    net_income = revenue_2018 - cogs_2018 - wages - interest - income_tax\n    \n    inventory_change = inventory_2018 - inventory_2017\n    accounts_receivable_change = accounts_receivable_2018 - accounts_receivable_2017\n    accounts_payable_change = accounts_payable_2018 - accounts_payable_2017\n    \n    cash_flow_operations = net_income - inventory_change - accounts_receivable_change + accounts_payable_change\n\n    # return answer\n    return cash_flow_operations\n```\n\nThis program calculates the cash flow from operations for 2018 using the indirect method, which starts with net income and adjusts for changes in working capital accounts. Here's a breakdown of the calculation:\n\n1. Calculate net income: Revenue - COGS - Wages - Interest - Income Tax\n2. Adjust for changes in working capital:\n   - Subtract increase in inventory (or add decrease)\n   - Subtract increase in accounts receivable (or add decrease)\n   - Add increase in accounts payable (or subtract decrease)\n\nThe resulting value represents the cash flow from operations for 2018 based on the provided information."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-791",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given that the cost per unit for savings account services is 0.5%, the anticipated overhead costs assigned to these services is 1.2%, the targeted profit margin per unit sold is 0.3%, the variable cost rate is 1.2%, and the mean interest rate is 4.5%, what would be the savings rate as per the Cost Plus Profit Margin method of pricing Savings-related Services?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_per_unit = 0.005  # 0.5%\n    overhead_costs = 0.012  # 1.2%\n    target_profit_margin = 0.003  # 0.3%\n    variable_cost_rate = 0.012  # 1.2%\n    mean_interest_rate = 0.045  # 4.5%\n\n    # Do math calculation to get the answer\n    total_costs = cost_per_unit + overhead_costs + variable_cost_rate\n    savings_rate = total_costs + target_profit_margin + mean_interest_rate\n\n    # return answer\n    return savings_rate * 100  # Convert to percentage\n```\n\nThis Python program calculates the savings rate using the Cost Plus Profit Margin method of pricing for Savings-related Services. Here's a breakdown of the calculation:\n\n1. We define all the given variables as percentages (converted to decimals for calculation).\n2. We calculate the total costs by summing the cost per unit, overhead costs, and variable cost rate.\n3. The savings rate is then calculated by adding the total costs, target profit margin, and mean interest rate.\n4. Finally, we return the savings rate converted to a percentage (multiplied by 100).\n\nThe returned value will be the savings rate as a percentage, which represents the rate that should be offered to customers for savings accounts based on the given costs, profit margin, and mean interest rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-792",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a client wishes to purchase a ball from a store that has 200 balls, three of which are of the same size, what is the likelihood that one of the three balls will be chosen?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_balls = 200\n    desired_balls = 3\n\n    # Do math calculation to get the answer\n    probability = desired_balls / total_balls\n\n    # return answer\n    return probability\n```\n\nThis program calculates the probability of choosing one of the three specific balls out of a total of 200 balls. The probability is simply the number of desired outcomes (3 balls) divided by the total number of possible outcomes (200 balls). The result will be a decimal representing the probability, which can be interpreted as a percentage if multiplied by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-793",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine the present 1-year rate for zero-coupon bonds stays at 6%, and the coming 1-year will fall by 2%. What would be the 2-year spot rate?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_1year_rate = 0.06  # 6%\n    next_1year_rate = 0.06 - 0.02  # 6% - 2% = 4%\n    \n    # Do math calculation to get the answer\n    two_year_spot_rate = ((1 + current_1year_rate) * (1 + next_1year_rate))**(1/2) - 1\n    \n    # Convert to percentage and round to 4 decimal places\n    answer = round(two_year_spot_rate * 100, 4)\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the 2-year spot rate based on the given information:\n\n1. The current 1-year rate is 6% (0.06).\n2. The 1-year rate for the coming year will fall by 2%, so it will be 4% (0.04).\n\nThe calculation uses the formula for compound interest to determine the 2-year spot rate:\n\n(1 + r₂)² = (1 + r₁) * (1 + f₁)\n\nWhere:\nr₂ = 2-year spot rate\nr₁ = current 1-year rate\nf₁ = forward 1-year rate for the second year\n\nWe solve for r₂ and convert it to a percentage, rounding to 4 decimal places for precision.\n\nThe program will return the 2-year spot rate as a percentage."
        ]
    },
    {
        "tables": [
            "| Current spot rate for the USD/EUR | 0.7500 |\n| --- | --- |\n| Forward rate for the EUR/AUD | 1.4300 |\n| EUR/AUD forward premium to the spot rate | 400 points |\n| USD: US dollar; EUR: Euro; AUD: Australian dollar | |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-794",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the same circumstances, what is the USD/AUD spot rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    usd_eur_spot = 0.7500\n    eur_aud_forward = 1.4300\n    eur_aud_premium = 0.0400  # 400 points = 0.0400\n\n    # Do math calculation to get the answer\n    eur_aud_spot = eur_aud_forward - eur_aud_premium\n    usd_aud_spot = usd_eur_spot * eur_aud_spot\n\n    # return answer\n    return round(usd_aud_spot, 4)\n```\n\nThis Python program calculates the USD/AUD spot rate based on the given information. Here's a breakdown of the calculation:\n\n1. We define the known variables:\n   - USD/EUR spot rate\n   - EUR/AUD forward rate\n   - EUR/AUD forward premium (converted from points to decimal)\n\n2. We calculate the EUR/AUD spot rate by subtracting the premium from the forward rate.\n\n3. We then calculate the USD/AUD spot rate by multiplying the USD/EUR spot rate with the EUR/AUD spot rate.\n\n4. Finally, we round the result to 4 decimal places (as is common in currency exchange rates) and return it.\n\nThis program will return the USD/AUD spot rate under the given circumstances."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-795",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond's current price is $101.45 and a financial advisor anticipates that the price will increase to $103.28 if interest rates drop by 0.25% or decrease to $100.81 if interest rates go up by 0.25%, what is the bond's effective duration?",
        "output": [
            "Here's the Python program to calculate the bond's effective duration based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_price = 101.45\n    price_up = 100.81\n    price_down = 103.28\n    rate_change = 0.0025  # 0.25% expressed as a decimal\n\n    # Do math calculation to get the answer\n    price_change_up = current_price - price_up\n    price_change_down = price_down - current_price\n    total_price_change = price_change_up + price_change_down\n    avg_price_change = total_price_change / 2\n    avg_price = (price_up + price_down) / 2\n\n    effective_duration = (avg_price_change / avg_price) / rate_change\n\n    # return answer\n    return effective_duration\n```\n\nThis program calculates the effective duration of the bond using the following steps:\n\n1. Define the variables for the current price, price if rates go up, price if rates go down, and the rate change.\n2. Calculate the price change for both scenarios (rates up and rates down).\n3. Calculate the total price change and the average price change.\n4. Calculate the average price.\n5. Apply the formula for effective duration: (Average Price Change / Average Price) / Rate Change\n\nThe program will return the effective duration of the bond, which measures the bond's sensitivity to interest rate changes."
        ]
    },
    {
        "tables": [
            "|                       |        |\n| --------------------- | ------ |\n| Net income $          | 100,000|\n| Increase in accounts receivable | 12,000 |\n| Increase in accounts payable | 9,000   |\n| Depreciation and amortization   | 8,000   |"
        ],
        "topic": "Accounting",
        "question_id": "test-796",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the operational cash flow, taking into account the chosen data from the business's activities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 100000\n    increase_accounts_receivable = 12000\n    increase_accounts_payable = 9000\n    depreciation_amortization = 8000\n    \n    # Do math calculation to get the answer\n    operational_cash_flow = net_income - increase_accounts_receivable + increase_accounts_payable + depreciation_amortization\n    \n    # return answer\n    return operational_cash_flow\n```\n\nThis Python program calculates the operational cash flow based on the provided data. Here's how it works:\n\n1. We define the variables with the given values from the table.\n2. To calculate the operational cash flow:\n   - We start with the net income\n   - Subtract the increase in accounts receivable (as it represents money not yet received)\n   - Add the increase in accounts payable (as it represents money not yet paid out)\n   - Add back depreciation and amortization (as they are non-cash expenses)\n3. The function returns the calculated operational cash flow.\n\nWhen you run this function, it will return 105,000, which is the operational cash flow taking into account the chosen data from the business's activities."
        ]
    },
    {
        "tables": [
            "|                           |         |\n|---------------------------|---------|\n| Forecasted Balance Sheet Data for LI at 31 December 2018    |         |\n| Cash                      | 120     |\n| Accounts receivable       | 30      |\n| Inventory                 | 450     |\n| Fixed assets              | 800     |\n| Total assets              | 1,400   |\n| Liabilities               | 320     |\n| Common stock              | 780     |\n| Retained earnings         | 300     |",
            "|                            | Exchange rates ($/€) |\n|----------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018           | 1.77                 |\n| 2018 average               | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "test-797",
        "python_solution": "",
        "ground_truth": null,
        "question": "The XY corporation is an American business that follows US GAAP. It also owns two European subsidiary companies: FS financial service and FC financial consultant. John, a CFA, has compiled a forecast of XY's 2018 financial statement. If XY chooses the current rate method to convert the data of FS into US dollars and the temporal method for converting the data of FC into US dollars, what will the total assets be on 31 December 2018 when XY translates FS's results into US dollars?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_euros = 1400\n    exchange_rate_current = 1.77\n\n    # Do math calculation to get the answer\n    total_assets_usd = total_assets_euros * exchange_rate_current\n\n    # return answer\n    return total_assets_usd\n```\n\nThis Python program calculates the total assets in US dollars for XY corporation when translating FS's results using the current rate method. Here's the explanation:\n\n1. We define the total assets in euros (1400) and the current exchange rate on December 31, 2018 (1.77 $/€).\n\n2. Using the current rate method, all assets and liabilities are converted at the current exchange rate. So, we multiply the total assets in euros by the current exchange rate.\n\n3. The function returns the calculated total assets in US dollars.\n\nThis solution assumes that the given balance sheet data is for FS (the subsidiary using the current rate method) and is in euros. The current rate method converts all assets and liabilities using the exchange rate at the balance sheet date, which is 1.77 $/€ on December 31, 2018."
        ]
    },
    {
        "tables": [
            "|                         | Delite Beverage |\n|------------------------ |-----------------|\n| 2010 Earnings per share (EPS) | $3.44         |\n| 2011 estimated EPS      | $3.50          |\n| Book value per share end of year | $62.05    |\n| Current share price     | $65.50         |\n| Sales (billions)        | $32.13         |\n| Free cash flow per share| $2.68          |\n| Shares outstanding end of year | 2,322,034,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-798",
        "python_solution": "",
        "ground_truth": null,
        "question": "Basing on the information provided in Exhibit 1, what would be the most suitable price-to-earnings ratio to apply in the assessment of value for the soft drink manufacturing and distribution company, Delite Beverage, especially considering their recent acquisition of a large water bottling firm?",
        "output": [
            "def solution():\n    # Define variables name and value\n    current_share_price = 65.50\n    estimated_eps_2011 = 3.50\n    \n    # Do math calculation to get the answer\n    forward_pe_ratio = current_share_price / estimated_eps_2011\n    \n    # return answer\n    return round(forward_pe_ratio, 2)\n\n```\n\nThe Python program above calculates the forward Price-to-Earnings (P/E) ratio for Delite Beverage, which is a suitable metric for assessing the company's value, especially considering their recent acquisition.\n\nHere's the reasoning:\n\n1. We use the forward P/E ratio (based on estimated future earnings) rather than the trailing P/E ratio because it takes into account the company's growth prospects, which is particularly relevant given the recent acquisition.\n\n2. The forward P/E ratio is calculated by dividing the current share price by the estimated EPS for the next year (2011 in this case).\n\n3. This metric is appropriate because:\n   - It factors in the company's expected future performance.\n   - It allows for comparison with industry peers.\n   - It can reflect the market's expectations about the company's growth potential, which is important given the recent acquisition.\n\n4. The result is rounded to two decimal places for practical use.\n\nThis forward P/E ratio can be compared to industry averages and competitors to determine if Delite Beverage is overvalued or undervalued. It's worth noting that the recent acquisition of a large water bottling firm might justify a slightly higher P/E ratio if it's expected to significantly boost future growth and profitability."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-799",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following data is provided for the returns on shares X and shares Y: the return variance for shares X is 100; the return variance for shares Y is 225, and the covariance between the returns on shares X and Y is 53.2. At the conclusion of 1999, you have USD 4 million in shares X. It's under consideration to move USD 1 million to shares Y while preserving USD 3 million in shares X. What is the risk reduction percentage, denoted by return standard deviation, that can be achieved with this strategy?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    var_x = 100\n    var_y = 225\n    cov_xy = 53.2\n    initial_investment_x = 4000000\n    new_investment_x = 3000000\n    new_investment_y = 1000000\n    \n    # Do math calculation to get the answer\n    \n    # Calculate initial portfolio variance\n    initial_variance = var_x\n    initial_std_dev = (initial_variance) ** 0.5\n    \n    # Calculate new portfolio variance\n    weight_x = new_investment_x / (new_investment_x + new_investment_y)\n    weight_y = new_investment_y / (new_investment_x + new_investment_y)\n    \n    new_variance = (weight_x ** 2 * var_x) + (weight_y ** 2 * var_y) + (2 * weight_x * weight_y * cov_xy)\n    new_std_dev = (new_variance) ** 0.5\n    \n    # Calculate risk reduction percentage\n    risk_reduction = (initial_std_dev - new_std_dev) / initial_std_dev * 100\n    \n    # return answer\n    return risk_reduction\n```"
        ]
    },
    {
        "tables": [
            "| X     | 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    |\n|-------|------|------|------|------|------|------|------|------|\n| P(X)  | 0.14 | 0.09 | 0.19 | 0.25 | 0.17 | 0.06 | 0.03 | 0.07 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-800",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided table, what is the value of F(4)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = [0.14, 0.09, 0.19, 0.25, 0.17, 0.06, 0.03, 0.07]\n    \n    # Do math calculation to get the answer\n    F_4 = sum(probabilities[:5])  # Sum of probabilities up to and including X=4\n    \n    # return answer\n    return F_4\n```\n\nThis Python program calculates F(4) based on the cumulative distribution function (CDF) for the given probability distribution.\n\nThe function does the following:\n\n1. We define a list `probabilities` that contains all the probability values from the table.\n\n2. To calculate F(4), we need to sum all the probabilities for X values from 0 to 4 (inclusive). In Python, we can do this by slicing the list up to index 5 (which includes elements 0 to 4) and summing these values.\n\n3. The calculated sum is then returned as the answer.\n\nWhen you run this function, it will return the value of F(4), which is the probability that X is less than or equal to 4 according to the given distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-801",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond was purchased by Robert with a remaining maturity of two years. The face value of the bond is 1000. The annual interest rate is 4% and the interest is paid once a year. The current market discount rate is 4.5%. What is the cost of the bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    years_to_maturity = 2\n    annual_interest_rate = 0.04\n    market_discount_rate = 0.045\n    \n    # Do math calculation to get the answer\n    annual_interest_payment = face_value * annual_interest_rate\n    \n    # Calculate present value of interest payments\n    pv_interest = annual_interest_payment * (1 - (1 + market_discount_rate) ** -years_to_maturity) / market_discount_rate\n    \n    # Calculate present value of face value\n    pv_face_value = face_value / (1 + market_discount_rate) ** years_to_maturity\n    \n    # Total bond value is sum of present values\n    bond_cost = pv_interest + pv_face_value\n    \n    # return answer\n    return round(bond_cost, 2)\n```\n\nThis Python program calculates the cost of the bond based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the annual interest payment.\n3. We calculate the present value of the interest payments using the formula for the present value of an annuity.\n4. We calculate the present value of the face value to be received at maturity.\n5. We sum these two present values to get the total bond cost.\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the cost of the bond that Robert should pay given the current market conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-802",
        "python_solution": "",
        "ground_truth": null,
        "question": "In order to make use of the cash position of assets under management, an investment strategist decides to engage in a long futures position on the S&P 500 index with a multiplier of 250. The cash position stands at $15 million and given the existing futures value of 1,000, requires the strategist to hold 60 contracts long. Given that the present initial margin is $12,500 per contract and the maintenance margin stands at $10,000 per contract, what amount of variation margin is required by the investment strategist if the value of the futures contract drops to 995 on the closing day of the position being initiated?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_position = 15000000\n    initial_futures_value = 1000\n    num_contracts = 60\n    initial_margin_per_contract = 12500\n    maintenance_margin_per_contract = 10000\n    new_futures_value = 995\n    multiplier = 250\n\n    # Do math calculation to get the answer\n    initial_position_value = num_contracts * initial_futures_value * multiplier\n    new_position_value = num_contracts * new_futures_value * multiplier\n    loss = initial_position_value - new_position_value\n    \n    total_initial_margin = num_contracts * initial_margin_per_contract\n    total_maintenance_margin = num_contracts * maintenance_margin_per_contract\n    \n    equity = total_initial_margin - loss\n    \n    if equity < total_maintenance_margin:\n        variation_margin = total_initial_margin - equity\n    else:\n        variation_margin = 0\n\n    # return answer\n    return variation_margin\n```"
        ]
    },
    {
        "tables": [
            "| Return, R     | Frequency |\n| ------------- |:---------:|\n| -5% up to 0%  | 1         |\n| 0% up to 5%   | 6         |\n| 5% up to 10%  | 4         |\n| 10% up to 15% | 3         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-803",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided frequency distribution table, can you compute the sample size?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    freq_1 = 1  # Frequency for -5% up to 0%\n    freq_2 = 6  # Frequency for 0% up to 5%\n    freq_3 = 4  # Frequency for 5% up to 10%\n    freq_4 = 3  # Frequency for 10% up to 15%\n\n    # Do math calculation to get the answer\n    sample_size = freq_1 + freq_2 + freq_3 + freq_4\n\n    # return answer\n    return sample_size\n```\n\nThis Python program calculates the sample size based on the frequency distribution table provided. The sample size is the sum of all frequencies across all return ranges. Each frequency is assigned to a variable, and then these frequencies are added together to get the total sample size."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-804",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we aim to incorporate seasons such as spring, summer, autumn, and winter as independent variables, how many dummy variables are required to construct a regression model?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_seasons = 4\n    \n    # Do math calculation to get the answer\n    dummy_variables_needed = total_seasons - 1\n    \n    # return answer\n    return dummy_variables_needed\n```\n\nThis Python program answers the question about how many dummy variables are required to construct a regression model incorporating seasons as independent variables.\n\nExplanation:\n1. We define the total number of seasons as 4 (spring, summer, autumn, and winter).\n2. In regression modeling, when dealing with categorical variables (like seasons), we use one less dummy variable than the number of categories to avoid perfect multicollinearity (also known as the dummy variable trap).\n3. Therefore, the number of dummy variables needed is total_seasons - 1, which is 3 in this case.\n\nThe program will return 3, which is the correct number of dummy variables needed. One season (usually the last one) will be the reference category and doesn't need its own dummy variable."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-805",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is interested in purchasing a 2-year bond with an annual coupon rate of 5%. The spot rates are listed as 4% for one year and 4.5% for two years. What is the cost of the bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000 for the bond\n    coupon_rate = 0.05\n    spot_rate_1yr = 0.04\n    spot_rate_2yr = 0.045\n    \n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    # Present value of first year's coupon payment\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1yr)\n    \n    # Present value of second year's coupon payment and face value\n    pv_coupon_2_and_face = (coupon_payment + face_value) / (1 + spot_rate_2yr)**2\n    \n    # Total present value (bond price)\n    bond_price = pv_coupon_1 + pv_coupon_2_and_face\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a 2-year bond with an annual coupon rate of 5%, given spot rates of 4% for one year and 4.5% for two years. Here's a breakdown of the calculation:\n\n1. We assume a face value of $1000 for the bond (this is a common convention).\n2. We calculate the annual coupon payment.\n3. We discount the first year's coupon payment using the 1-year spot rate.\n4. We discount the second year's coupon payment plus the face value using the 2-year spot rate.\n5. We sum these present values to get the bond price.\n6. We round the result to two decimal places for a typical price representation.\n\nThe function will return the calculated bond price, which represents the cost of the bond to John."
        ]
    },
    {
        "tables": [
            "| Days to maturity | RMB Spot Interest Rates | USD Spot Interest Rates |\n|-----------------|------------------------|------------------------|\n| 90              | 1%                     | 0.4%                   |\n| 180             | 1.5%                   | 0.6%                   |\n| 270             | 2.0%                   | 0.8%                   |\n| 360             | 2.5%                   | 1.0%                   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-806",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive initiates a one-year currency swap which involves receiving RMB fixed and paying USD fixed. She utilizes the following data to determine the annualized fixed swap rate for USD: The annualized fixed swap rate for USD is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rmb_rate = 0.025  # 1-year RMB spot rate\n    usd_rate = 0.01   # 1-year USD spot rate\n\n    # Do math calculation to get the answer\n    usd_swap_rate = ((1 + rmb_rate) / (1 + usd_rate) - 1) * 100\n\n    # return answer\n    return round(usd_swap_rate, 2)\n```\n\nThis Python program calculates the annualized fixed swap rate for USD in a one-year currency swap where the executive receives RMB fixed and pays USD fixed.\n\nHere's the explanation of the calculation:\n\n1. We use the 1-year spot rates for both RMB and USD from the provided table.\n2. The swap rate is calculated using the formula: ((1 + RMB rate) / (1 + USD rate) - 1) * 100\n3. This formula ensures that the present value of the fixed RMB payments equals the present value of the fixed USD payments.\n4. The result is rounded to two decimal places for a typical representation of interest rates.\n\nThe program will return the annualized fixed swap rate for USD as a percentage."
        ]
    },
    {
        "tables": [
            "| Asset Class     | Geometric Return (%) |\n|-----------------|----------------------|\n| Equities        | 8.0                  |\n| Corporate Bonds | 6.5                  |\n| Treasury bills  | 2.5                  |\n| Inflation       | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-807",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the risk premium for business bonds a researcher notes in the following historic geometric returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    treasury_bills_return = 2.5\n    \n    # Do math calculation to get the answer\n    risk_premium = corporate_bonds_return - treasury_bills_return\n    \n    # return answer\n    return risk_premium\n```\n\nThis Python program calculates the risk premium for corporate bonds (referred to as \"business bonds\" in the question) based on the historical geometric returns provided in the table.\n\nThe risk premium is the additional return that investors expect to receive for taking on the extra risk of investing in corporate bonds compared to the relatively risk-free Treasury bills.\n\nThe program subtracts the return of Treasury bills (2.5%) from the return of corporate bonds (6.5%) to determine the risk premium.\n\nThe solution function will return 4.0, which represents the risk premium of 4.0% for corporate bonds."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-808",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the bond-equivalent yield if the yield-to-maturity on a yearly-pay bond is 7.75%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_ytm = 0.0775  # 7.75% yield-to-maturity\n\n    # Do math calculation to get the answer\n    bond_equivalent_yield = 2 * (((1 + annual_ytm) ** 0.5) - 1)\n    \n    # Convert to percentage and round to 2 decimal places\n    answer = round(bond_equivalent_yield * 100, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the bond-equivalent yield based on the given annual yield-to-maturity of 7.75%. Here's an explanation of the calculation:\n\n1. We start with the annual yield-to-maturity (YTM) of 7.75%, which is stored as 0.0775 in decimal form.\n\n2. The bond-equivalent yield (BEY) is calculated using the formula:\n   BEY = 2 * (((1 + annual_ytm) ** 0.5) - 1)\n\n   This formula converts the annual yield to a semi-annual yield, which is the bond-equivalent yield.\n\n3. We multiply the result by 100 to convert it to a percentage and round it to two decimal places for a cleaner output.\n\n4. The function returns this calculated value as the answer.\n\nThis program will return the bond-equivalent yield as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "|                                             |      |                                        |      |\n|---------------------------------------------|------|----------------------------------------|------|\n| **Exhibit 1 U.S.  Macroeconomic  Data**        |      |                                        |      |\n| Growth in real consumer spending           | 3.1% | Yield on  10-yr. U.S. Treasury bonds   | 2.7% |\n| Growth in potential labor force            | 1.9% | Growth in real investment spending     | 3.1% |\n| Growth in labor force participation        | -0.3%| Growth in total factor productivity    | 0.5% |\n| Growth in labor productivity               | 1.4% | Change in trade deficit                | -0.5%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-809",
        "python_solution": "",
        "ground_truth": null,
        "question": "After the financial crises starting in 2008, the squad deliberates on the potential long-term growth trajectory for the U.S. GDP in the wake of external shocks. Reports from several external sources are scrutinized and an agreed perception of the next decade's annual growth projections for the objects in Exhibit 1 is formed. Using the data from Exhibit 1 and adopting the simplest method to review the total trend growth for the U.S. GDP, the most probable projection for the GDP annual growth over the next decade (in %) would be:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    labor_force_growth = 1.9\n    labor_productivity_growth = 1.4\n    \n    # Do math calculation to get the answer\n    gdp_growth = labor_force_growth + labor_productivity_growth\n    \n    # return answer\n    return round(gdp_growth, 1)\n```\n\nThis solution uses the simplest method to project GDP growth, which is the sum of labor force growth and labor productivity growth. \n\nThe labor force growth is given as \"Growth in potential labor force\" at 1.9%.\nThe labor productivity growth is given directly as 1.4%.\n\nWe add these two figures together to get the projected GDP growth rate. The result is rounded to one decimal place to match the format of the given data.\n\nThis method, while simple, captures the two main drivers of long-term economic growth: increases in the labor force and increases in the productivity of that labor force. It's a reasonable approximation for long-term growth projections, especially when asked for the \"simplest method\"."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-810",
        "python_solution": "",
        "ground_truth": null,
        "question": "The likelihood of Occurrence X is 40%. The likelihood of Occurrence Y is 60%. The combined likelihood of XY is 40%. What is the likelihood (P) that X or Y happens, or both happen?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_x = 0.40  # Probability of X occurring\n    p_y = 0.60  # Probability of Y occurring\n    p_xy = 0.40  # Probability of both X and Y occurring\n\n    # Do math calculation to get the answer\n    # P(X or Y) = P(X) + P(Y) - P(X and Y)\n    p_x_or_y = p_x + p_y - p_xy\n\n    # return answer\n    return p_x_or_y\n```\n\nThis Python program calculates the probability that either X or Y happens, or both happen, using the given probabilities. The calculation is based on the addition rule of probability:\n\nP(X or Y) = P(X) + P(Y) - P(X and Y)\n\nThis formula accounts for the overlap between X and Y (represented by P(X and Y)) to avoid double-counting the probability when both events occur."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-811",
        "python_solution": "",
        "ground_truth": null,
        "question": "What should the coupon rate be for the interest payment made on December 15 if Beta Co. issued a five-year semi-annual floating rate bond where the coupon rate is the six-month MRR plus 100 bps, with interest payments made every 15 June and 15 December, and which has a six-month MRR of 3% on June 15 and 3.2% on December 15?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mrr_june = 0.03  # 3% six-month MRR on June 15\n    mrr_december = 0.032  # 3.2% six-month MRR on December 15\n    spread = 0.01  # 100 bps = 1%\n\n    # Do math calculation to get the answer\n    coupon_rate = mrr_december + spread\n\n    # Convert to percentage\n    coupon_rate_percentage = coupon_rate * 100\n\n    # return answer\n    return coupon_rate_percentage\n```\n\nThis Python program calculates the coupon rate for the interest payment made on December 15 based on the given information. Here's how it works:\n\n1. We define the variables:\n   - `mrr_june`: The six-month MRR on June 15 (3% or 0.03)\n   - `mrr_december`: The six-month MRR on December 15 (3.2% or 0.032)\n   - `spread`: The additional 100 bps (basis points) which is equivalent to 1% or 0.01\n\n2. We calculate the coupon rate by adding the December MRR and the spread.\n\n3. We convert the coupon rate to a percentage by multiplying it by 100.\n\n4. Finally, we return the coupon rate as a percentage.\n\nWhen you run this function, it will return 4.2, which means the coupon rate for the interest payment made on December 15 should be 4.2%."
        ]
    },
    {
        "tables": [
            "| Trades | Execution Price | Shares Executed |\n|--------|-----------------|-----------------|\n| Trade 1 | $40.75 | 10,000 |\n| Trade 2 | $41.25 | 30,000 |\n| Trade 3 | $41.50 | 20,000 |\n| Trade 4 | $41.75 | 30,000 |\n| Total | | 90,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-812",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the following day, Thompson asks Green to go over their study on ABC Corp again. Green's study leads her to think that its stocks are underpriced. She gives her study findings to Thompson, and at 10 o'clock in the morning, he tells her to buy 120,000 shares at a price of $40.00 each using a limit order of $42.00. When the price is $40.50, the buy-side trader submits the order for market execution. The only cost involved is a share commission of $0.02. By the day's end, 90,000 shares of the order have been acquired, and ABC Corp concludes at $42.50. The trade was completed at an estimate price of $41.42. Exhibit 1 gives additional details about the completed trades. The arrival cost for buying the 90,000 shares of ABC Corp is:",
        "output": [
            "def solution():\n    # Define variables name and value\n    arrival_price = 40.50\n    shares_executed = 90000\n    total_execution_value = 0\n    commission_per_share = 0.02\n\n    # Calculate total execution value\n    trades = [\n        (40.75, 10000),\n        (41.25, 30000),\n        (41.50, 20000),\n        (41.75, 30000)\n    ]\n    \n    for price, shares in trades:\n        total_execution_value += price * shares\n\n    # Calculate average execution price\n    avg_execution_price = total_execution_value / shares_executed\n\n    # Calculate total cost including commission\n    total_cost = total_execution_value + (shares_executed * commission_per_share)\n\n    # Calculate arrival cost\n    arrival_cost = (total_cost / shares_executed) - arrival_price\n\n    # Convert to basis points (1 basis point = 0.0001)\n    arrival_cost_bps = arrival_cost / arrival_price * 10000\n\n    # Return answer rounded to 2 decimal places\n    return round(arrival_cost_bps, 2)"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-813",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we consider that the yearly continuously compounded spot rates are: Z1=5%, Z2=5.1%, Z3=5.2%, and a 1.5-year bond has a face value of $100 and a 6% semiannual coupon payment, how would you compute the bond price?",
        "output": [
            "Here's a Python program to calculate the bond price based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    Z1 = 0.05  # 1-year spot rate\n    Z2 = 0.051  # 2-year spot rate\n    Z3 = 0.052  # 3-year spot rate\n    face_value = 100\n    coupon_rate = 0.06  # 6% annual coupon rate\n    coupon_frequency = 2  # semiannual payments\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate / coupon_frequency\n    \n    # Calculate discount factors\n    df1 = math.exp(-Z1 * 0.5)\n    df2 = math.exp(-Z1 * 1)\n    df3 = math.exp(-Z2 * 1.5)\n    \n    # Calculate present values of cash flows\n    pv_coupon1 = coupon_payment * df1\n    pv_coupon2 = coupon_payment * df2\n    pv_coupon3 = (coupon_payment + face_value) * df3\n    \n    # Sum up present values to get bond price\n    bond_price = pv_coupon1 + pv_coupon2 + pv_coupon3\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis program calculates the bond price using the following steps:\n\n1. Define the given variables: spot rates (Z1, Z2, Z3), face value, coupon rate, and coupon frequency.\n2. Calculate the coupon payment amount.\n3. Calculate discount factors for each cash flow using the continuously compounded spot rates.\n4. Calculate the present value of each cash flow (three in total: two coupon payments and one coupon payment plus face value).\n5. Sum up the present values to get the bond price.\n6. Return the bond price rounded to two decimal places.\n\nNote: This program uses the `math` module for the exponential function. Make sure to import it at the beginning of your script with `import"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-814",
        "python_solution": "",
        "ground_truth": null,
        "question": "A two-year outstanding US Treasury bond has a yield of 3.5%. The swap spread for a 2-year interest rate swap is said to be 80 bps. What does the fixed payer in a two-year interest rate swap have to pay?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    treasury_yield = 0.035  # 3.5%\n    swap_spread = 0.0080  # 80 bps = 0.80%\n\n    # Do math calculation to get the answer\n    fixed_rate = treasury_yield + swap_spread\n\n    # return answer\n    return fixed_rate * 100  # Convert to percentage\n```\n\nThis Python program calculates the fixed rate that the fixed payer in a two-year interest rate swap would have to pay. Here's how it works:\n\n1. We define the variables:\n   - `treasury_yield` is set to 0.035 (3.5%)\n   - `swap_spread` is set to 0.0080 (80 basis points = 0.80%)\n\n2. We calculate the fixed rate by adding the treasury yield and the swap spread.\n\n3. We return the result multiplied by 100 to convert it to a percentage.\n\nWhen you run this function, it will return 4.3, which means the fixed payer in the two-year interest rate swap would have to pay 4.3%."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-815",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the necessary rate of return is 4%, what is the intrinsic worth per share of a standing issue of 5% never-ending preferred stock with a face value of 100 and zero incorporated options?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_return_rate = 0.04  # 4%\n    dividend_rate = 0.05  # 5%\n    face_value = 100\n\n    # Do math calculation to get the answer\n    annual_dividend = face_value * dividend_rate\n    intrinsic_value = annual_dividend / required_return_rate\n\n    # return answer\n    return intrinsic_value\n```\n\nThis Python program calculates the intrinsic value of a perpetual preferred stock based on the given information:\n\n1. We define the variables:\n   - `required_return_rate`: The necessary rate of return (4% or 0.04)\n   - `dividend_rate`: The dividend rate of the preferred stock (5% or 0.05)\n   - `face_value`: The face value of the preferred stock (100)\n\n2. We calculate the annual dividend by multiplying the face value by the dividend rate.\n\n3. We then calculate the intrinsic value using the formula: Annual Dividend / Required Return Rate\n\n4. The function returns the calculated intrinsic value.\n\nThis calculation is based on the dividend discount model for perpetual preferred stocks, where the intrinsic value is determined by the expected future cash flows (dividends) discounted at the required rate of return."
        ]
    },
    {
        "tables": [
            "| 10 | 20 | -8 | 2 | -9 | 5 | 0 | -8 | 3 | 21 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-816",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following set of 10 elements is chosen from a group. The variance of the group is unclear. What is the standard error of the average of the sample?",
        "output": [
            "Here's the Python program to calculate the standard error of the average of the sample:\n\n```python\ndef solution():\n    # Define variables name and value\n    sample = [10, 20, -8, 2, -9, 5, 0, -8, 3, 21]\n    n = len(sample)\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the mean\n    mean = sum(sample) / n\n    \n    # Calculate the sum of squared deviations\n    squared_deviations = [(x - mean) ** 2 for x in sample]\n    sum_squared_deviations = sum(squared_deviations)\n    \n    # Calculate the sample variance\n    sample_variance = sum_squared_deviations / (n - 1)\n    \n    # Calculate the standard deviation\n    standard_deviation = sample_variance ** 0.5\n    \n    # Calculate the standard error\n    standard_error = standard_deviation / (n ** 0.5)\n    \n    # return answer\n    return standard_error\n```\n\nThis program does the following:\n\n1. Defines the sample as a list of the given 10 elements.\n2. Calculates the mean of the sample.\n3. Calculates the sum of squared deviations from the mean.\n4. Calculates the sample variance using the formula: Σ(x - mean)² / (n-1)\n5. Calculates the standard deviation as the square root of the variance.\n6. Calculates the standard error of the mean using the formula: standard deviation / √n\n7. Returns the standard error as the answer.\n\nThis program will give you the standard error of the average (mean) of the sample, which is what the question asks for."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price(E) | End of Period Price(E) | Total Dividends(E) |\n|----------|------------------------------|------------------------|---------------------|\n| Able     | 10.00                        | 12.00                  | 0.75                |\n| Baker    | 20.00                        | 19.00                  | 1.00                |\n| Charlie  | 30.00                        | 30.00                  | 2.00                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-817",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the following data for an equal-weighted index made up of assets X, Y, and Z: What is the price return of the index?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    able_start = 10.00\n    able_end = 12.00\n    baker_start = 20.00\n    baker_end = 19.00\n    charlie_start = 30.00\n    charlie_end = 30.00\n\n    # Do math calculation to get the answer\n    total_start = able_start + baker_start + charlie_start\n    total_end = able_end + baker_end + charlie_end\n    \n    price_return = (total_end - total_start) / total_start\n    \n    # Convert to percentage\n    price_return_percentage = price_return * 100\n\n    # return answer\n    return round(price_return_percentage, 2)\n```\n\nThis Python program calculates the price return of an equal-weighted index composed of the three securities (Able, Baker, and Charlie) based on the given data. Here's a breakdown of the calculation:\n\n1. We define the starting and ending prices for each security.\n2. We calculate the total starting value and total ending value of the index.\n3. We calculate the price return using the formula: (End Value - Start Value) / Start Value\n4. We convert the price return to a percentage by multiplying by 100.\n5. We round the result to two decimal places for readability.\n\nThe program will return the price return as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-818",
        "python_solution": "",
        "ground_truth": null,
        "question": "John has determined that the DDM model is suitable to evaluate Corporation X. With the present dividend and the necessary rate of return of $0.5 per share and 10% respectively. He anticipates that the dividend will rise at 20% per annum for the first three years and then ascend at 5% annually into the unforeseeable future. What's the present value of Corporation X shares?",
        "output": [
            "Here's a Python program to calculate the present value of Corporation X shares based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.5\n    required_rate_of_return = 0.10\n    initial_growth_rate = 0.20\n    long_term_growth_rate = 0.05\n    initial_growth_period = 3\n\n    # Do math calculation to get the answer\n    \n    # Calculate dividends for the first three years\n    dividend_1 = current_dividend * (1 + initial_growth_rate)\n    dividend_2 = dividend_1 * (1 + initial_growth_rate)\n    dividend_3 = dividend_2 * (1 + initial_growth_rate)\n\n    # Calculate present value of first three dividends\n    pv_dividend_1 = dividend_1 / (1 + required_rate_of_return)\n    pv_dividend_2 = dividend_2 / (1 + required_rate_of_return)**2\n    pv_dividend_3 = dividend_3 / (1 + required_rate_of_return)**3\n\n    # Calculate terminal value using Gordon Growth Model\n    dividend_4 = dividend_3 * (1 + long_term_growth_rate)\n    terminal_value = dividend_4 / (required_rate_of_return - long_term_growth_rate)\n    pv_terminal_value = terminal_value / (1 + required_rate_of_return)**3\n\n    # Sum up all present values\n    share_value = pv_dividend_1 + pv_dividend_2 + pv_dividend_3 + pv_terminal_value\n\n    # return answer\n    return round(share_value, 2)\n```\n\nThis program calculates the present value of Corporation X shares using the Dividend Discount Model (DDM) with a multi-stage growth approach. It considers the initial high growth period of 3 years with a 20% growth rate, followed by a long-term growth rate of 5%. The solution follows these steps:\n\n1. Define all given variables.\n2. Calculate dividends for"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-819",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sam, a market analyst at an investment bank, is conducting research on companies operating in the housing market sector. The leading company in this sector, named LoveYourHome, has recently released its annual financial report, revealing a basic EPS of $56, and a diluted EPS of $52. After examining the footnotes in LoveYourHome's financial report, Sam identifies a nonrecurring profit of $2 per share and a one-time restructuring cost of $3 per share, stemming from an acquisition in the previous year. Utilising a top-down analysis approach, Sam projects that LoveYourHome's basic EPS will rise to 76 in the upcoming year. The company's current share price is $72. Sam is keen to assess the relative worth within the housing sector using the trailing P/E ratio. Given the information provided, what is LoveYourHome's trailing Price/Earnings (P/E) ratio?",
        "output": [
            "Here's a Python program to calculate LoveYourHome's trailing Price/Earnings (P/E) ratio based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    basic_eps = 56\n    nonrecurring_profit = 2\n    restructuring_cost = 3\n    current_share_price = 72\n\n    # Do math calculation to get the answer\n    adjusted_eps = basic_eps - nonrecurring_profit + restructuring_cost\n    trailing_pe_ratio = current_share_price / adjusted_eps\n\n    # return answer\n    return trailing_pe_ratio\n```\n\nThis program does the following:\n\n1. We define the relevant variables based on the given information:\n   - `basic_eps`: The reported basic EPS of $56\n   - `nonrecurring_profit`: The nonrecurring profit of $2 per share\n   - `restructuring_cost`: The one-time restructuring cost of $3 per share\n   - `current_share_price`: The current share price of $72\n\n2. We calculate the adjusted EPS by subtracting the nonrecurring profit and adding back the restructuring cost to the basic EPS. This gives us a more accurate representation of the company's ongoing earnings.\n\n3. We then calculate the trailing P/E ratio by dividing the current share price by the adjusted EPS.\n\n4. Finally, we return the calculated trailing P/E ratio.\n\nThis program will return the trailing P/E ratio for LoveYourHome based on the adjusted earnings, which is a more accurate measure for comparing relative worth within the housing sector."
        ]
    },
    {
        "tables": [
            "| Component | Cost      | Useful Life |\n|-----------|-----------|-------------|\n| A         | $500,000  | 10 years    |\n| B         | $500,000  | 5 years     |"
        ],
        "topic": "Accounting",
        "question_id": "test-820",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business aiming to increase profits expended $1,000,000 on equipment with two crucial parts, as shown in the table. The equipment is projected to be functional for a total of 10 years, and the business applies the straight-line depreciation approach.",
        "output": [
            "Here's the Python program to calculate the annual depreciation expense for the equipment:\n\n```python\ndef solution():\n    # Define variables name and value\n    component_a_cost = 500000\n    component_a_life = 10\n    component_b_cost = 500000\n    component_b_life = 5\n    total_equipment_life = 10\n\n    # Do math calculation to get the answer\n    component_a_annual_depreciation = component_a_cost / component_a_life\n    component_b_annual_depreciation = component_b_cost / component_b_life\n    \n    # Calculate total depreciation for component B over its 5-year life\n    component_b_total_depreciation = component_b_annual_depreciation * component_b_life\n    \n    # Calculate remaining value of component B to be depreciated over the last 5 years\n    component_b_remaining_value = component_b_cost - component_b_total_depreciation\n    component_b_additional_annual_depreciation = component_b_remaining_value / 5\n\n    # Calculate total annual depreciation for the first 5 years\n    annual_depreciation_first_5_years = component_a_annual_depreciation + component_b_annual_depreciation\n    \n    # Calculate total annual depreciation for the last 5 years\n    annual_depreciation_last_5_years = component_a_annual_depreciation + component_b_additional_annual_depreciation\n\n    # Return the higher of the two annual depreciation amounts\n    return max(annual_depreciation_first_5_years, annual_depreciation_last_5_years)\n```\n\nThis program calculates the annual depreciation expense for the equipment, taking into account the different useful lives of components A and B. It returns the higher of the two annual depreciation amounts (for the first 5 years and the last 5 years), which represents the annual depreciation expense for the entire 10-year period."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-821",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier bought an annuity quite some time ago and is projected to get $1,200 annually for the following 40 years from this annuity. If the anticipated interest rate is 7%, what is the current worth of the cashflows the financier is set to receive?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 1200\n    years = 40\n    interest_rate = 0.07\n\n    # Do math calculation to get the answer\n    present_value = annual_payment * ((1 - (1 + interest_rate)**(-years)) / interest_rate)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of an annuity using the given information:\n\n1. The annual payment is $1,200\n2. The annuity lasts for 40 years\n3. The interest rate is 7% (0.07 in decimal form)\n\nThe formula used is the standard present value of annuity formula:\n\nPV = PMT * ((1 - (1 + r)^(-n)) / r)\n\nWhere:\nPV = Present Value\nPMT = Annual Payment\nr = Interest Rate\nn = Number of Years\n\nThe result is rounded to two decimal places to represent currency accurately. The function will return the current worth of the cashflows the financier is set to receive."
        ]
    },
    {
        "tables": [
            "| Revenue | $ 500,000 |\n|---|---|\n| Volume Discounts | $ 20,000 |\n| Cash Received | $ 450,000 |\n| Cost of Goods Sold | $ 300,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-822",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under the accrual basis of accounting, what is the net revenue equivalent to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 500000\n    volume_discounts = 20000\n    \n    # Do math calculation to get the answer\n    net_revenue = revenue - volume_discounts\n    \n    # return answer\n    return net_revenue\n```\n\nThis Python program calculates the net revenue under the accrual basis of accounting. Here's an explanation of the solution:\n\n1. We define the variables based on the given information:\n   - `revenue` is set to $500,000\n   - `volume_discounts` is set to $20,000\n\n2. To calculate the net revenue, we subtract the volume discounts from the revenue:\n   `net_revenue = revenue - volume_discounts`\n\n3. The function returns the calculated net revenue.\n\nUnder the accrual basis of accounting, revenue is recognized when it is earned, regardless of when cash is received. Therefore, the net revenue is equal to the total revenue minus any discounts or allowances. In this case, we subtract the volume discounts from the revenue to get the net revenue.\n\nNote that the cash received and cost of goods sold are not relevant for calculating net revenue under the accrual basis, so they are not used in this calculation."
        ]
    },
    {
        "tables": [
            "| Compensation of employees | 1,044,005 |\n|---------------------------|-----------|\n| Gross operating surplus | 518,979 |\n| Gross mixed income | 241,415 |\n| Net mixed income | 180,653 |\n| taxes less subsidies on production | 90,507 |\n| taxes less subsidies on products and imports | 139,443 |\n| Statistical discrepancy | 1,157 |\n| Net property income | 136,011 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-823",
        "python_solution": "",
        "ground_truth": null,
        "question": "Compute GDP using the income approach based on the information in the given table",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    compensation_of_employees = 1044005\n    gross_operating_surplus = 518979\n    gross_mixed_income = 241415\n    taxes_less_subsidies_production = 90507\n    taxes_less_subsidies_products_imports = 139443\n    statistical_discrepancy = 1157\n\n    # Do math calculation to get the answer\n    gdp = (compensation_of_employees + \n           gross_operating_surplus + \n           gross_mixed_income + \n           taxes_less_subsidies_production + \n           taxes_less_subsidies_products_imports + \n           statistical_discrepancy)\n\n    # return answer\n    return gdp\n```\n\nThis Python program calculates the GDP using the income approach based on the information provided in the table. The income approach to GDP adds up all forms of income earned in the production of goods and services. The components used in this calculation are:\n\n1. Compensation of employees\n2. Gross operating surplus\n3. Gross mixed income\n4. Taxes less subsidies on production\n5. Taxes less subsidies on products and imports\n6. Statistical discrepancy\n\nThe program defines these variables with their respective values from the table, then sums them up to calculate the GDP. The result is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-824",
        "python_solution": "",
        "ground_truth": null,
        "question": "The fee structure of Cedar Ridge Associates, a fund of hedge funds, is as follows: 2/20 underlying fund fees with independently calculated incentive fees, Cedar Ridge's fees are calculated net of all underlying fund fees, a 1% management fee (based on year-end market value), a 10% incentive fee calculated net of the management fee, and there are no hurdle rate or high-water mark fee conditions for the fund and all underlying funds. In the most recent year, Cedar Ridge’s fund value increased from $100 million to $133 million before any deductions for the fund's management and incentive fees or any underlying funds. Given this information, what is the cumulative fee earned by all the funds?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 100000000\n    end_value_before_fees = 133000000\n    underlying_management_fee_rate = 0.02\n    underlying_incentive_fee_rate = 0.20\n    cedar_ridge_management_fee_rate = 0.01\n    cedar_ridge_incentive_fee_rate = 0.10\n\n    # Do math calculation to get the answer\n    \n    # Calculate underlying funds' fees\n    underlying_profit = end_value_before_fees - initial_value\n    underlying_management_fee = underlying_management_fee_rate * end_value_before_fees\n    underlying_incentive_fee = underlying_incentive_fee_rate * underlying_profit\n    \n    # Calculate Cedar Ridge's fees\n    value_after_underlying_fees = end_value_before_fees - underlying_management_fee - underlying_incentive_fee\n    cedar_ridge_management_fee = cedar_ridge_management_fee_rate * value_after_underlying_fees\n    cedar_ridge_profit = value_after_underlying_fees - initial_value - cedar_ridge_management_fee\n    cedar_ridge_incentive_fee = cedar_ridge_incentive_fee_rate * cedar_ridge_profit\n    \n    # Calculate total fees\n    total_fees = underlying_management_fee + underlying_incentive_fee + cedar_ridge_management_fee + cedar_ridge_incentive_fee\n\n    # return answer\n    return total_fees\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-825",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the monthly mortgage payment for a level-payment, fixed-rate mortgage with these features: term is 30 years, mortgage rate is 9.0%, servicing fee is 0.5%, and the initial mortgage loan balance is $150,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 150000\n    annual_interest_rate = 0.09 + 0.005  # 9% mortgage rate + 0.5% servicing fee\n    term_years = 30\n    payments_per_year = 12\n\n    # Do math calculation to get the answer\n    monthly_rate = annual_interest_rate / payments_per_year\n    total_payments = term_years * payments_per_year\n    \n    # Using the formula for monthly mortgage payments\n    monthly_payment = (loan_amount * monthly_rate * (1 + monthly_rate)**total_payments) / ((1 + monthly_rate)**total_payments - 1)\n    \n    # Round to two decimal places\n    monthly_payment = round(monthly_payment, 2)\n\n    # return answer\n    return monthly_payment\n```\n\nThis Python program calculates the monthly mortgage payment for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the monthly interest rate by adding the mortgage rate and servicing fee, then dividing by 12 (months in a year).\n3. We use the standard mortgage payment formula to calculate the monthly payment.\n4. The result is rounded to two decimal places for currency representation.\n5. The function returns the calculated monthly payment.\n\nWhen you run this function, it will return the monthly mortgage payment amount."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-826",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond with a face value of $100 has a 15-year term, an annual payment rate of 10%, and a YTM of 12%, what is its cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    term = 15\n    coupon_rate = 0.10\n    ytm = 0.12\n\n    # Do math calculation to get the answer\n    annual_coupon = face_value * coupon_rate\n    present_value_coupons = 0\n    for t in range(1, term + 1):\n        present_value_coupons += annual_coupon / ((1 + ytm) ** t)\n    \n    present_value_face = face_value / ((1 + ytm) ** term)\n    \n    bond_price = present_value_coupons + present_value_face\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price (cost) of a bond given its characteristics:\n\n1. We define the variables based on the given information:\n   - Face value: $100\n   - Term: 15 years\n   - Coupon rate: 10% (0.10)\n   - Yield to Maturity (YTM): 12% (0.12)\n\n2. We calculate the bond price using the following steps:\n   - Calculate the annual coupon payment\n   - Calculate the present value of all future coupon payments\n   - Calculate the present value of the face value (to be received at maturity)\n   - Sum these two present values to get the bond price\n\n3. The function returns the bond price rounded to two decimal places.\n\nThis program will give you the cost of the bond, which is its current market price given the stated yield to maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-827",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2017, the revenue for Fortune Enterprise was $5000, with a cost of goods sold standing at $900 and depreciation at $700. Given that the firm has an interest coverage ratio that's three times larger, what were its interest expenses in 2017?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000\n    cost_of_goods_sold = 900\n    depreciation = 700\n    interest_coverage_ratio = 3\n\n    # Do math calculation to get the answer\n    operating_income = revenue - cost_of_goods_sold - depreciation\n    interest_expense = operating_income / interest_coverage_ratio\n\n    # return answer\n    return interest_expense\n```\n\nThis Python program calculates the interest expenses for Fortune Enterprise in 2017 based on the given information. Here's a breakdown of the calculation:\n\n1. We define the known variables: revenue, cost of goods sold, depreciation, and the interest coverage ratio.\n\n2. We calculate the operating income by subtracting the cost of goods sold and depreciation from the revenue.\n\n3. Since the interest coverage ratio is the number of times larger that operating income is compared to interest expenses, we can divide the operating income by the interest coverage ratio to get the interest expenses.\n\n4. The function returns the calculated interest expense.\n\nWhen you run this function, it will return the interest expenses for Fortune Enterprise in 2017."
        ]
    },
    {
        "tables": [
            "|                    | Income Statement |         | Balance Sheet Changes |      |\n|--------------------|-----------------:|---------|-----------------------|-----:|\n| Revenue            |         $ 56,800 | Decrease in accounts receivable | $1,324 |\n|                    |                  |         |                       |       |\n| Cost of goods sold |           27,264 | Decrease in inventory          |   501 |\n| Other operating expense           |   562 | Increase in prepaid expense   |     6 |\n| Depreciation expense          |  2,500 | Increase in accounts payable   | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "test-828",
        "python_solution": "",
        "ground_truth": null,
        "question": "The subsequent data is derived from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\n\nThis Python program calculates the cash paid to suppliers by Sugarfall Corporation based on the given financial data. Here's how it works:\n\n1. We define the relevant variables from the provided information:\n   - Cost of goods sold: $27,264\n   - Decrease in inventory: $501\n   - Increase in accounts payable: $1,063\n\n2. To calculate the cash paid to suppliers, we use the formula:\n   Cash paid to suppliers = Cost of goods sold - Decrease in inventory - Increase in accounts payable\n\n   This formula accounts for the following:\n   - Cost of goods sold represents the total amount of goods that need to be paid for.\n   - A decrease in inventory means fewer goods were purchased than sold, reducing the cash needed.\n   - An increase in accounts payable means some purchases were made on credit, also reducing the immediate cash outflow.\n\n3. The program then returns the calculated value, which represents the cash Sugarfall Corp. paid to its suppliers.\n\nWhen you run this function, it will return the amount of cash paid to suppliers based on the given financial data."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-829",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume that the earnings from a merger arbitrage operation conducted by XYZ Corporation results in $5 million if it's successful, but —$20 million if it isn't. If the likelihood of success is 83%, what would be the expected payoff on this operation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    success_earnings = 5000000\n    failure_loss = -20000000\n    success_probability = 0.83\n    failure_probability = 1 - success_probability\n\n    # Do math calculation to get the answer\n    expected_payoff = (success_earnings * success_probability) + (failure_loss * failure_probability)\n\n    # return answer\n    return expected_payoff\n```\n\nThis Python program calculates the expected payoff for the merger arbitrage operation described in the question. Here's how it works:\n\n1. We define the variables:\n   - `success_earnings`: The earnings if the operation is successful ($5 million)\n   - `failure_loss`: The loss if the operation fails (-$20 million)\n   - `success_probability`: The likelihood of success (83% or 0.83)\n   - `failure_probability`: The likelihood of failure (1 - 0.83 = 0.17)\n\n2. We calculate the expected payoff using the formula:\n   Expected Payoff = (Earnings if successful * Probability of success) + (Loss if failed * Probability of failure)\n\n3. The function returns the calculated expected payoff.\n\nWhen you run this function, it will return the expected payoff for the merger arbitrage operation, taking into account both the potential earnings and losses, weighted by their respective probabilities."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-830",
        "python_solution": "",
        "ground_truth": null,
        "question": "As a portfolio manager, Martin is thinking about including a 2-year bond with a 7% coupon rate and a par value of 100 in his investment portfolio. The bond's interest is paid yearly. Given the current 1-year and 2-year spot rates of 4% and 5% respectively, what is the bond's value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.07\n    spot_rate_1year = 0.04\n    spot_rate_2year = 0.05\n    \n    # Do math calculation to get the answer\n    coupon_payment = par_value * coupon_rate\n    \n    present_value_coupon1 = coupon_payment / (1 + spot_rate_1year)\n    present_value_coupon2 = coupon_payment / (1 + spot_rate_2year)**2\n    present_value_par = par_value / (1 + spot_rate_2year)**2\n    \n    bond_value = present_value_coupon1 + present_value_coupon2 + present_value_par\n    \n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of the 2-year bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables for par value, coupon rate, and spot rates.\n2. We calculate the annual coupon payment.\n3. We calculate the present value of each coupon payment using the appropriate spot rate.\n4. We calculate the present value of the par value to be received at maturity.\n5. We sum up all the present values to get the bond's value.\n6. The result is rounded to two decimal places for a typical financial representation.\n\nThe function will return the calculated bond value, which answers the question asked."
        ]
    },
    {
        "tables": [
            "|                       | 40 | 35 | 30 | 25 | 20 |\n|-----------------------|----|----|----|----|----|\n| 3-month call option price | 0.56 | 1.45 | 4.05 | 10.30 | 12.42 |\n| 3-month put option price | 9.56 | 5.20 | 2.78 | 1.56 | 0.72 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-831",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the Exhibit 1 Option Contract Pricing Details, what is the break-even price for an at-the-money (ATM) protective put strategy for Dropqik Corporation, where Justine Fisher, a client of Erica Taylor, holds a significant position and which is currently trading at $30.50 per share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_stock_price = 30.50\n    \n    # Find the closest strike price in the table\n    strike_prices = [40, 35, 30, 25, 20]\n    atm_strike = min(strike_prices, key=lambda x: abs(x - current_stock_price))\n    \n    # Get the corresponding put option price\n    put_prices = [9.56, 5.20, 2.78, 1.56, 0.72]\n    atm_put_price = put_prices[strike_prices.index(atm_strike)]\n    \n    # Do math calculation to get the answer\n    break_even_price = current_stock_price + atm_put_price\n    \n    # return answer\n    return round(break_even_price, 2)\n```\n\nThis Python program calculates the break-even price for an at-the-money (ATM) protective put strategy based on the given information. Here's how it works:\n\n1. We define the current stock price of Dropqik Corporation as $30.50.\n\n2. We find the closest strike price to the current stock price from the given table. This will be our ATM strike price.\n\n3. We then get the corresponding put option price for this ATM strike price.\n\n4. The break-even price is calculated by adding the current stock price and the ATM put option price.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThis program will return the break-even price for the ATM protective put strategy, which is the price the stock needs to reach for the strategy to break even at expiration."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-832",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a living community, the landlords want to choose 3 out of 5 tenants to form a new landlords committee. How many possible scenarios can happen?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_tenants = 5\n    committee_size = 3\n    \n    # Do math calculation to get the answer\n    from math import comb\n    possible_scenarios = comb(total_tenants, committee_size)\n    \n    # return answer\n    return possible_scenarios\n```\n\nThis Python program calculates the number of possible scenarios for choosing 3 out of 5 tenants to form a new landlords committee. Here's an explanation of the code:\n\n1. We define two variables:\n   - `total_tenants`: The total number of tenants (5)\n   - `committee_size`: The number of tenants to be chosen for the committee (3)\n\n2. We use the `comb()` function from the `math` module to calculate the number of combinations. This function calculates the number of ways to choose `committee_size` items from `total_tenants` items without repetition and without order.\n\n3. The result is stored in the `possible_scenarios` variable.\n\n4. Finally, we return `possible_scenarios` as the answer.\n\nWhen you run this function, it will return 10, which means there are 10 possible ways to choose 3 tenants out of 5 to form the new landlords committee."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-833",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond's current value is $101.45, and the director predicts an increase to $103.28 should interest rates drop 0.25%, or a decrease to $100.81 should interest rates rise 0.25%, what is the bond's effective duration?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_value = 101.45\n    value_if_rates_drop = 103.28\n    value_if_rates_rise = 100.81\n    rate_change = 0.0025  # 0.25% expressed as a decimal\n\n    # Do math calculation to get the answer\n    price_change_if_rates_drop = value_if_rates_drop - current_value\n    price_change_if_rates_rise = value_if_rates_rise - current_value\n    \n    # Calculate average price change\n    avg_price_change = (abs(price_change_if_rates_drop) + abs(price_change_if_rates_rise)) / 2\n    \n    # Calculate percentage price change\n    percentage_price_change = avg_price_change / current_value\n    \n    # Calculate effective duration\n    effective_duration = percentage_price_change / rate_change\n\n    # return answer\n    return effective_duration\n```\n\nThis Python program calculates the effective duration of the bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define the current bond value, the predicted values if rates drop or rise, and the rate change.\n2. We calculate the price changes for both scenarios (rates dropping and rising).\n3. We take the average of these price changes (using absolute values).\n4. We calculate the percentage price change by dividing the average price change by the current value.\n5. Finally, we calculate the effective duration by dividing the percentage price change by the rate change.\n\nThe function will return the effective duration of the bond, which measures the bond's sensitivity to interest rate changes."
        ]
    },
    {
        "tables": [
            "| Quantity (unit) | Total Fixed Cost ($) | Total Variable Cost ($) |\n| --- | --- | --- |\n| 0 | 400 | 0 |\n| 1 | 400 | 100 |\n| 2 | 400 | 190 |\n| 3 | 400 | 275 |\n| 4 | 400 | 360 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-834",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a manufacturing company examines its cost structure, and the detailed data is provided in the accompanying table, what is the marginal cost if the production units are elevated from 3 to 4?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_cost_3_units = 400 + 275  # Fixed cost + Variable cost for 3 units\n    total_cost_4_units = 400 + 360  # Fixed cost + Variable cost for 4 units\n    \n    # Do math calculation to get the answer\n    marginal_cost = total_cost_4_units - total_cost_3_units\n    \n    # return answer\n    return marginal_cost\n```\n\nThis Python program calculates the marginal cost when production increases from 3 to 4 units. Here's how it works:\n\n1. We define the total costs for 3 units and 4 units using the data from the table. The total cost is the sum of fixed cost (always $400) and the variable cost for each quantity.\n\n2. To calculate the marginal cost, we subtract the total cost of producing 3 units from the total cost of producing 4 units.\n\n3. The function returns this marginal cost.\n\nWhen you run this function, it will return 85, which is the marginal cost of increasing production from 3 to 4 units. This represents the additional cost incurred to produce the 4th unit."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| FCFE0  | $10 million  |\n| Growth rate of FCFE  | 2%  |\n| Risk free rate | 2.5%  |\n| Equity Risk Premium  | 4%  |\n| Size Premium  | 1.5%  |\n| Market value of debt | $4 million |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-835",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the provided data, determine the equity value using the CCM.",
        "output": [
            "Here's a Python program to calculate the equity value using the Constant Growth Model (CGM) based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    fcfe0 = 10000000  # FCFE0 in dollars\n    growth_rate = 0.02  # 2% growth rate\n    risk_free_rate = 0.025  # 2.5% risk-free rate\n    equity_risk_premium = 0.04  # 4% equity risk premium\n    size_premium = 0.015  # 1.5% size premium\n    market_value_debt = 4000000  # Market value of debt in dollars\n\n    # Do math calculation to get the answer\n    \n    # Calculate the cost of equity (ke) using CAPM\n    ke = risk_free_rate + equity_risk_premium + size_premium\n    \n    # Calculate the value of equity using the Constant Growth Model\n    equity_value = fcfe0 * (1 + growth_rate) / (ke - growth_rate)\n    \n    # Calculate the total firm value (equity + debt)\n    firm_value = equity_value + market_value_debt\n\n    # return answer\n    return firm_value\n\n```\n\nThis program calculates the equity value using the Constant Growth Model (CGM) and then adds the market value of debt to determine the total firm value. The CCM (Constant Cost Model) is not explicitly mentioned in the provided data, so we use the CGM, which is a common valuation method when given a constant growth rate.\n\nThe program does the following:\n\n1. Defines all the given variables.\n2. Calculates the cost of equity (ke) using the CAPM model, which is the sum of the risk-free rate, equity risk premium, and size premium.\n3. Uses the Constant Growth Model formula to calculate the equity value: FCFE1 / (ke - g), where FCFE1 is FCFE0 * (1 + g).\n4. Adds the market value of debt to the equity value to get the total firm value.\n5. Returns the total firm value as the answer.\n\nThis approach provides a comprehensive valuation of the firm, considering"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-836",
        "python_solution": "",
        "ground_truth": null,
        "question": "A yearly coupon bond with a yield-to-maturity rate of 7% has a price tag of 94.75 per 100 of par value, with a coupon rate standing at 5%. There are 3 years left until it matures. What is the Macaulay duration of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    price = 94.75\n    coupon_rate = 0.05\n    ytm = 0.07\n    years_to_maturity = 3\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    # Calculate present value of each cash flow\n    pv_1 = coupon_payment / (1 + ytm)**1\n    pv_2 = coupon_payment / (1 + ytm)**2\n    pv_3 = (coupon_payment + face_value) / (1 + ytm)**3\n    \n    # Calculate weighted time for each cash flow\n    weighted_1 = 1 * pv_1\n    weighted_2 = 2 * pv_2\n    weighted_3 = 3 * pv_3\n    \n    # Calculate Macaulay duration\n    macaulay_duration = (weighted_1 + weighted_2 + weighted_3) / price\n    \n    # return answer\n    return macaulay_duration\n```\n\nThis Python program calculates the Macaulay duration of the bond based on the given information. Here's a breakdown of the steps:\n\n1. We define the variables based on the given information.\n2. We calculate the annual coupon payment.\n3. We calculate the present value of each cash flow (two coupon payments and one final payment including the face value).\n4. We calculate the weighted time for each cash flow by multiplying the present value by the number of years until the cash flow occurs.\n5. We sum up the weighted times and divide by the current price of the bond to get the Macaulay duration.\n6. Finally, we return the calculated Macaulay duration.\n\nThis program will return the Macaulay duration in years when executed."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-837",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the odds that the returns from a portfolio with an average return rate of 8% and a standard deviation of 14% will range from 8% to 11%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean_return = 0.08\n    std_dev = 0.14\n    lower_bound = 0.08\n    upper_bound = 0.11\n    \n    # Do math calculation to get the answer\n    from scipy import stats\n    \n    # Calculate z-scores for the bounds\n    z_lower = (lower_bound - mean_return) / std_dev\n    z_upper = (upper_bound - mean_return) / std_dev\n    \n    # Calculate the probability using the cumulative distribution function (CDF)\n    probability = stats.norm.cdf(z_upper) - stats.norm.cdf(z_lower)\n    \n    # Convert probability to percentage\n    answer = probability * 100\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the probability that the returns from a portfolio will fall between 8% and 11%, given a mean return of 8% and a standard deviation of 14%. Here's a breakdown of the solution:\n\n1. We define the variables for the mean return, standard deviation, and the lower and upper bounds of the range we're interested in.\n\n2. We use the scipy.stats module to perform the statistical calculations. If you're running this code, make sure you have scipy installed.\n\n3. We calculate the z-scores for the lower and upper bounds. The z-score tells us how many standard deviations a value is from the mean.\n\n4. We use the cumulative distribution function (CDF) of the normal distribution to calculate the probability. The difference between the CDF at the upper z-score and the lower z-score gives us the probability of the return falling within our range.\n\n5. We convert the probability to a percentage by multiplying by 100.\n\n6. Finally, we return the answer as a percentage.\n\nThis program assumes that the returns are normally distributed, which is a common assumption in finance for these types of calculations."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-838",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say the present value (S0) of a stock that does not pay dividends is 100, and a put option for this stock has a strike price (X) of $95 with one year left until expiration. Now, a trader thinks that the share price will either rise by 10% or fall by 20%. Which of the subsequent computations of the worth of a put option is correct, presuming a 4% risk-free rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 100  # Present value of the stock\n    X = 95  # Strike price of the put option\n    T = 1  # Time to expiration in years\n    r = 0.04  # Risk-free rate\n    \n    u = 1.10  # Up factor (10% increase)\n    d = 0.80  # Down factor (20% decrease)\n    \n    # Do math calculation to get the answer\n    \n    # Calculate stock prices at expiration\n    Su = S0 * u  # Stock price in up scenario\n    Sd = S0 * d  # Stock price in down scenario\n    \n    # Calculate put option payoffs at expiration\n    Pu = max(0, X - Su)  # Put payoff in up scenario\n    Pd = max(0, X - Sd)  # Put payoff in down scenario\n    \n    # Calculate risk-neutral probability\n    p = (math.exp(r * T) - d) / (u - d)\n    \n    # Calculate present value of expected payoff\n    put_value = math.exp(-r * T) * (p * Pu + (1 - p) * Pd)\n    \n    # return answer\n    return round(put_value, 2)\n```\n\nThis Python program calculates the value of the put option using the risk-neutral pricing method. Here's a breakdown of the steps:\n\n1. We define all the given variables, including the present stock price, strike price, time to expiration, risk-free rate, and the up and down factors.\n\n2. We calculate the possible stock prices at expiration (Su and Sd) using the up and down factors.\n\n3. We calculate the put option payoffs at expiration for both scenarios (Pu and Pd).\n\n4. We calculate the risk-neutral probability (p) using the risk-free rate and the up and down factors.\n\n5. We use the risk-neutral pricing formula to calculate the present value of the expected payoff of the put option.\n\n6. Finally, we return the calculated put option value, rounded to two decimal places.\n\nThis method gives us the correct computation of the worth"
        ]
    },
    {
        "tables": [
            "|     |     | Coefficient |    | Standard Error | t-Statistic |\n|-----|-----|-------------|----|----------------|-------------|\n|     | Intercept | 0.0092 |    | 0.0087 | 1.0582 |\n|     | In Salest-1-In Salest-2 | -0.1279 |    | 0.1137 | -1.1252 |\n|     | In Salest-4-In Salest-5 | 0.7239 |    | 0.1093 | 6.6209 |\n|     | Most Recent Quarterly Sales Data (in billions) |  |    |  |  |\n|     | Dec 2015 (Salest-1) | $3.868 |    |  |  |\n|     | Sept 2015 (Salest-2) | $3.780 |    |  |  |\n|     | June 2015 (Salest-3) | $3.692 |    |  |  |\n|     | Mar 2015 (Salest-4) | $3.836 |    |  |  |\n|     | Dec 2014 (Salest-5) | $3.418 |    |  |  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-839",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the regression output shown in the Exhibit, what is the predicted quarterly sales value for March 2016 if John is developing a model to predict future quarterly sales, and he starts by running this regression: ln Salest – ln Salest–1 = b0 + b1(ln Salest–1 – ln Salest–2) + b2(ln Salest–4 – ln Salest–5)+εt?",
        "output": [
            "def solution():\n    # Define variables name and value\n    b0 = 0.0092\n    b1 = -0.1279\n    b2 = 0.7239\n    sales_t1 = 3.868\n    sales_t2 = 3.780\n    sales_t4 = 3.836\n    sales_t5 = 3.418\n\n    # Do math calculation to get the answer\n    ln_sales_t1 = math.log(sales_t1)\n    ln_sales_t2 = math.log(sales_t2)\n    ln_sales_t4 = math.log(sales_t4)\n    ln_sales_t5 = math.log(sales_t5)\n\n    ln_sales_t_minus_ln_sales_t1 = b0 + b1 * (ln_sales_t1 - ln_sales_t2) + b2 * (ln_sales_t4 - ln_sales_t5)\n    ln_sales_t = ln_sales_t_minus_ln_sales_t1 + ln_sales_t1\n    sales_t = math.exp(ln_sales_t)\n\n    # return answer\n    return round(sales_t, 3)"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-840",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Pinnacle Parcel sold items online on behalf of individuals under a consignment deal. Pinnacle would receive the goods from the owner, list them for online sale, and earn a 25 percent commission from any sold items. Pinnacle was responsible for collecting the full payment from the purchaser and would then pay the owner the remaining balance after deducting their commissions. If the items did not sell within 90 days, they would be returned to the owner. Throughout 2009, Pinnacle had the following records: The total sales price of items sold on consignment was €2,000,000. Pinnacle's commission on these items was €500,000 during 2009. What should Pinnacle declare as revenue in its 2009 income statement?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_sales = 2000000  # Total sales price of items sold on consignment\n    commission = 500000    # Pinnacle's commission on these items\n\n    # Do math calculation to get the answer\n    revenue = commission   # Pinnacle's revenue is equal to their commission\n\n    # return answer\n    return revenue\n```\n\nThis program calculates Pinnacle's revenue for 2009 based on the given information. In a consignment arrangement, the company acting as the consignee (Pinnacle in this case) only recognizes as revenue the commission they earn on the sales, not the full sale price of the items. Therefore, Pinnacle's revenue is equal to their commission of €500,000."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-841",
        "python_solution": "",
        "ground_truth": null,
        "question": "A valuer has been tasked with calculating the aggregated valuation discounts for a minor shareholding in a privately held firm. The valuer decided that a suitable control premium is 15 percent. A deduction due to the absence of marketability was approximated at 25 percent. In light of these parameters, what is the total discount?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    control_premium = 0.15\n    marketability_discount = 0.25\n    \n    # Do math calculation to get the answer\n    control_discount = control_premium / (1 + control_premium)\n    combined_discount = 1 - (1 - control_discount) * (1 - marketability_discount)\n    total_discount_percentage = combined_discount * 100\n    \n    # return answer\n    return total_discount_percentage\n```\n\nThis Python program calculates the total discount for the minor shareholding based on the given control premium and marketability discount. Here's how it works:\n\n1. We define the control premium (15% or 0.15) and marketability discount (25% or 0.25) as variables.\n\n2. We calculate the control discount from the control premium using the formula: control_discount = control_premium / (1 + control_premium)\n\n3. We then calculate the combined discount using the formula: 1 - (1 - control_discount) * (1 - marketability_discount)\n\n4. Finally, we convert the combined discount to a percentage by multiplying by 100.\n\n5. The program returns the total discount as a percentage.\n\nWhen you run this function, it will return the total discount percentage for the minor shareholding in the privately held firm."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-842",
        "python_solution": "",
        "ground_truth": null,
        "question": "From the given data, what will be the other comprehensive income considering, foreign currency conversion benefits amounting to 4, unrealized depreciation on available-for-sale securities sitting at 2, unrealized depreciation on securities held until their maturity estimating 1, and actuarial profits observing 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    foreign_currency_conversion = 4\n    unrealized_depreciation_available_for_sale = -2  # Depreciation is negative\n    unrealized_depreciation_held_to_maturity = -1  # Depreciation is negative\n    actuarial_profits = 2\n\n    # Do math calculation to get the answer\n    other_comprehensive_income = (\n        foreign_currency_conversion\n        + unrealized_depreciation_available_for_sale\n        + unrealized_depreciation_held_to_maturity\n        + actuarial_profits\n    )\n\n    # return answer\n    return other_comprehensive_income\n```\n\nThis Python program calculates the other comprehensive income based on the given data. Here's a breakdown of the calculation:\n\n1. We define variables for each component of other comprehensive income:\n   - Foreign currency conversion benefits: 4\n   - Unrealized depreciation on available-for-sale securities: -2 (negative because it's a depreciation)\n   - Unrealized depreciation on securities held until maturity: -1 (negative because it's a depreciation)\n   - Actuarial profits: 2\n\n2. We then sum up all these components to get the total other comprehensive income.\n\n3. The function returns the calculated other comprehensive income.\n\nWhen you run this function, it will return 3, which is the sum of all the components (4 - 2 - 1 + 2 = 3)."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-843",
        "python_solution": "",
        "ground_truth": null,
        "question": "Utilizing the given data to compute the total return on an equity share: Buying price: $20 Selling price: $28 Dividend received during the holding period: $1",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    buying_price = 20\n    selling_price = 28\n    dividend = 1\n\n    # Do math calculation to get the answer\n    capital_gain = selling_price - buying_price\n    total_return = capital_gain + dividend\n    total_return_percentage = (total_return / buying_price) * 100\n\n    # return answer\n    return total_return_percentage\n```\n\nThis Python program calculates the total return on an equity share based on the given information:\n\n1. We define the variables for the buying price, selling price, and dividend received.\n\n2. We calculate the capital gain by subtracting the buying price from the selling price.\n\n3. We compute the total return by adding the capital gain and the dividend received.\n\n4. We calculate the total return as a percentage of the initial investment (buying price) and multiply by 100 to express it as a percentage.\n\n5. Finally, we return the total return percentage.\n\nThe function will return the total return on the equity share as a percentage, which in this case would be 45.0% (((28 - 20 + 1) / 20) * 100)."
        ]
    },
    {
        "tables": [
            "|                                 |     |         |\n|---------------------------------|-----|---------|\n| Rate of return on 3-month Treasury bills  |     | 3.0%    |\n| Rate of return on 10-year Treasury bonds |     | 3.5%    |\n| Market risk premium                      |     | 6.0%    |\n| The company's equity beta               |     | 1.6     |\n| Dividend growth rate                    |     | 8.0%    |\n| Corporate tax rate                      |     | 35%     |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-844",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the percentage cost of equity for the organization using the CAPM approach and the collected data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.035  # 10-year Treasury bond rate\n    market_risk_premium = 0.06\n    equity_beta = 1.6\n\n    # Do math calculation to get the answer\n    cost_of_equity = risk_free_rate + (equity_beta * market_risk_premium)\n    \n    # Convert to percentage\n    cost_of_equity_percentage = cost_of_equity * 100\n\n    # return answer\n    return round(cost_of_equity_percentage, 2)\n```\n\nThis Python program calculates the cost of equity using the Capital Asset Pricing Model (CAPM) approach. Here's a breakdown of the solution:\n\n1. We define the necessary variables based on the provided data:\n   - The risk-free rate is set to 3.5% (0.035), which is the rate of return on 10-year Treasury bonds.\n   - The market risk premium is given as 6.0% (0.06).\n   - The company's equity beta is 1.6.\n\n2. We use the CAPM formula to calculate the cost of equity:\n   Cost of Equity = Risk-free rate + (Equity Beta * Market Risk Premium)\n\n3. We multiply the result by 100 to convert it to a percentage.\n\n4. Finally, we round the result to two decimal places and return it.\n\nThis program will return the percentage cost of equity for the organization using the CAPM approach."
        ]
    },
    {
        "tables": [
            "| Year | The return of this fund(%) |\n| ---- |------------------------ |\n| 2015 | 4.5                    |\n| 2014 | 3                      |\n| 2013 | 16                     |\n| 2012 | 20.1                   |\n| 2011 | -1                     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-845",
        "python_solution": "",
        "ground_truth": null,
        "question": "The annual return for a fund purchased by John is illustrated below: What will be the geometric mean of the fund?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [4.5, 3, 16, 20.1, -1]\n    num_years = len(returns)\n    \n    # Do math calculation to get the answer\n    product = 1\n    for r in returns:\n        product *= (1 + r/100)\n    \n    geometric_mean = (product ** (1/num_years) - 1) * 100\n    \n    # return answer\n    return round(geometric_mean, 2)\n```\n\nThis Python program calculates the geometric mean of the annual returns for the fund. Here's a breakdown of the solution:\n\n1. We define a list `returns` containing the annual returns as percentages.\n\n2. We calculate the number of years `num_years` using the length of the `returns` list.\n\n3. We initialize a `product` variable to 1, which will be used to calculate the cumulative product of (1 + return).\n\n4. We iterate through each return in the `returns` list:\n   - For each return, we add 1 to the percentage (divided by 100) and multiply it to our `product`.\n\n5. After the loop, we calculate the geometric mean using the formula:\n   geometric_mean = (product ^ (1/n) - 1) * 100\n   Where n is the number of years.\n\n6. We round the result to 2 decimal places for better readability.\n\n7. Finally, we return the calculated geometric mean.\n\nThis program will return the geometric mean of the fund's annual returns as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [
            "| Time | Value |\n| --- | --- |\n| Time=0 | SO=80 |\n| Time=1 | Su=88 |\n| Time=1 | Sd=72 |\n| Time=2 | Suu=96.80 |\n| Time=2 | Sud,du=79.20 |\n| Time=2 | Sdd=64.80 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-846",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering a security's anticipated price fluctuation for the next two durations as follows: The starting price of the security is $80. There's a 75% chance of a rise in any given duration and a 25% chance of a decline in any given duration. Employing the binomial model, what are the chances that the security's value will stand at $79.20 after two durations?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 80\n    up_probability = 0.75\n    down_probability = 0.25\n    target_price = 79.20\n\n    # Do math calculation to get the answer\n    # The probability of reaching 79.20 after two periods is the probability\n    # of one up move and one down move (in either order)\n    \n    # Probability of up then down\n    prob_up_down = up_probability * down_probability\n    \n    # Probability of down then up\n    prob_down_up = down_probability * up_probability\n    \n    # Total probability of reaching 79.20\n    total_probability = prob_up_down + prob_down_up\n\n    # return answer\n    return total_probability\n```\n\nThis program calculates the probability of the security's value being $79.20 after two durations using the binomial model. Here's how it works:\n\n1. We define the initial variables: the starting price, the probability of an upward move, the probability of a downward move, and the target price we're interested in.\n\n2. To reach $79.20 after two periods, we need one upward move and one downward move, in either order (up then down, or down then up).\n\n3. We calculate the probability of an up move followed by a down move: 0.75 * 0.25\n\n4. We calculate the probability of a down move followed by an up move: 0.25 * 0.75\n\n5. We sum these probabilities to get the total probability of reaching $79.20 after two periods.\n\n6. The function returns this total probability as the answer.\n\nThis solution assumes that the order of up and down movements doesn't matter for reaching the final price of $79.20, which is consistent with the given price tree."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-847",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment firm possesses the subsequent fee structure: 2% Annual management fee dependent on year-end AUM, 20% Incentive fee, and a 4% Hurdle rate prior to starting incentive fee collection. The current high-water mark is at $610 million. The firm's value was $583.1 million at start of the year and reached $642 million before the fees deduction after a year. What would be the net return to an investor for this year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    start_value = 583.1e6\n    end_value_before_fees = 642e6\n    high_water_mark = 610e6\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.04\n\n    # Do math calculation to get the answer\n    management_fee = end_value_before_fees * management_fee_rate\n    \n    hurdle_amount = start_value * hurdle_rate\n    performance_above_hurdle = end_value_before_fees - start_value - hurdle_amount\n    \n    if performance_above_hurdle > 0:\n        incentive_fee = min(performance_above_hurdle, end_value_before_fees - high_water_mark) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    total_fees = management_fee + incentive_fee\n    end_value_after_fees = end_value_before_fees - total_fees\n    \n    net_return = (end_value_after_fees / start_value) - 1\n\n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-848",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is an entrepreneur who sells socks in the nearby marketplace. If he sells 100 pairs of socks, he generates an earning of $500. However, if he managed to sell 120 pairs, his overall income would be $590. What is the marginal revenue for socks if the market capacity is 120 pairs?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    socks_100 = 100\n    revenue_100 = 500\n    socks_120 = 120\n    revenue_120 = 590\n    \n    # Do math calculation to get the answer\n    additional_socks = socks_120 - socks_100\n    additional_revenue = revenue_120 - revenue_100\n    marginal_revenue = additional_revenue / additional_socks\n    \n    # return answer\n    return marginal_revenue\n```\n\nThis Python program calculates the marginal revenue for socks based on the given information. Here's how it works:\n\n1. We define the variables for the two scenarios: selling 100 pairs of socks for $500 and selling 120 pairs for $590.\n\n2. We calculate the additional number of socks sold (20) and the additional revenue generated ($90).\n\n3. The marginal revenue is then calculated by dividing the additional revenue by the additional number of socks sold.\n\n4. The function returns the marginal revenue, which represents the additional revenue generated for each additional pair of socks sold when increasing production from 100 to 120 pairs.\n\nWhen you run this function, it will return the marginal revenue, which is $4.50 per additional pair of socks."
        ]
    },
    {
        "tables": [
            "| Year 1 | 15.25% | Year 6 | 30.79% |\n|--------|--------|--------|--------|\n| Year 2 | -10.02% | Year 7 | 12.34% |\n| Year 3 | 20.65% | Year 8 | -5.02% |\n| Year 4 | 9.57% | Year 9 | 16.54% |\n| Year 5 | -40.33% | Year 10 | 27.37% |"
        ],
        "topic": "Accounting",
        "question_id": "test-849",
        "python_solution": "",
        "ground_truth": null,
        "question": "What does the exhibit indicate as the return for the fourth quintile for the MSCI World Index over a span of 10 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [15.25, -10.02, 20.65, 9.57, -40.33, 30.79, 12.34, -5.02, 16.54, 27.37]\n    \n    # Do math calculation to get the answer\n    sorted_returns = sorted(returns)\n    quintile_size = len(returns) // 5\n    fourth_quintile_start = quintile_size * 3\n    fourth_quintile_end = quintile_size * 4\n    fourth_quintile = sorted_returns[fourth_quintile_start:fourth_quintile_end]\n    answer = fourth_quintile[0]\n    \n    # return answer\n    return answer\n```\n\nThis Python program does the following:\n\n1. It defines a list `returns` containing all the return percentages from the given table.\n\n2. It sorts the returns in ascending order.\n\n3. It calculates the size of each quintile by dividing the total number of returns by 5.\n\n4. It determines the start and end indices of the fourth quintile.\n\n5. It extracts the fourth quintile from the sorted returns.\n\n6. It selects the first (lowest) value in the fourth quintile as the answer, which represents the return for the fourth quintile.\n\n7. Finally, it returns this answer.\n\nThis program will return the correct value for the fourth quintile of returns over the 10-year period for the MSCI World Index based on the given data."
        ]
    },
    {
        "tables": [
            "| Transaction  Amount | (US$ millions) |\n|---------------------|----------------|\n| Bought raw material from Indonesia | 50.0 |\n| Sold food products to France | 65.0 |\n| Received royalty fees from its branch in the United Kingdom | 0.5 |\n| Donated to a charitable institution in Africa | 0.1 |\n| Borrowed from a bank in Singapore | 2.0 |\n| Paid legal fees to its German legal consultant company | 1.2 |\n| Received interest coupon from its investment in Eurobonds issued in Luxembourg | 0.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-850",
        "python_solution": "",
        "ground_truth": null,
        "question": "Over the past month, a food corporation based in the US had these transactions: How much is the US current account expected to increase by due to these transactions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sold_to_france = 65.0\n    royalty_from_uk = 0.5\n    interest_from_luxembourg = 0.8\n    bought_from_indonesia = -50.0\n    donated_to_africa = -0.1\n    paid_to_germany = -1.2\n\n    # Do math calculation to get the answer\n    current_account_change = (sold_to_france + royalty_from_uk + interest_from_luxembourg + \n                              bought_from_indonesia + donated_to_africa + paid_to_germany)\n\n    # return answer\n    return current_account_change\n```\n\nThis Python program calculates the change in the US current account based on the provided transactions. Here's an explanation of the calculation:\n\n1. We include positive values for exports of goods and services, and income receipts:\n   - Sold food products to France: +65.0\n   - Received royalty fees from UK: +0.5\n   - Received interest from Luxembourg: +0.8\n\n2. We include negative values for imports of goods and services, and transfers:\n   - Bought raw material from Indonesia: -50.0\n   - Donated to Africa (unilateral transfer): -0.1\n   - Paid legal fees to Germany: -1.2\n\n3. We don't include the borrowing from Singapore as it's a financial account transaction, not a current account transaction.\n\n4. We sum up all these values to get the total change in the current account.\n\nThe program will return the calculated change in the US current account due to these transactions."
        ]
    },
    {
        "tables": [
            "| Accounts payable | 3,800 |\n|------------------|-------|\n| Long-term debt | 5,590 |\n| Other long-term liabilities | 800 |\n| Common stock | 1,200 |\n| Retained earnings | 1,810 |"
        ],
        "topic": "Accounting",
        "question_id": "test-851",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the debt-to-capital ratio of the firm as per the latest balance sheet showcasing the following values (NZ$ thousands)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    accounts_payable = 3800\n    long_term_debt = 5590\n    other_long_term_liabilities = 800\n    common_stock = 1200\n    retained_earnings = 1810\n\n    # Do math calculation to get the answer\n    total_debt = accounts_payable + long_term_debt + other_long_term_liabilities\n    total_equity = common_stock + retained_earnings\n    total_capital = total_debt + total_equity\n    \n    debt_to_capital_ratio = total_debt / total_capital\n\n    # return answer\n    return round(debt_to_capital_ratio, 4)\n```\n\nThis Python program calculates the debt-to-capital ratio based on the provided balance sheet information. Here's a breakdown of the calculation:\n\n1. We define variables for each component from the balance sheet.\n2. We calculate the total debt by summing accounts payable, long-term debt, and other long-term liabilities.\n3. We calculate total equity by summing common stock and retained earnings.\n4. We calculate total capital by adding total debt and total equity.\n5. The debt-to-capital ratio is calculated by dividing total debt by total capital.\n6. The result is rounded to 4 decimal places for precision.\n\nThe program will return the debt-to-capital ratio as a decimal. To convert it to a percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-852",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume you simulate the price path of stock ZYX using a geometric Brownian motion model with drift μ = 0, volatility σ = 0.14, and time step Δ = 0.01. Let StS_t St​ be the price of the stock at time t. If S0S_0S0​ = 100, and the first two simulated (randomly chosen) standard normal variables are ε1 \\varepsilon_1 ε1​ = 0.263 and ε2 \\varepsilon_2 ε2​= -0.475, what is the simulated stock price after the second step?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 100  # Initial stock price\n    sigma = 0.14  # Volatility\n    delta_t = 0.01  # Time step\n    epsilon1 = 0.263  # First standard normal variable\n    epsilon2 = -0.475  # Second standard normal variable\n\n    # Do math calculation to get the answer\n    # Calculate S1 (stock price after first step)\n    S1 = S0 * math.exp(-0.5 * sigma**2 * delta_t + sigma * math.sqrt(delta_t) * epsilon1)\n    \n    # Calculate S2 (stock price after second step)\n    S2 = S1 * math.exp(-0.5 * sigma**2 * delta_t + sigma * math.sqrt(delta_t) * epsilon2)\n\n    # return answer\n    return S2\n```\n\nThis Python program calculates the simulated stock price after the second step using the geometric Brownian motion model. Here's a breakdown of the calculation:\n\n1. We start with the initial stock price S0 = 100.\n2. We calculate S1 (the stock price after the first step) using the formula:\n   S1 = S0 * exp(-0.5 * σ^2 * Δt + σ * sqrt(Δt) * ε1)\n3. We then calculate S2 (the stock price after the second step) using the same formula, but starting from S1:\n   S2 = S1 * exp(-0.5 * σ^2 * Δt + σ * sqrt(Δt) * ε2)\n\nThe program returns S2 as the final answer, which represents the simulated stock price after the second step.\n\nNote: The math.exp() and math.sqrt() functions are used for exponential and square root calculations. You may need to import the math module at the beginning of your script with `import math` for these functions to work."
        ]
    },
    {
        "tables": [
            "|                          |                       |\n|--------------------------|-----------------------|\n| Demand curve             | P = 150-5xQ           |\n| Total revenue curve      | TR =150xQ-5xQ2        |\n| Marginal revenue curve   | MR =150-10xQ          |\n| Total cost curve         | TC = Q^3-10xQ^2+73xQ+120 |\n| Average cost curve       | AC = Q-10xQ +73 +120/Q  |\n| Marginal cost curve      | MC=3xQ^2-20xQ+73      |\n|                          | P: price per unit Q: cost per unit    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-853",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the output, in units, that maximizes profit for this organization, based on the developed equations provided for the business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    from sympy import symbols, diff, solve\n\n    Q = symbols('Q')\n    MR = 150 - 10*Q\n    MC = 3*Q**2 - 20*Q + 73\n\n    # Do math calculation to get the answer\n    # Profit is maximized when MR = MC\n    profit_max_equation = MR - MC\n    \n    # Solve the equation\n    optimal_Q = solve(profit_max_equation, Q)\n    \n    # The solution might return complex numbers, we want the real positive solution\n    optimal_Q = [q for q in optimal_Q if q.is_real and q > 0][0]\n    \n    # Convert to float and round to nearest integer\n    answer = round(float(optimal_Q))\n\n    # return answer\n    return answer\n```\n\nThis Python program uses the SymPy library to symbolically solve the equation for profit maximization. Here's what it does:\n\n1. It defines the Marginal Revenue (MR) and Marginal Cost (MC) equations using the provided formulas.\n2. It sets up the profit maximization condition: MR = MC.\n3. It solves this equation to find the quantity Q that satisfies this condition.\n4. It filters the solutions to get only the real, positive solution.\n5. Finally, it rounds this solution to the nearest integer to get the optimal quantity in whole units.\n\nThe program will return the output quantity that maximizes profit for the organization based on the given equations."
        ]
    },
    {
        "tables": [
            "|  X  | Y=5 | Y=2 | Y=-3 |\n|-----|-----|-----|------|\n| -2  | 0.2 |  0  |   0   |\n|  1  |  0  | 0.6 |   0   |\n|  4  |  0  |  0  |  0.2  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-854",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided chart, what is the variance of Y?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    y_values = [5, 2, -3]\n    probabilities = [0.2, 0.6, 0.2]\n    \n    # Do math calculation to get the answer\n    \n    # Calculate mean\n    mean = sum([y * p for y, p in zip(y_values, probabilities)])\n    \n    # Calculate variance\n    variance = sum([(y - mean)**2 * p for y, p in zip(y_values, probabilities)])\n    \n    # return answer\n    return variance\n```\n\nThis Python program calculates the variance of Y based on the provided chart. Here's how it works:\n\n1. We define two lists: `y_values` containing the possible values of Y, and `probabilities` containing their respective probabilities.\n\n2. We calculate the mean (expected value) of Y using a list comprehension that multiplies each Y value by its probability and then sums these products.\n\n3. We calculate the variance using the formula: Σ((Y - μ)^2 * P(Y)), where μ is the mean. This is done using another list comprehension.\n\n4. Finally, we return the calculated variance.\n\nThis program will return the variance of Y as requested."
        ]
    },
    {
        "tables": [
            "| Par Value         | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n|-------------------|------------|--------|-------------------|--------------------|-----------|\n| $25million        | 105        | 8%     | 7.9               | 8                  | 122       |\n| $25million        | 100        | 7%     | 8.5               | 8.5                | 154       |\n| $20million        | 95         | 5%     | 6.3               | 2                  | 87        |\n| $30million        | 87         | 0%     | 10.2              | 10.2               | 32        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-855",
        "python_solution": "",
        "ground_truth": null,
        "question": "Referring to the table with pertinent data about four bonds in a portfolio, what is the price fluctuation for the bond with an 8% interest rate using effective duration, if its YTM drops by 10 basis points?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price = 105\n    effective_duration = 8\n    yield_change = 0.001  # 10 basis points = 0.1% = 0.001\n\n    # Do math calculation to get the answer\n    price_change_percentage = effective_duration * yield_change * 100\n    price_change = bond_price * price_change_percentage / 100\n\n    # return answer\n    return round(price_change, 4)\n```\n\nThis Python program calculates the price fluctuation for the bond with an 8% interest rate using effective duration, given a 10 basis point drop in YTM (Yield to Maturity).\n\nHere's an explanation of the calculation:\n\n1. We use the bond with 8% coupon, which has a price of 105 and an effective duration of 8.\n\n2. A 10 basis point change is equivalent to 0.1% or 0.001 in decimal form.\n\n3. The formula for price change using effective duration is:\n   Price Change % ≈ -Effective Duration * Yield Change\n\n4. We calculate the price change percentage and then apply it to the bond price to get the actual price change in dollar terms.\n\n5. The result is rounded to 4 decimal places for precision.\n\nThis program will return the price fluctuation in dollar terms. A positive result indicates an increase in price (which we expect, as yield dropped), while a negative result would indicate a decrease in price."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-856",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the 2017 annual report data from company B, what is the debt/capital ratio of company B? Given Depreciation and amortization: $265 million, Total assets: $11,324 million, Total debt: $1,756 million, and Shareholders' equity: $5,217 million.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_debt = 1756  # in millions\n    shareholders_equity = 5217  # in millions\n\n    # Do math calculation to get the answer\n    total_capital = total_debt + shareholders_equity\n    debt_capital_ratio = total_debt / total_capital\n\n    # return answer\n    return debt_capital_ratio\n```\n\nThis Python function calculates the debt/capital ratio for company B based on the given information from their 2017 annual report. Here's a breakdown of the calculation:\n\n1. We define the variables for total debt and shareholders' equity using the provided data.\n2. We calculate the total capital by adding total debt and shareholders' equity.\n3. The debt/capital ratio is calculated by dividing total debt by total capital.\n4. The function returns the calculated debt/capital ratio.\n\nNote that the depreciation and amortization, and total assets figures are not needed for this specific calculation, so they are not used in the function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-857",
        "python_solution": "",
        "ground_truth": null,
        "question": "A futures contract for a stock index has two months left until it matures. The annual risk-free rate, when compounded continuously, is 0.25%, while the dividend yield on the stock index, also compounded continuously, is 0.8%. If the index is currently at 1,350, what would be the no-arbitrage futures price?",
        "output": [
            "Here's the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_index = 1350\n    time_to_maturity = 2 / 12  # 2 months expressed in years\n    risk_free_rate = 0.0025  # 0.25% expressed as a decimal\n    dividend_yield = 0.008  # 0.8% expressed as a decimal\n\n    # Do math calculation to get the answer\n    futures_price = current_index * math.exp((risk_free_rate - dividend_yield) * time_to_maturity)\n\n    # return answer\n    return round(futures_price, 2)\n\nimport math\n```\n\nThis program calculates the no-arbitrage futures price for the stock index futures contract using the following steps:\n\n1. We define the variables with the given information:\n   - The current index value is 1,350\n   - Time to maturity is 2 months, which is expressed as 2/12 years\n   - The risk-free rate is 0.25% (0.0025 in decimal form)\n   - The dividend yield is 0.8% (0.008 in decimal form)\n\n2. We use the futures pricing formula for an index with a known dividend yield:\n   F = S * e^((r - q) * T)\n   Where:\n   F = Futures price\n   S = Current index value\n   r = Risk-free rate\n   q = Dividend yield\n   T = Time to maturity in years\n\n3. We calculate the futures price using this formula and the math.exp() function for the exponential calculation.\n\n4. Finally, we round the result to two decimal places and return it.\n\nThe program will return the no-arbitrage futures price for the given scenario."
        ]
    },
    {
        "tables": [
            "|            |                |\n|------------|----------------|\n| Table1: Forward Rates | |\n| Maturity   | Forward Points |\n| Three months | 5.3/6.1        |\n| Six months | 7.8/8.9        |\n| 90-Day Libor | |\n| Currency   | Annualized Rate|\n| GBP        | 0.60%          |\n| USD        | 0.45%          |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-858",
        "python_solution": "",
        "ground_truth": null,
        "question": "The American company named BBQ Company has exported steel to an English firm and is expected to receive payment of 3,600,000 GBP in six months, which the firm will then convert into dollars. To protect against currency risk, BBQ Company decided to enter into a 6 month forward contract to sell GBP at 1.5512USD/GBP. After three months have passed, now, the spot exchange market rate is 1.5500 USD/GBP for bid and 1.5505 for ask. Given the information on the spot exchange market rate, forward rates, and the 90-Day Libor, what is the mark-to-market value for BBQ Company's forward position?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    contract_amount_gbp = 3600000\n    forward_rate = 1.5512\n    spot_bid = 1.5500\n    spot_ask = 1.5505\n    forward_points_bid = 7.8\n    forward_points_ask = 8.9\n    gbp_libor = 0.0060\n    usd_libor = 0.0045\n    days_to_maturity = 90\n\n    # Do math calculation to get the answer\n    \n    # Calculate the forward rate for the remaining 3 months\n    forward_rate_3m = spot_ask + (forward_points_ask / 10000)\n    \n    # Calculate the interest rate differential\n    interest_diff = gbp_libor - usd_libor\n    \n    # Calculate the theoretical forward rate\n    theoretical_forward = spot_ask * (1 + interest_diff * (days_to_maturity / 360))\n    \n    # Calculate the mark-to-market value\n    mtm_value = contract_amount_gbp * (forward_rate - theoretical_forward)\n\n    # return answer\n    return mtm_value\n\n```\n\nThis Python function calculates the mark-to-market value for BBQ Company's forward position based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the necessary variables based on the given information.\n\n2. We calculate the forward rate for the remaining 3 months using the spot ask rate and the 6-month forward points (ask).\n\n3. We calculate the interest rate differential between GBP and USD using the given LIBOR rates.\n\n4. We then calculate the theoretical forward rate using the spot ask rate, interest rate differential, and the remaining days to maturity.\n\n5. Finally, we calculate the mark-to-market value by multiplying the contract amount in GBP by the difference between the contracted forward rate and the theoretical forward rate.\n\nThe function returns this mark-to-market value, which represents the current value of BBQ Company's forward position."
        ]
    },
    {
        "tables": [
            "| Account Name                              | Amount ($ billions) |\n| ---------------------------------------- | ------------------- |\n| Personal income                          | 2,456               |\n| Personal disposable income               | 1,930               |\n| Government spending                      | 666                 |\n| Government fixed investment              | 118                 |\n| Business gross fixed investment          | 538                 |\n| Government transfer payments to consumers| 348                 |\n| Total domestic savings                   | 638                 |\n| Tax revenue other than from households   | 440                 |\n| Change in inventories                    | -16                 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-859",
        "python_solution": "",
        "ground_truth": null,
        "question": "Chosen data is extracted from the GDP statistics of a fictitious nation. What is the trade shortfall in $ trillions for this nation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    personal_income = 2456\n    personal_disposable_income = 1930\n    government_spending = 666\n    government_fixed_investment = 118\n    business_gross_fixed_investment = 538\n    government_transfer_payments = 348\n    total_domestic_savings = 638\n    non_household_tax_revenue = 440\n    inventory_change = -16\n    \n    # Do math calculation to get the answer\n    \n    # Calculate personal taxes\n    personal_taxes = personal_income - personal_disposable_income\n    \n    # Calculate total government revenue\n    total_government_revenue = personal_taxes + non_household_tax_revenue\n    \n    # Calculate total investment\n    total_investment = government_fixed_investment + business_gross_fixed_investment + inventory_change\n    \n    # Calculate GDP using expenditure approach\n    gdp = personal_disposable_income + total_investment + government_spending + (total_government_revenue - government_spending - government_transfer_payments)\n    \n    # Calculate trade deficit (Net Exports)\n    trade_deficit = gdp - (personal_disposable_income + total_investment + government_spending)\n    \n    # Convert to trillions\n    trade_deficit_trillions = trade_deficit / 1000\n    \n    # return answer\n    return trade_deficit_trillions\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-860",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Chief Vice President of XY investment requests John to apply the market approach to assessment prioritizing the guideline transactions methodology. John states that the control premium paid for the most comparable guideline company used for the evaluation implies a lack of control discount of 15 percent. The discount for absence of marketability was assessed at 20 percent. What is the cumulative discount for both control and marketability?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lack_of_control_discount = 0.15\n    lack_of_marketability_discount = 0.20\n    \n    # Do math calculation to get the answer\n    # The cumulative discount is calculated by applying the discounts sequentially\n    # First, we apply the lack of control discount\n    value_after_control_discount = 1 - lack_of_control_discount\n    \n    # Then, we apply the lack of marketability discount to the remaining value\n    final_value = value_after_control_discount * (1 - lack_of_marketability_discount)\n    \n    # The cumulative discount is the difference between the original value (1) and the final value\n    cumulative_discount = 1 - final_value\n    \n    # Convert to percentage\n    cumulative_discount_percentage = cumulative_discount * 100\n    \n    # return answer\n    return cumulative_discount_percentage\n```\n\nThis Python program calculates the cumulative discount for both control and marketability as requested in the question. Here's how it works:\n\n1. We define the two discount rates: 15% for lack of control and 20% for lack of marketability.\n\n2. We apply these discounts sequentially, as they compound on each other:\n   - First, we apply the lack of control discount, leaving us with 85% of the original value.\n   - Then, we apply the lack of marketability discount to this remaining value.\n\n3. The cumulative discount is the difference between the original value (100%) and the final value after both discounts have been applied.\n\n4. Finally, we convert this to a percentage for easier interpretation.\n\nThe program will return the cumulative discount as a percentage, which answers the question asked."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-861",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an economy, there exist two firms, Firm X and Firm Y. The default rate for Firm X stands at 10%, while for Firm Y, it is 20%. Presuming defaults for both firms happen independently, what is the likelihood that either Firm X or Firm Y defaults?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    default_rate_x = 0.10  # 10% default rate for Firm X\n    default_rate_y = 0.20  # 20% default rate for Firm Y\n    \n    # Do math calculation to get the answer\n    probability_neither_defaults = (1 - default_rate_x) * (1 - default_rate_y)\n    probability_either_defaults = 1 - probability_neither_defaults\n    \n    # return answer\n    return probability_either_defaults\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The probability that either Firm X or Firm Y defaults is: {result:.4f}\")\n```\n\nThis program calculates the probability that either Firm X or Firm Y defaults. Here's how it works:\n\n1. We define the default rates for both firms as decimals.\n2. We calculate the probability that neither firm defaults by multiplying the probabilities of each firm not defaulting: (1 - 0.10) * (1 - 0.20).\n3. The probability that either firm defaults is the complement of the probability that neither defaults, so we subtract the result from step 2 from 1.\n4. The function returns this final probability.\n\nWhen you run this program, it will output the probability that either Firm X or Firm Y defaults, which is approximately 0.2800 or 28%."
        ]
    },
    {
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity | Spot Rates |\n|------|-------------|------------------|------------|\n| X    | 8%          | 3 years          | 8%         |\n| Y    | 7%          | 3 years          | 9%         |\n| Z    | 6%          | 3 years          | 10%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-862",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the same sequence of spot rates, what is the cost of Bond X?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08\n    face_value = 100  # Assuming a face value of 100\n    years = 3\n    spot_rate = 0.08\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    pv_coupons = coupon_payment * ((1 - (1 + spot_rate)**(-years)) / spot_rate)\n    pv_face_value = face_value / (1 + spot_rate)**years\n    \n    bond_price = pv_coupons + pv_face_value\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of Bond X given the spot rate of 8% for 3 years. Here's a breakdown of the calculation:\n\n1. We define the coupon rate (8%), face value (assumed to be 100), number of years (3), and the spot rate (8%).\n\n2. We calculate the annual coupon payment.\n\n3. We calculate the present value of the coupon payments using the formula for the present value of an annuity.\n\n4. We calculate the present value of the face value to be received at maturity.\n\n5. We sum these two present values to get the bond price.\n\n6. We round the result to two decimal places for a more standard financial representation.\n\nThe program will return the calculated price of Bond X, which should be the cost of the bond given the provided spot rates."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-863",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Greenleaf company employs an exponentially weighted moving average model (EWMA) to predict the daily volatility of a stock. With a decay factor of 0.85, the latest estimate for daily volatility sits at 2.5%. If the stock closed at $35 yesterday and stands at $33 today, assuming we use continuously compounded returns, what would be the revised estimate of volatility?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    decay_factor = 0.85\n    previous_volatility = 0.025  # 2.5% in decimal form\n    previous_price = 35\n    current_price = 33\n    \n    # Do math calculation to get the answer\n    import math\n    \n    # Calculate the daily return\n    daily_return = math.log(current_price / previous_price)\n    \n    # Calculate the squared return\n    squared_return = daily_return ** 2\n    \n    # Update the volatility estimate using EWMA\n    new_volatility = math.sqrt(decay_factor * previous_volatility**2 + (1 - decay_factor) * squared_return)\n    \n    # Convert to percentage\n    new_volatility_percentage = new_volatility * 100\n    \n    # return answer\n    return round(new_volatility_percentage, 4)\n```\n\nThis Python program calculates the revised estimate of volatility using the Exponentially Weighted Moving Average (EWMA) model. Here's a breakdown of the steps:\n\n1. We define the given variables: decay factor, previous volatility estimate, previous closing price, and current price.\n\n2. We calculate the daily return using the continuously compounded return formula: ln(current price / previous price).\n\n3. We square the daily return.\n\n4. We update the volatility estimate using the EWMA formula: √(λ * σ²t-1 + (1-λ) * r²t), where λ is the decay factor, σ²t-1 is the previous volatility estimate squared, and r²t is the squared return.\n\n5. We convert the new volatility estimate to a percentage.\n\n6. Finally, we return the result rounded to 4 decimal places.\n\nThis program will return the revised estimate of volatility as a percentage."
        ]
    },
    {
        "tables": [
            "\n|                | Coefficient | Standard Error |\n|----------------|-------------|----------------|\n| Intercept      | 0.2248      |                |\n| Sizei          | -0.012      |                |\n| D/Ei           | -0.0172     | 0.00986        |\n|                |             |                |\n| **ANOVA**      | **Degrees of freedom** | **Sum of squares** |\n| Regression     | 2           | 0.0960         |\n| Residual       | 69          | 0.5704         |\n\nNote: Sizei= In (market capitalization)\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-864",
        "python_solution": "",
        "ground_truth": null,
        "question": "An analyst with an investment management firm named James Collins is examining the consequences of leverage on yearly ROE in the company's Eurozone equities fund (\"the fund\"). He gathers data on the 72 stocks in the fund, taking company size as an independent variable. The results of estimating the model Ri = b0 + b1(Sizei) + b2(D/Ei) + ει are shown in Exhibit 1. Collins compares the projections of his model to the actual ROE for two portfolio stocks, X and Y, both with identical debt ratios but with market capitalizations of EUR 100 million and 200 million respectively. According to Collins' regression analysis, how much higher is the ROE for company X than for company Y (in percentage points)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    b1 = -0.012  # coefficient for Size\n    size_X = 100  # market cap of company X in millions\n    size_Y = 200  # market cap of company Y in millions\n\n    # Do math calculation to get the answer\n    ln_size_X = math.log(size_X)\n    ln_size_Y = math.log(size_Y)\n    \n    ROE_diff = b1 * (ln_size_X - ln_size_Y)\n    \n    # Convert to percentage points\n    ROE_diff_percentage = ROE_diff * 100\n\n    # return answer\n    return abs(ROE_diff_percentage)\n```\n\nThis solution calculates the difference in ROE between companies X and Y based on the regression model provided. Here's a breakdown of the steps:\n\n1. We define the coefficient for Size (b1) as -0.012 from the given table.\n2. We set the market capitalizations for companies X and Y as 100 million and 200 million euros respectively.\n3. We calculate the natural logarithm of each company's size, as the model uses ln(market capitalization).\n4. We calculate the difference in ROE using the formula: b1 * (ln(size_X) - ln(size_Y)).\n5. We convert this difference to percentage points by multiplying by 100.\n6. We return the absolute value of this difference, as the question asks how much higher the ROE is for company X compared to Y.\n\nNote that we use the `abs()` function to ensure a positive result, as the question asks for the magnitude of the difference, not the direction. The `math.log()` function is used for natural logarithm calculation, so you would need to import the math module at the beginning of your script."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-865",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming John Smith has short-sold 100 shares of Mega Marts at a rate of $42 for each share and concurrently placed a \"good-till-cancelled, stop 50, limit 55 buy\" order, which would be executed once the stipulated stop condition is met, what is the highest potential loss Smith may incur, ignoring transaction expenses?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    short_sell_price = 42\n    shares_sold = 100\n    stop_price = 50\n    limit_price = 55\n\n    # Do math calculation to get the answer\n    short_sell_proceeds = short_sell_price * shares_sold\n    max_buyback_cost = limit_price * shares_sold\n    max_loss = max_buyback_cost - short_sell_proceeds\n\n    # return answer\n    return max_loss\n```\n\nThis Python program calculates the highest potential loss John Smith may incur in the given short-selling scenario. Here's how it works:\n\n1. We define the variables:\n   - `short_sell_price`: The price at which John sold the shares short ($42)\n   - `shares_sold`: The number of shares sold short (100)\n   - `stop_price`: The stop price in the buy order ($50)\n   - `limit_price`: The limit price in the buy order ($55)\n\n2. We calculate:\n   - `short_sell_proceeds`: The amount John received from short-selling (42 * 100 = $4,200)\n   - `max_buyback_cost`: The maximum cost to buy back the shares (55 * 100 = $5,500)\n   - `max_loss`: The difference between the maximum buyback cost and the short-sell proceeds\n\n3. We return the `max_loss`, which represents the highest potential loss John may incur.\n\nThe program ignores transaction expenses as specified in the question. The highest potential loss occurs if John has to buy back the shares at the limit price of $55, which is the maximum price he would pay given the \"limit 55\" condition in the buy order."
        ]
    },
    {
        "tables": [
            "| Par value of preferred stock offered at a 6% dividend rate | 100  |\n|---------------------------------------------------|------|\n| Company's sustainable growth rate                 | 5%   |\n| Yield on comparable preferred stock issues        | 11.5%|\n| Investor's marginal tax rate                      | 30%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-866",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the calculated worth of the preferred shares of the corporation, based on the data collected by a shareholder?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    dividend_rate = 0.06\n    comparable_yield = 0.115\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    annual_dividend = par_value * dividend_rate\n    after_tax_yield = comparable_yield * (1 - tax_rate)\n    share_worth = annual_dividend / after_tax_yield\n\n    # return answer\n    return round(share_worth, 2)\n```\n\nThis Python program calculates the worth of the preferred shares based on the given data:\n\n1. We define the variables based on the provided table:\n   - Par value of preferred stock: 100\n   - Dividend rate: 6% (0.06)\n   - Yield on comparable preferred stock issues: 11.5% (0.115)\n   - Investor's marginal tax rate: 30% (0.30)\n\n2. We calculate the annual dividend by multiplying the par value by the dividend rate.\n\n3. We calculate the after-tax yield by multiplying the comparable yield by (1 - tax rate).\n\n4. The worth of the share is calculated by dividing the annual dividend by the after-tax yield.\n\n5. We round the result to two decimal places for a more practical representation of currency.\n\n6. The program returns this calculated value.\n\nWhen you run this function, it will return the calculated worth of the preferred shares based on the shareholder's data."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-867",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following is the demand function for smartphones: QDmobile=10,000-2Pmobile+0.05income+2Pfixed-linetelephone-5Pwireless. As of now, a smartphone is priced at 3,000 RMB, while a landline and wireless solutions are priced at 1500 RMB and 500 RMB, respectively. With an assumption that income is 10,000 RMB, what would be the respective income elasticity of demand for a smartphone?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_mobile = 3000\n    P_fixed_line = 1500\n    P_wireless = 500\n    income = 10000\n    \n    # Do math calculation to get the answer\n    Q_mobile = 10000 - 2*P_mobile + 0.05*income + 2*P_fixed_line - 5*P_wireless\n    \n    # Calculate income elasticity\n    # Income elasticity = (% change in quantity) / (% change in income)\n    # We'll use the point elasticity formula: (dQ/dI) * (I/Q)\n    \n    dQ_dI = 0.05  # From the demand function\n    elasticity = dQ_dI * (income / Q_mobile)\n    \n    # return answer\n    return elasticity\n```\n\nThis Python program calculates the income elasticity of demand for smartphones based on the given demand function and current prices. Here's a breakdown of the solution:\n\n1. We define the variables for the prices of mobile phones, fixed-line telephones, and wireless solutions, as well as the income.\n\n2. We calculate the quantity demanded (Q_mobile) using the given demand function.\n\n3. To calculate the income elasticity, we use the point elasticity formula: (dQ/dI) * (I/Q), where dQ/dI is the partial derivative of quantity with respect to income (which is 0.05 from the demand function), I is the income, and Q is the quantity demanded.\n\n4. We calculate the elasticity and return it as the answer.\n\nThis program will return the income elasticity of demand for smartphones under the given conditions."
        ]
    },
    {
        "tables": [
            "| Magnitude of the Parallel Shift in the Benchmark Yield Curve | +20bps | -20bps |\n|-------------------------------------------------------------|--------|--------|\n| Full Price of the Bond (% of par)                           | 100.478| 101.238|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-868",
        "python_solution": "",
        "ground_truth": null,
        "question": "The SW bond offers a 4% annual coupon and matures in three years. It's a callable bond that could be exercised at par at the conclusion of years 1 and 2. In calculating and assessing SW's bonds, Huang employs a projected interest rate volatility of 15% and develops the binomial interest rate tree as outlined in the Exhibit below. Green, a lead analyst, instructs Huang to determine the impact of a 20 bps parallel shift of the benchmark yield curve on the price of this callable bond. What does Huang's computations reveal in the table below about the effective duration of SW's callable bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_plus_20bps = 100.478\n    price_minus_20bps = 101.238\n    shift = 0.0040  # 40 bps total shift (from -20 to +20)\n\n    # Do math calculation to get the answer\n    price_change = price_minus_20bps - price_plus_20bps\n    avg_price = (price_minus_20bps + price_plus_20bps) / 2\n    effective_duration = price_change / (avg_price * shift)\n\n    # return answer\n    return effective_duration\n```\n\nThis Python program calculates the effective duration of SW's callable bond based on the given information:\n\n1. We define the bond prices for +20bps and -20bps shifts as provided in the table.\n2. The total shift is 40 bps (from -20 to +20), which is 0.0040 in decimal form.\n3. We calculate the price change between the two scenarios.\n4. We calculate the average price.\n5. The effective duration is calculated using the formula: \n   Effective Duration = (Price Change) / (Average Price * Total Yield Shift)\n6. The program returns the effective duration.\n\nThis calculation will give us the effective duration of SW's callable bond, which measures the bond's price sensitivity to interest rate changes, taking into account the callable feature of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-869",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a PE fund has a total committed capital of $100 million, and the cumulative paid-in capital by the end of the most recent year was $90 million, with cumulative distributions tallying up to $30 million. Additionally, the end-of-year NAV, taking into consideration the balance before and after distributions, stood at $160 million and $130 million respectively. Moreover, the estimated NAV prior to distributions for the ensuing year is projected to be $250 million and the carried interest rate stands at 20%. Based on these financial figures of the PE fund, what was the TVPI (Total Value to Paid-In Capital) ratio at the close of the most recent year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    committed_capital = 100_000_000\n    paid_in_capital = 90_000_000\n    cumulative_distributions = 30_000_000\n    nav_before_distributions = 160_000_000\n    nav_after_distributions = 130_000_000\n    \n    # Do math calculation to get the answer\n    total_value = nav_after_distributions + cumulative_distributions\n    tvpi = total_value / paid_in_capital\n    \n    # return answer\n    return tvpi\n```\n\nThis Python function calculates the TVPI (Total Value to Paid-In Capital) ratio based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the total value by adding the NAV after distributions and the cumulative distributions.\n3. We then calculate TVPI by dividing the total value by the paid-in capital.\n4. The function returns the TVPI ratio.\n\nNote that some of the provided information (like committed capital, NAV before distributions, projected NAV for the next year, and carried interest rate) is not needed for this specific calculation, so it's not used in the function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-870",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond provides a yearly coupon rate of 5%, paying interest every six months, and it matures in seven years, what would be the bond's price per 100 of par value, given the market discount rate of 3%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.05\n    payments_per_year = 2\n    years_to_maturity = 7\n    market_rate = 0.03\n\n    # Do math calculation to get the answer\n    coupon_payment = (coupon_rate / payments_per_year) * par_value\n    periods = years_to_maturity * payments_per_year\n    discount_rate = market_rate / payments_per_year\n\n    # Calculate present value of coupon payments\n    pv_coupons = coupon_payment * ((1 - (1 + discount_rate)**(-periods)) / discount_rate)\n\n    # Calculate present value of par value at maturity\n    pv_par = par_value / (1 + discount_rate)**periods\n\n    # Sum up to get bond price\n    bond_price = pv_coupons + pv_par\n\n    # return answer\n    return round(bond_price, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-871",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jane Doe possesses a spreadsheet comprised of 108 monthly returns for shares in the ABC Company. She constructs a software program that employs bootstrap resampling to generate 200 resamples of the ABC data by sampling with replacement. Each resample similarly contains 108 data points. Doe's software measures the average of all 200 resamples and determines that the mean of these 200 resample averages is 0.0261. The software then subtracts 0.0261 from all 200 resample averages, squares each of these 200 differences, and sums up the squared differences. The outcome is 0.835. Subsequently, the software calculates an estimation of the standard error of the sample average. What is the estimated standard error of the sample average?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_resamples = 200\n    mean_of_resample_averages = 0.0261\n    sum_of_squared_differences = 0.835\n\n    # Do math calculation to get the answer\n    variance = sum_of_squared_differences / (num_resamples - 1)\n    standard_error = (variance ** 0.5)\n\n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the estimated standard error of the sample average based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the information provided in the question.\n\n2. To calculate the standard error, we first need to calculate the variance of the resample averages. The variance is the sum of squared differences divided by (n-1), where n is the number of resamples.\n\n3. Once we have the variance, we take the square root of it to get the standard error.\n\n4. The function returns the calculated standard error.\n\nThis approach follows the bootstrap method for estimating the standard error of a statistic, which is appropriate given the context of the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-872",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given a discrete uniform distribution, the possible outcome contains 25 integers from 1 to 25, what is the accurate value of P( 5 ≤ X < 10 )?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_outcomes = 25\n    favorable_outcomes = 5  # 5, 6, 7, 8, 9 are the favorable outcomes\n\n    # Do math calculation to get the answer\n    probability = favorable_outcomes / total_outcomes\n\n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability P(5 ≤ X < 10) for a discrete uniform distribution with integers from 1 to 25.\n\nHere's the explanation:\n\n1. We define the total number of possible outcomes, which is 25 (integers from 1 to 25).\n2. We count the number of favorable outcomes, which are 5, 6, 7, 8, and 9 (5 numbers in total).\n3. For a discrete uniform distribution, each outcome has an equal probability. The probability of an event is the number of favorable outcomes divided by the total number of possible outcomes.\n4. We calculate the probability by dividing the number of favorable outcomes (5) by the total number of outcomes (25).\n5. The function returns this calculated probability.\n\nThe result will be 5/25 = 0.2 or 20%, which is the accurate value of P(5 ≤ X < 10) for this distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-873",
        "python_solution": "",
        "ground_truth": null,
        "question": "Travelpro has just distributed a dividend of 500 per share. The annual dividend will increase by 5% per annum over the coming four years. The corporation's shares are projected to be sold for $10,000 at the conclusion of the fourth year. If the necessary return rate is 15%, what is the inherent value of Travelpro's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 500\n    growth_rate = 0.05\n    years = 4\n    terminal_value = 10000\n    required_return = 0.15\n\n    # Do math calculation to get the answer\n    present_value = 0\n\n    # Calculate present value of dividends for each year\n    for year in range(1, years + 1):\n        dividend = initial_dividend * (1 + growth_rate) ** (year - 1)\n        present_value += dividend / (1 + required_return) ** year\n\n    # Add present value of terminal value\n    present_value += terminal_value / (1 + required_return) ** years\n\n    # Round to two decimal places\n    answer = round(present_value, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the intrinsic value of Travelpro's shares based on the given information. Here's a breakdown of the solution:\n\n1. We define the initial variables: initial dividend, growth rate, number of years, terminal value, and required return rate.\n\n2. We initialize a variable `present_value` to store our calculations.\n\n3. We use a loop to calculate the present value of dividends for each of the four years. For each year:\n   - We calculate the dividend for that year using the growth rate.\n   - We discount that dividend to present value and add it to our total.\n\n4. After the loop, we calculate the present value of the terminal value (the projected selling price at the end of year 4) and add it to our total.\n\n5. We round the result to two decimal places for a cleaner output.\n\n6. Finally, we return the calculated intrinsic value.\n\nThis program will return the intrinsic value of Travelpro's shares based on the given dividend growth model and terminal value."
        ]
    },
    {
        "tables": [
            "| Probability Matrix |         |         |         |\n|--------------------|---------|---------|---------|\n| Returns            | RB=70%  | RB=30%  | RB=-20% |\n| RA=-20%, 30%       |         | 0%      | 0%      |\n| RA=20%, 0%         |         | 40%     | 0%      |\n| RA=30%, 0%         |         | 0%      | 30%     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-874",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided probability matrix, what is the covariance of stock X and stock Y?",
        "output": [
            "Here's a Python program to calculate the covariance of stock X and stock Y based on the provided probability matrix:\n\n```python\ndef solution():\n    # Define variables name and value\n    probabilities = [0.40, 0.30]\n    returns_x = [0.20, 0.30]\n    returns_y = [0.30, -0.20]\n    mean_x = 0.20 * 0.40 + 0.30 * 0.30\n    mean_y = 0.30 * 0.40 + (-0.20) * 0.30\n\n    # Do math calculation to get the answer\n    covariance = 0\n    for i in range(len(probabilities)):\n        covariance += probabilities[i] * (returns_x[i] - mean_x) * (returns_y[i] - mean_y)\n\n    # return answer\n    return covariance\n```\n\nThis program calculates the covariance of stock X and stock Y using the formula:\n\nCov(X,Y) = Σ [P(i) * (X(i) - E(X)) * (Y(i) - E(Y))]\n\nWhere:\n- P(i) is the probability of each scenario\n- X(i) and Y(i) are the returns of stocks X and Y in each scenario\n- E(X) and E(Y) are the expected returns of stocks X and Y\n\nThe program first defines the probabilities and returns for the two relevant scenarios from the matrix. It then calculates the expected returns (means) for both stocks. Finally, it computes the covariance using the formula above and returns the result."
        ]
    },
    {
        "tables": [
            "| Variable | Coefficient | t-statistic | p-value |\n| -------- | ----------- | ----------- | ------- |\n| Constant | -0.0069     | -0.013      | 0.99    |\n| S&P 500  | 0.3625      | 6.190       | <0.01   |\n| SPREAD   | 1.0264      | 4.280       | <0.01   |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-875",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in Exhibit 1, which consists of the results of a regression of the monthly returns for an index related to a power company's equity over the past 203 months (the dependent variable), against the monthly returns for the S&P 500 Index and the difference between the monthly returns on long-term U.S. government bonds and one-month U.S. Treasury bills (SPREAD) (the two independent variables), what is the test statistic value related to Peterson's null hypothesis on the coefficient value of SPREAD? Peterson's null hypothesis is that this coefficient equals 1, while his alternative hypothesis claims it does not equal to 1.",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    coefficient_spread = 1.0264\n    standard_error = coefficient_spread / 4.280  # t-statistic = coefficient / standard error\n    hypothesized_value = 1\n    \n    # Do math calculation to get the answer\n    test_statistic = (coefficient_spread - hypothesized_value) / standard_error\n    \n    # return answer\n    return abs(test_statistic)  # We return the absolute value as t-statistic is typically reported as positive\n```\n\nThis program calculates the test statistic for Peterson's null hypothesis that the coefficient of SPREAD equals 1.\n\nHere's a breakdown of the calculation:\n\n1. We define the coefficient of SPREAD (1.0264) and calculate its standard error. The standard error is derived from the t-statistic (4.280) and the coefficient value, as t-statistic = coefficient / standard error.\n\n2. We set the hypothesized value to 1, as per Peterson's null hypothesis.\n\n3. We calculate the test statistic using the formula: (sample value - hypothesized value) / standard error\n\n4. We return the absolute value of the test statistic, as t-statistics are typically reported as positive values.\n\nThis test statistic can be used to evaluate Peterson's null hypothesis against his alternative hypothesis."
        ]
    },
    {
        "tables": [
            "|     | Bid     |       |     | Ask     |       |     |     |\n|-----|---------|-------|-----|---------|-------|-----|-----|\n| Dealer | Time Entered | Price | Size | Dealer | Time Entered | Price | Size |\n| B |   10.10 a.m. | $17.15 | 900 | C | 10.11 a.m. | $17.19 | 1,200 |\n| C |   10.11 a.m. | $17.14 | 1,500 | B | 10.10 a.m. | $17.20 | 800 |\n| A |   10.11 a.m. | $17.12 | 1,100 | A | 10.12 a.m. | $17.22 | 1,100 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-876",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three merchants are creating a market for Light Systems shares. From these prices, Wilson's trading desk carries out a market sell order for 1,100 shares of Light Systems. Based on the information in Exhibit 1, what is the cumulative amount that Wilson will receive, per share, for making the market sell order?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    bid_prices = [17.15, 17.14, 17.12]\n    bid_sizes = [900, 1500, 1100]\n    sell_order_size = 1100\n    \n    # Do math calculation to get the answer\n    total_amount = 0\n    shares_left = sell_order_size\n    \n    for price, size in zip(bid_prices, bid_sizes):\n        if shares_left > 0:\n            shares_sold = min(shares_left, size)\n            total_amount += shares_sold * price\n            shares_left -= shares_sold\n    \n    average_price_per_share = total_amount / sell_order_size\n    \n    # return answer rounded to 2 decimal places\n    return round(average_price_per_share, 2)\n```\n\nThis program does the following:\n\n1. We define the bid prices and sizes from the table, ordered from highest to lowest bid price.\n2. We set the sell order size to 1100 shares.\n3. We iterate through the bids, selling shares at each price point until we've sold all 1100 shares.\n4. We calculate the total amount received and divide by the number of shares sold to get the average price per share.\n5. We round the result to 2 decimal places and return it.\n\nThis program will return the cumulative amount Wilson will receive per share for making the market sell order of 1,100 shares."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-877",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is tasked with approximating the equity value of Company X using the Merton approach. 1)The value of Company X's assets stand at 180. 2)There's a risk-free rate of 5%.3)The company puts forth one-year zero interest bonds with a face value of 100. 4)The worth of a European put option on the company's asset is 3.50 and the strike price is set at 100.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_value = 180\n    risk_free_rate = 0.05\n    bond_face_value = 100\n    put_option_value = 3.50\n    strike_price = 100\n\n    # Do math calculation to get the answer\n    # Using the put-call parity: C - P = S - K*e^(-r*T)\n    # Where C is call value, P is put value, S is asset value, K is strike price, r is risk-free rate, T is time (1 year)\n    # We need to find C (call value) which represents the equity value\n    \n    call_value = put_option_value + asset_value - (strike_price * math.exp(-risk_free_rate * 1))\n    \n    equity_value = call_value\n\n    # return answer\n    return equity_value\n```\n\nThis Python program uses the Merton approach and the put-call parity to calculate the equity value of Company X. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We use the put-call parity formula: C - P = S - K*e^(-r*T)\n   Where:\n   C = Call option value (equity value we're solving for)\n   P = Put option value (given as 3.50)\n   S = Asset value (given as 180)\n   K = Strike price (given as 100)\n   r = Risk-free rate (given as 5% or 0.05)\n   T = Time to expiration (1 year for the zero-coupon bonds)\n\n3. We rearrange the formula to solve for C:\n   C = P + S - K*e^(-r*T)\n\n4. We calculate this value and assign it to equity_value.\n\n5. Finally, we return the equity_value as the answer.\n\nNote: This program uses the `math` module for the exponential function. Make sure to import it at the beginning of your script with `import math` if you're running this function in a larger program."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-878",
        "python_solution": "",
        "ground_truth": null,
        "question": "A corporate bond with a 5-year timeline and a 5% semiannual coupon payment is valued at 104.967 for every 100 of face value. It has a yield-to-maturity of 3.897%, as quoted on a semiannual bond basis. If an economist is instructed to convert this to a monthly rate, what would be the yield-to-maturity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    semiannual_ytm = 0.03897  # 3.897% as a decimal\n    \n    # Do math calculation to get the answer\n    # Convert semiannual rate to annual rate\n    annual_ytm = (1 + semiannual_ytm/2)**2 - 1\n    \n    # Convert annual rate to monthly rate\n    monthly_ytm = (1 + annual_ytm)**(1/12) - 1\n    \n    # Convert to percentage and round to 4 decimal places\n    monthly_ytm_percent = round(monthly_ytm * 100, 4)\n    \n    # return answer\n    return monthly_ytm_percent\n```\n\nThis Python program calculates the monthly yield-to-maturity based on the given semiannual yield-to-maturity. Here's a breakdown of the steps:\n\n1. We start with the semiannual YTM of 3.897% (0.03897 in decimal form).\n2. We convert the semiannual rate to an annual rate using the formula: (1 + r/2)^2 - 1, where r is the semiannual rate.\n3. We then convert the annual rate to a monthly rate using the formula: (1 + r)^(1/12) - 1, where r is the annual rate.\n4. Finally, we convert the result to a percentage by multiplying by 100 and round to 4 decimal places for precision.\n\nThe function will return the monthly yield-to-maturity as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-879",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided information that the available stable funding for Bank X is $180 million, their high-quality liquid assets are $200 million, their required stable funding amounts to $330 million, and they have Net cash outflows of $120 million expected over the next 30 days, what is the liquidity coverage ratio of Bank X?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    high_quality_liquid_assets = 200000000\n    net_cash_outflows = 120000000\n    \n    # Do math calculation to get the answer\n    liquidity_coverage_ratio = high_quality_liquid_assets / net_cash_outflows\n    \n    # return answer\n    return liquidity_coverage_ratio\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The liquidity coverage ratio of Bank X is: {result:.2f}\")\n```\n\nThis program calculates the Liquidity Coverage Ratio (LCR) for Bank X based on the provided information. The LCR is calculated by dividing the high-quality liquid assets by the net cash outflows expected over the next 30 days.\n\nNote that while the question provided information about available stable funding and required stable funding, these values are not used in calculating the Liquidity Coverage Ratio. The LCR specifically uses high-quality liquid assets and net cash outflows.\n\nWhen you run this program, it will return the LCR as a decimal. For example, if the result is 1.67, it means the LCR is 167%, indicating that the bank has more than enough liquid assets to cover its expected cash outflows over the next 30 days."
        ]
    },
    {
        "tables": [
            "|                             | 2015 | 2016 |\n|-----------------------------|------|------|\n| Cash                        | 210  | 310  |\n| Accounts receivable         |      | 31   |\n| Inventory                   | 60   | 80   |\n| Fixed assets                | 200  | 200  |\n| Accumulated depreciation    | -    | (35) |\n| Total assets                | 470  | 586  |\n| Accounts payable            | 105  | 162  |\n| Long-term debt              | 235  | 273  |\n| Common stock                | 130  | 130  |\n| Retained earnings           | -    | 21   |\n| Total liabilities and shareholders' equity | 470  | 586  |",
            "|                          |                    |    US $/C$    |\n|--------------------------|--------------------|--------------|\n| Rate on                  | 31 December 2015   |    0.89      |\n| Average  rate in 2016    |                    |    0.96      |\n| Weighted-average rate for inventory purchases | |    0.94      |\n| Rate  on  31 December 2016 |                  |    0.94      |"
        ],
        "topic": "Accounting",
        "question_id": "test-880",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sephora is a corporation from the United States that deals with cosmetics. Its Canadian branch, Beauty company, operates exclusively in Canada. It was established on 31st December 2015, and Beauty company uses the US dollar as its working currency. Fixed assets were acquired when the company was instituted. The table provides financial statement data for the years finalised in 2015 and 2016. Could you compute the balance sheet exposure if the working currency were modified?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_2016 = 310\n    accounts_receivable_2016 = 31\n    inventory_2016 = 80\n    fixed_assets_2016 = 200\n    accumulated_depreciation_2016 = 35\n    accounts_payable_2016 = 162\n    long_term_debt_2016 = 273\n    exchange_rate_2016 = 0.94\n\n    # Do math calculation to get the answer\n    # Balance sheet exposure is the net of monetary assets and liabilities\n    monetary_assets = cash_2016 + accounts_receivable_2016\n    monetary_liabilities = accounts_payable_2016 + long_term_debt_2016\n    \n    balance_sheet_exposure = (monetary_assets - monetary_liabilities) * exchange_rate_2016\n\n    # return answer\n    return round(balance_sheet_exposure, 2)\n```\n\nThis Python function calculates the balance sheet exposure if the working currency were modified:\n\n1. We define the relevant variables from the 2016 balance sheet and the exchange rate at the end of 2016.\n2. We calculate the monetary assets (cash and accounts receivable) and monetary liabilities (accounts payable and long-term debt).\n3. The balance sheet exposure is the difference between monetary assets and monetary liabilities, multiplied by the exchange rate.\n4. We round the result to two decimal places for clarity.\n\nThis calculation gives us the net exposure in Canadian dollars that would be affected if the working currency changed from US dollars to Canadian dollars. A negative result indicates that the company has more monetary liabilities than assets exposed to currency risk."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-881",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business acquired machinery for $50,000 on the 1st of January 2009. The company is implementing straight-line depreciation for accounting reasons over a decade, but applying a declining balance method at a rate of 20% for taxation. Given a 30% tax rate, what is the deferred tax obligation by the end of 2011?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 50000\n    useful_life = 10\n    declining_balance_rate = 0.20\n    tax_rate = 0.30\n    years = 3  # 2009, 2010, 2011\n\n    # Do math calculation to get the answer\n    \n    # Accounting depreciation (straight-line method)\n    annual_accounting_depreciation = acquisition_cost / useful_life\n    total_accounting_depreciation = annual_accounting_depreciation * years\n    \n    # Tax depreciation (declining balance method)\n    tax_depreciation = 0\n    remaining_value = acquisition_cost\n    for _ in range(years):\n        annual_tax_depreciation = remaining_value * declining_balance_rate\n        tax_depreciation += annual_tax_depreciation\n        remaining_value -= annual_tax_depreciation\n    \n    # Calculate temporary difference\n    temporary_difference = tax_depreciation - total_accounting_depreciation\n    \n    # Calculate deferred tax liability\n    deferred_tax_liability = temporary_difference * tax_rate\n    \n    # return answer\n    return round(deferred_tax_liability, 2)\n```\n\nThis program calculates the deferred tax liability as of the end of 2011 based on the given information. Here's a breakdown of the calculation:\n\n1. We define the necessary variables including the acquisition cost, useful life, declining balance rate, tax rate, and the number of years.\n\n2. We calculate the accounting depreciation using the straight-line method for 3 years.\n\n3. We calculate the tax depreciation using the declining balance method for 3 years.\n\n4. We determine the temporary difference between tax depreciation and accounting depreciation.\n\n5. We calculate the deferred tax liability by multiplying the temporary difference by the tax rate.\n\n6. Finally, we return the rounded result to two decimal places.\n\nThis program will return the deferred tax liability in dollars as of the end of 2011."
        ]
    },
    {
        "tables": [
            "| Year | Hazard Rate |\n|---|---|\n| 1 | 0.22% |\n| 2 | 0.35% |\n| 3 | 0.50% |\n| 4 | 0.65% |\n| 5 | 0.80% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-882",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson inquires Chen to gauge the likelihood of default linked with a five-year investment-grade bond offered by Polaris Corporation. Chosen information on the Polaris Corporation bond is displayed in Exhibit 1.Exhibit 1. Based on Exhibit 1, what is the possibility of Polaris failing to repay the bond within the first three years, taking into account the specific data on Polaris Corporation Five-Year Bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    hazard_rates = {\n        1: 0.0022,\n        2: 0.0035,\n        3: 0.0050\n    }\n    \n    # Do math calculation to get the answer\n    survival_probability = 1\n    for year in range(1, 4):\n        survival_probability *= (1 - hazard_rates[year])\n    \n    default_probability = 1 - survival_probability\n    \n    # return answer\n    return default_probability * 100  # Convert to percentage\n```\n\nThis Python program calculates the probability of default for the Polaris Corporation bond within the first three years based on the given hazard rates. Here's how it works:\n\n1. We define a dictionary `hazard_rates` with the given hazard rates for the first three years.\n\n2. We initialize the survival probability as 1 (100% chance of survival at the start).\n\n3. We loop through the first three years, calculating the cumulative survival probability by multiplying the previous survival probability by (1 - hazard rate) for each year.\n\n4. After the loop, we calculate the default probability by subtracting the survival probability from 1.\n\n5. Finally, we return the default probability as a percentage.\n\nThis program will return the probability of Polaris failing to repay the bond within the first three years, based on the given hazard rates."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-883",
        "python_solution": "",
        "ground_truth": null,
        "question": "Duhamel starts reviewing the asset collection of an American citizen, Brooke Jensen. Jensen's investments are in American and European securities. On January 1, 2019, Jensen held assets of USD 50 million and EUR 50 million, distributed between shares and bonds. The exchange rate on this day was 1.1 USD/EUR. A year later, on January 1, 2020, the value of Jensen's European asset increased from EUR 50 million to EUR 54 million, having EUR 20 million in shares and EUR 34 million in bonds. The USD/EUR exchange rate at this time is 1.16. Can you determine the domestic currency return on Jensen's European portfolio over the preceding year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_eur_value = 50000000\n    final_eur_value = 54000000\n    initial_exchange_rate = 1.1\n    final_exchange_rate = 1.16\n    \n    # Do math calculation to get the answer\n    initial_usd_value = initial_eur_value * initial_exchange_rate\n    final_usd_value = final_eur_value * final_exchange_rate\n    \n    domestic_currency_return = (final_usd_value - initial_usd_value) / initial_usd_value\n    \n    # Convert to percentage\n    domestic_currency_return_percentage = domestic_currency_return * 100\n    \n    # return answer\n    return round(domestic_currency_return_percentage, 2)\n```\n\nThis Python program calculates the domestic currency return on Jensen's European portfolio over the preceding year. Here's a breakdown of the calculation:\n\n1. We define the initial and final values in EUR, as well as the initial and final exchange rates.\n2. We convert the initial and final EUR values to USD using the respective exchange rates.\n3. We calculate the return by finding the difference between the final and initial USD values, divided by the initial USD value.\n4. We convert the return to a percentage by multiplying by 100.\n5. Finally, we round the result to two decimal places for readability.\n\nThe function will return the domestic currency return as a percentage."
        ]
    },
    {
        "tables": [
            "| Estimated net income | $200 |\n| --- | --- |\n| Beginning retained earnings | $1,400 |\n| Estimated distributions to owners | $100 |"
        ],
        "topic": "Accounting",
        "question_id": "test-884",
        "python_solution": "",
        "ground_truth": null,
        "question": "What should be the projection of the analyst for the final retained earnings of a corporation, ahead of its end-of-year profit declaration (in millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    estimated_net_income = 200\n    beginning_retained_earnings = 1400\n    estimated_distributions = 100\n\n    # Do math calculation to get the answer\n    final_retained_earnings = beginning_retained_earnings + estimated_net_income - estimated_distributions\n\n    # return answer\n    return final_retained_earnings\n```\n\nThis Python program calculates the projected final retained earnings for the corporation based on the given information. Here's how it works:\n\n1. We define the variables with the values provided in the table:\n   - `estimated_net_income` is set to 200 (million dollars)\n   - `beginning_retained_earnings` is set to 1400 (million dollars)\n   - `estimated_distributions` is set to 100 (million dollars)\n\n2. We then calculate the `final_retained_earnings` using the formula:\n   Final Retained Earnings = Beginning Retained Earnings + Estimated Net Income - Estimated Distributions\n\n3. The function returns the calculated `final_retained_earnings`.\n\nWhen you run this function, it will return 1500, which represents $1,500 million or $1.5 billion as the projected final retained earnings for the corporation at the end of the year."
        ]
    },
    {
        "tables": [
            "| Full price of bond (PVFull) | $100,367,242    |\n|-----------------------------|-----------------|\n| Modified duration (AnnModDur) | 8.124 years |\n| Accrued interest               | $303,218        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-885",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the below details about a company's bond, what is the financial duration of this particular bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pv_full = 100367242  # Full price of bond in dollars\n    ann_mod_dur = 8.124  # Modified duration in years\n    accrued_interest = 303218  # Accrued interest in dollars\n\n    # Do math calculation to get the answer\n    clean_price = pv_full - accrued_interest\n    financial_duration = ann_mod_dur * (clean_price / pv_full)\n\n    # return answer\n    return financial_duration\n```\n\nThis Python program calculates the financial duration of the bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values.\n2. We calculate the clean price of the bond by subtracting the accrued interest from the full price.\n3. The financial duration is calculated by multiplying the modified duration by the ratio of the clean price to the full price.\n4. The result is returned as the answer.\n\nThis calculation adjusts the modified duration to account for the accrued interest, giving us the financial duration of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-886",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business sells a non-refundable, two-year service agreement for €420. According to previous trends, the business anticipates that the first year will see 25% of service expenses, with the rest expected in the second year. How much revenue does the business acknowledge in the first year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 420\n    first_year_expense_percentage = 0.25\n    \n    # Do math calculation to get the answer\n    first_year_revenue = total_revenue * first_year_expense_percentage\n    \n    # return answer\n    return first_year_revenue\n```\n\nThis Python program calculates the revenue recognized in the first year based on the given information. Here's how it works:\n\n1. We define the total revenue from the two-year service agreement as €420.\n2. We set the first year's expected service expense percentage as 25% or 0.25.\n3. To calculate the revenue recognized in the first year, we multiply the total revenue by the first year's expense percentage.\n4. The result is then returned as the answer.\n\nWhen you run this function, it will return 105, which means the business recognizes €105 in revenue for the first year of the service agreement."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-887",
        "python_solution": "",
        "ground_truth": null,
        "question": "Anna, a researcher, carried out a basic regression to understand the fluctuation in electricity usage based on temperature. She found out that the overall variation of the dependent variable was 132.08 and the variation that was explained stood at 60.38. Given that she had 60 monthly data points, can you calculate the coefficient of determination?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_variation = 132.08\n    explained_variation = 60.38\n    sample_size = 60  # Not directly used in this calculation, but provided for context\n\n    # Do math calculation to get the answer\n    coefficient_of_determination = explained_variation / total_variation\n\n    # return answer\n    return coefficient_of_determination\n```\n\nThis Python program calculates the coefficient of determination (R-squared) based on the given information. The coefficient of determination is the ratio of the explained variation to the total variation. It represents the proportion of the variance in the dependent variable that is predictable from the independent variable(s).\n\nIn this case:\n- The total variation (SST - Sum of Squares Total) is 132.08\n- The explained variation (SSR - Sum of Squares Regression) is 60.38\n\nThe coefficient of determination is calculated by dividing the explained variation by the total variation. This gives us the proportion of the total variation in the dependent variable (electricity usage) that can be explained by the independent variable (temperature).\n\nNote that the sample size (60 monthly data points) is not directly used in this calculation, but it's included in the variable definitions for completeness and potential future use."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-888",
        "python_solution": "",
        "ground_truth": null,
        "question": "John wants to assist his pal, Lisa, in forecasting the revenue of her store in October 20X9. To do this, he uses the income data from January 20X6 to September 20X9 as examples to create an AR(2) model. The resulting formula is: Xt+1  =1.3458+0.8912Xt+0.3372Xt-1. What would be the anticipated earnings of Lisa’s store in October 20X9 if it is known that the income in August 20X9 was $2746.72 and the income in September 20X9 was $2957.63?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    constant = 1.3458\n    coefficient_1 = 0.8912\n    coefficient_2 = 0.3372\n    income_september = 2957.63\n    income_august = 2746.72\n\n    # Do math calculation to get the answer\n    expected_income = constant + (coefficient_1 * income_september) + (coefficient_2 * income_august)\n\n    # return answer\n    return round(expected_income, 2)\n```\n\nThis Python function implements the AR(2) model given in the question to forecast Lisa's store revenue for October 20X9. Here's a breakdown of the solution:\n\n1. We define the variables based on the information provided:\n   - The constant term (1.3458)\n   - The coefficients for Xt (0.8912) and Xt-1 (0.3372)\n   - The income for September 20X9 ($2957.63)\n   - The income for August 20X9 ($2746.72)\n\n2. We then use these variables in the AR(2) formula:\n   Xt+1 = 1.3458 + 0.8912Xt + 0.3372Xt-1\n\n   Where:\n   - Xt+1 is the expected income for October 20X9\n   - Xt is the income for September 20X9\n   - Xt-1 is the income for August 20X9\n\n3. The result is rounded to two decimal places to represent currency accurately.\n\n4. The function returns this calculated value, which represents the anticipated earnings of Lisa's store in October 20X9."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-889",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume a call option priced at $4 where the strike price is $50. Calculate the worth at expiration and the earnings for a purchaser if the cost of the underlying asset at expiration is $48.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    strike_price = 50\n    underlying_asset_price = 48\n\n    # Do math calculation to get the answer\n    worth_at_expiration = max(0, underlying_asset_price - strike_price)\n    earnings = worth_at_expiration - option_price\n\n    # return answer\n    return (worth_at_expiration, earnings)\n```\n\nThis Python program calculates the worth at expiration and the earnings for a purchaser of a call option based on the given information:\n\n1. The option price is $4\n2. The strike price is $50\n3. The underlying asset price at expiration is $48\n\nThe program first calculates the worth of the option at expiration, which is the maximum of either 0 or the difference between the underlying asset price and the strike price. In this case, since the underlying asset price ($48) is less than the strike price ($50), the worth at expiration is $0.\n\nThen, it calculates the earnings by subtracting the initial option price from the worth at expiration.\n\nThe function returns a tuple containing both the worth at expiration and the earnings. In this case, the worth at expiration is $0, and the earnings are -$4 (a loss of $4, which is the initial price paid for the option)."
        ]
    },
    {
        "tables": [
            "| Balance Sheet Item | 12/31/2017 | 12/31/2018 | Change |\n| ------------------ | ---------- | ---------- | ------ |\n| Equipment          | $100 million  | $105 million | $5 million  |\n| Accumulated  depreciation - equipment | $40 million | $46 million | $6 million |"
        ],
        "topic": "Accounting",
        "question_id": "test-890",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the same figures highlighted in the comparative balance sheets, how much money did Globex Metals International, a global metals corporation, gain from the sale of machinery, following their reported equipment sale loss of $2 million in 2018, a noted depreciation expense of $8 million, and capital outlays amounting to $10 million which was completely used on new machinery purchases?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    equipment_2017 = 100000000\n    equipment_2018 = 105000000\n    acc_depreciation_2017 = 40000000\n    acc_depreciation_2018 = 46000000\n    sale_loss = 2000000\n    depreciation_expense = 8000000\n    capital_outlays = 10000000\n\n    # Do math calculation to get the answer\n    \n    # Calculate book value of equipment sold\n    book_value_sold = (equipment_2017 + capital_outlays - equipment_2018) - (acc_depreciation_2018 - acc_depreciation_2017 - depreciation_expense)\n    \n    # Calculate sale price\n    sale_price = book_value_sold - sale_loss\n\n    # return answer\n    return sale_price\n\n```\n\nThis program calculates the amount of money Globex Metals International gained from the sale of machinery. Here's a breakdown of the calculation:\n\n1. We first define all the given values as variables.\n2. We calculate the book value of the equipment sold. This is done by:\n   - Finding the change in equipment value: (equipment_2017 + capital_outlays - equipment_2018)\n   - Subtracting the change in accumulated depreciation: (acc_depreciation_2018 - acc_depreciation_2017 - depreciation_expense)\n3. We then calculate the sale price by subtracting the reported sale loss from the book value of the equipment sold.\n\nThe function will return the sale price, which represents the amount of money gained from the sale of machinery."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-891",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose interest rate parity is valid and the present spot rate is 1.4808 CAD/EUR. The annual interest rates in the nation of Canada (CAD) and the country of France (EUR) stand at 3% and 4% respectively. What is the 1-year forward rate in CAD/EUR?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 1.4808  # CAD/EUR\n    interest_rate_canada = 0.03  # 3%\n    interest_rate_france = 0.04  # 4%\n    time = 1  # 1 year\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate * ((1 + interest_rate_canada) / (1 + interest_rate_france)) ** time\n\n    # return answer\n    return round(forward_rate, 4)\n```\n\nThis Python program calculates the 1-year forward rate in CAD/EUR based on the given information and the interest rate parity condition. Here's a breakdown of the calculation:\n\n1. We define the variables with the given values:\n   - spot_rate: The current exchange rate (1.4808 CAD/EUR)\n   - interest_rate_canada: The annual interest rate in Canada (3% or 0.03)\n   - interest_rate_france: The annual interest rate in France (4% or 0.04)\n   - time: The time period (1 year)\n\n2. We use the interest rate parity formula to calculate the forward rate:\n   Forward Rate = Spot Rate * ((1 + Domestic Interest Rate) / (1 + Foreign Interest Rate)) ^ Time\n\n3. The result is rounded to 4 decimal places to match typical currency quotation practices.\n\n4. The calculated forward rate is then returned as the answer.\n\nWhen you run this function, it will return the 1-year forward rate in CAD/EUR, assuming interest rate parity holds true."
        ]
    },
    {
        "tables": [
            "|  | 2015 | 2016 | 2017 | 2018(E) |\n|---|---|---|---|---|\n| Earnings per share | 6 | 6.3 | 6.62 | 6.95 |\n| Dividends per share | 1.8 | 1.89 | 2.00 | 2.10 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-892",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bill is examining a food distribution enterprise, RapidSnacks's fair forward P/E using the Gordon growth offer discount model. The EPS and dividends of RapidSnacks are indicated previously. Bill assumes that the company's necessary rate of return would be 12%, and hypothesizes that the growth rate of the company would be consistent at 5%. Based on this data, what is the justified forward P/E of the enterprise?",
        "output": [
            "Here's the Python program to calculate the justified forward P/E of RapidSnacks based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    eps_2018 = 6.95  # Expected EPS for 2018\n    div_2018 = 2.10  # Expected dividend for 2018\n    r = 0.12  # Required rate of return (12%)\n    g = 0.05  # Growth rate (5%)\n\n    # Do math calculation to get the answer\n    \n    # Calculate the dividend payout ratio\n    payout_ratio = div_2018 / eps_2018\n    \n    # Calculate the retention ratio\n    retention_ratio = 1 - payout_ratio\n    \n    # Calculate the justified P/E using the Gordon growth model\n    justified_pe = payout_ratio * (1 + g) / (r - g)\n    \n    # return answer\n    return round(justified_pe, 2)\n```\n\nThis program calculates the justified forward P/E ratio using the Gordon growth model. Here's a breakdown of the steps:\n\n1. We define the variables based on the given information:\n   - Expected EPS for 2018\n   - Expected dividend for 2018\n   - Required rate of return (12%)\n   - Growth rate (5%)\n\n2. We calculate the dividend payout ratio by dividing the expected dividend by the expected EPS.\n\n3. We calculate the retention ratio, which is 1 minus the payout ratio.\n\n4. We use the Gordon growth model formula to calculate the justified P/E:\n   P/E = [Payout ratio * (1 + g)] / (r - g)\n   Where:\n   - Payout ratio is the dividend payout ratio we calculated\n   - g is the growth rate\n   - r is the required rate of return\n\n5. Finally, we return the result rounded to two decimal places.\n\nThis program will return the justified forward P/E ratio for RapidSnacks based on the given assumptions and data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-893",
        "python_solution": "",
        "ground_truth": null,
        "question": "A life insurance firm from Canada has an outstanding issue of perpetual, non-convertible, non-callable preferred shares with a 4.80 percent coupon rate and a par value of $25. If the required return on similar issues is 4.49 percent, what would be the intrinsic value of one of these preferred shares?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 25\n    coupon_rate = 0.0480\n    required_return = 0.0449\n    \n    # Do math calculation to get the answer\n    annual_dividend = par_value * coupon_rate\n    intrinsic_value = annual_dividend / required_return\n    \n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis program calculates the intrinsic value of a perpetual preferred share based on the given information:\n\n1. We define the variables:\n   - `par_value`: The par value of the preferred share ($25)\n   - `coupon_rate`: The coupon rate of 4.80% (0.0480)\n   - `required_return`: The required return of 4.49% (0.0449)\n\n2. We calculate the annual dividend by multiplying the par value by the coupon rate.\n\n3. To find the intrinsic value of a perpetual preferred share, we use the formula:\n   Intrinsic Value = Annual Dividend / Required Return\n\n4. We round the result to two decimal places for better readability.\n\n5. Finally, we return the calculated intrinsic value.\n\nWhen you run this function, it will return the intrinsic value of one preferred share based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-894",
        "python_solution": "",
        "ground_truth": null,
        "question": "An expert finds out that roughly 99% of the observations of daily revenue for a corporation lie between $230,000 and $480,000 and that daily revenue for the corporation follows a normal distribution. If about 99% of all the observations lie in the interval μ ± 3σ, then using the approximate z-value instead of the exact table, what is the standard deviation of daily revenue for the corporation?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 230000\n    upper_bound = 480000\n    z_value = 3  # Approximate z-value for 99% of observations\n\n    # Do math calculation to get the answer\n    range_of_values = upper_bound - lower_bound\n    standard_deviation = range_of_values / (2 * z_value)\n\n    # return answer\n    return standard_deviation\n\n# You can test the solution by calling the function\n# print(solution())\n```\n\nThis program calculates the standard deviation based on the given information:\n\n1. We define the lower and upper bounds of the interval ($230,000 and $480,000).\n2. We use the approximate z-value of 3 for 99% of observations.\n3. We calculate the range of values (upper bound - lower bound).\n4. The standard deviation is calculated by dividing the range by (2 * z-value).\n\nThis solution uses the property that for a normal distribution, approximately 99% of the data falls within 3 standard deviations of the mean (μ ± 3σ). The total range (upper bound - lower bound) represents 6 standard deviations (3σ on each side of the mean). Therefore, we divide the range by 6 (or 2 * z-value) to get the standard deviation.\n\nThe function will return the standard deviation of daily revenue for the corporation."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-895",
        "python_solution": "",
        "ground_truth": null,
        "question": "A manager in charge of market risk intends to determine the cost of a 2-year zero-coupon bond. The 1-year interest rate currently stands at 10.0%. It's projected that there's a 50% chance that the 1-year interest rate will reach 12.0% and a 50% chance that it could be 8.0% in the next year. If the risk premium of duration risk is assumed to be 50 bps annually, and the bond’s face value is worth EUR 1,000, which would be the accurate price of this zero-coupon bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    current_rate = 0.10\n    future_rate_up = 0.12\n    future_rate_down = 0.08\n    risk_premium = 0.005  # 50 bps = 0.5%\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the expected 1-year forward rate\n    expected_forward_rate = 0.5 * future_rate_up + 0.5 * future_rate_down\n    \n    # Adjust the rates for risk premium\n    adjusted_current_rate = current_rate + risk_premium\n    adjusted_forward_rate = expected_forward_rate + risk_premium\n    \n    # Calculate the price of the bond using backward induction\n    year_2_discount = 1 / (1 + adjusted_forward_rate)\n    year_1_discount = 1 / (1 + adjusted_current_rate)\n    \n    bond_price = face_value * year_2_discount * year_1_discount\n    \n    # Round to 2 decimal places\n    bond_price = round(bond_price, 2)\n    \n    # return answer\n    return bond_price\n```"
        ]
    },
    {
        "tables": [
            "|     |      |\n| ----| ----|\n| EXHIBIT 1  SELECTED INFORMATION O N INVESTMENTS FOR THE YEAR ENDED 31 DECEMBER 2017 (£ THOUSANDS, EXCEPT PER SHARE DATA) | |\n| Company Name | Alme AG |\n| Security  description | Bonds maturing  31 December 2026, 5% coupon payable  annually, 6% effective market rate when issued  1 January 2012 |\n| Classification at purchase | Held to maturity |\n| Date of purchase | 1 January 2016 |\n| Amount owned by Dagmar | Face value £4,000 |\n| Market value on  1 January 2017 | £3,600.60 |\n| Market value on  31 December 2017 | £3,634.76 |"
        ],
        "topic": "Accounting",
        "question_id": "test-896",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the contribution from the investment in Alme to the net earnings (in thousands) for 2017 of Brecht and Co, a European manufacturing company that prepares its financial statements according to International Financial Reporting Standards (IFRS)? This is being reviewed by two treasury group members of Brecht and Co, Hans Braun and Olga Schmitt.",
        "output": [
            "Here's a Python program to calculate the contribution from the investment in Alme to the net earnings for 2017:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 4000  # Face value in thousands\n    coupon_rate = 0.05  # 5% coupon rate\n    effective_rate = 0.06  # 6% effective market rate\n    years_since_issue = 2017 - 2012  # Years since bond issuance\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the annual interest income (coupon payment)\n    interest_income = face_value * coupon_rate\n    \n    # Calculate the amortized cost at the beginning of 2017\n    amortized_cost = face_value * (1 + effective_rate) ** years_since_issue\n    \n    # Calculate the interest expense using the effective interest method\n    interest_expense = amortized_cost * effective_rate\n    \n    # Calculate the net contribution to earnings\n    net_contribution = interest_income - interest_expense\n    \n    # Round to two decimal places\n    answer = round(net_contribution, 2)\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the contribution to net earnings based on the following:\n\n1. The bond pays a 5% coupon annually on its face value of £4,000,000.\n2. The effective interest rate is 6%.\n3. The bond was issued on 1 January 2012 and we're calculating for the year 2017, so it's been 5 years since issuance.\n4. Under IFRS, held-to-maturity investments are measured at amortized cost using the effective interest method.\n\nThe program calculates:\n- The annual interest income (coupon payment)\n- The amortized cost of the bond at the beginning of 2017\n- The interest expense for 2017 using the effective interest method\n- The net contribution to earnings (interest income - interest expense)\n\nThe result is rounded to two decimal places and returned in thousands of pounds."
        ]
    },
    {
        "tables": [
            "| Revenue growth | 5% |\n| --- | --- |\n| Gross profit margin | 30% |\n| Depreciation Expense | 2.5% of revenues |\n| SG&A | 15% of revenues |\n| WCInv | 5% of the incremental revenues |\n| CapEx | 15% of the incremental revenues |\n| Tax rate | 30% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-897",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is assessing the FCFF of Corporation N for the upcoming year, which records an annual turnover of $100 million. He has projected the pertinent details in the given table. What is the FCFF?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_revenue = 100000000\n    revenue_growth = 0.05\n    gross_profit_margin = 0.30\n    depreciation_rate = 0.025\n    sga_rate = 0.15\n    wc_inv_rate = 0.05\n    capex_rate = 0.15\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    next_year_revenue = current_revenue * (1 + revenue_growth)\n    incremental_revenue = next_year_revenue - current_revenue\n    \n    gross_profit = next_year_revenue * gross_profit_margin\n    depreciation = next_year_revenue * depreciation_rate\n    sga = next_year_revenue * sga_rate\n    \n    ebit = gross_profit - depreciation - sga\n    taxes = ebit * tax_rate\n    nopat = ebit - taxes\n    \n    wc_investment = incremental_revenue * wc_inv_rate\n    capex = incremental_revenue * capex_rate\n    \n    fcff = nopat + depreciation - wc_investment - capex\n\n    # return answer\n    return round(fcff, 2)\n```\n\nThis Python program calculates the Free Cash Flow to Firm (FCFF) for Corporation N based on the given information and projections. Here's a breakdown of the calculation:\n\n1. We first define all the variables based on the given table and the current revenue of $100 million.\n2. We calculate the next year's revenue by applying the 5% growth rate.\n3. We then calculate gross profit, depreciation, and SG&A expenses based on the given percentages.\n4. EBIT (Earnings Before Interest and Taxes) is calculated by subtracting depreciation and SG&A from gross profit.\n5. Taxes are calculated based on EBIT and the given tax rate.\n6. NOPAT (Net Operating Profit After Taxes) is EBIT minus taxes.\n7. Working capital investment and capital expenditure are calculated based on the incremental revenue.\n8. Finally, FCFF"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-898",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we assume an annual interest rate of 8% and an investment made today of $50,000. Let's suppose equal distributions are made at the end of each year for the following twelve years, leaving the account to be closed at the end of the twelfth year. How much would each yearly distribution amount be?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 50000  # Initial investment\n    rate = 0.08  # Annual interest rate\n    years = 12  # Number of years\n\n    # Do math calculation to get the answer\n    # Calculate the annuity factor\n    annuity_factor = (1 - (1 + rate) ** -years) / rate\n    \n    # Calculate the yearly distribution amount\n    yearly_distribution = principal / annuity_factor\n\n    # return answer\n    return round(yearly_distribution, 2)\n```\n\nThis program calculates the yearly distribution amount for an annuity given the initial investment, interest rate, and number of years. Here's how it works:\n\n1. We define the variables:\n   - `principal`: The initial investment of $50,000\n   - `rate`: The annual interest rate of 8% (0.08 in decimal form)\n   - `years`: The number of years (12)\n\n2. We calculate the annuity factor using the formula: (1 - (1 + r)^-n) / r\n   Where r is the interest rate and n is the number of years.\n\n3. We then divide the principal by the annuity factor to get the yearly distribution amount.\n\n4. Finally, we return the result rounded to two decimal places, as it represents a dollar amount.\n\nThis program will return the amount that should be distributed each year for 12 years to deplete the account, considering the initial investment and the interest earned over time."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-899",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given that Occurrence A and Occurrence B are independent events. The probability of A is 0.2 [P(A) = 0.2] and the probability of B is 0.5 [P(B) = 0.5]. What is the combined probability of A and B, P(AB)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.2\n    P_B = 0.5\n    \n    # Do math calculation to get the answer\n    # For independent events, P(AB) = P(A) * P(B)\n    P_AB = P_A * P_B\n    \n    # return answer\n    return P_AB\n```\n\nThis Python program calculates the combined probability of two independent events A and B, given their individual probabilities. \n\nThe formula used is P(AB) = P(A) * P(B), which is the multiplication rule for independent events. This means the probability of both events A and B occurring is the product of their individual probabilities.\n\nWhen you run this function, it will return 0.1, which is the combined probability of events A and B occurring together."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-900",
        "python_solution": "",
        "ground_truth": null,
        "question": "The portfolio manager of AB pension, Monique, is contemplating the addition of XY Corp. (New York Stock Exchange: XY) to her portfolio. After a thorough evaluation of the company and its competitors, she is of the view that the company will exhibit exceptional growth for the coming 4 years and regular growth following that. Therefore, she has inferred that a two-stage DDM is most suitable for evaluating the stock. The total dividends paid by XY in 2017 amounted to $0.22. She predicts a growth rate of 12 percent for the next 4 years and 6 percent thereafter. She estimates that the required return is 9 percent. What percentage of the total value of the stock is associated with the value of the second stage based on this method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    div_2017 = 0.22\n    g1 = 0.12  # growth rate for first 4 years\n    g2 = 0.06  # growth rate thereafter\n    r = 0.09   # required return\n    n = 4      # number of years in first stage\n\n    # Do math calculation to get the answer\n    \n    # Calculate dividend for year 1\n    div_1 = div_2017 * (1 + g1)\n    \n    # Calculate present value of dividends in first stage\n    pv_stage1 = 0\n    for t in range(1, n+1):\n        pv_stage1 += div_1 * (1 + g1)**(t-1) / (1 + r)**t\n    \n    # Calculate dividend for year 5 (first year of second stage)\n    div_5 = div_1 * (1 + g1)**(n-1) * (1 + g2)\n    \n    # Calculate present value of second stage (using Gordon Growth Model)\n    pv_stage2 = div_5 / (r - g2) / (1 + r)**n\n    \n    # Calculate total value of stock\n    total_value = pv_stage1 + pv_stage2\n    \n    # Calculate percentage of total value associated with second stage\n    percentage_stage2 = (pv_stage2 / total_value) * 100\n\n    # return answer\n    return round(percentage_stage2, 2)\n```\n\nThis Python program calculates the percentage of the total value of the stock associated with the value of the second stage using a two-stage Dividend Discount Model (DDM). Here's a breakdown of the steps:\n\n1. We define all the given variables.\n2. We calculate the dividend for year 1 based on the 2017 dividend and the first-stage growth rate.\n3. We calculate the present value of dividends in the first stage (years 1-4).\n4. We calculate the dividend for year 5, which is the first year of the second stage.\n5. We"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-901",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the following financial information for a financial institution, in millions of dollars: shareholders' funds: 627.4; retained earnings: 65.6; undisclosed reserves: 33.5; goodwill: 21.3; subordinated debt: 180.0; specific provisions: 11.7. What is the ratio of tier 2 capital to tier 1 capital?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shareholders_funds = 627.4\n    retained_earnings = 65.6\n    undisclosed_reserves = 33.5\n    goodwill = 21.3\n    subordinated_debt = 180.0\n    specific_provisions = 11.7\n\n    # Do math calculation to get the answer\n    tier1_capital = shareholders_funds + retained_earnings + undisclosed_reserves - goodwill\n    tier2_capital = subordinated_debt + specific_provisions\n\n    ratio = tier2_capital / tier1_capital\n\n    # return answer\n    return ratio\n```\n\nThis Python program calculates the ratio of Tier 2 capital to Tier 1 capital based on the given financial information. Here's a breakdown of the calculation:\n\n1. Tier 1 capital is calculated as the sum of shareholders' funds, retained earnings, and undisclosed reserves, minus goodwill.\n2. Tier 2 capital is calculated as the sum of subordinated debt and specific provisions.\n3. The ratio is then calculated by dividing Tier 2 capital by Tier 1 capital.\n\nThe program returns this ratio as the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-902",
        "python_solution": "",
        "ground_truth": null,
        "question": "A dealer submits a limit order to purchase stocks at a rate of $49.94, with the market bid price being $49.49 and the bid-ask spread standing at 0.7%. What will likely be the final fill price for the order?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    limit_order_price = 49.94\n    market_bid_price = 49.49\n    bid_ask_spread = 0.007  # 0.7% expressed as a decimal\n\n    # Do math calculation to get the answer\n    market_ask_price = market_bid_price * (1 + bid_ask_spread)\n    \n    # The fill price will likely be the lower of the limit order price and the market ask price\n    fill_price = min(limit_order_price, market_ask_price)\n\n    # return answer\n    return round(fill_price, 2)\n```\n\nThis program calculates the likely fill price for the limit order based on the given information. Here's a breakdown of the steps:\n\n1. We define the variables for the limit order price, market bid price, and bid-ask spread.\n2. We calculate the market ask price by adding the bid-ask spread to the market bid price.\n3. The fill price will likely be the lower of the limit order price and the market ask price, as the dealer won't pay more than their limit order price.\n4. We use the `min()` function to select the lower of these two prices.\n5. We round the result to two decimal places for currency representation.\n\nThe program will return the likely fill price for the order."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-903",
        "python_solution": "",
        "ground_truth": null,
        "question": "Currently possessing $750,000 in cash and short investment, Robert consults his investment manager Smith to discuss his investment portfolio. Robert's human capital amounts to $1.2 million with 30% demonstrating an equity-like characteristic according to calculations. Deciding that an overall target allocation of 45% equity is fitting for Robert, Smith must now determine the financial capital equity allocation required for Robert to meet the total economic wealth's targeted equity allocation. What should this allocation amount to?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_and_investments = 750000\n    human_capital = 1200000\n    human_capital_equity_characteristic = 0.30\n    target_equity_allocation = 0.45\n\n    # Do math calculation to get the answer\n    total_economic_wealth = cash_and_investments + human_capital\n    human_capital_equity = human_capital * human_capital_equity_characteristic\n    total_equity_target = total_economic_wealth * target_equity_allocation\n    financial_capital_equity_required = total_equity_target - human_capital_equity\n    financial_capital_equity_allocation = financial_capital_equity_required / cash_and_investments\n\n    # return answer\n    return financial_capital_equity_allocation * 100  # Convert to percentage\n```\n\nThis Python program calculates the required financial capital equity allocation for Robert to meet the total economic wealth's targeted equity allocation. Here's a breakdown of the calculation:\n\n1. We define the given values as variables.\n2. We calculate the total economic wealth by adding cash and investments to human capital.\n3. We determine the equity-like portion of human capital.\n4. We calculate the total equity target based on the desired allocation of 45% of total economic wealth.\n5. We subtract the human capital equity from the total equity target to get the required financial capital equity.\n6. Finally, we divide the required financial capital equity by the cash and investments to get the allocation percentage.\n\nThe function returns the allocation as a percentage (multiplied by 100 for easier reading). This percentage represents the portion of Robert's financial capital (cash and short-term investments) that should be allocated to equity to meet the overall target allocation of 45% equity for his total economic wealth."
        ]
    },
    {
        "tables": [
            "| Bond Class | Par Value(Emillions) |\n|------------|---------------------|\n| A(senior)  | 200                 |\n| B(subordinated) | 20           |\n| C(subordinated) | 5            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-904",
        "python_solution": "",
        "ground_truth": null,
        "question": "At what level of default in par value would Bond Class A incur a loss if issued by a special purpose vehicle in the following structure?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_a_par_value = 200\n    bond_b_par_value = 20\n    bond_c_par_value = 5\n    total_par_value = bond_a_par_value + bond_b_par_value + bond_c_par_value\n\n    # Do math calculation to get the answer\n    # Bond A will incur a loss when the default exceeds the sum of B and C par values\n    default_threshold = bond_b_par_value + bond_c_par_value\n\n    # Calculate the default level as a percentage of total par value\n    default_level_percentage = (default_threshold / total_par_value) * 100\n\n    # return answer\n    return default_level_percentage\n```\n\nThis Python program calculates the level of default at which Bond Class A would incur a loss in the given structure. Here's an explanation of the logic:\n\n1. We define the par values for each bond class as given in the table.\n\n2. We calculate the total par value of all bonds.\n\n3. Bond A, being senior, will only incur a loss after both subordinated bonds (B and C) have been completely wiped out. Therefore, the default threshold is the sum of par values of bonds B and C.\n\n4. We calculate the default level as a percentage of the total par value.\n\n5. The function returns this percentage, which represents the level of default (in terms of percentage of total par value) at which Bond Class A would start to incur a loss.\n\nThis approach assumes that losses are absorbed by the subordinated bonds first, in order of their subordination (C, then B), before affecting the senior bond (A). The returned value will be the percentage of total par value that needs to default before Bond A is affected."
        ]
    },
    {
        "tables": [
            "| Activity                           | Cost of Input (£/unit) | Price of Output (£/unit) in Current Period |\n| ---------------------------------- | ---------------------- | ----------------------------------------- |\n| Input materials                    | 3.50                   | 5.42                                      |\n| Production                         | 5.42                   | 8.02                                      |\n| Distributing good to stores (wholesale) | 8.02            | 11.23                                     |\n| Selling good to consumers (retail) | 11.23                  | 16.50                                     |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-905",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the contribution per unit (in £) this product adds to the present GDP, taking into account the production and sale expenses as shown in the subsequent table?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_input_cost = 3.50\n    final_retail_price = 16.50\n\n    # Do math calculation to get the answer\n    contribution_to_gdp = final_retail_price - initial_input_cost\n\n    # return answer\n    return contribution_to_gdp\n```\n\nThis Python program calculates the contribution per unit to the present GDP by subtracting the initial input cost from the final retail price. \n\nThe contribution to GDP is the value added at each stage of production and sale. By taking the difference between the final retail price (£16.50) and the initial input cost (£3.50), we capture the total value added throughout the entire production and sales process.\n\nThis method accounts for all the production and sale expenses shown in the table, as these expenses are reflected in the price increases at each stage, which are ultimately incorporated into the final retail price.\n\nThe program will return 13.00, which represents the £13.00 contribution per unit to the GDP."
        ]
    },
    {
        "tables": [
            "| Checking account | $27,000 |\n|------------------|---------|\n| Taxable investment account | $625,000 |\n| Residence | $525,000 |\n| Residential mortgage | $285,000 |\n| Outstanding balance on a $100,000 home equity line of credit | $38,000 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-906",
        "python_solution": "",
        "ground_truth": null,
        "question": "Exhibit 1 Smith Family: Personal and Financial Information:Personal Information:1. Estimated present value of the Smiths’ future earnings is $3,900,000.2. The family has two children, ages 10 and 8. Cost of four years of university for the two children, with an estimated present value of $250,000.3. Purchase of a vacation home in the next five years, with an estimated present value of $325,000.4. Estimated present value of the Grahams’ future consumption is $3,500,000. Using the data in Exhibit 1, what is the Smiths’ economic net worth (in thousands)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    checking_account = 27000\n    taxable_investment_account = 625000\n    residence_value = 525000\n    residential_mortgage = 285000\n    home_equity_line_balance = 38000\n    future_earnings = 3900000\n    university_cost_present_value = 250000\n    vacation_home_present_value = 325000\n    future_consumption_present_value = 3500000\n\n    # Do math calculation to get the answer\n    assets = checking_account + taxable_investment_account + residence_value + future_earnings\n    liabilities = residential_mortgage + home_equity_line_balance + university_cost_present_value + vacation_home_present_value + future_consumption_present_value\n    economic_net_worth = assets - liabilities\n\n    # Convert to thousands and round to nearest thousand\n    economic_net_worth_thousands = round(economic_net_worth / 1000)\n\n    # return answer\n    return economic_net_worth_thousands\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-907",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John has put money into 50,000 shares of Company N's stock that is being sold for $25 each and the company announces a cash dividend of $2, assuming John will be using all dividends received to buy more shares and considering he is a tax-exempt investor, how many shares will he possess after reinvesting the dividends at the ex-dividend price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_shares = 50000\n    share_price = 25\n    dividend_per_share = 2\n    \n    # Do math calculation to get the answer\n    total_dividend = initial_shares * dividend_per_share\n    ex_dividend_price = share_price - dividend_per_share\n    additional_shares = total_dividend / ex_dividend_price\n    total_shares = initial_shares + additional_shares\n    \n    # return answer\n    return round(total_shares)\n```\n\nThis Python program calculates the total number of shares John will possess after reinvesting the dividends. Here's how it works:\n\n1. We define the initial variables:\n   - `initial_shares`: The number of shares John initially owns (50,000)\n   - `share_price`: The current price per share ($25)\n   - `dividend_per_share`: The cash dividend per share ($2)\n\n2. We calculate:\n   - `total_dividend`: The total dividend John receives\n   - `ex_dividend_price`: The price of the stock after the dividend is paid out\n   - `additional_shares`: The number of new shares John can buy with the dividend\n   - `total_shares`: The total number of shares John will have after reinvesting\n\n3. We return the rounded value of `total_shares` as the answer.\n\nThe program takes into account that John is reinvesting all dividends and is tax-exempt. The result will be the total number of shares John will possess after the dividend reinvestment."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-908",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a trader acquired a stock initially priced at $20 and sold it at the end of the year for $25, what is the continuously compounded annual rate of return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 20\n    final_price = 25\n    time = 1  # 1 year\n\n    # Do math calculation to get the answer\n    import math\n    \n    # Calculate the continuously compounded annual rate of return\n    rate = math.log(final_price / initial_price) / time\n\n    # Convert to percentage\n    answer = rate * 100\n\n    # return answer rounded to 2 decimal places\n    return round(answer, 2)\n```\n\nThis Python program calculates the continuously compounded annual rate of return for a stock that was bought at $20 and sold at $25 after one year. Here's how it works:\n\n1. We define the initial price, final price, and time period (1 year in this case).\n\n2. We use the formula for continuously compounded return:\n   r = ln(FV / PV) / t\n   where:\n   r = rate of return\n   ln = natural logarithm\n   FV = Final Value\n   PV = Present Value (Initial Value)\n   t = time period\n\n3. We use math.log() which gives the natural logarithm in Python.\n\n4. We multiply the result by 100 to convert it to a percentage.\n\n5. Finally, we round the result to 2 decimal places for cleaner output.\n\nThe program will return the continuously compounded annual rate of return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-909",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of a bond with a par value of $100, a coupon rate of 6% paid twice a year, a YTM of 7%, and a maturity period of a decade?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.06\n    payments_per_year = 2\n    ytm = 0.07\n    years_to_maturity = 10\n\n    # Do math calculation to get the answer\n    periods = years_to_maturity * payments_per_year\n    coupon_payment = (par_value * coupon_rate) / payments_per_year\n    r = ytm / payments_per_year\n\n    # Calculate present value of coupon payments\n    pv_coupons = coupon_payment * (1 - (1 + r)**-periods) / r\n\n    # Calculate present value of par value\n    pv_par = par_value / (1 + r)**periods\n\n    # Sum up to get bond value\n    bond_value = pv_coupons + pv_par\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of a bond using the following steps:\n\n1. We define the variables based on the given information.\n2. We calculate the number of periods and the coupon payment per period.\n3. We calculate the present value of all future coupon payments using the formula for the present value of an annuity.\n4. We calculate the present value of the par value to be received at maturity.\n5. We sum these two present values to get the total bond value.\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the value of the bond as specified in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-910",
        "python_solution": "",
        "ground_truth": null,
        "question": "Michael wishes to assist his buddy James in forecasting the sales volume of his store in January 20X9, so he employs the sales volume data from January 20X6 to December 20X8 as examples to construct a log-linear trend model, achieving the result: Ln( ŷt ) =2.3748+0.0912t. What is the forecasted sales volume of James's store in January 20X9?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    intercept = 2.3748\n    slope = 0.0912\n    t = 37  # January 20X9 is the 37th month from January 20X6\n\n    # Do math calculation to get the answer\n    ln_y = intercept + slope * t\n    forecasted_sales = round(math.exp(ln_y), 2)\n\n    # return answer\n    return forecasted_sales\n\nimport math\n```\n\nThis program does the following:\n\n1. We define the variables based on the given log-linear trend model:\n   - `intercept` is 2.3748\n   - `slope` is 0.0912\n   - `t` is 37 because January 20X9 is the 37th month from January 20X6 (36 months from 20X6 to 20X8, plus 1 for January 20X9)\n\n2. We calculate the natural logarithm of the forecasted sales (`ln_y`) using the equation of the log-linear trend model: Ln(ŷt) = 2.3748 + 0.0912t\n\n3. To get the actual forecasted sales, we use the exponential function (math.exp()) to reverse the natural logarithm. This gives us the forecasted sales volume.\n\n4. We round the result to two decimal places for better readability.\n\n5. Finally, we return the forecasted sales volume.\n\nNote: The `math` module is imported at the end of the code to use the `exp()` function. In a real Python environment, you'd typically put this import at the top of your file."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-911",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a Property B has an appraised worth of $36,000,000 with a predicted Year 1 NOI of 900,000, What would be the highest loan amount that Property B could receive if the loan provider is interested in an interest-only loan at 5% mortgage rate, given that the maximum loan to value doesn't exceed 80% and the minimum debt service coverage ratio is no less than 1.2x?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    property_value = 36000000\n    noi = 900000\n    interest_rate = 0.05\n    max_ltv = 0.80\n    min_dscr = 1.2\n\n    # Do math calculation to get the answer\n    max_loan_by_ltv = property_value * max_ltv\n    \n    # Calculate maximum loan amount based on DSCR\n    max_annual_debt_service = noi / min_dscr\n    max_loan_by_dscr = max_annual_debt_service / interest_rate\n    \n    # The actual max loan is the lower of the two constraints\n    max_loan = min(max_loan_by_ltv, max_loan_by_dscr)\n\n    # return answer\n    return max_loan\n```\n\nThis Python program calculates the maximum loan amount for Property B based on the given constraints:\n\n1. The loan-to-value (LTV) ratio must not exceed 80%.\n2. The debt service coverage ratio (DSCR) must be at least 1.2x.\n3. It's an interest-only loan at a 5% mortgage rate.\n\nThe program first calculates the maximum loan amount based on the LTV constraint, then calculates the maximum loan amount based on the DSCR constraint. The lower of these two amounts is the actual maximum loan amount that satisfies both constraints."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-912",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ, a wealth management company based in France, is planning to buy CDS on a firm called E to secure its existing portfolio position. The yearly coupon rate for the CDS is 5%, and the term of the CDS agreement is 5 years. The credit spread for firm E stands at 650 bps. Based on the details provided, what is the initial premium as a percent of the notional for the CDS on firm E?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_coupon_rate = 0.05  # 5%\n    term_years = 5\n    credit_spread_bps = 650\n    credit_spread_decimal = credit_spread_bps / 10000  # Convert bps to decimal\n\n    # Do math calculation to get the answer\n    initial_premium = credit_spread_decimal - yearly_coupon_rate\n    initial_premium_percent = initial_premium * 100\n\n    # return answer\n    return initial_premium_percent\n```\n\nThis Python program calculates the initial premium as a percent of the notional for the Credit Default Swap (CDS) on firm E. Here's how it works:\n\n1. We define the given variables:\n   - The yearly coupon rate is 5% (0.05 in decimal form)\n   - The term of the CDS agreement is 5 years\n   - The credit spread is 650 basis points (bps)\n\n2. We convert the credit spread from basis points to a decimal (650 bps = 0.065)\n\n3. To calculate the initial premium, we subtract the yearly coupon rate from the credit spread (both in decimal form)\n\n4. We convert the result to a percentage by multiplying by 100\n\n5. The function returns this percentage as the answer\n\nThe initial premium as a percent of the notional for the CDS on firm E would be the value returned by this function, which is 1.5%."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-913",
        "python_solution": "",
        "ground_truth": null,
        "question": "A merchant initiates an equity swap with a notional principle of $500,000. He will acquire the return on stock ABC and give the return on Dow Jones Index. At the end of the quarter, if the stock ABC has increased by 5% and the index has risen by 1%, what would be the merchant's payoff?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 500000\n    stock_abc_return = 0.05  # 5% increase\n    dow_jones_return = 0.01  # 1% increase\n\n    # Do math calculation to get the answer\n    stock_abc_gain = notional_principal * stock_abc_return\n    dow_jones_loss = notional_principal * dow_jones_return\n    payoff = stock_abc_gain - dow_jones_loss\n\n    # return answer\n    return payoff\n```\n\nThis Python program calculates the merchant's payoff from the equity swap based on the given information. Here's how it works:\n\n1. We define the notional principal and the returns for both stock ABC and the Dow Jones Index.\n2. We calculate the gain from stock ABC by multiplying the notional principal by the stock's return.\n3. We calculate the loss from the Dow Jones Index in the same way.\n4. The payoff is the difference between the gain from stock ABC and the loss from the Dow Jones Index.\n5. The function returns this payoff.\n\nWhen you run this function, it will return the merchant's payoff in dollars. The positive payoff indicates that the merchant has made a profit from this swap."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-914",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an individual puts $1000 into an investment now at a 6% interest rate, how much will they make in 10 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 1000\n    rate = 0.06\n    time = 10\n\n    # Do math calculation to get the answer\n    future_value = principal * (1 + rate) ** time\n    interest_earned = future_value - principal\n\n    # return answer\n    return round(interest_earned, 2)\n```\n\nThis Python program calculates the interest earned on an investment of $1000 over 10 years at a 6% interest rate, assuming compound interest. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `principal`: The initial investment amount ($1000)\n   - `rate`: The annual interest rate (6% or 0.06)\n   - `time`: The investment period (10 years)\n\n2. We calculate the future value of the investment using the compound interest formula:\n   future_value = principal * (1 + rate) ** time\n\n3. We then subtract the initial principal from the future value to get the interest earned.\n\n4. Finally, we round the result to two decimal places (for cents) and return it.\n\nThe program will return the amount of interest earned over the 10-year period. To get the actual value, you would need to call the `solution()` function."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-915",
        "python_solution": "",
        "ground_truth": null,
        "question": "In March 2017, John purchased 500 pen units at a price of $2 each. Then in April 2017, John acquired 600 pen units at a cost of $3 each. Throughout 2017, he made sales of 1000 units at $5 for each unit. Utilizing the Weighted Average method, what will be the cost of goods sold in 2017 for John?",
        "output": [
            "Here's the Python program to answer the given question using the Weighted Average method:\n\n```python\ndef solution():\n    # Define variables name and value\n    march_units = 500\n    march_price = 2\n    april_units = 600\n    april_price = 3\n    total_units_purchased = march_units + april_units\n    total_units_sold = 1000\n\n    # Do math calculation to get the answer\n    total_cost = (march_units * march_price) + (april_units * april_price)\n    weighted_average_cost = total_cost / total_units_purchased\n    cost_of_goods_sold = weighted_average_cost * total_units_sold\n\n    # return answer\n    return round(cost_of_goods_sold, 2)\n```\n\nThis program calculates the cost of goods sold using the Weighted Average method:\n\n1. We define the variables for the units purchased in March and April, their respective prices, and the total units sold.\n\n2. We calculate the total cost of all units purchased.\n\n3. We compute the weighted average cost per unit by dividing the total cost by the total units purchased.\n\n4. We calculate the cost of goods sold by multiplying the weighted average cost per unit by the number of units sold.\n\n5. Finally, we return the result rounded to two decimal places.\n\nThe function will return the cost of goods sold for John in 2017 using the Weighted Average method."
        ]
    },
    {
        "tables": [
            "| Date | Spot Exchange Rate (USD/RMB) | CPI |\n| --- | --- | --- |\n| 31 Dec 2015 | 6.2 | 100 |\n| 31 Dec 2016 | 8.6 | 130 |\n| 31 Dec 2017 | 17.3 | 200 |\n| Average 2017 | 15.2 | 165 |"
        ],
        "topic": "Accounting",
        "question_id": "test-916",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Inc. is a global company that adheres to IFRS and uses RMB as the currency for reporting. XYZ owns a subsidiary named QRS, located in the US and uses the US dollar (USD) as its operational currency. QRS's revenue for 2017 is USD90 million. What amount should XYZ Inc. report as its December 31, 2017 revenue from QRS?",
        "output": [
            "Here's a Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    qrs_revenue_usd = 90000000  # QRS's revenue for 2017 in USD\n    exchange_rate_2017_avg = 15.2  # Average exchange rate for 2017 (USD/RMB)\n    \n    # Do math calculation to get the answer\n    revenue_rmb = qrs_revenue_usd * exchange_rate_2017_avg\n    \n    # return answer\n    return revenue_rmb\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The reported revenue from QRS on December 31, 2017 is RMB {result:,.2f}\")\n```\n\nThis program calculates the revenue that XYZ Inc. should report for its subsidiary QRS on December 31, 2017. Here's an explanation of the solution:\n\n1. We define two variables:\n   - `qrs_revenue_usd`: QRS's revenue for 2017 in USD (90 million)\n   - `exchange_rate_2017_avg`: The average exchange rate for 2017 (15.2 USD/RMB)\n\n2. To calculate the revenue in RMB, we multiply the USD revenue by the average exchange rate for 2017. This is in accordance with IFRS, which requires using the average exchange rate for the period when translating income statement items.\n\n3. The function returns the calculated revenue in RMB.\n\nWhen you run this program, it will output the result. The reported revenue from QRS on December 31, 2017, should be RMB 1,368,000,000.00."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-917",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a continuous compound interest rate of 2.5%, how much will John receive after 5 years from his $1million investment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000  # Initial investment of $1 million\n    rate = 0.025  # Interest rate of 2.5%\n    time = 5  # Time period of 5 years\n\n    # Do math calculation to get the answer\n    # Formula for continuous compound interest: A = P * e^(r*t)\n    # Where A is the final amount, P is the principal, e is Euler's number,\n    # r is the interest rate, and t is the time in years\n    import math\n    final_amount = principal * math.exp(rate * time)\n\n    # return answer\n    return round(final_amount, 2)  # Rounding to 2 decimal places for cents\n```\n\nThis Python program calculates the amount John will receive after 5 years from his $1 million investment, assuming a continuous compound interest rate of 2.5%. \n\nThe program uses the formula for continuous compound interest: A = P * e^(r*t), where:\n- A is the final amount\n- P is the principal (initial investment)\n- e is Euler's number (approximately 2.71828)\n- r is the interest rate (as a decimal)\n- t is the time in years\n\nThe `math.exp()` function is used to calculate e^(r*t). The result is rounded to two decimal places to represent dollars and cents accurately."
        ]
    },
    {
        "tables": [
            "| country  | Inflation rate (%) | Growth in total factor productivity (%) | Output elasticity of capital | Growth rate of capital (%) | Growth rate of labor (%) |\n|----------|----------------|---------------------------------------|-----------------------------|----------------------------|--------------------------|\n| Country A | 1.7              | 1.5                                                 | 0.3                                           | 3.2                                   | 0.4                                     |\n| Country B | 1.8              | 1.3                                                 | 0.4                                           | 3.7                                   | 0.5                                     |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-918",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the information given in Exhibit 1, what is the GDP growth rate in Country A using the Solow growth accounting equation, which is the preferred method of calculation by Thompson?",
        "output": [
            "def solution():\n    # Define variables name and value\n    tfp_growth = 1.5  # Growth in total factor productivity (%)\n    capital_elasticity = 0.3  # Output elasticity of capital\n    capital_growth = 3.2  # Growth rate of capital (%)\n    labor_growth = 0.4  # Growth rate of labor (%)\n\n    # Do math calculation to get the answer\n    # Solow growth accounting equation:\n    # GDP growth = TFP growth + (capital elasticity * capital growth) + ((1 - capital elasticity) * labor growth)\n    gdp_growth = tfp_growth + (capital_elasticity * capital_growth) + ((1 - capital_elasticity) * labor_growth)\n\n    # return answer\n    return round(gdp_growth, 2)  # Rounding to 2 decimal places for readability\n\n```\n\nThis Python program calculates the GDP growth rate for Country A using the Solow growth accounting equation. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information for Country A.\n2. We use the Solow growth accounting equation: \n   GDP growth = TFP growth + (capital elasticity * capital growth) + ((1 - capital elasticity) * labor growth)\n3. We calculate the GDP growth rate using this equation.\n4. The result is rounded to two decimal places for readability.\n\nWhen you run this function, it will return the GDP growth rate for Country A as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-919",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the onset of 2017, Corporation Beta had a retained earnings amount of $800. The company's anticipated net income for the entire year falls around $150, and they're planning to distribute a dividend of $200 to the shareholders. What amount of retained earnings will Corporation Beta have by the end of 2017?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_start = 800\n    net_income = 150\n    dividends = 200\n    \n    # Do math calculation to get the answer\n    retained_earnings_end = retained_earnings_start + net_income - dividends\n    \n    # return answer\n    return retained_earnings_end\n```\n\nThis Python program calculates the retained earnings at the end of 2017 for Corporation Beta. Here's how it works:\n\n1. We define the variables:\n   - `retained_earnings_start`: The retained earnings at the beginning of 2017 ($800)\n   - `net_income`: The anticipated net income for the year ($150)\n   - `dividends`: The planned dividend distribution ($200)\n\n2. We calculate the retained earnings at the end of 2017 using the formula:\n   Ending Retained Earnings = Beginning Retained Earnings + Net Income - Dividends\n\n3. The function returns the calculated value, which represents the retained earnings at the end of 2017.\n\nWhen you run this function, it will return 750, which is the amount of retained earnings Corporation Beta will have at the end of 2017."
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of) |\n|-----------|----------------------|\n| ABC       | 300                  |\n| Brown     | 250                  |\n| Coral     | 200                  |\n| Delta     | 150                  |\n| Erie      | 100                  |\n| All others| 50                   |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-920",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the sector's concentration ratio for four companies, based on the market share data collected by the analyst for a particular industry?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    companies = {\n        'ABC': 300,\n        'Brown': 250,\n        'Coral': 200,\n        'Delta': 150,\n        'Erie': 100,\n        'All others': 50\n    }\n    total_market = sum(companies.values())\n    top_four = sorted(companies.values(), reverse=True)[:4]\n    \n    # Do math calculation to get the answer\n    concentration_ratio = sum(top_four) / total_market * 100\n    \n    # return answer\n    return round(concentration_ratio, 2)\n```\n\nThis Python program calculates the four-firm concentration ratio for the given industry data. Here's how it works:\n\n1. We define a dictionary `companies` with the company names as keys and their sales figures as values.\n\n2. We calculate the total market size by summing all sales figures.\n\n3. We sort the sales figures in descending order and take the top four values.\n\n4. We calculate the concentration ratio by summing the sales of the top four companies, dividing by the total market size, and multiplying by 100 to get a percentage.\n\n5. We round the result to two decimal places for clarity.\n\n6. The function returns this rounded concentration ratio.\n\nThis program will return the four-firm concentration ratio, which represents the combined market share of the four largest firms in the industry, expressed as a percentage of the total market size."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-921",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment fund implements the succeeding payment structure: Yearly administrative fee based on year-end AUM: 2% Incentive fee: 20% Initial requirement rate before incentive fee starts: 4% Present top earning point: $610 million. The fund starts off the year with a value of $580 million and after one year, it ends with a value of $650 million before the fees are considered. What is the annual net percentage return to a shareholder for this year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 580_000_000\n    end_value_before_fees = 650_000_000\n    admin_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.04\n    high_water_mark = 610_000_000\n\n    # Do math calculation to get the answer\n    admin_fee = end_value_before_fees * admin_fee_rate\n    \n    profit = end_value_before_fees - initial_value\n    hurdle_amount = initial_value * hurdle_rate\n    excess_profit = max(0, profit - hurdle_amount)\n    \n    if end_value_before_fees > high_water_mark:\n        incentive_fee = excess_profit * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    total_fees = admin_fee + incentive_fee\n    end_value_after_fees = end_value_before_fees - total_fees\n    \n    net_return = (end_value_after_fees - initial_value) / initial_value\n    net_return_percentage = net_return * 100\n\n    # return answer\n    return round(net_return_percentage, 2)\n```"
        ]
    },
    {
        "tables": [
            "| Revenue | $1,000,000 |\n|---------|------------|\n| Returns of goods sold | $100,000 |\n| Cash collected | $800,000 |\n| Cost of goods sold | $700,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-922",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, which was its inaugural year of operations, GameSquare recorded certain data concerning the sale of its products. Under the accrual basis of accounting, how much net revenue would appear on GameSquare's 2009 income statement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 1000000\n    returns = 100000\n    \n    # Do math calculation to get the answer\n    net_revenue = total_revenue - returns\n    \n    # return answer\n    return net_revenue\n```\n\nThis Python program calculates the net revenue for GameSquare in 2009 based on the given information. Here's an explanation of the code:\n\n1. We define two variables:\n   - `total_revenue`: The gross revenue, which is $1,000,000 as given in the table.\n   - `returns`: The value of returns of goods sold, which is $100,000 as given in the table.\n\n2. To calculate the net revenue, we subtract the returns from the total revenue. This is because under the accrual basis of accounting, revenue is recognized when it is earned, regardless of when cash is received. However, returns reduce the actual revenue earned.\n\n3. The function returns the calculated net revenue.\n\nThe result of this calculation will be $900,000, which is the amount of net revenue that would appear on GameSquare's 2009 income statement under the accrual basis of accounting.\n\nNote that the cash collected ($800,000) and cost of goods sold ($700,000) are not relevant for calculating net revenue, which is why they are not used in this calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-923",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial advisor was requested to look for opportunities for arbitrage in the market of Treasury bonds through a comparison of the cash flows from some selected bonds and the cash flows of other bond combinations. If the price of a 1-year zero-coupon bond is USD 97 and a 1-year bond with a 7% coupon and payments every six months comes at USD 102, using a duplication method, what would be the cost of a 1-year Treasury bond with a 6% coupon that has semi-annual payments?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    zero_coupon_price = 97\n    coupon_bond_price = 102\n    coupon_rate_7 = 0.07\n    face_value = 100\n    target_coupon_rate = 0.06\n\n    # Do math calculation to get the answer\n    \n    # Calculate the implied 6-month interest rate\n    r = (100 / zero_coupon_price) ** 2 - 1\n    \n    # Calculate the present value of the 7% coupon bond's coupons\n    pv_coupons_7 = (coupon_rate_7 / 2 * face_value) / (1 + r) + (coupon_rate_7 / 2 * face_value) / (1 + r) ** 2\n    \n    # Calculate the implied price of a zero-coupon bond maturing in 1 year\n    implied_zero_coupon = coupon_bond_price - pv_coupons_7\n    \n    # Calculate the present value of the 6% coupon bond's coupons\n    pv_coupons_6 = (target_coupon_rate / 2 * face_value) / (1 + r) + (target_coupon_rate / 2 * face_value) / (1 + r) ** 2\n    \n    # Calculate the price of the 6% coupon bond\n    price_6_coupon = pv_coupons_6 + implied_zero_coupon\n\n    # return answer\n    return round(price_6_coupon, 2)\n```\n\nThis program calculates the price of a 1-year Treasury bond with a 6% coupon and semi-annual payments using the duplication method. Here's a breakdown of the steps:\n\n1. We define the given variables: prices of the zero-coupon bond and the 7% coupon bond, the 7% coupon rate, face value (assumed to be 100), and the target 6% coupon rate.\n\n2. We calculate the implied 6-month"
        ]
    },
    {
        "tables": [
            "|                | Investment A | Investment B | Total |\n|----------------|--------------|--------------|-------|\n| Initial cost   | 100          | 150          | 250   |\n| Profit/loss    | -50          | 30           | -20   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-924",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the subsequent details (in $ millions) regarding a private investment fund: The supervisor's reward fee is 20% of the earnings. If there is no clawback clause applicable, the total reward fee (in $ millions) under a U.S.-style waterfall is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_a_cost = 100\n    investment_b_cost = 150\n    investment_a_profit = -50\n    investment_b_profit = 30\n    supervisor_fee_rate = 0.20\n\n    # Do math calculation to get the answer\n    total_profit = investment_a_profit + investment_b_profit\n    \n    # In U.S.-style waterfall without clawback, fees are calculated on a deal-by-deal basis\n    # Only profitable investments contribute to the fee\n    fee_base = max(investment_b_profit, 0)  # Only Investment B is profitable\n    \n    reward_fee = fee_base * supervisor_fee_rate\n\n    # return answer\n    return reward_fee\n```\n\nThis Python program calculates the total reward fee for the supervisor under a U.S.-style waterfall without a clawback clause. Here's how it works:\n\n1. We define the initial costs and profits/losses for both investments, as well as the supervisor's fee rate (20% or 0.20).\n\n2. We calculate the total profit, although it's not directly used in this case due to the U.S.-style waterfall approach.\n\n3. In a U.S.-style waterfall without clawback, fees are calculated on a deal-by-deal basis. This means that only profitable investments contribute to the fee calculation.\n\n4. We determine the fee base by taking the maximum of Investment B's profit and 0. We only consider Investment B because it's the only profitable one (Investment A had a loss).\n\n5. The reward fee is calculated by multiplying the fee base by the supervisor's fee rate.\n\n6. Finally, we return the calculated reward fee.\n\nThis approach ensures that the supervisor receives a fee only on the profitable investment (Investment B), which is in line with the U.S.-style waterfall without clawback."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-925",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the stated price of an option is $1.25, what is the value of a single option contract?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    option_price = 1.25\n    shares_per_contract = 100\n\n    # Do math calculation to get the answer\n    contract_value = option_price * shares_per_contract\n\n    # return answer\n    return contract_value\n```\n\nThis program calculates the value of a single option contract based on the given information. Here's an explanation of the code:\n\n1. We define two variables:\n   - `option_price`: The stated price of the option, which is $1.25.\n   - `shares_per_contract`: The standard number of shares represented by one option contract, which is typically 100.\n\n2. We calculate the contract value by multiplying the option price by the number of shares per contract.\n\n3. The function returns the calculated contract value.\n\nWhen this function is called, it will return 125.0, which represents $125.00. This is because one option contract typically controls 100 shares, so the value of the contract is the price per share ($1.25) multiplied by 100 shares."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-926",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the yearly yield-to-maturity, noted with a 12 period frequency, for a 4-year, zero coupon bond priced at 75% of par value?",
        "output": [
            "Here's a Python program to calculate the yearly yield-to-maturity for the given zero-coupon bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Par value (100%)\n    price = 75  # Current price (75% of par value)\n    years = 4  # Time to maturity\n    periods_per_year = 12  # Compounding frequency\n\n    # Do math calculation to get the answer\n    total_periods = years * periods_per_year\n    periodic_rate = (face_value / price) ** (1 / total_periods) - 1\n    annual_ytm = (1 + periodic_rate) ** periods_per_year - 1\n\n    # return answer\n    return annual_ytm * 100  # Convert to percentage\n```\n\nThis program calculates the yield-to-maturity (YTM) for a zero-coupon bond using the following steps:\n\n1. We define the variables:\n   - `face_value`: The par value of the bond (100%)\n   - `price`: The current price of the bond (75% of par value)\n   - `years`: Time to maturity (4 years)\n   - `periods_per_year`: Compounding frequency (12 times per year)\n\n2. We calculate the total number of compounding periods.\n\n3. We use the formula for zero-coupon bond YTM:\n   (Face Value / Price) ^ (1 / total periods) - 1\n\n   This gives us the periodic rate.\n\n4. We then convert the periodic rate to an annual rate using the compound interest formula:\n   (1 + periodic_rate) ^ periods_per_year - 1\n\n5. Finally, we return the result as a percentage.\n\nThis program will return the yearly yield-to-maturity for the given zero-coupon bond, taking into account the 12 period frequency compounding."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-927",
        "python_solution": "",
        "ground_truth": null,
        "question": "The analyst, Jane, performed a straightforward regression that accounted for the changes in electric usage based on temperature fluctuations. The total variation for the dependent variable totaled 132.08, with the explained variation being 60.38. She made 60 observations on a monthly basis. Can you compute the F-statistic to assess the model's fit?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_variation = 132.08\n    explained_variation = 60.38\n    unexplained_variation = total_variation - explained_variation\n    num_observations = 60\n    num_independent_variables = 1  # Temperature is the only independent variable\n\n    # Do math calculation to get the answer\n    degrees_freedom_numerator = num_independent_variables\n    degrees_freedom_denominator = num_observations - num_independent_variables - 1\n    \n    mean_square_regression = explained_variation / degrees_freedom_numerator\n    mean_square_error = unexplained_variation / degrees_freedom_denominator\n    \n    f_statistic = mean_square_regression / mean_square_error\n\n    # return answer\n    return f_statistic\n```\n\nThis Python program calculates the F-statistic for the regression model described in the question. Here's a breakdown of the calculation:\n\n1. We define the given variables: total variation, explained variation, number of observations, and number of independent variables (temperature).\n\n2. We calculate the unexplained variation by subtracting the explained variation from the total variation.\n\n3. We determine the degrees of freedom for the numerator (number of independent variables) and denominator (number of observations minus number of independent variables minus 1).\n\n4. We calculate the mean square regression (explained variation divided by degrees of freedom of numerator) and mean square error (unexplained variation divided by degrees of freedom of denominator).\n\n5. Finally, we compute the F-statistic by dividing the mean square regression by the mean square error.\n\nThe function returns the calculated F-statistic, which can be used to assess the model's fit."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-928",
        "python_solution": "",
        "ground_truth": null,
        "question": "A one-year zero-coupon bond has a return of 4.0%. The yields on a two-year and a three-year zero-coupon bond are 5.0% and 6.0% respectively. What would be the forward rate for a loan for two years starting in one year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04  # 1-year zero-coupon bond yield\n    r2 = 0.05  # 2-year zero-coupon bond yield\n    r3 = 0.06  # 3-year zero-coupon bond yield\n\n    # Do math calculation to get the answer\n    # We use the formula: (1+r3)^3 = (1+r1) * (1+f)^2\n    # Where f is the forward rate we're solving for\n    f = ((1 + r3)**3 / (1 + r1))**(1/2) - 1\n\n    # Convert to percentage and round to 2 decimal places\n    answer = round(f * 100, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python function calculates the forward rate for a two-year loan starting in one year, given the yields of one-year, two-year, and three-year zero-coupon bonds.\n\nThe calculation uses the relationship between spot rates and forward rates. The formula used is derived from the fact that the three-year rate should be equivalent to investing for one year at the one-year rate and then for two years at the forward rate.\n\nThe result is converted to a percentage and rounded to two decimal places for clarity."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-929",
        "python_solution": "",
        "ground_truth": null,
        "question": "Four years ago, Mike deposited $2,000 into his savings account for home renovations, it compounded annually at an annual interest rate of 3%. Now, Mike has altered his plan and has decided to leave the money in the bank for an additional five years. What is the current value of Mike's account?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_deposit = 2000\n    annual_interest_rate = 0.03\n    initial_years = 4\n    additional_years = 5\n    total_years = initial_years + additional_years\n\n    # Do math calculation to get the answer\n    current_value = initial_deposit * (1 + annual_interest_rate) ** total_years\n\n    # return answer\n    return round(current_value, 2)\n```\n\nThis Python program calculates the current value of Mike's savings account after a total of 9 years (4 years initially planned + 5 additional years) with an annual compound interest rate of 3%.\n\nThe function does the following:\n\n1. Defines the initial variables:\n   - `initial_deposit`: The amount Mike initially deposited ($2,000)\n   - `annual_interest_rate`: The annual interest rate (3% or 0.03)\n   - `initial_years`: The number of years initially planned (4)\n   - `additional_years`: The number of additional years (5)\n   - `total_years`: The total number of years the money will be in the account (9)\n\n2. Calculates the current value using the compound interest formula:\n   A = P(1 + r)^t\n   Where:\n   A = Final amount\n   P = Principal balance (initial deposit)\n   r = Annual interest rate\n   t = Number of years\n\n3. Returns the result rounded to two decimal places to represent dollars and cents.\n\nWhen you run this function, it will return the current value of Mike's account after 9 years of compound interest."
        ]
    },
    {
        "tables": [
            "| Asset Class     | Geometric Return (%) |\n| --------------- | -------------------- |\n| Equities        | 8.0                  |\n| Corporate Bonds | 6.5                  |\n| Treasury bills  | 2.5                  |\n| Inflation       | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-930",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the actual yield for stocks, as per the historic geometric returns observed by a research analyst?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    equity_geometric_return = 8.0\n    inflation_rate = 2.1\n    \n    # Do math calculation to get the answer\n    actual_yield = ((1 + equity_geometric_return / 100) / (1 + inflation_rate / 100) - 1) * 100\n    \n    # return answer\n    return round(actual_yield, 2)\n```\n\nThis program calculates the actual yield for stocks (equities) by adjusting the geometric return for inflation. The calculation uses the Fisher equation, which relates nominal interest rates to real interest rates and inflation.\n\nThe actual yield is calculated as:\n((1 + nominal rate) / (1 + inflation rate)) - 1\n\nWe then convert this to a percentage by multiplying by 100 and round the result to two decimal places for better readability.\n\nWhen you run this function, it will return the actual yield for stocks based on the historical geometric returns, adjusted for inflation."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-931",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming quarterly compounding, what is the stated annual interest rate if a financial institution offers an effective annual rate (EAR) of 12%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    EAR = 0.12  # Effective Annual Rate of 12%\n    n = 4  # Number of compounding periods per year (quarterly)\n\n    # Do math calculation to get the answer\n    r = n * ((1 + EAR) ** (1/n) - 1)  # Calculate the stated annual interest rate\n    \n    # Convert to percentage and round to 4 decimal places\n    stated_rate = round(r * 100, 4)\n\n    # return answer\n    return stated_rate\n```\n\nThis Python program calculates the stated annual interest rate given an effective annual rate (EAR) of 12% with quarterly compounding. Here's how it works:\n\n1. We define the EAR as 0.12 (12%) and the number of compounding periods per year (n) as 4 for quarterly compounding.\n\n2. We use the formula to convert EAR to stated annual rate:\n   r = n * ((1 + EAR)^(1/n) - 1)\n   Where:\n   r is the stated annual rate\n   n is the number of compounding periods per year\n   EAR is the effective annual rate\n\n3. We calculate the result and convert it to a percentage by multiplying by 100.\n\n4. We round the result to 4 decimal places for precision.\n\n5. Finally, we return the stated annual interest rate as a percentage.\n\nWhen you run this function, it will return the stated annual interest rate that corresponds to an EAR of 12% with quarterly compounding."
        ]
    },
    {
        "tables": [
            "|                        | Maturity (Years) |     |     |     |\n|------------------------|------------------|-----|-----|-----|\n|                        | 1                | 2   | 3   | 4   |\n| Government spot rate   | 2.25%            | 2.70% | 3.30% | 4.05% |\n| Swap spread            | 0.25%            | 0.30% | 0.45% | 0.70% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-932",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson collects data on spot rates for on-the-run yearly-coupon government securities and swap spreads, as shown in the Exhibit below. Johnson purchases a four-year, zero-coupon corporate bond and then sells it after two years. Johnson demonstrates the returns from this approach using the swap rate as a substitute for corporate yields. What should Johnson display as a total return?",
        "output": [
            "Here's a Python program to calculate the total return for Johnson's investment based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    gov_spot_rate_4y = 0.0405\n    gov_spot_rate_2y = 0.0270\n    swap_spread_4y = 0.0070\n    swap_spread_2y = 0.0030\n\n    # Do math calculation to get the answer\n    \n    # Calculate swap rates (approximation for corporate yields)\n    swap_rate_4y = gov_spot_rate_4y + swap_spread_4y\n    swap_rate_2y = gov_spot_rate_2y + swap_spread_2y\n    \n    # Calculate initial price of the 4-year zero-coupon bond\n    initial_price = 100 / (1 + swap_rate_4y) ** 4\n    \n    # Calculate price after 2 years (now a 2-year zero-coupon bond)\n    price_after_2y = 100 / (1 + swap_rate_2y) ** 2\n    \n    # Calculate total return\n    total_return = (price_after_2y / initial_price - 1) * 100\n\n    # return answer\n    return round(total_return, 2)\n```\n\nThis program calculates the total return for Johnson's investment as follows:\n\n1. We define the relevant spot rates and swap spreads from the given table.\n2. We calculate the swap rates by adding the government spot rates and swap spreads for 4-year and 2-year maturities.\n3. We calculate the initial price of the 4-year zero-coupon corporate bond using the 4-year swap rate.\n4. We calculate the price of the bond after 2 years, now as a 2-year zero-coupon bond, using the 2-year swap rate.\n5. We calculate the total return as the percentage change in price over the 2-year holding period.\n6. The result is rounded to two decimal places and returned as a percentage.\n\nThis approach uses swap rates as a proxy for corporate yields, as mentioned in the question. The total return represents the gain ("
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-933",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an investment advisor has a bond position valued at USD 100 million with a modified duration of eight years and a convexity of 150 years, with the term structure being flat, what would be the change in the position's value if interest rates were to rise by 25 basis points?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_value = 100000000  # USD 100 million\n    modified_duration = 8  # 8 years\n    convexity = 150  # 150 years\n    interest_rate_change = 0.0025  # 25 basis points = 0.25%\n\n    # Do math calculation to get the answer\n    duration_effect = -bond_value * modified_duration * interest_rate_change\n    convexity_effect = 0.5 * bond_value * convexity * (interest_rate_change ** 2)\n    total_change = duration_effect + convexity_effect\n\n    # return answer\n    return total_change\n```\n\nThis Python program calculates the change in the bond position's value given the provided information:\n\n1. We define the variables with their given values.\n2. We calculate the duration effect using the formula: -P * D * Δy, where P is the bond value, D is the modified duration, and Δy is the change in yield.\n3. We calculate the convexity effect using the formula: 0.5 * P * C * (Δy)^2, where C is the convexity.\n4. We sum the duration effect and convexity effect to get the total change in the bond's value.\n5. The function returns this total change.\n\nWhen you run this function, it will return the dollar amount change in the bond position's value due to the 25 basis point increase in interest rates, taking into account both the modified duration and convexity of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-934",
        "python_solution": "",
        "ground_truth": null,
        "question": "The women's apparel producer, Ivory Ensign, recorded a $20 million expense in salaries. The initial balance of payable salaries was at $3 million and eventually ended at $1 million. How much in salaries did the firm distribute in cash?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    salaries_expense = 20000000\n    initial_payable_salaries = 3000000\n    ending_payable_salaries = 1000000\n    \n    # Do math calculation to get the answer\n    salaries_distributed = salaries_expense + initial_payable_salaries - ending_payable_salaries\n    \n    # return answer\n    return salaries_distributed\n```\n\nThis Python program calculates the amount of salaries distributed in cash by Ivory Ensign. Here's how it works:\n\n1. We define the given values:\n   - `salaries_expense`: The recorded expense for salaries ($20 million)\n   - `initial_payable_salaries`: The initial balance of payable salaries ($3 million)\n   - `ending_payable_salaries`: The ending balance of payable salaries ($1 million)\n\n2. To calculate the salaries distributed in cash, we use the following formula:\n   Salaries distributed = Salaries expense + Initial payable salaries - Ending payable salaries\n\n3. The program then returns the calculated value, which represents the amount of salaries distributed in cash.\n\nWhen you run this function, it will return 22000000, which means Ivory Ensign distributed $22 million in salaries as cash."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-935",
        "python_solution": "",
        "ground_truth": null,
        "question": "The annual spot rate r(1) is 5% and the forward price for a one-year zero-coupon bond starting in a year stands at 0.9346. What would be the spot price of a two-year zero-coupon bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.05  # annual spot rate for year 1\n    f2 = 0.9346  # forward price for one-year zero-coupon bond starting in a year\n\n    # Do math calculation to get the answer\n    r2 = (1 / f2) - 1  # implied forward rate for year 2\n    spot_price_2year = 1 / ((1 + r1) * (1 + r2))\n\n    # return answer\n    return spot_price_2year\n```\n\nThis Python program calculates the spot price of a two-year zero-coupon bond based on the given information. Here's how it works:\n\n1. We define the known variables:\n   - `r1`: The annual spot rate for year 1 (5% or 0.05)\n   - `f2`: The forward price for a one-year zero-coupon bond starting in a year (0.9346)\n\n2. We calculate the implied forward rate for year 2 (`r2`) using the formula:\n   r2 = (1 / f2) - 1\n\n3. We then calculate the spot price of the two-year zero-coupon bond using the formula:\n   spot_price_2year = 1 / ((1 + r1) * (1 + r2))\n\n   This formula discounts the face value of 1 using both the first-year spot rate and the implied forward rate for the second year.\n\n4. Finally, we return the calculated spot price.\n\nThis program will return the spot price of the two-year zero-coupon bond as a decimal. For example, if the result is 0.8573, it means the spot price is $0.8573 per $1 of face value."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-936",
        "python_solution": "",
        "ground_truth": null,
        "question": "The possibility of a variable, which follows a normal distribution with an average of 0.9 and a standard deviation of 1.5, being in the range of 0.9 and 1.2 is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    import scipy.stats as stats\n    \n    mean = 0.9\n    std_dev = 1.5\n    lower_bound = 0.9\n    upper_bound = 1.2\n    \n    # Do math calculation to get the answer\n    z_lower = (lower_bound - mean) / std_dev\n    z_upper = (upper_bound - mean) / std_dev\n    \n    probability = stats.norm.cdf(z_upper) - stats.norm.cdf(z_lower)\n    \n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability of a normally distributed variable falling within a specific range. Here's an explanation of the code:\n\n1. We import the `scipy.stats` module to use its statistical functions.\n\n2. We define the variables:\n   - `mean` as 0.9 (the average of the distribution)\n   - `std_dev` as 1.5 (the standard deviation)\n   - `lower_bound` as 0.9 (the lower limit of the range)\n   - `upper_bound` as 1.2 (the upper limit of the range)\n\n3. We calculate the z-scores for the lower and upper bounds using the formula: z = (x - μ) / σ\n   Where x is the bound value, μ is the mean, and σ is the standard deviation.\n\n4. We use the cumulative distribution function (CDF) of the standard normal distribution to calculate the probability. The probability of being between the two bounds is the difference between the CDF at the upper z-score and the CDF at the lower z-score.\n\n5. Finally, we return this probability as the answer.\n\nThis program will return the probability (a value between 0 and 1) of the variable being between 0.9 and 1.2, given its normal distribution with mean 0.9 and standard deviation 1.5."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-937",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Pelican Enterprises reported a net profit of $1,000,000. On the first of January, 2009, there were 1,000,000 shares in circulation. The company issued an additional 100,000 shares at $20 per share on July 1, 2009. Common shareholders received $200,000 in dividends. What is the basic earnings per share for Pelican Enterprises for the year 2009?",
        "output": [
            "Here's the Python program to calculate the basic earnings per share for Pelican Enterprises for the year 2009:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_profit = 1000000\n    initial_shares = 1000000\n    additional_shares = 100000\n    additional_shares_time = 6 / 12  # 6 months out of 12\n\n    # Do math calculation to get the answer\n    weighted_average_shares = initial_shares + (additional_shares * additional_shares_time)\n    earnings_per_share = net_profit / weighted_average_shares\n\n    # return answer\n    return round(earnings_per_share, 2)\n```\n\nThis program calculates the basic earnings per share as follows:\n\n1. We define the given variables: net profit, initial number of shares, and additional shares issued.\n\n2. We calculate the weighted average number of shares outstanding:\n   - The initial 1,000,000 shares were outstanding for the entire year.\n   - The additional 100,000 shares were outstanding for 6 months (July 1 to December 31), which is half a year.\n\n3. We divide the net profit by the weighted average number of shares to get the earnings per share.\n\n4. The result is rounded to two decimal places for better readability.\n\nNote that the dividends paid ($200,000) don't affect the basic earnings per share calculation, so they are not used in this program."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-938",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company is planning to acquire 10,000 barrels of West Texas Intermediate Crude Oil and intends to hedge its purchase utilizing the Brent Crude Oil futures contract. Given that the correlation between the spot and futures prices is 0.72 and the annual volatility of the spot price and the Brent Crude Oil futures price are 0.35 and 0.27 respectively, what is the hedge ratio for the company?",
        "output": [
            "Here's the Python program to calculate the hedge ratio for the company based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.72\n    spot_volatility = 0.35\n    futures_volatility = 0.27\n    \n    # Do math calculation to get the answer\n    hedge_ratio = correlation * (spot_volatility / futures_volatility)\n    \n    # return answer\n    return hedge_ratio\n```\n\nThis program calculates the hedge ratio using the formula:\n\nHedge Ratio = Correlation * (Spot Price Volatility / Futures Price Volatility)\n\nThe hedge ratio is a measure of how many futures contracts are needed to hedge a position in the underlying asset. In this case, it will tell the company how many Brent Crude Oil futures contracts they should use to hedge their purchase of West Texas Intermediate Crude Oil.\n\nNote that this calculation gives the optimal hedge ratio based on the minimum variance hedge ratio formula. The company would need to multiply this ratio by the number of barrels they're purchasing (10,000) and divide by the contract size of Brent Crude Oil futures to determine the actual number of contracts to trade."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-939",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the cost per 100 of face value for a bond offering a 3% annual interest rate that will mature in two years, given a market discount rate of 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.03\n    years_to_maturity = 2\n    market_rate = 0.04\n\n    # Do math calculation to get the answer\n    annual_coupon = face_value * coupon_rate\n    present_value_coupons = annual_coupon * ((1 - (1 / (1 + market_rate)**years_to_maturity)) / market_rate)\n    present_value_principal = face_value / (1 + market_rate)**years_to_maturity\n    bond_price = present_value_coupons + present_value_principal\n\n    # return answer\n    return bond_price\n```\n\nThis Python program calculates the price of a bond per 100 of face value, given the specified conditions:\n\n1. The bond has a face value of 100.\n2. It offers a 3% annual interest rate (coupon rate).\n3. It will mature in two years.\n4. The market discount rate is 4%.\n\nThe program uses the bond pricing formula, which involves calculating the present value of future cash flows (coupon payments and principal repayment) discounted at the market rate.\n\nThe solution() function will return the bond price, which represents the cost per 100 of face value under the given conditions."
        ]
    },
    {
        "tables": [
            "| coupon | 15% annual-pay coupon |\n| --- | --- |\n| years to maturity | 7 years |\n| current price | trading at par |\n| basis point change in yield | 25 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-940",
        "python_solution": "",
        "ground_truth": null,
        "question": "Estimate the approximate modified duration of the bond given the details below:",
        "output": [
            "Here's a Python program to estimate the approximate modified duration of the bond based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.15  # 15% annual-pay coupon\n    years_to_maturity = 7\n    price = 100  # trading at par (100%)\n    basis_point_change = 25  # 25 basis points\n    \n    # Do math calculation to get the answer\n    yield_change = basis_point_change / 10000  # Convert basis points to decimal\n    price_change = price * (yield_change / 100)  # Assuming 1% price change for simplicity\n    \n    # Calculate modified duration\n    modified_duration = (price_change / price) / yield_change\n    \n    # return answer\n    return modified_duration\n\n```\n\nThis program calculates the approximate modified duration of the bond using the following steps:\n\n1. We define the given variables: coupon rate, years to maturity, current price (par value), and the basis point change in yield.\n\n2. We convert the basis point change to a decimal (dividing by 10,000).\n\n3. We estimate the price change assuming a 1% change for simplicity. This is a rough approximation, as the actual relationship between yield and price is not linear.\n\n4. We calculate the modified duration using the formula: \n   Modified Duration = (Change in Price / Initial Price) / Change in Yield\n\n5. The function returns the calculated modified duration.\n\nNote that this is an approximation and may not be as accurate as more complex methods, but it provides a reasonable estimate given the limited information provided."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-941",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier purchases a Treasury bill that matures in one month for $987. When it matures, he receives $1,000. Work out the effective annual rate (EAR) for him.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 987\n    face_value = 1000\n    periods_per_year = 12  # 12 months in a year\n\n    # Do math calculation to get the answer\n    monthly_rate = (face_value / purchase_price) - 1\n    ear = (1 + monthly_rate) ** periods_per_year - 1\n\n    # return answer\n    return ear * 100  # Convert to percentage\n```\n\nThis Python program calculates the Effective Annual Rate (EAR) for the given scenario. Here's a breakdown of the calculation:\n\n1. We define the purchase price ($987), face value ($1,000), and the number of periods per year (12, as it's a one-month bill).\n\n2. We calculate the monthly rate by dividing the face value by the purchase price and subtracting 1.\n\n3. To get the EAR, we use the formula: EAR = (1 + r)^n - 1, where r is the periodic rate (monthly rate in this case) and n is the number of periods per year.\n\n4. We multiply the result by 100 to convert it to a percentage.\n\nThe function will return the EAR as a percentage, which can be rounded or formatted as needed when displayed."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-942",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firm B declared COGS of $50 million. Over the year, there was an increase of $8 million in inventory and a decrease of $5 million in accounts payable. What is the total cash the firm paid to its suppliers?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    cogs = 50_000_000\n    inventory_increase = 8_000_000\n    accounts_payable_decrease = 5_000_000\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cogs + inventory_increase + accounts_payable_decrease\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\n\nThis program calculates the total cash paid to suppliers by considering three factors:\n\n1. Cost of Goods Sold (COGS): $50 million\n2. Increase in inventory: $8 million\n3. Decrease in accounts payable: $5 million\n\nThe calculation adds these three components together because:\n- COGS represents the base amount of goods purchased\n- An increase in inventory means additional purchases were made\n- A decrease in accounts payable means more bills were paid to suppliers\n\nThe sum of these three factors gives us the total cash paid to suppliers during the year."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-943",
        "python_solution": "",
        "ground_truth": null,
        "question": "In New York, Mia peddles homemade cakes. On a daily basis, she can sell 250 cakes at $10 each. On Mother's Day, she offers a special discount and anticipates a sale of 350 cakes at the discounted rate of $8 per cake. What is the marginal revenue per cake she earns from the special discount?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    regular_sales = 250\n    regular_price = 10\n    special_sales = 350\n    special_price = 8\n\n    # Do math calculation to get the answer\n    regular_revenue = regular_sales * regular_price\n    special_revenue = special_sales * special_price\n    \n    additional_cakes = special_sales - regular_sales\n    additional_revenue = special_revenue - regular_revenue\n    \n    marginal_revenue = additional_revenue / additional_cakes\n\n    # return answer\n    return marginal_revenue\n```\n\nThis Python program calculates the marginal revenue per cake that Mia earns from the special Mother's Day discount. Here's how it works:\n\n1. We define the variables for regular sales (250 cakes), regular price ($10), special sales (350 cakes), and special price ($8).\n\n2. We calculate the total revenue for both regular and special scenarios.\n\n3. We determine the additional cakes sold (special_sales - regular_sales) and the additional revenue generated (special_revenue - regular_revenue).\n\n4. The marginal revenue per cake is calculated by dividing the additional revenue by the additional cakes sold.\n\n5. Finally, we return the marginal revenue per cake.\n\nThis program will return the marginal revenue per cake that Mia earns from the special discount, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-944",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond has an annual coupon rate of 4%, and it pays interest twice a year, and is due in two years. Given a 6% market discount rate, what is the cost of this bond for every 100 of nominal value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nominal_value = 100\n    coupon_rate = 0.04\n    payments_per_year = 2\n    years_to_maturity = 2\n    market_rate = 0.06\n    \n    # Do math calculation to get the answer\n    semi_annual_rate = market_rate / 2\n    number_of_periods = years_to_maturity * payments_per_year\n    coupon_payment = (coupon_rate / payments_per_year) * nominal_value\n    \n    # Calculate present value of coupon payments\n    pv_coupons = coupon_payment * ((1 - (1 + semi_annual_rate)**(-number_of_periods)) / semi_annual_rate)\n    \n    # Calculate present value of principal repayment\n    pv_principal = nominal_value / (1 + semi_annual_rate)**number_of_periods\n    \n    # Sum up to get bond price\n    bond_price = pv_coupons + pv_principal\n    \n    # return answer\n    return round(bond_price, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-945",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a portfolio contains two investments, both of equal value, with a VaR of $15 million and $30 million respectively, and if these two investments are perfectly correlated, what would be the calculated VaR of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    var_investment1 = 15000000  # VaR of first investment in dollars\n    var_investment2 = 30000000  # VaR of second investment in dollars\n    correlation = 1  # Perfect correlation\n    \n    # Do math calculation to get the answer\n    # For perfectly correlated investments, we sum the individual VaRs\n    portfolio_var = var_investment1 + var_investment2\n    \n    # return answer\n    return portfolio_var\n```\n\nThis Python program calculates the Value at Risk (VaR) for a portfolio containing two perfectly correlated investments of equal value. \n\nHere's an explanation of the calculation:\n\n1. We define the VaR for each investment: $15 million and $30 million.\n2. The correlation is 1, indicating perfect correlation.\n3. For perfectly correlated investments, the portfolio VaR is simply the sum of the individual VaRs.\n4. Therefore, we add the two VaRs together to get the portfolio VaR.\n\nThe program will return 45000000, which represents $45 million, the VaR of the entire portfolio."
        ]
    },
    {
        "tables": [
            "| | | Year 1 | Year 2 | Year 3 | Year 4 |\n|---|---|---|---|---|---|\n| | NOI | $1,100,000 | $1,166,000 | $1,236,000 | $1,310,000 |\n| | | **DCF Assumptions** | | | |\n| | | | Investment Hold Period | | 3 years |\n| | | | Going-in Cap Rate | | 5.00% |\n| | | | Terminal Cap Rate | | 6.00% |\n| | | | Discount Rate | | 7.00% |\n| | | | Income /Value  Growth Rate | | Constant |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-946",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given information, what is the worth of Asset A utilizing the direct capitalization approach?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    noi_year_1 = 1100000  # NOI for Year 1\n    going_in_cap_rate = 0.05  # 5.00% going-in cap rate\n\n    # Do math calculation to get the answer\n    asset_value = noi_year_1 / going_in_cap_rate\n\n    # return answer\n    return asset_value\n```\n\nThis Python program calculates the value of Asset A using the direct capitalization approach. Here's how it works:\n\n1. We define the variables:\n   - `noi_year_1`: The Net Operating Income (NOI) for Year 1, which is $1,100,000.\n   - `going_in_cap_rate`: The going-in capitalization rate, which is 5.00% or 0.05 in decimal form.\n\n2. We perform the calculation:\n   - The direct capitalization approach determines the value of an asset by dividing its net operating income by the capitalization rate.\n   - So, we divide `noi_year_1` by `going_in_cap_rate`.\n\n3. Finally, we return the calculated asset value.\n\nWhen you run this function, it will return the value of Asset A using the direct capitalization approach based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-947",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business offers a two-year, non-refundable service agreement for €420. Historically, the business anticipates meeting 25% of service expenses in the first year of the contract, with the rest covered in the second year. How much revenue does the business recognize in the first year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_contract_value = 420  # Total value of the two-year contract in euros\n    first_year_expense_percentage = 0.25  # 25% of expenses in the first year\n\n    # Do math calculation to get the answer\n    first_year_revenue = total_contract_value * first_year_expense_percentage\n\n    # return answer\n    return first_year_revenue\n```\n\nThis Python program calculates the revenue recognized in the first year based on the given information. Here's how it works:\n\n1. We define the total contract value as €420.\n2. We set the percentage of expenses expected in the first year as 25% or 0.25.\n3. To calculate the revenue recognized in the first year, we multiply the total contract value by the percentage of expenses for the first year.\n4. The function returns this calculated value, which represents the revenue recognized in the first year.\n\nWhen you run this function, it will return 105, meaning the business recognizes €105 in revenue during the first year of the contract."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-948",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Sarah intends to purchase a property five years from now, anticipated to be worth $250,000 then, how much should she invest currently, given an annual rate of 3% that is compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 250000\n    years = 5\n    annual_rate = 0.03\n    compounds_per_year = 12\n\n    # Do math calculation to get the answer\n    r = annual_rate / compounds_per_year\n    n = compounds_per_year * years\n    present_value = future_value / ((1 + r) ** n)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value of an investment needed to reach a future value of $250,000 in 5 years, given an annual interest rate of 3% compounded monthly. Here's a breakdown of the calculation:\n\n1. We define the variables:\n   - `future_value`: The anticipated property value in 5 years ($250,000)\n   - `years`: The time period (5 years)\n   - `annual_rate`: The annual interest rate (3% or 0.03)\n   - `compounds_per_year`: The number of times interest is compounded per year (12 for monthly)\n\n2. We calculate the present value using the formula:\n   PV = FV / (1 + r)^n\n   Where:\n   - PV is the present value (what we're solving for)\n   - FV is the future value ($250,000)\n   - r is the interest rate per compounding period (annual rate divided by compounds per year)\n   - n is the total number of compounding periods (compounds per year multiplied by the number of years)\n\n3. The result is rounded to two decimal places for cents accuracy.\n\nThis program will return the amount Sarah should invest now to reach her goal of $250,000 in 5 years, assuming a 3% annual interest rate compounded monthly."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period: Price(E) | Beginning of Period: Shares | End of Period: Price(€) | End of Period: Shares |\n|----------|-------------------------------|-----------------------------|-------------------------|-----------------------|\n| A        | 20.00                         | 300                         | 22.00                   | 300                   |\n| B        | 50.00                         | 300                         | 48.00                   | 300                   |\n| C        | 26.00                         | 2,000                       | 30.00                   | 2,000                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-949",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the following information for a value-weighted index: What is the return on the value-weighted index for the given period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    securities = ['A', 'B', 'C']\n    start_prices = [20.00, 50.00, 26.00]\n    end_prices = [22.00, 48.00, 30.00]\n    shares = [300, 300, 2000]\n\n    # Do math calculation to get the answer\n    total_start_value = sum(price * share for price, share in zip(start_prices, shares))\n    total_end_value = sum(price * share for price, share in zip(end_prices, shares))\n\n    value_weighted_return = (total_end_value - total_start_value) / total_start_value\n\n    # return answer\n    return value_weighted_return * 100  # Convert to percentage\n```\n\nThis Python program calculates the return on the value-weighted index for the given period. Here's a breakdown of what the program does:\n\n1. It defines the securities, their starting prices, ending prices, and number of shares as lists.\n\n2. It calculates the total market value at the start of the period by multiplying each security's starting price by its number of shares and summing these values.\n\n3. It calculates the total market value at the end of the period in the same way, using the ending prices.\n\n4. It calculates the value-weighted return using the formula: (End Value - Start Value) / Start Value\n\n5. Finally, it returns the result as a percentage.\n\nThis approach gives equal weight to each security based on its market capitalization, which is the defining characteristic of a value-weighted index."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-950",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Corporation X employs the double-declining balance method for amortizing a patent worth $120,000 with a useful lifespan of 4 years, what would be the difference in the net book value at the end of the 3rd year if it switched to the straight-line method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 120000\n    useful_life = 4\n    years = 3\n\n    # Do math calculation to get the answer\n    \n    # Double-declining balance method\n    ddb_rate = 2 / useful_life\n    ddb_value = initial_value\n    for _ in range(years):\n        ddb_value -= ddb_value * ddb_rate\n\n    # Straight-line method\n    sl_annual_depreciation = initial_value / useful_life\n    sl_value = initial_value - (sl_annual_depreciation * years)\n\n    # Calculate the difference\n    difference = sl_value - ddb_value\n\n    # return answer\n    return round(difference, 2)\n```\n\nThis Python program calculates the difference in net book value at the end of the 3rd year between the double-declining balance method and the straight-line method for amortizing a patent worth $120,000 with a useful lifespan of 4 years.\n\nThe program does the following:\n\n1. Defines the initial variables: initial value of the patent, useful life, and the number of years we're calculating for.\n\n2. Calculates the net book value using the double-declining balance method:\n   - Calculates the rate (2 divided by useful life)\n   - Applies the rate to the remaining value each year for 3 years\n\n3. Calculates the net book value using the straight-line method:\n   - Calculates the annual depreciation (initial value divided by useful life)\n   - Subtracts 3 years worth of depreciation from the initial value\n\n4. Calculates the difference between the two methods.\n\n5. Returns the rounded difference to two decimal places.\n\nThe returned value will be the difference in net book value at the end of the 3rd year between the two methods."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n| ----------------- | ------- | ---------------------------- |\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% |   |\n| Average annual equity return:4.6% | Year-over-year equity return:-9.4% |   |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E:14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% |   | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% |   | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-951",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier from Australia presently possesses an equity portfolio worth A$240 million. Based on his evaluation of the risk and return potential of the Australian economy, he is thinking about reconfiguring his portfolio. A table was generated containing data relevant to the Australian investment markets and the economy: Use the data from the table to determine the historical Australian equity risk premium using the \"equity-vs-bonds\" premium approach.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    historical_avg_equity_return = 0.046  # 4.6%\n    historical_avg_bond_yield = 0.028  # 2.8%\n\n    # Do math calculation to get the answer\n    equity_risk_premium = historical_avg_equity_return - historical_avg_bond_yield\n\n    # return answer\n    return equity_risk_premium * 100  # Convert to percentage\n```\n\nThis Python program calculates the historical Australian equity risk premium using the \"equity-vs-bonds\" premium approach based on the data provided in the table.\n\nThe equity risk premium is calculated as the difference between the average annual equity return and the average government bond yield, both from the 10-Year Historical column.\n\nThe function returns the result as a percentage (multiplied by 100 for easier reading). The answer will be the historical Australian equity risk premium."
        ]
    },
    {
        "tables": [
            "| acquisition cost | $500,000 |\n|---|---|\n| accumulated depreciation | $90,000 |\n| loss on the sale | $100,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-952",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the analyst attempting to calculate the selling price of the intangible asset of corporation TDC based on the data provided?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 500000\n    accumulated_depreciation = 90000\n    loss_on_sale = 100000\n\n    # Do math calculation to get the answer\n    book_value = acquisition_cost - accumulated_depreciation\n    selling_price = book_value - loss_on_sale\n\n    # return answer\n    return selling_price\n```\n\nThis Python program calculates the selling price of the intangible asset based on the given information. Here's how it works:\n\n1. We define the variables with the given values:\n   - The acquisition cost is $500,000\n   - The accumulated depreciation is $90,000\n   - The loss on the sale is $100,000\n\n2. To calculate the selling price:\n   - First, we calculate the book value by subtracting the accumulated depreciation from the acquisition cost.\n   - Then, we subtract the loss on the sale from the book value to get the selling price.\n\n3. The function returns the calculated selling price.\n\nWhen you run this function, it will return the selling price that the analyst is attempting to calculate for the intangible asset of corporation TDC based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-953",
        "python_solution": "",
        "ground_truth": null,
        "question": "By utilizing the two-stage dividend discount model, John has appraised the worth of Corporation N. The firm has given a dividend of $1 per share in the latest year. In this model, it is forecasted that the dividend will have an annual growth of 10% for the initial three years, then continue to grow at a rate of 5% per year indefinitely. With a required return rate of 10%, what is the present value of Corporation N's stock?",
        "output": [
            "def solution():\n    # Define variables name and value\n    D0 = 1  # Current dividend\n    g1 = 0.10  # Initial growth rate for first 3 years\n    g2 = 0.05  # Long-term growth rate after 3 years\n    r = 0.10  # Required rate of return\n    n = 3  # Number of years for initial growth period\n\n    # Do math calculation to get the answer\n    # Calculate dividends for years 1, 2, and 3\n    D1 = D0 * (1 + g1)\n    D2 = D1 * (1 + g1)\n    D3 = D2 * (1 + g1)\n\n    # Calculate the present value of dividends for first 3 years\n    PV_initial = D1 / (1 + r) + D2 / (1 + r)**2 + D3 / (1 + r)**3\n\n    # Calculate the terminal value at year 3\n    D4 = D3 * (1 + g2)\n    terminal_value = D4 / (r - g2)\n\n    # Discount the terminal value to present\n    PV_terminal = terminal_value / (1 + r)**3\n\n    # Sum up the total present value\n    total_PV = PV_initial + PV_terminal\n\n    # return answer\n    return round(total_PV, 2)"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-954",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the following spot rates term structure: 1-year at 2.50%, 2-year at 3.00%, 3-year at 3.50%, 4-year at 4.00%, and 5-year at 4.50%, can you calculate the two-year forward rate that begins after three years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_3y = 0.035\n    spot_5y = 0.045\n\n    # Do math calculation to get the answer\n    compound_3y = (1 + spot_3y) ** 3\n    compound_5y = (1 + spot_5y) ** 5\n    \n    forward_rate = ((compound_5y / compound_3y) ** (1/2)) - 1\n\n    # return answer\n    return round(forward_rate, 4)\n```\n\nThis Python function calculates the two-year forward rate that begins after three years, given the spot rates term structure provided in the question. Here's how it works:\n\n1. We define the relevant spot rates: the 3-year rate (0.035 or 3.50%) and the 5-year rate (0.045 or 4.50%).\n\n2. We calculate the compound factors for 3 years and 5 years.\n\n3. We use the formula for forward rates: (1 + r₅)⁵ = (1 + r₃)³ * (1 + f)², where r₅ is the 5-year spot rate, r₃ is the 3-year spot rate, and f is the 2-year forward rate starting in 3 years.\n\n4. We solve this equation for f, which gives us: f = ((1 + r₅)⁵ / (1 + r₃)³)^(1/2) - 1\n\n5. We round the result to 4 decimal places for readability.\n\n6. The function returns this calculated forward rate.\n\nWhen you run this function, it will return the two-year forward rate that begins after three years, based on the given spot rates term structure."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-955",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher ascertains that roughly 99% of the daily sales observations for a firm fall within the $230,000 to $480,000 bracket, with the sales being distributed normally. If about 99% of all observations fit in the μ±3σ range, what is the standard deviation of the corporation's daily sales when using the approximate z-value instead of the accurate table?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    upper_bound = 480000\n    lower_bound = 230000\n    z_score = 3  # Approximately 99% of data falls within 3 standard deviations\n\n    # Do math calculation to get the answer\n    range = upper_bound - lower_bound\n    standard_deviation = range / (2 * z_score)\n\n    # return answer\n    return standard_deviation\n```\n\nThis Python program calculates the standard deviation of the corporation's daily sales based on the given information. Here's how it works:\n\n1. We define the upper and lower bounds of the sales range ($480,000 and $230,000 respectively).\n2. We use a z-score of 3, which corresponds to approximately 99% of the data in a normal distribution.\n3. We calculate the range by subtracting the lower bound from the upper bound.\n4. To find the standard deviation, we divide this range by 2 times the z-score. This is because the total range (upper bound - lower bound) represents 6 standard deviations (3 above the mean and 3 below).\n\nThe program will return the calculated standard deviation, which represents the average amount by which daily sales deviate from the mean."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-956",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ corporation rents a machine for its operations for a duration of 6 years with an annual payment of $3000, an 8% interest rate, under an operating lease, what is the present value of the lease payment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 3000\n    interest_rate = 0.08\n    lease_term = 6\n\n    # Do math calculation to get the answer\n    present_value = annual_payment * ((1 - (1 + interest_rate) ** -lease_term) / interest_rate)\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python function calculates the present value of the lease payments for XYZ corporation based on the given information:\n\n1. The annual payment is $3000\n2. The interest rate is 8% (0.08 in decimal form)\n3. The lease term is 6 years\n\nThe function uses the present value of an annuity formula to calculate the result:\n\nPV = PMT * ((1 - (1 + r)^-n) / r)\n\nWhere:\nPV = Present Value\nPMT = Annual Payment\nr = Interest Rate\nn = Number of Periods (years in this case)\n\nThe result is rounded to two decimal places to represent currency accurately. When you call this function, it will return the present value of the lease payments."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-957",
        "python_solution": "",
        "ground_truth": null,
        "question": "If in 2016, Serena purchased a machine for $50,000 that has a useful life of ten years and a residual value of $5,000, what would the depreciation of this machine be in 2017 if we use the straight-line method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 50000\n    useful_life = 10\n    residual_value = 5000\n\n    # Do math calculation to get the answer\n    depreciable_amount = purchase_price - residual_value\n    annual_depreciation = depreciable_amount / useful_life\n\n    # return answer\n    return annual_depreciation\n```\n\nThis Python program calculates the annual depreciation for the machine using the straight-line method. Here's how it works:\n\n1. We define the variables:\n   - `purchase_price`: The initial cost of the machine ($50,000)\n   - `useful_life`: The expected useful life of the machine (10 years)\n   - `residual_value`: The estimated value at the end of its useful life ($5,000)\n\n2. We calculate the depreciable amount by subtracting the residual value from the purchase price.\n\n3. We then divide the depreciable amount by the useful life to get the annual depreciation.\n\n4. Finally, we return the annual depreciation.\n\nThis calculation gives us the depreciation for each year, including 2017, assuming the straight-line method is used. The depreciation amount will be the same for each year of the machine's useful life."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-958",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the 1st of January, a company releases ten-year bonds with a principal amount of €10,000,000 and with yearly interest payments due every 31st of December. The coupon rate is 2.0 percent, and the effective interest rate is 3.0 percent. By applying the effective interest rate method, what is the amortized discount at the conclusion of the first year?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 10000000  # Principal amount in euros\n    coupon_rate = 0.02  # 2.0% coupon rate\n    effective_rate = 0.03  # 3.0% effective interest rate\n    years = 10  # Bond term in years\n\n    # Do math calculation to get the answer\n    \n    # Calculate the present value of the bond\n    annual_coupon = principal * coupon_rate\n    present_value = annual_coupon * (1 - (1 + effective_rate)**-years) / effective_rate + principal / (1 + effective_rate)**years\n    \n    # Calculate the initial discount\n    initial_discount = principal - present_value\n    \n    # Calculate the interest expense for the first year\n    interest_expense = present_value * effective_rate\n    \n    # Calculate the amortized discount for the first year\n    amortized_discount = interest_expense - annual_coupon\n    \n    # Round the result to 2 decimal places\n    answer = round(amortized_discount, 2)\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the amortized discount at the end of the first year for the given bond using the effective interest rate method. Here's a breakdown of the steps:\n\n1. We define the variables for the principal amount, coupon rate, effective interest rate, and the term of the bond.\n2. We calculate the present value of the bond using the formula for the present value of an annuity plus the present value of the principal repayment.\n3. We determine the initial discount, which is the difference between the principal and the present value.\n4. We calculate the interest expense for the first year by multiplying the present value by the effective interest rate.\n5. We calculate the amortized discount for the first year, which is the difference between the interest expense and the annual coupon payment.\n6. Finally, we round the result to two decimal places and return it.\n\nThis program will return the amortized discount at the end of the first year in euros."
        ]
    },
    {
        "tables": [
            "| Balance Sheet Item                          | 12/31/2016 | 12/31/2017 |\n| ------------------------------------------- | ---------- | ---------- |\n| Common stock                                | $50        | $55        |\n| Additional paid-in capital  common stock    | $80        | $100       |\n| Retained earnings                           | $95        | $150       |"
        ],
        "topic": "Accounting",
        "question_id": "test-959",
        "python_solution": "",
        "ground_truth": null,
        "question": "The net income reported by Corporation B was $56 million. Given the subsequent balance sheets (in $millions), what was the known net financing cash flows for 2017? The assumption is that dividends paid are considered as CFF.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    common_stock_2016 = 50\n    common_stock_2017 = 55\n    additional_paid_in_capital_2016 = 80\n    additional_paid_in_capital_2017 = 100\n    retained_earnings_2016 = 95\n    retained_earnings_2017 = 150\n    net_income = 56\n\n    # Do math calculation to get the answer\n    change_in_common_stock = common_stock_2017 - common_stock_2016\n    change_in_additional_paid_in_capital = additional_paid_in_capital_2017 - additional_paid_in_capital_2016\n    change_in_retained_earnings = retained_earnings_2017 - retained_earnings_2016\n    \n    dividends_paid = net_income - change_in_retained_earnings\n    \n    net_financing_cash_flows = change_in_common_stock + change_in_additional_paid_in_capital - dividends_paid\n\n    # return answer\n    return net_financing_cash_flows\n```\n\nThis Python program calculates the net financing cash flows for 2017 based on the given balance sheet information and net income. Here's how it works:\n\n1. We define variables for all the relevant balance sheet items for both 2016 and 2017, as well as the net income.\n\n2. We calculate the changes in common stock, additional paid-in capital, and retained earnings from 2016 to 2017.\n\n3. We calculate the dividends paid by subtracting the change in retained earnings from the net income. This is because retained earnings increase by net income and decrease by dividends paid.\n\n4. Finally, we calculate the net financing cash flows by adding the change in common stock and additional paid-in capital (which represent cash inflows from issuing equity) and subtracting the dividends paid (which represent cash outflows to shareholders).\n\n5. The function returns this calculated value as the answer.\n\nThis approach assumes that all changes in equity accounts (except for retained earnings) represent cash flows, and that dividends are the only other financing cash flow. The result will be in millions of dollars, consistent with the"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-960",
        "python_solution": "",
        "ground_truth": null,
        "question": "If there is a positive parallel shift in the yield curve of 25 basis points, which of the following answers best estimates the resulting change in the value of Michael’s portfolio which contains a fixed-income position with a market value of USD 70 million, a modified duration of 6.44 years, and yields 6.7% compounded semiannually?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value = 70000000  # USD 70 million\n    modified_duration = 6.44  # years\n    yield_shift = 0.0025  # 25 basis points = 0.25%\n\n    # Do math calculation to get the answer\n    price_change_percentage = -modified_duration * yield_shift\n    price_change_value = market_value * price_change_percentage\n\n    # return answer\n    return round(price_change_value, 2)\n```\n\nThis Python program calculates the estimated change in the value of Michael's portfolio given a positive parallel shift in the yield curve of 25 basis points (0.25%).\n\nHere's an explanation of the calculation:\n\n1. We use the formula: Percentage Price Change ≈ -Modified Duration * Yield Change\n2. The yield change is 25 basis points, which is 0.0025 in decimal form\n3. We multiply this by the negative of the modified duration (-6.44)\n4. This gives us the percentage change in price\n5. We then multiply this percentage by the market value to get the actual change in value\n6. The result is rounded to 2 decimal places for currency precision\n\nThe program will return the estimated change in the portfolio's value in USD. Note that this will be a negative number, as an increase in yield leads to a decrease in bond prices."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-961",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume that the hedge fund known as Global Finance started with an initial capital of $250 million. Global charges a 2% administrative fee based upon assets managed at the close of the year, and a bonus fee of 20% calculated on gains surpassing the 8% mark. The fund's value increased by 16% in its inaugural year. Given that management fees are calculated using end-of-year valuation, what will an investor's net return be, taking into consideration that the performance fee is calculated after the management fee?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 250000000\n    admin_fee_rate = 0.02\n    bonus_fee_rate = 0.20\n    hurdle_rate = 0.08\n    growth_rate = 0.16\n    \n    # Do math calculation to get the answer\n    end_year_value = initial_capital * (1 + growth_rate)\n    admin_fee = end_year_value * admin_fee_rate\n    \n    gain = end_year_value - initial_capital\n    excess_return = growth_rate - hurdle_rate\n    bonus_fee = max(0, excess_return * initial_capital * bonus_fee_rate)\n    \n    total_fees = admin_fee + bonus_fee\n    net_return = (end_year_value - total_fees - initial_capital) / initial_capital\n    \n    # return answer\n    return net_return\n```\n\nThis Python program calculates the net return for an investor in the Global Finance hedge fund, taking into account the administrative fee and performance bonus. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the end-of-year value of the fund after the 16% growth.\n3. The administrative fee is calculated based on this end-of-year value.\n4. We calculate the gain and the excess return above the hurdle rate.\n5. The bonus fee is calculated on the excess return, if any.\n6. We sum up the total fees (administrative + bonus).\n7. Finally, we calculate the net return by subtracting the total fees and initial capital from the end-of-year value, then dividing by the initial capital to get the percentage return.\n\nThe function will return this net return as a decimal (e.g., 0.12 for 12%)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-962",
        "python_solution": "",
        "ground_truth": null,
        "question": "Every day, a prominent credit card corporation evaluates 10,000,000 transactions for possible scams. Among these transactions, 0.001% are identified as scam attempts. Should their system detect 90% of all scam transactions, while also erroneously flagging 0.0001% of legitimate transactions, what are the chances that a flagged transaction is actually a scam?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_transactions = 10_000_000\n    scam_percentage = 0.001 / 100\n    scam_detection_rate = 0.90\n    false_positive_rate = 0.0001 / 100\n\n    # Do math calculation to get the answer\n    actual_scams = total_transactions * scam_percentage\n    detected_scams = actual_scams * scam_detection_rate\n    false_positives = (total_transactions - actual_scams) * false_positive_rate\n    \n    total_flagged = detected_scams + false_positives\n    \n    probability_flagged_is_scam = detected_scams / total_flagged\n\n    # return answer\n    return probability_flagged_is_scam\n```\n\nThis Python program calculates the probability that a flagged transaction is actually a scam based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the number of actual scams and the number of correctly detected scams.\n3. We calculate the number of false positives (legitimate transactions incorrectly flagged as scams).\n4. We sum up the total number of flagged transactions (both correct and false positives).\n5. Finally, we calculate the probability that a flagged transaction is a scam by dividing the number of correctly detected scams by the total number of flagged transactions.\n\nThe function will return this probability as a decimal. To get a percentage, you could multiply the result by 100."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| A | 20 | 16 |\n| B | 20 | 12 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-963",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a correlation of -0.8 between two securities, what would be the anticipated standard deviation if the two assets are given equal weight, as recently structured by Laurel, a manager at an investment firm?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    return_A = 0.20\n    return_B = 0.20\n    std_dev_A = 0.16\n    std_dev_B = 0.12\n    correlation = -0.8\n    weight_A = 0.5\n    weight_B = 0.5\n\n    # Do math calculation to get the answer\n    variance_A = std_dev_A ** 2\n    variance_B = std_dev_B ** 2\n    \n    portfolio_variance = (weight_A ** 2 * variance_A) + \\\n                         (weight_B ** 2 * variance_B) + \\\n                         (2 * weight_A * weight_B * correlation * std_dev_A * std_dev_B)\n    \n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis Python program calculates the anticipated standard deviation of a portfolio consisting of two securities with equal weights, given their individual standard deviations and the correlation between them.\n\nThe calculation uses the portfolio variance formula:\n\nσ_p^2 = w_A^2 * σ_A^2 + w_B^2 * σ_B^2 + 2 * w_A * w_B * ρ_AB * σ_A * σ_B\n\nWhere:\n- σ_p is the portfolio standard deviation\n- w_A and w_B are the weights of securities A and B\n- σ_A and σ_B are the standard deviations of securities A and B\n- ρ_AB is the correlation between securities A and B\n\nAfter calculating the portfolio variance, we take its square root to get the portfolio standard deviation."
        ]
    },
    {
        "tables": [
            "|                                       | $ Millions |\n|---------------------------------------|------------|\n| Short-term borrowing                  | 4,231      |\n| Current portion of long-term interest-bearing debt |    |\n| Long-term interest-bearing debt       | 925        |\n| Average shareholders' equity          | 18,752     |\n| Average total assets                  | 45,981     |"
        ],
        "topic": "Accounting",
        "question_id": "test-964",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the financial leverage ratio for a business, given the provided selected financial data?",
        "output": [
            "Here's a Python program to calculate the financial leverage ratio based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    short_term_borrowing = 4231\n    long_term_debt = 925\n    avg_shareholders_equity = 18752\n    avg_total_assets = 45981\n\n    # Do math calculation to get the answer\n    total_debt = short_term_borrowing + long_term_debt\n    financial_leverage_ratio = avg_total_assets / avg_shareholders_equity\n\n    # return answer\n    return financial_leverage_ratio\n\n# You can test the function by calling it\n# print(solution())\n```\n\nThis program calculates the financial leverage ratio, which is typically defined as the ratio of average total assets to average shareholders' equity. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given data. Note that we don't have a value for \"Current portion of long-term interest-bearing debt\", so it's not included in the calculation.\n\n2. We calculate the total debt by adding short-term borrowing and long-term debt. However, this isn't directly used in the financial leverage ratio calculation.\n\n3. The financial leverage ratio is calculated by dividing average total assets by average shareholders' equity.\n\n4. The function returns the calculated financial leverage ratio.\n\nWhen you run this function, it will return the financial leverage ratio based on the provided data. The ratio indicates how much of the company's assets are financed by equity versus debt. A higher ratio suggests that the company is using more debt to finance its assets."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-965",
        "python_solution": "",
        "ground_truth": null,
        "question": "The F(18) is supposed to be what, in a continuous uniform distribution defined as U(5, 15)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 5\n    upper_bound = 15\n    x = 18\n\n    # Do math calculation to get the answer\n    if x < lower_bound or x > upper_bound:\n        answer = 0\n    else:\n        answer = 1 / (upper_bound - lower_bound)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the value of the probability density function (PDF) for a continuous uniform distribution U(5, 15) at x = 18.\n\nFor a continuous uniform distribution:\n1. The PDF is constant within the range and zero outside it.\n2. The constant value within the range is 1 / (upper bound - lower bound).\n\nIn this case:\n- If x (18) is outside the range [5, 15], the PDF value is 0.\n- If x is within the range, the PDF value would be 1 / (15 - 5) = 1/10.\n\nHowever, since 18 is outside the range [5, 15], the function will return 0."
        ]
    },
    {
        "tables": [
            "| Fund | Expected Return | GDP Factor Sensitivity | Inflation Factor Sensitivity |\n|------|-----------------|------------------------|------------------------------|\n| A    | 15%             | 1.2                    | 1                            |\n| B    | 20%             | 2                      | 0.2                          |\n| C    | 10%             | 1.5                    | 0                            |",
            "| Factor     | Forecast | Actual |\n| -----------| ---------| -------|\n| inflation  | 3.5%     | 4.2%   |\n| GDP growth | 6%       | 6.5%   |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-966",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the given chart and the details about inflation and GDP growth data, what is the yield for Portfolio X and Z, made up of a 55% allocation to portfolio X and a 45% allocation to portfolio Z?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    fund_A_return = 0.15\n    fund_A_gdp_sensitivity = 1.2\n    fund_A_inflation_sensitivity = 1.0\n    \n    fund_B_return = 0.20\n    fund_B_gdp_sensitivity = 2.0\n    fund_B_inflation_sensitivity = 0.2\n    \n    fund_C_return = 0.10\n    fund_C_gdp_sensitivity = 1.5\n    fund_C_inflation_sensitivity = 0.0\n    \n    gdp_forecast = 0.06\n    gdp_actual = 0.065\n    inflation_forecast = 0.035\n    inflation_actual = 0.042\n    \n    portfolio_X_allocation = 0.55\n    portfolio_Z_allocation = 0.45\n\n    # Do math calculation to get the answer\n    gdp_difference = gdp_actual - gdp_forecast\n    inflation_difference = inflation_actual - inflation_forecast\n    \n    fund_A_adjusted_return = fund_A_return + (gdp_difference * fund_A_gdp_sensitivity) + (inflation_difference * fund_A_inflation_sensitivity)\n    fund_B_adjusted_return = fund_B_return + (gdp_difference * fund_B_gdp_sensitivity) + (inflation_difference * fund_B_inflation_sensitivity)\n    fund_C_adjusted_return = fund_C_return + (gdp_difference * fund_C_gdp_sensitivity) + (inflation_difference * fund_C_inflation_sensitivity)\n    \n    portfolio_X_return = (fund_A_adjusted_return + fund_B_adjusted_return + fund_C_adjusted_return) / 3\n    portfolio_Z_return = (fund_A_adjusted_return + fund_C_adjusted_return) / 2\n    \n    total_portfolio_return = (portfolio_X_return * portfolio_X_allocation) + (portfolio_Z_return * portfolio_Z_allocation)\n    \n    # return answer\n    return"
        ]
    },
    {
        "tables": [
            "| Metric                        |        |\n|-------------------------------|--------|\n| Sales                         | $421,000 |\n| Cost of goods sold (COGS)     | $315,000 |\n| Cash                          | $30,000  |\n| Average accounts receivable   | $40,000  |\n| Average inventories           | $36,000  |\n| Average accounts payable      | $33,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-967",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the selected financial data given, what is the cash conversion cycle (in days) of the business?",
        "output": [
            "Here's the Python program to calculate the cash conversion cycle based on the given financial data:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales = 421000\n    cogs = 315000\n    avg_accounts_receivable = 40000\n    avg_inventories = 36000\n    avg_accounts_payable = 33000\n\n    # Do math calculation to get the answer\n    \n    # Calculate Days Sales Outstanding (DSO)\n    dso = (avg_accounts_receivable / sales) * 365\n    \n    # Calculate Days Inventory Outstanding (DIO)\n    dio = (avg_inventories / cogs) * 365\n    \n    # Calculate Days Payables Outstanding (DPO)\n    dpo = (avg_accounts_payable / cogs) * 365\n    \n    # Calculate Cash Conversion Cycle (CCC)\n    ccc = dso + dio - dpo\n\n    # return answer\n    return round(ccc, 2)\n```\n\nThis program calculates the cash conversion cycle using the following steps:\n\n1. We define the variables based on the given financial data.\n2. We calculate the Days Sales Outstanding (DSO) by dividing average accounts receivable by sales and multiplying by 365 days.\n3. We calculate the Days Inventory Outstanding (DIO) by dividing average inventories by COGS and multiplying by 365 days.\n4. We calculate the Days Payables Outstanding (DPO) by dividing average accounts payable by COGS and multiplying by 365 days.\n5. Finally, we calculate the Cash Conversion Cycle (CCC) by adding DSO and DIO, then subtracting DPO.\n\nThe result is rounded to two decimal places for better readability. The function will return the cash conversion cycle in days."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-968",
        "python_solution": "",
        "ground_truth": null,
        "question": "If you have a portfolio made up of five shares, how many distinct covariance terms, without considering variances, are needed to compute the return variance of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_shares = 5\n\n    # Do math calculation to get the answer\n    distinct_covariance_terms = (num_shares * (num_shares - 1)) // 2\n\n    # return answer\n    return distinct_covariance_terms\n```\n\nThis Python program calculates the number of distinct covariance terms needed to compute the return variance of a portfolio with five shares, excluding the variances.\n\nHere's an explanation of the calculation:\n\n1. We start with 5 shares in the portfolio.\n2. For each pair of shares, we need to calculate one covariance term.\n3. The total number of pairs is calculated using the combination formula: n choose 2, where n is the number of shares.\n4. This is equivalent to (n * (n-1)) / 2.\n5. In this case, it's (5 * 4) / 2 = 10.\n\nThe program will return 10, which is the number of distinct covariance terms needed for a portfolio of 5 shares, not considering the variances."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-969",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, Corporation X had a net income of $20,000 and paid out cash dividends of $1,500 to its common shareholders and another $2,000 to preferred shareholders. At the beginning of the year, there were 20,000 shares of common stock. On July 1st, 1,000 additional shares were issued. What is the Basic EPS?",
        "output": [
            "Here's a Python program to calculate the Basic EPS for Corporation X based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 20000\n    common_dividends = 1500\n    preferred_dividends = 2000\n    initial_shares = 20000\n    additional_shares = 1000\n    additional_shares_date = 0.5  # July 1st is halfway through the year\n\n    # Do math calculation to get the answer\n    income_available_to_common = net_income - preferred_dividends\n    \n    # Calculate weighted average shares outstanding\n    weighted_avg_shares = initial_shares + (additional_shares * additional_shares_date)\n    \n    # Calculate Basic EPS\n    basic_eps = income_available_to_common / weighted_avg_shares\n\n    # return answer\n    return round(basic_eps, 2)\n```\n\nThis program calculates the Basic EPS as follows:\n\n1. It defines the given variables: net income, common dividends, preferred dividends, initial shares, additional shares, and the date of additional share issuance (as a fraction of the year).\n\n2. It calculates the income available to common shareholders by subtracting preferred dividends from net income.\n\n3. It computes the weighted average number of shares outstanding, considering that the additional shares were only outstanding for half the year.\n\n4. It calculates the Basic EPS by dividing the income available to common shareholders by the weighted average number of shares outstanding.\n\n5. Finally, it returns the Basic EPS rounded to two decimal places.\n\nNote that while the common dividends are given in the problem, they are not used in the Basic EPS calculation. The Basic EPS is based on net income (less preferred dividends) regardless of how much was paid out as common dividends."
        ]
    },
    {
        "tables": [
            "|                                            |        |\n|--------------------------------------------|--------|\n| **Exhibit 1  Atlantic Preserves, Inc.**                |        |\n| **Selected Information from Note F of the 2013 Annual Financial Statements** |        |\n| **Relating to the Company's Defined Benefit Pension Plan (in $ thousands)**   |        |\n| Start-of-year pension obligation           | 72,544 |\n| Start-of-year plan assets                  | 60,096 |\n| End-of-year pension obligation             | 74,077 |\n| End-of-year plan assets                    | 61,812 |\n| Current service cost                       | 1,151  |\n| Interest cost                              | 5,441  |\n| Actual return on plan assets               | 5,888  |\n| Expected return on plan assets             | 4,597  |\n| Benefits paid to retired employees         | 5,059  |\n| Employer's contributions                   | 887    |\n| Amortization of past service costs         | 272    |"
        ],
        "topic": "Accounting",
        "question_id": "test-970",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the company Atlantic Preserve prepares its financial statements following U.S. GAAP, what is the reported periodic pension cost on the income statement for 2013 (in $ thousands), as Loris has asked Paul to work out using the data in Exhibit 1?",
        "output": [
            "def solution():\n    # Define variables name and value\n    current_service_cost = 1151\n    interest_cost = 5441\n    expected_return_on_plan_assets = 4597\n    amortization_of_past_service_costs = 272\n\n    # Do math calculation to get the answer\n    periodic_pension_cost = (\n        current_service_cost\n        + interest_cost\n        - expected_return_on_plan_assets\n        + amortization_of_past_service_costs\n    )\n\n    # return answer\n    return periodic_pension_cost\n\n```\n\nThis Python program calculates the periodic pension cost for Atlantic Preserves, Inc. in 2013 according to U.S. GAAP standards. Here's a breakdown of the calculation:\n\n1. We define the relevant variables from the given information.\n2. The periodic pension cost is calculated by adding:\n   - Current service cost\n   - Interest cost\n   - Amortization of past service costs\n   And subtracting:\n   - Expected return on plan assets\n\n3. The program returns the calculated periodic pension cost.\n\nNote that under U.S. GAAP, we use the expected return on plan assets rather than the actual return. Also, the benefits paid to retired employees and employer's contributions do not directly affect the periodic pension cost calculation.\n\nThe result of this calculation will give the reported periodic pension cost on the income statement for 2013 in thousands of dollars."
        ]
    },
    {
        "tables": [
            "|           | Gross plant and equipments | Accumulated depreciation |\n|-----------|---------------------------|-------------------------|\n| Last year | £460,000                  | £110,000                |\n| This year | £500,000                  | £120,000                |"
        ],
        "topic": "Accounting",
        "question_id": "test-971",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the latest fiscal report, the depreciation expense for Smiths Ltd. stands at £20,000. Given the company's general information, what is the presumed residual useful life of the factory and machinery?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gross_plant_equipment_this_year = 500000\n    accumulated_depreciation_this_year = 120000\n    depreciation_expense = 20000\n\n    # Do math calculation to get the answer\n    net_book_value = gross_plant_equipment_this_year - accumulated_depreciation_this_year\n    residual_useful_life = net_book_value / depreciation_expense\n\n    # return answer\n    return residual_useful_life\n```\n\nThis Python program calculates the presumed residual useful life of the factory and machinery for Smiths Ltd. based on the given information. Here's how it works:\n\n1. We define the relevant variables:\n   - The gross plant and equipment value for this year (£500,000)\n   - The accumulated depreciation for this year (£120,000)\n   - The depreciation expense for the latest fiscal report (£20,000)\n\n2. We calculate the net book value by subtracting the accumulated depreciation from the gross plant and equipment value.\n\n3. We then calculate the residual useful life by dividing the net book value by the annual depreciation expense.\n\n4. The function returns the calculated residual useful life.\n\nThis calculation assumes straight-line depreciation and that the current depreciation expense will remain constant in future years. The result will give the number of years of useful life remaining for the factory and machinery."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-972",
        "python_solution": "",
        "ground_truth": null,
        "question": "In nation Y, the odds of a letter sent via the mail service getting to its intended destination are 2/3. Suppose that each mail delivery is not influenced by any other, and if a girlfriend gets a letter from her boyfriend, she will definitely send a reply to him. Imagine a guy in nation Y mails a letter to his girlfriend (also in nation Y) using the mail service. Assuming the guy doesn't get a return letter from his girlfriend, what are the chances that his girlfriend received his letter?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    p_letter_arrives = 2/3  # Probability of a letter arriving\n    \n    # Do math calculation to get the answer\n    p_girl_received_no_reply = 1 - p_letter_arrives  # Probability girl didn't receive letter\n    p_guy_no_reply = 1 - p_letter_arrives**2  # Probability guy doesn't get a reply\n    \n    p_girl_received_given_no_reply = p_girl_received_no_reply / p_guy_no_reply\n    \n    # Calculate the probability that the girlfriend received the letter given no reply\n    answer = 1 - p_girl_received_given_no_reply\n    \n    # return answer\n    return answer\n```\n\nThis program calculates the probability that the girlfriend received the letter, given that the boyfriend didn't receive a reply. Here's how it works:\n\n1. We define the probability of a letter arriving as 2/3.\n\n2. We calculate the probability that the girlfriend didn't receive the letter (1 - 2/3 = 1/3).\n\n3. We calculate the probability that the guy doesn't get a reply. This can happen in two ways:\n   - His letter doesn't arrive (1/3 chance)\n   - His letter arrives, but her reply doesn't arrive back (2/3 * 1/3 = 2/9 chance)\n   The total probability of no reply is 1 - (2/3 * 2/3) = 1 - 4/9 = 5/9\n\n4. Using Bayes' theorem, we calculate the probability that the girlfriend received the letter, given that no reply was received:\n   P(Received | No Reply) = 1 - P(Not Received | No Reply)\n                          = 1 - [P(Not Received) / P(No Reply)]\n                          = 1 - [(1/3) / (5/9)]\n                          = 1 - (3/15)\n                          = 4/5 or 0.8\n\nSo, there's"
        ]
    },
    {
        "tables": [
            "|                   |         |\n|-------------------|---------|\n| Fair value        | $500,000|\n| Costs to sell     | $90,000 |\n| Value in use      | $460,000|\n| Net carrying amount | $600,000|"
        ],
        "topic": "Accounting",
        "question_id": "test-973",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under IFRS, the impairment loss for a machine from company TDC is listed as follows:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fair_value = 500000\n    costs_to_sell = 90000\n    value_in_use = 460000\n    net_carrying_amount = 600000\n\n    # Do math calculation to get the answer\n    recoverable_amount = max(fair_value - costs_to_sell, value_in_use)\n    impairment_loss = net_carrying_amount - recoverable_amount\n\n    # return answer\n    return impairment_loss\n```\n\nThis Python program calculates the impairment loss for the machine from company TDC under IFRS rules. Here's how it works:\n\n1. We define the given values as variables.\n2. We calculate the recoverable amount, which is the higher of:\n   a) Fair value less costs to sell (500000 - 90000 = 410000)\n   b) Value in use (460000)\n3. We then calculate the impairment loss by subtracting the recoverable amount from the net carrying amount.\n\nThe program will return the impairment loss, which in this case would be 140000 (600000 - 460000)."
        ]
    },
    {
        "tables": [
            "| Bond | A   | B   |\n|------|-----|-----|\n| Number of periods to maturity | 4 years | 4 years |\n| Coupon rate | 6% | 9% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-974",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the market discount rate is 5%, what is the variance in the pricing for two bonds per 100 of face value that pay out interest every year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    periods = 4\n    coupon_rate_a = 0.06\n    coupon_rate_b = 0.09\n    discount_rate = 0.05\n\n    # Do math calculation to get the answer\n    def bond_price(coupon_rate):\n        price = 0\n        for t in range(1, periods + 1):\n            price += (coupon_rate * face_value) / ((1 + discount_rate) ** t)\n        price += face_value / ((1 + discount_rate) ** periods)\n        return price\n\n    price_a = bond_price(coupon_rate_a)\n    price_b = bond_price(coupon_rate_b)\n    \n    variance = (price_b - price_a) ** 2\n\n    # return answer\n    return variance\n```\n\nThis Python program calculates the variance in pricing between two bonds with different coupon rates but the same maturity period and face value, given a market discount rate.\n\nHere's a breakdown of the solution:\n\n1. We define the variables based on the given information: face value, number of periods, coupon rates for bonds A and B, and the market discount rate.\n\n2. We create a helper function `bond_price` that calculates the price of a bond using the present value formula for both coupon payments and the face value.\n\n3. We calculate the price of both bonds using this function.\n\n4. The variance is calculated as the square of the difference between the two bond prices.\n\n5. Finally, we return the calculated variance.\n\nThis program will return the variance in pricing between the two bonds per 100 of face value, answering the given question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-975",
        "python_solution": "",
        "ground_truth": null,
        "question": "ABC has a three-year floating rate loan. To hedge the risk of increasing interest rates, the organization is considering entering into an interest rate swap. The notional principle of the floating loan is $5 million, the rate is Libor+1%. The swap's fixed rate is 5% and the floating rate is Libor, with payments made every six months. The notional principle of the swap is also $5 million. What is the first net interest payment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 5000000\n    floating_rate_loan = 0.01  # 1% above Libor\n    swap_fixed_rate = 0.05  # 5%\n    payment_period = 0.5  # 6 months = 0.5 years\n    \n    # For this example, let's assume Libor is 3%\n    libor = 0.03\n    \n    # Do math calculation to get the answer\n    \n    # Interest payment on the loan\n    loan_interest = notional_principal * (libor + floating_rate_loan) * payment_period\n    \n    # Interest payment on the swap\n    swap_fixed_payment = notional_principal * swap_fixed_rate * payment_period\n    swap_floating_receipt = notional_principal * libor * payment_period\n    \n    # Net interest payment\n    net_payment = loan_interest + swap_fixed_payment - swap_floating_receipt\n    \n    # return answer\n    return net_payment\n```\n\nThis Python function calculates the net interest payment for ABC after entering into the interest rate swap. Here's a breakdown of the calculation:\n\n1. We define the notional principal, the floating rate on the loan (Libor + 1%), the fixed rate on the swap (5%), and the payment period (6 months = 0.5 years).\n\n2. We assume a Libor rate (in this case, 3%) for the calculation. In a real-world scenario, this would be the actual Libor rate at the time of the payment.\n\n3. We calculate the interest payment on the loan, which is based on Libor + 1%.\n\n4. We calculate the swap payments: ABC pays the fixed rate and receives the floating rate (Libor).\n\n5. The net payment is the sum of the loan interest and the fixed swap payment, minus the floating rate receipt from the swap.\n\nThe function returns this net payment, which represents the total interest ABC will pay for this period after the swap."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-976",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2017, the net sales of the XYZ corporation were $300,000. Given that accounts receivable fell by $56,000 and accounts payable rose by $9,000, and that the inventory increased by $20,000, what were their cash collections?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales = 300000\n    accounts_receivable_decrease = 56000\n    accounts_payable_increase = 9000\n    inventory_increase = 20000\n    \n    # Do math calculation to get the answer\n    cash_collections = net_sales + accounts_receivable_decrease - accounts_payable_increase - inventory_increase\n    \n    # return answer\n    return cash_collections\n```\n\nThis Python function calculates the cash collections for the XYZ corporation based on the given information:\n\n1. We define the variables with the given values:\n   - Net sales: $300,000\n   - Decrease in accounts receivable: $56,000\n   - Increase in accounts payable: $9,000\n   - Increase in inventory: $20,000\n\n2. To calculate cash collections, we use the following formula:\n   Cash Collections = Net Sales + Decrease in Accounts Receivable - Increase in Accounts Payable - Increase in Inventory\n\n3. The function returns the calculated cash collections.\n\nWhen you run this function, it will return the cash collections for the XYZ corporation in 2017."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-977",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jane Smith is interested in taking a loan of $40,000 to purchase a vehicle with no down payments. She's expected to make even payments at the end of each month for the coming 3 years. If her monthly payment is $1,350, what is the principal portion of her second installment?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 40000\n    monthly_payment = 1350\n    loan_term_years = 3\n    loan_term_months = loan_term_years * 12\n    \n    # Do math calculation to get the answer\n    # Calculate the interest rate (monthly)\n    r = 1\n    while True:\n        pv = sum([monthly_payment / (1 + r) ** i for i in range(1, loan_term_months + 1)])\n        if abs(pv - loan_amount) < 0.01:\n            break\n        r += 0.0001\n    \n    # Calculate the interest portion of the first payment\n    interest_1 = loan_amount * r\n    \n    # Calculate the principal portion of the first payment\n    principal_1 = monthly_payment - interest_1\n    \n    # Calculate the remaining balance after the first payment\n    remaining_balance = loan_amount - principal_1\n    \n    # Calculate the interest portion of the second payment\n    interest_2 = remaining_balance * r\n    \n    # Calculate the principal portion of the second payment\n    principal_2 = monthly_payment - interest_2\n    \n    # return answer\n    return round(principal_2, 2)\n```\n\nThis Python program calculates the principal portion of Jane Smith's second installment on her vehicle loan. Here's a breakdown of the steps:\n\n1. We define the known variables: loan amount, monthly payment, and loan term.\n\n2. We use an iterative approach to calculate the monthly interest rate (r) that satisfies the loan conditions.\n\n3. We then calculate the interest and principal portions of the first payment.\n\n4. Using the remaining balance after the first payment, we calculate the interest portion of the second payment.\n\n5. Finally, we calculate the principal portion of the second payment by subtracting the interest portion from the monthly payment.\n\n6. The function returns this value, rounded to two decimal places.\n\nThis solution takes into account that the interest rate is not given directly in the problem, so we have to derive it from the other given information."
        ]
    },
    {
        "tables": [
            "| Sample mean | 15% |\n|-------------|-----|\n| Sample size | 90  |\n| Population variance | 128 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-978",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the data provided, what is the standard error of the mean sample?",
        "output": [
            "Here's the Python program to calculate the standard error of the mean sample based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    sample_size = 90\n    population_variance = 128\n\n    # Do math calculation to get the answer\n    standard_error = (population_variance / sample_size) ** 0.5\n\n    # return answer\n    return standard_error\n```\n\nThis program calculates the standard error of the mean sample using the formula:\n\nStandard Error = √(Population Variance / Sample Size)\n\nThe sample mean (15%) provided in the table is not needed for this calculation, as the standard error of the mean depends only on the population variance and the sample size."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-979",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the highest possible value for Qy, considering the inverse demand function Py = 13 – 3.7Q where Py equals the price per unit for good Y and Qy is the quantity demanded of good Y?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = 13\n    slope = -3.7\n\n    # Do math calculation to get the answer\n    # The highest possible Qy is when Py = 0\n    # 0 = 13 - 3.7Q\n    # 3.7Q = 13\n    # Q = 13 / 3.7\n    max_quantity = intercept / abs(slope)\n\n    # Round to 2 decimal places for precision\n    answer = round(max_quantity, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the highest possible value for Qy based on the given inverse demand function Py = 13 – 3.7Q. Here's how it works:\n\n1. We define the intercept (13) and slope (-3.7) of the inverse demand function.\n\n2. The highest possible Qy occurs when the price (Py) reaches zero. So we set the equation to zero and solve for Q:\n   0 = 13 - 3.7Q\n   3.7Q = 13\n   Q = 13 / 3.7\n\n3. We calculate this value by dividing the intercept by the absolute value of the slope.\n\n4. The result is rounded to two decimal places for precision.\n\n5. The function returns this value as the answer.\n\nWhen you run this function, it will return approximately 3.51, which represents the highest possible quantity (Qy) when the price (Py) reaches zero."
        ]
    },
    {
        "tables": [
            "| Assets                                         |   |   |   |   |\n|------------------------------------------------|---|---|---|---|\n| Current assets                                 |   |   |   |   |\n| Cash and cash equivalents 0                    | 5 | 7 |   |   |\n| Marketable securities 5                        | 0 | 2 |   |   |\n| Accounts receivable, net 5                     | 15|12 |   |   |\n| Inventories 15                                 | 20|16 |   |   |\n| Prepaid expenses 5                             | 15|11 |   |   |\n| Total current assets 35                        | 55|48 |   |   |\n| Property, plant,and equipment, net 40          | 35|37 |   |   |\n| Goodwill 25                                    |  0| 8 |   |   |\n| Other assets 0                                 | 10| 7 |   |   |\n| Total assets 100                               |100|100|   |   |\n| Liabilities and Shareholders' Equity           |   |   |   |   |\n|                                                |   |   |   |   |\n| Accounts payable, Short-term debt              |10 & 10, 25 & 10 & 15| | | |\n| Accrued expenses                               |   |0, 5, 3      |   |   |\n| Total current liabilities                      |   |35, 25, 28   |   |   |\n| Long-term debt                                 |   |45, 20, 28   |   |   |\n| Other non-current liabilities                  |   |0, 10, 7     |   |   |\n| Total liabilities                              |   |80, 55, 63   |   |   |\n| Total shareholders' equity, total liabilities and shareholders' equity | |20 & 45 & 37, 100 & 100 & 100 | | |"
        ],
        "topic": "Accounting",
        "question_id": "test-980",
        "python_solution": "",
        "ground_truth": null,
        "question": "In reference to Exhibit 1: Common-Size Balance Sheets for Corporation X, Corporation Y, and Sector Average, what is the financial leverage ratio for Corporation Y?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets_y = 100\n    total_equity_y = 45\n\n    # Do math calculation to get the answer\n    financial_leverage_ratio = total_assets_y / total_equity_y\n\n    # return answer\n    return financial_leverage_ratio\n```\n\nThis Python function calculates the financial leverage ratio for Corporation Y based on the information provided in the table. \n\nThe financial leverage ratio is calculated by dividing total assets by total shareholders' equity. \n\nFor Corporation Y:\n- Total assets are 100 (given in the \"Total assets\" row)\n- Total shareholders' equity is 45 (given in the \"Total shareholders' equity, total liabilities and shareholders' equity\" row)\n\nThe function performs this calculation and returns the result, which represents the financial leverage ratio for Corporation Y."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-981",
        "python_solution": "",
        "ground_truth": null,
        "question": "A put option from Europe possesses the following traits: S0 = $50; X = $45; r = 5%; T = 1 year; and σ = 25%. Utilizing the BSM formula, could you determine which value is closest to the put's value? Here are some values for reference: N(-0.78644) = 0.2158, N(-0.74644) = 0.2266, N(-0.49644) = 0.3085, N(-0.56644) = 0.2855.",
        "output": [
            "Here's a Python program to calculate the value of the European put option using the Black-Scholes-Merton (BSM) formula:\n\n```python\ndef solution():\n    # Define variables name and value\n    import math\n\n    S0 = 50  # Current stock price\n    X = 45   # Strike price\n    r = 0.05  # Risk-free rate\n    T = 1    # Time to expiration in years\n    sigma = 0.25  # Volatility\n\n    # Do math calculation to get the answer\n    d1 = (math.log(S0 / X) + (r + 0.5 * sigma**2) * T) / (sigma * math.sqrt(T))\n    d2 = d1 - sigma * math.sqrt(T)\n\n    N_d1 = 0.2158  # Given N(-d1) value\n    N_d2 = 0.2266  # Given N(-d2) value\n\n    put_value = X * math.exp(-r * T) * N_d2 - S0 * N_d1\n\n    # return answer\n    return round(put_value, 2)\n```\n\nThis program calculates the value of the European put option using the Black-Scholes-Merton formula. Here's a breakdown of the calculation:\n\n1. We define the given variables: S0 (current stock price), X (strike price), r (risk-free rate), T (time to expiration), and sigma (volatility).\n\n2. We calculate d1 and d2 using the BSM formula.\n\n3. We use the given N(-d1) and N(-d2) values, which are N(-0.78644) = 0.2158 and N(-0.74644) = 0.2266 respectively.\n\n4. We then calculate the put option value using the BSM formula for put options:\n   Put Value = X * e^(-rT) * N(-d2) - S0 * N(-d1)\n\n5. Finally, we round the result to two decimal places and return it.\n\nThis program will return the calculated value of the European put option, which should be close to one of"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-982",
        "python_solution": "",
        "ground_truth": null,
        "question": "Venture Holdings is a hedge fund that started with $250 million in capital. Venture charges a 2% management fee based on assets managed at the end of the year, and a 20% incentive fee if their returns exceed an 8% benchmark in its first year. Venture experienced a 16% increase in its first year. Let's assume that the management fees are calculated using the end-of-period valuation. What would be the net return for the investor, assuming that the performance fee is calculated after deducting the management fee?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 250000000\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    benchmark_return = 0.08\n    actual_return = 0.16\n\n    # Do math calculation to get the answer\n    end_of_year_value = initial_capital * (1 + actual_return)\n    management_fee = end_of_year_value * management_fee_rate\n    \n    value_after_management_fee = end_of_year_value - management_fee\n    excess_return = actual_return - benchmark_return\n    \n    if excess_return > 0:\n        incentive_fee = excess_return * initial_capital * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    total_fees = management_fee + incentive_fee\n    net_value = end_of_year_value - total_fees\n    net_return = (net_value / initial_capital) - 1\n\n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [
            "|                                   |        |\n|-----------------------------------|--------|\n| Net income                        | $55,000|\n| Depreciation                      | $60,000|\n| Taxes paid                        | $25,000|\n| Interest paid                     | $5,000 |\n| Dividends paid                    | $10,000|\n| Cash received from sale of company building | $40,000|\n| Issuance of preferred stock       | $45,000|\n| Repurchase of common stock        | $20,000|\n| Purchase of machinery             | $20,000|\n| Issuance of bonds                 | $40,000|\n| Debt retired through issuance of common stock | $45,000|\n| Paid off long-term bank borrowings | $15,000|\n| Profit on sale of building        | $15,000|"
        ],
        "topic": "Accounting",
        "question_id": "test-983",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming Cash flow from investing activities as per U.S. GAAP is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_from_building_sale = 40000\n    purchase_of_machinery = 20000\n    profit_on_building_sale = 15000\n\n    # Do math calculation to get the answer\n    cash_flow_from_investing = cash_from_building_sale - purchase_of_machinery - profit_on_building_sale\n\n    # return answer\n    return cash_flow_from_investing\n```\n\nThis Python program calculates the Cash flow from investing activities according to U.S. GAAP based on the information provided in the table. Here's the explanation:\n\n1. Cash received from sale of company building ($40,000) is an inflow.\n2. Purchase of machinery ($20,000) is an outflow.\n3. Profit on sale of building ($15,000) is subtracted because it's already included in net income and doesn't represent an actual cash flow.\n\nThe other items in the table are not related to investing activities, so they are not included in this calculation. The program subtracts the purchase of machinery and the profit on sale of building from the cash received from the sale of the building to arrive at the net cash flow from investing activities."
        ]
    },
    {
        "tables": [
            "|    |    | Longevity Bond |   |\n|----|----|---------------|---|\n|    |    | No Default    | Default |\n| Market Returns | 20% Increase | 61% | 1% |\n|                | 20% Decrease | 35% | 3% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-984",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager is evaluating if the 1-year default probability of a longevity bond provided by a life assurance corporation is not related to equity market returns. The fund manager establishes the following probability matrix using 1-year probabilities from the initial investigation: With the data in the table, what is the likelihood that the longevity bond will default in 1 year considering the market declines by 20% over 1 year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_decrease_no_default = 0.35\n    market_decrease_default = 0.03\n    \n    # Do math calculation to get the answer\n    total_probability_market_decrease = market_decrease_no_default + market_decrease_default\n    probability_default_given_market_decrease = market_decrease_default / total_probability_market_decrease\n    \n    # return answer\n    return probability_default_given_market_decrease\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The likelihood that the longevity bond will default given a 20% market decline is: {result:.4f}\")\n```\n\nThis Python program calculates the likelihood that the longevity bond will default in 1 year, given that the market declines by 20% over 1 year.\n\nHere's an explanation of the calculation:\n\n1. We define the probabilities given in the table for the scenario where the market decreases by 20%:\n   - Probability of no default: 35% (0.35)\n   - Probability of default: 3% (0.03)\n\n2. We calculate the total probability of the market decreasing by 20%:\n   0.35 + 0.03 = 0.38\n\n3. To find the probability of default given that the market decreases, we use Bayes' theorem:\n   P(Default | Market Decrease) = P(Default and Market Decrease) / P(Market Decrease)\n   = 0.03 / 0.38\n\nThe result is approximately 0.0789, or about 7.89%.\n\nThis means that given a 20% market decline over 1 year, there is a 7.89% chance that the longevity bond will default."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-985",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a population with a variance of 2.45 was used to compute a sample mean and the sample size is 40, what would be the standard error of this sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    population_variance = 2.45\n    sample_size = 40\n    \n    # Do math calculation to get the answer\n    standard_error = (population_variance / sample_size) ** 0.5\n    \n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the standard error of the sample mean based on the given information:\n\n1. We define the population variance as 2.45 and the sample size as 40.\n\n2. The formula for the standard error of the sample mean is:\n   Standard Error = √(population variance / sample size)\n\n3. We calculate this using the math operation (population_variance / sample_size) ** 0.5, where ** 0.5 is equivalent to taking the square root.\n\n4. The function returns the calculated standard error.\n\nThis program will return the standard error of the sample mean when called, which answers the given question."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-986",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, XY corporation purchased a new mini-computer for $35,000. The computer is predicted to be used for a decade and then resold for $1,000. Using the double-declining-balance method, what is the declared depreciation expense in the third year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 35000\n    salvage_value = 1000\n    useful_life = 10  # years\n    depreciation_rate = 2 / useful_life  # double-declining-balance rate\n\n    # Do math calculation to get the answer\n    book_value_year1 = initial_cost - (initial_cost * depreciation_rate)\n    book_value_year2 = book_value_year1 - (book_value_year1 * depreciation_rate)\n    depreciation_year3 = book_value_year2 * depreciation_rate\n\n    # Ensure depreciation doesn't reduce book value below salvage value\n    if (book_value_year2 - depreciation_year3) < salvage_value:\n        depreciation_year3 = book_value_year2 - salvage_value\n\n    # return answer\n    return round(depreciation_year3, 2)\n```\n\nThis Python program calculates the depreciation expense for the third year using the double-declining-balance method. Here's a breakdown of the solution:\n\n1. We define the initial variables: initial cost, salvage value, useful life, and calculate the depreciation rate (which is 2 divided by the useful life for double-declining-balance method).\n\n2. We calculate the book value at the end of year 1 and year 2 by subtracting the depreciation from the previous book value.\n\n3. For year 3, we calculate the depreciation by multiplying the book value at the end of year 2 by the depreciation rate.\n\n4. We check if this depreciation would reduce the book value below the salvage value. If so, we adjust the depreciation to ensure the book value doesn't fall below the salvage value.\n\n5. Finally, we return the depreciation expense for year 3, rounded to two decimal places.\n\nThis program will accurately calculate the depreciation expense for the third year using the double-declining-balance method, taking into account the initial cost, salvage value, and useful life of the asset."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-987",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is interested in purchasing a 3-year bond that has a coupon rate of 5%, paid yearly. The spot rates are as follows: 1-year spot rate is 4%; 2-year spot rate is 4.5%; 3-year spot rate is 5%. What is the bond's price?",
        "output": [
            "Here's a Python program to calculate the bond's price based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000\n    coupon_rate = 0.05\n    spot_rate_1 = 0.04\n    spot_rate_2 = 0.045\n    spot_rate_3 = 0.05\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n    \n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1)\n    pv_coupon_2 = coupon_payment / (1 + spot_rate_2)**2\n    pv_coupon_3 = coupon_payment / (1 + spot_rate_3)**3\n    \n    pv_face_value = face_value / (1 + spot_rate_3)**3\n    \n    bond_price = pv_coupon_1 + pv_coupon_2 + pv_coupon_3 + pv_face_value\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis program calculates the bond's price using the following steps:\n\n1. We define the variables: face value (assumed to be $1000), coupon rate, and spot rates for years 1, 2, and 3.\n\n2. We calculate the coupon payment, which is the face value multiplied by the coupon rate.\n\n3. We calculate the present value of each coupon payment using the corresponding spot rate:\n   - For year 1: PV = coupon_payment / (1 + spot_rate_1)\n   - For year 2: PV = coupon_payment / (1 + spot_rate_2)^2\n   - For year 3: PV = coupon_payment / (1 + spot_rate_3)^3\n\n4. We calculate the present value of the face value, which is paid at maturity (year 3):\n   PV_face_value = face_value / (1 + spot"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-988",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose there exists a bond with an annual modified duration of 8.05 and an annual convexity of 58.32. What is the anticipated percentage change in price if the yield-to-maturity of the bond rises by 20 basis points?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 8.05\n    convexity = 58.32\n    yield_change = 0.0020  # 20 basis points = 0.20% = 0.0020\n\n    # Do math calculation to get the answer\n    price_change_duration = -modified_duration * yield_change\n    price_change_convexity = 0.5 * convexity * (yield_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n    \n    # Convert to percentage\n    percentage_price_change = total_price_change * 100\n\n    # return answer\n    return percentage_price_change\n```\n\nThis Python program calculates the anticipated percentage change in price of a bond given its modified duration, convexity, and a change in yield-to-maturity. Here's a breakdown of the calculation:\n\n1. We define the given values: modified duration (8.05), convexity (58.32), and the yield change (20 basis points = 0.0020).\n\n2. We calculate the price change due to duration using the formula: -Duration * Yield Change\n\n3. We calculate the price change due to convexity using the formula: 0.5 * Convexity * (Yield Change)^2\n\n4. We sum these two components to get the total price change.\n\n5. Finally, we convert the result to a percentage by multiplying by 100.\n\nThe program will return the anticipated percentage change in the bond's price. Note that a negative result indicates a price decrease, while a positive result would indicate a price increase."
        ]
    },
    {
        "tables": [
            "|     |     |\n| --- | --- |\n| Exhibit 1 10-Year Trailing Risk-Adjusted Performance |     |\n| Average annual return | 8.20% |\n| Minimum acceptable return (MAR) | 5.00% |\n| Sharpe ratio | 0.95 |\n| Sortino ratio | 0.87 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-989",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the provided table, what is the target semideviation for the investment portfolio?",
        "output": [
            "Here's a Python program to calculate the target semideviation for the investment portfolio based on the information provided in the table:\n\n```python\ndef solution():\n    # Define variables name and value\n    avg_annual_return = 0.082  # 8.20%\n    mar = 0.05  # 5.00%\n    sortino_ratio = 0.87\n\n    # Do math calculation to get the answer\n    excess_return = avg_annual_return - mar\n    target_semideviation = excess_return / sortino_ratio\n\n    # return answer\n    return target_semideviation\n\n# Uncomment the following lines to test the function\n# result = solution()\n# print(f\"The target semideviation is: {result:.4f} or {result*100:.2f}%\")\n```\n\nThis program calculates the target semideviation using the Sortino ratio formula:\n\nSortino ratio = (Average annual return - MAR) / Target semideviation\n\nWe rearrange this formula to solve for the target semideviation:\n\nTarget semideviation = (Average annual return - MAR) / Sortino ratio\n\nThe program defines the given variables, performs the calculation, and returns the result. You can uncomment the last two lines to see the result printed with four decimal places or as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-990",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will the mean absolute deviation be when referring to the range of 1-10?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    numbers = list(range(1, 11))  # Create a list of numbers from 1 to 10\n    n = len(numbers)\n    \n    # Do math calculation to get the answer\n    mean = sum(numbers) / n\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / n\n    \n    # return answer\n    return mad\n```\n\nThis Python program calculates the Mean Absolute Deviation (MAD) for the range of numbers from 1 to 10. Here's an explanation of the steps:\n\n1. We create a list of numbers from 1 to 10 using `range(1, 11)`.\n2. We calculate the mean of these numbers.\n3. We calculate the absolute deviation of each number from the mean.\n4. We sum up all the absolute deviations and divide by the number of values to get the MAD.\n\nThe function will return the calculated MAD, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-991",
        "python_solution": "",
        "ground_truth": null,
        "question": "Thompson is a tax consultant, providing tax-related guidance to individual clients. One of his clients is Jennifer, an American citizen residing within the U.S. Jennifer recently became the owner of AAPL shares, left to her by a deceased relative who was also a U.S. resident. The U.S. uses the \"step-up\" in basis at death system. The shares were originally purchased 20 years ago at a cost of $15,000 (inclusive of commissions and other costs). When the relative passed away, the market value of the AAPL stock was $220,000, and Jennifer just sold these shares for $190,000. Jennifer’s tax rate for capital gains is 20%. The tax obligation from the sale of the AAPL shares is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stepped_up_basis = 220000  # Market value when relative passed away\n    sale_price = 190000        # Price at which Jennifer sold the shares\n    capital_gains_tax_rate = 0.20  # Jennifer's tax rate for capital gains\n\n    # Do math calculation to get the answer\n    capital_loss = sale_price - stepped_up_basis\n    tax_obligation = max(0, capital_loss * capital_gains_tax_rate)  # No tax on capital loss\n\n    # return answer\n    return tax_obligation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-992",
        "python_solution": "",
        "ground_truth": null,
        "question": "The cost of a three-year zero-coupon bond from the government is $85.16, while a four-year bond of the same type is $79.81. Can you calculate the one-year implied forward rate from the third to the fourth year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    three_year_bond_price = 85.16\n    four_year_bond_price = 79.81\n    \n    # Do math calculation to get the answer\n    three_year_yield = (100 / three_year_bond_price) ** (1/3) - 1\n    four_year_yield = (100 / four_year_bond_price) ** (1/4) - 1\n    \n    implied_forward_rate = ((1 + four_year_yield) ** 4 / (1 + three_year_yield) ** 3) - 1\n    \n    # return answer\n    return implied_forward_rate * 100  # Convert to percentage\n```\n\nThis Python program calculates the one-year implied forward rate from the third to the fourth year based on the given zero-coupon bond prices. Here's a breakdown of the calculation:\n\n1. We first calculate the yields for the 3-year and 4-year bonds using the formula: yield = (Face Value / Bond Price)^(1/n) - 1, where n is the number of years.\n\n2. Then, we use these yields to calculate the implied forward rate using the formula: (1 + r4)^4 = (1 + r3)^3 * (1 + f), where r4 is the 4-year yield, r3 is the 3-year yield, and f is the implied forward rate.\n\n3. We solve this equation for f, which gives us the implied forward rate.\n\n4. Finally, we convert the rate to a percentage by multiplying by 100 before returning the result.\n\nThis program will return the one-year implied forward rate from the third to the fourth year as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-993",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond that has a face value of $100 matures in 10 years and pays a 4.5% coupon semiannually, is priced to yield 5.83%, and has a modified duration of 7.81. What is the approximate percentage price change for the bond if the bond's yield decreases by 0.25%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 7.81\n    yield_change = -0.0025  # -0.25% expressed as a decimal\n\n    # Do math calculation to get the answer\n    price_change_percentage = modified_duration * yield_change * 100\n\n    # return answer\n    return abs(price_change_percentage)  # Return absolute value for percentage\n```\n\nThis Python program calculates the approximate percentage price change for the bond given the modified duration and the change in yield. Here's a breakdown of the solution:\n\n1. We define the modified duration as 7.81, which is given in the question.\n2. The yield change is -0.25%, which we express as -0.0025 in decimal form.\n3. The formula for approximating the percentage price change is:\n   Percentage Price Change ≈ -Modified Duration * Change in Yield * 100\n4. We multiply by 100 to convert the decimal to a percentage.\n5. We use the abs() function to return the absolute value, as we're interested in the magnitude of the change, not its direction.\n\nThe program will return the approximate percentage price change for the bond when the yield decreases by 0.25%."
        ]
    },
    {
        "tables": [
            "| Component | Cost | Useful Life |\n|-----------|------|-------------|\n| A         | $500,000 | 10 years |\n| B         | $500,000 | 5 years  |"
        ],
        "topic": "Accounting",
        "question_id": "test-994",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business that aims to increase its earnings has invested $1,000,000 in a machine with two key parts, as seen in the provided chart. The machine's anticipated total lifespan is 10 years, and the business employs the straight-line technique of depreciation. How does the first year's depreciation expense calculated in accordance with the International Financial Reporting Standards (IFRS) compare to the one under the US GAAP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_cost = 1000000\n    component_a_cost = 500000\n    component_b_cost = 500000\n    component_a_life = 10\n    component_b_life = 5\n    total_life = 10\n\n    # Do math calculation to get the answer\n    \n    # IFRS depreciation (component approach)\n    ifrs_depreciation = (component_a_cost / component_a_life) + (component_b_cost / component_b_life)\n    \n    # US GAAP depreciation (total cost approach)\n    us_gaap_depreciation = total_cost / total_life\n    \n    # Difference between IFRS and US GAAP depreciation\n    difference = ifrs_depreciation - us_gaap_depreciation\n\n    # return answer\n    return difference\n```\n\nThis Python program calculates the difference between the first year's depreciation expense under IFRS and US GAAP. Here's an explanation of the calculation:\n\n1. Under IFRS, the component approach is used. Each component is depreciated separately based on its useful life:\n   - Component A: $500,000 / 10 years = $50,000 per year\n   - Component B: $500,000 / 5 years = $100,000 per year\n   Total IFRS depreciation: $50,000 + $100,000 = $150,000\n\n2. Under US GAAP, the total cost approach is used:\n   Total cost: $1,000,000 / 10 years = $100,000 per year\n\n3. The difference is calculated by subtracting the US GAAP depreciation from the IFRS depreciation:\n   $150,000 - $100,000 = $50,000\n\nTherefore, the function will return 50000, indicating that the IFRS depreciation expense for the first year is $50,000 higher than the US GAAP depreciation expense."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-995",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portion of the financial statement of Alpha Enterprises is presented below: Assets at the end of 2015: $5,000 Revenues for the year: $1,750 Expenses for the year: $1,200 Distributions to owners: $250 Retained earnings at the conclusion of 2014: $2,000 Contributed capital at the conclusion of 2015: $800 What should be the liabilities of Alpha Enterprises at the end of 2015?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    assets_2015 = 5000\n    revenues = 1750\n    expenses = 1200\n    distributions = 250\n    retained_earnings_2014 = 2000\n    contributed_capital_2015 = 800\n\n    # Do math calculation to get the answer\n    net_income = revenues - expenses\n    retained_earnings_2015 = retained_earnings_2014 + net_income - distributions\n    total_equity = retained_earnings_2015 + contributed_capital_2015\n    liabilities = assets_2015 - total_equity\n\n    # return answer\n    return liabilities\n```\n\nThis Python program calculates the liabilities of Alpha Enterprises at the end of 2015 based on the given financial information. Here's how it works:\n\n1. We define all the given variables with their respective values.\n\n2. We calculate the net income by subtracting expenses from revenues.\n\n3. We calculate the retained earnings for 2015 by adding net income to the 2014 retained earnings and subtracting distributions.\n\n4. We calculate the total equity by adding the 2015 retained earnings and the contributed capital.\n\n5. Finally, we calculate the liabilities by subtracting total equity from total assets (using the accounting equation: Assets = Liabilities + Equity).\n\n6. The function returns the calculated liabilities.\n\nThis program will give you the correct amount of liabilities for Alpha Enterprises at the end of 2015 based on the provided information."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation (%) |\n|----------|-------------------|--------------------------------|\n| 1        | 30                | 20                             |\n| 2        | 70                | 12                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-996",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a fund manager constructs a portfolio with a standard deviation of 14.40%, what is the covariance between the two assets?",
        "output": [
            "def solution():\n    # Define variables name and value\n    w1 = 0.30  # Weight of Security 1\n    w2 = 0.70  # Weight of Security 2\n    sd1 = 0.20  # Standard deviation of Security 1\n    sd2 = 0.12  # Standard deviation of Security 2\n    portfolio_sd = 0.1440  # Given portfolio standard deviation\n\n    # Do math calculation to get the answer\n    # Portfolio variance formula: σp^2 = w1^2 * σ1^2 + w2^2 * σ2^2 + 2 * w1 * w2 * cov(1,2)\n    # Rearrange to solve for covariance:\n    # cov(1,2) = (σp^2 - w1^2 * σ1^2 - w2^2 * σ2^2) / (2 * w1 * w2)\n    \n    portfolio_variance = portfolio_sd ** 2\n    term1 = w1**2 * sd1**2\n    term2 = w2**2 * sd2**2\n    \n    covariance = (portfolio_variance - term1 - term2) / (2 * w1 * w2)\n\n    # return answer\n    return covariance\n\n```\n\nThis Python program calculates the covariance between the two assets in the portfolio. Here's a breakdown of the solution:\n\n1. We define the variables based on the given information: weights of the securities, their standard deviations, and the portfolio's standard deviation.\n\n2. We use the portfolio variance formula and rearrange it to solve for the covariance:\n   σp^2 = w1^2 * σ1^2 + w2^2 * σ2^2 + 2 * w1 * w2 * cov(1,2)\n   \n   Rearranged to:\n   cov(1,2) = (σp^2 - w1^2 * σ1^2 - w2^2 * σ2^2) /"
        ]
    },
    {
        "tables": [
            "| Company | A  | B  | C  | D  | E  | F  |\n|---------|----|----|----|----|----|----|\n| Market  | 30 | 25 | 16 | 12 | 10 | 7  |\n| Share (%) | |  |  |  |  |  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-997",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Corporations D and F combined to form a new Entity, G, what would the three-company concentration ratio in the industry be considering that there are six corporations in the sector with respective market shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_shares = {\n        'A': 30,\n        'B': 25,\n        'C': 16,\n        'D': 12,\n        'E': 10,\n        'F': 7\n    }\n    \n    # Do math calculation to get the answer\n    # Combine D and F to form G\n    market_shares['G'] = market_shares['D'] + market_shares['F']\n    del market_shares['D']\n    del market_shares['F']\n    \n    # Sort market shares in descending order\n    sorted_shares = sorted(market_shares.values(), reverse=True)\n    \n    # Calculate three-company concentration ratio\n    top_three_sum = sum(sorted_shares[:3])\n    \n    # return answer\n    return top_three_sum\n```\n\nThis Python program calculates the three-company concentration ratio after corporations D and F combine to form entity G. Here's how it works:\n\n1. We define a dictionary `market_shares` with the given market shares for each company.\n\n2. We combine the market shares of D and F to create G, then remove D and F from the dictionary.\n\n3. We sort the market shares in descending order.\n\n4. We sum up the top three market shares to get the three-company concentration ratio.\n\n5. Finally, we return this sum as the answer.\n\nThe returned value will be the three-company concentration ratio as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-998",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John's Industries recently acquired a manufacturing machine for $60,000 which is predicted to produce an annual cash inflow of $25,000 for six years, and plans to depreciate the machine over six years for accounting reasons, while the tax authority calculates the machine's useful life to be 5 years. If we consider the tax rate to be 40% and the machines have no resale value. What would be the pretax income for John's Industries in the 6th year using the straight-line method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    machine_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_life = 6\n    tax_life = 5\n    tax_rate = 0.40\n    year_in_question = 6\n\n    # Do math calculation to get the answer\n    annual_depreciation_accounting = machine_cost / accounting_life\n    annual_depreciation_tax = machine_cost / tax_life\n\n    # In the 6th year, tax depreciation is 0 as it's fully depreciated\n    tax_depreciation_year_6 = 0\n\n    revenue = annual_cash_inflow\n    accounting_expense = annual_depreciation_accounting\n\n    pretax_income = revenue - accounting_expense\n\n    # return answer\n    return pretax_income\n```\n\nThis Python program calculates the pretax income for John's Industries in the 6th year using the straight-line depreciation method. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate the annual depreciation for accounting purposes and tax purposes.\n3. In the 6th year, tax depreciation is 0 as the machine is fully depreciated for tax purposes after 5 years.\n4. The pretax income is calculated as revenue (annual cash inflow) minus the accounting expense (annual depreciation for accounting purposes).\n5. The function returns the pretax income.\n\nNote that the tax rate and tax depreciation don't affect the pretax income calculation directly, but they would be relevant for after-tax income calculations."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-999",
        "python_solution": "",
        "ground_truth": null,
        "question": "John thinks that the average cost of the commercial residential property is more than $155,000. The population standard deviation is $25,000. A random sample of 36 commercial residential properties in the region has an average cost of $159,750. John carry out the hypothesis test at a 1% significance level. What is the value of the computed test statistic?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    population_mean = 155000\n    population_std_dev = 25000\n    sample_size = 36\n    sample_mean = 159750\n    significance_level = 0.01\n\n    # Do math calculation to get the answer\n    standard_error = population_std_dev / (sample_size ** 0.5)\n    z_score = (sample_mean - population_mean) / standard_error\n\n    # return answer\n    return z_score\n```\n\nThis Python program calculates the z-score (test statistic) for the given hypothesis test. Here's a breakdown of the calculation:\n\n1. We define the variables based on the information provided in the question.\n2. We calculate the standard error using the formula: standard error = population standard deviation / sqrt(sample size)\n3. We then calculate the z-score (test statistic) using the formula: z = (sample mean - population mean) / standard error\n4. The calculated z-score is returned as the answer.\n\nThis z-score represents the number of standard deviations the sample mean is away from the hypothesized population mean, which is what we need for the hypothesis test."
        ]
    }
]