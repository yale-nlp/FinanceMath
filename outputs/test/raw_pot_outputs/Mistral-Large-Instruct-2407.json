[
    {
        "tables": [
            "| Asset Class    | Geometric Return(%) |\n| -------------- | ------------------- |\n| Equities       | 8.0                 |\n| Corporate Bonds| 6.5                 |\n| Treasury bills | 2.5                 |\n| Inflation      | 2.1                 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-0",
        "python_solution": "",
        "ground_truth": null,
        "question": "What historical geometric real rate of return for corporate bonds does a researcher identify?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    inflation = 2.1\n\n    # Do math calculation to get the answer\n    geometric_real_return = ((1 + corporate_bonds_return / 100) / (1 + inflation / 100) - 1) * 100\n\n    # return answer\n    return geometric_real_return\n\n# Print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Period | Years | Forward Rate |\n|--------|-------|--------------|\n| 1      | 0.5   | 1.20%        |\n| 2      | 1     | 1.80%        |\n| 3      | 1.5   | 2.30%        |\n| 4      | 2     | 2.70%        |\n| 5      | 2.5   | 3.00%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-1",
        "python_solution": "",
        "ground_truth": null,
        "question": "With the given US Treasury forward rates, what's the value of a 2.5-year $100 face value Treasury bond with a 5% interest rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    interest_rate = 0.05\n    forward_rates = {\n        0.5: 0.0120,\n        1.0: 0.0180,\n        1.5: 0.0230,\n        2.0: 0.0270,\n        2.5: 0.0300\n    }\n\n    # Do math calculation to get the answer\n    discounted_value = 0\n    for period, rate in forward_rates.items():\n        cash_flow = face_value * interest_rate / 2  # Semi-annual interest payment\n        discount_factor = (1 + rate / 2) ** (2 * period) # Calculate the discount factor due to the forward rate\n        discounted_value += cash_flow / discount_factor\n\n    # Add the final face value of the bond, discounted by the appropriate forward rate\n    discounted_value += face_value / (1 + forward_rates[2.5] / 2) ** (2 * 2.5)\n\n    # return answer\n    return discounted_value\n\n# Execute the solution\nprint(solution())\n```\n\nThis program calculates the value of a 2.5-year Treasury bond with a 5% interest rate using the given US Treasury forward rates. It sums the present values of the interest payments and the final face value based on the forward rates."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-2",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming U.S. GAAP is in effect unless stated otherwise, imagine a highly profitable company, Alpha Enterprises, acquired a new asset for $1,000,000 on January 1, 2002. How does the asset acquisition impact Alpha Enterprises' deferred tax liability for 2002 given the following conditions for the asset: for financial statements purposes, straight-line depreciation over 10 years with no salvage value; for tax purposes, the asset is classified under three-year MACRS depreciation with the first year MACRS factor being 0.333, and the tax rate stands at 40%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    asset_cost = 1_000_000\n    financial_depreciation_years = 10\n    tax_depreciation_factor_year_1 = 0.333\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    financial_depreciation_year_1 = asset_cost / financial_depreciation_years\n    tax_depreciation_year_1 = asset_cost * tax_depreciation_factor_year_1\n    difference_in_depreciation = tax_depreciation_year_1 - financial_depreciation_year_1\n    deferred_tax_liability = difference_in_depreciation * tax_rate\n\n    # Return answer\n    return deferred_tax_liability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-3",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the average P/E of 30 shares in a particular manufacturing sector is 18 and the sample standard deviation is 3.5, what is the standard error of the mean closest to?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    average_pe = 18\n    sample_standard_deviation = 3.5\n    number_of_shares = 30\n\n    # Do math calculation to get the answer\n    standard_error = sample_standard_deviation / (number_of_shares ** 0.5)\n\n    # return answer\n    return standard_error\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-4",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose there are two stocks, X and Y. If their annual returns are jointly normally distributed, the marginal distribution of each stock has a mean of 2% and a standard deviation of 10%, and the correlation is 0.9, can you tell me the expected annual return of stock X if the annual return of stock Y is 3%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_return = 0.02  # Mean return for both stocks\n    std_dev = 0.10      # Standard deviation for both stocks\n    correlation = 0.9   # Correlation between stocks X and Y\n    return_y = 0.03     # Annual return of stock Y\n\n    # Calculate the expected annual return of stock X\n    # Using the formula for conditional expectation in a bivariate normal distribution\n    expected_return_x = mean_return + correlation * (std_dev / std_dev) * (return_y - mean_return)\n\n    # return answer\n    return expected_return_x\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\n### Explanation\n\n- **mean_return**: The mean annual return for both stocks, which is 2% or 0.02.\n- **std_dev**: The standard deviation of the annual returns for both stocks, which is 10% or 0.10.\n- **correlation**: The correlation coefficient between the returns of stocks X and Y, which is 0.9.\n- **return_y**: The given annual return of stock Y, which is 3% or 0.03.\n\nThe formula used to calculate the expected return of stock X given the return of stock Y in a bivariate normal distribution is:\n\n\\[ \\text{expected\\_return\\_x} = \\mu_X + \\rho \\left(\\frac{\\sigma_X}{\\sigma_Y}\\right) (Y - \\mu_Y) \\]\n\nIn this case:\n- \\(\\mu_X\\) and \\(\\mu_Y\\) are both 0.02.\n- \\(\\sigma_X\\) and \\(\\sigma_Y\\) are both 0.10.\n- \\(\\rho\\) is the correlation coefficient, which is 0.9.\n\nThe program calculates the expected annual return of stock X based on these parameters."
        ]
    },
    {
        "tables": [
            "| Balances as of year ended 31 December | 2004 | 2005 |\n| ------------------------------------- | ---- | ---- |\n| Retained earnings                     | 120  | 145  |\n| Accounts receivable                   | 38   | 43   |\n| Inventory                             | 45   | 48   |\n| Accounts payable                      | 36   | 29   |"
        ],
        "topic": "Accounting",
        "question_id": "test-5",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's consider that U.S. GAAP is applicable unless stated differently. A research analyst has collected this data from a corporation's financial statements for the year 2005 (in millions of dollars): The firm announced and distributed cash dividends worth $10 million in 2005 and accounted for a depreciation cost of $25 million for the same year. What was the corporation's cash flow from operations, in millions, for 2005?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2004 = 120\n    retained_earnings_2005 = 145\n    cash_dividends_2005 = 10\n    depreciation_2005 = 25\n\n    # Do math calculation to get the answer\n    # Calculate net income for 2005\n    net_income_2005 = retained_earnings_2005 - retained_earnings_2004 + cash_dividends_2005\n\n    # Calculate cash flow from operations\n    cash_flow_from_operations = net_income_2005 + depreciation_2005\n\n    # return answer\n    return cash_flow_from_operations\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe Python program calculates the net income for 2005 by considering the change in retained earnings and the cash dividends distributed. The cash flow from operations is then determined by adding the depreciation cost to the net income."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-6",
        "python_solution": "",
        "ground_truth": null,
        "question": "In early 2009, Steel Production procured a new assembly line equipment for $600,000. The equipment is anticipated to have a useful life of 10 years and an estimated salvage value of $50,000. What amount of depreciation would Steel Production record in 2009 for financial statements using the double-declining balance method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost = 600000\n    useful_life = 10\n    salvage_value = 50000\n    depreciable_base = cost - salvage_value\n    double_declining_rate = 2 / useful_life\n\n    # Do math calculation to get the answer\n    depreciation_expense = depreciable_base * double_declining_rate\n\n    # return answer\n    return depreciation_expense\n```"
        ]
    },
    {
        "tables": [
            "| ASSETS                         |         | Company A | Company B | Sector Average |\n|--------------------------------|---------|-----------|-----------|----------------|\n| Current assets                 |         |           |           |                |\n| Cash and cash equivalents      |         | 5         | 7         |                |\n| Marketable securities          |         | 0         | 2         |                |\n| Accounts receivable, net       |         | 15        | 12        |                |\n| Inventories                    |         | 20        | 16        |                |\n| Prepaid expenses               |         | 15        | 11        |                |\n| Total current assets           |         | 55        | 48        |                |\n| Property, plant, and equipment | net     | 35        | 37        |                |\n| Goodwill                       |         | 0         | 8         |                |\n| Other assets                   |         | 10        | 7         |                |\n| Total assets                   | 100     | 100       | 100       | 100            |\n|--------------------------------|---------|-----------|-----------|----------------|\n| LIABILITIES AND SHAREHOLDERS' EQUITY | | | | |\n| Current liabilities                 |   | | | |\n| Accounts payable                    |   | 10 | 10 | 10 |\n| Short-term debt                     |   | 25 | 10 | 15 |\n| Accrued expenses                    |   | 5  | 3  |    |\n| Total current liabilities           |   | 35 | 25 | 28 |\n| Long-term debt                      |   | 45 | 20 | 28 |\n| Other non-current liabilities       |   | 0  | 10 | 7  |\n| Total liabilities                   |   | 80 | 55 | 63 |\n| Total shareholders' equity          |   | 20 | 45 | 37 |\n| Total liabilities and shareholders' equity | | 100 | 100 | 100 |"
        ],
        "topic": "Accounting",
        "question_id": "test-7",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the quick ratio for Company B as per the common-size balance sheets displayed in Exhibit 1 for Company A, Company B, and the Sector Average?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash_and_cash_equivalents = 7\n    marketable_securities = 2\n    accounts_receivable = 12\n    total_current_liabilities = 25\n\n    # Do math calculation to get the answer\n    quick_assets = cash_and_cash_equivalents + marketable_securities + accounts_receivable\n    quick_ratio = quick_assets / total_current_liabilities\n\n    # return answer\n    return quick_ratio\n\n# Run the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-8",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, the portfolio of Frontier Investment Group, a hedge fund, was valued at $475,000,000. A year later, the value of assets under management has grown to $541,500,000. The hedge fund imposes a 1.5% management fee based on the portfolio value at the end of the year and a 10% incentive fee. If these two fees are calculated separately, what would be the effective return for an investor in this hedge fund?",
        "output": [
            " Sure! Let's calculate the effective return for an investor in the Frontier Investment Group. Here's the Python program to derive the answer:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_value = 475000000\n    final_value = 541500000\n    management_fee_rate = 0.015\n    incentive_fee_rate = 0.10\n\n    # Calculate gross return before fees\n    gross_return = final_value - initial_value\n\n    # Calculate management fee\n    management_fee = final_value * management_fee_rate\n\n    # Calculate incentive fee based on gross return\n    incentive_fee = gross_return * incentive_fee_rate\n\n    # Calculate net return after deducting management and incentive fees\n    net_return = gross_return - management_fee - incentive_fee\n\n    # Effective return for the investor\n    effective_return_rate = net_return / initial_value\n\n    # return answer\n    return effective_return_rate\n\n# Run the solution and print the result\nprint(solution())\n```\n\nThis program first calculates the gross return on the portfolio, then computes the management fee and incentive fee separately. Finally, it calculates the net return to the investor after deducting these fees and determines the effective return rate."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-9",
        "python_solution": "",
        "ground_truth": null,
        "question": "What does an analyst project as the expected return on equity for a corporation using the Bond yield plus risk premium approach, given a yield on the corporation's bonds at 4.3% and a 6.1% historical risk premium obtained by equity investors compared to long-term corporate bond yields?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 4.3  # Bond yield in percentage\n    risk_premium = 6.1  # Historical risk premium in percentage\n\n    # Do math calculation to get the answer\n    expected_return_on_equity = bond_yield + risk_premium\n\n    # return answer\n    return expected_return_on_equity\n```"
        ]
    },
    {
        "tables": [
            "|         | RDI=30% | RDI=25% | RDI=15% |\n|---------|---------|---------|---------|\n| RFI=25% | 0.25    |         |         |\n| RFI=15% |         | 0.5     |         |\n| RFI=10% |         |         | 0.25    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-10",
        "python_solution": "",
        "ground_truth": null,
        "question": "A specialist generates the subsequent joint probability function for an international index (FI) and a local index (DI). What is the covariance of returns on the international index and the returns on the local index?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    # RDI = Return on Domestic Index, RFI = Return on Foreign Index\n    probabilities = {\n        (30, 25): 0.25,\n        (25, 15): 0.5,\n        (15, 10): 0.25\n    }\n\n    expected_RDI = 0.30 * 0.25 + 0.25 * 0.5 + 0.15 * 0.25\n    expected_RFI = 0.25 * 0.25 + 0.15 * 0.5 + 0.10 * 0.25\n\n    covariance = 0\n    for (rdi, rfi), prob in probabilities.items():\n        covariance += prob * (rdi - expected_RDI) * (rfi - expected_RFI)\n\n    # Return answer\n    return covariance\n\nprint(solution())\n```\n\nThe above Python program calculates the covariance of the returns on the international index (FI) and the returns on the local index (DI). The `solution` function first computes the expected returns for both indices and then uses these values to calculate the covariance according to the given joint probability function."
        ]
    },
    {
        "tables": [
            "| Cost of the equipment | UYP 1,200,000       |\n|----------------------|---------------------|\n| Estimated residual value | UYP 200,000      |\n| Expected useful life | 8 years             |\n| Total productive capacity| 800,000 units    |\n| Production in FY 2009 | 135,000 units      | \n| Expected production for the next 7 years | 95,000 units each |"
        ],
        "topic": "Accounting",
        "question_id": "test-11",
        "python_solution": "",
        "ground_truth": null,
        "question": "If MARIO S.A., a corporation based in Uruguay, uses the straight-line method, then how much is the depreciation expense on their income statement related to the manufacturing equipment, considering that Carlos Lopez from the company is calculating it for the fiscal year ended 31 December 2009? The equipment was obtained on 1 January 2009, and Lopez has gathered the following data (currency in Uruguayan pesos, UYP).",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 1200000  # in UYP\n    estimated_residual_value = 200000  # in UYP\n    expected_useful_life = 8  # in years\n\n    # Do math calculation to get the answer\n    depreciable_amount = cost_of_equipment - estimated_residual_value\n    annual_depreciation = depreciable_amount / expected_useful_life\n\n    # return answer\n    return annual_depreciation\n\n# Example usage\nprint(solution())\n```\n\nThis Python program defines a function `solution()` that calculates the annual depreciation expense for the manufacturing equipment using the straight-line method. The function first determines the depreciable amount by subtracting the estimated residual value from the cost of the equipment. It then calculates the annual depreciation by dividing the depreciable amount by the expected useful life of the equipment. Finally, the function returns the calculated annual depreciation."
        ]
    },
    {
        "tables": [
            "|                                      |            |\n|--------------------------------------|------------|\n| **Wood Balance Sheet 2017**          |            |\n| **Assets**                           |            |\n| Cash                                 | $650,000   |\n| Inventory                            | 27,000     |\n| Accounts receivable                  | 25,000     |\n| Plant and equipment (cost less depreciation) | 300,000 |\n| TimberLand                           | 8,086,000  |\n| **Total assets**                     | $9,088,000 |\n| Accounts payables                    | $ 88,000   |\n| Long-term bank loan                  | 2,500,000  |\n| Common stock                         | 6,500,000  |\n| **Total liabilities and equity**     | $9,088,000 |\n| TimberLand (market value)            | 50,000,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-12",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the balance sheet as of 31 December 2017, Pierre thinks that an asset-based assessment is suitable for Oak. Based on the extra presumption that other assets and liabilities on the balance sheet, what is the asset-based valuation of Oak?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash = 650000\n    inventory = 27000\n    accounts_receivable = 25000\n    plant_equipment = 300000\n    timberland_book_value = 8086000\n    timberland_market_value = 50000000\n\n    # Do math calculation to get the answer\n    total_assets = (cash + inventory + accounts_receivable\n                    + plant_equipment + timberland_book_value)\n\n    # Update timberland book value with market value\n    total_assets = total_assets - timberland_book_value + timberland_market_value\n\n    # Calculate the final asset-based valuation\n    asset_based_valuation = total_assets\n\n    # return answer\n    return asset_based_valuation\n\n# Calling the function to get the result\nprint(solution())\n```\n\nThis Python program performs an asset-based valuation by considering the market value of the timberland and summing it with the other assets listed in the balance sheet. The program then returns the total adjusted asset value, which represents the asset-based valuation of Oak."
        ]
    },
    {
        "tables": [
            "| End of Year | Call Price |\n|-------------|------------|\n| 3           | 102        |\n| 4           | 101        |\n| 5           | 100        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-13",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond that has 5 years left until it matures is presently being traded for 101 for every 100 of par value. It provides a coupon rate of 6%, with interest being paid every six months. Considering that the bond can be first called in 3 years, and can be called following that date on interest payment dates per the provided schedule, what is the bond's yearly yield-to-first-call?",
        "output": [
            " Certainly! I'll help you calculate the bond's yearly yield-to-first-call, which is the rate of return an investor would get if they bought the bond and it was called at the first possible call date. This involves calculating the present value of the cash flows until the call date and solving for the yield.\n\nHere's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_price = 101  # Current price per 100 of par value\n    par_value = 100  # Par value\n    coupon_rate = 0.06  # Annual coupon rate\n    semiannual_coupon = par_value * coupon_rate / 2  # Semiannual coupon payment\n    years_to_first_call = 3  # Years to the first call date\n    call_price = 102  # Call price per 100 of par value\n    n_periods = years_to_first_call * 2  # Number of semiannual periods until the first call date\n\n    # Initialize variables for the Newton-Raphson method\n    ytm = 0.05  # Initial guess for yield to maturity\n\n    # Define the function to calculate the present value of the cash flows\n    def present_value_func(ytm):\n        pv_coupons = semiannual_coupon * ((1 - (1 + ytm/2)**-n_periods) / (ytm/2))  # Present value of coupons\n        pv_call_price = call_price / (1 + ytm/2)**n_periods  # Present value of the call price\n        return pv_coupons + pv_call_price - bond_price\n\n    # Define the derivative of the present value function\n    def present_value_derivative(ytm):\n        d_pv_coupons = -semiannual_coupon * (((1 + ytm/2)**-n_periods) * n_periods / (ytm/2) - ((1 - (1 + ytm/2)**-n_periods) / (ytm/"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-14",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Corporation A disclosed a salary expenditure of $30 million and wage payable rose by $2 million, how much money was actually disbursed to workers?",
        "output": [
            " Sure, here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    salary_expenditure = 30000000\n    wage_payable_increase = 2000000\n\n    # Do math calculation to get the answer\n    money_disbursed = salary_expenditure - wage_payable_increase\n\n    # return answer\n    return money_disbursed\n```\n\nThis program defines the variables for the salary expenditure and the increase in wage payable, then calculates the money actually disbursed to workers by subtracting the wage payable increase from the salary expenditure, and finally returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-15",
        "python_solution": "",
        "ground_truth": null,
        "question": "Peterson Energy Inc, a US-based, publicly traded energy firm, recently stated its plans to acquire Heartland Energy Inc, a smaller energy company based in the US. The offer from Peterson values Heartland at an enterprise worth of USD40.6 billion, which includes USD4.3 billion of existing Heartland debt. In order to finance the consideration of USD55 in cash along with 2.25 Peterson shares for each Heartland share, Peterson intends to issue 104 million new shares and will raise approximately USD26 billion in new debt, with the remaining being funded by cash on hand. Once the deal has closed, Peterson anticipates having an outstanding debt of nearly USD62 billion. Before the acquisition, Peterson had 1.096 billion shares in circulation, each trading at USD125. With the assumption of a constant share price and the book value of debt being equal to its market value, Jackson plans to ascertain the change in the proportions of debt and equity in Peterson\u2019s capital structure following",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    existing_debt_heartland = 4.3  # in billions USD\n    acquisition_debt_raised = 26.0  # in billions USD\n    peterson_debt_before = (62.0 - acquisition_debt_raised - existing_debt_heartland)  # in billions USD\n    peterson_debt_after = 62.0  # in billions USD\n    peterson_shares_before = 1.096  # in billions\n    peterson_shares_issued = 0.104  # in billions\n    peterson_share_price = 125.0  # in USD\n\n    # Calculate total Peterson shares after acquisition\n    peterson_shares_after = peterson_shares_before + peterson_shares_issued\n\n    # Calculate market values of equity before and after the acquisition\n    equity_before = peterson_shares_before * peterson_share_price\n    equity_after = peterson_shares_after * peterson_share_price\n\n    # Calculate total capital before and after the acquisition\n    total_capital_before = equity_before + peterson_debt_before\n    total_capital_after = equity_after + peterson_debt_after\n\n    # Calculate proportions of debt and equity before and after the acquisition\n    debt_proportion_before = peterson_debt_before / total_capital_before\n    debt_proportion_after = peterson_debt_after / total_capital_after\n    equity_proportion_before = equity_before / total_capital_before\n    equity_proportion_after = equity_after / total_capital_after\n\n    # Calculate change in proportions\n    change_in_debt_proportion = debt_proportion_after - debt_proportion_before\n    change_in_equity_proportion = equity_proportion_after - equity_proportion_before\n\n    # Return the change in proportions\n    answer = {\n        \"change"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-16",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the performance metrics for a different investment option: Let's assume that the highest drawdown risk remains constant at 10.2% for every time interval. Also, suppose that the mean drawdown risk is unchanging at 6.8% for every time interval. Based on the data given, compute the Calmar ratio in the usual manner. What is the resulting Calmar ratio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    highest_drawdown_risk = 10.2 / 100\n    mean_drawdown_risk = 6.8 / 100\n    performance_metrics = {\n        '1 Year': 5.3 / 100,\n        '3 Years': 6.2 / 100,\n        '5 Years': 4.7 / 100,\n        'Since Inception': 4.4 / 100\n    }\n\n    # Calculate the average annual return\n    average_annual_return = sum(performance_metrics.values()) / len(performance_metrics)\n\n    # Calculate the Calmar ratio\n    calmar_ratio = average_annual_return / highest_drawdown_risk\n\n    # Return the answer\n    return calmar_ratio\n```\n\nIn this program, we are computing the Calmar ratio by taking the average annual return divided by the highest drawdown risk. The Calmar ratio is a measure used to evaluate the performance of an investment vehicle, calculated as average annual compounded return divided by maximum drawdown risk."
        ]
    },
    {
        "tables": [
            "| Returns | RB=50% | RB=20% | RB=-30% |\n|---------|--------|--------|---------|\n| RA=-10% | 0.4    | 0      | 0       |\n| RA=10%  | 0      | 0.3    | 0       |\n| RA=30%  | 0      | 0      | 0.3     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-17",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the above probability matrix, what is the covariance of returns on Portfolio X and Portfolio Y?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    probabilities = {\n        ('50%', '-10%'): 0.4,\n        ('20%', '10%'): 0.3,\n        ('-30%', '30%'): 0.3,\n    }\n\n    expected_returns_X = (0.5 * 0.4 + 0.2 * 0.3 + -0.3 * 0.3) / (0.4 + 0.3 + 0.3)\n    expected_returns_Y = (-0.1 * 0.4 + 0.1 * 0.3 + 0.3 * 0.3) / (0.4 + 0.3 + 0.3)\n\n    covariance = 0\n\n    for (return_X, return_Y), prob in probabilities.items():\n        return_X = float(return_X.strip('%')) / 100\n        return_Y = float(return_Y.strip('%')) / 100\n\n        covariance += prob * (return_X - expected_returns_X) * (return_Y - expected_returns_Y)\n\n    answer = covariance\n\n    # return answer\n    return answer\n```\nThis Python program calculates the covariance of returns on Portfolio X and Portfolio Y using the given probability matrix. The expected returns for both portfolios are first calculated using the weighted averages of their respective returns. The covariance is then calculated by summing the products of the probability and the deviation of each return from its expected value for both portfolios."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-18",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Fairfield Inc. intends to borrow sufficient funds to buy back 100,000 stocks, what would be Fairfield\u2019s earnings per share following the repurchase, with the following data related to the share buyback: Shares outstanding before buyback 3.1 million, Earnings per share before buyback US$4.00, Share price at the time of buyback US$50, and After-tax cost of borrowing 6%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding_before_buyback = 3100000\n    earnings_per_share_before_buyback = 4.00\n    share_price_at_buyback = 50\n    number_of_shares_to_buyback = 100000\n    after_tax_cost_of_borrowing = 0.06\n\n    # Calculate the total amount borrowed to buy back the shares\n    total_amount_borrowed = number_of_shares_to_buyback * share_price_at_buyback\n\n    # Calculate the total earnings before the buyback\n    total_earnings_before_buyback = shares_outstanding_before_buyback * earnings_per_share_before_buyback\n\n    # Calculate the interest expense due to borrowing\n    interest_expense = total_amount_borrowed * after_tax_cost_of_borrowing\n\n    # Calculate the new total earnings after the buyback and interest expense\n    total_earnings_after_buyback = total_earnings_before_buyback - interest_expense\n\n    # Calculate the new number of shares outstanding after the buyback\n    shares_outstanding_after_buyback = shares_outstanding_before_buyback - number_of_shares_to_buyback\n\n    # Calculate the new earnings per share after the buyback\n    earnings_per_share_after_buyback = total_earnings_after_buyback / shares_outstanding_after_buyback\n\n    # Return the answer\n    return earnings_per_share_after_buyback\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis Python program defines the necessary variables, performs the required calculations step-by-step, and returns the new earnings per share after the share buyback."
        ]
    },
    {
        "tables": [
            "|      | Adesivo | Enviado | Gesticular |\n|------|---------|---------|------------|\n| Stock's current price | 14.72 | 72.20 | 132.16 |\n| Diluted EPS (last four quarters) | 0.81 | 2.92 | -0.05 |\n| Diluted EPS (next four quarters) | 0.91 | 3.10 | 2.85 |\n| Dividend rate (annualized most recent dividend) | 0.44 | 1.24 | 0.00 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-19",
        "python_solution": "",
        "ground_truth": null,
        "question": "Pinho instructs Martins to utilize a valuation metric to facilitate a comprehensive evaluation of the relative share value of the three corporations. The essential financial data for these businesses are shown in Exhibit 1. For Adesivo, Martins examines the base trailing EPS. With a basic trailing EPS of R$0.84, he found a note in the financial reports of Adesivo stating that\u201cOn a per share basis, Adesivo incurred in the last four quartersi. from a lawsuit, a non-recurring gain of R$0.04; andii. Based on Exhibit 1 and Adesivo\u2019s financial reports, what is the trailing P/E for Adesivo using the base EPS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    stock_price_Adesivo = 14.72\n    base_trailing_EPS_Adesivo = 0.84\n\n    # Do math calculation to get the answer\n    trailing_P_E_Adesivo = stock_price_Adesivo / base_trailing_EPS_Adesivo\n\n    # return answer\n    return trailing_P_E_Adesivo\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-20",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investor bought 200 stocks of a company that doesn't pay dividends on margin for a price of $50 each. The leverage ratio stands at 2.5. Half a year later, the investor offloads these stocks at $60 apiece. Disregarding the interest accrued on the borrowed sum and the transaction costs, what was the investor's return over the half-year period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    num_stocks = 200\n    purchase_price = 50\n    selling_price = 60\n    leverage_ratio = 2.5\n\n    # Calculate the cost of purchase and the total selling price\n    total_cost = num_stocks * purchase_price\n    total_sale = num_stocks * selling_price\n\n    # Calculate the initial investment considering the leverage\n    initial_equity = total_cost / leverage_ratio\n\n    # Calculate the gain\n    capital_gain = total_sale - total_cost\n\n    # Calculate the return over the half-year period\n    return_on_investment = (capital_gain / initial_equity) * 100\n\n    # return answer\n    return return_on_investment\n```\n\nExplanation:\n1. The investor bought 200 stocks at $50 each, leading to a total cost of $10,000.\n2. The stocks were sold half a year later for $60 each, leading to a total selling price of $12,000.\n3. The initial equity considering the leverage ratio of 2.5 is calculated by dividing the total cost by the leverage ratio, which is $4,000.\n4. The capital gain is the difference between the total sale amount ($12,000) and the total cost ($10,000), which equals $2,000.\n5. The return on investment is calculated as the capital gain ($2,000) divided by the initial equity ($4,000), multiplied by 100 to express it as a percentage.\n\nThus, the investor's return over the half-year period is calculated by the provided Python function."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| BVPS  | $28.25  |\n| ROE  | 14.5%  |\n| Constant long-term growth  | 5.5%  |\n| Cost of equity  | 10.9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-21",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is assessing the value of Corporation Z using the single-stage residual income model and has compiled pertinent data in the listed table. What is the justified price-to-book ratio for Corporation Z?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    BVPS = 28.25\n    ROE = 0.145\n    growth_rate = 0.055\n    cost_of_equity = 0.109\n\n    # Do math calculation to get the answer\n    justified_price_to_book_ratio = (ROE - growth_rate) / (cost_of_equity - growth_rate)\n\n    # return answer\n    return justified_price_to_book_ratio\n\n# Example execution of the solution function\nprint(solution())\n```\n\nThis Python program calculates the justified price-to-book ratio for Corporation Z using the single-stage residual income model formula."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-22",
        "python_solution": "",
        "ground_truth": null,
        "question": "An employee at a capital management firm, Jonathan, is given the task to determine the gain in 6 months on a transaction of $2,000,000 vega notional of a one-year variance swap on the S&P 500 at a 20% strike (expressed as annual volatility). After a period of six months, the S&P 500 shows a realized volatility of 16%, while the fair strike of a fresh 6-month variance swap on the S&P 500 is now 18%. The yearly interest rate is 2.00%. What is the updated value of the variance swap?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    vega_notional = 2000000\n    initial_strike_volatility = 0.20\n    observed_volatility = 0.16\n    new_strike_volatility = 0.18\n    interest_rate = 0.02\n\n    # Convert annual volatility to variance\n    initial_strike_variance = initial_strike_volatility ** 2\n    observed_variance = observed_volatility ** 2\n    new_strike_variance = new_strike_volatility ** 2\n\n    # Calculate the effective time period fraction (6 months)\n    time_period_fraction = 0.5\n\n    # Calculate the discount factor\n    discount_factor = (1 - interest_rate) ** time_period_fraction\n\n    # Calculate the updated value of the variance swap\n    updated_variance_swap_value = (observed_variance - initial_strike_variance) * time_period_fraction + \\\n                                  (new_strike_variance - initial_strike_variance) * (1 - time_period_fraction)\n\n    # Adjust for vega notional and discount factor\n    updated_value = updated_variance_swap_value * vega_notional * discount_factor\n\n    # Return the answer\n    return updated_value\n\n# Call the solution function to get the answer\nresult = solution()\nprint(result)\n```\n\nThis program defines the variables and performs the necessary calculations to determine the updated value of the variance swap based on the given information. The result is then returned and printed."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-23",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a four-factor market model is being used for the return process of 100 companies, then what is the number of parameters that need to be estimated?",
        "output": [
            " Certainly! Here's the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    number_of_companies = 100\n    number_of_factors = 4\n\n    # Do math calculation to get the answer\n    # The four-factor model has one intercept term and four factor loadings per company\n    # Thus, each company requires (number_of_factors + 1) parameters\n    parameters_per_company = number_of_factors + 1\n\n    # Total number of parameters to estimate is the number of companies times the parameters per company\n    total_parameters = number_of_companies * parameters_per_company\n\n    # return answer\n    return total_parameters\n```\n\nExplanation:\n- In the four-factor market model, each company has an intercept term and four factor loadings, resulting in 5 parameters per company.\n- For 100 companies, the total number of parameters is \\(100 \\times 5 = 500\\).\n\nSo, the program will correctly compute the number of parameters that need to be estimated."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-24",
        "python_solution": "",
        "ground_truth": null,
        "question": "A significant purchase has just been declared, aiming at corporation Y. The proposal from corporation X features an exchange offer with a ratio of 2. Directly following the declaration, corporation X and Y's prices are at $50 and $90, respectively. A hedge fund opts to take a long position in corporation Y, hedged with shares from X. Following the completion of the acquisition, the prices shift to $60 and $120. Therefore, the profit for each share from corporation Y is",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    x_price_initial = 50  # Price of corporation X before acquisition\n    y_price_initial = 90  # Price of corporation Y before acquisition\n    x_price_final = 60    # Price of corporation X after acquisition\n    y_price_final = 120   # Price of corporation Y after acquisition\n    exchange_ratio = 2    # Exchange offer ratio\n\n    # Do math calculation to get the answer\n    # Initial hedged position cost\n    x_shares_needed = exchange_ratio\n    hedged_cost = y_price_final - x_shares_needed * x_price_final\n\n    # Calculate profit per share of corporation Y\n    profit_per_share_y = hedged_cost - y_price_initial\n\n    # return answer\n    return profit_per_share_y\n```\n\nThis program defines the initial and final prices of the shares, the exchange ratio for the acquisition, and then calculates the profit per share for each share of corporation Y after accounting for the hedge with shares from corporation X."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-25",
        "python_solution": "",
        "ground_truth": null,
        "question": "Presuming the exercise price of a share option is $50, if the share undergoes a 2-to-1 split, what would be the fresh exercise price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_exercise_price = 50\n    split_ratio = 2\n\n    # Do math calculation to get the answer\n    fresh_exercise_price = initial_exercise_price / split_ratio\n\n    # return answer\n    return fresh_exercise_price\n```\nWhen a share undergoes a 2-to-1 split, the exercise price is adjusted accordingly. In this case, the fresh exercise price becomes half of the initial exercise price. The program correctly defines the initial exercise price and the split ratio, performs the calculation, and returns the new exercise price."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-26",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, Firm B had 10,000 shares and 1,000 outstanding warrants with an exercise price of $20/share. The average stock price was $25 over the course of that year. What was the net shares issued when computing the EPS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_shares = 10000\n    outstanding_warrants = 1000\n    exercise_price = 20\n    average_stock_price = 25\n\n    # Do math calculation to get the answer\n    if average_stock_price > exercise_price:\n        additional_shares_from_warrants = outstanding_warrants\n    else:\n        additional_shares_from_warrants = 0\n\n    net_shares_issued = total_shares + additional_shares_from_warrants\n\n    # return answer\n    return net_shares_issued\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the number of net shares issued when computing the EPS for Firm B in 2016. It first checks if the average stock price is greater than the exercise price. If it is, it adds the outstanding warrants to the total shares; otherwise, it adds zero. Finally, it returns the net shares issued."
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-27",
        "python_solution": "",
        "ground_truth": null,
        "question": "The fund overseen by John displays the following returns in year1,2,3: What will be the time-weighted rate of return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    investment_year1 = 500\n    return_year1 = 0.12\n    investment_year2 = 600\n    return_year2 = 0.05\n    investment_year3 = 1000\n    return_year3 = 0.01\n\n    # Do math calculation to get the answer\n    end_value_year1 = investment_year1 * (1 + return_year1)\n    end_value_year2 = end_value_year1 * (1 + return_year2)\n    end_value_year3 = end_value_year2 * (1 + return_year3)\n\n    time_weighted_return = ((1 + return_year1) * (1 + return_year2) * (1 + return_year3)) ** (1 / 3) - 1\n\n    # return answer\n    return time_weighted_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-28",
        "python_solution": "",
        "ground_truth": null,
        "question": "On today's date, 5 June 2013, a semi-annual bond lasting three years that comes with a coupon rate of 6% just issued its initial coupon payment. The face value stands at 100. The due dates for interest payments are the 5th of April and the 5th of October. The bond's yield-to-maturity is equal to 5%. If the count convention is based on 30/360, figure out the accrued interest on this bond as of 5 June 2013.",
        "output": [
            " Sure, here's the Python program to calculate the accrued interest on the bond as of 5 June 2013:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.06\n    yield_to_maturity = 0.05\n    coupon_payment = face_value * coupon_rate / 2  # Semi-annual coupon payment\n\n    # Define important dates\n    issue_date = (2013, 4, 5)  # Initial coupon payment on the issue date\n    current_date = (2013, 6, 5)\n\n    # Calculate the number of days between the issue date and the current date\n    days_in_period = (current_date[0] - issue_date[0]) * 360 + (current_date[1] - issue_date[1]) * 30 + (current_date[2] - issue_date[2])\n\n    # Calculate accrued interest based on the 30/360 day count convention\n    accrued_interest = coupon_payment * (days_in_period / 180)  # 180 days in a semi-annual period\n\n    # return answer\n    return accrued_interest\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program defines the necessary variables and calculations to determine the accrued interest on the bond as of 5 June 2013, based on the given information and the 30/360 day count convention."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-29",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Steel Production acquired a new machine for its production line at an expense of $600,000. The machine is expected to be useful for 10 years and has an approximate residual value of $50,000. Using the straight-line method, what amount of depreciation should Steel report in 2010 for financial accounting?",
        "output": [
            " Certainly! Here's the Python program to calculate the depreciation for the year 2010 using the straight-line method for the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost = 600000\n    residual_value = 50000\n    useful_life = 10\n\n    # Do math calculation to get the answer\n    annual_depreciation = (cost - residual_value) / useful_life\n\n    # return answer\n    return annual_depreciation\n```\n\nThis program defines the necessary variables (cost, residual value, and useful life) and then calculates the annual depreciation using the straight-line method formula. It finally returns the calculated annual depreciation."
        ]
    },
    {
        "tables": [
            "| Asset | Annual Return | Volatility of Annual Return | Value |\n|-------|---------------|-----------------------------|-------|\n| A     | 10%           | 25%                         | 100   |\n| B     | 20%           | 20%                         | 50    |"
        ],
        "topic": "Risk Management",
        "question_id": "test-30",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 250 trading days in a year, how would the daily VaR at 99% level change if the financial institution sells $50 worth of asset A and purchases $50 worth of asset B, given that the institution's trading portfolio includes two assets with a Correlation (A, B) = 0.2?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_a = 0.10\n    mean_b = 0.20\n    std_dev_a = 0.25\n    std_dev_b = 0.20\n    value_a_initial = 100\n    value_b_initial = 50\n    value_a_reduced = 50  # amount sold of asset A\n    value_b_increased = 50  # amount bought of asset B\n    value_a_final = value_a_initial - value_a_reduced\n    value_b_final = value_b_initial + value_b_increased\n    correlation_ab = 0.2\n    trading_days = 250\n    confidence_level = 0.99\n\n    # Calculate the portfolio standard deviation before the transaction\n    portfolio_std_dev_before = ((value_a_initial ** 2 * std_dev_a ** 2 +\n                                value_b_initial ** 2 * std_dev_b ** 2 +\n                                2 * value_a_initial * value_b_initial * std_dev_a * std_dev_b * correlation_ab) ** 0.5)\n\n    portfolio_std_dev_after = ((value_a_final ** 2 * std_dev_a ** 2 +\n                               value_b_final ** 2 * std_dev_b ** 2 +\n                               2 * value_a_final * value_b_final * std_dev_a * std_dev_b * correlation_ab) ** 0.5)\n\n    # Calculate the VaR for 99% confidence level before and after transaction\n    from scipy.stats import norm\n\n    var_before = norm.ppf(1 - confidence_level) * portfolio_std_dev_before * (1 / trading_days ** 0.5)\n    var_after = norm.ppf(1 - confidence_level) * portfolio_std_dev_after * (1 / trading_days ** 0.5)\n\n    # Calculate the change in VaR\n    change"
        ]
    },
    {
        "tables": [
            "|Maturity(years)|STRIPS Price|Spot Rate|Forward Rate|\n|---|---|---|---|\n|0.5|98.7654|2.50%|2.50%|\n|1.0|97.0662|3.00%|3.50%|\n|1.5|95.2652|3.26%|3.78%|\n|2.0|93.2775|?.??%|?.??%|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-31",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the chart, what is the worth of a 1.5-year, 6% semiannual coupon, $100 face value bond?",
        "output": [
            " To determine the worth of a 1.5-year, 6% semiannual coupon, $100 face value bond, we need to calculate the present value of the bond's future cash flows using the given spot rates. The bond makes coupon payments every six months, so it will make three coupon payments over 1.5 years.\n\nHere's the Python program to calculate the bond's worth:\n\n```python\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.06  # Annual coupon rate\n    coupon_payment = (coupon_rate / 2) * face_value  # Semiannual coupon payment\n\n    # Spot rates\n    spot_rates = [0.0250, 0.0300, 0.0326]  # Spot rates for 0.5, 1.0, and 1.5 years\n\n    # Present value calculations\n    present_value = 0\n\n    # Present value of each coupon payment\n    for t in range(1, 4):\n        present_value += coupon_payment / (1 + spot_rates[(t - 1) // 2]) ** (t / 2)\n\n    # Present value of the face value at maturity\n    present_value += face_value / (1 + spot_rates[2]) ** (1.5)\n\n    return present_value\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program calculates the present value of the bond's cash flows using the formula:\n\\[ \\text{Present Value} = \\sum \\left( \\frac{\\text{Coupon Payment}}{(1 + \\text{Spot Rate})^t} \\right) + \\frac{\\text{Face Value}}{(1 + \\text{Spot Rate}_{\\text{1.5 years}})^{1.5}} \\]\n\nWhere:\n- Coupon Payment is calculated as the semiannual coupon payment.\n- Spot Rates are given for 0.5, 1.0, and 1.5 years."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-32",
        "python_solution": "",
        "ground_truth": null,
        "question": "The hedge fund known as Sovereign Wealth starts out with an initial capital of $300 million. They levy a 1% management fee anchored on year-end asset value and a 20% incentive fee that applies when returns surpass an 8% hurdle rate. Considering that Sovereign Wealth's first-year appreciation rate stands at 10% and its management fees are predicated on valuation at period's end, what will be the net return for the investor, provided the performance fee is computed after subtracting the management fee?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 300000000\n    appreciation_rate = 0.10\n    management_fee_rate = 0.01\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.08\n\n    # Calculate the gross return\n    gross_return = initial_capital * (1 + appreciation_rate)\n\n    # Calculate the management fee\n    management_fee = gross_return * management_fee_rate\n\n    # Calculate the net return after management fee\n    net_return_after_management_fee = gross_return - management_fee\n\n    # Determine if the incentive fee applies\n    if (gross_return / initial_capital - 1) > hurdle_rate:\n        return_above_hurdle = net_return_after_management_fee - initial_capital * (1 + hurdle_rate)\n        incentive_fee = return_above_hurdle * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Calculate the net return after incentive fee\n    net_return = net_return_after_management_fee - incentive_fee\n\n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [
            "| Asset class | Portfolio Weight(%) | Benchmark Weight(%) | Portfolio Return(%) | Benchmark Return(%) |\n| ----------- | ------------------ | ------------------- | ------------------- | ------------------ |\n| Domestic equities | 55 | 40 | 10 | 8 |\n| International equities | 20 | 30 | 10 | 9 |\n| Bonds | 25 | 30 | 5 | 6 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-33",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the asset class returns for the 2016 financial year, what is the value added or active return for the supervised investment portfolio?",
        "output": [
            " Certainly! The active return (value added) can be calculated as the difference between the portfolio return and the benchmark return for each asset class, weighted by the portfolio weights. Here\u2019s the Python program to calculate the active return for the supervised investment portfolio:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_weights = {\n        'domestic_equities': 0.55,\n        'international_equities': 0.20,\n        'bonds': 0.25\n    }\n\n    portfolio_returns = {\n        'domestic_equities': 0.10,\n        'international_equities': 0.10,\n        'bonds': 0.05\n    }\n\n    benchmark_returns = {\n        'domestic_equities': 0.08,\n        'international_equities': 0.09,\n        'bonds': 0.06\n    }\n\n    # Do math calculation to get the answer\n    active_returns = 0\n    for asset_class in portfolio_weights:\n        active_returns += (portfolio_returns[asset_class] - benchmark_returns[asset_class]) * portfolio_weights[asset_class]\n\n    # return answer\n    return active_returns\n\n# Print the solution\nprint(solution())\n```\n\nHere\u2019s a breakdown of the logic:\n1. Define the portfolio weights, portfolio returns, and benchmark returns for each asset class.\n2. Calculate the active return for each asset class as the difference between the portfolio return and benchmark return, weighted by the portfolio weight.\n3. Sum up the active returns for each asset class to get the total active return.\n4. Return the total active return.\n\nThis program will compute and print the active return for the supervised investment portfolio based on the provided data."
        ]
    },
    {
        "tables": [
            "| Exhibit 4.Arch way's 2015 Forecasted Price and Volume Changes ||\n| --- | --- |\n| Average price increase per unit | 5.00% |\n| Volume growth | -3.00% |"
        ],
        "topic": "Accounting",
        "question_id": "test-34",
        "python_solution": "",
        "ground_truth": null,
        "question": "French indicates that for the recently concluded year (2014), the cost of goods sold by Bridgeport was 30% of sales. When projecting Bridgeport's income statement for 2015, French assumes that all firms in the industry will encounter an inflation rate of 8% on the cost of goods sold. Exhibit 4 presents French\u2019s predictions about Bridgeport\u2019s price and volume variations. According to Exhibit 4, what is Bridgeport\u2019s anticipated gross profit margin for 2015?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    cost_of_goods_sold_2014 = 0.30  # 30% of sales\n    inflation_rate = 0.08            # Inflation rate of 8%\n    average_price_increase = 0.05    # Average price increase per unit of 5.00%\n    volume_growth = -0.03            # Volume growth of -3.00%\n\n    # Calculate the new cost of goods sold for 2015\n    cost_of_goods_sold_2015 = cost_of_goods_sold_2014 * (1 + inflation_rate)\n\n    # Calculate the new revenue growth\n    revenue_growth = 1 + average_price_increase + volume_growth\n    adjusted_revenue_growth = (1 + average_price_increase) * (1 + volume_growth)\n\n    # Calculate the gross profit margin for 2015\n    gross_profit_margin_2015 = 1 - cost_of_goods_sold_2015 / adjusted_revenue_growth\n\n    # Return answer\n    return gross_profit_margin_2015\n\n# Run the solution\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-35",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a periodic inventory system, what was the cost of sales in 2008 (\u20ac thousands) for Nutmeg Enterprises, which launched in 2007 and employs the weighted average cost method? During its first year, the company bought 45,000 units of inventory for \u20ac10 each and sold 40,000 units for \u20ac20 each. The following year, it acquired an additional 50,000 units at \u20ac11 each and sold 45,000 units for \u20ac22 each.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    units_purchased_2007 = 45000\n    cost_per_unit_2007 = 10\n    units_sold_2007 = 40000\n    cost_per_unit_2008 = 11\n    units_purchased_2008 = 50000\n    units_sold_2008 = 45000\n\n    # Calculate the ending inventory for 2007\n    ending_inventory_units_2007 = units_purchased_2007 - units_sold_2007\n    ending_inventory_cost_2007 = ending_inventory_units_2007 * cost_per_unit_2007\n\n    # Calculate the total cost of inventory at the start of 2008\n    beginning_inventory_units_2008 = ending_inventory_units_2007  # Carry forward from 2007\n    beginning_inventory_cost_2008 = ending_inventory_cost_2007\n\n    # Calculate the total units available for sale in 2008\n    total_units_available_2008 = units_purchased_2008 + beginning_inventory_units_2008\n\n    # Calculate the total cost of units available for sale in 2008\n    total_cost_available_2008 = (units_purchased_2008 * cost_per_unit_2008) + beginning_inventory_cost_2008\n\n    # Calculate the weighted average cost per unit for 2008\n    weighted_average_cost_per_unit_2008 = total_cost_available_2008 / total_units_available_2008\n\n    # Calculate the cost of sales for 2008\n    cost_of_sales_2008 = units_sold_2008 * weighted_average_"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-36",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a security is valued at 88.692 per 100 of par value, and the security's complete price decreases to 88.642 if the yield-to-maturity rises by 10 basis points and increases to 88.762 if the yield-to-maturity is reduced by 10 basis points, what is the approximate convexity of the security?",
        "output": [
            " Sure, I can help with that. The approximate convexity of a security can be calculated using the given price changes and yield changes. Here\u2019s the formula for convexity:\n\n\\[ \\text{Approximate Convexity} = \\left( \\frac{P_+ + P_- - 2P_0}{2P_0 \\cdot (\\Delta y)^2} \\right) \\]\n\nWhere:\n- \\( P_0 \\) is the original price\n- \\( P_+ \\) is the new price after the yield increases\n- \\( P_- \\) is the new price after the yield decreases\n- \\( \\Delta y \\) is the change in yield in decimals\n\nGiven:\n- \\( P_0 = 88.692 \\)\n- \\( P_+ = 88.642 \\)\n- \\( P_- = 88.762 \\)\n- \\( \\Delta y = 0.001 \\) (since 10 basis points = 0.001 as a decimal)\n\nHere\u2019s the corresponding Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    P0 = 88.692\n    P_plus = 88.642\n    P_minus = 88.762\n    delta_y = 0.001\n\n    # Do math calculation to get the answer\n    convexity = (P_plus + P_minus - 2 * P0) / (2 * P0 * (delta_y ** 2))\n\n    # Return answer\n    return convexity\n\n# Call the function and print the result\nanswer = solution()\nprint(f\"The approximate convexity of the security is: {answer}\")\n```\n\nThis program will calculate and print the approximate convexity of the security based on the given data."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-37",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of 2013, company N released bonds with a face value of $2,000,000 that would mature in 5 years. With the market interest rate being 7%, the bonds will provide an 8% coupon payment every 31st December. What would be the interest expenditure according to the effective interest rate method on the 31st December 2013?",
        "output": [
            " To determine the interest expenditure according to the effective interest rate method, we need to:\n\n1. Determine the initial carrying amount using the present value of the bonds for the stated life with the effective interest rate (market interest rate).\n2. Calculate the interest expenditure for the first year by applying the effective interest rate to the initial carrying amount.\n\nHere is the Python program to achieve this:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    face_value = 2000000  # Face value of the bonds\n    effective_interest_rate = 0.07  # Market interest rate (7%)\n    stated_coupon_rate = 0.08  # Coupon rate (8%)\n    years_to_maturity = 5  # Bond matures in 5 years\n    annual_coupon_payment = face_value * stated_coupon_rate  # Annual coupon payment\n\n    # Calculate the initial carrying amount using the present value of the future cash flows\n    future_cash_flows = [annual_coupon_payment] * (years_to_maturity - 1) + [annual_coupon_payment + face_value]\n    initial_carrying_amount = sum([cf / (1 + effective_interest_rate) ** i for i, cf in enumerate(future_cash_flows, start=1)])\n\n    # Calculate the interest expenditure for the first year\n    interest_expenditure_year_one = initial_carrying_amount * effective_interest_rate\n\n    # Return the answer\n    return interest_expenditure_year_one\n\n# Run the solution\nprint(solution())\n```\n\nThis program calculates the initial carrying amount of the bonds using the present value formula considering the future cash flows and then computes the interest expenditure for the first year according to the effective interest rate method."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-38",
        "python_solution": "",
        "ground_truth": null,
        "question": "If at the start of the year, Alpine Peak Investments, a hedge fund, had a portfolio valued at $475,000,000, which increased to $541,500,000 after a year, what would be the efficient yield for an investor? This is keeping in mind that the hedge fund levies a 1.5% management fee on the final portfolio value and a 10% incentive fee that are calculated separately.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 475_000_000\n    final_value = 541_500_000\n    management_fee_rate = 0.015\n    incentive_fee_rate = 0.10\n\n    # Calculate the raw gain\n    raw_gain = final_value - initial_value\n\n    # Calculate the management fee\n    management_fee = final_value * management_fee_rate\n\n    # Calculate the incentive fee\n    incentive_fee = raw_gain * incentive_fee_rate\n\n    # Calculate the net gain\n    net_gain = raw_gain - management_fee - incentive_fee\n\n    # Calculate the efficient yield\n    efficient_yield = net_gain / initial_value\n\n    # Return the efficient yield as a percentage\n    return efficient_yield * 100\n\n# Example usage\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-39",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a daily compounded annual interest rate of 2.5%, how long would it take for Alex, who currently has an investment of $1 million, to save up to his required retirement goal of $2million for his everyday costs?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000  # Initial investment in dollars\n    target = 2000000     # Retirement goal in dollars\n    annual_rate = 0.025  # Annual interest rate\n    days_in_a_year = 365 # Number of days in a year\n\n    # Do math calculation to get the answer\n    daily_rate = annual_rate / days_in_a_year\n    days_needed = 0\n    current_value = principal\n\n    while current_value < target:\n        current_value *= (1 + daily_rate)\n        days_needed += 1\n\n    years_needed = days_needed / days_in_a_year\n\n    # Return the result in years\n    return years_needed\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program computes the number of years it would take for an investment of $1 million to grow to $2 million at a daily compounded annual interest rate of 2.5%. The result is returned as the number of years rounded to a reasonable number of decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-40",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financial expert predicts that a share may have a $2 dividend next year and could be sold for $38 by the end of next year. What would the share's value be if the required rate of return is 20%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend = 2  # Dividend expected next year\n    price_at_end_of_next_year = 38  # Expected selling price at the end of next year\n    required_rate_of_return = 0.20  # Required rate of return\n\n    # Do math calculation to get the answer\n    expected_total_return = dividend + price_at_end_of_next_year  # Total expected return\n    present_value = expected_total_return / (1 + required_rate_of_return)  # Discounted present value\n\n    # return answer\n    return present_value\n\n# Call the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-41",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business is pondering on the idea of transitioning from a completely equity-based capital structure to a capital structure comprising of equal parts of equity and debt, keeping assets constant. This alteration would decrease the net income by 30%. If the present return on equity (ROE) is 10%, what would the ROE be with the suggested capital structure?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_roe = 0.10  # Present ROE\n    new_net_income_reduction = 0.30  # Decrease in net income\n\n    # ROE = Net Income / Equity\n    # Let's assume the net income originally was X, and equity was Y.\n    # We know that:\n    # original_roe = X / Y\n    # X = Y * original_roe\n\n    # With the capital structure change, new net income becomes 70% of X (30% decrease).\n    # New equity becomes 50% of total capital (equity + debt) while keeping assets constant.\n    # The value of assets is unchanged, so Net Income and Equity in the equation below represent new values.\n\n    equity_portion = 0.5  # Capital structure comprising equal parts of equity and debt.\n\n    # Current Net Income is 70% of the original net income.\n    current_net_income = 0.70 * (original_roe * 1)  # simplified as X was Y * original_roe.\n\n    # New equity is now 50% of the total capital assuming total capital = 1 for simplicity.\n    new_equity = equity_portion * 1\n\n    # Calculate the new ROE\n    new_roe = current_net_income / new_equity\n\n    # Return the answer\n    return new_roe\n\n# Call the solution function\nanswer = solution()\nprint(answer)\n```"
        ]
    },
    {
        "tables": [
            "|                     | Value  |\n|---------------------|--------|\n| Initial Value       | 87.1876|\n| 2-year shift for 1bp| 87.3212|\n| 5-year shift for 1bp| 87.2545|\n| 10-year shift for 1bp|87.1454|\n| 30-year shift for 1bp|87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-42",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given table, what is the key rate duration for a shift of 10 years for a zero-coupon bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    ten_year_shift = 87.1454\n\n    # Do math calculation to get the answer\n    key_rate_duration = (initial_value - ten_year_shift) / 0.01\n\n    # return answer\n    return key_rate_duration\n```\n\nIn the above Python program, the function `solution` calculates the key rate duration for a shift of 10 years for a zero-coupon bond based on the provided initial value and the 10-year shift value. The key rate duration is calculated using the formula \\((initial\\_value - ten\\_year\\_shift) / 0.01\\)."
        ]
    },
    {
        "tables": [
            "| X   | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| P(X)| 0.14| 0.09| 0.19| 0.25| 0.17| 0.06| 0.03| 0.07|\n\nNote: A discrete random variable X follows the probability distribution as given in the table above."
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-43",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data, what is the value of P(3\u2264X\u22646)?",
        "output": [
            " ```python\ndef solution():\n    # Define probability values for P(X)\n    P_X = [0.14, 0.09, 0.19, 0.25, 0.17, 0.06, 0.03, 0.07]\n\n    # Calculate the probability for P(3 <= X <= 6)\n    P_3_to_6 = P_X[3] + P_X[4] + P_X[5] + P_X[6]\n\n    # Return the result\n    return P_3_to_6\n\n# Run the solution function to get the answer\nanswer = solution()\nanswer\n```\n\nThis program defines the probability distribution of the discrete random variable \\(X\\) and then calculates the probability for \\(P(3 \\leq X \\leq 6)\\) by summing the probabilities for \\(X = 3, 4, 5,\\) and \\(6\\). The result is then returned by the function."
        ]
    },
    {
        "tables": [
            "| company | Share price | Call premium | Strike price |\n|---------|-------------|--------------|--------------|\n| NZT     | 53.37       | 1.62         | 58           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-44",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data in Exhibit 1, if Michael is planning to implement a covered call strategy, what would be the breakeven share price for this strategy? Exhibit 1: Share Price and Option Premiums (share prices and option premiums in $)",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    share_price = 53.37\n    call_premium = 1.62\n    strike_price = 58\n\n    # Do math calculation to get the answer\n    breakeven_price = share_price - call_premium\n\n    # return answer\n    return breakeven_price\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost                                       | \u20ac2,300,000           |\n|-------------------------------------------------------|----------------------|\n| Acquisition date                                      | 1 January 2008       |\n| Expected residual value at time of acquisition        | \u20ac500,000             |\n| The customer list is expected to result in extra sales for three years after acquisition. The present value of these expected extra sales exceeds the cost of the list. | |"
        ],
        "topic": "Accounting",
        "question_id": "test-45",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an analyst in the finance team of a French company, PLECCO Inc., calculates the amortization of a client list, an intangible asset, for the fiscal year concluded 31 December 2009 using the straight-line method, what would be the sum of accumulated amortization associated with the client list as of 31 December 2009, based on the data she has collected about the asset?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 2300000\n    residual_value = 500000\n    useful_life = 3  # in years\n    years_elapsed = 2  # as of 31 December 2009, 2 years have passed (2008, 2009)\n\n    # Do math calculation to get the answer\n    amortizable_cost = acquisition_cost - residual_value\n    annual_amortization = amortizable_cost / useful_life\n    accumulated_amortization = annual_amortization * years_elapsed\n\n    # return answer\n    return accumulated_amortization\n```\n\nYou can run this program to get the accumulated amortization for the client list as of 31 December 2009."
        ]
    },
    {
        "tables": [
            "|                   | 2017($) | 2018($) |\n|-------------------|---------|---------|\n| net income        | 320,000 | 360,000 |\n| accounts receivable | 23,000  | 25,000  |\n| accounts payable  | 31,000  | 35,000  |\n| depreciation      | 7,000   | 7,000   |"
        ],
        "topic": "Accounting",
        "question_id": "test-46",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you compute the operational cash flow for the year 2018?",
        "output": [
            " Certainly! To compute the operational cash flow for the year 2018, we can use the following formula:\n\n\\[ \\text{Operational Cash Flow} = \\text{Net Income} + \\text{Depreciation} + \\Delta \\text{Accounts Payable} - \\Delta \\text{Accounts Receivable} \\]\n\nWhere:\n- \\( \\Delta \\text{Accounts Payable} = \\text{Accounts Payable}_{2018} - \\text{Accounts Payable}_{2017} \\)\n- \\( \\Delta \\text{Accounts Receivable} = \\text{Accounts Receivable}_{2018} - \\text{Accounts Receivable}_{2017} \\)\n\nHere's the Python code to calculate the operational cash flow for 2018:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 360000\n    depreciation_2018 = 7000\n    accounts_payable_2017 = 31000\n    accounts_payable_2018 = 35000\n    accounts_receivable_2017 = 23000\n    accounts_receivable_2018 = 25000\n\n    # Do math calculation to get the answer\n    delta_accounts_payable = accounts_payable_2018 - accounts_payable_2017\n    delta_accounts_receivable = accounts_receivable_2018 - accounts_receivable_2017\n    operational_cash_flow = net_income_2018 + depreciation_2018 + delta_accounts_payable - delta_accounts_receivable\n\n    # return answer\n    return operational_cash_flow\n\n# Print the result\nprint(solution())\n```\n\nThis program defines the necessary variables, performs the required calculations, and then returns the operational cash flow for the year 2018."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-47",
        "python_solution": "",
        "ground_truth": null,
        "question": "An agriculturist intends to sell 50,000 tons of soybeans in six months and opts to short futures contracts to protect against a decrease in price. The present price of soybeans is $508/ton, the contract size is 100 tons, with a soybean storage cost of 1.5% annually. The exponentially compounded rate is 5%, what's the cost of the futures contract?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tons_of_soybeans = 50000\n    current_price = 508  # in USD/ton\n    contract_size = 100  # in tons\n    storage_cost_rate = 0.015  # annually\n    compounded_rate = 0.05  # exponentially compounded\n    period_months = 6\n\n    # Calculate storage cost for 6 months\n    storage_cost_annual = tons_of_soybeans * current_price * storage_cost_rate\n    storage_cost_monthly = storage_cost_annual / 12\n    storage_cost_6_months = storage_cost_monthly * period_months\n\n    # Calculate the cost of futures contract by assuming the future price reduction due to storage cost\n    future_price = current_price * (1 - compounded_rate) ** (period_months / 12)\n\n    # Total value of future contracts required to cover the soybeans\n    contracts_needed = tons_of_soybeans / contract_size\n    total_contracts_value = contracts_needed * contract_size * future_price\n\n    # Cost of the futures contract which covers the storage cost\n    cost_of_futures_contract = total_contracts_value - (tons_of_soybeans * current_price)\n\n    # Add the storage cost to the futures contract cost\n    cost_of_futures_contract += storage_cost_6_months\n\n    # return answer\n    return cost_of_futures_contract\n\n# Print the result\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the storage cost for 6 months, the future price considering the compounded rate, the number of futures contracts needed, the total contracts' value, and includes the storage cost in the final cost of the futures contract. The result will be printed out at the end."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-48",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the effective annual rate (EAR) if the declared yearly interest rate is 20% and the compounding occurs on a monthly basis?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yearly_interest_rate = 0.20  # 20%\n    compounding_periods = 12  # Monthly compounding\n\n    # Do math calculation to get the answer\n    ear = (1 + yearly_interest_rate / compounding_periods) ** compounding_periods - 1\n\n    # Return answer\n    return ear\n```\n\nThis Python program calculates the Effective Annual Rate (EAR) given a yearly interest rate and the number of compounding periods per year. The returned value is the EAR."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-49",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the correlation coefficient of the returns of XYZ company and the overall market, given that the covariance of the returns is 0.009, the standard deviation of the overall market returns is 0.08, and the standard deviation of XYZ's returns is 0.15?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.009\n    std_market = 0.08\n    std_xyz = 0.15\n\n    # Do math calculation to get the answer\n    correlation_coefficient = covariance / (std_market * std_xyz)\n\n    # return answer\n    return correlation_coefficient\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-50",
        "python_solution": "",
        "ground_truth": null,
        "question": "The trader, Michael, is preparing to establish a regression hedge. He plans to sell a Treasury bond worth $500,000 and buy TIPS as a hedge. Based on past data, the DV01on the T-bond is 0.085, the DV01on the TIPS is 0.063, and the regression beta coefficient (hedge adjustment factor) is 1.1. How much TIPS should Michael acquire?",
        "output": [
            " Certainly! Here\u2019s a Python program to calculate the amount of TIPS Michael should acquire:\n\n```python\ndef solution():\n    # Define variables name and value\n    t_bond_value = 500000\n    dv01_t_bond = 0.085\n    dv01_tips = 0.063\n    beta = 1.1\n\n    # Do math calculation to get the answer\n    dv01_adjusted_tips = dv01_tips * beta\n    tips_amount = (t_bond_value * dv01_t_bond) / dv01_adjusted_tips\n\n    # return answer\n    return tips_amount\n```\n\nExplanation:\n1. The program starts by defining the variables with the values given in the question.\n2. It then calculates the DV01-adjusted value for TIPS using the beta coefficient.\n3. It computes the amount of TIPS Michael should acquire by using the ratio of the DV01 of the T-bond to the adjusted DV01 of the TIPS, multiplied by the value of the T-bond.\n4. The result is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-51",
        "python_solution": "",
        "ground_truth": null,
        "question": "Over the previous 36 months, the standard deviation of monthly returns within a fund's portfolio was recorded at 4.9%. What is the test statistic value to verify an assertion that this fund's investment approach results in a standard deviation of monthly returns of less than 5.0%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sample_standard_deviation = 4.9  # Standard deviation of monthly returns (in percentage)\n    population_standard_deviation_hypothesis = 5.0  # Hypothesized standard deviation (in percentage)\n    sample_size = 36  # Period of 36 months\n\n    # Do math calculation to get the answer\n    import scipy.stats as stats\n\n    # Calculate the test statistic\n    test_statistic = (sample_size - 1) * (sample_standard_deviation ** 2) / (population_standard_deviation_hypothesis ** 2)\n\n    # return answer\n    return test_statistic\n\n# Execute the solution function to get the test statistic\nprint(solution())\n```\n\nThe above program calculates the test statistic to verify the assertion that the fund's standard deviation of monthly returns is less than 5.0%. This is based on comparing the sample standard deviation to the hypothesized population standard deviation using a chi-squared distribution test."
        ]
    },
    {
        "tables": [
            "|         | November 2010 |       | December 2010 |       |\n|---------|---------------|-------|---------------|-------|\n| Goods   | Quantity      | Price | Quantity      | Price |\n| Sugar   | 70kg          | \u00a30.90/kg  | 120kg         | \u00a31.00/kg  |\n| Cotton  | 60kg          | \u20ac0.60/kg  | 50kg          | \u20ac0.80/kg  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-52",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we set the base period for 2010's consumption to be November and the starting price index at 100, what would be the inflation rate after determining the December price index as a Laspeyres index?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    sugar_qty_nov = 70\n    sugar_price_nov = 0.90\n    sugar_qty_dec = 120\n    sugar_price_dec = 1.00\n\n    cotton_qty_nov = 60\n    cotton_price_nov_euro = 0.60\n    cotton_qty_dec = 50\n    cotton_price_dec_euro = 0.80\n\n    # Assuming 1 GBP = 1.15 EUR for conversion (you can adjust the exchange rate as needed)\n    exchange_rate = 1.15\n\n    cotton_price_nov = cotton_price_nov_euro * exchange_rate\n    cotton_price_dec = cotton_price_dec_euro * exchange_rate\n\n    # Calculate the basket cost in November\n    basket_cost_nov = (sugar_qty_nov * sugar_price_nov) + (cotton_qty_nov * cotton_price_nov)\n\n    # Calculate the basket cost in December using November quantities\n    basket_cost_dec = (sugar_qty_nov * sugar_price_dec) + (cotton_qty_nov * cotton_price_dec)\n\n    # Calculate the December price index as a Laspeyres index\n    laspeyres_index_dec = (basket_cost_dec / basket_cost_nov) * 100\n\n    # Calculate the inflation rate\n    inflation_rate = laspeyres_index_dec - 100\n\n    # Return the inflation rate\n    return inflation_rate\n\n# Call the solution function to get the result\nresult = solution()\nprint(result)\n```\n\nYou can execute this Python program to find out the inflation rate for the given scenario. The program computes the cost of the November basket at December prices and then calculates the Laspeyres index to determine the inflation rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-53",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is interested in forecasting the earnings of his manufacturing plant in October 20X9, thus he employs income data from January 20X6 to September 20X9 as samples to create a AR(1) model, achieving the following outcome: Xt=293.5742+0.9387Xt\u22121X_t=293.5742+0.9387X_{t-1}Xt\u200b=293.5742+0.9387Xt\u22121\u200b Can you determine the long-term average?",
        "output": [
            " To determine the long-term average for an AR(1) model, we need to use the formula for the mean of the process. For an AR(1) model given by:\n\n\\[ X_t = c + \\phi X_{t-1} \\]\n\nthe long-term mean (or equilibrium mean) \\(\\mu\\) is given by:\n\n\\[ \\mu = \\frac{c}{1 - \\phi} \\]\n\nIn the given problem, \\(c = 293.5742\\) and \\(\\phi = 0.9387\\).\n\nHere's the Python program to calculate the long-term average:\n\n```python\ndef solution():\n    # Define variables name and value\n    c = 293.5742\n    phi = 0.9387\n\n    # Do math calculation to get the answer\n    long_term_average = c / (1 - phi)\n\n    # return answer\n    return long_term_average\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nIn this program, the `solution` function defines the variables \\(c\\) and \\(\\phi\\) with the given values, calculates the long-term average using the formula, and then returns the result. The `print` statement at the end calls the `solution` function and prints the result."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| 1. | Purchased a customer list for $100,000, which is expected to provide equal annual benefits for the next 4 years. |\n| 2. | Recorded $200,000 of goodwill in the acquisition of a competitor. It is estimated that the acquisition would provide substantial benefits for the company for at least the next 10 years. |\n| 3. | Spent $300,000 on media placements announcing the company had donated products and services to the community. The CEO believes the firm's reputation was enhanced substantially and the company will likely benefit from it for the next 5 years. |"
        ],
        "topic": "Accounting",
        "question_id": "test-54",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2010, certain incidents took place at a corporation. Given those incidents, what should be the corporation's documented amortization expense in 2011?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    customer_list_cost = 100000\n    customer_list_years = 4\n    goodwill_cost = 200000\n    goodwill_years = 10\n    reputation_enhancement_cost = 300000\n    reputation_enhancement_years = 5\n\n    # Do math calculation to get the answer\n    customer_list_amortization = customer_list_cost / customer_list_years\n    goodwill_amortization = 0  # Goodwill is not amortized\n    reputation_enhancement_amortization = reputation_enhancement_cost / reputation_enhancement_years\n\n    total_amortization_2011 = customer_list_amortization + reputation_enhancement_amortization\n\n    # return answer\n    return total_amortization_2011\n\n# Run the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-55",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier is considering a property valued at $2.5 million. To purchase this property, he needs to pay up front 25% of the total cost and the remaining amount is to be financed at 10%, compounded monthly for a duration of 25 years. Determine the monthly mortgage payment for this scenario.",
        "output": [
            " ```python\nimport numpy_financial as npf\n\ndef solution():\n    # Define variables and values\n    property_value = 2500000\n    down_payment_percentage = 0.25\n    interest_rate_annual = 0.10\n    interest_rate_monthly = interest_rate_annual / 12\n    loan_duration_years = 25\n    loan_duration_months = loan_duration_years * 12\n\n    # Calculate the loan amount\n    down_payment = property_value * down_payment_percentage\n    loan_amount = property_value - down_payment\n\n    # Calculate the monthly mortgage payment\n    monthly_payment = npf.pmt(interest_rate_monthly, loan_duration_months, loan_amount)\n\n    # Return the monthly mortgage payment as a positive value\n    return -monthly_payment\n```\n\nHere is the explanation of the code:\n1. We define the necessary variables including the property value, down payment percentage, annual interest rate, loan duration in years, and convert these to monthly values where necessary.\n2. We calculate the down payment and the loan amount.\n3. We then use the `numpy_financial.pmt` function to calculate the monthly mortgage payment.\n4. We return the monthly mortgage payment as a positive value."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-56",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a reversed head and shoulders formation, if the collar is at \u20ac100, the shoulders are priced at \u20ac90, and the head is at \u20ac75. What is the intended price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    collar = 100\n    shoulders = 90\n    head = 75\n\n    # Do math calculation to get the answer\n    intended_price = collar + (collar - head)\n\n    # return answer\n    return intended_price\n```\n\nThe intended price is calculated by taking the collar price and adding the difference between the collar and the head, which represents the height of the formation. This approach is used to estimate the potential price target after the pattern is formed."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|--------------------|--------------------------------|\n| Equity   | 40                 | 30                             |\n| Bond     | 60                 | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-57",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the covariance between stocks and bonds is 0.058, what is the projected standard deviation of the portfolio?",
        "output": [
            " To calculate the projected standard deviation of the portfolio, we need to use the formula for the standard deviation of a two-asset portfolio. The formula is:\n\n\\[ \\sigma_p = \\sqrt{(w_1^2 \\cdot \\sigma_1^2 + w_2^2 \\cdot \\sigma_2^2 + 2 \\cdot w_1 \\cdot w_2 \\cdot \\text{Cov}_{1,2})} \\]\n\nWhere:\n- \\( w_1 \\) and \\( w_2 \\) are the weights of the individual assets.\n- \\( \\sigma_1 \\) and \\( \\sigma_2 \\) are the standard deviations of the individual assets.\n- \\( \\text{Cov}_{1,2} \\) is the covariance between the assets.\n\nGiven:\n- The weight of Equity (\\( w_1 \\)) is 40% (or 0.4).\n- The weight of Bond (\\( w_2 \\)) is 60% (or 0.6).\n- The standard deviation of Equity (\\( \\sigma_1 \\)) is 30% (or 0.3).\n- The standard deviation of Bond (\\( \\sigma_2 \\)) is 15% (or 0.15).\n- The covariance between Equity and Bond is 0.058.\n\nHere is the Python program to solve the problem:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_equity = 0.4\n    weight_bond = 0.6\n    std_dev_equity = 0.3\n    std_dev_bond = 0.15\n    covariance = 0.058\n\n    # Do math calculation to get the answer\n    variance_equity = std_dev_equity ** 2\n    variance_bond = std_dev_bond ** 2\n    portfolio_variance = (weight_equity ** 2 * variance_equity + weight_bond ** 2 * variance_bond + 2 * weight_equity * weight_bond * covariance)\n    portfolio_std_dev = math.sqrt(portfolio_"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-58",
        "python_solution": "",
        "ground_truth": null,
        "question": "During the same period last year, the stock price of Company H surged by 2.5 times its initial price. What was the continuously compounded return on the company's stock price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_price = 1  # Assuming the initial price is 1 unit\n    final_price = 2.5  # The price surged by 2.5 times the initial price\n\n    # Do math calculation to get the continuously compounded return\n    import math\n    continuously_compounded_return = math.log(final_price / initial_price)\n\n    # return answer\n    return continuously_compounded_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-59",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a portfolio contains 80 assets, what should be the estimated number of covariances?",
        "output": [
            " Certainly! Below is the Python program to answer the question of the number of covariances in a portfolio containing 80 assets. The number of covariances can be calculated using the formula for the number of unique pairs in a set, which is given by `n * (n - 1) / 2` where `n` is the number of assets:\n\n```python\ndef solution():\n    # Define variables name and value\n    num_assets = 80\n\n    # Do math calculation to get the answer\n    num_covariances = num_assets * (num_assets - 1) / 2\n\n    # return answer\n    return num_covariances\n```\n\nYou can run this program to get the estimated number of covariances for a portfolio with 80 assets."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-60",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the worth of a bond that has a face value of EUR 1,000, a three-year maturity period, and annually pays a 5% coupon? Please note the following spot rate curve: 1-year, 6%; 2-year, 7%; and 3-year, 8%.",
        "output": [
            " Certainly! To compute the worth of a bond, we need to calculate the present value of its future cash flows using the given spot rates. Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    maturity = 3\n    spot_rates = {\n        1: 0.06,\n        2: 0.07,\n        3: 0.08\n    }\n\n    # Initialize the value of the bond\n    bond_value = 0\n\n    # Calculate the present value of each cash flow\n    for year in range(1, maturity + 1):\n        coupon_payment = face_value * coupon_rate\n        if year == maturity:\n            coupon_payment += face_value  # Include the face value in the final payment\n        discount_rate = spot_rates[year]\n        present_value = coupon_payment / (1 + discount_rate) ** year\n        bond_value += present_value\n\n    # Return the bond value\n    return bond_value\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The worth of the bond is: {answer:.2f} EUR\")\n```\n\nThis program defines the necessary variables, computes the present value of each cash flow, and sums them up to get the worth of the bond. The `solution` function will return the calculated value of the bond. The `print` statement outside the function will display the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-61",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the critical value at the 0.05 level of significance is 9.4877, when will Samantha, a data analyst, reject the null hypothesis while using a chi-square distributed test statistic to check the independence of two categorical variables?",
        "output": [
            " def solution():\n    # Define variables name and value\n    critical_value = 9.4877\n\n    # In a chi-square independence test, we reject the null hypothesis if the test statistic is greater than the critical value.\n    # Define the chi-square test statistic (example value, typically this would be calculated from your data)\n    chi_square_statistic = 10.5  # You would replace this with the actual calculated chi-square statistic\n\n    # Do math calculation to get the answer\n    reject_null = chi_square_statistic > critical_value\n\n    # return answer\n    return reject_null\n\n# Print the result to verify\nprint(solution())\n```\n\nIn this program, `chi_square_statistic` is assumed to be a placeholder value. In practice, you would calculate the chi-square test statistic from your categorical data. The function `solution()` returns a boolean value indicating whether Samantha should reject the null hypothesis based on the comparison between the chi-square statistic and the critical value."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-62",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company has to choose two out of four executives to join the finance committee. What are the possible combinations of two that can be created?",
        "output": [
            " ```python\ndef solution():\n    # Define variables\n    executives = ['Executive A', 'Executive B', 'Executive C', 'Executive D']\n\n    # Calculate combinations of two executives\n    combinations = [(executives[i], executives[j])\n                    for i in range(len(executives))\n                    for j in range(i+1, len(executives))]\n\n    # return answer\n    return combinations\n\n# Print the combinations\nif __name__ == \"__main__\":\n    print(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-63",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier is interested in establishing a bull call spread with the next options: a call option with a strike price of $35 that costs $12.65, and a call option with a strike price of $40 priced at $8.85. What is the maximum profit that can be made from this bull call spread?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    strike_price_lower = 35\n    cost_lower = 12.65\n    strike_price_higher = 40\n    cost_higher = 8.85\n\n    # Calculate the net debit for the spread\n    net_debit = cost_lower - cost_higher\n\n    # Calculate the maximum profit\n    max_profit = (strike_price_higher - strike_price_lower) - net_debit\n\n    # Return the maximum profit\n    return max_profit\n\n# Example usage\nresult = solution()\nprint(f\"The maximum profit that can be made from this bull call spread is ${result:.2f}\")\n```\n\nThis Python program calculates the maximum profit from a bull call spread by first determining the net debit, which is the difference in cost between the two call options. The maximum profit is then calculated as the difference between the strike prices of the two options minus the net debit."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-64",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is trying to determine the worth of Sovereign Corporation's shares. The corporation has recently issued a dividend of $0.58 per share. The dividends are projected to increase by 20 percent in the coming year and 15 percent in the following year. From the third year onwards, the dividends are expected to rise at a rate of 5.6 percent per annum perpetually. If the necessary rate of return is 8.3 percent, what is the inherent value of the stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend_current = 0.58\n    growth_year1 = 0.20\n    growth_year2 = 0.15\n    constant_growth_rate = 0.056\n    required_return = 0.083\n\n    # Calculate dividends for the next two years\n    dividend_year1 = dividend_current * (1 + growth_year1)\n    dividend_year2 = dividend_year1 * (1 + growth_year2)\n\n    # Calculate the value of dividends for the first two years in present value terms\n    pv_dividend_year1 = dividend_year1 / (1 + required_return)\n    pv_dividend_year2 = dividend_year2 / (1 + required_return) ** 2\n\n    # Calculate the terminal value at the end of year 2 using the Gordon Growth Model\n    terminal_value = (dividend_year2 * (1 + constant_growth_rate)) / (required_return - constant_growth_rate)\n    pv_terminal_value = terminal_value / (1 + required_return) ** 2\n\n    # Sum up all present values to get the inherent value of the stock\n    inherent_value = pv_dividend_year1 + pv_dividend_year2 + pv_terminal_value\n\n    # Return the inherent value\n    return inherent_value\n\n# Example usage:\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Scenario | Probability of Scenario (%) | Amount Recovered ($) | Probability of Amount (%) |\n|----------|-----------------------------|----------------------|--------------------------|\n| 1        | 40                          | 50,000               | 60                       |\n| 1        | 40                          | 30,000               | 40                       |\n| 2        | 60                          | 80,000               | 90                       |\n| 2        | 60                          | 60,000               | 10                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-65",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the two scenarios proposed by a financial examiner, what is the anticipated recovery value from the principal of defaulted loans amounting to $100,000?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_principal = 100000\n\n    # Scenario 1\n    scenario1_probability = 0.40\n    amount_recovered_s1_1 = 50000\n    amount_recovered_s1_1_probability = 0.60\n    amount_recovered_s1_2 = 30000\n    amount_recovered_s1_2_probability = 0.40\n\n    # Scenario 2\n    scenario2_probability = 0.60\n    amount_recovered_s2_1 = 80000\n    amount_recovered_s2_1_probability = 0.90\n    amount_recovered_s2_2 = 60000\n    amount_recovered_s2_2_probability = 0.10\n\n    # Do math calculation to get the answer\n    expected_recovery_scenario1 = scenario1_probability * (amount_recovered_s1_1 * amount_recovered_s1_1_probability + amount_recovered_s1_2 * amount_recovered_s1_2_probability)\n    expected_recovery_scenario2 = scenario2_probability * (amount_recovered_s2_1 * amount_recovered_s2_1_probability + amount_recovered_s2_2 * amount_recovered_s2_2_probability)\n\n    anticipated_recovery_value = expected_recovery_scenario1 + expected_recovery_scenario2\n\n    # return answer\n    return anticipated_recovery_value\n\n# Call the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-66",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the chances of stock A underperforming the market, given an analyst's discovery that it has a 60% probability of outdoing the market?",
        "output": [
            " Sure, let's break down the question first. If stock A has a 60% probability of outdoing the market, then the probability of it underperforming the market is the complement of this probability. The complement of a probability event \\( P \\) is given by \\( 1 - P \\).\n\nSo, if the probability of outdoing the market is 60%, or 0.6, then the probability of underperforming the market is \\( 1 - 0.6 = 0.4 \\) or 40%.\n\nHere's the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    probability_outdoing = 0.6\n\n    # Do math calculation to get the answer\n    probability_underperforming = 1 - probability_outdoing\n\n    # return answer\n    return probability_underperforming\n```\n\nWhen you call `solution()`, it will return the probability of stock A underperforming the market."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-67",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bank that complies with the Basel I Accord issues a loan of $100 million to a company having a risk weight of 50%. What is the fundamental on-balance-sheet credit risk charge?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 100000000  # in dollars\n    risk_weight = 50 / 100   # as a percentage\n\n    # Do math calculation to get the answer\n    credit_risk_charge = loan_amount * risk_weight * 0.08\n\n    # return answer\n    return credit_risk_charge\n```\n\nExplanation:\n- The Basel I Accord requires banks to hold capital against credit risk, where the risk weight determines the percentage of the loan that must be covered.\n- The bank has to maintain 8% of the risk-weighted assets as a capital charge.\n- So, the fundamental on-balance-sheet credit risk charge is calculated as \\( \\text{loan amount} \\times \\text{risk weight} \\times 8\\% \\)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-68",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood that a portfolio with an expected mean return of 8 percent and a standard deviation of 14 percent will have a return between 8 and 11 percent?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_return = 8  # Expected mean return in percent\n    std_deviation = 14  # Standard deviation in percent\n    lower_bound = 8  # Lower bound of the range in percent\n    upper_bound = 11  # Upper bound of the range in percent\n\n    # Import necessary libraries\n    import scipy.stats as stats\n\n    # Define the normal distribution\n    norm_dist = stats.norm(mean_return, std_deviation)\n\n    # Calculate the probability that the return is between 8% and 11%\n    probability = norm_dist.cdf(upper_bound) - norm_dist.cdf(lower_bound)\n\n    # return answer\n    return probability\n```\n\nThis program uses the `scipy.stats` library to calculate the cumulative density function (CDF) for the normal distribution defined by the mean return and standard deviation. The difference in CDF values between the upper and lower bounds gives the probability that the portfolio return will fall within the specified range."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-69",
        "python_solution": "",
        "ground_truth": null,
        "question": "Calculate Jensen's alpha measure for portfolio named P, which has a beta of 0.7, an expected return of 12.8%, and an equity risk premium of 5.25%. The risk-free rate is 4.85%.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beta_P = 0.7\n    expected_return_P = 0.128  # 12.8% as a decimal\n    equity_risk_premium = 0.0525  # 5.25% as a decimal\n    risk_free_rate = 0.0485  # 4.85% as a decimal\n\n    # Do math calculation to get the answer\n    # Equity market return (assuming CAPM is valid)\n    expected_market_return = risk_free_rate + equity_risk_premium\n    # Expected return of the portfolio based on CAPM\n    expected_return_based_on_capm = risk_free_rate + beta_P * equity_risk_premium\n    # Jensen's alpha\n    jensens_alpha = expected_return_P - expected_return_based_on_capm\n\n    # return answer\n    return jensens_alpha\n\n# Example usage\nalpha = solution()\nprint(\"Jensen's Alpha:\", alpha)\n```\n\nThis program calculates Jensen's alpha for portfolio P using the Capital Asset Pricing Model (CAPM). The steps are as follows:\n1. Define the input variables for the portfolio's beta, expected return, equity risk premium, and risk-free rate.\n2. Calculate the expected market return by adding the risk-free rate to the equity risk premium.\n3. Calculate the expected return of the portfolio based on CAPM.\n4. Compute Jensen's alpha by subtracting the expected return based on CAPM from the actual expected return of the portfolio.\n5. Return the calculated Jensen's alpha."
        ]
    },
    {
        "tables": [
            "| Expected Security Standard Deviation (%) | Beta |\n|------------------------------------------|------|\n| Security 1 25                            | 1.50 |\n| Security 2 15                            | 1.40 |\n| Security 3 20                            | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-70",
        "python_solution": "",
        "ground_truth": null,
        "question": "In regards to the capital asset pricing model, if the anticipated return for Bond 2 is 11.4% and the risk-free rate is 3%, what would be the expected market return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beta_2 = 1.40\n    expected_return_bond_2 = 11.4 / 100  # Convert percentage to decimal\n    risk_free_rate = 3 / 100  # Convert percentage to decimal\n\n    # Capital Asset Pricing Model Formula:\n    # Expected Return = Risk-Free Rate + Beta * (Market Return - Risk-Free Rate)\n    # Rearranging to find Market Return:\n    # Market Return = (Expected Return - Risk-Free Rate) / Beta + Risk-Free Rate\n\n    # Do math calculation to get the answer\n    market_return = (expected_return_bond_2 - risk_free_rate) / beta_2 + risk_free_rate\n\n    # Convert market return back to percentage\n    market_return_percentage = market_return * 100\n\n    # return answer\n    return market_return_percentage\n```\n\nThe above code defines a function `solution()` that calculates the expected market return according to the capital asset pricing model based on the given information for Bond 2. The program defines the variables `beta_2`, `expected_return_bond_2`, and `risk_free_rate`. It then applies the CAPM formula to compute the market return and returns the result as a percentage."
        ]
    },
    {
        "tables": [
            "|               | Global Equity | Global Bonds |\n|---------------|---------------|--------------|\n| Global Equity | 0.0225        | 0.0022       |\n| Global Bonds  | 0.0022        | 0.0025       |",
            "|           | Sensitivities |      | Residual Risk |\n|-----------|---------------|------|---------------|\n|           | Global Equity | Global Bonds |   |\n| Market 1  | 1.20          | 0.00 | 12.00%        |\n| Market 2  | 0.90          | 0.00 | 7.00%         |\n| Market 3  | 0.00          | 0.95 | 1.80%         |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-71",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the factor covariance matrix for global equity and global bonds presented by Schultz in Exhibit 1, along with market factor sensitivities and residual risk displayed in Exhibit 2, what is the covariance between Market 1 and Market 2?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cov_global_equity = 0.0225\n    cov_global_bonds = 0.0022\n    sensitivity_m1_equity = 1.20\n    sensitivity_m2_equity = 0.90\n\n    # Do math calculation to get the answer\n    covariance_m1_m2 = sensitivity_m1_equity * sensitivity_m2_equity * cov_global_equity\n\n    # return answer\n    return covariance_m1_m2\n```\n\nThis program calculates the covariance between Market 1 and Market 2 based on the given factor sensitivities and the covariance of global equity. The sensitivities of Market 1 and Market 2 to global bonds are zero, so they do not contribute to the covariance calculation."
        ]
    },
    {
        "tables": [
            "| Company | Market Share (%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-72",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the three-firm Herfindahl\u2013Hirschmann Index for the sector, taking into account the market share information collected for a sector consisting of five firms?",
        "output": [
            " The Herfindahl\u2013Hirschmann Index (HHI) is a measure of market concentration and is calculated by summing the squares of the market shares of the firms in the market. For a three-firm HHI, we will sum the squares of the market shares of the three largest firms.\n\nGiven the table:\n| Company | Market Share (%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |\n\nWe need to calculate the HHI for the top three firms (Zeta, Yusef, Xenon).\n\nHere is the Python program to calculate the three-firm HHI:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_share_zeta = 35\n    market_share_yusef = 25\n    market_share_xenon = 20\n\n    # Convert market shares to decimal form\n    market_share_zeta_decimal = market_share_zeta / 100\n    market_share_yusef_decimal = market_share_yusef / 100\n    market_share_xenon_decimal = market_share_xenon / 100\n\n    # Do math calculation to get the answer\n    hhi = (market_share_zeta_decimal ** 2) + (market_share_yusef_decimal ** 2) + (market_share_xenon_decimal ** 2)\n\n    # Convert HHI to a percentage and return answer\n    hhi_percentage = hhi * 100  # Convert back to percentage\n    return hhi_percentage\n\nprint(solution())\n```\n\nThe above program correctly calculates the three-firm HHI. When you run the program, it will output the HHI for the top three firms in the sector, taking into account their market shares."
        ]
    },
    {
        "tables": [
            "|            | as of 31 December |    |\n|------------|------------------|----|\n| Assets     | 2016             | 2017 |\n| Cash and cash equivalents | 5 | 15 |\n| Short-term marketable securities | 5 | 15 |\n| Trade and other receivables | 15 | 5 |\n| Other non-financial assets | 5 | 18 |\n| Tax assets | 5 | 2 |\n| Total current assets | 35 | 55 |",
            "|                       |  as of  31 December  |     |    \n| ---------------       | :--------------:     | :-----:|    \n|   Assets              | 2016                 |  2017  |      \n| Total non-current assets | 65             |  55 |\n| Total assets         | 100                 | 110  |  \n| Equity and Liabilities |  |  |\n| Total current liabilities | 35 | 28 |\n| Total non-current liabilities | 45 | 45 |\n| Total liabilities | 80 | 73 |\n| Total equity | 20 | 37 |\n| Equity and liabilities | 100 | 110 |"
        ],
        "topic": "Accounting",
        "question_id": "test-73",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the financial leverage ratio for Business B, according to the balance sheet below, as of 31 December 2017?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets_2017 = 110\n    total_equity_2017 = 37\n    total_liabilities_2017 = 73\n\n    # Do math calculation to get the answer\n    financial_leverage_ratio = total_assets_2017 / total_equity_2017\n\n    # return answer\n    return financial_leverage_ratio\n```\n\nThis Python program calculates the financial leverage ratio, which is the total assets divided by the total equity. Based on the values provided for the year 2017, it computes and returns the value."
        ]
    },
    {
        "tables": [
            "| Par value | $100.00 |\n|---|---|\n| Annual coupon rate | 8% |\n| Coupon payment frequency | Semiannual |\n| Coupon payment dates | 15 May and 15 November |\n| Maturity date | 15 November 2017 |\n| Day count convention | Actual/Actual |\n| Annual  yield to maturity | 5.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-74",
        "python_solution": "",
        "ground_truth": null,
        "question": "The bonds of a corporation named Whakatane and Co. are scheduled for settlement on 15 July 2014 and have several distinct attributes. Given these details, can you identify the discrepancy between the full and flat prices?",
        "output": [
            " Certainly! The question involves calculating the discrepancy between the full price and the flat price of a bond. To do this, we need to calculate the accrued interest first and then subtract it from the full price to get the flat price.\n\nHere's the Python program to calculate the discrepancy:\n\n```python\nfrom datetime import datetime\n\ndef solution():\n    # Define variables name and value\n    face_value = 100.00  # Par value\n    annual_coupon_rate = 0.08  # 8% annual coupon rate\n    coupon_payment_frequency = 2  # Semiannual payments\n    settlement_date = datetime(2014, 7, 15)\n    next_coupon_date = datetime(2014, 11, 15)  # Next coupon payment date\n    prev_coupon_date = datetime(2014, 5, 15)  # Previous coupon payment date\n    maturity_date = datetime(2017, 11, 15)\n\n    days_in_coupon_period = (next_coupon_date - prev_coupon_date).days\n    days_from_prev_coupon = (settlement_date - prev_coupon_date).days\n\n    # Calculate accrued interest\n    accrued_interest = (face_value * annual_coupon_rate / coupon_payment_frequency) * (days_from_prev_coupon / days_in_coupon_period)\n\n    # Assuming full price is equal to the face value for simplicity\n    full_price = face_value\n\n    # Calculate flat price\n    flat_price = full_price - accrued_interest\n\n    # Calculate the discrepancy between full and flat prices\n    discrepancy = full_price - flat_price\n\n    # return answer\n    return discrepancy\n\n# Run the solution\nprint(solution())\n```\n\nExplanation:\n1. We calculate the number of days in the current coupon period.\n2. We determine the number of days from the previous coupon payment date to the settlement date.\n3"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-75",
        "python_solution": "",
        "ground_truth": null,
        "question": "A spreadsheet containing 108 monthly returns for shares in Saraswoti Inc is owned by Kaleb Perkins. He designs a software program that applies bootstrap resampling to generate 200 resamples from this Saraswoti data through sampling with replacement. Each resample comprises of 108 data points. The software programmed by Perkins computes the average of each of the 200 resamples, then determines that the mean of these 200 resample means equals 0.0261. The program subtracts 0.0261 from each of the 200 resample means, squares each of these 200 differences, and totals up the squared differences, resulting in 0.835. An estimate of the standard error of the sample mean is then calculated by the program. What is the estimated standard error of the sample mean?",
        "output": [
            " Sure! To estimate the standard error of the sample mean using the information provided, you can use the formula for the standard error of the mean, which is derived from the bootstrap resampling method. Specifically, the standard error of the sample mean can be estimated by taking the square root of the variance of the resample means divided by the number of original data points.\n\nGiven:\n- Mean of 200 resample means = 0.0261\n- Total of squared differences = 0.835\n- Number of data points in each resample = 108\n\nHere's how you can calculate the standard error:\n\n```python\ndef solution():\n    # Define variables name and value\n    mean_of_resample_means = 0.0261\n    total_squared_differences = 0.835\n    number_of_resamples = 200\n    number_of_data_points = 108\n\n    # Do math calculation to get the answer\n    variance_of_resample_means = total_squared_differences / (number_of_resamples - 1)\n    standard_error_of_sample_mean = (variance_of_resample_means / number_of_data_points) ** 0.5\n\n    # return answer\n    return standard_error_of_sample_mean\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nExplanation:\n1. Calculate the variance of the resample means by dividing the total squared differences by the number of resamples minus one (`number_of_resamples - 1`).\n2. Calculate the standard error of the sample mean by dividing the variance of the resample means by the number of data points in the original sample (`number_of_data_points`), and then taking the square root of that result.\n\nThe above program should give you the estimated standard error of the sample mean."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-76",
        "python_solution": "",
        "ground_truth": null,
        "question": "The financial institution formalized a $30 million credit facility agreement with Firm B, with an outstanding amount of $20 million. Firm B has minimal collateral, therefore, the financial institution estimated the probability of default to be 1% per annum. Because the collateral is industry-specific, the financial institution assigned a loss rate of 90%. What is the projected loss (EL) of the financial institution?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    credit_facility_amount = 30000000\n    outstanding_amount = 20000000\n    probability_of_default = 0.01\n    loss_rate = 0.90\n\n    # Do math calculation to get the answer\n    expected_loss = outstanding_amount * probability_of_default * loss_rate\n\n    # return answer\n    return expected_loss\n```"
        ]
    },
    {
        "tables": [
            "|                   | 2011 | 2012 | 2013 | 2014 | 2015 | 2016 |\n|-------------------|------|------|------|------|------|------|\n| Called Down       | 120  | 40   | 25   | 60   | 25   | 10   |\n| Realized Results  | 0    | 0    | 25   | 80   | 100  | 195  |\n| Unrealized Results| -15  | -35  | 35   | 25   | 35   | 60   |\n| Distributions     |      |      |      | 60   | 110  | 175  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-77",
        "python_solution": "",
        "ground_truth": null,
        "question": "Reviewing the latest annual report for Fund VI (displayed in Exhibit 1) to assess Yushan's previous performance, what is the DPI value that Madan determines for Fund VI, taking into account a fund worth \u00a3300 million from 2011, management costs of 2%, a 20% carried interest, a 7% hurdle rate, and a term of 2018 up to 31st December 2016?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    fund_worth = 300_000_000  # Fund worth in pounds\n    management_costs_rate = 0.02  # Management costs rate\n    carried_interest_rate = 0.20  # Carried interest rate\n    hurdle_rate = 0.07  # Hurdle rate\n    fund_term_years = 2016 - 2011 + 1  # Fund term from 2011 to the end of 2016\n\n    # Total contributions (Called Down)\n    called_down = [120, 40, 25, 60, 25, 10]\n    total_called_down = sum(called_down)  # Total called down funds\n\n    # Total realized and unrealized results\n    realized_results = [0, 0, 25, 80, 100, 195]\n    unrealized_results = [-15, -35, 35, 25, 35, 60]\n    total_realized_and_unrealized = sum(realized_results) + sum(unrealized_results)\n\n    # Total distributions\n    distributions = [0, 0, 0, 60, 110, 175]\n    total_distributions = sum(distributions)\n\n    # Calculate management costs\n    management_costs = fund_worth * management_costs_rate * fund_term_years\n\n    # Calculate total return\n    total_return = total_realized_and_unrealized - management_costs\n\n    # Calculate carried interest\n    if total_return > (fund_worth * hurdle_rate * fund_term_years):\n        carried_interest = total_return * carried_interest_rate\n    else:\n        carried_interest = 0\n\n    # Calculate net return after carried interest\n    net_return_after_carry = total_return - carried_interest\n\n    # Calculate DPI (Distributions to Paid-In Capital"
        ]
    },
    {
        "tables": [
            "| Revenue | $2,600,000 |\n| --- | --- |\n| Net profit margin | 35% |\n| Depreciation on PP&E | 180,000 |\n| Increase in accounts receivable | 90,000 |\n| Decrease in accounts payable | 70,000 |\n| Increase in inventory | 500,000 |\n| Gain on sale of equipment | 20,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-78",
        "python_solution": "",
        "ground_truth": null,
        "question": "Provided the following: The cash flow from operations is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 2600000 # $2,600,000\n    net_profit_margin = 0.35 # 35%\n    depreciation_ppe = 180000 # $180,000\n    increase_accounts_receivable = 90000 # $90,000\n    decrease_accounts_payable = 70000 # $70,000\n    increase_inventory = 500000 # $500,000\n    gain_on_sale_equipment = 20000 # $20,000\n\n    # Do math calculation to get the answer\n    net_income = revenue * net_profit_margin\n    cash_flow_from_operations = net_income + depreciation_ppe - increase_accounts_receivable + decrease_accounts_payable - increase_inventory + gain_on_sale_equipment\n\n    # return answer\n    return cash_flow_from_operations\n\nsolution()\n```\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 2600000\n    net_profit_margin = 0.35\n    depreciation_ppe = 180000\n    increase_accounts_receivable = 90000\n    decrease_accounts_payable = 70000\n    increase_inventory = 500000\n    gain_on_sale_equipment = 20000\n\n    # Do math calculation to get the answer\n    net_income = revenue * net_profit_margin\n    cash_flow_from_operations = net_income + depreciation_ppe - increase_accounts_receivable + decrease_accounts_payable - increase_inventory + gain_on_sale_equipment\n\n    # return answer\n    return cash_flow_from_operations\n\nsolution()\n``"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-79",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the annual discount rate is 4% and it's compounded yearly, what is the (PV5) present value of $50,000, received as a cash flow at the end of the 20th year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    discount_rate = 0.04  # Annual discount rate of 4%\n    future_value = 50000  # Future cash flow at the end of the 20th year\n    n_periods = 20        # Number of periods (years)\n\n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + discount_rate) ** n_periods)\n\n    # return answer\n    return present_value\n```\n\nThis program defines the variables for the discount rate, future value, and number of periods. It then calculates the present value using the formula for the present value of a future cash flow and returns the result."
        ]
    },
    {
        "tables": [
            "| Years | Present Value Factor |\n|-------|---------------------|\n| 0.25  | 0.997506            |\n| 0.5   | 0.992556            |\n| 0.75  | 0.985222            |\n| 1     | 0.975610            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-80",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the following information, the annualized fixed swap rate is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    present_value_factors = {\n        0.25: 0.997506,\n        0.5: 0.992556,\n        0.75: 0.985222,\n        1: 0.975610\n    }\n\n    # Assuming the swap has a notional value of $1, the semi-annual fixed payments\n    # can be calculated by discounting the cash flows using the present value factors\n    # and then dividing by the sum of present value factors.\n\n    # For simplicity, let's assume the swap is for one year with quarterly payments.\n    # We need to find the fixed payment (PMT) such that the sum of the discounted payments is equal to $1.\n\n    # Let PMT be the fixed payment amount per quarter\n    sum_of_present_values = sum(present_value_factors.values())\n\n    # To find the fixed payment (PMT), we need to solve for PMT in the equation:\n    # PMT * sum_of_present_values = 1\n    PMT = 1 / sum_of_present_values\n\n    # The annualized fixed swap rate is the fixed payment multiplied by the number of payments in a year\n    annualized_fixed_swap_rate = PMT * 4  # Assuming quarterly payments\n\n    # return answer\n    return annualized_fixed_swap_rate\n```\n\nThe program defines the present value factors for the given periods, calculates the sum of these factors, determines the fixed payment amount based on a notional value of $1, and then computes the annualized fixed swap rate by multiplying the fixed payment by the number of payments in a year (assuming quarterly payments). The result is the annualized fixed swap rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-81",
        "python_solution": "",
        "ground_truth": null,
        "question": "For the end of its fiscal year, Tangerine Inc. reported a net income of $200 million and an average of 50,000,000 common shares in circulation. There are 2,000,000 convertible preferred shares circulating that paid a yearly dividend of $5. Each preferred share can be converted into two common shares. What would be the diluted EPS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 200000000  # Net income in dollars\n    avg_common_shares = 50000000  # Average of common shares in circulation\n    convertible_preferred_shares = 2000000  # Number of convertible preferred shares\n    yearly_dividend = 5  # Dividend per preferred share in dollars\n\n    # Calculate the additional common shares from conversion\n    additional_common_shares = convertible_preferred_shares * 2\n\n    # Calculate total diluted shares\n    total_diluted_shares = avg_common_shares + additional_common_shares\n\n    # Calculate the total dividends paid to convertible preferred shares\n    total_dividends_paid = convertible_preferred_shares * yearly_dividend\n\n    # Calculate the adjusted net income after subtracting the dividends paid\n    adjusted_net_income = net_income - total_dividends_paid\n\n    # Calculate the diluted EPS\n    diluted_eps = adjusted_net_income / total_diluted_shares\n\n    # return answer\n    return diluted_eps\n\n# Calling the function to get the result\nprint(solution())\n```\n\nThis program calculates the diluted earnings per share (EPS) for Tangerine Inc. by considering the potential conversion of preferred shares into common shares and the dividends paid on the preferred shares. The function returns the diluted EPS value as the result."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| Equity | 40 | 30 |\n| Bond | 60 | 25 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-82",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the covariance of the two investments? Presuming the portfolio's standard deviation is 27%.",
        "output": [
            " Certainly! To calculate the covariance of two investments, we can use the information about the portfolio's standard deviation, the weights of the investments, and their individual standard deviations. The formula for the portfolio variance (square of standard deviation) is given by:\n\n\\[ \\sigma_p^2 = w_1^2\\sigma_1^2 + w_2^2\\sigma_2^2 + 2w_1w_2\\text{Cov}(R_1, R_2) \\]\n\nwhere:\n- \\( \\sigma_p \\) is the portfolio's standard deviation,\n- \\( w_1 \\) and \\( w_2 \\) are the weights of the first and second investments respectively,\n- \\( \\sigma_1 \\) and \\( \\sigma_2 \\) are the standard deviations of the first and second investments respectively,\n- \\(\\text{Cov}(R_1, R_2)\\) is the covariance between the two investments.\n\nRearranging the formula to solve for the covariance, we get:\n\n\\[ \\text{Cov}(R_1, R_2) = \\frac{\\sigma_p^2 - (w_1^2\\sigma_1^2 + w_2^2\\sigma_2^2)}{2w_1w_2} \\]\n\nHere is the Python program that performs this calculation:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_equity = 0.40\n    weight_bond = 0.60\n    std_dev_equity = 0.30\n    std_dev_bond = 0.25\n    portfolio_std_dev = 0.27\n\n    # Convert portfolio standard deviation to variance\n    portfolio_variance = portfolio_std_dev ** 2\n\n    # Calculate the part of the variance from individual investments\n    weighted_var_equity = weight_equity ** 2 * std_dev_equity ** 2\n    weighted_var_bond = weight_bond ** 2 * std_dev_bond ** 2\n\n    # Calculate total variance from individual investments\n    total_individual"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-83",
        "python_solution": "",
        "ground_truth": null,
        "question": "For the financial year-end, Everest Aqua Enterprises (EAE) announced a net profit of $12 million and an average of 2,000,000 ordinary shares circulating. The firm disbursed $800,000 as preferred dividends and there were 100,000 options with an average exercise price of $20 still to be exercised. Over the course of the year, EAE's average market price was $25 a share. What is EAE\u2019s diluted EPS?",
        "output": [
            " Sure, here is the Python program to calculate EAE\u2019s diluted EPS:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_profit = 12000000\n    avg_ordinary_shares = 2000000\n    preferred_dividends = 800000\n    options = 100000\n    exercise_price = 20\n    avg_market_price = 25\n\n    # Calculate adjusted net income for diluted EPS\n    adjusted_net_income = net_profit - preferred_dividends\n\n    # Calculate the potential dilution from options\n    additional_shares_from_options = options * ((avg_market_price - exercise_price) / avg_market_price)\n\n    # Calculate the total number of shares for diluted EPS\n    total_diluted_shares = avg_ordinary_shares + additional_shares_from_options\n\n    # Calculate diluted EPS\n    diluted_eps = adjusted_net_income / total_diluted_shares\n\n    # return answer\n    return diluted_eps\n```\n\nThis program calculates the diluted EPS (Earnings Per Share) taking into account the potential dilution from the options. This calculation uses the provided net profit, preferred dividends, options details, and the average market price to determine the number of additional shares that would be issued if the options were exercised and then computes the diluted EPS based on the adjusted net income and the total number of diluted shares."
        ]
    },
    {
        "tables": [
            "| S&P Rating | G-Spread | S&P Rating | G-Spread |\n|------------|----------|------------|----------|\n| AAA        | 0.30     | A          | 1.00     |\n| AA+        | 0.45     | A-         | 1.10     |\n| AA         | 0.60     | BBB+       | 1.30     |\n| AA-        | 0.70     | BBB        | 1.45     |\n| A+         | 0.85     | BBB-       | 1.60     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-84",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jones mentions that the shift of a firm's ratings can affect the overall return of a bond asset. For instance, he chooses a 10-year maturity, 5% coupon bond presently trading at par and rated A+ by Moody's. He requests Smith to compute the anticipated total return over a one-year term assuming the bond is demoted by two notches and to figure out why the year-end duration for the bond is 6.9. Assuming no modification in market conditions and a horizontal yield curve and utilizing Table 2, what is the projected yield on Jones' demo bond over a one-year span?",
        "output": [
            " Certainly! Below is a Python program that calculates the projected yield on Jones' bond over a one-year span assuming its rating is demoted by two notches from A+:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_rating = 'A+'\n    g_spread_table = {\n        \"AAA\": 0.30,\n        \"AA+\": 0.45,\n        \"AA\": 0.60,\n        \"AA-\": 0.70,\n        \"A+\": 0.85,\n        \"A\": 1.00,\n        \"A-\": 1.10,\n        \"BBB+\": 1.30,\n        \"BBB\": 1.45,\n        \"BBB-\": 1.60\n    }\n\n    # Ratings list for easy navigation\n    ratings = [\"AAA\", \"AA+\", \"AA\", \"AA-\", \"A+\", \"A\", \"A-\", \"BBB+\", \"BBB\", \"BBB-\"]\n\n    # Find the current rating index and the new rating index (demoted by two notches)\n    current_index = ratings.index(current_rating)\n    new_index = current_index + 2\n\n    # Ensure the new index is within bounds\n    if new_index >= len(ratings):\n        new_index = len(ratings) - 1\n\n    # Get the new rating and its corresponding G-spread\n    new_rating = ratings[new_index]\n    new_g_spread = g_spread_table[new_rating]\n\n    # Define other required variables\n    original_yield = 0.05  # 5% coupon rate\n    original_coupon = 0.05\n    maturity = 10  # 10-year bond\n    duration = 6.9\n\n    # Calculate the new yield\n    new_yield = original_yield + new_g_spread / 100\n\n    # Return the projected yield over a one-year span\n    return new_yield\n\n# Call the solution function to get the result\nanswer"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2015 | 5         |\n| 2016 | -8        |\n| 2017 | 10        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-85",
        "python_solution": "",
        "ground_truth": null,
        "question": "What's the return on investment for a three-year holding period?",
        "output": [
            " Sure, I can help you generate the Python program to calculate the return on investment for a three-year holding period based on the given data.\n\n```python\ndef solution():\n    # Define variables name and value\n    return_2015 = 5\n    return_2016 = -8\n    return_2017 = 10\n\n    # Do math calculation to get the answer\n    total_return_percentage = (1 + return_2015 / 100) * (1 + return_2016 / 100) * (1 + return_2017 / 100) - 1\n    total_return_percentage *= 100\n\n    # return answer\n    return total_return_percentage\n\n# Example usage\nanswer = solution()\nprint(f\"The return on investment for a three-year holding period is: {answer:.2f}%\")\n```\n\nThis program calculates the cumulative return on investment over three years using the given annual returns. The return is adjusted to a percentage format and returned as the final answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-86",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier invested $500 million in a hedge fund with a \"2 and 20\" fee arrangement. The management fee is determined by the assets under management at the end of the year, and the incentive fee is based on an 8% hurdle rate. If the hedge fund appreciates by 20% at the end of the year, what is the net return if the incentive fee is calculated after the management fee?",
        "output": [
            " Sure, let's break down the calculations and logic required for this problem.\n\n1. **Initial Investment**: $500 million\n2. **Appreciation Rate**: 20%\n3. **Management Fee**: 2%\n4. **Incentive Fee**: 20% of the profit above an 8% hurdle rate\n5. **Hurdle Rate for Incentive Fee**: 8%\n\nFirst, calculate the end-of-year value of the investment before fees.\nThen, subtract the management fee.\nNext, calculate the incentive fee based on the remaining profit after the management fee and hurdle rate.\nFinally, determine the net return for the investor.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 500 * 1e6  # $500 million\n    appreciation_rate = 0.20\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.08\n\n    # Calculate end-of-year value before fees\n    end_of_year_value = initial_investment * (1 + appreciation_rate)\n\n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_rate\n\n    # Calculate value after management fee\n    value_after_management_fee = end_of_year_value - management_fee\n\n    # Calculate the profit for the incentive fee (above the hurdle rate)\n    hurdle_amount = initial_investment * (1 + hurdle_rate)\n    profit_for_incentive_fee = value_after_management_fee - hurdle_amount\n\n    # If profit exceeds hurdle, calculate incentive fee; otherwise, it's zero\n    if profit_for_incentive_fee > 0:\n        incentive_fee = profit_for_incentive_fee * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Calculate net value after incentive"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-87",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bright Blossom Ltd., a garden supply wholesale company, announced an annual cost of goods sold amounting to $80 million. The total properties increased by $55 million, incorporating a rise of $5 million in their stocks. The total obligations increased by $45 million, which also includes a $2 million rise in bills to be paid. What is the probable amount of cash that the company has paid to its vendors?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 80_000_000\n    increase_in_total_properties = 55_000_000\n    increase_in_stocks = 5_000_000\n    increase_in_total_obligations = 45_000_000\n    increase_in_bills_to_be_paid = 2_000_000\n\n    # Do math calculation to get the answer\n    increase_in_assets_related_to_purchases = increase_in_total_properties - increase_in_stocks\n    increase_in_liabilities_related_to_purchases = increase_in_total_obligations - increase_in_bills_to_be_paid\n    cash_paid_to_vendors = cost_of_goods_sold - increase_in_assets_related_to_purchases + increase_in_liabilities_related_to_purchases\n\n    # return answer\n    return cash_paid_to_vendors\n```\n\nThe function `solution` computes the probable amount of cash paid to vendors by Bright Blossom Ltd. based on the provided financial information. This is done by subtracting the increase in assets related to purchases (excluding stocks) and adding the increase in liabilities related to purchases (excluding bills to be paid) to the cost of goods sold."
        ]
    },
    {
        "tables": [
            "| Income Statement        | 2007  | 2008  |\n|------------------------ |-------|-------|\n| Revenue                 | $474  | $598  |\n| Depreciation            | 20    | 23    |\n| Other operating costs   | 368   | 460   |\n| Income before taxes     | 86    | 115   |\n| Taxes                   | 26    | 35    |\n| Net income              | 60    | 80    |\n| Dividends               | 18    | 24    |\n| Earnings per share      | $0.714| $0.952|\n| Dividends per share     | $0.214| $0.286|\n| Common shares outstanding|84.0  | 84.0  |",
            "| Required rate of ROE | 14% |\n|----------------------|-----|\n| Growth rate of industry | 13% |\n| Industry P/E | 26 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-88",
        "python_solution": "",
        "ground_truth": null,
        "question": "Claire Smith, CFA, has been tasked with examining Shyrdak. Smith anticipates that Shyrdak's earnings and dividends will experience a consistent growth rate of 13 percent. The financial statements for the most recent two years (2007 and 2008) along with other details for Shyrdak are supplied in Exhibits 1 and 2. These exhibits offer actual 2007 and 2008 Financial Statements as of May 31st (in Millions exceptPer-ShareData) and selected Financial Information respectively. Based on the data from Exhibits 1 and 2 and Smith's projections for Shyrdak, what are the justified forward P/Es for this company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share_2008 = 0.952  # Earnings per share for the year 2008\n    growth_rate = 0.13  # Growth rate of the industry, 13%\n    required_roe = 0.14  # Required rate of return on equity, 14%\n\n    # Do math calculation to get the answer\n    # Calculate future earnings per share using the growth rate\n    future_earnings_per_share = earnings_per_share_2008 * (1 + growth_rate)\n\n    # Calculate the justified forward P/E using the Dividend Growth Model\n    justified_forward_pe = future_earnings_per_share / (required_roe - growth_rate)\n\n    # return answer\n    return justified_forward_pe\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the justified forward P/E ratio for Shyrdak based on the provided 2008 earnings per share, industry growth rate, and required rate of return on equity. The calculation uses the Dividend Growth Model formula:\n\\[ \\text{Justified forward P/E} = \\frac{\\text{Future EPS}}{r - g} \\]\nwhere \\( r \\) is the required rate of ROE and \\( g \\) is the growth rate."
        ]
    },
    {
        "tables": [
            "| Variable          | Coefficient | Std. Error | t-Statistic |\n|-------------------|-------------|------------|-------------|\n| Intercept         | -2582.791   | 940.613    | -2.746      |\n| GDP               | 0.022       | 0.006      | 3.667       |\n| Fiscal Expenditure| 0.702       | 0.033      | 21.273      |\n| RPI               | 23.985      | 8.738      | 2.745       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-89",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Sarah desires to forecast her nation's tax revenue, she chooses GDP, Fiscal expenditure and RPI (Retail Price Index) as three independent variables. She finds that this year's GDP is 104790.6, Fiscal expenditure is 22053.15, and RPI is 98.7. What is the expected value of the tax revenue for this year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    intercept = -2582.791\n    gdp_coef = 0.022\n    fiscal_expenditure_coef = 0.702\n    rpi_coef = 23.985\n\n    gdp = 104790.6\n    fiscal_expenditure = 22053.15\n    rpi = 98.7\n\n    # Do math calculation to get the answer\n    expected_tax_revenue = (intercept\n                            + gdp_coef * gdp\n                            + fiscal_expenditure_coef * fiscal_expenditure\n                            + rpi_coef * rpi)\n\n    # return answer\n    return expected_tax_revenue\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-90",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the maximum leverage ratio for a position financed by a minimum margin requirement of 55 percent, as set by an internet-based trading company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    minimum_margin_requirement = 0.55\n\n    # Do math calculation to get the answer\n    maximum_leverage_ratio = 1 / minimum_margin_requirement\n\n    # Return answer\n    return maximum_leverage_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-91",
        "python_solution": "",
        "ground_truth": null,
        "question": "The stock collection has a market value of $6,000,000. The retirement fund is planning to use a futures contract priced at $250,000 to raise the beta from 0.9 to 1.2 for a span of one month. The futures contract has a beta of 0.95. After one month, the return of the stock market is 5%, the market value of the stock collection becomes $6,250,000, and the cost of the futures contract is $262,000. What is the effective beta of the stock element of the fund?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_market_value_stocks = 6000000\n    futures_contract_price = 250000\n    initial_beta_stocks = 0.9\n    target_beta = 1.2\n    beta_futures_contract = 0.95\n    market_return = 0.05\n    final_market_value_stocks = 6250000\n    final_futures_contract_cost = 262000\n\n    # Calculate the number of futures contracts used\n    number_of_contracts = (target_beta - initial_beta_stocks) * initial_market_value_stocks / (beta_futures_contract * futures_contract_price)\n\n    # Calculate the return of the fund\n    return_stocks = (final_market_value_stocks - initial_market_value_stocks) / initial_market_value_stocks\n    return_futures = (final_futures_contract_cost - futures_contract_price) / futures_contract_price\n    total_return = return_stocks + (number_of_contracts * return_futures)\n\n    # Calculate the effective beta of the stock element\n    effective_beta_stocks = total_return / market_return\n\n    # Return answer\n    return effective_beta_stocks\n\n# Execute solution\nprint(solution())\n```\n\nThis code defines the given values and uses them to calculate the effective beta of the stock element of the fund. The number of futures contracts is calculated based on the desired change in beta, and then the returns from the stocks and futures are used to determine the effective beta."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-92",
        "python_solution": "",
        "ground_truth": null,
        "question": "You are creating models to predict earnings per share for two building firms, X and Y. The likelihood of Firm X's EPS growing by the year's end stands at 0.45. The chance of Firm Y's EPS swelling by the end of the year is 0.25. The probability that both firms' EPS will hike is 0.10. According to the predictive models, what is the likelihood that the EPS of at least one of these building firms will surge?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    prob_X = 0.45  # Probability that Firm X's EPS will grow\n    prob_Y = 0.25  # Probability that Firm Y's EPS will grow\n    prob_both = 0.10  # Probability that both Firm X and Y's EPS will grow\n\n    # Calculate the probability that neither firm's EPS will grow\n    prob_neither = 1 - (prob_X + prob_Y - prob_both)\n\n    # Calculate the probability that at least one firm's EPS will grow\n    prob_at_least_one = 1 - prob_neither\n\n    # return answer\n    return prob_at_least_one\n\n# Call the function to get the answer\nsolution()\n```\n\nThis program calculates the probability that at least one of the firms (X or Y) will have an EPS increase by the end of the year, based on the provided probabilities."
        ]
    },
    {
        "tables": [
            "|                        | Company X      |\n|------------------------|----------------|\n|                        | As of 31 December |\n| Ending shareholders' equity | \u00a310,000,000   |\n| Tax rate               | 25%            |\n| Dividends              | \u00a30.00          |\n| Net income             | \u00a3750,000       |"
        ],
        "topic": "Accounting",
        "question_id": "test-93",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rates. They have the same transactions all year and report them in the same way, except for one. Both firms purchase a printer worth \u00a3300,000 with a lifespan of three years and a salvage value of \u00a30 at the start of the year. Firm A capitalizes the printer and depreciates it using a straight-line method, while Firm B expenses the printer. The following information is collected for Firm A at the end of the year. Given this information, what would be Firm B's return on equity using year-end equity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_equity = 10000000  # given in the problem for both firms\n    net_income_A = 750000  # given in the problem for Company X (assumed to be Firm A)\n    printer_cost = 300000\n    lifespan = 3\n    tax_rate = 0.25\n\n    # Calculate depreciation expense for Firm A\n    depreciation_A = printer_cost / lifespan\n\n    # Calculate net income for Firm B\n    net_income_B = net_income_A + depreciation_A\n\n    # Calculate tax effect on the additional income for Firm B\n    tax_effect_B = printer_cost * tax_rate\n\n    # Calculate net income after tax for Firm B\n    net_income_after_tax_B = net_income_B - tax_effect_B\n\n    # Calculate year-end equity for Firm B\n    year_end_equity_B = initial_equity + net_income_after_tax_B\n\n    # Calculate return on equity for Firm B\n    return_on_equity_B = net_income_after_tax_B / year_end_equity_B\n\n    # Return the answer\n    return return_on_equity_B\n\n# Run the solution function\nprint(solution())\n```\n\nIn this program:\n- The initial equity is the same for both firms (\u00a310,000,000).\n- The net income for Firm A is given as \u00a3750,000.\n- The cost of the printer is \u00a3300,000, with a lifespan of 3 years and a salvage value of \u00a30.\n- The depreciation expense for Firm A is calculated using the straight-line method.\n- The net income for Firm B is adjusted to reflect the expensing of the printer cost.\n- The tax effect on the additional income for Firm B is calculated.\n- The year-end equity for Firm B"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-94",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that active returns do not correlate, according to the basic law of active management, how many securities would a fund overseen by an investment strategist with a 0.75 information ratio, a 0.1819 information coefficient, and a transfer coefficient of 1.0 contain?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    information_ratio = 0.75\n    information_coefficient = 0.1819\n    transfer_coefficient = 1.0\n\n    # Do math calculation to get the answer\n    breadth = (information_ratio / information_coefficient) ** 2\n\n    # return answer\n    return breadth\n```\n\n# Explanation:\nThe basic law of active management is given by the formula:\n\\[ \\text{Information Ratio} = \\text{Information Coefficient} \\times \\sqrt{\\text{Breadth}} \\times \\text{Transfer Coefficient} \\]\n\nGiven that the Transfer Coefficient is 1.0, the formula simplifies to:\n\\[ \\text{Information Ratio} = \\text{Information Coefficient} \\times \\sqrt{\\text{Breadth}} \\]\n\nRearranging to solve for Breadth, we get:\n\\[ \\text{Breadth} = \\left( \\frac{\\text{Information Ratio}}{\\text{Information Coefficient}} \\right)^2 \\]\n\nSubstituting the given values:\n\\[ \\text{Breadth} = \\left( \\frac{0.75}{0.1819} \\right)^2 \\]\n\nThis is what the Python program calculates and returns."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-95",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is trying to forecast the sales volume of his store in December 20X8, therefore he utilizes the sales volume from January 20X7 to November 20X8 as examples to create a linear trend model and obtains the following result: \u0177t =264.75+2.58t. What is the anticipated sales volume of December 20X8?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    t = 23  # December 20X8 corresponds to the 23rd month since January 20X7 (month 1)\n\n    # Do math calculation to get the answer\n    anticipated_sales = 264.75 + 2.58 * t\n\n    # return answer\n    return anticipated_sales\n```"
        ]
    },
    {
        "tables": [
            "| Spot rate (RMB/USD) | 6.7659 |\n|---|---|\n| 180-day Libor(RMB) | 4.80% |\n| 180-day Libor(USD) | 3.55% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-96",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data, can you compute the forward premium for a half-year RMB/USD forward agreement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 6.7659\n    libor_rmb = 0.0480\n    libor_usd = 0.0355\n\n    # Do math calculation to get the answer\n    forward_premium = (spot_rate * (1 + libor_rmb)) / (1 + libor_usd) - spot_rate\n\n    # return answer\n    return forward_premium\n\n# Print the result\nprint(solution())\n```\n\nIn this program, the forward premium for a half-year RMB/USD forward agreement is calculated using the given spot rate, 180-day Libor rates for RMB and USD, and the formula for calculating the forward rate. The result is then returned and printed."
        ]
    },
    {
        "tables": [
            "| Asset | Position | Individual VAR | Marginal VAR | VAR Contribution |\n|-------|----------|----------------|--------------|------------------|\n| 1     | USD 100  | USD 23.3       | 0.176        | USD 17.6         |\n| 2     | USD 100  | USD 46.6       | 0.440        | USD 44.0         |\n| Total | USD 200  | USD 61.6       |              | USD 61.6         |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-97",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a risk analyst supposes the joint distribution of returns is multivariate normal and calculates the ensuing risk measures for a portfolio of two assets: what would be the decrease in portfolio VAR if we eliminate asset 2?",
        "output": [
            " Sure, I'll create a Python program that calculates the decrease in portfolio Value at Risk (VaR) if Asset 2 is eliminated from the portfolio. Given the table, we have the necessary variance-related values to perform the calculation.\n\nHere's the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_var = 61.6\n    var_asset_2 = 44.0\n\n    # Do math calculation to get the answer\n    var_decrease = var_asset_2\n\n    # return answer\n    return var_decrease\n```\n\nThis program calculates the decrease in portfolio VaR by simply subtracting the marginal VaR contribution of Asset 2 (which is $44.0) from the total portfolio VaR. When Asset 2 is eliminated, the portfolio VaR decreases by the marginal VaR contribution of Asset 2, which is $44.0.\n\nYou can run this program to get the answer:\n\n```python\nprint(solution())\n```\n\nThis will output the decrease in portfolio VaR if Asset 2 is eliminated."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-98",
        "python_solution": "",
        "ground_truth": null,
        "question": "The portfolio manager of AB pension, Jacques, has recently contemplated incorporating PZ Inc. (New York Stock Exchange: PZ) into the portfolio. Instead of utilizing the two-stage DDM, Jacques intends to use his forecast that the stock of PZ will be valued at 20 times its earnings per share (trailing P/E of 20) in 4 years. With a projected earnings retention ratio of 0.6 and a dividend of $ 0.3461 at that point, what will be the terminal value of the stock according to this method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    trailing_pe = 20\n    retention_ratio = 0.6\n    dividend = 0.3461\n\n    # Calculate the expected earnings per share in 4 years\n    growth_rate = retention_ratio / (1 - retention_ratio)\n    expected_eps = dividend / (1 - retention_ratio)\n\n    # Calculate the stock price in 4 years\n    terminal_stock_price = trailing_pe * expected_eps\n\n    # Return the terminal value, which is the stock price in 4 years\n    return terminal_stock_price\n\n# Call the solution function to get the answer\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-99",
        "python_solution": "",
        "ground_truth": null,
        "question": "Compute the correlation of the two properties: return variance of property X: 0.16, return variance of property Y: 0.09, covariance between the returns of X and Y: 0.009.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    variance_X = 0.16\n    variance_Y = 0.09\n    covariance_XY = 0.009\n\n    # Do math calculation to get the answer\n    standard_deviation_X = variance_X ** 0.5\n    standard_deviation_Y = variance_Y ** 0.5\n    correlation = covariance_XY / (standard_deviation_X * standard_deviation_Y)\n\n    # return answer\n    return correlation\n```\n\nThis program defines the variances of properties X and Y, as well as their covariance. It then calculates the standard deviations of X and Y and uses these to find the correlation between X and Y."
        ]
    },
    {
        "tables": [
            "|                                             | Fund A | Fund B |\n|---------------------------------------------|--------|--------|\n| Portfolio weights (%)                       | 70     | 30     |\n| Expected returns (%)                        | 10     | 16     |\n| Standard deviations (%)                     | 7      | 13     |\n| Correlation between the returns of Fund A and Fund B | 0.80 |      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-100",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the standard deviation of return for a portfolio made up of Investment X and Investment Y?",
        "output": [
            " To calculate the standard deviation of return for a portfolio made up of Investment X (Fund A) and Investment Y (Fund B), we need to use the formula for the standard deviation of a two-asset portfolio. The formula is as follows:\n\n\\[ \\sigma_P = \\sqrt{w_A^2 \\sigma_A^2 + w_B^2 \\sigma_B^2 + 2w_A w_B \\sigma_A \\sigma_B \\rho_{AB}} \\]\n\nWhere:\n- \\( w_A \\) and \\( w_B \\) are the portfolio weights for Fund A and Fund B respectively.\n- \\( \\sigma_A \\) and \\( \\sigma_B \\) are the standard deviations for Fund A and Fund B respectively.\n- \\( \\rho_{AB} \\) is the correlation between the returns of Fund A and Fund B.\n\nLet's implement this in Python:\n\n```python\ndef solution():\n    # Define variables name and value\n    w_A = 0.70  # Portfolio weight for Fund A\n    w_B = 0.30  # Portfolio weight for Fund B\n    sigma_A = 0.07  # Standard deviation of Fund A (in decimal)\n    sigma_B = 0.13  # Standard deviation of Fund B (in decimal)\n    rho_AB = 0.80  # Correlation between Fund A and Fund B\n\n    # Do math calculation to get the answer\n    portfolio_variance = (w_A**2 * sigma_A**2) + (w_B**2 * sigma_B**2) + (2 * w_A * w_B * sigma_A * sigma_B * rho_AB)\n    portfolio_std_deviation = portfolio_variance**0.5\n\n    # return answer\n    return portfolio_std_deviation\n\n# Print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print the standard deviation of the return for the portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-101",
        "python_solution": "",
        "ground_truth": null,
        "question": "George Smith and his group gather a lot of analytical and statistical information about the automobile market. Based on this information, they infer that the average cost of SUVs exceeds $46,435 in their nation. Following this, they randomly pick 64 SUVs with an average cost of $46,760. The standard deviation of this sample is assumed to be 1370. George Smith performs a hypothesis test to validate their inference. At what significance level should George Smith reject the null hypothesis?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sample_mean = 46760  # Average cost of 64 SUVs\n    population_mean = 46435  # Claimed average cost of SUVs\n    standard_deviation = 1370  # Standard deviation of the sample\n    n = 64  # Sample size\n\n    # Do math calculation to get the answer\n    from scipy.stats import t\n\n    # Calculate the t-statistic\n    t_statistic = (sample_mean - population_mean) / (standard_deviation / (n ** 0.5))\n\n    # Calculate degrees of freedom\n    df = n - 1\n\n    # Calculate the p-value\n    p_value = (1 - t.cdf(abs(t_statistic), df)) * 2\n\n    # return answer, p-value should be rounded to four decimal places\n    return round(p_value, 4)\n```\nThis solution utilizes a t-test to evaluate the hypothesis. The null hypothesis is that the average cost of SUVs is equal to $46,435. The alternative hypothesis is that the average cost of SUVs is greater than $46,435. Based on the p-value result, you can determine the lowest level of significance at which George Smith should reject the null hypothesis."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-102",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial performance evaluator is working on some performance indicators for portfolio XYZ. Portfolio XYZ has a projected return of 9%, a volatility of 21%, and a beta of 0.3. If the riskless rate is 3%, what is the Treynor ratio of portfolio XYZ?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    projected_return = 0.09  # 9% expressed as a decimal\n    riskless_rate = 0.03     # 3% expressed as a decimal\n    beta = 0.3\n\n    # Do math calculation to get the answer\n    treynor_ratio = (projected_return - riskless_rate) / beta\n\n    # return answer\n    return treynor_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-103",
        "python_solution": "",
        "ground_truth": null,
        "question": "The monthly return correlation of equities in a portfolio adheres to the law of mean reverting and the long-term monthly return correlation is approximately 30%. Upon carrying out regression, we determine the mean reverting rate to be around 0.8. If the current month's return correlation is 56%, what would be the projected next monthly return correlation of equities in the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_correlation = 0.56\n    long_term_correlation = 0.30\n    mean_reverting_rate = 0.8\n\n    # Do math calculation to get the answer\n    projected_next_correlation = (mean_reverting_rate * (long_term_correlation - current_correlation)) + current_correlation\n\n    # return answer\n    return projected_next_correlation\n```\n\nThis program calculates the projected next monthly return correlation by applying the mean-reverting rate to the difference between the long-term return correlation and the current return correlation, and then adding that to the current return correlation."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-104",
        "python_solution": "",
        "ground_truth": null,
        "question": "A Chinese business organization primarily exports products to US and offers 90 days credit term to US firms. The transactions are settled in USD. The organization from China is concerned that the USD will lose its value and wants to hedge the potential risk by engaging in a short forward contract. The local risk-free rate is 4% and the foreign risk-free rate is 2%. The current spot rate is 6.7523\uffe5per $. What is the cost of the forward contract?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    local_risk_free_rate = 0.04  # local risk-free rate 4%\n    foreign_risk_free_rate = 0.02  # foreign risk-free rate 2%\n    current_spot_rate = 6.7523  # current spot rate in \uffe5/$\n    maturity_days = 90  # maturity period in days\n\n    # Do math calculation to get the answer\n    forward_rate = current_spot_rate * (1 + local_risk_free_rate * (maturity_days / 365)) / (1 + foreign_risk_free_rate * (maturity_days / 365))\n\n    # The cost of the forward contract is effectively the forward rate\n    cost_of_forward_contract = forward_rate\n\n    # return answer\n    return cost_of_forward_contract\n```\n\nThis program calculates the forward rate using the formula for the forward exchange rate based on interest rate parity. The cost of the forward contract is considered to be the forward rate."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-105",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the holding period return for a trader who purchased 200 shares at $20 each and later sold them all at $22.5 per share, after obtaining a dividend of $0.2 per share for a quarter?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_price = 20.0\n    final_price = 22.5\n    shares_purchased = 200\n    dividend_per_share = 0.2\n\n    # Calculate total dividend received\n    total_dividend = shares_purchased * dividend_per_share\n\n    # Calculate total purchase price\n    total_purchase_price = shares_purchased * initial_price\n\n    # Calculate total sale price\n    total_sale_price = shares_purchased * final_price\n\n    # Calculate total return (capital gain + dividend)\n    total_return = (total_sale_price - total_purchase_price) + total_dividend\n\n    # Calculate holding period return\n    holding_period_return = total_return / total_purchase_price\n\n    # Return the holding period return as a percentage\n    return holding_period_return * 100\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program first calculates the total dividend received, total purchase price, and total sale price. It then computes the total return by summing the capital gain (difference between sale and purchase price) and the dividend. Finally, it calculates the holding period return, which is the total return divided by the total purchase price, and returns the result as a percentage."
        ]
    },
    {
        "tables": [
            "|                       |       |                         |       |\n|-----------------------|-------|-------------------------|-------|\n| **Exhibit 1. Blanca Co. Balance Sheet at 31 December 2016 ($ millions)** |       |                         |       |\n| Cash                 | 20    | Current liabilities     | 25    |\n| Accounts receivable  | 50    | Noncurrent liabilities  | 30    |\n| Other assets         | 30    | Shareholders' equity    | 45    |\n| Total assets         | 100   | Total liabilities and equity | 100   |"
        ],
        "topic": "Accounting",
        "question_id": "test-106",
        "python_solution": "",
        "ground_truth": null,
        "question": "An analyst from an international securities firm's research department, named John Thronen, is working on a research report for Topmaker, Inc. This publicly-traded company adheres to IFRS. Now, a company named Castello Corp. has a plan to generate $40 million in capital through loans backed by its financial receivables. The plan entails formation of a special-purpose entity (SPE), injecting $10 million into the SPE, getting the SPE to secure a $40 million loan, and then use this capital to acquire $50 million worth of receivables from Castello Corp. Castello Corp., which fits the concept of control, aims to consolidate the SPE, with its balance sheet displayed in Exhibit 1. Considering Exhibit 1 and Castello Corp.'s method of lending against its financial receivables, what will the total assets on the consolidated balance sheet look like?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash = 20\n    accounts_receivable = 50\n    other_assets = 30\n    new_investment = 40\n    acquired_receivables = 50\n\n    # Do math calculation to get the answer\n    total_assets = cash + accounts_receivable + other_assets + new_investment + acquired_receivables - 10  # Subtract injected $10 million as it's used to secure the loan\n\n    # return answer\n    return total_assets\n\n# Call the solution to get the answer\nif __name__ == \"__main__\":\n    print(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-107",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer acquires an annual coupon bond with a 8% coupon rate and exactly 20 years left until maturity at a price equivalent to its par value. The buyer's investment horizon spans eight years. The approximate modified duration of the bond is 12.480 years. What is the duration gap at the moment of acquisition?",
        "output": [
            " Certainly! To determine the duration gap at the moment of acquisition, you'll follow these steps:\n\n1. Determine the Macaulay duration of the bond.\n2. Compare the Macaulay duration and the investor\u2019s investment horizon.\n\nYou need to note that the Macaulay duration of a bond is typically one of its key measures for assessing interest rate risk. The investor's investment horizon and the Macaulay duration are thus used to compute the duration gap.\n\nThe modified duration is provided in the problem as 12.480 years. To calculate the Macaulay duration (D_mac), you need to convert it considering the bond's coupon rate (c) via:\n\\[ \\text{D_mac} = \\text{Modified Duration} \\times (1 + \\text{coupon rate}) \\]\n\nGiven that the bond's yield (which might be approximated by the coupon rate) is 8% (or 0.08), you can compute the Macaulay duration and find the duration gap.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 12.480\n    coupon_rate = 0.08\n    investment_horizon = 8\n\n    # Do math calculation to get the Macaulay duration\n    macaulay_duration = modified_duration * (1 + coupon_rate)\n\n    # Calculate the duration gap\n    duration_gap = macaulay_duration - investment_horizon\n\n    # Return the answer\n    return duration_gap\n```\n\nYou can use the above code to determine the duration gap at the moment of acquisition."
        ]
    },
    {
        "tables": [
            "|               | Coefficients | Standard Error | t-Statistic |\n|---------------|--------------|----------------|-------------|\n| Intercept     | 3.7642       | 2.5743         | 1.4622      |\n| Season dummy  | 20.5732      | 10.3958        | 1.9790      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-108",
        "python_solution": "",
        "ground_truth": null,
        "question": "Brown is curious about how the change in seasons impacts the sales of the down jacket. He structures a regression model incorporating a dummy variable (1 for winter and 0 for summer) as an independent variable and the sales volume (in thousands) as the dependent variable and achieves the following outcomes: What is the variance in the sales volume between summer and winter in thousands?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    season_dummy_coefficient = 20.5732\n\n    # Do math calculation to get the answer\n    # Since the season dummy variable is used to differentiate between summer (0) and winter (1),\n    # the coefficient of the season dummy represents the change in sales volume between summer and winter.\n    sales_volume_variation = season_dummy_coefficient * (1 - 0)\n\n    # return answer\n    return sales_volume_variation\n\n# Example usage\nprint(solution())\n```\n\nThis program correctly calculates the variance in the sales volume between summer and winter in thousands, based on the given regression model coefficients. The coefficient of the season dummy variable represents the change in sales volume due to the change from summer to winter."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-109",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive is looking to establish a synthetic tracker fund tied to the S&P 500. The primary investment stands at $500,000,000. Given that an S&P 500 futures contract is valued at $1,000 with a multiplier of $250, and considering a risk-free rate of 3% and a futures expiration in three months, how many futures contracts does he need to purchase?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    primary_investment = 500000000\n    futures_contract_value = 1000\n    futures_multiplier = 250\n    risk_free_rate = 0.03  # 3%\n    futures_expiration_months = 3\n\n    # Do math calculation to get the answer\n    # Calculate the notional value needed\n    total_notional_value = primary_investment * (1 + risk_free_rate * (futures_expiration_months / 12))\n\n    # Calculate the notional value per futures contract\n    notional_value_per_contract = futures_contract_value * futures_multiplier\n\n    # Calculate the number of futures contracts needed\n    number_of_futures_contracts = total_notional_value / notional_value_per_contract\n\n    # return answer\n    return number_of_futures_contracts\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The executive needs to purchase {answer:.2f} futures contracts.\")\n```\n\n### Explanation\n1. **Primary Investment:** This is the amount of money being invested.\n2. **Futures Contract Value:** Current value of one S&P 500 futures contract.\n3. **Futures Multiplier:** The multiplier for the S&P 500 futures contract.\n4. **Risk-Free Rate:** The annual interest rate earned on investment held without risk.\n5. **Futures Expiration Months:** The number of months until the futures contract expires.\n\nThe calculation involves:\n1. **Total Notional Value:** The total notional value of the investment, considering the risk-free rate and the duration until expiration.\n2. **Notional Value per Contract:** The value of one futures contract.\n3. **Number of Futures Contracts:** The total notional value divided by the notional value per contract to determine the number of futures contracts required.\n\nThe final answer is then printed in a formatted string."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-110",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business owner purchased the property B using loans. They borrowed $220 and their equity is $110. Based on the provided data, what is their leverage ratio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    loan = 220\n    equity = 110\n\n    # Do math calculation to get the answer\n    total_assets = loan + equity\n    leverage_ratio = loan / equity\n\n    # return answer\n    return leverage_ratio\n```\n\nThis Python program calculates the leverage ratio by summing the loan and equity to get the total assets and then dividing the loan by the equity to get the leverage ratio. The answer is returned by the function."
        ]
    },
    {
        "tables": [
            "| Quanty(Q) | Total Fixed Cost(TFC) | Total Variable Cost(TVC) |\n|-----------|-----------------------|--------------------------|\n| 0         | 200                   | 0                        |\n| 1         | 200                   | 100                      |\n| 2         | 200                   | 150                      |\n| 3         | 200                   | 200                      |\n| 4         | 200                   | 240                      |\n| 5         | 200                   | 320                      |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-111",
        "python_solution": "",
        "ground_truth": null,
        "question": "The operations manager of a company collects the following data about the company's cost structure at various output levels: Please refer to the information in Exhibit 1. What is the average fixed cost (AFC) when the production quantity is 4 units?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    quantity = 4\n    total_fixed_cost = 200\n    total_variable_cost = 240\n    total_cost = total_fixed_cost + total_variable_cost\n\n    # Do math calculation to get the answer\n    average_fixed_cost = total_fixed_cost / quantity\n\n    # return answer\n    return average_fixed_cost\n```\n\nThis program calculates the average fixed cost (AFC) when the production quantity is 4 units. The total fixed cost (TFC) and total variable cost (TVC) are taken from the table, and the average fixed cost is calculated by dividing the total fixed cost by the quantity. The result is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-112",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, the S&P 500 had quarterly returns of 8%, -5%, 3%, and 1%. What is the quarterly arithmetic mean return for the S&P 500?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    q1_return = 0.08\n    q2_return = -0.05\n    q3_return = 0.03\n    q4_return = 0.01\n\n    # Do math calculation to get the answer\n    total_return = q1_return + q2_return + q3_return + q4_return\n    mean_return = total_return / 4\n\n    # return answer\n    return mean_return\n```\n\nThe arithmetic mean return for the S&P 500 in 2016, as calculated by the program, is as follows:\n```python\ndef solution():\n    # Define variables name and value\n    q1_return = 0.08\n    q2_return = -0.05\n    q3_return = 0.03\n    q4_return = 0.01\n\n    # Do math calculation to get the answer\n    total_return = q1_return + q2_return + q3_return + q4_return\n    mean_return = total_return / 4\n\n    # return answer\n    return mean_return\n\n# Execute the function to get the answer\nmean_return = solution()\nprint(\"The quarterly arithmetic mean return for the S&P 500 in 2016 is:\", mean_return)\n```\n\nExecuting this program will give you the quarterly arithmetic mean return for the S&P 500 in 2016."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-113",
        "python_solution": "",
        "ground_truth": null,
        "question": "A consultant has projected that the intrinsic worth of company B's share would be $25. If the latest dividend was $2 and is anticipated to rise at 3%, what's the necessitated return rate of a stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    intrinsic_value = 25  # The projected intrinsic value of the share\n    latest_dividend = 2  # The latest dividend amount\n    growth_rate = 0.03  # The anticipated growth rate of the dividend\n\n    # Do math calculation to get the answer\n    # The Gordon Growth Model formula: Price = D0 * (1 + g) / (r - g)\n    # Rearranging for r, we get: r = (D0 * (1 + g) / Price) + g\n    r = (latest_dividend * (1 + growth_rate) / intrinsic_value) + growth_rate\n\n    # return answer\n    return r * 100  # Return the rate in percentage\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The necessitated return rate of the stock is {answer:.2f}%\")\n```\n\nThis Python program defines the necessary variables based on the provided information, performs the required calculation using the Gordon Growth Model to find the necessitated return rate, and returns the result in percentage format."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-114",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an organization's pretax income stands at $1,500,000, with taxable income amounting to $1,000,000 and a tax rate of 35%, what should be the declared current tax expense for the corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    pretax_income = 1500000\n    taxable_income = 1000000\n    tax_rate = 0.35\n\n    # Do math calculation to get the answer\n    current_tax_expense = taxable_income * tax_rate\n\n    # return answer\n    return current_tax_expense\n```\nThis program defines the necessary variables (pretax income, taxable income, and tax rate), calculates the current tax expense, and returns the computed value as the answer."
        ]
    },
    {
        "tables": [
            "| Days to Maturity | LIBOR | Present Value Factors |\n|------------------|-------|-----------------------|\n| 180              | 3.0%  | 0.985222              |\n| 360              | 3.5%  | 0.966184              |\n| 540              | 4.0%  | 0.943396              |\n| 720              | 4.5%  | 0.917431              |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-115",
        "python_solution": "",
        "ground_truth": null,
        "question": "The two-year Libor-based interest rate swap with semi-annual resets (30/360 day count). In light of the following data, what is the swap's fixed rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    libor_values = [3.0/100, 3.5/100, 4.0/100, 4.5/100]\n    pv_factors = [0.985222, 0.966184, 0.943396, 0.917431]\n    notional_principal = 1  # Assuming a notional principal of $1 for simplicity.\n\n    # Do math calculation to get the answer\n    floating_leg_value = 0\n    for l, pv in zip(libor_values, pv_factors):\n        floating_leg_value += l * pv * notional_principal\n\n    fixed_leg_value = 1 - pv_factors[-1]  # Subtract the present value of the final payment (notional)\n\n    swap_fixed_rate = floating_leg_value / fixed_leg_value\n\n    # return answer\n    return swap_fixed_rate\n\n# Example usage\nif __name__ == \"__main__\":\n    print(\"The swap's fixed rate is:\", solution() * 100, \"%\")\n```\n\nExplanation:\n1. The `libor_values` list contains the LIBOR rates for each period.\n2. The `pv_factors` list contains the present value factors for each period.\n3. The floating leg value is calculated by summing the product of the LIBOR rate, the present value factor, and the notional principal for each period.\n4. The fixed leg value is calculated by subtracting the present value of the final payment (notional) from 1 (representing the current value of the cash flows).\n5. The swap fixed rate is the ratio of the floating leg value to the fixed leg value.\n6. The result is returned as the swap's fixed rate."
        ]
    },
    {
        "tables": [
            "| Sales price per unit | \u00a385               |\n|---------------------|------------------|\n| Variable cost per unit  | \u00a365               |\n| Fixed operating costs   | \u00a350 million   |\n| Fixed financial costs   | \u00a330 million   |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-116",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the company's breakeven volume of sales in million units, given the following data is available for a company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales_price_per_unit = 85\n    variable_cost_per_unit = 65\n    fixed_operating_costs = 50000000\n    fixed_financial_costs = 30000000\n\n    # Do math calculation to get the answer\n    total_fixed_costs = fixed_operating_costs + fixed_financial_costs\n    contribution_margin_per_unit = sales_price_per_unit - variable_cost_per_unit\n\n    breakeven_volume = total_fixed_costs / contribution_margin_per_unit\n\n    # Convert breakeven volume to million units\n    breakeven_volume_in_million_units = breakeven_volume / 1000000\n\n    # return answer\n    return breakeven_volume_in_million_units\n```\n\nThis Python program calculates the company's breakeven volume of sales in million units based on the provided financial data."
        ]
    },
    {
        "tables": [
            "| Risk free interest rate (1-year, incorporating 2.6% inflation expectation) | 3.8% |\n| --- | --- |\n| Term premium(10-year vs.1-year government bond) | 1% |\n| 10-year BBB credit premium (over 10-year government bond) | 75bp |\n| Estimated liquidity premium on 10-year corporate bonds | 55bp |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-117",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial backer is pondering including three new assets into his globally focused fixed income collection. He is focusing on these non-callable assets: 1-year government bond, 10-year government bond and a 10-year BBB rated corporate bond. His plan is to either equally invest in all three assets under scrutiny, or he'll avoid all of them for the time being. His condition to make the additional investment is that the projected spread/premium of the equally weighed investment must be at least 1.5 percent (150bp) greater than the 1-year government bond. Using just the given details, calculate the estimated return that an equal-weighted investment in these three assets could offer.",
        "output": [
            " Certainly! Below is the Python program that calculates the estimated return for an equal-weighted investment in the three assets under consideration, and determines if the projected spread/premium meets the condition of being at least 1.5 percent (150bp) greater than the 1-year government bond.\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate_1yr = 0.038  # 3.8%\n    term_premium = 0.01         # 1%\n    credit_premium_10yr_BBB = 0.0075  # 75bp or 0.75%\n    liquidity_premium_10yr = 0.0055    # 55bp or 0.55%\n\n    # Calculate the return of each asset\n    return_1yr_gov_bond = risk_free_rate_1yr\n    return_10yr_gov_bond = risk_free_rate_1yr + term_premium\n    return_10yr_BBB_bond = return_10yr_gov_bond + credit_premium_10yr_BBB + liquidity_premium_10yr\n\n    # Calculate the average return for the equal-weighted investment\n    average_return = (return_1yr_gov_bond + return_10yr_gov_bond + return_10yr_BBB_bond) / 3\n\n    # Calculate the projected spread/premium over the 1-year government bond\n    projected_spread = average_return - return_1yr_gov_bond\n\n    # Check if the projected spread/premium is at least 1.5% (150bp) greater than the 1-year government bond\n    required_spread = 0.015  # 1.5% or 150bp\n\n    # Return the answer\n    if projected_spread >= required_spread:\n        return average_return\n    else:\n        return \"Condition not met\"\n\n# Run the function to get the result\nresult ="
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-118",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Apple View Corp.'s dividend policy is characterized by a slow adaptation towards a specific dividend payout proportion, and the company has projected its earnings per share for this year to be $4.00, given that last year, their earnings per share were $3.00 and they paid out a dividend of $0.60 per share, what will be this year's dividend per share, given that they have a predetermined payout proportion of 25 percent and employ a five-year period to adjust their dividend?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    last_year_earnings_per_share = 3.00\n    last_year_dividend_per_share = 0.60\n    this_year_earnings_per_share = 4.00\n    target_payout_ratio = 0.25\n    adjustment_period = 5\n\n    # Do math calculation to get the answer\n    target_dividend = this_year_earnings_per_share * target_payout_ratio\n    adjustment_value = (target_dividend - last_year_dividend_per_share) / adjustment_period\n    this_year_dividend_per_share = last_year_dividend_per_share + adjustment_value\n\n    # return answer\n    return this_year_dividend_per_share\n\n# Call the function to get the solution\nprint(solution())\n```\n\nThis program calculates the dividend per share for this year based on the given earnings per share for this year and last year, as well as the predetermined payout proportion and adjustment period. The formula adjusts the dividend slowly towards the target payout ratio over the specified period of years."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-119",
        "python_solution": "",
        "ground_truth": null,
        "question": "A firm releases a leveraged floating-rate note which offers a coupon of 1.5 times Libor on notional principle of $1 million. This firm uses the capital to purchase a fixed-rate bond with 6% coupon rate. To counter the risk of fluctuating payments, the firm partakes in a swap with a fixed rate of 5% and a floating rate of 1.5 times Libor. Determine the net income from these transactions.",
        "output": [
            " Certainly! Here is the Python program to determine the net income from the described transactions:\n\n```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 1_000_000  # in dollars\n    leveraged_floating_rate_note = 1.5 * notional_principal  # 1.5 times Libor, but Libor specific value is not provided, using placeholder\n    fixed_rate_bond_coupon_rate = 0.06\n    swap_fixed_rate = 0.05\n    swap_floating_rate_multiple = 1.5\n\n    # Calculate receipts from the fixed-rate bond\n    fixed_rate_bond_income = notional_principal * fixed_rate_bond_coupon_rate\n\n    # Calculate payment for the floating-rate note\n    floating_rate_note_payment = leveraged_floating_rate_note\n\n    # Calculate swap payments (fixed rate received, floating rate paid)\n    swap_fixed_payment_received = notional_principal * swap_fixed_rate\n    swap_floating_payment_paid = notional_principal * swap_floating_rate_multiple\n\n    # Net income calculation\n    net_income = fixed_rate_bond_income + swap_fixed_payment_received - floating_rate_note_payment - swap_floating_payment_paid\n\n    # return answer\n    return net_income\n\n# Execute the solution function to get the answer\nprint(solution())\n```\n\nIn this calculation, we assume that the floating rate (Libor) is not provided explicitly. Hence, for the actual implementation, you would need the current Libor rate to complete the calculation accurately. If you have the Libor rate, you can replace the placeholder `leveraged_floating_rate_note = 1.5 * notional_principal` with the actual floating rate payment based on the Libor value.\n\nFor the sake of completeness, it's also essential to understand the floating rates are naturally influenced by the actual rate at any given period. This code structure should help you tailor the calculations more accurately when"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-120",
        "python_solution": "",
        "ground_truth": null,
        "question": "A production company named Silver borrowed USD 500 million from Star Bank. To protect its debt exposure to Silver, Star Bank engages in a credit default swap transaction with Metro Bank, where Metro Bank would wholly reimburse Star Bank if Silver defaults. If the defaults of Star Bank, Metro Bank, and Silver are independent and their default probabilities are considered to be 0.5%, 0.6%, and 4.0%, respectively. What is the likelihood that Star Bank will encounter a credit loss in its exposure to Silver?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    prob_default_silver = 0.04\n    prob_default_star_bank = 0.005\n    prob_default_metro_bank = 0.006\n\n    # Calculate the probability that neither Metro Bank nor Silver default\n    prob_neither_default = (1 - prob_default_metro_bank) * (1 - prob_default_silver)\n\n    # Probability that Star Bank encounters a credit loss is when Silver defaults and Metro Bank does not reimburse\n    prob_star_bank_loss = prob_default_silver * prob_default_metro_bank\n\n    # Add the probability that Silver defaults and Metro Bank does not reimburse to the probability that Silver does not default but Star Bank defaults\n    prob_star_bank_loss += (1 - prob_default_silver) * prob_default_star_bank\n\n    # return answer\n    return prob_star_bank_loss\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the likelihood that Star Bank will encounter a credit loss in its exposure to Silver. It considers the independent default probabilities of Silver, Star Bank, and Metro Bank and computes the relevant probabilities based on the conditions given."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 3% |\n| 2 years | 4% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-121",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming the sequence of spot rates provided, what would be the cost of a 2-year bond with a 5% coupon rate, with interest paid yearly, that a trader is thinking about buying?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05  # 5% coupon rate\n    face_value = 100  # Assuming face value of the bond is $100\n\n    # Spot rates\n    spot_rate_1_year = 0.03  # 3% spot rate for 1 year\n    spot_rate_2_years = 0.04  # 4% spot rate for 2 years\n\n    # Calculate the present value of the first coupon payment\n    pv_coupon_1 = coupon_rate * face_value / (1 + spot_rate_1_year)\n\n    # Calculate the present value of the second coupon payment and the face value\n    pv_coupon_2_and_face = (coupon_rate * face_value + face_value) / (1 + spot_rate_2_years)**2\n\n    # Calculate the total cost of the bond\n    cost_of_bond = pv_coupon_1 + pv_coupon_2_and_face\n\n    # return answer\n    return cost_of_bond\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-122",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond portfolio contains two bonds, bond X and bond Y. The values of bond X and bond Y are $60 millions and $40 millions respectively. The one-year probabilities of default and the recovery rate of bond X are 5% and 60% respectively, while for bond Y are 7% and 50%. Can you compute the one-year expected credit loss of this compilation? Assume that the default risk between X and Y is independent.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    value_bond_x = 60e6       # Value of bond X in millions\n    value_bond_y = 40e6       # Value of bond Y in millions\n    prob_default_x = 0.05     # Probability of default of bond X\n    prob_default_y = 0.07     # Probability of default of bond Y\n    recovery_rate_x = 0.60    # Recovery rate of bond X\n    recovery_rate_y = 0.50    # Recovery rate of bond Y\n\n    # Calculate expected loss for bond X\n    expected_loss_x = value_bond_x * prob_default_x * (1 - recovery_rate_x)\n\n    # Calculate expected loss for bond Y\n    expected_loss_y = value_bond_y * prob_default_y * (1 - recovery_rate_y)\n\n    # Total expected credit loss\n    total_expected_loss = expected_loss_x + expected_loss_y\n\n    # return answer\n    return total_expected_loss\n\n# Calling the function to get the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-123",
        "python_solution": "",
        "ground_truth": null,
        "question": "The demand schedule in an entirely competitive market is dictated by P = 93 \u2013 1.5Q (for Q \u2264 62) and the enduring cost organization of each corporation is: Total cost: 256 + 2Q +  4Q2 Average cost: 256/Q + 2 + 4Q Marginal cost: 2 + 8Q New corporations will infiltrate the market at any price above:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    p_upper_limit = 93\n    slope_q = -1.5\n    fixed_cost = 256\n\n    # In an entirely competitive market, new firms will infiltrate the market when price equals average cost\n    def price(Q):\n        return p_upper_limit + slope_q * Q\n\n    def avg_cost(Q):\n        return fixed_cost / Q + 2 + 4 * Q\n\n    # Do math calculation to get the answer\n    # Find the point where price equals average cost within the given domain (Q \u2264 62)\n    Q = 1\n    while Q <= 62:\n        if price(Q) >= avg_cost(Q):\n            break\n        Q += 1\n\n    answer = Q\n\n    # return answer\n    return answer\n```\n\nIn this program, we iterate through the values of Q within the given domain (1 to 62) and find the point where the price is equal to or higher than the average cost, indicating the point at which new firms will infiltrate the market. The variable `answer` will hold the quantity `Q` where this condition is met."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-124",
        "python_solution": "",
        "ground_truth": null,
        "question": "The demand function for groceries is denoted by the equation Qdpg = 80 - 3Ppg + 0.1I + 0.5Ppdr where Qdpg is the quantity of groceries, Ppg is the price of groceries, I is the income, and Ppdr is the price of beverages. We understand that: Ppg = 30, I = 110, and Ppdr = 20. What will the price elasticity of demand for groceries be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    Ppg = 30\n    I = 110\n    Ppdr = 20\n\n    # Calculate the original quantity of groceries demanded\n    Qdpg_initial = 80 - (3 * Ppg) + (0.1 * I) + (0.5 * Ppdr)\n\n    # Calculate the new price of groceries after a small increase (e.g., 1 unit increase)\n    Ppg_new = Ppg + 1\n\n    # Calculate the new quantity of groceries demanded after the price change\n    Qdpg_new = 80 - (3 * Ppg_new) + (0.1 * I) + (0.5 * Ppdr)\n\n    # Calculate the price elasticity of demand using the formula:\n    # Elasticity = (% change in quantity) / (% change in price)\n    # Approximated as: (change in quantity / average quantity) / (change in price / average price)\n    delta_Qdpg = Qdpg_new - Qdpg_initial\n    delta_Ppg = Ppg_new - Ppg\n    avg_Qdpg = (Qdpg_initial + Qdpg_new) / 2\n    avg_Ppg = (Ppg + Ppg_new) / 2\n\n    elasticity = (delta_Qdpg / avg_Qdpg) / (delta_Ppg / avg_Ppg)\n\n    # return answer\n    return elasticity\n\n# Running the solution function to get the price elasticity of demand for groceries\nsolution()\n```\n\nThis program calculates the price elasticity of demand for groceries based on the given demand function and the specified values for the price of groceries, income, and the price of beverages. The elasticity is computed using the formula for price elasticity of demand."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-125",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is assessing the liquidity of XYZ Corporation based on the financial data from 2016 and 2017. The total debt was $200 in 2016 and rose to $300 in 2017. The total assets were $500 in 2016, increasing to $800 in 2017. The total equity was $250 in 2016 and went up to $400 in 2017. What is the financial leverage ratio in 2017?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_debt_2017 = 300\n    total_equity_2017 = 400\n\n    # Do math calculation to get the answer\n    financial_leverage_ratio_2017 = total_debt_2017 / total_equity_2017\n\n    # return answer\n    return financial_leverage_ratio_2017\n\n# Print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-126",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment director purchased 600 call options on a stock that doesn't pay dividends, with a strike price of USD 60, at a cost of USD 3 each. If the current stock price is at USD 62, the daily stock return volatility is pegged at 1.82%, and the delta of the option stands at 0.5. How can we approximate the 1-day 95% VaR of this position using the delta-normal approach?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    num_options = 600\n    strike_price = 60\n    option_price = 3\n    current_stock_price = 62\n    daily_volatility = 0.0182\n    delta = 0.5\n    confidence_level = 0.95\n\n    # Calculate the standard normal z-value for the 95% confidence level\n    from scipy.stats import norm\n    z_value = norm.ppf(1 - (1 - confidence_level))\n\n    # Calculate the delta-adjusted position\n    delta_adjusted_position = num_options * delta\n\n    # Calculate the value of the position\n    value_of_position = num_options * option_price\n\n    # Calculate the 1-day 95% VaR using the delta-normal approach\n    var_1_day = value_of_position * z_value * daily_volatility\n\n    # return the answer\n    return var_1_day\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the variables and calculates the 1-day 95% Value at Risk (VaR) using the delta-normal approach. It returns the calculated VaR as the answer."
        ]
    },
    {
        "tables": [
            "|        | \u00a3 thousands |\n|--------|-------------|\n| Carrying amount | 132 |\n| Undiscounted expected future cash flows | 120 |\n| Present value of expected future cash flows | 100 |\n| Fair value if sold | 105 |\n| Costs to sell | 1 |"
        ],
        "topic": "Accounting",
        "question_id": "test-127",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the data analyzed, what will be the impairment loss on this manufacturing plant (in thousands) under IFRS?",
        "output": [
            " According to IFRS, an impairment loss is recognized when the carrying amount of an asset exceeds its recoverable amount. The recoverable amount is the higher of the asset's fair value less costs to sell and its value in use (which, in this context, can be considered as the present value of expected future cash flows).\n\nHere's the Python program to calculate the impairment loss:\n\n```python\ndef solution():\n    # Define variables name and value\n    carrying_amount = 132\n    present_value_of_expected_future_cash_flows = 100\n    fair_value_if_sold = 105\n    costs_to_sell = 1\n\n    # Calculate the fair value less costs to sell\n    fair_value_less_costs_to_sell = fair_value_if_sold - costs_to_sell\n\n    # Determine the recoverable amount as the higher of fair value less costs to sell and present value of expected future cash flows\n    recoverable_amount = max(fair_value_less_costs_to_sell, present_value_of_expected_future_cash_flows)\n\n    # Calculate the impairment loss\n    impairment_loss = max(carrying_amount - recoverable_amount, 0)\n\n    # Return the impairment loss\n    return impairment_loss\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the necessary variables based on the given data, calculates the fair value less costs to sell, determines the recoverable amount, and then computes the impairment loss. The impairment loss is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-128",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a tax rate of 28%, what is the annual after-tax cost of debt (%) for a business that releases fresh 20-year $1,000 bonds with a coupon rate of 6.2% payable semiannually at an issuance price of $1,030.34?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.28\n    coupon_rate = 0.062  # 6.2%\n    bond_price = 1030.34\n    bond_par_value = 1000\n    periods_per_year = 2  # Semiannual payments\n\n    # Calculate the semiannual coupon payment\n    semiannual_coupon_payment = (coupon_rate / periods_per_year) * bond_par_value\n\n    # Calculate the before-tax cost of debt\n    before_tax_cost_of_debt = (semiannual_coupon_payment / bond_price) * periods_per_year\n\n    # Calculate the after-tax cost of debt\n    after_tax_cost_of_debt = before_tax_cost_of_debt * (1 - tax_rate)\n\n    # return answer\n    return after_tax_cost_of_debt * 100  # Convert to percentage\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-129",
        "python_solution": "",
        "ground_truth": null,
        "question": "Kelly is working on the valuation for XYZ Corp. She calculates that the long-term expected dividend payout rate for XYZ is 35 percent and the return on equity will be 12 percent in the long run. What is the long-term FCFE Sustainable growth rate for XYZ Corp.?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_rate = 0.35\n    return_on_equity = 0.12\n\n    # Do math calculation to get the answer\n    sustainable_growth_rate = return_on_equity * (1 - dividend_payout_rate)\n\n    # return answer\n    return sustainable_growth_rate\n```"
        ]
    },
    {
        "tables": [
            "|                |          | Actual Training |        |\n|----------------|----------|--------------|--------------|\n|                |          | results     |              |\n| Predicted      |          | Class \"1\"   | Class \"0\"    |\n| Results        | Class \"1\"| TP=182      | FP=52        |\n|                | Class \"0\"| FN=31       | TN=96        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-130",
        "python_solution": "",
        "ground_truth": null,
        "question": "After settling on the last set of features, Johnson chooses and executes a model on the training set which labels the text as having either positive sentiment (Class \"1\") or negative sentiment (Class \"0\"). He subsequently inspects its performance through error analysis. As per Exhibit 1, what is the F1 score of the model?",
        "output": [
            " Certainly! Below is the Python program to calculate the F1 score based on the provided confusion matrix values:\n\n```python\ndef solution():\n    # Define variables name and value\n    TP = 182  # True Positives\n    FP = 52   # False Positives\n    FN = 31   # False Negatives\n\n    # Do math calculation to get the answer\n    precision = TP / (TP + FP)\n    recall = TP / (TP + FN)\n    f1_score = 2 * (precision * recall) / (precision + recall)\n\n    # return answer\n    return f1_score\n```\n\nThis program follows the requested format and calculates the F1 score based on the precision and recall derived from the true positives, false positives, and false negatives."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-131",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we consider a decrease in the yield by 90 basis points, what would be the percentage change in the price of a bond with a modified duration of 9.6?",
        "output": [
            " Certainly! Below is the Python program to calculate the percentage change in the price of a bond given a decrease in the yield by 90 basis points and a modified duration of 9.6:\n\n```python\ndef solution():\n    # Define variables name and value\n    yield_change = 0.90  # 90 basis points is equivalent to 0.90 percentage points\n    modified_duration = 9.6\n\n    # Do math calculation to get the answer\n    percentage_change_in_price = -yield_change * modified_duration\n\n    # return answer\n    return percentage_change_in_price\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program defines the variables for the change in yield and the modified duration, computes the percentage change in the price of the bond, and returns the result. The negative sign is used because an increase in yield leads to a decrease in price, and vice versa."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-132",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the corporation buys back 1 million stocks at the current market rate, what would be the ensuing book value per share, considering the facts about another company revealed by an investigator which includes: 10 million shares in circulation, Earnings per share is US$2.00, P/E is 20, Book value per share is US$30?",
        "output": [
            " Certainly! To solve the given problem, we need to calculate the new book value per share after the corporation buys back 1 million stocks. First, let's determine the initial book value of the company using the given book value per share. Then, we'll subtract the cost of the buyback from the initial book value and divide by the new number of shares in circulation to get the new book value per share.\n\nHere's the Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_in_circulation = 10000000  # 10 million shares\n    earnings_per_share = 2.00  # Earnings per share\n    price_earnings_ratio = 20  # P/E ratio\n    initial_book_value_per_share = 30  # Initial book value per share\n    buyback_shares = 1000000  # 1 million shares bought back\n    current_market_price_per_share = earnings_per_share * price_earnings_ratio  # Market price per share\n\n    # Calculate the initial book value of the company\n    initial_book_value = shares_in_circulation * initial_book_value_per_share\n\n    # Calculate the cost of the buyback\n    buyback_cost = buyback_shares * current_market_price_per_share\n\n    # Calculate the new book value of the company\n    new_book_value = initial_book_value - buyback_cost\n\n    # Calculate the new number of shares in circulation\n    new_shares_in_circulation = shares_in_circulation - buyback_shares\n\n    # Calculate the new book value per share\n    new_book_value_per_share = new_book_value / new_shares_in_circulation\n\n    # Return the answer\n    return new_book_value_per_share\n\n# Run the solution function and print the answer\nprint(solution())\n```\n\nThis program computes the new book value per share after the company buys back 1 million shares at the current market rate."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-133",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the carried interest paid to the general partner of the DeepSleep Investment, referenced in the brochure and having a committed capital of $150 million, a management fee of 2%, carried interest of 20%, and a hurdle rate of 9%, at the end of the second year? In the example given in the brochure, the fund demands $100 million in commitments at the start of the first year and disburses $40 million in Company X and $60 million in Company Y. At the onset of the second year, it calls the residual $50 million and invests into Company Z. By the end of the second year, the investment in Company Y is sold for $70 million. The investment in Company X amounts to $54 million by the end of the third year, the investment in Company Z is worth $40 million, and a cash reserve of $46 million is maintained.",
        "output": [
            " Sure, let's structure the Python program to calculate the carried interest paid to the general partner of DeepSleep Investment. Given the details, we need to calculate the distributions and the carried interest post distributions.\n\nHere is the Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    committed_capital = 150000000\n    management_fee_rate = 0.02\n    carried_interest_rate = 0.20\n    hurdle_rate = 0.09\n\n    initial_commitment = 100000000\n    second_year_commitment = 50000000\n\n    company_x_investment = 40000000\n    company_y_investment = 60000000\n    company_z_investment = 50000000\n\n    company_x_value = 54000000\n    company_y_sale_value = 70000000\n    company_z_value = 40000000\n    cash_reserve = 46000000\n\n    # Calculate total fund value at the end of the second year\n    total_fund_value = company_x_value + company_y_sale_value + company_z_value + cash_reserve\n\n    # Calculate management fee for two years\n    total_management_fee = (initial_commitment + second_year_commitment) * management_fee_rate\n\n    # Calculate net fund value after deducting management fees\n    net_fund_value = total_fund_value - total_management_fee\n\n    # Calculate the distribution waterfall\n    # 1. Return the total committed capital to investors\n    residual_value = net_fund_value - committed_capital\n\n    # 2. Calculate the hurdle rate distribution\n    hurdle_distribution = committed_capital * hurdle_rate\n\n    # 3. Adjust residual value with hurdle rate distribution (if applicable)\n    if"
        ]
    },
    {
        "tables": [
            "| Compensation of employees | 1,044,005 |\n|---------------------------|-----------|\n| Gross operating surplus | 518,979 |\n| Gross mixed income | 241,415 |\n| Net mixed income | 180,653 |\n| Taxes less subsidies on production | 90,507 |\n| Taxes less subsidies on products and imports | 139,443 |\n| Statistical discrepancy | 1,157 |\n| Net property income | 136,011 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-134",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the income approach, compute the personal income using the details in the succeeding table.",
        "output": [
            " In the income approach, personal income can be approximated by summing the compensation of employees, gross mixed income, and net property income. Given the values provided in the table, we can compute the personal income using these fields.\n\nHere is the Python program to compute the personal income:\n\n```python\ndef solution():\n    # Define variables name and value\n    compensation_of_employees = 1044005\n    gross_mixed_income = 241415\n    net_property_income = 136011\n\n    # Do math calculation to get the answer\n    personal_income = compensation_of_employees + gross_mixed_income + net_property_income\n\n    # return answer\n    return personal_income\n```\n\nThis program defines the necessary variables, performs the calculation by summing the relevant components, and returns the resulting personal income."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-135",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive intends to determine the price of a put option using a one-period binomial tree. The specifics are as such: The existing stock price is $30, with the put option's exercise price also at $30 The up factor sits at 1.12, while the down factor is at 0.92 The risk-free rate remains at 5%. What is the value of this particular put option?",
        "output": [
            " Sure! Below is the Python program to calculate the value of the put option using a one-period binomial tree:\n\n```python\ndef solution():\n    # Define variables name and value\n    S = 30  # Current stock price\n    K = 30  # Exercise price of the put option\n    u = 1.12  # Up factor\n    d = 0.92  # Down factor\n    r = 0.05  # Risk-free rate\n\n    # Do math calculation to get the answer\n    # Calculate the stock price at time T\n    Su = S * u\n    Sd = S * d\n\n    # Calculate the payoffs of the put option at time T\n    put_payoff_u = max(K - Su, 0)\n    put_payoff_d = max(K - Sd, 0)\n\n    # Calculate the risk-neutral probabilities\n    p_u = (1 + r - d) / (u - d)\n    p_d = 1 - p_u\n\n    # Discount the expected payoff to find the put option price\n    put_price = (put_payoff_u * p_u + put_payoff_d * p_d) / (1 + r)\n\n    # return answer\n    return put_price\n\n# Print the answer\nprint(solution())\n```\n\nThis program calculates the payoffs of the put option under both scenarios (up and down), determines the risk-neutral probabilities, and discounts the expected payoff to find the current price of the put option. The final value is returned by the function."
        ]
    },
    {
        "tables": [
            "|            | Classification  | Cost   | Market value  2018 | Market value 2019 |\n|------------|-----------------|--------|------------------- |-------------------|\n| Shoes Corp | FVOCI           | 12,000 | 15,000             | 16,000            |\n| Angle PD   | Amortized cost  | 35,000 | 32,000             | 33,000            |\n| T-vision   | FVPL            | 42,000 | 45,000             | 56,000            |"
        ],
        "topic": "Accounting",
        "question_id": "test-136",
        "python_solution": "",
        "ground_truth": null,
        "question": "A CFA named Fabian, who is employed at the Equity investment firm, is in the process of preparing an analytical report on the PZ company, which is registered on the HK Exchange and is in compliance with IFRS 9. She has gathered data on three fixed-income investments from the PZ's 2019 year-end financial report (assuming cost equals par value). Could you determine the carrying value of PZ company's investment portfolio at the end of 2019?",
        "output": [
            " Sure, to determine the carrying value of the PZ company's investment portfolio at the end of 2019, we need to classify each of the investments according to their category and then sum up their market values at the end of 2019.\n\nFor the given question, the data is provided in the following table:\n\n|            | Classification  | Cost   | Market value 2018 | Market value 2019 |\n|------------|-----------------|--------|-------------------|-------------------|\n| Shoes Corp | FVOCI           | 12,000 | 15,000            | 16,000            |\n| Angle PD   | Amortized cost  | 35,000 | 32,000            | 33,000            |\n| T-vision   | FVPL            | 42,000 | 45,000            | 56,000            |\n\nLet's write a Python program to calculate the carrying value of the investment portfolio at the end of 2019.\n\n```python\ndef solution():\n    # Define variables and their values\n    shoes_corp_2019 = 16000  # Market value of Shoes Corp at the end of 2019\n    angle_pd_2019 = 33000    # Market value of Angle PD at the end of 2019 (Amortized cost)\n    t_vision_2019 = 56000    # Market value of T-vision at the end of 2019\n\n    # Do math calculation to get the total carrying value\n    total_carrying_value = shoes_corp_2019 + angle_pd_2019 + t_vision_2019\n\n    # Return the answer\n    return total_carrying_value\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(\"The carrying value of the PZ company's investment portfolio at the end of 2019 is\", answer)\n```\n\nThis program calculates the carrying value by summing the market values"
        ]
    },
    {
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.80%        |\n| 1y1y        | 1.12%        |\n| Z           | 3.94%        |\n| 3y1y        | 3.28%        |\n| 4y1y        | 3.14%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-137",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the 3-year implied spot rate if all rates are annual rates stated for a periodicity of one (effective annual rates)?",
        "output": [
            " To calculate the 3-year implied spot rate using the forward rates provided, we can use the formula for bootstrapping the spot rates from the forward rates. The implied spot rate \\( (1 + S_{n})^{n} \\) for \\( n \\) years is given by the product of \\( 1 + \\) each applicable forward rate.\n\nGiven the forward rates:\n- 0y1y: 0.80%\n- 1y1y: 1.12%\n- Z: 3.94% (this is likely a typo, we'll assume it refers to the 2y1y forward rate)\n\nWe can calculate the 3-year spot rate \\( S_{3} \\) using the following formula:\n\n\\[ (1 + S_{3})^3 = (1 + Z_{0})(1 + Z_{1})(1 + Z_{2}) \\]\n\nWhere:\n- \\( Z_{0} \\) is the 0y1y forward rate (0.80% or 0.0080)\n- \\( Z_{1} \\) is the 1y1y forward rate (1.12% or 0.0112)\n- \\( Z_{2} \\) is the 2y1y forward rate (we correct this to 3.94% or 0.0394)\n\nWe then use this relationship to find \\( S_{3} \\):\n\n\\[ S_{3} = \\left[ (1 + Z_{0})(1 + Z_{1})(1 + Z_{2}) \\right]^{1/3} - 1 \\]\n\nHere is the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    Z_0 = 0.0080\n    Z_1 = 0.0112\n    Z_2 = 0.0394\n\n    # Do math calculation to get the answer\n    product = (1 + Z_0) * (1 + Z_1) * (1 + Z_2)\n    S_3 = product**(1/3) - 1\n\n    # return answer\n    return S_3\n\n# Call the function and print the"
        ]
    },
    {
        "tables": [
            "| Investment | Expected Return(%) | Expected Standard Deviation(%) |\n|-----------|------------------|-----------------------------|\n| 1         | 19               | 3                           |\n| 2         | 21               | 9                           |\n| 3         | 24               | 20                          |\n| 4         | 19               | 35                          |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-138",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming the measure of risk aversion is -3, where is Mauricio Garcia, a daring investor who applies utility theory to select his investment portfolio, most likely to invest given a table of potential investments with expected returns and expected standard deviations?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    investments = [\n        {'return': 19, 'std_dev': 3},\n        {'return': 21, 'std_dev': 9},\n        {'return': 24, 'std_dev': 20},\n        {'return': 19, 'std_dev': 35}\n    ]\n\n    risk_aversion = -3\n\n    # Define a function to calculate the utility of each investment\n    def utility(investment, risk_aversion):\n        return investment['return'] + risk_aversion * investment['std_dev']\n\n    # Calculate utilities for each investment\n    utilities = [utility(investment, risk_aversion) for investment in investments]\n\n    # Find the investment with the maximum utility\n    max_investment_index = utilities.index(max(utilities))\n\n    # Return the investment number with the maximum utility\n    return max_investment_index + 1\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nExplanation:\n1. **Define Variables**: The `investments` list contains dictionaries with the expected return and standard deviation for each investment. The `risk_aversion` variable is set to -3.\n2. **Utility Function**: The `utility` function calculates the utility of an investment given its return, standard deviation, and the risk aversion coefficient.\n3. **Calculate Utilities**: The list comprehension `[utility(investment, risk_aversion) for investment in investments]` calculates the utility for each investment.\n4. **Find Maximum Utility**: Use `max(utilities)` to find the highest utility value and `index` to get its position in the list.\n5. **Return Result**: Convert the zero-based index to a one-based index to match the investment numbering in the table.\n\nThis solution correctly identifies the investment most likely to be chosen by Mauricio Garcia based on his measure of risk aversion."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-139",
        "python_solution": "",
        "ground_truth": null,
        "question": "A $1 million loan was granted to a vehicle manufacturing corporation by Bank B. The bank has projected a default likelihood of 10% for the vehicle manufacturer and an 80% recovery rate owing to strong collateral. What is the anticipated loss for the bank?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 1000000\n    default_probability = 0.10\n    recovery_rate = 0.80\n\n    # Do math calculation to get the answer\n    expected_loss = loan_amount * default_probability * (1 - recovery_rate)\n\n    # return answer\n    return expected_loss\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-140",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company bond is set to mature in the coming year with a face value of 100 RMB, a market price of 88, a true default-free interest rate of 2.5%, anticipated inflation rate of 3%, and an unexpected inflation rate of 0.5%. Could you determine the implied credit risk premium embedded in the corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    market_price = 88\n    true_interest_rate = 2.5 / 100\n    anticipated_inflation_rate = 3 / 100\n    unexpected_inflation_rate = 0.5 / 100\n\n    # Do math calculation to get the answer\n    expected_return = (face_value / market_price - 1)\n    nominal_interest_rate = expected_return + 1\n    real_required_return = nominal_interest_rate / (1 + anticipated_inflation_rate) - 1\n    credit_risk_premium = real_required_return - (true_interest_rate + unexpected_inflation_rate)\n\n    # return answer\n    return credit_risk_premium\n```\n\nThis Python program calculates the implied credit risk premium embedded in the corporation's bond. It uses the given inputs to determine the expected return, real required return, and finally, the credit risk premium."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-141",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a constant 6% interest rate, how much does a shareholder need to invest today in order to make $10,000 in twenty years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    future_value = 10000\n    interest_rate = 0.06\n    years = 20\n\n    # Do math calculation to get the answer\n    present_value = future_value / (1 + interest_rate) ** years\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-142",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation known as Delta Enterprises has authorized 160,000 shares of common stock. It has issued 88,000 shares and has 75,000 shares outstanding. How many shares of treasury stock does Delta Enterprises possess?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    authorized_shares = 160000\n    issued_shares = 88000\n    outstanding_shares = 75000\n\n    # Do math calculation to get the answer\n    treasury_stock = issued_shares - outstanding_shares\n\n    # return answer\n    return treasury_stock\n```"
        ]
    },
    {
        "tables": [
            "| Company M                    | $ millions |\n|---------------------------|----------|\n| Net Income                      | 485        |\n| Depreciation expense      | 270        |\n| Increase in accounts receivable | 59         |\n| Increase in accounts payable    | 33         |\n| Purchase of fixed assets        | 523        |\n| Increase in notes payable       | 15         |\n| Increase in long-term debt      | 60         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-143",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is getting ready to assess the value of Company X's equity using the two-stage FCFE model. The anticipated growth rates for the initial three years are projected at 10%, 8%, and 6%, in that order, before potentially growing at 5% annually for an indefinite period. The necessary rate of return on equity for Company X stands at 10%. What is the fundamental value of Company X\u2019s equity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    net_income = 485  # in $ millions\n    depreciation_expense = 270\n    increase_in_accounts_receivable = 59\n    increase_in_accounts_payable = 33\n    purchase_of_fixed_assets = 523\n    increase_in_notes_payable = 15\n    increase_in_long_term_debt = 60\n    initial_growth_rates = [10, 8, 6]  # in percentages\n    terminal_growth_rate = 5  # in percentage\n    required_return_on_equity = 10  # in percentage\n\n    # Calculate FCFE for the initial years\n    CFO = net_income + depreciation_expense\n    FCFE = CFO - purchase_of_fixed_assets + increase_in_accounts_payable - increase_in_accounts_receivable + increase_in_notes_payable + increase_in_long_term_debt\n\n    # Initial High Growth Period Value\n    FCFE_initial = []\n    for growth in initial_growth_rates:\n        FCFE *= (1 + (growth / 100))\n        FCFE_initial.append(FCFE)\n\n    PV_FCFE_initial = sum([\n        FCFE_initial[0] / (1 + required_return_on_equity / 100),\n        FCFE_initial[1] / (1 + required_return_on_equity / 100) ** 2,\n        FCFE_initial[2] / (1 + required_return_on_equity / 100) ** 3\n    ])\n\n    # Terminal Value Calculation\n    Last_FCFE = FCFE_initial[-1]\n    terminal_value = Last_FCFE * (1 + (terminal_growth_rate / 100)) / ((required_return_on_equity / 100) - (terminal_growth_rate / 100))\n   "
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-144",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a buyer acquires a three-year bond that has a 5% annual coupon rate, is bought at a rate of 105.657223 per 100 of par value and has a yield-to-maturity of 3%, what would be the estimated modified duration of this bond given a 5-basis point shift in yield-to-maturity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100      # Par value of the bond\n    coupon_rate = 0.05    # Annual coupon rate\n    price = 105.657223    # Price per 100 of par value\n    ytm = 0.03            # Yield-to-maturity\n    years = 3             # Maturity period in years\n    yield_change = 0.0005 # 5-basis point shift (0.05% change in yield)\n\n    # Calculate the actual cash flows from the bond\n    cash_flows = []\n    for year in range(1, years + 1):\n        cash_flow = coupon_rate * face_value\n        if year == years:\n            cash_flow += face_value\n        cash_flows.append(cash_flow)\n\n    # Calculate the bond's price using the initial yield-to-maturity\n    def bond_price(cash_flows, yield_rate):\n        present_values = []\n        for i, cash_flow in enumerate(cash_flows):\n            present_values.append(cash_flow / (1 + yield_rate) ** (i + 1))\n        return sum(present_values)\n\n    initial_price = bond_price(cash_flows, ytm)\n\n    # Calculate the bond's price with a slight change in yield\n    new_price = bond_price(cash_flows, ytm + yield_change)\n\n    # Calculate the modified duration\n    modified_duration = (initial_price - new_price) / (initial_price * yield_change)\n\n    # Return answer\n    return modified_duration\n```\n\nThis program calculates the modified duration by first calculating the initial and new bond prices based on the yield-to-maturity and a small shift in yield. The modified duration is then computed using these prices and the yield shift."
        ]
    },
    {
        "tables": [
            "|       | Beginning of Period Price($) | End of Period Price($) | Total Dividends($) |\n|-------|------------------------------|------------------------|--------------------|\n| A     | 8.00                         | 10.00                  | 0.50               |\n| B     | 22.00                        | 19.00                  | 1.20               |\n| C     | 25.00                        | 25.00                  | 1.50               |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-145",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Ahern from a financial firm gathered data for an equal-weighted index made up of assets A, B, and C: What is the index's price return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    a_begin = 8.00\n    a_end = 10.00\n    b_begin = 22.00\n    b_end = 19.00\n    c_begin = 25.00\n    c_end = 25.00\n\n    a_dividend = 0.50\n    b_dividend = 1.20\n    c_dividend = 1.50\n\n    # Calculate the price return for each asset\n    a_price_return = (a_end - a_begin) / a_begin\n    b_price_return = (b_end - b_begin) / b_begin\n    c_price_return = (c_end - c_begin) / c_begin\n\n    # Calculate the average price return\n    average_price_return = (a_price_return + b_price_return + c_price_return) / 3\n\n    # Return the answer\n    return average_price_return\n\n# Calling the function to get the solution\nanswer = solution()\nprint(f\"The index's price return is: {answer:.4f}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-146",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John purchased a security for $55 in the first year, $60 in the second year, $64 in the third year, and $70 in the fourth year, what would be the harmonic mean of the price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    prices = [55, 60, 64, 70]\n\n    # Do math calculation to get the answer\n    reciprocal_sum = sum(1 / price for price in prices)\n    harmonic_mean = len(prices) / reciprocal_sum\n\n    # return answer\n    return harmonic_mean\n```\n\nThis program calculates the harmonic mean of the prices at which John purchased the security over the four years. The harmonic mean is calculated by taking the reciprocal of each price, summing these reciprocals, and then dividing the number of observations by this sum. This procedure is known to provide a more conservative average, especially when dealing with rates or prices."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-147",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2013, AskIt bought a customer list for $100,000, expected to yield equal annual benefits for four years. It also registered $200,000 in goodwill from the takeover of a rival firm, with projections indicating substantial benefits for at least a decade. Furthermore, it allocated $300,000 on media slots publicizing the firm's donations of goods and services in the local community, a move which the CEO believes significantly boosted the company's reputation and anticipates it to yield rewards for five years. Consequently, how much should the company declare as amortization expense in 2014?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_customer_list = 100000  # Cost of customer list\n    years_customer_list = 4  # Number of years benefits for customer list\n    cost_goodwill = 200000  # Cost of goodwill\n    years_goodwill = 10  # Number of years benefits for goodwill\n    cost_media_slots = 300000  # Cost for media slots\n    years_media_slots = 5  # Number of years benefits for media slots\n\n    # Do math calculation to get the answer\n    amortization_customer_list = cost_customer_list / years_customer_list\n    amortization_goodwill = cost_goodwill / years_goodwill  # Note: Goodwill is generally not amortized\n    amortization_media_slots = cost_media_slots / years_media_slots\n\n    # Assuming goodwill is not amortized\n    total_amortization_expense = amortization_customer_list + amortization_media_slots\n\n    # return answer\n    return total_amortization_expense\n\n# Test the function\nprint(solution())\n```\n\nThis program calculates the amortization expense for 2014 based on the provided information. The assumption is that goodwill is not amortized as per generally accepted accounting principles. The final answer is the sum of the amortization expenses for the customer list and media slots."
        ]
    },
    {
        "tables": [
            "| Bond Class      | Par Value (\u6bdb millions) |\n| ----------- | ----------- |\n| A (senior)      | 200       |\n| B (subordinated)   | 20        |\n| C (subordinated)   | 5        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-148",
        "python_solution": "",
        "ground_truth": null,
        "question": "At what level of default in par value would Bond Class A suffer a loss, if issued by a special purpose entity as part of asset-backed securities structure?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value_A = 200\n    par_value_B = 20\n    par_value_C = 5\n\n    # Do math calculation to get the answer\n    total_par_value_subordinated = par_value_B + par_value_C\n    threshold_default_for_loss_A = total_par_value_subordinated\n\n    # return answer\n    return threshold_default_for_loss_A\n```"
        ]
    },
    {
        "tables": [
            "|                                                    | \u00a5millions |\n|----------------------------------------------------|-----------|\n| Net income reported                                | 42        |\n| Dividends paid                                     | 7         |\n| Unrealized loss on investments carried at fair value through other comprehensive income | 3         |\n| Repurchase of company stock, to be held as Treasury stock | 6         |"
        ],
        "topic": "Accounting",
        "question_id": "test-149",
        "python_solution": "",
        "ground_truth": null,
        "question": "During the year, the following events happened: At the start of the year, an organization had total equity from shareholders comprising of \u00a5200 million in common share capital and \u00a550 million in preserved profits. What is the total equity from shareholders (in \u00a5 millions) at the conclusion of the year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_common_share_capital = 200  # in \u00a5 millions\n    initial_preserved_profits = 50      # in \u00a5 millions\n\n    net_income = 42                   # in \u00a5 millions\n    dividends_paid = 7                # in \u00a5 millions\n    unrealized_loss = 3               # in \u00a5 millions\n    stock_repurchase = 6              # in \u00a5 millions\n\n    # Do math calculation to get the answer\n    total_equity = (\n        initial_common_share_capital +\n        initial_preserved_profits +\n        net_income -\n        dividends_paid -\n        unrealized_loss -\n        stock_repurchase\n    )\n\n    # return answer\n    return total_equity\n\n# Execute the function and print the result\nprint(solution())\n```\n\nThis program will calculate the total equity from shareholders at the conclusion of the year based on the provided financial events and initial equity values."
        ]
    },
    {
        "tables": [
            "|                  | Asset 1 | Asset 2 | Asset 3 |\n|------------------|---------|---------|---------|\n| Expected return  | 5%      | 6%      | 7%      |\n| Portfolio weight | 0.20    | 0.30    | 0.50    |\n|                  | Asset 1 | Asset 2 | Asset 3 |\n| Asset 1          | 196     | 105     | 140     |\n| Asset 2          | 105     | 225     | 150     |\n| Asset 3          | 140     | 150     | 400     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-150",
        "python_solution": "",
        "ground_truth": null,
        "question": "The three-asset portfolio designed by Sophia Milligan is outlined below. Milligan estimated the portfolio return to be 6.3%. What is the standard deviation of the portfolio?",
        "output": [
            " Certainly! Here is the Python program to calculate the standard deviation of the portfolio based on the given inputs:\n\n```python\ndef solution():\n    import numpy as np\n\n    # Define variables name and value\n    expected_returns = np.array([0.05, 0.06, 0.07])\n    portfolio_weights = np.array([0.20, 0.30, 0.50])\n\n    # Covariance matrix\n    cov_matrix = np.array([\n        [0.196, 0.105, 0.140],\n        [0.105, 0.225, 0.150],\n        [0.140, 0.150, 0.400]\n    ])\n\n    # Calculate portfolio variance\n    portfolio_variance = np.dot(portfolio_weights.T, np.dot(cov_matrix, portfolio_weights))\n\n    # Calculate portfolio standard deviation\n    portfolio_std_dev = np.sqrt(portfolio_variance)\n\n    # return answer\n    return portfolio_std_dev\n\nprint(solution())\n```\n\nThis program:\n1. Defines the expected returns and portfolio weights.\n2. Constructs the covariance matrix.\n3. Computes the portfolio variance.\n4. Takes the square root of the portfolio variance to get the standard deviation.\n5. Returns the portfolio standard deviation."
        ]
    },
    {
        "tables": [
            "| Income Statement       | Millions ($) |\n|-----------------------|--------------|\n| Revenues              | 10.2         |\n| Variable operating costs | 4.6       |\n| Fixed operating costs    | 2.0       |\n| Operating income        | 3.6        |\n| Interest                | 1.2        |\n| Taxable income          | 2.4        |\n| Tax                     | 1.0        |\n| Net income              | 1.4        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-151",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the degree of financial leverage (DFL) accessible for a company?",
        "output": [
            " Sure, to calculate the degree of financial leverage (DFL), you can use the following formula:\n\n\\[ \\text{DFL} = \\frac{\\text{Operating Income}}{\\text{Net Income}} \\]\n\nHere's a Python program that does this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_income = 3.6  # in millions\n    net_income = 1.4  # in millions\n\n    # Do math calculation to get the answer\n    DFL = operating_income / net_income\n\n    # Return answer\n    return DFL\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the degree of financial leverage using the values provided in the table for operating income and net income. The program then returns this value as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-152",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the duration model with convexity adjustment, how much will the bond's price change, in percentage, if interest rates drop 2%, given that the bond's duration is 7.31 and its convexity is -24.85?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    duration = 7.31\n    convexity = -24.85\n    interest_rate_change = -0.02  # 2% decrease in interest rates\n\n    # Do math calculation to get the answer\n    price_change_due_to_duration = -duration * interest_rate_change\n    price_change_due_to_convexity = 0.5 * convexity * (interest_rate_change ** 2)\n    total_price_change_percentage = price_change_due_to_duration + price_change_due_to_convexity\n\n    # return answer\n    return total_price_change_percentage\n```\n\nThis program calculates the expected percentage change in the bond's price based on the provided duration and convexity values and a 2% decrease in interest rates. The output is the total price change percentage."
        ]
    },
    {
        "tables": [
            "| Bond | Price | Par Amount Held | Modified Duration |\n|------|-------|-----------------|-------------------|\n| A    | 101.43| 3               | 2.36              |\n| B    | 84.89 | 5               | 4.13              |\n| C    | 121.87| 8               | 6.27              |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-153",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the given portfolio of bonds (par amounts listed in millions of USD). What is the value of the portfolio's DV01 (dollar value of 1 basis point)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bonds = [\n        {\"price\": 101.43, \"par_amount_held\": 3, \"modified_duration\": 2.36},\n        {\"price\": 84.89, \"par_amount_held\": 5, \"modified_duration\": 4.13},\n        {\"price\": 121.87, \"par_amount_held\": 8, \"modified_duration\": 6.27}\n    ]\n\n    # Do math calculation to get the answer\n    total_dv01 = 0\n    for bond in bonds:\n        market_value = bond[\"price\"] * bond[\"par_amount_held\"]\n        individual_dv01 = (market_value * bond[\"modified_duration\"]) / 10000\n        total_dv01 += individual_dv01\n\n    # return answer\n    return total_dv01\n\n# Run the solution to get the answer\nanswer = solution()\nprint(f\"The value of the portfolio's DV01 is: {answer}\")\n```\n\nThis Python program calculates the DV01 (Dollar Value of 1 Basis Point) for each bond in the portfolio and sums them up to get the total DV01. The `solution` function performs the necessary calculations and returns the final answer. When you run this program, it will print the value of the portfolio's DV01."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| Coupon rate  | 5%  |\n| Interest paid  | semiannually  |\n| Mature time  | 2 years  |\n| Required rate of return  | 6%  |\n| Par value of the bond  | 100 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-154",
        "python_solution": "",
        "ground_truth": null,
        "question": "The bond purchased by Brian has some detailed information summarized below. What is the price of this bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05  # 5%\n    interest_rate = 0.06  # 6%\n    par_value = 100\n    mature_time = 2\n    periods_per_year = 2  # semiannually\n\n    # Calculate the present value of the bond's cash flows\n    total_coupon_payments = coupon_rate * par_value * mature_time * periods_per_year\n    present_value_of_coupons = total_coupon_payments / (1 + interest_rate/periods_per_year) ** (mature_time * periods_per_year)\n\n    present_value_of_par = par_value / (1 + interest_rate/periods_per_year) ** (mature_time * periods_per_year)\n\n    # Bond price is the sum of the present values of coupons and par value\n    bond_price = present_value_of_coupons + present_value_of_par\n\n    return bond_price\n\n# Running the solution function to get the bond price\nbond_price = solution()\nprint(f\"The price of the bond is: {bond_price}\")\n```\n\nThe correct math for calculating the present value of bond's cash flows should consider the discounting factor for each individual payment. Here is the corrected function:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05  # 5%\n    interest_rate = 0.06  # 6%\n    par_value = 100\n    mature_time = 2\n    periods_per_year = 2  # semiannually\n\n    # Calculate the present value of the bond's cash flows\n    coupon_payment = coupon_rate * par_value / periods_per_year\n    discount_factor = (1 + interest_rate / periods_per_year)\n\n    present_value_of_coupons = sum(coupon_payment / (discount_factor ** n) for n in range(1, mature_"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-155",
        "python_solution": "",
        "ground_truth": null,
        "question": "The XYZ Company is situated in a region with a 40 percent business tax rate on pre-tax income and a 30 percent individual tax rate on dividends. XYZ hands out all its post-tax income to its shareholders. What is the effective tax rate on XYZ's pre-tax income that is distributed as dividends?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    business_tax_rate = 0.40\n    individual_tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    post_tax_income = 1 - business_tax_rate\n    effective_tax_rate = business_tax_rate + (post_tax_income * individual_tax_rate)\n\n    # Return answer\n    return effective_tax_rate\n```\n\nThe provided Python program calculates the effective tax rate on XYZ's pre-tax income that is distributed as dividends by first determining the post-tax income percentage and then computing the total tax burden including both business and individual taxes."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-156",
        "python_solution": "",
        "ground_truth": null,
        "question": "A note with a par of $100 and a semiannually paid coupon rate of 6%, with a YTM of 8% and a 10-year maturity timeframe. What is the DV01 of this note?",
        "output": [
            " Certainly! In order to calculate the DV01 (Dollar Value of a 01, which measures the bond price change for a 1 basis point change in yield), we'll need to calculate the bond price change for a 1 basis point (0.01%) change in the yield to maturity.\n\nHere\u2019s the Python program to compute the DV01:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100              # Par value of the bond\n    coupon_rate = 0.06            # Semi-annual coupon rate\n    yield_to_maturity = 0.08      # Annual yield to maturity\n    maturity_years = 10           # Years to maturity\n    periods_per_year = 2          # Since coupons are paid semi-annually\n    price_change_basis_points = 0.0001  # 1 basis point\n\n    # Calculate semi-annual yield to maturity and number of periods\n    semi_annual_yield = yield_to_maturity / periods_per_year\n    total_periods = maturity_years * periods_per_year\n\n    def calculate_bond_price(yield_rate):\n        # Calculate bond price given a yield rate\n        coupon_payment = face_value * coupon_rate / periods_per_year\n        present_value_coupons = 0\n        for t in range(1, total_periods + 1):\n            present_value_coupons += coupon_payment / (1 + yield_rate) ** t\n        present_value_face = face_value / (1 + yield_rate) ** total_periods\n        return present_value_coupons + present_value_face\n\n    # Calculate the price at the current yield to maturity\n    initial_price = calculate_bond_price(semi_annual_yield)\n\n    # Calculate the price after a 1 basis point increase in yield to maturity\n    updated_yield = semi_annual_yield + price_change_basis_points\n    updated_price = calculate_bond_price("
        ]
    },
    {
        "tables": [
            "| Amount | $1,000.00 |\n| ------- | ------------ |\n| Coupon | 5.00% |\n| Maturity | 3 years |\n| Probability of Default | Year 1: 2.0%. Year 2: 2.5%. Year 3: 3.0% |\n| Recovery Rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-157",
        "python_solution": "",
        "ground_truth": null,
        "question": "BTB Bank is a top-tier corporate and institutional bank that runs a client-facing credit default swap (CDS) desk. Steve McQueen is a CDS client strategist. Paul Starr is BTB's chief CDS trader. McQueen and Starr are setting up a meeting with Adam Lopez, a portfolio manager for AEB Fund, to explore investment and trading techniques concerning bonds, CDSs, and equities. Lopez kick-starts the conversation by requesting a recap on fundamental CDS principles and parameters. McQueen responds by explaining that a CDS comprises both a premium leg and a payment leg and that anticipated loss forms one of the elements that impact its valuation. McQueen provides data for a bond issued by Zeus Corporation. According to the facts presented in Exhibit 1, what is the forecasted loss for the Zeus Corporation bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    amount = 1000.00  # in thousands\n    recovery_rate = 0.40\n    probabilities_of_default = [0.02, 0.025, 0.03]\n\n    # Do math calculation to get the answer\n    expected_losses = []\n    for prob in probabilities_of_default:\n        expected_loss = amount * prob * (1 - recovery_rate)\n        expected_losses.append(expected_loss)\n\n    total_expected_loss = sum(expected_losses)\n\n    # return answer\n    return total_expected_loss\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-158",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the interest from the coupon is reinvested at the bond's YTM, how much interest will a financier receive over the bond's 10-year lifespan if they buy a bond with a 6% annual coupon for $1,000 at par and holds it until it matures?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 1000  # Principal amount\n    coupon_rate = 0.06  # Annual coupon rate\n    ytm = 0.06  # Yield to Maturity (assumed to be equal to the coupon rate for simplicity)\n    years = 10  # Bond's lifespan in years\n    frequency = 1  # Coupon payments per year\n\n    # Do math calculation to get the answer\n    total_interest = 0\n    for year in range(1, years + 1):\n        coupon_payment = principal * coupon_rate\n        total_interest += coupon_payment\n\n        # Reinvesting the coupon payment at the bond's YTM\n        total_interest *= (1 + ytm)\n\n    # Return the total interest received\n    return total_interest\n```\n\nTo clarify, this solution starts with the principal amount, applies the annual coupon rate, and reinvests the interest at the YTM. However, it should be noted that the YTM reinvestment calculation needs to be adjusted iteratively for each year correctly. Let's correct the logic to properly reinvest the coupon payments at the bond's YTM each year.\n\nHere is the corrected program:\n```python\ndef solution():\n    # Define variables name and value\n    principal = 1000  # Principal amount\n    coupon_rate = 0.06  # Annual coupon rate\n    ytm = 0.06  # Yield to Maturity (assumed to be equal to the coupon rate for simplicity)\n    years = 10  # Bond's lifespan in years\n\n    # Do math calculation to get the answer\n    total_interest = 0\n    for year in range(1, years + 1):\n        coupon_payment = principal * coupon_rate  # Calculate annual coupon payment\n        total_interest += coupon_payment  # Add the coupon payment to total interest\n        total_interest *= (1 + ytm)  # Reinvest the total interest at the YTM\n\n    # We should subtract the original principal from the final amount to get"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-159",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer bought a stock 20 years ago for $15 and it paid no dividends throughout the investment period, but it had an annual compounded rate of 16%. Based on this information, what is the stock's value today?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 15\n    annual_rate = 0.16\n    years = 20\n\n    # Do math calculation to get the answer\n    stock_value_today = initial_cost * (1 + annual_rate) ** years\n\n    # return answer\n    return stock_value_today\n```\n\nThis program calculates the current value of a stock given its initial cost, the annual compounded rate, and the number of years it has been held for. The final value is calculated using the formula for compound interest."
        ]
    },
    {
        "tables": [
            "| Information Ratio | 0.66 |\n|-------------------|------|\n| Information Coefficient | 0.5 |\n| Transfer Coefficient | 0.89 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-160",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on essential foundational rules, the researchers gathered some data. Could you compute the annual number of autonomous choices made?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    information_ratio = 0.66\n    information_coefficient = 0.5\n    transfer_coefficient = 0.89\n\n    # Do math calculation to get the answer\n    annual_number_of_autonomous_choices = (information_ratio / information_coefficient) * information_coefficient**2\n\n    # return answer\n    return annual_number_of_autonomous_choices\n```"
        ]
    },
    {
        "tables": [
            "|      | Current Year ($ thousands) | Projection for Next Year ($ thousands) |\n|------|---------------------------|---------------------------------------|\n| Sales | 2,200 | 2,500 |\n| Variable operating costs (% of sales) | 28% | 30% |\n| Fixed operating costs | 1,400 | 1,400 |\n| Tax rate | 25% | 25% |\n| Dividends paid | 55 | 60 |\n| Interest bearing debt at 5% | 500 | 500 |"
        ],
        "topic": "Accounting",
        "question_id": "test-161",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the chosen details, what is the projected net income (in $ thousands) for the corporation next year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales_next_year = 2500  # Sales projection for the next year ($ thousands)\n    variable_op_cost_percentage_next_year = 0.30  # Variable operating costs percentage for next year\n    fixed_op_cost_next_year = 1400  # Fixed operating costs for next year ($ thousands)\n    tax_rate = 0.25  # Tax rate\n\n    # Do math calculation to get the answer\n    variable_op_cost_next_year = sales_next_year * variable_op_cost_percentage_next_year  # Variable operating costs for next year\n    operating_income_next_year = sales_next_year - (variable_op_cost_next_year + fixed_op_cost_next_year)  # Operating income for next year\n    tax_next_year = operating_income_next_year * tax_rate  # Tax next year\n    net_income_next_year = operating_income_next_year - tax_next_year  # Net income projected for next year\n\n    # return answer\n    return net_income_next_year\n\nprint(solution())  # This will print the projected net income for the corporation next year\n```\n\nThis program defines the variables needed to calculate the projected net income for the corporation next year based on the given information. It performs the necessary calculations step-by-step and returns the net income in thousands of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-162",
        "python_solution": "",
        "ground_truth": null,
        "question": "The floral products seller, Lavender Bloom Corp., announced a yearly cost of goods sold amounting to $75 million. There was an increase in total assets by $55 million, though there was a decrease in inventory by $6 million. Meanwhile, total liabilities escalated by $45 million and there was a surge in accounts payable by $2 million. What would be the probable total of cash that the company paid to its vendors?",
        "output": [
            " Sure, let's break down the problem step-by-step:\n\n1. **Define the variables**:\n   - Cost of Goods Sold (COGS): $75 million\n   - Increase in Total Assets: $55 million\n   - Decrease in Inventory: $6 million\n   - Increase in Total Liabilities: $45 million\n   - Increase in Accounts Payable: $2 million\n\n2. **Calculate the cash paid to vendors**:\n   - When a company purchases inventory on credit, it records the expense in Cost of Goods Sold and an increase in Accounts Payable.\n   - When the company pays for these goods, Accounts Payable decreases and Cash decreases.\n\n   To find the cash paid to vendors, you can use the following logic:\n   - Net increase in Accounts Payable is added to COGS.\n   - The increase in total assets minus the decrease in inventory should be considered.\n   - The increase in total liabilities should be considered.\n\n   The formula for cash payments to vendors is:\n   \\[\n   \\text{Cash paid to vendors} = \\text{COGS} + \\text{Increase in Accounts Payable} - \\text{(Increase in Total Assets - Decrease in Inventory)} + \\text{Increase in Total Liabilities}\n   \\]\n\nApplying this formula in the Python program:\n\n```python\ndef solution():\n    # Define variables and their values\n    COGS = 75_000_000  # Cost of Goods Sold in millions\n    increase_in_total_assets = 55_000_000\n    decrease_in_inventory = 6_000_000\n    increase_in_total_liabilities = 45_000_000\n    increase_in_accounts_payable = 2_000_000\n\n    # Calculate the cash paid to vendors\n    cash_paid_to_vendors = (COGS + increase_in_accounts_payable\n                            - (increase_in_total_assets - decrease_in_inventory)\n                            + increase_in_total_li"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-163",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the equity's proportion in a business's capital structure, with a marginal tax rate of 30%, a weighted average cost of capital of 7.4%, a before-tax cost of debt of 5%, and a 10% cost of equity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    marginal_tax_rate = 0.30\n    weighted_average_cost_of_capital = 0.074\n    before_tax_cost_of_debt = 0.05\n    cost_of_equity = 0.10\n\n    # Do math calculation to get the answer\n    after_tax_cost_of_debt = before_tax_cost_of_debt * (1 - marginal_tax_rate)\n    weight_debt = (weighted_average_cost_of_capital - cost_of_equity) / (after_tax_cost_of_debt - cost_of_equity)\n    weight_equity = 1 - weight_debt\n\n    # return answer\n    return weight_equity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-164",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is R2R^2R2 if the estimate for beta, \u03b2^=0\\widehat\\beta = 0\u03b2\u200b=0?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beta_hat = 0\n\n    # Do math calculation to get the answer\n    R_squared = beta_hat ** 2\n\n    # return answer\n    return R_squared\n```\n\nExplanation: The question asks to compute \\( R^2 \\) given that the estimate for beta, \\( \\widehat{\\beta} = 0 \\). The formula for \\( R^2 \\) in a simple linear regression context is often given as \\( \\widehat{\\beta}^2 \\) when beta is the slope coefficient of the regression line. Therefore, if \\( \\widehat{\\beta} = 0 \\), then \\( R^2 = 0^2 = 0 \\).\n\nThe program defines the variable `beta_hat` and sets it to 0, computes `R_squared` by squaring `beta_hat`, and returns the result."
        ]
    },
    {
        "tables": [
            "| Current year's earnings per share | $2.50 |\n|---|---|\n| Dividend payout ratio | 60% |\n| Dividend growth rate expected during Year 1 and 2 | 25% |\n| Dividend growth rate expected after Year 2 | 5% |\n| Investors' required rate of return | 12% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-165",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of the common stock a stockholder has collected data on for possible investment in a business?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share = 2.50\n    dividend_payout_ratio = 0.60\n    dividend_growth_rate_year1_2 = 0.25\n    dividend_growth_rate_after_year2 = 0.05\n    required_rate_of_return = 0.12\n\n    # Do math calculation to get the answer\n    dividend_year_0 = earnings_per_share * dividend_payout_ratio\n    dividend_year_1 = dividend_year_0 * (1 + dividend_growth_rate_year1_2)\n    dividend_year_2 = dividend_year_1 * (1 + dividend_growth_rate_year1_2)\n    dividend_year_3 = dividend_year_2 * (1 + dividend_growth_rate_after_year2)\n\n    # Applying present value of dividends for Years 1 and 2\n    present_value_year1 = dividend_year_1 / (1 + required_rate_of_return)\n    present_value_year2 = dividend_year_2 / ((1 + required_rate_of_return) ** 2)\n\n    # Assuming a constant growth rate after Year 2\n    # Using the Gordon Growth Model for Year 3 onwards\n    gordon_growth_value = dividend_year_3 / (required_rate_of_return - dividend_growth_rate_after_year2)\n    present_value_year3_and_beyond = gordon_growth_value / ((1 + required_rate_of_return) ** 2)\n\n    # Sum of present values\n    total_value = present_value_year1 + present_value_year2 + present_value_year3_and_beyond\n\n    # Return the answer\n    return total_value\n\n# Call the solution function\nsolution()\n```\n\nThis program uses the provided financial data to first calculate the dividends for the first three years based on the given growth rates. It then discounts these dividends back to the present value"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-166",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, Bob Inc. acquired a production equipment for $60,000, which is anticipated to produce an annual cash inflow of $25,000 for a duration of six years. The company plans to depreciate the equipment over six years for accounting reasons. Nonetheless, the tax department approximates the useful life of the equipment to be 5 years. Assuming a tax rate of 40% and the equipment has no residual value. What would be the tax payable by Bob Inc. in the 6th year if they use the straight-line depreciation method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    equipment_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_depreciation_years = 6\n    tax_depreciation_years = 5\n    tax_rate = 0.40\n\n    # Calculate the straight-line depreciation for accounting purposes\n    annual_accounting_depreciation = equipment_cost / accounting_depreciation_years\n\n    # Calculate the straight-line depreciation for tax purposes\n    annual_tax_depreciation = equipment_cost / tax_depreciation_years\n\n    # In the 6th year, there is no tax depreciation because it is fully depreciated over 5 years\n    taxable_income_year_6 = annual_cash_inflow - annual_accounting_depreciation\n\n    # Calculate the tax payable\n    tax_payable_year_6 = taxable_income_year_6 * tax_rate\n\n    # return answer\n    return tax_payable_year_6\n\nprint(solution())\n```\n\n### Explanation:\n\n1. **Define Variables:**\n   - `equipment_cost` is the cost of the equipment ($60,000).\n   - `annual_cash_inflow` is the annual cash inflow generated by the equipment ($25,000).\n   - `accounting_depreciation_years` is the number of years over which the equipment is depreciated for accounting purposes (6 years).\n   - `tax_depreciation_years` is the number of years over which the equipment is depreciated for tax purposes (5 years).\n   - `tax_rate` is the tax rate (40% or 0.40).\n\n2. **Calculate Annual Depreciation:**\n   - `annual_accounting_depreciation` is the straight-line depreciation for accounting purposes.\n   - `annual_tax_depreciation` is the straight-line depre"
        ]
    },
    {
        "tables": [
            "|                            |                |\n|----------------------------|----------------|\n| Exhibit 1 Commercial Property Information |       |\n| Net operating income       | $700,000       |\n| Mortgage on property       | $9,000,000     |\n| Debt service               | $600,000       |\n| Market value of property   | $10,000,000    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-167",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson inquires from Smith about the most frequently utilized financial ratios for assessing private real estate investments, such as commercial property. Based on the data in Exhibit 1, what is the cash-on-cash return for the property that Smith requires analysis for?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 700000\n    debt_service = 600000\n\n    # Do math calculation to get the answer\n    cash_flow = net_operating_income - debt_service\n    cash_on_cash_return = cash_flow / debt_service\n\n    # return answer\n    return cash_on_cash_return\n```\n\nNote: The cash-on-cash return is calculated using the formula:\n\\[ \\text{Cash-on-Cash Return} = \\frac{\\text{Annual Cash Flow}}{\\text{Initial Cash Investment}} \\]\n\nIn this case, the initial cash investment is typically the amount of money initially invested. However, as only the debt service amount is provided and considering that the context of the problem suggests using this as a proxy for initial cash investment for simplicity, the formula will use the debt service as the denominator. If a different initial cash investment amount were provided, it should replace the debt service in the denominator."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-168",
        "python_solution": "",
        "ground_truth": null,
        "question": "By employing the Black-Scholes model, determine the worth of a European call option with these details: spot price = 100; strike rate = 110; risk-free interest rate = 10%; duration until expiration = 0.5 years; N(d1) is 0.457185 and N(d2) is 0.374163.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_price = 100\n    strike_price = 110\n    risk_free_rate = 0.10\n    time_to_expiration = 0.5\n    N_d1 = 0.457185\n    N_d2 = 0.374163\n\n    # Do math calculation to get the answer\n    call_option_value = (spot_price * N_d1) - (strike_price * N_d2 * (2.71828 ** (-risk_free_rate * time_to_expiration)))\n\n    # return answer\n    return call_option_value\n\n# Print the result to check\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| xor z 0 |     | 0.01 0.02 0.03 0.04 0.05 0.06 0.07                                   | 0.08 | 0.09 |\n| 0.10 |     | 0.5398 0.5438 0.5478 0.5517 0.5557 0.5596 0.5636 0.5675 0.5714 0.5753 |     |     |\n| 0.20 |     | 0.5793 0.5832 0.5871 0.5910 0.5948 0.5987 0.6026 0.6064 0.6103 0.6141 |     |     |\n| 0.30 |     | 0.6179 0.6217 0.6255 0.6293 0.6331 0.6368 0.6406 0.6443 0.6480 0.6517 |     |     |\n| 0.40 |     | 0.6554 0.6591 0.6628 0.6664 0.6700 0.6736 0.6772 0.6808 0.6844 0.6879 |     |     |\n| 1.10 |     | 0.8643 0.8665 0.8686 0.8708 0.8729 0.8749 0.8770 0.8790 0.8810 0.883  |     |     |\n| 1.20 | 0.8849 0.8869 0.8888 0.8907 0.8925 0.8944 0.8962 0.8980 0.8997 0.9015 |      |     |\n| 1.30 | 0.9032 0.9049 0.9066 0.9082 0.9099 0.9115 0.9131 0.9147 0.9162 0.9177 |      |     |\n| 1."
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-169",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the given extract from the cumulative distribution function for the standard normal random variable table: Cumulative Probabilities for a Standard Normal DistributionP(Z \u2264 x) = N(x) for x \u2265 0 or P(Z \u2264 z) = N(z) for z \u2265 0, If a variable follows a normal distribution with an average of 2.00 and a variance of 16.00, what's the likelihood of getting a value that is 7.40 or lower?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean = 2.00\n    variance = 16.00\n    std_dev = variance ** 0.5\n    value = 7.40\n\n    # Convert the given value to a z-score\n    z_score = (value - mean) / std_dev\n\n    # Define the table values for reference\n    table = {\n        0.10: [0.5398, 0.5438, 0.5478, 0.5517, 0.5557, 0.5596, 0.5636, 0.5675, 0.5714, 0.5753, 0.5793],\n        0.20: [0.5793, 0.5832, 0.5871, 0.5910, 0.5948, 0.5987, 0.6026, 0.6064, 0.6103, 0.6141, 0.6179],\n        0.30: [0.6179, 0.6217, 0.6255, 0.6293, 0.6331, 0.6368, 0.6406, 0.6443, 0.6480, 0.6517, 0.6554],\n        0.40: [0.6554, 0.6591, 0.6628, 0.6664, 0.6700, 0.6736, 0.6772, 0.6808, 0.6844, 0.6879, 0.6915],\n        1.10: [0.8643, 0.8665, 0.8686, 0.8"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-170",
        "python_solution": "",
        "ground_truth": null,
        "question": "If under LIFO, the ABC organization reported a COGS of $500,000, and an ending inventory of $600,000 in 2017, and it was noted in the footnotes that LIFO reserve increased by $10,000, what would be its cost of goods sold if ABC organization switched its accounting method from LIFO to FIFO?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    COGS_LIFO = 500000\n    ending_inventory_LIFO = 600000\n    LIFO_reserve_increase = 10000\n\n    # Calculate the adjusted inventory under FIFO\n    ending_inventory_FIFO = ending_inventory_LIFO + LIFO_reserve_increase\n\n    # Calculate COGS under FIFO\n    COGS_FIFO = COGS_LIFO - LIFO_reserve_increase\n\n    # return answer\n    return COGS_FIFO\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis Python program calculates the cost of goods sold (COGS) for the ABC organization if it switched its accounting method from LIFO to FIFO. The program first defines the relevant variables: COGS under LIFO, ending inventory under LIFO, and the increase in LIFO reserve. It then adjusts the ending inventory to reflect the FIFO method by adding the LIFO reserve increase and calculates the COGS under FIFO by subtracting the LIFO reserve increase from the COGS under LIFO. Finally, it returns the calculated COGS under FIFO."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-171",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that in the futures market, the 1-year forward rate stands at NZD/AUD 1.1079. Given that the yearly interest rate is 2.5% in Australia (AUD) and 3% in New Zealand (NZD), what would be the NZD/AUD spot rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.1079\n    australia_interest_rate = 0.025\n    new_zealand_interest_rate = 0.030\n\n    # Do math calculation to get the answer\n    spot_rate = forward_rate * (1 - new_zealand_interest_rate) / (1 - australia_interest_rate)\n\n    # return answer\n    return spot_rate\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-172",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a credit commitment totals $10 million, with $8.5 million currently still due, and there's a 1% chance of default with a recovery rate of 40%, what's the predicted loss for the credit?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_commitment = 10000000  # $10 million\n    amount_due = 8500000        # $8.5 million\n    default_probability = 0.01  # 1% chance of default\n    recovery_rate = 0.40        # 40% recovery rate\n\n    # Do math calculation to get the answer\n    expected_loss = amount_due * default_probability * (1 - recovery_rate)\n\n    # return answer\n    return expected_loss\n\n# Testing the solution\nprint(solution())\n```\n\nThe Python program calculates the expected loss for the credit by multiplying the amount due by the probability of default and the fraction of the amount that wouldn't be recovered in case of default. The `solution` function returns this expected loss value."
        ]
    },
    {
        "tables": [
            "| Height interval | Absolute Frequency |\n|----------------|---------------------|\n| 155~160         | 10                       |\n| 160~165         | 20                       |\n| 165~170         | 30                       |\n| 170~175         | 24                       |\n| 175~180         | 10                       |\n| 180~185         | 6                         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-173",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the relative frequency of the height range \"170 ~175\" in the student height distribution for the class?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    height_range_frequency = {\n        \"155~160\": 10,\n        \"160~165\": 20,\n        \"165~170\": 30,\n        \"170~175\": 24,\n        \"175~180\": 10,\n        \"180~185\": 6\n    }\n\n    total_frequency = sum(height_range_frequency.values())\n    target_frequency = height_range_frequency[\"170~175\"]\n\n    # Do math calculation to get the answer\n    relative_frequency = target_frequency / total_frequency\n\n    # return answer\n    return relative_frequency\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-174",
        "python_solution": "",
        "ground_truth": null,
        "question": "Calculate the forward price of a 6-month forward contract on a bond that is priced at $1,058, has a biannual coupon payment of $30 and had its last payment three months ago, given a continuous interest rate of 5%.",
        "output": [
            " Sure, let's generate a Python program to calculate the forward price of a 6-month forward contract on a bond.\n\nTo solve this problem, we need to:\n1. Calculate the present value of the coupon payment.\n2. Adjust the bond price for the accrued interest since the last payment.\n3. Calculate the forward price using the adjusted bond price and the interest rate.\n\nHere's the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    bond_price = 1058  # Current price of the bond\n    biannual_coupon_payment = 30  # Biannual coupon payment\n    continuous_interest_rate = 0.05  # Continuous interest rate\n    time_to_maturity = 0.5  # 6-month forward contract\n    months_since_last_payment = 3  # Last payment was 3 months ago\n    coupon_payment_interval = 6  # Biannual coupon payment interval in months\n\n    # Calculate the accrued interest\n    accrued_interest = (months_since_last_payment / coupon_payment_interval) * biannual_coupon_payment\n\n    # Adjust the bond price for accrued interest\n    adjusted_bond_price = bond_price + accrued_interest\n\n    # Calculate the forward price using the formula for forward contract valuation\n    forward_price = adjusted_bond_price * math.exp(continuous_interest_rate * time_to_maturity)\n\n    return forward_price\n\n# Test the solution\nprint(solution())\n```\n\nThis program will calculate and return the forward price of the bond given the parameters provided."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-175",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Lawson Company has recently paid a dividend of $1.75 per share. If the necessary annual return rate is 12.3 percent and dividends are predicted to consistently grow at 9.2 percent per year without end, what is the intrinsic worth of Lawson Company stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend_per_share = 1.75\n    required_return_rate = 0.123\n    growth_rate = 0.092\n\n    # Do math calculation to get the answer\n    intrinsic_value = dividend_per_share * (1 + growth_rate) / (required_return_rate - growth_rate)\n\n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [
            "|        | Spot Rate | Expected Spot Rate in One Year |\n|--------|-----------|------------------------|\n| USD/EUR| 1.3960    | 1.3860                 |\n| USD/CAD| 1.0110    | 1.0300                 |\n| EUR/GBP| 1.2850    | 1.2790                 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-176",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to a study carried out by a broker, what is the predicted increase (%) in value of the Canadian dollar (CAD) compared to the British pound (GBP)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    usd_cad_current = 1.0110\n    usd_cad_future = 1.0300\n    eur_gbp_current = 1.2850\n    eur_gbp_future = 1.2790\n    usd_eur_current = 1.3960\n    usd_eur_future = 1.3860\n\n    # Calculate current and future USD/GBP rates\n    usd_gbp_current = usd_cad_current * eur_gbp_current / usd_eur_current\n    usd_gbp_future = usd_cad_future * eur_gbp_future / usd_eur_future\n\n    # Calculate the change in value of the Canadian Dollar (CAD) compared to the British Pound (GBP)\n    cad_gbp_change = ((1 / usd_gbp_future) - (1 / usd_gbp_current)) / (1 / usd_gbp_current) * 100\n\n    # Return the percentage increase\n    return cad_gbp_change\n\n# Execute the function to get the solution\nsolution()\n```\n\nThis program calculates the predicted increase in the value of the Canadian dollar (CAD) compared to the British pound (GBP) based on the provided spot rates and expected spot rates."
        ]
    },
    {
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity |\n|------|-------------|------------------|\n| A    | 5%          | 2 years          |\n| B    | 3%          | 2 years          |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-177",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering two bonds that pay interest annually, what is the price difference between Bond 1 and Bond 2 per 100 of par value at a market discount rate of 4%?",
        "output": [
            " Certainly! To determine the price difference between Bond A and Bond B per 100 of par value given a market discount rate of 4%, we need to calculate the present value of their cash flows. Let's derive the solution step by step and then convert it into a Python program.\n\n1. **Calculate the cash flows for each bond:**\n\n    For Bond A (5% coupon rate, 2-year maturity):\n    - Coupon payment per period: \\(5\\% \\times 100 = 5\\)\n    - Principal repayment at maturity: 100\n\n    For Bond B (3% coupon rate, 2-year maturity):\n    - Coupon payment per period: \\(3\\% \\times 100 = 3\\)\n    - Principal repayment at maturity: 100\n\n2. **Discount each cash flow to present value using the market discount rate (4%):**\n\n    Present Value (PV) of a cash flow is given by \\( PV = \\frac{CF}{(1 + r)^t} \\), where \\(CF\\) is the cash flow, \\(r\\) is the discount rate, and \\(t\\) is the time in years.\n\n    For Bond A:\n    - PV of year 1 coupon: \\(\\frac{5}{(1 + 0.04)^1}\\)\n    - PV of year 2 coupon: \\(\\frac{5}{(1 + 0.04)^2}\\)\n    - PV of year 2 principal: \\(\\frac{100}{(1 + 0.04)^2}\\)\n    - Total PV of Bond A = \\(\\frac{5}{(1 + 0.04)^1} + \\frac{5}{(1 + 0.04)^2} + \\frac{100}{(1 + 0.04)^2}\\)\n\n    For Bond B:\n    - PV of year 1 coupon: \\(\\frac{3}{(1 + 0.04)^1}\\)\n    - PV of year 2 coupon: \\(\\frac{3}{(1 + 0.04)^2}\\)\n    - PV of year 2 principal: \\"
        ]
    },
    {
        "tables": [
            "|                     | Bond A       | Bond B       | Bond C       |\n|---------------------|--------------|--------------|--------------|\n| Time to maturity (years) | 10     | 6     | 4     |\n| Par value         | $10,000,000  | $10,000,000  | $10,000,000  |\n| Market value      | $9,323,381   | $11,189,092  | $10,000,000  |\n| Annualized modified duration  | 7.3105  | 4.6880  | 3.4370  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-178",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the data on three securities: Security X, Security Y, and Security Z. A dividend income portfolio includes Security X and Security Y. If an additional $10 million is invested into the portfolio to acquire Security Z, what will be the yearly modified duration of the portfolio?",
        "output": [
            " Sure, let's define the variables and the necessary calculations to determine the yearly modified duration of the new portfolio. We will use the formula for the weighted average modified duration based on the market values of the securities.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    security_x_market_value = 9323381\n    security_y_market_value = 11189092\n    security_z_market_value = 10000000\n\n    security_x_duration = 7.3105\n    security_y_duration = 4.6880\n    security_z_duration = 3.4370\n\n    additional_investment = 10000000\n\n    # Calculate the total market value of the portfolio after the additional investment\n    total_market_value = security_x_market_value + security_y_market_value + additional_investment\n\n    # Calculate the weighted average modified duration of the portfolio\n    weighted_modified_duration = (\n        (security_x_market_value / total_market_value) * security_x_duration +\n        (security_y_market_value / total_market_value) * security_y_duration +\n        (additional_investment / total_market_value) * security_z_duration\n    )\n\n    # Return the answer\n    return weighted_modified_duration\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the weighted average modified duration of the portfolio by considering the market values and modified durations of Security X, Security Y, and Security Z after an additional investment of $10 million. The `solution` function will return the yearly modified duration of the new portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-179",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the base value is $20 at expiration, the strike price is $18, what is the worth of the European put?",
        "output": [
            " Certainly! Here's a Python program to calculate the worth of a European put option based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    base_value_at_expiration = 20\n    strike_price = 18\n\n    # Do math calculation to get the answer\n    # The worth of a European put option at expiration is the difference between the strike price and the base value,\n    # if that difference is positive; otherwise, it is zero.\n    intrinsic_value = max(strike_price - base_value_at_expiration, 0)\n\n    # return answer\n    return intrinsic_value\n```\n\nThis program calculates the intrinsic value of a European put option, which is the maximum of 0 and the difference between the strike price and the base value at expiration."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| Net income  | \\$1,000,000.00  |\n| Debt outstanding with a coupon rate of 4%  | \\$5,000,000.00  |\n| Preferred stocks with dividend rate of 4%  | \\$1,000,000.00  |\n| Tax rate  | 35%  |\n| Average weighted number of shares issued  | 500,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-180",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher gathered information about a corporation wherein the preferred shares can be transformed into 10,000 ordinary shares and the debt cannot be converted. What is the diluted earnings per share?",
        "output": [
            " Certainly! Let's break down the problem and outline the steps required to calculate the diluted earnings per share (EPS).\n\n1. **Calculate the earnings available for common shareholders**:\n   - Subtract the interest expense on debt from net income.\n   - Subtract the preferred dividend.\n\n2. **Adjust for taxes**:\n   - Subtract the tax expense, calculated as (interest expense - preferred dividend) * tax rate.\n\n3. **Calculate the diluted number of shares**:\n   - Add the number of shares that would be issued if the preferred shares are converted.\n\n4. **Calculate the diluted EPS**:\n   - Divide the adjusted earnings by the diluted number of shares.\n\nGiven:\n- Net income: \\$1,000,000\n- Debt outstanding: \\$5,000,000 with a 4% coupon rate (interest expense)\n- Preferred stocks: \\$1,000,000 with a 4% dividend rate\n- Tax rate: 35%\n- Average weighted number of shares issued: 500,000\n- Preferred shares can be converted into 10,000 ordinary shares\n\nLet's write the Python program to calculate the diluted EPS:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 1000000\n    debt = 5000000\n    preferred_stocks = 1000000\n    interest_rate = 0.04\n    dividend_rate = 0.04\n    tax_rate = 0.35\n    shares_issued = 500000\n    preferred_conversion_shares = 10000\n\n    # Calculate interest expense and preferred dividend\n    interest_expense = debt * interest_rate\n    preferred_dividend = preferred_stocks * dividend_rate\n\n    # Calculate earnings available for common shareholders\n    earnings_available = net_income - interest_expense - preferred_dividend\n\n    # Adjust for taxes\n    tax_exp"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-181",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 225 days in a year, what is the highest number of daily losses that can go beyond the 1-day 99% VaR acceptable in a 1-year backtest for a financial risk analyst to determine, with 95% certainty, that the model is properly calibrated?",
        "output": [
            " Certainly, let's write a Python program to solve the given financial question. To determine the highest number of daily losses that can go beyond the 1-day 99% VaR acceptable in a 1-year backtest, we need to use the statistical properties related to Value at Risk (VaR).\n\nGiven:\n- Number of days in a year (D) = 225\n- Confidence level for VaR (c_var) = 99%\n- Desired model calibration confidence (alpha) = 95%\n\nWe need to find the maximum acceptable number of days where the losses exceed the 1-day 99% VaR over a 1-year period.\n\nThe formula to determine the maximum number of exceptions (E) that can be observed without rejecting the model at the given confidence levels is derived from the Binomial test approximation or through the use of Poisson distribution, but here we will use a simpler approach for clarity.\n\nLet:\n- D represent the number of days in the year.\n- c_var/100 represent the expected exceedance rate per day (1-p where p = 1% or 0.01).\n- alpha represent the confidence level for determining model calibration (95%).\n\nTo find the threshold E (maximum number of exceptions), we use an approximation based on the normal distribution:\n\\[ \\text{E} = D \\times \\Phi^{-1}(1 - \\alpha) \\times \\sqrt{\\frac{(1 - p) \\times p}{D}} + D \\times p \\]\n\nHere \\( \\Phi^{-1}(x) \\) is the inverse of the cumulative distribution function of the standard normal distribution at x.\n\nThe Python program to calculate this is as follows:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    D = 225  # Number of days in a year\n    p = 0.01  # Expected exceedance rate (1% for 99% VaR)\n    alpha = 0.95  # Confidence level for model calibration (95%)\n\n    # Do math calculation to get the answer\n    z_score = norm.ppf(1 - alpha)\n   "
        ]
    },
    {
        "tables": [
            "| estimated beta of TMT Inc. against the S&P 500 Index | 1.4   |\n|------------------------------------------------|-------|\n| 10-year Treasury bond yield                             | 3.5% |\n| Return on S&P 500 Index used as a proxy for the market | 8%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-182",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is contemplating incorporating ABC Corp. into his portfolio. The last dividend payment of the company was 1.45 per share. He observes that the company's dividends have experienced an average growth rate of 6 percent. Using the data provided below, could you calculate the stock\u2019s value of ABC Corp.?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    estimated_beta = 1.4\n    treasury_bond_yield = 0.035\n    market_return = 0.08\n    last_dividend = 1.45\n    dividend_growth_rate = 0.06\n\n    # Calculate required cost of equity using CAPM\n    required_return = treasury_bond_yield + estimated_beta * (market_return - treasury_bond_yield)\n\n    # Calculate the stock's value using the Gordon Growth Model\n    stock_value = last_dividend * (1 + dividend_growth_rate) / (required_return - dividend_growth_rate)\n\n    # return answer\n    return stock_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-183",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, the quarterly returns for the S&P 500 were 8%, -5%, 3% and 1%. What is the S&P 500's quarterly geometric mean return?",
        "output": [
            " Here's a Python program to calculate the S&P 500's quarterly geometric mean return based on the given quarterly returns:\n\n```python\ndef solution():\n    # Define variables name and value\n    q1_return = 0.08  # 8%\n    q2_return = -0.05 # -5%\n    q3_return = 0.03  # 3%\n    q4_return = 0.01  # 1%\n\n    # Do math calculation to get the answer\n    returns = [1 + q1_return, 1 + q2_return, 1 + q3_return, 1 + q4_return]\n    geometric_mean = (returns[0] * returns[1] * returns[2] * returns[3]) ** (1/4) - 1\n\n    # return answer\n    return geometric_mean\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the quarterly returns, converts them into multiplicative returns, calculates the geometric mean, and then returns the result. The `solution` function can be called to get the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-184",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher establishes that 60% of all US retirement funds possess hedge funds. In assessing this probability, a random array of 10 US retirement funds is selected. Utilizing the binomial probability function, what is the likelihood that precisely 6 of the 10 organizations in the group possess hedge funds?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    from scipy.stats import binom\n\n    # Parameters for the binomial distribution\n    n = 10  # Number of trials\n    p = 0.6 # Probability of success on each trial\n    k = 6   # Number of successes\n\n    # Calculate the binomial probability\n    probability = binom.pmf(k, n, p)\n\n    # return answer\n    return probability\n```\n\nThe above Python program calculates the likelihood that precisely 6 out of the 10 randomly selected US retirement funds possess hedge funds, using the binomial probability function. The `binom.pmf` function from the `scipy.stats` module is utilized to compute the probability mass function for a binomial distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-185",
        "python_solution": "",
        "ground_truth": null,
        "question": "A finance expert is working out the beta for a collection of large-cap utility firm shares. They establish that the correlation between the portfolio's return and the benchmark's return stands at 0.7, the portfolio return's volatility is 6.5%, and the benchmark return's volatility is 5.0%. What is the portfolio's beta in relation to its benchmark?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.7\n    portfolio_volatility = 6.5 / 100\n    benchmark_volatility = 5.0 / 100\n\n    # Do math calculation to get the answer\n    beta = correlation * (portfolio_volatility / benchmark_volatility)\n\n    # return answer\n    return beta\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-186",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the odds of Jack Frost correctly answering more than 3 questions on a challenging multiple choice test that contains 5 questions, each with four nearly identical options, if he's answering randomly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    num_questions = 5\n    choices_per_question = 4\n    threshold_correct = 4  # Jack needs to answer more than 3 questions correctly\n\n    # Calculate probability of answering each question correctly\n    prob_correct = 1 / choices_per_question\n\n    # Using binomial probability formula to calculate the probability of getting at least 'threshold_correct' correct\n    from math import comb\n\n    prob_more_than_3 = 0\n    for k in range(threshold_correct, num_questions + 1):\n        prob_k = comb(num_questions, k) * (prob_correct ** k) * ((1 - prob_correct) ** (num_questions - k))\n        prob_more_than_3 += prob_k\n\n    # return answer\n    return prob_more_than_3\n\n# Call the function to get the answer\nprint(solution())\n```\nThis program calculates the probability of Jack Frost correctly answering more than 3 questions on a challenging multiple choice test with 5 questions, each with four nearly identical options, if he's answering randomly.\n\nThe function `solution` first defines necessary variables, then calculates the probability of answering each question correctly. It then uses the binomial probability formula to determine the likelihood of getting at least 4 questions right (more than 3). The result is returned and printed."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-187",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial consultant is studying the potential anticipated returns of a novel fund created to imitate the directional shifts of the China Shanghai Composite Stock Market Index (SHANGHAI), but with double the volatility of the index. SHANGHAI has an anticipated yearly return of 7.6% and a volatility of 14.0%, and the risk-free rate is 3.0% annually. If the correlation between the fund\u2019s returns and the index's returns is 1.0, what would be the projected return of the fund according to the CAPM?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    SHANGHAI_return = 0.076\n    SHANGHAI_volatility = 0.140\n    risk_free_rate = 0.030\n    correlation = 1.0\n\n    # Calculate the fund's volatility (double the index's volatility)\n    fund_volatility = 2 * SHANGHAI_volatility\n\n    # Calculate the Capital Market Line slope (market risk premium / market volatility)\n    market_risk_premium = SHANGHAI_return - risk_free_rate\n    market_beta = correlation * (fund_volatility / SHANGHAI_volatility)\n\n    # Projected return of the fund according to the CAPM\n    projected_return = risk_free_rate + market_beta * market_risk_premium\n\n    return projected_return\n\n# Example usage\nprint(solution())\n```\n\n**Explanation:**\n1. **SHANGHAI_return:** The anticipated yearly return of the index, which is 7.6%.\n2. **SHANGHAI_volatility:** The yearly volatility of the index, which is 14.0%.\n3. **risk_free_rate:** The annual risk-free rate, which is 3.0%.\n4. **correlation:** The perfect positive correlation between the fund and the index, which is 1.0.\n\n**Steps taken in the program:**\n1. Calculate the fund's volatility by doubling the index's volatility.\n2. Calculate the market risk premium by subtracting the risk-free rate from the index return.\n3. Compute the market beta, which involves multiplying the correlation by the ratio of the fund's volatility to the index's volatility.\n4. Compute the projected return of the fund according to the Capital Asset Pricing Model (CAPM).\n\nThe `solution` function returns the projected return of the fund."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-188",
        "python_solution": "",
        "ground_truth": null,
        "question": "The bond's clean price was set at $1,000. The transaction occurred between coupon dates, with accrued interest equating to $35.50 per bond. What is the bond's dirty price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    clean_price = 1000\n    accrued_interest = 35.50\n\n    # Do math calculation to get the answer\n    dirty_price = clean_price + accrued_interest\n\n    # return answer\n    return dirty_price\n```"
        ]
    },
    {
        "tables": [
            "| | Cdn $ millions |\n| --- | --- |\n| Cash flow from operating activities | 105.9 |\n| Cash flow from investing activities | (11.8) |\n| Cash flow from financing activities | 46.5 |\n| Net change in cash for the year | 140.6 |\n| Interest paid (included in CFO) | 22.4 |\n| Taxes paid (tax rate of 30%) | 18.0 |\n| Total debt, end of year | 512.8 |"
        ],
        "topic": "Accounting",
        "question_id": "test-189",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the data collected by a researcher, what is the company's cash flow debt coverage ratio for this year?",
        "output": [
            " To determine the company's cash flow debt coverage ratio, we first need to calculate the net cash flow. The formula for the cash flow debt coverage ratio is typically the net cash flow divided by the total debt at the end of the year. Given the data, we will use the \"Cash flow from operating activities,\" \"Cash flow from investing activities,\" and \"Cash flow from financing activities\" to calculate the net cash flow.\n\nHere's the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash_flow_from_operating_activities = 105.9  # in Cdn $ millions\n    cash_flow_from_investing_activities = -11.8  # in Cdn $ millions\n    cash_flow_from_financing_activities = 46.5   # in Cdn $ millions\n    total_debt_end_of_year = 512.8               # in Cdn $ millions\n\n    # Do math calculation to get the answer\n    net_cash_flow = (\n        cash_flow_from_operating_activities +\n        cash_flow_from_investing_activities +\n        cash_flow_from_financing_activities\n    )\n    cash_flow_debt_coverage_ratio = net_cash_flow / total_debt_end_of_year\n\n    # return answer\n    return cash_flow_debt_coverage_ratio\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the net cash flow by summing the cash flows from operating, investing, and financing activities. It then calculates the cash flow debt coverage ratio by dividing the net cash flow by the total debt at the end of the year, and finally returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-190",
        "python_solution": "",
        "ground_truth": null,
        "question": "On 1 January 2015, a corporation releases $1,000,000 nominal value of 10-year bonds, when the market interest rate for bonds with similar risk and terms is 5%. These bonds yield 6% interest yearly on 31 December. What is the recorded value of these outstanding bonds on the balance sheet at the time they were issued?",
        "output": [
            " Sure! Let's break down the problem:\n\n1. The corporation issues bonds with a nominal value of $1,000,000.\n2. The market interest rate is 5%.\n3. The bonds yield 6% interest yearly.\n\nTo find the recorded value of these bonds on the balance sheet, we need to calculate the present value of the future cash flows (which include both the yearly interest payments and the principal repayment at the end of 10 years) using the market interest rate.\n\nHere is the Python program to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    nominal_value = 1000000\n    market_interest_rate = 0.05\n    bond_interest_rate = 0.06\n    years = 10\n\n    # Calculate the yearly interest payment\n    yearly_interest_payment = nominal_value * bond_interest_rate\n\n    # Calculate the present value of the yearly interest payments\n    pv_yearly_interest_payments = yearly_interest_payment * (1 - (1 + market_interest_rate) ** -years) / market_interest_rate\n\n    # Calculate the present value of the principal repayment\n    pv_principal_repayment = nominal_value / (1 + market_interest_rate) ** years\n\n    # Calculate the recorded value of the bonds\n    recorded_value = pv_principal_repayment + pv_yearly_interest_payments\n\n    # return answer\n    return recorded_value\n\n# Call the function\nprint(solution())\n```\n\nThis program calculates the present value of the yearly interest payments and the principal repayment separately, and then sums them to get the recorded value of the bonds on the balance sheet."
        ]
    },
    {
        "tables": [
            "| Year | End_of-Year Payment |\n|------|---------------------|\n| 1    | $ 100,000           |\n| 2    | $ 150,000           |\n| 3    | $ 200,000           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-191",
        "python_solution": "",
        "ground_truth": null,
        "question": "A freelancer commences a job today which is projected to go on for three years. If he anticipates investing these sums at an annual interest rate of 3%, compounded annually until his retirement a decade from now, what is the worth after 10 years, keeping in mind his payment plan encompasses the following?",
        "output": [
            " Sure! To calculate the future value of the freelancer's payments considering compound interest, we need to apply the formula for the future value of an annuity due since the payments occur at the end of each year. We'll calculate the future value of each payment and then sum them up.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    payments = [100000, 150000, 200000]\n    interest_rate = 0.03  # 3% annual interest rate\n    years_until_retirement = 10\n\n    # Calculate future value of each payment compounded until retirement\n    future_values = []\n    for i, payment in enumerate(payments):\n        years_till_retirement = years_until_retirement - (i + 1)  # end-of-year payment\n        future_value = payment * (1 + interest_rate) ** years_till_retirement\n        future_values.append(future_value)\n\n    # Sum up all future values to get the total worth after 10 years\n    total_worth = sum(future_values)\n\n    # return answer\n    return total_worth\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program defines the payments for each year, the interest rate, and the number of years until retirement. It then calculates the future value of each payment considering the time until retirement and sums them up to get the total worth after 10 years."
        ]
    },
    {
        "tables": [
            "| Position (par value) | $100,000,000 |\n|---|---|\n| Flat price | 97.1251 |\n| Accrued interest | 0.4392 |\n| Macaulay duration | 8.586 |\n| Annual modified duration | 8.450 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-192",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data collected by a researcher, what is the monetary duration of the bond position?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 100000000  # Position (par value) in dollars\n    annual_modified_duration = 8.450  # Annual modified duration\n\n    # Do math calculation to get the answer\n    # Monetary Duration = Par Value * Annual Modified Duration\n    monetary_duration = par_value * annual_modified_duration\n\n    # return answer\n    return monetary_duration\n```\n\nThis program calculates the monetary duration of the bond position by multiplying the par value by the annual modified duration and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-193",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Second-Hand Bookshop run by Susan generates its financial statements in line with IFRS. Inventory was obtained for \u00a31 million and afterwards reduced to \u00a3550,000. However, it was later found out that one of the books is a rare collector's piece, and the inventory is now approximated to be worth \u00a33 million. The inventory is probably listed on the balance sheet at:",
        "output": [
            " Sure, let's break down the question to formulate the solution. According to IFRS (International Financial Reporting Standards), inventory is generally valued at the lower of cost and net realizable value.\n\nIn this case:\n1. The initial cost of the inventory is \u00a31 million.\n2. The inventory was reduced to \u00a3550,000, which seems to acknowledge a reduction in value.\n3. The estimated current worth of the inventory is \u00a33 million due to the discovery of a rare collector's piece.\n\nThe inventory should be listed on the balance sheet at the lower of:\n- The initial cost of \u00a31 million, or\n- The reduced value of \u00a3550,000.\n\nSince the inventory was reduced to \u00a3550,000, that is the value that should be listed on the balance sheet.\n\nNow, let's generate the Python program to calculate and return this value:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 1000000\n    reduced_value = 550000\n\n    # According to IFRS, the inventory should be listed at the lower of cost and net realizable value\n    inventory_value = min(initial_cost, reduced_value)\n\n    # return answer\n    return inventory_value\n```\n\nThis program defines the initial cost and the reduced value of the inventory and then calculates the lower of these two values, which would be the value listed on the balance sheet."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-194",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that there is no need for an industry risk adjustment, use the build-up method to determine the equity discount rate for a small business. Here's the information you need:\u2022 5.0 percent is the equity risk premium\u2022 The mid-cap equity risk premium is 3.5 percent\u2022 A small stock risk premium is 4.2 percent\u2022 The income return on long-term bonds is 5.1 percent\u2022 The total return on intermediate-term bonds stands at 5.3 percent\u2022 3.0 percent is the company-specific risk premium\u2022 As of the valuation date, the 20-year Treasury bond yield is 4.5 percent.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    equity_risk_premium = 0.050\n    mid_cap_equity_risk_premium = 0.035\n    small_stock_risk_premium = 0.042\n    long_term_bond_income_return = 0.051\n    intermediate_term_bond_total_return = 0.053\n    company_specific_risk_premium = 0.030\n    treasury_bond_yield = 0.045\n\n    # Do math calculation to get the answer\n    # Equity discount rate = Risk-free rate + Equity risk premium + Mid-cap risk premium + Small stock premium + Company-specific risk premium\n    equity_discount_rate = (treasury_bond_yield + equity_risk_premium +\n                            mid_cap_equity_risk_premium + small_stock_risk_premium +\n                            company_specific_risk_premium)\n\n    # Return the answer\n    return equity_discount_rate\n\n# Testing the solution function\nprint(solution())\n```\n\nThis program calculates the equity discount rate using the build-up method based on the given financial variables. The calculated equity discount rate is then returned. The `solution` function encapsulates the entire process and can be called to get the desired result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-195",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an average year, 5% of all enterprise leaders are dismissed due to \"performance\" issues. Presume that the leader's performance is evaluated on the basis of share performance and that 50% of shares earn above-average returns or showcase \"good\" performance. From observed data, 30% of all enterprise leaders who were dismissed demonstrated \"good\" performance. Applying Bayes' theorem, what is the likelihood that an enterprise leader will be dismissed given \"good\" performance? (Hint, let P(A) be the likelihood of an enterprise leader being dismissed, P(B) be the probability of a \"good\" performance rating, P(B I A) represent the possibility of a \"good\" performance rating given that the enterprise leader was dismissed, and P(A I B) signify the probability of the enterprise leader being dismissed given a \"good\" performance rating.)",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.05   # Probability of an enterprise leader being dismissed (P(A))\n    P_B = 0.5    # Probability of a \"good\" performance rating (P(B))\n    P_B_given_A = 0.3  # Probability of a \"good\" performance rating given that the enterprise leader was dismissed (P(B|A))\n\n    # Do math calculation to get the answer using Bayes' theorem\n    P_A_intersect_B = P_B_given_A * P_A  # P(A and B) = P(B|A) * P(A)\n    P_A_given_B = P_A_intersect_B / P_B   # P(A|B) = P(A and B) / P(B)\n\n    # return answer\n    return P_A_given_B\n\n# Execute the function to get the result\nresult = solution()\nprint(f\"The likelihood that an enterprise leader will be dismissed given 'good' performance is: {result:.4f}\")\n```\n\nThis program defines the required probabilities, uses Bayes' theorem to compute the probability of an enterprise leader being dismissed given \"good\" performance, and then returns the result."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n| --- | --- |\n| 1-year | 5% |\n| 2-year | 6% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-196",
        "python_solution": "",
        "ground_truth": null,
        "question": "The maturity time for Bond B is 2 years with annual interest payments and an 8% coupon rate. The spot rates are given as follows: Compute the cost of Bond B using these spot rates.",
        "output": [
            " Certainly! To calculate the cost of Bond B using the spot rates, you need to account for the present value of the coupon payments and the present value of the face value of the bond at maturity. The given spot rates are used to discount the future cash flows.\n\nHere is the Python program to compute the cost of Bond B using the provided spot rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming the face value of the bond is $1000\n    coupon_rate = 0.08  # 8% coupon rate\n    spot_rate_1_year = 0.05  # 5% spot rate for the first year\n    spot_rate_2_year = 0.06  # 6% spot rate for the second year\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n\n    # Calculate the present value of the coupon payments\n    pv_coupon_1 = annual_coupon_payment / (1 + spot_rate_1_year)\n    pv_coupon_2 = annual_coupon_payment / (1 + spot_rate_2_year)**2  # Discount the second payment using the second year spot rate\n\n    # Calculate the present value of the face value at maturity\n    pv_face_value = face_value / (1 + spot_rate_2_year)**2\n\n    # Sum the present values to get the cost of Bond B\n    cost_of_bond_b = pv_coupon_1 + pv_coupon_2 + pv_face_value\n\n    # Return the answer\n    return cost_of_bond_b\n\n# Execute the solution function to get the result\nresult = solution()\nprint(\"The cost of Bond B is:\", result)\n```\n\nThis program calculates the present value of the coupon payments and the face value using the provided spot rates, and sums them to give the cost of Bond B. The resulting cost is printed when the program is executed."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-197",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say a random variable follows a standard distribution with a mean value of 80 and a deviation standard of 24. What is the percentage of this distribution that does not lie between 32 and 116?",
        "output": [
            " ```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables\n    mean = 80\n    std_dev = 24\n\n    # Calculate the Z-scores for the boundaries\n    z1 = (32 - mean) / std_dev\n    z2 = (116 - mean) / std_dev\n\n    # Calculate the probabilities\n    probability_below_32 = stats.norm.cdf(z1)\n    probability_above_116 = 1 - stats.norm.cdf(z2)\n\n    # Sum the probabilities to get the total probability not in the range [32, 116]\n    total_probability = probability_below_32 + probability_above_116\n\n    # Convert probability to percentage\n    percentage = total_probability * 100\n\n    # Return the percentage\n    return percentage\n\n# Example usage\nprint(solution())\n```\n\nThis Python program uses the `scipy.stats` library to calculate the cumulative distribution function (CDF) for the given mean and standard deviation. It then computes the probabilities outside the range [32, 116] and converts this probability to a percentage. Finally, it returns the percentage as the answer."
        ]
    },
    {
        "tables": [
            "| Items | price$ |\n| --- | --- |\n| replacement cost | 50 |\n| original costs | 41 |\n| selling price | 45 |\n| normal profit margin | 10% |\n| selling costs | 5 |"
        ],
        "topic": "Accounting",
        "question_id": "test-198",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under US GAAP, how should the cost of running shoes be recorded by the Goodluck Company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_costs = 41\n    selling_price = 45\n    normal_profit_margin = 0.10\n    selling_costs = 5\n\n    # Calculate the net realizable value (NRV)\n    nrv = selling_price - selling_costs\n\n    # Calculate the lower of cost and NRV\n    lower_of_cost_and_nrv = min(original_costs, nrv)\n\n    # Return the lower of cost or NRV as the recorded cost\n    return lower_of_cost_and_nrv\n```\n\nUnder US GAAP (Generally Accepted Accounting Principles), the cost of the running shoes should be recorded at the lower of cost or net realizable value (NRV). The NRV is calculated as the selling price minus the selling costs. The program above calculates this value and compares it to the original costs to determine the appropriate recorded cost."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-199",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio manager is looking to hedge the interest risk of a bond position with a 5-year key rate exposure of $9.84. What would be the amount of face value employed to hedge if a hedge instrument with a similar 5-year key rate exposure of 4.12 per $100 of face value can be utilized?",
        "output": [
            " Certainly! To solve the problem, we follow these steps:\n\n1. Identify the bond position's 5-year key rate exposure.\n2. Identify the hedge instrument's 5-year key rate exposure per $100 of face value.\n3. Calculate the required face value of the hedge instrument to match the bond position's exposure.\n\nHere is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_exposure = 9.84\n    hedge_exposure_per_100_face_value = 4.12\n\n    # Do math calculation to get the answer\n    face_value_needed = (bond_exposure / hedge_exposure_per_100_face_value) * 100\n\n    # return answer\n    return face_value_needed\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the face value of the hedge instrument required to match the key rate exposure of the bond position. The `solution` function computes the `face_value_needed` by dividing the bond's key rate exposure by the hedge instrument's key rate exposure per $100 of face value, and then multiplying by 100, as the hedge instrument's exposure is given per $100 of face value. The result is then returned and printed."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-200",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the bond-equivalent yield if the yield to maturity on a yearly-payment bond is 7.75%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yearly_yield = 7.75 / 100  # convert percentage to decimal\n\n    # Do math calculation to get the answer\n    bond_equivalent_yield = yearly_yield * 2  # Bond equivalent yield is semi-annual yield compounded twice\n\n    # return answer\n    return bond_equivalent_yield * 100  # convert back to percentage\n\n# Example usage\nanswer = solution()\nprint(f\"The bond-equivalent yield is {answer}%.\")\n```\n\nExplanation:\n- The bond-equivalent yield (BEY) is calculated by converting the yearly yield to maturity (which is already in annual terms) to a semi-annual basis.\n- In this case, the formula is straightforward: BEY = yearly_yield.\n- Convert the yearly_yield percentage to a decimal for calculation and then back to a percentage for the final answer."
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m| $25.27      | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-201",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Exhibit 1, what is the market impact per share relating to Trade 2 if Smith talks about a market buy order for 5,000 shares of an illiquid stock?",
        "output": [
            " To determine the market impact per share relating to Trade 2 when Smith talks about a market buy order for 5,000 shares of an illiquid stock, we need to calculate the difference between the trade price and the bid price at the time of Trade 2. This difference will give us the market impact per share due to the trade.\n\nLet's implement this in the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    trade_price_2 = 25.22  # Trade price for Trade 2 in dollars\n    bid_price_2 = 25.19    # Bid price at the time of Trade 2 in dollars\n\n    # Do math calculation to get the answer\n    market_impact_per_share = trade_price_2 - bid_price_2\n\n    # return answer\n    return market_impact_per_share\n\n# Run the function and print the result\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program defines the trade price and bid price for Trade 2, calculates the market impact per share, and then returns the result. When executed, it will print the market impact per share for Trade 2."
        ]
    },
    {
        "tables": [
            "| Revenue              | $1,000,000 |\n|----------------------|------------|\n| Returns of goods sold| $100,000   |\n| Cash collected       | $800,000   |\n| Cost of goods sold   | $700,000   |"
        ],
        "topic": "Accounting",
        "question_id": "test-202",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under the accrual basis of accounting, how much net revenue would be reported on the 2009 income statement of a company called Fairplay, considering that it was their initial business year and this is the information they have about the sale of their products?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 1000000\n    returns_of_goods_sold = 100000\n\n    # Do math calculation to get the answer\n    net_revenue = revenue - returns_of_goods_sold\n\n    # return answer\n    return net_revenue\n```"
        ]
    },
    {
        "tables": [
            "|                  | 2015  | 2014  |\n|------------------|-------|-------|\n| COGS             |50,800 |48,500 |\n| Ending inventories|10,550|10,000 |\n| LIFO reserve     |4,320  |2,600  |"
        ],
        "topic": "Accounting",
        "question_id": "test-203",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price of goods sold in 2015 employing the FIFO technique for a business that usually uses the LIFO strategy, as stated in pounds sterling?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cogs_2015 = 50800\n    ending_inventories_2015 = 10550\n    lifo_reserve_2015 = 4320\n\n    # Do math calculation to get the answer\n    fifo_cogs_2015 = cogs_2015 + lifo_reserve_2015 - (lifo_reserve_2015 - lifo_reserve_2015)\n    fifo_price_of_goods_sold_2015 = fifo_cogs_2015 - cogs_2015 + ending_inventories_2015\n\n    # return answer\n    return fifo_price_of_goods_sold_2015\n```\n\nYou can call the `solution()` function to get the answer. This solution defines the necessary variables based on the given table and employs the FIFO technique to compute the cost of goods sold in 2015 for a business that typically uses the LIFO strategy."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-204",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say :P(occasion X happens)=15%, P(occasion Y happens)=35%, and P(occasion Z happens)=20%. If the occasions X, Y and Z are all not dependent on each other, what is the P(occasion X or occasion Z happens)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P_X = 0.15\n    P_Z = 0.20\n\n    # Do math calculation to get the answer\n    P_X_or_Z = P_X + P_Z - (P_X * P_Z)\n\n    # return answer\n    return P_X_or_Z\n```"
        ]
    },
    {
        "tables": [
            "|                         |                      |\n|-------------------------|----------------------|\n| Seagraves Supply Company Operating Cash Flow - Direct Method For the year ended December 31, 20X7 |                      |\n| Cash paid to suppliers  | 265,866              |\n| Cash paid for operating expenses | 124,784             |\n| Cash paid for interest  | 4,326                |\n| Cash paid for taxes     | 14,956               |\n| Operating cash flow     | $ 20,048             |"
        ],
        "topic": "Accounting",
        "question_id": "test-205",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the direct method, determine the cash received from the client:",
        "output": [
            " Certainly! To determine the cash received from clients using the direct method, we need to consider the overall cash flow dynamics. The operating cash flow calculated includes all cash inflows and outflows. The cash outflows include payments to suppliers, operating expenses, interest, and taxes.\n\nTo find the cash received from clients, we can use the formula:\n\n\\[ \\text{Cash received from clients} = \\text{Operating cash flow} + \\text{Cash paid to suppliers} + \\text{Cash paid for operating expenses} + \\text{Cash paid for interest} + \\text{Cash paid for taxes} \\]\n\nGiven the values from the table:\n- Cash paid to suppliers: 265,866\n- Cash paid for operating expenses: 124,784\n- Cash paid for interest: 4,326\n- Cash paid for taxes: 14,956\n- Operating cash flow: 20,048\n\nWe can calculate the cash received from clients as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    cash_paid_to_suppliers = 265866\n    cash_paid_for_operating_expenses = 124784\n    cash_paid_for_interest = 4326\n    cash_paid_for_taxes = 14956\n    operating_cash_flow = 20048\n\n    # Do math calculation to get the answer\n    cash_received_from_clients = (\n        operating_cash_flow\n        + cash_paid_to_suppliers\n        + cash_paid_for_operating_expenses\n        + cash_paid_for_interest\n        + cash_paid_for_taxes\n    )\n\n    # return answer\n    return cash_received_from_clients\n\n# Running the function to get the solution\nprint(solution())\n```\n\nThis program calculates the cash received from the client and returns it as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-206",
        "python_solution": "",
        "ground_truth": null,
        "question": "When we apply vertical common-size analysis to the following financial data from a different business entity: Total liabilities $19 million, Total stockholders\u2019 equity $25 million, what is the percentage of total liabilities represented on the balance sheet?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 19000000\n    total_equity = 25000000\n\n    # Do math calculation to get the answer\n    total_balance_sheet = total_liabilities + total_equity\n    percentage_of_liabilities = (total_liabilities / total_balance_sheet) * 100\n\n    # return answer\n    return percentage_of_liabilities\n```"
        ]
    },
    {
        "tables": [
            "| Date     | Closing Price |\n|----------|---------------|\n| 1 August | 112           |\n| 8 August | 160           |\n| 15 August| 120           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-207",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the continuously compounded return of shares for Riddle Inc between August 1 and August 15, taking into account the weekly closing prices of Riddle Inc's shares?",
        "output": [
            " Certainly! To calculate the continuously compounded return, we use the following formula:\n\n\\[ \\text{Continuously Compounded Return} = \\ln\\left(\\frac{\\text{End Price}}{\\text{Start Price}}\\right) \\]\n\nWhere \\(\\ln\\) is the natural logarithm function.\n\nUsing the provided table, the start price on August 1 is 112, and the end price on August 15 is 120.\n\nHere is the Python program to compute the continuously compounded return:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    start_price = 112\n    end_price = 120\n\n    # Do math calculation to get the answer\n    continuously_compounded_return = math.log(end_price / start_price)\n\n    # return answer\n    return continuously_compounded_return\n\n# Print the solution to see the result\nprint(solution())\n```\n\nThis program will calculate and return the continuously compounded return for Riddle Inc's shares between August 1 and August 15 based on the weekly closing prices provided."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-208",
        "python_solution": "",
        "ground_truth": null,
        "question": "What's the value of Corporation Z, which is currently being appraised by John using the dividend discount model? The latest dividend is $1.0 per share with a required return rate of 7.5%. It is anticipated to have a high growth rate of 5% for the initial three years, and thereafter, the dividend growth rate will be 3% annually indefinitely.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    latest_dividend = 1.00\n    required_return_rate = 0.075\n    high_growth_rate = 0.05\n    steady_growth_rate = 0.03\n    high_growth_period = 3\n\n    # Calculate the value during the high growth period\n    total_value_high_growth = 0\n    for year in range(1, high_growth_period + 1):\n        dividend = latest_dividend * (1 + high_growth_rate) ** year\n        total_value_high_growth += dividend / (1 + required_return_rate) ** year\n\n    # Calculate the terminal value after the high growth period\n    dividend_end_high_growth = latest_dividend * (1 + high_growth_rate) ** high_growth_period\n    terminal_value = (dividend_end_high_growth * (1 + steady_growth_rate)) / (required_return_rate - steady_growth_rate)\n\n    # Discount the terminal value to present value\n    present_value_terminal = terminal_value / (1 + required_return_rate) ** high_growth_period\n\n    # Sum the present values\n    total_value = total_value_high_growth + present_value_terminal\n\n    # return answer\n    return total_value\n```\n\nThis function performs the following steps:\n1. Calculates the present values of dividends expected during the high growth period.\n2. Calculates the terminal value at the end of the high growth period, assuming indefinite steady growth.\n3. Discounts the terminal value to the present value.\n4. Sums the present values of the dividends during the high growth period and the present value of the terminal value.\n5. Returns the total value of Corporation Z using the dividend discount model."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-209",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume a share that has daily returns following a random walk, with an annualized volatility of 34%. Can you calculate the weekly volatility of this share assuming there are 52 weeks in a year?",
        "output": [
            " Sure, let's use the concept that the weekly volatility can be derived from the annualized volatility using the square root of the time scaling factor. Given that there are 52 weeks in a year, the weekly volatility (\\(\\sigma_{\\text{weekly}}\\)) can be calculated from the annualized volatility (\\(\\sigma_{\\text{annual}}\\)) as follows:\n\\[ \\sigma_{\\text{weekly}} = \\sigma_{\\text{annual}} \\times \\sqrt{\\frac{1}{52}} \\]\n\nHere's the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    annualized_volatility = 0.34\n    weeks_in_year = 52\n\n    # Do math calculation to get the answer\n    weekly_volatility = annualized_volatility * (1 / 52 ** 0.5)\n\n    # return answer\n    return weekly_volatility\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates and returns the weekly volatility based on the given annualized volatility."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-210",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the odds for an event X if the probability for X is 14% (i.e., P(X) = 14%)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    probability_X = 0.14  # P(X) = 14%\n\n    # Do math calculation to get the answer\n    odds_for_X = probability_X / (1 - probability_X)\n\n    # return answer\n    return odds_for_X\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-211",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that S0=400 and the risk-free rate stands at 5%. Figure out the forward price of a 6-month forward contract with continuous compounding.",
        "output": [
            " Sure, here is the Python program to calculate the forward price of a 6-month forward contract with continuous compounding given \\( S_0 = 400 \\) and the risk-free rate of 5%.\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S0 = 400\n    risk_free_rate = 0.05\n    time_to_maturity = 0.5  # 6 months represented as a fraction of a year\n\n    # Do math calculation to get the answer\n    forward_price = S0 * math.exp(risk_free_rate * time_to_maturity)\n\n    # return answer\n    return forward_price\n\n# Test the function\nprint(solution())\n```\n\nThis program calculates the forward price using the formula for continuous compounding. The formula used is \\( F = S_0 \\cdot e^{r \\cdot T} \\), where \\( S_0 \\) is the current spot price, \\( r \\) is the risk-free rate, and \\( T \\) is the time to maturity. The `math.exp` function is used to calculate the exponential part of the formula.\n\nThe result is then printed to verify the output."
        ]
    },
    {
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n|----------|--------------|--------|--------|\n| G        | 15.00        | 17.00  | 500    |\n| H        | 35.00        | 33.00  | 300    |\n| 1        | 37.00        | 40.00  | 200    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-212",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Benedict from a investment firm collected data for a value-weighted index consisting of securities G,H,I. What was the return of the value-weighted index during this period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beginning_g = 15.00\n    end_g = 17.00\n    shares_g = 500\n\n    beginning_h = 35.00\n    end_h = 33.00\n    shares_h = 300\n\n    beginning_i = 37.00\n    end_i = 40.00\n    shares_i = 200\n\n    # Calculate the total beginning and end market value for each security\n    beginning_value_g = beginning_g * shares_g\n    end_value_g = end_g * shares_g\n\n    beginning_value_h = beginning_h * shares_h\n    end_value_h = end_h * shares_h\n\n    beginning_value_i = beginning_i * shares_i\n    end_value_i = end_i * shares_i\n\n    # Calculate the total beginning and end market value of the portfolio\n    total_beginning_value = beginning_value_g + beginning_value_h + beginning_value_i\n    total_end_value = end_value_g + end_value_h + end_value_i\n\n    # Calculate the return of the value-weighted index\n    value_weighted_index_return = (total_end_value / total_beginning_value) - 1\n\n    # return answer\n    return value_weighted_index_return\n\nprint(solution())\n```\n\nThis program calculates the return of the value-weighted index based on the beginning and ending prices and shares of securities G, H, and I. The result will be the return of the value-weighted index during the period."
        ]
    },
    {
        "tables": [
            "|     | $ Millions |\n| --- | --- |\n| Short-term interest-bearing debt | 1,258 |\n| Long-term interest-bearing debt | 321 |\n| Total shareholder's equity | 4,285 |\n| Total assets | 8,750 |\n| EBIT | 2,504 |\n| Interest payments | 52 |"
        ],
        "topic": "Accounting",
        "question_id": "test-213",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the corporation's debt-to-assets ratio based on the data compiled by an analyst reviewing the corporation's solvency?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    short_term_debt = 1258  # in $ millions\n    long_term_debt = 321    # in $ millions\n    total_assets = 8750     # in $ millions\n\n    # Do math calculation to get the answer\n    total_debt = short_term_debt + long_term_debt\n    debt_to_assets_ratio = total_debt / total_assets\n\n    # return answer\n    return debt_to_assets_ratio\n\n# Call the solution function to get the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Next year's earnings per share | $3.00 |\n|---------------------------|-------|\n| Return on equity         | 12.5% |\n| Dividend payout ratio    | 60%   |\n| Required return on shares| 10%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-214",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier collects the same information to calculate the intrinsic worth of a corporation\u2019s stock using the justified forward P/E method. What is the intrinsic value per share?",
        "output": [
            " Sure, I can help you with that. The justified forward P/E ratio method requires information about the next year's earnings per share, the return on equity, the dividend payout ratio, and the required return on shares.\n\nHere\u2019s the Python program to calculate the intrinsic value per share using the justified forward P/E method:\n\n```python\ndef solution():\n    # Define variables name and value\n    next_year_eps = 3.00  # Next year's earnings per share\n    roe = 0.125           # Return on equity (12.5%)\n    dividend_payout_ratio = 0.60\n    required_return = 0.10\n\n    # Calculate the retention ratio\n    retention_ratio = 1 - dividend_payout_ratio\n\n    # Calculate the growth rate (g) using the retention ratio and ROE\n    growth_rate = roe * retention_ratio\n\n    # Calculate the justified P/E ratio\n    justified_pe_ratio = (dividend_payout_ratio * (1 + growth_rate)) / (required_return - growth_rate)\n\n    # Calculate the intrinsic value per share\n    intrinsic_value_per_share = next_year_eps * justified_pe_ratio\n\n    # return answer\n    return intrinsic_value_per_share\n\n# Example usage\nprint(solution())\n```\n\nThis program first calculates the retention ratio, then the growth rate, and finally uses these values to compute the intrinsic value per share based on the justified forward P/E method. The final intrinsic value per share is returned by the function."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-215",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager wants to understand the systematic risk of a stock portfolio and thus estimates the following linear regression: RPt\u2212RF=\u03b1P+\u03b2P[RMt\u2212RF]+\u03b5PtRPt\u200b\u2212RF\u200b=\u03b1P\u200b+\u03b2P\u200b[RMt\u200b\u2212RF\u200b]+\u03b5Pt\u200b, where RPtRPt\u200b represents the return of the portfolio at time t, RMtRMt\u200b represents the return of the market portfolio at time t, and RFRFRF\u200b is the risk-free rate, remaining constant throughout. Consider that \u03b1 is 0.008, \u03b2 is 0.977, \u03c3(RP)\\sigma{(R_P)}\u03c3(RP\u200b) is 0.167, and \u03c3(RM)\\sigma{(R_M)}\u03c3(RM\u200b) is 0.156. What is the likely coefficient of determination in this regression?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    alpha = 0.008\n    beta = 0.977\n    sigma_RP = 0.167\n    sigma_RM = 0.156\n\n    # Do math calculation to get the answer\n    # Coefficient of determination (R-squared) is the square of the correlation coefficient (r)\n    # r = beta * (sigma_RM / sigma_RP)\n    r = beta * (sigma_RM / sigma_RP)\n    R_squared = r ** 2\n\n    # return answer\n    return R_squared\n```\n\nHere, we define the required variables and then calculate the coefficient of determination (R-squared). The correlation coefficient (r) is given by `beta * (sigma_RM / sigma_RP)`, and the coefficient of determination is the square of this correlation coefficient."
        ]
    },
    {
        "tables": [
            "| Item | Current Period |\n| --- | --- |\n| Total assets | 24,130 |\n| Total liabilities | 17,560 |\n| Total equity | 6,570 |\n| Total pension cost | 96 |\n| Pension contribution | 66 |\n| Financing cash flow | 2,323 |\n| Operating cash flow | -1,087 |\n| Effective tax rate | 30% |",
            "|   Item                    | 100-bp Increase | 100-bp Decrease |\n|---------------------------|-----------------|-----------------|\n| Benefit obligation change | $93             | -$76            |\n| Benefit expense change    | $12             | -$10            |"
        ],
        "topic": "Accounting",
        "question_id": "test-216",
        "python_solution": "",
        "ground_truth": null,
        "question": "Alexander Boone, a senior portfolio manager, collaborates with Rachel Stevens, a junior analyst. They are assessing the financial records of Corporation ABC (ABC), focusing on post-employment rewards. Stevens modifies the balance sheet and cash flow statement details presented in Exhibit 2 to more accurately represent the financial aspect of certain pension plan related items. Finally, Stevens scrutinizes the details present in Exhibit 3 and determines the effect of a 100-basis-point hike in health care inflation on ABC's debt-to-equity ratio. Considering Exhibits 2 and 3, alongside Boone's projection about future health care inflation, what should the debt-to-equity ratio computed by Stevens for ABC be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets = 24130\n    total_liabilities = 17560\n    total_equity = 6570\n    benefit_obligation_change = 93  # due to 100-bp increase in health care inflation\n\n    # Do math calculation to get the answer\n    adjusted_total_liabilities = total_liabilities + benefit_obligation_change\n    debt_to_equity_ratio = adjusted_total_liabilities / total_equity\n\n    # return answer\n    return debt_to_equity_ratio\n```\n\nThis program defines the necessary variables based on the provided data, calculates the adjusted total liabilities after accounting for the 100-basis-point hike in the benefit obligation, and then computes the debt-to-equity ratio. The `return` statement provides the final answer."
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012         |\n|----------------------------|------------|\n| Revenues                   | $6,456     |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA)   | 1,349     |\n| Depreciation expense       | 243        |\n| Operating income           | 1,106      |\n| Interest expense           | 186        |\n| Pretax income              | 920        |\n| Income tax (32%)           | 294        |\n| Net income                 | $626       |\n|                            |            |\n| Number of outstanding shares (millions) | 411     |\n| 2012 earnings per share    | $1.52      |\n| 2012 dividends paid (millions) | 148     |\n| 2012 dividends per share   | 0.36       |\n| 2012 fixed capital investment (millions) | 535  |\n|                            |            |\n| Cost of equity             | 12.0%      |\n| Weighted average cost of capital (WACC) | 9.0%  |",
            "|                                             | 2012  |       | 2011  |\n|---------------------------------------------|-------|-------|-------|\n| **Assets**                                  |       |       |       |\n| Cash and cash equivalents                   | $32   |       | $21   |\n| Accounts receivable                         | 413   |       | 417   |\n| Inventories                                 | 709   |       | 638   |\n| Other current assets                        | 136   |       | 123   |\n| Total current assets                        | $1,290|       | $1,199|\n|                                             |       |       |       |\n| **Liabilities and Stockholders' Equity**   |       |       |       |\n| Current liabilities                         | $2,783|       | $2,678|\n| Long-term debt                              | 2,249 |       | 2,449 |\n| Common stockholders' equity                 | 1,072 |       | 594   |\n| Total liabilities and stockholders' equity  | $6,104|       | $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-217",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the financial documents in Exhibits 1 and 2, Barnes' fiscal year concludes on December 31st. If the 2012 FCFF is equal to $500 million, what would be Barnes' FCFE ($ millions) for 2012, based on the information found in Exhibits 1 and 2?",
        "output": [
            " Certainly! To calculate the Free Cash Flow to Equity (FCFE) for 2012, you need to start with the given Free Cash Flow to the Firm (FCFF) value and adjust for interest payments, net borrowing (or repayment), and dividends paid.\n\nLet's go ahead and implement the solution in Python:\n\n```python\ndef solution():\n    # Define variables name and value\n    FCFF = 500  # Free Cash Flow to the Firm ($ millions)\n    interest_expense = 186  # Interest expense ($ millions)\n    dividends_paid = 148  # Dividends paid ($ millions)\n    net_borrowing = 0  # Assuming no net borrowing/repayment, this will be zero\n\n    # Do math calculation to get the answer\n    FCFE = FCFF - (net_borrowing) + interest_expense * (1 - 0.32) - dividends_paid\n\n    # return answer\n    return FCFE\n```\n\nIn this program:\n- We start with the given FCFF ($500 million).\n- We adjust for interest expense after tax (interest expense multiplied by (1 - tax rate)).\n- We assume there's no net borrowing/repayment.\n- We subtract dividends paid to get the FCFE.\n\nNote: The tax rate is given as 32%.\n\nYou can run this program and it will return Barnes' FCFE for 2012."
        ]
    },
    {
        "tables": [
            "| | |\n| --- | --- |\n| Consumption function | C = 2,500+0.80*(Y-T) |\n| Investment function | l= 500+0.30*Y-25*r |\n| Government spending | G = 1,000 |\n| Tax function | T=-250+0.30*Y |\n| *Y* : Aggregate income *r*:Real interest rate | |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-218",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the real interest rate in a basic economy with no foreign trade stands at 3% and there's an upsurge in state expenditure to 2,000, what will be the surge in overall earnings?",
        "output": [
            " Certainly! Let's define the variables and create the function to calculate the new aggregate income after the upsurge in government expenditure. We'll utilize the consumption (C), investment (I), government spending (G), and tax (T) functions as given.\n\nHere is the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    r = 0.03  # Real interest rate\n    G = 2000  # Updated government spending\n\n    # Define initial parameters\n    initial_Y = 1000  # Initial guess for aggregate income\n    tolerance = 0.01  # Tolerance level for the convergence\n    max_iterations = 100  # Maximum number of iterations\n\n    # Iterate to find the equilibrium Y\n    for i in range(max_iterations):\n        T = -250 + 0.30 * initial_Y  # Tax function\n        C = 2500 + 0.80 * (initial_Y - T)  # Consumption function\n        I = 500 + 0.30 * initial_Y - 25 * r  # Investment function\n\n        # Equilibrium condition: Y = C + I + G\n        new_Y = C + I + G\n\n        # Check convergence\n        if abs(new_Y - initial_Y) < tolerance:\n            break\n\n        # Update initial income for next iteration\n        initial_Y = new_Y\n\n    # Calculate the surge in overall earnings\n    initial_G = 1000  # Initial government spending\n    initial_r = 0.03  # Initial real interest rate\n    initial_equilibrium_Y = 2500 + 0.80 * (initial_Y - T) + 500 + 0.30 * initial_Y - 25 * initial_r + initial_G\n\n    surge_in_earnings = new_Y - initial_equilibrium_Y\n\n    return surge_in_earnings\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\n### Explanation\n1. **Define variables and initial"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-219",
        "python_solution": "",
        "ground_truth": null,
        "question": "A customer buys a 6-year bond at face value with an 8% coupon rate, where the interest is disbursed once a year. If the customer decides to sell the bond at the close of the 5th year, and the prevailing market interest rate is 7% at that moment. Can you determine the capital gain or loss?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming face value of the bond\n    coupon_rate = 0.08\n    years = 5\n    current_interest_rate = 0.07\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n\n    # Calculate the bond price at the end of 5 years using the new interest rate\n    bond_price = (annual_coupon_payment / current_interest_rate) * (1 - (1 + current_interest_rate) ** -1) + \\\n                 (face_value / (1 + current_interest_rate) ** 1)\n\n    # Calculate the capital gain or loss\n    capital_gain_loss = bond_price - face_value\n\n    # return answer\n    return capital_gain_loss\n\n# Call the solution function to get the result\nresult = solution()\nprint(f\"The capital gain or loss is: {result:.2f}\")\n```\n\nThis program calculates the bond price at the end of the 5th year considering the new market interest rate and then determines the capital gain or loss by comparing the current price to the face value of the bond."
        ]
    },
    {
        "tables": [
            "| Trades | Execution Price | Shares Executed |\n|--------|-----------------|-----------------|\n| Trade 1| $40.75 |    10,000     |\n| Trade 2| $41.25 |    30,000     |\n| Trade 3| $41.50 |    20,000     |\n| Trade 4| $41.75 |    30,000     |\n| Total  |        |    90,000     |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-220",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following day, Morris instructs Blue to go over their analysis on XYZ Corporation. Blue\u2019s evaluation leads her to believe that the company's shares are undervalued. She shares her discoveries with Morris, who then directs her at 10 a.m. to purchase 120,000 shares at a price of $40.00 through a limit order of $42.00. The buy-side trader proceeds with the market execution when the cost is at $40.50. The sole charge is a commission of $0.02 per share. By the time the market closes, 90,000 shares from the order were bought, with XYZ Corporation closing at $42.50. The transaction was carried out at an average cost of $41.42, with detailed information about the executed trades in Exhibit 1. Based on the details in Exhibit 1, what is the execution cost for buying the 90,000 shares of XYZ Corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    execution_price_trade_1 = 40.75\n    shares_executed_trade_1 = 10000\n    execution_price_trade_2 = 41.25\n    shares_executed_trade_2 = 30000\n    execution_price_trade_3 = 41.50\n    shares_executed_trade_3 = 20000\n    execution_price_trade_4 = 41.75\n    shares_executed_trade_4 = 30000\n    commission_per_share = 0.02\n\n    # Calculate total cost for each trade\n    cost_trade_1 = (execution_price_trade_1 * shares_executed_trade_1) + (shares_executed_trade_1 * commission_per_share)\n    cost_trade_2 = (execution_price_trade_2 * shares_executed_trade_2) + (shares_executed_trade_2 * commission_per_share)\n    cost_trade_3 = (execution_price_trade_3 * shares_executed_trade_3) + (shares_executed_trade_3 * commission_per_share)\n    cost_trade_4 = (execution_price_trade_4 * shares_executed_trade_4) + (shares_executed_trade_4 * commission_per_share)\n\n    # Calculate total execution cost for 90,000 shares\n    total_execution_cost = cost_trade_1 + cost_trade_2 + cost_trade_3 + cost_trade_4\n\n    # Return the total execution cost\n    return total_execution_cost\n```"
        ]
    },
    {
        "tables": [
            "|                      | as of 31 December |       |\n|----------------------|-------------------|-------|\n| Assets               | 2009              | 2008  |\n| Cash and cash equivalents     | 1,884             | 1,280 |\n| Other financial assets        | 486               | 588   |\n| Trade and other receivables   | 2,546             | 3,178 |\n| Other non-financial assets    | 147               | 126   |\n| Tax assets                    | 192               | 399   |\n| Total  current assets         | 5,255             | 5,571 |",
            "|                         | as of 31 December |\n|------------------------ |---------- |---------- |\n| Assets                  | 2009      | 2008      |\n| Total non-current assets| 8,119     | 3,329     |\n| Total assets            | 13,374    | 13,900    |\n| Equity and Liabilities  |           |           |\n| Total current liabilities| 3,416     | 5,824     |\n| Total non-current liabilities| 1,467 | 905       |\n| Total liabilities       | 4,883     | 6,729     |\n| Total equity            | 8,491     | 7,171     |\n| Equity and liabilities  | 13,374    | 13,900    |"
        ],
        "topic": "Accounting",
        "question_id": "test-221",
        "python_solution": "",
        "ground_truth": null,
        "question": "From the data provided in Exhibit 4, what's the nearest quick ratio for the Oracle Corporation as of December 31, 2009? Exhibit 4. Oracle Corporation Consolidated Statements of Financial Position (Excerpt: Current Assets Detail)(In millions of \u20ac)",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash_and_cash_equivalents_2009 = 1884\n    other_financial_assets_2009 = 486\n    trade_and_other_receivables_2009 = 2546\n    total_current_liabilities_2009 = 3416\n\n    # Do math calculation to get the answer\n    quick_assets_2009 = cash_and_cash_equivalents_2009 + other_financial_assets_2009 + trade_and_other_receivables_2009\n    quick_ratio_2009 = quick_assets_2009 / total_current_liabilities_2009\n\n    # return answer\n    return quick_ratio_2009\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-222",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive is interested in determining the cost of a put option using a one-period binomial tree. Here are the relevant details: The existing stock price is $30, while the exercise price of the put option is also $30. The up factor is valued at 1.12 and the down factor stands at 0.92. The risk-free rate is set at 5%. What is the hedge ratio?",
        "output": [
            " To determine the hedge ratio for the put option in a one-period binomial tree, we need to calculate the following:\n\n1. The up and down stock prices.\n2. The payoff of the put option in the up and down states.\n3. The discounted expected payoff to find the value of the put option.\n4. The hedge ratio using the up and down payoff differences and stock price differences.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    S0 = 30  # Current stock price\n    X = 30   # Exercise price of the put option\n    u = 1.12 # Up factor\n    d = 0.92 # Down factor\n    r = 0.05 # Risk-free rate\n\n    # Calculate up and down stock prices\n    Su = S0 * u\n    Sd = S0 * d\n\n    # Calculate payoff of the put option in up and down states\n    Pu = max(X - Su, 0)  # Payoff in the up state\n    Pd = max(X - Sd, 0)  # Payoff in the down state\n\n    # Calculate the hedge ratio (Delta)\n    hedge_ratio = (Pd - Pu) / (Sd - Su)\n\n    # return answer\n    return hedge_ratio\n\n# Example usage:\nprint(solution())\n```\n\nThis program calculates the hedge ratio, which is the number of shares of the underlying asset needed to hedge the portfolio against changes in the price of the put option."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-223",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the two-period binomial model, Matt estimates the value of a two-year American-style call option on Alpha Corporation's common shares. The parameters are as follows: the present stock price sits at 96, while the call option's exercise price is 70. The up factor (u) equates to 1.20, with the down factor (d) at 0.83. The risk-free rate of return, calculated with continuous compounding, is 4%. How much is the option worth?",
        "output": [
            " Certainly! Below is the Python program to calculate the value of the American-style call option using the two-period binomial model with the given parameters:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S0 = 96           # Present stock price\n    K = 70            # Exercise price of the call option\n    u = 1.20          # Up factor\n    d = 0.83          # Down factor\n    r = 0.04          # Risk-free rate of return (continuous compounding)\n    T = 2             # Time to maturity in years\n    dt = T / 2        # Time step for each period\n\n    # Calculate the risk-neutral probability (p)\n    R = math.exp(r * dt)\n    p = (R - d) / (u - d)\n    one_minus_p = 1 - p\n\n    # Calculate the stock price at each node\n    S1_u = S0 * u\n    S1_d = S0 * d\n    S2_uu = S1_u * u\n    S2_ud = S1_u * d\n    S2_dd = S1_d * d\n\n    # Calculate the option value at each node\n    # End of period 2\n    O2_uu = max(S2_uu - K, 0)\n    O2_ud = max(S2_ud - K, 0)\n    O2_dd = max(S2_dd - K, 0)\n\n    # End of period 1\n    O1_u = max(S1_u - K, (p * O2_uu + one_minus_p * O2_ud) / R)\n    O1_d = max(S1_d - K, (p * O2_ud + one_minus_p * O2_dd) / R)\n\n    # Option value at present\n    O0 = (p * O1_u + one_minus_p * O1_d) / R\n\n    # Return the answer\n    return O0\n\n# Run the solution function to get the option value\noption_"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-224",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financier utilizes a multivariate normal distribution to accurately model the returns on 3 stocks, how many parameters does he need to determine at the outset?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    number_of_stocks = 3\n\n    # Do math calculation to get the answer\n    # For a multivariate normal distribution, we need the mean for each stock (3 parameters)\n    # and the covariance matrix (3 * (3 + 1) / 2 parameters)\n\n    mean_parameters = number_of_stocks\n    covariance_parameters = number_of_stocks * (number_of_stocks + 1) // 2\n    total_parameters = mean_parameters + covariance_parameters\n\n    # return answer\n    return total_parameters\n```\n\nExplanation:\nTo model the returns on 3 stocks using a multivariate normal distribution, the financier needs to determine the mean for each stock (3 parameters) and the elements of the covariance matrix. For a 3x3 covariance matrix, because it is symmetric, there are 3 * (3 + 1) / 2 = 6 independent parameters (since the diagonal and upper/lower triangle are enough to fully describe the matrix).\n\nSo the total number of parameters needed is 3 (for the means) + 6 (for the covariance matrix) = 9."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-225",
        "python_solution": "",
        "ground_truth": null,
        "question": "What's the chance of a pupil correctly answering less than two questions on a multiple-choice test that has four choices for a total of six questions, by just guessing?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    import math\n    total_questions = 6\n    choices_per_question = 4\n    probability_correct = 1 / choices_per_question\n    probability_incorrect = 1 - probability_correct\n\n    # Binomial coefficient calculation\n    def binomial_coefficient(n, k):\n        return math.comb(n, k)\n\n    # Probability of getting 0 correct answers\n    prob_zero_correct = binomial_coefficient(total_questions, 0) * (probability_incorrect ** total_questions)\n\n    # Probability of getting 1 correct answer\n    prob_one_correct = binomial_coefficient(total_questions, 1) * (probability_correct ** 1) * (probability_incorrect ** (total_questions - 1))\n\n    # Total probability of getting less than 2 correct answers\n    answer = prob_zero_correct + prob_one_correct\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-226",
        "python_solution": "",
        "ground_truth": null,
        "question": "The head credit analyst of Vigilant Consultants recently stated that the five-year bond of Atlas Co. is currently yielding 7% and a similar CDS contract has a credit spread of 4.25%. Given that the MRR is 2.5%, Lopez advised performing a basis trade to exploit the pricing of Atlas Co.'s bonds and CDS. The basis trade would involve buying both the bond and the CDS contract. Considering the basis trade for Atlas Co., what will be the gain if convergence happens in the bond and CDS markets?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 0.07     # 7% bond yield\n    cds_spread = 0.0425   # 4.25% credit spread\n    mrr = 0.025           # 2.5% Market Risk Reserve\n\n    # Do math calculation to get the answer\n    gain_from_convergence = bond_yield - (cds_spread + mrr)\n\n    # Return answer as an annualized gain percentage\n    return gain_from_convergence\n\n# Example usage\nprint(solution())\n```\n\nThis Python program calculates the potential gain if convergence happens in the bond and CDS markets for Atlas Co. The program defines the bond yield, CDS spread, and Market Risk Reserve (MRR). It then calculates the gain from convergence by subtracting the sum of the CDS spread and MRR from the bond yield. The result is returned as the potential gain if markets converge."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-227",
        "python_solution": "",
        "ground_truth": null,
        "question": "Think about the purchaser of a 6x9 FRA. The contract rate is 6.35% on a notional sum of $10 million. Determine the settlement sum for the vendor if the settlement rate is 6.85%. Assume a 30/360-day count basis.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    notional_amount = 10000000  # $10 million\n    contract_rate = 0.0635  # 6.35%\n    settlement_rate = 0.0685  # 6.85%\n    days = 180  # 6 months in 30/360-day count basis is 180 days\n\n    # Do math calculation to get the answer\n    contract_amount = notional_amount * contract_rate * (days / 360)\n    settlement_amount = notional_amount * settlement_rate * (days / 360)\n    difference = settlement_amount - contract_amount\n\n    # return answer\n    return difference\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-228",
        "python_solution": "",
        "ground_truth": null,
        "question": "A task has been assigned to Jack, a consultant for a global investment firm, to evaluate the worth of an advanced technology enterprise. The collected information about the enterprise is as follows: It has 500 million ordinary shares in circulation. It has a current share price of $7. The enterprise has a declared debt of $3500 million, and its market value equals this figure. The enterprise has reported a cash holding of $1500 million. Furthermore, it has $50 million in preferred equity and $100 million in short-term investments. For this year, its reported net sales are $3000 million. With regard to the information provided, what is the enterprise EV to sales ratio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    ordinary_shares = 500000000\n    share_price = 7\n    debt = 3500000000\n    cash_holding = 1500000000\n    preferred_equity = 50000000\n    short_term_investments = 100000000\n    net_sales = 3000000000\n\n    # Do math calculation to get the answer\n    market_value_of_ordinary_shares = ordinary_shares * share_price\n    enterprise_value = market_value_of_ordinary_shares + debt - cash_holding - short_term_investments\n    ev_to_sales_ratio = enterprise_value / net_sales\n\n    # return answer\n    return ev_to_sales_ratio\n```\n\nHere's what the Python program does:\n1. It defines the variables and their values based on the provided information.\n2. It calculates the market value of the ordinary shares by multiplying the number of shares by the share price.\n3. It calculates the enterprise value by adding the market value of the ordinary shares to the debt and then subtracting the cash holding and short-term investments.\n4. It calculates the EV to sales ratio by dividing the enterprise value by the net sales.\n5. The result is returned as the answer.\n\nYou can run this function to get the EV to sales ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-229",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the discount rate if the cash price stands at 97.63 and there are 60 calendar days left on the life of the government bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash_price = 97.63\n    days_left = 60\n\n    # Calculate the face value assuming that the cash price is close to the face value\n    # This is a simplification since exact face value isn't given explicitly\n    face_value = 100  # Normally, bonds have a face value of $100\n\n    # Calculate the discount\n    discount = face_value - cash_price\n\n    # Do math calculation to get the annual discount rate\n    discount_rate = (discount / face_value) * (365 / days_left)\n\n    # return answer\n    return discount_rate\n```\n\nExplanation:\n- The `cash_price` is defined as 97.63.\n- The `days_left` is defined as 60.\n- The discount is calculated as the difference between the face value and the cash price.\n- The annual discount rate is calculated using the formula `(discount / face_value) * (365 / days_left)`.\n- The function returns the calculated discount rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-230",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the present value of a 10-year annuity due with yearly payments of $2,000 and an annual compound interest rate of 5%, if the present value of a 10-year regular annuity with the same payments and interest rate is $15,443.47?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    regular_annuity_pv = 15443.47  # Present value of regular annuity\n    payment = 2000  # Yearly payment amount\n    interest_rate = 0.05  # Annual compound interest rate\n    n = 10  # Number of years\n\n    # Do math calculation to get the answer\n    # Present value of annuity due is calculated by multiplying the present value of a regular annuity by (1 + interest rate)\n    annuity_due_pv = regular_annuity_pv * (1 + interest_rate)\n\n    # return answer\n    return annuity_due_pv\n\n# To get the answer, you can call the solution function\n# print(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-231",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a 2-year zero-coupon bond's present cost is $0.88035 and its face value is $1, then what is the 2-year spot rate given risk-neutral investors?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    present_cost = 0.88035\n    face_value = 1\n    years = 2\n\n    # Do math calculation to get the answer\n    spot_rate = (face_value / present_cost) ** (1 / years) - 1\n\n    # return answer\n    return spot_rate\n```"
        ]
    },
    {
        "tables": [
            "| Year | Spot Rate | Forward Rate |\n|------|-----------|--------------|\n| 1    | 3.00%     |              |\n| 2    | 4.00%     | 5.01%        |\n| 3    | 5.00%     | 7.03%        |\n| 4    | 6.00%     | 9.06%        |\n| 5    | 7.00%     | 11.10%       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-232",
        "python_solution": "",
        "ground_truth": null,
        "question": "John acknowledges that this specific US Treasury bond might not be the best choice for investors seeking zero reinvestment risk. He proposes a different vehicle, namely a US Treasury zero-coupon note. This note is fresh off the press, has a term of five years, and is valued at $71.30 (with a face value of $100.00) to yield 7.00% at maturity. John explains that some investors might choose to buy this Treasury zero-coupon note now and keep it until it matures in five years. He also mentions that there are investors who might buy this Treasury zero-coupon note in two years and then keep it for three years until it matures. John requests that Bird calculate the forward rate that would make investors indifferent to either acquiring the Treasury zero-coupon note now or buying it two years down the line. Current spot rates and extrapolated one year forward rates are available in Exhibit 1. Using the data in Exhibit 1, what forward rate would make an",
        "output": [
            " ```python\ndef solution():\n    # Define the given values\n    face_value = 100.00\n    original_price = 71.30\n    current_yield = 0.07\n    years_to_maturity = 5\n    spot_rate_year_2 = 0.04\n    spot_rate_year_3 = 0.05\n\n    # Calculate the present value of the face value using the original yield\n    present_value_face_value = face_value / (1 + current_yield)**years_to_maturity\n\n    # Calculate the forward price of the zero-coupon note after 2 years using the spot rate for year 2\n    forward_price_two_years = original_price * (1 + spot_rate_year_2)**2\n\n    # Calculate the present value of the face value using the forward rate and the remaining 3 years\n    remaining_years = years_to_maturity - 2\n    forward_rate_three_years = (face_value / forward_price_two_years)**(1 / remaining_years) - 1\n\n    # Calculate the present value using the forward rate\n    present_value_using_forward_rate = face_value / (1 + forward_rate_three_years)**remaining_years\n\n    # The forward rate that makes investors indifferent is the one that satisfies the present value condition\n    answer = (forward_rate_three_years) * 100  # Convert to percentage\n\n    # Return answer\n    return answer\n\n# Run the solution to get the answer\nanswer = solution()\nprint(answer)\n```\nHere, the goal is to calculate the forward rate that makes the investor indifferent between buying the Treasury zero-coupon note now or in two years. The forward rate is the rate that ensures that the future value of the note two years from now (invested at the spot rate for two years) is equivalent to the future value if calculated using the forward rate for the remaining three years."
        ]
    },
    {
        "tables": [
            "|                         |          |                       |         |\n|-------------------------|----------|-----------------------|---------|\n|Price per Share and Shares Outstanding|        ||             |\n|Current market price per share  | $15.0  |    |            |\n|Number of shares outstanding(millions)  | 1.0 |    |            |\n|Balance Sheet Data As of 2012 ($ millions)   |     |            ||\n|Cash and cash equivalents | 0.4 | Current liabilities    | 1.0       |\n|Accounts receivable | 1.2 | Long-term liabilities | 61.0   |\n|Inventories | 40.0 |  |  |\n|Investment securities |   6.0 |Common shareholders' equity | 15.6 |\n|Property, plant, and equipment | 30.0 | | |\n|Total assets  |  77.6 |Total liabilities and equity | 77.6 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-233",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a researcher predicts that the market worth of the corporation's investment securities is 115% of their recorded value, what is the corporation's price to adjusted book value ratio, taking into account the corporation's market data and balance sheet details at the close of the fiscal year 2012?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_market_price = 15.0\n    shares_outstanding_millions = 1.0\n    shares_outstanding = shares_outstanding_millions * 1e6\n    total_assets = 77.6 * 1e6\n    total_liabilities = (1.0 + 61.0) * 1e6\n    common_equity = 15.6 * 1e6\n    investment_securities = 6.0 * 1e6\n\n    # Predicted value of investment securities\n    predicted_value_investment_securities = investment_securities * 1.15\n\n    # Adjusted total assets and equity\n    adjusted_total_assets = total_assets - investment_securities + predicted_value_investment_securities\n    adjusted_common_equity = adjusted_total_assets - total_liabilities\n\n    # Price to adjusted book value ratio\n    price_book_value_ratio = (current_market_price * shares_outstanding) / adjusted_common_equity\n\n    # return answer\n    return price_book_value_ratio\n\n# Example call to the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-234",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial instrument has a beta of 1.30. If the risk-free interest rate stands at 3% and the market's expected return is 8%, what is the anticipated return of this particular financial instrument, using the capital asset pricing model (CAPM)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beta = 1.30\n    risk_free_rate = 0.03\n    market_expected_return = 0.08\n\n    # Do math calculation to get the answer\n    anticipated_return = risk_free_rate + beta * (market_expected_return - risk_free_rate)\n\n    # return answer\n    return anticipated_return\n```\n\nExplanation:\nThe Capital Asset Pricing Model (CAPM) formula is:\n\n\\[ \\text{Anticipated Return} = \\text{Risk-Free Rate} + \\beta \\times (\\text{Market Expected Return} - \\text{Risk-Free Rate}) \\]\n\nHere's how the variables and calculations align with the CAPM formula:\n- `beta` is the measure of the financial instrument's sensitivity to market movements.\n- `risk_free_rate` is the return rate of a risk-free investment.\n- `market_expected_return` is the expected return of the overall market.\n\nThe anticipated return is calculated by applying the CAPM formula, and the result is returned as the output of the function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-235",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Sakamoto Company has recently distributed a dividend of \u00a5450 for each share. It is anticipated that the annual dividends will rise at a rate of 4 percent yearly for the forthcoming four years. By the conclusion of these four years, the Sakamoto Company's shares are predicted to have a selling price of \u00a59000. If a 12 percent return rate is necessary, what would be the fundamental value of a share of Sakamoto Company?",
        "output": [
            " Certainly! Let's break down the problem and create a Python program to calculate the fundamental value of a share of Sakamoto Company based on the given information.\n\n1. **Determine the dividends for each of the next four years, given an annual growth rate of 4%.**\n2. **Calculate the present value of these future dividends using a discount rate of 12%.**\n3. **Calculate the present value of the expected stock price after four years, also using a discount rate of 12%.**\n4. **Sum up the present values to find the fundamental value of the share.**\n\nHere is the Python program that performs these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 450\n    growth_rate = 0.04\n    discount_rate = 0.12\n    future_price_after_4_years = 9000\n    years = 4\n\n    # Calculate the dividends for each of the next four years\n    dividends = []\n    for year in range(years):\n        dividends.append(current_dividend * (1 + growth_rate) ** year)\n\n    # Calculate the present value of each dividend\n    present_value_of_dividends = sum([dividend / (1 + discount_rate) ** (year + 1) for year, dividend in enumerate(dividends)])\n\n    # Calculate the present value of the final share price\n    present_value_of_final_price = future_price_after_4_years / (1 + discount_rate) ** years\n\n    # Sum up the present values to get the fundamental value of the share\n    fundamental_value = present_value_of_dividends + present_value_of_final_price\n\n    # return answer\n    return fundamental_value\n\n# Call the solution function\nprint(solution())\n```\n\nThis program follows these steps to compute the fundamental value of a share:\n1. **Dividends Calculation:** The dividends for the next four years are calculated using the growth rate.\n2. **Present Value of Dividends:** The present value of each dividend is calculated"
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|--------------------------|--------------------------------|\n| 1        | 16                       | 20                             |\n| 2        | 12                       | 20                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-236",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a fund manager constructs a portfolio with two securities that has a projected return of 15%, what is the percentage invested in Security1?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    expected_return_security1 = 0.16\n    expected_return_security2 = 0.12\n    portfolio_expected_return = 0.15\n\n    # Let's denote the percentage invested in Security1 as p (in decimal form),\n    # then the percentage invested in Security2 will be 1-p.\n    # The equation for the expected return of the portfolio is:\n    # portfolio_expected_return = p * expected_return_security1 + (1-p) * expected_return_security2\n\n    # Rearranging the equation, we get:\n    # p = (portfolio_expected_return - expected_return_security2) / (expected_return_security1 - expected_return_security2)\n\n    # Do math calculation to get the answer\n    p = (portfolio_expected_return - expected_return_security2) / (expected_return_security1 - expected_return_security2)\n\n    # Convert percentage to decimal\n    percentage_invested_in_security1 = p * 100\n\n    # return answer\n    return percentage_invested_in_security1\n```\n\nWhen you run this function, `solution()`, it will return the percentage of the portfolio that should be invested in Security1 to achieve a projected return of 15%."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-237",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager employs a valuation model to calculate the worth of a bond portfolio at USD 125.00 million when the term structure is level. With the same model, the fund manager anticipates that the portfolio's value would surge to USD 127.70 million if all interest rates reduce by 20 bps and would drop to USD 122.20 million if all interest rates increase by 20 bps. Given these assumptions, what is the effective duration of the bond portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    base_value = 125.00  # in million USD\n    value_if_rates_decrease = 127.70  # in million USD\n    value_if_rates_increase = 122.20  # in million USD\n    rate_change = 0.0020  # 20 basis points = 0.20% = 0.0020\n\n    # Do math calculation to get the answer\n    price_increase = value_if_rates_decrease - base_value\n    price_decrease = base_value - value_if_rates_increase\n    average_price_change = (price_increase + price_decrease) / 2\n\n    effective_duration = (average_price_change / base_value) / rate_change\n\n    # return answer\n    return effective_duration\n```\n\nThis program calculates the effective duration of the bond portfolio based on the provided changes in interest rates and the corresponding changes in the portfolio value. The effective duration is determined by computing the average price change for a given change in interest rates and then normalizing this change by the base value of the portfolio and the rate change."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-238",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current trading price of ABC shares is $50. A 1-year put option on these shares, with an exercise price of $50, is valued at $2.08. Given a continuously compounded risk-free rate of 4%, what would be the value of a call option that has the same exercise price and date?",
        "output": [
            " To determine the value of a call option that has the same exercise price and date as a put option, you can use the put-call parity principle. The put-call parity states that for a European option, the relationship between the prices of a call option (C) and a put option (P) with the same strike price (K) and expiration date is given by:\n\n\\[ C + Ke^{-rT} = P + S \\]\n\nWhere:\n- \\( C \\) is the price of the call option.\n- \\( P \\) is the price of the put option.\n- \\( K \\) is the strike price of the options.\n- \\( r \\) is the risk-free rate (continuously compounded).\n- \\( T \\) is the time to maturity (in years).\n- \\( S \\) is the current stock price.\n- \\( e \\) is the base of the natural logarithm.\n\nGiven:\n- Current trading price of ABC shares (\\( S \\)) is $50.\n- 1-year put option with an exercise price of $50 (\\( P \\)) is valued at $2.08.\n- Continuously compounded risk-free rate (\\( r \\)) is 4% (or 0.04).\n- Time to maturity (\\( T \\)) is 1 year.\n\nLet's implement the program to calculate the value of the call option:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S = 50.0    # Current trading price of shares\n    P = 2.08    # Price of the put option\n    K = 50.0    # Strike price\n    r = 0.04    # Risk-free rate\n    T = 1.0     # Time to maturity in years\n\n    # Do math calculation to get the answer\n    call_price = P + S - K * math.exp(-r * T)\n\n    # return answer\n    return call_price\n\n# Display the result\nprint(solution())\n```\n\nThis program will calculate the value of the call option using the put-call parity formula. You can execute this code to get the desired result."
        ]
    },
    {
        "tables": [
            "|             | Coefficient | Std. Error | t-Statistic |\n|-------------|-------------|------------|-------------|\n| Sample Size | 150         |            |             |\n| Intercept   | 4990.519    | 2280.093   | 2.189       |\n| P           | -35.666     | 17.871     | -1.996      |\n| 1           | 6.193       | 1.652      | 3.749       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-239",
        "python_solution": "",
        "ground_truth": null,
        "question": "As an owner of a supermarket, David is keen on using mathematical models to tackle various issues. Lately, he wishes to examine the correlation between the quantity of product demand (V), product pricing (P), and customer earning levels (I). The quantity of product demand acts as the dependent variable while the other two serve as independent variables. After conducting a multiple regression analysis, he obtained the following results: What is the upper confidence interval of the regression coefficient for the customer's earning level at 0.1 level?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coeff = 6.193  # Regression coefficient for customer earning level\n    std_error = 1.652  # Standard error of the regression coefficient\n    t_value = 1.658  # Critical t-value for 95% confidence interval (two-tailed, df = 150 - 3 = 147)\n\n    # Do math calculation to get the upper confidence interval\n    upper_conf_interval = coeff + (t_value * std_error)\n\n    # return answer\n    return upper_conf_interval\n\n# Print the upper confidence interval\nprint(solution())\n```\n\nIn the provided Python program, we:\n1. Define the regression coefficient (`coeff`) for the customer earning level.\n2. Define the standard error (`std_error`) of the regression coefficient.\n3. Use the critical t-value (`t_value`) for a two-tailed test at a 0.1 significance level with 147 degrees of freedom (df = sample size - number of predictors - 1). Note: `1.658` is an approximate value; for exact calculations, you might need to use a t-distribution table or the `scipy` library in Python.\n\nThe expression `coeff + (t_value * std_error)` calculates the upper bound of the confidence interval. The result is the upper confidence interval at the 0.1 significance level for the regression coefficient of the customer's earning level."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-240",
        "python_solution": "",
        "ground_truth": null,
        "question": "A client requests John to appraise the real estate with the presumption that the net operating income amounts to $125,000, the discount rate is 11%, and the growth rate stands at 6%. Choosing the direct capitalization approach to determine the value, what is the estimated worth of the multifamily property according to John's calculation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 125000\n    discount_rate = 0.11\n    growth_rate = 0.06\n\n    # Do math calculation to get the answer\n    cap_rate = discount_rate - growth_rate\n    estimated_worth = net_operating_income / cap_rate\n\n    # return answer\n    return estimated_worth\n\n# Run the function to get the estimated worth\nprint(solution())\n```\n\nExplanation:\n\n1. **Define Variables:** The net operating income, discount rate, and growth rate are given as $125,000, 11%, and 6%, respectively. These values are assigned to the variables `net_operating_income`, `discount_rate`, and `growth_rate`.\n\n2. **Calculate Cap Rate:** The capitalization rate (cap rate) is calculated by subtracting the growth rate from the discount rate.\n\n3. **Calculate Estimated Worth:** The estimated worth of the property is determined by dividing the net operating income by the cap rate.\n\n4. **Return Answer:** The function returns the estimated worth of the multifamily property."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-241",
        "python_solution": "",
        "ground_truth": null,
        "question": "A trader has set up a bearish option approach using three identical maturity put options. He purchases two $46 puts for $5 each, and then sells one $53 put for $8 and one $37 put for $3. If the underlying asset is valued at $32 at maturity, what is the ultimate gain of this strategy?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    price_at_maturity = 32\n\n    # Option premiums\n    premium_bought_put_1 = 5\n    premium_bought_put_2 = 5\n    premium_sold_put_1 = 8\n    premium_sold_put_2 = 3\n\n    # Strike prices\n    strike_bought_put_1 = 46\n    strike_bought_put_2 = 46\n    strike_sold_put_1 = 53\n    strike_sold_put_2 = 37\n\n    # Calculate the payoff of each option\n    payoff_bought_put_1 = max(0, strike_bought_put_1 - price_at_maturity) - premium_bought_put_1\n    payoff_bought_put_2 = max(0, strike_bought_put_2 - price_at_maturity) - premium_bought_put_1\n    payoff_sold_put_1 = (min(0, strike_sold_put_1 - price_at_maturity) - premium_sold_put_1) * -1\n    payoff_sold_put_2 = (min(0, strike_sold_put_2 - price_at_maturity) - premium_sold_put_2) * -1\n\n    # Calculate the net gain\n    ultimate_gain = (payoff_bought_put_1 + payoff_bought_put_2) - (payoff_sold_put_1 + payoff_sold_put_2)\n\n    # return answer\n    return ultimate_gain\n```\n\nThis program calculates the payoff for each put option based on the current price at maturity and the initial premiums paid or received for each option. The ultimate gain is then calculated by summing up the payoffs from the bought options and subtracting the payoffs from the sold options."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-242",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's think about this linear regression equation: Y=a+bX+e. If a equals 0.05, b equals 1.2, standard deviation of Y equals 0.26, and standard deviation of e equals 0.1, what would be the correlation between X and Y?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    a = 0.05\n    b = 1.2\n    std_dev_y = 0.26\n    std_dev_e = 0.1\n\n    # Do math calculation to get the answer\n    # The correlation coefficient (r) between X and Y can be derived from the standard deviation of Y and the standard deviation of e\n    # r = sqrt(1 - (std_dev_e^2 / std_dev_y^2))\n\n    correlation = (b * std_dev_y / std_dev_e)\n\n    # return answer\n    return correlation\n```\n\nThe formula for computing the correlation coefficient (r) given the standard deviation of the error term (e) and the standard deviation of Y is derived from the linear regression model.\n\nHere's the complete program:\n\n```python\ndef solution():\n    # Define variables name and value\n    a = 0.05\n    b = 1.2\n    std_dev_y = 0.26\n    std_dev_e = 0.1\n\n    # Do math calculation to get the answer\n    correlation = (b * std_dev_y / std_dev_e)\n\n    # return answer\n    return correlation\n```\n\nWhen you run the `solution` function, it will compute and return the correlation between X and Y."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-243",
        "python_solution": "",
        "ground_truth": null,
        "question": "Enterprise B releases 20 unique bonds and the risk of default for Enterprise B is 2%. The portfolio, made up of the 20 bonds, has a notional value of $1,000,000. Assuming that the default correlation of the 20 bonds is equal to 1 and the recovery rate is 0%, what is the credit VaR of the portfolio at the 99% confidence level?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    number_of_bonds = 20\n    default_probability = 0.02  # 2%\n    notional_value = 1000000\n    confidence_level = 0.99\n\n    # Since the default correlation is 1, all bonds will default together\n    # The credit VaR is the total loss if all bonds default\n    loss_if_default = notional_value\n\n    # If the default_probability is less than 1 - confidence_level, we are looking for the scenario where the expected loss\n    # exceeds the VaR threshold at the given confidence level. Here, credit VaR at 99% confidence level is simply\n    # the same as loss_if_default if the default probability is lower than the complement of the confidence level (1%).\n\n    # Check if default probability is within the confidence level\n    if default_probability <= (1 - confidence_level):\n        credit_var = loss_if_default\n    else:\n        # If default_probability > (1 - confidence_level), credit VaR will be beyond the notional value (unlikely case thus 0).\n        credit_var = 0\n\n    # return answer\n    return credit_var\n\n# The solution function should return the credit VaR\nprint(solution())\n```\n\nIn this solution, given that the default correlation is 1, all bonds will default together, meaning if one defaults, they all will. Since the recovery rate is 0%, if default happens, the entire notional value of the portfolio is lost. At a 99% confidence level, we are interested in the scenario where the probability of default aligns or exceeds the threshold of 1%. Given that the default probability is 2%, it exceeds this threshold, and we'll return the entire notional value as the credit VaR."
        ]
    },
    {
        "tables": [
            "|                               |        |\n|-------------------------------|--------|\n| Straight bond value           | \u00a3 978  |\n| Value of embedded issuer call option | \u00a3 43   |\n| Value of embedded investor put option | \u00a3 26   |\n| Value of embedded call option on issuer's stock | \u00a3 147 |\n| Conversion price              | \u00a3 12.50|\n| Current common stock share price | \u00a3 11.75|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-244",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data about the ZX bond, if ZX bond is identified as a callable-putable convertible bond, what would be the arbitrage-free value of this ZX bond?",
        "output": [
            " To determine the arbitrage-free value of the ZX bond given that it is a callable-putable convertible bond, we need to consider all the embedded options and their respective values. The arbitrage-free value of the ZX bond can be calculated by adding the value of the straight bond and subtracting the values of the embedded options.\n\nBelow is the Python program to calculate the arbitrage-free value of the ZX bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    straight_bond_value = 978\n    issuer_call_option_value = 43\n    investor_put_option_value = 26\n    call_option_on_stock_value = 147\n\n    # Do math calculation to get the answer\n    arbitrage_free_value = straight_bond_value - issuer_call_option_value - investor_put_option_value - call_option_on_stock_value\n\n    # Return answer\n    return arbitrage_free_value\n\n# Call the function to get the solution\nprint(solution())\n```\n\nThis code will calculate the arbitrage-free value of the ZX bond by subtracting the values of the embedded options from the value of the straight bond and return the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-245",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a business has an unprotected credit line and needs to keep its EBIT-to-interest coverage ratio above 2.0. With EBIT expected to be within the range of $36 million to $48 million, all values equally probable, what's the likelihood that the EBIT/interest would exceed 2.0 if the projected annual interest charge is $20 million?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    lower_bound_EBIT = 36_000_000\n    upper_bound_EBIT = 48_000_000\n    interest_charge = 20_000_000\n    required_ratio = 2.0\n\n    # Do math calculation to get the answer\n    EBIT_range = upper_bound_EBIT - lower_bound_EBIT\n    threshold_EBIT = required_ratio * interest_charge\n\n    # Calculate the probability that EBIT/interest exceeds the required ratio\n    if threshold_EBIT <= lower_bound_EBIT:\n        probability = 1.0  # If the required EBIT is below the lower bound, the probability is 100%\n    elif threshold_EBIT >= upper_bound_EBIT:\n        probability = 0.0  # If the required EBIT is above the upper bound, the probability is 0%\n    else:\n        probability = (upper_bound_EBIT - threshold_EBIT) / EBIT_range\n\n    # Return the answer\n    return probability\n\n# Example usage\nprint(solution())\n```\n\nThis Python program calculates the probability that the EBIT-to-interest coverage ratio exceeds 2.0 given the provided EBIT range and annual interest charge."
        ]
    },
    {
        "tables": [
            "|       | Volatility (%) |        | Volatility (%) |\n|-------|--------------|--------|--------------|\n| Fund 1 | 9.81         | Fund 8  | 13.99        |\n| Fund 2 | 10.12       | Fund 9  | 14.47        |\n| Fund 3 | 10.84       | Fund 10 | 14.85        |\n| Fund 4 | 11.33       | Fund 11 | 15.00        |\n| Fund 5 | 12.25       | Fund 12 | 17.36        |\n| Fund 6 | 13.39       | Fund 13 | 17.98        |\n| Fund 7 | 13.42       |         |              |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-246",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the approximate value of the first quintile, considering the volatility of a chain of funds that are part of the same group, arranged in rising order?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    volatilities = [9.81, 10.12, 10.84, 11.33, 12.25, 13.39, 13.42, 13.99, 14.47, 14.85, 15.00, 17.36, 17.98]\n\n    # Sort the volatilities to find the first quintile\n    sorted_volatilities = sorted(volatilities)\n\n    # Compute the index for the first quintile (20th percentile)\n    index = int(len(sorted_volatilities) * 0.2) - 1\n\n    # The first quintile is the value at this index\n    first_quintile = sorted_volatilities[index]\n\n    # return answer\n    return first_quintile\n\n# Running the function to get the answer\nprint(solution())\n```\n\n### Explanation:\n1. **Define Variables**: We start by listing the volatilities from the table.\n2. **Sort Volatilities**: Since the quintile is defined as the value at the 20th percentile of the sorted data, we sort the volatilities.\n3. **Compute Index**: The index corresponding to the first quintile in a sorted list is computed. The list is zero-indexed, so we subtract 1.\n4. **First Quintile**: The first quintile is the value at the computed index.\n5. **Return Answer**: The result is returned from the function.\n\nRunning this code will output the first quintile of the given volatilities."
        ]
    },
    {
        "tables": [
            "| Asset Class             | Global Equity | Global Bonds | Residual Risk (%) |\n|-------------------------|---------------|--------------|-------------------|\n| U.S. real estate equities | 0.60          | 0.15         | 4.4               |\n| Global timber equities  | 0.45          | 0.20         | 3.9               |\n\nAdditional Information\n\n| Variances             | 0.025  | 0.0014 |       |\n|-----------------------|--------|--------|-------|\n\nCorrelation between global equities and global bonds:  0.33"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-247",
        "python_solution": "",
        "ground_truth": null,
        "question": "Reviewing the RiteVal data from Exhibit 1, and adopting the two-factor model preferred by Cortez, where global equity and global bonds are the two primary drivers of return for all asset classes, what is the standard deviation of U.S. real estate?",
        "output": [
            " Certainly! To calculate the standard deviation of U.S. real estate based on a two-factor model where global equity and global bonds are the two primary drivers of return, you can use the provided information. The standard deviation (\u03c3) of an asset with respect to two factors can be calculated with the formula:\n\n\\[ \\sigma^2 = \\beta_{E}^2 \\cdot \\sigma_{E}^2 + \\beta_{B}^2 \\cdot \\sigma_{B}^2 + 2 \\cdot \\beta_{E} \\cdot \\beta_{B} \\cdot \\rho \\cdot \\sigma_{E} \\cdot \\sigma_{B} + \\sigma_{\\epsilon}^2 \\]\n\nWhere:\n- \\(\\beta_{E}\\) and \\(\\beta_{B}\\) are the betas of the asset with respect to global equity and global bonds.\n- \\(\\sigma_{E}^2\\) and \\(\\sigma_{B}^2\\) are the variances of global equity and global bonds.\n- \\(\\rho\\) is the correlation between global equity and global bonds.\n- \\(\\sigma_{\\epsilon}^2\\) is the residual risk (variance).\n\nHere\u2019s how you can write the Python program to calculate the standard deviation of the U.S. real estate equity:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    beta_E = 0.60\n    beta_B = 0.15\n\n    sigma_E_squared = 0.025  # Variance of Global Equities\n    sigma_B_squared = 0.0014  # Variance of Global Bonds\n\n    rho = 0.33  # Correlation between global equities and global bonds\n    residual_risk = 4.4 / 100  # Converting percentage to a decimal\n\n    # Do math calculation to get the answer\n    sigma_squared = (beta_E ** 2 * sigma_E_squared +\n                     beta_B ** 2 * sigma_B_squared +\n                     2 * beta_E * beta_B * rho * math.sqrt(sigma_E_squared) * math.sqrt("
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-248",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Telecom Corporation had an average of 1,000,000 shares in circulation. During the same year, the company also had 10,000 options in circulation with exercise prices of $10 each. The stock's average price during 2009 was $15. To calculate the diluted earnings per share, how many shares should be considered in the denominator?",
        "output": [
            " Sure, here is the Python program to calculate the number of shares to be considered in the denominator for calculating the diluted earnings per share:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_in_circulation = 1000000\n    options_in_circulation = 10000\n    exercise_price = 10\n    stock_average_price = 15\n\n    # Calculate the number of options that are dilutive\n    dilutive_options = options_in_circulation * max(0, (stock_average_price - exercise_price) / stock_average_price)\n\n    # Calculate the total number of shares to be considered in the denominator\n    total_shares = shares_in_circulation + dilutive_options\n\n    # return answer\n    return total_shares\n\n# Run the solution to get the answer\nprint(solution())\n```\n\nThe program first calculates the number of options that are dilutive by determining if the stock's average price is higher than the exercise price of the options. Then, it adds the diluted number of options to the shares in circulation to get the total number of shares to be considered in the denominator."
        ]
    },
    {
        "tables": [
            "| Year | Net Return (%) |\n|------|----------------|\n| 2008 | -34.8          |\n| 2009 | 32.2           |\n| 2010 | 11.1           |\n| 2011 | -1.4           |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-249",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would be the required 2012 return to get a trailing five-year geometric mean annualized return of 5% by the end of 2012, assuming a wealth management company has the following yearly returns in their US large-cap equity portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [-0.348, 0.322, 0.111, -0.014]  # Historical returns from 2008 to 2011\n    target_five_year_return = 0.05  # Target geometric mean annualized return\n\n    # Calculate the product of (1 + returns) for the past years\n    product_of_returns = 1\n    for r in returns:\n        product_of_returns *= (1 + r)\n\n    # Calculate the factor needed to reach the target five-year return of 5%\n    target_factor = (1 + target_five_year_return) ** 5\n\n    # Calculate the required return for 2012 to achieve the target five-year return\n    required_return_2012 = (target_factor / product_of_returns) - 1\n\n    # return answer\n    return required_return_2012\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the historical returns from 2008 to 2011, calculates the compound factor over these four years, and then determines the return needed in 2012 to achieve a geometric mean annualized return of 5% over the five-year period."
        ]
    },
    {
        "tables": [
            "| End of Year | Call Price |\n|-------------|------------|\n| 3           | 102        |\n| 4           | 101        |\n| 5           | 100        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-250",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond that has 5 years left before maturity is presently being sold for 101 for every 100 of par value. This bond provides a 6% coupon rate, with interest paid twice a year. What is the bond's yearly yield-to-maturity, bearing in mind the bond can first be redeemed after 3 years, with further redemptions possible based on the successive coupon dates, according to the schedule provided?",
        "output": [
            " To calculate the bond's yearly yield-to-maturity (YTM), we need to use the formula for the price of the bond, which takes into account the coupon payments and the face value at maturity. Given that this bond can be redeemed at different times with different call prices, we will focus on calculating the YTM based on the maturity date without considering the callability for simplicity.\n\nHere\u2019s a simplified version of the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Par value of the bond\n    current_price = 101  # Price at which the bond is currently sold\n    coupon_rate = 0.06  # Annual coupon rate\n    years_to_maturity = 5  # Years left to maturity\n    coupon_frequency = 2  # Number of coupons paid per year\n    market_price = face_value * (current_price / 100)  # Market price calculation\n\n    # Calculate the semi-annual coupon payment\n    semi_annual_coupon = (coupon_rate * face_value) / coupon_frequency\n\n    # We assume a trial and error approach to find the YTM\n    def bond_price(ytm):\n        total_pv = 0\n        for t in range(1, 2 * years_to_maturity + 1):\n            total_pv += semi_annual_coupon / (1 + ytm / coupon_frequency) ** t\n        total_pv += face_value / (1 + ytm / coupon_frequency) ** (2 * years_to_maturity)\n        return total_pv\n\n    # Initial guesses for the YTM (you can improve this with more sophisticated root-finding methods)\n    low = 0.0\n    high = coupon_rate * 2  # Assuming YTM is less than twice the coupon rate\n    tol = 1e-6  # Tolerance for the solution\n\n    while high - low > tol:\n        mid = (low + high) / 2\n        price = bond_price(mid)\n        if price > market_price:\n           "
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-251",
        "python_solution": "",
        "ground_truth": null,
        "question": "Management at S&Q Enterprises is given the option to receive options on common stocks. The options necessitate a service period of 4 years post the grant date for vesting. S&Q follows a financial year-end of December 31. The enterprise on July 1, 2014, gave out 61,600 options. The market price of the options on the date of grant was \u00a30.5. What is the chunk of the compensation expense associated with the stock option granted in 2014?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_options = 61600\n    market_price = 0.5\n    vesting_period = 4  # years\n\n    # Do math calculation to get the answer\n    total_compensation_expense = total_options * market_price\n    annual_compensation_expense = total_compensation_expense / vesting_period\n\n    # Since the options were granted on July 1, 2014, only half of the annual expense is recognized in 2014\n    half_year_compensation_expense = annual_compensation_expense / 2\n\n    # return answer\n    return half_year_compensation_expense\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the compensation expense associated with the stock options granted in 2014, considering that only half of the year's expense is recognized, given that the options were granted on July 1, 2014."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-252",
        "python_solution": "",
        "ground_truth": null,
        "question": "Leaving out the impacts of compound interest, what would be the predicted overall cost of keeping an investment for nine months in the ETF, keeping in mind an ETF with these management fees and trading expenses: An annual management fee of 0.40%, round-trip trading fees of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0040  # 0.40%\n    round_trip_trading_fees = 0.0055  # 0.55%\n    bid_offer_spread = 0.0020  # 0.20% on buying and selling\n    investment_period_months = 9\n\n    # Do math calculation to get the answer\n    total_fees_yearly = annual_management_fee + round_trip_trading_fees + (2 * bid_offer_spread)\n    monthly_fees = total_fees_yearly / 12\n    total_cost = monthly_fees * investment_period_months\n\n    # return answer\n    return total_cost\n\n# Calling the function to get the answer\nanswer = solution()\nprint(f\"The predicted overall cost is: {answer:.4f}\")\n```\n\nIn this program, we:\n1. Define the variables for the various fees and the investment period.\n2. Calculate the total annual fees including the management fee, round-trip trading fees, and the bid-offer spread.\n3. Convert the annual fees into a monthly fee.\n4. Calculate the total cost for the 9-month period.\n5. Return the total cost as the answer.\n\nYou can run the code to get the predicted overall cost of keeping an investment for nine months in the ETF."
        ]
    },
    {
        "tables": [
            "| ($ thousands) | 2013 | 2012 |\n|---|---|---|\n|Deferred tax assets| 200 | 160 |\n|Deferred tax liabilities| -450 | -360 |\n|Net deferred tax liabilities| -250 | -200 |\n|Earnings before taxes| 4,000 | 3,800 |\n|Income taxes at the statutory rate| 1,200 | 1,140 |\n|Income tax payable (Current income tax expense)| 1,000 | 900 |"
        ],
        "topic": "Accounting",
        "question_id": "test-253",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the income tax expense (in thousands) in 2013 for the corporation, based on the provided data about the corporation?",
        "output": [
            " Certainly! Let's define the variables and use the given data to calculate the income tax expense for the year 2013. The income tax expense can be calculated using the following formula:\n\n\\[ \\text{Income tax expense} = \\text{Income taxes at the statutory rate} + (\\Delta \\text{Deferred tax assets} - \\Delta \\text{Deferred tax liabilities}) - \\text{Income tax payable} \\]\n\nHere's your Python program to perform the calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    deferred_tax_assets_2013 = 200\n    deferred_tax_assets_2012 = 160\n    deferred_tax_liabilities_2013 = -450\n    deferred_tax_liabilities_2012 = -360\n    income_taxes_at_statutory_rate_2013 = 1200\n    income_tax_payable_2013 = 1000\n\n    # Do math calculation to get the answer\n    delta_deferred_tax_assets = deferred_tax_assets_2013 - deferred_tax_assets_2012\n    delta_deferred_tax_liabilities = deferred_tax_liabilities_2013 - deferred_tax_liabilities_2012\n\n    income_tax_expense = (income_taxes_at_statutory_rate_2013\n                          + (delta_deferred_tax_assets - delta_deferred_tax_liabilities)\n                          - income_tax_payable_2013)\n\n    # return answer\n    return income_tax_expense\n```\n\nWhen you run this function, it will calculate and return the income tax expense for the year 2013 based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-254",
        "python_solution": "",
        "ground_truth": null,
        "question": "If corporation AR has a turnover that is 3 times and its sales amount to $5000, could you compute the corporation's AR?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    turnover = 3\n    sales = 5000\n\n    # Do math calculation to get the answer\n    corporation_ar = sales / turnover\n\n    # return answer\n    return corporation_ar\n```\n\nIn this program, we define the turnover and sales values as given in the problem. We then use the formula for calculating the corporation's Accounts Receivable (AR), which is derived from the relationship between sales and turnover. The result is returned as the answer."
        ]
    },
    {
        "tables": [
            "|       | Fund Y(%) |\n|-------|-----------|\n| Year 1|   19.5    |\n| Year 2|   -1.9    |\n| Year 3|   19.7    |\n| Year 4|   35.0    |\n| Year 5|   5.7     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-255",
        "python_solution": "",
        "ground_truth": null,
        "question": "The accompanying display presents the yearly returns for Investment Pool X. What is the geometric mean return for Investment Pool X?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [0.195, -0.019, 0.197, 0.350, 0.057]\n\n    # Do math calculation to get the answer\n    n = len(returns)\n    product = 1\n    for ret in returns:\n        product *= (1 + ret)\n\n    geometric_mean_return = product ** (1/n) - 1\n\n    # return answer\n    return geometric_mean_return\n\n# Call the function to get the result\nanswer = solution()\nprint(f\"The geometric mean return for Investment Pool X is: {answer:.4f}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-256",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a yearly discount rate of 6.5%, compounded monthly, what is the present worth of a financial agreement that promises to pay \u20ac1,200 each month for a period of five years, with the first payment being done instantly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yearly_discount_rate = 0.065\n    monthly_payment = 1200\n    period_in_years = 5\n    monthly_discount_rate = yearly_discount_rate / 12\n    number_of_payments = period_in_years * 12\n\n    # Do math calculation to get the answer\n    present_value = 0\n    for n in range(1, number_of_payments + 1):\n        present_value += monthly_payment / (1 + monthly_discount_rate)**n\n\n    # The first payment is done instantly, so we add that to the present value\n    present_value += monthly_payment\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThe logic here is to calculate the present value of each monthly payment, taking into account that the first payment is made instantly. We then sum these values to find the total present value of the financial agreement. The `round()` function is used to round the answer to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-257",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the standard deviation of the average weekly return if an investment analyst is estimating the VaR for a portfolio using a data set of 25 weekly returns, with an average weekly return of 7% and a standard deviation for the return series of 15%, given that the weekly returns are independent and identically distributed?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    n = 25  # number of weekly returns\n    average_weekly_return = 0.07  # average weekly return (7% as a decimal)\n    std_dev_weekly_return = 0.15  # standard deviation of the return series (15% as a decimal)\n\n    # Do math calculation to get the answer\n    # Standard deviation of the average return can be calculated using the formula:\n    # std_dev_average_return = std_dev_weekly_return / sqrt(n)\n    from math import sqrt\n\n    std_dev_average_return = std_dev_weekly_return / sqrt(n)\n\n    # return answer\n    return std_dev_average_return\n\n# Run the solution function to get the answer\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-258",
        "python_solution": "",
        "ground_truth": null,
        "question": "Financial institution C provides an unsecured loan worth $10 million to enterprise D. Based on the forecasted data, the likelihood of enterprise D defaulting is 4% and the recovery rate stands at 40%. What is the credit reserve that Financial institution C should maintain equal to the anticipated credit loss?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 10000000  # $10 million\n    probability_of_default = 0.04  # 4%\n    recovery_rate = 0.40  # 40%\n\n    # Do math calculation to get the answer\n    expected_loss = loan_amount * probability_of_default * (1 - recovery_rate)\n\n    # return answer\n    return expected_loss\n```\n\nIn this program, we define the loan amount, probability of default, and recovery rate. We then calculate the expected loss as the credit reserve by multiplying the loan amount by the probability of default and the proportion of the loan that is unrecoverable (1 minus the recovery rate). The result is the amount of credit reserve that Financial institution C should maintain."
        ]
    },
    {
        "tables": [
            "|                         | $ millions |\n|-------------------------|-----------|\n| Net Income              | 485       |\n| Depreciation expense    | 270       |\n| Increase in accounts receivable | 59        |\n| Increase in accounts payable | 33        |\n| Purchase of fixed assets | 523       |\n| Increase in notes payable | 15        |\n| Increase in long-term debt | 60        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-259",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the financial report, what is the FCFE for Company P?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 485\n    depreciation_expense = 270\n    increase_in_accounts_receivable = 59\n    increase_in_accounts_payable = 33\n    purchase_of_fixed_assets = 523\n    increase_in_notes_payable = 15\n    increase_in_long_term_debt = 60\n\n    # Do math calculation to get the answer\n    net_cash_flow_from_operating_activities = net_income + depreciation_expense - increase_in_accounts_receivable + increase_in_accounts_payable\n\n    # Subtract capital expenditures (CAPEX) which is the purchase of fixed assets\n    net_cash_flow_after_capex = net_cash_flow_from_operating_activities - purchase_of_fixed_assets\n\n    # Add increase in notes payable and increase in long-term debt\n    fcfe = net_cash_flow_after_capex + increase_in_notes_payable + increase_in_long_term_debt\n\n    # return answer\n    return fcfe\n\n# Execute the solution function\nprint(solution())\n```\n\nExplanation of the calculation:\n1. Calculate the net cash flow from operating activities:\n   - Net Income + Depreciation expense - Increase in Accounts Receivable + Increase in Accounts Payable\n2. Subtract capital expenditures (CAPEX), which is the purchase of fixed assets.\n3. Add the increase in notes payable and the increase in long-term debt.\n\nThe `fcfe` (Free Cash Flow to Equity) is the remaining cash flow after accounting for operating activities, capital expenditures, and financing activities."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-260",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the lower limit of a 99% confidence interval for the population mean if you have a sample size of 65, a mean of 31, and a variance of 529 from a normally distributed population?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sample_size = 65\n    sample_mean = 31\n    variance = 529\n    confidence_level = 0.99\n\n    import scipy.stats as stats\n\n    # Calculate the standard error\n    standard_error = (variance / sample_size) ** 0.5\n\n    # Calculate the z-value for the 99% confidence level\n    z_value = stats.norm.ppf((1 + confidence_level) / 2)\n\n    # Calculate the margin of error\n    margin_of_error = z_value * standard_error\n\n    # Calculate the lower limit of the confidence interval\n    lower_limit = sample_mean - margin_of_error\n\n    # return answer\n    return lower_limit\n```\n\nExplanation:\n1. **Define Variables:** We define the sample size, sample mean, variance, and confidence level.\n2. **Calculate the Standard Error:** The standard error is calculated as the square root of the variance divided by the sample size.\n3. **Calculate the z-value:** We use the `scipy.stats.norm.ppf` function to get the z-value corresponding to the 99% confidence level.\n4. **Calculate the Margin of Error:** The margin of error is calculated as the product of the z-value and the standard error.\n5. **Calculate the Lower Limit of the Confidence Interval:** The lower limit is calculated by subtracting the margin of error from the sample mean.\n6. **Return the Answer:** The lower limit is returned as the final result."
        ]
    },
    {
        "tables": [
            "|                      | Book value | Fair value |\n|----------------------|------------|------------|\n| Plant & equipment    | 2500       | 2800       |\n| Total assets         | 2950       | 3250       |\n| Liabilities          | 1550       | 1550       |\n| Net assets           | 1400       | 1700       |"
        ],
        "topic": "Accounting",
        "question_id": "test-261",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the 1st of January 2019, ABC corporation purchased a 20% stake with voting rights in XYZ Ltd. for $400 million. ABC corporation has a seat on XYZ's board of directors and has a say in their policymaking. An analyst named Anne collects specific financial data for XYZ in 2019. The plant and equipment are depreciated on a linear basis and have a remaining lifespan of 10 years. From the Exhibit mentioned, what is the goodwill included in ABC\u2019s acquisition of XYZ?",
        "output": [
            " Certainly! Based on the given problem, we need to calculate the goodwill included in ABC's acquisition of XYZ. The formula for goodwill is generally given by:\n\n\\[ \\text{Goodwill} = \\text{Purchase Price} - \\text{Net Assets at Fair Value} \\]\n\nGiven:\n- Purchase Price = $400 million\n- Net Assets at Fair Value = $1700 million\n- The remaining lifespan of the plant and equipment is 10 years, but since we are using the fair value, we do not need this for the goodwill calculation.\n\nHere\u2019s the Python program to calculate the goodwill:\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 400  # in million dollars\n    net_assets_fair_value = 1700  # in million dollars\n\n    # Do math calculation to get the answer\n    percentage_stake = 0.20  # 20% stake\n    fair_value_of_stake = net_assets_fair_value * percentage_stake\n    goodwill = purchase_price - fair_value_of_stake\n\n    # return answer\n    return goodwill\n\n# Example usage\nprint(solution())\n```\n\nThis program correctly calculates the goodwill included in ABC's acquisition of XYZ by taking into account the stake percentage and the net assets at fair value."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-262",
        "python_solution": "",
        "ground_truth": null,
        "question": "If rolling the dice, the likelihood that number 1 is on top is 1/6, what are the chances of this happening?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    likelihood_of_one = 1/6\n\n    # Do math calculation to get the answer\n    chance = likelihood_of_one\n\n    # return answer\n    return chance\n```\n\nThis program defines a variable `likelihood_of_one` with the value `1/6`, representing the likelihood of rolling a number 1 on a die. The function then directly returns this value, which corresponds to the chance of this event happening."
        ]
    },
    {
        "tables": [
            "| Maturity | Coupon | Price |\n|----------|--------|-------|\n| 6 months | 4.5%   | 101.47 |\n| 1 year   | 6.0%   | 102.75 |\n| 2 years  | 7%     | 100.32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-263",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the table illustrating data about three semiannual coupon payment bonds, what is the discount factor for d(0.5)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    FV = 101.47  # Face value plus interest\n    P = 100.0    # Face value of the bond\n    r = 4.5 / 100 / 2  # Half-yearly coupon rate\n    n = 1  # Number of half-year periods\n\n    # Do math calculation to get the discount factor\n    C = FV * r  # Half-yearly coupon payment\n    discount_factor = (FV - C) / (FV + C)  # Calculate discount factor for d(0.5)\n\n    # return the discount factor rounded to 4 decimal places\n    return round(discount_factor, 4)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-264",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following table outlines details from the financial reports of BC Enterprises as of December 31, 20X8. Using this data, can you determine the sustainable growth rate of BC Enterprises? The figures are as follows: revenue: $800,000, dividend paid: $80,000, total asset turnover: 0.58, financial leverage: 1.7, sales to net income: 6.5, tax rate: 20%.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 800000\n    dividend_paid = 80000\n    total_asset_turnover = 0.58\n    financial_leverage = 1.7\n    sales_to_net_income = 6.5\n    tax_rate = 0.20\n\n    # Calculate intermediate values\n    equity_multiplier = financial_leverage  # same as leverage\n    net_income = revenue / sales_to_net_income\n    retained_earnings = net_income - dividend_paid\n\n    # Calculate return on equity (ROE)\n    return_on_assets = net_income / (revenue / total_asset_turnover)\n    roe = return_on_assets * equity_multiplier\n\n    # Calculate retention ratio\n    retention_ratio = 1 - (dividend_paid / net_income)\n\n    # Calculate sustainable growth rate\n    sustainable_growth_rate = roe * retention_ratio\n\n    # Return the answer\n    return sustainable_growth_rate\n\n# Running the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-265",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming equal funding from each source and a marginal tax rate of 30%, what is the weighted average cost of capital (%) if a company's post-tax debt costs, preferred shares, and equity are 8.4%, 14%, and 16% respectively?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    debt_cost_post_tax = 8.4\n    preferred_shares_cost = 14.0\n    equity_cost = 16.0\n    marginal_tax_rate = 30.0 / 100  # converting percentage to decimal\n\n    # Calculate pre-tax debt cost\n    debt_cost_pre_tax = debt_cost_post_tax / (1 - marginal_tax_rate)\n\n    # Assuming equal funding from each source\n    total_funding = debt_cost_pre_tax + preferred_shares_cost + equity_cost\n    debt_weight = debt_cost_pre_tax / total_funding\n    preferred_shares_weight = preferred_shares_cost / total_funding\n    equity_weight = equity_cost / total_funding\n\n    # Calculate weighted average cost of capital\n    wacc = (debt_weight * debt_cost_post_tax) + (preferred_shares_weight * preferred_shares_cost) + (equity_weight * equity_cost)\n\n    # return answer\n    return wacc\n```\n\nYou can use this code to calculate the weighted average cost of capital based on the given financial information."
        ]
    },
    {
        "tables": [
            "| Liabilities at  year-end | \u00a3 1,000 |\n|-------------------------|---------|\n| Contributed capital at year-end | \u00a3 500 |\n| Beginning retained earnings | \u00a3 600 |\n| Revenue during the year | \u00a3 5,000 |\n| Expenses during the year | \u00a3 4,300 |"
        ],
        "topic": "Accounting",
        "question_id": "test-266",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher has gathered the following data about Smithson Enterprises. No distributions have been made to the owners. What would most probably be the researcher's estimate of the total assets at the end of the year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    liabilities = 1000  # Liabilities at year-end (in \u00a31,000)\n    contributed_capital = 500  # Contributed capital at year-end (in \u00a3)\n    beginning_retained_earnings = 600  # Beginning retained earnings (in \u00a3)\n    revenue = 5000  # Revenue during the year (in \u00a3)\n    expenses = 4300  # Expenses during the year (in \u00a3)\n\n    # Do math calculation to get the answer\n    net_income = revenue - expenses\n    ending_retained_earnings = beginning_retained_earnings + net_income\n    total_equity = contributed_capital + ending_retained_earnings\n    total_assets = total_equity + liabilities\n\n    # return answer\n    return total_assets\n```\n\n### Explanation:\n1. **Define Variables:**\n   - `liabilities`: Liabilities at year-end in \u00a31,000.\n   - `contributed_capital`: Contributed capital at year-end in \u00a3.\n   - `beginning_retained_earnings`: Beginning retained earnings in \u00a3.\n   - `revenue`: Revenue during the year in \u00a3.\n   - `expenses`: Expenses during the year in \u00a3.\n\n2. **Calculate Net Income:**\n   - `net_income = revenue - expenses`\n\n3. **Calculate Ending Retained Earnings:**\n   - `ending_retained_earnings = beginning_retained_earnings + net_income`\n\n4. **Calculate Total Equity:**\n   - `total_equity = contributed_capital + ending_retained_earnings`\n\n5. **Calculate Total Assets:**\n   - `total_assets = total_equity + liabilities`\n\n6. **Return Total Assets:**\n   - The program returns the calculated total assets.\n\nRunning this program will give you the estimated total assets at the end of the year."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-267",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that a random variable Y follows a normal distribution with a mean of 40 and a standard deviation of 14. What is the likelihood that Y is not within the range of 12 to 61?",
        "output": [
            " Certainly! To find the likelihood that a normally distributed random variable Y is not within a certain range, you will need to use the properties of the normal distribution and possibly leverage a statistical library in Python like `scipy.stats`.\n\nHere's the Python program to answer the given question:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 40\n    std_dev = 14\n    lower_bound = 12\n    upper_bound = 61\n\n    # Do math calculation to get the answer\n    # Calculate the probability that Y is within the range [12, 61]\n    prob_within_range = norm.cdf(upper_bound, mean, std_dev) - norm.cdf(lower_bound, mean, std_dev)\n\n    # Calculate the probability that Y is not within the range\n    prob_not_within_range = 1 - prob_within_range\n\n    # return answer\n    return prob_not_within_range\n\n# Example usage:\nprint(solution())\n```\n\n### Explanation:\n1. **Importing Libraries**:\n   - The `norm` function from the `scipy.stats` library is used to get the cumulative distribution function (CDF) of the normal distribution.\n\n2. **Variable Definitions**:\n   - `mean`: The mean of the normal distribution (40).\n   - `std_dev`: The standard deviation of the normal distribution (14).\n   - `lower_bound`: The lower value of the range (12).\n   - `upper_bound`: The upper value of the range (61).\n\n3. **Calculations**:\n   - Using `norm.cdf(upper_bound, mean, std_dev)`, we get the probability that Y is less than or equal to the upper bound.\n   - Using `norm.cdf(lower_bound, mean, std_dev)`, we get the probability that Y is less than or equal to the lower bound.\n   - By subtracting these two probabilities, we get the probability that Y is within the range [12, 61]."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-268",
        "python_solution": "",
        "ground_truth": null,
        "question": "How many permutations can be made when selecting 4 items from a group of 10 items?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    import math\n\n    # Number of items in the group\n    total_items = 10\n    # Number of items to select\n    items_to_select = 4\n\n    # Do math calculation to get the answer\n    permutations = math.perm(total_items, items_to_select)\n\n    # return answer\n    return permutations\n```\n\nTo calculate the number of permutations, we use the `math.perm` function from the Python `math` library. This function computes the number of permutations of `total_items` taken `items_to_select` at a time. This will give us the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-269",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is a trader based in the United States. John has posted a 6-month forward exchange rate in USD/GBP at 1.3923. Additionally, John predicts a 6-month forward point percentage of 5.6%. Which among the following selections for the USD/GBP spot rate would be the most precise?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.3923\n    forward_point_percentage = 5.6 / 100\n\n    # Do math calculation to get the answer\n    spot_rate = forward_rate / (1 + forward_point_percentage)\n\n    # return answer\n    return spot_rate\n```\n\nThis program calculates the spot rate for USD/GBP by using the given forward exchange rate and the forward point percentage. The spot rate is derived by dividing the forward rate by one plus the forward point percentage expressed as a decimal."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-270",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Chief Information Officer of a private equity firm in Canada is looking to secure the interest on a three-month \"bridge\" loan that his company will acquire in six months to finalize an LBO transaction. He trades the applicable interest rate futures contracts at 98.05. After six months, he starts the loan at 2.70% and neutralizes the hedge at 97.30. What is the effective interest rate on the loan?",
        "output": [
            " Sure, let's define the necessary variables and implement the math calculation required to answer the question.\n\nFirst, let's break down the terms and calculations used in the question:\n\n1. **Interest Rate Futures Price**: These are given as 98.05 when the hedge is initiated and 97.30 when the hedge is neutralized.\n\n2. **Loan Rate**: The actual loan interest rate is 2.70% when the loan starts.\n\n3. **Effective Interest Rate**: The effective interest rate is calculated taking into account the interest rate futures contracts.\n\nHere is the Python program to calculate the effective interest rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    futures_initial_price = 98.05\n    futures_final_price = 97.30\n    loan_interest_rate = 2.70 / 100  # Convert percent to decimal\n\n    # Calculate gain/loss from futures contracts\n    gain_loss_per_contract = futures_initial_price - futures_final_price\n\n    # The interest rate change represented by the futures price change\n    interest_rate_change = (gain_loss_per_contract / 100) * 100  # Convert futures price change to percent\n\n    # Effective interest rate = loan interest rate + interest rate change from futures\n    effective_interest_rate = loan_interest_rate + (interest_rate_change / 100)  # Correct the calculation of interest_rate_change\n\n    # Convert the effective interest rate back to a percentage for the final answer\n    effective_interest_rate_percent = effective_interest_rate * 100\n\n    # Return the answer\n    return effective_interest_rate_percent\n```\n\nIn the program:\n- `futures_initial_price` and `futures_final_price` represent the values at which the futures were traded.\n- `loan_interest_rate` is the loan rate converted to a decimal for calculation purposes.\n- The gain/loss from futures contracts is calculated as the difference between the initial and final futures prices.\n- The interest rate change is derived from"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-271",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a functional procedure has a 5% chance of resulting in a substantial financial loss and if not, no significant loss is recorded (i.e., Bernoulli). If the substantial loss happens, the intensity is normally distributed with an average of $4 million and a standard deviation of $2 million. What is the expected shortfall at the 95% confidence level?",
        "output": [
            " To calculate the expected shortfall at the 95% confidence level for a given financial loss scenario with provided parameters, we need to perform the following steps:\n\n1. Define the parameters of the problem.\n2. Calculate the Value at Risk (VaR) for the 95% confidence level.\n3. Calculate the expected shortfall (ES) at the 95% confidence level.\n\nHere is the Python program that performs these calculations:\n\n```python\nimport scipy.stats as stats\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    probability_of_loss = 0.05\n    mean_loss = 4000000  # 4 million\n    std_dev_loss = 2000000  # 2 million\n    confidence_level = 0.95\n\n    # Calculate the Value at Risk (VaR) at the 95% confidence level\n    var = stats.norm.ppf(confidence_level) * std_dev_loss + mean_loss\n\n    # Calculate the expected shortfall (ES) at the 95% confidence level\n    es = (std_dev_loss * stats.norm.pdf(stats.norm.ppf(confidence_level)) / (1 - confidence_level)) + mean_loss\n\n    # Consider the overall substantial loss situation\n    total_es = probability_of_loss * es\n\n    # return answer\n    return total_es\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program uses the `scipy.stats.norm` library to handle the normal distribution calculations. The `VaR` is calculated first using the inverse cumulative distribution function (ppf) for the normal distribution and the ES is derived using the formula for the expected shortfall in a normal distribution. Finally, the overall expected shortfall is adjusted by the probability of such a loss occurring."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-272",
        "python_solution": "",
        "ground_truth": null,
        "question": "Miller is a tax consultant who gives tax awareness counsel to individual clients. Miller's client is Jane who currently has $10 million invested in a tax-deferred account earning 8% annually. Jane intends to liquidate the investment after five years, accrue the sale proceeds in a lump sum (which are taxed at a 20% rate), and utilize the proceeds to buy a mansion. Jane requested Miller to determine the leftover after-tax wealth after five years. What will be the after-tax wealth in Jane's tax-deferred account at the conclusion of the five years?",
        "output": [
            " Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10_000_000\n    annual_return_rate = 0.08\n    years = 5\n    tax_rate = 0.20\n\n    # Do math calculation to get the answer\n    final_value = initial_investment * (1 + annual_return_rate) ** years\n    tax_amount = final_value * tax_rate\n    after_tax_wealth = final_value - tax_amount\n\n    # return answer\n    return after_tax_wealth\n```\n\nYou can execute this `solution()` function to get Jane's after-tax wealth in her tax-deferred account at the conclusion of the five years."
        ]
    },
    {
        "tables": [
            "|                          | Portfolio W       | Futures Contract and CTD Bond |\n| ------------------------ | --------------- | ----------------------------- |\n| Market value            | $120,349,000      | Price                         | 143.20                      |\n| Modified duration       | 9.30             | Modified duration             | 9.00                         |\n| Basis point value       | $111,924.57      | Basis point value             | 128.88                       |\n|                          |                   | Conversion factor             | 0.75                         |\n|                          |                   | Contract size                 | $100,000                     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-273",
        "python_solution": "",
        "ground_truth": null,
        "question": "John, a beginner analyst, oversees a portfolio X. The portfolio is completely committed to US Treasuries. John aims to fully safeguard this bond portfolio against any increase in interest rates. Exhibit 1 discloses certain information regarding Portfolio X, along with the related Treasury futures contract, and the cheapest-to-deliver (CTD) bond. Considering the data in Exhibit 1, how many Treasury futures contracts does John need to sell to fully protect Portfolio X?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    portfolio_bpv = 111924.57\n    futures_bpv = 128.88\n    conversion_factor = 0.75\n    contract_size = 100000\n\n    # Do math calculation to get the answer\n    num_contracts = (portfolio_bpv / futures_bpv) * conversion_factor\n\n    # return answer\n    return round(num_contracts / contract_size)\n\n# Test the solution\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-274",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current status of the PlayPoint Resort Company is that it has 1.2 million outstanding common shares with a beta of 2.2. Also, it has bonds of a face value of $10 million that will mature in five years and these bonds have an 8% coupon with payments every 6 months, and are calculated to yield 13.65 percent. If PlayPoint decides to issue new bonds up to $2.5 million, the bonds will be priced at par value and will yield 13.65 percent. However, if the company decides to issue bonds beyond $2.5 million, the expected yield on the entire issuance will be 16 percent. PlayPoint recently determined that they can issue new common stock at $10 per share. The present risk-free interest rate is at 3 percent while the expected market return is 10 percent. PlayPoint's marginal tax rate is at 30 percent. What is the weighted average cost of capital if PlayPoint ac",
        "output": [
            " Certainly! Here is the Python program to calculate the weighted average cost of capital (WACC) for PlayPoint Resort Company based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    outstanding_shares = 1200000\n    equity_beta = 2.2\n    bond_face_value = 10000000\n    bond_coupon_rate = 0.08\n    bond_maturity = 5\n    bond_payments_per_year = 2\n    bond_market_yield = 0.1365\n    additional_bonds_yield = 0.16  # Yield if issuing bonds beyond $2.5 million\n    new_bonds_threshold = 2500000\n    new_stock_price = 10\n    risk_free_rate = 0.03\n    market_return = 0.10\n    marginal_tax_rate = 0.30\n\n    # Calculate the total amount of new bonds PlayPoint decides to issue\n    new_bonds_issue = 5000000  # Assuming PlayPoint issues $5 million new bonds as an example\n\n    # Calculate cost of equity using CAPM\n    cost_of_equity = risk_free_rate + equity_beta * (market_return - risk_free_rate)\n\n    # Calculate cost of existing debt\n    cost_of_debt_existing = bond_market_yield\n\n    # Calculate the weighted cost of debt based on new bond issuance\n    if new_bonds_issue <= new_bonds_threshold:\n        cost_of_debt_new = bond_market_yield\n    else:\n        fraction_at_lower_yield = new_bonds_threshold / new_bonds_issue\n        fraction_at_higher_yield = (new_bonds_issue - new_bonds_threshold) / new_bonds_issue\n        cost_of_debt_new = (fraction_at_lower_yield * bond_market_yield) + (fraction_at_higher"
        ]
    },
    {
        "tables": [
            "|                               |         |\n|-------------------------------|---------|\n|Exhibit 1 10-Year Trailing Risk-Adjusted Performance| |\n| Average annual return        | 8.20%   |\n| Minimum acceptable return (MAR) | 5.00%   |\n| Sharpe ratio                 | 0.95    |\n| Sortino ratio                | 0.87    |\n| Upside capture               | 0.66    |\n| Downside capture             | 0.50    |\n| Maximum drawdown             | -24.00% |\n| Drawdown duration            | 4 months|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-275",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to Exhibit 1, what is the projected semi-deviation for the investment portfolio?",
        "output": [
            " Certainly! To calculate the projected semi-deviation for the investment portfolio using the given Sharpe ratio and average annual return, let's follow these steps:\n\n1. **Sharpe Ratio Formula**: \\( \\text{Sharpe Ratio} = \\frac{R_p - R_f}{\\sigma_p} \\)\n   - Where \\( R_p \\) is the portfolio return, \\( R_f \\) is the risk-free rate, and \\( \\sigma_p \\) is the portfolio standard deviation.\n\n2. Rearrange the formula to solve for \\( \\sigma_p \\):\n   \\( \\sigma_p = \\frac{R_p - R_f}{\\text{Sharpe Ratio}} \\)\n\n3. **Semi-deviation**: Assuming that we are given Sharpe ratio which accounts for overall standard deviation we can use it to derive an approximate value for semi-deviation. Generally, semi-deviation is the standard deviation of the returns that fall below the average return, but here, we will approximate the semi-deviation using given data since exact data points of returns are not available.\n\n4. Given values:\n   - Average annual return (\\( R_p \\)) = 8.20%\n   - Minimum acceptable return (\\( MAR \\)) = 5.00% (We will use this as a proxy for \\( R_f \\) for simplicity)\n   - Sharpe ratio = 0.95\n\nHere is the Python code to calculate the projected semi-deviation:\n\n```python\ndef solution():\n    # Define variables name and value\n    average_annual_return = 0.0820  # 8.20%\n    min_acceptable_return = 0.0500  # 5.00% (used as proxy for risk-free rate)\n    sharpe_ratio = 0.95\n\n    # Do math calculation to get the answer\n    portfolio_standard_deviation = (average_annual_return - min_acceptable_return) / sharpe_ratio\n\n    # We use standard deviation as an approximation for semi-deviation\n    projected_semi_deviation = portfolio_standard_deviation\n\n    # return answer"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-276",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive is considering pricing a put option through a one-period binomial tree. The relevant data include: The present stock price is $30, the strike price of the put option stands at $30. The upward adjustment factor is 1.12, while the downward one rests at 0.92. The risk-free rate comes at 5%. The risk-neutral likelihood of a downward movement is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    present_stock_price = 30\n    strike_price = 30\n    upward_adjustment_factor = 1.12\n    downward_adjustment_factor = 0.92\n    risk_free_rate = 0.05\n\n    # Do math calculation to get the answer\n    upward_price = present_stock_price * upward_adjustment_factor\n    downward_price = present_stock_price * downward_adjustment_factor\n    R = 1 + risk_free_rate\n    u = upward_adjustment_factor\n    d = downward_adjustment_factor\n    p_down = (R - u) / (d - u)\n    p_up = 1 - p_down\n\n    # The risk-neutral likelihood of a downward movement\n    answer = p_down\n\n    # Return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| ($ millions) | 2016 | 2017 |\n| --- | --- | --- |\n| Revenue | 50 | 45 |\n| Cost of goods sold | 17 | 20 |\n| Inventory | 24 | 20 |\n| Accounts receivable | 20 | 17 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "test-277",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data, how much money was paid to the vendor?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and their values\n    cost_of_goods_sold_2016 = 17  # In millions\n    cost_of_goods_sold_2017 = 20  # In millions\n\n    # Calculate the total cost of goods sold over the two years\n    total_cost_of_goods_sold = cost_of_goods_sold_2016 + cost_of_goods_sold_2017\n\n    # Return the total cost of goods sold, which represents the amount paid to the vendor\n    return total_cost_of_goods_sold\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The amount paid to the vendor is: ${answer} million\")\n```\n\nThis program defines the costs of goods sold for 2016 and 2017, calculates their sum to determine the total amount paid to the vendor, and then returns this value. The answer is formatted to indicate the amount in millions of dollars."
        ]
    },
    {
        "tables": [
            "| | Exports | Imports |\n|---|---|---|\n| Initial Value (DCU) | 4,800 | 6,500 |\n| Demand elasticity | 0.70 | 0.55 |\n| **Note:** DCU:  domestic currency units | | |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-278",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will the trade balance be for a theoretical economy given the following international trade data if the value of the ZRB depreciates by 12%?",
        "output": [
            " To determine the effect of a 12% depreciation of the ZRB on the trade balance, we will focus on how this influences exports and imports given their respective demand elasticities. Below is the Python program to perform the necessary calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_exports = 4800\n    initial_imports = 6500\n    export_elasticity = 0.70\n    import_elasticity = 0.55\n    depreciation_percentage = 0.12\n\n    # Calculate the new value of exports and imports after depreciation\n    new_exports = initial_exports * (1 + export_elasticity * depreciation_percentage)\n    new_imports = initial_imports * (1 - import_elasticity * depreciation_percentage)\n\n    # Calculate the trade balance\n    trade_balance = new_exports - new_imports\n\n    # return answer\n    return trade_balance\n\n# Calling the function to get the result\nprint(solution())\n```\n\nThis program calculates how the values of exports and imports change with a 12% depreciation of the currency, applying their respective elasticities. The trade balance is then calculated by subtracting the new value of imports from the new value of exports. The result is printed by calling the `solution()` function."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-279",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio manager possesses a portfolio of options on a non-dividend paying stock named LYR. The portfolio includes 10,000 deep in-the-money call options on LYR and 50,000 deep out-of-the money call options on LYR. Along with this, there are 20,000 forward contracts on LYR. The current trading price of LYR is USD 100. Given 252 trading days in a year and 30 percent per-year volatility of LYR, what would be the 1-day VaR of the portfolio at the 95 percent confidence level?",
        "output": [
            " Certainly! To solve the given problem, we need to calculate the 1-day Value at Risk (VaR) for the portfolio. Let\u2019s outline the steps to do this:\n\n1. **Understand the Data**:\n   - Portfolio:\n     - 10,000 deep in-the-money call options\n     - 50,000 deep out-of-the-money call options\n     - 20,000 forward contracts\n   - Current stock price: USD 100\n   - Number of trading days in a year: 252\n   - Volatility: 30% per year\n   - Confidence level: 95%\n\n2. **Calculate the Daily Volatility**:\n   - Annual volatility is 30%, so daily volatility \\( \\sigma_{\\text{daily}} \\) can be calculated as:\n     \\[\n     \\sigma_{\\text{daily}} = \\frac{\\sigma_{\\text{annual}}}{\\sqrt{252}}\n     \\]\n\n3. **Calculate the Z-score**:\n   - For the 95% confidence level, the Z-score is approximately 1.645.\n\n4. **Calculate the Portfolio Value Change**:\n   - The in-the-money call options would typically have an exercise value close to the stock price, but detailed valuation models might be needed for accuracy. For simplicity, we'll assume the portfolio's value alignment with stock price changes linearly.\n\n5. **Compute the VaR**:\n   - VaR is calculated as the change in portfolio value due to volatility scaled by the Z-score.\n\nHere is the Python program to compute the 1-day VaR:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_volatility = 0.30  # 30%\n    trading_days_per_year = 252\n    current_stock_price = 100\n    confidence_level = 0.95\n    z_score = 1.645  # Z-score for 95% confidence level\n\n    # Calculate daily volatility\n    daily_volatility"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-280",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the total assets of the Silver Airways company are $3,275,000 and their total debt is $2,315,000. Determine the financial leverage assuming Silver Airways securitized $200,000 of its account receivables to a SPE.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets = 3275000\n    total_debt = 2315000\n    securitized_receivables = 200000\n\n    # Do math calculation to get the answer\n    adjusted_debt = total_debt - securitized_receivables\n    financial_leverage = total_assets / adjusted_debt\n\n    # return answer\n    return financial_leverage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-281",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the portfolio beta for an investor who opts to borrow an additional $5,000 at the risk-free rate and invest a total of $10,000 in the market portfolio?",
        "output": [
            " Certainly! Let's break down the problem and then create the corresponding Python program.\n\nGiven:\n1. The investor plans to invest an additional $5,000 by borrowing at the risk-free rate.\n2. The total investment in the market portfolio is $10,000.\n\nThe portfolio beta can be calculated using the following logic:\n- The investor is investing a total of $10,000 in the market portfolio.\n- Out of this, $5,000 is the investor's own money, and $5,000 is borrowed.\n\nThe beta of the market portfolio itself is typically taken as 1 (since it represents the average market risk). When borrowing to invest more in the market, the beta of the resulting levered portfolio can be calculated by considering the proportions of the own investment and the borrowed money.\n\nThe formula for the portfolio beta \\( \\beta_p \\) is:\n\\[ \\beta_p = \\frac{Total Value of Market Portfolio}{Own Investment} \\times \\beta_{market} \\]\n\nGiven that the beta of the market (\\(\\beta_{market}\\)) is 1, the formula simplifies to:\n\\[ \\beta_p = \\frac{Total Investment}{Own Investment} \\]\n\nGiven the values:\n- Total Investment = $10,000\n- Own Investment = $5,000\n\nLet's put this into the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_investment = 10000\n    own_investment = 5000\n    market_beta = 1\n\n    # Do math calculation to get the answer\n    portfolio_beta = (total_investment / own_investment) * market_beta\n\n    # Return answer\n    return portfolio_beta\n\n# Example usage\nprint(solution())\n```\n\nThis program will calculate and return the portfolio beta for the given conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-282",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose the Peterson account experienced a return of -5.3% in a particular month, during which the portfolio benchmark saw a return of -5.5% and the market index had a return of -2.8%. What is the return of the Peterson account attributable to active management?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    return_peterson = -5.3  # Return of the Peterson account\n    return_benchmark = -5.5  # Return of the portfolio benchmark\n    return_market = -2.8  # Return of the market index\n\n    # Do math calculation to get the answer\n    return_attributable_to_active_management = return_peterson - return_benchmark\n\n    # return answer\n    return return_attributable_to_active_management\n\n# Example usage\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-283",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an employee named Anna, FRM, who works as an analyst at Meyer Industries, is calculating the value at risk (VaR) for the company's profit/loss distribution, which is supposed to be normally distributed with a yearly average of $2 million and a standard deviation of $1 million, what would be the VaR at a 99% confidence level using a parametric method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean = 2000000  # yearly average of profit/loss distribution\n    std_dev = 1000000  # standard deviation of profit/loss distribution\n    confidence_level = 0.99  # 99% confidence level\n\n    # Do math calculation to get the answer\n    from scipy.stats import norm\n\n    # Calculate the Z-score for the given confidence level\n    z_score = norm.ppf(confidence_level)\n\n    # Calculate VaR using the parametric method\n    VaR = mean - (z_score * std_dev)\n\n    # return answer\n    return VaR\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-284",
        "python_solution": "",
        "ground_truth": null,
        "question": "John Doe bought a mortgage-backed security that has an 8% coupon rate and a par value of $1,000 for $960. The coupon payments are made monthly. How much is the monthly coupon payment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08  # 8% coupon rate converted to decimal\n    par_value = 1000    # par value of $1,000\n    periods_per_year = 12   # coupon payments are made monthly\n\n    # Do math calculation to get the answer\n    annual_coupon_payment = par_value * coupon_rate\n    monthly_coupon_payment = annual_coupon_payment / periods_per_year\n\n    # return answer\n    return monthly_coupon_payment\n```"
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price($) | End of Period Price ($) | Dividends per Share ($) | Shares Outstanding |\n|---|---|---|---|---|\n| D | 3,400 | 3,600 | 120 | 1,500 |\n| E | 4,600 | 3,500 | 150 | 1,100 |\n| F | 1,200 | 1,300 | 180 | 5,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-285",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, the total return of a market-capitalization-weighted index made up of securities D, E, F, has been compiled by Stacy, a research analyst from a financial investment firm. What is the total return of the index?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    securities = {\n        'D': {'beginning_price': 3400, 'end_price': 3600, 'dividends': 120, 'shares': 1500},\n        'E': {'beginning_price': 4600, 'end_price': 3500, 'dividends': 150, 'shares': 1100},\n        'F': {'beginning_price': 1200, 'end_price': 1300, 'dividends': 180, 'shares': 5000}\n    }\n\n    # Calculate market capitalization at the beginning of the period\n    beginning_cap = {sec: (securities[sec]['beginning_price'] * securities[sec]['shares']) for sec in securities}\n\n    # Calculate total beginning market capitalization\n    total_beginning_cap = sum(beginning_cap.values())\n\n    # Calculate market capitalization at the end of the period\n    end_cap = {sec: (securities[sec]['end_price'] * securities[sec]['shares']) for sec in securities}\n\n    # Calculate total end market capitalization\n    total_end_cap = sum(end_cap.values())\n\n    # Calculate total dividends\n    total_dividends = sum(securities[sec]['dividends'] * securities[sec]['shares'] for sec in securities)\n\n    # Calculate the return of the index\n    price_return = (total_end_cap - total_beginning_cap) / total_beginning_cap\n    dividend_yield = total_dividends / total_beginning_cap\n    total_return = price_return + dividend_yield\n\n    # return answer\n    return total_return\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis Python program computes the total return of the market-capitalization-weighted index made up of securities D, E, and F. It first calculates the market capital"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-286",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the yield-to-maturity of Bond B decreases by 30 basis points, and given that its annual modified duration is 6.932 and the annual convexity is 59.270, what should be the expected percentage price change?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    change_in_yield = -0.30  # The change in yield in percentage (30 basis points = 0.30%)\n    modified_duration = 6.932\n    convexity = 59.270\n\n    # Do math calculation to get the answer\n    price_change_due_to_duration = -modified_duration * change_in_yield\n    price_change_due_to_convexity = 0.5 * convexity * change_in_yield ** 2\n    total_price_change = price_change_due_to_duration + price_change_due_to_convexity\n\n    # return answer\n    return total_price_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-287",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would the corresponding call option be worth, taking into account that the present share price is $25, an European put option on the share with a $27 strike price and a 9-month expiration is priced at $3, and the risk-free rate stands at 4%?",
        "output": [
            " Certainly! To determine the value of the corresponding call option, we can use the put-call parity principle. The put-call parity theorem states that the price of a European call option plus the present value of the strike price is equal to the price of a European put option plus the current stock price. Mathematically, this is expressed as:\n\n\\[ C + \\text{PV}(K) = P + S \\]\n\nWhere:\n- \\( C \\) is the price of the call option.\n- \\( P \\) is the price of the put option.\n- \\( S \\) is the current stock price.\n- \\( K \\) is the strike price.\n- \\( \\text{PV}(K) \\) is the present value of the strike price discounted at the risk-free rate \\( r \\).\n\nGiven:\n- Present share price (\\( S \\)): $25\n- European put option price (\\( P \\)): $3\n- Strike price (\\( K \\)): $27\n- Risk-free rate (\\( r \\)): 4%\n- Time to expiration (\\( t \\)): 9 months or 0.75 years\n\nWe can use the formula for the present value:\n\n\\[ \\text{PV}(K) = K \\times e^{-rt} \\]\n\nLet's write a Python program to compute the value of the corresponding call option:\n\n```python\nimport math\n\ndef solution():\n    # Define variables and their values\n    S = 25     # Current share price\n    P = 3      # Price of the put option\n    K = 27     # Strike price\n    r = 0.04   # Risk-free rate (4%)\n    t = 0.75   # Time to expiration in years (9 months)\n\n    # Calculate the present value of the strike price\n    PV_K = K * math.exp(-r * t)\n\n    # Use put-call parity to calculate the call option price\n    C = P + S - PV_K\n\n    # Return the answer\n    return C\n\n# Example usage\nif __name__ == \"__main__\":\n    call_option_value = solution()\n    print(f\"The value of the"
        ]
    },
    {
        "tables": [
            "| Fair value of investment in Gama Company | $ 150,000 |\n| --- | --- |\n| Retained earning | $ 782,000 |\n| Common stock, $1 par value | $ 560,000 |\n| Preferred stock, $100 par value | $ 126,000 |\n| Deferred taxes | $ 75,000 |\n| Accumulated OCI | $ 35,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-288",
        "python_solution": "",
        "ground_truth": null,
        "question": "The subsequent balance sheet belongs to Omega Firm and includes chosen data at the year's conclusion: The investment in Alpha Firm was $130,000 and is categorised as FVOCI. By the year's end, what is the total owners' equity for Omega Firm?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    retained_earnings = 782000\n    common_stock = 560000\n    preferred_stock = 126000\n    accumulated_oci = 35000\n    investment_in_alpha_firm = 130000\n\n    # Do math calculation to get the answer\n    total_owners_equity = retained_earnings + common_stock + preferred_stock + accumulated_oci + investment_in_alpha_firm\n\n    # return answer\n    return total_owners_equity\n```"
        ]
    },
    {
        "tables": [
            "| Time=0 | Time=1 | Time=2 |\n|---|---|---|\n| SO=100 | Su=110 | Suu=121 |\n|   | Sd=92 | Sud/du=101.20 |\n|   |   | Sdd=84.64 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-289",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose a company's share is expected to move as displayed below in the next two periods. The starting price for the share is $100. Considering the odds of an increase in any given period as 40% and the chance of a decrease is 60%, what is the likelihood of the share's price reaching $101.20 after two periods, using the binomial model?",
        "output": [
            " To solve this problem using the binomial model, we need to consider the probability of each path that leads to the share price of $101.20 after two periods. By examining the table, we see that the only way to get to $101.20 is via an \"up\" movement followed by a \"down\" movement (Su-Sud/du).\n\nGiven:\n- Probability of an increase (up) = 40% = 0.4\n- Probability of a decrease (down) = 60% = 0.6\n\nThe likelihood of the sequence [up, down] occurring is the product of the probabilities of each step:\n\\[ P(up) \\times P(down) \\]\n\nHere's the Python program to calculate this probability:\n\n```python\ndef solution():\n    # Define variables name and value\n    prob_up = 0.4  # Probability of an increase\n    prob_down = 0.6  # Probability of a decrease\n\n    # Do math calculation to get the answer\n    prob_up_down = prob_up * prob_down\n\n    # return answer\n    return prob_up_down\n```\n\nThe solution function calculates the probability of the share price reaching $101.20 after two periods by multiplying the probabilities of an up movement followed by a down movement. Running this function will give us the desired probability."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-290",
        "python_solution": "",
        "ground_truth": null,
        "question": "If PYTHON Ltd. sells an intangible asset that was originally acquired for \u20ac12 million and has an accumulated amortization of \u20ac2 million, and reported a loss of \u20ac3.2 million on its sale, what is a probable sale price of the asset?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_cost = 12_000_000  # in euros\n    accumulated_amortization = 2_000_000  # in euros\n    reported_loss = 3_200_000  # in euros\n\n    # Do math calculation to get the answer\n    book_value = original_cost - accumulated_amortization\n    sale_price = book_value - reported_loss\n\n    # Return the sale price\n    return sale_price\n\n# Call the function to get the probable sale price\nprint(solution())\n```\n\nThis program defines the given financial figures and calculates the probable sale price of the asset by subtracting the reported loss from the book value (original cost minus accumulated amortization)."
        ]
    },
    {
        "tables": [
            "|                            |REIT B  |\n|----------------------------|--------|\n|Funds from operations (FFO)|$320,514|\n|Shares outstanding          |76,000  |\n|Property subsector average P/FFO multiple|15.3x|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-291",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of REIT B using the average P/FFO multiple method of the property subsector?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    FFO = 320514\n    shares_outstanding = 76000\n    P_FFO_multiple = 15.3\n\n    # Do math calculation to get the answer\n    FFO_per_share = FFO / shares_outstanding\n    per_share_value = FFO_per_share * P_FFO_multiple\n\n    # return answer\n    return per_share_value\n```"
        ]
    },
    {
        "tables": [
            "|  | Number of Options | Weighted Average | Exercise Price |\n| --- | --- | --- | --- |\n| Balance, start of year | 3,666,500 | \u00a33.06 | |\n| Granted  during the  year | 872,000 | \u00a33.30 | |\n| Exercised during the year | -278,400 | \u00a32.88 | |\n| Forfeited during the year | -123,700 | \u00a32.96 | |\n| Balance, end of year | 4,136,400 | \u00a33.13 | |\n| Exercisable at end of the year | 827,280 | \u00a32.90 | |",
            "|               | Share Price | Option Fair Value |\n|---------------|-------------|-------------------|\n| January 1,2014  | \u00a32.85       | \u00a30.370            |\n| July 1, 2014    | \u00a33.00       | \u00a30.390            |\n| December 31, 2014 | \u00a33.06     | \u00a30.400            |\n| Average for 2014 | \u00a32.97      | \u00a30.386            |"
        ],
        "topic": "Accounting",
        "question_id": "test-292",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under the present LTIP, the Board awards options on common shares to the management team. These options necessitate a 6-year service period after the date they are granted before they vest. This information about the stock options granted this year under the LTIP is reviewed by Morrison as shown in Exhibit 2. The financial statements of Clarion are prepared in line with International Financial Reporting Standards (IFRS) and their year-end is December 31. All the options in 2014 were granted on July 1, 2014. Given the market price of shares and the fair value of stock options at crucial dates throughout the year as shown in Exhibit 3, what is the chunk of the compensation expense related to the stock option of the LTIP granted in 2014?",
        "output": [
            " To calculate the compensation expense related to the stock options granted under the LTIP in 2014, we will need to follow these steps:\n\n1. Determine the fair value of the options granted.\n2. Calculate the total number of options granted.\n3. Compute the total compensation expense for the year.\n4. Adjust for the vesting period.\n\nHere's the Python program to calculate the compensation expense:\n\n```python\ndef solution():\n    # Define variables name and value\n    number_of_options_granted = 872000\n    fair_value_per_option = 0.390  # Fair value on the grant date (July 1, 2014)\n    total_compensation_expense_for_year = number_of_options_granted * fair_value_per_option\n\n    # Calculate the vesting period expense for the first year\n    # The options vest over 6 years\n    vesting_period = 6\n    expense_per_year = total_compensation_expense_for_year / vesting_period\n\n    # Do math calculation to get the answer\n    answer = expense_per_year\n\n    # Return answer\n    return answer\n```\n\nThis program calculates the total compensation expense for the options granted in 2014 and then determines the expense recognized for the first year based on the 6-year vesting period."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-293",
        "python_solution": "",
        "ground_truth": null,
        "question": "The yield for a one-year zero-coupon bond is 4.0%. The yields for zero-coupon bonds for the second and third years are 5.0% and 6.0% respectively. The spot rate for a five-year bond is not provided; however, the future price for a two-year zero-coupon bond starting in three years is 0.8479. What is today's price for a five-year zero-coupon bond?",
        "output": [
            " To determine today's price for a five-year zero-coupon bond based on the given information, we need to follow these steps:\n\n1. Calculate the spot rates for the years where they are given.\n2. Use the future price of the two-year zero-coupon bond starting in three years to compute the three- and five-year spot rates.\n3. Calculate the current price of the five-year zero-coupon bond based on the spot rates.\n\nHere's how we can put this into a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04   # Yield for one-year zero-coupon bond\n    r2 = 0.05   # Yield for two-year zero-coupon bond\n    r3 = 0.06   # Yield for three-year zero-coupon bond\n    future_price_2yr_3yrs_ahead = 0.8479  # Future price for a two-year zero-coupon bond starting in three years\n\n    # Calculate the price of a three-year zero-coupon bond\n    p3 = 1 / (1 + r3)**3\n\n    # Calculate the spot rate for 5 years using the future price and the spot rates\n    def spot_rate(n, s1, s2, s3):\n        return (future_price_2yr_3yrs_ahead / ((1 + s1) * (1 + s2) * (1 + s3))) ** (1/n) - 1\n\n    r5 = spot_rate(2, r1, r2, r3)\n\n    # Calculate the price of a five-year zero-coupon bond using the spot rates\n    p5 = 1 / (1 + r5)**5\n\n    # return answer\n    return p5\n\nprint(solution())\n```\n\nThis Python program does the following:\n\n1. Defines the initial spot rates for years 1, 2, and 3.\n2. Uses these spot rates to calculate the price of a three-year zero-coupon bond.\n3. Computes the spot rate for a five-year bond using"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-294",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the continually compounded return rate if a stock's price increases from $15.00 to $16.20 over the course of a year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_price = 15.00\n    final_price = 16.20\n    time_period = 1  # in years\n\n    # Do math calculation to get the answer\n    # Continually compounded return rate formula\n    import math\n    r = math.log(final_price / initial_price) / time_period\n\n    # return answer\n    return r\n```\n\nThis Python program calculates the continually compounded return rate where `initial_price` is the starting price of the stock, `final_price` is the ending price of the stock after one year, and `time_period` is 1 year. The continual compounding return rate is calculated using the natural logarithm of the ratio of the final price to the initial price divided by the time period."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-295",
        "python_solution": "",
        "ground_truth": null,
        "question": "A corporation bought a storage facility for \u20ac35 million and invested an extra \u20ac2.0 million for improvements to the building's roof and windows, \u20ac0.5 million to adapt the inner arrangement to their standards (repositioning walls, adding and removing dividers, etc.) and \u20ac0.1 million on a training and introduction program to acquaint workers with the premises. What is the cost to be capitalized to the building account (in millions)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 35.0        # 35 million euros\n    improvements = 2.0           # 2.0 million euros\n    adaptation = 0.5             # 0.5 million euros\n    training = 0.1               # 0.1 million euros\n\n    # Do math calculation to get the answer\n    total_cost_capitalized = purchase_price + improvements + adaptation\n\n    # return answer\n    return total_cost_capitalized\n```\n\nExplanation:\n- The total cost to be capitalized to the building account includes the purchase price (\u20ac35 million), the cost for improvements to the building's roof and windows (\u20ac2.0 million), and the cost for adapting the inner arrangement to their standards (\u20ac0.5 million).\n- The training and introduction program cost (\u20ac0.1 million) is not typically capitalized as it does not directly contribute to the value of the building.\n- Therefore, the total cost to be capitalized is the sum of the purchase price, improvements, and adaptation costs."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-296",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that JJ Corporation initially reported an operating income of $360,000, which later changed to $420,000. If the financial cost stands at $120,000, how would you calculate JJ Corporation's degree of financial leverage (DFL)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_op_income = 360000\n    changed_op_income = 420000\n    financial_cost = 120000\n\n    # Do math calculation to get the answer\n    percent_change_op_income = (changed_op_income - initial_op_income) / initial_op_income\n    change_in_ebit = initial_op_income - financial_cost\n    percent_change_net_income = (changed_op_income - financial_cost - change_in_ebit) / change_in_ebit\n\n    degree_financial_leverage = percent_change_net_income / percent_change_op_income\n\n    # return answer\n    return degree_financial_leverage\n\n# Execute the solution to get the answer\nanswer = solution()\nprint(answer)\n```\n\nYou can run this Python program to calculate the degree of financial leverage (DFL) for JJ Corporation."
        ]
    },
    {
        "tables": [
            "| Name National Annual ID Salary Number | Loan Amount | | Model Prediction | Actual Result | Prediction Result | Type 1 Error | Type 2 Error |\n|---|---|---|---|---|---|---|---|\n| Garcia XXX 099 $105,000 | $25,000 | | Default | Default | 1 | 0 | 0 |\n| Rodriquez XXX 810 $58,000 | $10,000 | | No Default | No Default | 1 | 0 | 0 |\n| Brown XXX 129 $75,000 | $15,000 | | Default | No Default | 0 | 1 | 0 |\n| Anderson XXX 193 $43,000 | $7,500 | | No Default | No Default | 1 | 0 | 0 |\n| Lewis XXX 122 $64,500 | $42,000 | | No Default | Default | 0 | 0 | 1 |\n| Number and use of client records | | | | | | | |\n| Total # of historical records | | | | 10,014 | | | |\n| Records removed in data cleansing | | | | 2,996 | | | |\n| Records modeled with correct predictions and errors | | | | 7,018 | 5,851 | 273 | 894 |\n\nNote: 1 in Prediction Result column is a correct prediction; 0 is an incorrect prediction."
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-297",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the results presented for the BETA model (Exhibit 1) along with its relevant documentation, what is the model's precision? The model was confirmed by Thompson to have accurately forecasted a default in 5,290 cases from the model prediction set after the data was fully processed. This is from a sample of loans taken from the BETA model where anticipated and actual defaults were compared for the previous 12 months.",
        "output": [
            " Sure, the precision of a model can be calculated using the formula:\n\n\\[ \\text{Precision} = \\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Positives}} \\]\n\nIn the context of the provided data:\n- True Positives (TP) are cases where the model predicted default and it actually defaulted.\n- False Positives (FP) are cases where the model predicted default but it did not default.\n\nFrom the data provided and the description:\n- The number of True Positives (TP) was given as 5,290.\n- The number of False Positives (FP) can be calculated as the number of predicted defaults minus the True Positives.\n\nAssuming:\n- Total predicted defaults (sum of True Positives and False Positives) is derived from the model's predictions after cleansing and the model.\n\nThe Python program to compute the precision is:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_predictions = 7018  # Total number of records modeled with correct predictions and errors\n    true_positives = 5290  # Number of cases where the model predicted default and it actually defaulted\n\n    # Calculate False Positives\n    false_positives = total_predictions - true_positives\n\n    # Do math calculation to get the answer\n    precision = true_positives / (true_positives + false_positives)\n\n    # return answer\n    return precision\n```\n\nThis program correctly calculates the model's precision given the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-298",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the performance of the Russell 1000 from February 1990 to December 2016, with a monthly arithmetic return of 0.878% and a volatility characterized by a 4.199% standard deviation of return, what would be the geometric return?",
        "output": [
            " Sure, let's create a Python program to calculate the geometric return considering the given monthly arithmetic return and standard deviation of the return for the Russell 1000 from February 1990 to December 2016.\n\nThe relationship between arithmetic return (`r_a`), standard deviation (`sigma`), and geometric return (`r_g`) can be approximated using the following formula:\n\n\\[ r_{g} \\approx r_{a} - \\frac{\\sigma^2}{2} \\]\n\nHere is the Python program to implement this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    arithmetic_return = 0.00878  # 0.878% monthly arithmetic return\n    standard_deviation = 0.04199  # 4.199% standard deviation\n\n    # Do math calculation to get the answer\n    variance = standard_deviation ** 2\n    geometric_return = arithmetic_return - (variance / 2)\n\n    # Annualize the geometric return (if needed)\n    geometric_return_annual = ((1 + geometric_return) ** 12) - 1\n\n    # return answer\n    return geometric_return_annual\n\n# Print the answer\nprint(solution())\n```\n\nThis program first calculates the variance from the standard deviation, then computes the geometric return using the provided formula. Finally, it annualizes the geometric return by compounding it for 12 months as the given values are monthly.\n\nThe returned value will be the annualized geometric return."
        ]
    },
    {
        "tables": [
            "| Factor    | Time to Maturity (years) - 5 | Time to Maturity (years) - 20 |\n| --------- | ---------------------------- | ----------------------------- |\n| Level     | -0.4352%                     | -0.5128%                      |\n| Steepness | -0.0515%                     | -0.3015%                      |\n| Curvature | 0.3963%                      | 0.5227%                       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-299",
        "python_solution": "",
        "ground_truth": null,
        "question": "Display 1. Tri-Factor Model of Term Structure Note: The entries show how the yields would alter for a one standard deviation boost in a factor. How much would you expect the yield on the 20-year bond to change due to an increase in the steepness factor by two standard deviations?",
        "output": [
            " Certainly! Here is the Python program to calculate the change in yield for a 20-year bond due to an increase in the steepness factor by two standard deviations:\n\n```python\ndef solution():\n    # Define variables name and value\n    steepness_change_for_20_years = -0.3015\n    standard_deviations = 2\n\n    # Do math calculation to get the answer\n    yield_change = steepness_change_for_20_years * standard_deviations\n\n    # return answer\n    return yield_change\n\n# Run the solution function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print the change in yield for the 20-year bond due to an increase in the steepness factor by two standard deviations."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-300",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a manufacturing firm, the accountant named Samuel discovered that the acquisition cost of a certain equipment was $50,000 and noted a $10,000 loss in the income statement upon the equipment's sale. If the accumulated depreciation amounted to $35,000, what was the selling price of the equipment?",
        "output": [
            " Certainly! Below is the Python program to determine the selling price of the equipment based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 50000\n    loss_on_sale = 10000\n    accumulated_depreciation = 35000\n\n    # Do math calculation to get the answer\n    book_value = acquisition_cost - accumulated_depreciation\n    selling_price = book_value - loss_on_sale\n\n    # return answer\n    return selling_price\n```\n\nThis program calculates the selling price of the equipment by first determining the book value of the equipment and then subtracting the loss incurred upon its sale. The selling price is then returned as the final answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-301",
        "python_solution": "",
        "ground_truth": null,
        "question": "When the 95% confidence level VaR model of Chase Corporation is being backtested using the data from the last 750 trading days, how many anticipated irregularities would we expect to find?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    confidence_level = 0.95\n    trading_days = 750\n\n    # Do math calculation to get the answer\n    anticipated_irregularities = trading_days * (1 - confidence_level)\n\n    # return answer\n    return anticipated_irregularities\n```"
        ]
    },
    {
        "tables": [
            "| Country       | Currency   | Spot Exchange Ratea    | One Year Risk-free Rate | Expected Annual Inflation Rate |\n|:-------------:|:----------:|:----------------------:|:-----------------------:|:----------------------:|\n| United States | US$        | NA                     | 4.80%                   | 2.30%                  |\n| Canada        | C$         | 1.2138-1.2259          | 4.10%                   | 1.90%                  |\n| Brazil        | Real (BRL) | 2.3844-2.4082          | 8.80%                   | 6.30%                  |\n\naNumber of foreign currency units per one U.S. dollar."
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-302",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the bid-side quote for the CAD/BRL from a merchant is C$0.5250, what is the profit for Johnson from a US$1,000,000 initial investment in the triangular arbitrage opportunity?",
        "output": [
            " Certainly! For this triangular arbitrage scenario, we need to follow these steps based on the given exchange rates:\n\n1. Convert US$1,000,000 to Canadian dollars (CAD) using the average spot exchange rate for USD/CAD.\n2. Convert the Canadian dollars to Brazilian reals (BRL) using the given bid-side quote for CAD/BRL.\n3. Convert the Brazilian reals back to US dollars (USD) using the average spot exchange rate for USD/BRL.\n\nThen, calculate the profit from the final amount in US dollars minus the initial investment.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables and their values\n    initial_investment = 1000000  # US$1,000,000\n\n    # Spot exchange rates (average values from the given range)\n    usd_cad_avg_rate = (1.2138 + 1.2259) / 2\n    usd_brl_avg_rate = (2.3844 + 2.4082) / 2\n\n    # Bid-side quote for CAD/BRL\n    cad_brl_bid_rate = 0.5250\n\n    # Step 1: Convert US dollars to Canadian dollars\n    usd_in_cad = initial_investment * usd_cad_avg_rate\n\n    # Step 2: Convert Canadian dollars to Brazilian reals\n    cad_in_brl = usd_in_cad / cad_brl_bid_rate\n\n    # Step 3: Convert Brazilian reals back to US dollars\n    brl_in_usd = cad_in_brl / usd_brl_avg_rate\n\n    # Calculate the profit\n    profit = brl_in_usd - initial_investment\n\n    # Return the answer\n    return profit\n\n# Run the solution function\nprint(solution())\n```\n\nThis code snippet defines the necessary variables, calculates the conversions step-by-step, and then figures out the profit."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-303",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the study, 65% of all businesses possess a scanner. If we choose 8 businesses, what are the chances that five businesses would own a scanner?",
        "output": [
            " To solve this problem, we need to calculate the probability that exactly 5 out of 8 businesses own a scanner. This is a binomial probability problem which can be solved using the binomial probability formula:\n\n\\[ P(X = k) = \\binom{n}{k} p^k (1-p)^{n-k} \\]\n\nWhere:\n- \\( n \\) is the number of trials (8 businesses).\n- \\( k \\) is the number of successful trials (5 businesses owning a scanner).\n- \\( p \\) is the probability of success on a single trial (0.65).\n- \\( 1-p \\) is the probability of failure on a single trial (1 - 0.65 = 0.35).\n\nWe also need the binomial coefficient which is:\n\n\\[ \\binom{n}{k} = \\frac{n!}{k!(n-k)!} \\]\n\nHere is the Python program:\n```python\nimport math\n\ndef binomial_coefficient(n, k):\n    return math.comb(n, k)\n\ndef solution():\n    # Define variables name and value\n    n = 8\n    k = 5\n    p = 0.65\n    q = 1 - p\n\n    # Do math calculation to get the answer\n    prob = binomial_coefficient(n, k) * (p**k) * (q**(n-k))\n    answer = prob\n\n    # return answer\n    return answer\n\n# Call the solution function and print the answer\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program defines a function `solution` that computes the probability that exactly 5 out of 8 businesses will have a scanner, using the binomial probability formula. It first computes the binomial coefficient and then applies the formula to get the required probability."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-304",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume that the continuously compounded 5-year spot rate is 10% and the 4-year spot rate is 8.8%. Could you determine the 1-year forward rate four years in the future?",
        "output": [
            " Certainly! Here's the Python program to determine the 1-year forward rate four years in the future using the given information:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    r5 = 0.10  # 5-year spot rate\n    r4 = 0.088  # 4-year spot rate\n\n    # Do math calculation to get the answer\n    # The formula for forward rate is derived from no-arbitrage condition for interest rates\n    forward_rate_1 = (5 * r5 - 4 * r4) / (5 - 4)\n\n    # return answer\n    return forward_rate_1\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(\"The 1-year forward rate four years in the future is:\", answer)\n```\n\nThis program calculates the 1-year forward rate four years in the future using the given 5-year and 4-year spot rates."
        ]
    },
    {
        "tables": [
            "| Asset class     | Portfolio weight (%) | Benchmark weight (%) | Portfolio return (%) | Benchmark return (%) |\n|-----------------|----------------------|----------------------|----------------------|----------------------|\n| Domestic        | 45                   | 50                   | 12                   | 10                   |\n| International equity | 25           | 20                   | 15                   | 12                   |\n| Bonds           | 30                   | 30                   | 7                    | 8                    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-305",
        "python_solution": "",
        "ground_truth": null,
        "question": "The research team gathered the following data: Can you compute the value added for the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    portfolio_weights = {'Domestic': 45, 'International equity': 25, 'Bonds': 30}\n    benchmark_weights = {'Domestic': 50, 'International equity': 20, 'Bonds': 30}\n    portfolio_returns = {'Domestic': 12, 'International equity': 15, 'Bonds': 7}\n    benchmark_returns = {'Domestic': 10, 'International equity': 12, 'Bonds': 8}\n\n    # Do math calculation to get the answer\n    portfolio_value = sum(portfolio_weights[asset] * portfolio_returns[asset] for asset in portfolio_weights)\n    benchmark_value = sum(benchmark_weights[asset] * benchmark_returns[asset] for asset in benchmark_weights)\n    value_added = portfolio_value - benchmark_value\n\n    # return answer\n    return value_added\n\n# Test the function\nprint(solution())\n```\n\nIn this program, we define the portfolio weights, benchmark weights, portfolio returns, and benchmark returns based on the provided table. We then calculate the portfolio value and benchmark value by summing up the weighted returns for each asset class. Finally, we compute the value added by subtracting the benchmark value from the portfolio value and return this result."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 22        |\n| 2009 | -25       |\n| 2010 | 11        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-306",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the yearly geometric mean return of a mutual fund based on the noted annual returns rates?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [0.22, -0.25, 0.11]  # returns for years 2008, 2009, 2010 respectively\n\n    # Do math calculation to get the answer\n    product = 1\n    for r in returns:\n        product *= (1 + r)\n\n    geometric_mean = product ** (1/len(returns)) - 1\n\n    # return answer\n    return geometric_mean\n\n# Execute the solution to get the answer\nprint(solution())\n```\n\nThis Python program calculates the yearly geometric mean return of a mutual fund based on the provided annual return rates. It first multiplies the returns by turning them into growth factors (`1 + return`), then takes the nth root of the product, where n is the number of years. Finally, it subtracts 1 to obtain the geometric mean return and returns this value."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-307",
        "python_solution": "",
        "ground_truth": null,
        "question": "Position 1 (FTSE 100 Futures Contract): Harmony Capital maintains a long position in a FTSE 100 futures contract that is set to mature in three months. The Nikkei 225 Stock Index has a continuously compounded dividend yield of 1.1%, and the current level of the stock index is 16,080. The constantly compounded yearly interest rate is 0.2996%. What is the prevailing no-arbitrage futures price of the FTSE 100 futures contract (Position 1)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_index_level = 16080\n    dividend_yield = 0.011  # 1.1%\n    interest_rate = 0.002996  # 0.2996%\n    time_to_maturity = 0.25  # 3 months (assuming a quarter of the year)\n\n    # Do math calculation to get the answer\n    futures_price = current_index_level * (1 + (interest_rate - dividend_yield) * time_to_maturity)\n\n    # return answer\n    return futures_price\n```\n\nExplanation:\n- `current_index_level` represents the current level of the FTSE 100 stock index.\n- `dividend_yield` is the continuously compounded dividend yield.\n- `interest_rate` is the constantly compounded yearly interest rate.\n- `time_to_maturity` is the time until the futures contract matures, which is given as 3 months or 0.25 years.\n\nThe formula used is derived from the no-arbitrage condition for futures pricing where:\n\\[ \\text{Futures Price} = \\text{Current Spot Price} \\times e^{(r - d) \\times T} \\]\nwhere:\n- \\( r \\) is the interest rate,\n- \\( d \\) is the dividend yield,\n- \\( T \\) is the time to maturity in years.\n\nFor small values, \\( e^{(r - d)T} \\) can be approximated by \\( 1 + (r - d)T \\)."
        ]
    },
    {
        "tables": [
            "| Revenue        | \u00a3800,000 |\n| -------------- | -------- |\n| Variable cost  | \u00a3400,000 |\n| Fixed cost     | \u00a3200,000 |\n| Operating income | \u00a3200,000 |\n| Interest       | \u00a360,000  |\n| Net income     | \u00a3140,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-308",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the company's total degree of leverage (DTL), based on the information provided for the company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 800000\n    variable_cost = 400000\n    fixed_cost = 200000\n    operating_income = 200000\n    net_income = 140000\n\n    # Do math calculation to get the answer\n    contribution_margin = revenue - variable_cost\n    degree_of_operating_leverage = contribution_margin / operating_income\n    degree_of_financial_leverage = operating_income / net_income\n    total_degree_of_leverage = degree_of_operating_leverage * degree_of_financial_leverage\n\n    # return answer\n    return total_degree_of_leverage\n```\nIn this program, the total degree of leverage (DTL) is calculated by multiplying the degree of operating leverage (DOL) with the degree of financial leverage (DFL). The DOL is the ratio of the contribution margin to the operating income, and the DFL is the ratio of the operating income to the net income. The contribution margin is calculated by subtracting the variable cost from the revenue."
        ]
    },
    {
        "tables": [
            "\n|                                             |                               |\n|---------------------------------------------|-------------------------------|\n| Cost of the equipment                       | UYP 1,200,000                 |\n| Estimated residual value                    | UYP 200,000                   |\n| Expected useful life                        | 8 years                       |\n| Total productive capacity                   | 800,000 units                 |\n| Production in FY 2009                       | 135,000 units                 |\n| Expected production for the next 7 years    | 95,000 units each year        |\n"
        ],
        "topic": "Accounting",
        "question_id": "test-309",
        "python_solution": "",
        "ground_truth": null,
        "question": "Carlos Perez from the Uruguayan company LUIGI Ltd., is calculating the depreciation expense of manufacturing machinery for the financial year closing on 31 December 2009. The machinery was purchased on 1 January 2009. Given the information gathered by Perez, what would be the amount of depreciation expense (in UYP) on LUIGI's profit and loss statement related to the manufacturing machinery, if LUIGI uses the units-of-production method? (Currency in Uruguayan pesos, UYP).",
        "output": [
            " Certainly! Below is the Python program that calculates the depreciation expense using the units-of-production method for LUIGI Ltd.\n\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 1200000\n    residual_value = 200000\n    total_units = 800000\n    units_produced_2009 = 135000\n\n    # Do math calculation to get the depreciable amount\n    depreciable_value = cost_of_equipment - residual_value\n\n    # Calculate depreciation per unit\n    depreciation_per_unit = depreciable_value / total_units\n\n    # Calculate total depreciation expense for 2009\n    depreciation_expense_2009 = depreciation_per_unit * units_produced_2009\n\n    # return answer\n    return depreciation_expense_2009\n\n# To print the answer, you can call the solution function\nprint(solution())\n```\n\nThis program first calculates the depreciable value by subtracting the residual value from the cost of the equipment. It then determines the depreciation per unit by dividing the depreciable value by the total productive capacity. Finally, it calculates the depreciation expense for the year 2009 by multiplying the depreciation per unit by the units produced in 2009. The result is the depreciation expense for LUIGI Ltd. for the financial year 2009."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-310",
        "python_solution": "",
        "ground_truth": null,
        "question": "A risk assessor is computing the VaR for a portfolio using a data set of 50 weekly returns. The average weekly return calculated from the sample is 8% with a standard deviation of 17%. Given that weekly returns are assumed to be independent and identically distributed, what is the standard deviation of the average weekly return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    avg_weekly_return = 0.08  # 8%\n    std_dev_weekly_return = 0.17  # 17%\n    number_of_weeks = 50\n\n    # Do math calculation to get the answer\n    std_dev_avg_weekly_return = std_dev_weekly_return / (number_of_weeks ** 0.5)\n\n    # return answer\n    return std_dev_avg_weekly_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-311",
        "python_solution": "",
        "ground_truth": null,
        "question": "The preferred stock of Company N has a par value of $50 per share and it provides an annual dividend of 3.8%. If Nick thinks that it's reasonably priced at the market cost of $30, what is the capitalization rate of the preferred stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 50  # par value per share (in dollars)\n    annual_dividend_rate = 0.038  # annual dividend rate (as a percentage)\n    market_price = 30  # market price per share (in dollars)\n\n    # Calculate the annual dividend per share\n    annual_dividend = par_value * annual_dividend_rate\n\n    # Calculate the capitalization rate\n    capitalization_rate = annual_dividend / market_price\n\n    # return answer\n    return capitalization_rate\n\n# Run the solution function to get the answer\ncapitalization_rate = solution()\nprint(f\"The capitalization rate of the preferred stock is: {capitalization_rate:.4f}\")\n```\n\nThis program calculates the capitalization rate of the preferred stock by first determining the annual dividend per share, and then dividing this by the market price. The result is returned as the capitalization rate."
        ]
    },
    {
        "tables": [
            "markdown\n|                                      | 2015 | 2016 |\n|--------------------------------------|------|------|\n| **Cosmetic firm B.S for the ending 31 December** |      |      |\n| Cash                                 | 210  | 310  |\n| Accounts receivable                  |      | 31   |\n| Inventory                            | 60   | 80   |\n| Fixed assets                         | 200  | 200  |\n| Accumulated depreciation             |      | (35) |\n| Total assets                         | 470  | 586  |\n| Accounts payable                     | 105  | 162  |\n| Long-term debt                       | 235  | 273  |\n| Common stock                         | 130  | 130  |\n| Retained earnings                    |      | 21   |\n| Total liabilities and shareholders' equity | 470  | 586  |\n",
            "|                                  | US $/C$ |\n|----------------------------------|---------|\n| Rate on 31 December 2015         | 0.89    |\n|                                  |         |\n| Average rate in 2016             | 0.96    |\n| Weighted-average rate for inventory purchases | 0.94    |\n| Rate on 31 December 2016         | 0.94    |"
        ],
        "topic": "Accounting",
        "question_id": "test-312",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sephora is a US-operated company that specializes in the sale of beauty products. It has a Canadian branch, Glossy Inc, that only carries out operations in Canada. It was established on 31 December 2015, and Glossy Inc uses the US dollar as its main currency. Let's consider that fixed assets were purchased at the company's conceptual stage. The financial statement details for the years ending 2015 and 2016 are provided in the adjacent table: Can you compute the converted value of Glossy Inc's retained earnings as of 31 December 2016?",
        "output": [
            " Certainly! To compute the converted value of Glossy Inc's retained earnings as of 31 December 2016, we need to multiply the retained earnings by the exchange rate on that date. Here is the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 21\n    exchange_rate_2016 = 0.94  # Rate on 31 December 2016\n\n    # Do math calculation to get the answer\n    converted_retained_earnings = retained_earnings_2016 * exchange_rate_2016\n\n    # return answer\n    return converted_retained_earnings\n\n# Run the solution to get the answer\nprint(solution())\n```\n\nThe program defines the retained earnings for 2016 and the exchange rate on 31 December 2016. It then calculates the converted value of the retained earnings by multiplying these two values and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-313",
        "python_solution": "",
        "ground_truth": null,
        "question": "A data set with 25 entries has an average of 8 and a standard deviation of 15. What is the standard error of this data set's mean?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    n = 25  # Number of entries\n    std_dev = 15  # Standard deviation\n\n    # Do math calculation to get the answer\n    standard_error = std_dev / (n ** 0.5)\n\n    # return answer\n    return standard_error\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-314",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of 2013, corporation X released 5-year bonds with a face value of $2,000,000. The market interest rate stands at 6%, and on each 31 December, a 5% coupon is paid on the bonds. What could be the calculated bonds payable at the time they were issued?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    market_interest_rate = 0.06\n    coupon_rate = 0.05\n    num_years = 5\n\n    # Calculate coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n\n    # Calculate the present value of the coupon payments\n    present_value_of_coupons = annual_coupon_payment * (1 - (1 / (1 + market_interest_rate) ** num_years)) / market_interest_rate\n\n    # Calculate the present value of the face value\n    present_value_of_face_value = face_value / (1 + market_interest_rate) ** num_years\n\n    # Calculate the total present value (bonds payable)\n    bonds_payable = present_value_of_coupons + present_value_of_face_value\n\n    # return answer\n    return bonds_payable\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the present value of the bonds payable at the time they were issued, taking into account both the coupon payments and the face value, discounted at the market interest rate."
        ]
    },
    {
        "tables": [
            "| Net income | | $55 million |\n|---|---|---|\n| Depreciation | | $3 million |\n| Balance Sheet Item | 12/31/2016 | 12/31/2017 |\n| Accounts receivable | $18 million | $20 million |\n| Inventory | $22 million | $17 million |\n| Accounts payable | $6 million | $3 million |"
        ],
        "topic": "Accounting",
        "question_id": "test-315",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given financial reports for Company B, what is the value of the operating cash flow?",
        "output": [
            " In order to calculate the operating cash flow for Company B, we need to follow the indirect method. The operating cash flow is generally calculated by adjusting net income with changes in non-cash accounts (such as accounts receivable, inventory, and accounts payable) and adding back non-cash expenses like depreciation.\n\nHere's the Python program to calculate the operating cash flow based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 55000000  # Net income in dollars\n    depreciation = 3000000  # Depreciation in dollars\n\n    # Accounts receivable\n    ar_beginning = 18000000  # Beginning balance for accounts receivable\n    ar_ending = 20000000  # Ending balance for accounts receivable\n\n    # Inventory\n    inventory_beginning = 22000000  # Beginning balance for inventory\n    inventory_ending = 17000000  # Ending balance for inventory\n\n    # Accounts payable\n    ap_beginning = 6000000  # Beginning balance for accounts payable\n    ap_ending = 3000000  # Ending balance for accounts payable\n\n    # Do math calculation to get the answer\n    change_in_ar = ar_ending - ar_beginning\n    change_in_inventory = inventory_ending - inventory_beginning\n    change_in_ap = ap_ending - ap_beginning\n\n    operating_cash_flow = net_income + depreciation - change_in_ar - change_in_inventory + change_in_ap\n\n    # Return answer\n    return operating_cash_flow\n\n# Execute the function to get the operating cash flow\nprint(solution())\n```\n\nRunning this program will output the operating cash flow for Company B based on the given financial reports."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-316",
        "python_solution": "",
        "ground_truth": null,
        "question": "A trader takes a short stance on a gold futures contract at a price of USD 294.20. Each contract oversees 100 troy ounces. The starting margin stands at USD 3,200, while the sustaining margin is set at USD 2,900. After the initial day, the futures price decreases to USD 286.6. What is the sum of the variation margin at the closure of the first day?",
        "output": [
            " Sure, here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 294.20\n    contract_size = 100  # in troy ounces\n    final_price = 286.6\n\n    # Do math calculation to get the answer\n    price_difference = initial_price - final_price\n    variation_margin = price_difference * contract_size\n\n    # return answer\n    return variation_margin\n```\n\nThis program calculates the variation margin for the gold futures contract based on the given prices and contract size."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-317",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a price-weighted index made up of securities XYZ, MNOP, and QRST, an analyst has collected the following data: The starting and ending prices (in \u20ac) and total dividends (in \u20ac) are as follows: XYZ with 25.00 to 27.00 along with 1.00 in dividends, MNOP with 35.00 to 25.00 and 1.50 in dividends, and QRST from 15.00 to 16.00 with 1.00 in dividends. What is the price return of the index?",
        "output": [
            " def solution():\n    # Define variables name and value\n    starting_prices = {\n        \"XYZ\": 25.00,\n        \"MNOP\": 35.00,\n        \"QRST\": 15.00\n    }\n\n    ending_prices = {\n        \"XYZ\": 27.00,\n        \"MNOP\": 25.00,\n        \"QRST\": 16.00\n    }\n\n    total_dividends = {\n        \"XYZ\": 1.00,\n        \"MNOP\": 1.50,\n        \"QRST\": 1.00\n    }\n\n    # Calculate the total starting and ending prices\n    total_starting_price = sum(starting_prices.values())\n    total_ending_price = sum(ending_prices.values())\n    total_dividends_amount = sum(total_dividends.values())\n\n    # Calculate the price return of the index\n    price_return = ((total_ending_price + total_dividends_amount) / total_starting_price) - 1\n\n    # return answer\n    return price_return\n\n# Call the solution function to get the price return\nprice_return = solution()\nprint(f\"The price return of the index is: {price_return:.4f}\")\n```\n\nThis program first defines the starting and ending prices as well as the total dividends for each security. It then calculates the total starting and ending prices and the total dividends for the index. The price return is calculated using the formula for price return including dividends and is then returned by the function. The last part demonstrates how to call the `solution` function and print the result."
        ]
    },
    {
        "tables": [
            "| Operating profit margin | 17.5% |\n|-------------------------|-------|\n| Net profit margin       | 11.7% |\n| Total asset turnover    | 0.89 times |\n| Return on assets (ROA)  | 10.4% |\n| Financial leverage      | 1.46  |\n| Debt to equity          | 0.46  |"
        ],
        "topic": "Accounting",
        "question_id": "test-318",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the return on equity (ROE) of the business that a financial examiner has determined?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    roa = 0.104  # Return on assets (ROA)\n    financial_leverage = 1.46  # Financial leverage\n\n    # Do math calculation to get the answer\n    roe = roa * financial_leverage\n\n    # return answer\n    return roe\n```\n\nThis Python program defines the `solution` function that calculates the return on equity (ROE) using the given return on assets (ROA) and financial leverage. The ROE is returned as the answer."
        ]
    },
    {
        "tables": [
            "| Interest Rate Assumption | Present Value of Liabilities |\n|-------------------------|-----------------------------|\n| 8%                      | $ 436.2 million             |\n| 9%                      | $ 357.5 million             |\n| 10%                     | $ 298.1 million             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-319",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is a manager of a retirement fund who is interested in assessing the responsiveness of his retirement obligations to fluctuations in market interest rates. Supposing the base rate is 9%, with a 100 basis point rise in rates up to 10%, and a 100 basis point decrease in rates down to 8%. The associated data is given as follows: The effective duration of the retirement fund's obligations is:",
        "output": [
            " Certainly! To calculate the effective duration of the retirement fund's obligations, we need to consider the information provided in the table. The effective duration can be estimated by considering the changes in the present value of liabilities when the interest rates change. Here\u2019s the Python program to compute the effective duration:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_rate = 9 / 100\n    present_value_at_current_rate = 357.5  # in millions\n    present_value_at_higher_rate = 298.1  # in millions\n    present_value_at_lower_rate = 436.2  # in millions\n    change_in_rate = 0.01  # 100 basis points or 1%\n\n    # Convert the values to standard units for calculation\n    base_pv = present_value_at_current_rate * 1e6\n    lower_pv = present_value_at_lower_rate * 1e6\n    higher_pv = present_value_at_higher_rate * 1e6\n\n    # Calculate the effective duration\n    duration_up = (base_pv - lower_pv) / (base_pv * change_in_rate)\n    duration_down = (higher_pv - base_pv) / (base_pv * change_in_rate)\n    effective_duration = (duration_up + duration_down) / 2\n\n    # return answer\n    return effective_duration\n\n# To get the result\nprint(solution())\n```\n\nExplanation:\n- `current_rate` represents the base interest rate (9%).\n- `present_value_at_current_rate`, `present_value_at_higher_rate`, and `present_value_at_lower_rate` are the present values at the given interest rates.\n- `change_in_rate` is the 100 basis points change (0.01 or 1%).\n- Effective duration is calculated using the average of the duration up and duration down considering the changes in interest rates.\n\nThis code will compute the effective duration of the retirement fund's obligations based on the provided"
        ]
    },
    {
        "tables": [
            "|                     | $ millions |\n|---------------------|------------|\n| Sales               | 4,800      |\n| Cost of goods sold  | 2,880      |\n| Purchases           | 2,940      |\n| Average receivables | 625        |\n| Average inventory   | 710        |\n| Average payables    | 145        |"
        ],
        "topic": "Accounting",
        "question_id": "test-320",
        "python_solution": "",
        "ground_truth": null,
        "question": "The details for a particular business are given. What is the cash conversion cycle (in days) of this business?",
        "output": [
            " To calculate the cash conversion cycle (CCC), we need to compute the following components:\n\n1. **Inventory Conversion Period (Days Inventory Outstanding, DIO)**\n2. **Accounts Receivable Conversion Period (Days Sales Outstanding, DSO)**\n3. **Accounts Payable Conversion Period (Days Payables Outstanding, DPO)**\n\nThe cash conversion cycle is then calculated as:\n\\[ \\text{CCC} = \\text{DIO} + \\text{DSO} - \\text{DPO} \\]\n\nLet's define the necessary variables and write the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales = 4800  # in $ millions\n    cogs = 2880  # in $ millions\n    purchases = 2940  # in $ millions\n    avg_receivables = 625  # in $ millions\n    avg_inventory = 710  # in $ millions\n    avg_payables = 145  # in $ millions\n\n    # Calculate the individual components\n    DIO = (avg_inventory / cogs) * 365\n    DSO = (avg_receivables / sales) * 365\n    DPO = (avg_payables / purchases) * 365\n\n    # Calculate the cash conversion cycle\n    cash_conversion_cycle = DIO + DSO - DPO\n\n    # return answer\n    return cash_conversion_cycle\n\n# Output the result\nprint(solution())\n```\n\nExplanation:\n1. **DIO** is calculated as \\( \\text{DIO} = \\left( \\frac{\\text{Average Inventory}}{\\text{COGS}} \\right) \\times 365 \\).\n2. **DSO** is calculated as \\( \\text{DSO} = \\left( \\frac{\\text{Average Receivables}}{\\text{Sales}} \\right) \\times 365 \\).\n3. **DPO** is calculated as \\( \\text{DPO} = \\left( \\frac{\\text{Average Payables}}{\\text{P"
        ]
    },
    {
        "tables": [
            "| Expected Security Standard Deviation (%) | Beta |\n| --- | --- |\n| Security 1 25 | 1.50 |\n| Security 2 15 | 1.40 |\n| Security 3 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-321",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the data collected by the researcher, using the capital asset pricing model, what is the predicted return for Investment A if the anticipated market risk premium is 6% and the risk-free rate is 3%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_risk_premium = 0.06\n    risk_free_rate = 0.03\n    security1_std_dev = 0.25\n    security1_beta = 1.50\n    security2_std_dev = 0.15\n    security2_beta = 1.40\n    security3_std_dev = 0.20\n    security3_beta = 1.60\n\n    # Calculate the predicted return for Investment A using the capital asset pricing model (CAPM)\n    # CAPM formula: E(R) = Rf + \u03b2 * (E(Rm) - Rf)\n    # Assuming Investment A is a portfolio with weights on the three securities; for simplicity, let's say weights are equal\n    weights = [1/3, 1/3, 1/3]\n\n    # Calculate portfolio beta\n    portfolio_beta = (weights[0] * security1_beta) + (weights[1] * security2_beta) + (weights[2] * security3_beta)\n\n    # Calculate the predicted return for Investment A\n    predicted_return = risk_free_rate + (portfolio_beta * market_risk_premium)\n\n    # Return the predicted return as a percentage\n    return predicted_return * 100\n\n# Execute the function to get the answer\nprint(solution())\n```\n\nThis program calculates the predicted return for Investment A using the capital asset pricing model (CAPM) with the given data and assuming equal weights for the three securities. The result is returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-322",
        "python_solution": "",
        "ground_truth": null,
        "question": "When a business releases face value bonds worth \u20ac10,000,000 with a 10-year term dated 1 January 2015, the market interest rate of bonds with similar level of risk and terms stands at 6%. These bonds provide a yearly interest rate of 7%, paid out on December 31. Utilizing the effective interest rate method, what would be the interest cost on 31 December 2015?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    market_interest_rate = 0.06\n    bond_interest_rate = 0.07\n    bond_term = 10\n    issue_date = 2015\n\n    # Calculate the effective interest rate\n    effective_interest_rate = bond_interest_rate\n\n    # Calculate the annual interest payment\n    annual_interest_payment = face_value * effective_interest_rate\n\n    # return answer\n    return annual_interest_payment\n\n# Call the function to get the answer\ninterest_cost = solution()\nprint(f\"The interest cost on 31 December 2015 is: \u20ac{interest_cost:.2f}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-323",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith investigates a technique driven by an event, precisely a potential fusion of B Corporation and U, Inc. B has proposed to acquire Unicorn through a stock-for-stock agreement: the offer ratio is 2 shares of B for every 3 Unicorn shares. B's trading price was \u20ac50 per share before the announcement of fusion, but it decreased to 45 euros per share after the declaration. Before the announcement, U's transaction price per share was 15 euros, and it appreciated to \u20ac20 per share with the expectation of the fusion deal getting necessary permissions and successfully concluding. If we assume the fusion between B and U comes to a successful close, what will be the result of Smith\u2019s merger arbitrage trade if he purchases 24,000 U shares at a rate of 20 euros per share, and goes short on 16,000 B shares at a rate of 45 euros per share?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    u_shares_bought = 24000\n    u_buy_price = 20\n    b_shares_shorted = 16000\n    b_short_price = 45\n\n    # Do math calculation to get the answer\n    total_u_cost = u_shares_bought * u_buy_price\n    total_b_revenue = b_shares_shorted * b_short_price\n    merger_arbitrage = total_b_revenue - total_u_cost\n\n    # return answer\n    return merger_arbitrage\n\n# Call the solution function to get the result\nresult = solution()\nprint(result)\n```\n\nWhen you run this program, it will calculate the result of Smith's merger arbitrage trade based on the given conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-324",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's assume that X and Y are random variables, each adheres to a standard normal distribution, and the covariance between X and Y is 0.35. What is the variance of (3X+2Y)?",
        "output": [
            " Sure, based on the information provided, we need to compute the variance of \\(3X + 2Y\\) given that \\(X\\) and \\(Y\\) adhere to a standard normal distribution and the covariance between them is \\(0.35\\).\n\nThe variance of a linear combination of two random variables \\(aX + bY\\) is given by:\n\\[ \\text{Var}(aX + bY) = a^2 \\text{Var}(X) + b^2 \\text{Var}(Y) + 2ab \\text{Cov}(X, Y) \\]\n\nHere, since \\(X\\) and \\(Y\\) are standard normal variables, \\(\\text{Var}(X) = \\text{Var}(Y) = 1\\) and \\(\\text{Cov}(X, Y) = 0.35\\).\n\nThe Python program to compute this would look as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    var_X = 1\n    var_Y = 1\n    cov_XY = 0.35\n    a = 3\n    b = 2\n\n    # Do math calculation to get the answer\n    variance = a**2 * var_X + b**2 * var_Y + 2 * a * b * cov_XY\n\n    # return answer\n    return variance\n```\n\nThis `solution` function will calculate and return the variance of \\(3X + 2Y\\)."
        ]
    },
    {
        "tables": [
            "| Date        | 6-month LIBOR |\n|-------------|---------------|\n| Sep 7, 2016 | 2.46%         |\n| Mar 7, 2017 | 1.13%         |\n| Sept 7, 2017| 0.79%         |\n| Mar 7, 2018 | 0.42%         |\n| Sep 7, 2018 | 0.56%         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-325",
        "python_solution": "",
        "ground_truth": null,
        "question": "On September 7, 2016, Bank XYZ initiated a 2-year interest rate swap contract. Per the terms of the swap, Bank XYZ was slated to receive a fixed 4.10% rate while paying a rate equivalent to LIBOR plus 1.30% on a principal amount of USD 7.5 million. Payments were scheduled biannually. The table below presents the actual annual 6-month LIBOR rates measured over the contract's 2-year lifespan: Assuming there was no default, what amount did Bank XYZ receive on September 7, 2018?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 7500000  # Principal amount in USD\n    fixed_rate = 0.0410  # Fixed rate received by Bank XYZ\n    libor_rates = [0.0246, 0.0113, 0.0079, 0.0042, 0.0056]  # 6-month LIBOR rates over the 2-year period\n    spread = 0.0130  # Spread added to LIBOR\n\n    # Calculate the total payments over the 2-year period\n    total_receipts = 0\n    total_payments = 0\n\n    for libor in libor_rates:\n        # Receipts: Fixed rate on the principal\n        receipts = principal * fixed_rate / 2\n        total_receipts += receipts\n\n        # Payments: LIBOR + spread on the principal\n        payments = principal * (libor + spread) / 2\n        total_payments += payments\n\n    # Net amount received on September 7, 2018\n    net_amount = total_receipts - total_payments\n\n    return net_amount\n\n# Test the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-326",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith is a tax consultant who gives tax planning guidance to individual clients. A client of Smith's is Rose who presently has $10 million invested in a tax-deferred account that generates 8% every year. Rose will offload the investment after five years, collect the sales revenue all at once (withdrawals are taxed at 20%), and use the funds to buy a mansion. Rose requested Smith to estimate the after-tax wealth available after five years. What will be the after-tax wealth in Rose's tax-deferred account at the end of the five years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10_000_000\n    annual_growth_rate = 0.08\n    years = 5\n    tax_rate = 0.20\n\n    # Do math calculation to get the answer\n    future_value = initial_investment * (1 + annual_growth_rate) ** years\n    tax = future_value * tax_rate\n    after_tax_wealth = future_value - tax\n\n    # return answer\n    return after_tax_wealth\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nYou can execute the above Python code to get the after-tax wealth in Rose's tax-deferred account at the end of the five years."
        ]
    },
    {
        "tables": [
            "| Statistic | Value |\n| --- | --- |\n| Covariance between market return and security return [Cov(Rj,Rm)] | 0.01104 |\n| Correlation coefficient between market return and security return (pi,m) | 0.3 |\n| Standard deviation of market return (\u03c3m) | 0.16 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-327",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the beta of security x, \u03b2x, considering the following information about a stock market index y and security x?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.01104\n    correlation_coefficient = 0.3\n    std_dev_market = 0.16\n\n    # Do math calculation to get the answer\n    beta_x = covariance / (std_dev_market ** 2)\n\n    # return answer\n    return beta_x\n```"
        ]
    },
    {
        "tables": [
            "| Portfolio Number | Expected Nominal Returns | Standard Deviation | Sharpe Ratio |\n|------------------|--------------------------|--------------------|--------------|\n| 1                | 3%                       | 2.50%              | 0.4          |\n| 2                | 4%                       | 4.44%              | 0.45         |\n| 3                | 5%                       | 6%                 | 0.5          |\n| 4                | 6%                       | 6.15%              | 0.65         |\n| 5                | 7%                       | 8.33%              | 0.6          |\n| 6                | 8%                       | 10.90%             | 0.55         |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-328",
        "python_solution": "",
        "ground_truth": null,
        "question": "The overall investment goal of XY endowment is to sustain the real buying power of its portfolio after disbursements. The risk-free rate stands at 2%. An anticipated inflation rate is 1.5%. The cost of returns on earnings investment is 50 bp. XY aims at a 3% annual distribution of assets. Exhibit 1 presents key findings from a mean-variance optimization where the weights of the asset class are bound to be non-negative. To reach XY\u2019s expected return, what is the most suitable percentage for XY\u2019s investment in the corner portfolio?",
        "output": [
            " To address the investment goal of the XY endowment, we'll first determine the required expected return. This is influenced by the risk-free rate, the inflation rate, the cost of returns on earnings investment, and the distribution rate. After that, we will select the portfolio with the closest Sharpe ratio that meets or exceeds this required return, while considering the mean-variance optimization.\n\nHere is the Python program based on your example format:\n\n```python\ndef solution():\n    # Define variables name and value\n    inflation_rate = 0.015  # 1.5%\n    risk_free_rate = 0.02   # 2%\n    cost_of_return = 0.005  # 50 bp (0.5%)\n    distribution_rate = 0.03  # 3%\n\n    # Calculate required expected return\n    required_return = inflation_rate + risk_free_rate + cost_of_return + distribution_rate\n\n    # Define portfolios\n    portfolios = [\n        {\"expected_return\": 0.03, \"sharpe_ratio\": 0.4},  # Portfolio 1\n        {\"expected_return\": 0.04, \"sharpe_ratio\": 0.45}, # Portfolio 2\n        {\"expected_return\": 0.05, \"sharpe_ratio\": 0.5},  # Portfolio 3\n        {\"expected_return\": 0.06, \"sharpe_ratio\": 0.65}, # Portfolio 4\n        {\"expected_return\": 0.07, \"sharpe_ratio\": 0.6},  # Portfolio 5\n        {\"expected_return\": 0.08, \"sharpe_ratio\": 0.55}, # Portfolio 6\n    ]\n\n    # Initialize variables for storing the best portfolio\n    best_portfolio = None\n    min_difference = float('inf')\n\n    # Find the portfolio with the closest Sharpe ratio that meets or exceeds required return\n    for portfolio in portfolios:\n        if portfolio[\"expected_return\"] >= required_return:\n            difference = abs(portfolio[\""
        ]
    },
    {
        "tables": [
            "|   | Cumulative Distribution Function |\n|---|---|\n| Y=y  | F(y)=P(Y\u2264y) |\n| 20 | 0.08 |\n| 21 | 0.20 |\n| 22 | 0.30 |\n| 23 | 0.55 |\n| 24 | 0.75 |\n| 25 | 1.00 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-329",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that 'Z' is a discrete random variable, and the set of potential Z values constitutes Z= {20,21,22,23,24,25}. With the cumulative distribution function's probable value denoted in the chart, can you tell the likelihood that Z equals either 23 or 25?",
        "output": [
            " Sure, let's calculate the probability that \\( Z \\) equals either 23 or 25 using the given cumulative distribution function. The probability that a random variable equals a specific value can be found by subtracting the CDF value of the preceding value from the CDF value of the desired value.\n\nHere's the Python program to calculate the probability:\n\n```python\ndef solution():\n    # Define variables name and value\n    cdf = {\n        20: 0.08,\n        21: 0.20,\n        22: 0.30,\n        23: 0.55,\n        24: 0.75,\n        25: 1.00\n    }\n\n    # Calculate the probability for Z=23 and Z=25\n    prob_Z_equals_23 = cdf[23] - cdf[22]\n    prob_Z_equals_25 = cdf[25] - cdf[24]\n\n    # Sum the probabilities\n    prob_Z_equals_23_or_25 = prob_Z_equals_23 + prob_Z_equals_25\n\n    # Return the answer\n    return prob_Z_equals_23_or_25\n\n# Call the solution function to get the result\nprint(solution())\n```\n\nThis program will compute the probability that \\( Z \\) equals either 23 or 25 by using the given cumulative distribution function. The probability is calculated by identifying the difference between the cumulative probabilities for the specific values and adding them."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-330",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation engages in a 2 \u00d7 5 receive-fixed FRA that has an advanced set, advanced settled with a notional amount of $100,000,000. The correct discount rate for the FRA settlement cash flows stands at 1.5%. Following 60 days, the 90-day Libor is 0.80%, and the 60-day Libor is 0.7%. If the original price of the FRA was pegged at 1.20%, what will be the settlement payment received for the 2 \u00d7 5 FRA?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    notional_amount = 100000000\n    discount_rate = 0.015\n    days_until_settlement = 60\n    day_count_base = 360  # Typically, day count is based on 360 days in financial calculations\n    original_FRA_rate = 0.012\n    ninety_day_libor = 0.008\n    sixty_day_libor = 0.007\n\n    # Calculate the settlement factor\n    settlement_factor = (day_count_base / (day_count_base - days_until_settlement))\n\n    # Calculate the rate difference\n    rate_difference = ninety_day_libor - original_FRA_rate\n\n    # Calculate the settlement amount\n    settlement_amount = (notional_amount * rate_difference * (days_until_settlement / day_count_base)) / (1 + (discount_rate * (days_until_settlement / day_count_base)))\n\n    # return answer\n    return settlement_amount\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nIn this program:\n- We define the necessary variables, including the notional amount, discount rate, days until settlement, original FRA rate, 90-day Libor, and 60-day Libor.\n- We calculate the settlement factor based on the day count convention.\n- We calculate the rate difference between the current 90-day Libor and the original FRA rate.\n- We calculate the settlement amount using the above values and return it as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-331",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager possesses five bonds in his holdings, and each bond carries a single-year default risk of 17%. The default occurrence for each bond is autonomous. What are the odds that only two bonds will default within the coming year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_bonds = 5\n    default_risk = 0.17\n    expected_defaults = 2\n\n    # Import necessary library for combination calculation\n    from math import comb\n    import math\n\n    # Do math calculation to get the answer\n    # Using binomial probability formula: C(n, k) * p^k * (1-p)^(n-k)\n    probability = comb(total_bonds, expected_defaults) * (default_risk ** expected_defaults) * ((1 - default_risk) ** (total_bonds - expected_defaults))\n\n    # return answer\n    return probability\n```"
        ]
    },
    {
        "tables": [
            "| Date | Closing Price |\n|------|---------------|\n| May  | 132           |\n| June | 145           |\n| July | 159           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-332",
        "python_solution": "",
        "ground_truth": null,
        "question": "The stocks of BBB corporation have experienced shifting closing prices over the past 3 months: From May to July, what is the continuously compounded return of BBB corporation's stocks?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    closing_price_may = 132\n    closing_price_july = 159\n\n    # Do math calculation to get the answer\n    continuously_compounded_return = (closing_price_july / closing_price_may)\n    answer = log(continuously_compounded_return)\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-333",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 250 trading days in a year and the daily returns are independently and identically distributed, what is the highest number of daily losses over a 10-year period exceeding the 1-day 99.5% VaR that would still indicate the model being correctly calibrated, for a risk manager who is backtesting an organization's VaR model at the 95% confidence level?",
        "output": [
            " Certainly! Let's break down the problem and create a Python program to find the solution.\n\nThe problem is asking for the highest number of daily losses over a 10-year period that exceed the 1-day 99.5% VaR, such that the model is still correctly calibrated at the 95% confidence level.\n\nThis involves statistical hypothesis testing, specifically looking at the number of exceptions (losses exceeding VaR) over the 10-year period and comparing it to what we would expect under the assumption that the VaR model is correctly calibrated.\n\nHere's the Python program to solve this:\n\n1. Calculate the total number of trading days in 10 years.\n2. Determine the expected number of exceptions based on the 99.5% VaR.\n3. Use the binomial distribution to find the upper bound for the number of exceptions that would still indicate the model is correctly calibrated at the 95% confidence level.\n\nThe program will look like this:\n\n```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    trading_days_per_year = 250\n    total_years = 10\n    var_confidence_level = 0.995\n    backtest_confidence_level = 0.95\n\n    # Calculate total number of trading days over the period\n    total_trading_days = trading_days_per_year * total_years\n\n    # Calculate the expected number of exceptions\n    p_exception = 1 - var_confidence_level\n    expected_exceptions = total_trading_days * p_exception\n\n    # Use the binomial distribution to find the upper bound of the 95% confidence interval for the number of exceptions\n    upper_bound = stats.binom.ppf(backtest_confidence_level, total_trading_days, p_exception)\n\n    # return answer\n    return upper_bound\n```\n\nThis program calculates the highest number of daily losses over a 10-year period that exceed the 1-day 99.5% VaR while maintaining the correct calibration of the model at the 9"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-334",
        "python_solution": "",
        "ground_truth": null,
        "question": "Eight weeks prior, an investor bought a stock forward contract with a maturity of three months. The starting forward price was $108.5, but the present forward price is $107.6. The risk-free rate remains 3%. What is the value of this forward contract?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    starting_forward_price = 108.5\n    current_forward_price = 107.6\n    risk_free_rate = 0.03  # annual risk-free rate\n    maturity_in_years = 3 / 12  # 3 months in years\n\n    # Calculate the discount factor for the risk-free rate\n    discount_factor = (1 + risk_free_rate) ** maturity_in_years\n\n    # Do math calculation to get the answer\n    contract_value = (starting_forward_price - current_forward_price) / discount_factor\n\n    # return answer\n    return contract_value\n```\n\nThis function calculates the value of the forward contract taking into account the discount factor based on the risk-free rate over the maturity of the contract."
        ]
    },
    {
        "tables": [
            "|               |           | Actual training |      |\n|---------------|-----------|-----------------|------|\n|               |           | results         |      |\n| Predicted     |           | Class \"1\"       | Class \"0\"     |\n| Results       | Class \"1\" | TP=182          | FP=52 |\n|               | Class \"0\" | FN=31           | TN=96 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-335",
        "python_solution": "",
        "ground_truth": null,
        "question": "After finalizing the chosen features, Thompson executes a model on the training set which identifies the text as either positive sentiment (Class \u201c1\u201d) or negative sentiment (Class \u201c0\u201d). Subsequently, she assesses its effectiveness through error analysis. Referring to Exhibit 1, what is the precision metric of the model as per the given confusion matrix?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    TP = 182\n    FP = 52\n\n    # Do math calculation to get the answer\n    precision = TP / (TP + FP)\n\n    # return answer\n    return precision\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-336",
        "python_solution": "",
        "ground_truth": null,
        "question": "A shareholder is evaluating the market risk of Orion Portfolio. The portfolio delivers an anticipated annual return of 6.8% and a volatility of 7.0%, and it is benchmarked in contrast with the S&P 500 Index. The shareholder presupposes that the S&P 500 Index has a projected annual return of 7.2% and a volatility of 8.2%. In accordance with the CAPM, if the risk-free rate is 2.2% per annum, what is the beta of Orion Portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    orion_return = 0.068\n    orion_volatility = 0.07\n\n    sp500_return = 0.072\n    sp500_volatility = 0.082\n\n    risk_free_rate = 0.022\n\n    # Do math calculation to get the answer\n    # The CAPM formula: Expected Portfolio Return = Risk Free Rate + Beta * (Market Return - Risk Free Rate)\n    beta = (orion_return - risk_free_rate) / (sp500_return - risk_free_rate)\n\n    # return answer\n    return beta\n```\n\nThis program calculates the beta of Orion Portfolio using the Capital Asset Pricing Model (CAPM) based on the provided data. The beta is computed by rearranging the CAPM formula to solve for beta."
        ]
    },
    {
        "tables": [
            "| Exercise Price ($) | Option Premium ($) | Delta |\n|--------------------|--------------------|-------|\n| 88                 | 4.40               | 0.75  |\n| 94                 | 1.00               | 0.30  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-337",
        "python_solution": "",
        "ground_truth": null,
        "question": "A customer, Alice Thompson, thinks that large-cap stock prices will witness a slight increase, and she wishes to benefit from this trend using a bull spread technique. Parker suggests that Thompson utilize 1/100 options of the Dow Jones Industrial Average (DJX) which will expire in two months. The current DJX price stands at $91. Exhibit 1 offers current information on two DJX call options which will expire within two months. Exhibit 1 DJX Call Options Expiring in Two Months Thompson decides to use 100 contracts for each position. Each contract equals 100 shares. At the DJX call options expiration, what is the maximum potential gain from the bull spread strategy suggested for Thompson?\n",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    lower_strike_price = 88\n    higher_strike_price = 94\n    lower_premium = 4.40\n    higher_premium = 1.00\n    number_of_contracts = 100\n    shares_per_contract = 100\n\n    # Do math calculation to get the answer\n    # Calculate the cost of lower strike price options\n    cost_lower_strike = lower_premium * shares_per_contract * number_of_contracts\n\n    # Calculate the cost of higher strike price options\n    cost_higher_strike = higher_premium * shares_per_contract * number_of_contracts\n\n    # Net cost of the bull spread\n    net_cost = cost_lower_strike - cost_higher_strike\n\n    # Calculate the maximum potential gain\n    max_gain = (higher_strike_price - lower_strike_price) * shares_per_contract * number_of_contracts - net_cost\n\n    # return answer\n    return max_gain\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The maximum potential gain from the bull spread strategy is ${answer:.2f}\")\n```\n\nIn this program, we first define all necessary variables such as the strike prices, premiums, number of contracts, and shares per contract. We then calculate the cost of both the lower and higher strike price options. After that, we determine the net cost of the bull spread. Finally, we compute the maximum potential gain from the strategy and return the result. The `print` statement at the end displays the answer in a formatted way."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-338",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you calculate the net operating cycle for XY corporation given that they have credit sales of $50,000, cost of goods sold is $30,000, average accounts receivable is $3,000, average accounts payable is $2,600, average inventory is $5,000 and purchase inventory is $46,000?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 50000\n    cost_of_goods_sold = 30000\n    avg_accounts_receivable = 3000\n    avg_accounts_payable = 2600\n    avg_inventory = 5000\n    purchase_inventory = 46000\n\n    # Do math calculation to get the answer\n    days_inventory_outstanding = (avg_inventory / cost_of_goods_sold) * 365\n    days_payable_outstanding = (avg_accounts_payable / purchase_inventory) * 365\n    days_sales_outstanding = (avg_accounts_receivable / credit_sales) * 365\n\n    net_operating_cycle = days_inventory_outstanding + days_sales_outstanding - days_payable_outstanding\n\n    # return answer\n    return net_operating_cycle\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-339",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a monthly compounded annual discount rate of 6.5%, what is the present value of a financial agreement that proposes to provide \u20ac1,200 monthly for a period of five years with the initial payment being made instantly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    monthly_payment = 1200  # Monthly payment amount\n    discount_rate = 0.065  # Annual discount rate\n    num_years = 5  # Number of years\n    num_periods = 12 * num_years  # Total number of periods\n\n    # Calculate the monthly discount rate\n    monthly_discount_rate = discount_rate / 12\n\n    # Calculate the present value of the annuity\n    present_value = monthly_payment * (1 - (1 + monthly_discount_rate) ** -num_periods) / monthly_discount_rate\n\n    # return answer\n    return present_value\n\n# Call the function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis Python program calculates the present value of a series of monthly payments with a monthly compounded annual discount rate of 6.5% over a 5-year period. The initial payment is made instantly, and the payments are assumed to occur at the end of each month. The formula used is for the present value of an annuity."
        ]
    },
    {
        "tables": [
            "|   | Six lowest week returns | Hybrid  Weights | Hybrid  Cumulative weights |\n|---|-----------------------|--------------|---------------------------|\n| 1 | -10.2%                   | 0.0105         | 0.0105                           |\n| 2 | -9.1%                   | 0.0150          | 0.0255                           |\n| 3 | -7.8%                   | 0.0082          | 0.0337                           |\n| 4 | -6.0%                   | 0.0043          | 0.0380                           |\n| 5 | -5.5%                   | 0.0153          | 0.0533                           |\n| 6 | -4.9%                   | 0.0115          | 0.0648                           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-340",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the hybrid approach, what is the 5% VaR for a portfolio with 100 weeks of return history, with its lowest returns over six weeks illustrated in the chart?",
        "output": [
            " Certainly! To calculate the 5% Value at Risk (VaR) using the hybrid approach with the given data, we need to compute the weighted average of the six lowest weekly returns, using the weights provided in the table. Here\u2019s how the program should be structured to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    lowest_returns = [-10.2, -9.1, -7.8, -6.0, -5.5, -4.9]\n    hybrid_weights = [0.0105, 0.0150, 0.0082, 0.0043, 0.0153, 0.0115]\n\n    # Do math calculation to get the answer\n    weighted_sum = sum(lowest_return * hybrid_weight for lowest_return, hybrid_weight in zip(lowest_returns, hybrid_weights))\n    var_5_percent = weighted_sum * -1  # Convert to positive for VaR interpretation\n\n    # Return answer\n    return var_5_percent\n\n# Print the result\nprint(solution())\n```\n\nThis Python program first defines the list of the lowest returns and their corresponding hybrid weights. Then it calculates the weighted sum by multiplying each return by its corresponding weight and summing these products. Finally, the program converts the weighted sum to a positive number for Var interpretation and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-341",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the yield decreases by 90 basis points, what would be the convexity impact for a bond having a convexity of 120?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yield_change = -90 / 10000  # Convert basis points to decimal\n    convexity = 120\n\n    # Do math calculation to get the answer\n    convexity_impact = (convexity / 100) * (yield_change ** 2)\n\n    # return answer\n    return convexity_impact\n\n# Running the function to get the answer\nanswer = solution()\nprint(f\"The convexity impact for the bond is: {answer}\")\n```\n\nThis Python program defines the variables for the yield change (in decimal form) and the convexity of the bond. It then calculates the convexity impact using the given formula and returns the result. The final answer is printed out."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-342",
        "python_solution": "",
        "ground_truth": null,
        "question": "Determine the beta of the shares, if the covariance of the market returns with the returns of a particular share is 0.0035 and the standard deviation of the market returns is 0.05.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    covariance = 0.0035\n    std_dev_market = 0.05\n\n    # Do math calculation to get the answer\n    beta = covariance / std_dev_market\n\n    # return answer\n    return beta\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December 2017-2018 |      |      |\n|-------------------------------------------------|------|------|\n| Retained earnings                               |120 145|      |\n| Accounts receivable                             | 38 43|      |\n| Inventory                                       | 45  48|      |\n| Accounts payable                                | 36 29|      |"
        ],
        "topic": "Accounting",
        "question_id": "test-343",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher obtained the data from a business's 2018 financial reports (in $ millions): The business proclaimed and paid cash dividends of $10 million and recognized depreciation expenses of $25 million in 2018. The business views the disbursal of dividends as a financing operation. What was the business's operational cash flow in 2018 (in $ millions)?",
        "output": [
            " To calculate the operational cash flow, we need to consider the changes in the balance sheet items from the end of 2017 to the end of 2018, including the payments for depreciation and dividends. The operational cash flow can be calculated by considering these changes correctly.\n\nHere's the Python program to determine the operational cash flow:\n\n```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2017 = 120\n    retained_earnings_2018 = 145\n    accounts_receivable_2017 = 38\n    accounts_receivable_2018 = 43\n    inventory_2017 = 45\n    inventory_2018 = 48\n    accounts_payable_2017 = 36\n    accounts_payable_2018 = 29\n    cash_dividends = 10\n    depreciation_expenses = 25\n\n    # Calculate the net income for the year 2018\n    net_income_2018 = retained_earnings_2018 - retained_earnings_2017\n\n    # Calculate the changes in balance sheet items\n    change_in_accounts_receivable = accounts_receivable_2018 - accounts_receivable_2017\n    change_in_inventory = inventory_2018 - inventory_2017\n    change_in_accounts_payable = accounts_payable_2018 - accounts_payable_2017\n\n    # Calculate operational cash flow\n    operational_cash_flow = net_income_2018 + depreciation_expenses - change_in_accounts_receivable - change_in_inventory + change_in_accounts_payable\n\n    # Return the answer\n    return operational_cash_flow\n\n# Example usage\nprint(solution())\n```\n\nThis program will calculate the operational cash flow for 2018 based on the given data and the necessary financial adjustments."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-344",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an analyst named Mary is attempting to evaluate a corporation's stocks, considering that the company recently paid a dividend of $0.50 per share and the dividend is predicted to increase by 25% in the following year, and by 10% in the subsequent year. Furthermore, from the third year and onwards, the dividend expansion is foreseen to be 5% per annum. Given an 8% required rate of return, what would be the stock's intrinsic value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.50  # $0.50 per share\n    next_year_dividend_growth = 0.25  # 25% growth\n    subsequent_year_growth = 0.10  # 10% growth\n    long_term_growth = 0.05  # 5% growth per annum from the third year onwards\n    required_rate_of_return = 0.08  # 8% required rate of return\n\n    # Calculate first three years of dividends\n    year_1_dividend = current_dividend * (1 + next_year_dividend_growth)\n    year_2_dividend = year_1_dividend * (1 + subsequent_year_growth)\n    year_3_dividend = year_2_dividend * (1 + long_term_growth)\n\n    # Calculate present value of first three dividends\n    pv_year_1 = year_1_dividend / (1 + required_rate_of_return)\n    pv_year_2 = year_2_dividend / ((1 + required_rate_of_return) ** 2)\n    pv_year_3 = year_3_dividend / ((1 + required_rate_of_return) ** 3)\n\n    # Calculate terminal value\n    terminal_value = (year_3_dividend * (1 + long_term_growth)) / (required_rate_of_return - long_term_growth)\n\n    # Calculate present value of terminal value\n    pv_terminal_value = terminal_value / ((1 + required_rate_of_return) ** 3)\n\n    # Calculate intrinsic value of the stock\n    intrinsic_value = pv_year_1 + pv_year_2 + pv_year_3 + pv_terminal_value\n\n    # return answer\n    return intrinsic_value\n\n# Run the solution\nprint(solution())\n```\n\nThis Python program follows the structure you"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-345",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the 99.9% credit var for a bond valued at $100 million that has a one-year cumulative default probability of 2% with no recovery rate and a 99.9% confidence level for the coming month?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bond_value = 100000000  # Bond valued at $100 million\n    default_probability = 0.02  # One-year cumulative default probability of 2%\n    time_fraction = 1 / 12  # Convert one year to one month\n    confidence_level = 0.999\n\n    # Do math calculation to get the answer\n    from scipy.stats import norm\n\n    # Calculate the Z-score corresponding to the 99.9% confidence level\n    z_score = norm.ppf(confidence_level)\n\n    # Calculate the Credit VaR\n    monthly_default_probability = 1 - (1 - default_probability) ** time_fraction\n    credit_var = bond_value * monthly_default_probability * z_score\n\n    # Return answer\n    return credit_var\n\n# Execute the solution to get the answer\nprint(solution())\n```\n\nThis program calculates the 99.9% Credit Value at Risk (Credit VaR) for a bond with the given parameters. It uses the scipy library to calculate the Z-score for the 99.9% confidence level and then applies the formula to find the Credit VaR for the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-346",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the shares of the BBB corporation have a 30% chance of increasing each year, assuming each yearly attempt is unrelated to the others, what are the odds that it does not manage to increase more than once in the next 3 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    p = 0.30  # Probability of increasing in a year\n    n = 3     # Number of years\n\n    # Probability of not increasing in a year\n    q = 1 - p\n\n    # Probability that the shares do not increase more than once in the next 3 years\n    prob_0_increases = q ** n\n    prob_1_increase = n * p * (q ** (n - 1))\n\n    # Total probability of not increasing more than once\n    answer = prob_0_increases + prob_1_increase\n\n    # return answer\n    return answer\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The probability that the shares of the BBB corporation do not manage to increase more than once in the next 3 years is: {answer:.4f}\")\n```\n\nThis program calculates the probability that the shares of BBB corporation do not increase more than once in the next 3 years, treating each year's outcome as independent of the others. The calculated probabilities for exactly zero increases and exactly one increase are summed to find the desired probability."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-347",
        "python_solution": "",
        "ground_truth": null,
        "question": "A one-year zero-coupon bond has a yield of 4.0%. The yields of the zero-coupon bonds for two and three years are 5.0% and 6.0% respectively. What would be the forward rate for a one-year loan that starts in two years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    y1 = 0.04  # One-year yield\n    y2 = 0.05  # Two-year yield\n    y3 = 0.06  # Three-year yield\n\n    # Do math calculation to get the answer\n    # Forward rate formula: (1 + y3)^3 / (1 + y2)^2 - 1\n    forward_rate = ((1 + y3) ** 3 / (1 + y2) ** 2) - 1\n\n    # return answer\n    return forward_rate\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis Python program defines the variables for the yields and calculates the forward rate for a one-year loan that starts in two years using the given yields. The result is returned by the `solution` function."
        ]
    },
    {
        "tables": [
            "| Mature time | 10 years |\n|-------------|----------|\n| Market discount rate | 4% |\n| Par value of the bond | 1000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-348",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming yearly compounding, what will be the price of the zero coupon bond given the details below?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mature_time_years = 10\n    market_discount_rate = 0.04\n    par_value = 1000\n\n    # Do math calculation to get the answer\n    bond_price = par_value / (1 + market_discount_rate) ** mature_time_years\n\n    # return answer\n    return bond_price\n```\n\nIn this program, we are calculating the price of a zero-coupon bond assuming yearly compounding using the formula \\( \\text{Bond Price} = \\frac{\\text{Par Value}}{(1 + r)^t} \\), where \\( r \\) is the market discount rate and \\( t \\) is the time to maturity. The program defines the variables for the mature time, market discount rate, and par value, performs the calculation, and then returns the result."
        ]
    },
    {
        "tables": [
            "|                                                     | 2018  | 2017  | 2016  |\n|-----------------------------------------------------|-------|-------|-------|\n| Net income                                          | 3,560 | 2,071 | 1,295 |\n| Net cash flow provided by (used in) CFO             | 8,850 | 4,220 | 2,990 |\n| Net cash flow provided by (used in) CFI             | (9,880)| (3,250)| (4,875)|\n| Net cash flow provided by (used in) CFF             | (5,120)| 1,050 | (1,910)|\n| Average net operating assets                         | 42,000| 40,530| 41,600|"
        ],
        "topic": "Accounting",
        "question_id": "test-349",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the cash flow data in the following table, what was the cash-flow-based accruals ratio for the company PZ in the year 2018?",
        "output": [
            " Certainly! Here's the Python program to calculate the cash-flow-based accruals ratio for the company PZ in the year 2018:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 3560\n    cfo_2018 = 8850\n    cfi_2018 = -9880\n    cff_2018 = -5120\n    average_net_operating_assets_2018 = 42000\n\n    # Do math calculation to get the answer\n    total_cash_flows_2018 = cfo_2018 + cfi_2018 + cff_2018\n    cash_flow_based_accruals_ratio_2018 = (-total_cash_flows_2018 + net_income_2018) / average_net_operating_assets_2018\n\n    # return answer\n    return cash_flow_based_accruals_ratio_2018\n\n# Call the function and print the result\nresult = solution()\nprint(result)\n```\n\nThis program calculates the cash-flow-based accruals ratio for the company PZ in the year 2018 by using the formula:\n\n\\[\n\\text{Cash-Flow-Based Accruals Ratio} = \\frac{\\text{Net Income} - \\text{Total Cash Flows}}{\\text{Average Net Operating Assets}}\n\\]\n\nWhere:\n- Net Income for 2018 = 3560\n- Total Cash Flows for 2018 = CFO + CFI + CFF = 8850 + (-9880) + (-5120)\n- Average Net Operating Assets for 2018 = 42000"
        ]
    },
    {
        "tables": [
            "| Operating cash flow | 500 |\n|---------------------|-----|\n| Interest paid       | 30  |\n| Investment in working capital | 80 |\n| Investment in fixed asset | 60 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "test-350",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business expert intends to evaluate a private corporation using the FCF Model. To calculate the free cash flow for all capital providers, what is the free cash flow value the expert intends to find, considering the gathered information (in million)?",
        "output": [
            " To calculate the free cash flow (FCF) for all capital providers considering the given information, we need to use the following formula:\n\n\\[ \\text{FCF} = \\text{Operating Cash Flow} - \\text{Investment in Working Capital} - \\text{Investment in Fixed Asset} + \\text{(Interest Paid \\times (1 - Tax Rate))} \\]\n\nLet's use the provided data to implement this calculation in Python.\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_cash_flow = 500\n    interest_paid = 30\n    investment_in_working_capital = 80\n    investment_in_fixed_asset = 60\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    interest_tax_savings = interest_paid * (1 - tax_rate)\n    free_cash_flow = (operating_cash_flow - investment_in_working_capital - investment_in_fixed_asset + interest_tax_savings)\n\n    # return answer\n    return free_cash_flow\n\n# Print the result\nprint(solution())\n```\n\nThis program calculates the free cash flow value by taking into account the operating cash flow, investments, interest paid, and the tax rate. The computed result will be the free cash flow for all capital providers."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-351",
        "python_solution": "",
        "ground_truth": null,
        "question": "What should be the projected total owners' equity by an analyst, if a firm is expected to have \u20ac2,000 of assets and \u20ac1,200 liabilities by the end of the year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    assets = 2000\n    liabilities = 1200\n\n    # Do math calculation to get the answer\n    owners_equity = assets - liabilities\n\n    # return answer\n    return owners_equity\n```"
        ]
    },
    {
        "tables": [
            "|                               |   C$   |\n|-------------------------------|--------|\n| Carrying value of equipment (net book value)   | 500,000|\n| Undiscounted expected future cash flows | 550,000|\n| Fair value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-352",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the impairment loss (in C$) associated with the printing equipment of a Canadian printing firm that complies with IFRS, given the drop in demand for its products during this fiscal year end?",
        "output": [
            " Sure! To calculate the impairment loss, we need to follow the steps as defined by the International Financial Reporting Standards (IFRS). The impairment loss is the difference between the carrying amount (net book value) of the asset and its recoverable amount. The recoverable amount is the higher of the asset's fair value less costs to sell and its value in use.\n\nHere's the Python program to calculate the impairment loss:\n\n```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    fair_value_less_costs_to_sell = 480000 - 50000\n    value_in_use = 440000\n\n    # Determine the recoverable amount\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n\n    # Calculate the impairment loss\n    impairment_loss = carrying_value - recoverable_amount\n\n    # Return the impairment loss\n    return impairment_loss\n\n# Run the solution to get the answer\nprint(solution())\n```\n\nThis program will calculate the impairment loss by determining the recoverable amount and then subtracting it from the carrying value of the equipment."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-353",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond with a face value of $100 has a semiannual-pay interest rate of 5% over 10 years, what would be its price assuming that its YTM is 8%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Face value of the bond\n    interest_rate = 0.05  # Semiannual interest rate\n    time_periods = 10 * 2  # Number of periods (10 years, 2 times per year)\n    ytm = 0.04  # Yield-to-maturity per semiannual period (half of the annual 8%)\n\n    # Calculate the semiannual coupon payment\n    coupon_payment = face_value * interest_rate / 2\n\n    # Present value of the bond can be calculated using the formula for bond pricing\n    bond_price = 0\n    for t in range(1, time_periods + 1):\n        bond_price += coupon_payment / (1 + ytm) ** t\n\n    # Adding the present value of the face value of the bond\n    bond_price += face_value / (1 + ytm) ** time_periods\n\n    # Return the bond price\n    return bond_price\n\n# Call the function to get the bond's price\nprint(solution())\n```\n\nThis program calculates the price of a bond given its face value, semiannual-pay interest rate, time to maturity, and yield-to-maturity (YTM). The bond price is calculated using the present value of the bond's cash flows from coupon payments and the face value."
        ]
    },
    {
        "tables": [
            "| Valuation Screen | Probability of Passing |\n|------------------|------------------------|\n| 1                | 0.65                   |\n| 2                | 0.45                   |\n| 3                | 0.40                   |\n| 4                | 0.30                   |"
        ],
        "topic": "Accounting",
        "question_id": "test-354",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a researcher uses four separate assessment measures on a group of 1,200 possible investments, what is the estimated number that will successfully pass through all four assessments?",
        "output": [
            " To solve the problem, we need to calculate the probability that an investment will pass all four valuation screens and then multiply that by the total number of possible investments (1,200). The probability of passing all four screens is the product of the individual probabilities of passing each screen.\n\nHere is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    number_of_investments = 1200\n    prob_screen_1 = 0.65\n    prob_screen_2 = 0.45\n    prob_screen_3 = 0.40\n    prob_screen_4 = 0.30\n\n    # Do math calculation to get the answer\n    overall_probability = prob_screen_1 * prob_screen_2 * prob_screen_3 * prob_screen_4\n    estimated_number = number_of_investments * overall_probability\n\n    # return answer\n    return estimated_number\n\n# Uncomment the following line to print the result if you want to run the function\n# print(solution())\n```\n\nThis program first defines the number of investments and the probabilities of passing each screen. Then, it calculates the overall probability of passing all four screens by multiplying the individual probabilities. Finally, it calculates the estimated number of investments that will successfully pass all four assessments by multiplying the overall probability by the total number of investments and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-355",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the fiscal multiplier of the administration with a 25% tax rate and a 70% marginal propensity to consume?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.25\n    marginal_propensity_to_consume = 0.70\n\n    # Do math calculation to get the answer\n    fiscal_multiplier = 1 / (1 - marginal_propensity_to_consume * (1 - tax_rate))\n\n    # return answer\n    return fiscal_multiplier\n```\n\nThis program calculates the fiscal multiplier given a tax rate of 25% and a marginal propensity to consume of 70%. The fiscal multiplier formula is derived from the basic economic model of the multiplier effect."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-356",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher has collected the below stats: the chance of economic prosperity is 75%, while the possibility of recession stands at 25%. For a business, there's a 10% probability of its EPS being $2.0 and a 90% likelihood of having an EPS of $4.0 during prosperous times. However, during a recession, there is a 25% chance that the EPS might be $2.0 and a 75% possibility that the EPS might be $4.0. What is the variance of this business's EPS in an economic downturn?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    recession_prob_eps_2 = 0.25\n    recession_prob_eps_4 = 0.75\n    eps_2 = 2.0\n    eps_4 = 4.0\n\n    # Calculate the expected EPS during a recession\n    expected_eps_recession = (recession_prob_eps_2 * eps_2) + (recession_prob_eps_4 * eps_4)\n\n    # Calculate the variance of EPS during a recession\n    variance = ((recession_prob_eps_2 * (eps_2 - expected_eps_recession) ** 2) +\n                (recession_prob_eps_4 * (eps_4 - expected_eps_recession) ** 2))\n\n    # return answer\n    return variance\n\n# Run the function to get the variance of the business's EPS in an economic downturn\nprint(solution())\n```\n\nThis Python program calculates the variance of the Earnings Per Share (EPS) during an economic downturn given the provided probabilities and EPS values. The expected EPS is calculated first, followed by the variance calculation using the formula for variance of a discrete random variable."
        ]
    },
    {
        "tables": [
            "| Carrying amount of plant | 1,604 |\n|-------------------------|-------|\n| Undiscounted expected future net cash flows | 1,350 |\n| Present value of expected future net cash flows | 1,050 |\n| Fair value of plant | 1,225 |\n| Revised estimate of useful life | 4 years |\n| Depreciation method | Straight line |\n| Revised estimate of residual value | $200 |"
        ],
        "topic": "Accounting",
        "question_id": "test-357",
        "python_solution": "",
        "ground_truth": null,
        "question": "In early January 2015, a market researcher spotted a news report stating that a company he's tracking (which submits reports under US GAAP) would be compelled to cut production from a key product line at its highly specialized ceramics factory, due to a new technology launched by a main competitor. The table encapsulates data and predictions from different sources regarding the factory and its forthcoming possibilities. Assuming the chosen information associated with the Ceramics Production Plant by the close of 2014 (in $ thousands) is correct, what would be the depreciation expense to be accounted for in 2015 concerning the factory?",
        "output": [
            " Sure! To calculate the depreciation expense for 2015, you need to use the straight-line depreciation method. The formula for straight-line depreciation is:\n\n\\[ \\text{Depreciation Expense} = \\frac{\\text{Carrying amount} - \\text{Residual value}}{\\text{Useful life}} \\]\n\nGiven:\n- Carrying amount of the plant = $1,604,000\n- Revised estimate of useful life = 4 years\n- Revised estimate of residual value = $200,000\n\nHere is the Python program to calculate the depreciation expense for 2015:\n\n```python\ndef solution():\n    # Define variables name and value\n    carrying_amount = 1604\n    useful_life = 4\n    residual_value = 200\n\n    # Do math calculation to get the answer\n    depreciable_base = carrying_amount - residual_value\n    depreciation_expense = depreciable_base / useful_life\n\n    # return answer\n    return depreciation_expense\n\n# Example usage\nprint(solution())\n```\n\nWhen you run this function, it will calculate the depreciation expense for 2015 based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-358",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price value of a basis point (PVBP) for the bonds that are presently valued at 108.50, issued by GTS Inc., considering that according to a portfolio manager's valuation model, a 1bp rise in interest rates will cause the bond price to drop to 108.40, and a 1bp fall in interest rates will cause the bond price to increase to 108.59?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_price = 108.50\n    price_decrease = 108.40\n    price_increase = 108.59\n\n    # Calculate the average change in bond price for a 1 basis point change in interest rates\n    pvbp = abs(price_increase - price_decrease) / 2\n\n    # return answer\n    return pvbp\n```\n\nHere's a breakdown of the solution:\n1. We define the current price, the price after a 1 basis point (bp) rise in interest rates, and the price after a 1 bp fall in interest rates.\n2. The price value of a basis point (PVBP) is calculated as the average of the absolute change in price for a 1 bp increase and decrease.\n3. The result is then returned."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-359",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bergen Inc. commenced business operations in 2007 and implements the FIFO method. In its first year, it bought 45,000 units of inventory for \u20ac10 per unit and sold 40,000 units at \u20ac20 each. The following year, it acquired another 50,000 units at a cost of \u20ac11 each and made sales of 45,000 units priced at \u20ac22 each. Using a periodic inventory system, what was Bergen Inc.'s ending inventory balance in \u20ac thousands for 2008?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    units_bought_2007 = 45000\n    cost_per_unit_2007 = 10\n    units_sold_2007 = 40000\n    units_bought_2008 = 50000\n    cost_per_unit_2008 = 11\n    units_sold_2008 = 45000\n\n    # Calculate the units remaining from 2007 and the total cost of inventory in 2008\n    remaining_units_2007 = units_bought_2007 - units_sold_2007\n    total_units_2008 = remaining_units_2007 + units_bought_2008\n    total_cost_2008 = (remaining_units_2007 * cost_per_unit_2007) + (units_bought_2008 * cost_per_unit_2008)\n\n    # Calculate the cost per unit in 2008's ending inventory using the periodic system\n    cost_per_unit_ending_2008 = total_cost_2008 / total_units_2008\n\n    # Calculate the ending inventory balance for 2008\n    ending_inventory_2008 = (total_units_2008 - units_sold_2008) * cost_per_unit_ending_2008\n\n    # Convert the answer to thousands of euros\n    answer = ending_inventory_2008 / 1000\n\n    # Return answer\n    return answer\n```\n\nRun the `solution()` function to get the answer to Bergen Inc.'s ending inventory balance in \u20ac thousands for 2008 using the periodic inventory system."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-360",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is looking to aid his friend Lisa in forecasting the revenue of her store in October 20X9, thus he uses the income from January 20X6 to September 20X9 as examples to create an AR(2) model and attains the following result: X ^ t+1 =1.3458+0.8912Xt+0.3372Xt-1. What would the forecasted revenue of Lisa's store be in October 20X9, provided the income for August 20X9 is $2746.72 and the income for September 20X9 is $2957.63?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue_aug_20X9 = 2746.72\n    revenue_sep_20X9 = 2957.63\n    constant = 1.3458\n    coefficient_t = 0.8912\n    coefficient_t_minus_1 = 0.3372\n\n    # Do math calculation to get the answer\n    forecasted_revenue_oct_20X9 = constant + coefficient_t * revenue_sep_20X9 + coefficient_t_minus_1 * revenue_aug_20X9\n\n    # return answer\n    return forecasted_revenue_oct_20X9\n```"
        ]
    },
    {
        "tables": [
            "| Borrowing date   | 1-Jan-09                                |\n|------------------|-----------------------------------------|\n| Amount borrowed  | 500 million Brazilian real (BRL)  |\n| Annual interest rate  | 14 percent                        |\n| Term of the loan | 3 years                                 |\n| Payment method   | Annual payment of interest only. Principal amortization is due at the end of the loan term. |"
        ],
        "topic": "Accounting",
        "question_id": "test-361",
        "python_solution": "",
        "ground_truth": null,
        "question": "A Brazilian firm, CRIXUS Inc., takes out a loan from a domestic bank to fund the building of its factory. The terms of the loan are as follows: It takes two years to construct the factory, during which CRIXUS made BRL 10 million by momentarily investing the loan amount. What is the value of interest pertaining to the factory construction (in BRL million) that can be capitalized on CRIXUS's balance sheet?",
        "output": [
            " Certainly! Below is the Python program that computes the value of the interest pertaining to the factory construction that can be capitalized on CRIXUS's balance sheet:\n\n```python\ndef solution():\n    # Define variables name and value\n    amount_borrowed = 500_000_000  # 500 million BRL\n    annual_interest_rate = 0.14  # 14 percent\n    construction_period = 2  # Years to construct the factory\n    temporary_investment_income = 10_000_000  # 10 million BRL\n\n    # Do math calculation to get the answer\n    total_interest_during_construction = amount_borrowed * annual_interest_rate * construction_period\n    capitalized_interest = total_interest_during_construction + temporary_investment_income\n\n    # return answer in BRL million\n    return capitalized_interest / 1_000_000\n\n# Call the function and print the result\nanswer = solution()\nprint(answer)\n```\n\nThis program defines the variables related to the loan, calculates the interest for the construction period, and adds the temporary investment income to find the capitalized interest. The function then returns the answer in BRL million."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-362",
        "python_solution": "",
        "ground_truth": null,
        "question": "In compliance with the rules of the trading platform, investing in wheat futures calls for an initial margin of $2000 and a maintenance margin of $1500. A trader shorts a wheat future contract at $216, with each contract incorporating 100 tons. The contract's value escalates to $222 after a day. What would the varying margin amount be at the conclusion of day one?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_margin = 2000\n    maintenance_margin = 1500\n    contract_price_initial = 216\n    contract_price_final = 222\n    tons_per_contract = 100\n\n    # Calculate the change in the contract value\n    contract_value_initial = contract_price_initial * tons_per_contract\n    contract_value_final = contract_price_final * tons_per_contract\n    change_in_value = contract_value_final - contract_value_initial\n\n    # Check if the variation margin is required\n    if (initial_margin - maintenance_margin) < change_in_value:\n        variation_margin_required = change_in_value + initial_margin\n    else:\n        variation_margin_required = initial_margin\n\n    # return answer\n    return variation_margin_required\n```\n\nIn this solution, the Python program calculates the initial and final values of the wheat future contract based on the provided prices and the number of tons per contract. It then determines the variation margin required based on the change in the contract value and the maintenance margin requirements. The result is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-363",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose a hedge fund manager is aiming to build a protective put approach. If the stock's current price is $25.1, and the premium of 23 put is $1.8, what would be the maximum loss for this strategy?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_stock_price = 25.1\n    put_premium = 1.8\n    put_strike_price = 23\n\n    # Do math calculation to get the answer\n    max_loss = current_stock_price + put_premium - put_strike_price\n\n    # return answer\n    return max_loss\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-364",
        "python_solution": "",
        "ground_truth": null,
        "question": "In March 2017, John purchased 500 pen units at a cost of $2 each. Then in April of the same year, he bought another 600 pen units at an expense of $3 each. John managed to sell 1000 units at $5 each during 2017. When employing the FIFO method, what would be the cost of goods he sold in 2017?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_first_batch = 500 * 2  # Cost for the first 500 pens\n    cost_second_batch = 600 * 3 # Cost for the second 600 pens\n    units_sold = 1000            # Number of units sold\n\n    # Do math calculation to get the answer\n    total_cost_sold = 0.0\n\n    if units_sold <= 500:\n        total_cost_sold = units_sold * 2\n    elif units_sold > 500 and units_sold <= 1100:\n        total_cost_sold = cost_first_batch + (units_sold - 500) * 3\n\n    # return answer\n    return total_cost_sold\n\n# Calculate and print the solution\nprint(solution())\n```\n\nThis Python program defines the costs and units for both batches of pens, calculates the cost based on FIFO method, and returns the total cost of goods sold in 2017."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| Fair value  | \u00a3 16,800,000  |\n| Costs to sell  | \u00a3800,000  |\n| Value in use  | \u00a314,500,000  |\n| Net carrying amount  | \u00a319,100,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-365",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher is examining the degradation of the production machinery of Alpha Industries, a corporation based in the UK that abides by IFRS. What is the value of the impairment loss on Alpha Industries' income statement connected to its production machinery, based on the data collected about the machinery?",
        "output": [
            " Certainly! To determine the value of the impairment loss on Alpha Industries' income statement, we need to compare the net carrying amount of the machinery with its recoverable amount. The recoverable amount is the higher of the fair value less costs to sell and the value in use. Here's the Python program to compute the impairment loss:\n\n```python\ndef solution():\n    # Define variables name and value\n    fair_value = 16800000\n    costs_to_sell = 800000\n    value_in_use = 14500000\n    net_carrying_amount = 19100000\n\n    # Calculate the recoverable amount\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n\n    # Calculate the impairment loss\n    impairment_loss = net_carrying_amount - recoverable_amount\n\n    # Return the impairment loss\n    return impairment_loss\n\n# Print the impairment loss\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the recoverable amount as the higher of the fair value less costs to sell and the value in use, and then computes the impairment loss as the difference between the net carrying amount and the recoverable amount. Finally, it returns the impairment loss."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-366",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a discrete uniform distribution with 20 potential results ranging from 1 to 20, what is the probability that X is not less than 3 but not exceeding 5, P(3 \u2264 X < 6)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_outcomes = 20\n    favorable_outcomes = 3  # 3, 4, 5\n\n    # Do math calculation to get the answer\n    probability = favorable_outcomes / total_outcomes\n\n    # return answer\n    return probability\n```\n\nExplanation:\nIn a discrete uniform distribution with 20 potential results (ranging from 1 to 20), the total number of outcomes is 20. The favorable outcomes where \\( X \\) is not less than 3 but not exceeding 5 (i.e., \\( 3 \\leq X < 6 \\)) are the values 3, 4, and 5. This gives us 3 favorable outcomes. The probability is then calculated as the number of favorable outcomes divided by the total number of outcomes."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-367",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume an investment portfolio consists of 40% in property A and 60% in property B. The average and variance of the return on A are 0 and 25 respectively. The average and variance of the return on B are 1 and 121 correspondingly. The correlation coefficient between A and B is 0.3. What is the closest estimate for portfolio volatility?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    wA = 0.4\n    wB = 0.6\n    avgA = 0\n    avgB = 1\n    varA = 25\n    varB = 121\n    corr_coeff = 0.3\n\n    # Do math calculation to get the answer\n    portfolio_variance = (wA ** 2 * varA) + (wB ** 2 * varB) + (2 * wA * wB * corr_coeff * varA ** 0.5 * varB ** 0.5)\n    portfolio_volatility = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_volatility\n\n# If you want to run the solution, you can uncomment the following line:\n# print(solution())\n```\n\nThe above program calculates the portfolio volatility using the given weights, average returns, variances, and the correlation coefficient between the two assets. The portfolio variance is computed using the formula for the variance of a two-asset portfolio, and the portfolio volatility is then derived as the square root of the portfolio variance."
        ]
    },
    {
        "tables": [
            "| Quarter                   | Income   |\n|---------------------------|----------|\n| The last quarter in 20X8 | $ 4257.63|\n| The third quarter in 20X8| $4153.98 |\n| The second quarter in 20X8| $4322.01 |\n| The first quarter in 20X8| $5763.42 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-368",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson is looking to forecast the earnings of his manufacturing plant in the first quarter of 20X9. To do this he utilizes earnings data from the first quarter of 20X8 to the last quarter of 20X8 as examples to create an AR(1) model. However, he discovers that the autocorrelations of the residuals indicate a significant, strong seasonal autocorrelation. Johnson then adjusts the model to obtain the new equation, which is Xt=126.7537+0.1387Xt\u22121+0.9324Xt\u22124X_t=126.7537+0.1387X_{t-1}+0.9324X_{t-4}Xt\u200b=126.7537+0.1387Xt\u22121\u200b+0.9324Xt\u22124\u200b. The income for each quarter in 20X8 is presented in the table below. Based on this new model, what is the",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    income_q1_20X8 = 5763.42\n    income_q4_20X8 = 4257.63\n\n    # Constants for the new model\n    constant = 126.7537\n    coefficient_t_minus_1 = 0.1387\n    coefficient_t_minus_4 = 0.9324\n\n    # Calculate the forecasted earnings for the first quarter of 20X9 using the new model\n    forecast_q1_20X9 = constant + (coefficient_t_minus_1 * income_q4_20X8) + (coefficient_t_minus_4 * income_q1_20X8)\n\n    # Return the forecasted earnings for the first quarter of 20X9\n    return forecast_q1_20X9\n\n# Example usage\nforecasted_earnings = solution()\nprint(f\"The forecasted earnings for the first quarter of 20X9 is: ${forecasted_earnings:.2f}\")\n```\n\nThis Python program defines a function `solution` that calculates the forecasted earnings for the first quarter of 20X9 based on the given AR(1) model and the provided data. The function initializes the income values for the relevant quarters and the model's constants and coefficients. It then uses these to compute the forecast and returns the result. The final forecasted earnings are printed with a formatted string."
        ]
    },
    {
        "tables": [
            "|    | Borrowing date                             | 1 January 2009                          |\n|:--:|---------------------------------------|----------------------------------|\n|    | Amount borrowed                          | 500 million Brazilian real (BRL) |\n|    | Annual interest rate                 | 14 percent                             |\n|    | Term of the loan                       | 3 years                                   |\n| Payment method  |                                       | Annual payment of interest only. Principal amortization is due at the end of the loan term. |"
        ],
        "topic": "Accounting",
        "question_id": "test-369",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Brazilian corporation, RIO GRANDE, Inc., borrows money from a local financial institution to fund the building of its manufacturing facility. The loan conditions indicate that the facility build will take two years, during which RIO GRANDE generated BRL 10 million via temporary investment of the loan funds. What would be the sum of the interest associated with the plant's build (in BRL million) that RIO GRANDE could include in its financial statement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    amount_borrowed = 500000000  # in BRL\n    annual_interest_rate = 0.14\n    term_of_loan_years = 3\n    interest_during_build_years = 2  # The facility build will take 2 years\n\n    # Calculate the annual interest payment\n    annual_interest_payment = amount_borrowed * annual_interest_rate\n\n    # Calculate the total interest during the build\n    total_interest_during_build = annual_interest_payment * interest_during_build_years\n\n    # Convert the interest to BRL million for the answer\n    answer_in_million_brl = total_interest_during_build / 1000000\n\n    # return answer\n    return answer_in_million_brl\n\n# Run the function to get the answer\nresult = solution()\nprint(f\"The sum of the interest associated with the plant's build (in BRL million) is: {result}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-370",
        "python_solution": "",
        "ground_truth": null,
        "question": "John, CFA, is assessing the value of Corporation X. With the present dividend and the necessary return rate of $0.5 per share and 10% respectively, he anticipates that the dividend will continue to grow at its current rate of 4.5% per year indefinitely. What is the intrinsic value of Corporation X shares according to the Gordon Growth Model?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend = 0.5  # present dividend per share\n    growth_rate = 0.045  # annual growth rate of dividends\n    required_return = 0.10  # necessary return rate\n\n    # Do math calculation to get the answer\n    intrinsic_value = dividend / (required_return - growth_rate)\n\n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n| --- | --- | --- | --- | --- | --- |\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-371",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the provided table, can you compute the mean absolute deviation of the monthly stock returns for Ivy Corporation?",
        "output": [
            " ```python\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\n    returns = [20, 4, -5, 12, 3, 12]\n\n    # Calculate the mean of the returns\n    mean_return = sum(returns) / len(returns)\n\n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(ret - mean_return) for ret in returns]\n\n    # Calculate the mean absolute deviation\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n\n    # return answer\n    return mad\n```\n\nHere is the complete Python program encapsulated in the `solution` function:\n\n```python\ndef solution():\n    # Define variables name and value\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\n    returns = [20, 4, -5, 12, 3, 12]\n\n    # Calculate the mean of the returns\n    mean_return = sum(returns) / len(returns)\n\n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(ret - mean_return) for ret in returns]\n\n    # Calculate the mean absolute deviation\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n\n    # return answer\n    return mad\n```\n\nThis program calculates the mean absolute deviation of the monthly stock returns provided in the table."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-372",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Corporation has gone into a forward rate agreement (FRA) in which they will receive a continuous compounding rate of 3.75% on a principal amount of USD 1 million from the end of the first year to the end of the second year. The zero rates for one and two years are 3.25% and 3.50%, respectively. What is the value of the FRA at the inception of the agreement?",
        "output": [
            " Certainly! Below is the Python program to calculate the value of the Forward Rate Agreement (FRA) at the inception of the agreement based on the provided information:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    principal = 1000000\n    continuous_rate = 0.0375\n    zero_rate_1_year = 0.0325\n    zero_rate_2_year = 0.0350\n\n    # Do math calculation to get the answer\n    discount_factor_1_year = math.exp(-zero_rate_1_year * 1)\n    discount_factor_2_year = math.exp(-zero_rate_2_year * 2)\n\n    forward_rate = (math.log(discount_factor_1_year / discount_factor_2_year)) / 1\n    FRA_value = principal * (forward_rate - continuous_rate) * discount_factor_2_year\n\n    # return answer\n    return FRA_value\n\n# Example usage\nprint(solution())\n```\n\nIn this program:\n- `principal` is the amount of USD 1 million.\n- `continuous_rate` is the continuous compounding rate of 3.75%.\n- `zero_rate_1_year` is the zero rate for one year which is 3.25%.\n- `zero_rate_2_year` is the zero rate for two years which is 3.50%.\n\nThe calculation involves:\n1. Computing the discount factors for one and two years using the zero rates.\n2. Calculating the forward rate implied by the one-year and two-year zero rates.\n3. Using the forward rate and the continuous rate to find the value of the FRA, discounted back to the present value.\n\nThe result is the value of the FRA at the inception of the agreement."
        ]
    },
    {
        "tables": [
            "| Bond                         | Coupon Rate | Time-to-Maturity | Price  |\n|------------------------------|-------------|------------------|--------|\n| UK Government Benchmark Bond | 2%          | 3 years          | 100.25 |\n| UK Corporate Bond            | 5%          | 3 years          | 100.65 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-373",
        "python_solution": "",
        "ground_truth": null,
        "question": "The present three-year EUR interest rate benchmark for swap is 2.12% and both bonds annually yield interest. What is the G-spread measured in basis points (bps) on the corporate bond from the UK?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate_gov_bond = 0.02\n    coupon_rate_corp_bond = 0.05\n    price_gov_bond = 100.25\n    price_corp_bond = 100.65\n    swap_rate = 0.0212\n\n    # Yield of government bond\n    yield_gov_bond = coupon_rate_gov_bond + ((100 - price_gov_bond) / (3 * 100))\n\n    # Yield of corporate bond\n    yield_corp_bond = coupon_rate_corp_bond + ((100 - price_corp_bond) / (3 * 100))\n\n    # Calculate G-spread in percentage\n    g_spread_percentage = yield_corp_bond - yield_gov_bond\n\n    # Convert G-spread to basis points (bps)\n    g_spread_bps = g_spread_percentage * 10000\n\n    # return answer\n    return g_spread_bps\n```\n\nIn the above program:\n- The `coupon_rate_gov_bond` and `coupon_rate_corp_bond` represent the annual coupon rates of the government and corporate bonds, respectively.\n- The `price_gov_bond` and `price_corp_bond` represent the current market prices of the government and corporate bonds, respectively.\n- The `swap_rate` is the three-year EUR interest rate benchmark for swap.\n- The yields for the government and corporate bonds are calculated using a simplified formula.\n- The `g_spread_percentage` is computed by subtracting the government bond yield from the corporate bond yield.\n- Finally, the G-spread is converted from percentage to basis points (bps) and returned."
        ]
    },
    {
        "tables": [
            "|Exhibit 1  Atlantic Preserves, Inc.                   |        |\n|Selected Information from Note F of the 2013 Annual Financial Statements|        |\n|Relating to the Company's Defined Benefit Pension Plan (in $ thousands) |        |\n|Start-of-year pension obligation                      |72,544  |\n|Start-of-year plan assets                             |60,096  |\n|End-of-year pension obligation                        |74,077  |\n|End-of-year plan assets                               |61,812  |\n|Current service cost                                  |1,151   |\n|Interest cost                                         |5,441   |\n|Actual return on plan assets                          |5,888   |\n|Expected return on plan assets                        |4,597   |\n|Benefits paid to retired employees                    |5,059   |\n|Employer's contributions                              |887     |\n|Amortization of past service costs                    |272     |"
        ],
        "topic": "Accounting",
        "question_id": "test-374",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering that the actual return on pension plan assets of Pacific Reserve surpasses its predicted return, what is the company's total periodical pension expense (in $ thousands) for 2013 as displayed in Exhibit 1?",
        "output": [
            " Certainly! Here is the Python program to calculate the company's total periodical pension expense for 2013:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_service_cost = 1151     # $ thousands\n    interest_cost = 5441            # $ thousands\n    expected_return_on_plan_assets = 4597  # $ thousands\n    amortization_of_past_service_costs = 272  # $ thousands\n\n    # Calculate the total periodical pension expense\n    total_periodical_pension_expense = current_service_cost + interest_cost + amortization_of_past_service_costs - expected_return_on_plan_assets\n\n    # Return the answer\n    return total_periodical_pension_expense\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program will calculate the total periodical pension expense by summing up the current service cost, interest cost, and amortization of past service costs and subtracting the expected return on plan assets, as indicated in the table from the financial statements."
        ]
    },
    {
        "tables": [
            "| Shares outstanding before buyback | 3.1 million |\n| --- | --- |\n| Earnings per share before buyback | $4.00 |\n| Share price at time of buyback | $50 |\n| After-tax cost of borrowing | 6% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-375",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will be the earnings per share for Blanchard Inc. after repurchasing 100,000 stocks, assuming they borrow precisely the required amount of money for this transaction?",
        "output": [
            " Certainly! To solve this problem, we need to calculate the earnings per share (EPS) after the buyback, considering the company borrows the required amount of money. Let's break it down step by step:\n\n1. Calculate the total earnings before the buyback.\n2. Calculate the total earnings after the buyback.\n3. Calculate the total number of shares outstanding after the buyback.\n4. Calculate the new earnings per share (EPS) after the buyback.\n\nHere's the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables and their values\n    shares_outstanding_before_buyback = 3100000\n    earnings_per_share_before_buyback = 4.00\n    share_price_at_buyback = 50\n    after_tax_cost_of_borrowing = 0.06  # 6%\n    shares_repurchased = 100000\n\n    # Step 1: Calculate total earnings before the buyback\n    total_earnings_before_buyback = shares_outstanding_before_buyback * earnings_per_share_before_buyback\n\n    # Step 2: Calculate the total cost of the buyback\n    total_cost_of_buyback = shares_repurchased * share_price_at_buyback\n\n    # Step 3: Calculate the interest expense due to borrowing\n    interest_expense = total_cost_of_buyback * after_tax_cost_of_borrowing\n\n    # Step 4: Calculate the total earnings after the buyback\n    total_earnings_after_buyback = total_earnings_before_buyback - interest_expense\n\n    # Step 5: Calculate the total number of shares outstanding after the buyback\n    shares_outstanding_after_buyback = shares_outstanding_before_buyback - shares_repurchased\n\n    # Step 6: Calculate the new earnings per share (EPS) after the buyback\n    earnings_per_share_after_buyback = total_earnings_after_buy"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-376",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the return of the perpetual annuity if its price is 870,000 and it pays annually $50,000?",
        "output": [
            " To find the return of the perpetual annuity, we can use the formula for a perpetual annuity, which is given by:\n\n\\[ \\text{Price of Annuity} = \\frac{\\text{Annual Payment}}{\\text{Return Rate}} \\]\n\nRearranging the formula to solve for the return rate gives us:\n\n\\[ \\text{Return Rate} = \\frac{\\text{Annual Payment}}{\\text{Price of Annuity}} \\]\n\nLet's define the variables and perform the calculation within the `solution` function.\n\n```python\ndef solution():\n    # Define variable names and values\n    price_of_annuity = 870000\n    annual_payment = 50000\n\n    # Do math calculation to get the answer\n    return_rate = annual_payment / price_of_annuity\n\n    # Return the answer\n    return return_rate\n\n# Example usage\nanswer = solution()\nprint(answer)\n```\n\nThis program defines the necessary variables and performs the calculation to find the return rate of the perpetual annuity. The `solution` function will return the value of the return rate, and the example usage at the end can be used to test and print the output."
        ]
    },
    {
        "tables": [
            "|        | Bid Size      | Offer Size     |\n|--------|---------------|----------------|\n| Buyer  |(Number of shares)| Limit price(\u00a3) | (Number of shares) | Seller|\n|-------|---------------|--------------|----------------|--------|\n| Keith  | 1,000         | 19.70        |                |       |\n| Paul   | 200          | 19.84        |                |       |\n| Ann    | 400          | 19.89        |                |       |\n| Mary   | 300          | 20.02        |                |       |\n|        |               | 20.03        | 800            | Jack  |\n|        |               | 20.11        | 1,100          | Margaret |\n|        |               | 20.16        | 400            | Jeff   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-377",
        "python_solution": "",
        "ground_truth": null,
        "question": "A marketplace has the following limit orders standing on its book for a specific share: John places a day order to sell 1,000 shares, limit \u00a319.83. Supposing that no further purchase orders are placed on that day after John's order, what would be John\u2019s average trade price?",
        "output": [
            " Sure, I'll generate the Python program according to the given structure and logic:\n\n```python\ndef solution():\n    # Define variables name and value\n    limit_prices = [19.70, 19.84, 19.89, 20.02]\n    bid_sizes = [1000, 200, 400, 300]\n    john_shares = 1000\n    john_limit_price = 19.83\n\n    # Initialize variables to calculate total price and total shares traded\n    total_price = 0\n    total_shares_traded = 0\n\n    # Process each limit price and bid size to determine which trades will occur\n    for price, size in zip(limit_prices, bid_sizes):\n        if john_shares <= 0:\n            break\n\n        if price <= john_limit_price:\n            shares_to_trade = min(john_shares, size)\n            total_price += shares_to_trade * price\n            total_shares_traded += shares_to_trade\n            john_shares -= shares_to_trade\n\n    # Calculate the average trade price\n    if total_shares_traded > 0:\n        average_trade_price = total_price / total_shares_traded\n    else:\n        average_trade_price = 0\n\n    # return answer\n    return average_trade_price\n\n# Example usage\nprint(solution())\n```\n\nThis script defines the necessary variables (limit prices, bid sizes, John's shares, and limit price). It then iterates through each limit price and bid size to determine which orders will be executed based on John's limit price. Finally, it calculates the average trade price and returns it."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-378",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the Break-even inflation rate for Microsoft is 5%, the real default-free interest rate is 4.5%, and the anticipated future inflation is 3.5%. Can you determine the uncertainty of future inflation?",
        "output": [
            " Certainly! To determine the uncertainty of future inflation using the given values, we need to calculate the difference between the break-even inflation rate and the anticipated future inflation.\n\nHere\u2019s how you can implement this in Python:\n\n```python\ndef solution():\n    # Define variables name and value\n    break_even_inflation_rate = 5.0\n    real_default_free_interest_rate = 4.5\n    anticipated_future_inflation = 3.5\n\n    # Do math calculation to get the answer\n    uncertainty_of_future_inflation = break_even_inflation_rate - anticipated_future_inflation\n\n    # return answer\n    return uncertainty_of_future_inflation\n```\n\nIn this program, the uncertainty of future inflation is calculated as the difference between the break-even inflation rate and the anticipated future inflation rate."
        ]
    },
    {
        "tables": [
            "| Purchase price | $12,980 |\n|----------------|---------|\n| Freight and insurance | $1,200 |\n| Installation | $700 |\n| Testing | $100 |\n| Maintenance staff training costs | $500 |"
        ],
        "topic": "Accounting",
        "question_id": "test-379",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation TechnoSphere recently acquired and set up a new apparatus for its production factory. What should be the cumulative expense of the apparatus displayed on TechnoSphere's financial statement, given the costs the company had to bear?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 12980\n    freight_insurance = 1200\n    installation = 700\n    testing = 100\n    training_costs = 500\n\n    # Do math calculation to get the answer\n    cumulative_expense = purchase_price + freight_insurance + installation + testing + training_costs\n\n    # return answer\n    return cumulative_expense\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-380",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the discount rate if a 30-day Treasury bill is priced at 99.5?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value is 100 for a typical Treasury bill\n    price = 99.5  # Price of the 30-day Treasury bill\n    days_to_maturity = 30  # Days to maturity for the Treasury bill\n\n    # Do math calculation to get the answer\n    discount = face_value - price\n    discount_rate = (discount / face_value) * (360 / days_to_maturity)\n\n    # return answer\n    return discount_rate\n\n# Print the solution to verify the result\nprint(solution())\n```\n\nThis program calculates the discount rate of a 30-day Treasury bill priced at 99.5 using the formula for the discount rate, which involves determining the discount amount and annualizing it based on the days to maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-381",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a one-year bond rated BBB, the spread over risk-free Treasuries of the same maturity is 2.5%. If all non-credit factors such as liquidity risk and taxes contribute to a 1% spread, what's the assumed default probability for this bond, if the loss given default rate is 60%?",
        "output": [
            " Certainly! Below is the Python program to calculate the assumed default probability for the bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    spread_over_treasury = 2.5  # in percentage\n    non_credit_factors = 1.0    # in percentage\n    loss_given_default = 0.60   # in percentage\n\n    # Do math calculation to get the answer\n    credit_spread = spread_over_treasury - non_credit_factors\n    assumed_default_probability = credit_spread / (loss_given_default * 100)\n\n    # return answer\n    return assumed_default_probability\n```\n\nThis program defines the necessary variables and calculates the assumed default probability by removing the non-credit factors from the spread and then dividing by the loss given default rate. The final value is returned by the function."
        ]
    },
    {
        "tables": [
            "|  | Bond A |\n| --- | --- |\n| Periodicity | semiannually |\n| Par | 100 |\n| Price | 105 |\n| YTM | 4% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-382",
        "python_solution": "",
        "ground_truth": null,
        "question": "The specific data of bond B is given below: What would be the YTM if it is transformed into a quarterly periodicity?",
        "output": [
            " Certainly! To transform the given data for Bond A from semiannual to quarterly periodicity and calculate the YTM, you can follow these steps:\n\n1. Convert the YTM from semiannual to quarterly.\n2. Adjust the price data accordingly.\n\nHere\u2019s the Python program to calculate the YTM for a quarterly periodicity:\n\n```python\ndef solution():\n    # Define variables name and value\n    semiannual_ytm = 0.04  # 4% YTM on a semiannual basis\n    par_value = 100\n    price = 105\n\n    # Convert the semiannual YTM to an annual YTM\n    annual_ytm = (1 + semiannual_ytm / 2) ** 2 - 1\n\n    # Convert the annual YTM to a quarterly YTM\n    quarterly_ytm = (1 + annual_ytm) ** (1/4) - 1\n\n    # Convert quarterly YTM to a percentage\n    quarterly_ytm_percentage = quarterly_ytm * 100\n\n    # Return the answer\n    return quarterly_ytm_percentage\n\n# Execute the solution function to get the answer\nanswer = solution()\nprint(f\"The YTM on a quarterly periodicity is: {answer:.2f}%\")\n```\n\nThis program follows the steps to convert the semiannual YTM to a quarterly YTM and then returns the answer in percentage form. The final answer is printed to the console for verification."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-383",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a business purchased a client database for $300,000, foreseeing its usefulness for three years, along with a trademark worth $5,000,000 expecting it to be useful indefinitely but it's required to renew it every 10 years with the Patent and Trademark Bureau for a small fee or it will become void. Given that the business applies straight-line depreciation for all its non-physical properties, what would the yearly amortization cost for these two properties amount to?",
        "output": [
            " Certainly! Below is the Python program to calculate the yearly amortization cost for the client database and the trademark as per the provided information:\n\n```python\ndef solution():\n    # Define variables name and value\n    client_database_cost = 300000  # Cost of the client database\n    client_database_useful_life = 3  # Useful life of the client database in years\n\n    trademark_cost = 5000000  # Cost of the trademark\n    trademark_useful_life = 10  # Useful life of the trademark in years\n\n    # Do math calculation to get the answer\n    client_database_amortization = client_database_cost / client_database_useful_life\n    trademark_amortization = trademark_cost / trademark_useful_life\n\n    total_yearly_amortization = client_database_amortization + trademark_amortization\n\n    # Return the answer\n    return total_yearly_amortization\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program defines the costs and useful lives for both the client database and the trademark, calculates the yearly amortization for each, and then sums them to get the total yearly amortization cost. When you run this program, it will provide the total yearly amortization cost as the output."
        ]
    },
    {
        "tables": [
            "| Net income                           | $200,000 |\n|--------------------------------------|----------|\n| Decrease in accounts receivable      | 10,000   |\n| Depreciation                         | 36,000   |\n| Increase in inventory                | 12,000   |\n| Increase in accounts payable         | 17,000   |\n| Decrease in wages payable            | 8,000    |\n| Increase in deferred tax liabilities | 12,000   |\n| Profit from the sale of equipment    | 6,000    |"
        ],
        "topic": "Accounting",
        "question_id": "test-384",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the data provided, what is the company's cash flow generated from operations?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 200000\n    decrease_in_accounts_receivable = 10000\n    depreciation = 36000\n    increase_in_inventory = 12000\n    increase_in_accounts_payable = 17000\n    decrease_in_wages_payable = 8000\n    increase_in_deferred_tax_liabilities = 12000\n    profit_from_sale_of_equipment = 6000\n\n    # Do math calculation to get the answer\n    cash_flow_from_operations = (\n        net_income - profit_from_sale_of_equipment +\n        decrease_in_accounts_receivable +\n        depreciation - increase_in_inventory +\n        increase_in_accounts_payable +\n        decrease_in_wages_payable +\n        increase_in_deferred_tax_liabilities\n    )\n\n    # Return answer\n    return cash_flow_from_operations\n\n# Call the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Total asset | $5,000 million |\n| --- | --- |\n| ROE | 15% |\n| Cost of equity | 12.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-385",
        "python_solution": "",
        "ground_truth": null,
        "question": "Company N is financed with a 60% debt and 40% equity ratio. Using the RI model for valuation, John has gathered the necessary data in the provided chart. What is Company N's residual income?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_asset = 5000000000\n    roe = 0.15\n    cost_of_equity = 0.125\n    debt_ratio = 0.60\n    equity_ratio = 0.40\n\n    # Calculate equity based on the given equity ratio\n    equity = total_asset * equity_ratio\n\n    # Calculate net income using ROE and equity\n    net_income = equity * roe\n\n    # Calculate residual income\n    residual_income = net_income - (equity * cost_of_equity)\n\n    # return answer\n    return residual_income\n```\n\nThis program calculates the residual income of Company N using the given data and the residual income model."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-386",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a customer buys a 6-year bond at a price of 109.83, with an 8% coupon rate where the interest is paid yearly. Supposing the consistent market rate during this time is 6%, what would be the horizon yield if the customer decides to offload the bond at the close of year 5?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bond_price = 109.83\n    coupon_rate = 0.08\n    market_rate = 0.06\n    years_to_maturity = 6\n    years_until_sell = 5\n    face_value = 100  # Face value of the bond is generally assumed to be 100 unless specified otherwise\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n\n    # Calculate present value of the coupon payments for the first 5 years\n    coupon_pv = annual_coupon_payment * ((1 - (1 + market_rate) ** -years_until_sell) / market_rate)\n\n    # Calculate the present value of the face value received in year 6 discounted to year 5\n    face_value_pv_at_year5 = face_value * (1 + coupon_rate) / (1 + market_rate) ** (years_to_maturity - years_until_sell)\n\n    # Calculate the total price of the bond at the end of year 5\n    price_at_year5 = coupon_pv + face_value_pv_at_year5\n\n    # Calculate the horizon yield\n    horizon_yield = (annual_coupon_payment + (price_at_year5 - bond_price)) / bond_price\n    horizon_yield = horizon_yield / years_until_sell\n\n    # return answer\n    return horizon_yield\n\n# Running the solution\nprint(solution())\n```\n\nThis Python program defines the variables necessary to calculate the horizon yield, performs the necessary calculations, and returns the answer. The horizon yield takes into account the coupon payments and the price of the bond at the end of year 5, discounted at the market rate. This should give the correct answer to the given financial question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-387",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the preferred shares of Baxter corporation are anticipated to pay a perpetual annual dividend of $12 and the constant required rate of return is 15%, what should the value of the preferred stock be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_dividend = 12\n    required_rate_of_return = 0.15\n\n    # Do math calculation to get the answer\n    value_of_preferred_stock = annual_dividend / required_rate_of_return\n\n    # return answer\n    return value_of_preferred_stock\n```\n\nThis Python program defines the variables for the annual dividend and the required rate of return, performs the calculation to find the value of the preferred stock, and returns the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-388",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood of a variable falling between 10 and 20 for a random variable adhering to a continuous uniform distribution within the span of 5 to 25?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 5\n    upper_bound = 25\n    range_start = 10\n    range_end = 20\n\n    # Do math calculation to get the answer\n    total_range = upper_bound - lower_bound\n    interested_range = range_end - range_start\n\n    likelihood = interested_range / total_range\n\n    # return answer\n    return likelihood\n\n# Print the result\nprint(solution())\n```\n\nThis program calculates the likelihood of a variable falling between 10 and 20 for a random variable adhering to a continuous uniform distribution within the span of 5 to 25. It defines the boundaries and the range of interest, calculates the likelihood, and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-389",
        "python_solution": "",
        "ground_truth": null,
        "question": "Ultimately, in 2016, Henderson stated that BBBC bought 100% of SongBox (SB), a specific cable music channel in an all-stock transaction. At the point of acquisition, SB had intangible assets for broadcast licenses valued at $2,500. BBBC evaluated the fair market value of these licenses to be $5,500 at that date and estimated the SongBox brand name value to be $2,000, all values are in thousands. The acquisition did not create any goodwill. Prior to the amortization expense calculation, what is the rise in BBBC's intangible assets (in thousands) resulting from the 2016 purchase of SB?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    book_value_of_licenses = 2500  # in thousands\n    fair_market_value_of_licenses = 5500  # in thousands\n    brand_name_value = 2000  # in thousands\n\n    # Do math calculation to get the answer\n    increase_in_intangible_assets = (fair_market_value_of_licenses - book_value_of_licenses) + brand_name_value\n\n    # return answer\n    return increase_in_intangible_assets\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                 | Coefficients | Standard Error | t- Statistic | p-Value |\n|-----------------|--------------|----------------|--------------|---------|\n| Intercept       | 0.5987       | 0.0561         | 10.6749      | 0.0000  |\n| FATO            | 0.2951       | 0.0077         | 38.5579      | 0.0000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-390",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the model lnNPMi=b0+b1FATOi, which is based on data collected from a sample of 35 companies in the most recent fiscal year, what is the projected net profit margin for a corporation that has a fixed asset turnover ratio of 2 times? This is what Sam Braxton is studying, focusing on the relationship between companies' net profit margins (in percent) and their fixed asset turnover (FATO).",
        "output": [
            " Certainly! Let's break down the given problem to understand how we can project the net profit margin based on the fixed asset turnover ratio (FATO). According to the model:\n\\[ \\ln(NPM_i) = b_0 + b_1 \\cdot FATO_i \\]\n\nGiven values:\n- Intercept (\\( b_0 \\)) = 0.5987\n- Coefficient for FATO (\\( b_1 \\)) = 0.2951\n- FATO = 2\n\nWe need to calculate the natural logarithm of the net profit margin (\\( \\ln(NPM) \\)) using the given FATO and then exponentiate it to find the actual net profit margin.\n\nHere is the Python program to do the calculations:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    b0 = 0.5987\n    b1 = 0.2951\n    FATO = 2\n\n    # Calculate the natural logarithm of the net profit margin\n    ln_NPM = b0 + b1 * FATO\n\n    # Exponentiate to get the actual net profit margin\n    NPM = math.exp(ln_NPM) * 100  # Converting to percentage\n\n    # return answer\n    return NPM\n\n# Run the solution function to get the projected net profit margin\nanswer = solution()\nprint(\"Projected Net Profit Margin: {:.2f}%\".format(answer))\n```\n\nThis program will calculate the projected net profit margin for a corporation with a fixed asset turnover ratio of 2 times. The value is then converted to a percentage for better understanding."
        ]
    },
    {
        "tables": [
            "| (all figures in $ thousands) | 2010 | 2009 |\n|-----------------------------|------|------|\n| Deferred tax assets        | 200  | 160  |\n| Deferred tax liabilities   | (450)| (360)|\n| Net deferred tax liabilities | (250)| (200)|\n|                             |      |      |\n| Earning before taxes         | 4000 | 3800 |\n| Income taxes at the statutory rate| 1200| 1140|\n| Income tax payable (Current income tax expense)| 1000 | 900 |"
        ],
        "topic": "Accounting",
        "question_id": "test-391",
        "python_solution": "",
        "ground_truth": null,
        "question": "What was the 2010 income tax expense (in thousands) for the business, based on the provided details about the business?",
        "output": [
            " Certainly! Below is the Python program to calculate the 2010 income tax expense for the business based on the provided details:\n\n```python\ndef solution():\n    # Define variables name and value\n    earning_before_taxes = 4000\n    income_tax_payable = 1000\n    income_tax_at_statutory_rate = 1200\n\n    # Do math calculation to get the answer\n    # Net deferred tax liability change in 2010\n    net_deferred_tax_liability_change = (-200) - (-250)  # 2010 net deferred tax liability - 2009 net deferred tax liability\n\n    # Calculate the income tax expense\n    income_tax_expense = income_tax_payable + net_deferred_tax_liability_change\n\n    # Return answer\n    return income_tax_expense\n\n# Run the solution function for the answer\nprint(solution())\n```\n\nThe program calculates the 2010 income tax expense based on the change in net deferred tax liabilities and the current income tax payable, and then returns the result in thousands."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-392",
        "python_solution": "",
        "ground_truth": null,
        "question": "A set of 25 data points has an average of 8 and a standard deviation of 15. What is the standard error of this average?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    num_data_points = 25\n    average = 8\n    standard_deviation = 15\n\n    # Do math calculation to get the answer\n    standard_error = standard_deviation / (num_data_points ** 0.5)\n\n    # return answer\n    return standard_error\n```\n\nThis program calculates the standard error of the average using the formula:\n\\[ \\text{Standard Error} = \\frac{\\text{Standard Deviation}}{\\sqrt{\\text{Number of Data Points}}} \\]\n\nWhen you run the `solution` function, it will return the standard error of the average for the given set of data points."
        ]
    },
    {
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n| -------- | ------------ | ------ | ------ |\n| G        | 15.00        | 17.00  | 500    |\n| H        | 35.00        | 33.00  | 300    |\n| 1        | 37.00        | 40.00  | 200    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-393",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Benedict from a finance corporation collected data for a price-weighted index made up of securities G,H,I. What is the index's price return for that period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beginning_price_G = 15.00\n    ending_price_G = 17.00\n    shares_G = 500\n\n    beginning_price_H = 35.00\n    ending_price_H = 33.00\n    shares_H = 300\n\n    beginning_price_I = 37.00\n    ending_price_I = 40.00\n    shares_I = 200\n\n    # Calculate the weighted prices\n    beginning_weighted_price = (beginning_price_G + beginning_price_H + beginning_price_I) / 3\n    ending_weighted_price = (ending_price_G + ending_price_H + ending_price_I) / 3\n\n    # Calculate the price return\n    price_return = (ending_weighted_price - beginning_weighted_price) / beginning_weighted_price\n\n    # return answer\n    return price_return\n\n# Test the solution\nprint(solution())\n```\n\nThis Python program calculates the price return for the price-weighted index made up of securities G, H, and I over the given period."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-394",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firm N adheres to U.S.GAAP, it expended $150 million on acquiring inventory, $10 million on transporting the goods to their existing location and an extra $10 million on their sale. What is the inventory cost of firm N?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 150000000  # $150 million\n    transportation_cost = 10000000  # $10 million\n    selling_expenses = 10000000  # $10 million\n\n    # Do math calculation to get the answer\n    inventory_cost = acquisition_cost + transportation_cost\n\n    # return answer\n    return inventory_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-395",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the $150 million distressed bond portfolio managed by Sarah Brown undergoes a 4-sigma daily event, can you estimate the change in the portfolio's value? Sarah, who conducts stress tests on the portfolio, has experienced numerous days over the past two years where the portfolio's daily value change was more than 3 standard deviations. This portfolio has an annualized return of 12% and an annualized return volatility of 25%.",
        "output": [
            " Sure, let's break down the problem and write a Python function to estimate the change in the portfolio's value during a 4-sigma event.\n\nWe need to follow these steps:\n1. Calculate the daily volatility from the annualized volatility.\n2. Determine the effect of a 4-sigma event on the portfolio.\n3. Calculate the change in the portfolio's value based on the 4-sigma event.\n\nHere's the Python program to do that:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 150000000  # $150 million\n    annual_volatility = 0.25  # 25%\n\n    # Calculate daily volatility\n    daily_volatility = annual_volatility / (252 ** 0.5)  # 252 is the number of trading days in a year\n\n    # Calculate the change in portfolio value for a 4-sigma event\n    sigma = 4  # 4-sigma event\n    portfolio_change = portfolio_value * (daily_volatility * sigma)\n\n    # return the portfolio change\n    return portfolio_change\n\n# Example of calling the function\nchange_in_portfolio_value = solution()\nprint(f'The estimated change in the portfolio\\'s value is: ${change_in_portfolio_value:,.2f}')\n```\n\nThis program first computes the daily volatility from the annual volatility, then calculates the change in portfolio value for a 4-sigma event, and finally returns the estimated change in the portfolio's value. The result is printed in a readable format."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-396",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a firm has total variable expenses of $4 million and set expenses of $3 million, what should be its minimal total income to remain in business over the long haul?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_variable_expenses = 4000000\n    set_expenses = 3000000\n\n    # Do math calculation to get the answer\n    minimal_total_income = total_variable_expenses + set_expenses\n\n    # return answer\n    return minimal_total_income\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program defines the total variable expenses and set expenses, calculates the minimal total income required for the firm to remain in business over the long haul, and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-397",
        "python_solution": "",
        "ground_truth": null,
        "question": "Henry Miller and his team gather extensive statistical data on the automobile market. From the information, they deduce that the average cost of SUVs exceeds $46,435 in their nation. Subsequently, they randomly pick 64 SUVs with an average value of $46,760. Assuming that the population's standard deviation is 1370, Henry Miller performs a hypothesis test to verify their hypothesis. What is the figure for the calculated test statistic?",
        "output": [
            " Some calculations are missing from your question. In hypothesis testing, we need to calculate the test statistic. For a given hypothesis test, suppose we choose a significance level, typically 0.05. Regarding Henry's hypothesis, we apply \"one-tailed\" test since the question's wording suggests an examination of whether the average cost exceeds a certain value (which is a directional hypothesis).\n\nHere's the program to calculate the figure for the test statistic.\n```python\ndef solution():\n    # Define variables name and value\n    hypothesized_mean = 46435 # H_0: u <= 46435\n    sample_mean = 46760 # This is the sample mean (x_bar) of the sample size\n    sample_size = 64 # n - size of the random sample\n    population_standard_deviation = 1370 # population standard deviation\n\n    # Do math calculation to get the answer\n    # z = (x_bar - u) / (\u03c3/sqrt(n))\n    import math\n    test_statistic = (sample_mean - hypothesized_mean) / (population_standard_deviation / math.sqrt(sample_size))\n\n    # return answer\n    return test_statistic\n```\n\nThis program calculates and returns the test statistic which is used to determine the statistical significance and to make a decision to either reject or not reject the null hypothesis. Here we use Z-test because the population standard deviation is given and the sample size is enough to assume normality."
        ]
    },
    {
        "tables": [
            "|                               | 31 Dec 05 |  31 Dec 06  |\n| ----------------------------- | --------- | ----------- |\n| Inventory reported on balance sheet | $500,000  | $600,000 |\n| LIFO reserve                  | $50,000   | $70,000  |\n| Average tax rate              | 30%       | 30%       |"
        ],
        "topic": "Accounting",
        "question_id": "test-398",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would be the inventory on 31 December 2006 for a US business that employs the last in, first out (LIFO) accounting system for inventory, according to the data reviewed by the analyst, once the values have been adjusted to adapt to the first in, first out (FIFO) method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    inventory_reported_2006 = 600000\n    lifo_reserve_2006 = 70000\n\n    # Do math calculation to get the answer\n    fifo_inventory_2006 = inventory_reported_2006 + lifo_reserve_2006\n\n    # return answer\n    return fifo_inventory_2006\n```"
        ]
    },
    {
        "tables": [
            "| Maturity | Par Rate | Spot Rate |\n|----------|---------|---------|\n| 1        | 2.5000% | 2.5000% |\n| 2        | 3.5000% | 3.5177% |",
            "|          | Time 0   | Time 1                  |\n|----------|----------|-------------------------|\n|          |          | 5.8365%                 |\n|          | 2.500%   |                         |\n|          |          | Lower one-period forward rate |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-399",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the information in Displays 1 and 2, when aligning a binomial interest rate tree beginning with the computation of implied forward rates illustrated in Display 2, what is the worth of the inferior one-period forward rate?",
        "output": [
            " Certainly! To solve this problem, you need to compute the lower one-period forward rate from the given information. The forward rate can be derived from the spot rates provided.\n\nGiven the information from the table:\n\n- Maturity 1 Spot Rate: 2.5000%\n- Maturity 2 Spot Rate: 3.5177%\n\nThe formula to calculate the one-period forward rate starting at time 1 is:\n\n\\[ r_{1,2} = \\frac{(1 + s_2)^2}{(1 + s_1)} - 1 \\]\n\nWhere:\n- \\( r_{1,2} \\) is the one-period forward rate starting at time 1.\n- \\( s_1 \\) is the spot rate for maturity 1.\n- \\( s_2 \\) is the spot rate for maturity 2.\n\nSo, let's write the Python program to calculate it:\n\n```python\ndef solution():\n    # Define variables name and value\n    s1 = 0.02500  # 2.5000%\n    s2 = 0.035177  # 3.5177%\n\n    # Do math calculation to get the answer\n    one_period_forward_rate = ((1 + s2) ** 2) / (1 + s1) - 1\n\n    # format the answer as a percentage\n    answer = one_period_forward_rate * 100\n\n    # return answer\n    return answer\n\n# Running the function to get the result\nprint(solution())\n```\n\nThis will give you the value of the lower one-period forward rate as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-400",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose the Smith account had a return of -5.3% in a specific month, during which the portfolio benchmark yielded a return of -5.5% and the market index returned -2.8%. What is the return of the Smith account attributing to the manager's style?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    smith_return = -5.3\n    benchmark_return = -5.5\n    market_index_return = -2.8\n\n    # Do math calculation to get the answer\n    manager_style_return = smith_return - benchmark_return\n\n    # return answer\n    return manager_style_return\n```\n\nHere is the complete Python program that calculates the return of the Smith account attributing to the manager's style:\n\n```python\ndef solution():\n    # Define variables name and value\n    smith_return = -5.3\n    benchmark_return = -5.5\n    market_index_return = -2.8\n\n    # Do math calculation to get the answer\n    manager_style_return = smith_return - benchmark_return\n\n    # return answer\n    return manager_style_return\n```\n\nWhen you run this program, it will return the value of the manager's style return."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-401",
        "python_solution": "",
        "ground_truth": null,
        "question": "A telecommunications company based in Europe adheres to International Financial Reporting Standards (IFRS) and capitalizes costs of new product development. In 2014, they invested \u20ac25 million into new product development and reported an amortization expense of \u20ac10 million from the previous year's new product development. The cash flow from operations for this company was reported as \u20ac290 million. An analyst is drawing a comparison between this European company and a telecommunications provider in the US, and has chosen to adjust his financial statements to the US GAAP. Considering US GAAP and not taking tax effects into account, what would be the operational cash flow for the European telecommunications provider?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    new_product_development_cost = 25000000\n    amortization_expense = 10000000\n    reported_cash_flow_from_operations = 290000000\n\n    # Do math calculation to get the answer\n    adjusted_operational_cash_flow = reported_cash_flow_from_operations + new_product_development_cost - amortization_expense\n\n    # Return answer\n    return adjusted_operational_cash_flow\n\n# Call the function to get the answer\nanswer = solution()\nprint(f\"The adjusted operational cash flow for the European telecommunications provider is: \u20ac{answer:,.2f}\")\n```\n\nExplanation:\n\n- The International Financial Reporting Standards (IFRS) require that companies capitalize the costs of new product development, which means these costs are recorded as assets and then amortized over time.\n- The US Generally Accepted Accounting Principles (GAAP) typically require that these costs be expensed as incurred, which means they are not amortized but are recorded as expenses in the year they are incurred.\n- To adjust the cash flow to US GAAP, we need to consider the effect of capitalized costs and amortization expenses:\n  - The capitalized costs (\u20ac25 million in new product development) would increase cash outflows.\n  - The amortization expenses from the previous year (\u20ac10 million) would decrease the cash outflows.\n- Therefore, the adjusted operational cash flow is calculated by adding the capitalized new product development costs and subtracting the amortization expenses from the reported cash flow from operations."
        ]
    },
    {
        "tables": [
            "| Time to Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 8.0%      |\n| 2 years          | 7.5%      |\n| 3 years          | 7.0%      |\n| 4 years          | 6.5%      |\n| 5 years          | 6.0%      |\n| 6 years          | 5.5%      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-402",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given spot rates, what is the present value of the bond issued by Valencia Corp. that pays no coupon for the initial two years, and then commences to pay an annual coupon at a 9% rate until the bond matures after six years?",
        "output": [
            " Here's a Python program to calculate the present value of the bond based on the provided spot rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rates = {1: 0.080, 2: 0.075, 3: 0.070, 4: 0.065, 5: 0.060, 6: 0.055}\n    coupon_rate = 0.09\n    face_value = 1000  # Assuming the face value of the bond is $1000\n\n    # Bond specifics\n    years = 6\n    first_coupon_year = 3\n\n    # Calculate present value\n    present_value = 0\n\n    # Discount each coupon payment\n    for year in range(first_coupon_year, years + 1):\n        coupon_payment = face_value * coupon_rate\n        discount_rate = spot_rates[year]\n        present_value += coupon_payment / (1 + discount_rate) ** year\n\n    # Discount face value at maturity\n    discount_rate_maturity = spot_rates[years]\n    present_value += face_value / (1 + discount_rate_maturity) ** years\n\n    # return answer\n    return present_value\n\n# Run the solution function to get the present value\nprint(solution())\n```\n\nThis program defines the spot rates, coupon rate, and face value of the bond. It then calculates the present value of the bond by discounting each coupon payment and the face value at maturity using the appropriate spot rates. The resulting present value is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-403",
        "python_solution": "",
        "ground_truth": null,
        "question": "Utilizing a two-period binomial model, Emily is looking to compute the terminal value of a put option. Given the current price of the underlying asset is $150 and the strike price stands at $120, the extent of an upward move is 1.69 and a downward move is 0.59. The option will only hold a positive value if the price falls below the strike price, otherwise its value will remain zero. How many terminal nodes could potentially offer a positive return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_price = 150\n    strike_price = 120\n    up_move = 1.69\n    down_move = 0.59\n\n    # Determine the terminal values of the underlying asset\n    terminal_prices = [\n        (current_price * up_move * up_move),        # Up-Up\n        (current_price * up_move * down_move),      # Up-Down\n        (current_price * down_move * up_move),      # Down-Up\n        (current_price * down_move * down_move)     # Down-Down\n    ]\n\n    # Count the number of terminal nodes with a price below the strike price\n    positive_return_count = sum(price < strike_price for price in terminal_prices)\n\n    # return answer\n    return positive_return_count\n```\n\nIn this program, we calculate the terminal prices of the underlying asset based on the two-period binomial tree. The terminal prices are then compared to the strike price to determine which of them fall below the strike price, counting those as the number of terminal nodes that could potentially offer a positive return for the put option."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-404",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the one-year spot rate r(1) equals 4%, the forward rate for a one-year loan commencing in one year is 6%, and the forward rate for a one-year loan starting in two years is 8%, which one is the three-year spot rate out of the given rates?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    r_1 = 0.04  # one-year spot rate\n    f_1 = 0.06  # forward rate for a one-year loan commencing in one year\n    f_2 = 0.08  # forward rate for a one-year loan starting in two years\n\n    # Do math calculation to get the answer\n    r_3 = ((1 + r_1) * (1 + f_1) * (1 + f_2)) ** (1/3) - 1\n\n    # return answer\n    return r_3\n```"
        ]
    },
    {
        "tables": [
            "|       | Time 0  | Time 1  | Time 2  |\n|-------|---------|---------|---------|\n|       |         |         | 2.7183% |\n|       |         | 2.8853% |         |\n|       | 1.500%  |         | 1.6487% |\n|       |         | 1.7500% |         |\n|       |         |         | 1.0000% |",
            "| Bond | Maturity | Coupon Rate |\n| --- | --- | --- |\n| Bond C | 2 years | 2.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-405",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of Bond Z at the upper node at Time 1, when valuing it using the binomial tree shown in Display 1 and the selected data for both bonds given in Display 2?",
        "output": [
            " To determine the value of Bond Z at the upper node at Time 1 using the binomial tree method, we need to perform some calculations. Here\u2019s a step-by-step procedure to implement this logic and calculate the desired value in Python.\n\n1. **Identify the inputs and final payoffs at Time 2 for the upper and middle scenarios.**\n2. **Calculate the expected value at Time 1 for the upper node.**\n3. **Discount this expected value back to Time 1 using the appropriate discount factor.**\n\nGiven the binomial tree and the bond characteristics from the provided data, we can implement the solution in Python as follows:\n\n```python\ndef solution():\n    # Define variables and value\n    coupon_rate = 0.025  # 2.5% annually\n    maturity = 2  # 2 years\n    face_value = 100  # Typical face value of a bond\n\n    # Interest rates at each node and time\n    interest_rates = {\n        'Time0': 0.01500,\n        'Time1_upper': 0.028853,\n        'Time1_middle': 0.017500,\n        'Time2_upper': 0.027183,\n        'Time2_middle': 0.016487,\n        'Time2_lower': 0.010000\n    }\n\n    # Future value at Time 2 (final payoff including coupon and face value)\n    final_payoff = face_value * (1 + coupon_rate)\n\n    # Calculate the expected value at Time 1 for the upper node\n    # Weighted average of the upper and middle node values at Time 2\n    upper_node_value_time2 = final_payoff / (1 + interest_rates['Time2_upper'])\n    middle_node_value_time2 = final_payoff / (1 + interest_rates['Time2_middle'])\n\n    expected_value_time1_upper = 0.5 * (upper_node_value_time2 + middle_node_value_time2)\n\n    # Discount back to"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-406",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is looking to determine the comprehensive yield of an recent transaction carried out by an asset fund. The fund entered a completely secured long futures agreement in nearby soybean futures agreements at the listed futures cost of 755.0 (US cents/bushel). After three months, the entire futures agreement was shifted when the near-term futures cost was 768.0 and the further-term futures cost was 773.0. Throughout the three-month timeframe between the initiation of the initial long agreement and the adjustment of the contract, the security earned an yearly rate of 0.40%. What is the fund's three-month comprehensive yield on the soybean futures transaction?",
        "output": [
            " Sure! Let's break down the information and create the Python program accordingly.\n\n1. Initial futures cost: 755.0 (US cents/bushel)\n2. Futures cost after three months (near-term): 768.0 (US cents/bushel)\n3. Further-term futures cost: 773.0 (US cents/bushel)\n4. Annual security rate: 0.40% (or 0.0040 in decimal form)\n\nTo calculate the three-month comprehensive yield, we will:\n- Calculate the profit per bushel from the futures transaction.\n- Calculate the yield over three months without considering the security rate.\n- Adjust the yield by considering the security rate over three months.\n\nHere is the Python program to calculate the three-month comprehensive yield on the soybean futures transaction:\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 755.0\n    near_term_price = 768.0\n    further_term_price = 773.0\n    annual_security_rate = 0.0040\n    months = 3\n\n    # Calculate the profit per bushel\n    profit_per_bushel = near_term_price - initial_price\n\n    # Calculate the three-month yield without considering the security rate\n    yield_without_security = (profit_per_bushel / initial_price) * 100\n\n    # Calculate the security rate over three months\n    three_month_security_rate = (annual_security_rate / 12) * months\n\n    # Calculate the comprehensive yield over three months\n    comprehensive_yield = yield_without_security + three_month_security_rate\n\n    # Return the comprehensive yield\n    return comprehensive_yield\n\n# Execute the solution function to get the answer\nanswer = solution()\nprint(f\"The fund's three-month comprehensive yield on the soybean futures transaction is: {answer:.2f}%\")\n```\n\nThis program defines the necessary variables, calculates the profit, yield, and comprehensive yield, and then returns the comprehensive yield as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-407",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the delta of a long forward contract on a property with a 10% annum dividend yield and six months to maturity?",
        "output": [
            " Certainly! To determine the delta of a long forward contract on a property with a 10% annum dividend yield and six months to maturity, we need to understand the relationship between the dividend yield and the change in the value of the contract. The delta of a forward contract is typically not affected by the dividend yield because forwards are derivative instruments where the price at maturity is fixed regardless of dividends. However, the price of the underlying asset could affect the potential return.\n\nHere, since we're talking about a property with a dividend yield, we need to adjust the calculation to account for this yield. Let's go through the required steps.\n\nFirst, define variables for the dividend yield, time to maturity, and perform the necessary calculations.\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend_yield = 0.10 # 10% annum\n    time_to_maturity_years = 0.5 # six months expressed in years\n\n    # The delta of a long forward contract is typically 1\n    delta = 1\n\n    # Calculate the adjusted delta considering the dividend yield over the time to maturity\n    adjusted_delta = delta * (1 - dividend_yield * time_to_maturity_years)\n\n    # return answer\n    return adjusted_delta\n\n# Calling the function to get the result\nprint(solution())\n```\n\nThis script defines the dividend yield and the time to maturity in years, computes the adjusted delta, and then returns that value. The adjustment assumes that the forward contract's price is somewhat offset by the dividend payments during its lifetime, slightly reducing the effective delta."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-408",
        "python_solution": "",
        "ground_truth": null,
        "question": "In compliance with IFRS, ABC Corporation obtained a loan to fund the construction of new manufacturing lanes last year. The associated details are provided below: The loan was taken on: 1/1/2017, The borrowed sum was: $100 million, The yearly interest rate: 12%, The loan period: 4 years. The repayment method includes yearly interest payments only, with the principal due at loan maturity. The new manufacturing lanes will take one year to build, and during this time, ABC Corporation succeeded in generating $2 million by investing the loan funds. What would be the total capitalized interest over the loan period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 100_000_000\n    interest_rate = 0.12 # 12%\n    loan_period = 4\n    investment_income = 2_000_000\n\n    # Calculate interest payments per year\n    interest_payment_per_year = loan_amount * interest_rate\n\n    # Calculate total interest over the loan period\n    total_interest = interest_payment_per_year * loan_period\n\n    # Subtract the investment income from the total interest\n    capitalized_interest = total_interest - investment_income\n\n    # return answer\n    return capitalized_interest\n\nprint(solution())\n```\n\nThis program computes the capitalized interest over the loan period by first calculating the total interest over the loan period and then subtracting the investment income that was generated during the construction period. The resulting capitalized_interest is the amount of interest that will be capitalized over the loan period."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-409",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Cindy Corp. recently bought a manufacturing device for $60,000 that is anticipated to usher in an annual cash inflow of $25,000 for six years, how much tax will they have to pay in the first year, given that they will depreciate the equipment over six years for accounting purposes and taxation authorities will deem the machine useful for five years, with no salvage value and a 40% tax rate, assuming the straight-line method is used?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_device = 60000\n    annual_cash_inflow = 25000\n    years_for_accounting_depreciation = 6\n    years_for_tax_depreciation = 5\n    tax_rate = 0.40\n\n    # Calculate depreciation expense for accounting purposes\n    annual_depreciation_accounting = cost_of_device / years_for_accounting_depreciation\n\n    # Calculate depreciation expense for tax purposes\n    annual_depreciation_tax = cost_of_device / years_for_tax_depreciation\n\n    # Calculate taxable income\n    taxable_income = annual_cash_inflow - annual_depreciation_tax\n\n    # Calculate tax to be paid\n    tax_to_pay = taxable_income * tax_rate\n\n    # return answer\n    return tax_to_pay\n```\n\nThis program calculates the tax Cindy Corp. will have to pay in the first year, considering the given conditions. Here's a breakdown of the steps:\n\n1. Calculate the annual depreciation based on accounting standards.\n2. Calculate the annual depreciation for tax purposes.\n3. Determine the taxable income by subtracting the tax-based depreciation from the annual cash inflow.\n4. Compute the tax due by applying the tax rate to the taxable income.\n5. Return the calculated tax amount."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-410",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier acquires a 6% annual payment bond that matures in three years. If the bond's yield-to-maturity stands at 8% and it's currently valued at 94.845806 per 100 of par, what would be the bond's Macaulay duration?",
        "output": [
            " Certainly! To calculate the Macaulay duration of a bond, we need to account for the bond's various cash flows, discounted using the yield-to-maturity. Here is a Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.06         # Annual coupon rate\n    ytm = 0.08                 # Yield-to-maturity\n    face_value = 100           # Par value of the bond\n    current_price = 94.845806  # Current price of the bond\n    years_to_maturity = 3      # Years to maturity\n\n    # Calculate periodic cash flow (coupon payment)\n    coupon_payment = face_value * coupon_rate\n\n    # List to store discounted cash flows and their weighted time factors\n    discounted_cash_flows = []\n    weighted_time_factors = []\n\n    # Calculate discounted cash flows and weighted time factors\n    for t in range(1, years_to_maturity + 1):\n        if t == years_to_maturity:\n            # Final cash flow includes the face value\n            cash_flow = coupon_payment + face_value\n        else:\n            cash_flow = coupon_payment\n\n        discount_factor = (1 + ytm) ** t\n        discounted_cash_flow = cash_flow / discount_factor\n        discounted_cash_flows.append(discounted_cash_flow)\n        weighted_time_factors.append(t * discounted_cash_flow)\n\n    # Calculate Macaulay duration\n    sum_discounted_cash_flows = sum(discounted_cash_flows)\n    sum_weighted_time_factors = sum(weighted_time_factors)\n    macaulay_duration = sum_weighted_time_factors / sum_discounted_cash_flows\n\n    # return answer\n    return macaulay_duration\n\n# Call the solution function to get the Macaulay duration\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-411",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an economy, there are two firms, Firm X and Firm Y. The default rate for Firm X is 10%, and the default rate for Firm Y is 20%. Assuming defaults for the two firms transpire separately, what is the likelihood of both firms defaulting?",
        "output": [
            " Certainly! Here is the Python program that calculates the likelihood of both firms defaulting:\n\n```python\ndef solution():\n    # Define variables name and value\n    default_rate_firm_X = 0.10  # 10% default rate for Firm X\n    default_rate_firm_Y = 0.20  # 20% default rate for Firm Y\n\n    # Do math calculation to get the answer\n    likelihood_both_default = default_rate_firm_X * default_rate_firm_Y\n\n    # return answer\n    return likelihood_both_default\n```\n\nThe function `solution()` will return the likelihood of both Firm X and Firm Y defaulting."
        ]
    },
    {
        "tables": [
            "|                   | 2018   | 2017   | 2016   |\n|------------------| ------- | ------- | ------- |\n| Revenue          | 56,455  | 45,882  | 27,265  |\n| EBIT              | 4,579   | 3,671   | 2,905   |\n| EBT               | 4,012   | 2,878   | 1,987   |\n| Net Income   | 3,560   | 2,071   | 1,295   |\n| Asset Turnover | 0.56     | 0.52     | 0.49     |\n| Asset/Equity  | 2.55     | 2.86     | 2.98     |",
            "|   | 2018 | 2017 | 2016 |\n|---|---|---|---|\n| **Net income** | 3,560 | 2,071 | 1,295 |\n| **Net cash flow provided by (used in) CFO** | 8,850 | 4,220 | 2,990 |\n| **Net cash flow provided by (used in) CFI** | (9,880) | (3,250) | (4,875) |\n| **Net cash flow provided by (used in) CFF** | (5,120) | 1,050 | (1,910) |\n| **Average net operating assets** | 42,000 | 40,530 | 41,600 |"
        ],
        "topic": "Accounting",
        "question_id": "test-412",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the ratio of operating cash flow before interest and taxes to operating income for XYZ Company for 2018, given the financial data and cash flow data gathered by the analyst, and considering that the CFF involves cash paid for interest of 1260 and the CFO involves taxes of 1850 in 2018?",
        "output": [
            " Sure! Here is the Python program to calculate the ratio of operating cash flow before interest and taxes to operating income for XYZ Company for 2018:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_cash_flow_CFO_2018 = 8850  # Net cash flow provided by (used in) CFO for 2018\n    interest_paid_2018 = 1260      # Cash paid for interest in CFF for 2018\n    taxes_paid_2018 = 1850         # Taxes in CFO for 2018\n    net_income_2018 = 3560         # Net income for 2018\n\n    # Calculate operating income (EBIT) for 2018\n    operating_income_2018 = 4579   # EBIT for 2018\n\n    # Calculate operating cash flow before interest and taxes\n    operating_cash_flow_before_interest_and_taxes = (\n        net_cash_flow_CFO_2018 + interest_paid_2018\n    )\n\n    # Calculate the ratio of operating cash flow before interest and taxes to operating income\n    ratio = operating_cash_flow_before_interest_and_taxes / operating_income_2018\n\n    # return answer\n    return ratio\n\n# Print the result of the solution\nprint(solution())\n```\n\nThis program calculates the ratio of operating cash flow before interest and taxes to operating income for XYZ Company for 2018 based on the provided financial data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-413",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the yield drops by 200 basis points on a bond that has an effective duration of 11 and a convexity of 120, what is the percentage change in the bond's price?",
        "output": [
            " Sure, let's define the variables and perform the necessary calculations for the given financial question.\n\nThe yield change in basis points is 200, effective duration is 11, and convexity is 120.\n\nThe percentage change in the bond's price due to a change in yield can be approximated using the formula:\n\\[ \\text{Percentage Change} = -\\text{Effective Duration} \\times \\Delta Y \\times 0.01 + \\frac{1}{2} \\times \\text{Convexity} \\times (\\Delta Y \\times 0.01)^2 \\]\n\nWhere:\n- \\(\\Delta Y\\) is the change in yield in basis points.\n\nHere is the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    change_in_yield = 200  # in basis points\n    effective_duration = 11\n    convexity = 120\n\n    # Do math calculation to get the answer\n    deltaY = change_in_yield / 100.0  # Convert basis points to percentage\n    percentage_change = (-effective_duration * deltaY + 0.5 * convexity * (deltaY ** 2))\n\n    # Return answer\n    return percentage_change\n\n# Running the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the percentage change in the bond's price using the provided effective duration and convexity."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-414",
        "python_solution": "",
        "ground_truth": null,
        "question": "Christopher is looking to calculate the foreign-currency return for Portfolio Z. The domestic currency is EUR while the foreign currency is GBP. The data shows that the domestic-currency return is 2% and GBP appreciated by 7% against the EUR. What is the return for the foreign-currency portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    domestic_currency_return = 0.02  # 2%\n    currency_appreciation = 0.07  # 7%\n\n    # Do math calculation to get the answer\n    foreign_currency_return = domestic_currency_return + currency_appreciation\n\n    # return answer\n    return foreign_currency_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-415",
        "python_solution": "",
        "ground_truth": null,
        "question": "Following a six-month period, the growth portfolio managed by Mia Williams has surpassed its benchmark. Williams posits that her chances of outperforming the benchmark annually stand at 3 to 1. Assuming these odds hold true, what is the likelihood that Williams' portfolio will top the benchmark for the year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    odds_of_outperforming = 3\n    odds_of_not_outperforming = 1\n\n    # Do math calculation to get the answer\n    total_odds = odds_of_outperforming + odds_of_not_outperforming\n    probability_of_outperforming = odds_of_outperforming / total_odds\n\n    # return answer\n    return probability_of_outperforming\n\n# Example usage\nif __name__ == \"__main__\":\n    print(f\"The likelihood that Williams' portfolio will top the benchmark for the year is {solution() * 100:.2f}%\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-416",
        "python_solution": "",
        "ground_truth": null,
        "question": "A community has an average of 25 with an undetermined standard deviation. We choose 100 individuals from this community to create a sample whose mean is 22.5 and variance is 16. What is the standard error of the sample mean?",
        "output": [
            " Certainly! To find the standard error of the sample mean, we need to use the formula:\n\n\\[ \\text{Standard Error of the Sample Mean} = \\frac{s}{\\sqrt{n}} \\]\n\nwhere \\( s \\) is the standard deviation of the sample and \\( n \\) is the sample size. The standard deviation \\( s \\) can be calculated as the square root of the variance.\n\nGiven:\n- Sample size \\( n = 100 \\)\n- Sample variance \\( \\sigma^2 = 16 \\)\n\nFirst, calculate the standard deviation \\( s \\), and then compute the standard error of the sample mean.\n\nHere is the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    n = 100       # Sample size\n    variance = 16 # Sample variance\n\n    # Calculate standard deviation\n    std_dev = math.sqrt(variance)\n\n    # Calculate standard error of the sample mean\n    standard_error = std_dev / math.sqrt(n)\n\n    # return answer\n    return standard_error\n\n# To test the solution\nprint(solution())\n```\n\nThis program defines the variables, computes the standard deviation from the variance, and then calculates the standard error of the sample mean. Finally, it returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-417",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the current annualized short-term rate is 3.2% and the annual basis point-volatility is 2.1%, a finance specialist constructs a binomial interest rate tree using the Ho-Lee model with an annualized drift of 80 bps in the first month and 120 bps in the second month using a monthly time step. What is the interest rate in the lowest node after two months?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    short_term_rate = 0.032  # 3.2% expressed as a decimal\n    volatility = 0.021       # 2.1% expressed as a decimal\n    drift_month1 = 0.008     # 80 bps expressed as a decimal\n    drift_month2 = 0.012     # 120 bps expressed as a decimal\n\n    # Do math calculation to get the answer according to the Ho-Lee model\n    rate_month1 = short_term_rate + drift_month1\n    rate_month2 = rate_month1 - volatility - drift_month2\n\n    # Since the lowest node after two months will have the down moves\n    lowest_node_rate = rate_month2\n\n    # return answer as a percentage\n    return lowest_node_rate * 100  # converting to percentage\n\n# Output the solution\nprint(f\"The interest rate in the lowest node after two months is: {solution()}%\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-418",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a normally distributed random variable, what is the likelihood that the random variable exceeds the mean by more than three standard deviations\uff08F\uff083\uff09=0.9987\uff09?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_exceedance = 3\n    F_3 = 0.9987\n\n    # Do math calculation to get the answer\n    likelihood = 1 - F_3\n\n    # return answer\n    return likelihood\n```\n\nIn this program, we defined the variables `mean_exceedance` and `F_3` where `F_3` represents the cumulative probability of the random variable not exceeding the mean by more than three standard deviations. To find the likelihood that the random variable exceeds the mean by more than three standard deviations, we simply subtract `F_3` from 1.\n\nYou can run this program to get the answer:\n\n```python\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-419",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the beginning of 2011, the spot exchange rate between the UK pound (GBP) and the New Zealand dollar (NZD) was pinned at 2.0979. The GBP interest rates, calculated on a 360-day year basis, were established as 1.6025% for the UK pound and 3.2875% for the NZD. What would the 180-day forward points (multiplied by four decimal points) in NZD/GBP look like?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and their values\n    spot_exchange_rate = 2.0979\n    uk_interest_rate = 1.6025 / 100  # Convert percentage to decimal\n    nz_interest_rate = 3.2875 / 100  # Convert percentage to decimal\n    days_in_year = 360\n    forward_period = 180\n\n    # Calculate the forward points\n    forward_points = spot_exchange_rate * ((nz_interest_rate - uk_interest_rate) * (forward_period / days_in_year))\n\n    # Adjust the forward points to the required format (multiplied by four decimal places)\n    adjusted_forward_points = forward_points * 10000\n\n    # Return the answer\n    return adjusted_forward_points\n\n# Call the function to get the answer\nsolution()\n```\n\nThis Python program defines the necessary variables, performs the required forward point calculation, and returns the result adjusted to four decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-420",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the consistent sum that, when deposited every quarter, will increase to \u00a325,000 in 10 years at a yearly interest rate of 6% weighted quarterly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    target_amount = 25000\n    years = 10\n    annual_interest_rate = 0.06\n    quarters_per_year = 4\n\n    # Calculate quarterly interest rate and number of periods\n    quarterly_interest_rate = annual_interest_rate / quarters_per_year\n    total_periods = years * quarters_per_year\n\n    # Do math calculation to get the answer\n    # Use the formula for the future value of an ordinary annuity\n    deposit_amount = target_amount * quarterly_interest_rate / ((1 + quarterly_interest_rate)**total_periods - 1)\n\n    # return answer\n    return deposit_amount\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-421",
        "python_solution": "",
        "ground_truth": null,
        "question": "In their next analysis, Tseng and Collin study a possible investment in the leveraged buyout of Peterson Enterprises. Specifically, they are considering buying all the preference shares and 90% of the common equity in the LBO. The specifics of the LBO are as follows: An initial investment of $10 million is required. The financing includes $6 million in debt, $3.6 million in preference shares with a 15% annual return paid out at exit, and $0.4 million in common equity. The projected exit value in six years is $15 million, with an expected decline in debt of $2.8 million in the six years before exit. What would be the multiple of anticipated proceeds at the time of exiting in relation to the funds invested for JRR\u2019s Peterson LBO investment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10_000_000\n    amount_of_debt = 6_000_000\n    preference_shares = 3_600_000\n    common_equity = 400_000\n    exit_value = 15_000_000\n    decline_in_debt = 2_800_000\n    preference_shares_return = 0.15\n\n    # Calculate the total invested funds\n    total_invested_funds = amount_of_debt + preference_shares + common_equity\n\n    # Calculate the proceeds at exit\n    remaining_debt_at_exit = amount_of_debt - decline_in_debt\n    proceeds_to_preference_shares = preference_shares * (1 + preference_shares_return * 6)\n    proceeds_to_common_equity = exit_value - remaining_debt_at_exit - proceeds_to_preference_shares\n\n    # Total anticipated proceeds at exit\n    total_anticipated_proceeds = proceeds_to_common_equity\n\n    # Calculate the multiple of anticipated proceeds to the funds invested\n    multiple_of_proceeds = total_anticipated_proceeds / total_invested_funds\n\n    # return answer\n    return multiple_of_proceeds\n\n# Running the function to get the answer\nsolution()\n```\n\nThis function defines the necessary variables, performs the required calculations, and returns the multiple of anticipated proceeds at the time of exiting in relation to the funds invested for JRR\u2019s Peterson LBO investment."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-422",
        "python_solution": "",
        "ground_truth": null,
        "question": "A trader quotes the BRL/MXN spot rate at 0.1378. The 6-month forward rate is 0.14193. What are the 6-month forward points?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_BRL_MXN = 0.1378\n    forward_rate_6_months = 0.14193\n\n    # Do math calculation to get the answer\n    forward_points = (forward_rate_6_months - spot_rate_BRL_MXN) * 10000\n\n    # Return answer\n    return forward_points\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the 6-month forward points by subtracting the spot rate from the 6-month forward rate and then multiplying by 10,000 to get the points. The `solution` function performs this calculation and returns the result."
        ]
    },
    {
        "tables": [
            "|        | 2009 | 2008 |\n|--------|------|------|\n| COGS   | 1200 | 1430 |\n| LIFO Reserve | 800  | 820  |"
        ],
        "topic": "Accounting",
        "question_id": "test-423",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financier gathered inventory information from a business and the business utilized the FIFO technique for recognition, what would be the cost of goods sold?",
        "output": [
            " To calculate the cost of goods sold (COGS) using the FIFO method, we need to consider how the FIFO (First In, First Out) method affects the LIFO Reserve. In this case, the COGS under the FIFO method can be derived by adding the LIFO Reserve to the actual reported COGS (which is under LIFO).\n\nHere's the Python program to compute the COGS using the FIFO method for the year 2008 and 2009 based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    cogs_2008 = 1430\n    cogs_2009 = 1200\n    lifo_reserve_2008 = 820\n    lifo_reserve_2009 = 800\n\n    # Do math calculation to get the answer\n    cogs_fifo_2008 = cogs_2008 + lifo_reserve_2008\n    cogs_fifo_2009 = cogs_2009 + lifo_reserve_2009\n\n    # return answer as a dictionary for both years\n    return {\"2008\": cogs_fifo_2008, \"2009\": cogs_fifo_2009}\n\n# Run the function\nanswer = solution()\nprint(answer)\n```\n\nThis program will calculate the COGS for both 2008 and 2009 using the FIFO method and return the results in a dictionary format for easy understanding and comparison."
        ]
    },
    {
        "tables": [
            "|    Face value    |  \u00a350 million  |\n|------------------|---------------|\n| Coupon rate, paid annually |  4%  |\n|  Maturity  date  | December 31,2019 (10 years) |\n|  Issue  price  | 92.28|"
        ],
        "topic": "Accounting",
        "question_id": "test-424",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a business adopts IFRS and its bonds have a market interest rate of 5 percent as of January 1, 2010, what might be the interest expense (in millions) for 2010 based on those bond characteristics?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 50_000_000  # in millions\n    coupon_rate = 0.04\n    market_interest_rate = 0.05\n    issue_price = 0.9228\n\n    # Do math calculation to get the answer\n    bond_discount = face_value * (1 - issue_price)\n    expected_interest_expense = bond_discount * market_interest_rate\n\n    # return answer\n    return expected_interest_expense / 1_000_000  # to convert to millions\n\n# Call the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-425",
        "python_solution": "",
        "ground_truth": null,
        "question": "If American and Spanish bonds have return standard deviations of 0.64 and 0.56, respectively, and the correlation between these two bonds is 0.24, what is the return covariance?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    std_dev_american = 0.64\n    std_dev_spanish = 0.56\n    correlation = 0.24\n\n    # Do math calculation to get the answer\n    covariance = std_dev_american * std_dev_spanish * correlation\n\n    # return answer\n    return covariance\n```\n\nThis program defines the standard deviations of the American and Spanish bonds, as well as their correlation. It then calculates the covariance using the formula for the covariance of two variables and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-426",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the market price for a zero-coupon bond that matures in 18 years and has a maturity value of $1,000, if it's discounted at an annual interest rate of 12% with compounding happening twice a year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    maturity_years = 18\n    maturity_value = 1000\n    annual_interest_rate = 0.12\n    compounding_frequency = 2\n\n    # Do math calculation to get the answer\n    n_periods = maturity_years * compounding_frequency\n    r_per_period = annual_interest_rate / compounding_frequency\n    present_value = maturity_value / (1 + r_per_period) ** n_periods\n\n    # return answer\n    return present_value\n\n# Print the solution\nprint(solution())\n```\n\nExplanation:\n- `maturity_years` is the number of years until the bond matures.\n- `maturity_value` is the face value of the bond.\n- `annual_interest_rate` is the interest rate at which the bond is discounted.\n- `compounding_frequency` indicates how many times per year the interest is compounded.\n- `n_periods` calculates the total number of compounding periods.\n- `r_per_period` is the interest rate per compounding period.\n- `present_value` is the present value (market price) of the bond, calculated using the formula for discounting the future value."
        ]
    },
    {
        "tables": [
            "| Accounting profit (earnings before taxes) | $250,000  |\n|-----------------------------------------|-------|\n| Taxable income                           | $215,000  |\n| Tax rate                                   | 30%   |\n| Income taxes paid in year                | $61,200  |\n| Deferred tax liability, start of year | $82,400  |\n| Deferred tax liability, end of year    | $90,650  |"
        ],
        "topic": "Accounting",
        "question_id": "test-427",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the available information, what is the reported income tax expense on this year's earnings statement for a corporation during its current financial year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 215000\n    tax_rate = 0.30\n    deferred_tax_liability_start = 82400\n    deferred_tax_liability_end = 90650\n\n    # Do math calculation to get the answer\n    reported_income_tax_expense = (taxable_income * tax_rate) + (deferred_tax_liability_start - deferred_tax_liability_end)\n\n    # return answer\n    return reported_income_tax_expense\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-428",
        "python_solution": "",
        "ground_truth": null,
        "question": "The asset has a 9% rate of return and the debt costs 3%. A buyer purchased the asset with equity totaling 15 and a debt of 30. What is the equity return rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    rate_of_return = 0.09\n    cost_of_debt = 0.03\n    equity = 15\n    debt = 30\n\n    # Do math calculation to get the answer\n    total_capital = equity + debt\n    total_return = total_capital * rate_of_return\n    interest_cost = debt * cost_of_debt\n    net_income_to_equity = total_return - interest_cost\n    equity_return_rate = net_income_to_equity / equity\n\n    # return answer\n    return equity_return_rate\n```\n\nThis program calculates the equity return rate based on the given rates of return, cost of debt, equity, and debt values. The steps include determining the total capital, the total return on that capital, the interest cost, the net income attributable to equity, and finally, the equity return rate."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-429",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine a piece of art is made and bought in 2010 for \u00a35,000. The costs for creating this piece of art came to \u00a32,000. Based on the sum-of-value-added technique for GDP calculation, what is the value added by the final process of making the artwork?",
        "output": [
            " Sure, I can help you with that. Based on the sum-of-value-added technique for GDP calculation, the value added by the final process of making the artwork is the selling price minus the cost of production. Here's the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    selling_price = 5000\n    cost_of_production = 2000\n\n    # Do math calculation to get the answer\n    value_added = selling_price - cost_of_production\n\n    # return answer\n    return value_added\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solution())  # This should print the value added by the final process of making the artwork\n```\n\nWhen you run the `solution` function, it will calculate and return the value added by the final process of making the artwork."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-430",
        "python_solution": "",
        "ground_truth": null,
        "question": "If ten portfolio managers are in the running for the first, second, and third top portfolio manager award of 2012, determined by the individual assessments of a team of investment analysts, how many possible combinations can each analyst come up with for their rankings?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    num_managers = 10\n\n    # Do math calculation to get the answer\n    possible_combinations = num_managers * (num_managers - 1) * (num_managers - 2)\n\n    # return answer\n    return possible_combinations\n```\n\nThe solution leverages the concept of permutations, where each analyst can choose the first place from 10 managers, the second place from the remaining 9 managers, and the third place from the remaining 8 managers.\n\nThus, the total number of possible combinations for the rankings is calculated by \\(10 \\times 9 \\times 8\\)."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rates |\n|----------------|-----------|\n| 1-year         | 7%        |\n| 2-year         | 8%        |\n| 3-year         | 9%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-431",
        "python_solution": "",
        "ground_truth": null,
        "question": "The maturity period of Bond A is 3 years, with annual interest payments and a coupon rate of 6%. Given the spot rates outlined below, what would be the price of Bond A?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.06\n    spot_rate_1 = 0.07\n    spot_rate_2 = 0.08\n    spot_rate_3 = 0.09\n\n    # Calculate the price of Bond A\n    bond_price = (coupon_rate / (1 + spot_rate_1)) + \\\n                 (coupon_rate / (1 + spot_rate_2)**2) + \\\n                 ((1 + coupon_rate) / (1 + spot_rate_3)**3)\n\n    # Return the answer\n    return bond_price\n```\n\nThis Python program defines the coupon rate and the given spot rates. It then calculates the price of Bond A by discounting the annual interest payments and the final face value using the appropriate spot rates. The final price of Bond A is then returned."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-432",
        "python_solution": "",
        "ground_truth": null,
        "question": "Corporation X is a crude oil provider. As a researcher, you are tasked with assessing whether Corporation X will undergo new growth by predicting if Corporation X's biggest client, Corporation Y, will enhance their order quantity. You predict that the likelihood of Corporation Y augmenting the order quantity is 30%. If Corporation Y does amplify the order quantity, Corporation X will have a new growth probability of 80%. However, if Corporation Y does not augment the order quantity, then Corporation X will only have a new growth probability of 10%. Later on, you found out that crude oil provider Corporation X has initiated a new growth. Given this scenario, what is the probability that you estimate Corporation Y to enhance the order quantity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables for the probabilities\n    prob_corp_y_enhance = 0.30  # Probability that Corporation Y will enhance the order quantity\n    prob_corp_x_growth_given_enhance = 0.80  # Probability Corporation X will have new growth if Corporation Y enhances order\n    prob_corp_x_growth_given_no_enhance = 0.10  # Probability Corporation X will have new growth if Corporation Y does not enhance order\n\n    # Calculate the unconditional probability that Corporation X will have new growth\n    prob_corp_x_growth = (prob_corp_y_enhance * prob_corp_x_growth_given_enhance) + ((1 - prob_corp_y_enhance) * prob_corp_x_growth_given_no_enhance)\n\n    # Using Baye's Theorem to find the probability that Corporation Y will enhance the order quantity given Corporation X has initiated new growth\n    prob_corp_y_enhance_given_growth = (prob_corp_y_enhance * prob_corp_x_growth_given_enhance) / prob_corp_x_growth\n\n    # Return the answer\n    return prob_corp_y_enhance_given_growth\n\nprint(solution())\n```\n\nThis Python program defines the probabilities involved in the scenario, uses Bayes' Theorem to find the probability that Corporation Y will enhance the order quantity given that Corporation X has initiated new growth, and returns the calculated probability."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-433",
        "python_solution": "",
        "ground_truth": null,
        "question": "The table underneath indicates the monthly stock returns for Ivy Corp. Based on the information provided in this table, can you compute the mode of the returns for Ivy Corp.?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [20, 4, -5, 12, 3, 12]\n\n    # Do math calculation to get the answer\n    from collections import Counter\n    data = Counter(returns)\n    mode_data = data.most_common(1)\n    mode = mode_data[0][0]\n\n    # return answer\n    return mode\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-434",
        "python_solution": "",
        "ground_truth": null,
        "question": "There are 6000 software developers in the population which is expected to have a normal distribution. A sample of 100 is taken from this population. Given a z-statistic, the 95% confidence interval of the sample mean for the yearly salary is 32.5 (in thousands) dollars, fluctuating between 22 (in thousands) dollars and 43 (in thousands) dollars. Compute the standard error of the mean yearly salary:",
        "output": [
            " Sure, let's break down the solution step by step:\n\n1. We know that the 95% confidence interval for the sample mean is given by:\n   \\[\n   \\text{Sample Mean} \\pm Z \\left( \\frac{\\sigma}{\\sqrt{n}} \\right)\n   \\]\n   where \\( Z \\) is the z-score corresponding to the 95% confidence level, \\( \\sigma \\) is the standard deviation of the population, and \\( n \\) is the sample size.\n\n2. The given confidence interval is from 22 thousand dollars to 43 thousand dollars, with a sample mean of 32.5 thousand dollars.\n\n3. The formula for the confidence interval is:\n   \\[\n   \\text{Sample Mean} \\pm 1.96 \\left( \\frac{\\sigma}{\\sqrt{n}} \\right)\n   \\]\n   Given that:\n   \\[\n   \\text{Lower Bound} = 22 \\quad \\text{and} \\quad \\text{Upper Bound} = 43\n   \\]\n   The standard error (SE) is:\n   \\[\n   \\text{SE} = \\frac{43 - 22}{2 \\times 1.96}\n   \\]\n\nNow, let's write the Python program to compute this:\n\n```python\ndef solution():\n    # Define variables name and value\n    z_score = 1.96\n    lower_bound = 22\n    upper_bound = 43\n\n    # Do math calculation to get the answer\n    margin_of_error = (upper_bound - lower_bound) / 2\n    standard_error = margin_of_error / z_score\n\n    # return answer\n    return standard_error\n\n# Run the function and print the result\nprint(solution())\n```\n\nThis Python program will calculate the standard error of the mean yearly salary based on the given confidence interval and z-score."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-435",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert has been tasked with identifying potential arbitrage openings in the Treasury bond market by contrasting the cash flows of selected bonds with mixtures of other bonds. If a 1-year zero-coupon bond is valued at USD 98, and a 1-year bond which pays an 8% coupon semi-annually costs USD 103, utilizing a replication methodology, what should be the cost of a 1-year Treasury bond that offers a 6% semi-annual coupon?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    price_zero_coupon = 98\n    price_8pct_coupon = 103\n    coupon_8pct = 0.08\n    face_value = 100  # Assuming the face value of the bonds is 100\n\n    # Calculate the present value of the coupon payments for the 8% bond\n    semi_annual_coupon_payments = [coupon_8pct * face_value / 2] * 2\n    present_value_of_coupons = sum(semi_annual_coupon_payments)\n\n    # Calculate the present value of face value at maturity\n    present_value_of_face_value = price_zero_coupon\n\n    # Set up the equation to price the 6% semi-annual coupon bond\n    coupon_6pct = 0.06\n    semi_annual_coupon_payments_6pct = [coupon_6pct * face_value / 2] * 2\n    semi_annual_discount = present_value_of_coupons / (sum(semi_annual_coupon_payments) - present_value_of_face_value)\n\n    # Calculate the price of the 6% bond\n    price_6pct_bond = sum(semi_annual_coupon_payments_6pct) * semi_annual_discount + present_value_of_face_value\n\n    # return answer\n    return price_6pct_bond\n\n# Call the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Items               | Times |\n|---------------------|-------|\n| Receivable turnover | 5     |\n| Inventory turnover  | 4     |\n| Payable turnover    | 10    |"
        ],
        "topic": "Accounting",
        "question_id": "test-436",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you compute the cash conversion cycle for the firm?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    receivable_turnover = 5\n    inventory_turnover = 4\n    payable_turnover = 10\n\n    # Do math calculation to get the answer\n    receivable_days = 365 / receivable_turnover\n    inventory_days = 365 / inventory_turnover\n    payable_days = 365 / payable_turnover\n\n    cash_conversion_cycle = receivable_days + inventory_days - payable_days\n\n    # return answer\n    return cash_conversion_cycle\n```"
        ]
    },
    {
        "tables": [
            "| Revenue | $4,000,000 |\n| --- | --- |\n| Cost of goods sold | $3,000,000 |\n| Other operating expenses | $500,000 |\n| Interest expense | $100,000 |\n| Tax expense | $120,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-437",
        "python_solution": "",
        "ground_truth": null,
        "question": "The manufacturing company, Denali Limited, provided the following income statement data: What is the equivalent of Denali's gross profit?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 4000000\n    cost_of_goods_sold = 3000000\n\n    # Do math calculation to get the answer\n    gross_profit = revenue - cost_of_goods_sold\n\n    # return answer\n    return gross_profit\n```\n\nThe Python program above defines the variables `revenue` and `cost_of_goods_sold` with the values provided in the table. It then calculates the `gross_profit` by subtracting `cost_of_goods_sold` from `revenue` and returns the result."
        ]
    },
    {
        "tables": [
            "|     | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|-----|------------------|------------------|------------------|------------------|\n| Domestic | 25% | 15% | 50% | 35% |\n| Bond 9% | - | 5% | 30% | 35% |\n| International 15% | - | 18% | 20% | 30% |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-438",
        "python_solution": "",
        "ground_truth": null,
        "question": "Can you calculate the value added from asset allocation according to the given table?",
        "output": [
            " Certainly! To calculate the value added from asset allocation, we need to follow these steps:\n\n1. Calculate the weights and returns of the portfolio and the benchmark.\n2. Calculate the return that is attributed to the weights used in the portfolio.\n3. Calculate the return that would be expected if the portfolio had the benchmark weights.\n4. Subtract the benchmark return from the portfolio return to get the value added from asset allocation.\n\nHere's the Python program to accomplish this:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_return_domestic = 0.25\n    portfolio_return_bond = 0.09\n    portfolio_return_international = 0.15\n    benchmark_return_domestic = 0.15\n    benchmark_return_bond = 0.05\n    benchmark_return_international = 0.18\n\n    portfolio_weight_domestic = 0.50\n    portfolio_weight_bond = 0.30\n    portfolio_weight_international = 0.20\n    benchmark_weight_domestic = 0.35\n    benchmark_weight_bond = 0.35\n    benchmark_weight_international = 0.30\n\n    # Calculate the portfolio return\n    portfolio_return = (portfolio_weight_domestic * portfolio_return_domestic) + \\\n                       (portfolio_weight_bond * portfolio_return_bond) + \\\n                       (portfolio_weight_international * portfolio_return_international)\n\n    # Calculate the benchmark return\n    benchmark_return = (benchmark_weight_domestic * benchmark_return_domestic) + \\\n                       (benchmark_weight_bond * benchmark_return_bond) + \\\n                       (benchmark_weight_international * benchmark_return_international)\n\n    # Calculate the return attributed to the portfolio's weights\n    return_from_weights = (portfolio_weight_domestic * benchmark_return_domestic) + \\\n                          (portfolio_weight_bond * benchmark_return_b"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-439",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering that the December 2010 annual report of Adidas AG indicates Depreciation and amortization: \u20ac249 million, Total assets: \u20ac10,618 million, Total debt: \u20ac1,613 million, Shareholders\u2019 equity: \u20ac4,616 million, what is the company's debt/capital ratio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_debt = 1613\n    shareholders_equity = 4616\n\n    # Do math calculation to get the answer\n    total_capital = total_debt + shareholders_equity\n    debt_capital_ratio = total_debt / total_capital\n\n    # return answer\n    return debt_capital_ratio\n```"
        ]
    },
    {
        "tables": [
            "|    |    |\n|---|---|\n| Net income | 45.8 |\n| Depreciation | 18.2 |\n| Loss on sale of equipment | 1.6 |\n| Decrease in accounts receivable | 4.2 |\n| Increase in inventories | 5.4 |\n| Increase in accounts payable | 4.5 |\n| Capital expenditures | 7.3 |\n| Proceeds from sale of stock | 8.5 |"
        ],
        "topic": "Accounting",
        "question_id": "test-440",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's take U.S. GAAP into account unless specified otherwise. What is the annual free cash flow to equity for the business, taking into account that it does not pay out any dividends, carries no debt, and this information was collected over one year by a market researcher?",
        "output": [
            " Sure! Let's define the variables based on the given table and perform the necessary calculations to determine the free cash flow to equity.\n\nIn free cash flow to equity (FCFE), it reflects the cash generated by the business that is available to equity holders after all expenses, reinvestments, and other adjustments.\n\nTo calculate FCFE, we typically use the following formula:\n\\[ \\text{FCFE} = \\text{Net Income} + \\text{Non-cash Charges} - \\text{Investments in Fixed Assets} - \\text{Changes in Working Capital} \\]\n\nHere, non-cash charges include depreciation and loss on sale of equipment. Investments in fixed assets include capital expenditures. Changes in working capital adjustments include changes in accounts receivable, inventories, and accounts payable.\n\nLet's plug in the values provided:\n- Net Income: 45.8\n- Depreciation: 18.2\n- Loss on sale of equipment: 1.6\n- Decrease in accounts receivable: 4.2\n- Increase in inventories: 5.4\n- Increase in accounts payable: 4.5\n- Capital expenditures: 7.3\n- Proceeds from sale of stock are not included in FCFE calculations\n\nHere is the corresponding Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 45.8\n    depreciation = 18.2\n    loss_on_sale_of_equipment = 1.6\n    decrease_accounts_receivable = 4.2\n    increase_inventories = 5.4\n    increase_accounts_payable = 4.5\n    capital_expenditures = 7.3\n\n    # Calculate changes in working capital\n    changes_in_working_capital = -decrease_accounts_receivable + increase_inventories - increase_accounts_payable\n\n    # Do math calculation to get the answer\n    free_cash_flow_to_equity = net_income + depreciation + loss_on_sale_of"
        ]
    },
    {
        "tables": [
            "|                                   |                 |\n|-----------------------------------|-----------------|\n| Oakstar Timber Balance Sheet (Year Ended 31 December 2008) |        |\n|        **Assets**                    |                 |\n| Cash                                | $500,000        |\n| Inventory                           | $25,000         |\n| Accounts receivable                 | $50,000         |\n| Plant and equipment (cost less depreciation) | $750,000      |\n| Land                                | $10,000,000     |\n| **Total assets**                    | $11,325,000     |\n|       **Liabilities and Equity**   |                 |\n| Accounts payables                   | $75,000         |\n| Long-term bank loan                 | $1,500,000      |\n| Common stock                        | $9,750,000      |\n| **Total liabilities and equity**   | $11,325,000     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-441",
        "python_solution": "",
        "ground_truth": null,
        "question": "The primary asset of the company Cedarstar consists of 10,000 hectares of timberland in western Canada, containing both new and mature Douglas fir trees. As of December 31, 2008, Cedarstar's financial details are as follows with additional data collected by Johnson regarding the recent sales of similar timberland properties in western Canada. For pieces of land possessing the same characteristics as Cedarstar, the going rate is $8,750 per hectare. Using these details and an asset-based approach, what is the net worth (after deducting any liabilities) of Cedarstar?",
        "output": [
            " Certainly! Below is the Python program to calculate the net worth of Cedarstar using the asset-based approach:\n\n```python\ndef solution():\n    # Define variables name and value\n    hectares_of_timberland = 10000\n    value_per_hectare = 8750\n    accounts_payables = 75000\n    long_term_bank_loan = 1500000\n\n    # Calculate the total value of the timberland\n    total_value_of_timberland = hectares_of_timberland * value_per_hectare\n\n    # Calculate total liabilities\n    total_liabilities = accounts_payables + long_term_bank_loan\n\n    # Calculate net worth (assets - liabilities)\n    net_worth = total_value_of_timberland - total_liabilities\n\n    # return answer\n    return net_worth\n\n# Calling the function to get the net worth\nprint(solution())\n```\n\nThis program calculates the net worth of Cedarstar by first determining the total value of the timberland based on the given rate per hectare. Then it sums up the company's liabilities and subtracts them from the total value of the timberland to get the net worth. The result is then returned and printed."
        ]
    },
    {
        "tables": [
            "| 2012 | 2013 | 2014 | 2015 | 2016 | 2017 |\n|------|------|------|------|------|------|\n| 10%  | 15%  | -8%  | 12%  | -6%  | 8%   |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-442",
        "python_solution": "",
        "ground_truth": null,
        "question": "Calculate the arithmetic mean return for the stock of Boulder Corporation, according to the given table showcasing their annual stock returns.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [0.10, 0.15, -0.08, 0.12, -0.06, 0.08]\n\n    # Do math calculation to get the answer\n    arithmetic_mean = sum(returns) / len(returns)\n\n    # return answer\n    return arithmetic_mean\n```\n\nThis program defines a list of the annual stock returns and then calculates their arithmetic mean. The arithmetic mean is the sum of all the returns divided by the number of returns. The function returns this calculated mean."
        ]
    },
    {
        "tables": [
            "| Bond | Par Value Owned | Market Value Owned | Duration |\n|------|-----------------|-------------------|--------- |\n| A    | $8,000,000     | $12,000,000       | 3       |\n| B    | $8,000,000     | $6,000,000        | 7       |\n| C    | $4,000,000     | $6,000,000        | 6       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-443",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio manager possesses the following three bonds, all of which are free of options and carry the specified durations. What is the duration of the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bond_a_market_value = 12000000\n    bond_b_market_value = 6000000\n    bond_c_market_value = 6000000\n\n    bond_a_duration = 3\n    bond_b_duration = 7\n    bond_c_duration = 6\n\n    # Calculate the weight of each bond\n    total_market_value = bond_a_market_value + bond_b_market_value + bond_c_market_value\n    bond_a_weight = bond_a_market_value / total_market_value\n    bond_b_weight = bond_b_market_value / total_market_value\n    bond_c_weight = bond_c_market_value / total_market_value\n\n    # Calculate the weighted average duration of the portfolio\n    portfolio_duration = (\n        bond_a_weight * bond_a_duration +\n        bond_b_weight * bond_b_duration +\n        bond_c_weight * bond_c_duration\n    )\n\n    # return answer\n    return portfolio_duration\n```\n\nThis Python program calculates the duration of the portfolio by computing the weighted average of the durations of the individual bonds based on their market values."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-444",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three years ago, Hamilton Insurance Company launched a fixed-rate perpetual preferred stock and it was privately distributed among institutional investors. The stock was dispensed at $25 per share with a dividend of $1.75. Today, if the firm were to issue preferred stock, the yield would be 6.5 percent. So, what is the present value of the stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_price = 25\n    dividend = 1.75\n    current_yield = 0.065\n\n    # Do math calculation to get the answer\n    present_value = dividend / current_yield\n\n    # return answer\n    return present_value\n```\n\nIn this script, we define the original price of the stock, the dividend per share, and the current yield. We then use these values to calculate the present value of the stock using the formula \\( \\text{Present Value} = \\frac{\\text{Dividend}}{\\text{Current Yield}} \\). The function returns the calculated present value."
        ]
    },
    {
        "tables": [
            "|  | Maturity (Years) |  |  |  |\n|---|---|---|---|---|\n|  | 1 | 2 | 3 | 4 |\n| Government spot rate | 2.25% | 2.70% | 3.30% | 4.05% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-445",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer purchases a lesser-quality, two-year corporate bond that has a coupon rate of 4.15%. The exhibit underneath displays the Government Spot Rates. The Z-Spreads for this corporate bond is at 0.65%. The bond is possibly trading at a price of:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.0415  # Convert percentage to decimal\n    face_value = 1000     # Face value of the bond\n    z_spread = 0.0065     # Z-Spread in decimal\n    time_until_maturity = 2 # Time until maturity in years\n\n    # Government spot rates\n    spot_rates = [0.0225, 0.0270, 0.0330, 0.0405]\n\n    # Calculate the present value of the bond using the spot rates and Z-Spread\n    total_pv_coupon = 0\n    for t in range(1, time_until_maturity + 1):\n        discount_rate = spot_rates[t - 1] + z_spread\n        coupon_payment = face_value * coupon_rate\n        total_pv_coupon += coupon_payment / (1 + discount_rate) ** t\n\n    total_pv_face_value = face_value / (1 + spot_rates[time_until_maturity - 1] + z_spread) ** time_until_maturity\n\n    # Calculate the bond price\n    bond_price = total_pv_coupon + total_pv_face_value\n\n    # return answer\n    return bond_price\n\n# Call the solution function and print the result\nprint(solution())\n```\nThis Python program defines a function called `solution` that calculates the price of a two-year corporate bond with a coupon rate of 4.15%, using the government spot rates and a Z-spread of 0.65%. The program calculates the present value of the coupon payments and the face value of the bond, then adds them together to obtain the bond price. The final bond price is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-446",
        "python_solution": "",
        "ground_truth": null,
        "question": "The formula: Qod = 3 - 0.05P0 + 0.009I - 0.16Pt represents a person's demand for onions: with Qod being the demanded quantity of onions, P0 represents the cost per pound of onions, I symbolizes the household income, and Pt indicates the price per pound of tomatoes. Considering a case where the cost of onions is $1.25 per pound, the income of the household is $2,500, and tomatoes are priced at $3.75 per pound, what would be the cross-price elasticity of demand concerning the price of tomatoes for this person's onion demand?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P0 = 1.25\n    I = 2500\n    Pt = 3.75\n\n    # Calculate the initial quantity demanded (Qod_initial)\n    Qod_initial = 3 - 0.05 * P0 + 0.009 * I - 0.16 * Pt\n\n    # Calculate the new quantity demanded after a 1% increase in the price of tomatoes\n    Pt_increase = Pt * 1.01\n    Qod_new = 3 - 0.05 * P0 + 0.009 * I - 0.16 * Pt_increase\n\n    # Calculate the percentage change in quantity demanded\n    percentage_change_Qod = ((Qod_new - Qod_initial) / Qod_initial) * 100\n\n    # Calculate the cross-price elasticity of demand\n    cross_price_elasticity = percentage_change_Qod / 1\n\n    # return answer\n    return cross_price_elasticity\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-447",
        "python_solution": "",
        "ground_truth": null,
        "question": "After deciding to sell off its non-core assets, experts forecast that the standard deviation of returns for Dell Inc. will increase to 30% and its correlation with the market portfolio will stay the same at 0.8. The risk-free rate and the market risk premium are predicted to stay at 6% and 8% respectively. However, the market portfolio's standard deviation of returns is anticipated to drop to 15%. What is the projected return for the company after the restructuring?",
        "output": [
            " Certainly! To create a Python program that answers the given financial question, we need to use the Capital Asset Pricing Model (CAPM) formula:\n\n\\[ E(R_i) = R_f + \\beta_i (E(R_m) - R_f) \\]\n\nwhere:\n- \\( E(R_i) \\) is the expected return on the investment,\n- \\( R_f \\) is the risk-free rate,\n- \\( \\beta_i \\) is the beta of the investment,\n- \\( E(R_m) \\) is the expected return on the market,\n- \\( E(R_m) - R_f \\) is the market risk premium.\n\nThe beta (\\( \\beta_i \\)) is calculated as:\n\n\\[ \\beta_i = \\frac{\\text{Covariance}(R_i, R_m)}{\\text{Variance}(R_m)} \\]\n\nwhere:\n- \\(\\text{Covariance}(R_i, R_m) = \\text{Correlation}(R_i, R_m) \\times \\sigma_i \\times \\sigma_m \\),\n- \\(\\text{Variance}(R_m) = \\sigma_m^2 \\).\n\nGiven:\n- \\( \\sigma_i = 30\\% \\) (standard deviation of Dell Inc. returns),\n- \\( \\rho_{i,m} = 0.8 \\) (correlation of Dell Inc. with the market),\n- \\( R_f = 6\\% \\) (risk-free rate),\n- \\( E(R_m) - R_f = 8\\% \\) (market risk premium),\n- \\( \\sigma_m = 15\\% \\) (standard deviation of the market portfolio returns).\n\nFirst, calculate the beta of Dell Inc. Then, use CAPM to find the projected return. Here's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    sigma_i = 0.30  # Standard deviation of Dell Inc. returns\n    rho_i_m = 0.8   # Correlation of Dell Inc. with the market\n    R_f ="
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-448",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the spot rate for 4 years is at 5% and for 2 years it's at 3.7%, what would be the forward rate for 2 years starting from 2 years in the future?",
        "output": [
            " Certainly! To compute the forward rate for 2 years starting from 2 years in the future, you need to use the information given about the spot rates for 2 years and 4 years.\n\nThe formula to be used is:\n\n\\[ (1 + r_{4})^{4} = (1 + r_{2})^{2} \\times (1 + f)^{2} \\]\n\nWhere:\n- \\( r_{4} \\) is the 4-year spot rate\n- \\( r_{2} \\) is the 2-year spot rate\n- \\( f \\) is the 2-year forward rate starting from 2 years in the future.\n\nHere's the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    r_4 = 0.05  # 4-year spot rate (as a decimal)\n    r_2 = 0.037  # 2-year spot rate (as a decimal)\n\n    # Do math calculation to get the answer\n    term_4 = (1 + r_4) ** 4\n    term_2 = (1 + r_2) ** 2\n\n    forward_term = term_4 / term_2\n    forward_rate = (forward_term ** (1/2)) - 1\n\n    # Return answer as a percentage\n    answer = forward_rate * 100\n\n    return answer\n```\n\nYou can call this function to get the forward rate as a percentage."
        ]
    },
    {
        "tables": [
            "|                       | Year 1 | Year 2 | Year 3 |\n|-----------------------|--------|--------|--------|\n| Bt-1                  | $28.25 |        |        |\n| EPS                   | $6.50  | $7.82  | $6.93  |\n| Dividends per share   | $1.75  | $2.63  | $1.97  |\n| Long-term ROE         | 14.5%  | 14.5%  | 14.5%  |\n| Constant long-term growth | 5.5%   | 5.5%   | 5.5%   |\n| Cost of equity        | 10.9%  | 10.9%  | 10.9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-449",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is examining Company N utilizing the multistage residual income model. He has projected that the residual income per share will remain unchanged from year 3 onwards forever and the short-term ROE exceeds the long-term ROE. He has also calculated the profits and dividends for the upcoming three years as shown in the table below. What is the intrinsic value of Company N?",
        "output": [
            " Certainly! To calculate the intrinsic value of Company N using the multistage residual income model, we need to consider the residual income per share for the first few years and the constant growth thereafter. We'll use the provided values for EPS, dividends per share, long-term ROE, constant long-term growth, and cost of equity.\n\nHere is the program to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    Bt_1 = 28.25             # Book value per share at the beginning of Year 1\n    EPS_Year1 = 6.50         # Earnings per share in Year 1\n    EPS_Year2 = 7.82         # Earnings per share in Year 2\n    EPS_Year3 = 6.93         # Earnings per share in Year 3\n    DPS_Year1 = 1.75         # Dividends per share in Year 1\n    DPS_Year2 = 2.63         # Dividends per share in Year 2\n    DPS_Year3 = 1.97         # Dividends per share in Year 3\n    long_term_ROE = 0.145    # Long-term Return on Equity (ROE)\n    cost_of_equity = 0.109   # Cost of equity (required rate of return)\n    g = 0.055                # Constant long-term growth rate\n\n    # Calculate Bt for each year\n    Bt_2 = Bt_1 + EPS_Year1 - DPS_Year1\n    Bt_3 = Bt_2 + EPS_Year2 - DPS_Year2\n    Bt_4 = Bt_3 + EPS_Year3 - DPS_Year3\n\n    # Calculate residual income per share for each year\n    RIP1 = EPS_Year1 - cost_of_equity * Bt_1\n    RIP2 = EPS_Year2 - cost_of_equity * Bt_2\n    RIP3 = EPS_Year3 - cost_of_equity * Bt_3\n\n"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-450",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, a large corporation acquired all 600,000 shares of a smaller corporation, priced at $25 per share. The smaller corporation had recognized net assets worth $6.5 million prior to being acquired. The larger corporation determined that the smaller corporation's fair value had appreciated by $3 million. What should be the 'goodwill' amount reported by the larger corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shares_acquired = 600000\n    price_per_share = 25\n    recognized_net_assets = 6500000\n    fair_value_appreciation = 3000000\n\n    # Do math calculation to get the answer\n    purchase_price = shares_acquired * price_per_share\n    net_assets_after_appreciation = recognized_net_assets + fair_value_appreciation\n    goodwill = purchase_price - net_assets_after_appreciation\n\n    # return answer\n    return goodwill\n```\n\nHere's the complete Python program to calculate the goodwill amount:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_acquired = 600000\n    price_per_share = 25\n    recognized_net_assets = 6500000\n    fair_value_appreciation = 3000000\n\n    # Do math calculation to get the answer\n    purchase_price = shares_acquired * price_per_share\n    net_assets_after_appreciation = recognized_net_assets + fair_value_appreciation\n    goodwill = purchase_price - net_assets_after_appreciation\n\n    # return answer\n    return goodwill\n\n# Call the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-451",
        "python_solution": "",
        "ground_truth": null,
        "question": "Analyst Johnson is employing a GARCH(1,1) model to calculate daily variance on daily returns(rt) : ht:=\u03b10 + \u03b11r2t-1 + \u03b2ht-1 while \u03b10 = 0.000003 \u03b11 = 0.03 \u03b2 = 0.94. Can you provide the estimate for the long-run annualized volatility (taking into consideration that volatility increases by the square root of time and there are 252 trading days in a year)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    alpha_0 = 0.000003\n    alpha_1 = 0.03\n    beta = 0.94\n    trading_days_in_a_year = 252\n\n    # Do math calculation to get the answer\n    long_run_variance = alpha_0 / (1 - alpha_1 - beta)\n    long_run_volatility = long_run_variance ** 0.5\n    annualized_volatility = long_run_volatility * (trading_days_in_a_year ** 0.5)\n\n    # return answer\n    return annualized_volatility\n```"
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-452",
        "python_solution": "",
        "ground_truth": null,
        "question": "The arithmetic mean annual return for a fund managed by John for year 1,2,3 will be:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    return1 = 0.12\n    return2 = 0.05\n    return3 = 0.01\n\n    # Do math calculation to get the answer\n    arithmetic_mean_return = (return1 + return2 + return3) / 3\n\n    # return answer\n    return arithmetic_mean_return\n\n# Example usage:\n# arithmetic_mean = solution()\n# print(f\"The arithmetic mean annual return is: {arithmetic_mean * 100:.2f}%\")\n```\n\nThis program calculates the arithmetic mean annual return for the fund managed by John for years 1, 2, and 3, based on the provided returns for each year. The `solution` function will return the arithmetic mean return as a value, which can then be used or displayed as needed."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-453",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data that Roberts Inc. (RI) announced an accounts receivable of $66 million at the end of its second fiscal quarter, and $55 million at the conclusion of its third fiscal quarter, with revenues reported to be $72 million during that quarter. What is the amount of cash RI received from clients during the third fiscal quarter?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    end_of_second_quarter_receivables = 66000000\n    end_of_third_quarter_receivables = 55000000\n    revenue_third_quarter = 72000000\n\n    # Do math calculation to get the answer\n    cash_received_from_clients = (\n        end_of_second_quarter_receivables +\n        revenue_third_quarter -\n        end_of_third_quarter_receivables\n    )\n\n    # return answer\n    return cash_received_from_clients\n```\n\nExplanation:\n- The cash received from clients during the third fiscal quarter can be determined by the difference between the total amount billed to clients (accounts receivable at the beginning of the quarter + revenue during the quarter) and the accounts receivable at the end of the quarter.\n- Thus, the formula used in the calculation is:\n  \\[\n  \\text{Cash received from clients} = (\\text{Accounts receivable at the end of second quarter} + \\text{Revenue in third quarter}) - \\text{Accounts receivable at the end of third quarter}\n  \\]\n- Plugging in the given values gives the required amount."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-454",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financial institution has total interest costs of 65 million, total raised funds of 1000 million with 750 million of it being earning assets, and other operating costs of 10 million, and the current tax rate is 35%, taking into account that shareholders have invested 100 million with an expected return rate of 12%, what is the weighted average total cost of capital according to the historical average cost methodology?",
        "output": [
            " Sure, here is the Python program to calculate the weighted average total cost of capital according to the historical average cost methodology based on the given information:\n\n```python\ndef solution():\n    # Define variables and values\n    total_interest_costs = 65_000_000\n    total_raised_funds = 1_000_000_000\n    earning_assets = 750_000_000\n    other_operating_costs = 10_000_000\n    tax_rate = 0.35\n    shareholder_investment = 100_000_000\n    expected_return_rate = 0.12\n\n    # Calculate the cost of debt\n    cost_of_debt = (total_interest_costs / (total_raised_funds - shareholder_investment)) * (1 - tax_rate)\n\n    # Calculate the cost of equity\n    cost_of_equity = expected_return_rate\n\n    # Calculate weights\n    weight_of_debt = (total_raised_funds - shareholder_investment) / total_raised_funds\n    weight_of_equity = shareholder_investment / total_raised_funds\n\n    # Calculate the weighted average cost of capital (WACC)\n    wacc = (weight_of_debt * cost_of_debt) + (weight_of_equity * cost_of_equity)\n\n    # Return the answer\n    return wacc\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The weighted average total cost of capital is: {answer:.4f}\")\n```\n\nThis program defines the variables with the given values, calculates the cost of debt and equity, determines their respective weights, and then computes the weighted average cost of capital (WACC) according to the historical average cost methodology."
        ]
    },
    {
        "tables": [
            "|                                                 |         |\n|-------------------------------------------------|---------|\n| Exhibit 3. Selected Financial Data for Topmaker, Inc. ,Estimated Year Ending 31 December 2017 ($ millions) |         |\n| Carrying value of cash-generating unit/reporting unit  | 15,200 |\n| Recoverable amount of cash-generating unit/reporting unit  | 14,900 |\n| Fair value of reporting unit       | 14,800 |\n| Identifiable net assets            | 14,400 |\n| Goodwill                           | 520    |"
        ],
        "topic": "Accounting",
        "question_id": "test-455",
        "python_solution": "",
        "ground_truth": null,
        "question": "Thomas Brooks, a research analyst in a global securities firm, is crafting a research summary on Megacreator, Inc., a company that adheres to IFRS and is publicly traded. On 1 January 2016, Megacreator bought a 15% stake in Brewster Co., holding voting rights, for $300 million. Megacreator maintains a seat at the Brewster board of directors table and has a say in policy decisions. Brooks is anxious about the potential impact of goodwill impairment due to anticipated industry shifts set to take place late in 2017. He computes the impairment loss using the predicted consolidated balance sheet data depicted in Exhibit 3, assuming that Megacreator's cash-generating unit and reporting unit are identical. According to Exhibit 3, the IFRS impairment loss for Megacreator is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 15200  # in millions\n    recoverable_amount = 14900  # in millions\n\n    # Do math calculation to get the answer\n    impairment_loss = carrying_value - recoverable_amount\n\n    # return answer\n    return impairment_loss\n```\n\nTo compute the impairment loss for Megacreator using the data from Exhibit 3, we need to calculate the difference between the carrying value and the recoverable amount of the cash-generating unit. This Python program achieves that by defining the relevant variables and performing the necessary subtraction to determine the impairment loss."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-456",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the total revenue generated by the hedge fund company, Bearing, this year, considering it had $288 million in assets under management (AUM) at the end of the previous year, a 2% management fee (based on year-end AUM), 20% incentive fee calculated after the management fee, a 5% soft hurdle rate, and a high-water mark of $357 million, and its fund return for the current year is 25%?",
        "output": [
            " Sure! Below is the Python program to calculate the total revenue generated by the hedge fund company, Bearing, this year, based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    AUM = 288000000  # Assets under management at the end of the previous year in dollars\n    management_fee_rate = 0.02  # Management fee rate\n    incentive_fee_rate = 0.20  # Incentive fee rate\n    hurdle_rate = 0.05  # Soft hurdle rate\n    high_water_mark = 357000000  # High-water mark in dollars\n    fund_return = 0.25  # Fund return for the current year\n\n    # Calculate the management fee\n    management_fee = AUM * management_fee_rate\n\n    # Calculate the fund value at the end of the current year\n    fund_value_end = AUM * (1 + fund_return)\n\n    # Calculate the gain over the high-water mark\n    gain_over_high_water_mark = fund_value_end - high_water_mark\n\n    # Check if the gain over the high-water mark exceeds the hurdle rate\n    if gain_over_high_water_mark > AUM * hurdle_rate:\n        excess_return = gain_over_high_water_mark - (AUM * hurdle_rate)\n    else:\n        excess_return = 0\n\n    # Calculate the incentive fee\n    incentive_fee = excess_return * incentive_fee_rate\n\n    # Calculate the total revenue\n    total_revenue = management_fee + incentive_fee\n\n    # return answer\n    return total_revenue\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program will calculate the total revenue generated by Bearing this year according to the provided parameters. You can run this script to obtain the answer."
        ]
    },
    {
        "tables": [
            "| Bond | Maturity | Market Value Price | Coupon | Yield-to-Maturity | Modified Duration |\n|------|----------|--------------------|--------|-------------------|-------------------|\n| A    | 6 years  | 170,000            | 2.00%  | 4.95%             | 5.42              |\n| B    | 10 years | 120,000            | 2.40%  | 4.99%             | 8.44              |\n| C    | 15 years | 100,000            | 5.00%  | 5.00%             | 10.38             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-457",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming annual coupon payments and no accrued interest, a collection of bonds includes the following three fixed-rate bonds. Prices are given per 100 of par value. What is the modified duration of this bond portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bond_a_value = 170000\n    bond_b_value = 120000\n    bond_c_value = 100000\n\n    bond_a_duration = 5.42\n    bond_b_duration = 8.44\n    bond_c_duration = 10.38\n\n    # Calculate the total value of the bond portfolio\n    total_value = bond_a_value + bond_b_value + bond_c_value\n\n    # Calculate the weighted average of the modified durations\n    weighted_duration = (bond_a_value / total_value * bond_a_duration +\n                         bond_b_value / total_value * bond_b_duration +\n                         bond_c_value / total_value * bond_c_duration)\n\n    # Return the weighted average modified duration as the answer\n    return weighted_duration\n```\n\nYou can run the `solution` function to get the modified duration of the bond portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-458",
        "python_solution": "",
        "ground_truth": null,
        "question": "How many shares should be accounted for when calculating the diluted EPS under these circumstances? There are 500,000 shares in circulation. Plus, there are 200,000 exercisable warrants at $42 per share. The average share price stands at $45 while the share price at the end of the year is $50.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shares_in_circulation = 500000\n    exercisable_warrants = 200000\n    warrant_exercise_price = 42\n    average_share_price = 45\n    end_of_year_share_price = 50\n\n    # Do math calculation to get the answer\n    additional_shares_from_warrants = 0\n    if average_share_price > warrant_exercise_price:\n        additional_shares_from_warrants = exercisable_warrants\n\n    total_shares_for_diluted_EPS = shares_in_circulation + additional_shares_from_warrants\n\n    # return answer\n    return total_shares_for_diluted_EPS\n```\n\nIn this program:\n1. We first define the variables for the number of shares already in circulation, the exercisable warrants, the exercise price of warrants, and the market prices.\n2. Then, we check if the average share price is greater than the warrant exercise price. If it is, those warrants would be considered exercisable and therefore dilutive, so we add them to the number of shares.\n3. Finally, we calculate the total number of shares to be used for calculating the diluted EPS and return that value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-459",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, Corporation A announced: Net earnings $50,000, Weighted average of ordinary shares 6,000, Convertible privileged shares 1,000 (Each of these privileged shares can be converted into 3 ordinary shares) preferred dividends are $0.2 per share. What will be the diluted EPS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_earnings = 50000\n    weighted_average_ordinary_shares = 6000\n    convertible_privileged_shares = 1000\n    conversion_rate = 3\n    preferred_dividends_per_share = 0.2\n\n    # Calculate the potential dilution from convertible privileged shares\n    potential_dilution = convertible_privileged_shares * conversion_rate\n\n    # Calculate the total preferred dividends\n    total_preferred_dividends = convertible_privileged_shares * preferred_dividends_per_share\n\n    # Calculate the earnings available to common shareholders\n    earnings_available_to_common_shareholders = net_earnings - total_preferred_dividends\n\n    # Calculate the total number of shares after potential dilution\n    total_shares_after_dilution = weighted_average_ordinary_shares + potential_dilution\n\n    # Calculate the diluted EPS\n    diluted_eps = earnings_available_to_common_shareholders / total_shares_after_dilution\n\n    # return answer\n    return diluted_eps\n```\n\nThis program calculates the diluted EPS based on the given data and the formulas for diluted earnings per share. The function `solution` performs the necessary calculations and returns the diluted EPS."
        ]
    },
    {
        "tables": [
            "| Stock price per share | $60.75 |\n|-----------------------|--------|\n| Comprehensive income (millions) | $193.0 |\n| Other comprehensive income (millions) | $87.6 |\n| Common shares outstanding (millions) | 46.5 |"
        ],
        "topic": "Accounting",
        "question_id": "test-460",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the existing data on the corporation, what is its P/E on a net income basis?",
        "output": [
            " Sure, here is the Python program to calculate the P/E ratio on a net income basis:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_price_per_share = 60.75\n    comprehensive_income = 193.0  # in millions\n    common_shares_outstanding = 46.5  # in millions\n\n    # Calculate net income\n    net_income = comprehensive_income - other_comprehensive_income\n\n    # Calculate EPS (Earnings Per Share)\n    eps = net_income / common_shares_outstanding\n\n    # Calculate P/E ratio\n    pe_ratio = stock_price_per_share / eps\n\n    # Return answer\n    return pe_ratio\n\n# Define the other comprehensive income as it's used but not defined in the table\nother_comprehensive_income = 87.6  # in millions\n\n# Run the solution\npe_ratio = solution()\nprint(f\"The P/E ratio on a net income basis is: {pe_ratio:.2f}\")\n```\n\nYou can run this Python program to get the P/E ratio based on the provided data. The program first calculates the net income by subtracting other comprehensive income from the comprehensive income, then calculates the EPS (Earnings Per Share), and finally the P/E ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-461",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there are 250 trading days in a year and the portfolio returns are independent and follow the same normal distribution with zero mean, what is the estimated yearly VaR at the 95% confidence level for a local credit union's investment securities portfolio that has a current market value of USD 3,700,000 with a daily variance of 0.0004?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_market_value = 3700000\n    daily_variance = 0.0004\n    trading_days = 250\n    confidence_level = 0.95\n\n    # Calculate the daily VaR at the 95% confidence level\n    import scipy.stats as stats\n    z_score = stats.norm.ppf(1 - confidence_level)\n    daily_volatility = daily_variance ** 0.5\n    daily_var = -z_score * daily_volatility * current_market_value\n\n    # Calculate the yearly VaR\n    yearly_var = daily_var * (trading_days ** 0.5)\n\n    return yearly_var\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program calculates the yearly Value at Risk (VaR) at the 95% confidence level for a portfolio with a given market value and daily variance, given that the returns are normally distributed with zero mean. The program uses the norm.ppf function from the scipy.stats module to find the required z-score for the confidence level, computes the daily volatility from the daily variance, the daily VaR from the daily volatility and the market value, and finally the yearly VaR by scaling the daily VaR by the square root of the number of trading days."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-462",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current worth of a portfolio is $89.32, and its anticipated value after 1 year is $100. What is the rate of return for this portfolio when compounded continuously?",
        "output": [
            " Sure! To calculate the rate of return for a portfolio compounded continuously, we can use the formula for continuous compounding:\n\n\\[ P_0 e^{(r \\cdot t)} = P_1 \\]\n\nwhere:\n- \\( P_0 \\) is the initial value of the portfolio.\n- \\( P_1 \\) is the future value of the portfolio.\n- \\( r \\) is the continuous compounding rate of return.\n- \\( t \\) is the time in years.\n- \\( e \\) is Euler's number.\n\nRearranging the formula to solve for \\( r \\):\n\n\\[ e^{(r \\cdot t)} = \\frac{P_1}{P_0} \\]\n\n\\[ r \\cdot t = \\ln\\left(\\frac{P_1}{P_0}\\right) \\]\n\n\\[ r = \\frac{\\ln\\left(\\frac{P_1}{P_0}\\right)}{t} \\]\n\nHere is the Python program to calculate the continuous compounding rate of return:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    initial_value = 89.32\n    future_value = 100\n    time_period = 1  # in years\n\n    # Do math calculation to get the answer\n    rate_of_return = math.log(future_value / initial_value) / time_period\n\n    # return answer\n    return rate_of_return\n```\n\nThis Python program first imports the `math` module to use the natural logarithm function `math.log`. It then defines the initial and future values of the portfolio, as well as the time period. It calculates the rate of return using the formula for continuous compounding and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-463",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the annual spot rate r(1) equals to 4% and the forward price for a one-year zero coupon bond starting in one year equals to 0.9434, then what is the present cost of a two-year zero-coupon bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.04   # Annual spot rate r(1)\n    F = 0.9434  # Forward price for a one-year zero-coupon bond starting in one year\n\n    # Do math calculation to get the answer\n    P_2year = F / (1 + r1)\n\n    # return answer\n    return P_2year\n```\n\nThis Python program calculates the present cost of a two-year zero-coupon bond using the given annual spot rate \\( r(1) \\) and the forward price for a one-year zero-coupon bond starting in one year. The key steps involve defining the variables, performing the necessary calculation, and returning the result."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| 1 | 16 | 20 |\n| 2 | 12 | 20 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-464",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the anticipated standard deviation of an equal-weighted portfolio made by an investment analyst, if the correlation of returns between the two securities is -0.15?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    return_1 = 0.16\n    return_2 = 0.12\n    std_dev_1 = 0.20\n    std_dev_2 = 0.20\n    correlation = -0.15\n\n    # Do math calculation to get the answer\n    portfolio_std_dev = (\n        (0.5**2 * std_dev_1**2) +\n        (0.5**2 * std_dev_2**2) +\n        (2 * 0.5 * 0.5 * std_dev_1 * std_dev_2 * correlation)\n    ) ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n\n# Run the solution to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Comparable Companies | Tax Rate (%) | Debt/Equity | Equity Beta |\n| -------------------- | ------------ | ----------- | ----------- |\n| Private company      | 30.0         | 1.00        | N.A.        |\n| Public company       | 35.0         | 0.90        | 1.75        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-465",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the projected equity beta for a private firm using the pure-play approach and the data obtained from its publicly traded rival?",
        "output": [
            " Sure, let's create a Python program to calculate the projected equity beta for the private firm using the pure-play approach and the data provided. The pure-play approach involves leveraging the equity beta of a comparable public company and adjusting for differences in capital structure.\n\nThe formula to adjust the equity beta (\u03b2_E) for differences in leverage is:\n\\[ \\beta_U = \\frac{\\beta_E}{1 + \\left(1 - T_c \\right) \\cdot \\frac{D}{E}} \\]\n\\[ \\beta_A = \\frac{\\beta_E}{1 + \\left(1 - T_c \\right) \\cdot \\frac{D}{E}} \\]\n\\[ \\beta_{P} = \\beta_A \\cdot \\left(1 + \\left(1 - T_p \\right) \\cdot \\frac{D_p}{E_p} \\right) \\]\n\nWhere:\n- \u03b2_U is the unlevered beta of the comparable public company.\n- \u03b2_E is the equity beta of the comparable public company.\n- \u03b2_A is the asset beta (unlevered beta).\n- \u03b2_P is the projected equity beta of the private firm.\n- T_c is the tax rate of the comparable public company.\n- T_p is the tax rate of the private company.\n- D/E is the debt-to-equity ratio of the comparable public company.\n- D_p/E_p is the debt-to-equity ratio of the private firm.\n\nBelow is the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    equity_beta_public = 1.75\n    tax_rate_public_company = 0.35\n    debt_to_equity_public_company = 0.90\n\n    tax_rate_private_company = 0.30\n    debt_to_equity_private_company = 1.00\n\n    # Do math calculation to get the answer\n    unlevered_beta = equity_beta_public / (1 + (1 - tax_rate_public_company) * debt_to_equity_public_company)\n    projected_equity_beta = un"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-466",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment manager is looking to build a bull spread utilizing call options. A strike price of $50 costs $8 and a strike price of $60 costs $2. Both these calls mature in a month and have the same underlying, currently valued at $55. What is the breakeven underlying price?",
        "output": [
            " To solve the problem of finding the breakeven underlying price for a bull spread utilizing call options, we need to calculate the net cost of the options and then the breakeven price.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    strike_price_low = 50\n    strike_price_high = 60\n    cost_low_strike = 8\n    cost_high_strike = 2\n    underlying_price = 55\n\n    # Do math calculation to get the answer\n    net_cost = cost_low_strike - cost_high_strike\n    breakeven_price = strike_price_low + net_cost\n\n    # return answer\n    return breakeven_price\n```\n\nExplanation:\n1. **Define Variables:**\n   - `strike_price_low` is the lower strike price of the call option ($50).\n   - `strike_price_high` is the higher strike price of the call option ($60).\n   - `cost_low_strike` is the cost of the lower strike price call option ($8).\n   - `cost_high_strike` is the cost of the higher strike price call option ($2).\n   - `underlying_price` is the current price of the underlying asset ($55).\n\n2. **Math Calculation:**\n   - Calculate the net cost of the options: `net_cost = cost_low_strike - cost_high_strike`.\n   - Calculate the breakeven price: `breakeven_price = strike_price_low + net_cost`.\n\n3. **Return Answer:**\n   - The value returned is the breakeven underlying price.\n\nWhen executed, this function will give you the breakeven underlying price for the bull spread."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-467",
        "python_solution": "",
        "ground_truth": null,
        "question": "Last year, Corporation Z issued a dividend of $0.5. Earnings for this year are estimated to be $3.0. Assuming the desired payout ratio is 30%, and the dividend is adjusted over a 4-year term. What is the anticipated dividend for the current year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    last_year_dividend = 0.5\n    current_earnings = 3.0\n    payout_ratio = 0.3\n    adjustment_term = 4\n\n    # Do math calculation to get the answer\n    anticipated_dividend = last_year_dividend + ((current_earnings * payout_ratio) - last_year_dividend) / adjustment_term\n\n    # return answer\n    return anticipated_dividend\n\n# Call the function to get the answer\nsolution()\n```\n\nThis program computes the anticipated dividend for the current year by applying the given variables and their corresponding values based on the specified payout ratio and adjustment term. The result is returned as the output."
        ]
    },
    {
        "tables": [
            "| Product | Quantity Produced in 2012 | Quantity Produced in 2013 | Product Unit Prices in 2012 | Product Unit Prices in 2013 |\n|-------|-------------------------|-------------------------|---------------------------|---------------------------|\n| X     | 351.0                   | 352.0                   | 13.3                          | 13.8                          |\n| Y     | 179.0                   | 182.5                   | unknown                    | 11.1                          |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-468",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we take 2012 as the reference year for calculating GDP and the GDP deflator for the economic climate in 2013 is 102.4, what would be the unit cost of item B in 2012 in an economy consisting of two items, A and B, given the details below?",
        "output": [
            " Sure, let's create a Python program to solve the problem you've described. We need to calculate the unit cost of item Y (referred to as item B in your question) in 2012 using the given data.\n\nThe general approach is:\n1. Calculate the nominal GDP for 2012 and 2013.\n2. Use the GDP deflator to adjust the nominal GDP of 2013 to real terms (in 2012 prices).\n3. From the adjusted nominal GDP of 2013, derive the unit price of item Y in 2012.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    prod_x_2012 = 351.0\n    prod_x_2013 = 352.0\n    prod_y_2012 = 179.0\n    prod_y_2013 = 182.5\n    price_x_2012 = 13.3\n    price_x_2013 = 13.8\n    price_y_2013 = 11.1\n    gdp_deflator_2013 = 102.4\n\n    # Calculate nominal GDP for 2012\n    nominal_gdp_2012 = (prod_x_2012 * price_x_2012) + (prod_y_2012 * price_x_2012)  # Assuming price_y_2012 is unknown but equals to the price_x_2012 for simplicity\n\n    # Calculate nominal GDP for 2013\n    nominal_gdp_2013 = (prod_x_2013 * price_x_2013) + (prod_y_2013 * price_y_2013)\n\n    # Calculate real GDP for 2013\n    real_gdp_2013 = nominal_gdp_2013 / (gdp"
        ]
    },
    {
        "tables": [
            "|                             | 5-Year T-Note | 10-Year T-Note |\n|-----------------------------|---------------|----------------|\n| Yield to maturity           | 6.02%         | 6.41%          |\n| Modified duration           | 4.8           | 9.1            |\n| BPV per 100,000 in par value| 47.22         | 88.41          |\n| Conversion factor for cheapest-to-deliver | 0.88          | 0.90           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-469",
        "python_solution": "",
        "ground_truth": null,
        "question": "In addition to contemplating the implementation of financial instruments to control interest rate risk, Sullivan is also contemplating a fresh approach for Shoreline. Sullivan calculates how many bond futures are required to shield the company's total exposure to interest rate risk. The asset portfolio has a basis point value (BPV) of 96,000, while the liability portfolio's BPV is 44,000. Based on the extra data about bond futures that Sullivan has gathered in Exhibit 1, how many five-year note futures contracts need to be sold to readjust the immunizing portfolio?",
        "output": [
            " To determine the number of five-year note futures contracts required to adjust the immunizing portfolio, we need to calculate the net BPV exposure and then determine the number of contracts needed to hedge this exposure. Here's the Python program to solve this problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    asset_bpv = 96000\n    liability_bpv = 44000\n    net_bpv_exposure = asset_bpv - liability_bpv\n    bpv_per_contract_five_year_note = 47.22\n    conversion_factor = 0.88\n\n    # Do math calculation to get the answer\n    adjusted_bpv_per_contract = bpv_per_contract_five_year_note * conversion_factor\n    number_of_contracts = net_bpv_exposure / adjusted_bpv_per_contract\n\n    # return answer\n    return number_of_contracts\n\n# Example usage:\nprint(solution())\n```\n\nThis program calculates the net BPV exposure by subtracting the liability BPV from the asset BPV. It then adjusts the BPV per contract for the five-year note based on the conversion factor. Finally, it calculates the number of five-year note futures contracts needed to hedge the net BPV exposure."
        ]
    },
    {
        "tables": [
            "|                               |                               |                                           |                        |\n|-------------------------------|-------------------------------|-------------------------------------------|------------------------|\n| An individual consumer's demand for tea |                                               | Qdt=1, 800-40Pt+0.5/+150Pc                |                        |\n| Seller's supply of tea        |                                               | QSt=-516+350Pt-120W                        |                        |\n|                               |                               |                                           |                        |\n|                               |                               | **Legend and Initial Values**              | **Assumed Values**     |\n| ad t                          |               Quantity of tea |                                           |                        |\n| Pt                            | Price of tea per 100 grams    |                                           |                        |\n| I                             |       Household income        |                                           | \u00a32,400                 |\n| W                             | Hourly wage rate for labor    |                                           |                        |\n| Pc                            | Price of coffee per 100 grams |                                           | \u00a322.4                  |\n|                               | Equilibrium price of tea      |                                           | \u00a330.6                  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-470",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming there is a 2.5% rise in the income of the family while G and T remain constant, what would be the adjusted equilibrium quantity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_income = 2400\n    price_of_tea = 30.6\n    price_of_coffee = 22.4\n    income_increase_percent = 2.5\n\n    # Calculate the new income after a 2.5% increase\n    new_income = initial_income * (1 + income_increase_percent / 100)\n\n    # Define the initial demand and supply equations\n    demand_equation = lambda Pt, I: 1800 - 40 * Pt + 0.5 * I + 150 * price_of_coffee\n    supply_equation = lambda Pt, W: -516 + 350 * Pt\n\n    # Plug in the new income to the demand equation to find new demand (Qdt)\n    Qdt = demand_equation(price_of_tea, new_income)\n\n    # The supply equation is not affected by income, so Qst stays the same\n    Qst = supply_equation(price_of_tea, 0)  # W (Hourly wage rate for labor) is not provided, assumed to be irrelevant as it doesn\u2019t impact the supply equation derived.\n\n    # Assuming equilibrium quantity before the income increase\n    Q_equilibrium_before = Qdt\n\n    # Return the adjusted equilibrium quantity\n    return Qdt\n\n# Print the solution\nprint(solution())\n```\n\nExplanation:\n1. Define the initial values of income, prices, and the income increase percentage.\n2. Calculate the new income after the increase.\n3. Define the demand and supply equations as lambda functions.\n4. Compute the new demand (Qdt) using the updated income.\n5. Since the supply equation does not depend on income, it remains unaffected by the income change.\n6. Return the adjusted equilibrium quantity, which is the new demand (Qdt) after the income increase."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-471",
        "python_solution": "",
        "ground_truth": null,
        "question": "If you were to invest 1 million dollars in a financial product today with a stated annual interest rate of 6%, what would its value be three years from now considering it is compounded monthly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000\n    annual_interest_rate = 6 / 100  # Convert percentage to decimal\n    years = 3\n    compounding_periods_per_year = 12  # Monthly compounding\n\n    # Do math calculation to get the answer\n    amount = principal * (1 + (annual_interest_rate / compounding_periods_per_year)) ** (compounding_periods_per_year * years)\n\n    # return answer\n    return amount\n```\n\nHere's the complete Python program that calculates the future value of an investment with a compounded interest rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000\n    annual_interest_rate = 6 / 100  # Convert percentage to decimal\n    years = 3\n    compounding_periods_per_year = 12  # Monthly compounding\n\n    # Do math calculation to get the answer\n    amount = principal * (1 + (annual_interest_rate / compounding_periods_per_year)) ** (compounding_periods_per_year * years)\n\n    # return answer\n    return amount\n\n# Example usage\nfuture_value = solution()\nprint(f\"The future value of the investment is: ${future_value:.2f}\")\n```\n\nThe `solution` function calculates the future value of an investment given the principal amount, the annual interest rate, the number of years, and the compounding periods per year. The result is then printed in a formatted string."
        ]
    },
    {
        "tables": [
            "| Stock | Shares Outstanding | % Shares in Market Float | Beginning of Period Price | End of Period Price | Dividends Per Share |\n|-------|-------------------|--------------------------|---------------------------|---------------------|---------------------|\n| A     | 5,000             | 90                       | 40                        | 45                  | 1.00                |\n| B     | 2,000             | 100                      | 68                        | 60                  | 0.50                |\n| C     | 6,000             | 70                       | 60                        | 70                  | 1.50                |\n| D     | 4,000             | 40                       | 20                        | 24                  | 0.80                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-472",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we consider the initial value of the float-adjusted market-capitalization-weighted equity index to be 100, what would be the final value considering the data for four stocks in the index?",
        "output": [
            " Sure! To solve this problem, you need to calculate the value of the float-adjusted market-capitalization-weighted equity index at the beginning and the end of the period. Let's break down the steps:\n\n1. Calculate the float-adjusted market capitalization for each stock at the beginning and end of the period.\n2. Compute the total float-adjusted market capitalization at the beginning and end of the period.\n3. Compute the index values at the beginning and end of the period.\n4. Adjust the end index value to be comparable to the initial index value of 100.\n\nHere's the Python code to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    stocks = [\n        {\"shares\": 5000, \"float_pct\": 0.9, \"beg_price\": 40, \"end_price\": 45, \"dividends\": 1.00},\n        {\"shares\": 2000, \"float_pct\": 1.0, \"beg_price\": 68, \"end_price\": 60, \"dividends\": 0.50},\n        {\"shares\": 6000, \"float_pct\": 0.7, \"beg_price\": 60, \"end_price\": 70, \"dividends\": 1.50},\n        {\"shares\": 4000, \"float_pct\": 0.4, \"beg_price\": 20, \"end_price\": 24, \"dividends\": 0.80},\n    ]\n\n    initial_index_value = 100\n\n    # Calculate total float-adjusted market cap at the beginning of the period\n    float_adj_beg_market_cap = sum(\n        stock[\"shares\"] * stock[\"float_pct\"] * stock[\"beg_price\"] for stock in stocks\n    )\n\n    # Calculate total float-adjusted market cap at the end of the period\n    float_adj_end_market_cap = sum(\n        stock[\"shares\"] * stock[\"float_pct\"] * ("
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-473",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price elasticity of demand at the neighborhood fitness center if the membership fee is $35, given that their membership demand is dictated by the equation: Qdfc = 400 - 5 Pfc, with Qdfc representing the number of gym members and Pfc being the membership cost?",
        "output": [
            " Sure, let's break down the question and set up the variables accordingly:\n\n1. The membership demand \\( Q_{dfc} \\) is given by \\( Q_{dfc} = 400 - 5 P_{fc} \\).\n2. The membership fee \\( P_{fc} \\) is given as $35.\n\nFirst, we calculate the quantity demanded at \\( P_{fc} = $35 \\):\n\\[ Q_{dfc} = 400 - 5 \\times 35 \\]\n\\[ Q_{dfc} = 400 - 175 \\]\n\\[ Q_{dfc} = 225 \\]\n\nNext, we need to calculate the price elasticity of demand, which is given by the formula:\n\\[ \\text{Elasticity} = \\left( \\frac{\\Delta Q_{dfc}}{ \\Delta P_{fc}} \\right) \\times \\left( \\frac{P_{fc}}{Q_{dfc}} \\right) \\]\n\nSince we have the demand function \\( Q_{dfc} = 400 - 5 P_{fc} \\):\n\\[ \\Delta Q_{dfc} = -5 \\]\n\\[ \\Delta P_{fc} = 1 \\]\n\nPlugging these into the elasticity formula:\n\\[ \\text{Elasticity} = \\left( \\frac{-5}{1} \\right) \\times \\left( \\frac{35}{225} \\right) \\]\n\\[ \\text{Elasticity} = -5 \\times \\left( \\frac{35}{225} \\right) \\]\n\\[ \\text{Elasticity} = -5 \\times 0.1556 \\]\n\\[ \\text{Elasticity} = -0.7778 \\]\n\nThus, the price elasticity of demand is \\(-0.7778\\).\n\nNow let's translate this into a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    membership_fee = 35\n\n    # Calculate the quantity demanded at the given price\n    quantity_demanded = 400 - 5 * membership_fee\n\n    # Calculate the price elasticity of demand\n    price_el"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-474",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the true risk-free return rate is 3%, the anticipated inflation premium is 5% and the interest rate determined by the market for a certain investment is 12%, what is the total of the default risk premium, the liquidity premium, and the maturity premium for the investment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    inflation_premium = 0.05\n    market_interest_rate = 0.12\n\n    # Do math calculation to get the answer\n    additional_premiums = market_interest_rate - risk_free_rate - inflation_premium\n\n    # Return the answer, formatted as percentage if needed\n    return additional_premiums\n\n# Call the function to get the result\nresult = solution()\nprint(f\"The total of the default risk premium, the liquidity premium, and the maturity premium is: {result:.2%}\")\n```\n\nThis Python program calculates the combined total of the default risk premium, the liquidity premium, and the maturity premium based on the provided rates. The result is printed out as a percentage."
        ]
    },
    {
        "tables": [
            "| Buyer   | Bid Size (Number of shares) | Limit price($) | Offer size (Number of shares) | Seller   |\n|---------|-----------------------------|----------------|-------------------------------|----------|\n| Liam    | 7,000                       | 20.70          |                               |          |\n| Debbie  | 200                         | 20.88          |                               |          |\n| Philips | 400                         | 21.02          |                               |          |\n| Fiona   | 300                         | 21.89          |                               |          |\n|         |                             | 21.90          | 300                           | Kevin    |\n|         |                             | 22.01          | 1,300                         | Veronica |\n|         |                             | 22.06          | 1,500                         | Ethel    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-475",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine that a limit order is listed in the stock's order book. Let's say Alex placed a day order with a limit price of $20.87 and sold 1,000 shares, with no other investors placing a buy order after his was submitted. What would be the average price for Alex's transaction?",
        "output": [
            " Sure, let's define the variables and proceed to calculate the average price for Alex's transaction based on the given data.\n\nTo calculate the average price for Alex's transaction, we need to figure out how many shares would be sold at what prices to match up to Alex's 1,000 shares. We'll start with the buyer offering the highest price and work our way down until the total shares bought add up to 1,000.\n\nHere's the Python program that does this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    buyers = [\n        {\"name\": \"Liam\", \"bid_size\": 7000, \"limit_price\": 20.70},\n        {\"name\": \"Debbie\", \"bid_size\": 200, \"limit_price\": 20.88},\n        {\"name\": \"Philips\", \"bid_size\": 400, \"limit_price\": 21.02},\n        {\"name\": \"Fiona\", \"bid_size\": 300, \"limit_price\": 21.89},\n    ]\n\n    # Sort buyers by limit price in descending order\n    buyers.sort(key=lambda x: x['limit_price'], reverse=True)\n\n    shares_to_sell = 1000\n    total_sale_price = 0\n    shares_sold = 0\n\n    for buyer in buyers:\n        shares_bought = min(shares_to_sell - shares_sold, buyer[\"bid_size\"])\n        total_sale_price += shares_bought * buyer[\"limit_price\"]\n        shares_sold += shares_bought\n        if shares_sold >= shares_to_sell:\n            break\n\n    average_price = total_sale_price / shares_sold\n\n    # return answer\n    return average_price\n\n# Execute the function to get the answer\nprint(solution())\n```\n\nIn this program, we:\n1. Define the list of buyers with their bid sizes and limit prices.\n2. Sort the buyers based on their limit prices in descending order.\n3. Loop"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-476",
        "python_solution": "",
        "ground_truth": null,
        "question": "The investment portfolio is worth $10,000,000. The retirement fund intends to employ a futures contract valued at $125,000 to reduce the beta from 1.2 to 0.9 over a span of two months. The futures contract has a beta of 0.95. How many futures contracts should be sold?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 10000000  # Portfolio value in dollars\n    futures_contract_value = 125000  # Value of one futures contract in dollars\n    current_beta = 1.2  # Current beta\n    target_beta = 0.9  # Target beta\n    futures_beta = 0.95  # Beta of futures contract\n\n    # Calculate required change in beta\n    delta_beta = current_beta - target_beta\n\n    # Calculate the number of futures contracts needed\n    number_of_contracts = (portfolio_value * delta_beta) / (futures_contract_value * futures_beta)\n\n    # Return the rounded number of contracts (since you can't sell a fraction of a contract)\n    return round(number_of_contracts)\n```\n\nThe program calculates the number of futures contracts that should be sold to achieve the desired beta reduction. The formula used in the calculation is derived from the relationship between the portfolio value, the value of the futures contract, their respective betas, and the desired change in beta. The number of contracts is rounded to the nearest whole number because it is not practical to sell a fraction of a futures contract."
        ]
    },
    {
        "tables": [
            "|  |  |  | Year 3 | Year 2 | Year 1 |\n| --- | --- | --- | --- | --- | --- |\n| Earnings before income taxes: | | United States | $88,157 | $75,658 | $59,973 |\n|  | | Foreign | $116,704 | $113,509 | $94,760 |\n|  |  | Total | $204,861 | $189,167 | $154,733 |\n| The components of the provision for income taxes are as follows ($ thousands): | | |  | | |\n| Income taxes: | Current: | Federal | $30,632 | $22,031 | $18,959  |\n|  | | Foreign | $28,140 | $27,961 | $22,263  |\n|  | | | $58,772 | $49,992 | $41,222 |\n| | Deferred: | Federal | ($4,752) | $5,138 | $2,336 |\n|  | | Foreign | $124 | $1,730 | $621 |\n|  | | | ($4,628) | $6,868 | $2,957 |\n|  |  | Total | $54,144 | $56,860 | $44,179 |"
        ],
        "topic": "Accounting",
        "question_id": "test-477",
        "python_solution": "",
        "ground_truth": null,
        "question": "What was the provision for income taxes recorded in the US GAAP income statement of the firm in Year 3, given the elements of earnings before income taxes (in $ thousands)?",
        "output": [
            " Sure, based on the information provided in the table, the provision for income taxes recorded in the US GAAP income statement for Year 3 can be calculated by summing up the current and deferred taxes for that year.\n\nHere is the Python program to calculate the provision for income taxes in Year 3:\n\n```python\ndef solution():\n    # Define variables for current and deferred income taxes\n    current_federal_taxes_year3 = 30632\n    current_foreign_taxes_year3 = 28140\n    deferred_federal_taxes_year3 = -4752\n    deferred_foreign_taxes_year3 = 124\n\n    # Calculate total provision for income taxes in Year 3\n    total_provision_for_income_taxes_year3 = (current_federal_taxes_year3 + current_foreign_taxes_year3 +\n                                             deferred_federal_taxes_year3 + deferred_foreign_taxes_year3)\n\n    # return answer\n    return total_provision_for_income_taxes_year3\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program sums up the current federal and foreign taxes as well as the deferred federal and foreign taxes to get the total provision for income taxes in Year 3."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-478",
        "python_solution": "",
        "ground_truth": null,
        "question": "A takeover private equity fund intends to invest in all of Business A's preferred shares and 70% of the ordinary shares. Business A's present valuation stands at $10 million, comprising $6.5 million in debt, $2.8 million in preferred shares and $0.7 million in ordinary shares. The projected exit value in five years time is $15 million, with a predicted decrease in debt by $2.5 million and a 15% yearly return on preferred shares. What is the ratio of anticipated proceeds at exit to the funds invested?",
        "output": [
            " Certainly! Below is the Python program that calculates the ratio of anticipated proceeds at exit to the funds invested:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_valuation = 10000000  # Business A's present valuation in dollars\n    current_debt = 6500000         # Current debt in dollars\n    current_preferred_shares = 2800000  # Current preferred shares in dollars\n    current_ordinary_shares = 700000    # Current ordinary shares in dollars\n    exit_value = 15000000          # Projected exit value in dollars\n    debt_reduction = 2500000        # Predicted decrease in debt in dollars\n    annual_return_preferred_shares = 0.15  # 15% yearly return on preferred shares\n\n    # Calculate the value of preferred shares at exit\n    future_preferred_shares = current_preferred_shares * (1 + annual_return_preferred_shares) ** 5\n\n    # Calculate the total ordinary shares the investor will be buying\n    investor_ordinary_shares = 0.7 * current_ordinary_shares\n\n    # Calculate the funds invested by the investor\n    funds_invested = current_preferred_shares + investor_ordinary_shares\n\n    # Calculate the debt at exit\n    debt_at_exit = current_debt - debt_reduction\n\n    # Calculate the total value of the business at exit excluding debt\n    business_value_at_exit = exit_value - debt_at_exit\n\n    # Calculate the part of the business value at exit corresponding to preferred and ordinary shares the investor holds\n    investor_proceeds_at_exit = future_preferred_shares + (business_value_at_exit - future_preferred_shares) * (investor_ordinary_shares / current_ordinary_shares)\n\n    # Calculate the ratio of anticipated proceeds at exit to the funds invested\n    ratio = investor_proceeds_at"
        ]
    },
    {
        "tables": [
            "|         |           |                   |      |\n|---------|-----------|-------------------|------|\n|         |           | Underlying Bond   |      |\n| Futures Contract |   |                   |      |\n| Quoted futures price | 125.00 | Quoted bond price | 112.00 |\n| Conversion factor | 0.90 | Accrued interest since last coup on payment | 0.08 |\n| Time remaining to contract expiration | Three months | Accrued interest at futures contract expiration |0.20 |\n| Accrued interest over life of futures contract | 0.00 |   |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-479",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Minstrel identifies an arbitrage opportunity involving a fixed-income futures contract and its related bond, and the current details on the futures contract and related bond are displayed in Exhibit 1, what would be the arbitrage profit on the bond futures contract given that the existing yearly compounded risk-free rate is 0.30%, assuming annual compounding?",
        "output": [
            " Sure! Below is the Python program to calculate the arbitrage profit on the bond futures contract given the provided details:\n\n```python\ndef solution():\n    # Define variables name and value\n    quoted_futures_price = 125.00\n    quoted_bond_price = 112.00\n    conversion_factor = 0.90\n    accrued_interest_last_coupon = 0.08\n    accrued_interest_at_expiration = 0.20\n    time_remaining_contract_expiration = 3 / 12  # 3 months in years\n    risk_free_rate = 0.0030  # 0.30% as a decimal\n\n    # Calculate the implied futures price based on bond price and conversion factor\n    implied_futures_price = (quoted_bond_price + accrued_interest_last_coupon - accrued_interest_at_expiration) * conversion_factor\n\n    # Calculate delivery price (implied futures price at expiration adjusted for risk-free rate)\n    delivery_price = implied_futures_price * (1 + risk_free_rate * time_remaining_contract_expiration)\n\n    # Calculate arbitrage profit\n    arbitrage_profit = quoted_futures_price - delivery_price\n\n    # Return answer\n    return arbitrage_profit\n\n# Run the solution function to get the arbitrage profit\nprint(solution())\n```\n\nThis program sets up the calculation using the given variables and performs the necessary mathematical steps to determine the arbitrage profit on the bond futures contract. You can directly run this program to get the calculated arbitrage profit."
        ]
    },
    {
        "tables": [
            "|                     | $ millions |\n|---------------------|------------|\n| Sales               | 4,800      |\n| Cost of goods sold  | 2,880      |\n| Purchases           | 2,940      |\n| Average receivables | 625        |\n| Average inventory   | 710        |\n| Average payables    | 145        |"
        ],
        "topic": "Accounting",
        "question_id": "test-480",
        "python_solution": "",
        "ground_truth": null,
        "question": "The details for a certain business are given below. How many days does it take for that business to complete its cash conversion cycle?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales = 4800\n    cost_of_goods_sold = 2880\n    purchases = 2940\n    avg_receivables = 625\n    avg_inventory = 710\n    avg_payables = 145\n\n    # Do math calculation to get the answer\n    # Calculate Receivables Turnover Ratio\n    receivables_turnover = sales / avg_receivables\n\n    # Calculate Average Collection Period (Days Sales Outstanding)\n    days_sales_outstanding = 365 / receivables_turnover\n\n    # Calculate Inventory Turnover Ratio\n    inventory_turnover = cost_of_goods_sold / avg_inventory\n\n    # Calculate Days Inventory Outstanding\n    days_inventory_outstanding = 365 / inventory_turnover\n\n    # Calculate Payables Turnover Ratio\n    payables_turnover = purchases / avg_payables\n\n    # Calculate Days Payable Outstanding\n    days_payable_outstanding = 365 / payables_turnover\n\n    # Calculate Cash Conversion Cycle\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payable_outstanding\n\n    # return answer\n    return cash_conversion_cycle\n\n# Run the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Bond | Maturity | Market Value Price | Coupon | Yield-to-Maturity | Modified Duration |\n| --- | --- | --- | --- | --- | --- |\n| A | 3 years | 150,000 95.0000 | 3.00% | 5.67% | 4.98 |\n| B | 5 years | 110,000 90.0000 | 4.00% | 5.97% | 7.86 |\n| C | 10 years | 100,000 100.0000 | 6.00% | 6.00% | 9.27 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-481",
        "python_solution": "",
        "ground_truth": null,
        "question": "The modified duration of a bond collection, which consists of three fixed-rate bonds that pay annual coupons without any accrued interest, is:",
        "output": [
            " Certainly! To calculate the modified duration of a bond collection consisting of three fixed-rate bonds that pay annual coupons without any accrued interest, we will use a weighted average approach based on the market values and individual modified durations of the bonds.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_a_modified_duration = 4.98\n    bond_b_modified_duration = 7.86\n    bond_c_modified_duration = 9.27\n\n    bond_a_market_value = 150000\n    bond_b_market_value = 110000\n    bond_c_market_value = 100000\n\n    # Calculate the weighted modified duration\n    total_market_value = bond_a_market_value + bond_b_market_value + bond_c_market_value\n\n    weighted_duration_a = (bond_a_market_value / total_market_value) * bond_a_modified_duration\n    weighted_duration_b = (bond_b_market_value / total_market_value) * bond_b_modified_duration\n    weighted_duration_c = (bond_c_market_value / total_market_value) * bond_c_modified_duration\n\n    total_weighted_duration = weighted_duration_a + weighted_duration_b + weighted_duration_c\n\n    # return answer\n    return total_weighted_duration\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the weighted average of the modified durations of the bonds based on their market values. The final `total_weighted_duration` is the modified duration of the bond collection."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-482",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Bull Corporation anticipates growth rates of 10% and 20% for the initial two years, after which it will drop to 6%. If we consider that the return rate is 10% and Bull's recent dividend was $1, what is the value of Bull's ordinary shares?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 1\n    growth_rate_1 = 0.10\n    growth_rate_2 = 0.20\n    growth_rate_3 = 0.06\n    return_rate = 0.10\n\n    # Do math calculation to get the answer\n    # Valuing the dividends for initial two years\n    dividend_1 = initial_dividend * (1 + growth_rate_1)\n    dividend_2 = dividend_1 * (1 + growth_rate_2)\n\n    # Present value of the dividends for the first two years\n    pv_dividends = dividend_1 / (1 + return_rate) + dividend_2 / (1 + return_rate)**2\n\n    # Calculate the terminal value after 2 years\n    terminal_dividend = dividend_2 * (1 + growth_rate_3)\n    terminal_value = terminal_dividend / (return_rate - growth_rate_3)\n\n    # Present value of the terminal value\n    pv_terminal_value = terminal_value / (1 + return_rate)**2\n\n    # Total stock value\n    stock_value = pv_dividends + pv_terminal_value\n\n    # return answer\n    return stock_value\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The value of Bull's ordinary shares is ${answer:.2f}\")\n```\n\nThis Python program calculates the value of Bull's ordinary shares by considering the growth rates for the initial two years and the perpetual growth rate thereafter. The program computes the present value of the dividends for the first two years and the terminal value, then sums them to provide the total value of the shares."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-483",
        "python_solution": "",
        "ground_truth": null,
        "question": "The financial institution, TK Bank, gains arbitrage profit from the money market. They utilize a money market tool, a certificate of deposit, that has a maturity period of 300 days under the assumption that a year comprises 360 days. Given that the present value of this instrument is 93.2 and the maturity price is 100, can you determine the bond equivalent yield?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    present_value = 93.2\n    maturity_price = 100\n    maturity_period_days = 300\n    days_in_year = 360\n\n    # Calculate the interest earned\n    interest_earned = maturity_price - present_value\n\n    # Calculate the bond equivalent yield\n    yield_rate = (interest_earned / present_value) * (days_in_year / maturity_period_days)\n\n    # return answer\n    return yield_rate\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The bond equivalent yield is: {result:.4f}\")\n```\n\nThis program calculates the bond equivalent yield for the given certificate of deposit by first determining the interest earned over the maturity period and then annualizing it based on the number of days in the year."
        ]
    },
    {
        "tables": [
            "| Equity | Asset Allocation (%) | Asset Class Return (%) |\n|--------|----------------------|------------------------|\n| Equity A | 10.0 | 3.0 |\n| Equity B | 20.0 | 19.0 |\n| Equity C | 55.0 | -1.0 |\n| Equity D | 15.0 | 6.0 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-484",
        "python_solution": "",
        "ground_truth": null,
        "question": "The yield of a portfolio with four stocks is equivalent to:",
        "output": [
            " Certainly! Let's define the variables provided in the table and calculate the yield of the portfolio. The yield of the portfolio is computed by taking a weighted average of the returns of the individual stocks based on their allocation in the portfolio. Here's the Python program to achieve that:\n\n```python\ndef solution():\n    # Define variables name and value\n    equity_a_allocation = 10.0   # Equity A allocation in percentage\n    equity_b_allocation = 20.0   # Equity B allocation in percentage\n    equity_c_allocation = 55.0   # Equity C allocation in percentage\n    equity_d_allocation = 15.0   # Equity D allocation in percentage\n\n    equity_a_return = 3.0        # Equity A return in percentage\n    equity_b_return = 19.0       # Equity B return in percentage\n    equity_c_return = -1.0       # Equity C return in percentage\n    equity_d_return = 6.0        # Equity D return in percentage\n\n    # Do math calculation to get the answer\n    portfolio_yield = (equity_a_allocation * equity_a_return +\n                       equity_b_allocation * equity_b_return +\n                       equity_c_allocation * equity_c_return +\n                       equity_d_allocation * equity_d_return) / 100\n\n    # return answer\n    return portfolio_yield\n\n# Example output\nprint(solution())\n```\n\nThis program calculates the weighted average return of the portfolio based on the allocations and returns of each equity. The `portfolio_yield` is computed by summing the products of each equity's allocation and return, and then dividing by 100 to convert the percentage to a decimal form."
        ]
    },
    {
        "tables": [
            "| Trades | Execution  Price | Shares Executed |\n|--------|------------------|-----------------|\n| Trade 1 | $40.75 | 10,000 |\n| Trade 2 | $41.25 | 30,000 |\n| Trade 3 | $41.50 | 20,000 |\n| Trade 4 | $41.75 | 30,000 |\n| Total |  | 90,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-485",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the following day, Roberts advises Green to take another look at her analysis on XYZ Corp. Green's study leads her to conclude that the company's shares are underpriced. She communicates her findings to Roberts, who directs her to buy 120,000 shares at $40.00 using a limit order of $42.00 at 10 a.m. The buy-side dealer implements the order for market execution as the price hits $40.50. The exclusive fee is a commission of $0.02 per share. By market close, 90,000 shares of the order were bought, with XYZ Corp ending at $42.50. The transaction was discharged at an average cost of $41.42. Information about the completed deals is given in Exhibit 1. Based on the information provided in Exhibit 1, what is the opportunity cost of buying the 90,000 shares of XYZ Corp?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shares_bought = 90000\n    market_close_price = 42.50\n    average_cost = 41.42\n\n    # Do math calculation to get the answer\n    opportunity_cost = shares_bought * (market_close_price - average_cost)\n\n    # return answer\n    return opportunity_cost\n```\n\nIn this program, the opportunity cost of buying the 90,000 shares of XYZ Corp is calculated by multiplying the number of shares bought by the difference between the market close price and the average cost of the shares. The result is the total opportunity cost."
        ]
    },
    {
        "tables": [
            "| Dealer | Time   Entered | Price  | Size | Dealer | Time   Entered | Price  | Size |\n|--------|---------------|--------|------|--------|---------------|--------|------|\n| B      | 10.10 a.m.    | $17.15 | 900  | C      | 10.11 a.m.    | $17.19 | 1,200|\n| C      | 10.11 a.m.    | $17.14 | 1,500| B      | 10.10 a.m.    | $17.20 | 800  |\n| A      | 10.11 a.m.    | $17.12 | 1,100| A      | 10.12 a.m.    | $17.22 | 1,100|"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-486",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three brokers are involved in making the market for the stocks of Bright Systems. Using these rates, YNSM's trading desk carries out a market sell order for 1,100 stocks of Bright Systems. Based on Exhibit 1, what is the inside bid\u2013ask spread for the limit order book for Bright Systems?",
        "output": [
            " Sure, I can help you create a Python program to find the inside bid\u2013ask spread for the limit order book for Bright Systems based on the provided table. The inside bid is the highest bid price, and the inside ask is the lowest ask price. The bid\u2013ask spread is the difference between these two prices.\n\nHere's the Python program to calculate the answer:\n\n```python\ndef solution():\n    # Define variables name and value\n    highest_bid_price = 17.15  # The highest bid price is $17.15 entered at 10.10 a.m. by dealer B\n    lowest_ask_price = 17.19  # The lowest ask price is $17.19 entered at 10.11 a.m. by dealer C\n\n    # Do math calculation to get the answer\n    inside_bid_ask_spread = lowest_ask_price - highest_bid_price\n\n    # return answer\n    return inside_bid_ask_spread\n\n# Print the answer\nprint(solution())\n```\n\nIn this program, the highest bid price and the lowest ask price are extracted from the table. The difference between these two prices gives us the inside bid\u2013ask spread. Running this program will return the spread, which in this case is $0.04."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-487",
        "python_solution": "",
        "ground_truth": null,
        "question": "Enterprise Z announced a COGS of $75 million. Over the year, there was a decrease of $12 million in inventory and an increase of $8 million in accounts payable. What is the total cash given to suppliers?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cogs = 75000000  # Cost of Goods Sold\n    decrease_in_inventory = 12000000  # Decrease in inventory\n    increase_in_ap = 8000000  # Increase in accounts payable\n\n    # Do math calculation to get the answer\n    cash_given_to_suppliers = cogs + decrease_in_inventory - increase_in_ap\n\n    # return answer\n    return cash_given_to_suppliers\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-488",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the covariance of returns for Stock X and Stock Y, given the correlation of their historical returns is 0.75, and the variances for Stock X and Stock Y are 0.16 and 0.09, respectively?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.75\n    variance_stock_x = 0.16\n    variance_stock_y = 0.09\n\n    # Do math calculation to get the answer\n    std_dev_stock_x = (variance_stock_x ** 0.5)\n    std_dev_stock_y = (variance_stock_y ** 0.5)\n    covariance = correlation * std_dev_stock_x * std_dev_stock_y\n\n    # return answer\n    return covariance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-489",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the worth of a preferred share if the necessary return is 10% and the yearly dividend is $5?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    necessary_return = 0.10  # 10% returned as a decimal\n    yearly_dividend = 5  # $5 yearly dividend\n\n    # Do math calculation to get the answer\n    worth_of_preferred_share = yearly_dividend / necessary_return\n\n    # return answer\n    return worth_of_preferred_share\n```\n\nWhen you run the `solution` function, it will calculate and return the worth of a preferred share based on the given necessary return rate and yearly dividend."
        ]
    },
    {
        "tables": [
            "| Fiscal year end (USD  millions) | December 2018 |\n|---------------------------------|---------------|\n| Revenue                         | $31,218.00    |\n| Cost of goods sold              | $25,454.00    |\n| Sales, general, and administrative| $1,638.00    |\n| Depreciation and amortization   | $441.00       |\n| Operating income                | $3,685.00     |\n| Interest expense                | $103.00       |\n| Income before taxes             | $3,582.00     |\n| Provision for income taxes      | $1,121.00     |\n| Net income                      | $2,461.00     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-490",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the interest coverage ratio of the operating statement, if calculated by the more conservative interest coverage ratio method, for the corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    operating_income = 3685.00\n    interest_expense = 103.00\n\n    # Do math calculation to get the answer\n    interest_coverage_ratio = operating_income / interest_expense\n\n    # return answer\n    return interest_coverage_ratio\n```\n\nThis program defines the operating income and interest expense as given in the table, calculates the interest coverage ratio, and returns the result. The interest coverage ratio is calculated by dividing the operating income by the interest expense, which is the more conservative method."
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-491",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher is determining a historical ERP for a market based on the same data. What is the historical ERP?",
        "output": [
            " def solution():\n    # Define variables name and value\n    long_term_geometric_average_return_market_equity = 9.96\n    long_term_geometric_average_return_government_bond = 3.15\n\n    # Do math calculation to get the answer\n    historical_ERP = long_term_geometric_average_return_market_equity - long_term_geometric_average_return_government_bond\n\n    # Return answer\n    return historical_ERP\n\n# Execute the function to see the result\nprint(solution())\n```\n\nThe Python program calculates the historical Equity Risk Premium (ERP) by subtracting the long-term geometric average return of short-term government bonds from the long-term geometric average return of the market equity index. The expected output is the historical ERP."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-492",
        "python_solution": "",
        "ground_truth": null,
        "question": "If r stands for 4% and E(MR) equals 10%, then what would be the expected yield for a security with a beta of 1.3?",
        "output": [
            " Certainly! To calculate the expected yield for a security given the risk-free rate (r), the market risk premium (E(MR)), and the security's beta, we use the Capital Asset Pricing Model (CAPM) formula. The CAPM formula is:\n\n\\[ \\text{Expected Yield} = r + \\beta \\times E(MR) \\]\n\nGiven:\n- \\( r = 4\\% \\)\n- \\( E(MR) = 10\\% \\)\n- \\( \\beta = 1.3 \\)\n\nHere is the Python program to calculate the expected yield:\n\n```python\ndef solution():\n    # Define variables name and value\n    r = 0.04  # 4% expressed as a decimal\n    E_MR = 0.10  # 10% expressed as a decimal\n    beta = 1.3\n\n    # Do math calculation to get the answer\n    expected_yield = r + beta * E_MR\n\n    # return answer\n    return expected_yield\n\n# Call the function and print the result\nprint(f\"The expected yield is: {solution() * 100:.2f}%\")\n```\n\nThis program calculates the expected yield for a security using the given values and returns the result in percentage format."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-493",
        "python_solution": "",
        "ground_truth": null,
        "question": "A yearly coupon bond is valued at par value, with a coupon rate of 5%, and it will mature in 10 years. If one plans to invest for five years and the approximate modified duration of the bond is 6.872, what should the duration gap be at the point of buying?",
        "output": [
            " Sure, let's write the Python program to solve the given financial problem. Here's the code:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05\n    maturity = 10\n    investment_period = 5\n    modified_duration = 6.872\n\n    # Do math calculation to get the answer\n    # The duration gap is calculated by subtracting the investment period from the modified duration\n    duration_gap = modified_duration - investment_period\n\n    # return answer\n    return duration_gap\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nExplanation of the calculation:\n- The duration gap is simply the difference between the bond's modified duration and the investment period.\n\nThis program will return the duration gap at the point of buying the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-494",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an investment analyst is looking into buying a bond that has a 5.5% annual interest rate and matures in three years, and if the anticipated rate of return on the bond is 5%, what should be the bond's price per 100 of par value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_interest_rate = 0.055  # 5.5% in decimal form\n    maturity_years = 3\n    anticipated_return_rate = 0.05  # 5% in decimal form\n\n    # Calculate the present value of the bond\n    par_value = 100  # Par value per 100\n\n    # The bond pays interest annually, so we use the present value formula for an annuity\n    # Present Value of Bond = Sum of Present Value of Coupons + Present Value of Face Value\n\n    # Calculate the present value of the coupons\n    annuity_factor = (1 - (1 + anticipated_return_rate) ** -maturity_years) / anticipated_return_rate\n    coupon_payment = annual_interest_rate * par_value\n    present_value_of_coupons = coupon_payment * annuity_factor\n\n    # Calculate the present value of the face value\n    present_value_of_face_value = par_value / (1 + anticipated_return_rate) ** maturity_years\n\n    # Calculate the present value of the bond\n    present_value_of_bond = present_value_of_coupons + present_value_of_face_value\n\n    # return answer\n    return present_value_of_bond\n```"
        ]
    },
    {
        "tables": [
            "|                                         | Emillions   |\n|-----------------------------------------|-------------|\n| Revenues for the year                   | 12,500      |\n| Total expenses for the year             | 10,000      |\n| Unrealized gains from available-for-sale securities | 1,475       |\n| Loss on foreign currency translation adjustments on a foreign subsidiary | 325         |\n| Dividends paid                          | 500         |"
        ],
        "topic": "Accounting",
        "question_id": "test-495",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the total comprehensive income (in millions) of the firm as per the data available from the firm's financial documents?",
        "output": [
            " Certainly! To calculate the total comprehensive income, we must use the formula:\n\n\\[ \\text{Total Comprehensive Income} = \\text{Net Income} + \\text{Other Comprehensive Income} \\]\n\nHere, the net income is calculated as:\n\n\\[ \\text{Net Income} = \\text{Revenues} - \\text{Total Expenses} - \\text{Dividends Paid} \\]\n\nThen, the Other Comprehensive Income is calculated as:\n\n\\[ \\text{Other Comprehensive Income} = \\text{Unrealized Gains} - \\text{Loss on Foreign Currency Translation Adjustments} \\]\n\nImplementing this into a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenues = 12500\n    total_expenses = 10000\n    unrealized_gains = 1475\n    loss_on_foreign_currency = 325\n    dividends_paid = 500\n\n    # Do math calculation to get the answer\n    net_income = revenues - total_expenses - dividends_paid\n    other_comprehensive_income = unrealized_gains - loss_on_foreign_currency\n    total_comprehensive_income = net_income + other_comprehensive_income\n\n    # return answer\n    return total_comprehensive_income\n\n# To get the answer, you may call the function\n# print(solution())\n```\n\nThis script calculates the total comprehensive income as described and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-496",
        "python_solution": "",
        "ground_truth": null,
        "question": "John just got $30 million. His blueprint is to put this money at a risk-free rate of 3% and subsequently switch them into euros after six months. To safeguard against the currency risk, John opts to buy forward contracts. The rate for six-month forward is 1.10 USD/EUR, with the spot rate currently at 1.13 USD/EUR. The day-count convention being used is 30/360. If John utilizes a six-month forward contract as his risk hedge, what will his calculated annualized return in euros be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_amount_usd = 30000000\n    risk_free_rate = 0.03\n    six_months_in_days = 180  # Using the 30/360 day-count convention\n    forward_rate = 1.10\n    spot_rate = 1.13\n\n    # Do math calculation to get the answer\n    # Step 1: Calculate the amount after 6 months at risk-free rate\n    amount_after_six_months = initial_amount_usd * (1 + (risk_free_rate * (six_months_in_days / 360)))\n\n    # Step 2: Calculate the amount in euros using the forward rate\n    amount_in_euros = amount_after_six_months / forward_rate\n\n    # Step 3: Calculate the amount in euros using the spot rate for comparison\n    spot_amount_in_euros = initial_amount_usd / spot_rate\n\n    # Step 4: Calculate the percentage change in value due to the forward contract\n    return_due_to_forward_contract = amount_in_euros - spot_amount_in_euros\n\n    # Step 5: Annualize the return\n    annualized_return = (return_due_to_forward_contract / spot_amount_in_euros) * (360 / six_months_in_days)\n\n    # return answer\n    return annualized_return\n\n# Example usage\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-497",
        "python_solution": "",
        "ground_truth": null,
        "question": "A supervisor is interested in implementing a collar strategy. The existing price of shares is $20, a put option with a strike price of $15 is sold at $2.0, and a call option with a strike price of $30 is going for $2.0. What is the profit of this strategy if the price of the base share at the end is $35?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    existing_price = 20\n    put_strike_price = 15\n    put_premium = 2.0\n    call_strike_price = 30\n    call_premium = 2.0\n    final_share_price = 35\n\n    # Calculate payoffs of the options\n    put_payoff = max(0, put_strike_price - final_share_price)\n    call_payoff = max(0, final_share_price - call_strike_price)\n\n    # Calculate the profit of the strategy\n    profit = (final_share_price - existing_price) + put_premium - put_payoff + call_premium - call_payoff\n\n    # return answer\n    return profit\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-498",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the price of a Treasury bond quoted at 97-19+ as a percentage of par?",
        "output": [
            " Sure! To calculate the price of a Treasury bond quoted at 97-19+ as a percentage of par, we can break down the quote and then calculate the percentage.\n\nA quote like 97-19+ means:\n- 97 is the whole number part.\n- 19 is the fractional part in terms of 32nds of a dollar.\n- + indicates an additional 1/8 of 1/32.\n\nLet's implement this in the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    whole_number = 97\n    fractional_part = 19\n    plus_part = 1  # This represents the \"+\", which is 1/8 of 1/32\n\n    # Do math calculation to get the answer\n    fractional_value = fractional_part / 32.0\n    plus_value = (1 / 8) / 32.0\n    total_price = whole_number + fractional_value + plus_value\n\n    # Convert to percentage of par\n    answer = total_price * 100\n\n    # return answer\n    return answer\n```\n\nThis program calculates the bond price as a percentage of its par value based on the given quote."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-499",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher predicts that 20% of high-risk bonds will become insolvent. If he uses an insolvency prediction model, he discovers that 70% of the bonds will be given a \"good\" rating, suggesting they are less likely to become insolvent. Of the bonds that became insolvent, only 50% had a \"good\" rating. Use Bayes' theorem to determine the probability of insolvency given a \"good\" rating. (Hint, let P(A) be the probability of insolvency, P(B) be the probability of a \"good\" rating, P(B | A) be the likelihood of a \"good\" rating given insolvency, and P(A | B) be the likelihood of insolvency given a \"good\" rating.)",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # Probability of insolvency\n    P_B = 0.70  # Probability of a \"good\" rating\n    P_B_given_A = 0.50  # Probability of a \"good\" rating given insolvency\n\n    # Do math calculation to get the answer using Bayes' theorem\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n\n    # return answer\n    return P_A_given_B\n\n# Call the solution to get the answer\nanswer = solution()\nprint(answer)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-500",
        "python_solution": "",
        "ground_truth": null,
        "question": "If f(0,1)=0.75%, f(1,1)=0.98%, f(2,1)=1.75%, f(2,2)=2.21%, what is the worth of a three-year bond from XYZ Corp. that pays a 6% coupon on a yearly basis?",
        "output": [
            " Certainly! Here is the Python program to calculate the worth of a three-year bond from XYZ Corp. that pays a 6% coupon on a yearly basis:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.06  # 6% coupon rate\n    face_value = 1000   # Typically bonds have a face value of $1000\n    f01 = 0.0075        # 0.75% forward rate for period (0,1)\n    f11 = 0.0098        # 0.98% forward rate for period (1,1)\n    f21 = 0.0175        # 1.75% forward rate for period (2,1)\n    f22 = 0.0221        # 2.21% forward rate for period (2,2)\n\n    # Calculate spot rates\n    spot1 = f01\n    spot2 = ((1 + f01) * (1 + f11))**0.5 - 1\n    spot3 = ((1 + spot2) * (1 + f22))**0.5 - 1\n\n    # Coupon payments\n    coupon = face_value * coupon_rate\n\n    # Calculate the present value of each cash flow\n    pv1 = coupon / (1 + spot1)\n    pv2 = coupon / (1 + spot2)**2\n    pv3 = (coupon + face_value) / (1 + spot3)**3\n\n    # Calculate the bond price\n    bond_price = pv1 + pv2 + pv3\n\n    # return answer\n    return bond_price\n\n# Run the solution function\nprint(solution())\n```\n\nThis program calculates the present value of the bond's cash flows using spot rates derived from the given forward rates. The bond price is then computed as the sum of these present values."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-501",
        "python_solution": "",
        "ground_truth": null,
        "question": "By the conclusion of 2016, Corporation A had an accounts receivable totaling $50 million. By the conclusion of 2017, Corporation A had generated revenues of $60 million, with the year's accounts receivable amounting to $30. What should be the sum of cash collected from the clientele?",
        "output": [
            " To solve the problem, we need to calculate the sum of cash collected from the clientele. The cash collected from the clientele can be calculated using the formula:\n\n\\[ \\text{Cash Collected} = \\text{Revenue} + \\text{Accounts Receivable at the start of the period} - \\text{Accounts Receivable at the end of the period} \\]\n\nIn this scenario:\n- Revenue for 2017 = $60 million\n- Accounts Receivable at the end of 2016 = $50 million\n- Accounts Receivable at the end of 2017 = $30 million\n\nNow, let's create the Python function to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue_2017 = 60000000\n    accounts_receivable_end_2016 = 50000000\n    accounts_receivable_end_2017 = 30000000\n\n    # Do math calculation to get the answer\n    cash_collected = revenue_2017 + accounts_receivable_end_2016 - accounts_receivable_end_2017\n\n    # return answer\n    return cash_collected\n\n# Call solution function to get the answer\nprint(solution())\n```\n\nWhen you run this code, it will calculate and return the sum of cash collected from the clientele by Corporation A."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-502",
        "python_solution": "",
        "ground_truth": null,
        "question": "Two years earlier, a corporation released $20 million in long-term bonds at face value with a 9 percent coupon rate. The firm plans to release another $20 million in bonds and anticipates that the new issue will be priced at face value with a 7 percent coupon rate. The firm has no other outstanding liabilities and is taxed at a rate of 40 percent. What is the proper after-tax debt cost to calculate the firm's weighted average cost of capital?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    old_bonds_value = 20000000\n    old_coupon_rate = 0.09\n    new_bonds_value = 20000000\n    new_coupon_rate = 0.07\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    old_bonds_cost = old_coupon_rate * old_bonds_value\n    new_bonds_cost = new_coupon_rate * new_bonds_value\n    total_bonds_value = old_bonds_value + new_bonds_value\n    total_bonds_cost = old_bonds_cost + new_bonds_cost\n\n    # Calculate the before-tax debt cost\n    before_tax_debt_cost = total_bonds_cost / total_bonds_value\n\n    # Calculate the after-tax debt cost\n    after_tax_debt_cost = before_tax_debt_cost * (1 - tax_rate)\n\n    # return answer\n    return after_tax_debt_cost\n\n# Test the solution\nprint(solution())\n```\n\nIn this program, we first define the variables for the bond values, coupon rates, and the tax rate. Then we calculate the annual interest costs for the old and new bonds. We sum these costs to get the total annual interest cost and divide it by the total bond value to get the before-tax debt cost. Finally, we calculate the after-tax debt cost by multiplying the before-tax cost by (1 - tax_rate), which accounts for the tax shield provided by the interest payments."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-503",
        "python_solution": "",
        "ground_truth": null,
        "question": "Two years prior, Johnson Industries bought equipment for $800,000. By the close of last year, the equipment was worth $720,000. If Johnson Industries uses the revaluation model, how much, if any, is recorded in Johnson's net income this year if the equipment's fair value has risen to $810,000?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 800000\n    value_last_year = 720000\n    current_fair_value = 810000\n\n    # Do math calculation to get the answer\n    # Calculate the change in value from last year to this year\n    change_in_value = current_fair_value - value_last_year\n\n    # return answer\n    return change_in_value\n```\n\nYou can obtain the answer by simply running the `solution()` function. This program defines the relevant variables and calculates the change in the value of the equipment from the end of last year to the current year, which represents the amount recorded in Johnson's net income this year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-504",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sagittarius Portfolio of Portfolios invests GBP 100 million in each of Gamma Hedge Fund and XYZ Hedge Fund. Sagittarius POP has a \"1 and 10\" fee structure. Management fees and incentive fees are calculated separately at the end of each year. After one year, net of their respective management and incentive fees, the investment in Gamma is valued at GBP80 million and the investment in XYZ is valued at GBP140 million. What is the yearly return to a shareholder in Sagittarius, after deducting fees at the portfolio of portfolios level?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100e6  # GBP 100 million\n    gamma_final_value = 80e6    # GBP 80 million\n    xyz_final_value = 140e6     # GBP 140 million\n    management_fee_rate = 0.01  # 1%\n    incentive_fee_rate = 0.10   # 10%\n\n    # Calculate management fees\n    total_management_fees = 2 * initial_investment * management_fee_rate\n\n    # Calculate incentive fees\n    total_incentive_fees = (xyz_final_value + gamma_final_value - 2 * initial_investment - total_management_fees) * incentive_fee_rate\n\n    # Calculate total value after fees\n    total_value_after_fees = gamma_final_value + xyz_final_value - total_management_fees - total_incentive_fees\n\n    # Calculate return to shareholders\n    yearly_return = total_value_after_fees - 2 * initial_investment\n\n    # return answer\n    return yearly_return\n\n# Example usage\nprint(solution())\n```\n\nThis Python program defines a function `solution()` that calculates the yearly return to a shareholder in Sagittarius, after deducting fees at the portfolio of portfolios level. The program follows the structure you provided: defining variables, performing calculations, and returning the answer."
        ]
    },
    {
        "tables": [
            "|      | Beginning of Period Price(\u20ac) | End of Period Price(\u6bdb) | Total Dividends(\u20ac) |\n|------|-------------------------------|-------------------------|---------------------|\n| A    | 8.00                          | 10.00                   | 0.50                |\n| B    | 22.00                         | 19.00                   | 1.20                |\n| C    | 25.00                         | 25.00                   | 1.50                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-505",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial analyst named Ahern from a certain investment firm recently compiled data for an equal-weighted index which includes assets A, B, and C: What is the combined return of this index?",
        "output": [
            " Sure, I can help generate a Python program to calculate the combined return of the equal-weighted index including assets A, B, and C. The formula to calculate the return for each asset is:\n\n\\[ \\text{Return} = \\left( \\frac{\\text{End of Period Price} - \\text{Beginning of Period Price} + \\text{Total Dividends}}{\\text{Beginning of Period Price}} \\right) \\]\n\nFor an equal-weighted index, the combined return would be the average of the individual returns.\n\nHere's the complete Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    price_begin_A = 8.00\n    price_end_A = 10.00\n    dividends_A = 0.50\n\n    price_begin_B = 22.00\n    price_end_B = 19.00\n    dividends_B = 1.20\n\n    price_begin_C = 25.00\n    price_end_C = 25.00\n    dividends_C = 1.50\n\n    # Do math calculation to get the answer\n    return_A = ((price_end_A - price_begin_A + dividends_A) / price_begin_A)\n    return_B = ((price_end_B - price_begin_B + dividends_B) / price_begin_B)\n    return_C = ((price_end_C - price_begin_C + dividends_C) / price_begin_C)\n\n    combined_return = (return_A + return_B + return_C) / 3\n\n    # return answer\n    return combined_return\n\n# Call the solution function to get the combined return\nprint(solution())\n```\n\nThis program defines the beginning and end prices, as well as the total dividends, for assets A, B, and C. It then calculates the return for each asset and averages these returns to get the combined return of the equal-weighted index. Finally, it returns this combined return."
        ]
    },
    {
        "tables": [
            "| Financial Statement for Company M | $ millions |\n| --- | --- |\n| Net Income | 212 |\n| Depreciation expense | 88 |\n| Increase in inventories | 50 |\n| Increase in accounts payable | 25 |\n| Purchase of fixed assets | 100 |\n| Increase in notes payable | 60 |\n| Decrease in long-term debt | 50 |\n| Interest expense | 100 |\n\n| Additional information | |\n| --- | --- |\n| Tax rate | 30% |\n| Beta | 0.8 |\n| Before-tax cost of debt | 5% |\n| D/A ratio | 40% |\n| Risk-free rate | 2.4% |\n| Market risk premium | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-506",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is getting ready to compute the intrinsic value of Company N's equity utilizing the FCFF model with an infinite growth rate of 5%. The pertinent information can be found in the table below. What's the value of Company N's equity?",
        "output": [
            " To compute the intrinsic value of Company N's equity utilizing the FCFF (Free Cash Flow to the Firm) model with an infinite growth rate of 5%, we need to calculate the following:\n\n1. Free Cash Flow to the Firm (FCFF)\n2. Weighted Average Cost of Capital (WACC)\n3. Terminal Value (with infinite growth)\n4. Intrinsic Value of Equity\n\nHere's the Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 212\n    depreciation_expense = 88\n    increase_in_inventories = 50\n    increase_in_accounts_payable = 25\n    purchase_of_fixed_assets = 100\n    increase_in_notes_payable = 60\n    decrease_in_long_term_debt = 50\n    interest_expense = 100\n    tax_rate = 0.3\n    beta = 0.8\n    before_tax_cost_of_debt = 0.05\n    da_ratio = 0.4\n    risk_free_rate = 0.024\n    market_risk_premium = 0.07\n    growth_rate = 0.05\n\n    # Step 1: Calculate FCFF\n    ebit = net_income + interest_expense + (interest_expense * tax_rate)\n    nwc_change = increase_in_inventories - increase_in_accounts_payable - increase_in_notes_payable + decrease_in_long_term_debt\n    fcff = ebit * (1 - tax_rate) + depreciation_expense - purchase_of_fixed_assets - nwc_change\n\n    # Step 2: Calculate the cost of equity using the CAPM model\n    cost_of_equity = risk_free_rate + beta * market_risk_premium\n\n    # Step 3: Calculate the cost of debt and the WACC\n    cost_of_debt = before_tax_cost_of_"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-507",
        "python_solution": "",
        "ground_truth": null,
        "question": "By the conclusion of 2016, XYZ Corporation possessed assets worth $10 million and shareholders' equity of $3 million. What are the liabilities of XYZ Corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets = 10000000  # $10 million in dollars\n    shareholders_equity = 3000000  # $3 million in dollars\n\n    # Do math calculation to get the answer\n    liabilities = total_assets - shareholders_equity\n\n    # return answer\n    return liabilities\n```"
        ]
    },
    {
        "tables": [
            "| Issuer             | Coupon Rate | Price   | Bond Description        |\n|--------------------|-------------|---------|-------------------------|\n| Ayrault, Inc. (Al) | 5.25%       | 100.200 | Callable at par in one  |\n|                    |             |         | year and two years from |\n|                    |             |         | today                   |",
            "| Exhibit 2. Binomial Interest Rate Trees | |\n| --- | --- |\n| Panel A Interest Rates Shift Down by 30 bps | | | | | |\n| Year 0, Year 1, Year 2 | | | | | |\n| | |5.1968% | |7.0037% | |\n| 3.7000% | | | |5.7342% | |\n| | |4.2548% | | | |\n| | | | |4.6947% | |\n\n| Panel B Interest Rates Shift Up by 30 bps | | | | | |\n| Year 0, Year 1, Year 2 | | | | | |\n| | |5.8605% | |7.7432% | |\n| 4.3000% | | | |6.3396% | |\n| | |4.7982% | | | |\n| | | | |5.1904% | |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-508",
        "python_solution": "",
        "ground_truth": null,
        "question": "Keeping in mind that each bond has three years left in its maturity, makes annual coupon payments, and has a BBB credit rating, when Jones constructs a binomial interest rate tree based on a 10% interest rate volatility assumption, with the present one-year rate being 1%, Panel A of Exhibit 2 gives an interest rate tree under the assumption that the benchmark yield curve drops by 30 bps. Panel B offers an interest rate tree presuming an increase in the benchmark yield curve by 30 bps. Jones concludes that the SM bond is currently being traded at an option-adjusted spread (OAS) of 13.95 bps in relation to the benchmark yield curve. Based on the data present in Exhibits 1 and 2, can you determine the effective duration for the SM bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.0525  # Annual coupon rate of 5.25%\n    price = 100.200  # Current price of the bond\n    face_value = 100  # Assuming a face value of 100 for simplicity\n    time_to_maturity = 3  # Three years left to maturity\n    OAS = 0.001395  # Option-adjusted spread of 13.95 bps\n    interest_volatility = 0.10  # Interest rate volatility of 10%\n    current_one_year_rate = 0.01  # Present one-year rate being 1%\n\n    # Calculate the effective duration\n    up_rates = [0.01 + x * interest_volatility for x in range(1, 3)]\n    down_rates = [0.01 - x * interest_volatility for x in range(1, 3)]\n\n    # Panel A (Shift Down by 30 bps)\n    panel_a_rates = [0.037, 0.042548, 0.051968, 0.057342, 0.046947]\n\n    # Panel B (Shift Up by 30 bps)\n    panel_b_rates = [0.043, 0.047982, 0.058605, 0.063396, 0.051904]\n\n    # Function to calculate bond price based on interest rates\n    def bond_price(rates):\n        bond_value = 0\n        for t in range(1, time_to_maturity + 1):\n            bond_value += (coupon_rate * face_value) / ((1 + rates[t-1]) ** t)\n        bond_value += face_value / ((1 + rates[time_to_maturity-1]) ** time_to_maturity)\n        return bond"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-509",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the year 2009, PlayJoy Ltd, a company that started operating in October of that year, bought 10,000 units of a toy costing \u20a410 each in October. The toy had a good sale in October. Expecting high sales in December, PlayJoy acquired another 5,000 units at \u20a411 each in November. During 2009, PlayJoy managed to sell 12,000 units each at a price of \u20a415. What would be the cost of goods sold by PlayJoy under the weighted average cost method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    units_purchased_october = 10000\n    cost_per_unit_october = 10\n    units_purchased_november = 5000\n    cost_per_unit_november = 11\n    units_sold = 12000\n    selling_price_per_unit = 15\n\n    # Calculate total cost of units purchased\n    total_cost_october = units_purchased_october * cost_per_unit_october\n    total_cost_november = units_purchased_november * cost_per_unit_november\n\n    # Calculate total units purchased and total cost\n    total_units_purchased = units_purchased_october + units_purchased_november\n    total_cost = total_cost_october + total_cost_november\n\n    # Calculate weighted average cost per unit\n    weighted_average_cost_per_unit = total_cost / total_units_purchased\n\n    # Calculate cost of goods sold\n    cost_of_goods_sold = units_sold * weighted_average_cost_per_unit\n\n    # return answer\n    return cost_of_goods_sold\n\n# Call the function to get the answer\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-510",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the annual amortization expense for the third year if firm N employs the double-declining balance method to amortize an $80,000 patent with a useful life of 4 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    patent_cost = 80000\n    useful_life = 4\n    double_declining_rate = 2 / useful_life\n\n    # Calculate the amortization expense for each year using double-declining balance method\n    book_value_year_1 = patent_cost * (1 - double_declining_rate)\n    book_value_year_2 = book_value_year_1 * (1 - double_declining_rate)\n    amortization_expense_year_3 = book_value_year_2 * double_declining_rate\n\n    # return answer\n    return amortization_expense_year_3\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-511",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood that a portfolio with a projected return of 7% and a standard deviation of 13%, won't meet the minimum annual return target of 4%, set by an investor?",
        "output": [
            " To determine the likelihood that a portfolio with a projected return of 7% and a standard deviation of 13% won't meet a minimum annual return target of 4%, we can use the concept of the normal distribution. Specifically, we can calculate the probability using the cumulative distribution function (CDF) of the normal distribution.\n\nHere's how you can structure the Python program:\n\n```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    projected_return = 0.07  # 7%\n    standard_deviation = 0.13  # 13%\n    target_return = 0.04  # 4%\n\n    # Calculate the Z-score for the target return\n    z_score = (target_return - projected_return) / standard_deviation\n\n    # Calculate the probability using the CDF of the standard normal distribution\n    probability = stats.norm.cdf(z_score)\n\n    # return answer\n    return probability\n\n# Run the solution to get the answer\nanswer = solution()\nprint(f\"The likelihood that the portfolio won't meet the minimum annual return target of 4% is {answer:.4f}\")\n```\n\nIn this program:\n- We first define the variables for the projected return, standard deviation, and target return.\n- We then calculate the Z-score, which represents how many standard deviations the target return is from the projected return.\n- We use the cumulative distribution function (CDF) of the standard normal distribution to find the probability.\n- Finally, we return the answer.\n\nRunning this program will give you the likelihood that the portfolio won't meet the minimum annual return target of 4%."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|---------------------------|--------------------------------|\n| 1        | 25                        | 30                             |\n| 2        | 20                        | 30                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-512",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio intends to build a portfolio with the following two securities. If the portfolio's return is 21.5%, what is the weighting in Security 1?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    expected_return_1 = 25\n    expected_return_2 = 20\n    portfolio_return = 21.5\n\n    # Do math calculation to get the answer\n    weight_1 = (portfolio_return - expected_return_2) / (expected_return_1 - expected_return_2)\n\n    # return answer\n    return weight_1\n```\n\nExecuting this Python program will give you the weighting in Security 1 based on the given expected returns and the portfolio's return."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-513",
        "python_solution": "",
        "ground_truth": null,
        "question": "XY Corporation has established a defined benefit pension plan with $150m in assets and $135m in commitments. It is predicted that: The expected annual income of the pension plan is 7.5percent, with a volatility of 10percent. The liabilities are expected to increase yearly at a rate of 5 percent and have a variation of 4.5 percent. The correlation coefficient between income from assets and liability growth is 0.7. Determine the 95% risk of surplus of the pension.",
        "output": [
            " To answer the given question, we'll be calculating the 95% risk of surplus of the pension fund using the variables provided. The concept involves understanding the properties of normal distributions and the volatilities provided. Here's how you can create a Python program to solve this:\n\n```python\nimport numpy as np\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    assets = 150e6\n    liabilities = 135e6\n    expected_return_assets = 0.075\n    volatility_assets = 0.10\n    expected_growth_liabilities = 0.05\n    volatility_liabilities = 0.045\n    correlation = 0.7\n    confidence_level = 0.95\n\n    # Calculate the standard deviation of the surplus\n    covariance = correlation * volatility_assets * volatility_liabilities\n    variance_surplus = (volatility_assets ** 2 + volatility_liabilities ** 2 - 2 * covariance)\n    std_dev_surplus = np.sqrt(variance_surplus)\n\n    # Calculate the expected surplus\n    expected_surplus = assets * expected_return_assets - liabilities * expected_growth_liabilities\n\n    # Calculate the z-score for the 95% confidence interval\n    z_score = norm.ppf(confidence_level)\n\n    # Calculate the 95% risk of surplus\n    risk_of_surplus = expected_surplus - z_score * std_dev_surplus\n\n    # return answer\n    return risk_of_surplus\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The 95% risk of surplus of the pension is: {answer/1e6:.2f} million dollars\")\n```\n\nThis solution covers the following steps:\n\n1. Defines the given financial parameters.\n2. Calculates the standard deviation of the surplus using the covariance formula.\n3. Determines the expected surplus.\n4. Uses the normal distribution to"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-514",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is thinking about incorporating ABC Corp. into his investment portfolio. The latest dividend payment by the company is 1.45 per share. He observes that ABC Corp.'s dividends have risen at a standard pace of 6 percent. John concluded that the required return on equity for ABC Corp. is 12%. Can you estimate the value of ABC Corp.'s stock based on this information?",
        "output": [
            " Certainly! To answer the given question, we need to use the Gordon Growth Model (GGM), which is a method used to value a stock by assuming a constant growth rate for dividends. The formula for the GGM is:\n\n\\[ \\text{Stock Value} = \\frac{\\text{Dividend per Share}}{r - g} \\]\n\nWhere:\n- \\( \\text{Dividend per Share} \\) is the latest dividend payment.\n- \\( r \\) is the required return on equity.\n- \\( g \\) is the growth rate of dividends.\n\nLet's implement this in the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend_per_share = 1.45  # Latest dividend payment\n    growth_rate = 0.06  # Growth rate of dividends\n    required_return = 0.12  # Required return on equity\n\n    # Do math calculation to get the answer\n    stock_value = dividend_per_share / (required_return - growth_rate)\n\n    # return answer\n    return stock_value\n```\n\nThis program defines the required variables, performs the calculation using the Gordon Growth Model, and returns the estimated value of ABC Corp.'s stock."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-515",
        "python_solution": "",
        "ground_truth": null,
        "question": "A banker's acceptance with a term of 150 days has a quoted discount rate of 5.62% based on a 360-day year. What is the bond equivalent yield?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    term_days = 150\n    quoted_rate = 0.0562  # 5.62% as a decimal\n    days_in_year = 360\n\n    # Do math calculation to get the answer\n    bond_equivalent_yield = (1 + (quoted_rate * (term_days / days_in_year))) ** (days_in_year / term_days) - 1\n\n    return bond_equivalent_yield\n\n# Running the solution function to get the result\nprint(solution())\n```\n\nThis code defines the term of the banker's acceptance (150 days), the quoted discount rate (5.62%), and the number of days in the year (360). It then calculates the bond equivalent yield using the appropriate formula and returns the result. The `print(solution())` line at the end runs the function to display the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-516",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine the following 6x9 FRA, where the purchaser of the FRA consents to a contract rate of 6.35% on a notional value of 10 million USD. Assume a 30/360 day count basis. What would be the settlement sum for the vendor if the settlement rate is 6.85%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    contract_rate = 6.35 / 100  # Contract rate in percentage\n    settlement_rate = 6.85 / 100  # Settlement rate in percentage\n    notional_value = 10000000  # Notional value in USD\n    days = 6 * 30  # 6 months using 30/360 day count convention\n\n    # Do math calculation to get the answer\n    settlement_sum = (settlement_rate - contract_rate) * notional_value * (days / 360)\n\n    # return answer\n    return settlement_sum\n\n# Calculate the settlement sum\nprint(solution())\n```\n\nThis program defines the relevant financial values and performs the necessary calculations to compute the settlement sum for the vendor. The result is then returned and printed."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-517",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Orion Enterprises recently released deferred coupon bonds of $100 par value that will not make any coupon payments for the following four years, and will then offer regular yearly coupon payments at an 8% rate until the end of their 10-year maturity period, and these bonds are currently valued at $87.00, what is the yield to maturity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Par value of the bond\n    market_price = 87  # Current market price of the bond\n    coupon_rate = 0.08  # Yearly coupon rate\n    years_maturity = 10  # Total years to maturity\n    years_deferred = 4  # Years with no coupon payments\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate  # Yearly coupon payment after deferred period\n    periods_remaining = years_maturity - years_deferred  # Number of periods with coupon payments\n    coupon_payments_value = (coupon_payment * ((1 - (1 + YTM) ** -periods_remaining) / YTM)) * (1 + YTM) ** -years_deferred\n    face_value_at_maturity = face_value * (1 + YTM) ** -years_maturity\n\n    # Solve for YTM (Yield to Maturity) using Newton's method or other numerical methods\n    YTM = 0.05  # initial guess for the YTM\n    tolerance = 0.0001\n    iterations = 10000\n    i = 0\n\n    while i < iterations:\n        function_value = market_price - (coupon_payments_value + face_value_at_maturity)\n        derivative = (face_value * years_maturity * (1 + YTM) ** (-years_maturity - 1)) - (coupon_payment * ((periods_remaining*(1 + YTM) ** (-periods_remaining - 1)) - ((1 + YTM) ** -periods_remaining - 1) / (YTM ** 2)))\n\n        YTM_new = YTM - function_value / derivative\n\n        if abs(YTM_new - YTM) < tolerance:\n            break\n\n        YTM = YTM_new\n        i += 1\n\n    # return answer\n    return YTM * 100\n\nprint(solution"
        ]
    },
    {
        "tables": [
            "| Year | EPS  | DPS  | ROE |\n|------|------|------|-----|\n| 2009 | $3.20| $1.92| 12% |\n| 2008 | $3.60| $1.85| 17% |\n| 2007 | $2.44| $1.74| 13% |\n| 2006 | $2.08| $1.62| 15% |\n| 2005 | $2.76| $1.35| 11% |\n| 2004 | $2.25| $1.25| 9%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-518",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the identical information below and the same perpetual growth model, if a trader uses the mean value of the dividend growth rate between 2004 and 2009, along with the sustainable growth rate for 2009 to predict growth, and if the trader's required return is at 15 percent, what would be the anticipated value of the enterprise's common shares?",
        "output": [
            " Sure, let's break down the problem and create a Python program to find the anticipated value of the enterprise's common shares.\n\nThe anticipated value of the shares can be calculated using the Gordon Growth Model (GGM), which is defined as:\n\\[ \\text{Intrinsic Value} = \\frac{D_0 \\times (1 + g)}{r - g} \\]\nwhere:\n- \\( D_0 \\) is the current annual dividend per share.\n- \\( g \\) is the growth rate of dividends.\n- \\( r \\) is the required return rate.\n\nHere's how to write the program step by step:\n\n1. Calculate the average dividend growth rate between 2004 and 2009.\n2. Use the sustainable growth rate for 2009 and the average growth rate to find the growth rate \\( g \\).\n3. Apply the Gordon Growth Model formula with the required return rate \\( r \\).\n\nLet's implement this in the Python solution:\n```python\ndef solution():\n    # Define variables name and value\n    dividends = {\n        2009: 1.92,\n        2008: 1.85,\n        2007: 1.74,\n        2006: 1.62,\n        2005: 1.35,\n        2004: 1.25\n    }\n\n    # Calculate dividend growth rates\n    growth_rates = []\n    for year in range(2005, 2010):\n        growth_rate = (dividends[year] / dividends[year - 1]) - 1\n        growth_rates.append(growth_rate)\n\n    # Compute the average growth rate\n    avg_growth_rate = sum(growth_rates) / len(growth_rates)\n\n    # Assume the sustainable growth rate for 2009 as 12% (based on provided ROE), or adjust as necessary\n    sustainable_growth_rate = 0.12\n\n    # Use the required return rate provided by the trader\n    required_return_rate = 0.15"
        ]
    },
    {
        "tables": [
            "|  |  |\n|---|---|\n| Acquisition cost | $60,000,000 |\n| Acquisition date | 1 January 2012 |\n| Patent expiration date | 31 December 2017 |\n| Total plant capacity of patented product | 60,000 units per year |\n| Production of patented product in fiscal year ended 31 December 2012 | 25,000 units |\n| Expected production of patented product during life of the patent | 225,000 units |"
        ],
        "topic": "Accounting",
        "question_id": "test-519",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following information pertains to a patent owned by TDC Corporation. If we use the units-of-production depreciation method, what will be the first year's amortization cost?",
        "output": [
            " Sure, I can help you with that. Here is the Python program to calculate the first year's amortization cost using the units-of-production depreciation method:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 60000000\n    total_production = 225000\n    first_year_production = 25000\n\n    # Do math calculation to get the answer\n    amortization_per_unit = acquisition_cost / total_production\n    first_year_amortization = amortization_per_unit * first_year_production\n\n    # return answer\n    return first_year_amortization\n\n# Example of running the function and printing the result\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program calculates the first year's amortization cost by first determining the amortization cost per unit and then applying it to the first year's production."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-520",
        "python_solution": "",
        "ground_truth": null,
        "question": "Marie, the portfolio manager of BC pension, is currently contemplating on incorporating NY Inc. (New York Stock Exchange: NY) into her portfolio. After a thorough evaluation of the company and its competition, she discerns that the company's growth rate steadily decreases from 12 percent in the initial year to 6 percent in year five. The total dividends paid by NY in 2017 amounted to $0.22. The required return is calculated to be at 9 percent. What is the stock's inherent worth?",
        "output": [
            " Certainly! Here's a Python program to calculate the stock's inherent worth given the conditions in the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_growth_rate = 0.12\n    final_growth_rate = 0.06\n    total_years = 5\n    dividends_paid_2017 = 0.22\n    required_return = 0.09\n\n    # List to hold the growth rates for each year\n    growth_rates = [initial_growth_rate - (initial_growth_rate - final_growth_rate) * (i / (total_years - 1)) for i in range(total_years)]\n\n    # Calculate the total present value of dividends over the 5 years\n    total_present_value = 0\n    dividend = dividends_paid_2017\n\n    for i in range(total_years):\n        dividend *= (1 + growth_rates[i])\n        total_present_value += dividend / (1 + required_return) ** (i + 1)\n\n    # Calculate the terminal value after year 5\n    terminal_value = dividend * (1 + final_growth_rate) / (required_return - final_growth_rate)\n    present_value_terminal = terminal_value / (1 + required_return) ** total_years\n\n    # Calculate the inherent worth of the stock\n    inherent_worth = total_present_value + present_value_terminal\n\n    # return inherent worth\n    return inherent_worth\n```\n\nThis program calculates the inherent worth of the stock by following these steps:\n1. Defines the necessary variables.\n2. Computes the growth rates for each year as the growth rate decreases linearly from 12% to 6%.\n3. Computes the present value of the dividends for each year.\n4. Computes the terminal value of the stock after year 5 assuming a constant growth rate of 6%.\n5. Computes the present value of the terminal value.\n6. Sums the present values of the dividends and the terminal value"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-521",
        "python_solution": "",
        "ground_truth": null,
        "question": "The expected return for Portfolio C is 9% with a volatility of 20%. Meanwhile, the expected return for the market index is forecasted to be 7% with a volatility of 15%, and the correlation between Portfolio C and the market is anticipated to be 0.9. Given that the risk-free rate is observed to be 3%, can you calculate the Jensen's alpha for Portfolio C?",
        "output": [
            " Certainly! To calculate Jensen's alpha for Portfolio C, we need to use the formula:\n\n\\[ \\text{Jensen's alpha} = \\text{Portfolio Return} - \\text{Risk-Free Rate} - \\beta \\times (\\text{Market Return} - \\text{Risk-Free Rate}) \\]\n\nWhere,\n\\[ \\beta = \\frac{\\text{Covariance}(r_p, r_m)}{\\text{Variance}(r_m)} \\]\n\nGiven the values:\n- Expected return for Portfolio C (\\( r_p \\)) = 9%\n- Volatility for Portfolio C (\\( \\sigma_p \\)) = 20%\n- Expected return for the market index (\\( r_m \\)) = 7%\n- Volatility for the market (\\( \\sigma_m \\)) = 15%\n- Correlation between Portfolio C and the market (\\( \\rho \\)) = 0.9\n- Risk-free rate (\\( r_f \\)) = 3%\n\nWe first calculate \\( \\beta \\) using the covariance and variance:\n\\[ \\text{Covariance}(r_p, r_m) = \\rho \\times \\sigma_p \\times \\sigma_m \\]\n\\[ \\text{Variance}(r_m) = \\sigma_m^2 \\]\n\nThen,\n\\[ \\beta = \\frac{\\text{Covariance}(r_p, r_m)}{\\text{Variance}(r_m)} \\]\n\nHere\u2019s the complete Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    r_p = 0.09     # Expected return for Portfolio C\n    sigma_p = 0.20 # Volatility for Portfolio C\n    r_m = 0.07     # Expected return for Market\n    sigma_m = 0.15 # Volatility for Market\n    rho = 0.9      # Correlation coefficient between Portfolio C and Market\n    r_f = 0.03     # Risk-free rate\n\n    # Calculate the covariance and variance\n    covariance_rp_"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-522",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ is a firm that trades in derivatives. This firm offloaded a five-year CDS protection on Firm E worth $10 million. The duration of this CDS contract is 3.5 years. After a quarter of a year, the credit spread on Firm E diminished from 225bps to 165 bps. Based on the details provided, how much profit can be expected if XYZ establishes a counterbalancing position?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    notional_amount = 10000000  # $10 million\n    original_duration = 3.5  # in years\n    spread_decrease = 0.0225 - 0.0165  # 225bps to 165bps (converted to decimal)\n    time_elapsed = 0.25  # a quarter of a year\n\n    # Calculate the impact of the duration, spread decrease and time on the profit\n    duration_impact = original_duration - time_elapsed  # remaining duration\n    profit = notional_amount * spread_decrease * duration_impact\n\n    # return answer\n    return profit\n```\n\nThe above Python program calculates the expected profit based on the provided details. To execute this program, you simply call the `solution()` function and it will return the profit amount."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-523",
        "python_solution": "",
        "ground_truth": null,
        "question": "Due to marketing consumer staples, Bayside Essentials (BE) is capable of utilizing significant debt in its capital structure; in particular, 90 percent of the company's total assets of $450,000,000 are financed with debt capital. Its debt costs are 8 percent before taxes, and its equity capital costs are 12 percent. BE attained a pretax income of $5.1 million in 2006 and was taxed at a rate of 40 percent. What was BE's residual income?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets = 450000000\n    debt_proportion = 0.90\n    total_debt = total_assets * debt_proportion\n    debt_cost = 0.08\n    equity_cost = 0.12\n    pretax_income = 5100000\n    tax_rate = 0.40\n\n    # Calculate equity\n    equity = total_assets - total_debt\n\n    # Calculate after-tax income\n    after_tax_income = pretax_income * (1 - tax_rate)\n\n    # Calculate capital charge\n    capital_charge = (total_debt * debt_cost * (1 - tax_rate)) + (equity * equity_cost)\n\n    # Calculate residual income\n    residual_income = after_tax_income - capital_charge\n\n    # return answer\n    return residual_income\n```\n\nYou can run this program to obtain the residual income of Bayside Essentials (BE) based on the given information."
        ]
    },
    {
        "tables": [
            "| Interest Rate Assumption | Present Value of Liabilities |\n|-------------------------|-------------------------------|\n| 6%                      | CAD 510.1 million           |\n| 7%                      | CAD 455.4 million           |\n| 8%                      | CAD 373.6 million           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-524",
        "python_solution": "",
        "ground_truth": null,
        "question": "A pension fund manager from Canada is trying to gauge the impact of changes in market interest rates on his pension obligations. He calculates the present value of these obligations under three potential interest rate circumstances: a foundational rate of 7%, a rate boosted by 100 basis points to 8%, and a rate lowered by 100 basis points to 6%. Based on the analysis outcomes provided below, what is the effective duration of the liabilities of the pension fund?",
        "output": [
            " To calculate the effective duration of the liabilities, we can use the formula for Macaulay's Duration as an approximation:\n\n\\[ \\text{Duration} = \\frac{PV_{-} - PV_{+}}{2 \\cdot PV_{0} \\cdot \\Delta y} \\]\n\nWhere:\n- \\( PV_{-} \\) is the Present Value at the lower interest rate (6%).\n- \\( PV_{+} \\) is the Present Value at the higher interest rate (8%).\n- \\( PV_{0} \\) is the Present Value at the central interest rate (7%).\n- \\( \\Delta y \\) is the change in the interest rate (0.01 for a 1% change).\n\nLet's implement this in Python:\n\n```python\ndef solution():\n    # Define variables name and value\n    PV0 = 455.4  # Present value at 7%\n    PV_minus = 510.1  # Present value at 6%\n    PV_plus = 373.6  # Present value at 8%\n    delta_y = 0.01  # 1% change in interest rate\n\n    # Do math calculation to get the answer\n    duration = (PV_minus - PV_plus) / (2 * PV0 * delta_y)\n\n    # return answer\n    return duration\n\n# To call the solution and print the result\nprint(solution())\n```\n\nThis program will calculate the effective duration of the liabilities of the pension fund based on the provided present values and the interest rates."
        ]
    },
    {
        "tables": [
            "| Path | Time 0 | Time 1 | Time 2 |\n|------|--------|--------|--------|\n| 1    | 1.500% | 2.8853%| 2.7183%|\n| 2    | 1.500  | 2.8853 | 1.6487 |\n| 3    | 1.500  | 1.7500 | 1.6487 |\n| 4    | 1.500  | 1.7500 | 1.0000 |",
            "| Bond   | Maturity | Coupon Rate |\n|--------|----------|-------------|\n| Bond C | 2 years  | 2.5%        |\n| Bond D | 3 years  | 3.0%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-525",
        "python_solution": "",
        "ground_truth": null,
        "question": "In his discussion about pathwise valuations being an alternative way of valuing bonds through a binomial interest rate tree, Thompson describes how Peterson uses the binomial interest rate tree to predict the potential interest rate paths for Bond M shown in Exhibit 9. Referencing Exhibits 6 and 9, what's the current value of Bond M's cash flows along Path 2?",
        "output": [
            " To solve this problem, we need to understand that the value of Bond M's cash flows along Path 2 can be calculated using the discounted cash flow method. The interest rates at each time period along Path 2 are given, and we need to discount the cash flows using these rates.\n\nHere is the step-by-step approach to calculate the current value of Bond M's cash flows along Path 2:\n\n1. Determine the cash flows of Bond M.\n2. Discount each cash flow by the corresponding interest rate along Path 2.\n3. Sum the discounted cash flows to get the current value.\n\nLet's assume Bond M has a coupon rate of 2.5% and a maturity of 2 years (for the purpose of this example). The face value of the bond is typically $1,000.\n\nThe cash flows of Bond M are:\n- Coupon payments: 2.5% of $1,000 = $25 per year.\n- Face value at maturity: $1,000.\n\nThe interest rates along Path 2 are:\n- Time 0: 1.500%\n- Time 1: 2.8853%\n- Time 2: 1.6487%\n\nHere is the Python program to calculate the current value of Bond M's cash flows along Path 2:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 2.5 / 100\n    coupon_payment = face_value * coupon_rate\n    rates_path_2 = [1.500 / 100, 2.8853 / 100, 1.6487 / 100]\n\n    # Calculate the discounted cash flows\n    discounted_cash_flow_1 = coupon_payment / (1 + rates_path_2[0])\n    discounted_cash_flow_2 = coupon_payment / ((1 + rates_path_2[0]) * (1 + rates_path_2[1]))\n    discounted_face_value = (face_value + coupon_payment"
        ]
    },
    {
        "tables": [
            "\n| Year | Net Return (%) |\n|------|----------------|\n| 2008 | -34.8          |\n| 2009 | 32.2           |\n| 2010 | 11.1           |\n| 2011 | -1.4           |\n"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-526",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the 2012 return required to realize a trailing five-year geometric mean annualized return of 5% at the conclusion of 2012 for a wealth management company that produced the following annual returns in their US large-cap equity portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [-0.348, 0.322, 0.111, -0.014]\n    target_geometric_mean = 1.05  # 5% target return compounded annually for 5 years\n\n    # Calculate the product of (1 + return) for the first four years\n    product_of_returns = 1\n    for r in returns:\n        product_of_returns *= (1 + r)\n\n    # The target product of (1 + return) for 5 years is (target_geometric_mean)^5\n    target_product_of_returns = target_geometric_mean ** 5\n\n    # To find the required 2012 return (R), solve for R such that\n    # product_of_returns * (1 + R) = target_product_of_returns\n    required_return = target_product_of_returns / product_of_returns - 1\n\n    # Return the answer\n    return required_return\n\n# Run the solution function and print the result\nprint(solution())\n```\n\nThis program calculates the required return in 2012 to achieve a trailing five-year geometric mean annualized return of 5% given the past annual returns. The program first calculates the product of (1 + return) for the first four years. Then it calculates the target product of (1 + return) for the five-year period. Finally, it solves for the required return in 2012 and returns that value."
        ]
    },
    {
        "tables": [
            "|                        | Income Statement | Balance Sheet Changes                               |\n|------------------------|------------------|-----------------------------------------------------|\n| Revenue                | $22,100          | accounts receivable +$550<br> inventory -131<br> prepaid expense +6<br> accounts payable +1,230   |\n| Cost of goods sold     | $16,230          |                                                     |\n| Other operating expense| $508             |                                                     |\n| Depreciation expense   | $1,500           |                                                     |"
        ],
        "topic": "Accounting",
        "question_id": "test-527",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the financial records of Corporation X provided, what is the quantity of cash disbursed to vendors in 2017?",
        "output": [
            " To answer the question about the quantity of cash disbursed to vendors in 2017, we need to use the information provided in the table. Specifically, we will use changes in the balance sheet items related to accounts payable and the inventory.\n\nHere is the Python program to calculate the answer:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_expenses = 16230  # Cost of goods sold\n    other_operating_expense = 508\n    depreciation_expense = 1500\n    accounts_payable_change = 1230  # Increase in accounts payable\n    inventory_change = -131  # Decrease in inventory\n\n    # Do math calculation to get the answer\n    cash_paid_to_vendors = total_expenses - depreciation_expense - accounts_payable_change + other_operating_expense - inventory_change\n\n    # return answer\n    return cash_paid_to_vendors\n```\n\nThis code defines the necessary variables based on the given financial data and calculates the cash disbursed to vendors in 2017. Here's a breakdown of the calculations:\n- The total expenses paid to vendors include the cost of goods sold, other operating expenses, and depreciation expense.\n- We adjust for the change in accounts payable because an increase in accounts payable implies that some purchases were made on credit.\n- We also adjust for the decrease in inventory because this likely represents goods that were sold and thus imply a decrease in cash spent on purchases.\n\nBy running this program, we will get the cash disbursed to vendors in 2017."
        ]
    },
    {
        "tables": [
            "| Assets                           | 31 Dec 2017 | 31 Dec 2016 |\n|----------------------------------|-------------|-------------|\n| Total current assets             | 11,930      | 11,564      |\n| Total non-current assets         | 30,567      | 32,713      |\n| Total assets                     | 42,497      | 44,277      |\n| Total current liabilities        | 10,210      | 9,674       |\n| Total non-current liabilities    | 6,747       | 8,205       |\n| Total liabilities                | 16,958      | 17,880      |\n| Issued capital                   | 1,229       | 1,229       |\n| Share premium                    | 570         | 599         |\n| Retained earnings                | 24,794      | 22,302      |\n| Other components of equity       | 508         | 3,346       |\n| Treasury shares                  | (1,591)     | (1,099)     |\n| Equity attributable to owners of parent | 25,509  | 26,376  |\n| Non-controlling interests        | 31          | 21          |\n| Total equity                     | 25,540      | 26,397      |\n| Total equity and liabilities     | \u00a342,497     | \u00a344,277     |"
        ],
        "topic": "Accounting",
        "question_id": "test-528",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the financial leverage ratio for SAP Group on December 31, 2017, based on the data provided in the Exhibit?",
        "output": [
            " To calculate the financial leverage ratio, we use the formula:\n\n\\[ \\text{Financial Leverage Ratio} = \\frac{\\text{Total Assets}}{\\text{Total Equity}} \\]\n\nGiven the values from the table for December 31, 2017:\n- Total Assets = \u00a342,497\n- Total Equity = \u00a325,540\n\nHere\u2019s the Python program to calculate the financial leverage ratio:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 42497\n    total_equity = 25540\n\n    # Do math calculation to get the answer\n    financial_leverage_ratio = total_assets / total_equity\n\n    # return answer\n    return financial_leverage_ratio\n```\n\nThe solution function will return the financial leverage ratio for SAP Group on December 31, 2017, based on the data provided."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-529",
        "python_solution": "",
        "ground_truth": null,
        "question": "Currently, XYZ is rated A in terms of credit and has issued two-year zero-coupon bonds. The market anticipates that the company will either maintain its A rating, be downgraded to BBB, or upgraded to AA in the span of a year with chances of 85%, 10%, and 5%, respectively. Presuming a flat risk-free yield curve with a 1% value, and credit spreads of 70, 100 and 300 basis points for the AA, A, and BBB ratings respectively, with all interest rates compounding annually, what is the predicted worth of a zero-coupon bond after a year?",
        "output": [
            " Certainly! Below is a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    prob_A = 0.85 # Probability of staying at A rating\n    prob_BBB = 0.10 # Probability of being downgraded to BBB\n    prob_AA = 0.05 # Probability of being upgraded to AA\n\n    risk_free_rate = 0.01 # Risk-free yield curve\n    spread_AA = 0.007 # Credit spread for AA rating in basis points\n    spread_A = 0.01 # Credit spread for A rating in basis points\n    spread_BBB = 0.03 # Credit spread for BBB rating in basis points\n\n    # Calculate the corresponding interest rates\n    rate_AA = risk_free_rate + spread_AA\n    rate_A = risk_free_rate + spread_A\n    rate_BBB = risk_free_rate + spread_BBB\n\n    # Calculate the present value of 1 dollar for each rating scenario\n    pv_AA = 1 / (1 + rate_AA)\n    pv_A = 1 / (1 + rate_A)\n    pv_BBB = 1 / (1 + rate_BBB)\n\n    # Calculate the expected value of the bond after a year\n    expected_value = prob_AA * pv_AA + prob_A * pv_A + prob_BBB * pv_BBB\n\n    # return answer\n    return expected_value\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The predicted worth of a zero-coupon bond after a year is: {answer:.4f}\")\n```\n\nThis program calculates the expected worth of the zero-coupon bond after one year by considering the different probabilities of the company's credit rating changes and the corresponding interest rates. The result is then printed to four decimal places."
        ]
    },
    {
        "tables": [
            "| Asset Class     | Geometric Return(%) |\n| --------------  | ------------------- |\n| Equities        | 8.0                 |\n| Corporate Bonds | 6.5                 |\n| Treasury bills  | 2.5                 |\n| Inflation       | 2.1                 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-530",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the reported historical geometric returns for the real rate of return for equities according to the expert?",
        "output": [
            " To calculate the real rate of return for equities, we need to subtract the inflation rate from the nominal geometric return of equities. Here's the Python program to calculate and return the real rate of return:\n\n```python\ndef solution():\n    # Define variables name and value\n    equities_return = 8.0  # Nominal return on equities\n    inflation = 2.1        # Inflation rate\n\n    # Do math calculation to get the answer\n    real_rate_of_return = equities_return - inflation\n\n    # return answer\n    return real_rate_of_return\n\n# Testing the function\nprint(solution())\n```\n\nRunning this program will give you the reported historical geometric real rate of return for equities."
        ]
    },
    {
        "tables": [
            "| | Roil =30% | Roil=15% | Roil=10% |\n| - | - | - | - |\n| RMkt=25% | 30% | 0 | 0 |\n| RMkt=20% | 0 | 40% | 0 |\n| RMkt=0% | 0 | 0 | 30% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-531",
        "python_solution": "",
        "ground_truth": null,
        "question": "Analyst John has compiled the following data for the return on the market and the return on Crude Oil. Can you compute the covariance of returns between the market and Crude Oil? Probability Matrix",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    roil_values = [0.30, 0.15, 0.10]\n    rmkt_values = [0.25, 0.20, 0.00]\n    probabilities = [\n        [0.30, 0.00, 0.00],\n        [0.00, 0.40, 0.00],\n        [0.00, 0.00, 0.30]\n    ]\n\n    # Calculate expected return on oil (E(Roil)) and expected return on market (E(Rmkt))\n    E_roil = sum(roil * prob for prob_list in probabilities for roil, prob in zip(roil_values, prob_list))\n    E_rmkt = sum(rmkt * prob for prob_list in probabilities for rmkt, prob in zip(rmkt_values, prob_list))\n\n    # Calculate Covariance\n    covariance = 0\n    for i in range(len(roil_values)):\n        for j in range(len(rmkt_values)):\n            covariance += probabilities[i][j] * (roil_values[i] - E_roil) * (rmkt_values[i] - E_rmkt)\n\n    # return the covariance\n    return covariance\n```\n\nThis program calculates the covariance of returns between the market and Crude Oil based on the given probability matrix and return values."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-532",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond with a Macaulay duration of 6.0, modified duration of 6.5, and convexity of 50.25 experiences a decrease in yield to maturity by 50 bps, what will be the anticipated percentage change in its price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    macaulay_duration = 6.0\n    modified_duration = 6.5\n    convexity = 50.25\n    yield_change = -0.50 / 100  # 50 basis points as a decimal\n\n    # Do math calculation to get the answer\n    price_change_from_duration = -modified_duration * yield_change\n    price_change_from_convexity = 0.5 * convexity * (yield_change ** 2)\n\n    total_price_change = price_change_from_duration + price_change_from_convexity\n\n    # return answer\n    return total_price_change * 100  # Returning as percentage change\n\n# Example call to the function to get the answer\nprint(solution())\n```\n\nThis program calculates the anticipated percentage change in the price of a bond when the yield to maturity decreases by 50 basis points (bps). It uses the formulas for modified duration and convexity to estimate the price change. The result is returned as a percentage change."
        ]
    },
    {
        "tables": [
            "| Hi | P(Hi|Good) | P(Hi|Poor) |\n|---|------------|------------|\n| 0 | 0.1           | 0.5            |\n| 10 | 0.3           | 0.3            |\n| 20 | 0.6           | 0.2            |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-533",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that there's a 0.4 chance of a strong economy and a 0.6 chance of a weak economy. The table below shows the conditional probabilities of product Z's profit. What will be the anticipated profit of product Z?",
        "output": [
            " Sure, to solve this problem programmatically, we can define the given probabilities and calculate the expected profit by weighting each possible profit by its combined probability of occurring given a strong or weak economy. Here is the corresponding Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    p_strong_economy = 0.4\n    p_weak_economy = 0.6\n\n    p_hi_0_good = 0.1\n    p_hi_10_good = 0.3\n    p_hi_20_good = 0.6\n\n    p_hi_0_poor = 0.5\n    p_hi_10_poor = 0.3\n    p_hi_20_poor = 0.2\n\n    hi_values = [0, 10, 20]\n\n    # Calculate anticipated profit\n    anticipated_profit = 0\n    for hi in hi_values:\n        if hi == 0:\n            p_hi_good = p_hi_0_good\n            p_hi_poor = p_hi_0_poor\n        elif hi == 10:\n            p_hi_good = p_hi_10_good\n            p_hi_poor = p_hi_10_poor\n        elif hi == 20:\n            p_hi_good = p_hi_20_good\n            p_hi_poor = p_hi_20_poor\n\n        anticipated_profit += hi * (p_hi_good * p_strong_economy + p_hi_poor * p_weak_economy)\n\n    return anticipated_profit\n\n# Test the solution function\nprint(solution())\n```\n\nThis program calculates the anticipated profit for product Z by looping through each possible profit value (0, 10, and 20), considering the probabilities of these values given a strong and weak economy, and their respective probabilities for each scenario. The result is the expected value of the profit."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-534",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that ABC Corporation saw a rise in operating income by 16%, and a 10% increase in units sold. If the financial leverage degree (DFL) of ABC Corporation is 1.5, what is most likely the degree of total leverage (DTL) for ABC Corporation?",
        "output": [
            " Sure, here is the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    operating_income_increase = 0.16  # 16% increase in operating income\n    units_sold_increase = 0.10         # 10% increase in units sold\n    DFL = 1.5                          # Financial leverage degree\n\n    # Do math calculation to get the answer\n    DOL = operating_income_increase / units_sold_increase\n    DTL = DOL * DFL\n\n    # return answer\n    return DTL\n```\n\nThis program first calculates the degree of operating leverage (DOL) using the given increase in operating income and units sold. Then it calculates the degree of total leverage (DTL) using the DOL and the financial leverage degree (DFL). Finally, it returns the DTL as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-535",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portfolio is made up of options on Apple and Verizon. The Apple options have a delta of 1000, while the Verizon options have a delta of 20000. The share price of Apple is $120, and Verizon's share price is $30. If we assume that the daily volatility of Apple is 2% and the daily volatility of Verizon is 1%, and the correlation between the daily changes is 0.3, what is the 5-day 95% VaR?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    delta_apple = 1000\n    delta_verizon = 20000\n    price_apple = 120\n    price_verizon = 30\n    volatility_apple = 0.02\n    volatility_verizon = 0.01\n    correlation = 0.3\n    confidence_level = 0.95\n    time_horizon = 5\n\n    # Do math calculation to get the answer\n    portfolio_value_apple = delta_apple * price_apple\n    portfolio_value_verizon = delta_verizon * price_verizon\n\n    volatility_portfolio = (\n        (volatility_apple * portfolio_value_apple) ** 2 +\n        (volatility_verizon * portfolio_value_verizon) ** 2 +\n        2 * correlation *\n        (volatility_apple * portfolio_value_apple) *\n        (volatility_verizon * portfolio_value_verizon)\n    ) ** 0.5\n\n    from scipy.stats import norm\n    z_score = norm.ppf(1 - confidence_level)\n    var_five_day = portfolio_value + z_score * volatility_portfolio * (time_horizon ** 0.5)\n\n    # return answer\n    return var_five_day\n```"
        ]
    },
    {
        "tables": [
            "| CompanyM            | $(millions) |\n|---------------------|-------------|\n| Operating income (EBIT) | 2,000       |\n| Depreciation expense     | 750         |\n| Interest expense         | 300         |\n| Increase in accounts receivable | 1,000   |\n| Increase in inventories  | 100         |\n| Increase in accounts payable | 500     |\n| Purchases of PP&E        | 600         |\n| Borrowing (repayment)    | 400         |\n| Tax rate                 | 30%         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-536",
        "python_solution": "",
        "ground_truth": null,
        "question": "As per the financial report, what is the FCFE for Company N?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    operating_income = 2000\n    depreciation_expense = 750\n    interest_expense = 300\n    tax_rate = 0.30\n    increase_in_accounts_receivable = 1000\n    increase_in_inventories = 100\n    increase_in_accounts_payable = 500\n    purchases_of_ppe = 600\n    borrowing = -400  # Assuming borrowing is a cash inflow, it is negative since it is a repayment\n\n    # Calculate net income\n    net_income = operating_income - depreciation_expense - interest_expense - (operating_income - depreciation_expense - interest_expense) * tax_rate\n\n    # Calculate cash flow from assets\n    cash_flow_from_assets = net_income + depreciation_expense - increase_in_accounts_receivable - increase_in_inventories + increase_in_accounts_payable - purchases_of_ppe\n\n    # Calculate cash flow to creditors\n    cash_flow_to_creditors = -borrowing\n\n    # Calculate FCFE (Free Cash Flow to Equity)\n    fcfe = cash_flow_from_assets - cash_flow_to_creditors\n\n    # Return answer\n    return fcfe\n\n# Call the solution function to get the answer\nfcfe_result = solution()\nprint(\"FCFE for Company N is:\", fcfe_result)\n```"
        ]
    },
    {
        "tables": [
            "|         |     |\n| ------- | --- |\n| ROE     | 10% |\n| Growth rate (first three years) | 6.0% |\n| Growth rate (after first three years) | 4.0% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-537",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is assessing the sustainable growth rate of Firm M and has gathered the following data in the provided table. What is the dividend payout ratio of Firm M?",
        "output": [
            " Certainly! To determine the dividend payout ratio of Firm M, we need to use the formula for the sustainable growth rate (SGR), which is derived from the return on equity (ROE) and the dividend payout ratio. The formula for the sustainable growth rate is:\n\n\\[ SGR = ROE \\times (1 - \\text{Dividend Payout Ratio}) \\]\n\nGiven that the sustainable growth rate for the first three years is 6%, we can solve for the dividend payout ratio. Here is the Python code to do that:\n\n```python\ndef solution():\n    # Define variables name and value\n    ROE = 0.10  # ROE is 10%\n    SGR = 0.06  # Growth rate (first three years) is 6%\n\n    # Do math calculation to get the answer\n    dividend_payout_ratio = 1 - (SGR / ROE)\n\n    # return answer\n    return dividend_payout_ratio\n\n# Execute the solution and print the result\nresult = solution()\nprint(f\"The dividend payout ratio of Firm M is {result:.2%}\")\n```\n\nIn this program, we define the ROE and the SGR, and then calculate the dividend payout ratio using the formula. The result is returned and printed in a percentage format."
        ]
    },
    {
        "tables": [
            "| Maturity | Coupon | Price |\n|---|---|---|\n| 6 months | 4.5% | 101.47 |\n| 1 year | 6.0% | 102.75 |\n| 2 years | 7.0% | 100.32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-538",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the data table providing details about three bonds with twice-yearly coupon payments, what is the discount factor for d(1)?",
        "output": [
            " To calculate the discount factor \\( d(1) \\), we need to use the information provided for the bond maturing in 6 months, which has twice-yearly coupon payments. The formula to calculate the discount factor using bond prices is derived from the basic principles of bond pricing.\n\nFor a bond with twice-yearly coupon payments, the price \\( P \\) can be expressed as:\n\n\\[ P = \\frac{C}{2} \\cdot d(1) + F \\cdot d(2) \\]\n\nWhere:\n- \\( P \\) is the price of the bond.\n- \\( C \\) is the annual coupon payment.\n- \\( d(1) \\) is the discount factor for the first period.\n- \\( F \\) is the face value, which is typically \\(100\\).\n\nGiven the bond price \\( P = 101.47 \\), the coupon rate of \\( 4.5\\% \\), and face value of \\(100\\), we can solve for the discount factor \\( d(1) \\).\n\nFor the bond maturing in 6 months:\n- The annual coupon payment \\( C \\) is \\( 4.5\\% \\) of \\( 100 \\), which is \\( 4.5 \\).\n- The semi-annual coupon payment is \\( \\frac{4.5}{2} = 2.25 \\).\n\nUsing this information, we can set up the equation:\n\n\\[ 101.47 = \\frac{2.25}{2} \\times d(1) + 100 \\times d(2) \\]\n\nHowever, for a 6-month bond, we typically assume \\( d(2) \\) has no influence because the time to maturity is exactly one period. This simplifies the equation to:\n\n\\[ 101.47 = 2.25 \\times d(1) \\]\n\nHere is the Python program to calculate the discount factor \\( d(1) \\):\n\n```python\ndef solution():\n    # Define variables name and value\n    price = 101.47\n    annual_coupon = 4.5 / 100\n    semi_annual_coupon = annual_coupon / 2\n"
        ]
    },
    {
        "tables": [
            "|                    | Maturity (Years) |     |     |     |\n|--------------------|------------------|-----|-----|-----|\n|                    | 1                | 2   | 3   | 4   |\n| Government spot rate | 2.25%           | 2.70% | 3.30% | 4.05% |\n| Swap spread        | 0.25%           | 0.30% | 0.45% | 0.70% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-539",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Johnson collects data on spot rates for current annual-coupon government bonds and swap spreads, as shown in the Exhibit below, and purchased a government bond, he would receive an almost risk-free annualized return. According to the no-arbitrage principle, what could Johnson demonstrate the forward price of a one-year government bond, set to be issued in one year, to be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1_year = 0.0225  # 2.25%\n    spot_rate_2_year = 0.0270  # 2.70%\n\n    # Do math calculation to get the answer\n    # Using the no-arbitrage principle, the forward rate F for one year from one year ahead can be calculated from the one-year and two-year spot rates\n    # Formula: (1 + spot_rate_2_year)^2 = (1 + spot_rate_1_year) * (1 + F)\n    # Solving for F:\n    # (1 + F) = (1 + spot_rate_2_year)^2 / (1 + spot_rate_1_year)\n    # F = [(1 + spot_rate_2_year)^2 / (1 + spot_rate_1_year)] - 1\n    F = ((1 + spot_rate_2_year)**2 / (1 + spot_rate_1_year)) - 1\n\n    # return answer\n    return F * 100  # return as a percentage\n\n# Run the solution function\nresult = solution()\nprint(result)\n```\n\nThis Python program calculates the forward price of a one-year government bond set to be issued in one year based on the provided spot rates, using the no-arbitrage principle. The resulting value will be returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-540",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming equal financing from each source and a marginal tax rate of 30%, what is the weighted average cost of capital (%) if a company's pre-tax costs of debt, preferred stock, and equity are 12%, 14%, and 16%, respectively?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_debt = 0.12  # 12%\n    cost_of_preferred_stock = 0.14  # 14%\n    cost_of_equity = 0.16  # 16%\n    marginal_tax_rate = 0.30  # 30%\n\n    # Since the financing from each source is equal, the weight for each is 1/3\n    weight_debt = weight_preferred_stock = weight_equity = 1/3\n\n    # Calculate the after-tax cost of debt\n    after_tax_cost_of_debt = cost_of_debt * (1 - marginal_tax_rate)\n\n    # Do math calculation to get the answer\n    wacc = (weight_debt * after_tax_cost_of_debt) + (weight_preferred_stock * cost_of_preferred_stock) + (weight_equity * cost_of_equity)\n\n    # Convert the WACC to percentage\n    wacc_percentage = wacc * 100\n\n    # return answer\n    return wacc_percentage\n\n# Example usage\nprint(solution())\n```\n\nExplanation:\n1. The cost of debt, preferred stock, and equity are defined.\n2. The marginal tax rate of 30% is defined.\n3. Since financing from each source is equal, the weight for each source of capital is 1/3.\n4. The after-tax cost of debt is calculated.\n5. The weighted average cost of capital (WACC) is computed by summing the weighted costs of each source of capital.\n6. The WACC is converted to a percentage.\n7. The function returns the WACC as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-541",
        "python_solution": "",
        "ground_truth": null,
        "question": "Several months down the line, Jordan gets a phone call from Fatimah. She has now become a board member of the Polar Foundation for Medical Advancements (PFMA). PFMA was created to fund a range of medical research endeavors. Fatimah is thrilled and requests Jordan to work out the return objective of PFMA's portfolio. Kyoto points out the following:\u2022 PFMA\u2019s main investment goal is to preserve the real purchasing power of its portfolio after distributions.\u2022 The risk-free rate is 4.0%.\u2022 An expected inflation rate is 3.5%.\u2022 The portfolio\u2019s standard deviation is 15.0%.\u2022 The cost of earning investment returns is 50 bp.\u2022 PFMA aims for a 5.5% annual distribution of assets. What is PFMA\u2019s return objective?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04\n    expected_inflation_rate = 0.035\n    portfolio_std_dev = 0.15\n    cost_of_returns = 0.005\n    annual_distribution = 0.055\n\n    # Do math calculation to get the answer\n    real_purchasing_power = risk_free_rate + expected_inflation_rate\n    cost_adjusted_return = real_purchasing_power - cost_of_returns\n    return_objective = cost_adjusted_return + annual_distribution\n\n    # return answer\n    return return_objective\n```\n\nExplanation:\n1. We define all the given parameters (`risk_free_rate`, `expected_inflation_rate`, `portfolio_std_dev`, `cost_of_returns`, and `annual_distribution`).\n2. The main investment goal is to preserve the real purchasing power of its portfolio after distributions. This implies we need to consider the combined effect of risk-free rate and inflation.\n3. Calculate the adjusted return considering the cost of earning investment returns.\n4. Add the annual distribution rate to calculate PFMA's return objective.\n5. The final return objective is returned."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-542",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the second model, given that the present short-term rate stands at 5%, the annual drift is 80bps, and the standard deviation of the short-term rate is 3%. Moreover, consider the ex-post realization of the dw random variable being 0.3. What would the interest rate be in the central node after building a 2-period interest rate tree with yearly periods by the conclusion of the second year?",
        "output": [
            " Certainly! Below is a Python program that calculates the interest rate in the central node after building a 2-period interest rate tree based on the given parameters.\n\n```python\ndef solution():\n    # Define variables name and value\n    current_rate = 0.05  # present short-term rate\n    drift = 0.0080       # annual drift (80bps = 0.8%)\n    sigma = 0.03         # standard deviation of the short-term rate\n    dw = 0.3             # ex-post realization of the dw random variable\n\n    # Do math calculation to get the answer\n    # Calculate the new rate using the Hull-White model for short rate with one step\n    new_rate = current_rate * (1 + drift + sigma * dw)\n\n    # return answer\n    return new_rate\n\n# To test the output, you would call the function\nprint(solution())\n```\n\nThis function definition calculates the interest rate in the central node after building a 2-period interest rate tree, assuming the values provided. The result will be the new interest rate based on the given inputs."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-543",
        "python_solution": "",
        "ground_truth": null,
        "question": "The joint probability distribution of random variables A and B is presented by f{(a,b)}=k * a * b where a = 1,2,3, b = 1,2,3, and k is a positive constant. What is the likelihood that A+B will go beyond 5?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    k = 1 / sum(a * b for a in range(1, 4) for b in range(1, 4))\n\n    # Do math calculation to get the answer\n    probability = sum(k * a * b for a in range(1, 4) for b in range(1, 4) if a + b > 5)\n\n    # return answer\n    return probability\n```\n\n### Explanation:\n1. **Define the constant `k`**:\n    - We need to find the value of `k` such that the total probability sums up to 1 over all pairs \\((a, b)\\).\n    - This is done using the formula: \\( k = \\frac{1}{\\sum_{a=1}^3 \\sum_{b=1}^3 a \\cdot b} \\).\n\n2. **Calculate the probability that \\( A + B > 5 \\)**:\n    - Iterate through all possible values of \\(a\\) and \\(b\\) (from 1 to 3).\n    - Calculate the probability of pairs where the sum \\( a + b \\) is greater than 5.\n    - Sum these probabilities and multiply by `k`.\n\n3. **Return the calculated probability**:\n    - The result is the probability that \\( A + B \\) exceeds 5."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-544",
        "python_solution": "",
        "ground_truth": null,
        "question": "If each futures contract is for 100 shares and the company undergoes a 2-for-1 split, how many shares does each futures contract now cover?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_shares_per_contract = 100\n    split_ratio = 2\n\n    # Do math calculation to get the answer\n    new_shares_per_contract = original_shares_per_contract * split_ratio\n\n    # return answer\n    return new_shares_per_contract\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-545",
        "python_solution": "",
        "ground_truth": null,
        "question": "We have a bond assortment containing two bonds, namely bond X and bond Y. The worth of bond X is $60 million, while bond Y is worth $40 million. The one-year default probability for bond X is 5% with a recovery rate of 60%, whereas bond Y has a default probability of 7% and a recovery rate of 50%. Determine the anticipated credit loss for this collection over one year, given that the likelihood of both bonds defaulting is 0.7% and the default relationship is observed to be 20%.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    value_bond_X = 60_000_000\n    value_bond_Y = 40_000_000\n    default_prob_X = 0.05\n    recovery_rate_X = 0.60\n    default_prob_Y = 0.07\n    recovery_rate_Y = 0.50\n    joint_default_probability = 0.007\n    default_correlation = 0.20\n\n    # Calculate the expected loss for each bond\n    expected_loss_X = value_bond_X * default_prob_X * (1 - recovery_rate_X)\n    expected_loss_Y = value_bond_Y * default_prob_Y * (1 - recovery_rate_Y)\n\n    # Calculate the combined expected loss considering joint default and correlation\n    combined_expected_loss = expected_loss_X + expected_loss_Y + (joint_default_probability * (value_bond_X + value_bond_Y) * (1 - (recovery_rate_X + recovery_rate_Y) / 2)) - (default_correlation * (expected_loss_X + expected_loss_Y))\n\n    # return answer\n    return combined_expected_loss\n```"
        ]
    },
    {
        "tables": [
            "|                                               | REIT A        |\n|-----------------------------------------------|---------------|\n| Estimated 12 months cash net operating income (NOI) | $ 280,000    |\n| Cash and equivalents                          | $ 335,000    |\n| Accounts receivable                           | $ 230,000    |\n| Debt and other liabilities                    | $ 1,680,000  |\n|                                               |               |\n| Shares outstanding                            | 82,000       |\n| Assumed cap rate                              | 8.00%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-546",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of REIT B when the net asset value valuation method is applied?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    estimated_noi = 280000\n    cash_and_equivalents = 335000\n    accounts_receivable = 230000\n    debt_and_liabilities = 1680000\n    shares_outstanding = 82000\n    cap_rate = 0.08\n\n    # Do math calculation to get the answer\n    market_value = estimated_noi / cap_rate\n    total_assets = cash_and_equivalents + accounts_receivable + market_value\n    net_asset_value = total_assets - debt_and_liabilities\n    per_share_value = net_asset_value / shares_outstanding\n\n    # Return answer\n    return per_share_value\n```"
        ]
    },
    {
        "tables": [
            "|                      | 2018 | 2019 |\n|----------------------|------|------|\n| Revenue              | 5000 | 7000 |\n| Cost                 | 2000 | 2300 |\n| Operating income     | 3000 | 4700 |\n| Net profit           | 1650 | 2300 |\n| Total assets         | 4000 | 6000 |\n| Total liabilities    | 1200 | 900  |\n| Equity               | 2800 | 5100 |",
            "|                        | 2018  | 2019  |\n| ---------------------- | ----  | ----  |\n| Revenue                | 2000  | 2500  |\n| Cost                   | 1200  | 1300  |\n| Operating income       | 800   | 1200  |\n| Net profit             | 460   | 820   |\n| Dividends paid         | 230   | 410   |\n| Total assets           | 1000  | 1100  |\n| Total liabilities      | 600   | 650   |\n| Equity                 | 400   | 450   |"
        ],
        "topic": "Accounting",
        "question_id": "test-547",
        "python_solution": "",
        "ground_truth": null,
        "question": "The educational firm based in China, company PZ, operates under IFRS. In 2018, it had a passive equity ownership interest of 15% in the T-internet company. By the close of 2018, PZ decided to increase its ownership to 50% as of 1st January 2019, via a cash purchase. There have been no transactions between companies. In the table containing financial statements for both companies that follows: Could you determine the total liabilities for company PZ under the proportionate consolidation method for 2019?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    liabilities_pz_2019 = 900  # Total liabilities of PZ in 2019\n    liabilities_t_internet_2019 = 650  # Total liabilities of T-internet in 2019\n    ownership_percentage = 0.50  # Ownership percentage of PZ in T-internet\n\n    # Do math calculation to get the answer\n    # Calculate proportionate liabilities of T-internet for PZ\n    proportionate_liabilities_t_internet = liabilities_t_internet_2019 * ownership_percentage\n\n    # Calculate total liabilities under proportionate consolidation method\n    total_liabilities_under_proportionate_consolidation = liabilities_pz_2019 + proportionate_liabilities_t_internet\n\n    # Return the answer\n    return total_liabilities_under_proportionate_consolidation\n```"
        ]
    },
    {
        "tables": [
            "|     |             |\n|-----|-------------|\n| Revenue | $5,000,000 |\n| Cost of goods sold | $3,000,000 |\n| SG&A | $100,000 |\n| Interest expense | $200,000 |\n| Tax expense | $100,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-548",
        "python_solution": "",
        "ground_truth": null,
        "question": "In this document, it is revealed that the operating income amounts to:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000000\n    cost_of_goods_sold = 3000000\n    sga = 100000\n\n    # Do math calculation to get the answer\n    operating_income = revenue - cost_of_goods_sold - sga\n\n    # return answer\n    return operating_income\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-549",
        "python_solution": "",
        "ground_truth": null,
        "question": "A risk analyst calculates daily variance hth_tht\u200b using a GARCH method on daily yield rt:ht=\u03b10\u2004+\u03b11rt\u221212+\u03b2ht\u22121,\u2004with\u2004\u03b10=0.005,\u03b11\u2004=0.04,\u03b2=0.94r_t:h_t=\\alpha_0\\;+\\alpha_1r_{t-1}^2+\\beta h_{t-1},\\;with\\;\\alpha_0=0.005,\u03b11\\;=0.04,\\beta=0.94rt\u200b:ht\u200b=\u03b10\u200b+\u03b11\u200brt\u221212\u200b+\u03b2ht\u22121\u200b,with\u03b10\u200b=0.005,\u03b11\u200b=0.04,\u03b2=0.94. The long-term annual volatility is roughly.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    alpha_0 = 0.005\n    alpha_1 = 0.04\n    beta = 0.94\n\n    # Calculate long-term variance h_t\n    h_t_long_term = alpha_0 / (1 - alpha_1 - beta)\n\n    # Calculate annual variance\n    annual_variance = h_t_long_term * 252\n\n    # Calculate annual volatility (standard deviation)\n    annual_volatility = annual_variance ** 0.5\n\n    # return annual volatility as the answer\n    return annual_volatility\n```\n\nIn this program:\n1. We use the given parameters `alpha_0`, `alpha_1`, and `beta`.\n2. We calculate the long-term variance `h_t_long_term` using the formula for a GARCH(1,1) process.\n3. We adjust the variance to an annual basis by multiplying by the number of trading days in a year (typically 252).\n4. We calculate the annual volatility by taking the square root of the annual variance.\n5. Finally, we return the annual volatility as the answer."
        ]
    },
    {
        "tables": [
            "| Year ending 31 December | 2012 |\n|-------------------------|------|\n| Revenue                | 2,230|\n| Operating income       | 322  |\n| Net income             | 102  |\n| Total assets           | 2,100|\n| Shareholders' equity   | 950  |"
        ],
        "topic": "Accounting",
        "question_id": "test-550",
        "python_solution": "",
        "ground_truth": null,
        "question": "P-tech Corporation, adheres to US GAAP and has been growing by purchasing other web-based businesses, the biggest of which is Surge web business. Currently, P-tech Corporation is establishing a 50/50 joint venture with Bravo company where they will together govern Surge web business. P-tech's accounting strategy for the joint venture will employ the equity method. Bravo company, complying with IFRS, will apply the proportionate consolidation method for their joint venture accounting. Joseph, a CFA, is an employee at Investment Equity Corp, and he has predicted the financial specifics for the joint venture in 2012. Joseph is making his approximations regarding each company\u2019s profits and overall financial performance. In light of Joseph's projections, what will the Surge web business's total asset (in \uffe5 millions) be at the end of 2012, as noted in the chart below, that Bravo company will include in their consolidated financial statements?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets_p_tech = 2100  # Total assets of P-tech Corporation in 2012 (in \uffe5 millions)\n\n    # According to the equity method, P-tech Corporation will report 50% of the total assets of the joint venture.\n    # Bravo company will report the entire assets of the joint venture using proportionate consolidation.\n\n    # Since P-tech Corporation owns 50% of the joint venture, the total assets of the joint venture\n    # will be double the amount that P-tech reports for its share of the joint venture's assets.\n\n    # Do math calculation to get the answer\n    total_assets_joint_venture = total_assets_p_tech * 2\n\n    # return answer\n    return total_assets_joint_venture\n\n# Print the solution to verify the result\nprint(solution())\n```\n\nThis program calculates the total assets of the joint venture that Bravo company will include in their consolidated financial statements. Since P-tech uses the equity method and will report 50% of the total assets, Bravo company will report the entire assets, which means the total assets of the joint venture will be double what P-tech reports."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-551",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a property generates an annual yield of 19.9%, shows a standard deviation of returns of 18.5%, and has a market correlation of 0.9, with the market's standard deviation of returns being 15.9% and a risk-free rate of 1%, what is the beta for this property?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_yield = 19.9\n    property_std_dev = 18.5\n    market_correlation = 0.9\n    market_std_dev = 15.9\n    risk_free_rate = 1.0\n\n    # Do math calculation to get the answer\n    covariance = market_correlation * property_std_dev * market_std_dev\n    beta = covariance / (market_std_dev ** 2)\n\n    # return answer\n    return beta\n```\n\nIn this program, we calculate the covariance between the property's returns and the market's returns using the provided correlation, standard deviation of the property's returns, and standard deviation of the market's returns. We then use this covariance to calculate the beta of the property, which is a measure of the property's systematic risk relative to the overall market."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-552",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following calculations have been derived for XYZ Inc.: Demand curve: P = 150 \u2013 5 \u00d7 Q Total revenue curve: TR = 150 \u00d7 Q \u2013 5 \u00d7 Q2 Marginal revenue curve: MR = 150 \u2013 10 \u00d7 Q Total cost curve: TC = Q3 \u2013 10 \u00d7 Q2 + 73 \u00d7 Q + 120 Average cost curve: AC = Q2 \u2013 10 \u00d7 Q + 73 + 120/Q Marginal cost curve: MC = 3 \u00d7 Q2 \u2013 20 \u00d7 Q + 73 P stands for price per unit, and Q stands for cost per unit. What output (in units) will maximize the profit for XYZ Inc.?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n\n    # Do math calculation to get the answer\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    Q = symbols('Q')\n\n    # Define profit function\n    revenue = 150 * Q - 5 * Q**2\n    cost = Q**3 - 10 * Q**2 + 73 * Q + 120\n    profit = revenue - cost\n\n    # Calculate first derivative of profit (marginal profit)\n    profit_prime = profit.diff(Q)\n\n    # Set marginal profit equal to zero to find max profit\n    solution = solve(Eq(profit_prime, 0), Q)\n\n    # Since profit function is a cubic equation, we need to find the max value\n    max_q = None\n    max_profit = -float('inf')\n    for root in solution:\n        if root > 0:  # Only consider positive Q values\n            current_profit = profit.subs(Q, root)\n            if current_profit > max_profit:\n                max_profit = current_profit\n                max_q = root\n\n    # return answer\n    return max_q\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program defines a function `solution` that calculates the value of `Q` which maximizes the profit for XYZ Inc. It uses the derivative of the profit function to find the critical points and selects the positive value that results in the maximum profit."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-553",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher is analyzing a collection that includes 2,500 non-prime mortgages and 800 prime home loans. Out of the non-prime mortgages, 500 are delayed in their payments. Out of the prime home loans, 64 are delayed in their payments. If the researcher randomly picks a home loan from the collection and it is presently delayed on its payments, what is the likelihood that it is a non-prime mortgage?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_non_prime_mortgages = 2500\n    total_prime_home_loans = 800\n    delayed_non_prime_mortgages = 500\n    delayed_prime_home_loans = 64\n\n    # Do math calculation to get the answer\n    total_delayed_mortgages = delayed_non_prime_mortgages + delayed_prime_home_loans\n    non_prime_delayed_probability = delayed_non_prime_mortgages / total_delayed_mortgages\n\n    # return answer\n    return non_prime_delayed_probability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-554",
        "python_solution": "",
        "ground_truth": null,
        "question": "There were no additions to or subtractions from the portfolio during the year. Fees for administration are determined by the value at the end of the period. The fees for administration and incentive are computed separately. What's the return after deductions for the client given the following details: Starting portfolio assets valued at $100M, portfolio assets at the period's close (prior to fee deductions) amounting to $110M, a management fee pegged to the assets under management at 2%, an incentive fee based on the gains of 20%, and a soft hurdle rate of 8%?",
        "output": [
            " Sure, let's address the problem by calculating the return after deductions considering the given details:\n\n1. Starting portfolio assets: $100M\n2. Portfolio assets at the period's close: $110M\n3. Management fee: 2% of assets under management\n4. Incentive fee: 20% of gains\n5. Soft hurdle rate: 8%\n\nThe incentive fee is based on the gains only if the gains exceed the hurdle rate.\n\nHere's how you can write the Python program to compute the return after deductions:\n\n```python\ndef solution():\n    # Define variables name and value\n    starting_assets = 100000000  # $100M\n    ending_assets = 110000000    # $110M\n    management_fee_rate = 0.02   # 2%\n    incentive_fee_rate = 0.20    # 20%\n    hurdle_rate = 0.08          # 8%\n\n    # Calculate gains\n    gains = ending_assets - starting_assets\n\n    # Calculate the soft hurdle amount\n    hurdle_amount = starting_assets * hurdle_rate\n\n    # Calculate incentive fee only if gains exceed the hurdle amount\n    if gains > hurdle_amount:\n        incentive_fee = (gains - hurdle_amount) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Calculate management fee\n    management_fee = ending_assets * management_fee_rate\n\n    # Calculate total fees\n    total_fees = management_fee + incentive_fee\n\n    # Calculate net portfolio value after fees\n    net_portfolio_value = ending_assets - total_fees\n\n    # Calculate return after deductions\n    return_after_deductions = (net_portfolio_value / starting_assets - 1) * 100\n\n    # Return answer\n    return return_after_deductions\n\n# Execute the solution function\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-555",
        "python_solution": "",
        "ground_truth": null,
        "question": "If two stocks have identical volatility and a correlation of -0.5, what is their minimum variance hedge ratio?",
        "output": [
            " To calculate the minimum variance hedge ratio for two stocks with identical volatility and a correlation of -0.5, we can use the formula for the minimum variance hedge ratio, which is:\n\n\\[ \\text{Hedge Ratio} = \\frac{\\sigma_A}{\\sigma_B} \\cdot -\\rho \\]\n\nwhere:\n- \\(\\sigma_A\\) and \\(\\sigma_B\\) are the volatilities of the two stocks (identical in this case),\n- \\(\\rho\\) is the correlation between the two stocks.\n\nGiven:\n- \\(\\sigma_A = \\sigma_B\\) (identical volatilities),\n- \\(\\rho = -0.5\\),\n\nThe formula simplifies to:\n\n\\[ \\text{Hedge Ratio} = \\frac{\\sigma_A}{\\sigma_B} \\cdot -\\rho = -(-0.5) = 0.5 \\]\n\nBelow is the corresponding Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = -0.5\n    identical_volatility = True  # This value won't be used in calculation directly since they are identical and cancel out.\n\n    # Do math calculation to get the answer\n    hedge_ratio = -correlation\n\n    # return answer\n    return hedge_ratio\n```\n\nThis program defines the necessary variables and calculates the minimum variance hedge ratio based on the provided formula, returning the correct answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-556",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Thompson plans to secure a three-month loan using an interest-rate futures contract and decides to sell the interest rate futures contract at 98.00. Then, after six months, he gets a loan directly from the market at 2.4%, and undoes the hedge at 97.00. What would be the overall borrowing rate throughout this procedure?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    futures_sell_price = 98.00\n    futures_buy_price = 97.00\n    market_loan_rate = 0.024\n    loan_period = 3 / 12  # 3 months expressed as a fraction of a year\n\n    # Calculate the gain or loss from the futures contract\n    futures_gain_loss = futures_sell_price - futures_buy_price\n\n    # Calculate the effective interest rate adjustment due to futures gain/loss\n    interest_rate_adjustment = futures_gain_loss / (futures_sell_price * loan_period)\n\n    # Calculate the overall effective borrowing rate\n    overall_borrowing_rate = market_loan_rate + interest_rate_adjustment\n\n    # return answer\n    return overall_borrowing_rate * 100  # Convert to percentage\n\n# Example usage\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-557",
        "python_solution": "",
        "ground_truth": null,
        "question": "Conservative Fund that has USD 50 million in assets has been performing poorly recently, prompting the institutional sales team to suggest a merger with Assertive Fund, a larger fund valued at USD 200 million. Conservative Fund's returns are usually distributed with an average of 3% and a standard deviation of 7%. As for Assertive Fund, its returns follow a normal distribution with an average of 7% and a standard deviation of 15%. The top executives have tasked a financial analyst to calculate the possibility that the returns on the merged portfolio might surpass 26%. Given that the returns on both funds don't influence each other, how would the analyst estimate the chances of the returns on the merged fund exceeding 26%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    conservative_fund_assets = 50_000_000\n    assertive_fund_assets = 200_000_000\n    conservative_fund_mean = 0.03\n    conservative_fund_std_dev = 0.07\n    assertive_fund_mean = 0.07\n    assertive_fund_std_dev = 0.15\n    target_return = 0.26\n\n    # Calculate the total assets in the merged portfolio\n    total_assets = conservative_fund_assets + assertive_fund_assets\n\n    # Calculate the weights of each fund in the merged portfolio\n    conservative_fund_weight = conservative_fund_assets / total_assets\n    assertive_fund_weight = assertive_fund_assets / total_assets\n\n    # Calculate the merged portfolio expected return\n    merged_portfolio_mean = (conservative_fund_weight * conservative_fund_mean) + (assertive_fund_weight * assertive_fund_mean)\n\n    # Calculate the merged portfolio standard deviation\n    merged_portfolio_std_dev = ((conservative_fund_weight ** 2) * (conservative_fund_std_dev ** 2) +\n                                (assertive_fund_weight ** 2) * (assertive_fund_std_dev ** 2)) ** 0.5\n\n    # Calculate the Z-score\n    from scipy.stats import norm\n    z_score = (target_return - merged_portfolio_mean) / merged_portfolio_std_dev\n\n    # Calculate the probability of exceeding the target return\n    probability = 1 - norm.cdf(z_score)\n\n    # return answer\n    return probability\n\n# Call the function to get the answer\nsolution()\n```\n\nThis Python program calculates the probability that the returns on the merged portfolio will exceed 26%. The program follows these steps:\n1. Defines the assets and statistical properties of both funds.\n2. Calculates the weights of each fund in the merged portfolio.\n3. Calculates the expected return"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-558",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment manager achieved a return rate of 15.5% on a portfolio with a beta of 1.2. If the risk-less return rate is 2.5% and the market return stands at 11.8%, what does Jensen's alpha for the portfolio amount to?",
        "output": [
            " Sure! Here's the Python program to calculate Jensen's alpha based on the provided details:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_return = 15.5 / 100  # Converting percentage to decimal\n    portfolio_beta = 1.2\n    risk_free_rate = 2.5 / 100  # Converting percentage to decimal\n    market_return = 11.8 / 100  # Converting percentage to decimal\n\n    # Do math calculation to get the answer\n    # Jensen's alpha = Portfolio Return - (Risk-Free Rate + Beta * (Market Return - Risk-Free Rate))\n    jensens_alpha = portfolio_return - (risk_free_rate + portfolio_beta * (market_return - risk_free_rate))\n\n    # Convert Jensen's alpha back to percentage\n    jensens_alpha_percentage = jensens_alpha * 100\n\n    # Return answer\n    return jensens_alpha_percentage\n\n# Print the answer\nprint(solution())\n```\n\nThis program calculates Jensen's alpha for the portfolio based on the given data and returns the result in percentage."
        ]
    },
    {
        "tables": [
            "|     | Financial Statement of Company M ($ million) |\n| --- | -------------------------------------------- |\n| Net income | 4,500 |\n| Sales | 40,000 |\n| Total assets, average during year | 50,020 |\n| Shareholders' equity, beginning of year | 39,080 |\n| Dividends paid | 200 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-559",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in the subsequent table, what is the sustainable growth of Company N?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 4500\n    sales = 40000\n    total_assets_avg = 50020\n    dividends_paid = 200\n\n    # Calculate the retention ratio which is (Net Income - Dividends Paid) / Net Income\n    retention_ratio = (net_income - dividends_paid) / net_income\n\n    # Calculate the return on assets (ROA) which is Net Income / Total Assets\n    roa = net_income / total_assets_avg\n\n    # Sustainable growth rate is retention ratio * ROA\n    sustainable_growth_rate = retention_ratio * roa\n\n    # Return the sustainable growth rate\n    return sustainable_growth_rate\n\n# Call the function to get the answer\nanswer = solution()\nprint(f\"The sustainable growth rate of Company N is: {answer}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-560",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a corporation has 1 million shares in circulation and earnings of \u00a32 million, and decides to use \u00a310 million of unused cash to buy back shares on the open market at a trading price of \u00a350 per share, what would be the corporation's earnings per share after the entire \u00a310 million of unused cash is used to buy back shares?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_shares = 1000000  # 1 million shares\n    earnings = 2000000      # \u00a32 million earnings\n    buyback_cash = 10000000 # \u00a310 million for buyback\n    share_price = 50        # \u00a350 per share\n\n    # Calculate the number of shares bought back\n    shares_bought_back = buyback_cash // share_price\n\n    # Calculate the remaining number of shares after buyback\n    remaining_shares = total_shares - shares_bought_back\n\n    # Calculate the earnings per share after buyback\n    earnings_per_share = earnings / remaining_shares\n\n    # Return the answer\n    return earnings_per_share\n\n# Example usage\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-561",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we presume that the market interest rate abides by the mean reversion law, with the long-term average interest rate at 4%, the current interest rate at 3.5%, and a mean reverting rate of 0.3, what will be the forecasted market interest rate for the subsequent period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    long_term_average_rate = 0.04\n    current_rate = 0.035\n    mean_reverting_rate = 0.3\n\n    # Do math calculation to get the answer\n    forecasted_rate = current_rate + mean_reverting_rate * (long_term_average_rate - current_rate)\n\n    # return answer\n    return forecasted_rate\n```\n\nThe program calculates the forecasted market interest rate for the next period based on the mean reversion law. It uses the given long-term average interest rate, the current interest rate, and the mean reverting rate to compute the forecasted rate."
        ]
    },
    {
        "tables": [
            "|         | Beginning of the Year (C thousands) | End of the Year ( thousands) |\n|---------|------------------------------------|------------------------------|\n| Investment property | 1,000                            | 1,100                        |\n| Plant    | 1,000                            | 1,200                        |"
        ],
        "topic": "Accounting",
        "question_id": "test-562",
        "python_solution": "",
        "ground_truth": null,
        "question": "A firm adhering to International Financial Reporting Standards (IFRS) doesn't apply the cost model when valuing its investment properties and property, plant, and equipment. Data regarding an investment property and a plant are provided below: The firm will probably record a profit (in thousands) on its income statement for the year of:",
        "output": [
            " Sure, let's define the variables and then calculate the profit based on the provided data. According to IFRS standards, the profit can be calculated by the difference in the value of the investment property and the plant at the end of the year, minus their value at the beginning of the year.\n\nHere\u2019s the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    investment_property_beginning = 1000\n    investment_property_end = 1100\n    plant_beginning = 1000\n    plant_end = 1200\n\n    # Do math calculation to get the answer\n    profit_investment_property = investment_property_end - investment_property_beginning\n    profit_plant = plant_end - plant_beginning\n\n    total_profit = profit_investment_property + profit_plant\n\n    # return answer\n    return total_profit\n\nprint(solution())\n```\n\nThe program calculates the increase in value for the investment property and the plant, then sums these to determine the total profit."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | | Current | Capital Market Expectations |\n| :---: | :---: | :---: | :---: |\n| **Average government bond yield:** 2.8% | | 10-year government bond yield: 2.3% |  |\n| **Average annual equity return:** 4.6% | | Year-over-year equity return: -9.4% |  |\n| **Average annual inflation rate:** 2.3% | | Year-over-year inflation rate:  2.1% | Expected annual inflation: 2.3% |\n| **Equity market P/E (beginning of period):** 15x | | Current equity market P/E: 14.5x | Expected equity market P / E: 14.0x |\n| **Average annual dividend income return:** 2.6% | |  | Expected annual income return: 2.4% |\n| **Average annual real earnings growth:** 6.0% | | |Expected annual real earnings growth:  5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-563",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier from Australia presently owns an equity portfolio worth A$240 million. He's contemplating adjusting the portfolio depending on the evaluation of the risk and return potential concerning the Australian economy. The details associated with the Australian investment markets and economy have all been compiled in this table: Utilizing the data in the table and the Grinold-Kroner model, what is the anticipated yearly equity risk premium?",
        "output": [
            " To calculate the anticipated yearly equity risk premium using the Grinold-Kroner model, we need to consider three components: the dividend yield, the expected real earnings growth, and the expected inflation rate. Here's how you can compute it:\n\n1. **Dividend Yield:** Expected annual income return.\n2. **Real Earnings Growth:** Expected annual real earnings growth.\n3. **Expected Inflation:** Expected annual inflation rate.\n\nThe formula for the equity risk premium according to the Grinold-Kroner model is:\n\n\\[ \\text{Equity Risk Premium} = \\text{Dividend Yield} + \\text{Real Earnings Growth} + \\text{Expected Inflation} \\]\n\nLet's implement this in Python:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_annual_income_return = 2.4 / 100  # Convert percentage to decimal\n    expected_annual_real_earnings_growth = 5.0 / 100  # Convert percentage to decimal\n    expected_annual_inflation = 2.3 / 100  # Convert percentage to decimal\n\n    # Do math calculation to get the answer\n    anticipated_yearly_equity_risk_premium = (expected_annual_income_return +\n                                              expected_annual_real_earnings_growth +\n                                              expected_annual_inflation)\n\n    # Convert the answer back to percentage\n    anticipated_yearly_equity_risk_premium_percentage = anticipated_yearly_equity_risk_premium * 100\n\n    # return answer\n    return anticipated_yearly_equity_risk_premium_percentage\n\n# Example usage:\nprint(solution())\n```\n\nThis program will calculate the anticipated yearly equity risk premium using the Grinold-Kroner model based on the given inputs. The result will be returned as a percentage."
        ]
    },
    {
        "tables": [
            "|                            |   2018 |   2019 |\n|----------------------------|--------|--------|\n| Revenue                    | 5,000  | 7,000  |\n| Cost                       | 2,000  | 2,300  |\n| Operating income           | 3,000  | 4,700  |\n| Net profit                 | 1,650  | 2,300  |\n| Total assets               | 4,000  | 6,000  |\n| Total liabilities          | 1,200  | 900    |\n| Equity                     | 2,800  | 5,100  |",
            "|                       | 2018 | 2019 |\n|-----------------------|------|------|\n| Revenue               | 2000 | 2500 |\n| Cost                  | 1200 | 1300 |\n| Operating income      | 800  | 1200 |\n| Net profit            | 460  | 820  |\n| Dividends paid        | 230  | 410  |\n| Total assets          | 1000 | 1100 |\n| Total liabilities     | 600  | 650  |\n| Equity                | 400  | 450  |"
        ],
        "topic": "Accounting",
        "question_id": "test-564",
        "python_solution": "",
        "ground_truth": null,
        "question": "The education company ZP, which is based in China and follows IFRS, had a passive equity interest of 15% in U-web company in 2018. ZP decided to bump up its ownership interest to 50% at the beginning of 2019 through a cash purchase. Both companies have no intercompany transactions. The financial data for ZP and U-web companies are provided in the table below. Could you compute the net income of ZP company for 2019 assuming a significant influence over U-web company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    zp_revenue_2019 = 7000\n    zp_cost_2019 = 2300\n    zp_operating_income_2019 = 4700\n    zp_net_profit_2019 = 2300\n    uweb_net_profit_2019 = 820\n    uweb_dividends_paid_2019 = 410\n    ownership_percentage_2018 = 0.15\n    ownership_percentage_2019 = 0.50\n\n    # Calculate ZP's share of U-web's income\n    zp_share_of_uweb_income = ownership_percentage_2019 * (uweb_net_profit_2019 - uweb_dividends_paid_2019)\n\n    # Calculate ZP's net income for 2019 including the share of U-web's income\n    zp_net_income_2019 = zp_net_profit_2019 + zp_share_of_uweb_income\n\n    # return answer\n    return zp_net_income_2019\n\n# Call the solution function to get the result\nresult = solution()\nprint(f\"ZP's net income for 2019 is: {result}\")\n```\n\nThis Python program defines the given financial data for the ZP and U-web companies, calculates ZP's share of U-web's income, and computes ZP's net income for 2019 considering the significant influence over U-web. The result is returned and printed."
        ]
    },
    {
        "tables": [
            "|                                         |            |\n|-----------------------------------------|------------|\n| Exhibit 1. Company A Excerpt from Consolidated Income Statement Year|            |       \n| Ending 31 December 2013 ($ in millions) |            |       \n| Gross profit                            |6,290       |     \n| Royalty and commission income            |130         |      \n| Other operating income                   |140         |      \n| Other operating expenses                 |4,985       |      \n| Operating profit                         |906         |      \n| Interest income                          |37          |      \n| Interest expense                         |135         |      \n| Income before taxes                      |988         |      \n| Income taxes                             |257         |      \n| Net income                               |692         |      \n| Additional Information:                  |            |\n| Depreciation and amortization:  $264 million |264     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-565",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided information, what is the EBITDA interest coverage ratio of company B?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    operating_profit = 906  # in millions\n    depreciation_and_amortization = 264  # in millions\n    interest_expense = 135  # in millions\n\n    # Do math calculation to get the answer\n    ebitda = operating_profit + depreciation_and_amortization\n    ebitda_interest_coverage_ratio = ebitda / interest_expense\n\n    # return answer\n    return ebitda_interest_coverage_ratio\n```\n\nExplanation:\n1. **Operating Profit (`operating_profit`)**: This is provided as $906 million.\n2. **Depreciation and Amortization (`depreciation_and_amortization`)**: This is provided as $264 million.\n3. **Interest Expense (`interest_expense`)**: This is provided as $135 million.\n4. **EBITDA Calculation**: `EBITDA = Operating Profit + Depreciation and Amortization`.\n5. **EBITDA Interest Coverage Ratio Calculation**: `EBITDA Interest Coverage Ratio = EBITDA / Interest Expense`.\n\nThis function will return the EBITDA interest coverage ratio for Company A."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-566",
        "python_solution": "",
        "ground_truth": null,
        "question": "Finally, David concentrates on predicting the anticipated returns from direct real estate investments. He reviews a decade's worth of data on returns from multifamily residential real estate. David doubts whether the fluctuations in the observed returns indicate smoothing. He applies a publicly available REIT index to eliminate the smoothing effect on the return flow and accurately represent the risk (gauge by standard deviation) related to multifamily residential real estate investment (the REIT index's variance for the measurement duration is 16; \u03bb is 0.8). What is David\u2019s adjusted standard deviation for multifamily properties for the investment duration?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    variance_reit_index = 16\n    lambda_smoothing_factor = 0.8\n\n    # Do math calculation to get the answer\n    adjusted_standard_deviation = variance_reit_index * lambda_smoothing_factor\n    adjusted_standard_deviation_sqrt = adjusted_standard_deviation ** 0.5\n\n    # return answer\n    return adjusted_standard_deviation_sqrt\n```\n\nHere, we account for the smoothing effect on the return flow and accurately account for the risk related to multifamily residential real estate investment using the publicly available REIT index variance and the smoothing factor (\u03bb = 0.8). The standard deviation is adjusted to reflect the true risk."
        ]
    },
    {
        "tables": [
            "| Current industrial sector capitalization rate (\"cap\" rate) | 5.7% |\n|-----------------------------------------------------------|-----|\n| Expected cap rate at the end of the period                | 5.5% |\n| NOI growth rate (real)                                    | 1%   |\n| Inflation expectation                                     | 1.5% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-567",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher at a property investment company is trying to set predictions for the return rate of industrial properties for the upcoming year. He has gathered the following information: Calculate the anticipated return from the industrial sector properties based on the data presented.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_cap_rate = 5.7 / 100\n    future_cap_rate = 5.5 / 100\n    noi_growth_rate = 1 / 100\n    inflation_expectation = 1.5 / 100\n\n    # Do math calculation to get the answer\n    net_operating_income_growth = noi_growth_rate + inflation_expectation\n    expected_return = (net_operating_income_growth + future_cap_rate) / (current_cap_rate - (net_operating_income_growth / (1 + net_operating_income_growth)))\n\n    # return answer\n    return expected_return\n```\n\nThis program calculates the anticipated return from the industrial sector properties based on the provided data. The calculation involves determining the net operating income growth by combining the NOI growth rate with the inflation expectation and then using these values to calculate the expected return."
        ]
    },
    {
        "tables": [
            "|          | March 31,20X7                        | April 30,20X7                         |\n|----------|-----------------|---------------------------------|---------------|---------------------------------|\n|          | Share Price     | Number of Shares Outstanding(thousands) | Share Price   | Number of Shares Outstanding(thousands) |\n| Stock X  | $15             | 100                             | $20           | 100                             |\n| Stock Y  | $20             | 1,000                           | $30           | 1,000                           |\n| Stock Z  | $30             | 2,000                           | $25           | 2,000                           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-568",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided for the trio of shares listed in the chart, determine the return on the price-weighted index over a month's span.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    march_prices = {'Stock X': 15, 'Stock Y': 20, 'Stock Z': 30}\n    april_prices = {'Stock X': 20, 'Stock Y': 30, 'Stock Z': 25}\n\n    # Calculate price-weighted index for March\n    march_index = sum(march_prices.values())\n\n    # Calculate price-weighted index for April\n    april_index = sum(april_prices.values())\n\n    # Calculate return on the price-weighted index over a month's span\n    return_on_index = (april_index - march_index) / march_index\n\n    # return answer\n    return return_on_index\n\n# Execute the solution function to get the answer\nif __name__ == \"__main__\":\n    answer = solution()\n    print(f\"The return on the price-weighted index over a month's span is {answer:.2%}\")\n```\n\nThis program calculates the return on the price-weighted index over a month's span using the provided share prices for March and April. The price-weighted index for each month is simply the sum of the share prices, and the return is calculated as the percentage change in the index from March to April."
        ]
    },
    {
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity | Spot Rates |\n|------|-------------|------------------|------------|\n| X    | 8%          | 3 years          | 8%         |\n| Y    | 7%          | 3 years          | 9%         |\n| Z    | 6%          | 3 years          | 10%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-569",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based upon the presented series of spot rates, what is the price of Bond Y if all three bonds pay their interest yearly?",
        "output": [
            " To determine the price of Bond Y, we need to calculate the present value of its future cash flows (annual coupon payments and the face value at maturity) using the provided spot rate of 9%.\n\nHere\u2019s the Python program to calculate the price of Bond Y:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming the face value of the bond is $1000\n    coupon_rate = 0.07  # 7%\n    time_to_maturity = 3  # 3 years\n    spot_rate = 0.09  # 9%\n\n    # Do math calculation to get the answer\n    present_value_coupons = coupon_rate * face_value * ((1 - (1 + spot_rate) ** -time_to_maturity) / spot_rate)\n    present_value_face_value = face_value * (1 + spot_rate) ** -time_to_maturity\n\n    price_of_bond_y = present_value_coupons + present_value_face_value\n\n    # return answer\n    return price_of_bond_y\n\n# Print the solution\nprint(solution())\n```\n\nThis program calculates the present value of the annual coupon payments using the formula for the present value of an ordinary annuity and the present value of the face value using the spot rate provided. The sum of these present values gives the price of Bond Y."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-570",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher compiled the following details about a business: The business has a taxable income of $40,000 and a pretax income of $50,000. The prevailing tax rate is 50% and the tax rate when the reversal happens will be 40%. What is the business's deferred tax liability at the close of the first year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 40000\n    pretax_income = 50000\n    prevailing_tax_rate = 0.50\n    future_tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    temporary_difference = pretax_income - taxable_income\n    deferred_tax_liability = temporary_difference * future_tax_rate\n\n    # return answer\n    return deferred_tax_liability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-571",
        "python_solution": "",
        "ground_truth": null,
        "question": "Summit Resale operates through internet for people on an agreed basis. Summit gets the items from the owners, puts them up for sale online, and earns a 25 percent commission for any items sold. Summit collects the entire amount from the buyer and pays the gross amount after commission to the owner. If items remain unsold, they are returned to the owner after 90 days. During 2019, Summit had these details: \u2022 Total sales price of items sold on agreed basis during 2019 was \u20ac2,000,000. \u2022 Total commissions that Summit retained during 2019 for these items totalled \u20ac500,000. How much revenue should Summit report on its 2019 income statement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_sales_price = 2000000  # in euros\n    total_commissions = 500000   # in euros\n\n    # Do math calculation to get the answer\n    revenue = total_commissions\n\n    # return answer\n    return revenue\n```\n\nExplanation: Summit Resale earns a 25% commission for the items sold. Given that the total sales price of items sold during 2019 was \u20ac2,000,000 and the total commissions that Summit retained during 2019 were \u20ac500,000, the revenue that Summit should report on its 2019 income statement is the amount of commissions retained, which is \u20ac500,000."
        ]
    },
    {
        "tables": [
            "|                   | Asset A, Asset B | A and B |\n|-------------------|------------------|---------|\n| Standard deviation| 4.7%, 7.7%       |         |\n| Portfolio weight  | 0.4, 0.6         |         |\n| Correlation       |                  | 0.3     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-572",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the historical data presented, what is the standard deviation for the two-asset portfolio displayed in the chart?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    std_dev_A = 0.047  # Standard deviation of Asset A (4.7% converted to decimal)\n    std_dev_B = 0.077  # Standard deviation of Asset B (7.7% converted to decimal)\n    weight_A = 0.4     # Portfolio weight of Asset A\n    weight_B = 0.6     # Portfolio weight of Asset B\n    correlation = 0.3  # Correlation between Asset A and Asset B\n\n    # Do math calculation to get the answer\n    portfolio_std_dev = (\n        (weight_A ** 2 * std_dev_A ** 2) +\n        (weight_B ** 2 * std_dev_B ** 2) +\n        (2 * weight_A * weight_B * std_dev_A * std_dev_B * correlation)\n    ) ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\n### Explanation:\n- The standard deviation of a two-asset portfolio is calculated using the formula:\n\n  \\[\n  \\sigma_p = \\sqrt{\\left(w_A^2 \\sigma_A^2 + w_B^2 \\sigma_B^2 + 2 w_A w_B \\sigma_A \\sigma_B \\rho \\right)}\n  \\]\n\n  where:\n  - \\(w_A\\) and \\(w_B\\) are the portfolio weights,\n  - \\(\\sigma_A\\) and \\(\\sigma_B\\) are the standard deviations of the individual assets,\n  - \\(\\rho\\) is the correlation coefficient between the assets.\n\nThe Python program implements this calculation to return the standard deviation of the two-asset portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-573",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2017, Company B had an inventory on hand of 30 days and aimed to reach the standard industry average of 28 days in 2018. The recent year's cost of goods sold was $1.2 million in 2017, and it was projected to lower to $0.35 million in 2018. What was the inventory change?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    days_on_hand_2017 = 30\n    days_on_hand_2018 = 28\n    cost_of_goods_sold_2017 = 1200000\n    cost_of_goods_sold_2018 = 350000\n\n    # Calculate average inventory for each year\n    inventory_2017 = (cost_of_goods_sold_2017 * days_on_hand_2017) / 365\n    inventory_2018 = (cost_of_goods_sold_2018 * days_on_hand_2018) / 365\n\n    # Calculate inventory change\n    inventory_change = inventory_2018 - inventory_2017\n\n    # Return the inventory change\n    return inventory_change\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the average inventory for 2017 and 2018 using the given days on hand and cost of goods sold. It then computes the change in inventory between these two years and returns that value."
        ]
    },
    {
        "tables": [
            "| Year | Investment Return |\n|------|-------------------|\n| 1    | $600 13%          |\n| 2    | $700 5%           |\n| 3    | $1,000 -1%        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-574",
        "python_solution": "",
        "ground_truth": null,
        "question": "The fund managed by John displays the following returns for the first three years: What will the time-weighted rate of return be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    year1_return = 0.13\n    year2_return = 0.05\n    year3_return = -0.01\n\n    # Do math calculation to get the answer\n    time_weighted_return = ((1 + year1_return) * (1 + year2_return) * (1 + year3_return)) - 1\n\n    # return answer\n    return time_weighted_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-575",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming 260 days a year, an option on the Nikkei stock index has a strike price at 3,000 Brazilian reais (BRL) with a delta of 0.6 and an annual volatility on the index of 24%. What is the 10-day VaR at 95% confidence level, under the delta-normal assumptions?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    strike_price = 3000\n    delta = 0.6\n    annual_volatility = 0.24\n    days = 10\n    days_in_year = 260\n    confidence_level = 0.95\n\n    # Compute the daily volatility\n    daily_volatility = annual_volatility / (days_in_year ** 0.5)\n\n    # Compute the 10-day volatility\n    ten_day_volatility = daily_volatility * (days ** 0.5)\n\n    # Find the z-score for the 95% confidence level\n    from scipy.stats import norm\n    z_score = norm.ppf(confidence_level)\n\n    # Calculate the 10-day VaR\n    var_10_days = strike_price * delta * ten_day_volatility * z_score\n\n    # Return the answer\n    return var_10_days\n\n# Run the solution\nprint(solution())\n```\n\nThis Python program calculates the 10-day Value at Risk (VaR) at a 95% confidence level for an option on the Nikkei stock index under delta-normal assumptions. The script makes use of the `scipy.stats` library to compute the z-score for the 95% confidence level, which is crucial for the VaR calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-576",
        "python_solution": "",
        "ground_truth": null,
        "question": "The preferred stock of Alpha Enterprises is traded in the financial market for $88 per share. The annual dividend per share is always $6.60. What is the required rate of return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    share_price = 88  # Price per share\n    annual_dividend = 6.60  # Annual dividend per share\n\n    # Do math calculation to get the answer\n    required_rate_of_return = annual_dividend / share_price\n\n    # Return answer\n    return required_rate_of_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-577",
        "python_solution": "",
        "ground_truth": null,
        "question": "For a portfolio that consists of four investments, what is the number of unique covariance terms required to calculate the portfolio's return variance?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    n = 4  # Number of investments in the portfolio\n\n    # Do math calculation to get the answer\n    # Number of unique covariance terms for n investments is given by the formula n(n-1)/2\n    num_covariance_terms = n * (n - 1) / 2\n\n    # return answer\n    return num_covariance_terms\n```\n\nThis Python function calculates the number of unique covariance terms required to calculate the portfolio's return variance for a portfolio consisting of four investments. The formula used is \\( \\frac{n(n-1)}{2} \\), where \\( n \\) is the number of investments."
        ]
    },
    {
        "tables": [
            "| Acquisition cost | \u00a35,800,000 |\n| --- | --- |\n| Acquisition date | 1 January 2009 |\n| Patent expiration date | 31 December 2015 |\n| Total plant capacity of patented product | 40,000 units per year |\n| Production of patented product in fiscal year ended 31 December 2009 | 20,000 units |\n| Expected production of patented product during life of the patent | 175,000 units |"
        ],
        "topic": "Accounting",
        "question_id": "test-578",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a financial expert is examining the amortization of a product patent purchased by the Italian firm, MAKETTI S.p.A., what would be the 2009 fiscal year's amortization expense on the patent using the units-of-production approach, based on the patent information he has collected?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 5800000  # in pounds\n    total_expected_production = 175000  # units\n    production_2009 = 20000  # units in fiscal year 2009\n\n    # Do math calculation to get the answer\n    amortization_expense_2009 = (production_2009 / total_expected_production) * acquisition_cost\n\n    # return answer\n    return amortization_expense_2009\n```\n\nThis program defines the necessary variables and calculates the amortization expense for the 2009 fiscal year using the units-of-production approach. The cost per unit produced is determined, and the amortization for the fiscal year is calculated by multiplying the cost per unit by the number of units produced in that year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-579",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the justified trailing P/E of the stock, considering that the firm's present intrinsic value and EPS stand at $25.62 and $4 respectively?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    intrinsic_value = 25.62\n    eps = 4\n\n    # Do math calculation to get the answer\n    justified_pe = intrinsic_value / eps\n\n    # return answer\n    return justified_pe\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-580",
        "python_solution": "",
        "ground_truth": null,
        "question": "A shareholder buys 100 stocks at a price of $40 for each. After exactly one year, this shareholder sells all of them for $41.50 per stock. On the same day of the sale, the shareholder gets dividends amounting to $200. What is the HPR on the investment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    purchase_price_per_stock = 40\n    number_of_stocks = 100\n    selling_price_per_stock = 41.50\n    dividends_received = 200\n\n    # Do math calculation to get the answer\n    initial_investment = purchase_price_per_stock * number_of_stocks\n    total_revenue = selling_price_per_stock * number_of_stocks + dividends_received\n    HPR = (total_revenue - initial_investment) / initial_investment\n\n    # return answer\n    return HPR\n\n# Print the result\nprint(solution())\n```\n\nThis program calculates the Holding Period Return (HPR) on the investment by following these steps:\n1. Define the initial investment amount, which is the purchase price of the stocks.\n2. Calculate the total revenue from selling the stocks and receiving the dividends.\n3. Compute the HPR by finding the percentage increase in the investment's value.\n4. Return the HPR as the result."
        ]
    },
    {
        "tables": [
            "|                        | 2018 | 2017 |\n|------------------------|------|------|\n| Cost of goods sold (COGS) | 50,800 | 48,500 |\n| Ending inventories | 10,550 | 10,000 |\n| LIFO reserve | 4,320 | 2,600 |"
        ],
        "topic": "Accounting",
        "question_id": "test-581",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the FIFO method's reported Cost of Goods Sold in 2018 by a firm adopting the LIFO method in \u00a3?",
        "output": [
            " To determine the FIFO method's reported Cost of Goods Sold (COGS) in 2018 for a firm adopting the LIFO method, we'll need to calculate the FIFO inventory value first. Then, we can determine the COGS using the FIFO method by adjusting for the LIFO reserve.\n\nHere's the Python program to do this:\n\n```python\ndef solution():\n    # Define variables name and value\n    lcogs = 50800          # LIFO Cost of Goods Sold for 2018\n    lifo_reserve_2018 = 4320      # LIFO reserve for 2018\n\n    # Do math calculation to get the answer\n    fifo_cogs = lcogs + lifo_reserve_2018\n\n    # return answer\n    print(fifo_cogs)\n    return fifo_cogs\n\nsolution()\n```\n\nThis program defines the variables for the LIFO cost of goods sold and the LIFO reserve. It then calculates the FIFO cost of goods sold by adding the LIFO reserve to the LIFO COGS and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-582",
        "python_solution": "",
        "ground_truth": null,
        "question": "How many exceptions in backtesting a VAR would we anticipate over a 250-day trading year if we hold a 90% confidence level?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and value\n    confidence_level = 0.90\n    trading_days = 250\n\n    # Do math calculation to get the answer\n    expected_exceptions = trading_days * (1 - confidence_level)\n\n    # return answer\n    return expected_exceptions\n```\n\nThis program calculates the expected number of exceptions in backtesting Value at Risk (VAR) over a 250-day trading year at a 90% confidence level. The calculation is based on the complement of the confidence level multiplied by the number of trading days in a year."
        ]
    },
    {
        "tables": [
            "| Investment | Expected Return(%) | Expected Standard Deviation(%) |\n|------------|-------------------|--------------------------------|\n| 1          | 19                | 3                              |\n| 2          | 21                | 9                              |\n| 3          | 24                | 20                             |\n| 4          | 19                | 35                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-583",
        "python_solution": "",
        "ground_truth": null,
        "question": "As a risk-neutral investor, John Smith will use utility theory to select his investment portfolio. Given several investments with their expected return and expected standard deviation on the table, which one would he most probably invest in?",
        "output": [
            " Sure, as a risk-neutral investor, John Smith will select the investment based solely on the highest expected return, regardless of the risk (standard deviation).\n\nHere is the Python program to find the investment with the highest expected return:\n\n```python\ndef solution():\n    # Define variables name and value\n    investments = [\n        {\"id\": 1, \"expected_return\": 19, \"expected_std_dev\": 3},\n        {\"id\": 2, \"expected_return\": 21, \"expected_std_dev\": 9},\n        {\"id\": 3, \"expected_return\": 24, \"expected_std_dev\": 20},\n        {\"id\": 4, \"expected_return\": 19, \"expected_std_dev\": 35}\n    ]\n\n    # Do math calculation to get the answer\n    best_investment = max(investments, key=lambda x: x[\"expected_return\"])\n\n    # return answer\n    return best_investment[\"id\"]\n\n# Run the program and print the selected investment\nprint(solution())\n```\n\nThis program defines a list of investments, each represented as a dictionary with its ID, expected return, and standard deviation. It then finds the investment with the highest expected return using the `max` function and a lambda function as the key for comparison, and returns the ID of that investment. The `print(solution())` line at the end runs the program and prints the selected investment ID."
        ]
    },
    {
        "tables": [
            "| Buyer | Bid Size (# of shares) | Limit Price ($) | Seller | Offer Size (# of shares) | Limit Price ($) |\n|-------|------------------------|-----------------|--------|--------------------------|-----------------|\n| 1     | 500                    | 18.50           | 1      | 200                      | 20.20           |\n| 2     | 300                    | 18.90           | 2      | 300                      | 20.35           |\n| 3     | 400                    | 19.20           | 3      | 400                      | 20.50           |\n| 4     | 200                    | 20.10           | 4      | 100                      | 20.65           |\n| 5     | 100                    | 20.15           | 5      | 200                      | 20.70           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-584",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an investor places an immediate-or-cancel limit purchase order for 700 shares at a price of $20.50 in a market, what would probably be the average price the investor would be required to pay, considering the existing limit orders on its book for a specific stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    buyer_orders = [\n        {'shares': 500, 'price': 18.50},\n        {'shares': 300, 'price': 18.90},\n        {'shares': 400, 'price': 19.20},\n        {'shares': 200, 'price': 20.10},\n        {'shares': 100, 'price': 20.15}\n    ]\n\n    seller_orders = [\n        {'shares': 200, 'price': 20.20},\n        {'shares': 300, 'price': 20.35},\n        {'shares': 400, 'price': 20.50},\n        {'shares': 100, 'price': 20.65},\n        {'shares': 200, 'price': 20.70}\n    ]\n\n    investor_order = {\n        'shares': 700,\n        'price': 20.50\n    }\n\n    # Calculate total shares and total cost\n    total_shares = 0\n    total_cost = 0.0\n\n    for order in seller_orders:\n        if total_shares < investor_order['shares'] and order['price'] <= investor_order['price']:\n            shares_to_buy = min(investor_order['shares'] - total_shares, order['shares'])\n            total_shares += shares_to_buy\n            total_cost += shares_to_buy * order['price']\n            if total_shares >= investor_order['shares']:\n                break\n\n    # Calculate average price\n    avg_price = total_cost / total_shares if total_shares > 0 else 0\n\n    # Return average price\n    return avg_price\n\n# Run the solution and print the result\nprint(solution())\n```\n\nThis program defines the buyer and seller orders along with the invest"
        ]
    },
    {
        "tables": [
            "| 2015 | | 2014 |\n| --- | --- | --- |\n| Deferred tax assets $1,000,000 | | $800,000 |\n| Deferred tax liabilities $600,000 | | $700,000 |\n| Valuation allowance $500,000 | | $400,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-585",
        "python_solution": "",
        "ground_truth": null,
        "question": "How did the alterations in the firm's deferred tax accounts impact the net income of 2015 according to US GAAP?",
        "output": [
            " To determine how the alterations in the firm's deferred tax accounts impacted the net income of 2015 according to US GAAP, we need to compute the overall change in the deferred tax accounts (both deferred tax assets and deferred tax liabilities) and then consider the valuation allowance adjustments.\n\nHere is a Python program to calculate this impact:\n\n```python\ndef solution():\n    # Define variables and their values for 2015 and 2014\n    deferred_tax_assets_2015 = 1000000\n    deferred_tax_assets_2014 = 800000\n    deferred_tax_liabilities_2015 = 600000\n    deferred_tax_liabilities_2014 = 700000\n    valuation_allowance_2015 = 500000\n    valuation_allowance_2014 = 400000\n\n    # Calculate the changes in deferred tax assets and liabilities\n    change_in_deferred_tax_assets = deferred_tax_assets_2015 - deferred_tax_assets_2014\n    change_in_deferred_tax_liabilities = deferred_tax_liabilities_2015 - deferred_tax_liabilities_2014\n    change_in_valuation_allowance = valuation_allowance_2015 - valuation_allowance_2014\n\n    # Compute the net change in deferred tax accounts\n    net_change = change_in_deferred_tax_assets - change_in_deferred_tax_liabilities + change_in_valuation_allowance\n\n    # According to US GAAP, an increase in deferred tax assets or a decrease in deferred tax liabilities\n    # increases net income, and vice versa\n\n    # Return the answer\n    return net_change\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the changes in the deferred tax assets and liabilities, as well as the valuation allowance, and then computes the net change in"
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-586",
        "python_solution": "",
        "ground_truth": null,
        "question": "The table underneath displays the monthly stock returns for Oak Inc. Based on the provided table, can you compute the standard deviation for Oak Inc.'s returns, considering that there are 6 observations in the population?",
        "output": [
            " Certainly! Here is the Python program to compute the standard deviation of Oak Inc.'s returns based on the monthly stock returns given in the table:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    returns = [0.20, 0.04, -0.05, 0.12, 0.03, 0.12]\n\n    # Calculate the mean of the returns\n    mean_return = sum(returns) / len(returns)\n\n    # Calculate the squared differences from the mean\n    squared_diffs = [(x - mean_return) ** 2 for x in returns]\n\n    # Calculate the variance\n    variance = sum(squared_diffs) / len(returns)\n\n    # Calculate the standard deviation\n    std_dev = math.sqrt(variance)\n\n    # return answer\n    return std_dev\n\n# To get the result\nresult = solution()\nprint(f\"The standard deviation of Oak Inc.'s returns is: {result:.4f}\")\n```\n\nThis program calculates the standard deviation step by step:\n1. Compute the mean (average) of the monthly returns.\n2. Compute each return\u2019s squared difference from the mean.\n3. Sum up these squared differences and divide by the number of observations to get the variance.\n4. Calculate the square root of the variance to obtain the standard deviation.\n\nFinally, it prints the result to four decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-587",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith is a tax consultant who offers tax consciousness guidance to individual patrons. One of Smith's patrons is Emma. Emma requests Smith to assess Mutual Fund B, which has an inherent gain of 10% of the concluding portfolio value. Emma requests Smith to determine a post-disposal yield over the latest three-year duration. Mutual Fund B showed after-tax yields of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital profits are taxed at a 25% pace. What is the yearly after-tax post-disposal yield measured by Smith?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    gain_percent = 0.10\n    tax_rate = 0.25\n    year_1_yield = 0.09\n    year_2_yield = 0.05\n    year_3_yield = 0.08\n\n    # Calculate the after-tax yields for each year\n    year_1_after_tax = year_1_yield * (1 - tax_rate)\n    year_2_after_tax = year_2_yield * (1 - tax_rate)\n    year_3_after_tax = year_3_yield * (1 - tax_rate)\n\n    # Calculate the total return after 3 years, factoring in the inherent gain\n    inherent_gain_after_tax = gain_percent * (1 - tax_rate)\n    total_return_after_tax = (1 + year_1_after_tax) * (1 + year_2_after_tax) * (1 + year_3_after_tax) * (1 + inherent_gain_after_tax)\n\n    # Calculate the yearly after-tax post-disposal yield\n    yearly_post_disposal_yield = total_return_after_tax**(1/3) - 1\n\n    # return answer\n    return yearly_post_disposal_yield\n```\n\nThis program computes the yearly after-tax post-disposal yield by considering the inherent gain and the after-tax yields for each of the three years. The yields are adjusted for the specified tax rate, and the overall return is compounded to find the yearly yield."
        ]
    },
    {
        "tables": [
            "| Quantity (unit) | Total Fixed Cost ($) | Total Variable Cost ($) |\n| --------------- | -------------------- | ---------------------- |\n| 0               | 400                  | 0                       |\n| 1               | 400                  | 100                    |\n| 2               | 400                  | 190                    |\n| 3               | 400                  | 275                    |\n| 4               | 400                  | 360                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-588",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company that makes machines is examining its cost structure, and here lays out the meticulous data as specified in the table: If the company fabricates 3 machines, what is the average fixed cost?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    quantity = 3\n    total_fixed_cost = 400\n\n    # Do math calculation to get the answer\n    average_fixed_cost = total_fixed_cost / quantity\n\n    # return answer\n    return average_fixed_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-589",
        "python_solution": "",
        "ground_truth": null,
        "question": "Amelia, as a fund manager, trades off a $50,000 vega notional of a one-year variance swap on the S&P 500 at a strike of 20% (annual volatility mentioned). As half a year has gone by, the S&P 500 has seen a realized volatility of 16% (annualized). The same day, the fair strike of a new six-month variance swap on the S&P 500 stands at 19%. The present value of the variance swap that Amelia sold (taking into account the annual interest rate is 2.5%) is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    vega_notional = 50000\n    initial_strike_vol = 0.20\n    realized_vol_half_year = 0.16\n    current_strike_vol = 0.19\n    interest_rate = 0.025\n    time_elapsed = 0.5  # 6 months out of 1 year has elapsed\n\n    # Do math calculation to get the answer\n    initial_variance = initial_strike_vol ** 2\n    realized_variance_half_year = realized_vol_half_year ** 2\n    current_variance = current_strike_vol ** 2\n\n    variance_to_date = realized_variance_half_year * time_elapsed\n    expected_future_variance = (current_variance * (1 - time_elapsed))\n\n    total_variance = variance_to_date + expected_future_variance\n\n    present_value_variance_swap = vega_notional * (total_variance - initial_variance)\n\n    discount_factor = (1 + interest_rate) ** -0.5  # Discount factor for remaining half year\n\n    present_value_variance_swap = present_value_variance_swap * discount_factor\n\n    # return answer\n    return present_value_variance_swap\n```\n\nThis Python program calculates the present value of the variance swap taking into consideration the given information and adjusts for the realized and expected volatilities."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-590",
        "python_solution": "",
        "ground_truth": null,
        "question": "The yield-to-maturity of a bond, which is stated on a semiannual basis, is at 4.769%. What would this yield-to-maturity be if a financial expert were to adjust it to a monthly basis?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_yield = 4.769 / 100  # Yield-to-maturity on a semiannual basis\n\n    # Convert the semiannual basis yield to an effective annual yield\n    effective_annual_yield = (1 + annual_yield / 2) ** 2 - 1\n\n    # Convert the effective annual yield to a monthly basis\n    monthly_yield = (1 + effective_annual_yield) ** (1 / 12) - 1\n    monthly_yield_percentage = monthly_yield * 100\n\n    # Return the answer\n    return monthly_yield_percentage\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program calculates the yield-to-maturity on a monthly basis by first converting the semiannual yield to an effective annual yield and then converting that to a monthly basis. The final result is returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-591",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business released bonds worth $2,000,000 having a maturity of 20 years at 96. The business redeemed these bonds seven years down the line at 103, at a time when the unamortized discount stood at $39,000. What would probably be the loss reported by the business in the year these bonds were redeemed?",
        "output": [
            " To solve the problem, we need to follow these steps:\n\n1. Calculate the original issue price of the bonds.\n2. Calculate the redemption price of the bonds.\n3. Calculate the bond's face value and the carrying value just before redemption.\n4. Determine the loss on redemption of the bonds.\n\nHere's how you can do it:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000  # Face value of the bonds\n    issue_price_percentage = 96 / 100  # The bonds were issued at 96% of face value\n    redemption_price_percentage = 103 / 100  # The bonds were redeemed at 103% of face value\n    unamortized_discount = 39000  # Unamortized discount at the time of redemption\n\n    # Do math calculation to get the answer\n    issue_price = face_value * issue_price_percentage\n    redemption_price = face_value * redemption_price_percentage\n    carrying_value_before_redemption = face_value - unamortized_discount\n    loss_on_redemption = redemption_price - carrying_value_before_redemption\n\n    # return answer\n    return loss_on_redemption\n\n# Test the function\nanswer = solution()\nprint(f\"The loss reported by the business in the year these bonds were redeemed is ${answer:.2f}\")\n```\n\nThis program calculates and returns the loss on the redemption of the bonds by following the aforementioned steps. The value is then printed out as the answer to the question."
        ]
    },
    {
        "tables": [
            "| Risk-free rate | 3% |\n| -- | -- |\n| Market risk premium | 7% |\n| Company A's beta | 1.1 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-592",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jessica has projected that corporation B will disburse dividends of $1.5 and $2.5 respectively at the close of the first and second year. After the second year, dividends are anticipated to increase at a rate of 5%. Other relevant details can be found in the table below. What is the inherent value of the corporation's stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    market_risk_premium = 0.07\n    beta = 1.1\n    dividend_1 = 1.5\n    dividend_2 = 2.5\n    growth_rate = 0.05\n\n    # Calculate the required return using the CAPM\n    required_return = risk_free_rate + beta * market_risk_premium\n\n    # Calculate the present value of the first dividend\n    PV_dividend_1 = dividend_1 / (1 + required_return)\n\n    # Calculate the present value of the second dividend\n    PV_dividend_2 = dividend_2 / (1 + required_return) ** 2\n\n    # Calculate the terminal value at the end of the second year\n    terminal_value = (dividend_2 * (1 + growth_rate)) / (required_return - growth_rate)\n\n    # Calculate the present value of the terminal value\n    PV_terminal_value = terminal_value / (1 + required_return) ** 2\n\n    # Calculate the intrinsic value of the stock\n    intrinsic_value = PV_dividend_1 + PV_dividend_2 + PV_terminal_value\n\n    # return answer\n    return intrinsic_value\n\n# Call the function to get the intrinsic value of the stock\nprint(solution())\n```\n\nThis Python program calculates the intrinsic value of corporation B's stock based on the given dividends, growth rate, and CAPM-derived required return."
        ]
    },
    {
        "tables": [
            "|                                     |      |\n|-------------------------------------|------|\n| Cost of the equipment $5,000,000    |      |\n| Estimated residual value $500,000   |      |\n| Expected useful life 9 years        |      |\n| Total productive capacity 950,000 units |      |\n| Production in FY2015 150,000 units  |      |\n| Expected production for the next 9 years 100,000 units each year |      |"
        ],
        "topic": "Accounting",
        "question_id": "test-593",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the straight-line method, what is the annual depreciation expense for a machine purchased in Jan. 2015, according to the applicable information?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 5000000\n    estimated_residual_value = 500000\n    expected_useful_life = 9\n\n    # Do math calculation to get the answer\n    depreciable_amount = cost_of_equipment - estimated_residual_value\n    annual_depreciation_expense = depreciable_amount / expected_useful_life\n\n    # return answer\n    return annual_depreciation_expense\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-594",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood of drawing one of the 3 marked balls if 600 ping pong balls are stored in a dark container?",
        "output": [
            " Sure! To calculate the likelihood of drawing one of the 3 marked balls from a total of 600 ping pong balls, you can use the formula for probability:\n\n\\[ \\text{{Probability}} = \\frac{{\\text{{Number of favorable outcomes}}}}{{\\text{{Total number of outcomes}}}} \\]\n\nIn this case, the number of favorable outcomes is 3 (the marked balls), and the total number of outcomes is 600 (the total number of balls).\n\nHere is the Python program to calculate the likelihood:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_balls = 600\n    marked_balls = 3\n\n    # Do math calculation to get the answer\n    probability = marked_balls / total_balls\n\n    # return answer\n    return probability\n```\n\nYou can run this function to get the likelihood of drawing one of the marked balls."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-595",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a share costs $100.00 and it follows a single-stage binomial system with an increase of 1.05 and a decrease of 0.97, and if 1 million Bernoulli tests are done, and the mean final share price is $102.00, what is the likelihood of an increase (p)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100.00\n    increase_factor = 1.05\n    decrease_factor = 0.97\n    mean_final_price = 102.00\n\n    # Do math calculation to get the answer\n    # The expected value E(X) of the final price after one time step is given by:\n    # E(X) = p * (initial_price * increase_factor) + (1 - p) * (initial_price * decrease_factor)\n    # We know the mean final price is 102.00 after 1 million Bernoulli trials, which is essentially E(X)\n    # So, solving for p:\n\n    p = (mean_final_price - initial_price * decrease_factor) / (initial_price * (increase_factor - decrease_factor))\n\n    # return answer\n    return p\n```\n\nThis Python program defines the initial price of the share, the factors of increase and decrease, and the mean final price. It then calculates the likelihood of an increase (p) using the expected value formula for the binomial system. Finally, it returns the value of p."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-596",
        "python_solution": "",
        "ground_truth": null,
        "question": "A yearly annuity of $2,000 is expected to be received for a span of twenty years, with the initial payment anticipated to arrive at the conclusion of year thirteen. If we presume a 7% discount rate for the upcoming years, can you work out the present value of the annuity today?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annuity_payment = 2000\n    num_of_years = 20\n    discount_rate = 0.07\n    years_until_first_payment = 13\n\n    # Do math calculation to get the answer\n    # Calculate the present value of the annuity at the end of year 13\n    annuity_pv_at_year_13 = annuity_payment * ((1 - (1 + discount_rate)**-num_of_years) / discount_rate)\n\n    # Calculate the present value of the annuity today\n    present_value = annuity_pv_at_year_13 * (1 + discount_rate)**-years_until_first_payment\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-597",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the spot market, the exchange rate for AUD/USD is 0.50248. If we consider that the yearly interest rate is 3% for USD and 4% for AUD, what would be the one-year forward exchange rate for USD/AUD?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_aud_usd = 0.50248\n    interest_rate_usd = 0.03\n    interest_rate_aud = 0.04\n\n    # Perform the mathematical calculation to get the one-year forward exchange rate\n    forward_rate_usd_aud = spot_rate_aud_usd * ((1 + interest_rate_aud) / (1 + interest_rate_usd))\n\n    # return answer\n    return forward_rate_usd_aud\n\n# Run the solution function to solve the problem\nanswer = solution()\nprint(f\"The one-year forward exchange rate for USD/AUD is: {answer}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-598",
        "python_solution": "",
        "ground_truth": null,
        "question": "An eternal bond is a financial instrument that delivers the same sum of money indefinitely. Suppose it provides a payment of $60 every month, and it has a yearly discount rate of 4% compounded on a monthly basis. What would be the current value of this bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    payment = 60  # Monthly payment of $60\n    annual_discount_rate = 0.04  # Annual discount rate of 4%\n    monthly_discount_rate = annual_discount_rate / 12  # Monthly discount rate\n\n    # Do math calculation to get the answer\n    present_value = payment / monthly_discount_rate\n\n    # return answer\n    return present_value\n\n# Call the function to get the answer\nprint(solution())\n```\n\nExplanation:\n1. Define the monthly payment amount.\n2. Define the annual discount rate and convert it to a monthly discount rate by dividing it by 12.\n3. Use the formula for calculating the present value of an eternal bond (perpetuity): \\( PV = \\frac{C}{r} \\), where \\( C \\) is the constant monthly payment and \\( r \\) is the monthly discount rate.\n4. Return the present value."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-599",
        "python_solution": "",
        "ground_truth": null,
        "question": "Our projection is that 15% of secondary school pupils will participate in employment next year. If we randomly choose 5 secondary school pupils, what is the likelihood that precisely two of them will participate in employment next year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    probability = 0.15  # probability of participating in employment\n    n = 5  # number of secondary school pupils chosen\n    k = 2  # number of pupils who will participate in employment\n\n    # Do math calculation to get the answer\n    from scipy.stats import binom\n\n    answer = binom.pmf(k, n, probability)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the likelihood of exactly 2 out of 5 randomly chosen secondary school pupils participating in employment, given a 15% chance for each pupil. It uses the `scipy.stats.binom.pmf` function to compute the binomial probability mass function."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-600",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Sunshine Primary School provides its staff members with a defined benefit retirement plan. The school is in accordance with IFRS. The chosen details related to the pension plan in 2018 are this: the benefit obligations at the onset of the year being $3,000,000, the plan assets' fair value at the start of the year being $3,100,000 and the plan assets' book value equalling $2,800,000 at the beginning of 2018. So, what is the funded status of the scheme at the start of 2018?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    benefit_obligations_start = 3000000\n    plan_assets_fair_value_start = 3100000\n\n    # Do math calculation to get the answer\n    funded_status = plan_assets_fair_value_start - benefit_obligations_start\n\n    # return answer\n    return funded_status\n\n# Calling the solution function to get the funded status\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Year | Paid-In Capital | Mgmt Fees | Operating Results | NAV before Distributions | Carried Interest | Distributions | NAV after Distributions |\n|------|-----------------|-----------|-------------------|--------------------------|------------------|---------------|-------------------------|\n| 2005 | 40             | 0.8       | -3                | 36.2                     |                  |               | 36.2                    |\n| 2006 | 55             | 1.1       | 4                 | 54.1                     |                  |               | 54.1                    |\n| 2007 | 80             | 1.6       | 11                | 88.5                     |                  |               | 88.5                    |\n| 2008 | 100            | 2         | 27                | 133.5                    | 4.2              | 19            | 110.3                   |\n| 2009 | 125            | 2         | 34                | 167.3                    | 6.6              | 38            | 122.7                   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-601",
        "python_solution": "",
        "ground_truth": null,
        "question": "The pamphlet ends with the backstory of another private equity fund known as Pocatello Fund. As per the cash flows and distributions shown in Exhibit 1 for the initial five years of this fund, what was the total value paid into the Pocatello Fund in 2009?",
        "output": [
            " Sure, let's create a Python program to answer the question regarding the total value paid into the Pocatello Fund in 2009. The variable to consider here is 'Paid-In Capital' for the year 2009.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    paid_in_capital_2009 = 125\n\n    # Do math calculation to get the answer (simple return of variable)\n    answer = paid_in_capital_2009\n\n    # return answer\n    return answer\n\n# Run the solution to see the result\nprint(solution())\n```\n\nThis program defines the value of the 'Paid-In Capital' for the year 2009 based on the provided table and returns it as the answer. When you run this program, it will output the total value paid into the Pocatello Fund in 2009."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-602",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the spot market, the conversion rate from Canadian dollar to Euro stands at CAD/EUR 1.4808, while the rate for Japanese yen to Euro is JPY/EUR 132.3894. What is the JPY/CAD cross rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cad_eur_rate = 1.4808\n    jpy_eur_rate = 132.3894\n\n    # Do math calculation to get the answer\n    jpy_cad_rate = jpy_eur_rate / cad_eur_rate\n\n    # return answer\n    return jpy_cad_rate\n```"
        ]
    },
    {
        "tables": [
            "| Market risk premium | 7.0% |\n|---|---|\n| Risk-free rate | 2.0% |\n| Comparable firm return | 10.4% |\n| Comparable firm debt-to-equity ratio | 1.0 |\n| Comparable firm tax rate | 40.0% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-603",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given data, what is the company's unleveraged beta?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_risk_premium = 0.070\n    risk_free_rate = 0.020\n    comparable_firm_return = 0.104\n    comparable_firm_d_e_ratio = 1.0\n    comparable_firm_tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    comparable_firm_beta = (comparable_firm_return - risk_free_rate) / market_risk_premium\n    unleveraged_beta = comparable_firm_beta / (1 + (1 - comparable_firm_tax_rate) * comparable_firm_d_e_ratio)\n\n    # return answer\n    return unleveraged_beta\n```"
        ]
    },
    {
        "tables": [
            "|  |  | Units Purchased and Sold (first quarter) |  |  |  |  |\n|---|---|---|---|---|---|---|\n|  |  | Date |  |  |  |  |\n|  |  | Units Purchased | Purchase Price | Units Sold | Selling Price | Inventory Units on Hand |\n|  | 2 Jan | 1,000 | $20.00 |  |  | 1,000 |\n|  | 17 Jan |  |  | 500 |  | $50.00, 500 |\n|  | 16 Feb | 1,000 | $18.00 |  |  | 1,500 |\n|  | 3 Mar |  |  | 1,200 |  | $50.00, 300 |\n|  | 13 Mar | 1,000 | $17.00 |  |  | 1,300 |\n|  | 23 Mar |  |  | 500 |  | $50.00, 800 |\n|  | End of quarter totals: | 3,000 | $55,000 | 2,200 |  | $110,000 |\n| Identifying Header | Exhibit 2: | Comparison of Inventory Methods and Models |  |  |  |  |\n|  | End of Quarter Valuations |  |  |  |  |  |\n| 31 March |  | Perpetual LIFO,Periodic LIFO, Perpetual FIFO |  |  |  |  |\n| Sales |  | $110,000 | $110,000 | $110,000 |  |  |\n|  | Ending inventory |  | $16,000 | $13,600 |  |  |\n|  | Cost of goods sold |  | $39,000 | $41,400 |  |  |\n|  | Gross profit |  | $71,000 | $68,600 |  |  |\n|  | Inventory turnover ratio | 279% |  |  |  |  |\n|  | Note: LIFO is last in, first out and FIFO is first in, first out. |  |  |  |  |  |"
        ],
        "topic": "Accounting",
        "question_id": "test-604",
        "python_solution": "",
        "ground_truth": null,
        "question": "A merchant is analyzing various methods for assessing inventory worth. The merchant has a single product that they trade for $50. What is the final inventory's value for the first quarter if the merchant employs a continuous LIFO inventory evaluation technique?",
        "output": [
            " To determine the final inventory\u2019s value for the first quarter using a continuous LIFO (Last In, First Out) inventory evaluation technique, follow the steps below in the Python program:\n\n```python\ndef solution():\n    # Define the initial inventory and purchases\n    initial_inventory = 0\n\n    # List to keep track of purchases\n    purchases = [\n        {\"units\": 1000, \"price\": 20.00},  # 2 Jan purchase\n        {\"units\": 1000, \"price\": 18.00},  # 16 Feb purchase\n        {\"units\": 1000, \"price\": 17.00}   # 13 Mar purchase\n    ]\n\n    # List to record sales\n    sales = [\n        {\"units\": 500},  # 17 Jan sale\n        {\"units\": 1200}, # 3 Mar sale\n        {\"units\": 500}   # 23 Mar sale\n    ]\n\n    # Initial inventory quantity\n    inventory_quantity = 0\n\n    # Cost of inventory (initial FIFO cost of purchases)\n    inventory_cost = 0.0\n\n    # Process each purchase\n    for purchase in purchases:\n        inventory_quantity += purchase[\"units\"]\n        inventory_cost += purchase[\"units\"] * purchase[\"price\"]\n\n    # Process each sale using LIFO\n    for sale in sales:\n        units_to_sell = sale[\"units\"]\n        while units_to_sell > 0 and len(purchases) > 0:\n            last_purchase = purchases.pop()\n            if units_to_sell >= last_purchase[\"units\"]:\n                units_to_sell -= last_purchase[\"units\"]\n                inventory_cost -= last_purchase[\"units\"] * last_purchase[\"price\"]\n                inventory_quantity -= last_purchase[\"units\"]\n            else:\n                inventory_cost -= units_to_sell * last_purchase[\"price\"]\n                inventory_quantity -= units_to_sell\n                purchases.append({\"units\": last_purchase[\"units\"] - units_to_"
        ]
    },
    {
        "tables": [
            "| Most recent year's net income | $8.0 million | Cost of equity capital | 12.40% |\n|---|---|---|---|\n| Interest expense | $1.2 million | WACC | 10.60% |\n| Equity capital book value | $20.97 million | Tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-605",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the multistage RI model for estimating the value of PBRI, John gathers extra data. He predicts a yearly growth rate for residual income of 15% over a prediction range of 5 years (Years 1 to 5) and decides to discount the final year\u2019s residual income as perpetuity. Considering the information in Exhibit 3, what is John's approximation of the contribution that the terminal value of the income stream will make to the present value of equity after five years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    residual_income_growth_rate = 0.15\n    cost_of_equity_capital = 0.1240\n    tax_rate = 0.40\n    WACC = 0.1060\n    net_income = 8000000\n    equity_capital_book_value = 20970000\n    interest_expense = 1200000\n    prediction_range_years = 5\n\n    # Do math calculation to get the answer\n    # Calculate the net income after tax\n    net_income_after_tax = net_income * (1 - tax_rate)\n\n    # Calculate the initial residual income\n    residual_income_initial = net_income_after_tax - (equity_capital_book_value * cost_of_equity_capital)\n\n    # Calculate the residual income in the terminal year\n    terminal_residual_income = residual_income_initial * (1 + residual_income_growth_rate) ** prediction_range_years\n\n    # Calculate the terminal value of the residual income stream\n    terminal_value = terminal_residual_income / (cost_of_equity_capital - residual_income_growth_rate)\n\n    # Calculate the present value of the terminal value\n    pv_terminal_value = terminal_value / ((1 + WACC) ** prediction_range_years)\n\n    # return answer\n    return pv_terminal_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-606",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the previous year, the total worth of end products and services in nation B escalated from $200 billion to $400 billion, with the GDP deflator surging from 120 to 170. Given this situation, by how much did the actual GDP of nation B increase?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_nominal_gdp = 200_000_000_000\n    final_nominal_gdp = 400_000_000_000\n    initial_gdp_deflator = 120\n    final_gdp_deflator = 170\n\n    # Calculate initial and final real GDP\n    initial_real_gdp = initial_nominal_gdp / initial_gdp_deflator\n    final_real_gdp = final_nominal_gdp / final_gdp_deflator\n\n    # Calculate the increase in real GDP\n    real_gdp_increase = final_real_gdp - initial_real_gdp\n\n    # Return the increase in real GDP\n    return real_gdp_increase\n\n# Call the function and print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-607",
        "python_solution": "",
        "ground_truth": null,
        "question": "What would the YTM be on a zero-coupon, semiannual compound, 10-year bond with a par value of $1,000 that's currently being traded at $366.21?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    current_price = 366.21\n    n = 10  # Years to maturity\n    m = 2   # Number of compounding periods per year (semiannual)\n\n    # Do math calculation to get the answer\n    ytm = ((face_value / current_price) ** (1 / (n * m)) - 1) * m\n\n    # return answer\n    return ytm\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-608",
        "python_solution": "",
        "ground_truth": null,
        "question": "The S&P 500 index currently stands at 1,457, with each futures contract representing 250 times the index. An equity portfolio only long with a market value of USD 300,100,000 has a beta of 1.1. In order to lower the portfolio beta to 0.75, how many S&P futures contracts should be sold?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sp500_index = 1457\n    futures_contract_multiplier = 250\n    portfolio_value = 300100000\n    current_beta = 1.1\n    target_beta = 0.75\n\n    # Do math calculation to get the answer\n    target_exposure = portfolio_value * target_beta / current_beta\n    current_exposure = portfolio_value\n    hedge_exposure = current_exposure - target_exposure\n\n    futures_contract_value = sp500_index * futures_contract_multiplier\n    number_of_contracts = hedge_exposure / futures_contract_value\n\n    # return answer\n    return number_of_contracts\n\n# Run the function to get the number of S&P futures contracts to be sold\nprint(solution())\n```\n\nThis program calculates the number of S&P futures contracts that need to be sold to lower the portfolio beta from 1.1 to 0.75, based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-609",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert is aiming to determine the worth of a 1-year European call option using the BSM model. He has gathered the following data: the present stock price is $90, the strike price is $75, the risk-free rate calculated through continuous compounding is 4%, and the yearly volatility rate is 20%. What would be the call option's value? N(-1.21) =0.1131; N(-1.01) =0.1562.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    S = 90     # Current stock price\n    K = 75     # Strike price\n    r = 0.04   # Risk-free rate (continuous compounding)\n    sigma = 0.20 # Yearly volatility rate\n    T = 1      # Time to maturity in years\n    N_d1 = 0.1562  # Cumulative distribution function of -1.01\n    N_d2 = 0.1131  # Cumulative distribution function of -1.21\n\n    # Do math calculation to get the answer\n    from math import exp, log, sqrt\n\n    d1 = (log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * sqrt(T))\n    d2 = d1 - sigma * sqrt(T)\n\n    # Using N(-d1) and N(-d2) values directly\n    call_price = S * N_d2 - K * exp(-r * T) * N_d1\n\n    # return answer\n    return call_price\n\n# Running the solution function\nprint(solution())\n```\n\nExplanation:\n1. We first define the given values for the Black-Scholes-Merton (BSM) model.\n2. We use the formula for \\( d_1 \\) and \\( d_2 \\) in the BSM model.\n3. Since the cumulative distribution function values are provided, we directly use \\( N(-d1) \\) and \\( N(-d2) \\).\n4. Finally, we calculate the call option price using the BSM formula.\n\nRunning this program will give you the value of the 1-year European call option based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-610",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given that a chart from a credit reporting agency indicates that the count of A-ranked entities that upgraded to AAA is 1, those which advanced to AA were 6, those who maintained at A were 41, those who were demoted to BBB were 2, and those that defaulted were 3. Assuming a fresh entity with an A grade credit score, what is the chance that it will experience a reduction in rating or end up defaulting after one year?",
        "output": [
            " Sure, let's create a Python program to calculate the probability of an A-ranked entity experiencing a reduction in rating or ending up defaulting after one year.\n\n```python\ndef solution():\n    # Define variables name and value\n    advanced_to_AAA = 1\n    advanced_to_AA = 6\n    maintained_at_A = 41\n    demoted_to_BBB = 2\n    defaulted = 3\n\n    # Calculate the total number of A-ranked entities\n    total_entities = advanced_to_AAA + advanced_to_AA + maintained_at_A + demoted_to_BBB + defaulted\n\n    # Calculate the number of entities that experienced a reduction in rating or defaulted\n    reduced_or_defaulted = demoted_to_BBB + defaulted\n\n    # Calculate the probability of reduction in rating or defaulting after one year\n    probability = reduced_or_defaulted / total_entities\n\n    # return answer\n    return probability\n```\n\nThis program defines the necessary variables for each category of credit score change and calculates the probability of a fresh entity with an A grade credit score experiencing a reduction in rating or ending up defaulting after one year."
        ]
    },
    {
        "tables": [
            "| Date | November 2010 Quantity | November 2010 Price | December 2010 Quantity | December 2010 Price |\n|------|-----------------|-----------------|------------------|------------------|\n| Sugar| 70kg           | \u00a30.90/kg        | 120kg            | \u00a31.00/kg         |\n| Cotton| 60kg           | \u00a30.60/kg        | 50kg             | \u00a30.80/kg         |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-611",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of the Paasche index for the consumption basket of December displayed in Exhibit 1?",
        "output": [
            " Sure, I can help with that. The Paasche price index is calculated using the formula:\n\n\\[ \\text{Paasche Price Index} = \\frac {\\sum (\\text{Price in December}) \\times (\\text{Quantity in December})} {\\sum (\\text{Price in November}) \\times (\\text{Quantity in December})} \\]\n\nLet's use this formula to create the Python program.\n\n```python\ndef solution():\n    # Define variables name and value\n    sugar_price_nov = 0.90\n    sugar_quantity_nov = 70\n    sugar_price_dec = 1.00\n    sugar_quantity_dec = 120\n\n    cotton_price_nov = 0.60\n    cotton_quantity_nov = 60\n    cotton_price_dec = 0.80\n    cotton_quantity_dec = 50\n\n    # Do math calculation to get the answer\n    numerator = (sugar_price_dec * sugar_quantity_dec) + (cotton_price_dec * cotton_quantity_dec)\n    denominator = (sugar_price_nov * sugar_quantity_dec) + (cotton_price_nov * cotton_quantity_dec)\n\n    paasche_index = numerator / denominator\n\n    # return answer\n    return paasche_index\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program will calculate the Paasche index for the consumption basket of December given the data provided in the table. The result will be printed when you run the `solution()` function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-612",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the business boosts its dividend payout proportion to 40% and employs a necessary return of 12.4%, what would be the justified forward P/E ratio based on the compiled information on the business?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_ratio = 0.40\n    required_return = 0.124\n\n    # Do math calculation to get the answer\n    justified_forward_pe_ratio = dividend_payout_ratio / required_return\n\n    # return answer\n    return justified_forward_pe_ratio\n\n# Execute the function to get the answer\nanswer = solution()\nprint(f\"The justified forward P/E ratio is: {answer:.2f}\")\n```\n\nThe Python program defines the necessary variables, performs the required calculation, and returns the justified forward P/E ratio based on the given information about the business."
        ]
    },
    {
        "tables": [
            "|                   | Fund X | Fund Y | Fund Z | Benchmark |\n|-------------------|--------|--------|--------|-----------|\n| Sharpe ratio (SR) | 0.45   | 0.50   | 0.49   | 0.44      |\nNote: Data are based on a risk-free rate of 2.3%."
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-613",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson requests his research team to generate risk and anticipated return predictions for Funds X, Y, and Z as well as the benchmark, shown in Exhibit 1. Johnson opts to introduce a fourth fund to his group, Fund W, that will utilize the same benchmark embedded in Exhibit 1. Given the information from Exhibit 1, what would be the Sharpe ratio if Fund W, which Johnson estimates to have an information ratio of 0.35, is merged with a fund that mimics the benchmark?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    SR_benchmark = 0.44  # Sharpe ratio of the benchmark\n    information_ratio_W = 0.35  # Information ratio of Fund W\n\n    # Do math calculation to get the answer\n    # The Sharpe ratio of the merged fund is the sum of the Sharpe ratio of the benchmark and the information ratio of Fund W\n    merged_SR = SR_benchmark + information_ratio_W\n\n    # return answer\n    return merged_SR\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-614",
        "python_solution": "",
        "ground_truth": null,
        "question": "The debt-to-asset ratio is: total liabilities: $200 short term debt: $10 long-term debt: $100 total equity: $300.",
        "output": [
            " Certainly! Here is the Python program to calculate the debt-to-asset ratio based on the given values:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 200 + 10 + 100\n    total_equity = 300\n    total_assets = total_liabilities + total_equity\n\n    # Do math calculation to get the answer\n    debt_to_asset_ratio = total_liabilities / total_assets\n\n    # return answer\n    return debt_to_asset_ratio\n```\n\nThis program calculates the debt-to-asset ratio by summing the total liabilities (short-term debt, long-term debt) and then dividing by the total assets (total liabilities + total equity). The returned value is the debt-to-asset ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-615",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial advisor is determining the beta of a collection of large-cap industrial firm shares. The advisor establishes that the correlation between the returns from the collection and the returns from its reference point is 0.8, the fluctuation of collection returns is 5%, and the fluctuation of the reference point is 4%. What is the beta of the collection in relation to the reference point?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.8\n    collection_fluctuation = 0.05\n    reference_fluctuation = 0.04\n\n    # Do math calculation to get the answer\n    beta = correlation * (collection_fluctuation / reference_fluctuation)\n\n    # return answer\n    return beta\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2009 | 2010 |\n| ------------------------------------- | ---- | ---- |\n| Retained earnings                     | 120  | 145  |\n| Accounts receivable                   | 38   | 43   |\n| Inventory                             | 45   | 48   |\n| Accounts payable                      | 36   | 29   |"
        ],
        "topic": "Accounting",
        "question_id": "test-616",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collected the following data from a corporation's 2010 financial reports (in $ millions): In 2010, the corporation declared and dispersed cash dividends of $10 million, and logged a depreciation expense of $25 million. The corporation classifies dividends paid as a financing activity. What was the corporation\u2019s 2010 operational cash flow (in $ millions)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2009 = 120  # in millions\n    retained_earnings_2010 = 145  # in millions\n    dividends_paid = 10           # in millions\n    depreciation_expense = 25     # in millions\n\n    # Calculate net income (change in retained earnings)\n    net_income = retained_earnings_2010 - retained_earnings_2009\n\n    # Operational cash flow is calculated by adding back non-cash expenses (depreciation)\n    # and subtracting cash outflows related to operations (dividends are excluded since they are financing activities)\n    operational_cash_flow = net_income + depreciation_expense\n\n    # Return the answer\n    return operational_cash_flow\n\n# Example call to verify the solution\nresult = solution()\nprint(result)\n```\n\nThe program calculates the corporation's 2010 operational cash flow by first determining the net income based on the change in retained earnings. It then adds back the depreciation expense (a non-cash item) to the net income to arrive at the operational cash flow. The dividends paid are not considered in the operational cash flow as they are a financing activity. The final operational cash flow is returned as the result."
        ]
    },
    {
        "tables": [
            "| - |  Time=0 | Time=1 | Time=2 |\n|---|:---:|:---:|:---:|\n| - | S0=100 | Su=110 | Suu=121 |\n| - |-| Sd=92 | Sud,du=101.20 |\n| - |-| - | Sdd=84.64 |"
        ],
        "topic": "Accounting",
        "question_id": "test-617",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that the price of a bond over the next two periods is detailed below. The starting value of the bond is $100. The likelihood of a rise in any given period is 40% and the chance of a fall in any given period is 60%. If we apply the binomial model, what is the likelihood that the bond's price will reach $101.20 after two periods?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    starting_value = 100\n    likelihood_rise = 0.40\n    likelihood_fall = 0.60\n    target_price = 101.20\n\n    # Calculate the probability for the bond to reach $101.20 after two periods\n    # The price path for $101.20 is \u201cSud\u201d which corresponds to one rise and one fall in any order.\n    # There is only one path to Sud (Sud or Sdu) as it's symmetrical\n\n    # Calculate the probability of the path \"Sud\" or \"Sdu\"\n    probability_sud = likelihood_rise * likelihood_fall\n\n    # Since there are two such paths (Sud and Sdu), we need to sum them up.\n    # Both paths have equal probability, so we multiply by 2.\n    total_probability = 2 * probability_sud\n\n    # return answer\n    return total_probability\n\n# Call the solution function to print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-618",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ is a wealth management firm based in France. They have made an investment of $10 million in E Corporation's senior unsecured bond with a term of 10 years. Due to concerns of a potential default by E Corp, XYZ purchased a credit default swap (CDS) on E corp valued at $10 million with a designated coupon rate of 5%. After three months, E Corp goes bankrupt, resulting in a variety of activated CDS contracts. Consequently, XYZ examines the credit quality of the corporate bond they invested and the CDS's value on that bond. Here's some information on the current market status of E Corporation's bonds: Bond 1 is a 5-year senior unsecured bond trading at 40% of par, Bond 2 is a 10-year senior unsecured bond trading at 50% of par. Bond 3 is a 6-year subordinated unsecured bond trading at 30% of par. Based on these details, what is the cheapest",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bonds = {\n        \"Bond 1\": {\"term\": 5, \"trading_percentage\": 40},\n        \"Bond 2\": {\"term\": 10, \"trading_percentage\": 50},\n        \"Bond 3\": {\"term\": 6, \"trading_percentage\": 30},\n    }\n\n    # Initialize a variable to track the cheapest bond\n    cheapest_bond = None\n    cheapest_value = float('inf')\n\n    # Iterate through the bonds to find the cheapest one based on the trading percentage of par\n    for bond, details in bonds.items():\n        trading_percentage = details[\"trading_percentage\"]\n        if trading_percentage < cheapest_value:\n            cheapest_value = trading_percentage\n            cheapest_bond = bond\n\n    # return answer\n    return cheapest_bond\n\nprint(solution())\n```\n\nThis Python program defines a dictionary with the necessary details for each bond and then iterates through the bonds to determine which one is trading at the lowest percentage of par, thereby identifying the cheapest bond."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-619",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, XYZ Inc. bought a new machinery for its production process. The machine was priced at $25,000. It is anticipated to have a 4-year lifespan and then be resold for $4,000. Using the double-declining-balance method, what's the depreciation cost to be accounted for in the second year?",
        "output": [
            " Certainly! Below is a Python program that calculates the depreciation cost in the second year using the double-declining-balance method:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 25000\n    salvage_value = 4000\n    useful_life = 4\n\n    # Calculate depreciation rate for double-declining balance\n    straight_line_rate = 1 / useful_life\n    double_declining_rate = 2 * straight_line_rate\n\n    # Calculate depreciation for the first year\n    depreciation_year_1 = initial_cost * double_declining_rate\n\n    # Calculate book value at the end of the first year\n    book_value_end_year_1 = initial_cost - depreciation_year_1\n\n    # Calculate depreciation for the second year\n    depreciation_year_2 = book_value_end_year_1 * double_declining_rate\n\n    # Ensure depreciation does not exceed the book value minus salvage value\n    depreciation_year_2 = min(depreciation_year_2, book_value_end_year_1 - salvage_value)\n\n    # return answer\n    return depreciation_year_2\n```\n\nYou can run this Python function to get the depreciation cost for the second year using the double-declining-balance method."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-620",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the yearly return for a trader who has managed a return of 5% over a six-week span?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    weekly_return = 0.05\n    weeks = 6\n\n    # Do math calculation to get the answer\n    yearly_weeks = 52  # There are 52 weeks in a year\n    yearly_return = (1 + weekly_return / weeks) ** yearly_weeks - 1\n\n    # return answer\n    return yearly_return\n```\nThis program calculates the compounded yearly return for a trader who has managed a return of 5% over a six-week span. It uses the formula for compounded interest to annualize the return."
        ]
    },
    {
        "tables": [
            "| Measure     | 2007   | 2006   | 2005  | 2004  | 2003  |\n|-------------|--------|--------|-------|-------|-------|\n| EPS         | $3.03  | $1.45  | $0.23 | $2.13 | $2.55 |\n| BV per share| $19.20 | $16.21 | $14.52| $13.17| $11.84|\n| ROE         | 16.0%  | 8.9%   | 1.6%  | 16.3% | 21.8% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-621",
        "python_solution": "",
        "ground_truth": null,
        "question": "In February 2007, you are investigating a theoretical company called Davis Global that experiences seasonal demand for its offerings. On 2 February 2007, Davis shares ended at $57.98. You believe that the period from 2003 through 2006 provides a fair representation of average earnings. When determining normalized EPS, we can consider the approach of historical average EPS or the average ROE method, so what is the difference in PE calculated using these two methods?",
        "output": [
            " Sure! I'll write a Python program to calculate the difference in PE (Price-to-Earnings ratio) using the historical average EPS method and the average ROE method for Davis Global company.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    eps_2003 = 2.55\n    eps_2004 = 2.13\n    eps_2005 = 0.23\n    eps_2006 = 1.45\n    bvps_2006 = 16.21\n    roe_2003 = 0.218\n    roe_2004 = 0.163\n    roe_2005 = 0.016\n    roe_2006 = 0.089\n    current_price = 57.98\n\n    # Calculate historical average EPS\n    avg_eps = (eps_2003 + eps_2004 + eps_2005 + eps_2006) / 4\n\n    # Calculate PE using historical average EPS\n    pe_avg_eps = current_price / avg_eps\n\n    # Calculate average ROE\n    avg_roe = (roe_2003 + roe_2004 + roe_2005 + roe_2006) / 4\n\n    # Calculate normalized EPS using average ROE\n    normalized_eps_roe = bvps_2006 * avg_roe\n\n    # Calculate PE using normalized EPS from average ROE\n    pe_avg_roe = current_price / normalized_eps_roe\n\n    # Calculate the difference in PE\n    difference_in_pe = abs(pe_avg_eps - pe_avg_roe)\n\n    # return the difference in PE\n    return difference_in_pe\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the difference in the Price-to-Earnings (PE) ratio using the historical average E"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-622",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive agreed to sell an equity forward contract four weeks ago. The contract is set to mature in three months. A profit of $1 will be provided one month prior to the expiry of the contract. The risk-free rate is 3% and is compounded yearly. The existing spot price of the underlying is $56, while the initial forward price was set at $60. What is the value of the executive\u2019s position?\n",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_price = 56  # Current spot price of the underlying\n    forward_price = 60  # Initial forward price\n    time_remaining = 3 / 12  # Time remaining to maturity in years\n    profit = 1  # Profit provided one month prior to expiry\n    risk_free_rate = 0.03  # Risk-free rate (annual)\n\n    # Calculate the present value of the profit provided one month prior to expiry\n    present_value_profit = profit / ((1 + risk_free_rate) ** (time_remaining - 1/12))\n\n    # Calculate the value of the position\n    value_of_position = (forward_price - spot_price) + present_value_profit\n\n    # return answer\n    return value_of_position\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nIn this program, we calculate the present value of the profit provided one month prior to the expiry of the contract and then adjust it to the current time by discounting it back. We then add this present value to the difference between the forward price and the spot price to get the value of the executive\u2019s position."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-623",
        "python_solution": "",
        "ground_truth": null,
        "question": "A 12-month zero-coupon bond offers a return of 4.0%. The yields for the 24-month and 36-month zero-coupon bonds are 5.0% and 6.0% respectively. What would be the interest rate for a 12-month loan starting in a year?",
        "output": [
            " To solve the problem, we need to determine the forward rate, which is the interest rate for a 12-month loan starting in a year. The forward rate can be estimated by using the yields of the zero-coupon bonds with different maturities.\n\nGiven the yields of zero-coupon bonds for 12, 24, and 36 months, we can calculate the forward rate \\( f_{12,24} \\) using the following formula:\n\n\\[ (1 + f_{12,24}) = \\frac{(1 + y_{24})^2}{(1 + y_{12})} \\]\n\nwhere:\n- \\( y_{12} \\) is the yield for the 12-month bond,\n- \\( y_{24} \\) is the yield for the 24-month bond.\n\nGiven:\n- \\( y_{12} = 0.04 \\)\n- \\( y_{24} = 0.05 \\)\n- \\( y_{36} = 0.06 \\)\n\nTo find the forward rate for the 12-month period starting after 12 months, we need to use \\( y_{12} \\) and \\( y_{24} \\).\n\nHere's the Python program to calculate the forward rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    y_12 = 0.04\n    y_24 = 0.05\n\n    # Do math calculation to get the answer\n    forward_rate = ((1 + y_24)**2 / (1 + y_12)) - 1\n\n    # Return the forward rate as a percentage\n    return forward_rate * 100\n\n# Call the function to get the answer\nprint(solution())\n```\n\nExplanation:\n- We first define the given yields for the 12-month and 24-month bonds.\n- We then use the formula to calculate the forward rate for the 12-month period starting after 12 months.\n- Finally, we convert the forward rate to a percentage and return it."
        ]
    },
    {
        "tables": [
            "|                    | S&P 500 | Indigo Fund |\n|--------------------|---------|-------------|\n| Expected annual return | 9.0%    | 10.5%      |\n| Return standard deviation | 18.0%  | 25.0%      |\n| Sharpe ratio | 0.333   | 0.30       |\n| Active return |         | 1.2%       |\n| Active risk |           | 8.0%       |\n| Information ratio |     | 0.15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-624",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the highest Sharpe ratio achievable by a fund manager when merging the S&P 500 benchmark portfolio and the Indigo Fund?",
        "output": [
            " To determine the highest Sharpe ratio achievable by a fund manager when merging the S&P 500 benchmark portfolio and the Indigo Fund, we can use the concept of combining two portfolios in modern portfolio theory.\n\nThe combined Sharpe ratio can be calculated using the following formula:\n\\[ \\text{Sharpe Ratio}_{\\text{combined}} = \\sqrt{\\text{Sharpe Ratio}_{\\text{benchmark}}^2 + \\text{Information Ratio}^2} \\]\n\nHere's the Python program to calculate the highest Sharpe ratio achievable:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    sharpe_ratio_benchmark = 0.333\n    information_ratio_indigo = 0.15\n\n    # Do math calculation to get the answer\n    sharpe_ratio_combined = math.sqrt(sharpe_ratio_benchmark**2 + information_ratio_indigo**2)\n\n    # return answer\n    return sharpe_ratio_combined\n\n# Execute the solution function to get the result\nprint(solution())\n```\n\nThis program calculates the highest achievable Sharpe ratio by combining the Sharpe Ratio of the S&P 500 benchmark and the Information Ratio of the Indigo Fund. The `math.sqrt` function is used to compute the square root of the sum of the squares of these two values."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-625",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of an account that a shareholder has deposited \uffe12,000 into if it pays 6% per annum compounded continuously after four years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 2000\n    rate = 0.06\n    time = 4\n\n    # Do math calculation to get the answer\n    amount = principal * (2.718281828459045 ** (rate * time))\n\n    # return answer\n    return amount\n```\n\nHere, the formula for continuous compounding is used: \\( A = P \\times e^{rt} \\), where:\n- \\( A \\) is the amount of money accumulated after n years, including interest.\n- \\( P \\) is the principal amount (the initial amount of money).\n- \\( r \\) is the annual interest rate (decimal).\n- \\( t \\) is the time the money is invested for, in years.\n- \\( e \\) is the base of the natural logarithm, approximately equal to 2.71828.\n\nThis program will accurately calculate the value of the account after four years of continuous compounding."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-626",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the consultancy firm, Blue Street Inc, announced total revenues of $100 million, total expenses of $80 million, and net income of $20 million in the last year, and if accounts receivable rose by $10 million, what amount of cash was received by the firm from clients?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_revenues = 100_000_000\n    total_expenses = 80_000_000\n    net_income = 20_000_000\n    increase_in_accounts_receivable = 10_000_000\n\n    # Do math calculation to get the answer\n    cash_received_from_clients = total_revenues - increase_in_accounts_receivable\n\n    # return answer\n    return cash_received_from_clients\n\n# Test the solution\nprint(solution())\n```\n\nExplanation:\nThe cash received from clients can be determined by subtracting the increase in accounts receivable from the total revenues. Assuming no other variables are affecting the calculation, the relevant formula is:\n\n\\[ \\text{Cash Received from Clients} = \\text{Total Revenues} - \\text{Increase in Accounts Receivable} \\]\n\nThe program defines the given values, performs the calculation, and then returns the result."
        ]
    },
    {
        "tables": [
            "|                         | 2018 | 2019 |\n|-------------------------|------|------|\n| Revenue                 | 5,000| 7,000|\n| Cost                    | 2,000| 2,300|\n| Operating income        | 3,000| 4,700|\n| Net profit              | 1,650| 2,300|\n| Total assets            | 4,000| 6,000|\n| Total liabilities       | 1,200| 900  |\n| Equity                  | 2,800| 5,100|",
            "|                        | 2018  | 2019  |\n| ---------------------- |:-----:| -----:|\n| Revenue                | 2,000 | 2,500 |\n| Cost                   | 1,200 | 1,300 |\n| Operating income       | 800   | 1,200 |\n| Net profit             | 460   | 820   |\n| Dividends paid         | 230   | 410   |\n| Total assets           | 1,000 | 1,100 |\n| Total liabilities      | 600   | 650   |\n| Equity                 | 400   | 450   |"
        ],
        "topic": "Accounting",
        "question_id": "test-627",
        "python_solution": "",
        "ground_truth": null,
        "question": "In China, there's an education business known as PZ Corporation which adheres to IFRS. As of 2018, the corporation had a 15% non-controlling equity stake in T-web Corporation. The executives at PZ decided to boost the company\u2019s stake in T-web to 50% through a straight cash buy on 1st January 2019, with no transactions between the companies. The table provided includes the financial statement details of both PZ and T-web corporations. Could you please compute the consolidated sales for 2019 for PZ corporation, after gaining control over T-web company:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    pz_revenue_2019 = 7000  # Revenue of PZ Corporation in 2019\n    tweb_revenue_2019 = 2500  # Revenue of T-web Corporation in 2019\n    pz_ownership_percentage_2019 = 0.50  # PZ's ownership percentage in T-web in 2019\n\n    # Do math calculation to get the answer\n    consolidated_sales_2019 = pz_revenue_2019 + (tweb_revenue_2019 * pz_ownership_percentage_2019)\n\n    # return answer\n    return consolidated_sales_2019\n```\n\nThis Python program defines the revenue values for PZ Corporation and T-web Corporation for the year 2019, along with the ownership percentage that PZ Corporation holds in T-web. It then calculates the consolidated sales for PZ Corporation in 2019 by adding PZ's own revenue to 50% of T-web's revenue and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-628",
        "python_solution": "",
        "ground_truth": null,
        "question": "A private equity fund employs the individual transaction approach to allot carried interest (20% of profit) to its managing partner. The managing partner put in $10 million in an enterprise three years back and exited with $23 million. What is the share available for the passive investors of the said investment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000000\n    exit_value = 23000000\n    carried_interest_percentage = 0.20\n\n    # Calculate profit\n    profit = exit_value - initial_investment\n\n    # Calculate carried interest\n    carried_interest = profit * carried_interest_percentage\n\n    # Calculate share available for the passive investors\n    share_for_passive_investors = profit - carried_interest\n\n    # Add back the initial investment to the profit to get the total exit value,\n    # then subtract the carried interest\n    total_share_for_passive_investors = initial_investment + share_for_passive_investors\n\n    # return answer\n    return total_share_for_passive_investors\n```\n\nWhen you run this program, it will calculate the share available for the passive investors of the said investment based on the given initial investment, exit value, and carried interest percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-629",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will be the fourth quintile number of the series 1-10?",
        "output": [
            " Certainly! Here's the Python program to find the fourth quintile of the series 1-10:\n\n```python\ndef solution():\n    # Define variables name and value\n    series = list(range(1, 11))\n\n    # Do math calculation to get the answer\n    series.sort()\n    n = len(series)\n    index = int(0.8 * (n + 1)) - 1  # The index of the fourth quintile (80%)\n    fourth_quintile = series[index]\n\n    # return answer\n    return fourth_quintile\n```\n\nThis program first creates a list of numbers from 1 to 10, sorts the list, calculates the index corresponding to the fourth quintile (which is 80% of the way through the sorted list), and then returns the value at that index."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-630",
        "python_solution": "",
        "ground_truth": null,
        "question": "In early 2013, corporation X released 5-year bonds with a face value of $2,000,000. Given a market interest rate of 6%, these bonds are set to pay a 7% coupon every 31st of December. What would the bonds payable amount to at the time they were issued?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    coupon_rate = 0.07\n\n    # Do math calculation to get the answer\n    annual_coupon_payment = face_value * coupon_rate\n    bonds_payable = face_value  # Bonds payable is equal to the face value at issuance\n\n    # return answer\n    return bonds_payable\n\n# Call the function to get the answer\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-631",
        "python_solution": "",
        "ground_truth": null,
        "question": "The private equity portfolio had a net asset value of $120m at the close of 2019 with all capital called upon. The portfolio predicts a distribution payment of 20% by the conclusion of 2020. The portfolio's net asset value is projected to grow 10% before distribution. What is the projected net asset value after distribution at the end of 2020?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_net_asset_value = 120000000  # in dollars\n    distribution_percentage = 0.20\n    growth_percentage = 0.10\n\n    # Do math calculation to get the answer\n    projected_net_asset_value_before_distribution = initial_net_asset_value * (1 + growth_percentage)\n    distribution_amount = projected_net_asset_value_before_distribution * distribution_percentage\n    projected_net_asset_value_after_distribution = projected_net_asset_value_before_distribution - distribution_amount\n\n    # return answer\n    return projected_net_asset_value_after_distribution\n```\n\nThis Python program first defines the initial net asset value, the distribution percentage, and the growth percentage. It then calculates the projected net asset value before the distribution by increasing the initial net asset value by the growth percentage. After that, it calculates the distribution amount and finally finds the projected net asset value after the distribution. The function returns this final value."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-632",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the spot market, the present exchange rate for EUR/USD is 0.8615. In the forward market, the EUR/USD rate for the next 90 days is indicated as +13.5 points. Can you tell me the forward rate for EUR/USD over the next 90 days?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 0.8615\n    forward_points = 13.5\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate + (forward_points / 10000)\n\n    # return answer\n    return forward_rate\n```\n\nThis program defines the spot rate and the forward points for the EUR/USD exchange rate. It then calculates the forward rate by adding the forward points (in points) to the spot rate. The forward rate is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-633",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jacob, a US-based financier, is thinking about purchasing a common stock with a yearly dividend of $2.5. This dividend is predicted to increase at a yearly rate of 5%. If the expected return rate of investors is 8%, what would be the inherent worth of the stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_dividend = 2.5\n    growth_rate = 0.05\n    expected_return_rate = 0.08\n\n    # Do math calculation to get the answer\n    inherent_value = annual_dividend / (expected_return_rate - growth_rate)\n\n    # return answer\n    return inherent_value\n```"
        ]
    },
    {
        "tables": [
            "| | Truck* | Land** |\n| --- | --- | --- | \n| Original cost | $57,000 | $18,000 |\n| Estimated  life | 8 years | |\n| Estimated salvage value at purchase | $15,000 | |\n| Depreciation method | Declining balance, 20% per year | |\n| Current fair value of item | $27,000 | $21,000 |\n\n\\* The last sale of a similar truck by the company occurred more than six months ago.\n\n\\*\\* The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "test-634",
        "python_solution": "",
        "ground_truth": null,
        "question": "A corporation decided to trade a truck that it had bought three years prior for a piece of land owned by a different corporation. The following chart includes details about both items: The financial statement for the corporation that is getting rid of the truck is most likely going to report a loss of:",
        "output": [
            " Sure, let's go through the steps to determine the reportable loss for the financial statement of the corporation that is trading the truck for the land.\n\n1. **Calculate the book value of the truck**:\n   The truck was bought for $57,000 with an estimated life of 8 years and a salvage value of $15,000. The truck uses the declining balance depreciation method at 20% per year.\n\n2. **Calculate the depreciation for 3 years:**\n   Depreciation rate = 20%\n   Depreciation per year = Book Value * Depreciation rate\n   Cumulative depreciation for 3 years needs to be subtracted from the original cost to find the current book value.\n\n3. **Determine the current book value after subtracting depreciation:**\n   - Year 1 Depreciation: \\( 57000 \\times 0.20 = 11400 \\)\n   - New Book Value = \\( 57000 - 11400 = 45600 \\)\n   - Year 2 Depreciation: \\( 45600 \\times 0.20 = 9120 \\)\n   - New Book Value = \\( 45600 - 9120 = 36480 \\)\n   - Year 3 Depreciation: \\( 36480 \\times 0.20 = 7296 \\)\n   - New Book Value = \\( 36480 - 7296 = 29184 \\)\n\n4. **Determine the fair market value change:**\n   The truck is traded for land worth $21,000.\n\n5. **Calculate the loss:**\n   Loss = Book value of the truck - Fair value of the land received\n   Loss = \\( 29184 - 21000 = 8184 \\)\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    annual_depreciation_rate ="
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n| ---      | ---                | ---                           |\n| 1        | 30                 | 20                            |\n| 2        | 70                 | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-635",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming an investment manager constructs this portfolio, and the covariance of returns for the two securities involved is -0.0240, what is the projected standard deviation of the portfolio?",
        "output": [
            " Certainly! To calculate the standard deviation of the portfolio, we need to use the formula for the portfolio standard deviation, which takes into account the weights of the securities, their individual standard deviations, and the covariance between them.\n\nHere's the formula for the portfolio variance (\\(\\sigma_p^2\\)):\n\n\\[ \\sigma_p^2 = \\sum_{i=1}^{n} \\sum_{j=1}^{n} w_i w_j \\sigma_i \\sigma_j \\rho_{ij} \\]\n\nWhere:\n- \\(w_i\\) is the weight of security \\(i\\),\n- \\(\\sigma_i\\) is the standard deviation of security \\(i\\),\n- \\(\\rho_{ij}\\) is the correlation coefficient between security \\(i\\) and \\(j\\),\n- \\(n\\) is the number of securities.\n\nIn this case, we have two securities, so the portfolio variance simplifies to:\n\n\\[ \\sigma_p^2 = w_1^2 \\sigma_1^2 + w_2^2 \\sigma_2^2 + 2 w_1 w_2 \\sigma_1 \\sigma_2 \\rho_{12} \\]\n\nSince the covariance (Cov(R1, R2)) is given as -0.0240, and:\n\n\\[ \\text{Cov}(R1, R2) = \\sigma_1 \\sigma_2 \\rho_{12} \\]\n\nWe can rewrite the formula for variance as:\n\n\\[ \\sigma_p^2 = w_1^2 \\sigma_1^2 + w_2^2 \\sigma_2^2 + 2 w_1 w_2 \\text{Cov}(R1, R2) \\]\n\nFinally, the portfolio standard deviation (\\(\\sigma_p\\)) is the square root of the variance:\n\n\\[ \\sigma_p = \\sqrt{\\sigma_p^2} \\]\n\nHere is the Python program that performs these calculations:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    w1 = 0.30\n    w2 = 0.70\n    sigma1 = 0.20  #"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-636",
        "python_solution": "",
        "ground_truth": null,
        "question": "A specialist working on the stable-income trade desk noticed that the annual number of defaults in the bond portfolio adheres to a Poisson process. The mean number of defaults is four every year. Given that defaults are independent, what are the odds that there will be a maximum of one default in the coming year?",
        "output": [
            " To solve this problem, we need to use the Poisson distribution, which allows us to calculate the probability of a given number of events happening in a fixed interval of time. The Poisson probability mass function is given by:\n\n\\[ P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} \\]\n\nwhere:\n- \\( k \\) is the number of events (in this case, the number of defaults),\n- \\( \\lambda \\) is the average number of events per interval (in this case, the mean number of defaults per year),\n- \\( e \\) is the base of the natural logarithm.\n\nWe are interested in the probability of having a maximum of one default in the coming year, which means we need to calculate \\( P(0; \\lambda) + P(1; \\lambda) \\).\n\nHere is the Python program to calculate this:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    lambda_ = 4  # Mean number of defaults per year\n\n    # Do math calculation to get the answer\n    probability_0_defaults = math.exp(-lambda_) * (lambda_**0 / math.factorial(0))\n    probability_1_default = math.exp(-lambda_) * (lambda_**1 / math.factorial(1))\n    total_probability = probability_0_defaults + probability_1_default\n\n    # return answer\n    return total_probability\n\n# Example usage\nprint(solution())\n```\n\nWhen you run this program, it will calculate and return the probability of having a maximum of one default in the coming year."
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|------------------|---------------------|\n| 0.25                 | 0.997506               |\n| 0.5                  | 0.992556               |\n| 0.75                | 0.985222               |\n| 1                     | 0.975610               |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-637",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three months ago, a supervisor agreed to a receive-fixed and pay-equity swap. The yearly fixed rate was set at 3% and the equity index was 100 at the time the swap was made. The swap will mature in one year and has a quarterly reset, and nominal amount of $100 million. The value of the swap is up for evaluation, assuming the equity index is now 101 and the current spot rates are provided:",
        "output": [
            " Sure, let's define the variables and calculate the value of the swap step by step. Here's the detailed Python program to evaluate the value of the swap:\n\n1. **Input Variables:**\n   - Fixed rate: 3% annually, which needs to be converted to quarterly by dividing by 4.\n   - Equity Index at the time of swap: 100.\n   - Equity Index now: 101.\n   - Nominal amount: $100 million.\n   - Time to maturity: 1 year (with quarterly resets).\n\n2. **Discount Factors:**\n   - 0.25 years to maturity: 0.997506\n   - 0.5 years to maturity: 0.992556\n   - 0.75 years to maturity: 0.985222\n   - 1 year to maturity: 0.975610\n\n3. **Calculations:**\n   - Calculate the payoffs for each quarter.\n   - Discount these payoffs back to the current period to get the present value.\n\nHere's the complete Python program for the solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    nominal_amount = 100e6\n    fixed_rate_annual = 0.03\n    fixed_rate_quarterly = fixed_rate_annual / 4\n    equity_index_initial = 100\n    equity_index_current = 101\n    time_to_maturity_quarters = 4\n\n    # Present Value Factors\n    pv_factors = {\n        0.25: 0.997506,\n        0.5: 0.992556,\n        0.75: 0.985222,\n        1: 0.975610\n    }\n\n    # Calculate the payoff for each quarter\n    payoff_quarters = []\n    for t in range(1, time_to_maturity_quarters + 1):\n        equity_payoff = ("
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-638",
        "python_solution": "",
        "ground_truth": null,
        "question": "A study reveals that in this structure, 30% of workspaces are equipped with printers. Given a binomial probability distribution, what is the chance that just three companies will possess a printer in a casual selection of five firms?",
        "output": [
            " Certainly! Let's define the necessary variables and use the binomial probability formula to find the answer. The formula for binomial probability is given by:\n\n\\[ P(X = k) = \\binom{n}{k} \\cdot p^k \\cdot (1-p)^{n-k} \\]\n\nWhere:\n- \\( n \\) is the number of trials (in this case, 5 companies)\n- \\( k \\) is the number of successes (in this case, 3 companies with printers)\n- \\( p \\) is the probability of success on a single trial (in this case, 30% or 0.3)\n- \\( \\binom{n}{k} \\) (read as \"n choose k\") is the binomial coefficient\n\nLet's implement this in Python:\n\n```python\nfrom scipy.special import comb\n\ndef solution():\n    # Define variables name and value\n    n = 5\n    k = 3\n    p = 0.3\n\n    # Do math calculation to get the answer\n    binomial_coefficient = comb(n, k)\n    probability_success = p ** k\n    probability_failure = (1 - p) ** (n - k)\n    answer = binomial_coefficient * probability_success * probability_failure\n\n    # return answer\n    return answer\n\n# Calling the function to get the probability\nprint(solution())\n```\n\nThis program will calculate the probability that exactly three out of the five randomly selected companies have printers, given that 30% of the workspaces are equipped with printers."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-639",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the width of a 90% confidence interval using the appropriate t-distribution for a sample size of 37, having a mean of 116.23 and a variance of 245.55?",
        "output": [
            " ```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    sample_size = 37\n    sample_mean = 116.23\n    sample_variance = 245.55\n    confidence_level = 0.90\n\n    # Degrees of freedom\n    df = sample_size - 1\n\n    # Get the t-critical value for a 90% confidence level\n    t_critical = stats.t.ppf((1 + confidence_level) / 2, df)\n\n    # Calculate the standard error\n    standard_error = (sample_variance / sample_size) ** 0.5\n\n    # Calculate the margin of error\n    margin_of_error = t_critical * standard_error\n\n    # Calculate the width of the confidence interval\n    confidence_interval_width = 2 * margin_of_error\n\n    # return answer\n    return confidence_interval_width\n\n# Call the function to get the solution\nprint(solution())\n```\n\nThis Python program uses the `scipy.stats` library to calculate the t-critical value and then determines the width of the 90% confidence interval based on the provided sample size, mean, and variance. The answer returned by `solution()` is the width of the confidence interval."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-640",
        "python_solution": "",
        "ground_truth": null,
        "question": "If, in a basic economy without a foreign sector, the ensuing formulas are valid: Consumption formula: C = 2,500 + 0.80 \u00d7 (Y \u2013 T), Investment formula: I = 500 + 0.30 \u00d7 Y \u2013 25 \u00d7 r, State expenditure: G = 1,000, Tax formula: T = \u2013250 + 0.30 \u00d7 Y, where Y signifies total income and r symbolizes real interest rate as a percentage, how much will the total income grow if the actual interest rate is 3% and state expenditure rises to 2,000?",
        "output": [
            " Certainly! Here is your Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    r = 3  # Actual interest rate as a percentage\n    G_new = 2000  # New state expenditure\n\n    C = lambda Y: 2500 + 0.80 * (Y - T(Y))\n    I = lambda Y: 500 + 0.30 * Y - 25 * r\n    G = 1000\n    T = lambda Y: -250 + 0.30 * Y\n\n    # Initial total income with old state expenditure\n    def income_with_old_G(Y):\n        return C(Y) + I(Y) + G\n\n    # Initial total income with new state expenditure\n    def income_with_new_G(Y):\n        return C(Y) + I(Y) + G_new\n\n    # Solve for initial total income\n    initial_income = 6000  # Assuming an initial guess\n    error = 1e-5\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        next_income = income_with_old_G(initial_income)\n        if abs(next_income - initial_income) < error:\n            break\n        initial_income = next_income\n\n    # Solve for new total income with new state expenditure\n    new_income = 6000  # Assuming an initial guess\n    for _ in range(max_iterations):\n        next_new_income = income_with_new_G(new_income)\n        if abs(next_new_income - new_income) < error:\n            break\n        new_income = next_new_income\n\n    # Calculate the growth in total income\n    income_growth = new_income - initial_income\n\n    # return answer\n    return income_growth\n\n# Execute the solution\nprint(solution())\n```\n\nThis program begins by defining the economic formulas given and then"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-641",
        "python_solution": "",
        "ground_truth": null,
        "question": "The details provided are related to a hedge fund named Trident Consultancy, which has:     AUM valued at $300 million as per the end of last year     A management fee set at 2% (calculated based on the AUM at year-end)     An incentive fee of 20% factored in: after deducting the management fee, considering a 5% soft hurdle rate, and utilizing a high-water mark (the high-water mark is $357 million)     The gross return for the current year for the fund stands at 20%. Could you calculate the total fee that Trident has earned this year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    AUM = 300000000  # Assets Under Management in dollars\n    management_fee_rate = 0.02  # Management fee rate\n    incentive_fee_rate = 0.20  # Incentive fee rate\n    hurdle_rate = 0.05  # Soft hurdle rate\n    high_water_mark = 357000000  # High-water mark in dollars\n    gross_return_rate = 0.20  # Gross return rate for the current year\n\n    # Calculate the fund value at the end of the year\n    end_of_year_AUM = AUM * (1 + gross_return_rate)\n\n    # Calculate the management fee\n    management_fee = AUM * management_fee_rate\n\n    # Calculate the return after management fee\n    return_after_management_fee = (end_of_year_AUM - AUM - management_fee)\n\n    # Calculate the return above high-water mark and hurdle rate\n    adjusted_return = max(return_after_management_fee, 0) - max(0, high_water_mark - AUM)\n    adjusted_for_hurdle_rate = adjusted_return - (AUM * hurdle_rate)\n\n    # Calculate the incentive fee\n    if adjusted_for_hurdle_rate > 0:\n        incentive_fee = adjusted_for_hurdle_rate * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Total fee earned\n    total_fee = management_fee + incentive_fee\n\n    # Return answer\n    return total_fee\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the total fee earned by Trident Consultancy by considering the management fee and incentive fee based on the provided details. The output will be the total fee."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-642",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Aquarius Pool of Funds puts GBP150 million into each of Beta Hedge Fund and XYZ Hedge Fund. Aquarius Pool of Funds operates a \"1 and 10\" fee system. Both management and incentive fees are evaluated separately at the end of each calendar year. After one year, factoring in their individual management and incentive fees, the value of Aquarius's investment in Beta stands at GBP 80 million and it's worth GBP240 million in XYZ. What is the yearly return for a investor in the Aquarius Pool of Funds, after taking into account the fees charged at the fund-of-funds level?",
        "output": [
            " Certainly! Let's break down the process to calculate the yearly return for an investor in the Aquarius Pool of Funds, including the fee system.\n\nFirst, we need to calculate the total return before fees for the Aquarius Pool of Funds. The total initial investment is the sum of the investments in both Beta and XYZ:\n\\[ \\text{Total Initial Investment} = \\text{GBP 150 million} + \\text{GBP 150 million} = \\text{GBP 300 million} \\]\n\nThe total final value after one year is the sum of the final investments in both Beta and XYZ:\n\\[ \\text{Total Final Value} = \\text{GBP 80 million} + \\text{GBP 240 million} = \\text{GBP 320 million} \\]\n\nThe management fee is calculated on the initial investment (1% of the total initial investment), and the incentive fee is calculated on the profit (10% of the profit before fees).\n\nHere's the Python program to calculate the yearly return after fees:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment_beta = 150e6\n    initial_investment_xyz = 150e6\n    final_value_beta = 80e6\n    final_value_xyz = 240e6\n    management_fee_rate = 0.01\n    incentive_fee_rate = 0.10\n\n    # Calculate the combined values\n    initial_total = initial_investment_beta + initial_investment_xyz\n    final_total = final_value_beta + final_value_xyz\n\n    # Calculate management fee\n    management_fee = initial_total * management_fee_rate\n\n    # Calculate profit before incentive fee\n    profit_before_fees = final_total - initial_total\n\n    # Calculate incentive fee\n    incentive_fee = profit_before_fees * incentive_fee_rate\n\n    # Calculate total fees\n    total_fees = management_fee + incentive_fee\n\n    # Calculate profit"
        ]
    },
    {
        "tables": [
            "|                                | 2016 ($US millions) |\n|--------------------------------|---------------------|\n| Cost: Total property, plant, and equipment (PP&E) | 30,815                 |\n| Accumulated depreciation | 16,465                 |\n| Net PP&E                         | 14,350                 |\n| Average net PP&E                 | 12,200                 |\n| Net sales                        | 21,670                 |\n| Net income                       | 2,705                   |"
        ],
        "topic": "Accounting",
        "question_id": "test-643",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the available selected fixed asset details for a firm, what is the firm's fixed asset turnover ratio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_sales = 21670\n    average_net_ppe = 12200\n\n    # Do math calculation to get the answer\n    fixed_asset_turnover_ratio = net_sales / average_net_ppe\n\n    # Return answer\n    return fixed_asset_turnover_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-644",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the historical returns of Company 1's shares and Company 2's shares have a correlation of 0.75, and the variance of Company 1's shares is 0.16 while the variance of Company 2's shares is 0.09, what is the covariance of returns of Company 1's shares and Company 2's shares?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.75\n    variance_company1 = 0.16\n    variance_company2 = 0.09\n\n    # Do math calculation to get the answer\n    covariance = correlation * (variance_company1 ** 0.5) * (variance_company2 ** 0.5)\n\n    # return answer\n    return covariance\n```\n\nThis Python program calculates the covariance of returns of Company 1's shares and Company 2's shares based on the provided correlation and variances. The formula used for covariance is `covariance = correlation * std_dev_company1 * std_dev_company2`, where the standard deviations are the square roots of the variances."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-645",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine a call option that is sold for $4 and has an exercise price of $50. Calculate the value upon expiry and the profit for a purchaser if the price of the underlying asset at expiry is $55.",
        "output": [
            " Certainly! Here's the Python program to calculate the value upon expiry and the profit for a purchaser of a call option, given the details:\n\n```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    exercise_price = 50\n    asset_price_at_expiry = 55\n\n    # Do math calculation to get the value upon expiry\n    if asset_price_at_expiry > exercise_price:\n        value_upon_expiry = asset_price_at_expiry - exercise_price\n    else:\n        value_upon_expiry = 0\n\n    # Calculate the profit for the purchaser\n    profit = value_upon_expiry - option_price\n\n    # return value upon expiry and profit\n    return value_upon_expiry, profit\n\n# Call the solution function and print the results\nresult = solution()\nprint(f\"Value upon expiry: ${result[0]}, Profit: ${result[1]}\")\n```\n\nThis program calculates both the value upon expiry of the call option and the profit for the purchaser. It then prints the results."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-646",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a consistent interest rate of 8.87%, how much does a shareholder need to invest now if they aim to have $100 in their account in three years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    future_value = 100\n    interest_rate = 0.0887\n    periods = 3\n\n    # Do math calculation to get the answer\n    present_value = future_value / (1 + interest_rate) ** periods\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-647",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose a call option is priced at $4 with an exercise price of $50. Calculate the value at expiration and the profit for the vendor if the price of the underlying asset at expiration is $52.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    option_price = 4\n    exercise_price = 50\n    asset_price_expiration = 52\n\n    # Calculate the value at expiration\n    value_at_expiration = max(0, asset_price_expiration - exercise_price)\n\n    # Calculate the profit for the vendor\n    profit = value_at_expiration - option_price\n\n    # Return the value at expiration and profit\n    return value_at_expiration, profit\n\n# Run the solution to get the answer\nvalue_at_expiration, profit = solution()\nprint(f\"Value at expiration: ${value_at_expiration}\")\nprint(f\"Profit for the vendor: ${profit}\")\n```\n\nThis program defines the given variables, computes the value at expiration, and calculates the profit for the vendor based on the price of the underlying asset at expiration. Finally, it returns and prints both the value at expiration and the profit."
        ]
    },
    {
        "tables": [
            "| Source | Sum of Squares (SS) |\n|--------|---------------------|\n| Explained | 957 |\n| Total | 1580 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-648",
        "python_solution": "",
        "ground_truth": null,
        "question": "What does the term Sum of Squares Residuals (SSR) refer to?",
        "output": [
            " To determine the Sum of Squares Residuals (SSR), we can use the following formula:\n\n\\[ SSR = SS_{Total} - SS_{Explained} \\]\n\nGiven the values from the table:\n- \\(SS_{Explained} = 957\\)\n- \\(SS_{Total} = 1580\\)\n\nWe can implement the solution as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    SS_explained = 957\n    SS_total = 1580\n\n    # Do math calculation to get the answer\n    SSR = SS_total - SS_explained\n\n    # return answer\n    return SSR\n```\n\nWhen you execute this program, it will return the Sum of Squares Residuals (SSR)."
        ]
    },
    {
        "tables": [
            "|                                               | \u6bdb millions |\n|-----------------------------------------------|------------:|\n| Revenues for the year                         |      12,500 |\n| Total expenses for the year                   |      10,000 |\n| Gains from available-for-sale securities      |       1,475 |\n| Loss on foreign currency translation adjustments on a foreign subsidiary |         325 |\n| Dividends paid                                |         500 |"
        ],
        "topic": "Accounting",
        "question_id": "test-649",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the total comprehensive income of the business (in \u20ac millions) based on the information from the business's financial records?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenues = 12500\n    total_expenses = 10000\n    gains_from_securities = 1475\n    loss_on_currency_translation = 325\n    dividends_paid = 500\n\n    # Do math calculation to get the answer\n    net_income = revenues - total_expenses + gains_from_securities - loss_on_currency_translation\n    comprehensive_income = net_income - dividends_paid\n\n    # return answer\n    return comprehensive_income\n\n# Calling the function to get the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Capital component | Book Value (000) | Market Value(000) | Component cost |\n|------------------|-----------------|-----------------|---------------|\n| Debt             | $100            | $80             | 8%            |\n| Preferred stock  | $20             | $20             | 10%           |\n| Common stock     | $100            | $200            | 12%           |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-650",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collected the subsequent data pertaining to a business's capital structure and pre-tax component costs. What would be the weighted average cost of capital (WACC) of the business, given that the marginal tax rate of the business is 40%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    debt_book_value = 100\n    debt_market_value = 80\n    debt_cost = 0.08\n\n    preferred_stock_book_value = 20\n    preferred_stock_market_value = 20\n    preferred_stock_cost = 0.10\n\n    common_stock_book_value = 100\n    common_stock_market_value = 200\n    common_stock_cost = 0.12\n\n    marginal_tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    V = debt_market_value + preferred_stock_market_value + common_stock_market_value\n    E = common_stock_market_value\n    D = debt_market_value\n\n    WACC = (E/V * common_stock_cost) + ((D/V) * debt_cost * (1 - marginal_tax_rate)) + ((preferred_stock_market_value/V) * preferred_stock_cost)\n\n    # return answer\n    return WACC\n\n# Call the function to get the result\nresult = solution()\nprint(f\"The weighted average cost of capital (WACC) of the business is: {result:.2f}\")\n```\n\nThis program calculates the weighted average cost of capital (WACC) for the given business, considering its capital structure and pre-tax component costs, and adjusting for the marginal tax rate. The `solution` function returns the WACC value, and the result is printed out to verify the answer."
        ]
    },
    {
        "tables": [
            "| EV/EBITDA | 9 |\n| --- | --- |\n| EBITDA | $25,000,000 |\n| Market value of debt | $65,000,000 |\n| Cash | $1,300,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-651",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the projected equity value for the Umbrella Corporation as per the data gathered by Paul?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    EV_EBITDA = 9\n    EBITDA = 25000000\n    market_value_of_debt = 65000000\n    cash = 1300000\n\n    # Do math calculation to get the answer\n    EV = EV_EBITDA * EBITDA\n    equity_value = EV - market_value_of_debt + cash\n\n    # return answer\n    return equity_value\n```"
        ]
    },
    {
        "tables": [
            "|                                         |      |\n|-----------------------------------------|------|\n| ABC LA retirement plan information 2018 |      |\n| Current service costs                   | 320  |\n| Past service costs                      | 150  |\n| Employer contributions                  | 1,200|\n| Benefit obligation at beginning of year | 45,000|\n| Benefit obligation at end of year       | 48,395|\n| Plan assets at beginning of year        | 40,800|\n| Plan assets at end of year              | 44,300|\n| Actuarial loss                          | 350  |\n| Actual return on plan assets            | 3,100|\n| Discount rate on plan liabilities       | 7.5% |\n| Expected rate of return on plan assets  | 8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "test-652",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Chicago, a home decor shopping company, provides its employees a defined benefit pension plan. Based on the data provided in the next table, could you compute the regular pension expense to be reported in I/S following IFRS?",
        "output": [
            " Sure! To compute the regular pension expense to be reported in the Income Statement (I/S) according to IFRS, we can use the following steps:\n\n1. Calculate the pension expense components.\n2. Sum the pension expense components to get the total pension expense.\n\nHere\u2019s the Python program to accomplish that:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150\n    expected_return_on_plan_assets = (40800 + 44300) / 2 * 0.082 # Average plan assets * Expected rate of return\n    interest_cost = (45000 + 48395) / 2 * 0.075  # Average benefit obligation * Discount rate on plan liabilities\n    actual_return_on_plan_assets = 3100\n\n    # Do math calculation to get the answer\n    regular_pension_expense = current_service_costs + past_service_costs + interest_cost - expected_return_on_plan_assets\n\n    # return answer\n    return regular_pension_expense\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nIn this program:\n- `current_service_costs` and `past_service_costs` are directly given in the table.\n- `expected_return_on_plan_assets` is calculated using the average plan assets times the expected rate of return on plan assets.\n- `interest_cost` is calculated using the average benefit obligation times the discount rate on plan liabilities.\n- `actual_return_on_plan_assets` is directly given in the table.\n- The regular pension expense is obtained by summing current service costs, past service costs, and interest cost, and then subtracting the expected return on plan assets."
        ]
    },
    {
        "tables": [
            "| Net income | $120 |\n|---|---|\n| Decrease in accounts receivable | 20 |\n| Depreciation | 25 |\n| Increase in inventory | 10 |\n| Increase in accounts payable | 7 |\n| Decrease in wages payable | 5 |\n| Increase in deferred tax liabilities | 15 |\n| Profit from the sale of land | 2 |"
        ],
        "topic": "Accounting",
        "question_id": "test-653",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data, what is the company's cash flow from operations?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 120\n    decrease_in_accounts_receivable = 20\n    depreciation = 25\n    increase_in_inventory = -10\n    increase_in_accounts_payable = 7\n    decrease_in_wages_payable = -5\n    increase_in_deferred_tax_liabilities = 15\n    profit_from_sale_of_land = 2\n\n    # Calculate cash flow from operations\n    cash_flow_from_operations = net_income \\\n                                + decrease_in_accounts_receivable \\\n                                + depreciation \\\n                                + increase_in_inventory \\\n                                + increase_in_accounts_payable \\\n                                + decrease_in_wages_payable \\\n                                + increase_in_deferred_tax_liabilities \\\n                                - profit_from_sale_of_land\n\n    # return answer\n    return cash_flow_from_operations\n```\n\nWhen executed, this program will calculate the company's cash flow from operations based on the provided data. The function `solution` returns the computed cash flow from operations."
        ]
    },
    {
        "tables": [
            "|                   | 2013  | 2012  |\n|-------------------|-------|-------|\n| Sales revenue     | 100,000| 95,000|\n| Cost of goods sold| 47,000 | 47,500|\n| Depreciation expense | 4,000 | 3,500 |\n| Net Income        | 11,122  | 4,556|\n|                   |      |     |\n| **Selected Balance Sheet Data as of 31 August ($ thousands)** |   \n|                   | 2013  | 2012  |\n| Current Assets    ||\n| Cash and investments | 21,122| 25,000|\n| Accounts receivable | 25,000| 13,500|\n| Inventories        | 13,000  | 8,500|\n| Total current assets | 59,122|47,000|\n| Current liabilities |      |     |\n| Accounts payable   | 15,000 |15,000|\n| Other current liabilities | 7,000 |9,000 |\n| Total current liabilities|  22,000|24,000|"
        ],
        "topic": "Accounting",
        "question_id": "test-654",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the amount of money received from clients in the year 2013 based on the chosen data from a corporation's comparative income statement and balance sheet?",
        "output": [
            " To determine the amount of money received from clients in the year 2013 from the given financial data, you need to calculate the cash collections from customers. This can be estimated by evaluating the changes in Accounts Receivable and the sales revenue for the year.\n\nHere's a Python program to compute the amount of money received from clients in 2013:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales_revenue_2013 = 100000\n    sales_revenue_2012 = 95000\n    accounts_receivable_2013 = 25000\n    accounts_receivable_2012 = 13500\n\n    # Do math calculation to get the answer\n    # Cash Collections = Sales Revenue 2013 + Accounts Receivable 2012 - Accounts Receivable 2013\n    cash_collections_2013 = sales_revenue_2013 + accounts_receivable_2012 - accounts_receivable_2013\n\n    # return answer\n    return cash_collections_2013\n```\n\nThis program calculates the cash collections from customers using the formula:\n\n\\[ \\text{Cash Collections (2013)} = \\text{Sales Revenue (2013)} + \\text{Accounts Receivable (2012)} - \\text{Accounts Receivable (2013)} \\]\n\nThis approach gives us the approximate amount of money received from clients in 2013."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-655",
        "python_solution": "",
        "ground_truth": null,
        "question": "You choose to short sell 100 shares of Monticello Equestrian Centers when it's at its annual peak of 56. Your broker informs you that your margin requirement is 45% and the commission on the acquisition is $155. During the term you are shorting the stock, Monticello pays a dividend of $2.50 per share. At the conclusion of a year, you purchase 100 shares of Monticello at 45 to settle your position and are hit with a commission of $145. What is your investment's rate of return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    peak_price = 56\n    num_shares = 100\n    margin_requirement_percentage = 0.45\n    commission_short = 155\n    dividend_per_share = 2.50\n    purchase_price = 45\n    commission_purchase = 145\n\n    # Do math calculation to get the answer\n    margin_requirement = peak_price * num_shares * margin_requirement_percentage\n    short_sale_proceeds = peak_price * num_shares\n    cost_to_short = commission_short + (dividend_per_share * num_shares)\n    purchase_cost = purchase_price * num_shares + commission_purchase\n    total_cost = margin_requirement + cost_to_short + purchase_cost\n    net_gain = short_sale_proceeds - total_cost\n    rate_of_return = net_gain / margin_requirement\n\n    # return answer\n    return rate_of_return\n\n# Run the solution to get the answer\nanswer = solution()\nprint(answer)\n```\nThis code defines a function `solution()` that calculates the rate of return on a short selling investment based on the given financial scenario. The code first defines the necessary variables, computes the necessary values, and then returns the rate of return. The final rate of return is printed when the function is called."
        ]
    },
    {
        "tables": [
            "| Discount rate | 11% |\n| --- | --- |\n| Growth rate | 2% |\n| Terminal cap rate | 8% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-656",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the initial capitalization rate of the property based on the following details?",
        "output": [
            " To calculate the initial capitalization rate, we can use the formula that incorporates the discount rate, growth rate, and terminal capitalization rate. The initial capitalization rate can be calculated using the following steps:\n\n1. Calculate the expected growth in the terminal value using the growth rate.\n2. Adjust the terminal value by subtracting the growth from the terminal cap rate.\n3. Add the discount rate to the adjusted terminal cap rate to get the initial cap rate.\n\nHere's the Python program to calculate the initial capitalization rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    discount_rate = 0.11  # 11%\n    growth_rate = 0.02    # 2%\n    terminal_cap_rate = 0.08  # 8%\n\n    # Do math calculation to get the answer\n    expected_growth = growth_rate\n    adjusted_terminal_cap_rate = terminal_cap_rate - expected_growth\n    initial_cap_rate = discount_rate + adjusted_terminal_cap_rate\n\n    # return answer\n    return initial_cap_rate\n\n# Call the function to get the answer\nanswer = solution()\nprint(f\"The initial capitalization rate is {answer:.4f}\")\n```\n\nThis script will calculate and return the initial capitalization rate based on the given discount rate, growth rate, and terminal cap rate."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-657",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager of fixed income wishes to decrease the duration from 5.5 to 4.5 using a 3-year interest rate swap with quarterly payments. If the portfolio's market value is $10,000,000 and the modified duration of the payer swap is -2.125, what is the notional principle of the swap?",
        "output": [
            " To solve the problem, we'll use the formula for adjusting the duration of a bond portfolio using an interest rate swap. The change in portfolio duration can be achieved by using the notional principal of the swap multiplied by the modified duration of the swap.\n\nHere's the formula you'll need:\n\n\\[ \\text{Notional Principal} = \\frac{\\text{Duration Change} \\times \\text{Market Value of Portfolio}}{\\text{Modified Duration of Swap}} \\]\n\nLet's translate this into a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_duration = 5.5\n    target_duration = 4.5\n    market_value_portfolio = 10000000\n    modified_duration_swap = -2.125\n\n    # Do math calculation to get the answer\n    duration_change = target_duration - current_duration\n    notional_principal = (duration_change * market_value_portfolio) / modified_duration_swap\n\n    # return answer\n    return notional_principal\n\n# Execute the solution function to get the result\nprint(solution())\n```\n\nIn this program:\n- `current_duration` is the initial duration of the portfolio.\n- `target_duration` is the desired duration after the swap.\n- `market_value_portfolio` is the market value of the portfolio.\n- `modified_duration_swap` is the modified duration of the payer swap.\n\nThe program calculates the notional principal required for the swap to achieve the desired duration change and returns this value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-658",
        "python_solution": "",
        "ground_truth": null,
        "question": "On January 1st, 20X5, Vega Holdings Corporation distributed 55,000 shares to employees as stock options. The exercise price for 24,000 of these shares is $32, while the remaining shares have an exercise price of $35. By the end of 20X5, the company's stock price had reached $42, with 1,800,000 common shares in outstanding circulation overall. The mean stock price for 20X5 was $34. Could you calculate the denominator for the diluted earnings per share?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_shares = 1800000  # Total common shares outstanding\n    shares_exercise_price_32 = 24000  # Shares with exercise price of $32\n    shares_exercise_price_35 = 31000  # Remaining shares with exercise price of $35\n    exercise_price_low = 32  # Exercise price for the first set of shares\n    exercise_price_high = 35  # Exercise price for the second set of shares\n    mean_stock_price = 34  # Mean stock price for 20X5\n\n    # Calculate the number of additional shares to include for dilution\n    potential_dilutive_shares_price_32 = shares_exercise_price_32 if mean_stock_price > exercise_price_low else 0\n    potential_dilutive_shares_price_35 = shares_exercise_price_35 if mean_stock_price > exercise_price_high else 0\n\n    total_potential_dilutive_shares = potential_dilutive_shares_price_32 + potential_dilutive_shares_price_35\n\n    # Do math calculation to get the answer\n    diluted_shares_outstanding = total_shares + total_potential_dilutive_shares\n\n    # return answer\n    return diluted_shares_outstanding\n\n# Run the function to get the answer\nprint(solution())\n```\n\nThis program defines the relevant variables, checks if the mean stock price is greater than the exercise prices to determine the number of potential dilutive shares, and then calculates the total diluted shares outstanding. The answer is then returned."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-659",
        "python_solution": "",
        "ground_truth": null,
        "question": "A firm purchases a license for $6,500, planning to use it for a duration of four years. However, the firm's management anticipates deriving advantages from the license for three years, applying the straight-line amortization technique. What would be the accumulated amortization at the close of the second year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 3\n\n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization_end_of_second_year = annual_amortization * 2\n\n    # return answer\n    return accumulated_amortization_end_of_second_year\n```\n\nThis program calculates the accumulated amortization at the close of the second year by first determining the annual amortization based on the cost of the license and its useful life, and then multiplying the annual amortization by 2 to get the accumulated amortization after two years."
        ]
    },
    {
        "tables": [
            "| Years to maturity | MRR   |\n|------------------ |-------|\n| 1                 | 1%    |\n| 2                 | 1.5%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-660",
        "python_solution": "",
        "ground_truth": null,
        "question": "One year ago, a merchant entered into a three-year interest rate swap in which he receives floating payments. Currently, the established fixed swap rate is 1.4853% (a year after the swap was initially made). The starting swap rate was set at 1.82% and the notional principle stands at $100 million. What is the value of this swap?",
        "output": [
            " Certainly! To calculate the value of the swap, we need to determine the present value of the floating payments and the present value of the fixed payments, and then subtract them to find the net value. Here\u2019s the Python code you can use to calculate this value:\n\n```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 100000000\n    starting_swap_rate = 0.0182\n    current_fixed_swap_rate = 0.014853\n    years = 2  # remaining years\n    discount_rate = [0.01, 0.015]  # current rates for years 1 and 2\n\n    # Calculate present value of fixed payments\n    pv_fixed = 0\n    for i in range(years):\n        payment = notional_principal * current_fixed_swap_rate\n        pv_fixed += payment / (1 + discount_rate[i]) ** (i + 1)\n\n    # Calculate present value of floating payments\n    pv_floating = 0\n    for i in range(years):\n        payment = notional_principal * starting_swap_rate\n        pv_floating += payment / (1 + discount_rate[i]) ** (i + 1)\n\n    # Calculate swap value\n    swap_value = pv_floating - pv_fixed\n\n    # Return the swap value\n    return swap_value\n\n# Call the function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program does the following:\n1. Defines the necessary variables, including the notional principal, starting swap rate, current fixed swap rate, and discount rates for the remaining years.\n2. Computes the present value of the fixed payments.\n3. Computes the present value of the floating payments.\n4. Computes the swap value by subtracting the present value of the fixed payments from the present value of the floating payments.\n5. Returns the swap value.\n\nThis should give you the value of the swap based on the provided information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-661",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that the yield-to-maturity of Bond B increases by 20 basis points, and given that the bond's annual modified duration is 6.932 and the annual convexity is 59.270, what should be the anticipated percentage price change?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    basis_point_change = 20 / 100.0  # Convert basis points to a decimal\n    modified_duration = 6.932\n    annual_convexity = 59.270\n\n    # Do math calculation to get the answer\n    change_due_to_duration = -modified_duration * basis_point_change\n    change_due_to_convexity = (annual_convexity / 2) * (basis_point_change ** 2)\n    total_percentage_price_change = change_due_to_duration + change_due_to_convexity\n\n    # Return the answer\n    return total_percentage_price_change\n\n# Call the function to get the result\nresult = solution()\nprint(\"The anticipated percentage price change is:\", result)\n```\n\nThis Python program defines a function `solution()` that calculates the anticipated percentage price change of a bond based on its modified duration and annual convexity when the yield-to-maturity increases by 20 basis points. The function returns the calculated percentage price change."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-662",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the constant maturity mortality if the assumed annual conditional prepayment rate (CPR) for a cluster of mortgages is 5% and the weighted average maturity of the respective mortgages is 15 years?",
        "output": [
            " Certainly! Here is the Python program to calculate the constant maturity mortality based on the given annual conditional prepayment rate (CPR) and the weighted average maturity of the mortgages:\n\n```python\ndef solution():\n    # Define variables name and value\n    cpr = 0.05  # assumed annual CPR\n    weighted_average_maturity = 15  # years\n\n    # Do math calculation to get the answer\n    # The constant maturity mortality (CMM) can be approximated using the formula:\n    # CMM = 1 - (1 - CPR)^(1/12)\n    cmm = 1 - (1 - cpr)**(1/12)\n\n    # return answer\n    return cmm\n```\n\nYou can run this program to get the constant maturity mortality for the given CPR and weighted average maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-663",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the anticipated rate of return for a share with CAPM, given a beta of 1.5, a risk-free rate of 5%, and a market return of 8%?",
        "output": [
            " Sure, here is the Python program to calculate the anticipated rate of return for a share using the Capital Asset Pricing Model (CAPM):\n\n```python\ndef solution():\n    # Define variables name and value\n    beta = 1.5\n    risk_free_rate = 0.05  # 5%\n    market_return = 0.08   # 8%\n\n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n\n    # return answer\n    return expected_return\n```\n\nThis program defines the necessary variables (`beta`, `risk_free_rate`, and `market_return`), performs the CAPM calculation, and returns the anticipated rate of return."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-664",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the five-year Treasury bond in the US has a yield of 2% and the swap spread is reported at 50 bps, what is the interest rate paid by the fixed payer in a five-year interest rate swap?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    treasury_yield = 0.02  # 2%\n    swap_spread = 0.0050   # 50 bps (basis points), which is 0.5%\n\n    # Do math calculation to get the answer\n    fixed_interest_rate = treasury_yield + swap_spread\n\n    # return answer\n    return fixed_interest_rate\n```\n\nThis program defines the variables `treasury_yield` and `swap_spread`, then calculates the fixed interest rate by adding the two values together. The result is returned as the answer."
        ]
    },
    {
        "tables": [
            "| Convertible Bond Issued by Pro Star, Inc |      |\n|--------------------------------|------|\n| Issue Date                     | 6 December 20X0 |\n| Maturity Date                  | 6 December 20X4 |\n| Coupon Rate                    | 2%  |\n| Issue Price                    | $1,000 |\n| Conversion Ratio               | 31   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-665",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the conversion price of the bond in Exhibit 3, which was issued by Pro Star as a convertible bond, according to the exhibit below?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    issue_price = 1000\n    conversion_ratio = 31\n\n    # Do math calculation to get the answer\n    conversion_price = issue_price / conversion_ratio\n\n    # return answer\n    return conversion_price\n```\n\nThis program calculates the conversion price of the bond using the given issue price and conversion ratio. The resulting value from running this program will be the conversion price of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-666",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, Parker Inc. acquired a production machine for $60,000 that is anticipated to produce an annual cash inflow of $25,000 for six years. The company will depreciate the machine over six years for accounting reasons, but the tax authority assumes a useful lifespan of five years for the machine. If the tax rate is 40% and the machine has no residual value, what would be the taxable income for Parker Inc. in the first year if the straight-line method is applied?",
        "output": [
            " Sure! Here's the Python program to calculate the taxable income for Parker Inc. in the first year:\n\n```python\ndef solution():\n    # Define variables name and value\n    machine_cost = 60000\n    annual_cash_inflow = 25000\n    accounting_lifespan = 6\n    tax_lifespan = 5\n    tax_rate = 0.40\n\n    # Calculate the depreciation expense per year for accounting purposes\n    accounting_depreciation = machine_cost / accounting_lifespan\n\n    # Calculate the depreciation expense per year for tax purposes\n    tax_depreciation = machine_cost / tax_lifespan\n\n    # Calculate the taxable income for the first year\n    taxable_income = (annual_cash_inflow - accounting_depreciation) - (tax_rate * (annual_cash_inflow - tax_depreciation))\n\n    # Return the answer\n    return taxable_income\n\n# Print the result\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the depreciation expenses for both accounting and tax purposes, and then computes the taxable income for the first year. The result is returned as the answer."
        ]
    },
    {
        "tables": [
            "|                                             | 2010 | 2011 | 2012 |\n|---------------------------------------------|------|------|------|\n| **Net sales**                               | 46.8 | 50.5 | 53.9 |\n| **Cost of sales**                           | 18.2 | 18.4 | 18.8 |\n| **Gross profit**                            | 28.6 | 32.1 | 35.1 |\n| **Selling, general, and administrative (SG&A) expenses** | 19.3 | 22.5 | 25.1 |\n| **Operating income**                        | 9.3  | 9.6  | 10.0 |\n| **Interest expense**                        | 0.5  | 0.7  | 0.6  |\n| **Income before provision for income tax**  | 8.8  | 8.9  | 9.4  |\n| **Provision for income taxes**              | 2.8  | 2.8  | 3.1  |\n| **Net income**                              | 6.0  | 6.1  | 6.3  |"
        ],
        "topic": "Accounting",
        "question_id": "test-667",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Exhibits 1, what is Applicant B's prediction for selling, general, and administrative costs in 2013, considering that his forecast states the following: net sales will increase at the average yearly growth rate in net sales for the years 2010-2012 and the 2013 SG&A/net sales ratio will remain consistent with the average ratio during 2010-2012?",
        "output": [
            " Certainly! Let's determine Applicant B's prediction for selling, general, and administrative (SG&A) costs in 2013 based on the given conditions.\n\nHere is the Python program to calculate the required values:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_sales_2010 = 46.8\n    net_sales_2011 = 50.5\n    net_sales_2012 = 53.9\n    sga_2010 = 19.3\n    sga_2011 = 22.5\n    sga_2012 = 25.1\n\n    # Calculate the average yearly growth rate in net sales for the years 2010-2012\n    growth_rate_2011 = (net_sales_2011 / net_sales_2010) - 1\n    growth_rate_2012 = (net_sales_2012 / net_sales_2011) - 1\n    avg_growth_rate = (growth_rate_2011 + growth_rate_2012) / 2\n\n    # Calculate the average SG&A/net sales ratio for the years 2010-2012\n    sga_ratio_2010 = sga_2010 / net_sales_2010\n    sga_ratio_2011 = sga_2011 / net_sales_2011\n    sga_ratio_2012 = sga_2012 / net_sales_2012\n    avg_sga_ratio = (sga_ratio_2010 + sga_ratio_2011 + sga_ratio_2012) / 3\n\n    # Predict net sales for 2013\n    net_sales_2013 = net_sales_2012 * (1 + avg_growth_rate)\n\n    # Predict SG&"
        ]
    },
    {
        "tables": [
            "| Asset Class    | Geometric Return (%) |\n| -------------- | -------------------- |\n| Equities       | 8.0                  |\n| Corporate Bonds| 6.5                  |\n| Treasury bills | 2.5                  |\n| Inflation      | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-668",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the recorded historical geometric actual return rate for company bonds as per the researcher?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n\n    # return answer\n    return corporate_bonds_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-669",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firm N, which uses the IFRS system, allocated $22 million for inventory acquisition last year. Following a natural calamity, the inventory's value was reduced to $19 million. However, by the end of the year, certain equipment was still functional, raising the actual inventory value to $25 million. What should be the reported inventory value for Firm N?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_inventory_value = 22000000\n    reduced_value_after_calamity = 19000000\n    actual_inventory_value_end_of_year = 25000000\n\n    # Under IFRS, inventory should be reported at the lower of cost or net realizable value (NRV)\n    # Here, the cost is the original value before the calamity, and the NRV could be considered as the value after the calamity\n    reported_inventory_value = min(original_inventory_value, reduced_value_after_calamity)\n\n    # return answer\n    return reported_inventory_value\n```\n\nThis program will return the reported inventory value under IFRS, which is the lower of the original inventory value and the value after the calamity. In this case, the inventory value should be reported as $19 million."
        ]
    },
    {
        "tables": [
            "|                      | Portfolio W    | Futures Contract and CTD Bond |\n|----------------------|----------------|------------------------------|\n| Market value         | $120,349,000   | Price                        | 143.20                        |\n| Modified duration    | 9.30           | Modified duration            | 9.00                          |\n| Basis point value    | $111,924.57    | Basis point value            | 128.88                        |\n|                      |                | Conversion factor            | 0.75                          |\n|                      |                | Contract size                | $100,000                      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-670",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Exhibit 1, to meet the goal of junior analyst, Benjamin, to lower the modified duration of his fully invested US Treasuries portfolio, Portfolio B, to 3.00, how many Treasury futures contracts does Benjamin need to sell?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_value_portfolio_W = 120349000\n    modified_duration_portfolio_W = 9.30\n    modified_duration_goal = 3.00\n    bond_modified_duration = 9.00\n    conversion_factor = 0.75\n    contract_size = 100000\n    bp_value_portfolio = 111924.57\n    bp_value_futures = 128.88\n\n    # Do math calculation to get the answer\n    change_in_modified_duration = modified_duration_goal - modified_duration_portfolio_W\n    change_in_bp_value = change_in_modified_duration * bp_value_portfolio\n    change_in_contracts = change_in_bp_value / bp_value_futures\n    bp_value_per_futures_contract = conversion_factor * contract_size / 100\n    number_of_contracts = change_in_contracts / bp_value_per_futures_contract\n\n    # return answer\n    return int(number_of_contracts)\n```\nThis Python program calculates the number of Treasury futures contracts Benjamin needs to sell to lower the modified duration of his portfolio to the desired level of 3.00. The calculation involves determining the required change in modified duration and then converting that into the corresponding number of futures contracts. The result is returned as an integer value."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-671",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial institution has recently received loan applications amounting to $210 million; it plans to acquire $95M in novel Treasury bonds releasing this week and foresees that its top corporate client's credit line withdrawals will reach $115M. The total funds from deposits and other client funds obtained today amount to $210 million, and the expected funds to be garnered next week amounts to an additional $150M. Based on the provided information, what is the discrepancy in available funds?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    loan_applications = 210_000_000  # Amount of loan applications\n    treasury_bonds = 95_000_000      # Amount to be acquired in Treasury bonds\n    credit_line_withdrawals = 115_000_000  # Expected withdrawals from top corporate client's credit line\n    current_funds = 210_000_000      # Total funds from deposits and other client funds obtained today\n    next_week_funds = 150_000_000    # Expected funds to be garnered next week\n\n    # Do math calculation to get the answer\n    total_outflows = loan_applications + treasury_bonds + credit_line_withdrawals\n    total_inflows = current_funds + next_week_funds\n    discrepancy = total_inflows - total_outflows\n\n    # return answer\n    return discrepancy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-672",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a foreign exchange broker determined the correlation between the spot and futures to be 0.875, the yearly standard deviation of the spot price to be $1.10, and the yearly standard deviation of the futures price to be $1.3. What would be the hedge ratio?",
        "output": [
            " Here is the Python program to calculate the hedge ratio based on the given correlation and standard deviations:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.875\n    standard_deviation_spot = 1.10\n    standard_deviation_futures = 1.30\n\n    # Do math calculation to get the answer\n    hedge_ratio = correlation * (standard_deviation_spot / standard_deviation_futures)\n\n    # return answer\n    return hedge_ratio\n```\n\nThe above program defines the necessary variables for the correlation, standard deviation of the spot price, and standard deviation of the futures price. It then calculates the hedge ratio using the formula and returns the result."
        ]
    },
    {
        "tables": [
            "| Book value per share, beginning of 2015 | 5.0 |\n| --------------------------------------- | --- |\n| Cost of equity                          | 8%  |\n| Persistence factor                      | 0.85|",
            "|                       | 2015 | 2016 | 2017 |\n|-----------------------|------|------|------|\n| Expected earnings per share | 2.0  | 2.2  | 2.45 |\n| Expected dividend per share | 1.2  | 0.9  | 1.11 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-673",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in the table below, Henry is getting ready to reassess the worth of XYZ Corp. The business anticipates a return on equity (ROE) of 34.5% in 2017, but it's expected to gradually decrease towards the cost of equity afterward. From the start of 2015, utilizing the multi-stage residual income (RI) model, determine the fundamental value of XYZ Corp's equity. Can you calculate the fundamental price per share?",
        "output": [
            " Certainly! I will generate a Python program to determine the fundamental value per share of XYZ Corp using the multi-stage residual income model.\n\n```python\ndef solution():\n    # Define variables name and value\n    book_value_2015 = 5.0\n    cost_of_equity = 0.08\n    persistence_factor = 0.85\n\n    # Expected earnings per share\n    eps_2015 = 2.0\n    eps_2016 = 2.2\n    eps_2017 = 2.45\n\n    # Expected dividend per share\n    dividend_2015 = 1.2\n    dividend_2016 = 0.9\n    dividend_2017 = 1.11\n\n    # ROE in 2017\n    roe_2017 = 0.345\n\n    # Calculate book value at the end of each year\n    book_value_2016 = book_value_2015 + eps_2015 - dividend_2015\n    book_value_2017 = book_value_2016 + eps_2016 - dividend_2016\n    book_value_2018 = book_value_2017 + eps_2017 - dividend_2017\n\n    # Calculate residual income for each year\n    residual_income_2015 = (eps_2015 - cost_of_equity * book_value_2015)\n    residual_income_2016 = (eps_2016 - cost_of_equity * book_value_2016)\n    residual_income_2017 = (eps_2017 - cost_of_equity * book_value_2017)\n\n    # Present value of residual incomes\n    pv_residual_income_2015 = residual_income_2015 / (1 + cost_of_equ"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-674",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood that a stock B from the stock market, with an average return of 18 percent and a standard deviation of the estimate return of 25 percent annually, exceeds a return of 22 percent, assuming the returns are normally distributed? A market researcher is currently investigating this.",
        "output": [
            " To answer the question, we can use the properties of a normal distribution. Specifically, we need to calculate the probability that the stock's return exceeds 22 percent, given its average return and standard deviation. For this, we can use the cumulative distribution function (CDF) of the normal distribution.\n\nHere is the Python program:\n\n```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    average_return = 0.18\n    standard_deviation = 0.25\n    target_return = 0.22\n\n    # Do math calculation to get the answer\n    # Convert target return to z-score\n    z_score = (target_return - average_return) / standard_deviation\n    # Calculate the probability that return is less than or equal to target_return\n    probability_less_than_target = norm.cdf(z_score)\n    # The answer is the probability that return is greater than target_return\n    probability_greater_than_target = 1 - probability_less_than_target\n\n    # Return answer\n    return probability_greater_than_target\n\n# To get the answer\nanswer = solution()\nprint(f\"The likelihood that the stock's return exceeds 22 percent is: {answer:.4f}\")\n```\n\nThe `norm.cdf` function from the `scipy.stats` module is used to compute the cumulative probability of a normal distribution. Given the average return and standard deviation, we convert the target return into a z-score, then use the CDF to determine the probability of the return being below the target. The probability of the return exceeding the target is simply one minus that value."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-675",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine in 2017, a USD/EUR spot exchange rate hits 1.2865 at a certain period. The one-year forward rate then is 1.28485. What would be the one-year forward points quoted as?",
        "output": [
            " Certainly! Let's define the variables for the spot exchange rate and the one-year forward rate, and then calculate the one-year forward points using these values.\n\nThe one-year forward points can be calculated by subtracting the spot rate from the one-year forward rate, then multiplying by 10,000 to express the points in terms consistent with common currency market conventions.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables and their values\n    spot_rate = 1.2865   # USD/EUR spot exchange rate\n    forward_rate = 1.28485  # One-year forward rate\n\n    # Calculate the one-year forward points\n    forward_points = (forward_rate - spot_rate) * 10000\n\n    # Return the answer\n    return forward_points\n\n# If you want to run the function and print the answer\nprint(solution())\n```\n\nThis program calculates the one-year forward points based on the given spot exchange rate and the one-year forward rate, then returns the computed value as the output."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-676",
        "python_solution": "",
        "ground_truth": null,
        "question": "Fortune Corporation has a tax burden of 70%, interest burden of 0.8 times, current ratio of 1.5 times, EBIT margin of 20%, asset turnover of 3 times, leverage ratio of 1.6 times. Can you compute the corporation's return on equity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tax_burden = 0.70\n    interest_burden = 0.8\n    current_ratio = 1.5\n    EBIT_margin = 0.20\n    asset_turnover = 3.0\n    leverage_ratio = 1.6\n\n    # Do math calculation to get the answer\n    EBIT = EBIT_margin * revenue  # revenue can be assumed as 1 for simplicity\n    EBT = EBIT - (tax_burden * EBIT)\n    net_income = EBT - (interest_burden * EBT)\n    assets = 1  # Assuming revenue = assets * asset_turnover\n    equity = assets / leverage_ratio\n    ROE = net_income / equity\n\n    # return answer\n    return ROE\n\n# Example usage\nresult = solution()\nprint(\"Return on Equity:\", result)\n```\n\nAn important note on this solution: in financial calculations, it is often critical to have specific financial data (like revenue, interest, and taxes). Here, we're making reasonable assumptions to calculate the Return on Equity (ROE). If you have the actual data, please replace the assumed values for a more precise result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-677",
        "python_solution": "",
        "ground_truth": null,
        "question": "The value of the stocks portfolio stands at $10,000,000. The company intends to utilize futures contracts valued at $125,000 to bring down the beta from 1.2 to zero over a span of two months. The beta value of these futures contracts is 0.95. How many futures contracts should the company sell?",
        "output": [
            " Certainly! Here is the Python program that calculates the number of futures contracts the company should sell to bring down the beta from 1.2 to zero.\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 10000000\n    futures_contract_value = 125000\n    current_beta = 1.2\n    target_beta = 0.0\n    futures_beta = 0.95\n\n    # Do math calculation to get the answer\n    portfolio_beta_weighted = current_beta * portfolio_value\n    total_beta_weighted_target = target_beta * portfolio_value\n    futures_position_needed = (portfolio_beta_weighted - total_beta_weighted_target) / futures_beta\n    number_of_contracts = futures_position_needed / futures_contract_value\n\n    # return answer as an integer because you typically can't sell a fraction of a contract\n    return int(number_of_contracts)\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the number of futures contracts needed to adjust the portfolio beta to the target value by taking into account the current beta, the target beta, the value of the portfolio, and the beta of the futures contracts. The final result is the number of futures contracts that should be sold."
        ]
    },
    {
        "tables": [
            "| Accounting profit (earnings before taxes) | $250,000 |\n|---|---|\n| Taxable income | $215,000 |\n| Tax rate | 30% |\n| Income taxes paid in year | $61,200 |\n| Deferred tax liability, start of year | $82,400 |\n| Deferred tax liability, end of year | $90,650 |"
        ],
        "topic": "Accounting",
        "question_id": "test-678",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the income tax expense listed on this year's earnings statement for a corporation for the current fiscal year?",
        "output": [
            " Certainly! To determine the income tax expense listed on the year's earnings statement for the current fiscal year, we need to use the following information:\n\n1. Taxable income for the fiscal year.\n2. Tax rate.\n3. Deferred tax liability at the start of the year.\n4. Deferred tax liability at the end of the year.\n\nThe income tax expense can be calculated using the following formula:\n\n\\[ \\text{Income Tax Expense} = \\text{Taxable Income} \\times \\text{Tax Rate} + \\text{Deferred Tax Liability Change} \\]\n\nWhere:\n\\[ \\text{Deferred Tax Liability Change} = \\text{Deferred Tax Liability (end of year)} - \\text{Deferred Tax Liability (start of year)} \\]\n\nHere is the Python program to calculate the income tax expense:\n\n```python\ndef solution():\n    # Define variables name and value\n    taxable_income = 215000\n    tax_rate = 0.30\n    deferred_tax_liability_start = 82400\n    deferred_tax_liability_end = 90650\n\n    # Do math calculation to get the answer\n    deferred_tax_liability_change = deferred_tax_liability_end - deferred_tax_liability_start\n    income_tax_expense = (taxable_income * tax_rate) + deferred_tax_liability_change\n\n    # return answer\n    return income_tax_expense\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the income tax expense by considering the taxable income, tax rate, and changes in deferred tax liability over the year. The final value returned by the `solution` function is the income tax expense."
        ]
    },
    {
        "tables": [
            "| Option        | W     | X     | Y     | z     |\n|---------------|-------|-------|-------|-------|\n| Type of Option| Call  | Call  | Put   | Put   |\n| Exercise Price| $38.00| $46.00| $38.00| $36.00|\n| N (d1)        | 0.56  | 0.30  | 0.56  | 0.64  |\n| N (d2)        | 0.45  | 0.21  | 0.45  | 0.553 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-679",
        "python_solution": "",
        "ground_truth": null,
        "question": "If she chooses to temporarily hedge the 100,000 shares of Apoth she possesses until the FDA's review concludes, how many option X contracts would Smith need to sell to effectuate the hedge plan, based on the information in Exhibit 2?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shares_to_hedge = 100000\n    shares_per_contract = 100\n\n    # Do math calculation to get the answer\n    option_contracts_needed = shares_to_hedge / shares_per_contract\n\n    # return answer\n    return option_contracts_needed\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-680",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's assume there's an $80 million exposure to a certain business partner that's backed by $70 million worth of collateral. This collateral is made up of bonds from a company with an A-level rating. The business partner holds a B+ rating. With a 150% risk weight for the business partner and a 50% risk weight for the collateral, what would the risk-weighted assets be for the exposure using a straightforward approach?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    exposure = 80000000\n    collateral = 70000000\n    risk_weight_partner = 1.50\n    risk_weight_collateral = 0.50\n\n    # Do math calculation to get the answer\n    risk_weighted_exposure = exposure * risk_weight_partner\n    risk_weighted_collateral = collateral * risk_weight_collateral\n    risk_weighted_assets = risk_weighted_exposure - risk_weighted_collateral\n\n    # return answer\n    return risk_weighted_assets\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the risk-weighted assets by considering the exposure, collateral, and their respective risk weights. The final risk-weighted assets are returned as the output. Simply run the program to get the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-681",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Thompson, a credit analyst, is planning to use the data from a 5-year corporate bond labeled Bond E that is presently yielding a return of 7.5%, with a comparable government bond offering 2.5%, and a suitable CDS contract bearing a credit spread of 4.5% to carry out a basis trade, what will be the accrued profit if there's a convergence in the bond and CDS market?",
        "output": [
            " Sure, I will help you define and calculate the accrued profit based on the given information. The basis trade involves a potential arbitrage opportunity where the spread between the corporate bond yield and the risk-free rate plus the CDS spread is exploited.\n\nHere\u2019s how you can approach the problem:\n\n1. Calculate the current bond spread by subtracting the risk-free rate from the bond yield.\n2. Determine the potential profit if the bond spread converges to the CDS spread.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables and values\n    bond_yield = 7.5 / 100  # Convert to decimal\n    risk_free_rate = 2.5 / 100  # Convert to decimal\n    cds_spread = 4.5 / 100  # Convert to decimal\n\n    # Calculate the current bond spread\n    bond_spread = bond_yield - risk_free_rate\n\n    # Calculate the potential profit when convergence happens\n    profit = (bond_spread - cds_spread) * 100  # Convert back to percentage\n\n    # return answer\n    return profit\n\nprint(solution())\n```\n\nThis program calculates the current spread of the bond and compares it to the CDS spread. The difference between these values (if positive) represents the accrued profit when convergence in the bond and CDS market occurs."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-682",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming that Corporation N's pretax profits are taxed at the business level of 35%, and the individual tax rate on dividends is at 15%. All the pretax income are dedicated to dividends. What is the effective tax rate on the dividend?",
        "output": [
            " def solution():\n    # Define variables name and value\n    business_tax_rate = 0.35\n    individual_tax_rate = 0.15\n\n    # Do math calculation to get the answer\n    # First, calculate the after-tax income after business tax\n    after_business_tax = 1 - business_tax_rate\n\n    # Then, calculate the effective tax rate on the dividend\n    effective_tax_rate = business_tax_rate + (after_business_tax * individual_tax_rate)\n\n    # return answer\n    return effective_tax_rate\n\n# Example usage\nprint(solution())  # This should output the effective tax rate\n```"
        ]
    },
    {
        "tables": [
            "|       | Classification | Cost   | Market value 2018 | Market value 2019 |\n|-------|----------------|--------|-------------------|-------------------|\n| Shoes Corp | FVOCI   | 12,000 | 15,000  | 16,000  |\n| Angle PD   | Amortized cost  | 35,000 | 32,000  | 33,000  |\n| T-vision   | FVPL   | 42,000 | 45,000  | 56,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-683",
        "python_solution": "",
        "ground_truth": null,
        "question": "In her role at the Equity investment company, Fabian, a CFA, is preparing a research report on a company known as PZ, which is listed in HK and follows IFRS 9. She pulled information from PZ's year-end 2019 financial report regarding three fixed income investments (assuming cost equals par value). Had Shoes Corp been classified as a Fair Value through P/L in 2019, what would the earnings before taxes have been?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shoes_corp_cost = 12000\n    shoes_corp_market_value_2018 = 15000\n    shoes_corp_market_value_2019 = 16000\n\n    # Do math calculation to get the answer\n    gain_loss_2019 = shoes_corp_market_value_2019 - shoes_corp_market_value_2018\n\n    # return answer\n    return gain_loss_2019\n\n# Invoke the solution function and print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-684",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current value of a European-style put option is set to be determined by a CEO using a two-period binomial model. The present stock price is $32, with the put option's exercise price also at $32. The up and down factors are 1.12 and 0.92 respectively, with a risk-free rate of 5%. What is the value of this put option?",
        "output": [
            " Sure, here is the Python program to determine the value of the European-style put option using a two-period binomial model:\n\n```python\ndef solution():\n    # Define variables name and value\n    S0 = 32    # Present stock price\n    K = 32     # Exercise price\n    u = 1.12   # Up factor\n    d = 0.92   # Down factor\n    r = 0.05   # Risk-free rate\n\n    # Compute the probabilities and discount factor\n    p = (1 + r - d) / (u - d)\n    discount_factor = 1 / (1 + r)\n\n    # Calculate stock prices at different nodes\n    S1_u = S0 * u\n    S1_d = S0 * d\n    S2_uu = S1_u * u\n    S2_ud = S1_u * d\n    S2_dd = S1_d * d\n\n    # Calculate option payoffs at maturity (Time = T2)\n    payoff_uu = max(0, K - S2_uu)\n    payoff_ud = max(0, K - S2_ud)\n    payoff_dd = max(0, K - S2_dd)\n\n    # Calculate expected payoffs at T1\n    option_value_u = (p * payoff_uu + (1 - p) * payoff_ud) * discount_factor\n    option_value_d = (p * payoff_ud + (1 - p) * payoff_dd) * discount_factor\n\n    # Calculate the present value of the option\n    option_value = (p * option_value_u + (1 - p) * option_value_d) * discount_factor\n\n    # Return the value of the option\n    return option_value\n\n# Execute the solution function to get the answer\nprint(solution())\n```\n\nThis program follows the process to:\n- Define initial values such as the stock price, exercise price, up factor, down factor, and risk-free rate.\n- Calculate the risk-neutral probabilities and the discount factor.\n- Compute the stock prices at"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-685",
        "python_solution": "",
        "ground_truth": null,
        "question": "The 15-month investment duration for a bond yielded a 12% return. What is the annualized yield?",
        "output": [
            " Sure, here's a Python program to calculate the annualized yield for the given investment:\n\n```python\ndef solution():\n    # Define variables and their values\n    total_duration_months = 15\n    total_return_percent = 12.0\n\n    # Convert total duration from months to years\n    total_duration_years = total_duration_months / 12.0\n\n    # Calculate the annualized yield\n    annualized_yield = (1 + total_return_percent / 100) ** (1 / total_duration_years) - 1\n    annualized_yield = annualized_yield * 100  # Convert back to percentage\n\n    # Return the answer\n    return annualized_yield\n\n# Test the function\nprint(solution())\n```\n\nThis program calculates the annualized yield by first converting the total investment duration from months to years, then using the formula for annualized return, and finally converting the result back to a percentage format. The function `solution` returns this computed annualized yield."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-686",
        "python_solution": "",
        "ground_truth": null,
        "question": "A manager of an endowment fund is assessing the market risk of Omega Manufacturing Fund. The fund projects an annual return of 7.1% and a volatility of 7.9%, and it is compared against the Russell 2000 Index. It is assumed by the manager that the anticipated annual return of the Russell 2000 Index is 7.8%, with a yearly volatility of 9.8%. In accordance with the Capital Asset Pricing Model, if the risk-free rate per year is 3.2%, what would be the beta of Omega Manufacturing Fund?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.032  # 3.2% in decimal\n    market_return = 0.078   # 7.8% in decimal\n    market_volatility = 0.098  # 9.8% in decimal\n    fund_return = 0.071    # 7.1% in decimal\n    fund_volatility = 0.079  # 7.9% in decimal\n\n    # Do math calculation to get the answer\n    market_risk_premium = market_return - risk_free_rate\n    fund_risk_premium = fund_return - risk_free_rate\n\n    beta = fund_risk_premium / market_risk_premium\n\n    # return answer\n    return beta\n```"
        ]
    },
    {
        "tables": [
            "| Year | Hazard Rate |\n|------|-------------|\n| 1    | 0.15%       |\n| 2    | 0.25%       |\n| 3    | 0.35%       |\n| 4    | 0.50%       |\n| 5    | 0.65%       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-687",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the likelihood of the firm failing to fulfill its obligations on Bond C, a five-year investment-grade bond, within the initial 4 years, as per the given information?",
        "output": [
            " Sure, I can help with that. To determine the likelihood of the firm failing to fulfill its obligations on Bond C within the initial 4 years, we need to calculate the cumulative hazard rate over the 4-year period. The cumulative hazard rate can be calculated by summing the hazard rates for the first four years.\n\nHere's the Python program to accomplish that:\n\n```python\ndef solution():\n    # Define variables and their values\n    year_1_hazard_rate = 0.0015  # 0.15%\n    year_2_hazard_rate = 0.0025  # 0.25%\n    year_3_hazard_rate = 0.0035  # 0.35%\n    year_4_hazard_rate = 0.0050  # 0.50%\n\n    # Do the math calculation to get the cumulative hazard rate\n    cumulative_hazard_rate = year_1_hazard_rate + year_2_hazard_rate + year_3_hazard_rate + year_4_hazard_rate\n\n    # return the answer\n    return cumulative_hazard_rate\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nWhen you run the above code, it will calculate the cumulative hazard rate for the first four years and return the result, which represents the likelihood of the firm failing to fulfill its obligations within those years."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-688",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the neckline is positioned at \u20ac100, the shoulders at \u20ac90, and the head at \u20ac75 in a reversed head and shoulders pattern, what is the target value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    neckline = 100  # in euros\n    shoulder_left = 90  # in euros\n    shoulder_right = 90  # in euros\n    head = 75  # in euros\n\n    # Do math calculation to get the answer\n    # Calculate the height of the pattern\n    pattern_height = neckline - head\n\n    # The target value is calculated as neckline + pattern height\n    target_value = neckline + pattern_height\n\n    # return answer\n    return target_value\n\n# Run the solution to get the target value\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-689",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the monthly repayment for a customer who buys a car with a loan of \u20ac30,000 that is set to be paid off in five years with fixed monthly installments, an annual nominal interest of 8% and interest compounded monthly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 30000\n    annual_interest_rate = 8 / 100\n    loan_period_years = 5\n    monthly_payments_per_year = 12\n\n    # Do math calculation to get the answer\n    loan_period_months = loan_period_years * monthly_payments_per_year\n    monthly_interest_rate = annual_interest_rate / monthly_payments_per_year\n\n    # Calculate the monthly repayment using the formula for a fixed monthly installment\n    monthly_repayment = (principal * (monthly_interest_rate * (1 + monthly_interest_rate) ** loan_period_months)) / ((1 + monthly_interest_rate) ** loan_period_months - 1)\n\n    # return answer\n    return monthly_repayment\n\n# Test the solution\nresult = solution()\nprint(f\"The monthly repayment is \u20ac{result:.2f}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-690",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming we select 20 students to sit for the university admission test, how many may potentially suffer from anxiety neurosis if it's believed that 45% of all examinees experience it?",
        "output": [
            " Sure, here is the Python program that answers the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_students = 20\n    anxiety_rate = 0.45\n\n    # Do math calculation to get the answer\n    expected_students_with_anxiety = total_students * anxiety_rate\n\n    # return answer\n    return expected_students_with_anxiety\n```\n\nYou can call the `solution()` function to get the number of students who may potentially suffer from anxiety neurosis."
        ]
    },
    {
        "tables": [
            "| Spot rate (USD/AUD) | 0.9062/0.9066 |\n| --- | --- |\n| Three-month points | -36.8/-36.4 |\n| Three-month Libor (AUD) | 2.88% |\n| Three-month Libor (USD) | 0.23% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-691",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the beginning of the year, Brighton offset a major exposure to the Australian dollar (AUD) by selling AUD 5 million forward against the US dollar (USD) at the all-in forward price of 0.8940 (USD/AUD). Currently, it's three months away from the settlement date and Sanderson wants to mark the forward position to market. Exhibit 1 provides data on the current rates in foreign exchange markets. What is the mark-to-market value for Brighton's forward position?",
        "output": [
            " Certainly! To calculate the mark-to-market value for Brighton's forward position, we need to find the current mark-to-market value in USD of the forward contract. Here's the detailed step-by-step approach:\n\n1. Calculate the new forward rate using the spot rate, forward points, and interest rates.\n2. Calculate the mark-to-market value using the difference between the all-in forward rate (vstt) and the new forward rate.\n3. Convert the value from AUD to USD using the spot rate.\n\nThe steps and calculations are as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    AUD_amount = 5000000  # Amount in AUD\n    all_in_forward_rate = 0.8940  # All-in forward rate (USD/AUD)\n    spot_rate_bid = 0.9062  # Bid spot rate (USD/AUD)\n    forward_points = -0.00364  # Forward points (negative as it's a negative value in the table)\n    allaud_libor_rate = 0.0288  # AUD Libor rate (3-month)\n    usd_libor_rate = 0.0023  # USD Libor rate (3-month)\n\n    # Calculate the current forward rate\n    current_forward_rate = spot_rate_bid + forward_points\n\n    # Calculate the mark-to-market value in AUD\n    mark_to_market_AUD = AUD_amount * (all_in_forward_rate - current_forward_rate)\n\n    # Convert the mark-to-market value from AUD to USD\n    mark_to_market_USD = mark_to_market_AUD / spot_rate_bid\n\n    # return answer\n    return mark_to_market_USD\n\n# Execute the solution function\nprint(solution())\n```\n\nThis Python code provides a solution to calculate the mark-to-market value for Brighton's forward position in USD."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-692",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the worth of a share which is projected to pay a $3 dividend in the subsequent year, with a consistent growth rate of 3% and a needed return rate of 8%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend = 3\n    growth_rate = 0.03\n    required_return_rate = 0.08\n\n    # Do math calculation to get the answer\n    intrinsic_value = dividend / (required_return_rate - growth_rate)\n\n    # Return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-693",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a perfectly competitive market where the demand schedule is P = 165 - 3Q (for Q \u2264 55), how is the entry price for new players determined given that the long-term total cost for every business is 125 + Q + 5Q2, the average cost is 125/Q + 1 + 5Q, and the marginal cost is 1 + 10Q?",
        "output": [
            " Sure, I'll go ahead and generate a Python program that helps determine the entry price for new players in a perfectly competitive market. For the entry price, we need to find the point where the price equals the average cost (AC) in the long run. Since this is a competitive market, price (P) equals marginal revenue (MR) which also equals marginal cost (MC). This will set the entry price.\n\nHere is the Python code to solve this:\n\n```python\ndef solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables name and value\n    Q = symbols('Q')\n\n    # The equilibrium condition in a competitive market is P = AC = MC\n    marginal_cost = 1 + 10*Q\n    average_cost = 125/Q + 1 + 5*Q\n\n    # Solve for Q when MC = P (using the demand equation P = 165 - 3Q)\n    demand_price = 165 - 3*Q\n    eq = Eq(marginal_cost, demand_price)\n    q_solutions = solve(eq, Q)\n\n    # We need the real and positive solution for Q\n    valid_q = [q for q in q_solutions if q.is_real and q > 0]\n\n    if not valid_q:\n        return None  # No valid solution for Q\n\n    Q_value = valid_q[0]\n    price = demand_price.subs(Q, Q_value)\n\n    return price\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nIn this code, we use the `sympy` library for symbolic mathematics to solve equations. We first define the marginal cost and average cost equations and then solve for `Q` where marginal cost equals the demand price. This gives us the equilibrium quantity `Q`. Using this `Q`, we determine the equilibrium price, which is the entry price for new players."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-694",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer acquires a five-year bond with a 4% annual coupon for 104.58 and sells it precisely three years subsequent to the purchase. Right after the bond is bought and prior to receiving the first coupon, interest rates drop to 2.25%, and they stay at this rate for the following three years. Assuming that the coupon payments are collected and re-invested at 2.25%, what is the buyer's actualized horizon yield?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 104.58\n    annual_coupon_rate = 0.04\n    years_held = 3\n    reinvestment_rate = 0.0225\n    face_value = 100\n\n    # Do math calculation to get the answer\n    total_coupons = annual_coupon_rate * face_value * years_held\n    future_value_of_coupons = total_coupons * (1 + reinvestment_rate) ** years_held\n    selling_price = 100  # Assuming the bond is sold at face value after 3 years\n\n    total_cash_received = future_value_of_coupons + selling_price\n    actualized_yield = (total_cash_received / purchase_price) ** (1 / years_held) - 1\n\n    # return answer\n    return actualized_yield\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program calculates the buyer's actualized horizon yield based on the given conditions. The future value of the coupons collected and re-invested at the new interest rate is calculated, and then the actualized yield is determined using the total cash received and the initial purchase price of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-695",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the factors below, calculate the accrued interest for every 100 of par value for Bond H on the settlement day of 16 June 2014. The factors are: Annual Coupon - 5%, Coupon Payment Frequency - Semiannual, Interest Payment Dates - 10 April and 10 October, Maturity Date - 10 October 2016, Day Count Convention - 30/360, Annual Yield-to-Maturity - 4%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05  # 5% annual coupon\n    par_value = 100  # For every 100 of par value\n    coupon_frequency = 2  # Semiannual payment\n    interest_payment_dates = [\"10 April\", \"10 October\"]\n    settlement_date = \"16 June 2014\"\n    maturity_date = \"10 October 2016\"\n    day_count_convention = \"30/360\"\n    annual_ytm = 0.04  # 4% yield-to-maturity\n\n    from datetime import datetime\n\n    # Parse dates\n    payment_date1 = datetime.strptime(\"10 April 2014\", \"%d %B %Y\")\n    payment_date2 = datetime.strptime(\"10 October 2014\", \"%d %B %Y\")\n    settlement_date = datetime.strptime(\"16 June 2014\", \"%d %B %Y\")\n\n    # Calculate days using 30/360\n    def days_between(date1, date2):\n        d1 = date1.day\n        m1 = date1.month\n        y1 = date1.year\n        d2 = date2.day\n        m2 = date2.month\n        y2 = date2.year\n        return 360 * (y2 - y1) + 30 * (m2 - m1) + (d2 - d1)\n\n    days_from_previous_payment = days_between(payment_date1, settlement_date)\n    days_in_coupon_period = days_between(payment_date1, payment_date2)\n\n    # Calculate the accrued interest\n    coupon_payment = (coupon_rate / coupon_frequency) * par_value\n    accrued_interest = (coupon_payment / days_in_coupon_period) * days_from_previous_payment\n\n    # return answer\n    return accrued_interest\n\n# Call the solution function"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-696",
        "python_solution": "",
        "ground_truth": null,
        "question": "The corporation Successful Inc. has an operating profit margin of 10%, an asset turnover ratio of 1.5, a financial leverage multiplier of 1.6 times, and an interest burden of 0.8. The firm's ROE is 0.144, can you compute the firm's average tax rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    operating_profit_margin = 0.10\n    asset_turnover_ratio = 1.5\n    financial_leverage_multiplier = 1.6\n    interest_burden = 0.8\n    roe = 0.144\n\n    # Do math calculation to get the answer\n    roi = operating_profit_margin * asset_turnover_ratio * financial_leverage_multiplier - interest_burden\n    average_tax_rate = (roe - roi) / roi\n\n    # return answer\n    return average_tax_rate\n```\nIf you run the program, `solution()`, it will compute and return the firm's average tax rate."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price (\u20ac) | End of Period Price (\u00a3) | Total Dividends (\u20ac) |\n|----------|-------------------------------|-------------------------|----------------------|\n| Able     | 10.00                          | 12.00                   | 0.75                 |\n| Baker    | 20.00                          | 19.00                   | 1.00                 |\n| Charlie  | 30.00                          | 30.00                   | 2.00                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-697",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial expert collects the following data for an equal-weighted index made up of assets Alpha, Beta, and Gamma: What is the total return of the index?",
        "output": [
            " To calculate the total return of the index, we need to calculate the return for each security and then find the average return since the index is equally weighted. The formula for the total return of each security is:\n\n\\[\n\\text{Total Return} = \\frac{(\\text{End Price} - \\text{Beginning Price}) + \\text{Total Dividends}}{\\text{Beginning Price}}\n\\]\n\nGiven the data for securities Able, Baker, and Charlie, we can create the following Python program to calculate the total return of the index:\n\n```python\ndef solution():\n    # Define variables name and value\n    able_begin_price = 10.00\n    able_end_price = 12.00\n    able_dividends = 0.75\n\n    baker_begin_price = 20.00\n    baker_end_price = 19.00\n    baker_dividends = 1.00\n\n    charlie_begin_price = 30.00\n    charlie_end_price = 30.00\n    charlie_dividends = 2.00\n\n    # Do math calculation to get the answer\n    able_total_return = ((able_end_price - able_begin_price) + able_dividends) / able_begin_price\n    baker_total_return = ((baker_end_price - baker_begin_price) + baker_dividends) / baker_begin_price\n    charlie_total_return = ((charlie_end_price - charlie_begin_price) + charlie_dividends) / charlie_begin_price\n\n    # Calculate the average return\n    index_total_return = (able_total_return + baker_total_return + charlie_total_return) / 3\n\n    # return answer\n    return index_total_return\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the total return for each security and then computes the average of those returns to determine the total return of the index. When you run this program, it will output the average total return of the equally-weighted index"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-698",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we take 2016 as the base period, and the GDP in Nation Y for that year and the following year was $200 billion and $220 billion respectively, what would the GDP deflator be for 2017?",
        "output": [
            " To calculate the GDP deflator for 2017 using the given information, we need to use the formula for the GDP deflator:\n\n\\[ \\text{GDP Deflator} = \\left( \\frac{\\text{Nominal GDP}}{\\text{Real GDP}} \\right) \\times 100 \\]\n\nGiven:\n- Nominal GDP in 2017 = $220 billion\n- Real GDP (base year 2016) = $200 billion\n\nHere\u2019s the Python program that calculates the GDP deflator for 2017:\n\n```python\ndef solution():\n    # Define variables name and value\n    nominal_gdp_2017 = 220  # in billion dollars\n    real_gdp_2016 = 200  # in billion dollars\n\n    # Do math calculation to get the answer\n    gdp_deflator = (nominal_gdp_2017 / real_gdp_2016) * 100\n\n    # return answer\n    return gdp_deflator\n```\n\nYou can run this Python program to get the GDP deflator for 2017."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-699",
        "python_solution": "",
        "ground_truth": null,
        "question": "If every yearly trial is independent of each other, what's the probability that BBB company's stock, which has a 30% chance to increase annually, will go up more than once in the coming three years?",
        "output": [
            " Sure, based on the given problem, we need to calculate the probability that BBB company's stock will go up more than once in the next three years. Let's break it down and solve the problem step-by-step:\n\n1. The probability of the stock increasing in a given year is 30% or 0.3.\n2. We want to find the probability of the stock increasing more than once in three independent trials.\n\nWe can use the binomial probability formula to determine this. The binomial probability formula is given by:\n\n\\[ P(X = k) = \\binom{n}{k} \\cdot p^k \\cdot (1-p)^{n-k} \\]\n\nwhere:\n- \\( n \\) is the number of trials (3 years),\n- \\( k \\) is the number of successful outcomes (> 1),\n- \\( p \\) is the probability of success in each trial (0.3),\n- \\( \\binom{n}{k} \\) is the binomial coefficient.\n\nWe need to sum the probabilities for \\( k = 2 \\) and \\( k = 3 \\) because those are the cases where the stock increases more than once.\n\nLet's write the Python program to compute this:\n\n```python\ndef solution():\n    # Define variables name and value\n    num_trials = 3\n    prob_increase = 0.3\n    prob_no_increase = 1 - prob_increase\n\n    # Binomial coefficient function\n    def binomial_coeff(n, k):\n        if k > n - k:\n            k = n - k\n        coeff = 1\n        for i in range(k):\n            coeff = coeff * (n - i) // (i + 1)\n        return coeff\n\n    # Calculate probability of increasing at least twice\n    def prob_at_least_twice():\n        prob_2 = binomial_coeff(num_trials, 2) * (prob_increase ** 2) * (prob_no_increase ** (num_trials - 2))\n        prob_3 = binomial_coeff(num_trials, 3) * ("
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|----------|---------------------------|-------------------------------|\n| A        | 20                        | 16                            |\n| B        | 20                        | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-700",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an manager named Laurel from a finance firm recently built a portfolio with two unrelated assets, what would be the estimated standard deviation assuming equal weightage for both assets?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    return_a = 20\n    std_dev_a = 16\n    return_b = 20\n    std_dev_b = 12\n    weight_a = 0.5\n    weight_b = 0.5\n\n    # Do math calculation to get the answer\n    portfolio_variance = (weight_a ** 2 * std_dev_a ** 2) + (weight_b ** 2 * std_dev_b ** 2)\n    portfolio_std_dev = (portfolio_variance ** 0.5)\n\n    # return answer\n    return portfolio_std_dev\n```\n\nIn this solution, the standard deviation of the portfolio for two unrelated assets (with zero correlation) is computed using the formula for the variance of the portfolio. Here\u2019s the step-by-step explanation:\n\n1. Calculate the variance of each asset's return, which is the square of its standard deviation.\n2. Compute the weighted sum of these variances, as the assets are unrelated (assuming a correlation of 0).\n3. Compute the square root of the resulting variance to get the portfolio's standard deviation.\n\nThus, the function will return the estimated standard deviation of the portfolio."
        ]
    },
    {
        "tables": [
            "| Revenue | $4,000,000 |\n|---------|------------|\n| Cost of goods sold | $3,000,000 |\n| Other operating expenses | $500,000 |\n| Interest expense | $100,000 |\n| Tax expense | $120,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-701",
        "python_solution": "",
        "ground_truth": null,
        "question": "The gross profit of the manufacturing company, Denali Limited, is equal to?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 4000000\n    cost_of_goods_sold = 3000000\n\n    # Do math calculation to get the answer\n    gross_profit = revenue - cost_of_goods_sold\n\n    # return answer\n    return gross_profit\n```"
        ]
    },
    {
        "tables": [
            "| Labor(L) | Total Product(TP) | Average Product(AP) |\n|----------|-------------------|---------------------|\n| 1        | 100               | 100                 |\n| 2        | 210               | 105                 |\n| 3        | 300               | 100                 |\n| 4        | 360               | 90                  |\n| 5        | 400               | 80                  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-702",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data chart, what is the marginal product when the labor (L) equals 3?",
        "output": [
            " Certainly! Let's create a Python function to calculate the marginal product when the labor (L) equals 3. The marginal product is calculated as the difference in total product between the current labor unit and the previous labor unit.\n\nHere's the required Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    labor_current = 3\n    labor_previous = 2\n    total_product_current = 300\n    total_product_previous = 210\n\n    # Do math calculation to get the answer\n    marginal_product = total_product_current - total_product_previous\n\n    # return answer\n    return marginal_product\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis function calculates the marginal product when the labor (L) equals 3 by subtracting the total product of labor 2 from the total product of labor 3. The result is then returned."
        ]
    },
    {
        "tables": [
            "|                  |   Prior Year    |        |   Current Year   |        |\n|------------------|-----------------|--------|------------------|--------|\n|      Goods       |    Quantity     | Price  |    Quantity      | Price  |\n| 5 lb.bag sugar   |     150 bags    |  $3.12 |    180 bags      |  $2.92 |\n| 5 lb.bag flour   |     800 bags    |  $2.18 |    750 bags      |  $3.12 |\n| Frozen pizza(each)|    250          |  $2.90 |    250           |  $3.00 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-703",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the Paasche Index if we utilize the consumption basket for this year alongside the subsequent data from a three-item consumption goods basket, which we use to calculate inflation rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_quantity_sugar = 180\n    current_quantity_flour = 750\n    current_quantity_pizza = 250\n    current_price_sugar = 2.92\n    current_price_flour = 3.12\n    current_price_pizza = 3.00\n\n    prior_price_sugar = 3.12\n    prior_price_flour = 2.18\n    prior_price_pizza = 2.90\n\n    # Do math calculation to get the answer\n    nominator = (current_quantity_sugar * current_price_sugar) + (current_quantity_flour * current_price_flour) + (current_quantity_pizza * current_price_pizza)\n    denominator = (current_quantity_sugar * prior_price_sugar) + (current_quantity_flour * prior_price_flour) + (current_quantity_pizza * prior_price_pizza)\n\n    paasche_index = nominator / denominator\n\n    # return answer\n    return paasche_index\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-704",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming the heights of trees in a woodland area are normally distributed and the total number of trees exceeds 10,000. If a z-statistic was calculated using a sample of 200 trees and a 95% confidence interval for the sample mean height ranged from 11 to 35 meters, what would be the standard error of the mean height?",
        "output": [
            " Certainly! Let's write a Python program to calculate the standard error of the mean height given the details in the question.\n\nThe confidence interval formula for the mean is:\n\\[ \\text{CI} = \\bar{x} \\pm Z_{\\alpha/2} \\cdot \\frac{\\sigma}{\\sqrt{n}} \\]\n\nWhere:\n- \\(\\bar{x}\\) is the sample mean.\n- \\(Z_{\\alpha/2}\\) is the z-value for the given confidence level (95%).\n- \\(\\sigma\\) is the population standard deviation (unknown, so we will use the sample standard deviation).\n- \\(n\\) is the sample size.\n- The confidence interval width is \\( 35 - 11 = 24 \\).\n\nFrom the confidence interval formula, rearranging to find the standard error (\\(\\frac{\\sigma}{\\sqrt{n}}\\)):\n\\[ \\frac{\\sigma}{\\sqrt{n}} = \\frac{CI \\text{ width}}{2 \\times Z_{\\alpha/2}} \\]\n\nGiven:\n- Confidence level: 95%, so \\( Z_{\\alpha/2} \\approx 1.96 \\)\n- Sample size \\( n = 200 \\)\n- Confidence interval width = 24\n\nLet's use this to find the standard error of the mean height.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables and values\n    confidence_level = 0.95\n    z_value = 1.96  # Z-value for 95% confidence interval\n    n = 200  # sample size\n    confidence_interval_width = 24  # 35 - 11\n\n    # Do math calculation to get the answer\n    standard_error = confidence_interval_width / (2 * z_value)\n\n    # return answer\n    return standard_error\n\n# Execute the function to get the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate the standard error of the mean height and print the result."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price(E) | End of Period Price(E) | Total Dividends(E) |\n| --- | --- | --- | --- |\n| Able | 10.00 | 12.00 | 0.75 |\n| Baker | 20.00 | 19.00 | 1.00 |\n| Charlie | 30.00 | 30.00 | 2.00 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-705",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the following data for an equal-weighted index composed of assets X, Y, and Z: The total return of the index is:",
        "output": [
            " Sure, let's start by translating the given information into variables and then compute the total return for each of the securities. Finally, we'll calculate the total return of the equal-weighted index composed of Able, Baker, and Charlie.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    able_begin_price = 10.00\n    able_end_price = 12.00\n    able_dividends = 0.75\n\n    baker_begin_price = 20.00\n    baker_end_price = 19.00\n    baker_dividends = 1.00\n\n    charlie_begin_price = 30.00\n    charlie_end_price = 30.00\n    charlie_dividends = 2.00\n\n    # Calculate total return for each security\n    total_return_able = ((able_end_price - able_begin_price + able_dividends) / able_begin_price)\n    total_return_baker = ((baker_end_price - baker_begin_price + baker_dividends) / baker_begin_price)\n    total_return_charlie = ((charlie_end_price - charlie_begin_price + charlie_dividends) / charlie_begin_price)\n\n    # Calculate the total return of the equal-weighted index\n    total_return_index = (total_return_able + total_return_baker + total_return_charlie) / 3\n\n    # Return the total return of the index\n    return total_return_index\n\n# Example usage to get the answer\nprint(solution())\n```\n\nThis program defines the necessary starting and ending prices and the dividends for securities Able, Baker, and Charlie. It then calculates the total return for each security and averages these returns to get the total return of the index. The final return value is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-706",
        "python_solution": "",
        "ground_truth": null,
        "question": "Smith is a tax consultant who offers tax enlightenment counsel to individual customers. One of Smith's client, Rose, is a U.S. citizen and resides in America. Rose recently came into ownership of AAPL shares from a family member who passed on. This departed family member was a resident of the U.S., which applies a \"step-up\" in basis at death. The deceased family member bought AAPL shares at a cost of $15,000 (inclusive of commissions and other spendings) two decades ago. When the family member passed away, the market value of the AAPL stock owned by them was $220,000, and recently Rose sold these shares for $190,000. Rose's capital gains tax rate sits at 20%. The tax obligation on the sale of the AAPL shares is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_cost_basis = 15000  # Cost when purchased by the deceased family member\n    value_at_death = 220000  # Market value at the time of death\n    selling_price = 190000  # Price at which Rose sold the shares\n    capital_gains_tax_rate = 0.20  # Rose's capital gains tax rate\n\n    # Do math calculation to get the answer\n    stepped_up_basis = value_at_death  # \"Step-up\" in basis at death\n    capital_gain = selling_price - stepped_up_basis\n    tax_obligation = capital_gain * capital_gains_tax_rate\n\n    # return answer\n    return max(0, tax_obligation)  # Ensure tax obligation is not negative\n\n# Run the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Return,R         | Frequency |\n| ---------------- | --------- |\n| -5% up to 0%    | 1         |\n| 0% up to 5%     | 6         |\n| 5% up to 10%    | 4         |\n| 10% up to 15%   | 3         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-707",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the provided frequency distribution table, can you determine the relative frequency of the third interval?",
        "output": [
            " Sure, here\u2019s a Python program to calculate the relative frequency of the third interval using the provided frequency distribution table.\n\n```python\ndef solution():\n    # Define variables name and value\n    total_frequency = 1 + 6 + 4 + 3\n    frequency_third_interval = 4\n\n    # Do math calculation to get the answer\n    relative_frequency = frequency_third_interval / total_frequency\n\n    # return answer\n    return relative_frequency\n\n# Execute the function and print the result\nprint(solution())\n```\n\nThis program calculates the relative frequency of the third interval (5% up to 10%) by dividing the frequency of the third interval by the total frequency. The result is then returned and printed."
        ]
    },
    {
        "tables": [
            "| Net income | $55,000 |\n|---|---|\n| Depreciation | $60,000 |\n| Taxes paid | $25,000 |\n| Interest received | $5,000 |\n| Dividends received | $10,000 |\n| Cash received from sale of company's equipment | $40,000 |\n| Issuance of preferred stock | $45,000 |\n| Repurchase of common stock | $20,000 |\n| Purchase of machinery | $20,000 |\n| Issuance of bonds | $40,000 |\n| Debt retired through issuance of common stock | $45,000 |\n| Paid off long-term bank borrowings | $15,000 |\n| Profit on sale of building | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-708",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under American GAAP, what is the cash flow from operations?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 55000\n    depreciation = 60000\n    interest_received = 5000\n    dividends_received = 10000\n    taxes_paid = 25000\n\n    # Do math calculation to get the answer\n    # Under GAAP, cash flow from operations is calculated as:\n    # Net Income + Non-cash expenses (e.g., depreciation) - Gains from investment activities + Losses from investment activities\n    # Plus/Minus Changes in operating assets and liabilities (excluding effects from investing and financing activities)\n\n    # For simplicity, we assume that the changes in operating assets and liabilities are not given\n    # So, we can use the available data to approximate the cash flow from operations:\n    cash_flow_from_operations = net_income + depreciation - interest_received - dividends_received - taxes_paid\n\n    # return answer\n    return cash_flow_from_operations\n\n# Run the function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nExplanation:\n- **Net Income** is adjusted for non-cash items to arrive at cash flow from operations.\n- **Depreciation**, a non-cash expense, is added back.\n- **Interest and Dividends Received** are subtracted because they are considered as inflows from investing activities, not operating activities.\n- **Taxes Paid** is subtracted back because taxes lower cash flows related to operating activities.\n- The final answer is the approximated cash flow from operations.\n\nRunning this program will calculate the cash flow from operations using the provided financial information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-709",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the flat price for Bond H, discussed in the display below, which is scheduled for sale on the settlement date of 16 June 2014? Here are some considerations: The Annual Coupon is 5%, the Coupon Payment Frequency is semi-annually, Interest Payment Dates are 10 April and 10 October, the Maturity Date is 10 October 2016, the Day Count Convention is 30/360, and the Annual Yield-to-Maturity is 4%.",
        "output": [
            " Sure, let's define the necessary variables and perform the calculations to determine the flat price for Bond H.\n\nThe key steps to calculating the flat price of a bond include:\n1. Calculating the number of days between the settlement date and each coupon payment date using the day count convention.\n2. Determining the present value of each future cash flow (coupon payment or principal repayment) using the yield-to-maturity.\n3. Summing these present values to get the bond's flat price.\n\nBelow is the Python program to achieve this:\n\n```python\nimport math\nfrom datetime import datetime\n\ndef day_count_fraction(start_date, end_date):\n    start_year, start_month, start_day = map(int, start_date.split('-'))\n    end_year, end_month, end_day = map(int, end_date.split('-'))\n    start = datetime(start_year, start_month, start_day)\n    end = datetime(end_year, end_month, end_day)\n\n    # 30/360 day-count convention\n    delta = 360 * (end_year - start_year) + 30 * (end_month - start_month) + (end_day - start_day)\n    return delta / 360\n\ndef solution():\n    # Define variables name and value\n    settlement_date = '2014-06-16'\n    coupon_rate = 0.05\n    coupon_frequency = 2\n    coupon_dates = ['2014-10-10', '2015-04-10', '2015-10-10', '2016-04-10', '2016-10-10']\n    maturity_date = '2016-10-10'\n    face_value = 1000  # As bonds are typically quoted per 1000 of face value\n    ytm = 0.04\n\n    # Do math calculation to get the answer\n    flat_price = 0\n    for payment_date in"
        ]
    },
    {
        "tables": [
            "|   | Company | Fixed Rate | Floating Rate |\n|---|---------|------------|---------------|\n| a | X       | 8%         | LIBOR+150bps  |\n| b | Y       | 10%        | LIBOR+200bps  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-710",
        "python_solution": "",
        "ground_truth": null,
        "question": "The lending rates for corporation A and corporation B are set as such: corporation A and corporation B borrowed money at their respective preferred borrowing rates before engaging in an interest rate swap. What's the overall savings?",
        "output": [
            " Sure, in order to determine the overall savings from the interest rate swap between Corporation A and Corporation B, we first need to know the principal amount borrowed by each corporation. For this example, let's assume each corporation borrowed the same principal amount, although this can be adjusted if you have specific numbers.\n\nBelow is the Python program to calculate the savings, given the table provided:\n\n```python\ndef solution(principal):\n    # Define variables name and value\n    fixed_rate_A = 0.08\n    floating_rate_spread_A = 0.015\n\n    fixed_rate_B = 0.10\n    floating_rate_spread_B = 0.020\n\n    # Assume LIBOR rate as L. Since it's not provided, let's assume LIBOR = 0 for simplification.\n    LIBOR = 0.0\n\n    # Calculate effective floating rates\n    floating_rate_A = LIBOR + floating_rate_spread_A\n    floating_rate_B = LIBOR + floating_rate_spread_B\n\n    # Calculate the interest amounts before the swap\n    interest_fixed_A = principal * fixed_rate_A\n    interest_floating_B = principal * floating_rate_B\n\n    interest_fixed_B = principal * fixed_rate_B\n    interest_floating_A = principal * floating_rate_A\n\n    # Calculate the total interest payments without swap\n    total_interest_without_swap = (interest_fixed_A + interest_floating_B) + (interest_fixed_B + interest_floating_A)\n\n    # Calculate the total interest payments after the swap assuming perfect swap\n    total_interest_with_swap = (interest_floating_A + interest_floating_B) + (interest_fixed_A + interest_fixed_B)\n\n    # Calculate the savings\n    savings = total_interest_without_swap - total_interest_with_swap\n\n    # return savings\n    return savings\n\n# Example usage\nprincipal = 1000000  # Example principal amount\nsavings = solution(principal)\nprint"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-711",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a marginal tax rate of 40%, what is the after-tax cost of the preferred stock if a corporation is planning a fresh issue of preferred stock with a $100 par and a 12% dividend, and it can be sold for $95 per share with the corporation having to pay flotation costs equating to 5% of the market price?",
        "output": [
            " Certainly! The procedure for calculating the after-tax cost of the preferred stock involves a few basic steps. Here\u2019s how you can structure the program to achieve this:\n\n1. Compute the net proceeds from selling the preferred stock.\n2. Calculate the annual dividend.\n3. Determine the after-tax cost of the preferred stock considering the marginal tax rate.\n\nLet's write the Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    dividend_rate = 0.12\n    market_price = 95\n    flotation_cost_percentage = 0.05\n    marginal_tax_rate = 0.40\n\n    # Calculate the flotation cost\n    flotation_cost = market_price * flotation_cost_percentage\n\n    # Calculate the net proceeds from the sale of preferred stock\n    net_proceeds = market_price - flotation_cost\n\n    # Calculate the annual dividend\n    annual_dividend = par_value * dividend_rate\n\n    # Calculate the after-tax cost of the preferred stock\n    after_tax_dividend = annual_dividend * (1 - marginal_tax_rate)\n    after_tax_cost_of_preferred_stock = after_tax_dividend / net_proceeds\n\n    # Return the answer\n    return after_tax_cost_of_preferred_stock\n```\n\nThis program calculates the after-tax cost of preferred stock by first determining the net proceeds after accounting for flotation costs, then computing the annual dividend, and finally adjusting for the marginal tax rate to get the after-tax dividend and cost."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-712",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the net-of-fees return earned in Year 3 by a hedge fund that started with $98 million, charges a 2% management fee based on assets under management at year end, a 20% incentive fee calculated separately from the management fee, and has a high-water mark provision? The fund was valued at $112 million at the end of Year 1, $100 million at the end of Year 2, and $116 million at the end of Year 3.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 98_000_000\n    value_end_year_1 = 112_000_000\n    value_end_year_2 = 100_000_000\n    value_end_year_3 = 116_000_000\n\n    # High-water mark calculation\n    high_water_mark = max(initial_investment, value_end_year_1, value_end_year_2)\n\n    # Management fee calculation (2% of AUM at year end)\n    management_fee_year_3 = 0.02 * value_end_year_3\n\n    # Incentive fee calculation (20% of the amount by which the value exceeds the high-water mark)\n    if value_end_year_3 > high_water_mark:\n        incentive_fee_year_3 = 0.20 * (value_end_year_3 - high_water_mark)\n    else:\n        incentive_fee_year_3 = 0\n\n    # Gross return in Year 3 before fees\n    gross_return_year_3 = value_end_year_3 - value_end_year_2\n\n    # Net-of-fees return in Year 3\n    net_of_fees_return_year_3 = gross_return_year_3 - management_fee_year_3 - incentive_fee_year_3\n\n    # return answer\n    return net_of_fees_return_year_3\n\n# Print the result\nprint(solution())\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-713",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering the details provided regarding a newly constructed showroom by a corporation, what is the depreciation expense (in millions) for the showroom in 2014? Here are the specifics: Construction commenced on 1 January 2012, the grand opening took place on 1 January 2014, a loan of \u20ac30 million was taken out on 1 January 2012, the interest rate on the loan was 8%, payable annually, repayment of the loan was scheduled as a balloon payment due on 1 January 2017. The total construction expenses during 2012 and 2013 amounted to \u20ac38.5 million, the estimated useful life of the showroom was 40 years, the projected residual value of the showroom was \u20ac5 million, and the depreciation approach used was straight line.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    construction_expenses = 38.5  # in millions\n    estimated_useful_life = 40  # in years\n    residual_value = 5  # in millions\n\n    # Do math calculation to get the answer\n    depreciable_cost = construction_expenses - residual_value\n    annual_depreciation_expense = depreciable_cost / estimated_useful_life\n\n    # return answer\n    return annual_depreciation_expense\n```\n\nExplanation:\n1. **Depreciable Cost:** This is the total cost minus the residual value (also known as salvage value). In this case, it is \\(38.5 - 5 = 33.5\\) million.\n2. **Annual Depreciation Expense:** Using the straight-line depreciation method, the annual depreciation expense is calculated by dividing the depreciable cost by the estimated useful life. Here, it is \\( \\frac{33.5}{40} = 0.8375\\) million.\n\nThe annual depreciation expense for the showroom in 2014 is therefore 0.8375 million."
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price(\u20ac) | Beginning of Period Shares | End of Period Price(\u20ac) | End of Period Shares |\n|----------|------------------------------|---------------------------|------------------------|----------------------|\n| A        | 20.00                        | 300                       | 22.00                  | 300                  |\n| B        | 50.00                        | 300                       | 48.00                  | 300                  |\n| C        | 26.00                        | 2,000                     | 30.00                  | 2,000                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-714",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the subsequent data for an equally-weighted index: What is the index's return over the time span?",
        "output": [
            " Sure! To calculate the return of an equally-weighted index based on the provided data, we need to follow these steps:\n\n1. Calculate the total value of the portfolio at the beginning of the period.\n2. Calculate the total value of the portfolio at the end of the period.\n3. Compute the return of the index using the formula: \\( \\text{Return} = \\frac{\\text{End of Period Value} - \\text{Beginning of Period Value}}{\\text{Beginning of Period Value}} \\).\n\nGiven the data, let's implement the solution step-by-step in the Python program.\n\n```python\ndef solution():\n    # Define variables name and value\n    beginning_prices = [20.00, 50.00, 26.00]\n    beginning_shares = [300, 300, 2000]\n    end_prices = [22.00, 48.00, 30.00]\n    end_shares = [300, 300, 2000]\n\n    # Calculate the total value of the portfolio at the beginning of the period\n    beginning_value = sum(price * shares for price, shares in zip(beginning_prices, beginning_shares))\n\n    # Calculate the total value of the portfolio at the end of the period\n    end_value = sum(price * shares for price, shares in zip(end_prices, end_shares))\n\n    # Calculate the return of the index\n    index_return = (end_value - beginning_value) / beginning_value\n\n    # Return the answer as a percentage\n    return index_return * 100\n\n# Example usage\nprint(\"The index's return over the time span is: {:.2f}%\".format(solution()))\n```\n\nExplanation:\n1. `beginning_prices` and `end_prices` represent the prices of securities A, B, and C at the beginning and end of the period, respectively.\n2. `beginning_shares` and `end_shares` represent the number of shares of securities A, B, and C"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-715",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the aforementioned details, what must be the anticipated liquidity requirement for this financial corporation, given that the administration predicts a worst-case scenario next week involving a $25 million liquidity shortage with just a 15% likelihood? Furthermore, the most favorable scenario involves an $80 million liquidity excess, but this has a 10% likelihood. The most likely situation is a $15 million liquidity excess, which has a 75% probability according to administration estimates.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shortage_amount = 25000000\n    shortage_probability = 0.15\n    excess_amount_favorable = 80000000\n    favorable_probability = 0.10\n    excess_amount_likely = 15000000\n    likely_probability = 0.75\n\n    # Do math calculation to get the answer\n    anticipated_liquidity_requirement = (shortage_amount * shortage_probability) + \\\n                                        (-excess_amount_favorable * favorable_probability) + \\\n                                        (-excess_amount_likely * likely_probability)\n\n    # return answer\n    return anticipated_liquidity_requirement\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the anticipated liquidity requirement by weighting the different scenarios by their probabilities and summing them up. The negative signs for the excess amounts indicate that these are considered as outflows (negative requirements), whereas the shortage is considered an inflow (positive requirement)."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4% | -5% | 12% | 3% | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-716",
        "python_solution": "",
        "ground_truth": null,
        "question": "The table provided presents the monthly stock returns for Rose Enterprises. Based on the information in the table, can you calculate the median stock return for Rose Enterprises?",
        "output": [
            " Certainly! Below is a Python program that calculates the median stock return for Rose Enterprises based on the provided monthly returns.\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_returns = [20, 4, -5, 12, 3, 12]\n\n    # Sort the list to find the median\n    sorted_returns = sorted(stock_returns)\n\n    # Calculate the median\n    n = len(sorted_returns)\n    if n % 2 == 0:\n        median = (sorted_returns[n//2 - 1] + sorted_returns[n//2]) / 2\n    else:\n        median = sorted_returns[n//2]\n\n    # return answer\n    return median\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program defines the stock returns for Rose Enterprises, sorts them, and then calculates the median based on whether the number of returns is even or odd. The `median` is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-717",
        "python_solution": "",
        "ground_truth": null,
        "question": "Currently the 1-year rate is at 5%. If a trader predicts the 1-year rate next year to rise up to 7%, and the 1-year rate in two years to reach 9%, what will the 3-year spot rate be?",
        "output": [
            " Certainly! To determine the 3-year spot rate given the future 1-year rates, we can use the methodology of calculating the geometric average of the expected 1-year rates. The 3-year spot rate is the rate that equates the present value of an investment to its future value over the 3-year period, accounting for the expected 1-year interest rates.\n\nHere's the Python program to calculate the 3-year spot rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.05  # Current 1-year rate\n    r2 = 0.07  # Predicted 1-year rate next year\n    r3 = 0.09  # Predicted 1-year rate in two years\n\n    # Do math calculation to get the answer\n    # The 3-year spot rate can be approximated using the geometric mean of the rates for each year\n    three_year_spot_rate = (1 + r1) * (1 + r2) * (1 + r3)\n    three_year_spot_rate = three_year_spot_rate ** (1/3) - 1\n\n    # Convert the rate to a percentage\n    answer = three_year_spot_rate * 100\n\n    # return answer\n    return answer\n\n# Execute the solution function to get the answer\nprint(solution())\n```\n\nIn this program:\n- We define the current and predicted 1-year rates.\n- We use the formula for the geometric mean of the interest rates compounded over the 3 years.\n- We calculate the 3-year spot rate and convert it to a percentage.\n- Finally, we return the calculated rate.\n\nBy running this program, you can obtain the estimated 3-year spot rate based on the given 1-year rates."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-718",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investor bought 200 stocks of a company that doesn't pay dividends on margin with a cost of $50 each share. The leverage ratio stands at 2.5. Half a year later, the investor offloads these stocks at a price of $60 each share. If we disregard the interest paid on the borrowed money and the transaction expenses, what was the six-month period return for the investor?",
        "output": [
            " Sure! Here is a Python program that answers the given financial question:\n\n```python\ndef solution():\n    # Define variables name and value\n    number_of_stocks = 200\n    purchase_price_per_share = 50\n    selling_price_per_share = 60\n    leverage_ratio = 2.5\n\n    # Total purchase cost\n    total_purchase_cost = number_of_stocks * purchase_price_per_share\n\n    # Investor's initial investment (using the leverage ratio)\n    initial_investment = total_purchase_cost / leverage_ratio\n\n    # Total selling revenue\n    total_selling_revenue = number_of_stocks * selling_price_per_share\n\n    # Profit\n    profit = total_selling_revenue - total_purchase_cost\n\n    # Six-month period return\n    six_month_return = profit / initial_investment\n\n    # return answer\n    return six_month_return\n\n# Example usage\nprint(solution())\n```\n\nExplanation:\n1. **Variables Definition:**\n    - `number_of_stocks` = 200\n    - `purchase_price_per_share` = $50\n    - `selling_price_per_share` = $60\n    - `leverage_ratio` = 2.5\n\n2. **Calculations:**\n    - Compute the total purchase cost.\n    - Compute the initial investment using the leverage ratio.\n    - Compute the total selling revenue.\n    - Calculate the profit.\n    - Calculate the six-month period return as the profit divided by the initial investment.\n\n3. **Final Return:**\n    - The final return is returned by the function.\n\nRunning this program will give the six-month period return for the investor based on the given scenario."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-719",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine a portfolio that consists of two properties. Property X makes up 25% of the portfolio and has a standard deviation of 17.9%. Property Y constitutes 75% of the portfolio and comes with a standard deviation of 6.2%. Given that the correlation between these two properties is 0.5, what would be the standard deviation of the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.25\n    weight_y = 0.75\n    std_dev_x = 0.179\n    std_dev_y = 0.062\n    correlation = 0.5\n\n    # Do math calculation to get the answer\n    portfolio_variance = (weight_x ** 2) * (std_dev_x ** 2) + (weight_y ** 2) * (std_dev_y ** 2) + 2 * weight_x * weight_y * std_dev_x * std_dev_y * correlation\n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis program defines the necessary variables for the weights, standard deviations, and correlation of the two properties. It then calculates the portfolio variance using the formula for the variance of a two-asset portfolio, and subsequently finds the standard deviation by taking the square root of the variance. The result is then returned as the answer."
        ]
    },
    {
        "tables": [
            "|    | Joint probabilities |     |     |\n|----|-------------------:|----:|----:|\n|  X |                Y=5 | Y=2 | Y=-3|\n|X=-2|                 0.2|   0 |    0|\n| X=1|                   0| 0.6 |    0|\n|X= 4|                   0|   0 |  0.2|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-720",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given joint probability table, what is the correlation between X and Y?",
        "output": [
            " To calculate the correlation between \\(X\\) and \\(Y\\) based on the given joint probability table, we need to compute the expected values \\(E(X)\\), \\(E(Y)\\), and \\(E(XY)\\), and then use these to find the covariance and hence the correlation.\n\nHere's the Python program to accomplish this:\n\n```python\ndef solution():\n    # Define the joint probability table\n    probabilities = {\n        (-2, 5): 0.2,\n        (1, 2): 0.6,\n        (4, -3): 0.2\n    }\n\n    # Define the possible values of X and Y\n    X_values = [-2, 1, 4]\n    Y_values = [5, 2, -3]\n\n    # Calculate expected value of X\n    EX = sum(x * probabilities.get((x, y), 0) for x in X_values for y in Y_values)\n\n    # Calculate expected value of Y\n    EY = sum(y * probabilities.get((x, y), 0) for x in X_values for y in Y_values)\n\n    # Calculate expected value of XY\n    EXY = sum(x * y * probabilities.get((x, y), 0) for x in X_values for y in Y_values)\n\n    # Calculate expected value of X^2\n    EX2 = sum(x**2 * probabilities.get((x, y), 0) for x in X_values for y in Y_values)\n\n    # Calculate expected value of Y^2\n    EY2 = sum(y**2 * probabilities.get((x, y), 0) for x in X_values for y in Y_values)\n\n    # Calculate covariance\n    covariance = EXY - (EX * EY)\n\n    # Calculate standard deviations\n    std_dev_X = (EX2 - EX**2)**0.5\n    std_dev_Y = (EY2 - EY**2)**0.5\n\n    # Calculate correlation\n    correlation = covariance / (std_dev_X * std_dev_Y"
        ]
    },
    {
        "tables": [
            "| Probability | Return of Stock A(%) |\n|-------------|----------------------|\n| 0.20        | 30                   |\n| 0.60        | 10                   |\n| 0.20        | -20                  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-721",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the standard deviation of return for stock A according to the above probability distribution?",
        "output": [
            " Sure, let's write a Python program to calculate the standard deviation of return for stock A based on the given probability distribution. The standard deviation can be calculated using the formula:\n\\[\n\\sigma = \\sqrt{\\sum_{i} (p_i \\cdot (x_i - \\mu)^2)}\n\\]\nwhere \\(p_i\\) are the probabilities, \\(x_i\\) are the returns, and \\(\\mu\\) is the expected return.\n\nHere is the Python program:\n```python\ndef solution():\n    # Define variables and their values\n    probabilities = [0.20, 0.60, 0.20]\n    returns = [30, 10, -20]\n\n    # Calculate expected return (mean)\n    expected_return = sum(p * r for p, r in zip(probabilities, returns))\n\n    # Calculate the variance\n    variance = sum(p * ((r - expected_return) ** 2) for p, r in zip(probabilities, returns))\n\n    # Calculate the standard deviation\n    standard_deviation = variance ** 0.5\n\n    # return the answer\n    return standard_deviation\n\n# Call the solution function to get the result\nprint(solution())\n```\nThis program will compute the standard deviation of the return for stock A based on the provided probability distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-722",
        "python_solution": "",
        "ground_truth": null,
        "question": "A manager at a snowboarding park is contemplating providing discounts on weekday snowboarding passes. With the regular price being \u20ac50 per day, it is anticipated that 300 patrons will purchase passes each weekday. However, if the price is lowered to \u20ac40 per day, it is expected that 450 patrons will purchase passes each weekday. What is the marginal revenue per patron gained through providing the discounted price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    regular_price = 50\n    discounted_price = 40\n    regular_patrons = 300\n    discounted_patrons = 450\n\n    # Do math calculation to get the answer\n    regular_revenue = regular_price * regular_patrons\n    discounted_revenue = discounted_price * discounted_patrons\n    marginal_revenue_per_patron = (discounted_revenue - regular_revenue) / (discounted_patrons - regular_patrons)\n\n    # return answer\n    return marginal_revenue_per_patron\n```\n\nYou can run this Python code to find the marginal revenue per patron gained through providing the discounted price."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-723",
        "python_solution": "",
        "ground_truth": null,
        "question": "The probabilities for Z are displayed as follows, P(Z=0.4)=30%, P(Z=0.2)= 30%, P(Z=-0.2)= 40%. What is the standard deviation of Z?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    probabilities = {0.4: 0.3, 0.2: 0.3, -0.2: 0.4}\n\n    # Calculate the expected value (E[Z])\n    expected_value = sum(z * p for z, p in probabilities.items())\n\n    # Calculate the expected value of Z squared (E[Z^2])\n    expected_value_squared = sum(z**2 * p for z, p in probabilities.items())\n\n    # Calculate the variance (Var(Z) = E[Z^2] - (E[Z])^2)\n    variance = expected_value_squared - expected_value**2\n\n    # Calculate the standard deviation (sqrt(Var(Z)))\n    standard_deviation = variance**0.5\n\n    # return answer\n    return standard_deviation\n\n# To get the standard deviation, call the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-724",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the H-model, John is assessing the worth of Company N at $20 per share. The firm has given a dividend of $1 per share in the most recent year. During the initial four years, the growth rate will gradually reduce from 10% to 6%. The dividend growth rate from that point onwards will be 6% per year indefinitely. What is the necessary rate of return in his model?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P0 = 20  # current share price\n    D0 = 1   # recent dividend per share\n\n    # Define growth rates\n    growth_rate_year1 = 0.10\n    growth_rate_year2 = 0.09\n    growth_rate_year3 = 0.08\n    growth_rate_year4 = 0.07\n    terminal_growth_rate = 0.06\n\n    # Calculate dividends for the first 4 years\n    D1 = D0 * (1 + growth_rate_year1)\n    D2 = D1 * (1 + growth_rate_year2)\n    D3 = D2 * (1 + growth_rate_year3)\n    D4 = D3 * (1 + growth_rate_year4)\n\n    # Calculate the price at year 4 using the terminal growth rate\n    P4 = D4 * (1 + terminal_growth_rate) / (required_return - terminal_growth_rate)\n\n    # Use the H-model formula to estimate the required return\n    required_return = (((P4 / ((1 + required_return) ** 4)) + D1 / (1 + required_return) + D2 / (1 + required_return) ** 2 + D3 / (1 + required_return) ** 3 + D4 / (1 + required_return) ** 4) / P0) ** (1 / 4) - 1\n\n    # return answer\n    return required_return\n\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "| Comparable Companies | Tax Rate (%) | Debt/Equity | Equity Beta |\n|----------------------|--------------|-------------|-------------|\n| Private company      | 30           | 1           | N.A.        |\n| Public company       | 35           | 0.9         | 1.75        |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-725",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the details about a privately-owned corporation and its competitor in the public market and by applying the pure-play method, what would be the projected equity beta for the privately-owned corporation?",
        "output": [
            " To determine the projected equity beta for the privately-owned corporation using the pure-play method, we first need to unlever the public company's beta and then relever it according to the private company's financial structure (i.e., its debt-to-equity ratio and tax rate). Below is a Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    tax_rate_public = 0.35  # Public company tax rate\n    debt_equity_public = 0.9  # Public company debt to equity ratio\n    equity_beta_public = 1.75  # Public company equity beta\n\n    tax_rate_private = 0.30  # Private company tax rate\n    debt_equity_private = 1.0  # Private company debt to equity ratio\n\n    # Unlever the public company's beta\n    unlevered_beta = equity_beta_public / (1 + (1 - tax_rate_public) * debt_equity_public)\n\n    # Relever the unlevered beta for the private company\n    levered_beta_private = unlevered_beta * (1 + (1 - tax_rate_private) * debt_equity_private)\n\n    # Return the calculated equity beta for the private company\n    return levered_beta_private\n\n# Call the function to get the result\nanswer = solution()\nprint(f\"The projected equity beta for the privately-owned corporation is: {answer}\")\n```\n\nThis program first calculates the unlevered beta for the public company and then uses that unlevered beta to calculate the levered beta for the private company, adjusting for the private company's specific tax rate and debt-to-equity ratio."
        ]
    },
    {
        "tables": [
            "| Jan | Feb | Mar | Apr | May | Jun |\n|-----|-----|-----|-----|-----|-----|\n| 20% | 4%  | -5% | 12% | 3%  | 12% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-726",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the provided table, what is the range for the monthly stock returns of Ivy Corp?",
        "output": [
            " ```python\ndef solution():\n    # Define variables names and values\n    stock_returns = [20, 4, -5, 12, 3, 12]\n\n    # Do math calculation to get the range\n    max_return = max(stock_returns)\n    min_return = min(stock_returns)\n    stock_range = max_return - min_return\n\n    # Return answer\n    return stock_range\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-727",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Natsuki Yamamoto has become a part of a new company where he can choose from 10 mutual funds for the company's retirement plan, and he intends to pick four, how many distinct combinations of mutual funds can he select?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_funds = 10\n    funds_to_pick = 4\n\n    # Do math calculation to get the answer\n    from math import comb\n    combinations = comb(total_funds, funds_to_pick)\n\n    # return answer\n    return combinations\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-728",
        "python_solution": "",
        "ground_truth": null,
        "question": "A 90-day European put option on Apple has a strike price of $30. The current market price for Apple is $30. What is the delta for this option?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    K = 30  # Strike price\n    S = 30  # Current market price\n\n    # Delta for a European put option when the stock price equals the strike price\n    # Delta of an at-the-money put option is approximately -0.5\n    delta = -0.5\n\n    # return answer\n    return delta\n```\nThe delta for a 90-day European put option on Apple at the money (i.e., when the current market price equals the strike price) is approximately -0.5."
        ]
    },
    {
        "tables": [
            "|                  |                  |                                  |\n|------------------|------------------|----------------------------------|\n| **Issue price**             |                  |  \u00a3 1,000 at par                     |\n| **Conversion period**       |                  | 13 September 20X5 to 12 September 20X8 |\n| **Initial conversion price**|                  | \u00a3 10.00 per share                  |\n| **Threshold dividend**      |                  | \u00a3 0.50 per share                   |\n| **Change of control conversion price** |                  | \u00a3 8.00 per share                   |\n| **Common stock share price on issue date** |                  | \u00a3 8.70                       |\n| **Share price on**          | 17 September 20X5| \u00a3 9.10                       |\n| **Convertible bond price on 17 September 20X5**  |                  | \u00a3 1,123                      |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-729",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share market conversion premium for the DE bond on 17 September 20X5, based on the chosen convertible bond data provided below?",
        "output": [
            " Sure, let's calculate the per share market conversion premium for the DE bond on 17 September 20X5 based on the given data. The market conversion premium per share is calculated by determining how much more the market price of the bond exceeds the current market value of the shares it can be converted into.\n\nHere's how to compute it step-by-step and then put it into the Python program:\n\n1. Determine the number of shares the bond can be converted into:\n   \\( \\text{Conversion ratio} = \\frac{\\text{Issue Price}}{\\text{Initial Conversion Price}} = \\frac{1000}{10} = 100 \\)\n\n2. Calculate the market value of shares based on the conversion:\n   \\( \\text{Market value of shares} = 100 \\times \\text{Common stock share price on 17 September 20X5} = 100 \\times 9.10 = 910 \\)\n\n3. Calculate the market conversion premium:\n   \\( \\text{Market conversion premium} = \\text{Convertible bond price on 17 September 20X5} - \\text{Market value of shares} = 1123 - 910 = 213 \\)\n\n4. Divide it by the number of shares to find the per share market conversion premium:\n   \\( \\text{Per share market conversion premium} = \\frac{213}{100} = 2.13 \\)\n\nLet's put this into the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    issue_price = 1000\n    initial_conversion_price = 10.00\n    common_stock_share_price_on_issue_date = 8.70\n    bond_price_on_date = 1123\n    common_stock_share_price_on_date = 9.10\n\n    # Do math calculation to get the answer\n    conversion_ratio = issue_price / initial_conversion_price\n    market_value_of_shares = conversion_ratio * common_stock_share_price_on_date\n    conversion"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-730",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine that in a specific defined benefit scheme, the following situation occurs. Workers serve for 40 years with a wage that grows precisely with inflation rate. Pension equals to 60% of the last salary and grows perfectly with inflation rate. Employees always live for 25 years post-retirement. The money within the retirement plan is invested in bonds that yield an inflation rate. Which is the best approximation of the portion of the worker's income that ought to be put into the retirement plan? (Hint: You should perform all calculations in real and not nominal terms so that the income and pensions stay constant and the interest yield is zero.)",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    years_worked = 40\n    years_retired = 25\n    pension_percentage = 0.60\n\n    # Do math calculation to get the answer\n    # Since all calculations are in real terms, we can ignore inflation\n    # Pension = 60% of last salary\n    # Assuming the worker retires at 65 and lives until 90\n\n    # Total income needed for pension:\n    # Pension paid = pension_percentage * last_salary * years_retired\n    # Since pension_percentage is a portion of the last_salary, the equation simplifies to:\n    # total_income_needed = pension_percentage * years_retired\n    total_income_needed = pension_percentage * years_retired\n\n    # Contribution required per year during working years:\n    # Contribution per year = total_income_needed / years_worked\n    contribution_per_year = total_income_needed / years_worked\n\n    # return answer\n    return contribution_per_year\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The portion of the worker's income that ought to be put into the retirement plan is approximately: {answer:.2f}\")\n```\n\nThis program calculates the portion of the worker's income that needs to be put into the retirement plan, given the conditions specified in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-731",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the operating breakeven point in units if the per unit contribution margin for an item is $12 and it is assumed that fixed costs are $12,000, interest costs are $3,000, and there are taxes of $2,000?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    per_unit_contribution_margin = 12\n    fixed_costs = 12000\n    interest_costs = 3000\n    taxes = 2000\n\n    # Calculate total costs\n    total_costs = fixed_costs + interest_costs + taxes\n\n    # Calculate operating breakeven point in units\n    breakeven_point_units = total_costs / per_unit_contribution_margin\n\n    # Return answer\n    return breakeven_point_units\n```\n\nThis program defines the necessary variables, calculates the total costs by summing fixed costs, interest costs, and taxes, and then computes the operating breakeven point in units by dividing the total costs by the per unit contribution margin. Finally, it returns the calculated breakeven point in units."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-732",
        "python_solution": "",
        "ground_truth": null,
        "question": "A note is presently selling for $109.246 for every $100 of face value. If the note's yield to maturity decreases by 25 bps, the note's total price is projected to increase to $110.481. If the note's yield to maturity increases by 25 bps, the note's total price is predicted to decrease to $108.029. What is the note's estimated convexity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    price_current = 109.246\n    price_yield_decrease = 110.481\n    price_yield_increase = 108.029\n    yield_change = 0.0025  # 25 basis points\n\n    # Do math calculation to get the answer\n    convexity = (price_yield_decrease + price_yield_increase - 2 * price_current) / (yield_change ** 2)\n\n    # Return answer\n    return convexity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-733",
        "python_solution": "",
        "ground_truth": null,
        "question": "The 4-year spot rate is 9.45%, and the 1-year spot rate is 8.528%. What would be the 3-year forward rate starting a year from now?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    four_year_spot_rate = 0.0945\n    one_year_spot_rate = 0.08528\n\n    # Do math calculation to get the answer\n    # Using the formula for the forward rate calculation:\n    # (1 + 4-year spot rate)^4 = (1 + 3-year forward rate)^3 * (1 + 1-year spot rate)\n    # Solving for the 3-year forward rate starting a year from now:\n    three_year_forward_rate = ((1 + four_year_spot_rate) ** 4 / (1 + one_year_spot_rate)) ** (1/3) - 1\n\n    # Convert to percentage\n    three_year_forward_rate_percentage = three_year_forward_rate * 100\n\n    # return answer\n    return three_year_forward_rate_percentage\n```\n\nThis program defines the 4-year spot rate and 1-year spot rate, then uses the forward rate formula to calculate the 3-year forward rate starting a year from now. The answer is returned as a percentage."
        ]
    },
    {
        "tables": [
            "|                               | REIT A     |\n| ----------------------------- | ---------- |\n| Funds from operations (FFO)  | $ 396,400  |\n| Non - cash rents              | $ 56,782   |\n| Recurring maintenance-type capital expenditures | $ 78,600   |\n|                               |            |\n| Shares outstanding            | 73,500     |\n| Property subsector average P/AFFO multiple | 17.3x |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-734",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the per share value of REIT A by utilizing the property subsector average P/AFFO multiple method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    ffo = 396400\n    non_cash_rents = 56782\n    capital_expenditures = 78600\n    shares_outstanding = 73500\n    p_affo_multiple = 17.3\n\n    # Do math calculation to get the answer\n    affo = ffo + non_cash_rents - capital_expenditures\n    affo_per_share = affo / shares_outstanding\n    per_share_value = affo_per_share * p_affo_multiple\n\n    # return answer\n    return per_share_value\n\n# Example execution to get the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|    |    |\n|----|----|\n| Name | Jane Lennon |\n| Occupation and Family Structure | She is the morning news anchor for a national broadcasting company, where she has worked for the past 20 years. She is 56 years of age, divorced, and the sole supporter of her two children, Everett, aged 18, and Marshall, aged 14. Marshall suffers from severe medical and developmental issues. |\n| Current and Expected Future Employment Income | She currently earns $1 million per year as a broadcaster. She plans on retiring in four years. With typical raises in her industry, she estimates that the present value of her pre-retirement income is $4.5 million. |\n| Financial Assets and Liabilities | She has an investment portfolio worth $8 million, which consists of 30% equities and the remainder in fixed-income securities. She also owns $1 million in shares of the broadcasting company she works for, but she is restricted from selling them for two more years. Her primary residence carries no mortgage and was recently valued at $2 million. She also owns a vacation property worth $3 million, with an outstanding mortgage of $1 million. Her defined-contribution pension plan has vested and is valued at $2.5 million. |\n| Aspirational Goals and Extended Liabilities | Everett is just beginning university and plans to pursue a medical degree. Lennon plans on paying for his entire education and living expenses as well as providing some assistance in funding his future practice. She believes that these goals will be covered with $1.5 million in present value terms. She has begun the process of setting up a special needs trust to provide lifetime benefits for Marshall that will not interfere with the government benefits that he is eligible to receive. It will be funded with $2 million within the year. She recently received an honorary doctorate from her alma mater and has started the process of endowing a chair in its communications department. She anticipates that the funding will be made available to the university in two years; it has a present value of $1.75 million. The present value of future consumption is estimated to be $9 million. |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-735",
        "python_solution": "",
        "ground_truth": null,
        "question": "Fox is currently recruiting an asset allocation analyst and has finished interviewing two applicants, Ambrose Kelly and Catherine Trainor, for the role. Based on the data in Exhibit 1, what is Lennon's economic net worth (in $ millions)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    investment_portfolio = 8.0\n    equity_portfolio = 0.3 * investment_portfolio\n    fixed_income_portfolio = investment_portfolio - equity_portfolio\n    broadcasting_shares = 1.0\n    primary_residence = 2.0\n    vacation_property = 3.0\n    vacation_property_mortgage = 1.0\n    pension_plan = 2.5\n    education_expenses = 1.5\n    special_needs_trust = 2.0\n    university_endowment = 1.75\n    future_consumption = 9.0\n\n    # Do math calculation to get the answer\n    economic_net_worth = investment_portfolio + broadcasting_shares + primary_residence + (vacation_property - vacation_property_mortgage) + pension_plan - education_expenses - special_needs_trust - university_endowment - future_consumption\n\n    # return answer\n    return economic_net_worth\n```\n\nThe economic net worth of Jane Lennon is calculated by summing up her assets and subtracting her liabilities and future obligations. The function `solution()` performs these calculations and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-736",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company is contemplating a venture that would demand a starting investment of THB270 million. The venture will aid in augmenting the company's post-tax net cash flows by THB30 million annually indefinitely, and it has been detected to hold a negative NPV of THB20 million. What is the IRR (%) of the venture?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 270  # in millions of THB\n    annual_cash_flow = 30  # in millions of THB, indefinitely\n    NPV = -20  # in millions of THB\n\n    # We use the NPV formula: NPV = -I + P * (1/r) where I is the initial investment, P is perpetual annual cash flow, r is the IRR\n    def irr_formula(initial_investment, annual_cash_flow, NPV):\n        # IRR (Internal Rate of Return) calculation for perpetuity\n        from scipy.optimize import fsolve\n\n        # Define the NPV function in terms of r\n        def npv_function(r):\n            return initial_investment + annual_cash_flow / r + NPV\n\n        # Solve for r (which is the IRR)\n        irr = fsolve(npv_function, 0.1)  # initial guess for IRR is 10% (0.1)\n        return irr[0] * 100  # return as percentage\n\n    # Calculate IRR\n    irr = irr_formula(initial_investment, annual_cash_flow, NPV)\n\n    # return answer\n    return irr\n\n# Run the function to get the answer\nprint(\"IRR of the venture is:\", solution(), \"%\")\n```\n\nThis program calculates the Internal Rate of Return (IRR) for the given venture by solving the perpetuity formula where the NPV is given. The `scipy.optimize.fsolve` function is used to solve for the IRR by finding the root of the NPV function."
        ]
    },
    {
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.50%        |\n| 1y1y        | 0.70%        |\n| 2y1y        | 1.00%        |\n| 3y1y        | 1.50%        |\n| 4y1y        | 2.20%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-737",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say the subsequent yearly forward rates were deduced from the yield curve. What would be the spot rate for a four-year period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    rates = [0.005, 0.007, 0.01, 0.015, 0.022]\n\n    # Do math calculation to get the answer using the formula for spot rate:\n    # (1 + forward1)(1 + forward2)(1 + forward3)(1 + forward4) - 1\n\n    spot_rate = (\n        (1 + rates[0]) *\n        (1 + rates[1]) *\n        (1 + rates[2]) *\n        (1 + rates[3]) *\n        (1 + rates[4])\n    ) ** (1/4) - 1\n\n    # return answer\n    return spot_rate\n```\n\nExplanation: The spot rate for a four-year period can be calculated using the formula for the compounded return, which is derived from the product of the individual one-year forward rates for each of the corresponding periods. Then, we take the fourth root of this product and subtract one to get the annualized spot rate."
        ]
    },
    {
        "tables": [
            "|   | Cumulative Distribution Function |\n|---|---|\n| X=x | F(x)=P(X\u2264x) |\n| 1 | 0.15 |\n| 2 | 0.25 |\n| 3 | 0.50 |\n| 4 | 0.60 |\n| 5 | 0.95 |\n| 6 | 1.00 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-738",
        "python_solution": "",
        "ground_truth": null,
        "question": "The cumulative distribution function for a discrete random variable is displayed in the subsequent table. What is the possibility that Y will assume a value of either 2 or 4?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    p_x_less_than_or_equal_to_2 = 0.25\n    p_x_less_than_or_equal_to_1 = 0.15\n    p_x_less_than_or_equal_to_4 = 0.60\n    p_x_less_than_or_equal_to_3 = 0.50\n\n    # Do math calculation to get the answer\n    p_y_equals_2 = p_x_less_than_or_equal_to_2 - p_x_less_than_or_equal_to_1\n    p_y_equals_4 = p_x_less_than_or_equal_to_4 - p_x_less_than_or_equal_to_3\n\n    answer = p_y_equals_2 + p_y_equals_4\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-739",
        "python_solution": "",
        "ground_truth": null,
        "question": "Kyle has an equity of $100 in cash. He initiates a short position in stock B. The current price of stock B is 100 and Kyle sells it. The cash from the short sale is kept in the dealer's account and is not available for funding other investments. Furthermore, Kyle deposits $50 as collateral. Based on the details provided, what is the leverage of the position?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    equity = 100  # Kyle's equity in cash\n    collateral = 50  # Kyle's deposited collateral\n    stock_price = 100  # Current price of stock B\n\n    # Do math calculation to get the answer\n    # The total amount used for the position is the stock price (since it's a short sale)\n    total_position_value = stock_price\n\n    # The leverage is calculated as the total value of the position divided by the equity and collateral\n    leverage = total_position_value / (equity + collateral)\n\n    # return answer\n    return leverage\n```\n\nThis program calculates the leverage of Kyle's position by first determining the total value of the short position (equal to the stock price) and then dividing this value by the sum of his equity and collateral. The result is the leverage of the position."
        ]
    },
    {
        "tables": [
            "| Spot rate (CHF/GBP) | 1.4939/1.4941 |\n|---------------------|---------------|\n| One month           | -8.3/-7.9     |\n| Two month           | -17.4/-16.8   |\n| Three month         | -25.4/-24.6   |\n| Four month          | -35.4/-34.2   |\n| Five month          | -45.9/-44.1   |\n| Six month           | -56.5/-54.0   |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-740",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the present comprehensive bid rate for delivery of GBP against the CHF in three months for the CHF/GBP forex pair, taking into account the current spot rate and forward points?",
        "output": [
            " Certainly! Here's the Python program to calculate the present comprehensive bid rate for the delivery of GBP against the CHF in three months for the CHF/GBP forex pair, taking into account the current spot rate and forward points:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 1.4939  # Current spot rate bid (CHF/GBP)\n    forward_points_3_month = -25.4  # Forward points for three months bid\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate + (forward_points_3_month / 10000)\n\n    # return answer\n    return forward_rate\n\n# Run the solution to get the answer\nprint(solution())\n```\n\nThis program defines the current spot rate and the three-month forward points, calculates the forward rate by adding the forward points to the spot rate, and then returns the calculated forward rate."
        ]
    },
    {
        "tables": [
            "| Exhibit 1. Consumption Baskets and Price Level Over 2 years |\n|-------------------------------------------------------------|",
            "| Time     | 2015 Q   | 2015 P     | 2016 Q   | 2016 P     |\n| -------- | -------- | ---------- | -------- | ---------- |\n| Soybean  | 110 kg   | $4.8/kg    | 150 kg   | $5.1/kg    |\n| Gasoline | 50 liters| $2.62/liter| 80 liters| $3.1/liter |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-741",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of the Paasche index for the consumption basket showcased in Exhibit 1 for the year 2016?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    soybean_qty_2016 = 150  # Quantity of soybean in 2016\n    soybean_price_2016 = 5.1  # Price of soybean in 2016\n    gasoline_qty_2016 = 80  # Quantity of gasoline in 2016\n    gasoline_price_2016 = 3.1  # Price of gasoline in 2016\n\n    soybean_price_2015 = 4.8  # Price of soybean in 2015\n    gasoline_price_2015 = 2.62  # Price of gasoline in 2015\n\n    # Do math calculation to get the answer\n    paasche_numerator = (soybean_qty_2016 * soybean_price_2016) + (gasoline_qty_2016 * gasoline_price_2016)\n    paasche_denominator = (soybean_qty_2016 * soybean_price_2015) + (gasoline_qty_2016 * gasoline_price_2015)\n    paasche_index = (paasche_numerator / paasche_denominator) * 100\n\n    # return answer\n    return paasche_index\n```\n\nThis program defines the necessary variables, calculates the value for the Paasche index for the year 2016 using the provided quantities and prices, and returns the resulting index."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-742",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bank certificate of deposit with a 365-day year has a starting principal sum of USD 96.5 million and a due amount at maturity of USD 100 million. It has 350 days between settlement and maturation. What is the equivalent yield of the bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 96.5e6  # Starting principal sum in USD\n    due_amount = 100e6  # Due amount at maturity in USD\n    days = 350  # Number of days between settlement and maturation\n\n    # Do math calculation to get the answer\n    # Calculate the interest earned\n    interest_earned = due_amount - principal\n\n    # Calculate the annual yield using the compound interest formula\n    # But first, we need to calculate the daily interest rate\n    daily_rate = interest_earned / principal\n\n    # Convert the daily rate to an annual rate assuming simple interest\n    annual_rate = daily_rate * days / 365\n\n    # The annual rate is essentially the equivalent yield\n    answer = annual_rate\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-743",
        "python_solution": "",
        "ground_truth": null,
        "question": "The current year's consumer price index (CPI) stands at 252 while it was 246 last year. Can you determine this year's rate of inflation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_cpi = 252\n    last_year_cpi = 246\n\n    # Do math calculation to get the answer\n    inflation_rate = ((current_cpi - last_year_cpi) / last_year_cpi) * 100\n\n    # return answer\n    return inflation_rate\n```\n\nThis program calculates the rate of inflation based on the current and last year's consumer price index (CPI). The formula for calculating the inflation rate is:\n\n\\[ \\text{Inflation rate} = \\left( \\frac{\\text{Current CPI} - \\text{Last Year CPI}}{\\text{Last Year CPI}} \\right) \\times 100 \\]\n\nBy implementing this formula in the program, the function `solution()` will return the inflation rate for this year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-744",
        "python_solution": "",
        "ground_truth": null,
        "question": "A buyer acquires a nine-year bond with an annual coupon rate of 7% at a price equivalent to its par value. Prior to the receipt of the first coupon, interest rates rise to 8%. After holding the bond for five years, the buyer decides to sell it. Let's assume that the interest rates stayed steady at 8% during the five-year period. How much would the reinvested coupon payments be worth at the end of the holding period per 100 of par value?",
        "output": [
            " Certainly! Below is the Python program to solve the provided financial problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 100  # Par value of the bond per 100\n    coupon_rate = 0.07  # Annual coupon rate\n    initial_interest_rate = 0.08  # Interest rate after rise\n    holding_period = 5  # Years holding the bond\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = par_value * coupon_rate\n\n    # Calculate the future value of each coupon payment reinvested at the new interest rate\n    future_value = 0\n    for year in range(1, holding_period + 1):\n        future_value += annual_coupon_payment * (1 + initial_interest_rate) ** (holding_period - year)\n\n    # Return the total future value of reinvested coupon payments\n    return future_value\n\n# Execute the solution function\nanswer = solution()\nprint(answer)\n```\n\nExplanation:\n1. **Coupon Payment Calculation**: The annual coupon payment is calculated as 7% of the par value, which is 100.\n2. **Reinvested Coupon Payments**: Each coupon payment, received at the end of each year, is reinvested at the new interest rate of 8%. The compound interest formula is used to calculate the future value of each reinvested coupon payment.\n3. **Sum of Future Values**: The future values of all reinvested coupon payments are summed up to get the total value at the end of the holding period.\n\nThis program calculates and returns the reinvested value of the coupon payments at the end of 5 years, assuming the interest rates remained at 8% during the entire period."
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Mddert  | 45              |\n| Nuki    | 35              |\n| Pefa    | 10              |\n| Serds   | 5               |\n| Rsdf    | 5               |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-745",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an industry consisting of 5 businesses, the market share data of these businesses was provided for the last quarter. What is the three-firm Herfindahl-Hirschmann Index for this industry?",
        "output": [
            " Certainly! To determine the three-firm Herfindahl-Hirschmann Index (HHI), we need to sum the squares of the market shares of the three largest firms in the industry. Here's the Python program to calculate that:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_shares = [45, 35, 10, 5, 5]\n\n    # Sort market shares in descending order and get the top three\n    top_three_shares = sorted(market_shares, reverse=True)[:3]\n\n    # Do math calculation to get the answer\n    hhi_three_firm = sum([(share / 100) ** 2 for share in top_three_shares]) * 10000\n\n    # return answer\n    return hhi_three_firm\n```\n\nYou can run this function to get the three-firm Herfindahl-Hirschmann Index for the industry:\n\n```python\nprint(solution())\n```\n\nThis program will output the HHI, which is used to measure the concentration of companies in the industry based on their market shares."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-746",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Firm B disclosed a revenue of $80 million and net income of $45 million, what would be the sum of cash obtained from clients if there was a $5 million increase in accounts receivable and a $1 million decrease in accounts payable?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 80000000  # $80 million\n    net_income = 45000000  # $45 million\n    increase_in_accounts_receivable = 5000000  # $5 million\n    decrease_in_accounts_payable = -1000000  # $1 million decrease\n\n    # Do math calculation to get the answer\n    cash_obtained_from_clients = revenue + increase_in_accounts_receivable + decrease_in_accounts_payable\n\n    # return answer\n    return cash_obtained_from_clients\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program will calculate the sum of cash obtained from clients by adding the revenue, the increase in accounts receivable, and the decrease in accounts payable. The calculated value is then returned by the function."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-747",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Jane Doe's portfolio has a fixed-income position with a market value of USD 70 million, a modified duration of 6.44 years and a yield of 6.7% compounded semiannually and if there is a positive parallel shift in the yield curve of 25 basis points, which of the following answers best estimates the resulting change in the value of Jane\u2019s portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_value = 70000000  # Measured in USD\n    modified_duration = 6.44  # Measured in years\n    initial_yield = 0.067  # Measured as a decimal (6.7%)\n    yield_shift = 0.0025  # Measured as a decimal (25 basis points)\n\n    # Do math calculation to get the answer\n    change_in_value = -market_value * modified_duration * (yield_shift / (1 + initial_yield / 2))\n\n    # return answer\n    return change_in_value\n\n# Call the function to get the answer\nresult = solution()\nprint(result)\n```\n\nThis Python program calculates the estimated change in the value of Jane Doe's fixed-income portfolio given a positive parallel shift in the yield curve of 25 basis points. The formula used incorporates the market value of the portfolio, its modified duration, the initial yield, and the yield shift."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-748",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Inc. released a five-year floating-rate note (FRN) that provides a quarterly coupon of three-month market reference rate (MRR) plus 125 bps. The FRN is valued at 96 for every 100 of par value. Given a 30/360-day count convention, evenly arranged periods, and a consistent three-month market reference rate (MRR) of 5%, what is the discount margin for the FRN?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    market_price = 96\n    three_month_mrr = 5 / 100  # 5% expressed as a decimal\n    additional_spread = 125 / 10000  # 125 bps expressed as a decimal\n    periods_per_year = 4\n    years = 5\n\n    # Calculate the total number of periods\n    total_periods = years * periods_per_year\n\n    # Calculate the present value of the FRN\n    present_value = 0\n    for i in range(1, total_periods + 1):\n        coupon_payment = par_value * (three_month_mrr + additional_spread) / periods_per_year\n        present_value += coupon_payment / (1 + (three_month_mrr + additional_spread) / periods_per_year)**i\n\n    # Add the present value of the par value repayment\n    present_value += par_value / (1 + (three_month_mrr + additional_spread) / periods_per_year)**total_periods\n\n    # Calculate the discount margin\n    discount_margin = (par_value - market_price) / market_price * 100\n\n    # return answer\n    return discount_margin\n```\n\nExplanation of the program:\n1. Define the variables including the par value, market price, three-month market reference rate (MRR), additional spread, number of periods per year, and the total number of years.\n2. Calculate the total number of periods by multiplying the number of years by the number of periods per year.\n3. Calculate the present value of the floating-rate note by summing up the present value of each coupon payment and the present value of the par value repayment.\n4. Calculate the discount margin using the formula \\(( \\text{par value} - \\text{market price} ) / \\text{market price} \\times 100\\).\n5. Return the discount margin."
        ]
    },
    {
        "tables": [
            "| Account Name                               | Amount ($ trillions) |\n|--------------------------------------------|---------------------:|\n| GDP                                        |                 18.0 |\n| Wages, salaries, and other labor income    |                  9.0 |\n| Taxes                                      |                  3.5 |\n| Capital consumption allowance              |                  2.3 |\n| Undistributed corporate profits            |                  1.0 |\n| Transfer payments                          |                  1.9 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-749",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the individual earnings (in $ trillions) for a theoretical nation derived from the chosen data in the GDP records?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    gdp = 18.0\n    labor_income = 9.0\n    taxes = 3.5\n    capital_allowance = 2.3\n    corporate_profits = 1.0\n    transfer_payments = 1.9\n\n    # Do math calculation to get the answer\n    # Individual earnings can be interpreted as the sum of labor income and undistributed corporate profits\n    individual_earnings = labor_income + corporate_profits\n\n    # Return individual earnings\n    return individual_earnings\n```\n\nThis program defines the various components of GDP, computes the sum of labor income and undistributed corporate profits to arrive at individual earnings, and then returns this value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-750",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will be the 2014 stock-based remuneration cost from the stock grant scheme ($ millions) be, given that since 2010, the yearly executive pay included stock options on the corporation's shares. The enterprise launched a restricted stock grant plan for all non-managerial staff who had been with the enterprise for three years or longer on 1st September 2013. The fair market value of the corporation's shares on the grant date was $4.2 million and the staffer has to stay with the corporation for an additional three years for the shares to vest?",
        "output": [
            " Certainly! Given the information provided, it seems we would need to derive the number of employees eligible for the stock grant scheme and then calculate the total cost. Let's assume that we have some data on the number of eligible non-managerial staff, and then proceed with the calculation.\n\n```python\ndef solution():\n    # Define variables name and value\n    eligible_staff_count = 100  # Assume there are 100 eligible non-managerial staff\n    fair_value_per_share = 4.2  # Fair market value of shares in million dollars\n\n    # Do math calculation to get the answer\n    total_stock_remuneration_cost = eligible_staff_count * fair_value_per_share\n\n    # return answer\n    return total_stock_remuneration_cost\n\n# Example usage\nprint(solution())  # This will print the calculated stock-based remuneration cost\n```\n\nIn this example, I assumed that there are 100 eligible non-managerial staff, and the fair market value per share given is $4.2 million. You can adjust the `eligible_staff_count` variable to match the actual number of eligible staff in your scenario.\n\nIf you have more specific data on the eligible staff count or if the problem states the fair market value directly attributes to the total value of the stock grant scheme (not per share), please adjust the variables accordingly."
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n| **ABC LA retirement plan information  2018** | |\n| Current service costs | 320 |\n| Past service costs | 150 |\n| Employer contributions | 1,200 |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year | 48,395 |\n| Plan assets at beginning of year | 40,800 |\n| Plan assets at end of year | 44,300 |\n| Actuarial loss | 350 |\n| Actual return on plan assets | 3,100 |\n| Discount rate on plan liabilities | 7.5% |\n| Expected rate of return on plan assets | 8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "test-751",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ NY, a home decor purchasing corporation, provides its workers with a defined benefit pension scheme. The data in the subsequent table: The regular pension expense that would be documented in OCI as per IFRS is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150\n    employer_contributions = 1200\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    plan_assets_beginning = 40800\n    plan_assets_end = 44300\n    actuarial_loss = 350\n    actual_return_on_plan_assets = 3100\n    discount_rate_on_plan_liabilities = 0.075\n    expected_rate_of_return_on_plan_assets = 0.082\n\n    # Do math calculation to get the answer\n    interest_cost = benefit_obligation_beginning * discount_rate_on_plan_liabilities\n    expected_return_on_plan_assets_amount = plan_assets_beginning * expected_rate_of_return_on_plan_assets\n    pension_expense = current_service_costs + past_service_costs + interest_cost - expected_return_on_plan_assets_amount + actuarial_loss\n    pension_expense_documented_in_OCI = pension_expense - employer_contributions\n\n    # return answer\n    return pension_expense_documented_in_OCI\n\n# Execute the solution to get the answer\nprint(solution())\n```\n\nThis program defines the necessary variables, performs the required calculations to determine the pension expense documented in OCI according to IFRS, and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-752",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond that Brian purchased has a maturity period of three years with a par value of $1000. The coupon rate is 4% and it pays interest annually. If the required rate of return on the bond is 3.5%, what would be the bond's price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    coupon_rate = 0.04\n    required_rate_of_return = 0.035\n    maturity_period = 3\n\n    # Do math calculation to get the answer\n    coupon_payment = par_value * coupon_rate\n    bond_price = (coupon_payment / required_rate_of_return) * (1 - (1 + required_rate_of_return) ** -maturity_period) + (par_value / (1 + required_rate_of_return) ** maturity_period)\n\n    # return answer\n    return bond_price\n```\nThis program will calculate the price of the bond based on the given parameters. The formula used is the present value of the coupon payments plus the present value of the par value."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-753",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose that the one-year probabilities of default for the bonds rated AAA and BBB are 1% and 4% respectively, and the combined probability of default of these two bonds is 0.07%. What is the correlation of default between these two bonds?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    p_AAA = 0.01  # Probability of default for AAA bonds\n    p_BBB = 0.04  # Probability of default for BBB bonds\n    p_combined = 0.0007  # Combined probability of default of both bonds\n\n    # Do math calculation to get the answer\n    correlation = (p_combined - (p_AAA * p_BBB)) / (p_AAA * p_BBB)\n\n    # return answer\n    return correlation\n\n# Test the solution\nprint(solution())\n```\n\nThis Python program will calculate the correlation of default between the two bonds based on the given probabilities and the combined probability of default."
        ]
    },
    {
        "tables": [
            "|  |  |\n|---|---|\n|Exhibit 1. Adidas AG Excerpt from Consolidated Income Statement Year|   |\n|Ending 31 December 2010(\u00a3 in millions)|   |\n|Gross profit|5730|\n|Royalty and commission income|100|\n|Other operating income|110|\n|Other operating expenses|5046|\n|Operating profit|894|\n|Interest income 25| |\n|Interest expense|113|\n|Income before taxes|806|\n|Income taxes|238|\n|Net income|568|\n|Additional Information:| |\n|Depreciation and amortization:  \u00a3249 million| |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-754",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the EBITDA interest coverage ratio of Adidas AG as stated in Exhibit 1?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 568\n    income_taxes = 238\n    interest_expense = 113\n    depreciation_and_amortization = 249\n\n    # Do math calculation to get the answer\n    operating_income = net_income + income_taxes\n    ebitda = operating_income + depreciation_and_amortization\n    ebitda_interest_coverage_ratio = ebitda / interest_expense\n\n    # return answer\n    return ebitda_interest_coverage_ratio\n\n# Running the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Par Value   | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n|-------------|------------|--------|-------------------|--------------------|-----------|\n| $25million  |     105    |  8%    |     7.9           |     8              |   122     |\n| $25million  |     100    |  7%    |     8.5           |     8.5            |   154     |\n| $20million  |     95     |  5%    |     6.3           |     2              |   87      |\n| $30million  |     87     |  0%    |     10.2          |     10.2           |   32      |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-755",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the data in the chart concerning four bonds in an investment collection, what is the portfolio's effective duration?",
        "output": [
            " Certainly! To calculate the portfolio's effective duration, we need to find the weighted average of the effective durations of the individual bonds. The weight is the proportion of the total portfolio value that each bond represents.\n\nHere's a Python program to compute this:\n\n```python\ndef solution():\n    # Define variables name and value\n    bonds = [\n        {\"par_value\": 25000000, \"bond_price\": 105, \"effective_duration\": 8.0},\n        {\"par_value\": 25000000, \"bond_price\": 100, \"effective_duration\": 8.5},\n        {\"par_value\": 20000000, \"bond_price\": 95, \"effective_duration\": 2.0},\n        {\"par_value\": 30000000, \"bond_price\": 87, \"effective_duration\": 10.2}\n    ]\n\n    total_value = 0\n    total_weighted_duration = 0\n\n    # Calculate total portfolio value and total weighted effective duration\n    for bond in bonds:\n        bond_value = bond['par_value'] * bond['bond_price'] / 100\n        total_value += bond_value\n        total_weighted_duration += bond_value * bond['effective_duration']\n\n    # Calculate portfolio's effective duration\n    portfolio_effective_duration = total_weighted_duration / total_value\n\n    # return answer\n    return portfolio_effective_duration\n\n# To run the function and get the result\nprint(solution())\n```\n\nThis program defines the bond details in a list of dictionaries. It then calculates the total value of the portfolio and the total weighted effective duration. Finally, it computes the portfolio's effective duration by dividing the total weighted effective duration by the total portfolio value."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-756",
        "python_solution": "",
        "ground_truth": null,
        "question": "A 2-year zero-coupon bond with a face value of  USD 1,000 is currently valued at USD 952.48. The corporation uses a binomial pricing model with a 1-year time increment for all its valuations. Should interest rates decrease over the forthcoming year, the model predicts the bond's worth to be USD 970, or USD 950 should interest rates increase. Using the risk-neutral probabilities deduced from the model, and assuming the risk-free interest rate is 1% annually, what ought to be the present value of a 1-year European call option on this bond with a exercise price of USD 960?",
        "output": [
            " To solve this problem, we need to use the binomial pricing model and risk-neutral probabilities to determine the value of the 1-year European call option on the bond. Here is the step-by-step approach to solve the problem:\n\n1. Calculate the risk-neutral probabilities using the given bond prices and the risk-free interest rate.\n2. Calculate the possible prices of the bond at maturity.\n3. Calculate the present value of the option payoff using the risk-neutral probabilities.\n\nHere's the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    current_value = 952.48\n    rate_decrease_value = 970\n    rate_increase_value = 950\n    risk_free_rate = 0.01\n    exercise_price = 960\n\n    # Calculate risk-neutral probabilities\n    down_prob = (current_value * (1 + risk_free_rate) - rate_decrease_value) / (rate_increase_value - rate_decrease_value)\n    up_prob = 1 - down_prob\n\n    # Calculate payoffs at maturity\n    payoff_up = max(rate_increase_value - exercise_price, 0)\n    payoff_down = max(rate_decrease_value - exercise_price, 0)\n\n    # Calculate the present value of the option\n    option_value = (payoff_up * up_prob + payoff_down * down_prob) / (1 + risk_free_rate)\n\n    # return answer\n    return option_value\n\n# Call the function to get the answer\nprint(solution())\n```\n\nLet's break down the steps in the code:\n\n1. **Define Variables**: Set the given values for the face value of the bond, the current value of the bond, the predicted values under different interest rate scenarios, the risk-free interest rate, and the exercise price of the option.\n\n2. **Calculate Risk-Neutral Probabilities**:"
        ]
    },
    {
        "tables": [
            "| Company M | $(millions) |\n|-----------|-------------|\n| Operating income (EBIT) | 2,000 |\n| Depreciation expense | 750 |\n| Increase in accounts receivable | 1,000 |\n| Increase in inventories | 100 |\n| Increase in accounts payable | 500 |\n| Purchases of PP&E | 600 |\n| Borrowing (repayment) | 400 |\n| Tax rate | 30% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-757",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the financial report, what is the FCFF for Company N?",
        "output": [
            " Sure, let's first understand what FCFF (Free Cash Flow to the Firm) is and how it's calculated. The formula for FCFF is:\n\n\\[ \\text{FCFF} = \\text{EBIT} \\times (1 - \\text{Tax Rate}) + \\text{Depreciation} - \\Delta \\text{Capital Expenditures} - \\Delta \\text{Working Capital} \\]\n\nwhere:\n- \\(\\Delta \\text{Capital Expenditures}\\) is the net increase in PP&E.\n- \\(\\Delta \\text{Working Capital}\\) is the net increase in working capital, which can be calculated as: Increase in accounts receivable + Increase in inventories - Increase in accounts payable.\n\nGiven the data:\n- Operating income (EBIT) = 2000\n- Depreciation expense = 750\n- Increase in accounts receivable = 1000\n- Increase in inventories = 100\n- Increase in accounts payable = 500\n- Purchases of PP&E = 600\n- Tax rate = 30%\n\nWe can put this information into a Python function to calculate the FCFF:\n\n```python\ndef solution():\n    # Define variables name and value\n    EBIT = 2000  # in million dollars\n    depreciation = 750  # in million dollars\n    increase_accounts_receivable = 1000  # in million dollars\n    increase_inventories = 100  # in million dollars\n    increase_accounts_payable = 500  # in million dollars\n    purchases_of_PPnE = 600  # in million dollars\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    tax_shielded_EBIT = EBIT * (1 - tax_rate)\n    delta_working_capital = increase_accounts_receivable + increase_inventories - increase_accounts_payable\n    delta_capex = purchases_of_PPnE\n    FCFF = tax_shielded_EBIT + de"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-758",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, a corporation acquired a warehouse and accompanying equipment like shelving and forklifts for a whole sum of \u20ac50 million. This was divided by an evaluator into: Land \u20ac10 million, building structure \u20ac35 million, and accompanying gear \u20ac5 million. For bookkeeping goals, taking into account additional spending like \u20ac2.0 million for enhancements to the building\u2019s roof and windows, \u20ac0.5 million for internal remodeling to suit their requirements (repositioning walls and doors, addition and removal of dividers, and so forth), and \u20ac0.1 million on an orientation and training workshop for employees to familiarize them with the facility, what is the capitalized cost to the building account in millions?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_building_cost = 35.0  # in millions\n    enhancements_to_building = 2.0  # in millions\n    internal_remodeling = 0.5  # in millions\n    training_workshop = 0.1  # in millions (Note: This should not be capitalized to the building account, typically capitalized costs relate to the property's value enhancement and useful life, e.g. land/buildings, and typically not considered operational/training costs.)\n\n    # Do math calculation to get the answer\n    capitalized_cost = initial_building_cost + enhancements_to_building + internal_remodeling\n\n    # return answer\n    return capitalized_cost\n```"
        ]
    },
    {
        "tables": [
            "|    | Today's one-year Libor | Currency pair (Price/Base) | Spot rate today | Projected spot rate in one year |\n|----|------------------------|---------------------------|-----------------|---------------------------------|\n| USD | 0.80% | CAD/USD | 1.0055 | 1.0006 |\n| CAD | 1.71% | EUR/CAD | 0.7218 | 0.7279 |\n| EUR | 2.20% |  |  |  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-759",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is contemplating a carry trade between the USD and the Euro. What could be the total USD return on the suggested carry trade, taking into account the spot rates and interest rates?",
        "output": [
            " Certainly! Below is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    usd_interest_rate = 0.0080  # 0.80% USD interest rate\n    eur_interest_rate = 0.0220  # 2.20% EUR interest rate\n    spot_rate_eur_usd = 1.0055  # Current spot rate EUR/USD\n    projected_spot_rate_eur_usd = 1.0006  # Projected spot rate EUR/USD in one year\n\n    # Do math calculation to get the answer\n    # Calculate interest earned in EUR and converted to USD\n    interest_earned_eur = (eur_interest_rate - usd_interest_rate)\n\n    # Calculate the expected exchange rate change\n    exchange_rate_change = (projected_spot_rate_eur_usd - spot_rate_eur_usd) / spot_rate_eur_usd\n\n    # Calculate the total return including interest and exchange rate change\n    total_return = interest_earned_eur + exchange_rate_change\n\n    # Convert the total return percentage to USD return\n    usd_return = total_return * spot_rate_eur_usd\n\n    # Convert the return to percentage and return the answer\n    answer = usd_return * 100\n\n    # return answer\n    return answer\n\n# Example usage\nprint(solution())\n```\n\n### Explanation:\n1. **Interest Earned in EUR:**\n   - The differential interest earned (in percentage) is the difference between the European interest rate (`eur_interest_rate = 0.0220`) and the USD interest rate (`usd_interest_rate = 0.0080`).\n\n2. **Exchange Rate Change:**\n   - The change in the exchange rate is calculated as the difference between the `projected_spot_rate_eur_usd` and the `spot_rate_eur_usd`, divided by the `spot_rate_eur_usd`.\n\n3. **Total Return:**\n  "
        ]
    },
    {
        "tables": [
            "| Path | Time 0 | Time 1 | Time 2 |\n|------|--------|--------|--------|\n| 1    | 1.500% | 2.8853%| 2.7183%|\n| 2    | 1.500% | 2.8853%| 1.6487%|\n| 3    | 1.500% | 1.7500%| 1.6487%|\n| 4    | 1.500% | 1.7500%| 1.0000%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-760",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bond D is a 3-year annual pay bond that offers a 3% coupon rate. Smith determines the potential interest rate paths for Bond D as shown in the Exhibit below. According to the Exhibit, what is the current value of Bond D's cash flows if we follow Path 2?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assumed face value of the bond\n    coupon_rate = 0.03  # 3% coupon rate\n\n    # Coupon payments for each year\n    coupon_payment = face_value * coupon_rate\n\n    # Spot rates for Path 2\n    spot_rate_year_1 = 0.01500\n    spot_rate_year_2 = 0.028853\n    spot_rate_year_3 = 0.016487\n\n    # Calculate the present value of each cash flow\n    pv_year_1 = coupon_payment / (1 + spot_rate_year_1)\n    pv_year_2 = coupon_payment / (1 + spot_rate_year_2) ** 2\n    pv_year_3 = (coupon_payment + face_value) / (1 + spot_rate_year_3) ** 3\n\n    # Calculate the total present value\n    total_pv = pv_year_1 + pv_year_2 + pv_year_3\n\n    # Return the answer\n    return total_pv\n\n# Run the solution function and print the result\nprint(solution())\n```\n\nThis program calculates the present value of Bond D's cash flows if we follow Path 2 using the spot rates provided in the table. The coupon payments are discounted using the corresponding spot rates for each year. The final result is the sum of the present values of the cash flows."
        ]
    },
    {
        "tables": [
            "|  Exhibit 1  | 10 Sample Results of Test Data for Dataset XYZ |\n|-------------|------------------------------------------------|\n| Sentence#   | Actual Sentiment Target p-value               |\n| 1           | 1 0.75                                        |\n| 2           | 0 0.45                                        |\n| 3           | 1 0.64                                        |\n| 4           | 1 0.81                                        |\n| 5           | 0 0.43                                        |\n| 6           | 1 0.78                                        |\n| 7           | 0 0.59                                        |\n| 8           | 1 0.60                                        |\n| 9           | 0 0.67                                        |\n| 10          | 0 0.54                                        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-761",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a threshold p-value of 0.65, Smith wants to implement machine learning (ML) models in the company's analytics procedures. Smith applies the ML model on the test data for Dataset XYZ, as described in Exhibit 1, which includes example results from the testing data collection. What is the accuracy metric for the sample test set of Dataset XYZ according to Exhibit 1?",
        "output": [
            " Certainly! Below is the Python program that calculates the accuracy metric for the sample test set of Dataset XYZ, given a threshold p-value of 0.65.\n\n```python\ndef solution():\n    # Define variables and their values\n    data = [\n        (1, 0.75),\n        (0, 0.45),\n        (1, 0.64),\n        (1, 0.81),\n        (0, 0.43),\n        (1, 0.78),\n        (0, 0.59),\n        (1, 0.60),\n        (0, 0.67),\n        (0, 0.54)\n    ]\n    threshold = 0.65\n\n    # Do math calculation to get the answer\n    correct_predictions = 0\n\n    for actual, p_value in data:\n        if (p_value >= threshold and actual == 1) or (p_value < threshold and actual == 0):\n            correct_predictions += 1\n\n    total_predictions = len(data)\n    accuracy = correct_predictions / total_predictions\n\n    # return answer\n    return accuracy\n\n# Call the function to get the accuracy\naccuracy = solution()\nprint(f\"The accuracy metric for the sample test set of Dataset XYZ is: {accuracy}\")\n```\n\nThis program defines a function `solution()` that calculates the accuracy metric by comparing each data point's p-value to the threshold of 0.65 and checks if the prediction matches the actual sentiment target. The accuracy is then calculated as the ratio of correct predictions to the total number of predictions. The result is printed out at the end."
        ]
    },
    {
        "tables": [
            "| Security | Beginning($) | End($) | Shares |\n|----------|--------------|--------|--------|\n| G        |    15.00     |  17.00 |  500   |\n| H        |    35.00     |  33.00 |  300   |\n| 1        |    37.00     |  40.00 |  200   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-762",
        "python_solution": "",
        "ground_truth": null,
        "question": "Recently, an analyst named Benedict from a finance firm collected this data for an equal-weighted index made up of securities G,H,I: What is the return of the index during this time frame?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    stock_g_begin = 15.00\n    stock_g_end = 17.00\n    stock_h_begin = 35.00\n    stock_h_end = 33.00\n    stock_i_begin = 37.00\n    stock_i_end = 40.00\n\n    # Calculate the return for each security\n    return_g = (stock_g_end - stock_g_begin) / stock_g_begin\n    return_h = (stock_h_end - stock_h_begin) / stock_h_begin\n    return_i = (stock_i_end - stock_i_begin) / stock_i_begin\n\n    # Calculate the average return for the index\n    average_return = (return_g + return_h + return_i) / 3\n\n    # return answer\n    return average_return\n\n# Execute the function to get the return of the index\nprint(f\"The return of the index is: {solution()}\")\n```\n\nThis Python program calculates the return of each security, then computes the average return to determine the return of the equal-weighted index."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-763",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a product has a unit contribution margin of $12, fixed costs are $12,000, the interest costs amount to $3,000, and the tax rate is 40%, what would be the operating breakeven point (in units)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 12\n    fixed_costs = 12000\n    interest_costs = 3000\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    total_fixed_costs = fixed_costs + interest_costs\n    contribution_margin_after_tax = unit_contribution_margin * (1 - tax_rate)\n    operating_breakeven_point = total_fixed_costs / contribution_margin_after_tax\n\n    # return answer\n    return operating_breakeven_point\n\n# Calling the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n| --- | --- | --- |\n| Security 1 | 30 | 1.60 |\n| Security 2 | 20 | 1.70 |\n| Security 3 | 25 | 1.90 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-764",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the capital asset pricing model, can you compute the market risk premium for the market using the provided details? The expected return for Security B is 15.9% and the risk-free rate stands at 4%.",
        "output": [
            " Sure! To compute the market risk premium using the Capital Asset Pricing Model (CAPM), we can use the formula:\n\n\\[ \\text{Market Risk Premium} = \\text{Expected Return of Security} - \\text{Risk-Free Rate} \\]\n\nGiven that the expected return for Security B is 15.9% and the risk-free rate is 4%, we can find the market risk premium. Here\u2019s the Python code to compute this:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_return = 15.9  # Expected return of Security 2 (15.9%)\n    risk_free_rate = 4.0    # Risk-free rate (4%)\n\n    # Do math calculation to get the market risk premium\n    market_risk_premium = expected_return - risk_free_rate\n\n    # Return the answer\n    return market_risk_premium\n\n# Calling the solution function to get the result\nprint(solution())\n```\n\nThis program defines the expected return and risk-free rate, calculates the market risk premium according to the CAPM, and then returns that value. When you run the program, it will output the market risk premium."
        ]
    },
    {
        "tables": [
            "| Neutral  real policy rate at trend growth and target inflation | 1.2% |\n| --- | --- |\n| Target inflation rate | 0.5% |\n| Expected inflation rate | 1.0% |\n| Trend real GDP growth rate | 1.0% |\n| Expected real GDP growth rate | 2.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-765",
        "python_solution": "",
        "ground_truth": null,
        "question": "In order to predict the return expectations for Swedish bonds, Oliver chooses to figure out the target nominal policy rate of Sweden by implementing the Taylor rule with the data shown in Exhibit 1. What's the calculated target nominal policy rate for Sweden using the Taylor rule?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    neutral_real_policy_rate = 0.012   # Neutral real policy rate at trend growth and target inflation\n    target_inflation_rate = 0.005      # Target inflation rate\n    expected_inflation_rate = 0.010    # Expected inflation rate\n    trend_real_gdp_growth_rate = 0.010 # Trend real GDP growth rate\n    expected_real_gdp_growth_rate = 0.020  # Expected real GDP growth rate\n\n    # Do math calculation to get the answer\n    inflation_gap = expected_inflation_rate - target_inflation_rate\n    output_gap = expected_real_gdp_growth_rate - trend_real_gdp_growth_rate\n    target_nominal_policy_rate = (\n        neutral_real_policy_rate\n        + 0.5 * inflation_gap\n        + 0.5 * output_gap\n    )\n\n    # Return the answer\n    return target_nominal_policy_rate * 100  # Converting to percentage\n\n# Calling the solution function to get the result\nresult = solution()\nprint(f\"The calculated target nominal policy rate for Sweden is: {result:.2f}%\")\n```\n\nIn this program:\n- We first define the necessary variables using the data provided.\n- Then, we calculate the inflation gap and the output gap.\n- Next, we apply the Taylor rule to calculate the target nominal policy rate.\n- Finally, we convert the rate from a decimal to a percentage for easier interpretation and return the result."
        ]
    },
    {
        "tables": [
            "|                                          | ($ thousands) |\n|------------------------------------------|-------------:|\n| Book value of Great Lakes                |      3,256.00|\n| Fair value of Suburban's investment in Great Lakes |         940|\n| Carrying value of Suburban's investment in Great Lakes | 1,264.51|"
        ],
        "topic": "Accounting",
        "question_id": "test-766",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on Thompson's assessment of Metro's assets in Great Lakes as outlined in Exhibit 3 at the conclusion of 2013, even with government assistance, he thought that the automotive sector was unlikely to make a full recovery. This, coupled with Great Lakes' dependence on the automotive industry, would cause Metro, a company known for acquiring local news organizations across the nation under US GAAP, to possibly consider the investment impaired. According to Thompson's viewpoint concerning the probable impairment of the investment in Great Lakes Free Press as presented in Exhibit 3, what is the impairment loss in thousands as of the end of 2013?",
        "output": [
            " To determine the impairment loss based on the given table and Thompson's assessment, we need to calculate the difference between the carrying value of Suburban's investment in Great Lakes and the fair value of that investment. Here's the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    fair_value = 940\n    carrying_value = 1264.51\n\n    # Do math calculation to get the answer\n    impairment_loss = carrying_value - fair_value\n\n    # return answer\n    return impairment_loss\n```\n\nThis program first defines the fair value and carrying value of Suburban's investment in Great Lakes. It then calculates the impairment loss by subtracting the fair value from the carrying value and returns the result."
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|-----------|----------|---------- |\n|One-Year   |   2.50%  |   2.50%   |\n|Two-Year   |   2.99%  |   3.00%   |\n|Three-Year |   3.48%  |   3.50%   |\n|Four-Year  |   3.95%  |   4.00%   |\n|Five-Year  |   4.37%  |           |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-767",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in Display 1 about the present par and spot rates of annual-coupon sovereign bonds, what is the forward rate for a loan for one year that starts in three years?",
        "output": [
            " Certainly, here is the Python program that calculates the forward rate for a loan for one year that starts in three years, based on the provided spot rates.\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_3year = 3.50 / 100  # converting percentage to decimal\n    spot_4year = 4.00 / 100  # converting percentage to decimal\n\n    # Do math calculation to get the answer\n    forward_rate = ((1 + spot_4year)**4 / (1 + spot_3year)**3) - 1\n\n    # return answer\n    # Convert to percentage and round to two decimal places for clarity\n    return round(forward_rate * 100, 2)\n\n# Example usage:\nforward_rate = solution()\nprint(\"The forward rate for a loan for one year that starts in three years is: {:.2f}%\".format(forward_rate))\n```\n\n### Explanation\n1. **Define the spot rates:** The spot rates for the three-year and four-year maturities are provided. We convert these percentages to their decimal forms.\n2. **Calculate the forward rate:** The one-year forward rate starting in three years is calculated using the formula:\n   \\[\n   \\text{forward\\_rate} = \\left( \\frac{(1 + \\text{spot\\_4year})^4}{(1 + \\text{spot\\_3year})^3} \\right) - 1\n   \\]\n3. **Convert and return the answer:** The result is converted back to a percentage format for readability and then returned.\n\nThis program will output the correct forward rate based on the provided spot rates."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-768",
        "python_solution": "",
        "ground_truth": null,
        "question": "A zero-coupon bond with a maturity term of one year has a yield of 4.0%. The yield on zero-coupon bonds with a maturity of two and three years are 5.0% and 6.0% respectively. The forward price of a zero-coupon bond with a two-year term that begins in three years is established at 0.8479. What's the current price of a zero-coupon bond that matures in five years?",
        "output": [
            " To solve the given problem, we need to calculate the current price of a zero-coupon bond that matures in five years using the given yields and forward price.\n\nHere's the step-by-step approach:\n\n1. Calculate the price of a zero-coupon bond with a one-year maturity using the given yield.\n2. Calculate the price of a zero-coupon bond with a two-year maturity using the given yield.\n3. Calculate the price of a zero-coupon bond with a three-year maturity using the given yield.\n4. Use the forward price to calculate the price of a zero-coupon bond with a two-year term that begins in three years.\n5. Combine all information to find the current price of a zero-coupon bond that matures in five years.\n\nThe formula for the price of a zero-coupon bond is:\n\\[ P = \\frac{1}{(1 + y)^t} \\]\nwhere \\( y \\) is the yield and \\( t \\) is the term.\n\nHere is the Python program to calculate the answer:\n\n```python\ndef solution():\n    # Define variables and their values\n    yield_1_year = 0.04\n    yield_2_year = 0.05\n    yield_3_year = 0.06\n    forward_price_2_year_in_3_years = 0.8479\n\n    # Calculate the price of a 1-year zero-coupon bond\n    price_1_year = 1 / (1 + yield_1_year)\n\n    # Calculate the price of a 2-year zero-coupon bond\n    price_2_year = 1 / (1 + yield_2_year) ** 2\n\n    # Calculate the price of a 3-year zero-coupon bond\n    price_3_year = 1 / (1 + yield_3_year) ** 3\n\n    # Calculate the price of a 5-year zero-coupon bond\n    price_5_year = price_3_year * forward_price_2_year_in_3_years\n\n    # Return the answer\n    return price_5_year\n\n#"
        ]
    },
    {
        "tables": [
            "| Years Ended 31 December | 2007 | 2008 |\n| --- | --- | --- |\n| Assets |  |  |\n| Current assets |  |  |\n| Cash and equivalents | $210 | $248 |\n| Accounts receivable | 474 | 513 |\n| Inventory | 520 | 564 |\n| Total current assets | 1,204 | 1,325 |\n| Gross fixed assets | 2,501 | 2,850 |\n| Accumulated depreciation | (604) | (784) |\n| Net fixed assets | 1,897 | 2,066 |\n| Total assets | $3,101 | $3,391 |",
            "| Years Ended 31  December | 2007  | 2008  |\n|--------------------------|-------|-------|\n| Liabilities and shareholders' equity | | |\n| Current liabilities | | |\n| Accounts payable        | $295  | $317  |\n| Notes payable           | 300   | 310   |\n| Accrued taxes and expenses| 76   | 99    |\n| Total current liabilities| 671   | 726   |\n| Long-term debt          | 1,010 | 1,050 |\n| Common stock            | 50    | 50    |\n| Additional paid-in capital| 300  | 300   |\n| Retained earnings       | 1,070 | 1,265 |\n| Total shareholders' equity| 1,420 | 1,615 |\n| Total liabilities and shareholders' equity | $3,101 | $3,391 |",
            "| Statement of Income<br>In Millions, except Per-Share Data | 31 December 2008 |\n|----------------------------------------------------------|-----------------|\n| Total revenues                                           | $2,215           |\n| Operating costs and expenses                             | 1,430           |\n| EBITDA                                                   | 785             |\n| Depreciation                                             | 180             |\n| EBIT                                                     | 605             |\n| Interest expense                                         | 130             |\n| Income before tax                                        | 475             |\n| Taxes (at 40 percent)                                    | 190             |\n| Net income                                               | 285             |\n| Dividends                                                | 90              |\n| Addition to retained earnings                            | 195             |",
            "| Statement of Cash Flows In Millions | 31 December 2008 |\n|---|---|\n| Operating activities |   |\n| Net income | $285 |\n| Adjustments |   |\n| Depreciation | 180 |\n| Changes in working capital |   |\n| Accounts receivable | (39) |\n| Inventories | (44) |\n| Accounts payable | 22 |\n| Accrued taxes and expenses | 23 |\n| Cash provided by operating activities | $427 |\n| Investing activities |   |\n| Purchases of fixed assets | $349 |\n| Cash used for investing activities | $349 |\n| Financing activities |   |\n| Notes payable | $(10) |\n| Long-term financing issuances | (40) |\n| Common stock dividends | 90 |\n| Cash used for financing activities | $40 |\n| Cash and equivalents increase (decrease) | 38 |\n| Cash and equivalents at beginning of year | 210 |\n| Cash and equivalents at end of year | $248 |\n| Supplemental cash flow disclosures |   |\n| Interest paid | $130 |\n| Income taxes paid | $190 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-769",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the difference between FCFF and FCFE as per the financial statements provided by the organization?",
        "output": [
            " Sure, let's calculate the difference between Free Cash Flow to the Firm (FCFF) and Free Cash Flow to Equity (FCFE) based on the financial statements provided by the organization.\n\nHere's a Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 285\n    depreciation = 180\n    interest_expense = 130\n    change_in_net_working_capital = -39 - 44 + 22 + 23  # (Accounts receivable - Inventories + Accounts payable + Accrued taxes and expenses)\n    capital_expenditures = 349\n    net_borrowing = 40 - 10  # (Long-term financing issuances - Notes payable)\n\n    # Calculate FCFF\n    EBIT_adjusted = net_income + interest_expense * (1 - 0.40)  # We adjust for the effective tax rate of 40%\n    FCFF = EBIT_adjusted + depreciation + change_in_net_working_capital - capital_expenditures\n\n    # Calculate FCFE\n    FCFE = net_income + depreciation + change_in_net_working_capital - capital_expenditures + net_borrowing\n\n    # Calculate the difference between FCFF and FCFE\n    difference = FCFF - FCFE\n\n    # Return the answer\n    return difference\n\n# Running the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\n### Explanation:\n\n1. **FCFF Calculation:**\n   - **Adjusted EBIT**: Net Income + Interest Expense * (1 - Tax Rate)\n   - **FCFF**: Adjusted EBIT + Depreciation + Change in Net Working Capital - Capital Expenditures\n\n2. **FCFE Calculation:**\n   - **FCFE**: Net Income + Depreciation + Change in Net Working Capital - Capital Expenditures + Net Borrowing\n\n3. **Difference**: Subtract FCFE from FCFF."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-770",
        "python_solution": "",
        "ground_truth": null,
        "question": "Did Sesame Corp, which complies with IFRS, charge which amount to inventory expense (\u20ac millions) after it acquired inventory worth \u20ac100 million and allocated \u20ac5 million for storage before selling the items?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_inventory_cost = 100  # \u20ac100 million\n    storage_expense = 5         # \u20ac5 million\n\n    # According to IFRS, storage costs are typically capitalized and added to the cost of inventory\n    inventory_expense = total_inventory_cost + storage_expense\n\n    # return answer\n    return inventory_expense\n```"
        ]
    },
    {
        "tables": [
            "|                       | 2015 | 2016  | 2017 | 2018(E) |\n|-----------------------|------|-------|------|---------|\n| Earnings per share    | 5.56 | 6.23  | 4.72 | 6.5     |\n| Return on equity (ROE)| 11%  | 12.32%| 9.25%| 12.5%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-771",
        "python_solution": "",
        "ground_truth": null,
        "question": "As a junior analyst at a modest investment firm, Jacob was tasked with assessing the value of a food service company known as SpeedyEats, based out of Shanghai. The company's stock price on the 20th of January 2018 stood at $35. Jacob collected data and made projections on the company as illustrated below. Based on the provided data, what is the trailing P/E of the company?",
        "output": [
            " Here is the Python program to calculate the trailing P/E of the company based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share_2017 = 4.72\n    stock_price_2018 = 35\n\n    # Do math calculation to get the answer\n    trailing_pe = stock_price_2018 / earnings_per_share_2017\n\n    # return answer\n    return trailing_pe\n\n# To get the answer, you can call the solution function\nprint(solution())\n```\n\nThis program defines the variables for earnings per share in 2017 and the stock price in 2018. It then calculates the trailing P/E (Price-to-Earnings ratio) by dividing the stock price by the earnings per share and returns the result. The `print(solution())` line at the end allows you to see the result when you run the program."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-772",
        "python_solution": "",
        "ground_truth": null,
        "question": "Think about a call option that is trading at $4 where the strike price is $50. What would be the final value and the earnings for the vendor if the price of the underlying asset at expiration is $49?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    option_premium = 4\n    strike_price = 50\n    final_price_of_asset = 49\n\n    # Do math calculation to get the answer\n    if final_price_of_asset <= strike_price:\n        final_value = 0  # If the final price of the asset is less than or equal to the strike price, the call option expires worthless\n        earnings_for_vendor = option_premium  # The vendor keeps the premium\n    else:\n        final_value = final_price_of_asset - strike_price  # Calculate the intrinsic value of the call option\n        earnings_for_vendor = option_premium  # The vendor keeps the premium\n\n    # return answer\n    return final_value, earnings_for_vendor\n```\n\nIn this program, we first define the input values, which are the option premium, the strike price, and the final price of the underlying asset at expiration. We then perform the necessary calculations:\n1. Check if the final price of the asset is less than or equal to the strike price. If so, the call option expires worthless, and the final value is 0.\n2. If the final price is greater than the strike price, the final value is calculated as the difference between the final price and the strike price.\n3. The earnings for the vendor are always the option premium, as they keep this amount regardless of whether the option expires in the money or not.\n\nFinally, the function returns a tuple containing the final value of the call option and the earnings for the vendor."
        ]
    },
    {
        "tables": [
            "| Current share price | 20 |\n|---------------------|----|\n| Book value per share | 15 |\n| Total shares outstanding | 25 millions |\n| Market value of debt | 60 millions |\n| Accounting book value of total capital | 400 millions |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-773",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the market value added of the theoretical company, according to the data in the table below?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_share_price = 20\n    book_value_per_share = 15\n    total_shares_outstanding = 25000000  # in millions\n    market_value_of_debt = 60000000  # in millions\n    accounting_book_value_of_total_capital = 400000000  # in millions\n\n    # Calculate the market value of equity\n    market_value_of_equity = current_share_price * total_shares_outstanding\n\n    # Calculate the total market value of the company\n    total_market_value = market_value_of_equity + market_value_of_debt\n\n    # Calculate the market value added (MVA)\n    market_value_added = total_market_value - accounting_book_value_of_total_capital\n\n    # return answer\n    return market_value_added\n```\n\nThis program defines the necessary financial variables from the table and performs the calculations to determine the market value added (MVA) of the theoretical company. The MVA is calculated as the difference between the total market value of the company (market value of equity plus market value of debt) and the accounting book value of total capital."
        ]
    },
    {
        "tables": [
            "|                               |     | 2018 |     | 2017 |\n|-------------------------------|-----|------|-----|------|\n| Assets                           |     |      |     |      |\n| Current assets                   |     |      |     |      |\n| Accounts receivable              |     | 800  |     | 750  |\n| Inventories                      |     | 850  |     | 720  |\n| Gross fixed assets               |     | 5000 |     | 4250 |\n| Accounts payable                 |     | $ 400  |     | $300 |\n| Accrued taxes and expenses       |     | 120  |     | 90   |\n| Notes payable                    |     | 550  |     | 500  |\n| Long-term debt                   |     | 1,500 |     | 1,400 |\n| Income Statement for the Year Ended 31 December 2018 |     |      |     |      |\n| EBITDA                           |     |      |     | 2000 |\n| Depreciation expense             |     |      |     | 400  |\n| EBIT                             |     |      |     | 1600 |\n| Interest expense                 |     |      |     | 350  |\n| Pretax income                    |     |      |     | 1250 |\n| Income tax (at 30 percent)       |     |      |     | 375  |\n| Net income                       |     |      |     | $ 875  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-774",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the evaluation of PZ Inc.'s 2018 FCFF (in millions) according to the 2017 and 2018 financial statements provided by the company, as assessed by Jacques?",
        "output": [
            " To calculate PZ Inc.'s 2018 Free Cash Flow to the Firm (FCFF) based on the 2017 and 2018 financial statements, we need to use the following steps:\n\n1. Calculate the EBIT using the provided 2017 EBITDA and Depreciation expense.\n2. Estimate the 2018 EBIT assuming there is no change from 2017.\n3. Deduct the 2018 Interest expense from the estimated 2018 EBIT to get EBT.\n4. Multiply the EBT by (1 - tax rate) to get Net Operating Profit After Tax (NOPAT).\n5. Calculate the change in Net Working Capital for 2018.\n6. Add Depreciation and the change in Net Working Capital to NOPAT to get FCFF.\n\nAssuming no changes from 2017 to 2018 for EBITDA and Depreciation expense, and a tax rate of 30%, let's proceed.\n\n```python\ndef solution():\n    # Define variables name and value\n    ebitda_2017 = 2000\n    depreciation_2017 = 400\n    interest_expense_2018 = 350\n    tax_rate = 0.30\n\n    accounts_receivable_2018 = 800\n    accounts_receivable_2017 = 750\n    inventories_2018 = 850\n    inventories_2017 = 720\n    accounts_payable_2018 = 400\n    accounts_payable_2017 = 300\n    accrued_taxes_2018 = 120\n    accrued_taxes_2017 = 90\n\n    # Calculate EBIT for 2017\n    ebit_2017 = ebitda_2017 - depreciation_2017\n    ebit_2018 = ebit_2017  # Assuming no"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-775",
        "python_solution": "",
        "ground_truth": null,
        "question": "Gemini is planning to buy a two-year Treasury note futures contract. The base 1.2%, semi-annual two-year Treasury note is listed at a clean price of 103. It's been 60 days since the last coupon payment. Gemini is aiming to determine the total spot price of the base two-year Treasury note:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.012  # 1.2% annual coupon rate\n    semi_annual_coupon_rate = coupon_rate / 2  # semi-annual coupon rate\n    market_price = 103  # clean price of the bond\n    days_since_last_coupon = 60  # days since the last coupon payment\n    days_in_year = 365  # assuming not a leap year\n    face_value = 1000  # typically, bonds have a face value of $1000\n\n    # Calculate accrued interest\n    accrued_interest = (days_since_last_coupon / days_in_year) * face_value * coupon_rate\n\n    # Determine the total spot price\n    total_spot_price = market_price + accrued_interest\n\n    # return answer\n    return total_spot_price\n\n# Example usage\nprint(solution())\n```\n\nIn this program, the `solution` function calculates the total spot price of the two-year Treasury note by first determining the accrued interest and then adding it to the clean market price. The `coupon_rate` is the annual coupon rate, `market_price` is the given clean price, and `days_since_last_coupon` is the number of days since the last coupon payment. The `face_value` is assumed to be $1000, which is typical for bonds. The `days_in_year` assumes a non-leap year. Finally, the function returns the total spot price."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-776",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the Equivalent YTM if the buying price of a 30-day Treasury Bill is 99.5?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    buying_price = 99.5\n    face_value = 100  # Since it's a Treasury Bill, the face value is typically 100\n    days_to_maturity = 30  # The bill matures in 30 days\n\n    # Calculate the discount\n    discount = face_value - buying_price\n\n    # Calculate the discount rate\n    discount_rate = discount / face_value\n\n    # Calculate the annual yield (Equivalent YTM)\n    equivalent_ytm = (discount_rate * (365 / days_to_maturity)) * 100\n\n    # return answer\n    return equivalent_ytm\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-777",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the interest rates are 10% and they surge by 25 basis points, how much will the bond portfolio value diminish by, given that these are the current specifications: Portfolio X has 8 bonds under a long position, a price of $90,000, and a modified duration of 2.5, Portfolio Y is worth $110,000 and holds a short position in 6 bonds with a modified duration of 3, and Portfolio Z's details are a $120,000 price, a modified duration of 3.3, and a long position in 12 bonds?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    interest_rate_increase = 0.25 / 100  # 25 basis points = 0.25%\n    original_interest_rate = 0.10\n    modified_duration_X = 2.5\n    modified_duration_Y = 3\n    modified_duration_Z = 3.3\n    price_X = 90000\n    price_Y = 110000\n    price_Z = 120000\n    number_bonds_X = 8\n    number_bonds_Y = 6\n    number_bonds_Z = 12\n\n    # Do math calculation to get the answer\n    # Change in bond price is approximated as -Modified Duration * Change in Interest Rate * Price\n    delta_price_X = -modified_duration_X * interest_rate_increase * price_X\n    delta_price_Y = modified_duration_Y * interest_rate_increase * price_Y  # Short position means the value increases with interest rate\n    delta_price_Z = -modified_duration_Z * interest_rate_increase * price_Z\n\n    total_change_X = delta_price_X * number_bonds_X\n    total_change_Y = delta_price_Y * number_bonds_Y\n    total_change_Z = delta_price_Z * number_bonds_Z\n\n    total_portfolio_change = total_change_X + total_change_Y + total_change_Z\n\n    # return answer\n    return total_portfolio_change\n\n# Calculate the answer\nprint(solution())\n```\n```"
        ]
    },
    {
        "tables": [
            "|                          |      |\n|--------------------------|------|\n| weight of asset A        | 30%  |\n| weight of asset B        | 70%  |\n| standard deviation of asset A | 10%  |\n| standard deviation of asset B  | 15%  |\n| correlation coefficient  | -0.7 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-778",
        "python_solution": "",
        "ground_truth": null,
        "question": "Compute the standard deviation of the portfolio as per the data presented in the below table:",
        "output": [
            " Certainly! To compute the standard deviation of the portfolio, we need to follow the formula for portfolio standard deviation, which takes into account the weights of the assets, their standard deviations, and the correlation coefficient between them.\n\nHere is the Python program to calculate the standard deviation of the portfolio:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_A = 0.30\n    weight_B = 0.70\n    std_dev_A = 0.10\n    std_dev_B = 0.15\n    correlation_coefficient = -0.7\n\n    # Do math calculation to get the answer\n    portfolio_variance = (weight_A ** 2) * (std_dev_A ** 2) + \\\n                            (weight_B ** 2) * (std_dev_B ** 2) + \\\n                            2 * weight_A * weight_B * std_dev_A * std_dev_B * correlation_coefficient\n    portfolio_std_dev = math.sqrt(portfolio_variance)\n\n    # return answer\n    return portfolio_std_dev\n\n# Example usage:\nprint(solution())\n```\n\nIn this program, we:\n1. Define the weights of Asset A and Asset B, their respective standard deviations, and the correlation coefficient.\n2. Calculate the portfolio variance using the formula for the variance of a two-asset portfolio.\n3. Compute the portfolio standard deviation by taking the square root of the portfolio variance.\n4. Return the portfolio standard deviation.\n\nThe `print(solution())` line at the end is for testing purposes and will print the result when the script is executed."
        ]
    },
    {
        "tables": [
            "|       Factor      | Market |  Size  | Value | Momentum |\n|:-----------------:|:------:|:------:|:-----:|:--------:|\n|    Coefficient    |  1.080 |  0.098 | -0.401|  0.034   |\n| Variance of the market factor return and covariances with the market factor return | 0.00109 | 0.00053 | 0.00022 | -0.00025 |\n| Portfolio's monthly standard deviation of returns | | | | 3.74% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-779",
        "python_solution": "",
        "ground_truth": null,
        "question": "Referring to Exhibit 1, what percentage of the total portfolio risk is accounted for by the market factor in the current portfolio of Fund 1?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_factor_coefficient = 1.080\n    market_factor_variance = 0.00109\n    portfolio_std_dev = 0.0374  # The monthly standard deviation of portfolio returns converted to decimal\n\n    # Do math calculation to get the answer\n    market_risk = market_factor_coefficient * market_factor_variance\n    total_risk = portfolio_std_dev ** 2  # The total portfolio risk (variance)\n    percentage_risk_by_market = (market_risk / total_risk) * 100\n\n    # Return answer as a percentage\n    return round(percentage_risk_by_market, 2)\n\n# Running the solution function to get the result\nprint(f'The percentage of the total portfolio risk accounted for by the market factor is {solution()}%.')\n```\n\nThis program defines the necessary variables, performs the calculations to determine the percentage of the total portfolio risk accounted for by the market factor, and then returns the answer as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-780",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a luxury vehicle, bought for \u00a3200,000, is financed for a duration of five years with an annual interest rate of 6% compounded monthly with the initial payment due in a month, how much is the monthly payment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 200000  # Principal amount\n    annual_interest_rate = 0.06  # Annual interest rate\n    years = 5  # Duration in years\n    payments_per_year = 12  # Number of payments per year\n\n    # Calculate the monthly interest rate and total number of payments\n    monthly_interest_rate = annual_interest_rate / payments_per_year\n    total_payments = years * payments_per_year\n\n    # Calculate the monthly payment using the formula for compounded interest\n    monthly_payment = (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -total_payments)\n\n    # Return the answer\n    return monthly_payment\n\n# Run the function to get the monthly payment\nprint(\"Monthly Payment:\", solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-781",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bondholder has a bond with a 9% coupon rate that pays interest biannually and matures in three years and they are thinking about selling it. If the necessary return rate on the bond is 11%, what is the bond's cost per 100 of nominal value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.09\n    payments_per_year = 2\n    years_to_maturity = 3\n    required_return_rate = 0.11\n\n    # Calculate the semi-annual coupon payment\n    semi_annual_coupon = (coupon_rate / payments_per_year) * face_value\n\n    # Calculate the number of semi-annual periods\n    periods = years_to_maturity * payments_per_year\n\n    # Calculate the semi-annual required return rate\n    semi_annual_return_rate = required_return_rate / payments_per_year\n\n    # Calculate the present value of the coupon payments\n    pv_coupon_payments = semi_annual_coupon * (1 - (1 + semi_annual_return_rate) ** -periods) / semi_annual_return_rate\n\n    # Calculate the present value of the face value\n    pv_face_value = face_value / (1 + semi_annual_return_rate) ** periods\n\n    # Calculate the bond's cost\n    bond_cost = pv_coupon_payments + pv_face_value\n\n    # return answer\n    return bond_cost\n\n# Call the solution function and print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|           | Hedge Fund | Market Index |\n|-----------|------------|--------------|\n| Hedge Fund   | 256        | 110          |\n| Market Index | 110        | 81           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-782",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the association between the returns of the hedge fund and the market index as per the covariance matrix of returns constructed by a researcher?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    covariance_hedge_market = 110\n\n    # Do math calculation to get the answer\n    answer = covariance_hedge_market\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "|     |     |     |     |\n|-----|-----|-----|-----|\n|**Return in 2006-2017(%)**||||\n| 2006 | 1.48 | 2012 | -8.19|\n| 2007 | -1.59| 2013 | -4.11|\n| 2008 | 8.47 | 2014 | 0.33 |\n| 2009 | -1.55| 2015 | 5.84 |\n| 2010 | -2.69| 2016 | 2.04 |\n| 2011 | -1.89| 2017 | 3.72 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-783",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John invests in a fund and the annual returns range between 1.03% \u2264 x <4.77%, what will be the cumulative relative frequency?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [1.48, -1.59, 8.47, -1.55, -2.69, -1.89, -8.19, -4.11, 0.33, 5.84, 2.04, 3.72]\n    lower_bound = 1.03\n    upper_bound = 4.77\n\n    # Do math calculation to get the answer\n    count_within_range = sum(lower_bound <= ret < upper_bound for ret in returns)\n    cumulative_relative_frequency = count_within_range / len(returns)\n\n    # return answer\n    return cumulative_relative_frequency\n```\n\nThis program calculates the cumulative relative frequency of annual returns that fall within the specified range of 1.03% to 4.77%. The return list contains the annual returns from 2006 to 2017 as given in the table. The program counts how many of these returns are within the specified range and then divides this count by the total number of years to get the cumulative relative frequency."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-784",
        "python_solution": "",
        "ground_truth": null,
        "question": "Grand Rapids Titanium Corp (GRTC) sustains an 80 percent dividend payout ratio due to its restricted growth possibilities. The company's return on equity stands at 15 percent. The obligatory return rate on GRTC's equity is 12 percent, while its anticipated long-term growth rate is 3 percent. Can you determine the justified P/B using the projected fundamentals, in accordance with the residual income model and under the assumption of a constant growth rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend_payout_ratio = 0.80\n    return_on_equity = 0.15\n    required_return_rate = 0.12\n    growth_rate = 0.03\n\n    # Calculate the retention rate\n    retention_rate = 1 - dividend_payout_ratio\n\n    # Calculate the residual income\n    residual_income_next_year = return_on_equity * retention_rate * (return_on_equity - required_return_rate)\n\n    # Justified P/B ratio calculation using the residual income model\n    # justified_PB = (residual_income_next_year / (required_return_rate - growth_rate))\n    justified_PB = (retention_rate * (return_on_equity - required_return_rate)) / (required_return_rate - growth_rate)\n\n    # return answer\n    return justified_PB\n\n# You can run the solution function to get the answer\nif __name__ == \"__main__\":\n    justifiedPB = solution()\n    print(f\"The justified P/B ratio is: {justifiedPB:.4f}\")\n```\n\nThis Python script calculates the justified price-to-book (P/B) ratio using the residual income model under the assumption of constant growth. The result is returned by the `solution` function and can be printed out if executed."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-785",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the latest financial year, Farrow Inc. had average days of sales outstanding of 19 days. Farrow is aiming to enhance its credit policies and collection methodologies and reduce its collection phase in the forthcoming financial year to align with the market average of 15 days. The credit sales in the latest fiscal year were $300 million, and they are estimated to rise to $390 million in the next fiscal year. What should be the alteration in the average accounts receivable balance to accomplish Farrow's objective of decreasing the collection period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and their values\n    current_days_sales_outstanding = 19\n    target_days_sales_outstanding = 15\n    current_credit_sales = 300_000_000\n    target_credit_sales = 390_000_000\n\n    # Calculate current average accounts receivable\n    current_avg_accounts_receivable = (current_credit_sales * current_days_sales_outstanding) / 365\n\n    # Calculate target average accounts receivable\n    target_avg_accounts_receivable = (target_credit_sales * target_days_sales_outstanding) / 365\n\n    # Calculate the alteration in the average accounts receivable balance\n    alteration = current_avg_accounts_receivable - target_avg_accounts_receivable\n\n    # Return the answer\n    return alteration\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-786",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a set of mortgages, 50% are deemed as subprime. The principal balance of 50% of these subprime mortgages and 25% of the non-subprime mortgages are higher than the value of the property used as collateral. If you randomly pick a mortgage from this set for inspection and its principal balance is more than the value of the collateral, what is the likelihood that it is a subprime mortgage?",
        "output": [
            " Certainly! Here is the Python program that calculates the likelihood that a randomly picked mortgage, which has a principal balance more than the value of the collateral, is a subprime mortgage.\n\n```python\ndef solution():\n    # Define variables name and value\n    total_mortgages = 100  # Assuming 100% mortgages for ease of calculation\n    subprime_mortgages = 0.50 * total_mortgages\n    non_subprime_mortgages = 0.50 * total_mortgages\n\n    subprime_over_value = 0.50 * subprime_mortgages\n    non_subprime_over_value = 0.25 * non_subprime_mortgages\n\n    total_over_value = subprime_over_value + non_subprime_over_value\n\n    # Do math calculation to get the answer\n    likelihood = subprime_over_value / total_over_value\n\n    # return answer\n    return likelihood\n\n# Execute the solution\nprint(solution())\n```\n\nThis program first calculates the number of subprime and non-subprime mortgages. Then it calculates the number of mortgages in each category where the principal balance is higher than the value of the collateral. Finally, it calculates the likelihood that a randomly picked mortgage from the set with this condition is a subprime mortgage."
        ]
    },
    {
        "tables": [
            "| Time Period | Forward Rate |\n|-------------|--------------|\n| 0y1y        | 0.80%        |\n| 1y1y        | 1.12%        |\n| Z           | 3.94%        |\n| 3y1y        | 3.28%        |\n| 4y1y        | 3.14%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-787",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value per 100 of par value for a two-year, 3.5% coupon bond, where interest payments are disbursed once a year, considering all rates mentioned are annual rates with a periodicity of one (effective annual rates)?",
        "output": [
            " Certainly! To solve this problem, we need to value a two-year, 3.5% coupon bond given the forward rates. To do this, we will discount the bond's cash flows using the appropriate forward rates. The forward rates provided in the table give us the necessary rates.\n\nHere is the Python program to calculate the value per 100 of par value for the bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.035\n    time_periods = 2\n\n    forward_rates = {\n        '0y1y': 0.0080,  # 0.80%\n        '1y1y': 0.0112    # 1.12%\n    }\n\n    # Calculate the present value of the bond\n    pv_coupons = 0\n    for t in range(1, time_periods + 1):\n        if t == 1:\n            rate = forward_rates['0y1y']\n        elif t == 2:\n            rate = forward_rates['1y1y']\n\n        pv_coupons += coupon_rate * face_value / (1 + rate) ** t\n\n    # Present value of the face value (received at the end of the second year)\n    pv_face_value = face_value / (1 + forward_rates['1y1y']) ** 2\n\n    # Total present value of the bond\n    bond_value = pv_coupons + pv_face_value\n\n    # return answer\n    return bond_value\n\n# Execute the function to get the result\nprint(solution())\n```\n\nThis program does the following:\n1. Defines the face value, coupon rate, and other relevant variables.\n2. Stores the forward rates in a dictionary.\n3. Calculates the present value of all coupon payments, discounting each payment using the appropriate forward rate.\n4. Calculates the present value of the face value, which is received at the end of the second year.\n5. Sums these present values to get the total value"
        ]
    },
    {
        "tables": [
            "|  X  | Y=5 | Y=2 | Y=-3 |\n| --- | --- | --- | ---- |\n| -2  | 0.2 | 0   | 0    |\n|  1  | 0   | 0.6 | 0    |\n|  4  | 0   | 0   | 0.2  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-788",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided data chart, what is the standard deviation of X?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    X = [-2, 1, 4]\n\n    # Calculate the mean of X\n    mean_X = sum(X) / len(X)\n\n    # Calculate the squared differences from the mean\n    squared_diff = [(x - mean_X) ** 2 for x in X]\n\n    # Calculate the variance (average of squared differences)\n    variance = sum(squared_diff) / len(X)\n\n    # Calculate the standard deviation (square root of variance)\n    std_deviation = variance ** 0.5\n\n    # return answer\n    return std_deviation\n\n# Example usage\nsolution()\n\n```"
        ]
    },
    {
        "tables": [
            "| Profit | Cumulative  Distribution  Function |\n|--------|-----------------------------------|\n| $0     | 0.2                               |\n| $1     | 0.4                               |\n| $2     | 0.6                               |\n| $3     | 0.8                               |\n| $4     | 1.0                               |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-789",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the chance of a profit between $1 and $4, as depicted by the following table displaying the discrete uniform probability distribution of gross profits from buying an option?",
        "output": [
            " Certainly! To calculate the chance of a profit between $1 and $4 using the provided cumulative distribution function (CDF), we need to look at the probabilities for profits of $1, $2, $3, and $4. The CDF values for these profits are 0.4, 0.6, 0.8, and 1.0, respectively.\n\nTo find the probability of a profit between $1 and $4, we subtract the CDF value at the lower bound ($1, which is 0.4) from the CDF value at the upper bound ($4, which is 1.0).\n\nHere's the Python program to do this:\n\n```python\ndef solution():\n    # Define variables name and value\n    cdf_1 = 0.4\n    cdf_4 = 1.0\n\n    # Do math calculation to get the answer\n    probability = cdf_4 - cdf_1\n\n    # return answer\n    return probability\n\nprint(solution())\n```\n\nThis program calculates the probability of the profit being between $1 and $4 and returns the result. The `print(solution())` line at the end is to demonstrate how the function can be called and its result printed.\n\nYou can run this program to get the desired probability."
        ]
    },
    {
        "tables": [
            "| ($ millions)          | 2017 | 2018 |\n|-----------------------|------|------|\n| Revenue               | 42   | 37   |\n| Cost of goods sold    | 18   | 16   |\n| Inventory             | 36   | 40   |\n| Accounts receivable   | 22   | 19   |\n| Accounts payable      | 14   | 12   |"
        ],
        "topic": "Accounting",
        "question_id": "test-790",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the year 2018, a firm that utilized US GAAP did cash disbursements of $6 million for employee wages, $2 million for interest liabilities, and $4 million for income tax obligations. Based solely on the data provided in the chart, what is the firm's cash flow from operations for 2018?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue_2018 = 37  # in million dollars\n    cost_of_goods_sold_2018 = 16  # in million dollars\n    accounts_payable_2017 = 14  # in million dollars\n    accounts_payable_2018 = 12  # in million dollars\n    accounts_receivable_2017 = 22  # in million dollars\n    accounts_receivable_2018 = 19  # in million dollars\n    cash_disbursements = 6 + 2 + 4  # in million dollars\n\n    # Do math calculation to get the answer\n    net_income = revenue_2018 - cost_of_goods_sold_2018\n    change_in_accounts_payable = accounts_payable_2018 - accounts_payable_2017\n    change_in_accounts_receivable = accounts_receivable_2018 - accounts_receivable_2017\n\n    cash_flow_from_operations = net_income - change_in_accounts_payable + change_in_accounts_receivable - cash_disbursements\n\n    # return answer\n    return cash_flow_from_operations\n\n# Example usage\nprint(solution())\n```\n\nExplanation:\n- The cash flow from operations is calculated by adjusting the net income by the changes in accounts receivable, accounts payable, and cash disbursements.\n- The net income is calculated by subtracting the cost of goods sold from the revenue.\n- Cash disbursements include employee wages, interest liabilities, and income tax obligations.\n- The change in accounts receivable and accounts payable affects the cash flow by adding/subtracting their changes from the net income.\n- The final cash flow from operations is returned by the function."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-791",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given that the cost per unit for savings account services is 0.5%, the anticipated overhead costs assigned to these services is 1.2%, the targeted profit margin per unit sold is 0.3%, the variable cost rate is 1.2%, and the mean interest rate is 4.5%, what would be the savings rate as per the Cost Plus Profit Margin method of pricing Savings-related Services?",
        "output": [
            " Certainly! Below is a Python program that follows the defined format and calculates the savings rate using the Cost Plus Profit Margin method of pricing Savings-related Services:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost_per_unit = 0.005  # 0.5%\n    overhead_cost = 0.012  # 1.2%\n    profit_margin = 0.003  # 0.3%\n    variable_cost_rate = 0.012  # 1.2%\n    mean_interest_rate = 0.045  # 4.5%\n\n    # Do math calculation to get the answer\n    # Total cost rate = cost per unit + overhead cost + variable cost rate\n    total_cost_rate = cost_per_unit + overhead_cost + variable_cost_rate\n\n    # Savings rate = Total cost rate + Profit margin\n    savings_rate = total_cost_rate + profit_margin\n\n    # return answer in percentage\n    return savings_rate * 100\n\n# You can call the function to get the answer\nanswer = solution()\nprint(f\"The savings rate is: {answer}%\")\n```\n\nWhen you run this program, it will calculate the savings rate using the given percentages and return the result in a percentage format."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-792",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a client wishes to purchase a ball from a store that has 200 balls, three of which are of the same size, what is the likelihood that one of the three balls will be chosen?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_balls = 200\n    specific_balls = 3\n\n    # Do math calculation to get the answer\n    probability = specific_balls / total_balls\n\n    # return answer\n    return probability\n```\n\nThe provided Python function `solution` calculates the probability that one of the three specific balls will be chosen from a total of 200 balls. The probability is computed as the number of specific balls (`3`) divided by the total number of balls (`200`)."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-793",
        "python_solution": "",
        "ground_truth": null,
        "question": "Imagine the present 1-year rate for zero-coupon bonds stays at 6%, and the coming 1-year will fall by 2%. What would be the 2-year spot rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_rate = 0.06\n    future_rate = 0.06 - 0.02  # 6% - 2%\n\n    # Do math calculation to get the answer\n    two_year_spot_rate = ((1 + current_rate) * (1 + future_rate)) ** (1/2) - 1\n\n    # return answer\n    return two_year_spot_rate\n```\n\nThis program defines the current 1-year rate for zero-coupon bonds and the future 1-year rate, then calculates the 2-year spot rate using the formula derived from the spot rate calculation methods for bonds. The `** (1/2)` operation ensures that we are calculating the spot rate appropriately for the 2-year period."
        ]
    },
    {
        "tables": [
            "| Current spot rate for the USD/EUR | 0.7500 |\n| --- | --- |\n| Forward rate for the EUR/AUD | 1.4300 |\n| EUR/AUD forward premium to the spot rate | 400 points |\n| USD: US dollar; EUR: Euro; AUD: Australian dollar | |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-794",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the same circumstances, what is the USD/AUD spot rate?",
        "output": [
            " Sure, let's start by defining the variables and then performing the necessary calculations to compute the USD/AUD spot rate.\n\nThe premise here is to use the given relationships between the spot rates and the forward rates. Specifically, we will use the information about the forward premium to calculate the USD/AUD spot rate.\n\nThe calculation can be broken down into the following steps:\n1. Calculate the EUR/AUD spot rate by subtracting the forward premium from the EUR/AUD forward rate.\n2. Then use the USD/EUR spot rate to convert the EUR/AUD spot rate into the USD/AUD spot rate.\n\nHere's the Python program to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    usd_eur_spot_rate = 0.7500\n    eur_aud_forward_rate = 1.4300\n    eur_aud_forward_premium = 0.0400\n\n    # Do math calculation to get the answer\n    eur_aud_spot_rate = eur_aud_forward_rate - eur_aud_forward_premium\n    usd_aud_spot_rate = usd_eur_spot_rate * eur_aud_spot_rate\n\n    # Return answer\n    return usd_aud_spot_rate\n```\n\nRunning this code will provide the USD/AUD spot rate."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-795",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond's current price is $101.45 and a financial advisor anticipates that the price will increase to $103.28 if interest rates drop by 0.25% or decrease to $100.81 if interest rates go up by 0.25%, what is the bond's effective duration?",
        "output": [
            " Sure, here's the Python program to calculate the bond's effective duration based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_price = 101.45\n    price_if_rates_drop = 103.28\n    price_if_rates_rise = 100.81\n    rate_change = 0.0025  # 0.25% as a decimal\n\n    # Do math calculation to get the answer\n    delta_P_up = (current_price - price_if_rates_rise) / current_price\n    delta_P_down = (price_if_rates_drop - current_price) / current_price\n    effective_duration = (delta_P_down - delta_P_up) / (2 * rate_change)\n\n    # return answer\n    return effective_duration\n\n# Example usage:\nprint(solution())\n```\n\nThis program calculates the effective duration of the bond based on the expected price changes due to interest rate fluctuations. The calculation follows the formula:\n\n\\[ \\text{Effective Duration} = \\frac{\\Delta P_{\\text{down}} - \\Delta P_{\\text{up}}}{2 \\times \\Delta r} \\]\n\nwhere \\(\\Delta P_{\\text{down}}\\) and \\(\\Delta P_{\\text{up}}\\) are the percentage changes in the bond price when interest rates decrease and increase, respectively, and \\(\\Delta r\\) is the change in the interest rate."
        ]
    },
    {
        "tables": [
            "|                       |        |\n| --------------------- | ------ |\n| Net income $          | 100,000|\n| Increase in accounts receivable | 12,000 |\n| Increase in accounts payable | 9,000   |\n| Depreciation and amortization   | 8,000   |"
        ],
        "topic": "Accounting",
        "question_id": "test-796",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the operational cash flow, taking into account the chosen data from the business's activities?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 100000\n    increase_in_accounts_receivable = 12000\n    increase_in_accounts_payable = 9000\n    depreciation_and_amortization = 8000\n\n    # Do math calculation to get the answer\n    operational_cash_flow = net_income + depreciation_and_amortization - increase_in_accounts_receivable + increase_in_accounts_payable\n\n    # return answer\n    return operational_cash_flow\n\n# To find the operational cash flow, call the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                           |         |\n|---------------------------|---------|\n| Forecasted Balance Sheet Data for LI at 31 December 2018    |         |\n| Cash                      | 120     |\n| Accounts receivable       | 30      |\n| Inventory                 | 450     |\n| Fixed assets              | 800     |\n| Total assets              | 1,400   |\n| Liabilities               | 320     |\n| Common stock              | 780     |\n| Retained earnings         | 300     |",
            "|                            | Exchange rates ($/\u20ac) |\n|----------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018           | 1.77                 |\n| 2018 average               | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "test-797",
        "python_solution": "",
        "ground_truth": null,
        "question": "The XY corporation is an American business that follows US GAAP. It also owns two European subsidiary companies: FS financial service and FC financial consultant. John, a CFA, has compiled a forecast of XY's 2018 financial statement. If XY chooses the current rate method to convert the data of FS into US dollars and the temporal method for converting the data of FC into US dollars, what will the total assets be on 31 December 2018 when XY translates FS's results into US dollars?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash = 120\n    accounts_receivable = 30\n    inventory = 450\n    fixed_assets = 800\n    current_exchange_rate = 1.77\n\n    # Convert assets to US dollars using the current rate method\n    total_assets_in_usd = (cash + accounts_receivable + inventory + fixed_assets) * current_exchange_rate\n\n    # return answer\n    return total_assets_in_usd\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program translates the total assets from euros to US dollars using the current rate method. The total assets in euros are first summed up and then converted using the exchange rate on 31 December 2018."
        ]
    },
    {
        "tables": [
            "|                         | Delite Beverage |\n|------------------------ |-----------------|\n| 2010 Earnings per share (EPS) | $3.44         |\n| 2011 estimated EPS      | $3.50          |\n| Book value per share end of year | $62.05    |\n| Current share price     | $65.50         |\n| Sales (billions)        | $32.13         |\n| Free cash flow per share| $2.68          |\n| Shares outstanding end of year | 2,322,034,000 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-798",
        "python_solution": "",
        "ground_truth": null,
        "question": "Basing on the information provided in Exhibit 1, what would be the most suitable price-to-earnings ratio to apply in the assessment of value for the soft drink manufacturing and distribution company, Delite Beverage, especially considering their recent acquisition of a large water bottling firm?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    eps_2010 = 3.44\n    eps_2011_estimated = 3.50\n    current_share_price = 65.50\n\n    # Do math calculation to get the answer\n    # Calculate the most suitable price-to-earnings ratio using the estimated EPS for 2011\n    pe_ratio_estimated_2011 = current_share_price / eps_2011_estimated\n\n    # return answer\n    return pe_ratio_estimated_2011\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-799",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following data is provided for the returns on shares X and shares Y: the return variance for shares X is 100; the return variance for shares Y is 225, and the covariance between the returns on shares X and Y is 53.2. At the conclusion of 1999, you have USD 4 million in shares X. It's under consideration to move USD 1 million to shares Y while preserving USD 3 million in shares X. What is the risk reduction percentage, denoted by return standard deviation, that can be achieved with this strategy?",
        "output": [
            " Certainly! Here is the Python program to calculate the risk reduction percentage denoted by the return standard deviation, following the provided format:\n\n```python\ndef solution():\n    # Define variables name and value\n    variance_X = 100\n    variance_Y = 225\n    covariance_XY = 53.2\n    initial_X = 4000000  # USD 4 million\n    move_to_Y = 1000000  # USD 1 million\n    remaining_X = 3000000 # USD 3 million\n\n    # Calculate initial portfolio standard deviation\n    initial_portfolio_variance = variance_X * (initial_X / initial_X)**2  # Since only X is held initially\n    initial_portfolio_std_dev = initial_portfolio_variance**0.5\n\n    # Calculate new portfolio variance after moving part to Y\n    weight_X = remaining_X / (remaining_X + move_to_Y)\n    weight_Y = move_to_Y / (remaining_X + move_to_Y)\n\n    new_portfolio_variance = (weight_X**2 * variance_X) + (weight_Y**2 * variance_Y) + (2 * weight_X * weight_Y * covariance_XY)\n    new_portfolio_std_dev = new_portfolio_variance**0.5\n\n    # Calculate risk reduction percentage\n    risk_reduction_percentage = ((initial_portfolio_std_dev - new_portfolio_std_dev) / initial_portfolio_std_dev) * 100\n\n    # Return answer\n    return risk_reduction_percentage\n```\n\nThis program uses the given variances and covariance to calculate the initial and new portfolio standard deviations, and then computes the risk reduction percentage."
        ]
    },
    {
        "tables": [
            "| X     | 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    |\n|-------|------|------|------|------|------|------|------|------|\n| P(X)  | 0.14 | 0.09 | 0.19 | 0.25 | 0.17 | 0.06 | 0.03 | 0.07 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-800",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided table, what is the value of F(4)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P_X = [0.14, 0.09, 0.19, 0.25, 0.17, 0.06, 0.03, 0.07]\n\n    # Do math calculation to get the answer\n    F_4 = sum(P_X[:5])  # Sum the probabilities from 0 to 4\n\n    # return answer\n    return F_4\n\n# Call the function to get the result\nresult = solution()\nprint(result)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-801",
        "python_solution": "",
        "ground_truth": null,
        "question": "A bond was purchased by Robert with a remaining maturity of two years. The face value of the bond is 1000. The annual interest rate is 4% and the interest is paid once a year. The current market discount rate is 4.5%. What is the cost of the bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    annual_interest_rate = 0.04\n    market_discount_rate = 0.045\n    remaining_years = 2\n\n    # Do math calculation to get the answer\n    annual_interest_payment = face_value * annual_interest_rate\n    bond_cash_flows = [annual_interest_payment] * (remaining_years - 1) + [annual_interest_payment + face_value]\n    present_value = 0\n    for year in range(1, remaining_years + 1):\n        present_value += bond_cash_flows[year - 1] / (1 + market_discount_rate) ** year\n\n    # return answer\n    return present_value\n```\n\nWhen this program is run, it will calculate the present value of the bond based on the given parameters, which is the cost of the bond to Robert. Here's why this calculation works:\n\n1. First, we calculate the annual interest payment by multiplying the face value of the bond by the annual interest rate.\n2. Next, we define the cash flows: yearly interest payments for the remaining years, plus the face value at the end of the remaining years.\n3. Finally, we calculate the present value of these cash flows using the market discount rate.\n\nThe present value thus obtained is the cost of the bond for Robert."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-802",
        "python_solution": "",
        "ground_truth": null,
        "question": "In order to make use of the cash position of assets under management, an investment strategist decides to engage in a long futures position on the S&P 500 index with a multiplier of 250. The cash position stands at $15 million and given the existing futures value of 1,000, requires the strategist to hold 60 contracts long. Given that the present initial margin is $12,500 per contract and the maintenance margin stands at $10,000 per contract, what amount of variation margin is required by the investment strategist if the value of the futures contract drops to 995 on the closing day of the position being initiated?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    cash_position = 15_000_000\n    futures_value_initial = 1_000\n    futures_value_final = 995\n    contract_multiplier = 250\n    number_of_contracts = 60\n    initial_margin_per_contract = 12_500\n    maintenance_margin_per_contract = 10_000\n\n    # Calculate the change in futures value\n    change_in_futures_value = futures_value_initial - futures_value_final\n\n    # Calculate the total loss across all contracts\n    total_loss = change_in_futures_value * contract_multiplier * number_of_contracts\n\n    # return answer (variation margin required)\n    return total_loss\n\n# To see the result\nprint(solution())\n```\n\nIn this program, we calculate the total loss from the drop in futures value and then return that value as the variation margin required by the investment strategist. The change in futures value is first determined by subtracting the final futures value from the initial value. This change is then multiplied by the contract multiplier and the number of contracts to find the total loss, which is the variation margin needed."
        ]
    },
    {
        "tables": [
            "| Return, R     | Frequency |\n| ------------- |:---------:|\n| -5% up to 0%  | 1         |\n| 0% up to 5%   | 6         |\n| 5% up to 10%  | 4         |\n| 10% up to 15% | 3         |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-803",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided frequency distribution table, can you compute the sample size?",
        "output": [
            " Sure! Let's use the given frequency distribution table to compute the sample size. The sample size is the sum of all the frequencies.\n\nHere is the Python program to compute the sample size:\n\n```python\ndef solution():\n    # Define variables name and value\n    freq_neg_5_to_0 = 1\n    freq_0_to_5 = 6\n    freq_5_to_10 = 4\n    freq_10_to_15 = 3\n\n    # Do math calculation to get the answer\n    sample_size = freq_neg_5_to_0 + freq_0_to_5 + freq_5_to_10 + freq_10_to_15\n\n    # return answer\n    return sample_size\n```\n\nThis program defines the frequencies for each range of returns, sums them all up to get the sample size, and then returns the sample size as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-804",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we aim to incorporate seasons such as spring, summer, autumn, and winter as independent variables, how many dummy variables are required to construct a regression model?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_seasons = 4  # Spring, Summer, Autumn, Winter\n\n    # Do math calculation to get the answer\n    # In regression models, the number of dummy variables required is one less than the total number of categories\n    dummy_variables_required = total_seasons - 1\n\n    # return answer\n    return dummy_variables_required\n```\n\nThis program defines the number of seasons and calculates the number of dummy variables required by subtracting one from the total number of seasons. The result is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-805",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is interested in purchasing a 2-year bond with an annual coupon rate of 5%. The spot rates are listed as 4% for one year and 4.5% for two years. What is the cost of the bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Typically, bonds have a face value of $1000\n    annual_coupon_rate = 0.05\n    spot_rate_year1 = 0.04\n    spot_rate_year2 = 0.045\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * annual_coupon_rate\n    present_value_coupon1 = coupon_payment / (1 + spot_rate_year1)\n    present_value_coupon2 = coupon_payment / (1 + spot_rate_year2)\n    present_value_face_value = face_value / (1 + spot_rate_year2)**2\n    bond_price = present_value_coupon1 + present_value_coupon2 + present_value_face_value\n\n    # Return answer\n    return bond_price\n\n# Execute the solution function to get the answer\nanswer = solution()\nprint(f\"The cost of the bond is: ${answer:.2f}\")\n```\n\nThis Python program calculates the cost of the bond by determining the present values of the future coupon payments and the face value using the spot rates provided, and then sums these present values to get the total cost of the bond."
        ]
    },
    {
        "tables": [
            "| Days to maturity | RMB Spot Interest Rates | USD Spot Interest Rates |\n|-----------------|------------------------|------------------------|\n| 90              | 1%                     | 0.4%                   |\n| 180             | 1.5%                   | 0.6%                   |\n| 270             | 2.0%                   | 0.8%                   |\n| 360             | 2.5%                   | 1.0%                   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-806",
        "python_solution": "",
        "ground_truth": null,
        "question": "An executive initiates a one-year currency swap which involves receiving RMB fixed and paying USD fixed. She utilizes the following data to determine the annualized fixed swap rate for USD: The annualized fixed swap rate for USD is:",
        "output": [
            " To address this problem, we need to perform some interest rate conversion concepts and spot rate analysis. Specifically, we are looking for the annualized fixed swap rate for USD given the provided spot interest rates.\n\nHere's how we can approach this:\n1. The USD spot interest rates are 0.4%, 0.6%, 0.8%, and 1.0% for maturities of 90, 180, 270, and 360 days respectively.\n2. Typically, the fixed swap rate for a longer period (like one year) can be approximated as the interpolated value of rates converted from shorter periods. However, in this simplified scenario, we directly take the rate provided for one year.\n\nGiven that there is no further clarification in the problem, and assuming we need to determine the correct rate directly, we can use the 1.0% for the 360-day rate directly.\n\nHere's the Python program based on these considerations:\n\n```python\ndef solution():\n    # Define variables name and value\n    usd_360_day_rate = 1.0  # as per the table provided\n\n    # Do math calculation to get the answer\n    annualized_swap_rate_usd = usd_360_day_rate\n\n    # return answer\n    return annualized_swap_rate_usd\n\nprint(solution())\n```\n\nThis program simply reads the given data directly, assuming the problem is asking for the 360-day rate to represent the one-year fixed swap rate without additional context or complex interpolations."
        ]
    },
    {
        "tables": [
            "| Asset Class     | Geometric Return (%) |\n|-----------------|----------------------|\n| Equities        | 8.0                  |\n| Corporate Bonds | 6.5                  |\n| Treasury bills  | 2.5                  |\n| Inflation       | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-807",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the risk premium for business bonds a researcher notes in the following historic geometric returns?",
        "output": [
            " Sure, let's calculate the risk premium for corporate bonds. The risk premium is typically calculated as the difference between the return on the asset (in this case, corporate bonds) and the risk-free rate (often represented by treasury bills). Here is the Python program to calculate the risk premium:\n\n```python\ndef solution():\n    # Define variables name and value\n    corporate_bonds_return = 6.5\n    treasury_bills_return = 2.5\n\n    # Do math calculation to get the answer\n    risk_premium = corporate_bonds_return - treasury_bills_return\n\n    # return answer\n    return risk_premium\n\n# To test the solution (Optional)\n# print(solution())\n```\n\nIn this program:\n- `corporate_bonds_return` is the geometric return for Corporate Bonds.\n- `treasury_bills_return` is the geometric return for Treasury bills.\n- `risk_premium` is calculated as the difference between the two.\n\nThis code will return the risk premium for corporate bonds."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-808",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the bond-equivalent yield if the yield-to-maturity on a yearly-pay bond is 7.75%?",
        "output": [
            " To calculate the bond-equivalent yield (BEY) given the yield-to-maturity (YTM) on a yearly-pay bond, you need to consider that the bond-equivalent yield for a bond with semi-annual coupons is twice the semi-annual yield, which can be approximated from the annual yield-to-maturity.\n\nThe formula to calculate the bond-equivalent yield (if the bond pays semi-annually) is:\n\\[ \\text{BEY} = 2 \\times \\left( \\frac{\\text{YTM}}{2} \\right) \\]\nSince the bond pays annually in this case, the BEY is simply the same as the YTM.\n\nHere\u2019s the Python program to calculate the bond-equivalent yield:\n\n```python\ndef solution():\n    # Define variables name and value\n    ytm = 7.75 / 100  # Convert percentage to a decimal\n\n    # Do math calculation to get the answer\n    bey = ytm  # For an annual pay bond, BEY is the same as YTM\n\n    # return answer\n    return bey\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the yield-to-maturity and calculates the bond-equivalent yield accordingly. For an annual pay bond, the BEY is simply the same as the YTM. The result is then printed out when `solution()` is called."
        ]
    },
    {
        "tables": [
            "|                                             |      |                                        |      |\n|---------------------------------------------|------|----------------------------------------|------|\n| **Exhibit 1 U.S.  Macroeconomic  Data**        |      |                                        |      |\n| Growth in real consumer spending           | 3.1% | Yield on  10-yr. U.S. Treasury bonds   | 2.7% |\n| Growth in potential labor force            | 1.9% | Growth in real investment spending     | 3.1% |\n| Growth in labor force participation        | -0.3%| Growth in total factor productivity    | 0.5% |\n| Growth in labor productivity               | 1.4% | Change in trade deficit                | -0.5%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-809",
        "python_solution": "",
        "ground_truth": null,
        "question": "After the financial crises starting in 2008, the squad deliberates on the potential long-term growth trajectory for the U.S. GDP in the wake of external shocks. Reports from several external sources are scrutinized and an agreed perception of the next decade's annual growth projections for the objects in Exhibit 1 is formed. Using the data from Exhibit 1 and adopting the simplest method to review the total trend growth for the U.S. GDP, the most probable projection for the GDP annual growth over the next decade (in %) would be:",
        "output": [
            " Certainly! To solve for the most probable projection for the GDP annual growth over the next decade, we can sum the growth rates of several key components such as real consumer spending, potential labor force, and labor productivity. This simplest method of aggregation will give us an approximate projection for the GDP growth rate.\n\nHere is the Python program to calculate this:\n```python\ndef solution():\n    # Define variables name and value\n    growth_real_consumer_spending = 3.1\n    growth_potential_labor_force = 1.9\n    growth_labor_productivity = 1.4\n    # Total factor productivity growth is typically included in GDP growth considerations\n    growth_total_factor_productivity = 0.5\n\n    # Doing math calculation to get the answer\n    gdp_growth_projection = (\n        growth_real_consumer_spending +\n        growth_potential_labor_force +\n        growth_labor_productivity +\n        growth_total_factor_productivity\n    )\n\n    # Return answer\n    return gdp_growth_projection\n\n# Execute the function and print the answer\nresult = solution()\nprint(result)\n```\n\nAccording to the simplest aggregation method, we sum the individual percentages to estimate the overall GDP growth projection. This approach assumes that these factors contribute additively to GDP growth."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-810",
        "python_solution": "",
        "ground_truth": null,
        "question": "The likelihood of Occurrence X is 40%. The likelihood of Occurrence Y is 60%. The combined likelihood of XY is 40%. What is the likelihood (P) that X or Y happens, or both happen?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P_X = 0.40\n    P_Y = 0.60\n    P_XY = 0.40\n\n    # Do math calculation to get the answer\n    P_X_or_Y = P_X + P_Y - P_XY\n\n    # return answer\n    return P_X_or_Y\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-811",
        "python_solution": "",
        "ground_truth": null,
        "question": "What should the coupon rate be for the interest payment made on December 15 if Beta Co. issued a five-year semi-annual floating rate bond where the coupon rate is the six-month MRR plus 100 bps, with interest payments made every 15 June and 15 December, and which has a six-month MRR of 3% on June 15 and 3.2% on December 15?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    six_month_mrr_june = 0.03  # Six-month MRR on June 15 (3%)\n    six_month_mrr_december = 0.032  # Six-month MRR on December 15 (3.2%)\n    spread = 0.01  # Spread of 100 basis points (1%)\n\n    # Do math calculation to get the answer\n    coupon_rate_june = six_month_mrr_june + spread  # Coupon rate in June\n    coupon_rate_december = six_month_mrr_december + spread  # Coupon rate in December\n\n    # return answer\n    return coupon_rate_december\n\n# If you run this function, it will give the coupon rate for the interest payment made on December 15\nprint(solution())\n```\n\nThe program calculates the coupon rate for the interest payment made on December 15 by adding the six-month MRR on December 15 to the spread of 100 basis points. The result is returned as the final answer."
        ]
    },
    {
        "tables": [
            "| Trades | Execution Price | Shares Executed |\n|--------|-----------------|-----------------|\n| Trade 1 | $40.75 | 10,000 |\n| Trade 2 | $41.25 | 30,000 |\n| Trade 3 | $41.50 | 20,000 |\n| Trade 4 | $41.75 | 30,000 |\n| Total | | 90,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-812",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the following day, Thompson asks Green to go over their study on ABC Corp again. Green's study leads her to think that its stocks are underpriced. She gives her study findings to Thompson, and at 10 o'clock in the morning, he tells her to buy 120,000 shares at a price of $40.00 each using a limit order of $42.00. When the price is $40.50, the buy-side trader submits the order for market execution. The only cost involved is a share commission of $0.02. By the day's end, 90,000 shares of the order have been acquired, and ABC Corp concludes at $42.50. The trade was completed at an estimate price of $41.42. Exhibit 1 gives additional details about the completed trades. The arrival cost for buying the 90,000 shares of ABC Corp is:",
        "output": [
            " Sure, here's the Python program that calculates the arrival cost for buying the 90,000 shares of ABC Corp:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_acquired = 90000\n    estimate_price = 41.42\n    commission_per_share = 0.02\n\n    # Do math calculation to get the answer\n    total_cost = shares_acquired * estimate_price\n    total_commission = shares_acquired * commission_per_share\n    arrival_cost = total_cost + total_commission\n\n    # Return answer\n    return arrival_cost\n\n# Output the result\nprint(solution())\n```\n\nThe `solution` function computes the total cost of acquiring the shares, the total commission for those shares, and then sums them up to get the arrival cost. This is the cost that includes both the purchase price and the commission."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-813",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we consider that the yearly continuously compounded spot rates are: Z1=5%, Z2=5.1%, Z3=5.2%, and a 1.5-year bond has a face value of $100 and a 6% semiannual coupon payment, how would you compute the bond price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    Z1 = 0.05\n    Z2 = 0.051\n    Z3 = 0.052\n    face_value = 100\n    coupon_rate = 0.06\n    semiannual_coupon_payment = (face_value * coupon_rate) / 2\n\n    # Calculate discount factors\n    D1 = (1 - Z1)**(-1)\n    D2 = (1 - Z2)**(-2)\n    D3 = (1 - Z3)**(-3)\n\n    # Calculate present value of the cash flows\n    bond_price = semiannual_coupon_payment * (D0.5 + D1 + D1.5) + face_value * D2\n\n    # Return the answer\n    return bond_price\n```\n\nExplanation:\n1. **Variables**:\n   - \\( Z1, Z2, Z3 \\): Yearly continuously compounded spot rates.\n   - \\( \\text{face_value} \\): Face value of the bond.\n   - \\( \\text{coupon_rate} \\): Semiannual coupon rate.\n   - \\( \\text{semiannual_coupon_payment} \\): Calculation of the semiannual coupon payment.\n\n2. **Calculations**:\n   - Discount Factors: \\( D1, D2, D3 \\) are computed using the formula for continuously compounded discount factors.\n   - Bond Price: The present value of the bond's cash flows is calculated by discounting the coupon payments and the face value.\n     - 1.5-years bond needs discount factors to be interpolated suitably.\n\n3. **Return**: The calculated bond price.\n\n### Updated Code after Considering the Missing Step:\nThe code correctly calculates the bond's price but consider re-calibrating the necessary steps, the required update will follow using traditional spot rates instead of continuously compounded rates and handle intermediary percentages effectively.\n\n```python\ndef solution():\n    # Define variables name and value\n    Z1 = 0.05\n    Z2 = "
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-814",
        "python_solution": "",
        "ground_truth": null,
        "question": "A two-year outstanding US Treasury bond has a yield of 3.5%. The swap spread for a 2-year interest rate swap is said to be 80 bps. What does the fixed payer in a two-year interest rate swap have to pay?",
        "output": [
            " Certainly! To determine the fixed rate that the fixed payer in a two-year interest rate swap has to pay, we need to sum up the yield of the two-year Treasury bond and the swap spread. The yield on the Treasury bond is given as 3.5%, and the swap spread is 80 basis points (bps). Note that 1 basis point is equal to 0.01%.\n\nHere is the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    treasury_yield = 3.5  # in percentage\n    swap_spread = 0.80    # in percentage (since 80 bps = 0.80%)\n\n    # Do math calculation to get the answer\n    fixed_rate = treasury_yield + swap_spread\n\n    # return answer\n    return fixed_rate\n```\n\nThis function `solution` calculates the fixed rate by adding the Treasury yield and the swap spread and then returns the result as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-815",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the necessary rate of return is 4%, what is the intrinsic worth per share of a standing issue of 5% never-ending preferred stock with a face value of 100 and zero incorporated options?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100   # face value of the stock\n    dividend_rate = 0.05  # 5% annual dividend rate\n    required_return_rate = 0.04  # 4% required rate of return\n\n    # Do math calculation to get the answer\n    annual_dividend = face_value * dividend_rate\n    intrinsic_value_per_share = annual_dividend / required_return_rate\n\n    # return answer\n    return intrinsic_value_per_share\n```\n\nThis Python program calculates the intrinsic value per share of a 5% never-ending preferred stock with a face value of $100 and a required rate of return of 4%. The intrinsic value is determined by dividing the annual dividend by the required rate of return. The result is returned as the answer."
        ]
    },
    {
        "tables": [
            "| 10 | 20 | -8 | 2 | -9 | 5 | 0 | -8 | 3 | 21 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-816",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following set of 10 elements is chosen from a group. The variance of the group is unclear. What is the standard error of the average of the sample?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sample = [10, 20, -8, 2, -9, 5, 0, -8, 3, 21]\n\n    # Do math calculation to get the answer\n    import statistics\n    sample_mean = statistics.mean(sample)\n    sample_variance = statistics.variance(sample)\n    sample_size = len(sample)\n\n    standard_error = (sample_variance / sample_size)**0.5\n\n    # return answer\n    return standard_error\n```"
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period Price(E) | End of Period Price(E) | Total Dividends(E) |\n|----------|------------------------------|------------------------|---------------------|\n| Able     | 10.00                        | 12.00                  | 0.75                |\n| Baker    | 20.00                        | 19.00                  | 1.00                |\n| Charlie  | 30.00                        | 30.00                  | 2.00                |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-817",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the following data for an equal-weighted index made up of assets X, Y, and Z: What is the price return of the index?",
        "output": [
            " To calculate the price return of an equal-weighted index made up of assets Able, Baker, and Charlie, we need to consider the price changes of each security over the period and average them. The price return is calculated as the average of the individual price returns of the securities.\n\nHere's the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    beginning_price_able = 10.00\n    end_price_able = 12.00\n    beginning_price_baker = 20.00\n    end_price_baker = 19.00\n    beginning_price_charlie = 30.00\n    end_price_charlie = 30.00\n\n    # Calculate the price returns for each security\n    return_able = (end_price_able - beginning_price_able) / beginning_price_able\n    return_baker = (end_price_baker - beginning_price_baker) / beginning_price_baker\n    return_charlie = (end_price_charlie - beginning_price_charlie) / beginning_price_charlie\n\n    # Calculate the equal-weighted index price return\n    index_return = (return_able + return_baker + return_charlie) / 3\n\n    # return answer\n    return index_return\n```\n\nExplanation:\n1. We define the beginning and end prices for each security (Able, Baker, Charlie).\n2. We calculate the price return for each security using the formula: `(End Price - Beginning Price) / Beginning Price`.\n3. We then calculate the equal-weighted index price return by averaging the price returns of the three securities.\n4. Finally, we return the calculated index price return.\n\nRunning this code will provide the price return of the index."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-818",
        "python_solution": "",
        "ground_truth": null,
        "question": "John has determined that the DDM model is suitable to evaluate Corporation X. With the present dividend and the necessary rate of return of $0.5 per share and 10% respectively. He anticipates that the dividend will rise at 20% per annum for the first three years and then ascend at 5% annually into the unforeseeable future. What's the present value of Corporation X shares?",
        "output": [
            " To calculate the present value of Corporation X shares using the Dividend Discount Model (DDM), we need to follow these steps:\n\n1. Calculate the dividend for each of the first three years.\n2. Calculate the present value of these dividends.\n3. Calculate the terminal value of the dividends after the third year.\n4. Calculate the present value of the terminal value.\n5. Sum the present values to get the total present value of the shares.\n\nHere is the Python program to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    present_dividend = 0.5  # Present dividend per share\n    required_return = 0.10  # Required rate of return\n    growth_rate_3_years = 0.20  # Growth rate for the first 3 years\n    long_term_growth_rate = 0.05  # Long-term growth rate\n\n    # Calculate the dividend for the first three years\n    dividends = []\n    for i in range(3):\n        dividends.append(present_dividend * (1 + growth_rate_3_years) ** (i + 1))\n\n    # Calculate the present value of these dividends\n    present_value_dividends = sum([div / (1 + required_return) ** (i + 1) for i, div in enumerate(dividends)])\n\n    # Calculate the dividend in the fourth year\n    dividend_year_4 = dividends[-1] * (1 + long_term_growth_rate)\n\n    # Calculate the terminal value after the third year\n    terminal_value = dividend_year_4 / (required_return - long_term_growth_rate)\n\n    # Calculate the present value of the terminal value\n    present_value_terminal = terminal_value / (1 + required_return) ** 3\n\n    # Sum the present values to get the total present value of the shares\n    total_present_value = present_value_dividends + present_value_terminal\n\n    # Return answer\n    return total_present_value\n\n# Call the function to get the"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-819",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sam, a market analyst at an investment bank, is conducting research on companies operating in the housing market sector. The leading company in this sector, named LoveYourHome, has recently released its annual financial report, revealing a basic EPS of $56, and a diluted EPS of $52. After examining the footnotes in LoveYourHome's financial report, Sam identifies a nonrecurring profit of $2 per share and a one-time restructuring cost of $3 per share, stemming from an acquisition in the previous year. Utilising a top-down analysis approach, Sam projects that LoveYourHome's basic EPS will rise to 76 in the upcoming year. The company's current share price is $72. Sam is keen to assess the relative worth within the housing sector using the trailing P/E ratio. Given the information provided, what is LoveYourHome's trailing Price/Earnings (P/E) ratio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    basic_eps = 56\n    nonrecurring_profit = 2\n    restructuring_cost = 3\n    current_share_price = 72\n\n    # Adjust EPS to exclude nonrecurring items\n    adjusted_eps = basic_eps - nonrecurring_profit - restructuring_cost\n\n    # Calculate the trailing P/E ratio\n    trailing_pe_ratio = current_share_price / adjusted_eps\n\n    # return answer\n    return trailing_pe_ratio\n\n# Print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Component | Cost      | Useful Life |\n|-----------|-----------|-------------|\n| A         | $500,000  | 10 years    |\n| B         | $500,000  | 5 years     |"
        ],
        "topic": "Accounting",
        "question_id": "test-820",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business aiming to increase profits expended $1,000,000 on equipment with two crucial parts, as shown in the table. The equipment is projected to be functional for a total of 10 years, and the business applies the straight-line depreciation approach.",
        "output": [
            " Sure, let's calculate the annual depreciation for each component and then the total annual depreciation for the equipment. Given the straight-line depreciation method, the depreciation for each component is calculated by dividing the cost by its useful life.\n\nHere's the Python program to calculate and return the total annual depreciation of the equipment:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost_component_A = 500000   # Cost of Component A\n    useful_life_component_A = 10 # Useful life of Component A in years\n\n    cost_component_B = 500000   # Cost of Component B\n    useful_life_component_B = 5  # Useful life of Component B in years\n\n    # Calculate depreciation for each component\n    depreciation_component_A = cost_component_A / useful_life_component_A\n    depreciation_component_B = cost_component_B / useful_life_component_B\n\n    # Calculate total annual depreciation\n    total_annual_depreciation = depreciation_component_A + depreciation_component_B\n\n    # Return the total annual depreciation\n    return total_annual_depreciation\n```\n\nThe `solution` function will calculate and return the total annual depreciation for the equipment based on the straight-line depreciation method."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-821",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier bought an annuity quite some time ago and is projected to get $1,200 annually for the following 40 years from this annuity. If the anticipated interest rate is 7%, what is the current worth of the cashflows the financier is set to receive?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_cashflow = 1200\n    number_of_years = 40\n    interest_rate = 0.07\n\n    # Do math calculation to get the answer\n    present_value = annual_cashflow * (((1 - (1/(1 + interest_rate) ** number_of_years)) / interest_rate))\n\n    # return answer\n    return present_value\n\n# Call the solution function to get the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Revenue | $ 500,000 |\n|---|---|\n| Volume Discounts | $ 20,000 |\n| Cash Received | $ 450,000 |\n| Cost of Goods Sold | $ 300,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-822",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under the accrual basis of accounting, what is the net revenue equivalent to?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 500000\n    volume_discounts = 20000\n\n    # Do math calculation to get the answer\n    net_revenue = revenue - volume_discounts\n\n    # return answer\n    return net_revenue\n```"
        ]
    },
    {
        "tables": [
            "| Compensation of employees | 1,044,005 |\n|---------------------------|-----------|\n| Gross operating surplus | 518,979 |\n| Gross mixed income | 241,415 |\n| Net mixed income | 180,653 |\n| taxes less subsidies on production | 90,507 |\n| taxes less subsidies on products and imports | 139,443 |\n| Statistical discrepancy | 1,157 |\n| Net property income | 136,011 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-823",
        "python_solution": "",
        "ground_truth": null,
        "question": "Compute GDP using the income approach based on the information in the given table",
        "output": [
            " Sure, here's the Python program to compute GDP using the income approach based on the information in the given table:\n\n```python\ndef solution():\n    # Define variables name and value\n    compensation_of_employees = 1044005\n    gross_operating_surplus = 518979\n    gross_mixed_income = 241415\n    taxes_less_subsidies_on_production = 90507\n    taxes_less_subsidies_on_products_and_imports = 139443\n    statistical_discrepancy = 1157\n    net_property_income = 136011\n\n    # Do math calculation to get the answer\n    gdp_income_approach = (compensation_of_employees +\n                           gross_operating_surplus +\n                           gross_mixed_income +\n                           taxes_less_subsidies_on_production +\n                           taxes_less_subsidies_on_products_and_imports +\n                           statistical_discrepancy +\n                           net_property_income)\n\n    # return answer\n    return gdp_income_approach\n\n# To get the result\nprint(solution())\n```\n\nThis program calculates GDP by summing up all the provided components according to the income approach."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-824",
        "python_solution": "",
        "ground_truth": null,
        "question": "The fee structure of Cedar Ridge Associates, a fund of hedge funds, is as follows: 2/20 underlying fund fees with independently calculated incentive fees, Cedar Ridge's fees are calculated net of all underlying fund fees, a 1% management fee (based on year-end market value), a 10% incentive fee calculated net of the management fee, and there are no hurdle rate or high-water mark fee conditions for the fund and all underlying funds. In the most recent year, Cedar Ridge\u2019s fund value increased from $100 million to $133 million before any deductions for the fund's management and incentive fees or any underlying funds. Given this information, what is the cumulative fee earned by all the funds?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 100000000  # Initial fund value in dollars\n    final_value_before_fees = 133000000  # Fund value before fees in dollars\n    management_fee_rate = 0.01  # 1% management fee\n    incentive_fee_rate = 0.10  # 10% incentive fee\n\n    # Calculate the fund's performance before fees\n    fund_performance = final_value_before_fees - initial_value\n\n    # Calculate the management fee based on the year-end market value\n    management_fee = final_value_before_fees * management_fee_rate\n\n    # Calculate the incentive fee net of the management fee\n    net_final_value = final_value_before_fees - management_fee\n    incentive_fee = (net_final_value - initial_value) * incentive_fee_rate\n\n    # Calculate total fees earned by Cedar Ridge\n    total_fees = management_fee + incentive_fee\n\n    # Since underlying fund fees are calculated independently and Cedar Ridge's fees are net of those:\n    # Assuming no additional fees for underlying funds, based on the provided information\n\n    # Return the total fees earned by Cedar Ridge\n    return total_fees\n\n# Test the solution function\nprint(solution())\n```\n\nThis script calculates the fees earned by Cedar Ridge Associates based on the given information about the fund's initial and final value, and the fee structure."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-825",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the monthly mortgage payment for a level-payment, fixed-rate mortgage with these features: term is 30 years, mortgage rate is 9.0%, servicing fee is 0.5%, and the initial mortgage loan balance is $150,000?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and their values\n    term_in_years = 30\n    mortgage_rate = 0.09      # 9.0%\n    servicing_fee = 0.005     # 0.5%\n    loan_balance = 150000     # $150,000\n\n    # Calculate monthly interest rate\n    monthly_interest_rate = (mortgage_rate / 12) + servicing_fee\n\n    # Calculate the number of payments (months)\n    number_of_payments = term_in_years * 12\n\n    # Calculate monthly mortgage payment using the formula for level-payment, fixed-rate mortgage\n    monthly_payment = (loan_balance * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -number_of_payments)\n\n    # Return the answer\n    return monthly_payment\n```\n\nThis program calculates the monthly mortgage payment for a 30-year fixed-rate mortgage with the given properties. The formula used is a common financial formula for calculating the monthly payment on a level-payment, fixed-rate mortgage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-826",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond with a face value of $100 has a 15-year term, an annual payment rate of 10%, and a YTM of 12%, what is its cost?",
        "output": [
            " Certainly! To calculate the cost (or the present value) of a bond using given details, you need to compute the sum of the present values of the annual coupon payments and the present value of the face value received at maturity.\n\nThe formula for the present value of an annuity (PV of coupon payments) is:\n\\[ PV_{\\text{annuity}} = C \\cdot \\left( \\frac{1 - (1 + YTM)^{-n}}{YTM} \\right) \\]\n\nWhere:\n- \\( C \\) is the annual coupon payment (annual payment rate * face value)\n- \\( YTM \\) is the Yield to Maturity (as a decimal)\n- \\( n \\) is the number of periods (term of the bond)\n\nThe present value of the face value received at maturity is:\n\\[ PV_{\\text{face value}} = \\frac{\\text{face value}}{(1 + YTM)^n} \\]\n\nThe total present value (cost) of the bond is:\n\\[ \\text{Cost of the bond} = PV_{\\text{annuity}} + PV_{\\text{face value}} \\]\n\nHere is the Python program to compute the cost of the bond:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    term = 15\n    annual_payment_rate = 0.10\n    ytm = 0.12\n\n    # Calculate annual coupon payment\n    annual_payment = face_value * annual_payment_rate\n\n    # Calculate present value of annuity (coupon payments)\n    pv_annuity = annual_payment * ((1 - (1 + ytm) ** -term) / ytm)\n\n    # Calculate present value of face value received at maturity\n    pv_face_value = face_value / (1 + ytm) ** term\n\n    # Calculate total cost of the bond\n    cost = pv_annuity + pv_face_value\n\n    # return answer\n    return cost\n\n# Print the solution\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print the cost of the bond based on the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-827",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2017, the revenue for Fortune Enterprise was $5000, with a cost of goods sold standing at $900 and depreciation at $700. Given that the firm has an interest coverage ratio that's three times larger, what were its interest expenses in 2017?",
        "output": [
            " Certainly! Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 5000\n    cost_of_goods_sold = 900\n    depreciation = 700\n    interest_coverage_ratio = 3\n\n    # Calculate Earnings Before Interest and Taxes (EBIT)\n    operative_income = revenue - cost_of_goods_sold - depreciation\n\n    # Calculate the actual interest coverage ratio (EBIT / Interest Expense)\n    interest_expenses = operative_income / interest_coverage_ratio\n\n    # Return the answer\n    return interest_expenses\n\n# Example: Calling the function to get the result\nprint(solution())\n```\n\nThis program will calculate the interest expenses based on the given data and the interest coverage ratio."
        ]
    },
    {
        "tables": [
            "|                    | Income Statement |         | Balance Sheet Changes |      |\n|--------------------|-----------------:|---------|-----------------------|-----:|\n| Revenue            |         $ 56,800 | Decrease in accounts receivable | $1,324 |\n|                    |                  |         |                       |       |\n| Cost of goods sold |           27,264 | Decrease in inventory          |   501 |\n| Other operating expense           |   562 | Increase in prepaid expense   |     6 |\n| Depreciation expense          |  2,500 | Increase in accounts payable   | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "test-828",
        "python_solution": "",
        "ground_truth": null,
        "question": "The subsequent data is derived from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            " Certainly! To answer the question regarding the amount of cash Sugarfall Corp. paid to its suppliers, we need to use the indirect method of calculating cash paid to suppliers. This involves adjusting the cost of goods sold with changes in inventory, accounts payable, and other related accounts.\n\nHere's the appropriate Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n\n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory + increase_in_accounts_payable\n\n    # return answer\n    return cash_paid_to_suppliers\n\n# Call the function to get the answer\nprint(solution())\n```\n\nIn this script:\n- `cost_of_goods_sold` is the cost of goods sold as given in the income statement.\n- `decrease_in_inventory` is the decrease in inventory from the balance sheet changes.\n- `increase_in_accounts_payable` is the increase in accounts payable from the balance sheet changes.\n\nBy adjusting the cost of goods sold with these changes, we get the cash paid to suppliers."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-829",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume that the earnings from a merger arbitrage operation conducted by XYZ Corporation results in $5 million if it's successful, but \u2014$20 million if it isn't. If the likelihood of success is 83%, what would be the expected payoff on this operation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    success_payoff = 5e6\n    failure_payoff = -20e6\n    probability_of_success = 0.83\n\n    # Do math calculation to get the answer\n    expected_payoff = (success_payoff * probability_of_success) + (failure_payoff * (1 - probability_of_success))\n\n    # return answer\n    return expected_payoff\n```\n\nThis program calculates the expected payoff for the merger arbitrage operation by taking into account the given probabilities and payoffs for success and failure. The expected payoff is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-830",
        "python_solution": "",
        "ground_truth": null,
        "question": "As a portfolio manager, Martin is thinking about including a 2-year bond with a 7% coupon rate and a par value of 100 in his investment portfolio. The bond's interest is paid yearly. Given the current 1-year and 2-year spot rates of 4% and 5% respectively, what is the bond's value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.07\n    par_value = 100\n    one_year_spot_rate = 0.04\n    two_year_spot_rate = 0.05\n\n    # Calculate the cash flows\n    cash_flow_year_1 = par_value * coupon_rate\n    cash_flow_year_2 = par_value * coupon_rate + par_value\n\n    # Discount the cash flows\n    discounted_cash_flow_year_1 = cash_flow_year_1 / (1 + one_year_spot_rate)\n    discounted_cash_flow_year_2 = cash_flow_year_2 / (1 + two_year_spot_rate)**2\n\n    # Sum the present values to get the bond's value\n    bond_value = discounted_cash_flow_year_1 + discounted_cash_flow_year_2\n\n    # Return the bond's value\n    return bond_value\n\n# Example usage\nbond_value = solution()\nprint(f\"The bond's value is: {bond_value}\")\n```\n\nThis program defines a function `solution` that calculates the value of the bond given the provided parameters. It follows the specified format and performs the necessary calculations to discount the future cash flows to their present value, using the given spot rates for discounting."
        ]
    },
    {
        "tables": [
            "|                       | 40 | 35 | 30 | 25 | 20 |\n|-----------------------|----|----|----|----|----|\n| 3-month call option price | 0.56 | 1.45 | 4.05 | 10.30 | 12.42 |\n| 3-month put option price | 9.56 | 5.20 | 2.78 | 1.56 | 0.72 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-831",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the Exhibit 1 Option Contract Pricing Details, what is the break-even price for an at-the-money (ATM) protective put strategy for Dropqik Corporation, where Justine Fisher, a client of Erica Taylor, holds a significant position and which is currently trading at $30.50 per share?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_price = 30.50\n    call_option_price = 4.05   # 3-month call option price for a strike price close to $30.50\n    put_option_price = 2.78    # 3-month put option price for a strike price close to $30.50\n\n    # Do math calculation to get the answer\n    breakeven_price = current_price + put_option_price\n\n    # return answer\n    return breakeven_price\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nTo break it down:\n- The `current_price` is set to $30.50, which is the current stock price per share.\n- The `call_option_price` and `put_option_price` are set based on the prices closest to the current price from the provided table.\n- The break-even price for an ATM protective put strategy is calculated by adding the current price to the put option price.\n- The `breakeven_price` is then returned and printed."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-832",
        "python_solution": "",
        "ground_truth": null,
        "question": "In a living community, the landlords want to choose 3 out of 5 tenants to form a new landlords committee. How many possible scenarios can happen?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tenants = 5\n    committee_size = 3\n\n    # Do math calculation to get the answer\n    # using combinations formula (n! / (k! * (n-k)!))\n    from math import factorial\n\n    combinations = factorial(tenants) / (factorial(committee_size) * factorial(tenants - committee_size))\n\n    # return answer\n    return int(combinations)\n```\n\nThis program calculates the number of combinations of 5 tenants taken 3 at a time to form a new landlords committee."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-833",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond's current value is $101.45, and the director predicts an increase to $103.28 should interest rates drop 0.25%, or a decrease to $100.81 should interest rates rise 0.25%, what is the bond's effective duration?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_value = 101.45\n    increased_value = 103.28\n    decreased_value = 100.81\n    interest_rate_change = 0.25 / 100  # rate change in decimal form\n\n    # Do math calculation to get the answer\n    duration_up = ((current_value - decreased_value) / current_value) / interest_rate_change\n    duration_down = ((increased_value - current_value) / current_value) / interest_rate_change\n\n    effective_duration = (duration_up + duration_down) / 2\n\n    # return answer\n    return effective_duration\n```\n\nThis program calculates the effective duration of the bond given the provided changes in its value due to interest rate changes."
        ]
    },
    {
        "tables": [
            "| Quantity (unit) | Total Fixed Cost ($) | Total Variable Cost ($) |\n| --- | --- | --- |\n| 0 | 400 | 0 |\n| 1 | 400 | 100 |\n| 2 | 400 | 190 |\n| 3 | 400 | 275 |\n| 4 | 400 | 360 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-834",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a manufacturing company examines its cost structure, and the detailed data is provided in the accompanying table, what is the marginal cost if the production units are elevated from 3 to 4?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value from the table\n    total_variable_cost_3_units = 275\n    total_variable_cost_4_units = 360\n\n    # Do math calculation to get the answer for the marginal cost\n    marginal_cost = total_variable_cost_4_units - total_variable_cost_3_units\n\n    # Return answer\n    return marginal_cost\n```\n\nThis program calculates the marginal cost when the production units are elevated from 3 to 4 by taking the difference between the total variable costs at these two production levels."
        ]
    },
    {
        "tables": [
            "|   |   |\n|---|---|\n| FCFE0  | $10 million  |\n| Growth rate of FCFE  | 2%  |\n| Risk free rate | 2.5%  |\n| Equity Risk Premium  | 4%  |\n| Size Premium  | 1.5%  |\n| Market value of debt | $4 million |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-835",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the provided data, determine the equity value using the CCM.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    FCFE0 = 10_000_000  # $10 million in dollars\n    growth_rate_FCFE = 0.02  # Growth rate of FCFE (2%)\n    risk_free_rate = 0.025  # Risk-free rate (2.5%)\n    equity_risk_premium = 0.04  # Equity Risk Premium (4%)\n    size_premium = 0.015  # Size Premium (1.5%)\n    market_value_of_debt = 4_000_000  # $4 million in dollars\n\n    # Calculate the required return on equity (RRE) using CAPM with size premium\n    required_return_on_equity = risk_free_rate + equity_risk_premium + size_premium\n\n    # Calculate the terminal value of FCFE using the Gordon Growth Model\n    terminal_value_FCFE = FCFE0 * (1 + growth_rate_FCFE) / (required_return_on_equity - growth_rate_FCFE)\n\n    # Calculate the equity value using the current value of FCFE and terminal value\n    equity_value = terminal_value_FCFE + market_value_of_debt\n\n    # Return the answer\n    return equity_value\n\n# If you want to test the function, you can call it here\nprint(solution())  # Expected output should be the equity value based on the provided data\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-836",
        "python_solution": "",
        "ground_truth": null,
        "question": "A yearly coupon bond with a yield-to-maturity rate of 7% has a price tag of 94.75 per 100 of par value, with a coupon rate standing at 5%. There are 3 years left until it matures. What is the Macaulay duration of this bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yield_to_maturity = 0.07  # 7% yield-to-maturity rate\n    bond_price = 94.75  # price per 100 of par value\n    coupon_rate = 0.05  # 5% coupon rate\n    n = 3  # years left until maturity\n    par_value = 100  # par value of the bond\n\n    # Calculate cash flows\n    cash_flows = [(coupon_rate * par_value) for _ in range(n)]  # annual coupon payments\n    cash_flows.append(par_value + coupon_rate * par_value)  # final year payment includes the par value\n\n    # Calculate present values\n    pv_cash_flows = [cash_flows[t] / (1 + yield_to_maturity) ** (t + 1) for t in range(n + 1)]\n\n    # Calculate Macaulay duration\n    macaulay_duration = sum(t * pv_cash_flows[t] for t in range(n + 1)) / bond_price\n\n    # return answer\n    return macaulay_duration\n```\n\nThis program calculates the Macaulay duration of the bond based on the given yield-to-maturity rate, price, coupon rate, and time to maturity. The cash flows are calculated first, followed by their present values. Finally, the Macaulay duration formula is applied to calculate the duration."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-837",
        "python_solution": "",
        "ground_truth": null,
        "question": "What are the odds that the returns from a portfolio with an average return rate of 8% and a standard deviation of 14% will range from 8% to 11%?",
        "output": [
            " ```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    average_return = 0.08\n    std_deviation = 0.14\n    lower_bound = 0.08\n    upper_bound = 0.11\n\n    # Do math calculation to get the answer\n    z_lower = (lower_bound - average_return) / std_deviation\n    z_upper = (upper_bound - average_return) / std_deviation\n\n    prob_lower_to_upper = stats.norm.cdf(z_upper) - stats.norm.cdf(z_lower)\n    answer = prob_lower_to_upper * 100  # Convert to percentage\n\n    # return answer\n    return answer\n\n# Example of calling the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-838",
        "python_solution": "",
        "ground_truth": null,
        "question": "Let's say the present value (S0) of a stock that does not pay dividends is 100, and a put option for this stock has a strike price (X) of $95 with one year left until expiration. Now, a trader thinks that the share price will either rise by 10% or fall by 20%. Which of the subsequent computations of the worth of a put option is correct, presuming a 4% risk-free rate?",
        "output": [
            " Certainly! Let's define the necessary variables and perform the calculations based on the given scenario. We will use the binomial option pricing model to determine the value of the put option.\n\nHere is the Python program that computes the value of the put option:\n\n```python\ndef solution():\n    # Define variables name and value\n    S0 = 100         # Present value of the stock\n    X = 95           # Strike price of the put option\n    r = 0.04         # Risk-free rate\n    u = 1.10         # Up factor (increase by 10%)\n    d = 0.80         # Down factor (decrease by 20%)\n    T = 1            # Time to expiration in years\n\n    # Calculate the up and down values for the stock price\n    S_up = S0 * u\n    S_down = S0 * d\n\n    # Calculate the payoff of the put option under each scenario\n    payoff_up = max(X - S_up, 0)\n    payoff_down = max(X - S_down, 0)\n\n    # Calculate the probability of moving up or down\n    p = (1 + r - d) / (u - d)\n\n    # Calculate the expected payoff of the put option\n    expected_payoff = (p * payoff_up) + ((1 - p) * payoff_down)\n\n    # Discount the expected payoff to present value\n    put_value = expected_payoff / (1 + r)\n\n    # return answer\n    return put_value\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the value of the put option given the parameters specified in the question. The up factor `u` is set to 1.10 indicating a 10% increase, and the down factor `d` is set to 0.80 indicating a 20% decrease. The probabilities are calculated based on the risk-neutral valuation, and the expected payoff of the put option is discounted back to the present value using the risk-free rate.\n\nThis approach follows the binomial option pricing model, and the calculated"
        ]
    },
    {
        "tables": [
            "|     |     | Coefficient |    | Standard Error | t-Statistic |\n|-----|-----|-------------|----|----------------|-------------|\n|     | Intercept | 0.0092 |    | 0.0087 | 1.0582 |\n|     | In Salest-1-In Salest-2 | -0.1279 |    | 0.1137 | -1.1252 |\n|     | In Salest-4-In Salest-5 | 0.7239 |    | 0.1093 | 6.6209 |\n|     | Most Recent Quarterly Sales Data (in billions) |  |    |  |  |\n|     | Dec 2015 (Salest-1) | $3.868 |    |  |  |\n|     | Sept 2015 (Salest-2) | $3.780 |    |  |  |\n|     | June 2015 (Salest-3) | $3.692 |    |  |  |\n|     | Mar 2015 (Salest-4) | $3.836 |    |  |  |\n|     | Dec 2014 (Salest-5) | $3.418 |    |  |  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-839",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the regression output shown in the Exhibit, what is the predicted quarterly sales value for March 2016 if John is developing a model to predict future quarterly sales, and he starts by running this regression: ln Salest \u2013 ln Salest\u20131 = b0 + b1(ln Salest\u20131 \u2013 ln Salest\u20132) + b2(ln Salest\u20134 \u2013 ln Salest\u20135)+\u03b5t?",
        "output": [
            " Certainly! Let's break down the problem and implement the solution step-by-step. The task requires calculating the predicted quarterly sales value for March 2016 using the provided regression model.\n\nThe regression equation provided is:\n\n\\[ \\ln(\\text{Salest}) - \\ln(\\text{Salest-1}) = b_0 + b_1(\\ln(\\text{Salest-1}) - \\ln(\\text{Salest-2})) + b_2(\\ln(\\text{Salest-4}) - \\ln(\\text{Salest-5})) + \\epsilon_t \\]\n\nGiven the coefficients:\n- \\( b_0 = 0.0092 \\)\n- \\( b_1 = -0.1279 \\)\n- \\( b_2 = 0.7239 \\)\n\nAnd the sales data:\n- \\( \\text{Salest-1} = 3.868 \\) (Dec 2015)\n- \\( \\text{Salest-2} = 3.780 \\) (Sept 2015)\n- \\( \\text{Salest-4} = 3.836 \\) (Mar 2015)\n- \\( \\text{Salest-5} = 3.418 \\) (Dec 2014)\n\nFirst, we need to convert the sales values to their natural logarithms and apply the regression equation. Then, we'll rearrange the equation to solve for \\( \\ln(\\text{Salest}) \\) and convert back to the original scale to get the predicted sales value for March 2016.\n\nHere's the Python program to compute this:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    b0 = 0.0092\n    b1 = -0.1279\n    b2 = 0.7239\n\n    Salest_1 = 3.868\n    Salest_2 = 3.780\n    Salest_4 = 3.836\n    Salest_5 = 3.418\n\n    # Compute the log values\n"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-840",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Pinnacle Parcel sold items online on behalf of individuals under a consignment deal. Pinnacle would receive the goods from the owner, list them for online sale, and earn a 25 percent commission from any sold items. Pinnacle was responsible for collecting the full payment from the purchaser and would then pay the owner the remaining balance after deducting their commissions. If the items did not sell within 90 days, they would be returned to the owner. Throughout 2009, Pinnacle had the following records: The total sales price of items sold on consignment was \u20ac2,000,000. Pinnacle's commission on these items was \u20ac500,000 during 2009. What should Pinnacle declare as revenue in its 2009 income statement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_sales_price = 2000000\n    commission = 500000\n\n    # Do math calculation to get the answer\n    revenue = commission\n\n    # return answer\n    return revenue\n```\n\nIn this solution, we define the `total_sales_price` and `commission` variables. Since Pinnacle earns a 25% commission on the total sales, which is given as \u20ac500,000, this commission amount is what Pinnacle should declare as revenue in its 2009 income statement. Therefore, the revenue is directly the commission amount."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-841",
        "python_solution": "",
        "ground_truth": null,
        "question": "A valuer has been tasked with calculating the aggregated valuation discounts for a minor shareholding in a privately held firm. The valuer decided that a suitable control premium is 15 percent. A deduction due to the absence of marketability was approximated at 25 percent. In light of these parameters, what is the total discount?",
        "output": [
            " Sure! To calculate the total discount based on the control premium and the deduction due to the absence of marketability, you can follow these steps:\n\n1. Define the control premium.\n2. Define the deduction due to the absence of marketability.\n3. Calculate the combined effect of these two factors to get the total discount.\n\nHere's the complete Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    control_premium = 0.15\n    marketability_discount = 0.25\n\n    # Do math calculation to get the answer\n    # The total discount is calculated as the sum of the control premium and the marketability discount\n    total_discount = control_premium + marketability_discount\n\n    # return answer\n    return total_discount\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program defines the control premium and the marketability discount, calculates the total discount by summing these two values, and returns the result. The `print` statement at the end calls the `solution` function and prints the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-842",
        "python_solution": "",
        "ground_truth": null,
        "question": "From the given data, what will be the other comprehensive income considering, foreign currency conversion benefits amounting to 4, unrealized depreciation on available-for-sale securities sitting at 2, unrealized depreciation on securities held until their maturity estimating 1, and actuarial profits observing 2?",
        "output": [
            " Sure, here is the Python program to calculate the other comprehensive income based on the given data:\n\n```python\ndef solution():\n    # Define variables name and value\n    foreign_currency_benefits = 4\n    unrealized_depreciation_available_for_sale = 2\n    unrealized_depreciation_held_to_maturity = 1\n    actuarial_profits = 2\n\n    # Do math calculation to get the answer\n    other_comprehensive_income = (\n        foreign_currency_benefits -\n        unrealized_depreciation_available_for_sale -\n        unrealized_depreciation_held_to_maturity +\n        actuarial_profits\n    )\n\n    # return answer\n    return other_comprehensive_income\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the other comprehensive income by summing the contributions from foreign currency conversion benefits and actuarial profits, and subtracting the unrealized depreciation on both available-for-sale securities and securities held until their maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-843",
        "python_solution": "",
        "ground_truth": null,
        "question": "Utilizing the given data to compute the total return on an equity share: Buying price: $20 Selling price: $28 Dividend received during the holding period: $1",
        "output": [
            " ```python\ndef solution():\n    # Define variables and values\n    buying_price = 20\n    selling_price = 28\n    dividend_received = 1\n\n    # Do math calculation to get the answer\n    capital_gain = selling_price - buying_price\n    total_return = capital_gain + dividend_received\n    total_return_percentage = (total_return / buying_price) * 100\n\n    # Return answer as the total return percentage\n    return total_return_percentage\n```\n\nBy running the `solution` function, it will compute the total return on an equity share based on the provided data."
        ]
    },
    {
        "tables": [
            "|                                 |     |         |\n|---------------------------------|-----|---------|\n| Rate of return on 3-month Treasury bills  |     | 3.0%    |\n| Rate of return on 10-year Treasury bonds |     | 3.5%    |\n| Market risk premium                      |     | 6.0%    |\n| The company's equity beta               |     | 1.6     |\n| Dividend growth rate                    |     | 8.0%    |\n| Corporate tax rate                      |     | 35%     |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-844",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the percentage cost of equity for the organization using the CAPM approach and the collected data?",
        "output": [
            " Sure, let's create a Python program to calculate the percentage cost of equity using the Capital Asset Pricing Model (CAPM) approach with the given data.\n\nThe formula to calculate the cost of equity (CAPM) is:\n\\[ \\text{Cost of Equity} = R_f + \\beta \\times (R_m - R_f) \\]\nwhere:\n- \\( R_f \\) is the risk-free rate (rate of return on 10-year Treasury bonds).\n- \\( \\beta \\) is the company's equity beta.\n- \\( R_m \\) is the market risk premium plus the risk-free rate.\n\nGiven the data:\n- \\( R_f \\) = 3.5%\n- \\( \\beta \\) = 1.6\n- Market risk premium = 6.0%\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 3.5 / 100  # Convert percentage to decimal\n    equity_beta = 1.6\n    market_risk_premium = 6.0 / 100  # Convert percentage to decimal\n\n    # Do math calculation to get the answer\n    market_return = risk_free_rate + market_risk_premium\n    cost_of_equity = risk_free_rate + equity_beta * market_risk_premium\n\n    # Convert back to percentage\n    cost_of_equity_percentage = cost_of_equity * 100\n\n    # Return answer\n    return cost_of_equity_percentage\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the cost of equity based on the provided data using the CAPM formula and returns the result as a percentage. The `print(solution())` line at the end is just for demonstration purposes and can be removed when integrating this function into a larger codebase."
        ]
    },
    {
        "tables": [
            "| Year | The return of this fund(%) |\n| ---- |------------------------ |\n| 2015 | 4.5                    |\n| 2014 | 3                      |\n| 2013 | 16                     |\n| 2012 | 20.1                   |\n| 2011 | -1                     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-845",
        "python_solution": "",
        "ground_truth": null,
        "question": "The annual return for a fund purchased by John is illustrated below: What will be the geometric mean of the fund?",
        "output": [
            " Certainly! To calculate the geometric mean of the fund returns, you need to follow these steps:\n\n1. Convert the returns from percentages to decimal values (e.g., 4.5% to 0.045).\n2. Add 1 to each of these decimal values to handle the negative returns appropriately in the context of a geometric mean over time.\n3. Multiply these adjusted values together.\n4. Raise the product to the power of 1/n, where n is the number of years (5 in this case).\n5. Subtract 1 from the result to convert it back from a decimal growth rate and then multiply by 100 to get the percentage.\n\nHere is the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    returns = [4.5, 3, 16, 20.1, -1]\n\n    # Convert percentage returns to decimal\n    decimal_returns = [(r / 100 + 1) for r in returns]\n\n    # Calculate the product of the adjusted returns\n    product = 1\n    for ret in decimal_returns:\n        product *= ret\n\n    # Calculate the geometric mean\n    geometric_mean_decimal = product ** (1/len(returns))\n\n    # Convert back to percentage and return the result\n    geometric_mean_percentage = (geometric_mean_decimal - 1) * 100\n\n    return geometric_mean_percentage\n\n# Example execution\nprint(solution())\n```\n\nThis program should give you the geometric mean of the fund's annual returns."
        ]
    },
    {
        "tables": [
            "| Time | Value |\n| --- | --- |\n| Time=0 | SO=80 |\n| Time=1 | Su=88 |\n| Time=1 | Sd=72 |\n| Time=2 | Suu=96.80 |\n| Time=2 | Sud,du=79.20 |\n| Time=2 | Sdd=64.80 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-846",
        "python_solution": "",
        "ground_truth": null,
        "question": "Considering a security's anticipated price fluctuation for the next two durations as follows: The starting price of the security is $80. There's a 75% chance of a rise in any given duration and a 25% chance of a decline in any given duration. Employing the binomial model, what are the chances that the security's value will stand at $79.20 after two durations?",
        "output": [
            " Certainly! Below is the Python program to determine the chances that the security's value will stand at $79.20 after two durations using the binomial model.\n\n```python\ndef solution():\n    # Define variables name and value\n    start_price = 80\n    up_end_2 = 96.80\n    mid_2 = 79.20\n    down_end_2 = 64.80\n    up_probability = 0.75\n    down_probability = 0.25\n\n    # The security's value will stand at $79.20 after two durations if it goes up once and down once\n    # There are 2 possible paths: UD and DU\n\n    # Path 1: UD\n    # Path 2: DU\n    path1_prob = up_probability * down_probability\n    path2_prob = down_probability * up_probability\n\n    # Total probability of ending at $79.20\n    total_prob = path1_prob + path2_prob\n\n    # return answer\n    return total_prob\n\n# Output the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate and return the probability that the security's value will be $79.20 after two durations."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-847",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment firm possesses the subsequent fee structure: 2% Annual management fee dependent on year-end AUM, 20% Incentive fee, and a 4% Hurdle rate prior to starting incentive fee collection. The current high-water mark is at $610 million. The firm's value was $583.1 million at start of the year and reached $642 million before the fees deduction after a year. What would be the net return to an investor for this year?",
        "output": [
            " Here is the Python program to calculate the net return to an investor for the year based on the given investment firm's fee structure:\n\n```python\ndef solution():\n    # Define variables name and value\n    start_value = 583.1e6   # Starting value in millions of dollars\n    end_value = 642e6       # Ending value before fees in millions of dollars\n    hurdle_rate = 0.04\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    high_water_mark = 610e6  # High-water mark in millions of dollars\n\n    # Calculate the gross return\n    gross_return = end_value / start_value - 1\n\n    # Calculate the management fee\n    management_fee = end_value * management_fee_rate\n\n    # Calculate the adjusted end value after management fee\n    adjusted_end_value = end_value - management_fee\n\n    # Check if the adjusted end value exceeds the high-water mark\n    if adjusted_end_value <= high_water_mark:\n        incentive_fee = 0\n    else:\n        # Calculate the excess return over the hurdle rate\n        net_increment = adjusted_end_value - high_water_mark\n        excess_return = max(0, net_increment * max(0, gross_return - hurdle_rate))\n\n        # Calculate the incentive fee\n        incentive_fee = excess_return * incentive_fee_rate\n\n    # Calculate net end value after all fees\n    net_end_value = adjusted_end_value - incentive_fee\n\n    # Calculate the net return to the investor\n    net_return = net_end_value / start_value - 1\n\n    # Return the net return as a percentage\n    return net_return * 100\n\n# Print the solution\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the gross return, management fee, adjusted end value, incentive fee, and finally the net return to the investor. The final net return is returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-848",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is an entrepreneur who sells socks in the nearby marketplace. If he sells 100 pairs of socks, he generates an earning of $500. However, if he managed to sell 120 pairs, his overall income would be $590. What is the marginal revenue for socks if the market capacity is 120 pairs?",
        "output": [
            " Certainly! Here's the Python program to calculate the marginal revenue for socks if the market capacity is 120 pairs:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue_100_pairs = 500\n    revenue_120_pairs = 590\n\n    # Do math calculation to get the answer\n    marginal_revenue = revenue_120_pairs - revenue_100_pairs\n\n    # return answer\n    return marginal_revenue\n```\n\nThis program calculates the marginal revenue by subtracting the revenue from selling 100 pairs of socks from the revenue from selling 120 pairs of socks."
        ]
    },
    {
        "tables": [
            "| Year 1 | 15.25% | Year 6 | 30.79% |\n|--------|--------|--------|--------|\n| Year 2 | -10.02% | Year 7 | 12.34% |\n| Year 3 | 20.65% | Year 8 | -5.02% |\n| Year 4 | 9.57% | Year 9 | 16.54% |\n| Year 5 | -40.33% | Year 10 | 27.37% |"
        ],
        "topic": "Accounting",
        "question_id": "test-849",
        "python_solution": "",
        "ground_truth": null,
        "question": "What does the exhibit indicate as the return for the fourth quintile for the MSCI World Index over a span of 10 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yearly_returns = {\n        \"Year 1\": 15.25,\n        \"Year 2\": -10.02,\n        \"Year 3\": 20.65,\n        \"Year 4\": 9.57,\n        \"Year 5\": -40.33,\n        \"Year 6\": 30.79,\n        \"Year 7\": 12.34,\n        \"Year 8\": -5.02,\n        \"Year 9\": 16.54,\n        \"Year 10\": 27.37\n    }\n\n    # Calculate the average return for the fourth quintile\n    fourth_quintile_years = [7, 8]  # Years corresponding to the fourth quintile (Years 7 and 8)\n    fourth_quintile_returns = [yearly_returns[f\"Year {year}\"] for year in fourth_quintile_years]\n    average_return_fourth_quintile = sum(fourth_quintile_returns) / len(fourth_quintile_returns)\n\n    # return answer\n    return average_return_fourth_quintile\n\n# Calling the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program calculates the average return for the fourth quintile (Years 7 and 8) of the MSCI World Index over a span of 10 years by taking the mean of the returns for those years."
        ]
    },
    {
        "tables": [
            "| Transaction  Amount | (US$ millions) |\n|---------------------|----------------|\n| Bought raw material from Indonesia | 50.0 |\n| Sold food products to France | 65.0 |\n| Received royalty fees from its branch in the United Kingdom | 0.5 |\n| Donated to a charitable institution in Africa | 0.1 |\n| Borrowed from a bank in Singapore | 2.0 |\n| Paid legal fees to its German legal consultant company | 1.2 |\n| Received interest coupon from its investment in Eurobonds issued in Luxembourg | 0.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-850",
        "python_solution": "",
        "ground_truth": null,
        "question": "Over the past month, a food corporation based in the US had these transactions: How much is the US current account expected to increase by due to these transactions?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    bought_raw_material_Indonesia = -50.0\n    sold_food_products_France = 65.0\n    received_royalty_fees_UK = 0.5\n    donated_charity_Africa = -0.1\n    borrowed_bank_Singapore = 2.0         # This does not impact the current account\n    paid_legal_fees_Germany = -1.2\n    received_interest_Luxembourg = 0.8\n\n    # Do math calculation to get the answer\n    current_account_change = (\n        bought_raw_material_Indonesia +\n        sold_food_products_France +\n        received_royalty_fees_UK +\n        donated_charity_Africa +\n        # borrowed_bank_Singapore (not included as it's a financial account transaction)\n        paid_legal_fees_Germany +\n        received_interest_Luxembourg\n    )\n\n    # return answer\n    return current_account_change\n```\n\nThis Python program calculates the expected increase in the US current account due to the listed transactions. Transactions that do not affect the current account, such as borrowing from a bank, are excluded from the calculation. The expected increase in the US current account is returned as the final result."
        ]
    },
    {
        "tables": [
            "| Accounts payable | 3,800 |\n|------------------|-------|\n| Long-term debt | 5,590 |\n| Other long-term liabilities | 800 |\n| Common stock | 1,200 |\n| Retained earnings | 1,810 |"
        ],
        "topic": "Accounting",
        "question_id": "test-851",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the debt-to-capital ratio of the firm as per the latest balance sheet showcasing the following values (NZ$ thousands)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    accounts_payable = 3800\n    long_term_debt = 5590\n    other_long_term_liabilities = 800\n    common_stock = 1200\n    retained_earnings = 1810\n\n    # Calculate total debt\n    total_debt = accounts_payable + long_term_debt + other_long_term_liabilities\n\n    # Calculate total equity\n    total_equity = common_stock + retained_earnings\n\n    # Calculate total capital\n    total_capital = total_debt + total_equity\n\n    # Calculate debt-to-capital ratio\n    debt_to_capital_ratio = total_debt / total_capital\n\n    # return answer\n    return debt_to_capital_ratio\n```\n\nThis program calculates the debt-to-capital ratio by summing up the accounts payable, long-term debt, and other long-term liabilities to get the total debt. It then adds the common stock and retained earnings to calculate the total equity. The total capital is the sum of the total debt and total equity. Finally, it calculates the debt-to-capital ratio by dividing the total debt by the total capital and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-852",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume you simulate the price path of stock ZYX using a geometric Brownian motion model with drift \u03bc = 0, volatility \u03c3 = 0.14, and time step \u0394 = 0.01. Let StS_t St\u200b be the price of the stock at time t. If S0S_0S0\u200b = 100, and the first two simulated (randomly chosen) standard normal variables are \u03b51 \\varepsilon_1 \u03b51\u200b = 0.263 and \u03b52 \\varepsilon_2 \u03b52\u200b= -0.475, what is the simulated stock price after the second step?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    S0 = 100\n    mu = 0\n    sigma = 0.14\n    delta_t = 0.01\n    epsilon1 = 0.263\n    epsilon2 = -0.475\n\n    # Do math calculation to get the answer\n    S1 = S0 * math.exp((mu - 0.5 * sigma**2) * delta_t + sigma * math.sqrt(delta_t) * epsilon1)\n    S2 = S1 * math.exp((mu - 0.5 * sigma**2) * delta_t + sigma * math.sqrt(delta_t) * epsilon2)\n\n    # return answer\n    return S2\n```\n\nThis Python program calculates the simulated stock price after the second step using the given parameters and the two simulated standard normal variables. The geometric Brownian motion model is used to simulate the stock price path, with the formula for the stock price at each time step given by:\n\n\\[ S_{t+\\Delta t} = S_t \\exp\\left[\\left(\\mu - \\frac{\\sigma^2}{2}\\right) \\Delta t + \\sigma \\sqrt{\\Delta t} \\varepsilon\\right] \\]\n\nwhere \\( S_t \\) is the stock price at time \\( t \\), \\( \\mu \\) is the drift, \\( \\sigma \\) is the volatility, \\( \\Delta t \\) is the time step, and \\( \\varepsilon \\) is a standard normal variable."
        ]
    },
    {
        "tables": [
            "|                          |                       |\n|--------------------------|-----------------------|\n| Demand curve             | P = 150-5xQ           |\n| Total revenue curve      | TR =150xQ-5xQ2        |\n| Marginal revenue curve   | MR =150-10xQ          |\n| Total cost curve         | TC = Q^3-10xQ^2+73xQ+120 |\n| Average cost curve       | AC = Q-10xQ +73 +120/Q  |\n| Marginal cost curve      | MC=3xQ^2-20xQ+73      |\n|                          | P: price per unit Q: cost per unit    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-853",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the output, in units, that maximizes profit for this organization, based on the developed equations provided for the business?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    import sympy as sp\n\n    # Define the variables\n    Q = sp.symbols('Q')\n\n    # Define the Total Revenue (TR) and Total Cost (TC) functions\n    TR = 150 * Q - 5 * Q**2\n    TC = Q**3 - 10 * Q**2 + 73 * Q + 120\n\n    # Profit is TR - TC\n    profit = TR - TC\n\n    # To find the maximum profit, we take the derivative of the profit function\n    profit_derivative = sp.diff(profit, Q)\n\n    # Set the derivative to zero and solve for Q\n    critical_points = sp.solve(profit_derivative, Q)\n\n    # Filter out complex solutions (if any)\n    critical_points = [p for p in critical_points if p.is_real]\n\n    # Evaluate the profit at each critical point to find the maximum profit\n    max_profit = None\n    optimal_Q = None\n    for q in critical_points:\n        profit_at_q = profit.subs(Q, q)\n        if max_profit is None or profit_at_q > max_profit:\n            max_profit = profit_at_q\n            optimal_Q = q\n\n    # Do math calculation to get the answer\n    answer = optimal_Q\n\n    # return answer\n    return answer\n\n# Call the solution function and print the result\nprint(solution())\n```\n\nThis program uses the SymPy library to perform symbolic mathematics. It defines the total revenue (TR) and total cost (TC) functions, calculates the profit function (TR - TC), takes the derivative to find critical points, and evaluates the profit at each critical point to determine the output that maximizes profit."
        ]
    },
    {
        "tables": [
            "|  X  | Y=5 | Y=2 | Y=-3 |\n|-----|-----|-----|------|\n| -2  | 0.2 |  0  |   0   |\n|  1  |  0  | 0.6 |   0   |\n|  4  |  0  |  0  |  0.2  |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-854",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided chart, what is the variance of Y?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    y_values = [5, 2, -3]\n    probabilities = [0.2, 0.6, 0.2]\n\n    # Calculate expected value (mean) of Y\n    expected_value = sum(y * p for y, p in zip(y_values, probabilities))\n\n    # Calculate the variance of Y\n    variance = sum(p * (y - expected_value) ** 2 for y, p in zip(y_values, probabilities))\n\n    # return answer\n    return variance\n```\n\nThis Python program defines the `solution` function, calculates the expected value of \\( Y \\), and then uses that expected value to determine the variance of \\( Y \\). The variance is returned as the answer."
        ]
    },
    {
        "tables": [
            "| Par Value         | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n|-------------------|------------|--------|-------------------|--------------------|-----------|\n| $25million        | 105        | 8%     | 7.9               | 8                  | 122       |\n| $25million        | 100        | 7%     | 8.5               | 8.5                | 154       |\n| $20million        | 95         | 5%     | 6.3               | 2                  | 87        |\n| $30million        | 87         | 0%     | 10.2              | 10.2               | 32        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-855",
        "python_solution": "",
        "ground_truth": null,
        "question": "Referring to the table with pertinent data about four bonds in a portfolio, what is the price fluctuation for the bond with an 8% interest rate using effective duration, if its YTM drops by 10 basis points?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    effective_duration = 8                   # Effective duration for the bond with 8% interest rate\n    change_in_ytm = 0.001                    # 10 basis points drop in YTM (0.001 in decimal form)\n\n    # Do math calculation to get the answer\n    price_fluctuation = -effective_duration * change_in_ytm * 100\n\n    # Return answer\n    return price_fluctuation\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the price fluctuation for the bond with an 8% interest rate using the effective duration, given that the YTM drops by 10 basis points. The formula used is based on the bond price sensitivity to yield changes, which states that the price change is approximately equal to the negative of the effective duration times the change in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-856",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the 2017 annual report data from company B, what is the debt/capital ratio of company B? Given Depreciation and amortization: $265 million, Total assets: $11,324 million, Total debt: $1,756 million, and Shareholders' equity: $5,217 million.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    depreciation_and_amortization = 265  # in millions\n    total_assets = 11324  # in millions\n    total_debt = 1756  # in millions\n    shareholders_equity = 5217  # in millions\n\n    # Calculate total capital as the sum of total debt and shareholders' equity\n    total_capital = total_debt + shareholders_equity\n\n    # Calculate debt/capital ratio\n    debt_capital_ratio = total_debt / total_capital\n\n    # Return answer\n    return debt_capital_ratio\n```\n\nThis program defines the necessary variables, calculates the total capital, and then computes the debt/capital ratio for company B based on the given data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-857",
        "python_solution": "",
        "ground_truth": null,
        "question": "A futures contract for a stock index has two months left until it matures. The annual risk-free rate, when compounded continuously, is 0.25%, while the dividend yield on the stock index, also compounded continuously, is 0.8%. If the index is currently at 1,350, what would be the no-arbitrage futures price?",
        "output": [
            " Certainly! To calculate the no-arbitrage futures price, we will use the formula:\n\n\\[ F = S \\times e^{(r - q)t} \\]\n\nWhere:\n- \\( F \\) is the futures price,\n- \\( S \\) is the current stock index value,\n- \\( r \\) is the annual risk-free rate,\n- \\( q \\) is the dividend yield,\n- \\( t \\) is the time to maturity in years.\n\nGiven:\n- Current stock index (\\( S \\)) = 1,350\n- Annual risk-free rate (\\( r \\)) = 0.25% or 0.0025\n- Dividend yield (\\( q \\)) = 0.8% or 0.008\n- Time to maturity (\\( t \\)) = 2 months, which is \\(\\frac{2}{12}\\) years\n\nHere is the Python program to calculate the no-arbitrage futures price:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S = 1350  # Current stock index\n    r = 0.0025  # Annual risk-free rate\n    q = 0.008  # Dividend yield\n    t = 2 / 12  # Time to maturity in years\n\n    # Do math calculation to get the answer\n    F = S * math.exp((r - q) * t)\n\n    # return answer\n    return F\n\n# Run the function to get the answer\nprint(solution())\n```\n\nThis program will calculate and return the no-arbitrage futures price based on the given values."
        ]
    },
    {
        "tables": [
            "|            |                |\n|------------|----------------|\n| Table1: Forward Rates | |\n| Maturity   | Forward Points |\n| Three months | 5.3/6.1        |\n| Six months | 7.8/8.9        |\n| 90-Day Libor | |\n| Currency   | Annualized Rate|\n| GBP        | 0.60%          |\n| USD        | 0.45%          |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-858",
        "python_solution": "",
        "ground_truth": null,
        "question": "The American company named BBQ Company has exported steel to an English firm and is expected to receive payment of 3,600,000 GBP in six months, which the firm will then convert into dollars. To protect against currency risk, BBQ Company decided to enter into a 6 month forward contract to sell GBP at 1.5512USD/GBP. After three months have passed, now, the spot exchange market rate is 1.5500 USD/GBP for bid and 1.5505 for ask. Given the information on the spot exchange market rate, forward rates, and the 90-Day Libor, what is the mark-to-market value for BBQ Company's forward position?",
        "output": [
            " Sure! To calculate the mark-to-market value for BBQ Company's forward position, we'll need to determine the new forward rate for the remaining 3-month period and compare it to the original forward contract rate. Here is the Python program to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    forward_contract_rate = 1.5512  # Original 6-month forward contract rate in USD/GBP\n    spot_rate = 1.5500  # Current spot exchange rate after 3 months (bid price)\n    forward_points = 0.00053  # 3-month forward points (bid price)\n    gbp_amount = 3600000  # Amount in GBP\n    usd_90_day_libor = 0.0045  # 90-Day USD Libor rate\n\n    # Calculate the new forward rate for the remaining 3 months\n    new_forward_rate = spot_rate + forward_points\n\n    # Calculate the present value factor for 3 months using USD 90-Day Libor\n    days_in_quarter = 90\n    present_value_factor = 1 / (1 + (usd_90_day_libor * (days_in_quarter / 360)))\n\n    # Calculate the value of the forward contract\n    value_of_forward_contract = gbp_amount * (forward_contract_rate - new_forward_rate) * present_value_factor\n\n    # return answer\n    return value_of_forward_contract\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nThis program computes the mark-to-market value of the forward contract for BBQ Company by:\n1. Calculating the new forward rate after three months.\n2. Determining the present value factor using the USD 90-Day Libor rate.\n3. Calculating the mark-to-market value based on the difference between the original forward contract rate and the new forward rate."
        ]
    },
    {
        "tables": [
            "| Account Name                              | Amount ($ billions) |\n| ---------------------------------------- | ------------------- |\n| Personal income                          | 2,456               |\n| Personal disposable income               | 1,930               |\n| Government spending                      | 666                 |\n| Government fixed investment              | 118                 |\n| Business gross fixed investment          | 538                 |\n| Government transfer payments to consumers| 348                 |\n| Total domestic savings                   | 638                 |\n| Tax revenue other than from households   | 440                 |\n| Change in inventories                    | -16                 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-859",
        "python_solution": "",
        "ground_truth": null,
        "question": "Chosen data is extracted from the GDP statistics of a fictitious nation. What is the trade shortfall in $ trillions for this nation?",
        "output": [
            " To calculate the trade shortfall, we need to first calculate the aggregate demand and then subtract the domestic savings and change in inventories from it. The aggregate demand can be derived as the sum of personal consumption expenditure (which is personal disposable income), government spending, government fixed investment, and business gross fixed investment. From this total, we will subtract the total domestic savings and the change in inventories.\n\nHere is the Python program to calculate the trade shortfall:\n\n```python\ndef solution():\n    # Define variables name and value\n    personal_disposable_income = 1930\n    government_spending = 666\n    government_fixed_investment = 118\n    business_gross_fixed_investment = 538\n    total_domestic_savings = 638\n    change_in_inventories = -16\n\n    # Do math calculation to get the answer\n    aggregate_demand = (\n        personal_disposable_income +\n        government_spending +\n        government_fixed_investment +\n        business_gross_fixed_investment\n    )\n\n    trade_shortfall = aggregate_demand - total_domestic_savings - change_in_inventories\n\n    # convert result from billions to trillions\n    trade_shortfall_trillions = trade_shortfall / 1000\n\n    # return answer\n    return trade_shortfall_trillions\n\n# Print the solution\nprint(solution())\n```\n\nThis program will calculate the trade shortfall and return the result in $ trillions."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-860",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Chief Vice President of XY investment requests John to apply the market approach to assessment prioritizing the guideline transactions methodology. John states that the control premium paid for the most comparable guideline company used for the evaluation implies a lack of control discount of 15 percent. The discount for absence of marketability was assessed at 20 percent. What is the cumulative discount for both control and marketability?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    control_premium_discount = 0.15  # 15 percent\n    lack_of_marketability_discount = 0.20  # 20 percent\n\n    # Do math calculation to get the answer\n    cumulative_discount = control_premium_discount + lack_of_marketability_discount\n\n    # return answer\n    return cumulative_discount\n```\n\nThe above Python program defines a function `solution` that calculates the cumulative discount for both the control premium and the lack of marketability by adding the two discount percentages together. The result is then returned by the function."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-861",
        "python_solution": "",
        "ground_truth": null,
        "question": "In an economy, there exist two firms, Firm X and Firm Y. The default rate for Firm X stands at 10%, while for Firm Y, it is 20%. Presuming defaults for both firms happen independently, what is the likelihood that either Firm X or Firm Y defaults?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    default_rate_firm_x = 0.10\n    default_rate_firm_y = 0.20\n\n    # Do math calculation to get the answer\n    probability_neither_defaults = (1 - default_rate_firm_x) * (1 - default_rate_firm_y)\n    probability_either_defaults = 1 - probability_neither_defaults\n\n    # return answer\n    return probability_either_defaults\n```\n\nThis Python program calculates the probability that either Firm X or Firm Y defaults, assuming that the defaults happen independently. It first calculates the probability that neither firm defaults and then subtracts this from 1 to find the probability that at least one of the firms defaults."
        ]
    },
    {
        "tables": [
            "| Bond | Coupon Rate | Time-to-Maturity | Spot Rates |\n|------|-------------|------------------|------------|\n| X    | 8%          | 3 years          | 8%         |\n| Y    | 7%          | 3 years          | 9%         |\n| Z    | 6%          | 3 years          | 10%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-862",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the same sequence of spot rates, what is the cost of Bond X?",
        "output": [
            " To calculate the cost (or price) of Bond X with a given coupon rate, time-to-maturity, and spot rates, we need to discount the expected cash flows from the bond using the provided spot rates. The bond's price can be computed using the present value formula for each cash flow.\n\nHere is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08  # 8%\n    time_to_maturity = 3\n    face_value = 1000  # Assuming face value of the bond is $1000\n    spot_rate = 0.08  # 8%\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = coupon_rate * face_value\n\n    # Calculate the present value of the coupons\n    present_value_coupons = 0\n    for t in range(1, time_to_maturity + 1):\n        present_value_coupons += annual_coupon_payment / (1 + spot_rate) ** t\n\n    # Calculate the present value of the face value received at maturity\n    present_value_face_value = face_value / (1 + spot_rate) ** time_to_maturity\n\n    # Calculate the total present value (price) of the bond\n    bond_price = present_value_coupons + present_value_face_value\n\n    # Return the calculated bond price\n    return bond_price\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(\"Cost of Bond X:\", answer)\n```\n\nIn this program:\n- We define the coupon rate, time-to-maturity, face value, and spot rate for Bond X.\n- We calculate the annual coupon payment.\n- We sum the present values of the coupon payments and the final face value payment.\n- Finally, we return the total present value of the bond, which is the bond's price or cost."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-863",
        "python_solution": "",
        "ground_truth": null,
        "question": "The Greenleaf company employs an exponentially weighted moving average model (EWMA) to predict the daily volatility of a stock. With a decay factor of 0.85, the latest estimate for daily volatility sits at 2.5%. If the stock closed at $35 yesterday and stands at $33 today, assuming we use continuously compounded returns, what would be the revised estimate of volatility?",
        "output": [
            " Certainly! We need to implement the EWMA model to predict the volatility given the decay factor, the latest estimate for daily volatility, and the stock prices for the past two days. To calculate the continuously compounded return and update the volatility estimate, make sure to use the correct formula.\n\nHere's the Python program that does this:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    decay_factor = 0.85\n    latest_volatility = 2.5 / 100  # convert percentage to decimal\n    stock_price_yesterday = 35\n    stock_price_today = 33\n\n    # Calculate the continuously compounded return\n    log_return = math.log(stock_price_today / stock_price_yesterday)\n\n    # Update the volatility estimate using the EWMA model\n    new_volatility = math.sqrt(decay_factor * (latest_volatility ** 2) + (1 - decay_factor) * (log_return ** 2))\n\n    # Convert to percentage and round to 2 decimal places\n    new_volatility_percentage = round(new_volatility * 100, 2)\n\n    # return answer\n    return new_volatility_percentage\n```\n\nThis program first calculates the continuously compounded return using the logarithm of the ratio of today's price to yesterday's price. Then it updates the volatility estimate using the EWMA model formula. Finally, it converts the updated volatility back to a percentage and rounds it to two decimal places. The returned value is the new volatility estimate."
        ]
    },
    {
        "tables": [
            "\n|                | Coefficient | Standard Error |\n|----------------|-------------|----------------|\n| Intercept      | 0.2248      |                |\n| Sizei          | -0.012      |                |\n| D/Ei           | -0.0172     | 0.00986        |\n|                |             |                |\n| **ANOVA**      | **Degrees of freedom** | **Sum of squares** |\n| Regression     | 2           | 0.0960         |\n| Residual       | 69          | 0.5704         |\n\nNote: Sizei= In (market capitalization)\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-864",
        "python_solution": "",
        "ground_truth": null,
        "question": "An analyst with an investment management firm named James Collins is examining the consequences of leverage on yearly ROE in the company's Eurozone equities fund (\"the fund\"). He gathers data on the 72 stocks in the fund, taking company size as an independent variable. The results of estimating the model Ri = b0 + b1(Sizei) + b2(D/Ei) + \u03b5\u03b9 are shown in Exhibit 1. Collins compares the projections of his model to the actual ROE for two portfolio stocks, X and Y, both with identical debt ratios but with market capitalizations of EUR 100 million and 200 million respectively. According to Collins' regression analysis, how much higher is the ROE for company X than for company Y (in percentage points)?",
        "output": [
            " Sure, let's solve the problem step-by-step.\n\nFirst, we need to understand the formula given in the regression model:\n\\[ Ri = b0 + b1 \\cdot (Sizei) + b2 \\cdot (D/Ei) + \\epsilon \\]\n\nUsing the provided coefficients from the table:\n- \\( b0 = 0.2248 \\)\n- \\( b1 = -0.012 \\)\n- \\( b2 = -0.0172 \\)\n\nFor companies X and Y:\n- Both have the same \\( D/E \\) ratio, but different market capitalizations.\n\nFor company X:\n- \\( Size_X = ln(100 \\text{ million}) \\)\n\nFor company Y:\n- \\( Size_Y = ln(200 \\text{ million}) \\)\n\nWe need to calculate the ROE for both companies and then find the difference.\n\nLet's write the Python program to calculate this:\n\n```python\nimport math\n\ndef solution():\n    # Define coefficients from the regression model\n    b0 = 0.2248\n    b1 = -0.012\n    b2 = -0.0172\n\n    # Market capitalizations in million Euros\n    market_cap_X = 100  # in million Euros\n    market_cap_Y = 200  # in million Euros\n\n    # Calculate the natural logarithm of market capitalizations\n    size_X = math.log(market_cap_X)\n    size_Y = math.log(market_cap_Y)\n\n    # Since D/E ratio is the same, it cancels out in the difference\n    # Calculate ROE for both companies\n    ROE_X = b0 + b1 * size_X  # Ignoring D/Ei term as it's constant and doesn't affect difference\n    ROE_Y = b0 + b1 * size_Y  # Ignoring D/Ei term as it's constant and doesn't affect difference\n\n    # Calculate the difference in ROE\n    difference_ROE = ROE_X - ROE_Y\n\n   "
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-865",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming John Smith has short-sold 100 shares of Mega Marts at a rate of $42 for each share and concurrently placed a \"good-till-cancelled, stop 50, limit 55 buy\" order, which would be executed once the stipulated stop condition is met, what is the highest potential loss Smith may incur, ignoring transaction expenses?",
        "output": [
            " Sure, let's break down the problem to determine the highest potential loss in this short-selling scenario.\n\n1. John Smith has short-sold 100 shares of Mega Marts at $42 per share.\n2. The stop condition is $50 (the price at which the buy order will be considered for execution).\n3. The limit condition is $55 (the maximum price at which the shares will be bought back).\n\nTherefore, the highest potential loss can be calculated by determining what happens if the stock rises to $55 before being bought back.\n\nHere's the Python code to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_sold = 100\n    short_selling_price = 42\n    stop_price = 50  # Not needed for this calculation\n    limit_price = 55\n\n    # Calculate the loss per share and total loss\n    loss_per_share = limit_price - short_selling_price\n    total_loss = shares_sold * loss_per_share\n\n    # return answer\n    return total_loss\n\n# Run the solution to find the highest potential loss\nprint(solution())\n```\n\nThis program calculates the highest potential loss by multiplying the number of shares sold short by the difference between the limit price and the initial short-selling price."
        ]
    },
    {
        "tables": [
            "| Par value of preferred stock offered at a 6% dividend rate | 100  |\n|---------------------------------------------------|------|\n| Company's sustainable growth rate                 | 5%   |\n| Yield on comparable preferred stock issues        | 11.5%|\n| Investor's marginal tax rate                      | 30%  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-866",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the calculated worth of the preferred shares of the corporation, based on the data collected by a shareholder?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    dividend_rate = 0.06\n    sustainable_growth_rate = 0.05\n    yield_on_comparable_issues = 0.115\n    investor_tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    dividend_per_share = par_value * dividend_rate\n    after_tax_yield = yield_on_comparable_issues * (1 - investor_tax_rate)\n    share_worth = dividend_per_share / (after_tax_yield - sustainable_growth_rate)\n\n    # return answer\n    return share_worth\n```\n\nThis Python program calculates the worth of the corporation's preferred shares by taking into account the par value, dividend rate, sustainable growth rate, yield on comparable preferred stock issues, and the investor's marginal tax rate. The calculated worth is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-867",
        "python_solution": "",
        "ground_truth": null,
        "question": "The following is the demand function for smartphones: QDmobile=10,000-2Pmobile+0.05income+2Pfixed-linetelephone-5Pwireless. As of now, a smartphone is priced at 3,000 RMB, while a landline and wireless solutions are priced at 1500 RMB and 500 RMB, respectively. With an assumption that income is 10,000 RMB, what would be the respective income elasticity of demand for a smartphone?",
        "output": [
            " Certainly! To calculate the income elasticity of demand for a smartphone, we need to use the given demand function and specific variables.\n\nThe income elasticity of demand (\\(E_I\\)) is defined as the percentage change in quantity demanded \\(Q\\) divided by the percentage change in income (\\(I\\)):\n\n\\[ E_I = \\frac{\\partial Q}{\\partial I} \\cdot \\frac{I}{Q} \\]\n\nGiven the demand function:\n\\[ Q_{mobile} = 10,000 - 2P_{mobile} + 0.05 \\cdot \\text{income} + 2P_{fixed-line\\,telephone} - 5P_{wireless} \\]\n\nThe partial derivative of \\(Q_{mobile}\\) with respect to income (\\(\\frac{\\partial Q}{\\partial I}\\)) is 0.05.\n\nNow, we can calculate the income elasticity using the provided values:\n\n1. Price of smartphone (\\(P_{mobile}\\)) = 3000 RMB\n2. Price of landline (\\(P_{fixed-line\\,telephone}\\)) = 1500 RMB\n3. Price of wireless solution (\\(P_{wireless}\\)) = 500 RMB\n4. Income (\\(\\text{income}\\)) = 10000 RMB\n\nFirst, we will compute \\(Q_{mobile}\\) using the given demand function, and then use it to calculate \\(E_I\\).\n\nLet's write the Python program for this:\n\n```python\ndef solution():\n    # Define variables name and value\n    Pmobile = 3000\n    Pfixed_line_telephone = 1500\n    Pwireless = 500\n    income = 10000\n\n    # Calculate the quantity of smartphones based on the demand function\n    Qmobile = 10000 - 2*Pmobile + 0.05*income + 2*Pfixed_line_telephone - 5*Pwireless\n\n    # Partial derivative of Q with respect to income\n    dQdI = 0.05\n\n    # Calculate income elasticity of demand\n    income_elastic"
        ]
    },
    {
        "tables": [
            "| Magnitude of the Parallel Shift in the Benchmark Yield Curve | +20bps | -20bps |\n|-------------------------------------------------------------|--------|--------|\n| Full Price of the Bond (% of par)                           | 100.478| 101.238|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-868",
        "python_solution": "",
        "ground_truth": null,
        "question": "The SW bond offers a 4% annual coupon and matures in three years. It's a callable bond that could be exercised at par at the conclusion of years 1 and 2. In calculating and assessing SW's bonds, Huang employs a projected interest rate volatility of 15% and develops the binomial interest rate tree as outlined in the Exhibit below. Green, a lead analyst, instructs Huang to determine the impact of a 20 bps parallel shift of the benchmark yield curve on the price of this callable bond. What does Huang's computations reveal in the table below about the effective duration of SW's callable bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shift_up_price = 100.478\n    shift_down_price = 101.238\n    delta_yield = 0.002  # 20 basis points\n\n    # Do math calculation to get the answer\n    price_change_for_20_bps = (shift_down_price - shift_up_price) / (2 * 100)  # Converting to decimal form\n    effective_duration = price_change_for_20_bps / delta_yield\n\n    # return answer\n    return effective_duration\n\n# Run the solution function to get the answer\nanswer = solution()\nanswer\n```\n\nThis Python program calculates the effective duration of SW's callable bond by using the given table values for the bond prices when the yield curve shifts by +20 bps and -20 bps. The effective duration is derived from the formula for duration which is based on the percentage change in the bond price divided by the change in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-869",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a PE fund has a total committed capital of $100 million, and the cumulative paid-in capital by the end of the most recent year was $90 million, with cumulative distributions tallying up to $30 million. Additionally, the end-of-year NAV, taking into consideration the balance before and after distributions, stood at $160 million and $130 million respectively. Moreover, the estimated NAV prior to distributions for the ensuing year is projected to be $250 million and the carried interest rate stands at 20%. Based on these financial figures of the PE fund, what was the TVPI (Total Value to Paid-In Capital) ratio at the close of the most recent year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_committed_capital = 100_000_000\n    cumulative_paid_in_capital = 90_000_000\n    cumulative_distributions = 30_000_000\n    end_of_year_NAV_before_distributions = 160_000_000\n    end_of_year_NAV_after_distributions = 130_000_000\n    estimated_NAV_next_year_before_distributions = 250_000_000\n    carried_interest_rate = 0.20\n\n    # Calculate the total value after the cumulative distributions and end-of-year NAV after distributions\n    total_value = cumulative_distributions + end_of_year_NAV_after_distributions\n\n    # Compute the TVPI (Total Value to Paid-In Capital) ratio\n    TVPI = total_value / cumulative_paid_in_capital\n\n    # return answer\n    return TVPI\n```\n\nThe `solution()` function above performs the required calculations to determine the TVPI (Total Value to Paid-In Capital) ratio at the close of the most recent year, using the provided financial figures."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-870",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond provides a yearly coupon rate of 5%, paying interest every six months, and it matures in seven years, what would be the bond's price per 100 of par value, given the market discount rate of 3%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05\n    par_value = 100\n    market_discount_rate = 0.03\n    years_to_maturity = 7\n    coupon_payments_per_year = 2\n\n    # Calculate the coupon payment per period\n    coupon_payment = (coupon_rate / coupon_payments_per_year) * par_value\n\n    # Initialize the bond price\n    bond_price = 0\n\n    # Calculate the present value of each coupon payment\n    for t in range(1, years_to_maturity * coupon_payments_per_year + 1):\n        bond_price += coupon_payment / (1 + market_discount_rate/coupon_payments_per_year) ** t\n\n    # Add the present value of the par value\n    bond_price += par_value / (1 + market_discount_rate/coupon_payments_per_year) ** (years_to_maturity * coupon_payments_per_year)\n\n    # Return bond price per 100 of par value\n    return bond_price\n\n# Sample call to the solution function\nprint(solution())\n```\n\nThis program first defines the necessary variables such as the coupon rate, par value, market discount rate, and the number of years to maturity. It then calculates the present value of each coupon payment and the present value of the par value, summing these to find the bond price per 100 of par value. Finally, it returns the bond price as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-871",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jane Doe possesses a spreadsheet comprised of 108 monthly returns for shares in the ABC Company. She constructs a software program that employs bootstrap resampling to generate 200 resamples of the ABC data by sampling with replacement. Each resample similarly contains 108 data points. Doe's software measures the average of all 200 resamples and determines that the mean of these 200 resample averages is 0.0261. The software then subtracts 0.0261 from all 200 resample averages, squares each of these 200 differences, and sums up the squared differences. The outcome is 0.835. Subsequently, the software calculates an estimation of the standard error of the sample average. What is the estimated standard error of the sample average?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_difference_squared_total = 0.835\n    number_of_resamples = 200\n\n    # Do math calculation to get the answer\n    estimated_standard_error = (mean_difference_squared_total / number_of_resamples) ** 0.5\n\n    # Return answer\n    return estimated_standard_error\n```\n\nThis Python program defines a function `solution()` that calculates the estimated standard error of the sample average based on the given values. The `mean_difference_squared_total` variable is set to 0.835 and `number_of_resamples` is set to 200. The calculation involves dividing the total of squared differences by the number of resamples and then taking the square root to find the standard error. The function then returns this estimated standard error."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-872",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given a discrete uniform distribution, the possible outcome contains 25 integers from 1 to 25, what is the accurate value of P( 5 \u2264 X < 10 )?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_integers = 25\n    favorable_outcomes = 5  # 5, 6, 7, 8, 9\n\n    # Do math calculation to get the answer\n    probability = favorable_outcomes / total_integers\n\n    # return answer\n    return probability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-873",
        "python_solution": "",
        "ground_truth": null,
        "question": "Travelpro has just distributed a dividend of 500 per share. The annual dividend will increase by 5% per annum over the coming four years. The corporation's shares are projected to be sold for $10,000 at the conclusion of the fourth year. If the necessary return rate is 15%, what is the inherent value of Travelpro's shares?",
        "output": [
            " Certainly! To calculate the inherent value of Travelpro's shares, we will determine the present value of the expected future cash flows (dividends and terminal value) and discount them back using the required rate of return.\n\nHere is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables and their values\n    dividend_per_share = 500  # Initial dividend per share\n    growth_rate = 0.05  # Annual dividend growth rate\n    required_return = 0.15  # Required rate of return\n    terminal_value = 10000  # Expected sale price at the end of the fourth year\n    years = 4  # Number of years\n\n    # Calculate the dividends for each year\n    dividends = []\n    for year in range(years):\n        dividends.append(dividend_per_share * (1 + growth_rate)**year)\n\n    # Calculate the present value of the dividends\n    present_value_dividends = sum(dividend / (1 + required_return)**(year + 1) for year, dividend in enumerate(dividends))\n\n    # Calculate the present value of the terminal value\n    present_value_terminal_value = terminal_value / (1 + required_return)**years\n\n    # Calculate the inherent value of the shares\n    inherent_value = present_value_dividends + present_value_terminal_value\n\n    # Return the answer\n    return inherent_value\n\n# The solution function returns the inherent value of Travelpro's shares\nprint(solution())\n```\n\nThis program calculates the present value of the dividends for each of the four years and the present value of the terminal sale price, then adds these to find the inherent value of the shares. The discounted sum of these values gives the inherent value."
        ]
    },
    {
        "tables": [
            "| Probability Matrix |         |         |         |\n|--------------------|---------|---------|---------|\n| Returns            | RB=70%  | RB=30%  | RB=-20% |\n| RA=-20%, 30%       |         | 0%      | 0%      |\n| RA=20%, 0%         |         | 40%     | 0%      |\n| RA=30%, 0%         |         | 0%      | 30%     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-874",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided probability matrix, what is the covariance of stock X and stock Y?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    probs = {\n        (\"RB=70%\", \"RA=-20%\", 30): 0,\n        (\"RB=70%\", \"RA=20%\", 0): 0,\n        (\"RB=70%\", \"RA=30%\", 0): 0,\n\n        (\"RB=30%\", \"RA=-20%\", 30): 0,\n        (\"RB=30%\", \"RA=20%\", 0): 0.40,\n        (\"RB=30%\", \"RA=30%\", 0): 0,\n\n        (\"RB=-20%\", \"RA=-20%\", 30): 0,\n        (\"RB=-20%\", \"RA=20%\", 0): 0,\n        (\"RB=-20%\", \"RA=30%\", 0): 0.30,\n    }\n\n    returnsB = {\n        \"RB=70%\": 0.70,\n        \"RB=30%\": 0.30,\n        \"RB=-20%\": -0.20,\n    }\n\n    returnsA = {\n        \"RA=-20%\": -0.20,\n        \"RA=20%\": 0.20,\n        \"RA=30%\": 0.30\n    }\n\n    E_RB = sum(prob * ret for (retB, retA, prob), prob in probs.items())\n    E_RA = sum(prob * ret for (retB, retA, prob), prob in probs.items())\n\n    covariance = 0\n    for (retB, retA, prob), prob_value in probs.items():\n        covariance += prob_value * (returnsB[retB] - E_RB) * (returnsA[retA] - E_RA)\n\n    # return answer\n    return covariance\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis Python program calculates the covariance of stock X (RB)"
        ]
    },
    {
        "tables": [
            "| Variable | Coefficient | t-statistic | p-value |\n| -------- | ----------- | ----------- | ------- |\n| Constant | -0.0069     | -0.013      | 0.99    |\n| S&P 500  | 0.3625      | 6.190       | <0.01   |\n| SPREAD   | 1.0264      | 4.280       | <0.01   |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-875",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the data provided in Exhibit 1, which consists of the results of a regression of the monthly returns for an index related to a power company's equity over the past 203 months (the dependent variable), against the monthly returns for the S&P 500 Index and the difference between the monthly returns on long-term U.S. government bonds and one-month U.S. Treasury bills (SPREAD) (the two independent variables), what is the test statistic value related to Peterson's null hypothesis on the coefficient value of SPREAD? Peterson's null hypothesis is that this coefficient equals 1, while his alternative hypothesis claims it does not equal to 1.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coefficient_SPREAD = 1.0264  # Coefficient of SPREAD\n    null_hypothesis_value = 1.0  # Null hypothesis value for SPREAD coefficient\n    std_err_SPREAD = 0.3625   # Standard error for the SPREAD coefficient, derived from the Coefficient of S&P 500\n\n    # Do math calculation to get the answer\n    test_statistic = (coefficient_SPREAD - null_hypothesis_value) / std_err_SPREAD\n\n    # return answer\n    return test_statistic\n```\n\n### Explanation\n- The coefficient of SPREAD is given as 1.0264.\n- The null hypothesis value is 1.0.\n- The standard error is derived from the regression results. Since the actual standard error for SPREAD isn't provided, I used the coefficient of S&P 500 as a proxy for this example (normally, you would require the standard error, not the coefficient). In practice, you should use the correct standard error for SPREAD, which can be determined from the regression output.\n\nTo obtain the correct standard errors, you need the actual output of the original regression, which typically includes the standard error of the regression coefficients. If that information is available, use it to compute the t-statistic correctly. If it's not available, the above serves as a template on how to proceed once you have the necessary data."
        ]
    },
    {
        "tables": [
            "|     | Bid     |       |     | Ask     |       |     |     |\n|-----|---------|-------|-----|---------|-------|-----|-----|\n| Dealer | Time Entered | Price | Size | Dealer | Time Entered | Price | Size |\n| B |   10.10 a.m. | $17.15 | 900 | C | 10.11 a.m. | $17.19 | 1,200 |\n| C |   10.11 a.m. | $17.14 | 1,500 | B | 10.10 a.m. | $17.20 | 800 |\n| A |   10.11 a.m. | $17.12 | 1,100 | A | 10.12 a.m. | $17.22 | 1,100 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-876",
        "python_solution": "",
        "ground_truth": null,
        "question": "Three merchants are creating a market for Light Systems shares. From these prices, Wilson's trading desk carries out a market sell order for 1,100 shares of Light Systems. Based on the information in Exhibit 1, what is the cumulative amount that Wilson will receive, per share, for making the market sell order?",
        "output": [
            " To solve the problem, we need to determine the cumulative amount that Wilson will receive per share for making the market sell order. This involves aggregating the prices of the highest-priced bids until the required number of shares (1,100) is met.\n\nThe bids in the order they'll be executed are:\n1. Bid from Dealer B: 10.10 a.m., $17.15, 900 shares\n2. Bid from Dealer C: 10.11 a.m., $17.14, 1,500 shares\n3. Bid from Dealer A: 10.11 a.m., $17.12, 1,100 shares\n\nThe total amount received will be based on the shares sold at each price level until 1,100 shares are sold.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_to_sell = 1100\n    bids = [\n        {\"dealer\": \"B\", \"price\": 17.15, \"size\": 900},\n        {\"dealer\": \"C\", \"price\": 17.14, \"size\": 1500},\n        {\"dealer\": \"A\", \"price\": 17.12, \"size\": 1100}\n    ]\n\n    # Initialize total amount and shares sold\n    total_amount = 0\n    shares_sold = 0\n\n    # Iterate over bids and calculate the total amount received\n    for bid in bids:\n        if shares_sold < shares_to_sell:\n            if shares_to_sell - shares_sold >= bid[\"size\"]:\n                total_amount += bid[\"size\"] * bid[\"price\"]\n                shares_sold += bid[\"size\"]\n            else:\n                shares_needed = shares_to_sell - shares_sold\n                total_amount += shares_needed * bid[\"price\"]\n                shares_sold += shares_needed\n\n    # Calculate cumulative amount per share\n    cumulative_amount"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-877",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is tasked with approximating the equity value of Company X using the Merton approach. 1)The value of Company X's assets stand at 180. 2)There's a risk-free rate of 5%.3)The company puts forth one-year zero interest bonds with a face value of 100. 4)The worth of a European put option on the company's asset is 3.50 and the strike price is set at 100.",
        "output": [
            " To determine the equity value of Company X using the Merton approach, you need to use the following steps:\n\n1. Determine the value of the company's assets.\n2. Subtract the value of a European put option on the company's assets from the value of the assets.\n3. Add the present value of the debt discounted at the risk-free rate.\n\nGiven the values from the problem:\n- Value of assets \\( V_A = 180 \\)\n- Risk-free rate \\( r = 5\\% \\)\n- Face value of debt \\( F = 100 \\)\n- Value of the European put option \\( P = 3.50 \\)\n- Strike price of the put option \\( K = 100 \\)\n\nThe formula for the equity value \\( E \\) is given as:\n\\[ E = V_A - P + \\frac{F}{(1 + r)} \\]\n\nHere's the Python program to calculate the equity value:\n\n```python\ndef solution():\n    # Define variables name and value\n    value_of_assets = 180\n    risk_free_rate = 0.05\n    face_value_of_debt = 100\n    value_of_european_put_option = 3.50\n\n    # Do math calculation to get the answer\n    equity_value = value_of_assets - value_of_european_put_option + (face_value_of_debt / (1 + risk_free_rate))\n\n    # return answer\n    return equity_value\n\n# To get the result\nprint(solution())\n```\n\nThis program calculates the equity value based on the given parameters and prints the result."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-878",
        "python_solution": "",
        "ground_truth": null,
        "question": "A corporate bond with a 5-year timeline and a 5% semiannual coupon payment is valued at 104.967 for every 100 of face value. It has a yield-to-maturity of 3.897%, as quoted on a semiannual bond basis. If an economist is instructed to convert this to a monthly rate, what would be the yield-to-maturity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    semiannual_rate = 0.03897  # Yield-to-Maturity as a semiannual rate\n\n    # Do math calculation to get the answer\n    # The semiannual rate refers to the compounded rate over a 6-month period\n    # To convert it to a monthly rate, we use the formula for Equivalent Monthly Rate in compounding:\n    # EMR = (1 + semiannual_rate)^(1/6) - 1\n    monthly_rate = (1 + semiannual_rate)**(1/6) - 1\n\n    # return answer converted to percentage and rounded to 5 decimal places\n    return round(monthly_rate * 100, 5)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-879",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the provided information that the available stable funding for Bank X is $180 million, their high-quality liquid assets are $200 million, their required stable funding amounts to $330 million, and they have Net cash outflows of $120 million expected over the next 30 days, what is the liquidity coverage ratio of Bank X?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    available_stable_funding = 180000000\n    high_quality_liquid_assets = 200000000\n    required_stable_funding = 330000000\n    net_cash_outflows = 120000000\n\n    # Do math calculation to get the answer\n    liquidity_coverage_ratio = (available_stable_funding + high_quality_liquid_assets) / (required_stable_funding + net_cash_outflows)\n\n    # return answer\n    return liquidity_coverage_ratio\n```"
        ]
    },
    {
        "tables": [
            "|                             | 2015 | 2016 |\n|-----------------------------|------|------|\n| Cash                        | 210  | 310  |\n| Accounts receivable         |      | 31   |\n| Inventory                   | 60   | 80   |\n| Fixed assets                | 200  | 200  |\n| Accumulated depreciation    | -    | (35) |\n| Total assets                | 470  | 586  |\n| Accounts payable            | 105  | 162  |\n| Long-term debt              | 235  | 273  |\n| Common stock                | 130  | 130  |\n| Retained earnings           | -    | 21   |\n| Total liabilities and shareholders' equity | 470  | 586  |",
            "|                          |                    |    US $/C$    |\n|--------------------------|--------------------|--------------|\n| Rate on                  | 31 December 2015   |    0.89      |\n| Average  rate in 2016    |                    |    0.96      |\n| Weighted-average rate for inventory purchases | |    0.94      |\n| Rate  on  31 December 2016 |                  |    0.94      |"
        ],
        "topic": "Accounting",
        "question_id": "test-880",
        "python_solution": "",
        "ground_truth": null,
        "question": "Sephora is a corporation from the United States that deals with cosmetics. Its Canadian branch, Beauty company, operates exclusively in Canada. It was established on 31st December 2015, and Beauty company uses the US dollar as its working currency. Fixed assets were acquired when the company was instituted. The table provides financial statement data for the years finalised in 2015 and 2016. Could you compute the balance sheet exposure if the working currency were modified?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    assets_2015_usd = 470\n    assets_2016_usd = 586\n    liabilities_2015_usd = 105 + 235\n    liabilities_2016_usd = 162 + 273\n    equity_2015_usd = 130\n    equity_2016_usd = 130 + 21\n    exchange_rate_2015 = 0.89\n    exchange_rate_2016 = 0.94\n\n    # Calculate total liabilities and equity in USD\n    total_liabilities_equity_2015_usd = liabilities_2015_usd + equity_2015_usd\n    total_liabilities_equity_2016_usd = liabilities_2016_usd + equity_2016_usd\n\n    # Convert total liabilities and equity to CAD using the exchange rates\n    total_liabilities_equity_2015_cad = total_liabilities_equity_2015_usd / exchange_rate_2015\n    total_liabilities_equity_2016_cad = total_liabilities_equity_2016_usd / exchange_rate_2016\n\n    # Calculate assets in CAD using the same approach\n    assets_2015_cad = assets_2015_usd / exchange_rate_2015\n    assets_2016_cad = assets_2016_usd / exchange_rate_2016\n\n    # Calculate the foreign currency exposure by comparing the change in assets and liabilities in CAD\n    exposure_2015 = assets_2015_cad - total_liabilities_equity_2015_cad\n    exposure_2016 = assets_2016_cad - total_liabilities_equity_2016_cad"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-881",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business acquired machinery for $50,000 on the 1st of January 2009. The company is implementing straight-line depreciation for accounting reasons over a decade, but applying a declining balance method at a rate of 20% for taxation. Given a 30% tax rate, what is the deferred tax obligation by the end of 2011?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_machinery = 50000\n    years = 10\n    depreciation_rate_tax = 0.20\n    tax_rate = 0.30\n\n    # Calculate straight-line depreciation for accounting\n    annual_straight_line_depreciation = cost_of_machinery / years\n\n    # Calculate cumulative depreciation for straight-line method by the end of 2011 (3 years)\n    straight_line_depreciation_2011 = annual_straight_line_depreciation * 3\n\n    # Calculate annual declining balance depreciation\n    declining_balance_depreciation_2009 = cost_of_machinery * depreciation_rate_tax\n    remaining_value_2009 = cost_of_machinery - declining_balance_depreciation_2009\n    declining_balance_depreciation_2010 = remaining_value_2009 * depreciation_rate_tax\n    remaining_value_2010 = remaining_value_2009 - declining_balance_depreciation_2010\n    declining_balance_depreciation_2011 = remaining_value_2010 * depreciation_rate_tax\n\n    # Calculate cumulative depreciation for declining balance method by the end of 2011\n    cumulative_declining_balance_2011 = (declining_balance_depreciation_2009 +\n                                         declining_balance_depreciation_2010 +\n                                         declining_balance_depreciation_2011)\n\n    # Calculate the difference in accumulated depreciation\n    difference_in_depreciation_2011 = cumulative_declining_balance_2011 - straight_line_depreciation_2011\n\n    # Calculate the deferred tax obligation by the end of "
        ]
    },
    {
        "tables": [
            "| Year | Hazard Rate |\n|---|---|\n| 1 | 0.22% |\n| 2 | 0.35% |\n| 3 | 0.50% |\n| 4 | 0.65% |\n| 5 | 0.80% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-882",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson inquires Chen to gauge the likelihood of default linked with a five-year investment-grade bond offered by Polaris Corporation. Chosen information on the Polaris Corporation bond is displayed in Exhibit 1.Exhibit 1. Based on Exhibit 1, what is the possibility of Polaris failing to repay the bond within the first three years, taking into account the specific data on Polaris Corporation Five-Year Bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    hazard_rate_year_1 = 0.0022\n    hazard_rate_year_2 = 0.0035\n    hazard_rate_year_3 = 0.0050\n\n    # Do math calculation to get the answer\n    # Probability of default in first year\n    probability_default_year_1 = hazard_rate_year_1\n\n    # Probability of survival after first year\n    survival_probability_year_1 = 1 - probability_default_year_1\n\n    # Probability of default in second year, given survival through first year\n    probability_default_year_2 = hazard_rate_year_2 * survival_probability_year_1\n\n    # Probability of survival after second year\n    survival_probability_year_2 = survival_probability_year_1 - probability_default_year_2\n\n    # Probability of default in third year, given survival through second year\n    probability_default_year_3 = hazard_rate_year_3 * survival_probability_year_2\n\n    # Cumulative probability of default within the first three years\n    cumulative_probability_default = probability_default_year_1 + probability_default_year_2 + probability_default_year_3\n\n    # return answer as a percentage\n    return cumulative_probability_default * 100\n```\n\nThis program calculates the cumulative probability of default within the first three years using the given hazard rates for each year and returns the answer as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-883",
        "python_solution": "",
        "ground_truth": null,
        "question": "Duhamel starts reviewing the asset collection of an American citizen, Brooke Jensen. Jensen's investments are in American and European securities. On January 1, 2019, Jensen held assets of USD 50 million and EUR 50 million, distributed between shares and bonds. The exchange rate on this day was 1.1 USD/EUR. A year later, on January 1, 2020, the value of Jensen's European asset increased from EUR 50 million to EUR 54 million, having EUR 20 million in shares and EUR 34 million in bonds. The USD/EUR exchange rate at this time is 1.16. Can you determine the domestic currency return on Jensen's European portfolio over the preceding year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_euro_value = 50000000  # EUR\n    final_euro_value = 54000000  # EUR\n    initial_usd_euro_rate = 1.1\n    final_usd_euro_rate = 1.16\n\n    # Initial value in USD\n    initial_usd_value = initial_euro_value * initial_usd_euro_rate\n\n    # Final value in USD\n    final_usd_value = final_euro_value * final_usd_euro_rate\n\n    # Domestic currency return calculation\n    domestic_currency_return = (final_usd_value - initial_usd_value) / initial_usd_value\n\n    # Return answer\n    return domestic_currency_return\n\n# Test the solution\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Estimated net income | $200 |\n| --- | --- |\n| Beginning retained earnings | $1,400 |\n| Estimated distributions to owners | $100 |"
        ],
        "topic": "Accounting",
        "question_id": "test-884",
        "python_solution": "",
        "ground_truth": null,
        "question": "What should be the projection of the analyst for the final retained earnings of a corporation, ahead of its end-of-year profit declaration (in millions)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    estimated_net_income = 200\n    beginning_retained_earnings = 1400\n    estimated_distributions_to_owners = 100\n\n    # Do math calculation to get the answer\n    projected_retained_earnings = beginning_retained_earnings + estimated_net_income - estimated_distributions_to_owners\n\n    # return answer\n    return projected_retained_earnings\n```"
        ]
    },
    {
        "tables": [
            "| Full price of bond (PVFull) | $100,367,242    |\n|-----------------------------|-----------------|\n| Modified duration (AnnModDur) | 8.124 years |\n| Accrued interest               | $303,218        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-885",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the below details about a company's bond, what is the financial duration of this particular bond?",
        "output": [
            " Certainly! Based on the information provided, you are asking for the financial duration of the bond. However, \"financial duration\" is a term that needs further clarification. Typically, duration in bond analytics can refer to \"Macaulay duration\" or \"modified duration.\" Given the data provided, which includes values for \"Modified duration (AnnModDur)\" and \"Accrued interest,\" we can use the \"Modified duration.\"\n\nHere is a Python program that returns the answer:\n\n```python\ndef solution():\n    # Define variables name and value\n    full_price_of_bond = 100367242\n    modified_duration = 8.124  # in years\n    accrued_interest = 303218\n\n    # Since the problem is asking for the financial duration, and we have the modified duration provided,\n    # we can directly return the modified duration as the answer.\n    answer = modified_duration\n\n    # return answer\n    return answer\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program defines the necessary variables and directly returns the modified duration as the answer since it is the relevant duration measure provided in the table."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-886",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business sells a non-refundable, two-year service agreement for \u20ac420. According to previous trends, the business anticipates that the first year will see 25% of service expenses, with the rest expected in the second year. How much revenue does the business acknowledge in the first year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 420\n    first_year_expenses_percentage = 0.25\n\n    # Do math calculation to get the answer\n    first_year_revenue = total_revenue * first_year_expenses_percentage\n\n    # return answer\n    return first_year_revenue\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-887",
        "python_solution": "",
        "ground_truth": null,
        "question": "Anna, a researcher, carried out a basic regression to understand the fluctuation in electricity usage based on temperature. She found out that the overall variation of the dependent variable was 132.08 and the variation that was explained stood at 60.38. Given that she had 60 monthly data points, can you calculate the coefficient of determination?",
        "output": [
            " Certainly! The coefficient of determination, also known as R-squared, can be calculated using the formula:\n\n\\[ R^2 = \\frac{\\text{Explained Variation}}{\\text{Total Variation}} \\]\n\nGiven:\n- Overall variation (Total Variation): 132.08\n- Explained variation: 60.38\n\nHere is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_variation = 132.08\n    explained_variation = 60.38\n\n    # Do math calculation to get the answer\n    r_squared = explained_variation / total_variation\n\n    # Return answer\n    return r_squared\n```\n\nThis program calculates the coefficient of determination (R-squared) by dividing the explained variation by the total variation."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-888",
        "python_solution": "",
        "ground_truth": null,
        "question": "John wants to assist his pal, Lisa, in forecasting the revenue of her store in October 20X9. To do this, he uses the income data from January 20X6 to September 20X9 as examples to create an AR(2) model. The resulting formula is: Xt+1  =1.3458+0.8912Xt+0.3372Xt-1. What would be the anticipated earnings of Lisa\u2019s store in October 20X9 if it is known that the income in August 20X9 was $2746.72 and the income in September 20X9 was $2957.63?",
        "output": [
            " Certainly! Let's define the variables and apply the given AR(2) model formula to forecast the revenue for October 20X9. Here's how the Python program can be written:\n\n```python\ndef solution():\n    # Define variables name and value\n    august_revenue = 2746.72\n    september_revenue = 2957.63\n\n    # Coefficients from the AR(2) model\n    c = 1.3458\n    phi1 = 0.8912\n    phi2 = 0.3372\n\n    # Do math calculation to get the answer\n    october_revenue = c + phi1 * september_revenue + phi2 * august_revenue\n\n    # return answer\n    return october_revenue\n\n# Call the solution function to see the result\nprint(solution())\n```\n\nThis program will calculate the anticipated earnings for October 20X9 using the given AR(2) model and the revenue values from August and September 20X9. When you run this program, it will return the forecasted revenue for October 20X9."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-889",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume a call option priced at $4 where the strike price is $50. Calculate the worth at expiration and the earnings for a purchaser if the cost of the underlying asset at expiration is $48.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    strike_price = 50\n    option_price = 4\n    asset_price_at_expiration = 48\n\n    # Do math calculation to get the answer\n    # The worth at expiration is the maximum of (asset price at expiration - strike price, 0)\n    worth_at_expiration = max(asset_price_at_expiration - strike_price, 0)\n\n    # The earnings for the purchaser is (worth at expiration - option price)\n    earnings = worth_at_expiration - option_price\n\n    # Return the worth at expiration and earnings\n    return worth_at_expiration, earnings\n\n# Call the function to get the result\nworth_at_expiration, earnings = solution()\nprint(f\"Worth at Expiration: {worth_at_expiration} dollars\")\nprint(f\"Earnings for the Purchaser: {earnings} dollars\")\n```\n\nThis Python program calculates the worth at expiration of a call option and the earnings for the purchaser given the initial conditions. The output will show the worth at expiration and the earnings for the purchaser."
        ]
    },
    {
        "tables": [
            "| Balance Sheet Item | 12/31/2017 | 12/31/2018 | Change |\n| ------------------ | ---------- | ---------- | ------ |\n| Equipment          | $100 million  | $105 million | $5 million  |\n| Accumulated  depreciation - equipment | $40 million | $46 million | $6 million |"
        ],
        "topic": "Accounting",
        "question_id": "test-890",
        "python_solution": "",
        "ground_truth": null,
        "question": "Using the same figures highlighted in the comparative balance sheets, how much money did Globex Metals International, a global metals corporation, gain from the sale of machinery, following their reported equipment sale loss of $2 million in 2018, a noted depreciation expense of $8 million, and capital outlays amounting to $10 million which was completely used on new machinery purchases?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    depreciation_expense = 8_000_000\n    reported_loss_on_sale = 2_000_000\n    capital_outlays_on_new_machinery = 10_000_000\n    increase_in_equipment = 5_000_000\n    increase_in_accumulated_depreciation = 6_000_000\n\n    # Do math calculations to get the answer\n    equipment_at_end_of_2017 = 100_000_000\n    equipment_at_end_of_2018 = 105_000_000\n    accumulated_depreciation_2017 = 40_000_000\n    accumulated_depreciation_2018 = 46_000_000\n\n    net_equipment_2017 = equipment_at_end_of_2017 - accumulated_depreciation_2017\n    net_equipment_2018 = equipment_at_end_of_2018 - accumulated_depreciation_2018\n\n    money_gained_from_sale = (reported_loss_on_sale + capital_outlays_on_new_machinery + depreciation_expense) - (net_equipment_2018 - net_equipment_2017)\n\n    # return answer\n    return money_gained_from_sale\n\n# Print the solution\nprint(solution())\n```\n\nExplanation:\n1. **Define Variables**:\n   - `depreciation_expense`: $8 million.\n   - `reported_loss_on_sale`: $2 million.\n   - `capital_outlays_on_new_machinery`: $10 million.\n   - `increase_in_equip"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-891",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose interest rate parity is valid and the present spot rate is 1.4808 CAD/EUR. The annual interest rates in the nation of Canada (CAD) and the country of France (EUR) stand at 3% and 4% respectively. What is the 1-year forward rate in CAD/EUR?",
        "output": [
            " Certainly! Here's the Python program that calculates the 1-year forward rate in CAD/EUR based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 1.4808  # Spot rate in CAD/EUR\n    interest_rate_cad = 0.03  # Annual interest rate in Canada (CAD)\n    interest_rate_eur = 0.04  # Annual interest rate in France (EUR)\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate * (1 + interest_rate_cad) / (1 + interest_rate_eur)\n\n    # return answer\n    return forward_rate\n\n# Print the result to check the answer\nprint(solution())\n```\n\nThis program defines the necessary variables, performs the calculation for the forward rate based on interest rate parity, and then returns the result."
        ]
    },
    {
        "tables": [
            "|  | 2015 | 2016 | 2017 | 2018(E) |\n|---|---|---|---|---|\n| Earnings per share | 6 | 6.3 | 6.62 | 6.95 |\n| Dividends per share | 1.8 | 1.89 | 2.00 | 2.10 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-892",
        "python_solution": "",
        "ground_truth": null,
        "question": "Bill is examining a food distribution enterprise, RapidSnacks's fair forward P/E using the Gordon growth offer discount model. The EPS and dividends of RapidSnacks are indicated previously. Bill assumes that the company's necessary rate of return would be 12%, and hypothesizes that the growth rate of the company would be consistent at 5%. Based on this data, what is the justified forward P/E of the enterprise?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    EPS_2018E = 6.95\n    dividends_per_share_2018E = 2.10\n    required_rate_of_return = 0.12\n    growth_rate = 0.05\n\n    # Do math calculation to get the answer\n    justified_forward_PE = (dividends_per_share_2018E * (1 + growth_rate)) / (required_rate_of_return - growth_rate) / EPS_2018E\n\n    # return answer\n    return justified_forward_PE\n\n# Function call for the solution\nprint(solution())\n```\nThis script uses the Gordon growth model formula to calculate the justified forward P/E. The key steps are defining the variables, applying the formula, and then returning the justified forward P/E."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-893",
        "python_solution": "",
        "ground_truth": null,
        "question": "A life insurance firm from Canada has an outstanding issue of perpetual, non-convertible, non-callable preferred shares with a 4.80 percent coupon rate and a par value of $25. If the required return on similar issues is 4.49 percent, what would be the intrinsic value of one of these preferred shares?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.0480\n    par_value = 25\n    required_return = 0.0449\n\n    # Do math calculation to get the answer\n    intrinsic_value = par_value * (coupon_rate / required_return)\n\n    # return answer\n    return intrinsic_value\n```\nThis Python program defines the necessary variables (coupon rate, par value, and required return) and uses them to calculate the intrinsic value of one of the preferred shares. The formula used is the basic valuation formula for perpetual preferred shares, which is the par value multiplied by the ratio of the coupon rate to the required return."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-894",
        "python_solution": "",
        "ground_truth": null,
        "question": "An expert finds out that roughly 99% of the observations of daily revenue for a corporation lie between $230,000 and $480,000 and that daily revenue for the corporation follows a normal distribution. If about 99% of all the observations lie in the interval \u03bc \u00b1 3\u03c3, then using the approximate z-value instead of the exact table, what is the standard deviation of daily revenue for the corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 230000\n    upper_bound = 480000\n    probability_interval = 99 / 100\n\n    # Do math calculation to get the answer\n    interval_center = (upper_bound + lower_bound) / 2  # \u03bc (mean)\n    half_interval_width = (upper_bound - lower_bound) / 2  # 3\u03c3\n\n    # To get \u03c3, we divide half_interval_width by 3 because the interval is \u03bc \u00b1 3\u03c3\n    std_dev = half_interval_width / 3\n\n    # return answer\n    return std_dev\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-895",
        "python_solution": "",
        "ground_truth": null,
        "question": "A manager in charge of market risk intends to determine the cost of a 2-year zero-coupon bond. The 1-year interest rate currently stands at 10.0%. It's projected that there's a 50% chance that the 1-year interest rate will reach 12.0% and a 50% chance that it could be 8.0% in the next year. If the risk premium of duration risk is assumed to be 50 bps annually, and the bond\u2019s face value is worth EUR 1,000, which would be the accurate price of this zero-coupon bond?",
        "output": [
            " To solve the problem of determining the cost of a 2-year zero-coupon bond, we need to calculate the present value of the bond considering the possible future interest rates and the risk premium for duration risk. Here is the Python program to accomplish that:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    current_1_year_rate = 0.10\n    risk_premium = 0.005\n\n    # Possible future 1-year rates and their probabilities\n    rate_1 = 0.12\n    rate_2 = 0.08\n    probability_rate_1 = 0.50\n    probability_rate_2 = 0.50\n\n    # Calculate the present value for each scenario\n    discount_factor_year_1 = 1 / (1 + current_1_year_rate + risk_premium)\n\n    discount_factor_year_2_rate_1 = 1 / (1 + rate_1 + risk_premium)\n    discount_factor_year_2_rate_2 = 1 / (1 + rate_2 + risk_premium)\n\n    present_value_rate_1 = face_value * discount_factor_year_2_rate_1 * discount_factor_year_1\n    present_value_rate_2 = face_value * discount_factor_year_2_rate_2 * discount_factor_year_1\n\n    # Weighted average present value\n    expected_present_value = (probability_rate_1 * present_value_rate_1) + (probability_rate_2 * present_value_rate_2)\n\n    # return answer\n    return expected_present_value\n```\n\nThis program calculates the expected present value of a 2-year zero-coupon bond by considering the different future interest rates and their respective probabilities, as well as the risk premium for duration risk. The result is the accurate price of the zero-coupon bond."
        ]
    },
    {
        "tables": [
            "|     |      |\n| ----| ----|\n| EXHIBIT 1  SELECTED INFORMATION O N INVESTMENTS FOR THE YEAR ENDED 31 DECEMBER 2017 (\u00a3 THOUSANDS, EXCEPT PER SHARE DATA) | |\n| Company Name | Alme AG |\n| Security  description | Bonds maturing  31 December 2026, 5% coupon payable  annually, 6% effective market rate when issued  1 January 2012 |\n| Classification at purchase | Held to maturity |\n| Date of purchase | 1 January 2016 |\n| Amount owned by Dagmar | Face value \u00a34,000 |\n| Market value on  1 January 2017 | \u00a33,600.60 |\n| Market value on  31 December 2017 | \u00a33,634.76 |"
        ],
        "topic": "Accounting",
        "question_id": "test-896",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the contribution from the investment in Alme to the net earnings (in thousands) for 2017 of Brecht and Co, a European manufacturing company that prepares its financial statements according to International Financial Reporting Standards (IFRS)? This is being reviewed by two treasury group members of Brecht and Co, Hans Braun and Olga Schmitt.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 4000  # Face value of the bonds (in thousands)\n    coupon_rate = 0.05  # Coupon rate (5%)\n    market_value_start = 3600.60  # Market value at the start of the year (in thousands)\n    market_value_end = 3634.76  # Market value at the end of the year (in thousands)\n\n    # Calculate the contribution from the investment to the net earnings\n    coupon_payment = face_value * coupon_rate  # Calculate the annual coupon payment\n    unrealized_gain = market_value_end - market_value_start  # Calculate the unrealized gain\n\n    # Because the bonds are classified as held to maturity, the unrealized gain is not recognized in net earnings\n    earnings_contribution = coupon_payment\n\n    # return answer\n    return earnings_contribution\n\n# Execute the function to get the result\nprint(solution())\n```\n\nExplanation:\n- According to IFRS, for bonds classified as held to maturity, only the coupon payments (interest) are recognized in net earnings.\n- The unrealized gain or loss on these investments, which is the change in market value, is not recognized in the income statement.\n- Therefore, the contribution to the net earnings for 2017 from the investment is solely the coupon payment for the year."
        ]
    },
    {
        "tables": [
            "| Revenue growth | 5% |\n| --- | --- |\n| Gross profit margin | 30% |\n| Depreciation Expense | 2.5% of revenues |\n| SG&A | 15% of revenues |\n| WCInv | 5% of the incremental revenues |\n| CapEx | 15% of the incremental revenues |\n| Tax rate | 30% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-897",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is assessing the FCFF of Corporation N for the upcoming year, which records an annual turnover of $100 million. He has projected the pertinent details in the given table. What is the FCFF?",
        "output": [
            " Certainly! Let's generate a Python program to calculate the Free Cash Flow to the Firm (FCFF) for Corporation N based on the provided details.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables and values\n    revenue = 100000000  # $100 million\n    revenue_growth_rate = 0.05\n    gross_profit_margin = 0.30\n    depreciation_rate = 0.025\n    sga_rate = 0.15\n    wcinv_rate = 0.05\n    capex_rate = 0.15\n    tax_rate = 0.30\n\n    # Calculate incremental revenues\n    incremental_revenues = revenue * revenue_growth_rate\n\n    # Calculate EBIT\n    ebit = gross_profit_margin * (revenue + incremental_revenues)\n\n    # Calculate Depreciation\n    depreciation = depreciation_rate * revenue\n\n    # Calculate SG&A\n    sga = sga_rate * (revenue + incremental_revenues)\n\n    # Calculate Net Operating Profit After Tax (NOPAT)\n    nopat = (ebit - sga) * (1 - tax_rate)\n\n    # Calculate CapEx\n    capex = capex_rate * incremental_revenues\n\n    # Calculate WCInv\n    wcinv = wcinv_rate * incremental_revenues\n\n    # Calculate FCFF\n    fcff = nopat + depreciation - capex - wcinv\n\n    # Return the answer\n    return fcff\n\n# Call the function and print the result\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program defines the necessary variables, performs the required calculations based on those variables, and then returns the FCFF as the output."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-898",
        "python_solution": "",
        "ground_truth": null,
        "question": "If we assume an annual interest rate of 8% and an investment made today of $50,000. Let's suppose equal distributions are made at the end of each year for the following twelve years, leaving the account to be closed at the end of the twelfth year. How much would each yearly distribution amount be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_interest_rate = 0.08\n    investment_amount = 50000\n    num_of_years = 12\n\n    # Do math calculation to get the answer\n    yearly_distribution = investment_amount * (annual_interest_rate / (1 - (1 + annual_interest_rate) ** -num_of_years))\n\n    # return answer\n    return yearly_distribution\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThe above Python program calculates the yearly distribution amount for an investment with a given interest rate and period. The formula used is derived from the concept of an annuity, where the future value of an investment is determined by the present value and the interest rate compounded annually. The calculated yearly distribution is then returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-899",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given that Occurrence A and Occurrence B are independent events. The probability of A is 0.2 [P(A) = 0.2] and the probability of B is 0.5 [P(B) = 0.5]. What is the combined probability of A and B, P(AB)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.2\n    P_B = 0.5\n\n    # Do math calculation to get the answer\n    P_AB = P_A * P_B\n\n    # return answer\n    return P_AB\n```\n\nThis program calculates the combined probability of two independent events A and B, using the formula for the intersection of independent events, which is simply the product of their individual probabilities."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-900",
        "python_solution": "",
        "ground_truth": null,
        "question": "The portfolio manager of AB pension, Monique, is contemplating the addition of XY Corp. (New York Stock Exchange: XY) to her portfolio. After a thorough evaluation of the company and its competitors, she is of the view that the company will exhibit exceptional growth for the coming 4 years and regular growth following that. Therefore, she has inferred that a two-stage DDM is most suitable for evaluating the stock. The total dividends paid by XY in 2017 amounted to $0.22. She predicts a growth rate of 12 percent for the next 4 years and 6 percent thereafter. She estimates that the required return is 9 percent. What percentage of the total value of the stock is associated with the value of the second stage based on this method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    D0 = 0.22             # Initial dividend\n    g1 = 0.12             # Growth rate for the next 4 years\n    g2 = 0.06             # Growth rate after the next 4 years\n    r = 0.09              # Required return\n    years_high_growth = 4 # Number of years with high growth\n\n    # Calculate value of the first stage (high growth)\n    value_stage_1 = 0\n    for t in range(1, years_high_growth + 1):\n        dividend = D0 * (1 + g1) ** t\n        value_stage_1 += dividend / (1 + r) ** t\n\n    # Calculate the terminal value at the end of the high growth period\n    D_terminal = D0 * (1 + g1) ** years_high_growth\n    value_stage_2 = D_terminal * (1 + g2) / (r - g2) / (1 + r) ** years_high_growth\n\n    # Total value of the stock\n    total_value = value_stage_1 + value_stage_2\n\n    # Calculate the percentage of the total value associated with the second stage\n    percentage_stage_2 = (value_stage_2 / total_value) * 100\n\n    # return answer\n    return percentage_stage_2\n```\n\nWhen executed, this program will calculate the percentage of the total value of the stock that is associated with the value of the second stage based on the two-stage DDM method."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-901",
        "python_solution": "",
        "ground_truth": null,
        "question": "Taking into account the following financial information for a financial institution, in millions of dollars: shareholders' funds: 627.4; retained earnings: 65.6; undisclosed reserves: 33.5; goodwill: 21.3; subordinated debt: 180.0; specific provisions: 11.7. What is the ratio of tier 2 capital to tier 1 capital?",
        "output": [
            " Certainly! To calculate the ratio of tier 2 capital to tier 1 capital, we need to define what constitutes tier 1 and tier 2 capital based on the given financial information.\n\n- **Tier 1 Capital**: Typically includes shareholders' equity and disclosed reserves.\n- **Tier 2 Capital**: Typically includes undisclosed reserves, goodwill, subordinated debt, and specific provisions.\n\nGiven the financial information:\n- Shareholders' funds: 627.4\n- Retained earnings: 65.6\n- Undisclosed reserves: 33.5\n- Goodwill: 21.3\n- Subordinated debt: 180.0\n- Specific provisions: 11.7\n\n```python\ndef solution():\n    # Define variables name and value\n    shareholders_funds = 627.4\n    retained_earnings = 65.6\n    undisclosed_reserves = 33.5\n    goodwill = 21.3\n    subordinated_debt = 180.0\n    specific_provisions = 11.7\n\n    # Calculate Tier 1 Capital (typically shareholders' funds and retained earnings)\n    tier_1_capital = shareholders_funds + retained_earnings\n\n    # Calculate Tier 2 Capital (includes undisclosed reserves, goodwill, subordinated debt, and specific provisions)\n    tier_2_capital = undisclosed_reserves + goodwill + subordinated_debt + specific_provisions\n\n    # Do math calculation to get the answer\n    ratio = tier_2_capital / tier_1_capital\n\n    # return answer\n    return ratio\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The ratio of tier 2 capital to tier 1 capital is: {answer}\")\n```\n\nThis program calculates the ratio of tier 2 capital to tier 1 capital based on the provided financial information. When you run the `solution` function, it will compute and return the ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-902",
        "python_solution": "",
        "ground_truth": null,
        "question": "A dealer submits a limit order to purchase stocks at a rate of $49.94, with the market bid price being $49.49 and the bid-ask spread standing at 0.7%. What will likely be the final fill price for the order?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_bid_price = 49.49\n    bid_ask_spread = 0.007 # 0.7%\n\n    # Do math calculation to get the answer\n    ask_price = market_bid_price * (1 + bid_ask_spread)\n    limit_order_price = 49.94\n\n    # The final fill price will be the lower of the limit order price or the calculated ask price\n    final_fill_price = min(limit_order_price, ask_price)\n\n    # return answer\n    return final_fill_price\n\n# Run the solution function\nprint(solution())\n```\n\n### Breakdown of the Code:\n1. **Define variables**: We start by defining the `market_bid_price` and `bid_ask_spread`.\n2. **Calculate the ask price**: Using the formula `ask_price = market_bid_price * (1 + bid_ask_spread)`, we calculate the ask price based on the market bid price and the bid-ask spread.\n3. **Determine the final fill price**: The final fill price will be the lower of the limit order price and the calculated ask price.\n4. **Return the answer**: Finally, return the calculated `final_fill_price`.\n\nWhen you run the `solution` function, it will give you the likely final fill price for the order."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-903",
        "python_solution": "",
        "ground_truth": null,
        "question": "Currently possessing $750,000 in cash and short investment, Robert consults his investment manager Smith to discuss his investment portfolio. Robert's human capital amounts to $1.2 million with 30% demonstrating an equity-like characteristic according to calculations. Deciding that an overall target allocation of 45% equity is fitting for Robert, Smith must now determine the financial capital equity allocation required for Robert to meet the total economic wealth's targeted equity allocation. What should this allocation amount to?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash_and_investments = 750000\n    human_capital = 1200000\n    equity_like_human_capital_percentage = 0.30\n    total_target_equity_allocation_percentage = 0.45\n\n    # Calculate the equity-like portion of human capital\n    equity_like_human_capital = human_capital * equity_like_human_capital_percentage\n\n    # Calculate the total economic wealth\n    total_economic_wealth = cash_and_investments + human_capital\n\n    # Calculate the overall equity allocation in dollars\n    total_target_equity_allocation = total_economic_wealth * total_target_equity_allocation_percentage\n\n    # Calculate the financial capital equity allocation required\n    financial_capital_equity_allocation = total_target_equity_allocation - equity_like_human_capital\n\n    # return answer\n    return financial_capital_equity_allocation\n\n# Print the solution\nprint(solution())\n```\n\nThe program calculates the financial capital equity allocation required for Robert to meet the targeted equity allocation of his total economic wealth. It first determines the equity-like portion of his human capital, then the total economic wealth, and finally the required financial capital equity allocation."
        ]
    },
    {
        "tables": [
            "| Bond Class | Par Value(Emillions) |\n|------------|---------------------|\n| A(senior)  | 200                 |\n| B(subordinated) | 20           |\n| C(subordinated) | 5            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-904",
        "python_solution": "",
        "ground_truth": null,
        "question": "At what level of default in par value would Bond Class A incur a loss if issued by a special purpose vehicle in the following structure?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value_A = 200\n    par_value_B = 20\n    par_value_C = 5\n\n    # Calculate the threshold for Bond Class A to incur a loss\n    threshold_loss_A = par_value_B + par_value_C\n\n    # return answer\n    return threshold_loss_A\n\n# Print the solution to verify the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Activity                           | Cost of Input (\u00a3/unit) | Price of Output (\u00a3/unit) in Current Period |\n| ---------------------------------- | ---------------------- | ----------------------------------------- |\n| Input materials                    | 3.50                   | 5.42                                      |\n| Production                         | 5.42                   | 8.02                                      |\n| Distributing good to stores (wholesale) | 8.02            | 11.23                                     |\n| Selling good to consumers (retail) | 11.23                  | 16.50                                     |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-905",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the contribution per unit (in \u00a3) this product adds to the present GDP, taking into account the production and sale expenses as shown in the subsequent table?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_input_materials = 3.50\n    price_of_production_output = 8.02\n    price_of_wholesale_output = 11.23\n    price_of_retail_output = 16.50\n\n    # Do math calculation to get the answer\n    value_added_production = price_of_production_output - cost_of_input_materials\n    value_added_wholesale = price_of_wholesale_output - price_of_production_output\n    value_added_retail = price_of_retail_output - price_of_wholesale_output\n\n    total_value_added = value_added_production + value_added_wholesale + value_added_retail\n\n    # return answer\n    return total_value_added\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program calculates the contribution per unit to the present GDP by summing the value added at each stage of production and sale. The value added at each stage is computed by subtracting the cost of the input from the price of the output for that stage. The final result is the sum of all these value-added amounts."
        ]
    },
    {
        "tables": [
            "| Checking account | $27,000 |\n|------------------|---------|\n| Taxable investment account | $625,000 |\n| Residence | $525,000 |\n| Residential mortgage | $285,000 |\n| Outstanding balance on a $100,000 home equity line of credit | $38,000 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-906",
        "python_solution": "",
        "ground_truth": null,
        "question": "Exhibit 1 Smith Family: Personal and Financial Information:Personal Information:1. Estimated present value of the Smiths\u2019 future earnings is $3,900,000.2. The family has two children, ages 10 and 8. Cost of four years of university for the two children, with an estimated present value of $250,000.3. Purchase of a vacation home in the next five years, with an estimated present value of $325,000.4. Estimated present value of the Grahams\u2019 future consumption is $3,500,000. Using the data in Exhibit 1, what is the Smiths\u2019 economic net worth (in thousands)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    checking_account = 27000\n    taxable_investment_account = 625000\n    residence = 525000\n    residential_mortgage = 285000\n    home_equity_line_of_credit = 38000\n    present_value_future_earnings = 3900000\n    university_costs = 250000\n    vacation_home_cost = 325000\n    present_value_future_consumption = 3500000\n\n    # Do math calculation to get the answer\n    total_assets = checking_account + taxable_investment_account + residence + present_value_future_earnings\n    total_liabilities = residential_mortgage + home_equity_line_of_credit + university_costs + vacation_home_cost + present_value_future_consumption\n    economic_net_worth = total_assets - total_liabilities\n\n    # return answer\n    return economic_net_worth / 1000  # Convert to thousands\n\n# Example of calling the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "test-907",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John has put money into 50,000 shares of Company N's stock that is being sold for $25 each and the company announces a cash dividend of $2, assuming John will be using all dividends received to buy more shares and considering he is a tax-exempt investor, how many shares will he possess after reinvesting the dividends at the ex-dividend price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    shares_owned = 50000\n    price_per_share = 25\n    cash_dividend = 2\n\n    # Calculate dividend received\n    total_dividend_received = shares_owned * cash_dividend\n\n    # Calculate ex-dividend price per share\n    ex_dividend_price = price_per_share - cash_dividend\n\n    # Calculate additional shares that can be bought with the dividend received\n    additional_shares = total_dividend_received / ex_dividend_price\n\n    # Calculate total shares after reinvestment\n    total_shares_after_reinvestment = shares_owned + additional_shares\n\n    # return answer\n    return total_shares_after_reinvestment\n```\n\nThis program calculates the number of shares John will possess after reinvesting the dividends at the ex-dividend price, assuming he starts with 50,000 shares, the stock is being sold for $25 each, and the company announces a cash dividend of $2."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-908",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a trader acquired a stock initially priced at $20 and sold it at the end of the year for $25, what is the continuously compounded annual rate of return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_price = 20\n    final_price = 25\n\n    # Do math calculation to get the answer\n    rate_of_return = math.log(final_price / initial_price)\n\n    # return answer\n    return rate_of_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-909",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the value of a bond with a par value of $100, a coupon rate of 6% paid twice a year, a YTM of 7%, and a maturity period of a decade?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    coupon_rate = 0.06\n    ytm = 0.07\n    years_to_maturity = 10\n    payments_per_year = 2\n\n    # Calculate the semiannual coupon payment\n    semiannual_coupon = (coupon_rate * par_value) / payments_per_year\n\n    # Calculate the number of periods\n    number_of_periods = years_to_maturity * payments_per_year\n\n    # Calculate the semiannual YTM rate\n    semiannual_ytm = ytm / payments_per_year\n\n    # Do math calculation to get the present value of the bond\n    bond_value = (semiannual_coupon * (1 - (1 + semiannual_ytm) ** -number_of_periods)) / semiannual_ytm + (par_value / (1 + semiannual_ytm) ** number_of_periods)\n\n    # return answer\n    return bond_value\n```\n\nHere is the Python program to calculate the value of the bond with the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-910",
        "python_solution": "",
        "ground_truth": null,
        "question": "Michael wishes to assist his buddy James in forecasting the sales volume of his store in January 20X9, so he employs the sales volume data from January 20X6 to December 20X8 as examples to construct a log-linear trend model, achieving the result: Ln( \u0177t ) =2.3748+0.0912t. What is the forecasted sales volume of James's store in January 20X9?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    intercept = 2.3748\n    coefficient = 0.0912\n    time_period = 37  # January 20X9 represents the 37th period from January 20X6 (e.g., 24 months for 20X6 + 12 months for 20X7 + 12 months for 20X8 + 1 for January 20X9)\n\n    # Do math calculation to get the answer\n    ln_forecasted_sales = intercept + (coefficient * time_period)\n    forecasted_sales = exp(ln_forecasted_sales)\n\n    # Return the forecasted sales for January 20X9\n    return forecasted_sales\n\n# Need to import the exp function for calculating the exponential\nfrom math import exp\n\n# Run the solution to get the forecasted sales volume\nforecasted_sales_volume = solution()\nprint(forecasted_sales_volume)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-911",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a Property B has an appraised worth of $36,000,000 with a predicted Year 1 NOI of 900,000, What would be the highest loan amount that Property B could receive if the loan provider is interested in an interest-only loan at 5% mortgage rate, given that the maximum loan to value doesn't exceed 80% and the minimum debt service coverage ratio is no less than 1.2x?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    appraised_value = 36000000\n    noi = 900000\n    max_loan_to_value = 0.80\n    min_debt_service_coverage_ratio = 1.2\n    mortgage_rate = 0.05\n\n    # Do math calculation to get the answer\n    max_loan_based_on_loan_to_value = appraised_value * max_loan_to_value\n\n    max_annual_debt_service = noi / min_debt_service_coverage_ratio\n    max_loan_based_on_debt_service = max_annual_debt_service / mortgage_rate\n\n    # Highest loan amount will be the minimum of the two calculations\n    highest_loan_amount = min(max_loan_based_on_loan_to_value, max_loan_based_on_debt_service)\n\n    # return answer\n    return highest_loan_amount\n```\nThis Python program computes the highest loan amount that Property B could receive based on the given constraints. The maximum loan to value and maximum debt service coverage ratio are used to determine the highest possible loan amount."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-912",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ, a wealth management company based in France, is planning to buy CDS on a firm called E to secure its existing portfolio position. The yearly coupon rate for the CDS is 5%, and the term of the CDS agreement is 5 years. The credit spread for firm E stands at 650 bps. Based on the details provided, what is the initial premium as a percent of the notional for the CDS on firm E?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 5 / 100  # 5% coupon rate\n    term_years = 5\n    credit_spread_bps = 650 / 100  # Convert basis points to percentage\n\n    # Calculate the initial premium\n    initial_premium = coupon_rate * term_years\n\n    # return answer as a percentage\n    return initial_premium * 100\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-913",
        "python_solution": "",
        "ground_truth": null,
        "question": "A merchant initiates an equity swap with a notional principle of $500,000. He will acquire the return on stock ABC and give the return on Dow Jones Index. At the end of the quarter, if the stock ABC has increased by 5% and the index has risen by 1%, what would be the merchant's payoff?",
        "output": [
            " Certainly! Here is the Python program to calculate the merchant's payoff based on the given scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    notional_principal = 500000\n    stock_abc_return = 0.05  # 5%\n    index_return = 0.01      # 1%\n\n    # Do math calculation to get the answer\n    payoff_from_stock_abc = notional_principal * stock_abc_return\n    payoff_from_index = notional_principal * index_return\n    merchant_payoff = payoff_from_stock_abc - payoff_from_index\n\n    # return answer\n    return merchant_payoff\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the merchant's payoff by first computing the returns from stock ABC and the Dow Jones Index, then subtracting the payoff from the index from the payoff from stock ABC. The result is the merchant's net payoff."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-914",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an individual puts $1000 into an investment now at a 6% interest rate, how much will they make in 10 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 1000\n    rate = 0.06\n    time = 10\n\n    # Do math calculation to get the answer\n    amount = principal * (1 + rate) ** time\n\n    # return answer\n    return amount\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-915",
        "python_solution": "",
        "ground_truth": null,
        "question": "In March 2017, John purchased 500 pen units at a price of $2 each. Then in April 2017, John acquired 600 pen units at a cost of $3 each. Throughout 2017, he made sales of 1000 units at $5 for each unit. Utilizing the Weighted Average method, what will be the cost of goods sold in 2017 for John?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    march_purchase_units = 500\n    april_purchase_units = 600\n    march_purchase_cost_per_unit = 2\n    april_purchase_cost_per_unit = 3\n    total_units_purchased = march_purchase_units + april_purchase_units\n    total_sales_units = 1000\n    sales_price_per_unit = 5\n\n    # Do math calculation to get the answer\n    total_cost_march = march_purchase_units * march_purchase_cost_per_unit\n    total_cost_april = april_purchase_units * april_purchase_cost_per_unit\n    total_cost = total_cost_march + total_cost_april\n    weighted_average_cost_per_unit = total_cost / total_units_purchased\n\n    cost_of_goods_sold = weighted_average_cost_per_unit * total_sales_units\n\n    # return answer\n    return cost_of_goods_sold\n```\n\nWith the provided program, you can calculate the cost of goods sold in 2017 for John using the Weighted Average method."
        ]
    },
    {
        "tables": [
            "| Date | Spot Exchange Rate (USD/RMB) | CPI |\n| --- | --- | --- |\n| 31 Dec 2015 | 6.2 | 100 |\n| 31 Dec 2016 | 8.6 | 130 |\n| 31 Dec 2017 | 17.3 | 200 |\n| Average 2017 | 15.2 | 165 |"
        ],
        "topic": "Accounting",
        "question_id": "test-916",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ Inc. is a global company that adheres to IFRS and uses RMB as the currency for reporting. XYZ owns a subsidiary named QRS, located in the US and uses the US dollar (USD) as its operational currency. QRS's revenue for 2017 is USD90 million. What amount should XYZ Inc. report as its December 31, 2017 revenue from QRS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue_usd = 90000000  # QRS's revenue for 2017 in USD\n    exchange_rate = 17.3  # Spot exchange rate (USD/RMB) on 31 Dec 2017\n\n    # Do math calculation to get the answer\n    revenue_rmb = revenue_usd * exchange_rate\n\n    # return answer\n    return revenue_rmb\n\n# Print the result\nprint(solution())\n```\n\nThis Python program defines the revenue of QRS in USD and the spot exchange rate on December 31, 2017. It then calculates the revenue in RMB using the exchange rate and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-917",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a continuous compound interest rate of 2.5%, how much will John receive after 5 years from his $1million investment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 1000000\n    rate = 0.025\n    time = 5\n\n    # Do math calculation to get the answer\n    amount = principal * (2.71828 ** (rate * time))\n\n    # return answer\n    return amount\n```"
        ]
    },
    {
        "tables": [
            "| country  | Inflation rate (%) | Growth in total factor productivity (%) | Output elasticity of capital | Growth rate of capital (%) | Growth rate of labor (%) |\n|----------|----------------|---------------------------------------|-----------------------------|----------------------------|--------------------------|\n| Country A | 1.7              | 1.5                                                 | 0.3                                           | 3.2                                   | 0.4                                     |\n| Country B | 1.8              | 1.3                                                 | 0.4                                           | 3.7                                   | 0.5                                     |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-918",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the information given in Exhibit 1, what is the GDP growth rate in Country A using the Solow growth accounting equation, which is the preferred method of calculation by Thompson?",
        "output": [
            " Certainly! To calculate the GDP growth rate in Country A using the Solow growth accounting equation, the formula generally involves the following components:\n\\[ \\text{GDP growth rate} = \\frac{\\Delta Y}{Y} = \\frac{A}{Y} + \\frac{\\alpha\\Delta K}{K} + \\frac{(1 - \\alpha)\\Delta L}{L} \\]\n\nWhere:\n- \\( \\frac{A}{Y} \\) is the growth in total factor productivity.\n- \\( \\alpha \\) is the output elasticity of capital.\n- \\( \\frac{\\Delta K}{K} \\) is the growth rate of capital.\n- \\( \\frac{\\Delta L}{L} \\) is the growth rate of labor.\n\nGiven the table data for Country A:\n- Growth in total factor productivity (%) = 1.5%\n- Output elasticity of capital = 0.3\n- Growth rate of capital (%) = 3.2%\n- Growth rate of labor (%) = 0.4%\n\nHere is the Python program to calculate the GDP growth rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    growth_in_tfp = 1.5 / 100  # Convert percentage to decimal\n    output_elasticity_of_capital = 0.3\n    growth_rate_of_capital = 3.2 / 100  # Convert percentage to decimal\n    growth_rate_of_labor = 0.4 / 100  # Convert percentage to decimal\n\n    # Do math calculation to get the answer\n    gdp_growth_rate = (\n        growth_in_tfp +\n        output_elasticity_of_capital * growth_rate_of_capital +\n        (1 - output_elasticity_of_capital) * growth_rate_of_labor\n    )\n\n    # Convert the result to percentage for better readability\n    gdp_growth_rate_percentage = gdp_growth_rate * 100\n\n    # return answer\n    return gdp_growth_rate_percentage\n\n# Calling the function to get the GDP growth rate\nprint("
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-919",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the onset of 2017, Corporation Beta had a retained earnings amount of $800. The company's anticipated net income for the entire year falls around $150, and they're planning to distribute a dividend of $200 to the shareholders. What amount of retained earnings will Corporation Beta have by the end of 2017?",
        "output": [
            " Certainly! Here's the Python program tailored to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_retained_earnings = 800\n    anticipated_net_income = 150\n    dividends_distributed = 200\n\n    # Do math calculation to get the answer\n    retained_earnings_end_of_year = initial_retained_earnings + anticipated_net_income - dividends_distributed\n\n    # return answer\n    return retained_earnings_end_of_year\n\n# To find the value, you may call the function\nprint(solution())\n```\n\nThis program calculates the retained earnings at the end of 2017 for Corporation Beta by adding the anticipated net income to the initial retained earnings and then subtracting the dividends distributed to shareholders."
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of) |\n|-----------|----------------------|\n| ABC       | 300                  |\n| Brown     | 250                  |\n| Coral     | 200                  |\n| Delta     | 150                  |\n| Erie      | 100                  |\n| All others| 50                   |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-920",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the sector's concentration ratio for four companies, based on the market share data collected by the analyst for a particular industry?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales = {\n        \"ABC\": 300,\n        \"Brown\": 250,\n        \"Coral\": 200,\n        \"Delta\": 150,\n        \"Erie\": 100,\n        \"All others\": 50\n    }\n\n    # Get the sales of the top four companies\n    top_four_sales = sales[\"ABC\"] + sales[\"Brown\"] + sales[\"Coral\"] + sales[\"Delta\"]\n\n    # Calculate total sales\n    total_sales = sum(sales.values())\n\n    # Calculate the concentration ratio\n    concentration_ratio = (top_four_sales / total_sales) * 100\n\n    # return answer\n    return concentration_ratio\n\n# You can run the function to get the answer\nprint(solution())\n```\n\nThis code calculates the sector's concentration ratio for the top four companies based on the market share data provided."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-921",
        "python_solution": "",
        "ground_truth": null,
        "question": "An investment fund implements the succeeding payment structure: Yearly administrative fee based on year-end AUM: 2% Incentive fee: 20% Initial requirement rate before incentive fee starts: 4% Present top earning point: $610 million. The fund starts off the year with a value of $580 million and after one year, it ends with a value of $650 million before the fees are considered. What is the annual net percentage return to a shareholder for this year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 580_000_000\n    end_value_before_fees = 650_000_000\n    annual_admin_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    initial_requirement_rate = 0.04\n    top_earning_point = 610_000_000\n\n    # Calculate administrative fee\n    admin_fee = end_value_before_fees * annual_admin_fee_rate\n\n    # Calculate net value after administrative fee\n    net_value_after_admin_fee = end_value_before_fees - admin_fee\n\n    # Calculate the point above which incentive fee applies\n    applicable_incentive_base = max(0, end_value_before_fees - top_earning_point)\n\n    # Calculate incentive fee if applicable\n    incentive_fee = applicable_incentive_base * incentive_fee_rate\n\n    # Calculate net value after all fees\n    net_value_after_all_fees = net_value_after_admin_fee - incentive_fee\n\n    # Calculate annual net percentage return to a shareholder\n    net_return_percentage = ((net_value_after_all_fees / initial_value) - 1) * 100\n\n    # return answer\n    return net_return_percentage\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the annual net percentage return to a shareholder considering the administrative fee and the incentive fee as per the given requirements."
        ]
    },
    {
        "tables": [
            "| Revenue | $1,000,000 |\n|---------|------------|\n| Returns of goods sold | $100,000 |\n| Cash collected | $800,000 |\n| Cost of goods sold | $700,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-922",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, which was its inaugural year of operations, GameSquare recorded certain data concerning the sale of its products. Under the accrual basis of accounting, how much net revenue would appear on GameSquare's 2009 income statement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 1000000\n    returns_of_goods_sold = 100000\n\n    # Do math calculation to get the answer\n    net_revenue = revenue - returns_of_goods_sold\n\n    # return answer\n    return net_revenue\n```\n\nIn this program, we first define the variables for the total revenue and the returns of goods sold as provided in the table. We then calculate the net revenue by subtracting the returns of goods sold from the total revenue. The result is the net revenue that would appear on GameSquare's 2009 income statement under the accrual basis of accounting."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-923",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financial advisor was requested to look for opportunities for arbitrage in the market of Treasury bonds through a comparison of the cash flows from some selected bonds and the cash flows of other bond combinations. If the price of a 1-year zero-coupon bond is USD 97 and a 1-year bond with a 7% coupon and payments every six months comes at USD 102, using a duplication method, what would be the cost of a 1-year Treasury bond with a 6% coupon that has semi-annual payments?",
        "output": [
            " Sure! Let's break down the problem step-by-step and then generate the Python program accordingly.\n\n### Given:\n1. The price of a 1-year zero-coupon bond is USD 97.\n2. The price of a 1-year bond with a 7% coupon and semi-annual payments is USD 102.\n\n### To Find:\n- The cost of a 1-year Treasury bond with a 6% coupon that has semi-annual payments.\n\n### Steps:\n1. **Calculate the yield based on the 1-year zero-coupon bond.**\n   - Formula: \\( \\text{Yield} = \\left( \\frac{\\text{Face Value}}{\\text{Price}} - 1 \\right) \\times 100 \\)\n   - Let \\( \\text{Face Value} = 100 \\)\n\n2. **Calculate the semi-annual yield from the 7% coupon bond.**\n   - Calculate the cash flows from the 7% bond and then determine the implied semi-annual yield.\n\n3. **Determine the cost of the 6% coupon bond using the determined yield.**\n\nHere's the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    zero_coupon_price = 97\n    coupon_bond_price = 102\n    face_value = 100\n    zero_coupon_yield = ((face_value / zero_coupon_price) - 1) * 100\n\n    # Calculate semi-annual yield using zero-coupon yield\n    zero_coupon_semi_annual_yield = zero_coupon_yield / (2 * 100)\n\n    # PV of the 7% bond cash flows should equal its price\n    coupon_rate_7pct = 0.07\n    cash_flows_7pct = [(coupon_rate_7pct / 2) * face_value, (coupon_rate_7pct / 2) * face_value + face_value]\n    PV_7pct = sum([cf / (("
        ]
    },
    {
        "tables": [
            "|                | Investment A | Investment B | Total |\n|----------------|--------------|--------------|-------|\n| Initial cost   | 100          | 150          | 250   |\n| Profit/loss    | -50          | 30           | -20   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-924",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the subsequent details (in $ millions) regarding a private investment fund: The supervisor's reward fee is 20% of the earnings. If there is no clawback clause applicable, the total reward fee (in $ millions) under a U.S.-style waterfall is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_cost_A = 100\n    initial_cost_B = 150\n    profit_loss_A = -50\n    profit_loss_B = 30\n    total_initial_cost = initial_cost_A + initial_cost_B\n    total_profit_loss = profit_loss_A + profit_loss_B\n\n    # Calculate earnings for each investment\n    earnings_A = initial_cost_A + profit_loss_A\n    earnings_B = initial_cost_B + profit_loss_B\n\n    # Calculate supervisor's reward fee for each investment\n    reward_fee_A = 0    # No earnings for Investment A\n    reward_fee_B = 0.20 * earnings_B if earnings_B > 0 else 0\n\n    # Calculate total reward fee\n    total_reward_fee = reward_fee_A + reward_fee_B\n\n    # Return the total reward fee\n    return total_reward_fee\n\n# Run the solution function\nsolution()\n```\n\nIn this program, we calculate the earnings for each investment and then determine the supervisor's reward fee, which is 20% of the positive earnings. If the earnings are non-positive, the reward fee is set to zero. Finally, the program returns the total reward fee."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-925",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the stated price of an option is $1.25, what is the value of a single option contract?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    option_price = 1.25\n    number_of_shares = 100 # A standard option contract covers 100 shares\n\n    # Do math calculation to get the answer\n    value_of_option_contract = option_price * number_of_shares\n\n    # return answer\n    return value_of_option_contract\n```\n\nThe program defines the price of a single option and calculates the value of a single option contract (which typically covers 100 shares) accordingly."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-926",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the yearly yield-to-maturity, noted with a 12 period frequency, for a 4-year, zero coupon bond priced at 75% of par value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming par value is $1000\n    market_price = 0.75 * face_value  # Bond priced at 75% of par value\n    years_to_maturity = 4  # 4-year bond\n    periods = 12  # 12 periods per year\n\n    # Do math calculation to get the answer\n    yield_to_maturity = (face_value / market_price)**(1 / (years_to_maturity * periods)) - 1\n    yearly_yield = yield_to_maturity * periods\n\n    # return answer\n    return yearly_yield\n```\n\nThis program calculates the yearly yield-to-maturity for a 4-year, zero coupon bond priced at 75% of its par value, taking into account a 12 period frequency."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-927",
        "python_solution": "",
        "ground_truth": null,
        "question": "The analyst, Jane, performed a straightforward regression that accounted for the changes in electric usage based on temperature fluctuations. The total variation for the dependent variable totaled 132.08, with the explained variation being 60.38. She made 60 observations on a monthly basis. Can you compute the F-statistic to assess the model's fit?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_variation = 132.08\n    explained_variation = 60.38\n    observations = 60\n    num_parameters = 1  # Assuming a simple linear regression with 1 predictor\n\n    # Do math calculation to get the answer\n    unexplained_variation = total_variation - explained_variation\n    explanatory_var = explained_variation / num_parameters\n    residual_var = unexplained_variation / (observations - num_parameters - 1)\n    F_statistic = explanatory_var / residual_var\n\n    # return answer\n    return F_statistic\n\n# Example usage\nprint(solution())\n```\n\nThis Python program defines a function `solution()` that computes the F-statistic for assessing the model's fit based on the provided total variation, explained variation, and number of observations. The result is then returned as the answer. The print statement at the end demonstrates how to call the function and see the output."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-928",
        "python_solution": "",
        "ground_truth": null,
        "question": "A one-year zero-coupon bond has a return of 4.0%. The yields on a two-year and a three-year zero-coupon bond are 5.0% and 6.0% respectively. What would be the forward rate for a loan for two years starting in one year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    one_year_yield = 0.04\n    two_year_yield = 0.05\n    three_year_yield = 0.06\n\n    # Do math calculation to get the answer\n    # The formula for the forward rate f for two years starting in one year is:\n    # (1 + 3-year yield)^3 / (1 + 1-year yield) - 1 = (1 + f)^2\n    # Solving for (1 + f)^2 gives:\n\n    forward_rate_squared = ((1 + three_year_yield) ** 3) / (1 + one_year_yield)\n    forward_rate = forward_rate_squared ** (1/2) - 1\n\n    # Convert the forward rate to percentage and round to two decimal places\n    forward_rate_percentage = round(forward_rate * 100, 2)\n\n    # return answer\n    return forward_rate_percentage\n\n# Example usage\nanswer = solution()\nprint(\"The forward rate for a loan for two years starting in one year is:\", answer)\n```\n\nThis Python program calculates the forward rate for a loan for two years starting in one year, using the given yields for one-year, two-year, and three-year zero-coupon bonds. The result is returned and printed as a percentage rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-929",
        "python_solution": "",
        "ground_truth": null,
        "question": "Four years ago, Mike deposited $2,000 into his savings account for home renovations, it compounded annually at an annual interest rate of 3%. Now, Mike has altered his plan and has decided to leave the money in the bank for an additional five years. What is the current value of Mike's account?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_amount = 2000\n    interest_rate = 0.03\n    initial_years = 4\n    additional_years = 5\n\n    # Calculate the current value after 4 years\n    current_value = initial_amount * (1 + interest_rate) ** initial_years\n\n    # Calculate the value after an additional 5 years\n    future_value = current_value * (1 + interest_rate) ** additional_years\n\n    # return answer\n    return future_value\n```"
        ]
    },
    {
        "tables": [
            "| Asset Class     | Geometric Return (%) |\n| --------------- | -------------------- |\n| Equities        | 8.0                  |\n| Corporate Bonds | 6.5                  |\n| Treasury bills  | 2.5                  |\n| Inflation       | 2.1                  |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-930",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the actual yield for stocks, as per the historic geometric returns observed by a research analyst?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    equity_geometric_return = 8.0\n\n    # The actual yield for stocks is directly the geometric return observed.\n    actual_yield_stocks = equity_geometric_return\n\n    # return answer\n    return actual_yield_stocks\n\n# Execute the function to get the answer\nprint(solution())\n```\n\nThis program defines the historical geometric return for equities and returns it as the actual yield for stocks."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-931",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming quarterly compounding, what is the stated annual interest rate if a financial institution offers an effective annual rate (EAR) of 12%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    EAR = 0.12  # Effective Annual Rate\n    n = 4  # Number of compounding periods per year (quarterly)\n\n    # Do math calculation to get the answer\n    # Using the formula for the stated annual interest rate with quarterly compounding:\n    # i = (1 + EAR)^(1/n) - 1\n    # Stated annual interest rate is i * n\n    i = (1 + EAR)**(1/n) - 1\n    answer = i * n\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "|                        | Maturity (Years) |     |     |     |\n|------------------------|------------------|-----|-----|-----|\n|                        | 1                | 2   | 3   | 4   |\n| Government spot rate   | 2.25%            | 2.70% | 3.30% | 4.05% |\n| Swap spread            | 0.25%            | 0.30% | 0.45% | 0.70% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-932",
        "python_solution": "",
        "ground_truth": null,
        "question": "Johnson collects data on spot rates for on-the-run yearly-coupon government securities and swap spreads, as shown in the Exhibit below. Johnson purchases a four-year, zero-coupon corporate bond and then sells it after two years. Johnson demonstrates the returns from this approach using the swap rate as a substitute for corporate yields. What should Johnson display as a total return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    government_spot_rate_1y = 0.0225\n    government_spot_rate_2y = 0.0270\n    government_spot_rate_3y = 0.0330\n    government_spot_rate_4y = 0.0405\n    swap_spread_1y = 0.0025\n    swap_spread_2y = 0.0030\n    swap_spread_3y = 0.0045\n    swap_spread_4y = 0.0070\n\n    # Calculate swap rates\n    swap_rate_1y = government_spot_rate_1y + swap_spread_1y\n    swap_rate_2y = government_spot_rate_2y + swap_spread_2y\n    swap_rate_3y = government_spot_rate_3y + swap_spread_3y\n    swap_rate_4y = government_spot_rate_4y + swap_spread_4y\n\n    # Calculate the price of a four-year zero-coupon corporate bond\n    face_value = 1000  # Example face value of the bond\n    price_4y_zero_coupon = face_value / (1 + swap_rate_4y) ** 4\n\n    # Calculate the price of a two-year zero-coupon corporate bond\n    price_2y_zero_coupon = face_value / (1 + swap_rate_2y) ** 2\n\n    # Calculate the total return\n    total_return = (price_2y_zero_coupon / price_4y_zero_coupon - 1) * 100\n\n    # return answer\n    return total_return\n\n# Run the function to get the solution\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-933",
        "python_solution": "",
        "ground_truth": null,
        "question": "If an investment advisor has a bond position valued at USD 100 million with a modified duration of eight years and a convexity of 150 years, with the term structure being flat, what would be the change in the position's value if interest rates were to rise by 25 basis points?",
        "output": [
            " Certainly! Below is the Python program to calculate the change in the bond position's value given the provided parameters:\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_value = 100_000_000  # in USD\n    modified_duration = 8  # in years\n    convexity = 150  # in years\n    change_in_rates = 0.0025  # 25 basis points = 0.25% = 0.0025\n\n    # Do math calculation to get the answer\n    change_in_value = (-modified_duration * change_in_rates * bond_value) + (0.5 * convexity * (change_in_rates ** 2) * bond_value)\n\n    # return answer\n    return change_in_value\n\n# Call the solution function to get the result\nresult = solution()\nprint(\"Change in the position's value:\", result)\n```\n\nThis program calculates the change in the value of the bond position using the bond valuation formula that considers both modified duration and convexity. You can run this program to find out the change in the bond\u2019s value if interest rates were to rise by 25 basis points."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-934",
        "python_solution": "",
        "ground_truth": null,
        "question": "The women's apparel producer, Ivory Ensign, recorded a $20 million expense in salaries. The initial balance of payable salaries was at $3 million and eventually ended at $1 million. How much in salaries did the firm distribute in cash?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    expense_salaries = 20_000_000\n    initial_balance_payable_salaries = 3_000_000\n    final_balance_payable_salaries = 1_000_000\n\n    # Do math calculation to get the answer\n    cash_distributed_in_salaries = expense_salaries + initial_balance_payable_salaries - final_balance_payable_salaries\n\n    # return answer\n    return cash_distributed_in_salaries\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-935",
        "python_solution": "",
        "ground_truth": null,
        "question": "The annual spot rate r(1) is 5% and the forward price for a one-year zero-coupon bond starting in a year stands at 0.9346. What would be the spot price of a two-year zero-coupon bond?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.05  # Annual spot rate for year 1 (5%)\n    forward_price = 0.9346  # Forward price for a one-year zero-coupon bond starting in a year\n\n    # Do math calculation to get the answer\n    # Calculate the spot price of a two-year zero-coupon bond using the formula:\n    # P(0,2) = P(0,1) * P(1,2) / (1 + r1)\n    spot_price_two_year = 1 / (1 + r1) * forward_price\n\n    # return answer\n    return spot_price_two_year\n```\n\nYou can use the function `solution()` to get the spot price of the two-year zero-coupon bond. This function utilizes the given annual spot rate for the first year and the forward price for a one-year zero-coupon bond starting in a year to compute the desired spot price."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-936",
        "python_solution": "",
        "ground_truth": null,
        "question": "The possibility of a variable, which follows a normal distribution with an average of 0.9 and a standard deviation of 1.5, being in the range of 0.9 and 1.2 is:",
        "output": [
            " ```python\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    mean = 0.9\n    std_dev = 1.5\n\n    # Define the range\n    lower_bound = 0.9\n    upper_bound = 1.2\n\n    # Calculate the probability using the cumulative distribution function (CDF)\n    prob_lower = norm.cdf(lower_bound, loc=mean, scale=std_dev)\n    prob_upper = norm.cdf(upper_bound, loc=mean, scale=std_dev)\n\n    # Calculate the probability of being in the range [lower_bound, upper_bound]\n    answer = prob_upper - prob_lower\n\n    # return answer\n    return answer\n\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-937",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2009, Pelican Enterprises reported a net profit of $1,000,000. On the first of January, 2009, there were 1,000,000 shares in circulation. The company issued an additional 100,000 shares at $20 per share on July 1, 2009. Common shareholders received $200,000 in dividends. What is the basic earnings per share for Pelican Enterprises for the year 2009?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_profit = 1000000\n    initial_shares = 1000000\n    additional_shares = 100000\n    dividends_paid = 200000\n    share_price = 20\n\n    # Do math calculation to get the answer\n    weighted_average_shares = initial_shares + (additional_shares * (6 / 12))  # Additional shares weighed for 6 out of 12 months\n    adjusted_net_profit = net_profit - dividends_paid\n    basic_earnings_per_share = adjusted_net_profit / weighted_average_shares\n\n    # return answer\n    return basic_earnings_per_share\n```\n\nThis Python program calculates the basic earnings per share for Pelican Enterprises for the year 2009, taking into account the weighted average number of shares and the adjustment for dividends paid."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-938",
        "python_solution": "",
        "ground_truth": null,
        "question": "A company is planning to acquire 10,000 barrels of West Texas Intermediate Crude Oil and intends to hedge its purchase utilizing the Brent Crude Oil futures contract. Given that the correlation between the spot and futures prices is 0.72 and the annual volatility of the spot price and the Brent Crude Oil futures price are 0.35 and 0.27 respectively, what is the hedge ratio for the company?",
        "output": [
            " Certainly! Here is the Python program to calculate the hedge ratio based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    correlation = 0.72\n    spot_volatility = 0.35\n    futures_volatility = 0.27\n\n    # Do math calculation to get the answer\n    hedge_ratio = correlation * (spot_volatility / futures_volatility)\n\n    # return answer\n    return hedge_ratio\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program calculates the hedge ratio using the provided correlation between the spot and futures prices, along with their respective annual volatilities. The formula used to calculate the hedge ratio is:\n\n\\[ \\text{Hedge Ratio} = \\text{Correlation} \\times \\left( \\frac{\\text{Spot Volatility}}{\\text{Futures Volatility}} \\right) \\]"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-939",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the cost per 100 of face value for a bond offering a 3% annual interest rate that will mature in two years, given a market discount rate of 4%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    annual_interest_rate = 0.03\n    years_to_maturity = 2\n    market_discount_rate = 0.04\n\n    # Do math calculation to get the answer\n    # Calculate the present value of the bond\n    present_value_of_interest = annual_interest_rate * face_value * (1 - (1 + market_discount_rate) ** -years_to_maturity) / market_discount_rate\n    present_value_of_principal = face_value / (1 + market_discount_rate) ** years_to_maturity\n    bond_price = present_value_of_interest + present_value_of_principal\n\n    answer = bond_price\n\n    # return answer\n    return answer\n```\n\nExplanation:\n1. Define the face value, annual interest rate, years to maturity, and market discount rate.\n2. Calculate the present value of the bond's interest payments using the annuity formula.\n3. Calculate the present value of the bond's principal payment.\n4. Add the present value of the interest payments to the present value of the principal payment to get the bond price.\n5. Return the bond price."
        ]
    },
    {
        "tables": [
            "| coupon | 15% annual-pay coupon |\n| --- | --- |\n| years to maturity | 7 years |\n| current price | trading at par |\n| basis point change in yield | 25 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-940",
        "python_solution": "",
        "ground_truth": null,
        "question": "Estimate the approximate modified duration of the bond given the details below:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_coupon_rate = 0.15  # 15% annual-pay coupon\n    years_to_maturity = 7\n    current_price = 100  # trading at par\n    basis_point_change = 0.0025  # 25 basis points\n\n    # Calculate the Macaulay Duration\n    # Sum (t * CFt / (1 + y)^(t+1)) / Sum (CFt / (1 + y)^t)\n    y = annual_coupon_rate\n    macaulay_duration = 0\n\n    for t in range(1, years_to_maturity + 1):\n        CFt = annual_coupon_rate * 100 if t < years_to_maturity else annual_coupon_rate * 100 + 100\n        macaulay_duration += t * CFt / ((1 + y) ** (t + 1))\n\n    macaulay_duration /= sum([(annual_coupon_rate * 100 if t < years_to_maturity else annual_coupon_rate * 100 + 100) / ((1 + y) ** t) for t in range(1, years_to_maturity + 1)])\n\n    # Calculate the Modified Duration\n    modified_duration = macaulay_duration / (1 + y)\n\n    # return the answer\n    return modified_duration\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The approximate modified duration of the bond is: {answer:.2f}\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-941",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier purchases a Treasury bill that matures in one month for $987. When it matures, he receives $1,000. Work out the effective annual rate (EAR) for him.",
        "output": [
            " Sure, let's calculate the effective annual rate (EAR) using Python. The EAR can be calculated using the formula:\n\n\\[ \\text{EAR} = \\left(1 + \\frac{\\text{Interest}}{\\text{Principal}}\\right)^{\\frac{\\text{Number of periods in a year}}{\\text{Number of periods}}} - 1 \\]\n\nIn this case, the time period is 1 month, so there are 12 periods in a year. The interest is the difference between the maturity value and the purchase price.\n\nHere is the Python code to calculate the EAR:\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 987\n    maturity_value = 1000\n    interest = maturity_value - purchase_price\n    periods_in_year = 12\n\n    # Do math calculation to get the answer\n    ear = (1 + (interest / purchase_price)) ** periods_in_year - 1\n    ear_percentage = ear * 100\n\n    # Return answer\n    return ear_percentage\n\n# Execute the solution to get the answer\nanswer = solution()\nprint(\"The Effective Annual Rate (EAR) is:\", round(answer, 2), \"%\")\n```\n\nHere, the function `solution` calculates the effective annual rate and returns it as a percentage. The final line executes the function and prints the formatted result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-942",
        "python_solution": "",
        "ground_truth": null,
        "question": "Firm B declared COGS of $50 million. Over the year, there was an increase of $8 million in inventory and a decrease of $5 million in accounts payable. What is the total cash the firm paid to its suppliers?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cogs = 50_000_000\n    increase_in_inventory = 8_000_000\n    decrease_in_accounts_payable = 5_000_000\n\n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cogs + increase_in_inventory - decrease_in_accounts_payable\n\n    # return answer\n    return cash_paid_to_suppliers\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-943",
        "python_solution": "",
        "ground_truth": null,
        "question": "In New York, Mia peddles homemade cakes. On a daily basis, she can sell 250 cakes at $10 each. On Mother's Day, she offers a special discount and anticipates a sale of 350 cakes at the discounted rate of $8 per cake. What is the marginal revenue per cake she earns from the special discount?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    daily_quantity = 250\n    daily_price = 10\n    special_quantity = 350\n    special_price = 8\n\n    # Do math calculation to get the answer\n    daily_revenue = daily_quantity * daily_price\n    special_revenue = special_quantity * special_price\n    marginal_revenue = special_revenue - daily_revenue\n    marginal_revenue_per_cake = marginal_revenue / (special_quantity - daily_quantity)\n\n    # return answer\n    return marginal_revenue_per_cake\n\n# Call the solution function to get the result\nresult = solution()\nprint(result)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-944",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond has an annual coupon rate of 4%, and it pays interest twice a year, and is due in two years. Given a 6% market discount rate, what is the cost of this bond for every 100 of nominal value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    nominal_value = 100\n    coupon_rate = 0.04\n    market_discount_rate = 0.06\n    periods_per_year = 2\n    years_to_maturity = 2\n    total_periods = years_to_maturity * periods_per_year\n\n    # Do math calculation to get the answer\n    # Calculate the coupon payment per period\n    coupon_payment = nominal_value * coupon_rate / periods_per_year\n\n    # Calculate the present value of the coupon payments\n    pv_coupons = 0\n    for t in range(1, total_periods + 1):\n        pv_coupons += coupon_payment / (1 + market_discount_rate / periods_per_year) ** t\n\n    # Calculate the present value of the nominal value\n    pv_nominal = nominal_value / (1 + market_discount_rate / periods_per_year) ** total_periods\n\n    # Calculate the total cost of the bond\n    bond_cost = pv_coupons + pv_nominal\n\n    # return answer\n    return bond_cost\n```\n\nThis program calculates the cost of the bond based on the given coupon rate, market discount rate, number of years to maturity, and the nominal value of the bond. It considers the fact that the bond pays interest semiannually."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-945",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a portfolio contains two investments, both of equal value, with a VaR of $15 million and $30 million respectively, and if these two investments are perfectly correlated, what would be the calculated VaR of the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    var_investment1 = 15_000_000\n    var_investment2 = 30_000_000\n\n    # Do math calculation to get the answer\n    portfolio_var = var_investment1 + var_investment2\n\n    # return answer\n    return portfolio_var\n```\n\nExplanation:\n- When two investments are perfectly correlated, the combined Value at Risk (VaR) of the portfolio is simply the sum of the individual VaRs.\n- The program defines the VaR of the two investments, computes the sum, and returns the result."
        ]
    },
    {
        "tables": [
            "| | | Year 1 | Year 2 | Year 3 | Year 4 |\n|---|---|---|---|---|---|\n| | NOI | $1,100,000 | $1,166,000 | $1,236,000 | $1,310,000 |\n| | | **DCF Assumptions** | | | |\n| | | | Investment Hold Period | | 3 years |\n| | | | Going-in Cap Rate | | 5.00% |\n| | | | Terminal Cap Rate | | 6.00% |\n| | | | Discount Rate | | 7.00% |\n| | | | Income /Value  Growth Rate | | Constant |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-946",
        "python_solution": "",
        "ground_truth": null,
        "question": "Based on the given information, what is the worth of Asset A utilizing the direct capitalization approach?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    NOI_year1 = 1100000\n    going_in_cap_rate = 0.05  # 5.00%\n    income_growth_rate = 0.066  # Derived from NOI growth between Year 1 and Year 2: (1166000 - 1100000) / 1100000\n\n    # Do math calculation to get the answer\n    asset_value = NOI_year1 / (going_in_cap_rate - income_growth_rate)\n\n    # return answer\n    return asset_value\n```\n\nExplanation:\n\n1. The Net Operating Income (NOI) for Year 1 is given as $1,100,000.\n2. The Going-in Cap Rate is provided as 5.00%.\n3. The Income / Value Growth Rate is assumed to be constant, and it can be derived from the given NOI growth between Year 1 and Year 2, which is approximately 6.6% (1,166,000 - 1,100,000) / 1,100,000.\n4. Using the direct capitalization approach, the asset value can be calculated using the formula: Asset Value = NOI / (Going-in Cap Rate - Income Growth Rate).\n\nBy substituting the given values into the formula, the worth of Asset A can be determined."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-947",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business offers a two-year, non-refundable service agreement for \u20ac420. Historically, the business anticipates meeting 25% of service expenses in the first year of the contract, with the rest covered in the second year. How much revenue does the business recognize in the first year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 420\n    first_year_expense_percentage = 0.25\n\n    # Do math calculation to get the answer\n    first_year_revenue = total_revenue * first_year_expense_percentage\n\n    # Return answer\n    return first_year_revenue\n\n# Execute the solution function to get the answer\nprint(solution())\n```\n\nThis program defines the total revenue from the service agreement and the percentage of expenses met in the first year. It then calculates the revenue recognized in the first year based on these values and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-948",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Sarah intends to purchase a property five years from now, anticipated to be worth $250,000 then, how much should she invest currently, given an annual rate of 3% that is compounded monthly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    future_value = 250000\n    annual_rate = 0.03\n    years = 5\n    compounding_per_year = 12\n\n    # Do math calculation to get the answer\n    monthly_rate = annual_rate / compounding_per_year\n    total_compounding_periods = years * compounding_per_year\n    present_value = future_value / ((1 + monthly_rate) ** total_compounding_periods)\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Security | Beginning of Period: Price(E) | Beginning of Period: Shares | End of Period: Price(\u20ac) | End of Period: Shares |\n|----------|-------------------------------|-----------------------------|-------------------------|-----------------------|\n| A        | 20.00                         | 300                         | 22.00                   | 300                   |\n| B        | 50.00                         | 300                         | 48.00                   | 300                   |\n| C        | 26.00                         | 2,000                       | 30.00                   | 2,000                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-949",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher collects the following information for a value-weighted index: What is the return on the value-weighted index for the given period?",
        "output": [
            " Sure, let's calculate the return on the value-weighted index for the given period using the provided information.\n\nA value-weighted index return is calculated based on the change in market value (price times shares) of the securities included in the index. The formula for the return \\( R \\) is given by:\n\n\\[ R = \\frac{\\sum(\\text{End Price} \\times \\text{End Shares}) - \\sum(\\text{Begin Price} \\times \\text{Begin Shares})}{\\sum(\\text{Begin Price} \\times \\text{Begin Shares})} \\]\n\nLet's write the Python program to calculate this.\n\n```python\ndef solution():\n    # Define variables name and value\n    securities = {\n        'A': {'begin_price': 20.00, 'begin_shares': 300, 'end_price': 22.00, 'end_shares': 300},\n        'B': {'begin_price': 50.00, 'begin_shares': 300, 'end_price': 48.00, 'end_shares': 300},\n        'C': {'begin_price': 26.00, 'begin_shares': 2000, 'end_price': 30.00, 'end_shares': 2000},\n    }\n\n    # Calculate the beginning and end values\n    begin_value = 0\n    end_value = 0\n\n    for sec in securities:\n        begin_value += securities[sec]['begin_price'] * securities[sec]['begin_shares']\n        end_value += securities[sec]['end_price'] * securities[sec]['end_shares']\n\n    # Calculate the return\n    return_on_index = (end_value - begin_value) / begin_value\n\n    # Return the answer\n    return return_on_index\n\n# Run the function and print the result\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program defines a dictionary of securities with their respective prices and shares at the beginning and end of the period. It then"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-950",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Corporation X employs the double-declining balance method for amortizing a patent worth $120,000 with a useful lifespan of 4 years, what would be the difference in the net book value at the end of the 3rd year if it switched to the straight-line method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 120000\n    useful_lifespan = 4\n    current_year = 3\n\n    # Double-declining balance method\n    double_declining_rate = 2 / useful_lifespan\n\n    # Calculate the net book value after 3 years using double-declining balance method\n    ddb_value_year1 = initial_value * (1 - double_declining_rate)\n    ddb_value_year2 = ddb_value_year1 * (1 - double_declining_rate)\n    ddb_value_year3 = ddb_value_year2 * (1 - double_declining_rate)\n\n    # Straight-line method\n    annual_straight_line_depreciation = initial_value / useful_lifespan\n    straight_line_value_year3 = initial_value - (annual_straight_line_depreciation * current_year)\n\n    # Difference in net book value\n    difference = straight_line_value_year3 - ddb_value_year3\n\n    # return answer\n    return difference\n\n# Print the result\nprint(solution())\n```\n\nThis program calculates the net book value of a patent using both the double-declining balance method and the straight-line method, then finds the difference between these values at the end of the 3rd year."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n| ----------------- | ------- | ---------------------------- |\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% |   |\n| Average annual equity return:4.6% | Year-over-year equity return:-9.4% |   |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E:14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% |   | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% |   | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-951",
        "python_solution": "",
        "ground_truth": null,
        "question": "A financier from Australia presently possesses an equity portfolio worth A$240 million. Based on his evaluation of the risk and return potential of the Australian economy, he is thinking about reconfiguring his portfolio. A table was generated containing data relevant to the Australian investment markets and the economy: Use the data from the table to determine the historical Australian equity risk premium using the \"equity-vs-bonds\" premium approach.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    avg_govt_bond_yield = 0.028  # 2.8% average government bond yield\n    avg_annual_equity_return = 0.046  # 4.6% average annual equity return\n\n    # Do math calculation to get the answer\n    # Historical equity risk premium is the difference between average equity return and average bond yield\n    historical_equity_risk_premium = avg_annual_equity_return - avg_govt_bond_yield\n\n    # return answer\n    return historical_equity_risk_premium\n```\nWhen you call the `solution()` function, it will compute and return the historical Australian equity risk premium using the provided data."
        ]
    },
    {
        "tables": [
            "| acquisition cost | $500,000 |\n|---|---|\n| accumulated depreciation | $90,000 |\n| loss on the sale | $100,000 |"
        ],
        "topic": "Accounting",
        "question_id": "test-952",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the analyst attempting to calculate the selling price of the intangible asset of corporation TDC based on the data provided?",
        "output": [
            " Certainly! Based on the provided data, to calculate the selling price of the intangible asset, we need to take into account the acquisition cost, subtract the accumulated depreciation, and then subtract the loss on the sale. Here is the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 500000\n    accumulated_depreciation = 90000\n    loss_on_sale = 100000\n\n    # Do math calculation to get the answer\n    selling_price = acquisition_cost - accumulated_depreciation - loss_on_sale\n\n    # return answer\n    return selling_price\n```\n\nThis program defines the variables with the given values, performs the necessary calculations, and then returns the selling price of the intangible asset."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-953",
        "python_solution": "",
        "ground_truth": null,
        "question": "By utilizing the two-stage dividend discount model, John has appraised the worth of Corporation N. The firm has given a dividend of $1 per share in the latest year. In this model, it is forecasted that the dividend will have an annual growth of 10% for the initial three years, then continue to grow at a rate of 5% per year indefinitely. With a required return rate of 10%, what is the present value of Corporation N's stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    D0 = 1          # Dividend per share in the latest year\n    g1 = 0.10       # Growth rate for the first stage (3 years)\n    g2 = 0.05       # Growth rate for the second stage (forever)\n    r = 0.10        # Required return rate\n    n = 3           # Number of years for the first stage\n\n    # Calculate the dividends for the initial three years\n    D1 = D0 * (1 + g1)\n    D2 = D1 * (1 + g1)\n    D3 = D2 * (1 + g1)\n\n    # Calculate the present value of the dividends for the initial three years\n    PV_dividends = (D1 / (1 + r)) + (D2 / ((1 + r) ** 2)) + (D3 / ((1 + r) ** 3))\n\n    # Calculate the terminal value at the end of year 3\n    terminal_value = (D3 * (1 + g2)) / (r - g2)\n\n    # Calculate the present value of the terminal value\n    PV_terminal_value = terminal_value / ((1 + r) ** n)\n\n    # Calculate the present value of Corporation N's stock\n    present_value = PV_dividends + PV_terminal_value\n\n    # return answer\n    return present_value\n\n# Test the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-954",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the following spot rates term structure: 1-year at 2.50%, 2-year at 3.00%, 3-year at 3.50%, 4-year at 4.00%, and 5-year at 4.50%, can you calculate the two-year forward rate that begins after three years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_3_year = 3.50 / 100  # convert percentage to decimal\n    spot_rate_5_year = 4.50 / 100  # convert percentage to decimal\n    year_3 = 3\n    year_5 = 5\n\n    # Do math calculation to get the answer\n    # Calculate zero-coupon prices using the formula (1 + r)^n\n    zero_coupon_price_3_year = 1 / (1 + spot_rate_3_year) ** year_3\n    zero_coupon_price_5_year = 1 / (1 + spot_rate_5_year) ** year_5\n\n    # Calculate the forward rate for the 2-year period starting after 3 years\n    forward_rate_2_year = ((1 / zero_coupon_price_5_year) / (1 / zero_coupon_price_3_year) - 1) / 2\n\n    # Convert the forward rate from decimal back to percentage\n    forward_rate_2_year_percentage = forward_rate_2_year * 100\n\n    # return answer\n    return forward_rate_2_year_percentage\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nExplanation:\n- We first define the spot rates for the 3-year and 5-year periods and convert them from percentages to decimals.\n- We calculate the zero-coupon prices for the 3-year and 5-year periods using the formula for zero-coupon bonds.\n- We then calculate the 2-year forward rate starting after 3 years using the relationship between the spot rates and the forward rates.\n- Finally, we return the forward rate converted back to a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-955",
        "python_solution": "",
        "ground_truth": null,
        "question": "A researcher ascertains that roughly 99% of the daily sales observations for a firm fall within the $230,000 to $480,000 bracket, with the sales being distributed normally. If about 99% of all observations fit in the \u03bc\u00b13\u03c3 range, what is the standard deviation of the corporation's daily sales when using the approximate z-value instead of the accurate table?",
        "output": [
            " Sure! Below is a Python program to calculate the standard deviation of the corporation's daily sales using the given information.\n\n```python\ndef solution():\n    # Define variables name and value\n    lower_bound = 230000\n    upper_bound = 480000\n    z_value = 3  # Approximate z-value for the 99% confidence interval\n\n    # Calculate the mean (\u03bc) using the middle point of the range\n    mean = (lower_bound + upper_bound) / 2\n\n    # Calculate the standard deviation (\u03c3)\n    standard_deviation = (upper_bound - mean) / z_value\n\n    # return answer\n    return standard_deviation\n\n# Call the function to get the answer\nprint(solution())\n```\n\nIn this program:\n- We define the lower and upper bounds of the daily sales (`lower_bound` and `upper_bound`).\n- We use the approximate z-value (`z_value`) for the 99% confidence interval, which is 3.\n- We calculate the mean (`mean`) of the sales range.\n- We then use the formula for standard deviation in the context of a normal distribution to calculate `standard_deviation`.\n- Finally, the function returns the calculated standard deviation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-956",
        "python_solution": "",
        "ground_truth": null,
        "question": "XYZ corporation rents a machine for its operations for a duration of 6 years with an annual payment of $3000, an 8% interest rate, under an operating lease, what is the present value of the lease payment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 3000\n    duration_years = 6\n    interest_rate = 0.08\n\n    # Do math calculation to get the answer\n    present_value_lease = 0\n    for year in range(1, duration_years + 1):\n        present_value_lease += annual_payment / ((1 + interest_rate) ** year)\n\n    # return answer\n    return present_value_lease\n```\n\nThis program defines the relevant variables (annual payment, duration in years, and interest rate) and then calculates the present value of lease payments using a loop to sum up the discounted values of each annual payment over the lease period. The result is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-957",
        "python_solution": "",
        "ground_truth": null,
        "question": "If in 2016, Serena purchased a machine for $50,000 that has a useful life of ten years and a residual value of $5,000, what would the depreciation of this machine be in 2017 if we use the straight-line method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost = 50000\n    useful_life = 10\n    residual_value = 5000\n\n    # Do math calculation to get the answer\n    depreciable_cost = cost - residual_value\n    annual_depreciation = depreciable_cost / useful_life\n\n    # return answer\n    return annual_depreciation\n```\n\nThis program calculates the annual depreciation using the straight-line method. The depreciation is determined by subtracting the residual value from the original cost and then dividing by the useful life of the asset."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-958",
        "python_solution": "",
        "ground_truth": null,
        "question": "On the 1st of January, a company releases ten-year bonds with a principal amount of \u20ac10,000,000 and with yearly interest payments due every 31st of December. The coupon rate is 2.0 percent, and the effective interest rate is 3.0 percent. By applying the effective interest rate method, what is the amortized discount at the conclusion of the first year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 10000000\n    coupon_rate = 0.02\n    effective_rate = 0.03\n\n    # Do math calculation to get the answer\n    annual_coupon_payment = principal * coupon_rate\n    future_value = principal * (1 + effective_rate)\n    present_value_of_future_value = future_value / (1 + effective_rate)\n    amortized_discount = principal - present_value_of_future_value\n\n    # return answer\n    return amortized_discount\n```\n\nIn this Python program, the steps involve defining the principal amount, the coupon rate, and the effective interest rate. We then calculate the annual coupon payment, the future value of the bond after one year, and the present value of this future value. The amortized discount is the difference between the principal amount and the present value of the future value. The answer returned by the program is the amortized discount at the conclusion of the first year."
        ]
    },
    {
        "tables": [
            "| Balance Sheet Item                          | 12/31/2016 | 12/31/2017 |\n| ------------------------------------------- | ---------- | ---------- |\n| Common stock                                | $50        | $55        |\n| Additional paid-in capital  common stock    | $80        | $100       |\n| Retained earnings                           | $95        | $150       |"
        ],
        "topic": "Accounting",
        "question_id": "test-959",
        "python_solution": "",
        "ground_truth": null,
        "question": "The net income reported by Corporation B was $56 million. Given the subsequent balance sheets (in $millions), what was the known net financing cash flows for 2017? The assumption is that dividends paid are considered as CFF.",
        "output": [
            " Certainly! To solve the problem, we need to calculate the net financing cash flows (CFF) for Corporation B for the year 2017. The formula to calculate CFF can be expressed as follows:\n\n\\[ CFF = \\text{Increase in Common Stock} + \\text{Increase in Additional Paid-in Capital} - \\text{Dividends Paid} \\]\n\nGiven:\n- Net Income: $56 million\n- Dividends Paid = Net Income - Net increase in Retained Earnings\n\nFrom the balance sheet:\n- Retained Earnings on 12/31/2016: $95 million\n- Retained Earnings on 12/31/2017: $150 million\n\nFirst, calculate the increase in each component:\n- Increase in Common Stock = $5 million (since $55 million - $50 million)\n- Increase in Additional Paid-in Capital = $20 million (since $100 million - $80 million)\n- Increase in Retained Earnings = $55 million (since $150 million - $95 million)\n\nDividends Paid = Net Income - Increase in Retained Earnings:\n- Dividends Paid = $56 million - $55 million = $1 million\n\nNow, calculate the CFF:\n\\[ CFF = (\\$5 \\text{ million} + \\$20 \\text{ million}) - \\$1 \\text{ million} = \\$24 \\text{ million} \\]\n\nHere is the corresponding Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 56  # in $millions\n    retained_earnings_2016 = 95  # in $millions\n    retained_earnings_2017 = 150  # in $millions\n    common_stock_2016 = 50  # in $millions\n    common_stock_2017 = 55  # in $millions\n    additional_paid_in_capital_2016 = 80  # in $mill"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "test-960",
        "python_solution": "",
        "ground_truth": null,
        "question": "If there is a positive parallel shift in the yield curve of 25 basis points, which of the following answers best estimates the resulting change in the value of Michael\u2019s portfolio which contains a fixed-income position with a market value of USD 70 million, a modified duration of 6.44 years, and yields 6.7% compounded semiannually?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_value = 70000000  # USD 70 million\n    modified_duration = 6.44  # years\n    yield_change = 0.0025  # 25 basis points, which is 0.25% or 0.0025 in decimal\n\n    # Do math calculation to get the answer\n    change_in_value = -market_value * modified_duration * yield_change\n\n    # return answer\n    return change_in_value\n```\n\nThis Python program calculates the change in the value of Michael\u2019s portfolio when there is a positive parallel shift in the yield curve of 25 basis points. It uses the formula for estimating the change in the value of a fixed-income position due to a change in interest rates, which is `-market_value * modified_duration * yield_change`. The function `solution` defines the necessary variables, performs the calculation, and returns the estimated change in the portfolio's value."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-961",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assume that the hedge fund known as Global Finance started with an initial capital of $250 million. Global charges a 2% administrative fee based upon assets managed at the close of the year, and a bonus fee of 20% calculated on gains surpassing the 8% mark. The fund's value increased by 16% in its inaugural year. Given that management fees are calculated using end-of-year valuation, what will an investor's net return be, taking into consideration that the performance fee is calculated after the management fee?",
        "output": [
            " Sure! Here is the Python program to calculate the investor's net return considering the given conditions:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 250000000\n    admin_fee_rate = 0.02\n    performance_fee_rate = 0.20\n    hurdle_rate = 0.08\n    fund_growth_rate = 0.16\n\n    # Calculate the end-of-year value of the fund\n    end_of_year_value = initial_capital * (1 + fund_growth_rate)\n\n    # Calculate the administrative fee\n    admin_fee = end_of_year_value * admin_fee_rate\n\n    # Calculate the value after deducting the administrative fee\n    value_after_admin_fee = end_of_year_value - admin_fee\n\n    # Calculate the gains surpassing the 8% mark\n    gains_surpassing_hurdle = value_after_admin_fee - initial_capital * (1 + hurdle_rate)\n\n    # Calculate the performance fee\n    if gains_surpassing_hurdle > 0:\n        performance_fee = gains_surpassing_hurdle * performance_fee_rate\n    else:\n        performance_fee = 0\n\n    # Calculate the value after deducting the performance fee\n    value_after_all_fees = value_after_admin_fee - performance_fee\n\n    # Calculate the net return\n    net_return = (value_after_all_fees / initial_capital - 1) * 100\n\n    # Return the net return\n    return net_return\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The investor's net return is: {answer:.2f}%\")\n```\n\nThis program defines the required variables, performs the necessary calculations to account for administrative and performance fees, and then calculates the net return for the investor."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-962",
        "python_solution": "",
        "ground_truth": null,
        "question": "Every day, a prominent credit card corporation evaluates 10,000,000 transactions for possible scams. Among these transactions, 0.001% are identified as scam attempts. Should their system detect 90% of all scam transactions, while also erroneously flagging 0.0001% of legitimate transactions, what are the chances that a flagged transaction is actually a scam?",
        "output": [
            " Certainly! Below is the Python program that answers the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_transactions = 10000000\n    scam_rate = 0.001 / 100  # 0.001% of all transactions are scams\n    detection_rate = 0.90  # 90% of scam transactions are detected\n    false_positive_rate = 0.0001 / 100  # 0.0001% of legitimate transactions are flagged\n\n    # Calculate the number of actual scams\n    actual_scams = total_transactions * scam_rate\n\n    # Calculate the number of detected scams\n    detected_scams = actual_scams * detection_rate\n\n    # Calculate the number of false positives\n    false_positives = total_transactions * (1 - scam_rate) * false_positive_rate\n\n    # Calculate the total number of flagged transactions\n    total_flagged = detected_scams + false_positives\n\n    # Calculate the probability that a flagged transaction is actually a scam\n    probability = detected_scams / total_flagged\n\n    # Return answer\n    return probability\n\n# Call the solution function to get the result\nresult = solution()\nprint(result)\n```\n\nThis program includes the variables and calculations needed to determine the probability that a flagged transaction is actually a scam. It then returns that probability as the answer. The result is printed at the end."
        ]
    },
    {
        "tables": [
            "| Security | Expected Annual Return(%) | Expected Standard Deviation(%) |\n|---|---|---|\n| A | 20 | 16 |\n| B | 20 | 12 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-963",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming a correlation of -0.8 between two securities, what would be the anticipated standard deviation if the two assets are given equal weight, as recently structured by Laurel, a manager at an investment firm?",
        "output": [
            " Certainly! To calculate the anticipated standard deviation of a portfolio with two securities given their expected annual returns and standard deviations, we can use the formula for the standard deviation of a two-asset portfolio:\n\n\\[ \\sigma_{portfolio} = \\sqrt{w_A^2 \\sigma_A^2 + w_B^2 \\sigma_B^2 + 2 w_A w_B \\rho \\sigma_A \\sigma_B} \\]\n\nWhere:\n- \\( w_A \\) and \\( w_B \\) are the weights of the securities in the portfolio.\n- \\( \\sigma_A \\) and \\( \\sigma_B \\) are the standard deviations of the securities.\n- \\( \\rho \\) is the correlation between the two securities.\n\nIn this case, the securities are equally weighted, so \\( w_A = w_B = 0.5 \\).\n\nHere's the Python program to calculate the anticipated standard deviation:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_return_A = 20.0\n    expected_return_B = 20.0\n    std_dev_A = 16.0\n    std_dev_B = 12.0\n    correlation = -0.8\n    weight_A = 0.5\n    weight_B = 0.5\n\n    # Do math calculation to get the answer\n    portfolio_variance = (weight_A ** 2 * std_dev_A ** 2) + \\\n                         (weight_B ** 2 * std_dev_B ** 2) + \\\n                         (2 * weight_A * weight_B * correlation * std_dev_A * std_dev_B)\n\n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the portfolio variance, and then computes the portfolio standard deviation by taking the square root of the variance. The final answer is returned and can be printed for verification."
        ]
    },
    {
        "tables": [
            "|                                       | $ Millions |\n|---------------------------------------|------------|\n| Short-term borrowing                  | 4,231      |\n| Current portion of long-term interest-bearing debt |    |\n| Long-term interest-bearing debt       | 925        |\n| Average shareholders' equity          | 18,752     |\n| Average total assets                  | 45,981     |"
        ],
        "topic": "Accounting",
        "question_id": "test-964",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the financial leverage ratio for a business, given the provided selected financial data?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    short_term_borrowing = 4231\n    long_term_debt = 925\n    average_shareholders_equity = 18752\n    average_total_assets = 45981\n\n    # Do math calculation to get the answer\n    total_debt = short_term_borrowing + long_term_debt\n    financial_leverage_ratio = total_debt / average_shareholders_equity\n\n    # return answer\n    return financial_leverage_ratio\n\n# Call the solution function to get the result\nresult = solution()\nprint(f\"The financial leverage ratio is {result:.4f}\")\n```\n\nThis Python program defines the necessary variables based on the provided financial data, then calculates the financial leverage ratio by adding the short-term borrowing and long-term debt to find the total debt, and dividing this total debt by the average shareholders' equity. Finally, it returns the financial leverage ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-965",
        "python_solution": "",
        "ground_truth": null,
        "question": "The F(18) is supposed to be what, in a continuous uniform distribution defined as U(5, 15)?",
        "output": [
            " To solve the problem of finding F(18) in a continuous uniform distribution defined as U(5, 15), you'll need to know that the cumulative distribution function (CDF) for a continuous uniform distribution is given by:\n\n\\[ F(x) = \\frac{x - a}{b - a} \\]\n\nwhere \\( a \\) is the lower bound of the distribution, \\( b \\) is the upper bound, and \\( x \\) is the value at which the CDF is to be evaluated.\n\nGiven \\( a = 5 \\), \\( b = 15 \\), and you are asked for \\( F(18) \\):\n\n1. Notice that 18 falls outside the range \\([5, 15]\\), thus, \\( F(18) \\) will be 1 (since the CDF reaches 1 at the upper bound and stays 1 beyond it).\n\nHere's the Python program that calculates this:\n\n```python\ndef solution():\n    # Define variables name and value\n    a = 5\n    b = 15\n    x = 18\n\n    # Do math calculation to get the answer\n    if x < a:\n        answer = 0\n    elif x >= b:\n        answer = 1\n    else:\n        answer = (x - a) / (b - a)\n\n    # return answer\n    return answer\n\n# To see the result\nprint(solution())\n```\n\nThis program checks if \\( x \\) is within the range of \\( a \\) to \\( b \\). If it's outside, it corrects for the boundaries of the CDF. Since \\( x = 18 \\) is greater than \\( b = 15 \\), the CDF \\( F(18) \\) will be 1."
        ]
    },
    {
        "tables": [
            "| Fund | Expected Return | GDP Factor Sensitivity | Inflation Factor Sensitivity |\n|------|-----------------|------------------------|------------------------------|\n| A    | 15%             | 1.2                    | 1                            |\n| B    | 20%             | 2                      | 0.2                          |\n| C    | 10%             | 1.5                    | 0                            |",
            "| Factor     | Forecast | Actual |\n| -----------| ---------| -------|\n| inflation  | 3.5%     | 4.2%   |\n| GDP growth | 6%       | 6.5%   |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-966",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the given chart and the details about inflation and GDP growth data, what is the yield for Portfolio X and Z, made up of a 55% allocation to portfolio X and a 45% allocation to portfolio Z?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    expected_return_A = 0.15\n    gdp_sensitivity_A = 1.2\n    inflation_sensitivity_A = 1\n\n    expected_return_B = 0.20\n    gdp_sensitivity_B = 2\n    inflation_sensitivity_B = 0.2\n\n    expected_return_C = 0.10\n    gdp_sensitivity_C = 1.5\n    inflation_sensitivity_C = 0\n\n    forecast_inflation = 0.035\n    actual_inflation = 0.042\n    difference_inflation = actual_inflation - forecast_inflation\n\n    forecast_gdp = 0.06\n    actual_gdp = 0.065\n    difference_gdp = actual_gdp - forecast_gdp\n\n    allocation_X = 0.55\n    allocation_Z = 0.45\n\n    # Calculate the actual returns for Portfolios X and Z based on proportions\n    actual_return_A = expected_return_A + (gdp_sensitivity_A * difference_gdp) + (inflation_sensitivity_A * difference_inflation)\n    actual_return_B = expected_return_B + (gdp_sensitivity_B * difference_gdp) + (inflation_sensitivity_B * difference_inflation)\n    actual_return_C = expected_return_C + (gdp_sensitivity_C * difference_gdp) + (inflation_sensitivity_C * difference_inflation)\n\n    # Determine the yield for Portfolio X and Z\n    yield_X = actual_return_A  # Assuming Portfolio X corresponds to Fund A\n    yield_Z = actual_return_C  # Assuming Portfolio Z corresponds to Fund C\n\n    # Calculate the weighted average yield\n    total_yield = (allocation_X * yield_X) + (allocation_Z * yield_Z)\n\n    # return answer\n    return total_yield\n\n#"
        ]
    },
    {
        "tables": [
            "| Metric                        |        |\n|-------------------------------|--------|\n| Sales                         | $421,000 |\n| Cost of goods sold (COGS)     | $315,000 |\n| Cash                          | $30,000  |\n| Average accounts receivable   | $40,000  |\n| Average inventories           | $36,000  |\n| Average accounts payable      | $33,000  |"
        ],
        "topic": "Accounting",
        "question_id": "test-967",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the selected financial data given, what is the cash conversion cycle (in days) of the business?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales = 421000\n    cost_of_goods_sold = 315000\n    average_accounts_receivable = 40000\n    average_inventories = 36000\n    average_accounts_payable = 33000\n\n    # Calculate inventory turnover and inventory period\n    inventory_turnover = cost_of_goods_sold / average_inventories\n    inventory_period = 365 / inventory_turnover\n\n    # Calculate receivables turnover and receivables period\n    receivables_turnover = sales / average_accounts_receivable\n    receivables_period = 365 / receivables_turnover\n\n    # Calculate payables turnover and payables period\n    payables_turnover = cost_of_goods_sold / average_accounts_payable\n    payables_period = 365 / payables_turnover\n\n    # Calculate cash conversion cycle\n    cash_conversion_cycle = receivables_period + inventory_period - payables_period\n\n    # return answer\n    return cash_conversion_cycle\n\n# Call the solution to get the answer\nprint(solution())\n```\n\nRunning the `solution` function will give you the cash conversion cycle (in days) of the business based on the given financial data."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-968",
        "python_solution": "",
        "ground_truth": null,
        "question": "If you have a portfolio made up of five shares, how many distinct covariance terms, without considering variances, are needed to compute the return variance of the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    num_shares = 5\n\n    # Do math calculation to get the answer\n    # For n shares, the number of distinct covariance terms is given by n * (n - 1) / 2\n    covariance_terms = num_shares * (num_shares - 1) / 2\n\n    # return answer\n    return int(covariance_terms)\n\n# Run the solution to get the answer\nprint(solution())  # Output should be 10\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-969",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2016, Corporation X had a net income of $20,000 and paid out cash dividends of $1,500 to its common shareholders and another $2,000 to preferred shareholders. At the beginning of the year, there were 20,000 shares of common stock. On July 1st, 1,000 additional shares were issued. What is the Basic EPS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 20000        # Net income in dollars\n    common_dividends = 1500   # Cash dividends paid to common shareholders\n    pref_dividends = 2000     # Cash dividends paid to preferred shareholders\n    initial_common_shares = 20000  # Initial number of common shares\n    additional_common_shares = 1000  # Additional common shares issued on July 1st\n    months_before_issuance = 6      # Months before additional shares were issued\n    total_months = 12               # Total months in the year\n\n    # Calculate the weighted average number of common shares\n    weighted_avg_shares = (initial_common_shares * months_before_issuance +\n                           (initial_common_shares + additional_common_shares) * (total_months - months_before_issuance)) / total_months\n\n    # Calculate net income available to common shareholders\n    net_income_available_to_common = net_income - pref_dividends\n\n    # Calculate Basic EPS\n    basic_eps = net_income_available_to_common / weighted_avg_shares\n\n    # return answer\n    return basic_eps\n\n# Example of running the solution function to get the result\nprint(solution())\n```\n\nThis program calculates the Basic EPS for Corporation X based on the given information. It first computes the weighted average number of common shares and then uses this to find the net income available to common shareholders to determine the Basic EPS."
        ]
    },
    {
        "tables": [
            "|                                            |        |\n|--------------------------------------------|--------|\n| **Exhibit 1  Atlantic Preserves, Inc.**                |        |\n| **Selected Information from Note F of the 2013 Annual Financial Statements** |        |\n| **Relating to the Company's Defined Benefit Pension Plan (in $ thousands)**   |        |\n| Start-of-year pension obligation           | 72,544 |\n| Start-of-year plan assets                  | 60,096 |\n| End-of-year pension obligation             | 74,077 |\n| End-of-year plan assets                    | 61,812 |\n| Current service cost                       | 1,151  |\n| Interest cost                              | 5,441  |\n| Actual return on plan assets               | 5,888  |\n| Expected return on plan assets             | 4,597  |\n| Benefits paid to retired employees         | 5,059  |\n| Employer's contributions                   | 887    |\n| Amortization of past service costs         | 272    |"
        ],
        "topic": "Accounting",
        "question_id": "test-970",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the company Atlantic Preserve prepares its financial statements following U.S. GAAP, what is the reported periodic pension cost on the income statement for 2013 (in $ thousands), as Loris has asked Paul to work out using the data in Exhibit 1?",
        "output": [
            " Certainly! To determine the reported periodic pension cost on the income statement under U.S. GAAP, we need to consider the following components: current service cost, interest cost, expected return on plan assets, amortization of past service costs, and any amortization of gains or losses. Based on the data provided, we will consider the provided components.\n\nHere is the Python program to compute the reported periodic pension cost:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_service_cost = 1151\n    interest_cost = 5441\n    expected_return_on_plan_assets = 4597\n    amortization_of_past_service_costs = 272\n\n    # Do math calculation to get the answer\n    reported_periodic_pension_cost = (current_service_cost + interest_cost\n                                      - expected_return_on_plan_assets\n                                      + amortization_of_past_service_costs)\n\n    # Return the answer\n    return reported_periodic_pension_cost\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThe function `solution` computes the reported periodic pension cost by summing the current service cost, interest cost, and amortization of past service costs, then subtracting the expected return on plan assets. The resulting value is the answer to Loris's question."
        ]
    },
    {
        "tables": [
            "|           | Gross plant and equipments | Accumulated depreciation |\n|-----------|---------------------------|-------------------------|\n| Last year | \u00a3460,000                  | \u00a3110,000                |\n| This year | \u00a3500,000                  | \u00a3120,000                |"
        ],
        "topic": "Accounting",
        "question_id": "test-971",
        "python_solution": "",
        "ground_truth": null,
        "question": "In the latest fiscal report, the depreciation expense for Smiths Ltd. stands at \u00a320,000. Given the company's general information, what is the presumed residual useful life of the factory and machinery?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    last_year_depreciation = 120000 - 110000  # Calculate last year's depreciation\n    this_year_depreciation = 130000 - 120000  # Assumption: Accumulated depreciation this year based on the pattern\n    depreciation_expense = 20000  # Given depreciation expense\n\n    # Do math calculation to get the answer\n    total_accumulated_depreciation = this_year_depreciation\n    total_depreciation_expense = depreciation_expense\n\n    # The presumed residual useful life based on depreciation is calculated as:\n    # residual_useful_life = total_depreciation / total_accumulated_depreciation\n    residual_useful_life = total_depreciation_expense / total_accumulated_depreciation\n\n    # return answer\n    return residual_useful_life\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-972",
        "python_solution": "",
        "ground_truth": null,
        "question": "In nation Y, the odds of a letter sent via the mail service getting to its intended destination are 2/3. Suppose that each mail delivery is not influenced by any other, and if a girlfriend gets a letter from her boyfriend, she will definitely send a reply to him. Imagine a guy in nation Y mails a letter to his girlfriend (also in nation Y) using the mail service. Assuming the guy doesn't get a return letter from his girlfriend, what are the chances that his girlfriend received his letter?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    prob_letter_delivered = 2/3\n    prob_letter_not_delivered = 1 - prob_letter_delivered\n\n    # Calculate probability that the girlfriend did not receive the letter (she didn't reply)\n    prob_no_reply = prob_letter_not_delivered + (prob_letter_delivered * prob_letter_not_delivered)\n\n    # Calculate probability that the girlfriend received the letter, given no reply\n    prob_received_given_no_reply = prob_letter_delivered * prob_letter_not_delivered / prob_no_reply\n\n    # Return answer\n    return prob_received_given_no_reply\n\n# Let's call the function to get the answer\nresult = solution()\nprint(result)\n```\n\nThis Python program defines the variables for the probability of a letter being delivered and not being delivered. It then calculates the probability that there is no reply from the girlfriend and uses that to determine the conditional probability that the girlfriend received the letter given that no reply was received. Finally, it returns that probability as the answer."
        ]
    },
    {
        "tables": [
            "|                   |         |\n|-------------------|---------|\n| Fair value        | $500,000|\n| Costs to sell     | $90,000 |\n| Value in use      | $460,000|\n| Net carrying amount | $600,000|"
        ],
        "topic": "Accounting",
        "question_id": "test-973",
        "python_solution": "",
        "ground_truth": null,
        "question": "Under IFRS, the impairment loss for a machine from company TDC is listed as follows:",
        "output": [
            " Certainly! Under IFRS, the impairment loss for a machine is calculated by the difference between the net carrying amount and the higher of the fair value less costs to sell or the value in use. Here's the Python program to calculate the impairment loss:\n\n```python\ndef solution():\n    # Define variables name and value\n    fair_value = 500000\n    costs_to_sell = 90000\n    value_in_use = 460000\n    net_carrying_amount = 600000\n\n    # Calculate recoverable amount as the higher of fair value less costs to sell or value in use\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n\n    # Calculate impairment loss\n    impairment_loss = net_carrying_amount - recoverable_amount\n\n    # return answer\n    return impairment_loss\n```\n\nThis program defines the necessary variables, calculates the recoverable amount, and then computes the impairment loss based on the difference between the net carrying amount and the recoverable amount. The function then returns the impairment loss."
        ]
    },
    {
        "tables": [
            "| Bond | A   | B   |\n|------|-----|-----|\n| Number of periods to maturity | 4 years | 4 years |\n| Coupon rate | 6% | 9% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-974",
        "python_solution": "",
        "ground_truth": null,
        "question": "If the market discount rate is 5%, what is the variance in the pricing for two bonds per 100 of face value that pay out interest every year?",
        "output": [
            " To solve this problem, we need to calculate the present value of the cash flows for each bond and then determine the variance in the pricing of the two bonds per $100 of face value. The present value of a bond can be computed using the formula for the present value of an annuity and the present value of the face value at maturity.\n\nLet's follow these steps:\n1. Calculate the present value of the annual coupon payments for both bonds.\n2. Calculate the present value of the face value at maturity for both bonds.\n3. Sum the present values of the coupon payments and the face value at maturity to get the total present value for each bond.\n4. Calculate the variance (difference) between the prices of the two bonds.\n\nHere is the Python program to compute the variance in the pricing of the two bonds per $100 of face value:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    market_discount_rate = 0.05\n    periods = 4\n\n    # Bond A\n    coupon_rate_A = 0.06\n    annual_coupon_A = coupon_rate_A * face_value\n    present_value_coupons_A = annual_coupon_A * ((1 - (1 + market_discount_rate) ** -periods) / market_discount_rate)\n    present_value_face_value_A = face_value / (1 + market_discount_rate) ** periods\n    price_bond_A = present_value_coupons_A + present_value_face_value_A\n\n    # Bond B\n    coupon_rate_B = 0.09\n    annual_coupon_B = coupon_rate_B * face_value\n    present_value_coupons_B = annual_coupon_B * ((1 - (1 + market_discount_rate) ** -periods) / market_discount_rate)\n    present_value_face_value_B = face_value / (1 + market_discount_rate) ** periods\n    price_bond_B = present_value_coupons_B + present_value_face"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-975",
        "python_solution": "",
        "ground_truth": null,
        "question": "ABC has a three-year floating rate loan. To hedge the risk of increasing interest rates, the organization is considering entering into an interest rate swap. The notional principle of the floating loan is $5 million, the rate is Libor+1%. The swap's fixed rate is 5% and the floating rate is Libor, with payments made every six months. The notional principle of the swap is also $5 million. What is the first net interest payment?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    notional_principle_loan = 5000000  # $5 million\n    interest_rate_loan = 0.01  # Libor + 1%\n    fixed_rate_swap = 0.05  # 5%\n    notional_principle_swap = 5000000  # $5 million\n    libor = 0.0  # Assuming Libor is zero for the calculation\n\n    # Calculate the floating rate based on Libor + 1%\n    floating_rate = libor + interest_rate_loan\n\n    # Calculate the floating interest payment\n    floating_interest_payment = notional_principle_loan * floating_rate / 2  # Payments every six months\n\n    # Calculate the fixed interest payment\n    fixed_interest_payment = notional_principle_swap * fixed_rate_swap / 2  # Payments every six months\n\n    # Calculate the net interest payment\n    net_interest_payment = floating_interest_payment - fixed_interest_payment\n\n    # return answer\n    return net_interest_payment\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the necessary variables, calculates the floating and fixed interest payments, and then computes the net interest payment. The returned value is the first net interest payment."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-976",
        "python_solution": "",
        "ground_truth": null,
        "question": "In 2017, the net sales of the XYZ corporation were $300,000. Given that accounts receivable fell by $56,000 and accounts payable rose by $9,000, and that the inventory increased by $20,000, what were their cash collections?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_sales = 300000\n    decrease_accounts_receivable = -56000  # Decrease in accounts receivable is a positive cash flow\n    increase_accounts_payable = 9000  # Increase in accounts payable is a positive cash flow\n    increase_inventory = 20000  # Increase in inventory is a negative cash flow\n\n    # Do math calculation to get the answer\n    cash_collections = net_sales + decrease_accounts_receivable + increase_accounts_payable - increase_inventory\n\n    # return answer\n    return cash_collections\n```\n\nThis program calculates the cash collections based on the information provided. The `decrease_accounts_receivable` and `increase_accounts_payable` are considered positive cash flows, while `increase_inventory` is a negative cash flow. The final `cash_collections` value will be returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-977",
        "python_solution": "",
        "ground_truth": null,
        "question": "Jane Smith is interested in taking a loan of $40,000 to purchase a vehicle with no down payments. She's expected to make even payments at the end of each month for the coming 3 years. If her monthly payment is $1,350, what is the principal portion of her second installment?",
        "output": [
            " Certainly! Below is the Python program that calculates the principal portion of the second installment for the given loan scenario:\n\n```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 40000\n    monthly_payment = 1350\n    loan_term_months = 3 * 12\n    interest_rate_monthly = 0.05 / 12  # Assuming an annual interest rate of 5% for the example\n\n    # Calculate the interest paid in the first installment\n    interest_paid_first_installment = loan_amount * interest_rate_monthly\n    principal_paid_first_installment = monthly_payment - interest_paid_first_installment\n    remaining_principal = loan_amount - principal_paid_first_installment\n\n    # Calculate the interest paid in the second installment\n    interest_paid_second_installment = remaining_principal * interest_rate_monthly\n    principal_paid_second_installment = monthly_payment - interest_paid_second_installment\n\n    # return answer\n    return principal_paid_second_installment\n\n# Call the function and print the result\nprint(solution())\n```\n\n### Explanation:\n\n1. **Variables Definition**:\n   - `loan_amount`: The total loan amount, which is $40,000.\n   - `monthly_payment`: The monthly payment amount, which is $1,350.\n   - `loan_term_months`: The loan term in months, which is 3 years (36 months).\n   - `interest_rate_monthly`: The monthly interest rate, assumed to be 5% annual rate for this calculation.\n\n2. **First Installment Calculation**:\n   - Calculate the interest portion of the first installment.\n   - Calculate the principal portion of the first installment by subtracting the interest portion from the monthly payment.\n   - Calculate the remaining principal after the first installment.\n\n3. **Second Installment Calculation**:\n   - Calculate the interest portion of the second installment based on the remaining principal.\n   - Calculate the principal portion of"
        ]
    },
    {
        "tables": [
            "| Sample mean | 15% |\n|-------------|-----|\n| Sample size | 90  |\n| Population variance | 128 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-978",
        "python_solution": "",
        "ground_truth": null,
        "question": "Given the data provided, what is the standard error of the mean sample?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sample_mean = 15  # in percentage\n    sample_size = 90\n    population_variance = 128\n\n    # Do math calculation to get the answer\n    standard_error_of_mean = (population_variance / sample_size) ** 0.5\n\n    # return answer\n    return standard_error_of_mean\n\n# Example of calling the solution function and printing the result\nif __name__ == \"__main__\":\n    print(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-979",
        "python_solution": "",
        "ground_truth": null,
        "question": "What is the highest possible value for Qy, considering the inverse demand function Py = 13 \u2013 3.7Q where Py equals the price per unit for good Y and Qy is the quantity demanded of good Y?",
        "output": [
            " Certainly! We'll define the inverse demand function \\(P_y = 13 - 3.7Q_y\\) and solve for the highest possible value of \\(Q_y\\) by considering the condition where the price \\(P_y\\) equals zero (since a negative price doesn't make economic sense).\n\nHere is the Python program to determine the highest possible value for \\(Q_y\\):\n\n```python\ndef solution():\n    # Define variables name and value\n    a = 13  # Intercept of the inverse demand function\n    b = -3.7  # Slope of the inverse demand function\n\n    # Do math calculation to get the answer\n    # Solve for Qy when Py = 0\n    Qy_max = -a / b\n\n    # Return answer\n    return Qy_max\n\n# Test the solution function\nprint(solution())\n```\n\nThis program computes the highest possible value for \\(Q_y\\) by setting \\(P_y = 0\\) in the given inverse demand function and solving for \\(Q_y\\)."
        ]
    },
    {
        "tables": [
            "| Assets                                         |   |   |   |   |\n|------------------------------------------------|---|---|---|---|\n| Current assets                                 |   |   |   |   |\n| Cash and cash equivalents 0                    | 5 | 7 |   |   |\n| Marketable securities 5                        | 0 | 2 |   |   |\n| Accounts receivable, net 5                     | 15|12 |   |   |\n| Inventories 15                                 | 20|16 |   |   |\n| Prepaid expenses 5                             | 15|11 |   |   |\n| Total current assets 35                        | 55|48 |   |   |\n| Property, plant,and equipment, net 40          | 35|37 |   |   |\n| Goodwill 25                                    |  0| 8 |   |   |\n| Other assets 0                                 | 10| 7 |   |   |\n| Total assets 100                               |100|100|   |   |\n| Liabilities and Shareholders' Equity           |   |   |   |   |\n|                                                |   |   |   |   |\n| Accounts payable, Short-term debt              |10 & 10, 25 & 10 & 15| | | |\n| Accrued expenses                               |   |0, 5, 3      |   |   |\n| Total current liabilities                      |   |35, 25, 28   |   |   |\n| Long-term debt                                 |   |45, 20, 28   |   |   |\n| Other non-current liabilities                  |   |0, 10, 7     |   |   |\n| Total liabilities                              |   |80, 55, 63   |   |   |\n| Total shareholders' equity, total liabilities and shareholders' equity | |20 & 45 & 37, 100 & 100 & 100 | | |"
        ],
        "topic": "Accounting",
        "question_id": "test-980",
        "python_solution": "",
        "ground_truth": null,
        "question": "In reference to Exhibit 1: Common-Size Balance Sheets for Corporation X, Corporation Y, and Sector Average, what is the financial leverage ratio for Corporation Y?",
        "output": [
            " To calculate the financial leverage ratio for Corporation Y, we need to use the formula:\n\\[ \\text{Financial Leverage Ratio} = \\frac{\\text{Total Assets}}{\\text{Total Shareholders' Equity}} \\]\n\nAccording to the provided table, for Corporation Y:\n- Total assets = 100\n- Total shareholders' equity = 45\n\nHere's the Python program to calculate it:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 100\n    total_shareholders_equity = 45\n\n    # Do math calculation to get the answer\n    financial_leverage_ratio = total_assets / total_shareholders_equity\n\n    # return answer\n    return financial_leverage_ratio\n\n# You can call the function to get the result\nresult = solution()\nprint(result)\n```\n\nWhen this program is executed, it will calculate and return the financial leverage ratio for Corporation Y."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "test-981",
        "python_solution": "",
        "ground_truth": null,
        "question": "A put option from Europe possesses the following traits: S0 = $50; X = $45; r = 5%; T = 1 year; and \u03c3 = 25%. Utilizing the BSM formula, could you determine which value is closest to the put's value? Here are some values for reference: N(-0.78644) = 0.2158, N(-0.74644) = 0.2266, N(-0.49644) = 0.3085, N(-0.56644) = 0.2855.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    S0 = 50  # Current stock price\n    X = 45   # Strike price\n    r = 0.05 # Risk-free interest rate\n    T = 1    # Time to maturity in years\n    sigma = 0.25  # Volatility\n\n    from math import log, sqrt, exp\n    from scipy.stats import norm\n\n    # Calculate d1 and d2\n    d1 = (log(S0 / X) + (r + 0.5 * sigma**2) * T) / (sigma * sqrt(T))\n    d2 = d1 - sigma * sqrt(T)\n\n    # Utilizing the cumulative distribution function of a standard normal distribution (N())\n    N_d1 = norm.cdf(-d1)\n    N_d2 = norm.cdf(-d2)\n\n    # Calculate the put option price using the BSM formula\n    put_value = X * exp(-r * T) * N_d2 - S0 * N_d1\n\n    # return answer\n    return put_value\n\n# Example usage:\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-982",
        "python_solution": "",
        "ground_truth": null,
        "question": "Venture Holdings is a hedge fund that started with $250 million in capital. Venture charges a 2% management fee based on assets managed at the end of the year, and a 20% incentive fee if their returns exceed an 8% benchmark in its first year. Venture experienced a 16% increase in its first year. Let's assume that the management fees are calculated using the end-of-period valuation. What would be the net return for the investor, assuming that the performance fee is calculated after deducting the management fee?",
        "output": [
            " Sure, here's the Python program that calculates the net return for the investor based on the given conditions:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_capital = 250_000_000  # Initial capital in dollars\n    increase_percent = 0.16        # 16% increase in the first year\n    management_fee_rate = 0.02      # 2% management fee\n    incentive_fee_rate = 0.20       # 20% incentive fee\n    benchmark_return = 0.08         # 8% benchmark return\n\n    # Calculate end-of-year value before fees\n    end_of_year_value = initial_capital * (1 + increase_percent)\n\n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_rate\n\n    # Calculate value after deducting management fee\n    value_after_management_fee = end_of_year_value - management_fee\n\n    # Calculate incentive fee if the return exceeds the benchmark\n    gross_return = (value_after_management_fee / initial_capital) - 1\n    if gross_return > benchmark_return:\n        incentive_fee = (gross_return - benchmark_return) * value_after_management_fee * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Calculate net return for the investor\n    net_return = (value_after_management_fee - incentive_fee) / initial_capital - 1\n\n    # return answer\n    return net_return\n\n# Print the net return\nprint(f'Net Return: {solution() * 100:.2f}%')\n```\n\nThis program first calculates the end-of-year value of the investment before fees, then deducts the management fee. If the gross return (after management fee) exceeds the benchmark return, it then calculates the incentive fee. Finally, it calculates the net return for the investor and prints the result in percentage."
        ]
    },
    {
        "tables": [
            "|                                   |        |\n|-----------------------------------|--------|\n| Net income                        | $55,000|\n| Depreciation                      | $60,000|\n| Taxes paid                        | $25,000|\n| Interest paid                     | $5,000 |\n| Dividends paid                    | $10,000|\n| Cash received from sale of company building | $40,000|\n| Issuance of preferred stock       | $45,000|\n| Repurchase of common stock        | $20,000|\n| Purchase of machinery             | $20,000|\n| Issuance of bonds                 | $40,000|\n| Debt retired through issuance of common stock | $45,000|\n| Paid off long-term bank borrowings | $15,000|\n| Profit on sale of building        | $15,000|"
        ],
        "topic": "Accounting",
        "question_id": "test-983",
        "python_solution": "",
        "ground_truth": null,
        "question": "Assuming Cash flow from investing activities as per U.S. GAAP is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    purchase_of_machinery = 20000\n    cash_received_from_sale_of_building = 40000\n\n    # Do math calculation to get the answer\n    cash_flow_from_investing_activities = cash_received_from_sale_of_building - purchase_of_machinery\n\n    # return answer\n    return cash_flow_from_investing_activities\n```"
        ]
    },
    {
        "tables": [
            "|    |    | Longevity Bond |   |\n|----|----|---------------|---|\n|    |    | No Default    | Default |\n| Market Returns | 20% Increase | 61% | 1% |\n|                | 20% Decrease | 35% | 3% |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-984",
        "python_solution": "",
        "ground_truth": null,
        "question": "A fund manager is evaluating if the 1-year default probability of a longevity bond provided by a life assurance corporation is not related to equity market returns. The fund manager establishes the following probability matrix using 1-year probabilities from the initial investigation: With the data in the table, what is the likelihood that the longevity bond will default in 1 year considering the market declines by 20% over 1 year?",
        "output": [
            " To solve the given problem, we need to compute the probability that the longevity bond will default within one year if the market declines by 20% over the same period. Based on the given probability matrix, when the market returns see a 20% decrease, the probability of default is 3%.\n\nHere's the Python program to compute this:\n\n```python\ndef solution():\n    # Define variable names and their values\n    market_decrease_default_probability = 0.03\n\n    # Do the math calculation to get the answer\n    probability_of_default_given_market_decrease = market_decrease_default_probability\n\n    # Return the answer\n    return probability_of_default_given_market_decrease\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The likelihood that the longevity bond will default in 1 year considering the market declines by 20% over 1 year is: {answer:.2%}\")\n```\n\nThis program defines the probability of default when the market decreases by 20% and then prints out that probability as the answer in percentage format."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-985",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a population with a variance of 2.45 was used to compute a sample mean and the sample size is 40, what would be the standard error of this sample mean?",
        "output": [
            " Certainly! To calculate the standard error of the sample mean, you use the formula:\n\n\\[ \\text{Standard Error} = \\frac{\\text{Standard Deviation}}{\\sqrt{\\text{Sample Size}}} \\]\n\nGiven that the variance is 2.45 and the sample size is 40, the standard deviation can be found by taking the square root of the variance.\n\nLet's implement this in Python:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    variance = 2.45\n    sample_size = 40\n\n    # Do math calculation to get the answer\n    standard_deviation = math.sqrt(variance)\n    standard_error = standard_deviation / math.sqrt(sample_size)\n\n    # return answer\n    return standard_error\n```\n\nThis program defines the necessary variables, calculates the standard deviation from the variance, computes the standard error, and then returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-986",
        "python_solution": "",
        "ground_truth": null,
        "question": "At the start of the year, XY corporation purchased a new mini-computer for $35,000. The computer is predicted to be used for a decade and then resold for $1,000. Using the double-declining-balance method, what is the declared depreciation expense in the third year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 35000\n    salvage_value = 1000\n    useful_life = 10\n\n    # Calculate the annual depreciation rate for double-declining-balance method\n    straight_line_depreciation_rate = 1 / useful_life\n    double_declining_rate = 2 * straight_line_depreciation_rate\n\n    # Define the depreciable base\n    depreciable_base = initial_cost - salvage_value\n\n    # Calculate depreciation for each year\n    remaining_value = initial_cost\n    depreciation_expense = []\n\n    for year in range(1, useful_life + 1):\n        if year == 1:  # In the first year, depreciation is computed on the initial cost\n            current_depreciation = remaining_value * double_declining_rate\n        else:\n            current_depreciation = depreciation_expense[-1] * double_declining_rate\n\n        # Ensure that the remaining value does not go below the salvage value\n        if remaining_value - current_depreciation < salvage_value:\n            current_depreciation = remaining_value - salvage_value\n\n        remaining_value -= current_depreciation\n        depreciation_expense.append(current_depreciation)\n\n        if remaining_value <= salvage_value:\n            break\n\n    # Get the depreciation expense in the third year\n    answer = depreciation_expense[2]\n\n    # return answer\n    return answer\n\n# Run the function and print the result\nprint(solution())\n```\n\nThis program calculates the depreciation expense for each year using the double-declining-balance method and returns the depreciation expense for the third year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-987",
        "python_solution": "",
        "ground_truth": null,
        "question": "John is interested in purchasing a 3-year bond that has a coupon rate of 5%, paid yearly. The spot rates are as follows: 1-year spot rate is 4%; 2-year spot rate is 4.5%; 3-year spot rate is 5%. What is the bond's price?",
        "output": [
            " Certainly! To answer the given question, we will calculate the present value of each coupon payment and the face value of the bond using the respective spot rates. The bond's price can be calculated by summing these present values.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming the face value of the bond is $1000\n    coupon_rate = 0.05\n    spot_rate_1y = 0.04\n    spot_rate_2y = 0.045\n    spot_rate_3y = 0.05\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n\n    # Calculate the present value of each cash flow\n    pv_coupon_1y = annual_coupon_payment / (1 + spot_rate_1y)\n    pv_coupon_2y = annual_coupon_payment / (1 + spot_rate_2y) ** 2\n    pv_coupon_3y = annual_coupon_payment / (1 + spot_rate_3y) ** 3\n\n    # Calculate the present value of the face value at maturity\n    pv_face_value = face_value / (1 + spot_rate_3y) ** 3\n\n    # Sum the present values to get the bond's price\n    bond_price = pv_coupon_1y + pv_coupon_2y + pv_coupon_3y + pv_face_value\n\n    # Return the bond's price\n    return bond_price\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the price of a 3-year bond given the coupon rate and the spot rates for each year. The bond's price is obtained by summing the present values of the annual coupon payments and the face value, discounted by the respective spot rates."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-988",
        "python_solution": "",
        "ground_truth": null,
        "question": "Suppose there exists a bond with an annual modified duration of 8.05 and an annual convexity of 58.32. What is the anticipated percentage change in price if the yield-to-maturity of the bond rises by 20 basis points?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_modified_duration = 8.05\n    annual_convexity = 58.32\n    yield_change = 0.0020  # 20 basis points in decimal form\n\n    # Do math calculation to get the answer\n    percentage_change_price_duration = -annual_modified_duration * yield_change\n    percentage_change_price_convexity = 0.5 * annual_convexity * (yield_change ** 2)\n    anticipated_percentage_change = percentage_change_price_duration + percentage_change_price_convexity\n\n    # return answer\n    return anticipated_percentage_change\n\n# Execute the solution to get the answer\nprint(solution())\n```\n\nThis program calculates the anticipated percentage change in the price of a bond given its annual modified duration, convexity, and a change in the yield-to-maturity. The formula used is a combination of the duration effect and the convexity effect on the bond's price."
        ]
    },
    {
        "tables": [
            "|     |     |\n| --- | --- |\n| Exhibit 1 10-Year Trailing Risk-Adjusted Performance |     |\n| Average annual return | 8.20% |\n| Minimum acceptable return (MAR) | 5.00% |\n| Sharpe ratio | 0.95 |\n| Sortino ratio | 0.87 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-989",
        "python_solution": "",
        "ground_truth": null,
        "question": "According to the provided table, what is the target semideviation for the investment portfolio?",
        "output": [
            " Certainly! To find the target semideviation for the investment portfolio, we can use the Sortino ratio and the given minimum acceptable return (MAR). The Sortino ratio formula is:\n\n\\[ \\text{Sortino ratio} = \\frac{R_p - R_f}{\\text{Target semideviation}} \\]\n\nWhere:\n- \\( R_p \\) is the portfolio return.\n- \\( R_f \\) is the risk-free rate or minimum acceptable return (MAR).\n- \\(\\text{Target semideviation}\\) is what we want to solve for.\n\nGiven the Sortino ratio and other variables, we can rearrange the formula to solve for the target semideviation:\n\n\\[ \\text{Target semideviation} = \\frac{R_p - R_f}{\\text{Sortino ratio}} \\]\n\nHere\u2019s the Python program to implement this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    average_annual_return = 0.082\n    minimum_acceptable_return = 0.05\n    sortino_ratio = 0.87\n\n    # Do math calculation to get the answer\n    target_semideviation = (average_annual_return - minimum_acceptable_return) / sortino_ratio\n\n    # Return answer\n    return target_semideviation\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program will calculate the target semideviation based on the provided values in the table."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-990",
        "python_solution": "",
        "ground_truth": null,
        "question": "What will the mean absolute deviation be when referring to the range of 1-10?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and range\n    numbers = list(range(1, 11))\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate absolute deviations and mean absolute deviation\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    mean_absolute_deviation = sum(absolute_deviations) / len(absolute_deviations)\n\n    # Return the mean absolute deviation\n    return mean_absolute_deviation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-991",
        "python_solution": "",
        "ground_truth": null,
        "question": "Thompson is a tax consultant, providing tax-related guidance to individual clients. One of his clients is Jennifer, an American citizen residing within the U.S. Jennifer recently became the owner of AAPL shares, left to her by a deceased relative who was also a U.S. resident. The U.S. uses the \"step-up\" in basis at death system. The shares were originally purchased 20 years ago at a cost of $15,000 (inclusive of commissions and other costs). When the relative passed away, the market value of the AAPL stock was $220,000, and Jennifer just sold these shares for $190,000. Jennifer\u2019s tax rate for capital gains is 20%. The tax obligation from the sale of the AAPL shares is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    original_cost = 15000\n    market_value_at_death = 220000\n    sale_price = 190000\n    capital_gains_tax_rate = 0.20\n\n    # Calculate the stepped-up basis\n    stepped_up_basis = market_value_at_death\n\n    # Calculate the capital gain\n    capital_gain = sale_price - stepped_up_basis\n\n    # Calculate the tax obligation\n    tax_obligation = capital_gain * capital_gains_tax_rate\n\n    # return answer\n    return tax_obligation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-992",
        "python_solution": "",
        "ground_truth": null,
        "question": "The cost of a three-year zero-coupon bond from the government is $85.16, while a four-year bond of the same type is $79.81. Can you calculate the one-year implied forward rate from the third to the fourth year?",
        "output": [
            " Certainly! To calculate the one-year implied forward rate from the third to the fourth year, we'll use the prices of the three-year and four-year zero-coupon bonds. The formula for computing the implied forward rate \\(f\\) is:\n\n\\[ \\left(1 + f\\right) = \\frac{\\left(\\frac{1}{P_4}\\right)^{1/4}}{\\left(\\frac{1}{P_3}\\right)^{1/3}} \\]\n\nWhere:\n- \\( P_3 \\) is the price of the three-year zero-coupon bond.\n- \\( P_4 \\) is the price of the four-year zero-coupon bond.\n\nHere\u2019s the Python program to calculate the one-year implied forward rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    P3 = 85.16\n    P4 = 79.81\n\n    # Do math calculation to get the answer\n    yield_3_year = (1 / P3) ** (1/3) - 1\n    yield_4_year = (1 / P4) ** (1/4) - 1\n\n    implied_forward_rate = ((1 + yield_4_year) ** 4 / (1 + yield_3_year) ** 3) - 1\n\n    # Return the implied forward rate\n    return implied_forward_rate\n\n# Run the solution to get the answer\nanswer = solution()\nprint(f\"The one-year implied forward rate from the third to the fourth year is: {answer * 100:.2f}%\")\n```\n\nThis program calculates the implied forward rate by converting the prices of the bonds into their respective yields and using the given formula to find the rate. The result is then printed, indicating the implied forward rate from the third to the fourth year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "test-993",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a bond that has a face value of $100 matures in 10 years and pays a 4.5% coupon semiannually, is priced to yield 5.83%, and has a modified duration of 7.81. What is the approximate percentage price change for the bond if the bond's yield decreases by 0.25%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    coupon_rate = 0.045\n    years_to_maturity = 10\n    original_yield = 0.0583\n    duration = 7.81\n    yield_change = -0.0025  # negative since yield decreases\n\n    # Do math calculation to get the answer\n    price_change_percentage = -duration * yield_change / (1 + original_yield)\n\n    # return answer\n    return price_change_percentage\n\n# Call the solution function to get the result\nresult = solution()\nprint(f\"The approximate percentage price change for the bond is: {result * 100:.2f}%\")\n```\n\nExplanation of the calculation:\n- The formula to calculate the approximate percentage price change for the bond when the yield changes is:\n  \\[\n  \\text{Price Change Percentage} = -\\text{Duration} \\times \\frac{\\text{Yield Change}}{1 + \\text{Original Yield}}\n  \\]\n- In this case, the yield change is -0.25%, which is equivalent to -0.0025 in decimal form. The original yield is 5.83%, or 0.0583 in decimal form. The modified duration is 7.81.\n- Substituting these values into the formula gives the approximate percentage price change for the bond."
        ]
    },
    {
        "tables": [
            "| Component | Cost | Useful Life |\n|-----------|------|-------------|\n| A         | $500,000 | 10 years |\n| B         | $500,000 | 5 years  |"
        ],
        "topic": "Accounting",
        "question_id": "test-994",
        "python_solution": "",
        "ground_truth": null,
        "question": "A business that aims to increase its earnings has invested $1,000,000 in a machine with two key parts, as seen in the provided chart. The machine's anticipated total lifespan is 10 years, and the business employs the straight-line technique of depreciation. How does the first year's depreciation expense calculated in accordance with the International Financial Reporting Standards (IFRS) compare to the one under the US GAAP?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_component_A = 500000\n    cost_component_B = 500000\n    useful_life_component_A = 10\n    useful_life_component_B = 5\n\n    # Calculate depreciation expense under IFRS and US GAAP\n    ifrs_depreciation_expense_A = cost_component_A / useful_life_component_A\n    ifrs_depreciation_expense_B = cost_component_B / useful_life_component_B\n    ifrs_total_depreciation_expense = ifrs_depreciation_expense_A + ifrs_depreciation_expense_B\n\n    us_gaap_depreciation_expense_A = cost_component_A / useful_life_component_A\n    us_gaap_depreciation_expense_B = cost_component_B / useful_life_component_B\n    us_gaap_total_depreciation_expense = us_gaap_depreciation_expense_A + us_gaap_depreciation_expense_B\n\n    # Compare the depreciation expenses\n    comparison = ifrs_total_depreciation_expense - us_gaap_total_depreciation_expense\n\n    # Return the comparison\n    return comparison\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program defines the variables for the costs and useful lives of the components, calculates the depreciation expense under both IFRS and US GAAP, and then compares the two values to provide the difference.\n\nGiven the data in the table, the depreciation expense for both IFRS and US GAAP will be calculated similarly because both components' costs and useful lives are the same. Therefore, the comparison will result in a difference of 0, indicating that the depreciation expense for the first year under IFRS is the same as that under US GAAP for this case."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-995",
        "python_solution": "",
        "ground_truth": null,
        "question": "A portion of the financial statement of Alpha Enterprises is presented below: Assets at the end of 2015: $5,000 Revenues for the year: $1,750 Expenses for the year: $1,200 Distributions to owners: $250 Retained earnings at the conclusion of 2014: $2,000 Contributed capital at the conclusion of 2015: $800 What should be the liabilities of Alpha Enterprises at the end of 2015?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    assets_end_2015 = 5000\n    revenues_2015 = 1750\n    expenses_2015 = 1200\n    distributions_2015 = 250\n    retained_earnings_2014 = 2000\n    contributed_capital_2015 = 800\n\n    # Do math calculation to get the answer\n    # Calculate net income for the year 2015\n    net_income_2015 = revenues_2015 - expenses_2015\n\n    # Calculate retained earnings at the end of 2015\n    retained_earnings_2015 = retained_earnings_2014 + net_income_2015 - distributions_2015\n\n    # Total equity at the end of 2015\n    total_equity_2015 = retained_earnings_2015 + contributed_capital_2015\n\n    # Calculate liabilities at the end of 2015 using the accounting equation\n    # Assets = Liabilities + Equity\n    liabilities_2015 = assets_end_2015 - total_equity_2015\n\n    # return answer\n    return liabilities_2015\n\n# Print the result to confirm it works\nprint(solution())\n```\n\nThis program first calculates the net income for the year 2015, then uses this to calculate the retained earnings at the end of 2015. It then sums the retained earnings and contributed capital to get the total equity. Finally, it applies the accounting equation to find the liabilities at the end of 2015 and returns this value."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation (%) |\n|----------|-------------------|--------------------------------|\n| 1        | 30                | 20                             |\n| 2        | 70                | 12                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "test-996",
        "python_solution": "",
        "ground_truth": null,
        "question": "If a fund manager constructs a portfolio with a standard deviation of 14.40%, what is the covariance between the two assets?",
        "output": [
            " To calculate the covariance between the two assets, you can use the following formula given the standard deviations and weights of the assets:\n\n\\[ \\text{Portfolio Standard Deviation} = \\sqrt{(\\text{w1} \\times \\sigma_1)^2 + (\\text{w2} \\times \\sigma_2)^2 + 2 \\times \\text{w1} \\times \\text{w2} \\times \\text{Covariance}} \\]\n\nWhere:\n- \\( \\text{w1} \\) and \\( \\text{w2} \\) are the weights of the two assets.\n- \\( \\sigma_1 \\) and \\( \\sigma_2 \\) are the standard deviations of the two assets.\n- \\( \\text{Covariance} \\) is the covariance between the two assets.\n\nWe need to rearrange this formula to solve for the covariance.\n\nHere's the Python program to calculate the covariance:\n\n```python\ndef solution():\n    # Define variables name and value\n    w1 = 0.30\n    w2 = 0.70\n    sigma1 = 0.20\n    sigma2 = 0.12\n    portfolio_std_dev = 0.144\n\n    # Do math calculation to get the answer\n    term1 = (w1 * sigma1) ** 2\n    term2 = (w2 * sigma2) ** 2\n    term3 = portfolio_std_dev ** 2\n\n    covariance = (term3 - term1 - term2) / (2 * w1 * w2)\n\n    # return answer\n    return covariance\n\n# Call the function to get the covariance\ncovariance = solution()\nprint(f\"The covariance between the two assets is: {covariance:.4f}\")\n```\n\nThis program defines the weights, standard deviations, and portfolio standard deviation, then calculates the covariance using the above formula and returns the result."
        ]
    },
    {
        "tables": [
            "| Company | A  | B  | C  | D  | E  | F  |\n|---------|----|----|----|----|----|----|\n| Market  | 30 | 25 | 16 | 12 | 10 | 7  |\n| Share (%) | |  |  |  |  |  |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "test-997",
        "python_solution": "",
        "ground_truth": null,
        "question": "If Corporations D and F combined to form a new Entity, G, what would the three-company concentration ratio in the industry be considering that there are six corporations in the sector with respective market shares?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_share_A = 30\n    market_share_B = 25\n    market_share_C = 16\n    market_share_D = 12\n    market_share_E = 10\n    market_share_F = 7\n\n    # Combine market shares of D and F to form G\n    market_share_G = market_share_D + market_share_F\n\n    # Calculate the three-company concentration ratio\n    top_three_companies = [market_share_A, market_share_B, market_share_C]\n    top_three_companies.append(market_share_G)\n    top_three_companies.sort(reverse=True)  # Sort in descending order to get the top three companies\n\n    # Sum the market shares of the top three companies\n    three_company_concentration_ratio = sum(top_three_companies[:3])\n\n    # return answer\n    return three_company_concentration_ratio\n\n# Run the function to get the answer\nprint(solution())\n```\n\nExplanation:\n1. The function defines the market shares of the six corporations.\n2. It then combines the market shares of Corporations D and F to form the new Entity, G.\n3. The function creates a list of the top three companies' market shares along with the new Entity G's market share.\n4. It sorts this list in descending order to ensure the top three market shares are considered.\n5. The function sums the top three market shares to calculate the three-company concentration ratio.\n6. Finally, it returns the calculated concentration ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "test-998",
        "python_solution": "",
        "ground_truth": null,
        "question": "If John's Industries recently acquired a manufacturing machine for $60,000 which is predicted to produce an annual cash inflow of $25,000 for six years, and plans to depreciate the machine over six years for accounting reasons, while the tax authority calculates the machine's useful life to be 5 years. If we consider the tax rate to be 40% and the machines have no resale value. What would be the pretax income for John's Industries in the 6th year using the straight-line method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 60000\n    annual_cash_inflow = 25000\n    depreciation_period = 6\n    tax_depreciation_period = 5\n    tax_rate = 0.40\n\n    # Do math calculation to get the answer\n    annual_depreciation = acquisition_cost / depreciation_period\n    tax_depreciation = acquisition_cost / tax_depreciation_period\n\n    # Income before depreciation in the 6th year\n    income_before_depreciation_6th_year = annual_cash_inflow\n\n    # Depreciation in the 6th year\n    depreciation_6th_year = annual_depreciation\n\n    # Taxable income with tax depreciation in the 6th year\n    taxable_income_6th_year = income_before_depreciation_6th_year - tax_depreciation\n\n    # Taxes in the 6th year\n    taxes_6th_year = taxable_income_6th_year * tax_rate\n\n    # Pretax income in the 6th year\n    pretax_income_6th_year = income_before_depreciation_6th_year - depreciation_6th_year\n\n    # return answer\n    return pretax_income_6th_year\n\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "test-999",
        "python_solution": "",
        "ground_truth": null,
        "question": "John thinks that the average cost of the commercial residential property is more than $155,000. The population standard deviation is $25,000. A random sample of 36 commercial residential properties in the region has an average cost of $159,750. John carry out the hypothesis test at a 1% significance level. What is the value of the computed test statistic?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    population_mean = 155000\n    population_std_dev = 25000\n    sample_size = 36\n    sample_mean = 159750\n    significance_level = 0.01\n\n    # Do math calculation to get the answer\n    import scipy.stats as stats\n\n    # Calculate the standard error\n    standard_error = population_std_dev / (sample_size ** 0.5)\n\n    # Calculate the test statistic\n    test_statistic = (sample_mean - population_mean) / standard_error\n\n    return test_statistic\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    }
]