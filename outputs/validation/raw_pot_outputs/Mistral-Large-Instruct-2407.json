[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            " To determine the loss realized by the enterprise that relinquishes the truck, we need to follow these steps:\n\n1. Calculate the depreciation expense for each year using the declining balance method.\n2. Determine the accumulated depreciation over the three years.\n3. Calculate the book value of the truck after three years.\n4. Compare the book value with the current fair value of the truck to determine the loss.\n\nHere's the Python program to achieve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    salvage_value_truck = 15000\n    estimated_life_truck_years = 8\n    depreciation_rate_per_year = 0.20\n    current_fair_value_truck = 27000\n    years_used = 3\n\n    # Calculate depreciation expense for each year (declining balance method)\n    depreciation_expense_year_1 = original_cost_truck * depreciation_rate_per_year\n    book_value_end_year_1 = original_cost_truck - depreciation_expense_year_1\n    depreciation_expense_year_2 = book_value_end_year_1 * depreciation_rate_per_year\n    book_value_end_year_2 = book_value_end_year_1 - depreciation_expense_year_2\n    depreciation_expense_year_3 = book_value_end_year_2 * depreciation_rate_per_year\n\n    # Calculate the book value of the truck after three years\n    accumulated_depreciation = depreciation_expense_year_1 + depreciation_expense_year_2 + depreciation_expense_year_3\n    book_value_end_year_3 = original_cost_truck - accumulated_depreciation\n\n    # Calculate the loss\n    loss = current_fair_value_truck - book_value_end_"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 2.0979\n    libor_gbp = 1.6025 / 100\n    libor_nzd = 3.2875 / 100\n    days = 180\n    days_in_year = 360\n\n    # Do math calculation to get the answer\n    forward_points = (spot_rate * ((libor_nzd - libor_gbp) * (days / days_in_year)))\n    forward_points = round(forward_points, 4)\n\n    # return answer\n    return forward_points\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program calculates the 180-day forward points based on the given spot exchange rate, Libor interest rates, and the number of days in a year. The result is rounded to four decimal places as specified."
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            " Sure, here is the Python program that calculates the beta for U.S. real estate equities using the provided information:\n\n```python\ndef solution():\n    # Define variables name and value\n    std_dev_real_estate = 0.14  # standard deviation of U.S. real estate (14.0%)\n    cov_real_estate_gim = 0.0075  # covariance between U.S. real estate and GIM\n    integration_real_estate_gim = 0.60  # integration with GIM\n    std_dev_gim = (7.2 - 3.1) / 0.36  # calculating the standard deviation of the GIM\n\n    # Do math calculation to get the answer\n    beta_real_estate = cov_real_estate_gim / (std_dev_gim ** 2)\n\n    # return answer\n    return beta_real_estate\n\n# Execute the function to get the answer\nprint(solution())\n```\n\nExplanation:\n1. We first define the standard deviation and covariance values for U.S. real estate as given.\n2. We calculate the standard deviation of the GIM using the given expected return, the risk-free rate, and the Sharpe ratio.\n3. The beta for U.S. real estate equities is calculated using the formula:\n   \\[\n   \\beta_{real\\_estate} = \\frac{\\text{Covariance(real\\_estate, GIM)}}{\\text{Variance(GIM)}}\n   \\]\n4. The variance of the GIM is the square of its standard deviation.\n5. The result is returned by the function.\n\nThis program will give you the beta value for U.S. real estate equities."
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    number_of_shares = 200000\n    share_price = 90\n    initial_forward_rate_6_month = -19.0 / 10000\n    three_month_later_forward_rate_3_month = -21.6 / 10000\n    spot_rate_at_initiation = 1.3935\n    spot_rate_three_months_later = 1.4106\n\n    # Calculate the cost of shares in euros\n    cost_in_euros = number_of_shares * share_price\n\n    # Calculate the forward rate difference in USD per EUR\n    forward_rate_difference = (initial_forward_rate_6_month - three_month_later_forward_rate_3_month) / 10000\n\n    # Calculate the cost of the forward agreement in USD\n    cash_expenditure = cost_in_euros * forward_rate_difference\n\n    # return answer\n    return cash_expenditure\n\n# Test the solution\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    market_value = 3700000\n    daily_fluctuation = 0.0004\n    trading_days = 250\n    confidence_level = 1.645  # for 95% confidence level (standard normal distribution)\n\n    # Do math calculation to get the answer\n    daily_var = market_value * daily_fluctuation * confidence_level\n    yearly_var = daily_var * (trading_days ** 0.5)\n\n    # return answer\n    return yearly_var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    p_failure = 0.40\n    p_success = 0.55\n    p_success_given_survival = 0.85\n\n    # Using the total probability rule\n    p_success_given_failure = (p_success - (p_success_given_survival * (1 - p_failure))) / p_failure\n\n    # return answer\n    return p_success_given_failure\n\n# Print the result\nprint(f\"The probability of an organization succeeding even if it eventually goes bankrupt is approximately: {solution():.4f}\")\n```\n\nWhen executed, this Python program will calculate and print the probability of an organization succeeding even if it eventually goes bankrupt, using the total probability rule as described."
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    zeta_market_share = 0.35\n    yusef_market_share = 0.25\n    xenon_market_share = 0.20\n\n    # Do math calculation to get the answer\n    hhi = (zeta_market_share ** 2) + (yusef_market_share ** 2) + (xenon_market_share ** 2)\n\n    # return answer\n    return hhi\n```\n\nThis program calculates the Herfindahl-Hirschmann Index (HHI) for the top three firms by using the given market shares. The HHI is the sum of the squares of the market shares of the top three firms."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    libor_swap_rate = 1.00  # in percentage\n    treasury_bond_yield = 0.63  # in percentage\n\n    # Do math calculation to get the answer\n    swap_spread = libor_swap_rate - treasury_bond_yield\n\n    # return answer\n    return swap_spread\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    expected_residual_value = 100000\n    useful_life = 5  # in years\n    end_year = 2016\n    start_year = 2013\n\n    # Calculate the period for amortization up to the end of 2016\n    amortization_period = end_year - start_year + 1\n\n    # Calculate the amortizable cost\n    amortizable_cost = acquisition_cost - expected_residual_value\n\n    # Calculate the annual amortization expense\n    annual_amortization_expense = amortizable_cost / useful_life\n\n    # Calculate the accumulated amortization cost at the end of 2016\n    accumulated_amortization = annual_amortization_expense * amortization_period\n\n    # return answer\n    return accumulated_amortization\n\n# Testing the function\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha \u00d7 [\u03bc - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_reversion = 0.775\n    prev_correlation = 0.35\n    alpha = mean_reversion\n    mu = 0.27  # Average correlation in January 2014\n\n    # Do math calculation to get the answer\n    s_t_minus_1 = prev_correlation\n    s_t = s_t_minus_1 + alpha * (mu - s_t_minus_1)\n\n    # return answer\n    return s_t\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis Python script defines a function `solution()` that computes the correlated expectation for February 2014 based on the given statistical and financial parameters. The `solution()` function makes use of the provided model \\( s(t) - s(t-1) = \\alpha \\times [\\mu - s(t-1)] \\) to determine the expected correlation level for the next period, which in this case is February 2014."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividends_year_1_2 = 0.5\n    growth_rate = 0.06\n    rate_of_return = 0.10\n\n    # Do math calculation to get the answer\n    # Present Value of Dividends for Year 1 and Year 2\n    pv_dividends_1_2 = dividends_year_1_2 / (1 + rate_of_return) + dividends_year_1_2 / (1 + rate_of_return)**2\n\n    # Present Value of Dividends in Perpetuity starting from Year 3\n    dividend_year_3 = dividends_year_1_2 * (1 + growth_rate)\n    pv_dividends_perpetuity = dividend_year_3 / (rate_of_return - growth_rate)\n\n    # Total Present Value\n    total_pv = pv_dividends_1_2 + pv_dividends_perpetuity\n\n    # return answer\n    return total_pv\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The worth of Superior's common equity is: ${answer:.2f}\")\n```\n\nThis Python program calculates the worth of Superior's common equity with the given dividends, growth rate, and rate of return. Make sure to call the `solution` function and print the result to see the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 30\n    average_cost = 50\n    price_elasticity_of_demand = 1.8\n\n    # Do math calculation to get the answer\n    # For a business with price elasticity > 1, the price should generally be set at the marginal cost because\n    # the business can sell more units as prices decrease and it is in their best interest to lower prices.\n    probable_price = marginal_cost\n\n    # return answer\n    return probable_price\n```\n\nIn this scenario, the most probable price is set at the marginal cost ($30) because, with a price elasticity of demand greater than 1, lowering the price can increase the quantity sold significantly, leading to higher revenue. Hence, the probable price Yahoo Corp. should set is $30."
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 460000\n    beginning_value = 320000\n    end_value = 270000\n    cost_of_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n\n    # Do math calculation to get the answer\n    # First, calculate the depreciation of buildings and machinery\n    depreciation = beginning_value - end_value\n\n    # Calculate the accounting profit\n    accounting_profit = total_revenue - cost_of_raw_materials - wages_paid - depreciation\n\n    # Calculate the economic profit\n    economic_profit = accounting_profit - normal_profit\n\n    # return answer\n    return economic_profit\n```"
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenues = 6456\n    ebitda = 1349\n    depreciation_expense = 243\n    fixed_capital_investment = 535\n    wacc = 0.09\n\n    # Do math calculation to get the answer\n    nopat = ebitda - depreciation_expense\n    taxes = 0.32 * (nopat - depreciation_expense)  # Assuming all NOPAT is taxed before depreciation is subtracted\n    fcff = nopat - taxes - fixed_capital_investment\n\n    # return answer\n    return fcff\n\n# Run the solution to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis Python program calculates the Free Cash Flow to the Firm (FCFF) for the Johnson Company for the fiscal year ending on December 31, 2012. The calculation uses the provided values for revenues, EBITDA, depreciation expense, fixed capital investment, and the weighted average cost of capital (WACC)."
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            " Sure, let's write the Python program to calculate the impairment loss. According to IFRS, the impairment loss is the amount by which the carrying value of an asset exceeds its recoverable amount. The recoverable amount is the higher of its fair value less costs to sell and its value in use.\n\nHere's the program to calculate the impairment loss:\n\n```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    fair_value_less_costs_to_sell = 450000 - 50000\n    value_in_use = 440000\n\n    # Calculate the recoverable amount\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n\n    # Calculate the impairment loss\n    impairment_loss = carrying_value - recoverable_amount\n\n    # Return the answer\n    return impairment_loss\n\n# Run the function to get the answer\nprint(solution())\n```\n\nThis program will calculate the impairment loss for the printing equipment based on the provided values."
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    par_value = 100\n    required_rate_of_return = 0.05\n    maturity_years = 3\n    payments_per_year = 2\n\n    # Calculate the number of periods\n    number_of_periods = maturity_years * payments_per_year\n\n    # Calculate the periodic interest payment\n    periodic_interest_payment = (coupon_rate / payments_per_year) * par_value\n\n    # Calculate the discount rate per period\n    discount_rate_per_period = required_rate_of_return / payments_per_year\n\n    # Calculate the present value of the bond\n    bond_price = (periodic_interest_payment * (1 - (1 + discount_rate_per_period) ** -number_of_periods) / discount_rate_per_period) + (par_value / (1 + discount_rate_per_period) ** number_of_periods)\n\n    # return answer\n    return bond_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of \u20a410 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of \u20a411 per unit. During 2009, Shine sold 12,000 units at a rate of \u20a415 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    units_purchased_october = 10000\n    cost_per_unit_october = 10\n    units_purchased_november = 5000\n    cost_per_unit_november = 11\n    units_sold = 12000\n\n    # Do math calculation to get the answer\n    total_cost_october = units_purchased_october * cost_per_unit_october\n    total_cost_november = units_purchased_november * cost_per_unit_november\n\n    # Calculate cost of goods sold using FIFO method\n    cost_of_goods_sold = total_cost_october + (units_sold - units_purchased_october) * cost_per_unit_november\n\n    # return answer\n    return cost_of_goods_sold\n\n# Execute the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.10200000000000001,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    p_good_economy = 0.70\n    r_good_economy_1 = 0.20\n    p_r_good_economy_1 = 0.50\n    r_good_economy_2 = 0.10\n    p_r_good_economy_2 = 0.50\n\n    p_bad_economy = 0.30\n    r_bad_economy_1 = 0.05\n    p_r_bad_economy_1 = 0.60\n    r_bad_economy_2 = -0.10\n    p_r_bad_economy_2 = 0.40\n\n    # Do math calculation to get the answer\n    expected_return_good_1 = p_good_economy * r_good_economy_1 * p_r_good_economy_1\n    expected_return_good_2 = p_good_economy * r_good_economy_2 * p_r_good_economy_2\n    expected_return_bad_1 = p_bad_economy * r_bad_economy_1 * p_r_bad_economy_1\n    expected_return_bad_2 = p_bad_economy * r_bad_economy_2 * p_r_bad_economy_2\n\n    total_expected_return = expected_return_good_1 + expected_return_good_2 + expected_return_bad_1 + expected_return_bad_2\n\n    # return answer\n    return total_expected_return\n\n# Calling the function to get the solution\nprint(solution())\n```\n\nThis program calculates the anticipated portfolio return by considering the probabilities and returns for each scenario and economic condition. The final output is the total expected return based on these inputs."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_inventory = 200000\n    initial_lifo_reserve = 30000\n    final_inventory = 250000\n    final_lifo_reserve = 40000\n    tax_rate = 0.30\n\n    # Calculate the FIFO value of inventory at the end of 2017\n    fifo_additional_amount = final_lifo_reserve - initial_lifo_reserve\n    fifo_inventory = final_inventory + fifo_additional_amount\n\n    # Calculate the tax effect\n    tax_effect = fifo_additional_amount * tax_rate\n\n    # Calculate final inventory after tax effect\n    final_fifo_inventory = fifo_inventory - tax_effect\n\n    # return answer\n    return final_fifo_inventory\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nThis program defines the necessary variables and calculates the inventory at the end of 2017 after converting from LIFO to FIFO, taking into account the tax effect. The final inventory is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    maturity_years = 15\n    discount_rate = 0.045  # 4.5% as a decimal\n\n    # Do math calculation to get the answer\n    present_value = par_value / (1 + discount_rate) ** maturity_years\n    cost_per_100 = 100 - present_value\n\n    # return answer\n    return cost_per_100\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n\n    # Do math calculation to get the answer\n    call_price = carrying_value + gain_on_redemption\n\n    # return answer\n    return call_price\n```"
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    usd_eur = 1.3860\n    eur_cad = 0.6125\n    usd_gbp = 1.4208\n\n    # Do math calculation to get the answer\n    eur_gbp = usd_gbp / (eur_cad * usd_eur)\n\n    # return answer\n    return eur_gbp\n\n# Calling the function to get the answer\nprint(solution())\n```\n\nThis Python program defines a function `solution` that calculates the spot EUR/GBP cross-rate based on the provided spot rates. It first defines the relevant exchange rates as variables, then performs the calculation to obtain the EUR/GBP cross-rate, and finally returns the result. The solution is printed by calling the `solution` function."
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            " Sure, let's break down the problem and create a Python program to calculate the five-year spot rate based on the given information.\n\nAccording to the data provided:\n\n- One-Year Spot Rate: 2.50%\n- Two-Year Spot Rate: 3.00%\n- Three-Year Spot Rate: 3.50%\n- Four-Year Spot Rate: 4.00%\n\nWe need to calculate the Five-Year Spot Rate.\n\nTo find the five-year spot rate, we can use the relationship between the par rates and spot rates. We can use the formula for the par rate of a five-year bond given its future cash flows:\n\n\\[ (1 + y_5)^5 = \\frac{(1 + y_1) + (1 + y_2)^2 + (1 + y_3)^3 + (1 + y_4)^4 + 100}{(1 + y_1) + (1 + y_2) + (1 + y_3) + (1 + y_4)} \\]\n\nHere's the Python program to compute the five-year spot rate:\n\n```python\ndef solution():\n    # Define variables and values\n    y1 = 0.025  # One-year spot rate\n    y2 = 0.030  # Two-year spot rate\n    y3 = 0.035  # Three-year spot rate\n    y4 = 0.040  # Four-year spot rate\n    par_rate_5y = 0.0437  # Five-year par rate\n\n    # Calculate the five-year spot rate using the given formula\n    numerator = (1 + y1) + (1 + y2)**2 + (1 + y3)**3 + (1 + y4)**4 + 100\n    denominator = (1 + y1) + (1 + y2) + (1 + y3) + (1 + y4)\n\n    y5 = (numerator / denominator) ** (1 / 5) - 1\n\n    # Convert spot rate to percentage\n    five_year_spot_rate = y5 * 100\n\n    # Return the answer\n    return"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            " Certainly! Below is a Python program to calculate the valuation of the 2-year zero-coupon bond based on the given conditions:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # EUR\n    rate_1_year = 0.08  # 8.0%\n    prob_rate_up = 0.5  # 50%\n    prob_rate_down = 0.5  # 50%\n    future_rate_up = 0.10  # 10.0%\n    future_rate_down = 0.06  # 6.0%\n    risk_premium = 0.004  # 40 bps (0.4%)\n\n    # Do math calculation to get the answer\n    def discount_factor(rate, years):\n        return (1 + rate) ** -years\n\n    # Calculate the expected discount factor for the second year\n    expected_discount_factor_year_2 = (prob_rate_up * discount_factor(future_rate_up + risk_premium, 1)) + \\\n                                      (prob_rate_down * discount_factor(future_rate_down + risk_premium, 1))\n\n    # Calculate the overall discount factor for the 2-year period\n    overall_discount_factor = discount_factor(rate_1_year + risk_premium, 1) * expected_discount_factor_year_2\n\n    # Calculate the present value of the zero-coupon bond\n    bond_valuation = face_value * overall_discount_factor\n\n    # return answer\n    return bond_valuation\n\n# Print the solution\nprint(solution())\n```\n\nThis program defines a function `solution()` that:\n\n1. Sets up the initial rates and probabilities.\n2. Defines a helper function `discount_factor` to calculate the present value factor.\n3. Calculates the expected discount factor for the second year considering both possible future interest rates weighted by their probabilities.\n4. Computes the overall discount factor for the 2-year period"
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.9380000000000001,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            " To derive the t-test statistic for this hypothesis, we will use the formula for an independent two-sample t-test. Here is the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    n1 = 25\n    n2 = 18\n    mean1 = 200\n    mean2 = 185\n    common_variance = 2678.05\n\n    # Calculate the degrees of freedom\n    df = n1 + n2 - 2\n\n    # Calculate the standard error of the difference between the means\n    std_error = (common_variance * (1/n1 + 1/n2))**0.5\n\n    # Calculate the t-statistic\n    t_statistic = (mean1 - mean2) / std_error\n\n    # Return the answer\n    return t_statistic\n\n# Print the result to check\nprint(solution())\n```\n\nThis code calculates the t-test statistic based on the given sample sizes, means, and common variance. The result is used to test the hypothesis that the population means are equal."
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            " Certainly! To calculate the cash paid to Sugarfall Corporation's suppliers, we need to consider the changes in accounts payable, cost of goods sold, and inventory. From the provided table, we have:\n\n- Increase in accounts payable: $1,063\n- Cost of goods sold: $27,264\n- Decrease in inventory: $501\n\nThe cash paid to suppliers can be found using the following formula:\n\\[ \\text{Cash Paid to Suppliers} = \\text{Cost of Goods Sold} + \\text{Increase in Accounts Payable} - \\text{Decrease in Inventory} \\]\n\nLet's implement this in the Python program.\n\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    increase_in_accounts_payable = 1063\n    decrease_in_inventory = 501\n\n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold + increase_in_accounts_payable - decrease_in_inventory\n\n    # return answer\n    return cash_paid_to_suppliers\n\n# Example usage:\nresult = solution()\nprint(f\"The cash paid to suppliers is: ${result}\")\n```\n\nWhen you run this program, it will output the cash paid to suppliers."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    number_of_options = 20000\n    option_price = 2.5\n    average_option_price = 2.8\n    fair_value_per_share = 15\n\n    # Do math calculation to get the answer\n    compensation_expense = (average_option_price - option_price) * number_of_options\n\n    # return answer\n    return compensation_expense\n```\n\nIn this program, the compensation expense for the executive stock options is calculated by multiplying the difference between the average option price and the option price by the number of options granted. This is a straightforward approach to estimate the expense based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            " Sure, I can help with that. To find the anticipated percentage change in price for a security given its yearly adjusted period, annual convexity, and a decrease in the return to maturity, we can use the following formula:\n\n\\[ \\text{Percentage Change in Price} = \\text{Duration} \\times \\Delta Y + 0.5 \\times \\text{Convexity} \\times (\\Delta Y)^2 \\]\n\nWhere:\n- \\(\\Delta Y\\) is the change in yield (25 basis points or 0.0025)\n- Duration is the yearly adjusted period\n- Convexity is the annual convexity of the security\n\nLet's plug these values into the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    duration = 7.020\n    convexity = 65.180\n    change_in_yield = 0.0025  # 25 basis points\n\n    # Do math calculation to get the answer\n    percentage_change_in_price = (duration * change_in_yield) + (0.5 * convexity * (change_in_yield ** 2))\n\n    # return answer\n    return percentage_change_in_price\n```\n\nThis program calculates the anticipated percentage change in price of the security based on the given duration, convexity, and the change in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% \u00d7 $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            " Certainly! To solve for the intrinsic value of the preferred stock, we need to use the formula for the intrinsic value, which is typically calculated as the face value (par value) of the preferred stock divided by the rate of return. Here, we are given:\n\n- Par value of the preferred stock = $30\n- Return rate = 5.80%\n- Return rate of the identical issue = 5%\n\nThe intrinsic value of the preferred stock is calculated by dividing the annual dividend of the preferred stock (which is the par value multiplied by the rate of return) by the return rate of the identical issue.\n\nHere is the Python program to calculate the intrinsic value:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 30\n    rate_of_return = 0.058  # 5.80%\n    return_rate_identical_issue = 0.05  # 5%\n\n    # Do math calculation to get the answer\n    annual_dividend = par_value * rate_of_return\n    intrinsic_value = annual_dividend / return_rate_identical_issue\n\n    # return answer\n    return intrinsic_value\n\n# Calling the function to check the answer\nprint(solution())\n```\n\nIn this program:\n- We define the par value, rate of return, and the return rate of the identical issue.\n- We calculate the annual dividend by multiplying the par value by the rate of return.\n- We then calculate the intrinsic value by dividing the annual dividend by the return rate of the identical issue.\n- Finally, we return the intrinsic value.\n\nThis should give you the intrinsic value of the preferred stock as required."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 400\n    risk_free_rate = 0.05  # 5%\n    dividend_rate = 0.03  # 3%\n    time_to_maturity = 0.5  # 6 months\n\n    # Do math calculation to get the answer\n    forward_price = initial_value * (1 + (risk_free_rate - dividend_rate))**time_to_maturity\n\n    # Return the forward price\n    return forward_price\n\n# Example usage:\nprint(solution())\n```\n\nIn this program, we define the initial value of the asset, the risk-free rate, the continuous dividend rate, and the time to maturity for the forward contract. We then use the formula for the forward price of a forward contract on an asset with continuous dividends, which is given by:\n\n\\[ \\text{Forward Price} = \\text{Initial Value} \\times \\left(1 + (r - d)\\right)^T \\]\n\nwhere:\n- \\( r \\) is the risk-free rate,\n- \\( d \\) is the continuous dividend rate,\n- \\( T \\) is the time to maturity in years.\n\nThe program calculates the forward price and returns it as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    observed_std_dev = 4.9\n    hypothesized_std_dev = 5.0\n\n    # Do math calculation to get the answer\n    test_statistic = (observed_std_dev - hypothesized_std_dev) / hypothesized_std_dev\n\n    # Return answer\n    return test_statistic\n```\n\nIn this program, we define the observed standard deviation (`observed_std_dev`) and the hypothesized standard deviation (`hypothesized_std_dev`). We then compute the test statistic by subtracting the hypothesized standard deviation from the observed standard deviation and dividing by the hypothesized standard deviation. This result is then returned as the answer to the question."
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            " To calculate the Free Cash Flow to Equity (FCFE) for Holt Corporation in 2008, we can follow these steps:\n\n1. Calculate Net Income.\n2. Adjust Net Income by adding back non-cash expenses like Depreciation.\n3. Subtract capital expenditures (assuming no other adjustments required).\n4. Add net borrowings (new debt issued minus debt repayments; if this information is available, otherwise it's not mentioned so we can potentially assume to be zero for this calculation).\n5. Subtract changes in working capital (current assets - current liabilities).\n\nLet's create the Python program based on this logic:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income_2008 = 485\n    depreciation_2008 = 270\n\n    # Calculate changes in working capital\n    current_assets_2008 = 1988\n    current_assets_2007 = 1806\n    current_liabilities_2008 = 1090\n    current_liabilities_2007 = 1007\n\n    change_in_working_capital = (current_assets_2008 - current_liabilities_2008) - (current_assets_2007 - current_liabilities_2007)\n\n    # Assume no capital expenditures and net borrowings to simplify\n    capital_expenditures = 0\n    net_borrowings = 0\n\n    # Do math calculation to get the answer\n    fcfe = net_income_2008 + depreciation_2008 - capital_expenditures + net_borrowings - change_in_working_capital\n\n    # return answer\n    return fcfe\n\n# Execute the function to see the result\nprint(solution())\n```\n\nThis program calculates FCFE for Holt Corporation in 2008. If additional adjustments for capital expenditures or net borrowings are needed, they should be incorporated based on the specific details provided in the financial reports."
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.14400000000000002,
        "question": "What is the sustainable growth rate?",
        "output": [
            " Certainly! Let's calculate the sustainable growth rate using the given values. The formula for sustainable growth rate (SGR) is:\n\n\\[ \\text{SGR} = \\frac{\\text{Retention Rate} \\times \\text{Net Profit Margin} \\times \\text{Asset Turnover}}{\\text{1 - (Retention Rate} \\times \\text{Net Profit Margin) }} \\times \\text{Financial Leverage Multiplier} \\]\n\nHere is the Python program based on the given input:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_profit_margin = 0.20  # 20%\n    retention_rate = 0.60      # 60%\n    asset_turnover = 0.8       # 0.8\n    financial_leverage_multiplier = 1.5  # 1.5\n\n    # Do math calculation to get the answer\n    numerator = retention_rate * net_profit_margin * asset_turnover\n    denominator = 1 - (retention_rate * net_profit_margin)\n    sustainable_growth_rate = (numerator / denominator) * financial_leverage_multiplier\n\n    # return answer\n    return sustainable_growth_rate\n\n# Print the result\nprint(solution())\n```\n\nThis program calculates the sustainable growth rate based on the provided values and outputs the result."
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cny_hkd = 0.8422\n    cny_zar = 0.9149\n\n    # Do math calculation to get the answer\n    zar_hkd = cny_hkd / cny_zar\n\n    # return answer\n    return zar_hkd\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043000000000000003,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor \u03bb = 0.95 on a daily basis?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    decay_factor = 0.95\n    days_old = 4\n\n    # Do math calculation to get the answer\n    weight = (1 - decay_factor) * (decay_factor ** (days_old - 1))\n\n    # return answer\n    return weight\n```\n\nThis Python program calculates the weight applied to a four-day-old return in a RiskMetrics EWMA model with a decay factor \u03bb = 0.95. The weight is computed using the formula \\((1 - \\lambda) \\times \\lambda^{t-1}\\), where \\(t\\) is the number of days old the return is."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    P = 180000  # Principal amount\n    r = 0.10    # Annual interest rate\n    n = 365     # Number of times the interest is compounded per year\n    t = 2       # Time in years\n\n    # Do math calculation to get the answer\n    A = P * (1 + r/n)**(n*t)\n\n    # return answer\n    return A\n```"
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_inventory = 20 * 5.00\n    purchase_1 = 70 * 5.20\n    purchase_2 = 35 * 5.50\n    sales_1 = 50 * 6.00\n    sales_2 = 40 * 6.50\n\n    # Do math calculation to get the answer\n    total_sales = sales_1 + sales_2\n    total_cost_of_goods_sold = 0\n\n    # Calculate the cost of goods sold using FIFO method\n    remaining_units = initial_inventory\n\n    if sales_1 <= remaining_units:\n        total_cost_of_goods_sold += sales_1 * 5.00\n        remaining_units -= sales_1\n    else:\n        total_cost_of_goods_sold += remaining_units * 5.00\n        remaining_units = 0\n        sales_1 -= remaining_units\n\n    remaining_units = sales_1\n\n    if remaining_units > 0:\n        if remaining_units <= 70:\n            total_cost_of_goods_sold += remaining_units * 5.20\n        else:\n            total_cost_of_goods_sold += 70 * 5.20\n            remaining_units -= 70\n            total_cost_of_goods_sold += remaining_units * 5.50\n\n    remaining_units = sales_2\n\n    if remaining_units > 0:\n        if remaining_units <= 35:\n            total_cost_of_goods_sold += remaining_units * 5.50\n        else:\n            total_cost_of_goods_sold += 70 * 5.20\n            remaining_units -= 35\n            total_cost_of_goods_sold += remaining_units * 5.00\n\n    gross_profit = total_sales - total_cost_of_goods_sold\n\n    # return answer\n    return gross_profit\n\n# Run"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    required_return_rate = 0.10\n    dividend_per_share = 1.72\n    growth_rate = 0.04\n\n    # Do math calculation to get the answer\n    # Calculate the present value of the predicted dividend (from the fourth year onwards)\n    present_value_of_dividend = dividend_per_share / (required_return_rate - growth_rate)\n\n    # Discount the present value to the current time (for the 3 years without dividends)\n    inherent_value = present_value_of_dividend / (1 + required_return_rate) ** 3\n\n    # return answer\n    return inherent_value\n```\n\nThe program calculates the intrinsic value of the stock using the dividend discount model, considering the predicted dividend payments starting from the fourth year and a perpetual growth rate. The present value of these dividends is then discounted back to the current time."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    payout_ratio = 0.50\n    growth_rate = 0.10\n    return_rate = 0.15\n\n    # Do math calculation to get the answer\n    # The formula for the leading P/E ratio is given by: (Payout Ratio + Growth Rate) / Return Rate\n    leading_pe_ratio = (payout_ratio + growth_rate) / return_rate\n\n    # return answer\n    return leading_pe_ratio\n```\n\nIn this program:\n- We define the given variables: `payout_ratio`, `growth_rate`, and `return_rate`.\n- We use the formula \\(( \\text{Payout Ratio} + \\text{Growth Rate} ) / \\text{Return Rate}\\) to calculate the leading P/E ratio.\n- Finally, the program returns the calculated leading P/E ratio."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides \u20ac300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cash_flow = 300  # Yearly cash flow\n    n_years = 5      # Number of years\n    discount_rate = 0.04  # Annual discount rate\n\n    # Do math calculation to get the answer\n    pv = 0\n    for year in range(1, n_years + 1):\n        pv += cash_flow / ((1 + discount_rate) ** year)\n\n    # return answer\n    return pv\n\n# Example call to the function to see the answer\nprint(solution())\n```\n\nThis program calculates the present value (PV) of an investment that provides \u20ac300 yearly for five years when discounted at an annual rate of 4%. The `solution` function iterates through each year, calculates the present value of the cash flow for that year, and sums them up to get the total present value. The function then returns the computed present value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            " Certainly! Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss_on_sale = 15000\n\n    # Do math calculation to get the answer\n    book_value = initial_price - accumulated_depreciation\n    sale_price = book_value - loss_on_sale\n\n    # return answer\n    return sale_price\n```\n\nThis program defines the necessary variables, performs the required calculations, and returns the sum gained from the sale."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to \u00a335 million and total shareholders' equity of \u00a355 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000\n    total_shareholders_equity = 55000000\n\n    # Calculate total assets\n    total_assets = total_liabilities + total_shareholders_equity\n\n    # Calculate the percentage of total liabilities in terms of total assets\n    liability_percentage = (total_liabilities / total_assets) * 100\n\n    # Return the calculated percentage\n    return liability_percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend = 2\n    required_rate_of_return = 0.14  # 14% per annum\n    growth_rate = 0.08  # 8% per year\n\n    # Do math calculation to get the answer\n    # The inherent value of the shares can be calculated using the Gordon Growth Model:\n    # Inherent Value = Dividend / (Required Rate of Return - Growth Rate)\n    inherent_value = dividend / (required_rate_of_return - growth_rate)\n\n    # return answer\n    return inherent_value\n\n# Run the solution to get the answer\nanswer = solution()\nprint(f\"The inherent value for Smith's shares is ${answer:.2f}\")\n```"
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | \u25b3Curve | \u25b3Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, \u2206Curve shows the modification in the benchmark yield curve, and \u2206Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            " Certainly! To estimate the bond's approximate convexity, we can use the formula for convexity:\n\n\\[ \\text{Convexity} = \\frac{(PV_{+} + PV_{-}) - 2 \\cdot PV_{0}}{\\Delta Yield^2 \\cdot PV_{0}} \\]\n\nGiven:\n- \\( PV_{0} = 99.41172 \\)\n- \\( PV_{+} = 99.32213 \\)\n- \\( PV_{-} = 99.50132 \\)\n- \\( \\Delta Yield = 1 \\text{bp} = 0.0001 \\)\n\nLet's write a Python program to calculate the convexity.\n\n```python\ndef solution():\n    # Define variables name and value\n    PV0 = 99.41172\n    PV_plus = 99.32213\n    PV_minus = 99.50132\n    delta_yield = 0.0001  # 1 basis point\n\n    # Do math calculation to get the answer\n    numerator = (PV_plus + PV_minus) - 2 * PV0\n    denominator = (delta_yield ** 2) * PV0\n    convexity = numerator / denominator\n\n    # return answer\n    return convexity\n\n# Execute the solution to get the answer\nprint(solution())\n```\n\nThis program will calculate the bond's approximate convexity based on the provided values. Make sure to run the code to get the answer!"
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            " To compute the value added from the choice of security, we need to calculate the total returns for both the portfolio and the benchmark. The formula to calculate the total return is:\n\nTotal Return = (Weight1 \u00d7 Return1) + (Weight2 \u00d7 Return2) + ...\n\nThen, we subtract the benchmark return from the portfolio return to find the value added.\n\nHere\u2019s the Python program to compute the value added from the choice of security:\n\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_returns = {\n        'Domestic': 0.25,\n        'Bond': 0.09,\n        'International': 0.15\n    }\n    benchmark_returns = {\n        'Domestic': 0.15,\n        'Bond': 0.05,\n        'International': 0.18\n    }\n    portfolio_weights = {\n        'Domestic': 0.50,\n        'Bond': 0.30,\n        'International': 0.20\n    }\n    benchmark_weights = {\n        'Domestic': 0.35,\n        'Bond': 0.35,\n        'International': 0.30\n    }\n\n    # Calculate total portfolio return\n    total_portfolio_return = sum(portfolio_weights[security] * portfolio_returns[security]\n                                 for security in portfolio_weights)\n\n    # Calculate total benchmark return\n    total_benchmark_return = sum(benchmark_weights[security] * benchmark_returns[security]\n                                 for security in benchmark_weights)\n\n    # Calculate value added from the choice of security\n    value_added = total_portfolio_return - total_benchmark_return\n\n    # Return the value added\n    return value_added\n\n# Run the solution to get the answer\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nExplanation:\n- We define the returns and weights as dictionaries for both the portfolio and the benchmark.\n- We calculate the total return for the portfolio and benchmark by summing the products of weights and"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.9480000000000001,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            " Certainly! To determine the spot rate from the forward rate and forward points for the CAD/USD exchange rate, we need to understand the relationship between the spot rate, forward rate, and forward points.\n\nThe forward rate is given by: \\[ \\text{Forward Rate} = \\text{Spot Rate} + \\text{Forward Points} \\]\n\nHere, the forward points are given as a percentage rather than an absolute value, which can be calculated as:\n\n\\[ \\text{Forward Points} = \\text{Forward Rate} \\times \\frac{\\text{Percentage of Forward Points}}{100} \\]\n\nLet's translate this into a Python program.\n\n```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123\n    forward_points_percentage = 6.8\n\n    # Calculate the forward points in absolute terms\n    forward_points = forward_rate * (forward_points_percentage / 100)\n\n    # Calculate the spot rate\n    spot_rate = forward_rate - forward_points\n\n    # Return the spot rate rounded to 4 decimal places for currency conversions\n    return round(spot_rate, 4)\n```\n\nNow, the program can be executed to find the spot rate for CAD/USD."
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            " To answer the question about the share price of Baldwin at the end of 2011, we can use the information provided in the table. Specifically, we can use the \"Price/FFO, based upon year-end stock price\" and the \"Earnings per share\" for the year 2011 to determine the share price at the end of 2011.\n\nThe formula to calculate the share price is:\n\\[ \\text{Share Price} = \\text{FFO Per Share} \\times \\text{Price/FFO} \\]\n\nGiven that the \"Earnings per share\" for 2011 is $1.17 and the \"Price/FFO\" for 2011 is 11.5x, we can use these values to determine the share price.\n\nHere's the Python program to calculate the share price:\n\n```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share_2011 = 1.17\n    price_ffo_2011 = 11.5\n\n    # Do math calculation to get the answer\n    share_price_2011 = earnings_per_share_2011 * price_ffo_2011\n\n    # return answer\n    return share_price_2011\n\n# Calling the solution function to get the answer\nprint(solution())\n```\n\nWhen you run this program, it will output the share price of Baldwin at the end of 2011."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    secondary_quality_loans = 1000\n    top_quality_loans = 600\n    delayed_secondary_loans = 200\n    delayed_top_loans = 48\n\n    # Do math calculation to get the answer\n    total_delayed_loans = delayed_secondary_loans + delayed_top_loans\n    probability_secondary_delayed = delayed_secondary_loans / total_delayed_loans\n\n    # return answer\n    return probability_secondary_delayed\n\n# Execute the solution to get the answer\nanswer = solution()\nprint(f\"The probability that the delayed loan is a secondary quality loan is: {answer}\")\n```\n\nThis program calculates the probability that a randomly picked loan, which is delayed, is a secondary quality loan. The logic involves finding the total number of delayed loans and then calculating the proportion of delayed secondary quality loans out of the total delayed loans."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_price = 26.00    # Current price of the shares in USD\n    daily_volatility = 0.015  # Daily volatility rate\n    delta = -0.5             # Delta of the put option\n    z_value = 1.645          # Z-value for 95% confidence level (one-tailed)\n\n    # Do math calculation to get the answer\n    VaR = current_price * abs(delta) * daily_volatility * z_value\n\n    # return answer\n    return VaR\n```"
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            " ```python\ndef solution():\n    # Define variables and their values\n    issuance_of_preferred_stock = 45000\n    repurchase_of_common_stock = -20000  # Repurchasing stock reduces cash, so this is negative\n    issuance_of_bonds = 40000\n    debt_retired_through_issuance_of_common_stock = -45000  # Retiring debt through stock issuance reduces cash within financing activities\n    dividends_paid = -10000  # Dividends paid reduce cash, so this is negative\n\n    # Do math calculation to get the answer\n    cash_flow_from_financing_activities = (issuance_of_preferred_stock +\n                                           repurchase_of_common_stock +\n                                           issuance_of_bonds +\n                                           debt_retired_through_issuance_of_common_stock +\n                                           dividends_paid)\n\n    # return answer\n    return cash_flow_from_financing_activities\n\n# Execute the solution to obtain the answer\nresult = solution()\nprint(result)\n```\n\nThis program defines the cash flow elements from financing activities and calculates their net effect according to U.S. GAAP. The returned value will be the computed cash flow from financing activities."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    years = 3\n    spot_rates = [0.036, 0.037, 0.038]\n\n    # Calculate the present value of the coupon payments\n    pv_coupon_payments = 0\n    for year in range(1, years + 1):\n        coupon_payment = face_value * coupon_rate\n        pv_coupon_payment = coupon_payment / (1 + spot_rates[year - 1]) ** year\n        pv_coupon_payments += pv_coupon_payment\n\n    # Calculate the present value of the face value\n    pv_face_value = face_value / (1 + spot_rates[years - 1]) ** years\n\n    # Calculate the bond price\n    bond_price = pv_coupon_payments + pv_face_value\n\n    # Return the answer\n    return bond_price\n\n# Calling the function to get the bond price\nprint(solution())\n```\n\nThis program calculates the price of a bond given its face value, coupon rate, annual-pay period, and spot rates for each year. The formula used is based on the principle of discounting future cash flows (coupon payments and the face value) to their present value using the given spot rates for each year."
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            " Based on the provided data and the question, it seems that we need to calculate the payment given out during the year for the defined benefit pension plan. To do this, we will use the following information:\n\n- Benefit obligation at the beginning of the year: 45,000\n- Benefit obligation at the end of the year: 48,395\n- Employer contributions: 1,200\n- Actuarial loss: 350\n- Actual return on plan assets: 3,100\n\nThe payment given out during the year can be calculated using the following formula:\n\n\\[ \\text{Payment} = \\text{Benefit obligation at end of year} - \\text{Benefit obligation at beginning of year} + \\text{Employer contributions} - \\text{Actuarial loss} - \\text{Actual return on plan assets} \\]\n\nHere's the Python program to solve this:\n\n```python\ndef solution():\n    # Define variables name and value\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    employer_contributions = 1200\n    actuarial_loss = 350\n    actual_return_on_plan_assets = 3100\n\n    # Do math calculation to get the answer\n    payment_given_out = benefit_obligation_end - benefit_obligation_beginning + employer_contributions - actuarial_loss - actual_return_on_plan_assets\n\n    # return answer\n    return payment_given_out\n\n# Running the solution function to get the answer\nprint(solution())\n```\n\nExecuting this program will return the payment given out during the year based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            " Certainly! To determine the percentage of returns below $100,000 given that the returns are normally distributed with a mean of $160,000 and a standard deviation of $30,000, we can use the cumulative distribution function (CDF) of the normal distribution. In Python, we can leverage the `scipy.stats.norm` library to facilitate this calculation.\n\nHere's the complete Python program to answer the question:\n\n```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    mean = 160000\n    std_dev = 30000\n    threshold = 100000\n\n    # Use the cumulative distribution function of the normal distribution to get the answer\n    cdf_value = stats.norm.cdf(threshold, mean, std_dev)\n\n    # Convert the CDF value to a percentage\n    percentage = cdf_value * 100\n\n    # Return the answer\n    return percentage\n\n# Testing the function\nprint(f\"Percentage of returns below $100,000: {solution():.2f}%\")\n```\n\nIn this program:\n- We define the variables `mean`, `std_dev`, and `threshold` with the given values.\n- We use `stats.norm.cdf` to calculate the cumulative probability of returns being less than or equal to the threshold ($100,000).\n- We convert this probability to a percentage by multiplying by 100.\n- Finally, we return the calculated percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    margin_requirement = 65 / 100  # Convert percentage to decimal\n\n    # Do math calculation to get the answer\n    leverage_ratio = 1 / margin_requirement\n\n    # return answer\n    return leverage_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    Pb = 5  # Price of bottled water\n    Qbw1 = 30 - 2 * Pb  # Original quantity when price is Pb\n    Qbw2 = 30 - 2 * (Pb + 1)  # New quantity when price increases by 1 unit\n\n    # Do math calculation to get the answer\n    delta_Qbw = Qbw2 - Qbw1  # Change in quantity\n    delta_Pb = (Pb + 1) - Pb  # Change in price\n    price_elasticity = (delta_Qbw / Qbw1) / (delta_Pb / Pb)  # Price elasticity of demand\n    answer = price_elasticity\n\n    # return answer\n    return answer\n```\n\nWhen you run this program, it will calculate the price elasticity of demand for bottled water when the price is set to 5."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    flotation_costs = 0.05  # 5.0% flotation costs per share\n    dividend_next_year = 0.32  # Dividend per share the following year\n    growth_rate = 0.10  # 10% dividend growth rate\n    share_price = 14.69  # Price at which shares are released\n\n    # Do math calculation to get the answer\n    net_proceeds = share_price * (1 - flotation_costs)\n    cost_of_external_equity = (dividend_next_year / net_proceeds) + growth_rate\n\n    # return answer\n    return cost_of_external_equity * 100  # Convert to percentage\n```\n\nThis program calculates the cost of external equity for the firm based on the provided parameters, such as flotation costs, dividend the following year, growth rate, and the price at which the shares are released. The cost of external equity is returned as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid\u2013offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0032\n    round_trip_trading_fees = 0.0020\n    bid_offer_spread = 0.0010\n    holding_period_months = 9\n\n    # Do math calculation to get the answer\n    total_management_fee = (annual_management_fee / 12) * holding_period_months\n    total_cost = total_management_fee + round_trip_trading_fees + (bid_offer_spread * 2)\n\n    # return answer\n    return total_cost\n\n# Print the solution\nprint(\"The anticipated overall holding period cost of the nine-month investment in the ETF is {:.4f}%\".format(solution() * 100))\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            " Certainly! Below is the Python program to calculate the investor's net return based on the provided information.\n\n```python\ndef solution():\n    # Define variables and their values\n    value_of_assets_start = 515\n    value_of_assets_end = 602.5\n    hurdle_rate = 0.05  # 5% hurdle rate\n    management_fee_rate = 0.02  # 2% management fee\n    performance_fee_rate = 0.20  # 20% performance fee\n    high_water_mark = 540\n\n    # Calculate the management fee\n    management_fee = value_of_assets_end * management_fee_rate\n\n    # Calculate the gain over the high-water mark\n    gain_over_high_water_mark = max(0, value_of_assets_end - high_water_mark)\n\n    # Calculate the incentive fee after considering the hurdle rate\n    if value_of_assets_end > high_water_mark:\n        effective_gain = value_of_assets_end * (1 - management_fee_rate) - high_water_mark\n        hurdle_gain = high_water_mark * hurdle_rate\n        incentive_fee = max(0, effective_gain - hurdle_gain) * performance_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Calculate the total fees\n    total_fees = management_fee + incentive_fee\n\n    # Calculate the investor's net return\n    net_gain = value_of_assets_end - value_of_assets_start\n    investor_net_return = net_gain - total_fees\n\n    # return answer\n    return investor_net_return\n\n# Print the result\nif __name__ == \"__main__\":\n    print(solution())\n```\n\nThis program considers the management fee, the high-water mark, the hurdle rate, and the performance fee to compute the investor's net return after one year."
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            " Certainly! Let's break down the problem and write the Python program step by step.\n\nTo calculate the diluted earnings per share (EPS), we need to consider the following steps:\n\n1. Calculate the net income available to common shareholders.\n2. Calculate the additional shares that would be issued if the convertible bonds were converted.\n3. Calculate the diluted number of shares.\n4. Calculate the diluted EPS.\n\nHere are the steps in detail:\n\n1. **Net Income Available to Common Shareholders**:\n   \\[\n   \\text{Net Income Available} = \\text{Net Income} - \\text{Preferred Dividends}\n   \\]\n   Where Preferred Dividends = \\$\\text{Par value of preferred stock} \\times \\text{Dividend rate}\n\n2. **Additional Shares from Convertible Bonds**:\n   If the bonds are converted, they will create additional shares. Each bond is convertible into 300,000 ordinary shares collectively.\n\n3. **Diluted Number of Shares**:\n   \\[\n   \\text{Diluted Shares} = \\text{Shares of common stock} + \\text{Additional shares from bonds}\n   \\]\n\n4. **Diluted EPS**:\n   \\[\n   \\text{Diluted EPS} = \\frac{\\text{Net Income Available to Common Shareholders}}{\\text{Diluted Shares}}\n   \\]\n\nHere is the Python program that performs these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_of_common_stock = 1000000\n    net_income = 1500000\n    par_value_of_bonds = 10000000\n    par_value_of_preferred_stock = 2000000\n    dividend_rate_preferred = 0.07\n    tax_rate = 0.30\n    additional_shares_from_bonds = 300000\n\n    # Calculate preferred dividends\n    preferred_dividends = par_value_of"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            " Certainly! Here's the Python program that computes the cost per stock that the investor initially paid a year ago:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000  # number of stocks\n    return_rate = 15.5 / 100  # 15.5% return rate\n    selling_price = 24  # selling price per stock\n    dividend = 2500  # dividend obtained\n\n    # Calculate the total amount received from selling the stocks\n    total_sale_revenue = initial_investment * selling_price\n\n    # Calculate the total return from the investment\n    total_return = total_sale_revenue + dividend\n\n    # Calculate the initial amount invested\n    initial_amount = total_return / (1 + return_rate)\n\n    # Calculate the cost per stock\n    cost_per_stock = initial_amount / initial_investment\n\n    # return answer\n    return cost_per_stock\n\n# Print the answer\nprint(solution())\n```\n\nThis program defines the relevant variables, performs the necessary calculations to determine the initial amount invested and the cost per stock, and then returns the cost per stock."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund\u2019s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_price = 865.0  # US cents/bushel\n    roll_short_term_price = 877.0  # US cents/bushel\n    roll_long_term_price = 883.0  # US cents/bushel\n    annual_collateral_rate = 0.0060  # 0.60%\n    months = 3\n\n    # Calculate the annual return from collateral\n    collateral_return_annual = annual_collateral_rate\n\n    # Calculate the monthly collateral return\n    collateral_return_monthly = (1 + collateral_return_annual) ** (months / 12) - 1\n\n    # Calculate the price change return over the 3 months\n    price_change_return = (roll_long_term_price - initial_price) / initial_price\n\n    # Summing up the price change return and collateral return to get the total return\n    total_return = price_change_return + collateral_return_monthly\n\n    # Return the answer rounded to 4 decimal places for better precision\n    return round(total_return, 4)\n\n# Example output\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_cap_rate = 0.055\n    ending_cap_rate = 0.06\n    discount_rate = 0.0725\n\n    # Do math calculation to get the answer\n    growth_rate = (ending_cap_rate - (initial_cap_rate * (1 + discount_rate))) / (1 - initial_cap_rate)\n\n    # return answer\n    return growth_rate\n```\n\nThe program calculates the growth rate using the provided initial capitalization rate, ending capitalization rate, and discount rate. The formula used to calculate the growth rate is derived from the perpetuity growth model, which is commonly used in DCF analysis for real estate."
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 5000000\n    residual_value = 500000\n    expected_useful_life = 9\n    total_productive_capacity = 950000\n    production_FY2015 = 150000\n\n    # Calculate total depreciable amount\n    depreciable_amount = cost_of_equipment - residual_value\n\n    # Calculate depreciation rate per unit\n    depreciation_per_unit = depreciable_amount / total_productive_capacity\n\n    # Calculate depreciation expense for the initial year\n    depreciation_expense_initial_year = depreciation_per_unit * production_FY2015\n\n    # Return answer\n    return depreciation_expense_initial_year\n\n# Run the solution function\ndepreciation_expense = solution()\nprint(f\"The depreciation expense in the initial year is ${depreciation_expense:.2f}\")\n```\n\nThis Python program calculates the depreciation expense in the initial year using the units-of-production approach based on the given data. The total depreciable amount is calculated as the difference between the cost of the equipment and the residual value. The depreciation rate per unit is then determined by dividing the depreciable amount by the total productive capacity. Finally, the depreciation expense for the initial year is calculated by multiplying the depreciation rate per unit by the production in FY2015."
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            " Sure, I can help with that. Here is the Python program to calculate the Real Estate Investment Trust's share price at the end of 2017:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 92\n    depreciation_and_amortization = 45\n    weighted_average_shares_outstanding = 118\n    price_ffo_multiple = 13\n\n    # Calculate FFO (Funds from Operations)\n    ffo = net_income + depreciation_and_amortization\n\n    # Calculate FFO per share\n    ffo_per_share = ffo / weighted_average_shares_outstanding\n\n    # Calculate share price based on Price/FFO multiple\n    share_price = ffo_per_share * price_ffo_multiple\n\n    # return answer\n    return share_price\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the Funds from Operations (FFO) by adding net income and depreciation & amortization. It then calculates the FFO per share by dividing the FFO by the weighted average shares outstanding. Finally, it calculates the share price using the Price/FFO multiple and returns this value."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 40\n    average_cost = 70\n    price_elasticity = 1.5\n\n    # Calculate the price\n    price = (marginal_cost * price_elasticity) / (price_elasticity - 1)\n\n    # return answer\n    return price\n```\nHere is the Python program to calculate the price that Omega Petroleum Corp. is likely to set based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    bond_value = 97\n    floating_rate = 0.01  # 6-month LPR is 1.00%\n    spread = 0.008  # 80 basis points (80 bps = 0.8%)\n    days_in_period = 180  # Assuming 6-months in a period\n    days_in_year = 360  # 30/360 day count standard\n\n    # Calculate the current coupon rate\n    coupon_rate = floating_rate + spread\n\n    # Calculate the present value of the coupon using the current bond value\n    discount_margin = ((face_value * coupon_rate) - (bond_value - face_value)) / (bond_value)\n\n    # Convert the discount margin to basis points\n    discount_margin_bps = discount_margin * 10000\n\n    # Return the answer\n    return round(discount_margin_bps)\n```\n\nThis program first calculates the total coupon rate based on the 6-month LPR and the spread. Then, it derives the discount margin by calculating the difference between the expected coupon income and the actual bond value, normalized by the bond value. The discount margin is then converted into basis points (bps) and rounded to the nearest whole number for the final answer."
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1\u201310, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price \u2013 Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith\u2019s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    intercept = 0.0477\n    underwriter_rank_coefficient = 0.0150\n    pre_offer_price_adjustment_coefficient = 0.4350\n    offer_size_coefficient = -0.0009\n    fraction_retained_coefficient = 0.0500\n\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40  # in millions\n    fraction_retained = 0.70\n\n    # Do math calculation to get the answer\n    anticipated_initial_return = (\n        intercept +\n        underwriter_rank_coefficient * underwriter_rank +\n        pre_offer_price_adjustment_coefficient * pre_offer_price_adjustment +\n        offer_size_coefficient * offer_size +\n        fraction_retained_coefficient * fraction_retained\n    )\n\n    # return answer\n    return anticipated_initial_return\n\n# Call the solution function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    annual_mgmt_fee = 0.0040  # 0.40%\n    round_trip_commission = 0.0055  # 0.55%\n    bid_offer_spread = 0.0020  # 0.20%\n\n    holding_period = 9 / 12  # 9 months in years\n\n    # Do math calculation to get the total cost\n    total_mgmt_fee = annual_mgmt_fee * holding_period\n    total_trading_costs = round_trip_commission + bid_offer_spread\n\n    total_cost = total_mgmt_fee + total_trading_costs\n\n    # return answer\n    return total_cost\n```\n\nThis Python program defines the costs associated with investing in the ETF for a nine-month holding period and calculates the total projected cost without accounting for compound effects. The `solution` function returns the computed total cost."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            " ```python\n    r1 = 0.14  # Return for 2008\n    r2 = -0.10  # Return for 2009\n    r3 = -0.02  # Return for 2010\n\n    # Do math calculation to get the answer\n    holding_period_return = (1 + r1) * (1 + r2) * (1 + r3) - 1\n\n    # return answer\n    return holding_period_return\n```\nThe `solution` function first defines the annual returns for the years 2008, 2009, and 2010. It then calculates the holding period return using the formula:\n\n\\[ \\text{Holding Period Return} = (1 + r_1) \\times (1 + r_2) \\times (1 + r_3) - 1 \\]\n\nThis formula accounts for the compounded effect of the returns over the three years. The function then returns the calculated holding period return."
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            " Certainly! To calculate the Gross Domestic Product (GDP) for country B in 2015 based on the provided data, we need to use the following formula:\n\n\\[ \\text{GDP} = \\text{Consumption} + \\text{Gross Private Domestic Investment} + \\text{Government Spending} + \\text{Exports} - \\text{Imports} - \\text{Capital Consumption Allowance} \\]\n\nHere's the Python program to compute the GDP:\n\n```python\ndef solution():\n    # Define variables name and value\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    imports = 2.2\n    gross_private_domestic_investment = 6.0\n    exports = 1.8\n\n    # Do math calculation to get the answer\n    gdp = (consumption + gross_private_domestic_investment + government_spending + exports - imports - capital_consumption_allowance)\n\n    # return answer\n    return gdp\n```\n\nYou can run this program to get the GDP for country B in 2015."
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.07  # Expected return of Stock 1\n    r2 = 0.10  # Expected return of Stock 2\n    sigma1 = 0.12  # Standard deviation of Stock 1\n    sigma2 = 0.25  # Standard deviation of Stock 2\n    w1 = 0.30  # Portfolio weight of Stock 1\n    w2 = 0.70  # Portfolio weight of Stock 2\n    correlation = 0.20  # Correlation between Stock 1 and Stock 2\n\n    # Do math calculation to get the answer\n    portfolio_variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2 * w1 * w2 * sigma1 * sigma2 * correlation)\n    portfolio_std_dev = portfolio_variance**0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThe `solution` function performs the following steps:\n1. Defines the variables for the expected returns, standard deviations, portfolio weights, and correlation.\n2. Calculates the variance of the portfolio return using the formula for the variance of a two-asset portfolio.\n3. Computes the standard deviation of the portfolio return by taking the square root of the variance.\n4. Returns the standard deviation of the portfolio return as the answer."
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    working_capital_balance = 22000000\n    fair_value_fixed_assets = 57000000\n    normalized_income = 89000000\n    required_return_working_capital = 0.06\n    required_return_fixed_assets = 0.09\n    required_return_intangible_assets = 0.25\n    future_growth_rate = 0.07\n\n    # Calculate required returns\n    return_on_working_capital = required_return_working_capital * working_capital_balance\n    return_on_fixed_assets = required_return_fixed_assets * fair_value_fixed_assets\n\n    # Calculate excess earnings on intangible assets\n    excess_earnings = normalized_income - return_on_working_capital - return_on_fixed_assets\n\n    # Calculate the value of intangibles\n    value_of_intangibles = excess_earnings / (required_return_intangible_assets - future_growth_rate)\n\n    # Return the answer\n    return value_of_intangibles\n\n# Call the function and print the result\nprint(f\"The value of the intangibles is ${solution():,.2f}\")\n```\n\nThis Python program first defines the variables with given data and then performs the necessary calculations to determine the value of intangible assets using the excess earnings method. Finally, it returns the value of the intangibles."
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            " Sure, let's first define the steps to calculate the Cash Conversion Cycle (CCC), which is also known as the net operating cycle. The formula for CCC is:\n\n\\[ CCC = DIO + DSO - DPO \\]\n\nWhere:\n- DIO (Days Inventory Outstanding) = \\(\\frac{Average Inventory}{COGS} \\times 365\\)\n- DSO (Days Sales Outstanding) = \\(\\frac{Accounts Receivable}{Credit Sales} \\times 365\\)\n- DPO (Days Payable Outstanding) = \\(\\frac{Accounts Payable}{COGS} \\times 365\\)\n\nGiven the values from the table:\n- Credit Sales: $40,000 million\n- Cost of Goods Sold (COGS): $30,000 million\n- Accounts Receivable: $3,000 million\n- Beginning Inventory: $1,500 million\n- Ending Inventory: $2,000 million\n- Accounts Payable: $4,000 million\n\nAverage Inventory = \\(\\frac{Beginning Inventory + Ending Inventory}{2}\\)\n\nHere is the Python program to calculate the Cash Conversion Cycle:\n\n```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 40000  # in millions\n    cogs = 30000  # in millions\n    accounts_receivable = 3000  # in millions\n    beginning_inventory = 1500  # in millions\n    ending_inventory = 2000  # in millions\n    accounts_payable = 4000  # in millions\n\n    # Calculate Average Inventory\n    average_inventory = (beginning_inventory + ending_inventory) / 2\n\n    # Calculate DIO, DSO, and DPO\n    dio = (average_inventory / cogs) * 365\n    dso = (accounts_receivable / credit_sales) * 365\n    dpo = (accounts_pay"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 5000000  # $5 million in research\n    software_cost = 3000000       # $3 million in software creation\n    useful_life = 20              # 20 years of copyright duration\n    salvage_value = 10000         # Salvage value at the end of the useful life\n\n    # Calculate the total initial cost of the software copyright\n    total_initial_cost = initial_investment + software_cost\n\n    # Calculate the annual depreciation expense\n    annual_depreciation = (total_initial_cost - salvage_value) / useful_life\n\n    # Calculate the book value at the end of 2014 (after 1 year of depreciation)\n    book_value_end_2014 = total_initial_cost - annual_depreciation\n\n    # return answer\n    return book_value_end_2014\n\n# Output the result\nprint(solution())\n```\n\nThis Python program calculates the book value of the software copyright at the end of 2014 by first determining the total initial cost, then calculating the annual depreciation, and finally computing the book value after one year."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            " Certainly! To solve for the variance of a discrete uniform distribution with outcomes [7, 8, 9, 10], you'll need to follow these steps:\n1. Calculate the mean (expected value) of the distribution.\n2. Calculate the variance using the formula for variance.\n\nHere is the Python program to achieve that:\n\n```python\ndef solution():\n    # Define variables name and value\n    outcomes = [7, 8, 9, 10]\n\n    # Calculate the mean (expected value)\n    mean = sum(outcomes) / len(outcomes)\n\n    # Calculate the variance\n    variance = sum((x - mean) ** 2 for x in outcomes) / len(outcomes)\n\n    # return variance\n    return variance\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nThis program first computes the mean of the outcomes and then calculates the variance by summing the squared differences from the mean and dividing by the number of outcomes. The result is the variance of the discrete uniform distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revenue = 600000\n    avg_account_receivable = 50000\n\n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    answer = 365 / receivables_turnover\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    investment_duration = 8\n    modified_duration = 11.470\n\n    # Do math calculation to get the answer\n    duration_gap = investment_duration - modified_duration\n\n    # return answer\n    return duration_gap\n```\n\nThe duration gap at the moment of procurement can be calculated by subtracting the modified duration from the investment duration. This program defines the given variables, performs the necessary calculation, and returns the duration gap."
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    price_return = 0.04  # 4%\n    roll_return = 0.015  # 1.50%\n    collateral_required = 0.20  # 20%\n    free_rate = 0.01  # 1%\n    position_size = 1500000  # $1,500,000\n\n    # Do math calculation to get the answer\n    collateral = position_size * collateral_required\n    collateral_cost = collateral * free_rate\n    overall_return = price_return + roll_return - collateral_cost\n\n    # return answer\n    return overall_return\n```\n\nWith the provided values:\n- Price Return: 4%\n- Roll Return: 1.50%\n- Collateral Required: 20%\n- Free Rate: 1%\n- Position Size: $1,500,000\n\nThe overall return for the hedge position of Platte River Foods is calculated as follows:\n\n1. Calculate the collateral required: `collateral = position_size * collateral_required`\n2. Calculate the cost of the collateral: `collateral_cost = collateral * free_rate`\n3. Calculate the overall return: `overall_return = price_return + roll_return - collateral_cost`\n\nThe final result is the overall return of the hedge position, which accounts for the price return, roll return, and the cost of the collateral."
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150  # Assuming no write-offs\n    actuarial_loss = 350  # Assuming this is disregarded\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    plan_assets_beginning = 40800\n    plan_assets_end = 44300\n    actual_return_on_plan_assets = 3100\n    discount_rate = 0.075\n    expected_rate_of_return = 0.082\n\n    # Calculate expected return on plan assets\n    expected_return = plan_assets_beginning * expected_rate_of_return\n\n    # Calculate interest cost on benefit obligation\n    interest_cost = benefit_obligation_beginning * discount_rate\n\n    # Calculate amortization of past service costs (assuming amortization over 5 years for simplicity)\n    amortization_period = 5  # Example period for amortization\n    amortization_past_service_costs = past_service_costs / amortization_period\n\n    # Calculate net pension cost\n    net_pension_cost = current_service_costs + interest_cost - expected_return + amortization_past_service_costs\n\n    # Return the net pension cost\n    return net_pension_cost\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the net pension cost that would be presented in the income statement as per US GAAP, considering the inputs provided in the table and the assumptions (no write-offs of past service expenses or actuarial losses and disregarding the actuarial loss)."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            " Certainly! Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_income_200_units = 500000\n    total_income_250_units = 600000\n    units_200 = 200\n    units_250 = 250\n\n    # Do math calculation to get the answer\n    marginal_revenue_per_unit = (total_income_250_units - total_income_200_units) / (units_250 - units_200)\n    answer = marginal_revenue_per_unit\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            " Certainly! Let's write a Python program to determine the mark-to-market value in US dollars for Bradley's hedged position after three months.\n\nFrom the table provided, we have the following information:\n- Initial 6-month forward USD/EUR rate at initiation: -19.0 points\n- 6-month forward USD/EUR rate three months later: -27.0 points\n- Spot rate at initiation: 1.3935 (bid) and 1.3983 (ask)\n- Spot rate three months later: 1.4106 (bid) and 1.4210 (ask)\n\nWe need to calculate the value of the forward contract for 200,000 shares at EUR90 each, hedging the position entirely through a 6-month USD/EUR forward contract.\n\nTo compute the mark-to-market value of the forward contract, follow these steps:\n1. Calculate the initial forward rate based on the spot rate and forward points at initiation.\n2. Calculate the forward rate three months later based on the spot rate and forward points at that time.\n3. Determine the change in the value of the forward contract and express it in US dollars.\n\nHere is the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares = 200000\n    share_price_eur = 90\n    init_spot_rate = 1.3935  # Spot rate at initiation (bid)\n    init_forward_points = -19.0  # 6-month forward points at initiation\n    three_month_spot_rate = 1.4106  # Spot rate three months later (bid)\n    three_month_forward_points = -27.0  # 6-month forward points three months later\n\n    # Calculate initial forward rate\n    init_forward_rate = init_spot_rate + init_forward_points / 10000\n\n    # Calculate forward rate three months later\n    three_month_forward_rate = three_month_spot_rate + three_month_forward_points / 1000"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    rate_2_years = 0.025  # 2 years at 2.5%\n    rate_4_years = 0.055  # 4 years at 5.5%\n\n    # Do math calculation to get the answer\n    forward_rate = ((1 + rate_4_years) ** 4 / (1 + rate_2_years) ** 2) ** (1/2) - 1\n\n    # return answer\n    return forward_rate\n```\n\nYou can run the `solution` function to find the forward rate for two years starting from two years from now. The function calculates this forward rate using the given spot rates."
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1_year = 0.08\n    spot_rate_2_years = 0.09\n    spot_rate_3_years = 0.095\n    coupon_rate = 0.10\n    face_value = 100  # Assuming the face value of the bond is $100\n\n    # Do math calculation to get the answer\n    # Calculate the present value of each coupon payment\n    coupon_payment = face_value * coupon_rate\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1_year)\n    pv_coupon_2 = coupon_payment / ((1 + spot_rate_2_years) ** 2)\n\n    # Calculate the present value of the face value at maturity\n    pv_face_value = face_value / ((1 + spot_rate_3_years) ** 3)\n\n    # Sum up the present values to get the cost of the bond\n    bond_cost = pv_coupon_1 + pv_coupon_2 + pv_face_value\n\n    # return answer\n    return bond_cost\n```\n\nThis program calculates the cost of a 3-year bond with a 10% coupon rate using the given spot rates. The bond is assumed to have a face value of $100, and the present value of the coupon payments and face value is calculated using the spot rates for 1 year, 2 years, and 3 years respectively. The sum of these present values gives the cost of the bond."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            " Sure! Here\u2019s the Python program to calculate at which production levels (in units) the degree of operating leverage (DOL) is likely to be the least:\n\n```python\ndef solution():\n    # Define variables and their values\n    unit_contribution_margin = 20\n    fixed_costs = 500000\n\n    # The degree of operating leverage (DOL) is calculated using the formula:\n    # DOL = (Q * CM) / (Q * CM - FC)\n    # where Q is the number of units, CM is the unit contribution margin, and FC is the fixed costs.\n    # To minimize DOL, we want to maximize the denominator, which happens at the maximum production level.\n\n    max_production_level = 300000\n\n    # Do the math calculation to get the answer\n    DOL = max_production_level\n\n    # return answer (at production levels in units)\n    return DOL\n\n# Example usage:\nprint(solution())\n```\n\nThis program calculates that the degree of operating leverage (DOL) is likely to be the least at the maximum production level of 300,000 units, given the provided information."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at\u00a0$50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at\u00a0$60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_inventory_2013 = 2000\n    units_sold_2013 = 1500\n    purchase_price_2013 = 50\n    purchase_price_2014 = 60\n    additional_units_2014 = 1000\n    units_sold_2014 = 500\n\n    # Calculate the ending inventory for 2013\n    ending_inventory_2013 = initial_inventory_2013 - units_sold_2013\n\n    # Calculate the total inventory at the start of 2014\n    initial_inventory_2014 = ending_inventory_2013 + additional_units_2014\n\n    # Calculate the ending inventory for 2014 (FIFO method)\n    units_from_2013_remaining = max(0, ending_inventory_2013 - units_sold_2014)\n\n    if units_from_2013_remaining > 0:\n        ending_inventory_2014 = units_from_2013_remaining\n    else:\n        units_from_2014_remaining = additional_units_2014 - (units_sold_2014 - ending_inventory_2013)\n        ending_inventory_2014 = units_from_2014_remaining\n\n    # Calculate the total cost of the ending inventory\n    cost_of_inventory_2013 = units_from_2013_remaining * purchase_price_2013\n    cost_of_inventory_2014 = units_from_2014_remaining * purchase_price_2014\n\n    ending_inventory_balance_2014 = cost_of_inventory_2013 + cost_of_inventory_2014\n\n    # return answer\n    return ending_inventory_balance_2014"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dirty_price = 104.17\n    base_coupon_rate = 0.02\n    days_since_last_coupon = 30\n    days_to_futures_contract_termination = 90\n    quoted_futures_price = 129\n    risk_free_rate = 0.0165\n    conversion_factor = 0.7025\n\n    # Calculate the accrued interest\n    accrued_interest = (base_coupon_rate / 2) * (days_since_last_coupon / 180) * 100\n\n    # Calculate the clean price\n    clean_price = dirty_price - accrued_interest\n\n    # Calculate the implied repurchase price\n    implied_repurchase_price = clean_price * (1 + (risk_free_rate * ((days_to_futures_contract_termination + days_since_last_coupon) / 360))) - quoted_futures_price * conversion_factor\n\n    # Calculate the quoted futures contract price equilibrium\n    equilibrium_quoted_price = (implied_repurchase_price - (base_coupon_rate / 2) * (days_to_futures_contract_termination / 180) * 100) / conversion_factor\n\n    # Return the answer\n    return equilibrium_quoted_price\n\n# To get the final answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            " To determine the price value of a basis point for the collection of bonds, you need to calculate the sensitivity of the bond prices to changes in the yield using the modified duration. The price value of a basis point (PVBP) can be estimated using the formula:\n\nPVBP = Modified Duration * Par Value * 0.0001\n\nHere's the Python program to calculate the price value of a basis point for the entire collection of bonds:\n\n```python\ndef solution():\n    # Define variables name and value\n    bonds = [\n        {\"par_value\": 25000000, \"price\": 105, \"modified_duration\": 8},\n        {\"par_value\": 25000000, \"price\": 100, \"modified_duration\": 8.5},\n        {\"par_value\": 20000000, \"price\": 95, \"modified_duration\": 6.3},\n        {\"par_value\": 30000000, \"price\": 87, \"modified_duration\": 10.2}\n    ]\n\n    # Do math calculation to get the answer\n    total_pvbp = 0\n    for bond in bonds:\n        pvbp = bond[\"modified_duration\"] * bond[\"par_value\"] * 0.0001\n        total_pvbp += pvbp\n\n    # return answer\n    return total_pvbp\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program iterates through each bond in the collection, calculates the PVBP using the provided modified durations and par values, and then sums them up to get the total PVBP of the bond collection. The result is printed out as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    current_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    recovery_rate = 0.0\n\n    # Do math calculation to get the answer\n    # Calculate the discount factor\n    discount_factor = face_value * (1 - recovery_rate) * (1 / current_price)\n\n    # Calculate the risk-neutral probability of not defaulting\n    survival_probability = discount_factor * (1 - recovery_rate)\n\n    # Calculate the probability of default\n    default_probability = 1 - survival_probability\n\n    # Calculate the risk-neutral probability\n    risk_neutral_default_probability = 1 - (1 / discount_factor)\n\n    # return answer\n    return risk_neutral_default_probability\n\n# Call the function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis Python program calculates the risk-neutral 1-year probability of default for Firm XYZ using the given parameters and the risk-neutral binomial tree methodology. Make sure to run this script in a Python environment to get the numerical answer."
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    number_of_shares_outstanding = 10000000\n    earnings_per_share = 2.00\n    pe_ratio = 20\n    book_value_per_share = 30\n\n    # Calculate the current market price per share\n    market_price_per_share = earnings_per_share * pe_ratio\n\n    # Calculate the total cost of buying back 1 million shares\n    buyback_shares = 1000000\n    total_buyback_cost = buyback_shares * market_price_per_share\n\n    # Calculate the new number of shares outstanding\n    new_number_of_shares_outstanding = number_of_shares_outstanding - buyback_shares\n\n    # Calculate the total book value of the company\n    total_book_value = book_value_per_share * number_of_shares_outstanding\n\n    # Adjust the total book value after the buyback\n    adjusted_total_book_value = total_book_value - total_buyback_cost\n\n    # Calculate the subsequent book value per share\n    subsequent_book_value_per_share = adjusted_total_book_value / new_number_of_shares_outstanding\n\n    # return answer\n    return subsequent_book_value_per_share\n```\n\nThe provided Python program calculates the subsequent book value per share after the corporation buys back 1 million shares at the current market rate based on the given data."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of \u00a5 5,000,000. He took out a loan for the remaining balance of \u00a55,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            " Certainly! Below is the Python program to calculate the initial mortgage repayment amount for Mr. Lee's loan:\n\n```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 5000000  # in \u00a5\n    annual_interest_rate = 0.058  # 5.8%\n    num_payments_per_year = 12  # monthly payments\n    num_years = 10  # loan period in years\n\n    # Calculate the monthly interest rate and total number of payments\n    monthly_interest_rate = annual_interest_rate / num_payments_per_year\n    total_num_payments = num_years * num_payments_per_year\n\n    # Calculate the monthly repayment using the mortgage formula\n    monthly_repayment = (loan_amount * monthly_interest_rate) / (1 - (1 + monthly_interest_rate)**-total_num_payments)\n\n    # return answer\n    return round(monthly_repayment, 2)\n\n# Example usage to print the result\nprint(solution())\n```\n\nThis program calculates the initial monthly mortgage repayment using the loan amount, annual interest rate, and loan period. It uses the mortgage formula to compute the monthly repayment and rounds the result to two decimal places for precision."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    three_month_mrr_june = 0.0135  # 1.35% as a decimal\n    basis_points_addition = 0.0065  # 65 basis points as a decimal\n\n    # Do math calculation to get the answer\n    coupon_rate_june = three_month_mrr_june + basis_points_addition\n\n    # Return answer as a percentage\n    return coupon_rate_june * 100\n```\n\nThis program calculates the coupon rate for the interest payment due on 30 June by adding the three-month MRR for June to the additional 65 basis points. The result is then returned as a percentage."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            " Certainly! Below is the Python program that calculates the expected standard deviation of the portfolio based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    weight_1 = 0.30\n    weight_2 = 0.70\n    std_dev_1 = 0.20\n    std_dev_2 = 0.12\n    correlation = 0.40\n\n    # Do math calculation to get the answer\n    covariance = correlation * std_dev_1 * std_dev_2\n    portfolio_variance = (weight_1**2 * std_dev_1**2) + (weight_2**2 * std_dev_2**2) + (2 * weight_1 * weight_2 * covariance)\n    portfolio_std_dev = portfolio_variance**0.5\n\n    # return answer in percentage\n    return portfolio_std_dev * 100\n\n# Execute the solution function to get the answer\nprint(solution())\n```\n\nThe function `solution` first defines the variables using the provided weights, standard deviations, and correlation of the securities. It then calculates the covariance, portfolio variance, and finally the portfolio standard deviation. The result is returned as a percentage.\n\nTo get the answer, you simply need to call the `solution` function. The `print(solution())` statement will output the expected standard deviation of the portfolio."
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            " To solve this problem, we need to determine the equity index level at which the equity swap value stands at zero. This involves understanding that in a receive-fixed, pay-equity swap, the fixed leg payments need to be offset by the equity index performance to result in a zero net value.\n\nHere\u2019s the plan:\n1. Calculate the present value of the fixed leg payments.\n2. Determine the future equity index level that would result in the swap having a zero value.\n\nLet\u2019s start by considering the fixed leg payments, which occur quarterly with a nominal amount of $100 million and an annualized fixed interest rate of 3%.\n\nWe need to calculate the present value of the fixed leg payments using the provided present value factors. Then we need to determine the equity index level such that the pay-equity leg matches the present value of the fixed leg.\n\nHere is the Python program to do that:\n\n```python\ndef solution():\n    # Define variables name and value\n    fixed_rate = 0.03  # annualized fixed interest is 3%\n    nominal_amount = 100000000  # nominal amount in dollars\n    initial_index_level = 100  # initial equity index at the time of the swap\n\n    # Present value factors from the table for each quarterly period\n    pv_factors = [\n        0.997506,  # 0.25 years (1st quarter)\n        0.992556,  # 0.50 years (2nd quarter)\n        0.985222,  # 0.75 years (3rd quarter)\n        0.975610   # 1.00 years (4th quarter)\n    ]\n\n    # Calculate the fixed payments for each quarter\n    quarterly_fixed_payment = (fixed_rate / 4) * nominal_amount\n\n    # Calculate the present value of the fixed leg payments\n    pv_fixed_leg = sum(quarterly_fixed_payment * pv_factor for pv_factor in pv_factors)\n\n    # Determine the future equity index level that would result in the swap having a zero value\n"
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            " Certainly! To calculate the Enterprise Value (EV) and EBITDA multiple for the business depicted in the provided table, we need to use the following formula:\n\n\\[ EV = \\text{Market Capitalization} + \\text{Market Value of Debt} - \\text{Cash and Short-term Investments} \\]\n\nOnce the EV is computed, we can then compute the EV/EBITDA multiple:\n\n\\[ \\text{EV/EBITDA Multiple} = \\frac{EV}{\\text{EBITDA}} \\]\n\nUsing the values from the table:\n- Market value of debt: $10 million\n- Market capitalization: $45 million\n- Cash and short-term investments: $2.5 million\n- EBITDA: $15 million\n\nHere's the Python program to compute the EV/EBITDA multiple:\n\n```python\ndef solution():\n    # Define variables name and value\n    market_value_of_debt = 10000000  # $10 million\n    market_capitalization = 45000000 # $45 million\n    cash_and_short_term_investments = 2500000 # $2.5 million\n    ebitda = 15000000  # $15 million\n\n    # Compute the Enterprise Value (EV)\n    ev = market_capitalization + market_value_of_debt - cash_and_short_term_investments\n\n    # Compute the EV/EBITDA multiple\n    ev_ebitda_multiple = ev / ebitda\n\n    # Return the answer\n    return ev_ebitda_multiple\n```\n\nThis program defines the required variables, calculates the enterprise value (EV), and then computes the EV/EBITDA multiple based on the given data. The function `solution` returns the computed EV/EBITDA multiple."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    FV = 5000\n    r = 0.05\n    n = 12\n    t = 3\n\n    # Do math calculation to get the answer\n    PV = FV / (1 + r/n)**(n*t)\n\n    # return answer\n    return PV\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis Python program calculates the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly. The necessary variables are defined, the formula for the present value is applied, and the answer is returned."
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            " Sure, let's break down the problem and write a Python program to calculate the mark-to-market gain for Sullivan's forward position.\n\n1. **Historical Forward Rate:** The firm traded EUR 5,000,000 at a forward rate of GBP/EUR 0.7400 nine months ago.\n2. **Current Forward Rate:** To determine the current value, we need to use the three months forward points from Exhibit 2.\n3. **Mark-to-Market Gain:** Calculate the difference between the historical forward rate and the current forward rate and apply it to the notional amount (EUR 5,000,000).\n\nHere's the Python program to accomplish this:\n\n```python\ndef solution():\n    # Define variables and their values\n    historical_forward_rate = 0.7400\n    midpoint_spot_rate = 0.7343\n    forward_points_three_months = (14.0 + 15.0) / 2  # Taking the midpoint of the forward points\n    notional_amount_euro = 5000000\n\n    # Calculate the current forward rate using the spot rate and forward points\n    current_forward_rate = midpoint_spot_rate + (forward_points_three_months / 10000)\n\n    # Calculate the mark-to-market gain\n    gain_per_euro = historical_forward_rate - current_forward_rate\n    mark_to_market_gain = gain_per_euro * notional_amount_euro\n\n    # Return the answer\n    return mark_to_market_gain\n\n# Execute the solution function to get the answer\nanswer = solution()\nprint(\"Mark-to-market gain:\", answer)\n```\n\nWhen you run this program, it calculates the mark-to-market gain for Sullivan's forward position based on the provided forward rates and points."
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            " To calculate the share value of REIT B using valuation Method 4 (which typically involves using the P/FFO multiple), we need to use the \"Property subsector average P/FFO multiple\" and the \"Funds from operations (FFO)\" provided in the table.\n\nHere's the Python program to perform this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    p_ffo_multiple = 13.5  # Property subsector average P/FFO multiple for REIT B\n    ffo = 290612          # Funds from operations (FFO) for REIT B\n    shares_outstanding = 67900  # Shares outstanding for REIT B\n\n    # Do math calculation to get the answer\n    total_value = p_ffo_multiple * ffo\n    share_value = total_value / shares_outstanding\n\n    # return answer\n    return share_value\n\n# Execute the solution function and print the result to get the share value\nprint(solution())\n```\n\nThe function `solution` calculates the total value of REIT B using its P/FFO multiple and its FFO, and then divides that by the number of shares outstanding to get the share value. The returned result is the share value of REIT B based on valuation Method 4."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth \u00a3300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B\u2019s return on equity be using year-end equity with the ending shareholders\u2019 equity being \u00a310,000,000, a tax rate of 25%, \u00a30.00 in dividends, and a net income of \u00a3750,000?",
        "output": [
            " Certainly! To generate the Python program to solve the given question, we need to calculate Firm B's return on equity (ROE).\n\nGiven that Firm B expenses the printer, it means the entire cost of the printer will be an expense in the first year, which will affect the net income. The return on equity is calculated as:\n\n\\[ \\text{ROE} = \\frac{\\text{Net Income}}{\\text{Shareholders' Equity}} \\]\n\nFor Firm B, we need to adjust the net income and shareholders' equity accordingly.\n\nHere is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    printer_cost = 300000\n    tax_rate = 0.25\n    firm_A_net_income = 750000\n    firm_A_shareholders_equity = 10000000\n\n    # Firm B expenses the printer entirely\n    firm_B_net_income = firm_A_net_income - printer_cost\n\n    # Calculate the tax impact\n    firm_B_income_after_tax = firm_B_net_income * (1 - tax_rate)\n\n    # Firm B's shareholders' equity remains unchanged because the printer is expensed immediately\n    firm_B_shareholders_equity = firm_A_shareholders_equity\n\n    # Calculate Firm B's return on equity (ROE)\n    roe = firm_B_income_after_tax / firm_B_shareholders_equity\n\n    # Return the answer\n    return roe\n\n# Execute the solution to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program calculates Firm B's net income after expensing the entire cost of the printer and adjusting for taxes, then uses the shareholders' equity to compute the ROE. You can execute this code to get the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    S = 85          # Current stock price\n    K = 90          # Strike price\n    r = 0.05        # Risk-free interest rate\n    c = 10          # Call option price\n    p = 15          # Put option price\n    T = 5           # Time to maturity in years\n\n    # Do math calculation to get the answer\n    d = (c + p - S + K * (1 - (r ** T))) / (T * S)\n\n    # return answer\n    return d\n\n# Execute the solution to get the implied dividend yield\nimplied_dividend_yield = solution()\nprint(\"The implied dividend yield is:\", implied_dividend_yield)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spread_change = 1.00 / 100  # 100 basis points change\n    duration = 6.0\n    convexity = 55.0\n\n    # Do math calculation to get the answer\n    price_change_due_to_duration = -duration * spread_change\n    price_change_due_to_convexity = 0.5 * convexity * (spread_change ** 2)\n    total_price_change = price_change_due_to_duration + price_change_due_to_convexity\n\n    # return answer\n    return total_price_change\n```\n\nThis program calculates the effect of the change in spread on the bond return by considering both the duration and convexity as provided in the question."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            " Certainly! Let's break down the problem step by step to write the Python program to calculate the bond's worth.\n\n1. **Inputs**:\n   - Coupon rate: 5% or 0.05\n   - Time-to-Maturity: 3 years\n   - Z-spread: 234 basis points or 2.34% (0.0234)\n\n2. **Relevant Spot Rates** (from the table):\n   - 1 year: 4.86% or 0.0486\n   - 2 years: 4.95% or 0.0495\n   - 3 years: 5.65% or 0.0565\n\n3. **Calculations**:\n   - Adjust the spot rates by adding the Z-spread.\n   - Calculate the present value of the cash flows using the adjusted spot rates.\n\n4. **Formula to calculate bond's worth**:\n\\[ \\text{Bond's Worth} = \\sum \\left( \\frac{C}{(1 + r_i)^i} \\right) + \\frac{F}{(1 + r_n)^n} \\]\nwhere:\n- \\( C \\) is the annual coupon payment (5% of face value),\n- \\( F \\) is the face value of the bond,\n- \\( r_i \\) are the adjusted spot rates for each year.\n\nHere is the Python program to compute the bond's worth:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Assuming face value of bond is $100\n    coupon_rate = 0.05\n    z_spread = 0.0234\n\n    spot_rates = [0.0486, 0.0495, 0.0565]  # 1-year, 2-year, 3-year spot rates\n    adjusted_rates = [rate + z_spread for rate in spot_rates]\n\n    coupon_payment = face_value * coupon_rate\n    bond_value = 0\n\n    #"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beta = 0.65\n    risk_free_rate = 0.03\n    market_return = 0.09\n\n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n\n    # return answer\n    return expected_return\n```\n\nThis Python program calculates the expected return for XYZ Company using the provided values for beta, the risk-free rate, and the expected market return. The expected return is calculated using the formula:\n\n\\[ \\text{Expected Return} = \\text{Risk-Free Rate} + \\beta \\times (\\text{Market Return} - \\text{Risk-Free Rate}) \\]\n\nBy calling the `solution()` function, you will get the expected return for XYZ Company."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 10.3829\n    modified_convexity = 141.217\n    yield_change = 0.0050  # 50 basis points is 0.5% or 0.0050\n\n    # Do math calculation to get the answer\n    projected_percentage_price_change = (modified_duration * yield_change) - (0.5 * modified_convexity * yield_change**2)\n\n    # return answer\n    return projected_percentage_price_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    common_shares_outstanding = 1200000\n    beta = 2.2\n    current_bonds_face_value = 10000000\n    current_bond_yield = 0.1365\n    additional_bonds_limit = 2500000\n    additional_bond_yield_limit = 0.1365\n    additional_bond_yield_excess = 0.16\n    new_equity_price = 10\n    risk_free_rate = 0.03\n    market_return = 0.10\n    tax_rate = 0.3\n    new_funding_amount = 7500000\n\n    # Calculate current debt and equity amounts\n    debt_to_equity_ratio = (current_bonds_face_value / (common_shares_outstanding * new_equity_price))\n\n    # Calculate new debt and equity to maintain the same debt-to-equity ratio\n    new_debt = new_funding_amount / (1 + debt_to_equity_ratio)\n    new_equity = new_funding_amount - new_debt\n\n    # Calculate cost of new equity using CAPM\n    cost_of_equity = risk_free_rate + beta * (market_return - risk_free_rate)\n\n    # Calculate cost of new debt\n    if new_debt <= additional_bonds_limit:\n        cost_of_debt = additional_bond_yield_limit\n    else:\n        cost_of_debt = additional_bond_yield_excess\n\n    # Calculate after-tax cost of debt\n    after_tax_cost_of_debt = cost_of_debt * (1 - tax_rate)\n\n    # Calculate weighted average cost of capital (WACC)\n    weight_of_debt = new_debt / new_funding_amount\n    weight_of_equity = new_equity / new_funding_amount\n   "
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08  # Coupon rate is 8%\n    spot_rates = [0.07, 0.08, 0.09]  # Spot rates for 1-year, 2-year, and 3-year\n    face_value = 1000  # Typically, bonds have a face value of $1000\n\n    # Do math calculation to get the answer\n    price = 0\n    for t in range(1, 4):  # Loop through each year from 1 to 3\n        spot_rate = spot_rates[t-1]\n        # Calculate discounted value of each cash flow\n        if t == 3:\n            cash_flow = face_value * (1 + coupon_rate)  # Include the face value in the final year\n        else:\n            cash_flow = face_value * coupon_rate  # Coupon payment in earlier years\n        discounted_value = cash_flow / (1 + spot_rate) ** t\n        price += discounted_value\n\n    # Return the price of the bond\n    return price\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program calculates the price of a bond with the given characteristics using the provided spot rates. The bond's cash flows are discounted based on the spot rates corresponding to the time-to-maturity of each cash flow."
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent \u00a5360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater\u2019s consolidated depreciation and amortization expense for 2019?",
        "output": [
            " Sure! Based on the provided information, we'll calculate Clearwater's consolidated depreciation and amortization expense for 2019. We will account for the amortization of the licenses acquired and the depreciation of Snowflake's PP&E based on Clearwater's control over Snowflake.\n\nLet's break down the calculations:\n1. The initial acquisition cost of \u00a5360 million includes 50% stake in Snowflake.\n2. The excess cost (goodwill) is amortized over 5 years.\n3. Including any depreciation expenses from Snowflake's balance sheet.\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 360  # in millions of yen\n    acquisition_percentage = 0.50\n    economic_lifespan = 5  # in years\n\n    # Calculate net assets value of Snowflake based on acquisition percentage and total assets\n    net_assets_value_snowflake = 1050  # in millions of yen\n    total_acquisition_value = acquisition_cost / acquisition_percentage\n    goodwill = total_acquisition_value - net_assets_value_snowflake\n    annual_amortization = goodwill / economic_lifespan\n\n    # Depreciation & amortization expense from the income statement\n    clearwater_d_and_a_expense = 106  # in millions of yen\n    snowflake_d_and_a_expense = 85  # in millions of yen\n\n    # Consolidated depreciation and amortization expense for 2019\n    consolidated_d_and_a_expense = clearwater_d_and_a_expense + (acquisition_percentage * snowflake_d_and_a_expense) + annual_amortization\n\n    # Return the answer\n    return consolidated_d_and_a_expense\n\n# Run the solution\nanswer = solution()\nprint(f\"Clearwater\u2019s consolidated depreciation and amortization expense for 2019 is: {answer"
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    ten_year_shift_value = 87.1454\n\n    # Do math calculation to get the answer\n    key_rate_01_10_years = initial_value - ten_year_shift_value\n\n    # return answer\n    return key_rate_01_10_years\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.14300000000000002,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            " Certainly! Below is the Python program that uses Bayes' formula to estimate the likelihood of a bond going bankrupt given a \"good\" rating:\n\n```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # P(A): the likelihood of bankruptcy\n    P_B_given_A = 0.50  # P(B | A): the probability of a \"good\" rating given bankruptcy\n    P_B = (P_B_given_A * P_A) + (0.70 * (1 - P_A))  # P(B): the probability of a \"good\" rating\n\n    # Do math calculation to get the answer\n    P_A_given_B = (P_B_given_A * P_A) / P_B  # P(A | B): the likelihood of bankruptcy given a \"good\" rating\n\n    # return answer\n    return P_A_given_B\n\n# Call the function to get the answer\nprint(solution())\n```\n\nExplanation:\n- \\( P(A) \\) is the probability of a bond going bankrupt, which is 20% (0.20).\n- \\( P(B | A) \\) is the probability of a bond having a \"good\" rating given it goes bankrupt, which is 50% (0.50).\n- \\( P(B) \\) is the total probability of a bond having a \"good\" rating. This can be calculated as the sum of the probability of a \"good\" rating given bankruptcy and the probability of a \"good\" rating given no bankruptcy, weighted by their respective probabilities.\n- \\( P(A | B) \\) is the probability of bankruptcy given a \"good\" rating, calculated using Bayes' theorem: \\( P(A | B) = \\frac{P(B | A) \\cdot P(A)}{P(B)} \\).\n\nThe program defines these probabilities, performs the calculations, and then returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs \u00a3100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    future_value = 100000  # The amount customer needs a year from now\n    yearly_rate = 0.025  # Yearly interest rate\n    compounding_frequency = 52  # Weekly basis compounding (52 weeks in a year)\n    t = 1  # Time in years\n\n    # Do math calculation to get the answer\n    rate_per_period = yearly_rate / compounding_frequency\n    total_periods = compounding_frequency * t\n    present_value = future_value / (1 + rate_per_period) ** total_periods\n\n    # return answer\n    return present_value\n```\n\nThis program calculates the present value that needs to be deposited today in order to meet the future value target of \u00a3100,000 a year from now, given the declared yearly interest rate of 2.50% compounded on a weekly basis."
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            " Sure, let's start by defining the variables based on the information provided in the table.\n\nZhang believes in recurring costs and uses Core EPS to calculate the trailing P/E ratio. To find the trailing P/E, we need the current share price of Cratt Ltd. Since it is not provided, I will denote it as `share_price`. The trailing P/E ratio is calculated by dividing the share price by the Core EPS of the most recent year (2017).\n\nHere is the Python program to calculate the trailing P/E ratio:\n\n```python\ndef solution():\n    # Define variables name and value\n    core_eps_2017 = 1.31\n    share_price = 15.0  # Example share price; replace with actual if known\n\n    # Do math calculation to get the answer\n    trailing_pe = share_price / core_eps_2017\n\n    # return answer\n    return trailing_pe\n\n# Replace the example share price with the actual share price if known\nprint(solution())\n```\n\nReplace `share_price` with the actual share price if you know it. The program will then calculate and return the trailing P/E ratio."
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    debts_2018 = 400 + 120 + 550 + 1500\n    depreciation_2017 = 400\n    net_income_2017 = 875\n\n    # Assuming linear increase in EBITDA from 2017 to 2018 for simplicity\n    # (since the table indicates EBITDA for 2018 should be filled in)\n    EBITDA_2018 = EBITDA_2017 + (net_income_2017 - net_income_2017_depreciation_2017 + depreciation_2018)\n    net_income_2018 = net_income_2017 + (net_income_2017 - depreciation_2017 + depreciation_2018)\n    FCFE_2018 = net_income_2018 + depreciation_2018 - debts_2018\n\n    # Do math calculation to get the answer\n    EBITDA_2017 = 2000\n    depreciation_2018 = 450 # Assuming 50 dollar increases\n    net_income_2017_depreciation_2017 = net_income_2017 + depreciation_2017\n\n    answer = FCFE_2018\n    return answer\n\n# To run the function and get the desired result\nprint(solution())\n```\n\nExplanation:\n1. **Free Cash Flow to Equity (FCFE)** is calculated as:\n    ```\n    FCFE = Net Income + Depreciation Expense - Changes in Net Working Capital\n          - Capital Expenditures - Interest Expense - Preferred Dividends\n    ```\n2. Given the missing data for Net Income and Depreciation Expense for 2018 directly in the table, we derive the EBITDA, depreciation,"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            " Certainly! Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    human_capital = 1200000\n    financial_capital = 600000\n    total_portfolio_allocation_to_stocks = 0.30\n    similarity_to_stocks = 0.25\n\n    # Do math calculation to get the answer\n    # Calculate the effective human capital contribution to stock allocation\n    effective_human_capital_stocks = human_capital * similarity_to_stocks\n\n    # Calculate the required total amount allocated to stocks\n    required_total_stocks = (human_capital + financial_capital) * total_portfolio_allocation_to_stocks\n\n    # Calculate the appropriate equity allocation from financial capital\n    equity_allocation_financial_capital = required_total_stocks - effective_human_capital_stocks\n\n    # return answer\n    return equity_allocation_financial_capital\n\n# Example usage\nprint(solution())\n```\n\nThis program first calculates the effective contribution of human capital to the stock allocation and then determines the required amount allocated to stocks based on the total portfolio target allocation. Finally, it computes the amount of financial capital that should be allocated to equities to achieve the desired overall portfolio allocation to stocks."
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales_2014 = 2125  # Sales in 2014\n    sales_2013 = 2003  # Sales in 2013\n    eoy_inventories_2014 = 312  # End of year inventories in 2014 (LIFO)\n    eoy_inventories_2013 = 280  # End of year inventories in 2013 (LIFO)\n    lifo_reserve_2014 = 82  # LIFO reserve in 2014\n    lifo_reserve_2013 = 64  # LIFO reserve in 2013\n    net_profit_margin_2014 = 0.049  # Net profit margin in 2014\n    corporate_tax_rate = 0.30  # Corporate tax rate\n\n    # Calculate the increase in income due to the switch from LIFO to FIFO\n    increase_in_income_due_to_change = (lifo_reserve_2014 - lifo_reserve_2013) * (1 - corporate_tax_rate)\n\n    # Return the answer\n    return increase_in_income_due_to_change\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program first defines the necessary variables based on the provided data, calculates the increase in income considering the switch from LIFO to FIFO, and then returns the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1_year = 1.02 / 100\n    spot_rate_2_years = 1.65 / 100\n    spot_rate_3_years = 2.15 / 100\n\n    # Do math calculation to get the answer\n    implied_forward_rate = ((1 + spot_rate_3_years)**3 / (1 + spot_rate_2_years)**2) - 1\n\n    # return answer\n    return implied_forward_rate * 100  # Converting the rate back to percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    S = 48.6  # current stock price\n    X = 45  # strike price\n    T = 0.25  # time to maturity (in years)\n    r = 0.003  # continuously compounded risk-free rate\n    sigma = 0.30  # volatility\n    N_d1 = 0.6352  # value of N(d1) from the BSM model\n    N_d2 = 0.5486  # value of N(d2) from the BSM model\n\n    # Do math calculation to get the answer\n    put_value = X * math.exp(-r * T) * (1 - N_d2) - S * (1 - N_d1)\n\n    # return answer\n    return put_value\n\n# You need to import math for the calculation\nimport math\n\n# Call the solution function to get the result\nresult = solution()\nprint(f\"The value of the put option is: {result:.2f}\")\n```\n\nThis Python program defines a `solution` function that calculates the value of the put option using the given variables and values from the Black-Scholes-Merton (BSM) model. The `math` library is imported to use the `exp` function for the exponential calculation. The result is then printed out with a formatted string to display the put option value up to two decimal places."
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n\n    # Calculate the mean of the measurements\n    mean = sum(measurements) / len(measurements)\n\n    # Calculate the squared differences from the mean\n    squared_diff = [(x - mean) ** 2 for x in measurements]\n\n    # Calculate the variance\n    variance = sum(squared_diff) / (len(measurements) - 1)\n\n    # Calculate the standard deviation\n    std_dev = variance ** 0.5\n\n    # return answer\n    return std_dev\n\n# Call the solution function to get the result\nprint(solution())\n```\n\nThis program defines a list of measurements, calculates the mean, computes the squared differences from the mean, determines the variance, and finally computes the sample standard deviation. It returns the sample standard deviation as the answer."
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009000000000000001,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    weights = {\n        'Stock1': 30,\n        'Stock2': 30,\n        'Stock3': 20,\n        'Stock4': 10,\n        'Stock5': 10\n    }\n\n    benchmark_weights = {\n        'Stock1': 24,\n        'Stock2': 20,\n        'Stock3': 20,\n        'Stock4': 18,\n        'Stock5': 18\n    }\n\n    returns = {\n        'Stock1': 14,\n        'Stock2': 15,\n        'Stock3': 12,\n        'Stock4': 8,\n        'Stock5': 10\n    }\n\n    # Calculate the portfolio return and benchmark return\n    portfolio_return = 0\n    benchmark_return = 0\n\n    for stock in weights.keys():\n        portfolio_return += (weights[stock] / 100) * returns[stock]\n        benchmark_return += (benchmark_weights[stock] / 100) * returns[stock]\n\n    # Calculate the active return (value added)\n    active_return = portfolio_return - benchmark_return\n\n    # return answer\n    return active_return\n```\n\nYou can now run the `solution` function to determine the value added (active return) for the Kurok Fund."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    maturity_30 = 30\n    maturity_90 = 90\n    maturity_180 = 180\n    maturity_360 = 360\n    amount_30 = 1_000_000\n    amount_90 = 2_000_000\n    amount_180 = 3_000_000\n    amount_360 = 4_000_000\n\n    # Calculate the total amount\n    total_amount = amount_30 + amount_90 + amount_180 + amount_360\n\n    # Calculate the weighted sum of maturities\n    weighted_maturity = (amount_30 * maturity_30) + (amount_90 * maturity_90) + (amount_180 * maturity_180) + (amount_360 * maturity_360)\n\n    # Calculate the weighted average maturity (WAM)\n    wam = weighted_maturity / total_amount\n\n    # return answer\n    return wam\n```\n\nThis Python program calculates the weighted average maturity (WAM) for the given mortgage-backed security (MBS) owned by XYZ Inc. The result of the `solution()` function will be the WAM."
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |\u00a31.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |\u20ac0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sugar_qty_nov = 70\n    sugar_price_nov = 0.90\n    sugar_qty_dec = 120\n    sugar_price_dec = 1.00\n\n    cotton_qty_nov = 60\n    cotton_price_nov = 0.60\n    cotton_qty_dec = 50\n    cotton_price_dec = 0.80\n\n    # Do math calculation to get the answer\n    total_cost_nov = (sugar_qty_nov * sugar_price_nov) + (cotton_qty_nov * cotton_price_nov)\n    total_cost_dec_base_nov_prices = (sugar_qty_dec * sugar_price_nov) + (cotton_qty_dec * cotton_price_nov)\n    total_cost_dec_current_prices = (sugar_qty_dec * sugar_price_dec) + (cotton_qty_dec * cotton_price_dec)\n\n    paasche_index = (total_cost_dec_current_prices / total_cost_dec_base_nov_prices) * 100\n\n    # return answer\n    return paasche_index\n```\n\nThe provided Python program calculates the Paasche index for the given data. The Paasche index is calculated as follows:\n\\[ \\text{Paasche index} = \\left( \\frac{\\text{Total cost in current period with current prices}}{\\text{Total cost in current period with base period prices}} \\right) \\times 100 \\]\n\nThe `solution` function initializes the values for the quantities and prices for both November and December, calculates the total costs, and then computes the Paasche index to return the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    year1_return = 0.09\n    year2_return = 0.05\n    year3_return = 0.08\n    embedded_gain = 0.10\n    tax_rate = 0.25\n    years = 3\n\n    # Calculate after-tax returns\n    after_tax_year1 = year1_return * (1 - tax_rate)\n    after_tax_year2 = year2_return * (1 - tax_rate)\n    after_tax_year3 = year3_return * (1 - tax_rate)\n\n    # Compute the cumulative return before liquidation\n    cumulative_return_before_liquidation = (1 + after_tax_year1) * (1 + after_tax_year2) * (1 + after_tax_year3) - 1\n\n    # Calculate the post-liquidation return\n    post_liquidation_return = cumulative_return_before_liquidation - embedded_gain * tax_rate\n\n    # Calculate the annualized post-liquidation return\n    annualized_return = (1 + post_liquidation_return) ** (1/years) - 1\n\n    # Return the annualized post-liquidation return\n    return annualized_return\n\n# Call the function and print the result\nprint(solution())\n```\n\nThe output of this program will be the annualized after-tax post-liquidation return for Mutual Fund X."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            " Let's generate the Python program to calculate the forward price based on the given details. The formula to calculate the forward price \\( F \\) is:\n\n\\[ F = (S_0 e^{rt}) - \\text{Advantages} + \\text{Disadvantages} \\]\n\nWhere:\n- \\( S_0 \\) is the spot price of the base asset (current price).\n- \\( r \\) is the risk-free rate.\n- \\( t \\) is the time to maturity in years.\n- \"Advantages\" is the current value of the advantages.\n- \"Disadvantages\" is the current value of the disadvantages.\n\nHere is the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    current_price = 50\n    risk_free_rate = 0.04\n    time_to_maturity = 3 / 12  # 3 months converted to years\n    advantages = 5\n    disadvantages = 6\n\n    # Do math calculation to get the answer\n    forward_price = (current_price * math.exp(risk_free_rate * time_to_maturity)) - advantages + disadvantages\n\n    # return answer\n    return forward_price\n\n# Print the solution to check the output\nprint(solution())\n```\n\nThis program defines the necessary variables with their respective values, performs the calculations required to find the forward price, and then returns the answer. The `math.exp` function is used to calculate the exponential component of the forward price formula."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    yuan_to_hkd = 1.1757\n    aussie_to_yuan = 5.0765\n\n    # Do math calculation to get the answer\n    hkd_to_aussie = yuan_to_hkd / aussie_to_yuan\n\n    # return answer\n    return hkd_to_aussie\n\n# Call the function to get the result\nprint(solution())\n```\n\nThis program follows the given format, defining the variables for the exchange rates and then performing the necessary calculation to determine the cross rate for the Hong Kong Dollar to the Australian Dollar. The result is then returned and printed."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    ytm = 0.055  # Yield to maturity\n    annual_payout = 100000  # Annual payout in dollars\n    years = 40  # Number of years\n\n    # Do math calculation to get the answer\n    # Formula for the present value of an annuity: PV = PMT * (1 - (1 + r)^-n) / r\n    pv_annuity = annual_payout * (1 - (1 + ytm)**-years) / ytm\n\n    # return answer\n    return pv_annuity\n\n# To get the answer, you can call the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            " Certainly! To calculate the anticipated standard deviation for the portfolio given the weights, standard deviations, and correlation between the two securities, you can use the formula for portfolio standard deviation. Here is the Python program that performs this calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    weight1 = 0.40\n    weight2 = 0.60\n    std_dev1 = 0.30\n    std_dev2 = 0.15\n    correlation = 0.25\n\n    # Do math calculation to get the answer\n    variance_portfolio = (weight1**2 * std_dev1**2) + (weight2**2 * std_dev2**2) + (2 * weight1 * weight2 * correlation * std_dev1 * std_dev2)\n    std_dev_portfolio = variance_portfolio**0.5\n\n    # return answer\n    return std_dev_portfolio\n```\n\nThe program defines the weights, standard deviations, and correlation of the securities. It then uses those values to calculate the portfolio standard deviation using the formula for portfolio variance and standard deviation. The final result is then returned as the output of the function."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    selling_price = 1000\n    creation_cost = 300\n\n    # Do math calculation to get the answer\n    value_added = selling_price - creation_cost\n\n    # return answer\n    return value_added\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            " Certainly! To calculate the effective annual rate when the yearly rate is compounded quarterly, you can use the following formula:\n\n\\[ \\text{Effective Annual Rate (EAR)} = \\left( 1 + \\frac{\\text{Annual Rate}}{\\text{Number of Compounding Periods}} \\right)^{\\text{Number of Compounding Periods}} - 1 \\]\n\nHere's the Python program to calculate the effective annual rate for the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_rate = 0.1431  # 14.31% expressed as a decimal\n    compounding_periods = 4  # Quarterly compounding\n\n    # Do math calculation to get the answer\n    ear = (1 + (annual_rate / compounding_periods))**compounding_periods - 1\n\n    # return answer\n    return ear\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f\"The effective annual rate is {answer * 100:.2f}%\")\n```\n\nThis program defines the annual rate and the number of compounding periods, performs the necessary calculations to find the effective annual rate, and then returns the answer. The result is also printed in a readable format."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold\u2013Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            " Certainly! Below is the Python program to calculate the anticipated annual equity return using the Grinold\u2013Kroner model:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_p_e = 14.5\n    expected_p_e = 14.0\n    expected_inflation = 2.3 / 100\n    expected_annual_income_return = 2.4 / 100\n    expected_annual_real_earnings_growth = 5.0 / 100\n\n    # Do math calculation to get the answer\n    # Grinold\u2013Kroner model formula:\n    # Expected Return = ( (Expected Future P/E - Current P/E) / Current P/E ) / (1 + Expected Inflation) + Expected Income Return + Expected Real Earnings Growth\n\n    p_e_ratio_change = (expected_p_e - current_p_e) / current_p_e\n    expected_return = (p_e_ratio_change / (1 + expected_inflation)) + expected_annual_income_return + expected_annual_real_earnings_growth\n\n    # return answer\n    return expected_return * 100  # Returning expected return in percentage\n\n# The returned value of the program is the answer\nprint(f\"The anticipated annual equity return is {solution():.2f}%\")\n```\n\nThis program calculates the anticipated annual equity return using the Grinold\u2013Kroner model. The variables are defined based on the data from the table, and the calculation follows the model's formula. The final result is returned as a percentage value."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036000000000000004,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation_XY = 0.09\n\n    # Do math calculation to get the answer\n    std_dev_X = variance_X ** 0.5  # Standard deviation of X\n    std_dev_Y = variance_Y ** 0.5  # Standard deviation of Y\n    covariance_XY = correlation_XY * std_dev_X * std_dev_Y  # Covariance of returns\n\n    # return answer\n    return covariance_XY\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09\n\n    # Do math calculation to get the answer on a bond-equivalent basis\n    bond_equivalent_return = effective_annual_return / 2\n\n    # return answer\n    return bond_equivalent_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            " Sure! Here is the Python program to calculate the depreciation of the machine in 2016 using the double-declining balance method:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost = 50000  # Initial cost of the machine\n    residual_value = 5000  # Residual value of the machine\n    useful_life = 10  # Useful life in years\n    depreciable_cost = cost - residual_value  # Depreciable cost\n\n    # Calculate the straight-line depreciation rate\n    straight_line_rate = 1 / useful_life\n\n    # Calculate the double-declining balance rate\n    double_declining_rate = 2 * straight_line_rate\n\n    # Calculate the depreciation for the first year (2016)\n    depreciation_2016 = depreciable_cost * double_declining_rate\n\n    # return answer\n    return depreciation_2016\n```\n\nWhen you run this program, it will calculate the depreciation of the machine in 2016 using the double-declining balance method."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            " Sure, let's proceed with creating the Python function to calculate the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP), given the exchange rate for the Euro (EUR) in London (GBP/EUR).\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    exchange_rate_gbp_per_eur = 0.8878\n\n    # Do math calculation to get the answer\n    exchange_rate_eur_per_gbp = 1 / exchange_rate_gbp_per_eur\n\n    # return answer\n    return exchange_rate_eur_per_gbp\n```\n\nThis function defines the exchange rate for the Euro (EUR) in London (GBP/EUR) and calculates the inverse to get the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP). The function then returns this calculated value."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            " Certainly! To calculate the inferred probability of default based on the given interest rates and recovery rate, we can use the following steps:\n\n1. Calculate the excess return (spread) over the risk-free rate that the Corporation B bond offers.\n2. Use the formula for inferring the probability of default with the recovery rate.\n\nHere\u2019s the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04  # 4%\n    bond_yield = 0.06      # 6%\n    recovery_rate = 0.7    # 70%\n\n    # Do math calculation to get the answer\n    spread = bond_yield - risk_free_rate\n    probability_of_default = spread / (1 - recovery_rate)\n\n    # return answer\n    return probability_of_default\n\n# You can call the function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nThis program calculates the probability of default based on the given inputs and assumptions."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 1.3e9  # Primary borrowing in $ billions\n    predicted_pretax_profit_rate = 0.07  # Predicted pre-tax profit rate\n    direct_annual_op_cost = 6e6  # Estimated direct annual operation cost in $\n    interest_rate = 0.05  # Interest rate on consumer deposits\n    expected_loss_rate = 0.003  # Expected yearly loss rate on the portfolio\n    unexpected_loss_rate = 0.08  # Unexpected loss rate on the principal\n    risk_free_rate = 0.015  # Risk-free rate\n    effective_tax_rate = 0.25  # Effective tax rate\n\n    # Do math calculation to get the answer\n    revenue = principal * predicted_pretax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    unexpected_loss = principal * unexpected_loss_rate\n\n    raroc_numerator = revenue - direct_annual_op_cost - interest_expense - expected_loss - unexpected_loss\n    raroc_denominator = principal * (1 - effective_tax_rate)\n\n    raroc = raroc_numerator / raroc_denominator\n\n    # return answer\n    return raroc\n\n# Print the result of the solution\nprint(solution())\n```\n\nThis program computes the Risk-Adjusted Return on Capital (RAROC) based on the information provided. The function `solution` calculates the necessary components and returns the resulting RAROC."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            " Certainly! Here\u2019s how you can calculate the percentage of clients that will renew at least one plan next year based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    p_car_only = 0.40\n    p_house_only = 0.70\n    p_both = 0.80\n\n    p_car = 0.70\n    p_house = 0.50\n    p_both_plans = 0.20\n\n    # Calculate the percentage of clients who only have a car or house insurance plan\n    p_only_car = p_car - p_both_plans\n    p_only_house = p_house - p_both_plans\n\n    # Calculate the number of clients who will renew their plans\n    renew_only_car = p_only_car * p_car_only\n    renew_only_house = p_only_house * p_house_only\n    renew_both = p_both_plans * p_both\n\n    # Calculate the total percentage of clients renewing at least one plan\n    total_renew = renew_only_car + renew_only_house + renew_both\n\n    # return answer\n    return total_renew\n\n# Call the function and print the result\nprint(solution())\n```\n\nThis program follows the given format, calculates the renewal percentages for each type of client, and then sums them up to give the total percentage of clients that will renew at least one plan next year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1yr = 0.06\n    forward_rate_1yr_1yr = 0.08\n    forward_rate_1yr_2yr = 0.10\n    coupon_rate = 0.10\n    par_value = 1000\n    coupon = par_value * coupon_rate\n\n    # Do math calculation to get the answer\n    discount_rate_1yr = 1 / (1 + spot_rate_1yr)\n    discount_rate_2yr = 1 / ((1 + spot_rate_1yr) * (1 + forward_rate_1yr_1yr))\n    discount_rate_3yr = 1 / ((1 + spot_rate_1yr) * (1 + forward_rate_1yr_1yr) * (1 + forward_rate_1yr_2yr))\n\n    bond_value = (coupon * discount_rate_1yr) + (coupon * discount_rate_2yr) + (coupon + par_value) * discount_rate_3yr\n\n    # return answer\n    return bond_value\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solution())\n```\nThis program calculates the present value of a 3-year, 10% annually paid bond with a par value of $1000 using the provided spot and forward rates. The bond's value is determined by discounting the future cash flows (coupon payments and par value) at the appropriate rates."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    labor_input_growth = 0.009\n    labor_productivity_growth = 0.015\n    inflation = 0.021\n    dividend_yield = 0.0225\n\n    # Do math calculation to get the answer\n    real_growth = labor_input_growth + labor_productivity_growth\n    nominal_growth = real_growth + inflation\n    total_return = nominal_growth + dividend_yield\n\n    # return answer\n    return total_return\n```\n\nExplanation:\n- Labor input growth: 0.9% per year\n- Labor productivity growth: 1.5% per year\n- Inflation: 2.1%\n- Dividend yield: 2.25%\n- P/E growth is nonexistent, so it doesn\u2019t factor in.\n\nThe total return is calculated by adding all these components together to provide the continuously compounded long-term US equity returns forecast."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    fund_value = 100000000         # $100 million\n    initial_equity_percentage = 0.8 # 80%\n    target_equity_percentage = 0.6  # 60%\n\n    # Beta values\n    current_beta = 1.2\n    target_beta = 0.95\n\n    stock_index_value = 1200  # Stock Index Value\n    multiplier = 250         # Multiplier\n\n    # Do math calculation to get the answer\n    initial_equity_value = fund_value * initial_equity_percentage\n    target_equity_value = fund_value * target_equity_percentage\n\n    # Change in equity value needed\n    change_in_equity = initial_equity_value - target_equity_value\n\n    # Number of futures contracts needed\n    num_futures_contracts = change_in_equity / (stock_index_value * multiplier)\n\n    # Adjust for the beta\n    beta_adjustment = target_beta / current_beta\n    adjusted_num_futures_contracts = num_futures_contracts * beta_adjustment\n\n    # return answer\n    return adjusted_num_futures_contracts\n\n# Calculate the solution\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    expected_return_share_b = 0.114  # 11.4%\n    risk_free_rate = 0.03  # 3%\n    beta_share_b = 1.40\n\n    # Do math calculation to get the answer\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta_share_b\n    expected_market_return = risk_free_rate + market_risk_premium\n\n    # Return the expected market return as a percentage\n    return expected_market_return * 100\n\n# Run the solution function to get the answer\nanswer = solution()\nprint(f\"The projected return for the market is {answer:.2f}%\")\n```\n\nThis program calculates the projected return for the market using the capital asset pricing model (CAPM) formula:\n\\[ E(R_{i}) = R_{f} + \\beta_{i} (E(R_{m}) - R_{f}) \\]\n\nRearranging the formula to solve for \\( E(R_{m}) \\):\n\\[ E(R_{m}) = R_{f} + \\frac{E(R_{i}) - R_{f}}{\\beta_{i}} \\]\n\nWhere:\n- \\( E(R_{i}) \\) is the expected return on a security (here, Share B)\n- \\( R_{f} \\) is the risk-free rate\n- \\( \\beta_{i} \\) is the beta of the security (here, Share B)\n- \\( E(R_{m}) \\) is the expected return on the market\n\nThe program then returns the expected market return as a percentage."
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            " Certainly! Below is the Python program that calculates the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development.\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training_staff = 1000\n\n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training_staff\n\n    # Return answer\n    return total_cost\n```\n\nYou can execute this function to get the total cost to be reported on the balance sheet."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    carried_interest_rate = 0.20\n    total_pledged_capital = 100000000\n    total_paid_in_capital = 90000000\n    total_distributions_to_LPs = 30000000\n    year_end_NAV_before_distributions = 160000000\n    year_end_NAV_after_distributions = 130000000\n    projected_NAV_before_distributions_next_year = 250000000\n\n    # Calculate the amount returned to LPs next year\n    amount_returned_to_LPs_next_year = projected_NAV_before_distributions_next_year - year_end_NAV_after_distributions\n\n    # Calculate the carried interest for the next year\n    carried_interest_next_year = amount_returned_to_LPs_next_year * carried_interest_rate\n\n    # return answer\n    return carried_interest_next_year\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    principal = 75000\n    annual_interest_rate = 0.07\n    number_of_years = 6\n    number_of_compounding_periods_per_year = 4\n\n    # Do math calculation to get the answer\n    interest_rate_per_period = annual_interest_rate / number_of_compounding_periods_per_year\n    total_compounding_periods = number_of_years * number_of_compounding_periods_per_year\n\n    future_value = principal * (1 + interest_rate_per_period)**total_compounding_periods\n\n    # Return answer\n    return future_value\n```"
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | \u00a38,000              | \u00a38,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | \u00a31,200              | \u00a33,000       |\n| Net balance, end of 2013                | \u00a36,800              | \u00a35,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | \u00a310,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            " Sure, to calculate the deferred tax liability at the end of 2014, you'll need the following steps:\n1. Calculate the depreciation expense for the asset for accounting purposes at the end of 2014.\n2. Calculate the depreciation expense for the asset for tax purposes at the end of 2014.\n3. Calculate the difference in depreciation expense between accounting and tax purposes to determine the timing difference.\n4. Calculate the deferred tax liability based on the timing difference and the tax rate.\n\nHere's the Python program to accomplish this:\n\n```python\ndef solution():\n    # Define variables name and value\n    original_cost_accounting = 8000\n    accumulated_depreciation_accounting_2013 = 1200\n    revaluation_balance_2014 = 10000\n    remaining_years_accounting = 20\n    straight_line_years_tax = 8\n    accumulated_depreciation_tax_2013 = 3000\n    tax_rate = 0.30\n\n    # Calculate annual depreciation for accounting purposes (Revaluation balance re-estimated to depreciate over 20 years)\n    depreciation_expense_accounting = revaluation_balance_2014 / remaining_years_accounting\n\n    # Accumulated depreciation for accounting purposes at the end of 2014\n    accumulated_depreciation_accounting_2014 = accumulated_depreciation_accounting_2013 + depreciation_expense_accounting\n\n    # Net book value at the end of 2014 for accounting purposes\n    net_book_value_accounting_2014 = revaluation_balance_2014 - accumulated_depreciation_accounting_2014\n\n    # Calculate annual depreciation for tax purposes (20 years original)\n    straight_line_years_tax = 8\n    depreciation_expense_tax = original_cost_account"
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            " Sure! To calculate the standard deviation of sales for an organization given its probability distribution, you can follow these steps:\n\n1. Calculate the expected value (mean) of sales.\n2. Calculate the variance of sales.\n3. Take the square root of the variance to get the standard deviation.\n\nHere is the Python program:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    probabilities = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]  # sales in millions\n\n    # Calculate the expected value (mean) of sales\n    expected_value = sum(p * s for p, s in zip(probabilities, sales))\n\n    # Calculate the variance of sales\n    variance = sum(p * (s - expected_value) ** 2 for p, s in zip(probabilities, sales))\n\n    # Calculate the standard deviation\n    standard_deviation = math.sqrt(variance)\n\n    # Return the standard deviation\n    return standard_deviation\n```\n\nThis program will compute the standard deviation of sales based on the given probability distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            " Certainly! The overall recurring pension cost can be calculated using the change in the Projected Benefit Obligation (PBO) and the change in plan's assets, along with the company's contributions. The formula to calculate the recurring pension cost is as follows:\n\n\\[ \\text{Recurring Pension Cost} = \\text{Contributions} + (\\text{Ending PBO} - \\text{Starting PBO}) + (\\text{Starting Plan Assets} - \\text{Ending Plan Assets}) \\]\n\nGiven the data:\n\n- Contributions = 1,200\n- Starting PBO = 45,000\n- Ending PBO = 43,500\n- Starting Plan Assets = 40,800\n- Ending Plan Assets = 39,650\n\nHere's the Python program to compute the overall recurring pension cost:\n\n```python\ndef solution():\n    # Define variables name and value\n    contributions = 1200\n    starting_pbo = 45000\n    ending_pbo = 43500\n    starting_plan_assets = 40800\n    ending_plan_assets = 39650\n\n    # Do math calculation to get the answer\n    pension_cost = contributions + (ending_pbo - starting_pbo) + (starting_plan_assets - ending_plan_assets)\n\n    # return answer\n    return pension_cost\n```\n\nThis program calculates the overall recurring pension cost using the provided values. The recursive pension cost will be returned as the result of the function."
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            " Sure, let's create a Python program to calculate the holding period return based on the given investment and return data.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    investments = [500, 600, 1000]\n    returns = [0.12, 0.05, 0.01]\n\n    # Calculate the initial investment\n    initial_investment = investments[0]\n\n    # Calculate the final value of the investment\n    final_value = initial_investment\n    for i in range(len(returns)):\n        final_value += investments[i] * returns[i]\n\n    # Calculate the holding period return\n    holding_period_return = (final_value - initial_investment) / initial_investment\n\n    # return answer\n    return holding_period_return\n\n# Print the result\nprint(solution())\n```\n\nThis program defines the initial investment and the returns for each year. It calculates the final value of the investment by considering the returns each year and then computes the holding period return based on the initial investment and the final value. Finally, it returns the holding period return."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    common_shares_outstanding = 60000\n    outstanding_warrants = 5000\n    conversion_price = 25\n    end_year_stock_price = 30\n    average_stock_price = 20\n\n    # Calculate the number of shares that would be issued if warrants were exercised\n    additional_shares_from_warrants = 0\n    if end_year_stock_price > conversion_price:\n        additional_shares_from_warrants = outstanding_warrants\n\n    # Calculate the total number of shares for diluted EPS\n    total_shares_for_diluted_EPS = common_shares_outstanding + additional_shares_from_warrants\n\n    # Return the answer\n    return total_shares_for_diluted_EPS\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(answer)\n```\n\nIn this program, we first define all the given variables. Then we check if the warrants should be considered dilutive or antidilutive by comparing the end-year stock price with the conversion price. If the end-year stock price is higher than the conversion price, the warrants are considered dilutive and are included in the total share count. Finally, we calculate the total number of shares to be used in the diluted EPS calculation and return it."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    projected_eps = 2\n    current_share_price = 40\n\n    # Do math calculation to get the answer\n    price_to_earnings_ratio = current_share_price / projected_eps\n\n    # return answer\n    return price_to_earnings_ratio\n```\n\nThis program calculates the price-to-earnings ratio for XY Corporation based on the projected EPS and current share price. By dividing the current share price by the projected EPS, the program provides the most suitable price-to-earnings ratio for the valuation of XY Corporation."
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    highest_drawdown_risk = 10.2  # Assumed highest drawdown risk in percentage per time period\n    mean_drawdown_risk = 6.8  # Assumed mean drawdown risk in percentage per time period\n\n    # To calculate the Calmar ratio, we need the CAGR (Compound Annual Growth Rate)\n    cagr_1_year = 5.3  # CAGR for 1 Year\n    # Since we have multiple time periods and are not provided which time period to use specifically,\n    # we will assume CAGR to be the mean of given time periods for this example\n    cagr_3_years = 6.2\n    cagr_5_years = 4.7\n    cagr_since_inception = 4.4\n\n    average_cagr = (cagr_1_year + cagr_3_years + cagr_5_years + cagr_since_inception) / 4\n\n    # Calculate the Calmar ratio\n    calmar_ratio = average_cagr / highest_drawdown_risk\n\n    # return answer\n    return calmar_ratio\n\n# Call the solution function to get the answer\nanswer = solution()\nprint(f'The Calmar ratio is: {answer}')\n```\n\nIn the provided code, the Calmar Ratio is calculated by taking the average CAGR of the given periods and dividing it by the highest drawdown risk. This ratio provides a measure of the risk-adjusted return of the investment."
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            " To calculate the average effective spread of the BYYP transactions, we need to compute the spread for each trade and then find the average. The effective spread for a transaction can be calculated as follows:\n\n\\[ \\text{Effective Spread} = 2 \\times \\left| \\text{Trade Price} - \\frac{\\text{Prevailing Bid} + \\text{Prevailing Offer}}{2} \\right| \\]\n\nHere's the Python program to calculate the average effective spread:\n\n```python\ndef solution():\n    # Define variables name and value\n    trades = [\n        {\"trade_price\": 41.50, \"prevailing_bid\": 41.45, \"prevailing_offer\": 41.50},\n        {\"trade_price\": 41.75, \"prevailing_bid\": 41.73, \"prevailing_offer\": 41.75}\n    ]\n\n    # Do math calculation to get the answer\n    effective_spreads = []\n    for trade in trades:\n        midpoint = (trade[\"prevailing_bid\"] + trade[\"prevailing_offer\"]) / 2\n        effective_spread = 2 * abs(trade[\"trade_price\"] - midpoint)\n        effective_spreads.append(effective_spread)\n\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n\n    # Return answer\n    return average_effective_spread\n\n# Call the solution function to get the result\nresult = solution()\nprint(\"Average Effective Spread:\", result)\n```\n\nThis program computes the midpoint of the prevailing bid and offer for each trade, calculates the effective spread, and then finds the average effective spread across all trades. The result is printed at the end."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_payout = 2.00\n    time_to_first_payout = 5  # in quarters\n    required_rate = 0.06  # 6% annual rate\n    compounding_periods_per_year = 4  # quarterly compounding\n\n    # Calculate the effective quarterly rate\n    effective_quarterly_rate = (1 + required_rate / compounding_periods_per_year)\n\n    # Calculate the discount factor for the time to first payout\n    discount_factor = (1 / (effective_quarterly_rate ** time_to_first_payout))\n\n    # Compute the present value of the infinite series of payouts\n    present_value_of_perpetuity = initial_payout / (effective_quarterly_rate - 1)\n\n    # Adjust for the time to the first payout\n    current_value = present_value_of_perpetuity * discount_factor\n\n    # return answer\n    return current_value\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the current value of a never-ending preferred share given the initial three-monthly payout, the time until the first payout, and the required annual rate of yield compounding quarterly."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 3  # in years\n    period = 2  # ending after Year 2\n\n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization = annual_amortization * period\n\n    # return answer\n    return accumulated_amortization\n```\n\nThis program defines the necessary variables based on the given information and then calculates the annual amortization and the accumulated amortization at the conclusion of Year 2 using the straight-line amortization method. The result is then returned."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer\u2019s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            " Certainly! To determine the inherent worth of the share, we need to use the Gordon Growth Model, which is given by:\n\n\\[ \\text{Intrinsic Value} = \\frac{D_0 \\times (1 + g)}{r - g} \\]\n\nwhere:\n- \\( D_0 \\) is the current annual dividend.\n- \\( g \\) is the growth rate of the dividend.\n- \\( r \\) is the required rate of return.\n\nLet's implement this in the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    D0 = 2.00  # Current annual dividend\n    r = 0.07   # Required rate of return\n    g = 0.04   # Growth rate of the dividend\n\n    # Do math calculation to get the answer\n    intrinsic_value = (D0 * (1 + g)) / (r - g)\n\n    # return answer\n    return intrinsic_value\n```\n\nThis program will calculate the intrinsic value of the share based on the given parameters."
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of\u20ac) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            " Sure, here's a Python program to calculate the concentration ratio of the four firms based on the provided sales data:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales_data = {\n        'Ajiwo': 500,\n        'Bdfhyj': 350,\n        'Cegfd': 270,\n        'Ddgh': 200,\n        'Ebned': 150,\n        'All others': 40\n    }\n\n    # Total sales of the four firms\n    total_sales_four_firms = sales_data['Ajiwo'] + sales_data['Bdfhyj'] + sales_data['Cegfd'] + sales_data['Ddgh']\n\n    # Total market sales\n    total_market_sales = sum(sales_data.values())\n\n    # Calculate the concentration ratio of the four firms\n    concentration_ratio = (total_sales_four_firms / total_market_sales) * 100\n\n    # return answer\n    return concentration_ratio\n\n# Example of calling the function\nprint(solution())\n```\n\nThis program defines the sales data for different companies, calculates the total sales of the top four firms, and then computes the concentration ratio as a percentage of the total market sales."
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/\u20ac) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.5710000000000001,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sales = 3500  # in thousands of euros\n    cost_of_sales = 1500  # in thousands of euros\n    exchange_rate_current = 1.77  # in dollars per euro\n\n    # Do math calculation to get the answer\n    # Convert sales and cost of sales from euros to dollars\n    sales_in_dollars = sales * exchange_rate_current\n    cost_of_sales_in_dollars = cost_of_sales * exchange_rate_current\n\n    # Calculate gross profit\n    gross_profit = sales_in_dollars - cost_of_sales_in_dollars\n\n    # Calculate gross profit margin\n    gross_profit_margin = (gross_profit / sales_in_dollars) * 100\n\n    # return answer\n    return gross_profit_margin\n\n# Print the result\nprint(f\"The gross profit margin for 2018 is {solution():.2f}%\")\n```\n\nThis program calculates the gross profit margin for the ZX financial service subsidiary for the year 2018, taking into account the current exchange rate to convert sales and cost of sales from euros to dollars. The final result is printed with 2 decimal places for clarity."
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    purchase_of_securities = 240  # Purchase of securities for trading purposes\n    proceeds_from_sale = 300      # Proceeds from the sale of trading securities\n    purchase_of_shares = 275      # Purchase of 30% of the shares of an affiliated company\n\n    # Do math calculation to get the answer\n    total_outflow = purchase_of_securities + purchase_of_shares\n    total_inflow = proceeds_from_sale\n    net_cash_flow_investing = total_inflow - total_outflow\n\n    # return answer\n    return net_cash_flow_investing\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis Python program calculates the net cash flow from investing activities by subtracting the total outflow (purchase of securities and purchase of shares) from the total inflow (proceeds from the sale of trading securities). The result is then returned."
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            " Sure, here is the Python program to calculate the likelihood that the stock's value will be at $45:\n\n```python\ndef solution():\n    # Define variables name and value\n    prob_rise = 0.38\n    prob_unchanged = 0.46\n    prob_decline = 0.16\n\n    prob_45_rise = 0.65\n    prob_45_unchanged = 0.55\n    prob_45_decline = 0.38\n\n    # Do math calculation to get the answer\n    total_probability_45 = (prob_rise * prob_45_rise) + (prob_unchanged * prob_45_unchanged) + (prob_decline * prob_45_decline)\n\n    # return answer\n    return total_probability_45\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis program defines the probabilities for the market to rise, remain unchanged, or decline. It then uses these probabilities to calculate the likelihood that the stock's value will be at $45 under each market condition, finally summing them up to get the total probability."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000  # $10 million\n    invoice_price = 11000000  # $11 million\n    repo_rate = 0.20  # 20%\n    days_period = 20\n\n    # Calculate the interest\n    interest = (invoice_price * repo_rate * days_period) / 365\n\n    # Calculate the repurchase cost\n    repurchase_cost = invoice_price + interest\n\n    # return answer\n    return repurchase_cost\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            " To determine the operating cash flow for Business B in 2017, we need to calculate the net income and then adjust it for non-cash expenses like the impairment expense. Here's how you can structure the Python program to calculate the operating cash flow:\n\n```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 110\n    retained_earnings_2017 = 125\n    dividends_2017 = 8\n    impairment_expense_2017 = 12\n\n    # Calculate net income\n    net_income_2017 = retained_earnings_2017 - retained_earnings_2016 + dividends_2017\n\n    # Adjust for non-cash expenses (add back the impairment expense)\n    operating_cash_flow_2017 = net_income_2017 + impairment_expense_2017\n\n    # return answer\n    return operating_cash_flow_2017\n\n# Call the function to get the result\nprint(solution())\n```\n\nWhen you run this Python program, it will calculate the operating cash flow for Business B in 2017 by first determining the net income and then adjusting for the non-cash impairment expense. The result will then be printed, giving you the operating cash flow for the year."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            " ```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    lambda_ = 0.05 * 5  # Lambda is the expected number of defects (5% of 5 vehicles)\n\n    # Do math calculation to get the answer\n    probability = (math.exp(-lambda_) * lambda_ ** 1) / math.factorial(1)\n\n    # return answer\n    return probability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03          # Coupon rate of the bond\n    years_to_maturity = 9       # Number of years until maturity\n    yield_to_maturity = 0.05    # Yield-to-maturity\n    current_price = 85.784357   # Current price of the bond per 100 of par value\n    par_value = 100             # Par value of the bond\n\n    # Calculate the annual coupon payment\n    annual_coupon_payment = coupon_rate * par_value\n\n    # Calculate the price value of a basis point\n    # The price value of a basis point is the change in the price of the bond for a 1 basis point change in yield\n    # To find the price value of a basis point, we evaluate the bond price at the yield-to-maturity + 1 basis point\n    basis_point = 0.0001\n    new_yield = yield_to_maturity + basis_point\n\n    # Recalculate the bond price at the new yield\n    discount_factor = (1 + new_yield) ** years_to_maturity\n    bond_price_at_new_yield = (annual_coupon_payment / new_yield) * (1 - (1 / discount_factor)) + (par_value / discount_factor)\n\n    # Calculate the price value of a basis point\n    price_value_of_basis_point = current_price - bond_price_at_new_yield\n\n    # return answer\n    return price_value_of_basis_point\n\n# Example of calling the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            " Certainly! Below is the Python program that calculates the standard error of the sample mean given the provided values:\n\n```python\ndef solution():\n    # Define variables name and value\n    n = 1600\n    sample_mean = 998.7\n    sample_std_dev = 100\n\n    # Do math calculation to get the answer\n    standard_error = sample_std_dev / (n ** 0.5)\n\n    # return answer\n    return standard_error\n\n# Test the function\nprint(solution())\n```\n\nThis program defines the variables for the number of samples \\( n \\), the sample mean, and the sample standard deviation. It then calculates the standard error of the sample mean and returns the result. The formula used is \\( \\text{standard error} = \\frac{\\text{standard deviation}}{\\sqrt{n}} \\)."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            " Sure, here is a Python program that calculates the economic net worth for the Smith family based on the provided information:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_investments = 500000\n    fixed_income_products = 330000\n    house_value = 350000\n    mortgage_owed = 175000\n    present_value_of_earnings = 980000\n    present_value_of_consumption = 870000\n    tuition_costs = 150000\n    family_foundation = 600000\n\n    # Do math calculation to get the answer\n    total_assets = stock_investments + fixed_income_products + house_value + present_value_of_earnings\n    total_liabilities = mortgage_owed + present_value_of_consumption + tuition_costs + family_foundation\n    economic_net_worth = total_assets - total_liabilities\n\n    # return answer\n    return economic_net_worth\n\n# Example usage\nprint(solution())\n```\n\nThis program defines the variables for each component of the Smith family's assets and liabilities, performs the necessary calculations to determine their total assets and liabilities, and then calculates their economic net worth. The result of the `solution` function is the economic net worth."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of \u20ac10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of \u20ac8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            " Certainly! Here is the Python program that calculates the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to the sale:\n\n```python\ndef solution():\n    # Define variables and their values\n    sales_revenue = 10000  # Overall cost of products sold\n    cost_of_goods_sold = 8000  # Cost value of the goods\n\n    # Do math calculation to get the net shift in total assets\n    net_shift_in_total_assets = sales_revenue - cost_of_goods_sold\n\n    # return answer\n    return net_shift_in_total_assets\n\n# Execute the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate the net shift in XYZ Corporation's total assets and print the result."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.35\n    debt_financed_percentage = 0.60\n    equity_beta = 1.4\n\n    # Do math calculation to get the answer\n    unlevered_beta = equity_beta / (1 + (1 - tax_rate) * debt_financed_percentage)\n    answer = unlevered_beta\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_fund = 100000000  # Total fund value in dollars\n    current_shares_percentage = 0.80\n    current_bonds_percentage = 0.20\n    target_shares_percentage = 0.60\n    target_bonds_percentage = 0.40\n    share_beta = 1.2\n    bond_term = 5.0\n    index_value = 1200  # Value of the stock index\n    futures_multiplier = 250  # Multiplier for stock index futures\n    market_beta = 0.95  # Beta of the stock index\n    bond_futures_cost = 105300  # Cost of one bond futures agreement\n    bond_duration = 6.5  # Underlying adjusted duration of bond futures\n\n    # Calculate the current and target dollar amounts for shares and bonds\n    current_shares_amount = total_fund * current_shares_percentage\n    current_bonds_amount = total_fund * current_bonds_percentage\n    target_shares_amount = total_fund * target_shares_percentage\n    target_bonds_amount = total_fund * target_bonds_percentage\n\n    # Calculate the change in shares and bonds amounts\n    shares_change = target_shares_amount - current_shares_amount\n    bonds_change = target_bonds_amount - current_bonds_amount\n\n    # Calculate the number of stock index futures needed\n    stock_futures_beta = index_value * futures_multiplier * market_beta\n    number_of_stock_futures = shares_change / stock_futures_beta\n\n    # Calculate the number of bond futures needed\n    bond_futures_price_sensitivity = bond_futures_cost * bond_duration / 100\n    number_of_bond_futures = bonds_change / bond_futures_price_sensitivity\n\n    # The question asks for the number of stock index"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    marginal_tax_rate = 0.30\n    bond_risk_premium = 0.05\n    annual_coupon_rate = 0.08\n    bond_price = 1105.94\n    face_value = 1000\n    bond_years = 20\n\n    # Calculate the yield to maturity using Newton's method for bonds\n    def bond_yield(price, coupon_rate, face_value, periods):\n        # Initial guess for the yield is the coupon rate\n        guess = coupon_rate\n        tolerance = 1e-6\n        max_iterations = 100\n\n        for _ in range(max_iterations):\n            func_val = (-price + coupon_rate * (1 - (1 + guess) ** -periods) / guess +\n                        face_value * (1 + guess) ** -periods)\n            func_deriv = (coupon_rate * ((1 + guess) ** -(periods + 1)) * (-periods * ((1 + guess) ** -1) - 1) / guess ** 2 +\n                          face_value * (-periods) * (1 + guess) ** -(periods + 1))\n            new_guess = guess - func_val / func_deriv\n\n            if abs(new_guess - guess) < tolerance:\n                return new_guess\n\n            guess = new_guess\n\n        return guess\n\n    # Calculate yield to maturity\n    ytm = bond_yield(bond_price, annual_coupon_rate, face_value, bond_years)\n\n    # Calculate after-tax yield\n    after_tax_yield = ytm * (1 - marginal_tax_rate)\n\n    # Calculate the cost of equity using the bond-yield-plus-risk-premium method\n    cost_of_equity = after_tax_yield + bond_risk_premium\n\n    # Return the cost of equity\n    return cost_of_equity\n```"
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    start_index = 121\n    share_prices_start = [15, 20, 30]  # Prices on March 31, 20X7 for Stock X, Y, Z\n    share_prices_end = [20, 30, 25]    # Prices on April 30, 20X7 for Stock X, Y, Z\n\n    # Calculate the total value of the portfolio at the beginning\n    total_value_start = sum(share_prices_start)\n\n    # Calculate the total value of the portfolio at the end\n    total_value_end = sum(share_prices_end)\n\n    # Calculate the end index value ratio based on the total values\n    end_index_ratio = total_value_end / total_value_start\n\n    # Calculate the new (end) index value\n    end_index = start_index * end_index_ratio\n\n    # return answer\n    return end_index\n\n# Example call to the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    dividend_2017 = 0.22\n    high_growth_rate = 0.12\n    normal_growth_rate = 0.06\n    required_return = 0.09\n    high_growth_period = 4\n\n    # Calculate the dividend after the high growth period\n    dividend_after_high_growth = dividend_2017 * (1 + high_growth_rate) ** high_growth_period\n\n    # Calculate the terminal value of the stock\n    terminal_value = dividend_after_high_growth / (required_return - normal_growth_rate)\n\n    # return the terminal value\n    return terminal_value\n```\n\nThis Python program calculates the terminal value of the stock using the two-stage Dividend Discount Model (DDM) based on the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            " Certainly! To determine the approximate convexity of a bond using the given price changes with respect to changes in yield, we need to utilize the finite difference method. The convexity (C) can be approximated using the price-yield relationship as follows:\n\n\\[ C \\approx \\frac{P_{up} + P_{down} - 2P_0}{(\\Delta Y)^2 P_0} \\]\n\nWhere:\n- \\( P_{up} \\) is the bond price when the yield increases by 10 basis points.\n- \\( P_{down} \\) is the bond price when the yield decreases by 10 basis points.\n- \\( P_0 \\) is the initial bond price.\n- \\( \\Delta Y \\) is the change in yield (0.001 for 10 basis points).\n\nLet's translate this into the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    P0 = 98.722  # initial bond price\n    P_up = 98.669  # bond price when YTM increases by 10 basis points\n    P_down = 98.782  # bond price when YTM decreases by 10 basis points\n    delta_Y = 0.001  # 10 basis points\n\n    # Do math calculation to get the answer\n    convexity = (P_up + P_down - 2 * P0) / (delta_Y ** 2 * P0)\n\n    # return answer\n    return convexity\n\n# Example usage:\nprint(solution())\n```\n\nThis program defines the necessary variables and performs the mathematical calculation to determine the approximate convexity of the bond. The result will be returned as the output of the `solution` function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            " To calculate the price-to-sales (P/S) ratio for PetroChem Co, we need to divide the current share price by the net sales per share. Given that the net sales per share is $35 and the current share price is $56, the Python program would be as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n\n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n\n    # return answer\n    return price_to_sales_ratio\n\n# Call the solution function to get the P/S ratio\nprint(solution())\n```\n\nWhen you run this program, it will calculate and print the price-to-sales ratio for PetroChem Co."
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold_current = 9000\n    accounts_payable_current = 600\n\n    # Do math calculation to get the answer\n    payable_turnover = cost_of_goods_sold_current / accounts_payable_current\n    days_of_payables = 365 / payable_turnover\n\n    # return answer\n    return days_of_payables\n```\n\nThis script defines the necessary variables for the current year's cost of goods sold and accounts payable and then calculates the days of payables using the formula for the payable turnover ratio and adjusting for the 365-day year."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    value_A = 5000000  # Value of Asset A\n    value_B = 3000000  # Value of Asset B\n    VaR_A = 0.0452     # Marginal VaR of Asset A\n    VaR_B = 0.0332     # Marginal VaR of Asset B\n\n    # Calculate the total marginal VaR contribution from both assets\n    total_marginal_VaR = value_A * VaR_A + value_B * VaR_B\n\n    # Calculate the contribution of Asset A to VaR\n    VaR_contribution_A = (value_A * VaR_A) / total_marginal_VaR\n\n    # Convert the contribution to a percentage\n    contribution_percentage = VaR_contribution_A * 100\n\n    # return answer\n    return contribution_percentage\n```\n\nThe Python program provided calculates the percent of contribution to VaR from Asset A in a portfolio containing Assets A and B, based on their respective values and marginal VaRs. This should return the desired answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    deep_in_the_money_calls = 5000\n    deep_out_of_the_money_calls = 20000\n    future_contracts = 10000\n    stock_price = 52.0\n    trading_days = 252\n    volatility = 0.12  # Annual volatility\n    alpha = 0.01  # For 99% VaR\n\n    # Calculate the combined position delta for options\n    delta_deep_in_the_money_calls = 1.0  # Deep in-the-money calls can be approximated as delta = 1\n    delta_deep_out_of_the_money_calls = 0.0  # Deep out-of-the-money calls can be approximated as delta = 0\n    delta_future_contracts = 1.0  # Futures generally have a delta of 1\n\n    total_delta = (deep_in_the_money_calls * delta_deep_in_the_money_calls +\n                   deep_out_of_the_money_calls * delta_deep_out_of_the_money_calls +\n                   future_contracts * delta_future_contracts)\n\n    # Calculate the daily price volatility\n    daily_volatility = volatility / (trading_days ** 0.5)\n\n    # Calculate the standard deviation of the portfolio value\n    portfolio_standard_deviation = total_delta * stock_price * daily_volatility\n\n    # Calculate the 1-day 99% VaR\n    from scipy.stats import norm\n    var_99 = portfolio_standard_deviation * norm.ppf(1 - alpha)\n\n    # return the 1-day 99% VaR as the answer\n    return var_99\n\n# Run the solution function to get the answer\nprint(solution())\n```\n\nThis program defines variables for the positions, stock price, trading days, volatility, and significant level for the VaR. It"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    periodic_contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = 2500000\n\n    # Do math calculation to get the answer\n    pension_expense = service_costs - actuarial_gain\n\n    # return answer\n    return pension_expense\n```"
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    corporate_bond_yield = 4.4\n    inflation_premium = 0.8\n    illiquidity_premium = 0.9\n    equity_risk_premium = 8.4\n\n    # Do math calculation to get the answer\n    predicted_return = corporate_bond_yield + inflation_premium + illiquidity_premium + equity_risk_premium\n\n    # return answer\n    return predicted_return\n```\n\nThis program calculates the predicted return for the consumer credit industry by summing up the 10-year AA corporate bond yield and the various premiums as specified in the tables provided. The `corporate_bond_yield`, `inflation_premium`, `illiquidity_premium`, and `equity_risk_premium` are added together to get the predicted return."
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100  # in million\n    total_liabilities = 1200  # in million\n    preferred_equity = 120  # in million\n    common_shares_outstanding = 32  # in million shares\n\n    # Calculate equity value\n    equity_value = total_assets - total_liabilities - preferred_equity\n\n    # Calculate normalized EPS assuming average ROE over the 5 years provided\n    roe_values = [0.12, 0.131, 0.1055, 0.112, 0.1205]\n    average_roe = sum(roe_values) / len(roe_values)\n\n    # Normalized EPS = (Equity Value * Average ROE) / Common Shares Outstanding\n    normalized_eps = (equity_value * average_roe) / common_shares_outstanding\n\n    # return answer\n    return normalized_eps\n\n# Call the solution function\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            " Sure, let's define the average effective spread calculation. The effective spread for each trade is the difference between the trade price and the midpoint of the bid-ask prices at the time of the trade.\n\nThe midpoint of the bid-ask prices is calculated as (bid price + ask price) / 2.\n\nThe formula for effective spread is:\n\\[ \\text{Effective Spread} = 2 \\times \\left( \\left| \\text{Trade Price} - \\text{Midpoint Price} \\right| \\right) \\]\n\nWe will then calculate the effective spread for each trade, sum them up, and divide by the number of trades to get the average effective spread.\n\nHere's the Python program for that:\n\n```python\ndef solution():\n    # Define variables name and value\n    trades = [\n        {'time': '9.45 a.m.', 'trade_price': 25.20, 'trade_size': 1200, 'bid_price': 25.17, 'ask_price': 25.20},\n        {'time': '9.55 a.m.', 'trade_price': 25.22, 'trade_size': 1300, 'bid_price': 25.19, 'ask_price': 25.22},\n        {'time': '11.30 a.m.', 'trade_price': 25.27, 'trade_size': 2500, 'bid_price': 25.22, 'ask_price': 25.26}\n    ]\n\n    # Do math calculation to get the answer\n    total_effective_spread = 0.0\n\n    for trade in trades:\n        midpoint_price = (trade['bid_price'] + trade['ask_price']) / 2\n        effective_spread = 2 * abs(trade['trade_price'] - midpoint_price)\n        total_effective_spread += effective_spread\n\n    average_effective_spread = total_effective_spread / len(trades)\n\n    # Return answer\n    return average_effective_sp"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    fixed_rate = 1.00  # Fixed swap rate in percentage\n    treasury_yield = 0.63  # US Treasury bond yield in percentage\n\n    # Do math calculation to get the answer\n    swap_spread = fixed_rate - treasury_yield\n\n    # return answer\n    return swap_spread\n```\n\nIn this program, we define the fixed rate of the fixed-for-floating MRR swap and the yield of the two-year US Treasury bond. The swap spread is then calculated as the difference between these two values. The final answer, which is the swap spread, is returned by the function."
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            " Sure! Let's write the Python program to calculate the inherent worth of the J REIT per share using the Two-Stage Dividend Discount Model. The formula for this model is:\n\n\\[\n\\text{Current Share Price} = \\frac{\\text{Dividend\\ in\\ year\\ 1}}{(1 + r)^1} + \\frac{\\text{Dividend\\ in\\ year\\ 2}}{(1 + r)^2} + \\frac{\\text{Gordon Growth Value}}{(1 + r)^2}\n\\]\n\nWhere the Gordon Growth Value for year 3 and beyond is calculated as:\n\n\\[\n\\text{Gordon Growth Value} = \\frac{\\text{Dividend\\ in\\ year\\ 3}}{r - g}\n\\]\n\nLet\u2019s define and calculate the required rate of return \\(r\\) using the CAPM formula:\n\n\\[\nr = \\text{Risk-free rate} + \\beta \\times \\text{Market risk premium}\n\\]\n\nPutting it all together in the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_risk_free_rate = 0.03\n    beta = 1.1\n    market_risk_premium = 0.05\n    dividend_year1 = 1.13\n    dividend_year2 = 1.22\n    long_term_growth_rate = 0.05\n\n    # Calculate required rate of return (r) using CAPM\n    required_rate_of_return = current_risk_free_rate + beta * market_risk_premium\n\n    # Calculate the dividend for year 3\n    dividend_year3 = dividend_year2 * (1 + long_term_growth_rate)\n\n    # Calculate the Gordon Growth Model value for year 3 onwards\n    gordon_growth_value = dividend_year3 / (required_rate_of_return - long_term_growth_rate)\n\n    # Calculate the present value of dividends for years 1 and 2\n    pv_dividend_year1 = dividend_year"
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7000000000000001,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    actual_sentiments = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    target_p_values = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54]\n    threshold_p_value = 0.65\n\n    # Calculate the predicted sentiments based on the threshold p-value\n    predicted_sentiments = [1 if p >= threshold_p_value else 0 for p in target_p_values]\n\n    # Calculate accuracy\n    correct_predictions = sum(1 for actual, predicted in zip(actual_sentiments, predicted_sentiments) if actual == predicted)\n    accuracy = correct_predictions / len(actual_sentiments)\n\n    # Return accuracy\n    return accuracy\n\n# Run the solution function and print the result\nif __name__ == \"__main__\":\n    print(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            " Certainly! To estimate the daily Value at Risk (VaR) for the collection of investments at the 95% certainty level given the conditions, we'll need to perform the following steps:\n\n1. Calculate the price changes for each bond using their modified durations and the daily yield change.\n2. Compute the total value change of the portfolio.\n3. Apply the 95% certainty level to estimate the VaR.\n\nHere's the Python program to perform these calculations:\n\n```python\ndef solution():\n    # Define variables name and value\n    price_bond_1 = 10\n    price_bond_2 = 10\n    modified_duration_bond_1 = 1\n    modified_duration_bond_2 = 9\n    yield_change = 0.0001  # 1% daily instability of the yield\n    yield_current = 0.05  # 5% yield\n    certainty_level = 0.95  # 95% certainty level\n\n    # Calculate the daily price change for each bond\n    price_change_bond_1 = price_bond_1 * (-modified_duration_bond_1) * yield_change / (1 + yield_current)\n    price_change_bond_2 = price_bond_2 * (-modified_duration_bond_2) * yield_change / (1 + yield_current)\n\n    # Calculate the total value change of the portfolio\n    total_value_change = price_change_bond_1 + price_change_bond_2\n\n    # Calculate the Value at Risk (VaR) at the 95% certainty level\n    var = abs(total_value_change)  # We use absolute value because VaR is a positive measure of potential loss\n\n    # return answer\n    return var\n\n# Call the function to get the answer\nprint(solution())\n```\n\nThis code defines the necessary variables, calculates the price change for each bond based on their modified durations and the daily yield change, aggregates these changes to find the total portfolio change, and then estimates the VaR at the 95% certainty level. Executing the"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100\n    cash_flows = [40, 80, 120]\n    discount_rate = 0.20\n\n    # Do math calculation to get the answer\n    npv = -initial_investment\n    for i, cash_flow in enumerate(cash_flows):\n        npv += cash_flow / (1 + discount_rate) ** (i + 1)\n\n    # return answer\n    return npv\n```\nThe program calculates the Net Present Value (NPV) of an investment by discounting each year's after-tax cash flows at the required rate of return and then subtracting the initial investment."
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|\u00a350 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per \u00a3100)|\u00a392.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 50000000  # \u00a350 million\n    coupon_rate = 0.04\n    market_interest_rate = 0.05\n    time_to_maturity = 10\n    issue_price_per_100 = 92.28\n\n    # Calculate the issue price per \u00a31 bond\n    issue_price = (issue_price_per_100 / 100) * face_value\n\n    # Calculate the annual interest cost under IFRS (effective interest rate method)\n    annual_interest_cost = face_value * coupon_rate\n\n    # Calculate the initial carrying amount (issue price)\n    initial_carrying_amount = issue_price\n\n    # Calculate the effective interest rate\n    effective_interest_rate = annual_interest_cost / initial_carrying_amount\n\n    # Calculate the interest cost for the year 2014 under IFRS\n    interest_cost_2014 = initial_carrying_amount * market_interest_rate\n\n    # Return the answer in millions\n    return interest_cost_2014 / 1000000\n\n# Output the answer\nprint(solution())\n```\n\nExplanation:\n1. We define the necessary variables, including the face value, coupon rate, market interest rate, time to maturity, and issue price per \u00a3100.\n2. We calculate the issue price per \u00a31 bond by adjusting the issue price per \u00a3100 to the face value.\n3. We calculate the annual interest cost using the face value and coupon rate.\n4. We calculate the initial carrying amount, which is the same as the issue price.\n5. We calculate the effective interest rate using the annual interest cost and initial carrying amount.\n6. We calculate the interest cost for the year 2014 under IFRS by applying the market interest rate to the initial carrying amount.\n7. Finally, we return the interest cost in millions."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            " ```python\ndef solution():\n    # Define variables and their values\n    cash_and_short_term_investment = 750000  # James' cash and short-term investment\n    human_capital = 1200000  # James' estimated human capital\n    similar_to_equity_percentage = 0.30  # Percentage of human capital similar to equity\n    total_target_equity_allocation = 0.45  # Desired total equity allocation\n\n    # Calculate financial capital equity allocation\n    total_economic_wealth = cash_and_short_term_investment + human_capital\n    target_equity_in_financial_capital = total_target_equity_allocation * total_economic_wealth - (similar_to_equity_percentage * human_capital)\n\n    # Calculate the required financial capital equity allocation percentage\n    financial_capital_equity_allocation = target_equity_in_financial_capital / cash_and_short_term_investment\n\n    # Return the answer\n    return financial_capital_equity_allocation\n\nprint(f\"Financial capital equity allocation for James: {solution():.2%}\")\n```\n\n### Explanation:\n1. **Define Variables:**\n   - `cash_and_short_term_investment`: James' current cash and short-term investment.\n   - `human_capital`: The estimated value of James' human capital.\n   - `similar_to_equity_percentage`: The percentage of human capital treated as equity.\n   - `total_target_equity_allocation`: The desired total equity allocation percentage.\n\n2. **Calculate Total Economic Wealth:**\n   - Sum of `cash_and_short_term_investment` and `human_capital`.\n\n3. **Calculate Target Equity Allocation for Financial Capital:**\n   - Compute the total desired equity allocation and subtract the equity portion from human capital.\n\n4. **Calculate Financial Capital Equity Allocation Percentage:**\n   - Divide the target equity allocation for financial capital by"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            " Certainly! To determine the intrinsic value of Firm B's stock, we need to calculate the present value of the expected dividends using the Gordon Growth Model. Here's the Python program to compute this:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend_5th_year = 2.5\n    growth_rate = 0.05\n    required_return = 0.12\n\n    # Calculate the intrinsic value\n    intrinsic_value = (dividend_5th_year * (1 + growth_rate)) / (required_return - growth_rate)\n\n    # Discount back to present value at the end of the 4th year\n    present_value_at_end_of_4th_year = intrinsic_value / (1 + required_return) ** 4\n\n    # Return present value\n    return present_value_at_end_of_4th_year\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the present value of Firm B's stock based on the dividend starting from the fifth year and growth rate, then discounts it back to the present value four years earlier using the required return rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            " To answer the given question, we need to calculate the present value of the bonds payable, considering the difference between the market interest rate and the yield of the bonds. The present value will determine how the bonds are reported on the balance sheet of ABC Corporation.\n\nHere\u2019s the Python program to calculate the present value of the bonds payable:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 5000000  # Face value of the bonds in dollars\n    market_interest_rate = 3 / 100  # Market interest rate as decimal\n    bond_yield = 2.5 / 100  # Bond yield as decimal\n    years = 3  # Number of years until maturity\n\n    # Calculate the present value of the bonds using the market interest rate\n    present_value = face_value / ((1 + market_interest_rate) ** years)\n\n    # return answer\n    return present_value\n```\n\nIn this example, we calculate the present value of the bonds using the market interest rate. This present value will indicate how the bonds should be reported on the balance sheet. The formula used here is the standard present value formula:\n\n\\[ \\text{Present Value} = \\frac{\\text{Face Value}}{(1 + \\text{Market Interest Rate})^{\\text{Years}}} \\]\n\nYou can run this program to get the appropriate value to report as bonds payable when issued."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    share_price = 26.00\n    daily_volatility = 0.015\n    confidence_level = 0.95\n    z_score = 1.645  # Z-score for 95% confidence level\n    delta = -0.5\n\n    # Do math calculation to get the answer\n    var = abs(delta) * share_price * daily_volatility * z_score\n\n    # return answer\n    return var\n\n# Call the function to get the answer\nprint(solution())\n```\n\nExplanation:\n1. **share_price**: The current price of the share.\n2. **daily_volatility**: The daily volatility of the share.\n3. **confidence_level**: The desired confidence level for the VaR calculation.\n4. **z_score**: The z-score corresponding to the given confidence level (1.645 for 95%).\n5. **delta**: The delta of the at-the-money put option.\n\nThe formula used to calculate VaR using the delta-normal method is:\n\\[ \\text{VaR} = |\\Delta| \\times \\text{S} \\times \\sigma \\times \\text{Z} \\]\n\n- \\(\\Delta\\) is delta.\n- S is the share price.\n- \\(\\sigma\\) is the daily volatility.\n- Z is the z-score for the given confidence level.\n\nThe program computes this VaR and returns the result."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    returns = [1 + 0.20, 1 - 0.30, 1 + 0.15]\n\n    # Do math calculation to get the answer\n    prod = 1\n    for ret in returns:\n        prod *= ret\n\n    geometric_mean_return = (prod ** (1/len(returns))) - 1\n\n    # return answer\n    return geometric_mean_return\n```\n\nThis Python program calculates the yearly geometric mean return of the investment over the three-year period using the given returns for each year. The returns are converted to their decimal form (1 + percentage return), multiplied together, and then the geometric mean is calculated by taking the \\( \\text{nth root} \\) of the product, where \\( n \\) is the number of years. The final geometric mean return is then subtracted by 1 to convert it back to a percentage return."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    beta = 0.6\n    risk_free_rate = 0.08\n    market_return = 0.15\n\n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n\n    # return answer\n    return expected_return\n```\n\nThis Python program calculates the expected return on a stock using the Capital Asset Pricing Model (CAPM) formula:\n\\[ \\text{Expected Return} = \\text{Risk-Free Rate} + \\beta \\times (\\text{Market Return} - \\text{Risk-Free Rate}) \\]\n\nIn this case, with a beta value of 0.6, a risk-free rate of 8%, and a market return of 15%, the expected return is calculated as follows:\n\\[ \\text{Expected Return} = 0.08 + 0.6 \\times (0.15 - 0.08) \\]"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            " Sure, let's create a Python program to calculate the nominal policy rate based on the Taylor rule. Here is the code:\n\n```python\ndef solution():\n    # Define variables name and value\n    neutral_real_policy_rate = 2.25 / 100\n    desired_inflation_rate = 2.0 / 100\n    projected_growth = 2.5 / 100\n\n    actual_growth = 3.5 / 100\n    actual_inflation = 3.0 / 100\n\n    # Taylor rule coefficients (commonly used values)\n    alpha = 1.5\n    beta = 0.5\n\n    # Do math calculation to get the answer\n    inflation_gap = actual_inflation - desired_inflation_rate\n    output_gap = actual_growth - projected_growth\n\n    nominal_policy_rate = neutral_real_policy_rate + alpha * inflation_gap + beta * output_gap\n    nominal_policy_rate_percent = nominal_policy_rate * 100\n\n    # return answer\n    return nominal_policy_rate_percent\n\nprint(solution())\n```\n\nThis program follows your specified format and structure, defining the variables, performing the necessary calculations based on the Taylor rule, and then returning the nominal policy rate as a percentage."
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            " Sure! Let's use the Grinold-Kroner model to calculate the Equity Risk Premium (ERP). The Grinold-Kroner model is given by:\n\n\\[ \\text{ERP} = (\\text{growth in real earnings per share} - \\text{change in shares}) + (\\text{expected income component}) + (\\text{expected growth in P/E}) - (\\text{expected inflation}) + (\\text{buyback yield}) \\]\n\nWe can write a Python function to do this calculation.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.019\n    growth_in_P_E = -0.012\n    income_component = 0.018\n    growth_in_real_earnings_per_share = 0.027\n    change_in_shares_outstanding = 0.0\n\n    # Do math calculation to get the answer\n    buyback_yield = -change_in_shares_outstanding / (1 - change_in_shares_outstanding)  # Assuming change in shares is percentage buyback yield\n    erp = (growth_in_real_earnings_per_share - change_in_shares_outstanding) + income_component + growth_in_P_E - expected_inflation + buyback_yield\n\n    # return answer\n    return erp\n\n# Call the function and print the result\nresult = solution()\nprint(\"Projected forward-looking ERP:\", result)\n```\n\nThis program calculates the ERP using the Grinold-Kroner model with the values provided in the table."
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class \u201c1\u201d or negative sentiment (Class \u201c0\u201d). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            " Certainly! Below is a Python program to calculate the accuracy metric of the model based on the provided confusion matrix.\n\n```python\ndef solution():\n    # Define variables name and value\n    TP = 182\n    FP = 52\n    FN = 31\n    TN = 96\n\n    # Do math calculation to get the answer\n    total = TP + FP + FN + TN\n    accuracy = (TP + TN) / total\n\n    # return answer\n    return accuracy\n\n# Run the function and print the result\nprint(solution())\n```\n\nWhen you run this program, it will calculate the accuracy of the model based on the given confusion matrix and print the result. The formula for accuracy is:\n\n\\[ \\text{Accuracy} = \\frac{\\text{TP} + \\text{TN}}{\\text{TP} + \\text{FP} + \\text{FN} + \\text{TN}} \\]\n\nThis formula measures the proportion of total predictions that were correct."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    total_participants = 15\n    total_prizes = 3  # Since there are three prizes: $100, $50, and $10\n\n    # Do math calculation to get the answer\n    # The first prize can be given to any one of the 15 participants\n    # The second prize can be given to any one of the remaining 14 participants\n    # The third prize can be given to any one of the remaining 13 participants\n    ways_to_distribute_prizes = total_participants * (total_participants - 1) * (total_participants - 2)\n\n    # return answer\n    return ways_to_distribute_prizes\n\n# Optional: Call the function to see the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            " Certainly! Let's write a Python program to compute the Value at Risk (VaR) for the given option stance using the delta-gamma approach. Here's the complete program:\n\n```python\ndef solution():\n    # Define variables name and value\n    delta = 100000  # Delta in barrels\n    gamma = -50000  # Gamma in barrels per dollar\n    max_price_shift = 2.00  # Maximum price shift in dollars per barrel\n\n    # Do math calculation to get the answer\n    # VaR using Delta-Gamma approach: VaR = delta * price_shift + 0.5 * gamma * (price_shift)^2\n    var = delta * max_price_shift + 0.5 * gamma * (max_price_shift ** 2)\n\n    # return answer\n    return var\n\n# Compute the VaR value\nresult = solution()\nprint(result)\n```\n\nThis Python program defines the variables for delta, gamma, and the maximum price shift, performs the calculation for VaR using the delta-gamma approach, and returns the result. The result is then printed to the console."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    stock_cost = 25\n    total_investment = 20000\n    preservation_margin = 0.30\n\n    # Calculate the number of shares purchased\n    num_shares = total_investment / stock_cost\n\n    # Calculate the equity in the margin account at the preservation margin\n    total_equity_at_margin_call = total_investment * preservation_margin\n\n    # Do math calculation to get the answer\n    stock_price_at_margin_call = total_equity_at_margin_call / num_shares\n\n    # return answer\n    return stock_price_at_margin_call\n```\n\nThis Python program calculates the initial stock price that will trigger a margin call based on the given inputs. The key steps are to determine the number of shares purchased with the investment and the total equity required to maintain the preservation margin, which leads to finding the stock price that would trigger a margin call."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    aum_end_of_previous_year = 288000000\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    soft_hurdle_rate = 0.05\n    high_water_mark = 357000000\n    fund_yield = 0.25\n\n    # Do math calculation to get the answer\n    management_fee = aum_end_of_previous_year * management_fee_rate\n    aum_end_of_current_year = aum_end_of_previous_year * (1 + fund_yield)\n    profits_before_fees = aum_end_of_current_year - aum_end_of_previous_year\n    profits_after_management_fee = profits_before_fees - management_fee\n\n    if profits_after_management_fee > high_water_mark * soft_hurdle_rate:\n        incentive_fee_base = profits_after_management_fee - (high_water_mark * soft_hurdle_rate)\n    else:\n        incentive_fee_base = 0\n\n    incentive_fee = incentive_fee_base * incentive_fee_rate\n    overall_fee = management_fee + incentive_fee\n\n    # return answer\n    return overall_fee\n\n# Execute the function to get the result\nresult = solution()\nprint(f\"The overall fee that Circle has garnered in the current year is: ${result:,.2f}\")\n```\n\nThis program defines the necessary variables, calculates the management fee, the profits after subtracting the management fee, the incentive fee base based on the soft hurdle rate and high-water mark, and finally the overall fee that Circle has garnered for the current year."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.9030000000000005,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    weight_X = 0.25\n    weight_Y = 0.75\n    std_dev_X = 0.179\n    std_dev_Y = 0.062\n    correlation = 0.5\n\n    # Do math calculation to get the answer\n    portfolio_std_dev = ( (weight_X**2 * std_dev_X**2) + (weight_Y**2 * std_dev_Y**2) + (2 * weight_X * weight_Y * std_dev_X * std_dev_Y * correlation) ) ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    initial_value = 160000000  # $160 million initial value\n    rate_increase = 0.25  # 25% increase in asset value\n    management_fee_rate = 0.02  # 2% management fee\n    incentive_fee_rate = 0.20  # 20% incentive fee\n    hurdle_rate = 0.10  # 10% hurdle rate\n    high_water_mark = 198000000  # Prior high-water mark\n\n    # Calculate end-of-year value\n    end_of_year_value = initial_value * (1 + rate_increase)\n\n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_rate\n\n    # Calculate net asset value after management fee\n    net_asset_value = end_of_year_value - management_fee\n\n    # Calculate the soft hurdle adjusted net asset value\n    hurdle_adjusted_net_asset_value = initial_value * (1 + hurdle_rate) + management_fee\n\n    # Calculate the incentive fee base\n    if net_asset_value > high_water_mark:\n        incentive_fee_base = net_asset_value - max(high_water_mark, hurdle_adjusted_net_asset_value)\n    else:\n        incentive_fee_base = 0\n\n    # Calculate the incentive fee\n    incentive_fee = incentive_fee_base * incentive_fee_rate\n\n    # Calculate total fees\n    total_fees = management_fee + incentive_fee\n\n    # return answer\n    return total_fees\n\n# Call the solution function to get the answer\nprint(solution())\n```\n\nThis program calculates the total fees collected by an investment company given the conditions and parameters defined in the question. The answer is returned as the result of the `solution` function."
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            " Certainly! To calculate the growth rate of Real Estate #1 based on the provided NOI (Net Operating Income) values, we can use the compound annual growth rate (CAGR) formula. The CAGR formula is as follows:\n\n\\[ \\text{CAGR} = \\left( \\frac{V_f}{V_i} \\right)^{\\frac{1}{n}} - 1 \\]\n\nWhere:\n- \\( V_f \\) is the final value (NOI in Year 6).\n- \\( V_i \\) is the initial value (NOI in Year 1).\n- \\( n \\) is the number of years.\n\nHere is the Python program to calculate the growth rate:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    initial_noi = 2775840  # NOI in Year 1\n    final_noi = 3217959    # NOI in Year 6\n    years = 5              # Investment hold period\n\n    # Do math calculation to get the answer\n    cagr = (final_noi / initial_noi)**(1/years) - 1\n\n    # Return answer as a percentage\n    return cagr * 100\n\n# Running the solution function to get the answer\ngrowth_rate = solution()\nprint(f\"The growth rate of Real Estate #1 is {growth_rate:.2f}%\")\n```\n\nThis program calculates the compound annual growth rate (CAGR) using the provided NOI values for Year 1 and Year 6 and returns the growth rate as a percentage. The final answer is formatted to two decimal places for clarity."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            " Below is the Python program to compute the standard deviation of the investment portfolio based on the given figures:\n\n```python\ndef solution():\n    # Define variables name and value\n    weight_X = 0.30\n    weight_Y = 0.70\n    std_dev_X = 0.25\n    std_dev_Y = 0.10\n    correlation_coefficient = 0.8\n\n    # Do math calculation to get the answer\n    portfolio_variance = ((weight_X ** 2) * (std_dev_X ** 2)) + ((weight_Y ** 2) * (std_dev_Y ** 2)) + (2 * weight_X * weight_Y * std_dev_X * std_dev_Y * correlation_coefficient)\n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nYou can run this program to get the standard deviation of the investment portfolio."
        ]
    }
]