[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    salvage_value_truck = 15000\n    depreciation_rate = 0.20\n    years_owned = 3\n    current_fair_value_truck = 27000\n\n    # Do math calculation to get the answer\n    depreciable_amount = original_cost_truck - salvage_value_truck\n    book_value = original_cost_truck\n    \n    for _ in range(years_owned):\n        depreciation = book_value * depreciation_rate\n        book_value -= depreciation\n\n    loss = book_value - current_fair_value_truck\n\n    # return answer\n    return round(loss, 2)\n```\n\nThis Python program calculates the loss on the exchange of the truck for land. Here's how it works:\n\n1. We define the variables based on the given information:\n   - Original cost of the truck\n   - Estimated salvage value\n   - Depreciation rate (20% per year)\n   - Number of years the truck was owned\n   - Current fair value of the truck\n\n2. We calculate the book value of the truck after 3 years of depreciation:\n   - First, we calculate the depreciable amount (original cost - salvage value)\n   - Then, we apply the declining balance depreciation method for 3 years\n\n3. The loss is calculated as the difference between the book value and the current fair value of the truck.\n\n4. We round the result to 2 decimal places for currency precision and return it.\n\nThis program will return the loss that the business is likely to reflect on its profit and loss statement when swapping the truck for the parcel of land."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 2.0979\n    gbp_interest_rate = 0.016025\n    nzd_interest_rate = 0.032875\n    days = 180\n    year_basis = 360\n\n    # Do math calculation to get the answer\n    forward_rate = spot_rate * ((1 + nzd_interest_rate * (days / year_basis)) / \n                                (1 + gbp_interest_rate * (days / year_basis)))\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    # return answer rounded to 4 decimal places\n    return round(forward_points, 4)\n```\n\nThis Python function calculates the 180-day forward points for the NZD/GBP exchange rate. Here's how it works:\n\n1. We define the variables with the given information:\n   - The spot exchange rate (spot_rate)\n   - The interest rates for both currencies (gbp_interest_rate and nzd_interest_rate)\n   - The number of days for the forward contract (days)\n   - The day basis for the interest rates (year_basis)\n\n2. We calculate the forward rate using the interest rate parity formula:\n   Forward Rate = Spot Rate * ((1 + Foreign Interest Rate * (Days / Year Basis)) / \n                               (1 + Domestic Interest Rate * (Days / Year Basis)))\n\n3. We then calculate the forward points by subtracting the spot rate from the forward rate and multiplying by 10000 (as forward points are typically quoted in hundredths of a percent).\n\n4. Finally, we round the result to 4 decimal places and return it.\n\nThis function will return the 180-day forward points for the NZD/GBP exchange rate, given the specified conditions."
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    std_dev_real_estate = 0.14\n    cov_real_estate_gim = 0.0075\n    integration_real_estate = 0.60\n    std_dev_gim = cov_real_estate_gim / (std_dev_real_estate * integration_real_estate)\n\n    # Do math calculation to get the answer\n    beta = (cov_real_estate_gim / (std_dev_gim ** 2)) * integration_real_estate\n\n    # return answer\n    return beta\n```\n\nThis Python program calculates the beta for U.S. real estate equities using the International Capital Asset Pricing Model (ICAPM) approach. Here's a breakdown of the calculation:\n\n1. We define the known variables from the given information.\n2. We calculate the standard deviation of the Global Investable Market (GIM) using the covariance formula, as it's not directly provided.\n3. We then calculate beta using the formula: Î² = (Cov(RE, GIM) / Var(GIM)) * Integration\n   Where:\n   - Cov(RE, GIM) is the covariance between real estate and GIM\n   - Var(GIM) is the variance of GIM (which is the square of its standard deviation)\n   - Integration is the integration factor of real estate with GIM\n\nThis calculation assumes perfect markets as specified in the question. The resulting beta represents the sensitivity of U.S. real estate equities to movements in the global investable market, adjusted for the level of integration."
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares = 200000\n    price_per_share = 90  # EUR\n    total_eur = shares * price_per_share\n    \n    initial_6month_forward_bid = -19.0 / 10000\n    initial_spot_ask = 1.3983\n    three_month_spot_bid = 1.4106\n    \n    # Do math calculation to get the answer\n    initial_forward_rate = initial_spot_ask + initial_6month_forward_bid\n    forward_contract_value_eur = total_eur\n    forward_contract_value_usd = forward_contract_value_eur * initial_forward_rate\n    \n    spot_value_after_three_months = total_eur * three_month_spot_bid\n    \n    cash_needed_to_terminate = forward_contract_value_usd - spot_value_after_three_months\n    \n    # return answer\n    return round(cash_needed_to_terminate, 2)\n```\n\nThis Python program calculates the cash expenditure necessary to terminate the forward agreement after three months. Here's a breakdown of the calculation:\n\n1. We calculate the total value of the Spanish shares in EUR.\n2. We determine the initial 6-month forward rate by adding the forward points to the spot rate.\n3. We calculate the USD value of the forward contract at initiation.\n4. We calculate the EUR value of the shares at the 3-month spot rate.\n5. The difference between the forward contract value and the spot value after three months is the cash needed to terminate the agreement.\n\nThe function returns the result rounded to two decimal places, representing the cash expenditure in US dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 3700000\n    daily_volatility = 0.0004\n    trading_days = 250\n    confidence_level = 0.95\n    \n    # Do math calculation to get the answer\n    annual_volatility = daily_volatility * (trading_days ** 0.5)\n    z_score = 1.645  # Z-score for 95% confidence level\n    var = portfolio_value * annual_volatility * z_score\n    \n    # return answer\n    return var\n```\n\nThis Python program calculates the 1-year Value at Risk (VaR) for the given investment securities collection. Here's a breakdown of the calculation:\n\n1. We define the given variables: portfolio value, daily volatility, number of trading days, and confidence level.\n\n2. We calculate the annual volatility by multiplying the daily volatility by the square root of the number of trading days.\n\n3. We use a z-score of 1.645, which corresponds to a 95% confidence level in a normal distribution.\n\n4. The VaR is calculated by multiplying the portfolio value, annual volatility, and z-score.\n\n5. The function returns the calculated VaR.\n\nThis program assumes that the daily returns are independent and identically distributed with a normal distribution and zero mean, as stated in the question. The result will be the estimated 1-year VaR at the 95% confidence level."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_failure = 0.40\n    p_success = 0.55\n    p_success_given_survival = 0.85\n    \n    # Do math calculation to get the answer\n    p_survival = 1 - p_failure\n    p_success_and_survival = p_success_given_survival * p_survival\n    p_success_and_failure = p_success - p_success_and_survival\n    p_success_given_failure = p_success_and_failure / p_failure\n    \n    # return answer\n    return round(p_success_given_failure, 4)\n```\n\nThis Python program calculates the probability of an organization succeeding even if it eventually goes bankrupt, P(success | failure), using the given information and the total probability rule.\n\n1. We define the given probabilities:\n   - P(failure) = 0.40\n   - P(success) = 0.55\n   - P(success | survival) = 0.85\n\n2. We calculate P(survival) as 1 - P(failure)\n\n3. We use the total probability rule:\n   P(success) = P(success | survival) * P(survival) + P(success | failure) * P(failure)\n\n4. We calculate P(success and survival) using P(success | survival) * P(survival)\n\n5. We can then find P(success and failure) by subtracting P(success and survival) from P(success)\n\n6. Finally, we calculate P(success | failure) by dividing P(success and failure) by P(failure)\n\n7. The result is rounded to 4 decimal places for precision.\n\nThis program will return the probability of an organization succeeding even if it eventually goes bankrupt."
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    zeta_share = 35\n    yusef_share = 25\n    xenon_share = 20\n\n    # Do math calculation to get the answer\n    hhi = (zeta_share**2 + yusef_share**2 + xenon_share**2) / 10000\n\n    # return answer\n    return hhi\n```\n\nThis Python program calculates the three-firm Herfindahl-Hirschmann Index (HHI) for the sector based on the given market share data. Here's how it works:\n\n1. We define variables for the market shares of the top three firms: Zeta, Yusef, and Xenon.\n\n2. We calculate the HHI by summing the squares of the market shares (as percentages) of these three firms, then dividing by 10,000. This division is necessary because we're using whole number percentages rather than decimals.\n\n3. The function returns the calculated HHI.\n\nThe HHI is a measure of market concentration. It ranges from close to 0 (for a perfectly competitive market) to 1 (for a monopoly). In this case, the program will return a value between 0 and 1, representing the level of concentration among the top three firms in this sector."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fixed_swap_rate = 0.0100  # 1.00% expressed as a decimal\n    treasury_yield = 0.0063   # 0.63% expressed as a decimal\n    \n    # Do math calculation to get the answer\n    swap_spread = fixed_swap_rate - treasury_yield\n    \n    # Convert the result to basis points (1 basis point = 0.01%)\n    swap_spread_bps = swap_spread * 10000\n    \n    # return answer\n    return swap_spread_bps\n```\n\nThis Python program calculates the swap spread, which is the difference between the fixed rate of the interest rate swap and the yield of the Treasury bond with the same maturity. The result is expressed in basis points for clarity, as is common in financial markets."
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "Here's the Python program to calculate the accumulated amortization cost at the end of 2016 using the straight-line method:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5  # years\n    years_passed = 4  # from 2013 to 2016 (inclusive)\n\n    # Do math calculation to get the answer\n    depreciable_amount = acquisition_cost - residual_value\n    annual_amortization = depreciable_amount / useful_life\n    accumulated_amortization = annual_amortization * years_passed\n\n    # return answer\n    return accumulated_amortization\n\n# You can uncomment the following lines to test the function\n# result = solution()\n# print(f\"The accumulated amortization cost at the end of 2016 is ${result:.2f}\")\n```\n\nThis program calculates the accumulated amortization cost as follows:\n\n1. It defines the necessary variables based on the given information.\n2. It calculates the depreciable amount by subtracting the residual value from the acquisition cost.\n3. It determines the annual amortization by dividing the depreciable amount by the useful life.\n4. It calculates the accumulated amortization by multiplying the annual amortization by the number of years passed (4 years from 2013 to 2016, inclusive).\n5. Finally, it returns the accumulated amortization cost.\n\nYou can run this function to get the answer to the question. The accumulated amortization cost at the end of 2016 will be the returned value."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha Ã [Î¼ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean_reversion = 0.775  # 77.5%\n    long_term_correlation = 0.35  # 35%\n    current_correlation = 0.27  # 27% (January 2014)\n    alpha = 1 - mean_reversion  # Alpha in mean reversion model\n\n    # Do math calculation to get the answer\n    mu = long_term_correlation\n    s_t_minus_1 = current_correlation\n    \n    # Using the mean reversion model: s(t) - s(t-1) = alpha Ã [Î¼ - s(t-1)]\n    change = alpha * (mu - s_t_minus_1)\n    s_t = s_t_minus_1 + change\n    \n    # Convert to percentage and round to 2 decimal places\n    expected_correlation = round(s_t * 100, 2)\n\n    # return answer\n    return expected_correlation\n```\n\nThis Python program calculates the expected correlation for February 2014 using the given information and the mean reversion model. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate alpha as 1 - mean_reversion, as alpha represents the speed of mean reversion.\n3. We use the mean reversion model s(t) - s(t-1) = alpha Ã [Î¼ - s(t-1)] to calculate the change in correlation.\n4. We add this change to the current correlation to get the expected correlation for the next period (February 2014).\n5. Finally, we convert the result to a percentage and round it to two decimal places for readability.\n\nThe returned value represents the expected correlation percentage for February 2014 based on the mean reversion model and the given data."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_year1 = 0.5\n    dividend_year2 = 0.5\n    growth_rate = 0.06\n    required_return = 0.10\n\n    # Do math calculation to get the answer\n    present_value_year1 = dividend_year1 / (1 + required_return)\n    present_value_year2 = dividend_year2 / ((1 + required_return) ** 2)\n    \n    dividend_year3 = dividend_year2 * (1 + growth_rate)\n    terminal_value = dividend_year3 / (required_return - growth_rate)\n    present_value_terminal = terminal_value / ((1 + required_return) ** 2)\n    \n    stock_value = present_value_year1 + present_value_year2 + present_value_terminal\n\n    # return answer\n    return round(stock_value, 2)\n```\n\nThis Python program calculates the value of Superior's common equity using the dividend discount model. Here's a breakdown of the calculation:\n\n1. We define the given variables: dividends for the first two years, growth rate after year 2, and required return.\n\n2. We calculate the present value of dividends for years 1 and 2.\n\n3. We calculate the dividend for year 3 (the first year of constant growth).\n\n4. We use the Gordon Growth Model to calculate the terminal value at the end of year 2.\n\n5. We discount the terminal value back to the present.\n\n6. We sum up the present values of the first two dividends and the terminal value to get the stock value.\n\n7. We round the result to two decimal places and return it.\n\nThis program will return the value of Superior's common equity based on the given dividend projections and required return."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_elasticity = 1.8\n    marginal_cost = 30\n    average_cost = 50\n    \n    # Do math calculation to get the answer\n    # For profit maximization, MR = MC\n    # With price elasticity (e), we know that MR = P(1 - 1/e)\n    # So, P(1 - 1/e) = MC\n    # Rearranging, P = MC / (1 - 1/e)\n    \n    price = marginal_cost / (1 - 1/price_elasticity)\n    \n    # return answer\n    return round(price, 2)\n```\n\nThis Python program calculates the most probable price for Yahoo Corp. based on the given information:\n\n1. We define the variables for price elasticity of demand (1.8), marginal cost ($30), and average cost ($50).\n\n2. We use the profit maximization principle where Marginal Revenue (MR) equals Marginal Cost (MC).\n\n3. Given the price elasticity (e), we know that MR = P(1 - 1/e), where P is the price.\n\n4. Equating this to MC and solving for P, we get: P = MC / (1 - 1/e)\n\n5. We calculate this value and round it to two decimal places for a currency amount.\n\n6. The function returns this calculated price as the answer.\n\nNote that while the average cost is provided, it's not used in this calculation as the profit-maximizing price is determined by the marginal cost and price elasticity in this scenario."
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 460000\n    buildings_machinery_start = 320000\n    buildings_machinery_end = 270000\n    raw_materials_cost = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Do math calculation to get the answer\n    depreciation = buildings_machinery_start - buildings_machinery_end\n    total_costs = raw_materials_cost + wages_paid + depreciation\n    accounting_profit = total_revenue - total_costs\n    economic_profit = accounting_profit - normal_profit\n    \n    # return answer\n    return economic_profit\n```\n\nThis Python program calculates the annual economic profit for Chace's House Industry based on the provided data. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. We calculate depreciation as the difference between the value of buildings and machinery at the start and end of the year.\n3. Total costs are calculated by adding raw materials cost, wages paid, and depreciation.\n4. Accounting profit is calculated by subtracting total costs from total revenue.\n5. Finally, economic profit is calculated by subtracting the normal profit from the accounting profit.\n\nThe function will return the economic profit, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    operating_income = 1106\n    tax_rate = 0.32\n    depreciation = 243\n    fixed_capital_investment = 535\n    \n    # Calculate change in working capital\n    current_assets_2012 = 1290\n    current_assets_2011 = 1199\n    current_liabilities_2012 = 2783\n    current_liabilities_2011 = 2678\n    change_in_working_capital = (current_assets_2012 - current_liabilities_2012) - (current_assets_2011 - current_liabilities_2011)\n    \n    # Do math calculation to get the answer\n    nopat = operating_income * (1 - tax_rate)\n    fcff = nopat + depreciation - fixed_capital_investment - change_in_working_capital\n    \n    # return answer\n    return round(fcff)\n```\n\nThis Python function calculates the Free Cash Flow to Firm (FCFF) for Johnson Company for the fiscal year ending on December 31, 2012. Here's a breakdown of the calculation:\n\n1. We define the necessary variables from the given financial data.\n2. We calculate the change in working capital using the current assets and current liabilities for 2012 and 2011.\n3. We calculate NOPAT (Net Operating Profit After Taxes) by multiplying operating income by (1 - tax rate).\n4. We calculate FCFF using the formula: FCFF = NOPAT + Depreciation - Fixed Capital Investment - Change in Working Capital\n5. We round the result to the nearest million and return it.\n\nThis calculation gives us the FCFF in millions of dollars, as requested in the question."
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "Here's a Python program to calculate the impairment loss for the printing equipment based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    fair_value = 480000\n    costs_to_sell = 50000\n    value_in_use = 440000\n\n    # Do math calculation to get the answer\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    recoverable_amount = max(fair_value_less_costs_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n\n    # return answer\n    return impairment_loss if impairment_loss > 0 else 0\n```\n\nThis program calculates the impairment loss according to IFRS standards. Here's how it works:\n\n1. We define the relevant variables from the given table.\n2. We calculate the fair value less costs to sell.\n3. We determine the recoverable amount, which is the higher of the fair value less costs to sell and the value in use.\n4. We calculate the impairment loss by subtracting the recoverable amount from the carrying value.\n5. We return the impairment loss if it's positive, or 0 if it's negative (as we can't have a negative impairment loss).\n\nThis program will return the correct impairment loss in Canadian dollars (C$) for the printing equipment."
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    interest_frequency = 2  # semiannually\n    maturity = 3\n    required_return = 0.05\n    par_value = 100\n\n    # Do math calculation to get the answer\n    periods = maturity * interest_frequency\n    coupon_payment = (coupon_rate * par_value) / interest_frequency\n    periodic_rate = required_return / interest_frequency\n\n    # Calculate present value of coupons\n    pv_coupons = coupon_payment * ((1 - (1 + periodic_rate) ** -periods) / periodic_rate)\n\n    # Calculate present value of par value\n    pv_par = par_value / (1 + periodic_rate) ** periods\n\n    # Calculate bond price\n    bond_price = pv_coupons + pv_par\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the necessary variables based on the provided information.\n2. We calculate the number of interest periods and the coupon payment per period.\n3. We calculate the periodic interest rate.\n4. We use the present value of an annuity formula to calculate the present value of all coupon payments.\n5. We calculate the present value of the par value to be received at maturity.\n6. We sum these two present values to get the bond price.\n7. Finally, we round the result to two decimal places and return it.\n\nThis program will return the bond's price as a float value rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of â¤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of â¤11 per unit. During 2009, Shine sold 12,000 units at a rate of â¤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    first_purchase_units = 10000\n    first_purchase_cost = 10\n    second_purchase_units = 5000\n    second_purchase_cost = 11\n    total_units_sold = 12000\n\n    # Do math calculation to get the answer\n    first_batch_cost = min(first_purchase_units, total_units_sold) * first_purchase_cost\n    remaining_units = max(0, total_units_sold - first_purchase_units)\n    second_batch_cost = remaining_units * second_purchase_cost\n\n    cost_of_goods_sold = first_batch_cost + second_batch_cost\n\n    # return answer\n    return cost_of_goods_sold\n```\n\nThis Python program calculates the cost of goods sold using the FIFO (First-In, First-Out) method for Shine Kids Ltd. in 2009. Here's how it works:\n\n1. We define the variables for the two purchases and the total units sold.\n2. We calculate the cost of the first batch sold, which is either all of the first purchase (if total sales are more than or equal to the first purchase) or just the total sales (if total sales are less than the first purchase).\n3. We then calculate how many units, if any, need to be accounted for from the second purchase.\n4. We calculate the cost of the second batch sold (which could be zero if all sales were satisfied by the first purchase).\n5. We sum these costs to get the total cost of goods sold.\n6. Finally, we return this value.\n\nThis program will return 121,000, which represents the cost of goods sold in British Pounds (â¤) for Shine Kids Ltd. in 2009 using the FIFO method."
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.10200000000000001,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    good_econ_prob = 0.70\n    bad_econ_prob = 0.30\n    \n    good_econ_return1 = 0.20\n    good_econ_return2 = 0.10\n    good_econ_prob1 = 0.50\n    good_econ_prob2 = 0.50\n    \n    bad_econ_return1 = 0.05\n    bad_econ_return2 = -0.10\n    bad_econ_prob1 = 0.60\n    bad_econ_prob2 = 0.40\n    \n    # Do math calculation to get the answer\n    good_econ_expected_return = (good_econ_return1 * good_econ_prob1 + good_econ_return2 * good_econ_prob2)\n    bad_econ_expected_return = (bad_econ_return1 * bad_econ_prob1 + bad_econ_return2 * bad_econ_prob2)\n    \n    total_expected_return = (good_econ_expected_return * good_econ_prob + \n                             bad_econ_expected_return * bad_econ_prob)\n    \n    # Convert to percentage\n    answer = total_expected_return * 100\n    \n    # return answer\n    return round(answer, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lifo_inventory_start = 200000\n    lifo_reserve_start = 30000\n    lifo_inventory_end = 250000\n    lifo_reserve_end = 40000\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    fifo_inventory_start = lifo_inventory_start + lifo_reserve_start\n    fifo_inventory_end = lifo_inventory_end + lifo_reserve_end\n    \n    lifo_to_fifo_difference = fifo_inventory_end - lifo_inventory_end\n    tax_impact = lifo_to_fifo_difference * tax_rate\n    \n    fifo_inventory_after_tax = fifo_inventory_end - tax_impact\n\n    # return answer\n    return round(fifo_inventory_after_tax, 2)\n```\n\nThis program calculates the inventory value after converting from LIFO to FIFO, considering the tax impact. Here's a breakdown of the steps:\n\n1. We define the given variables: LIFO inventory and reserve values at the start and end of 2017, and the tax rate.\n\n2. We calculate the FIFO inventory values by adding the LIFO reserve to the LIFO inventory values.\n\n3. We determine the difference between FIFO and LIFO inventory at the end of 2017.\n\n4. We calculate the tax impact of this difference.\n\n5. Finally, we subtract the tax impact from the FIFO inventory value at the end of 2017 to get the final inventory value after converting from LIFO to FIFO.\n\n6. The result is rounded to two decimal places for precision in financial reporting.\n\nThis program will return the inventory value at the end of 2017 after converting from LIFO to FIFO, considering the tax impact."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 100  # Par value of the bond\n    maturity = 15  # Maturity in years\n    discount_rate = 0.045  # Yearly market discount rate (4.5%)\n\n    # Do math calculation to get the answer\n    present_value = par_value / (1 + discount_rate) ** maturity\n    cost_per_100 = present_value\n\n    # return answer\n    return round(cost_per_100, 2)\n```\n\nThis program calculates the cost per 100 of par value for a zero-coupon bond with the given parameters. Here's an explanation of the calculation:\n\n1. We define the par value as 100 (since we want the cost per 100 of par value), the maturity as 15 years, and the discount rate as 0.045 (4.5%).\n\n2. To calculate the present value (which is the cost of the bond), we use the formula:\n   PV = FV / (1 + r)^n\n   Where:\n   PV = Present Value\n   FV = Future Value (par value)\n   r = discount rate\n   n = number of years to maturity\n\n3. We calculate this value and assign it to `cost_per_100` since it represents the cost per 100 of par value.\n\n4. Finally, we round the result to two decimal places for a more practical representation of currency and return the answer.\n\nThis program will return the cost per 100 of par value for the zero-coupon bond under the given conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n\n    # Do math calculation to get the answer\n    call_price = carrying_value + gain_on_redemption\n\n    # return answer\n    return call_price\n```\n\nThis Python function calculates the call price based on the given information:\n\n1. We define the variables:\n   - `gain_on_redemption` is $100,000\n   - `carrying_value` is $950,000\n   - `face_value` is $1,000,000 (though not used in this calculation)\n\n2. To calculate the call price, we add the gain on redemption to the carrying value.\n   This is because the gain represents the difference between the call price and the carrying value.\n\n3. The function returns the calculated call price.\n\nWhen you run this function, it will return 1050000, which represents the call price of $1,050,000."
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "Here's the Python program to calculate the EUR/GBP cross-rate based on the given spot rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    usd_eur = 1.3860\n    eur_cad = 0.6125\n    usd_gbp = 1.4208\n    \n    # Do math calculation to get the answer\n    eur_usd = 1 / usd_eur\n    eur_gbp = eur_usd * usd_gbp\n    \n    # return answer\n    return round(eur_gbp, 4)\n```\n\nThis program calculates the EUR/GBP cross-rate using the following steps:\n\n1. We first define the given spot rates as variables.\n2. We calculate the EUR/USD rate by taking the reciprocal of the USD/EUR rate.\n3. We then multiply the EUR/USD rate by the USD/GBP rate to get the EUR/GBP cross-rate.\n4. Finally, we round the result to 4 decimal places for precision and return it.\n\nThe returned value will be the spot EUR/GBP cross-rate, which is the most precise option based on the provided data."
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_rates = [0.0250, 0.0299, 0.0348, 0.0395, 0.0437]\n    spot_rates = [0.0250, 0.0300, 0.0350, 0.0400]\n    \n    # Do math calculation to get the answer\n    face_value = 100\n    total_present_value = 0\n    \n    # Calculate present value of coupons for years 1-4\n    for i in range(4):\n        coupon = face_value * par_rates[4]\n        present_value = coupon / (1 + spot_rates[i]) ** (i + 1)\n        total_present_value += present_value\n    \n    # Calculate present value of final coupon and face value\n    final_payment = face_value * (1 + par_rates[4])\n    remaining_value = face_value - total_present_value\n    \n    # Solve for 5-year spot rate\n    five_year_spot_rate = (final_payment / remaining_value) ** (1/5) - 1\n    \n    # return answer\n    return round(five_year_spot_rate, 4)\n```\n\nThis Python program calculates the five-year spot rate based on the given par rates and spot rates for years 1-4. Here's how it works:\n\n1. We define the par rates and known spot rates as lists.\n2. We set the face value of the bond to 100 (assuming a $100 par value).\n3. We calculate the present value of the coupons for years 1-4 using the known spot rates.\n4. We calculate the present value of the final coupon and face value payment.\n5. We solve for the 5-year spot rate using the remaining value and final payment.\n6. Finally, we return the calculated 5-year spot rate, rounded to 4 decimal places.\n\nThis program should give you the five-year spot rate that Steve, the bond trader, would use based on the provided information."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    current_rate = 0.08\n    up_rate = 0.10\n    down_rate = 0.06\n    probability = 0.50\n    risk_premium = 0.0040  # 40 bps = 0.40%\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the expected rate for year 2\n    expected_rate_year2 = (up_rate * probability) + (down_rate * probability)\n    \n    # Add risk premium to both years' rates\n    adjusted_rate_year1 = current_rate + risk_premium\n    adjusted_rate_year2 = expected_rate_year2 + risk_premium\n    \n    # Calculate the present value using the adjusted rates\n    pv_year2 = face_value / ((1 + adjusted_rate_year2) * (1 + adjusted_rate_year1))\n    \n    # Round to two decimal places\n    bond_value = round(pv_year2, 2)\n    \n    # return answer\n    return bond_value\n```\n\nThis Python program calculates the valuation of a 2-year zero-coupon bond given the provided information. Here's a breakdown of the solution:\n\n1. We define all the given variables, including the face value, current rate, possible future rates, probability, and risk premium.\n\n2. We calculate the expected interest rate for year 2 by taking the weighted average of the two possible rates.\n\n3. We adjust both years' rates by adding the risk premium.\n\n4. We calculate the present value of the bond using the adjusted rates. Since it's a zero-coupon bond, we only need to discount the face value from year 2 to the present.\n\n5. We round the result to two decimal places for a more practical representation of currency.\n\n6. Finally, we return the calculated bond value.\n\nThis program will return the valuation of the zero-coupon bond in euros, considering the given market conditions and risk premium."
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.9380000000000001,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n1 = 25  # Sample size of group A\n    n2 = 18  # Sample size of group B\n    x1_bar = 200  # Sample mean of group A\n    x2_bar = 185  # Sample mean of group B\n    s_p_squared = 2678.05  # Combined estimation of the common variance\n\n    # Do math calculation to get the answer\n    numerator = x1_bar - x2_bar\n    denominator = (s_p_squared * (1/n1 + 1/n2)) ** 0.5\n    t_statistic = numerator / denominator\n\n    # return answer\n    return t_statistic\n```\n\nThis Python function calculates the t-test statistic to verify the assumption that the average of the two populations are the same, given the information provided in the question.\n\nThe t-statistic for independent samples with equal variances is calculated using the formula:\n\nt = (xÌâ - xÌâ) / (s_p * â(1/nâ + 1/nâ))\n\nWhere:\n- xÌâ and xÌâ are the sample means\n- s_p is the pooled standard deviation (square root of the combined variance)\n- nâ and nâ are the sample sizes\n\nThe function returns the calculated t-statistic, which can be used to perform the hypothesis test about the equality of the population means."
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\n\nThis Python program calculates the cash paid to suppliers by Sugarfall Corporation based on the given financial data. Here's how it works:\n\n1. We define the relevant variables from the provided information:\n   - Cost of goods sold: $27,264\n   - Decrease in inventory: $501\n   - Increase in accounts payable: $1,063\n\n2. To calculate the cash paid to suppliers, we use the formula:\n   Cash paid to suppliers = Cost of goods sold - Decrease in inventory - Increase in accounts payable\n\n   This formula takes into account that:\n   - A decrease in inventory means less cash was spent on new inventory\n   - An increase in accounts payable means some purchases were made on credit and not paid in cash\n\n3. The function returns the result of this calculation, which represents the amount of cash Sugarfall Corporation paid to its suppliers.\n\nWhen you run this function, it will return the dollar amount of cash paid to suppliers based on the given financial data."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_options = 20000\n    option_price_grant_day = 2.5\n    vesting_period = 4  # years\n    stock_price_grant_day = 15\n    \n    # Do math calculation to get the answer\n    option_value = stock_price_grant_day - option_price_grant_day\n    total_option_value = option_value * num_options\n    annual_compensation_expense = total_option_value / vesting_period\n    \n    # return answer\n    return annual_compensation_expense\n```\n\nThis Python program calculates the compensation expense for 2011 resulting from the executive stock options provided by the firm. Here's an explanation of the calculation:\n\n1. We define the relevant variables based on the information provided in the question.\n\n2. We calculate the value of each option as the difference between the stock price on the grant day ($15) and the option price on the grant day ($2.5).\n\n3. We multiply this value by the number of options (20,000) to get the total value of all options granted.\n\n4. Since the options have a lock-in (vesting) period of 4 years, we divide the total option value by 4 to get the annual compensation expense.\n\n5. We return this annual compensation expense as the answer.\n\nNote that we don't use the average option price for the whole year ($2.8) or the fact that the options lapse after 5 years, as these aren't relevant to calculating the 2011 compensation expense. The expense is based on the grant-date fair value of the options and is spread over the vesting period."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 7.020\n    convexity = 65.180\n    yield_change = -0.0025  # 25 basis points = 0.25% = 0.0025\n\n    # Do math calculation to get the answer\n    price_change_duration = -modified_duration * yield_change\n    price_change_convexity = 0.5 * convexity * (yield_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n    \n    # Convert to percentage\n    percentage_change = total_price_change * 100\n\n    # return answer\n    return percentage_change\n```\n\nThis Python program calculates the anticipated percentage change in price for a security given its modified duration, convexity, and a change in yield. Here's a breakdown of the calculation:\n\n1. We define the given values: modified duration (7.020), convexity (65.180), and the yield change (-0.0025, which is -25 basis points).\n\n2. We calculate the price change due to duration using the formula: -Duration * Yield Change\n\n3. We calculate the price change due to convexity using the formula: 0.5 * Convexity * (Yield Change)^2\n\n4. We sum these two components to get the total price change.\n\n5. Finally, we convert the price change to a percentage by multiplying by 100.\n\nThe program returns this percentage change as the answer. Note that a positive percentage indicates an increase in price, while a negative percentage indicates a decrease."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% Ã $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "Here's a Python program to calculate the intrinsic value of the preferred stock based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 30\n    dividend_rate = 0.0580  # 5.80%\n    market_rate = 0.05  # 5%\n\n    # Do math calculation to get the answer\n    annual_dividend = par_value * dividend_rate\n    intrinsic_value = annual_dividend / market_rate\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis program calculates the intrinsic value of the preferred stock using the following steps:\n\n1. We define the variables:\n   - `par_value`: The par value of the preferred stock ($30)\n   - `dividend_rate`: The dividend rate of 5.80% (0.0580)\n   - `market_rate`: The market rate of return for identical issues (5% or 0.05)\n\n2. We calculate the annual dividend by multiplying the par value by the dividend rate.\n\n3. We then calculate the intrinsic value using the dividend discount model formula:\n   Intrinsic Value = Annual Dividend / Market Rate\n\n4. Finally, we round the result to two decimal places and return it.\n\nThis program will return the intrinsic value of the preferred stock based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 400  # Initial value of the asset\n    r = 0.05  # Risk-free rate (5%)\n    q = 0.03  # Continuous dividend yield (3%)\n    T = 0.5   # Time to maturity in years (6 months = 0.5 years)\n\n    # Do math calculation to get the answer\n    # Forward price formula: F = S0 * e^((r-q)*T)\n    forward_price = S0 * math.exp((r - q) * T)\n\n    # return answer\n    return round(forward_price, 2)  # Rounding to 2 decimal places for financial precision\n\n# Note: You'll need to import the math module at the top of your script:\n# import math\n```\n\nThis Python program calculates the forward price for a forward contract based on the given information. Here's a breakdown of the calculation:\n\n1. We define the variables with their given values:\n   - S0: Initial value of the asset (400)\n   - r: Risk-free rate (5% or 0.05)\n   - q: Continuous dividend yield (3% or 0.03)\n   - T: Time to maturity (6 months, which is 0.5 years)\n\n2. We use the forward pricing formula for an asset with continuous dividend yield:\n   F = S0 * e^((r-q)*T)\n   Where e is the mathematical constant (base of natural logarithm).\n\n3. We calculate this using Python's math.exp() function, which computes e raised to the power of the given expression.\n\n4. Finally, we round the result to two decimal places for financial precision and return it.\n\nThis program will return the forward price for the 6-month forward contract given the specified conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_std_dev = 0.049  # 4.9% expressed as a decimal\n    hypothesized_std_dev = 0.05  # 5.0% expressed as a decimal\n    n = 36  # number of months\n\n    # Do math calculation to get the answer\n    degrees_of_freedom = n - 1\n    test_statistic = (degrees_of_freedom * sample_std_dev**2) / hypothesized_std_dev**2\n\n    # return answer\n    return test_statistic\n```\n\nThis Python program calculates the test statistic for a chi-square test of variance. Here's an explanation of the calculation:\n\n1. We define the sample standard deviation (4.9% or 0.049), the hypothesized standard deviation (5.0% or 0.05), and the number of months (36).\n\n2. We calculate the degrees of freedom as n - 1 = 35.\n\n3. The test statistic for a chi-square test of variance is:\n   ((n-1) * s^2) / Ï^2\n   Where s is the sample standard deviation and Ï is the hypothesized standard deviation.\n\n4. We calculate this test statistic and return it as the answer.\n\nThis test statistic can be used with a chi-square distribution to determine if there's significant evidence to reject the null hypothesis that the true standard deviation is 5.0% or greater."
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income = 485\n    depreciation = 270\n    capex = 4275 - 3752  # Change in gross fixed assets\n    change_working_capital = (1988 - 1090) - (1806 - 1007)  # Change in (current assets - current liabilities)\n    change_long_term_debt = 1575 - 1515\n\n    # Do math calculation to get the answer\n    fcfe = net_income + depreciation - capex - change_working_capital + change_long_term_debt\n\n    # return answer\n    return fcfe\n\n```\n\nThis Python function calculates the Free Cash Flow to Equity (FCFE) for Holt Corporation in 2008 based on the provided financial data. Here's a breakdown of the calculation:\n\n1. Net Income: Directly taken from the income statement.\n2. Depreciation: Added back as it's a non-cash expense.\n3. Capital Expenditures (CapEx): Calculated as the change in gross fixed assets.\n4. Change in Working Capital: Calculated as the change in (current assets - current liabilities) from 2007 to 2008.\n5. Change in Long-term Debt: Calculated as the difference in long-term debt between 2008 and 2007.\n\nThe FCFE is then calculated using the formula:\nFCFE = Net Income + Depreciation - CapEx - Change in Working Capital + Change in Long-term Debt\n\nThis calculation gives the amount of cash available to equity shareholders after all expenses, reinvestment, and debt repayments."
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.14400000000000002,
        "question": "What is the sustainable growth rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_profit_margin = 0.20\n    retention_rate = 0.60\n    asset_turnover = 0.8\n    financial_leverage_multiplier = 1.5\n    \n    # Do math calculation to get the answer\n    roe = net_profit_margin * asset_turnover * financial_leverage_multiplier\n    sustainable_growth_rate = roe * retention_rate\n    \n    # return answer\n    return sustainable_growth_rate * 100  # Convert to percentage\n```\n\nThis Python program calculates the sustainable growth rate based on the given information. Here's how it works:\n\n1. We define the variables with the values provided in the table.\n\n2. We calculate the Return on Equity (ROE) using the DuPont analysis formula:\n   ROE = Net Profit Margin * Asset Turnover * Financial Leverage Multiplier\n\n3. We then calculate the Sustainable Growth Rate using the formula:\n   Sustainable Growth Rate = ROE * Retention Rate\n\n4. Finally, we return the result multiplied by 100 to convert it to a percentage.\n\nThis program will return the sustainable growth rate as a percentage when called."
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    cny_hkd = 0.8422\n    cny_zar = 0.9149\n    \n    # Do math calculation to get the answer\n    zar_hkd = cny_hkd / cny_zar\n    \n    # return answer\n    return zar_hkd\n```\n\nThis program calculates the ZAR/HKD exchange rate using the given spot rates for CNY/HKD and CNY/ZAR. The calculation is based on the principle of triangular arbitrage, where we can derive the exchange rate between two currencies using their respective rates against a common third currency (in this case, CNY).\n\nThe ZAR/HKD rate is calculated by dividing the CNY/HKD rate by the CNY/ZAR rate. This gives us the number of Hong Kong Dollars (HKD) per South African Rand (ZAR).\n\nWhen you run this function, it will return the immediate ZAR/HKD exchange rate given by the broker."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043000000000000003,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor Î» = 0.95 on a daily basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lambda_factor = 0.95\n    days = 4\n\n    # Do math calculation to get the answer\n    weight = (1 - lambda_factor) * (lambda_factor ** (days - 1))\n\n    # return answer\n    return weight\n```\n\nThis Python program calculates the weight applied to a four-day-old return in a RiskMetrics EWMA (Exponentially Weighted Moving Average) model with a decay factor Î» = 0.95 on a daily basis.\n\nHere's how it works:\n\n1. We define the decay factor (lambda_factor) as 0.95 and the number of days as 4.\n\n2. The weight calculation follows the EWMA formula for a specific day:\n   weight = (1 - Î») * (Î» ^ (t - 1))\n   where Î» is the decay factor and t is the number of days.\n\n3. We calculate this weight and return it as the answer.\n\nThis program will return the exact weight applied to a four-day-old return in the specified EWMA model."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 180000  # Initial investment amount\n    rate = 0.10  # Annual interest rate (10%)\n    time = 2  # Time in years\n    compounding_periods = 365  # Daily compounding\n\n    # Do math calculation to get the answer\n    future_value = principal * (1 + rate/compounding_periods)**(compounding_periods * time)\n\n    # return answer\n    return round(future_value, 2)  # Rounding to 2 decimal places for currency\n```\n\nThis program calculates the future value of an investment using the compound interest formula. Here's a breakdown of the calculation:\n\n1. We define the initial investment (principal), annual interest rate (rate), time period in years (time), and the number of compounding periods per year (compounding_periods).\n\n2. We use the compound interest formula: A = P(1 + r/n)^(nt), where:\n   A = Final amount\n   P = Principal balance\n   r = Annual interest rate\n   n = Number of times interest is compounded per year\n   t = Number of years\n\n3. The result is rounded to two decimal places for currency representation.\n\nWhen you run this function, it will return the worth of the investment after 2 years, taking into account daily compounding of the 10% annual interest rate."
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "Here's a Python program to calculate the gross profit for June under the periodic FIFO inventory costing method:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_inventory = 20 * 5.00\n    purchase_1 = 70 * 5.20\n    purchase_2 = 35 * 5.50\n    \n    sales_1 = 50 * 6.00\n    sales_2 = 40 * 6.50\n    \n    total_sales = sales_1 + sales_2\n    \n    # Do math calculation to get the answer\n    units_sold = 50 + 40\n    cogs = (20 * 5.00) + (70 * 5.20) + (units_sold - 90) * 5.50\n    \n    gross_profit = total_sales - cogs\n    \n    # return answer\n    return round(gross_profit, 2)\n```\n\nThis program calculates the gross profit for June under the periodic FIFO inventory costing method. Here's a breakdown of the calculation:\n\n1. We define the initial inventory and purchases at their respective costs.\n2. We calculate the total sales revenue from both sales transactions.\n3. For COGS (Cost of Goods Sold) under FIFO:\n   - We use all 20 units from initial inventory (20 * $5.00)\n   - Then 70 units from the first purchase (70 * $5.20)\n   - The remaining units (90 - 20 - 70 = 10) come from the second purchase (10 * $5.50)\n4. We subtract COGS from total sales to get the gross profit.\n5. The result is rounded to two decimal places for currency representation.\n\nThis program will return the gross profit for June under the periodic FIFO inventory costing method."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_return = 0.10\n    initial_dividend = 1.72\n    growth_rate = 0.04\n    years_no_dividend = 3\n\n    # Do math calculation to get the answer\n    \n    # Calculate the present value of dividends starting from year 4\n    present_value_factor = 1 / ((1 + required_return) ** years_no_dividend)\n    growing_perpetuity_value = (initial_dividend / (required_return - growth_rate)) * present_value_factor\n    \n    # This is the intrinsic value of the stock\n    intrinsic_value = growing_perpetuity_value\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of Company ABC stock using the dividend discount model. Here's a breakdown of the calculation:\n\n1. We define the required variables: required return (10%), initial dividend ($1.72), growth rate (4%), and the number of years with no dividends (3).\n\n2. We calculate the present value factor for the dividends starting from year 4.\n\n3. We use the growing perpetuity formula to calculate the value of all future dividends starting from year 4, and then discount this value back to the present.\n\n4. The result is rounded to two decimal places to represent a dollar amount.\n\nThis approach assumes that the dividends will grow at a constant rate of 4% per year starting from year 4, as predicted by Johnson's team. The program does not use the 6% growth rate suggested by the current price, as we're asked to calculate the intrinsic value based on Johnson's team's predictions."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    payout_ratio = 0.50\n    growth_rate = 0.10\n    return_rate = 0.15\n\n    # Do math calculation to get the answer\n    retention_ratio = 1 - payout_ratio\n    sustainable_growth_rate = retention_ratio * return_rate\n    \n    # Gordon Growth Model: P/E = Payout Ratio / (r - g)\n    # where r is the required rate of return (in this case, we'll use the return rate)\n    # and g is the growth rate\n    pe_ratio = payout_ratio / (return_rate - growth_rate)\n\n    # return answer\n    return pe_ratio\n```\n\nThis Python program calculates the leading price-to-earnings (P/E) ratio for Tiger Corporation based on the given information:\n\n1. We define the variables for payout ratio (50% = 0.50), growth rate (10% = 0.10), and return rate (15% = 0.15).\n\n2. We then calculate the P/E ratio using a variation of the Gordon Growth Model formula:\n   P/E = Payout Ratio / (r - g)\n   Where:\n   - r is the required rate of return (we use the given return rate)\n   - g is the growth rate\n\n3. The function returns the calculated P/E ratio.\n\nNote that this calculation assumes that the growth rate and return rate are sustainable in the long term. The actual P/E ratio in the market might differ due to various factors not accounted for in this simple model."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides â¬300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "Here's the Python program to calculate the present value of the investment as described:\n\n```python\ndef solution():\n    # Define variables name and value\n    yearly_payment = 300\n    years = 5\n    discount_rate = 0.04\n    \n    # Do math calculation to get the answer\n    pv = 0\n    for t in range(years):\n        pv += yearly_payment / ((1 + discount_rate) ** t)\n    \n    # return answer\n    return round(pv, 2)\n```\n\nThis program calculates the present value of an annuity due (payments start immediately) using the following approach:\n\n1. We define the variables:\n   - `yearly_payment`: The annual payment of â¬300\n   - `years`: The number of years (5)\n   - `discount_rate`: The annual discount rate (4% or 0.04)\n\n2. We initialize the present value (`pv`) to 0.\n\n3. We use a loop to calculate the present value of each payment and sum them up:\n   - The loop runs from 0 to 4 (5 times in total)\n   - For each year, we discount the payment using the formula: payment / (1 + rate)^t\n   - We start from t=0 because the first payment is immediate (not discounted)\n\n4. Finally, we round the result to 2 decimal places and return it.\n\nThis program will calculate the present value of the investment, considering that the payments start immediately (annuity due) and occur at the beginning of each year for five years."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss_on_sale = 15000\n\n    # Do math calculation to get the answer\n    book_value = initial_price - accumulated_depreciation\n    sale_price = book_value - loss_on_sale\n\n    # return answer\n    return sale_price\n```\n\nThis program calculates the sum the company gained from selling the equipment. Here's how it works:\n\n1. We define the initial price of the equipment, the accumulated depreciation, and the loss on sale as given in the question.\n\n2. We calculate the book value of the equipment by subtracting the accumulated depreciation from the initial price.\n\n3. Since the company noted a loss on the sale, we can determine the sale price by subtracting the loss from the book value.\n\n4. The function returns the sale price, which is the sum the company gained from the sale.\n\nWhen you run this function, it will return the amount the company received from selling the equipment, despite incurring a loss compared to the book value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to Â£35 million and total shareholders' equity of Â£55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000  # Â£35 million\n    total_shareholders_equity = 55000000  # Â£55 million\n    \n    # Do math calculation to get the answer\n    total_assets = total_liabilities + total_shareholders_equity\n    liabilities_percentage = (total_liabilities / total_assets) * 100\n    \n    # return answer\n    return round(liabilities_percentage, 2)\n```\n\nThis Python program calculates the percentage that total liabilities constitute on a vertical common-size balance sheet. Here's how it works:\n\n1. We define the variables for total liabilities and total shareholders' equity in pounds.\n\n2. We calculate the total assets by adding total liabilities and total shareholders' equity. This is based on the accounting equation: Assets = Liabilities + Shareholders' Equity.\n\n3. We then calculate the percentage of liabilities by dividing total liabilities by total assets and multiplying by 100 to get the percentage.\n\n4. Finally, we return the result rounded to two decimal places.\n\nWhen you run this function, it will return the percentage of total liabilities on the vertical common-size balance sheet, which in this case is approximately 38.89%."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Do math calculation to get the answer\n    inherent_value = dividend * (1 + growth_rate) / (required_rate_of_return - growth_rate)\n    \n    # return answer\n    return inherent_value\n```\n\nThis Python program calculates the inherent value of Smith's shares using the Gordon Growth Model, which is a method for valuing a stock based on future dividend payments that grow at a constant rate.\n\nThe formula used is:\nP = D * (1 + g) / (r - g)\n\nWhere:\nP = Inherent value (price) of the stock\nD = Latest dividend paid\ng = Expected constant growth rate of dividends\nr = Required rate of return\n\nThe program defines the given values, performs the calculation, and returns the result. The inherent value will be returned as a floating-point number representing the price per share in dollars."
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | â³Curve | â³Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, âCurve shows the modification in the benchmark yield curve, and âYield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    PV0 = 99.41172\n    PV_plus = 99.32213\n    PV_minus = 99.50132\n    delta_yield = 0.0001  # 1 bp = 0.01% = 0.0001\n\n    # Do math calculation to get the answer\n    PV_plus_minus_sum = PV_plus + PV_minus\n    PV0_double = 2 * PV0\n    \n    numerator = PV_plus_minus_sum - PV0_double\n    denominator = PV0 * (delta_yield ** 2)\n    \n    convexity = numerator / denominator\n    \n    # return answer\n    return convexity\n```\n\nThis Python function calculates the approximate convexity of the bond based on the provided information. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given table:\n   - PV0 is the original bond price\n   - PV_plus is the price when yield is increased (PV+)\n   - PV_minus is the price when yield is decreased (PV_)\n   - delta_yield is the change in yield, which is 1bp or 0.0001\n\n2. The convexity formula used is:\n   Convexity â [PV(+) + PV(-) - 2PV(0)] / [PV(0) * (Îy)^2]\n\n3. We calculate the numerator and denominator separately and then divide to get the convexity.\n\n4. The function returns the calculated convexity value.\n\nThis approach gives an approximate measure of the bond's convexity, which indicates how the duration of the bond changes as yields change."
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_returns = {\n        'Domestic': 0.25,\n        'Bond': 0.09,\n        'International': 0.15\n    }\n    benchmark_returns = {\n        'Domestic': 0.15,\n        'Bond': 0.05,\n        'International': 0.18\n    }\n    portfolio_weights = {\n        'Domestic': 0.50,\n        'Bond': 0.30,\n        'International': 0.20\n    }\n    benchmark_weights = {\n        'Domestic': 0.35,\n        'Bond': 0.35,\n        'International': 0.30\n    }\n\n    # Do math calculation to get the answer\n    security_selection = 0\n    for asset in portfolio_returns:\n        security_selection += (portfolio_returns[asset] - benchmark_returns[asset]) * portfolio_weights[asset]\n\n    # return answer\n    return security_selection\n```\n\nThis Python program calculates the value added from the choice of security (also known as security selection) based on the given table. Here's how it works:\n\n1. We define dictionaries to store the portfolio returns, benchmark returns, portfolio weights, and benchmark weights for each asset class.\n\n2. We calculate the security selection by iterating through each asset class and summing the products of:\n   (Portfolio Return - Benchmark Return) * Portfolio Weight\n\n3. The result is the value added from the choice of security, which is then returned.\n\nThis calculation isolates the effect of selecting different securities within each asset class, assuming the same weights as the actual portfolio. It shows how much value was added (or subtracted) by choosing different securities than those in the benchmark."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.9480000000000001,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123\n    forward_points_percentage = 0.068\n    time_period = 3/12  # 3 months expressed as a fraction of a year\n\n    # Do math calculation to get the answer\n    forward_points = forward_rate * forward_points_percentage * time_period\n    spot_rate = forward_rate - forward_points\n\n    # return answer\n    return round(spot_rate, 4)\n```\n\nThis Python program calculates the spot rate for CAD/USD based on the given information:\n\n1. We define the variables:\n   - `forward_rate`: The 3-month forward exchange rate (1.0123 CAD/USD)\n   - `forward_points_percentage`: The 3-month forward points as a percentage (6.8% or 0.068)\n   - `time_period`: 3 months expressed as a fraction of a year (3/12 or 0.25)\n\n2. We calculate the forward points by multiplying the forward rate, forward points percentage, and time period.\n\n3. We subtract the forward points from the forward rate to get the spot rate.\n\n4. Finally, we return the spot rate rounded to 4 decimal places, as is common in currency exchange rates.\n\nThis program will return the spot rate for CAD/USD based on the given forward rate and forward points information."
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    FFO_per_share = 1.17 + 90409 / 121944  # EPS + (Depreciation and amortization / Weighted average shares outstanding)\n    price_to_FFO_ratio = 11.5\n\n    # Do math calculation to get the answer\n    share_price = FFO_per_share * price_to_FFO_ratio\n\n    # return answer\n    return round(share_price, 2)\n```\n\nThis program calculates the share price of Baldwin at the end of 2011 based on the information provided in the table. Here's how it works:\n\n1. We first calculate the Funds From Operations (FFO) per share. FFO is typically calculated by adding depreciation and amortization back to earnings per share (EPS). \n   - EPS for 2011 is given as 1.17\n   - Depreciation and amortization for 2011 is 90,409\n   - Weighted average shares outstanding is 121,944\n   - So, FFO per share = 1.17 + (90,409 / 121,944)\n\n2. The Price/FFO ratio at year-end 2011 is given as 11.5x\n\n3. To get the share price, we multiply the FFO per share by the Price/FFO ratio.\n\n4. The result is rounded to two decimal places to represent a typical share price format.\n\nThis calculation should give us the share price of Baldwin at the end of 2011 based on the provided information."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    secondary_loans = 1000\n    top_loans = 600\n    delayed_secondary = 200\n    delayed_top = 48\n    \n    # Do math calculation to get the answer\n    total_loans = secondary_loans + top_loans\n    total_delayed = delayed_secondary + delayed_top\n    \n    # Probability of a loan being delayed\n    p_delayed = total_delayed / total_loans\n    \n    # Probability of a loan being secondary quality\n    p_secondary = secondary_loans / total_loans\n    \n    # Probability of a loan being delayed given it's secondary quality\n    p_delayed_given_secondary = delayed_secondary / secondary_loans\n    \n    # Calculate the probability using Bayes' theorem\n    p_secondary_given_delayed = (p_delayed_given_secondary * p_secondary) / p_delayed\n    \n    # Convert to percentage\n    odds_percentage = p_secondary_given_delayed * 100\n    \n    # return answer\n    return odds_percentage\n```\n\nThis program calculates the probability that a randomly selected delayed loan is a secondary quality loan using Bayes' theorem. The result is returned as a percentage, representing the odds that a delayed loan is a secondary quality loan."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 26.00\n    daily_volatility = 0.015\n    option_delta = -0.5\n    confidence_level = 0.95\n    \n    # Do math calculation to get the answer\n    import scipy.stats as stats\n    \n    z_score = stats.norm.ppf(confidence_level)\n    stock_var = stock_price * daily_volatility * z_score\n    option_var = abs(option_delta) * stock_var\n    \n    # return answer\n    return option_var\n```\n\nThis Python program calculates the 1-day 95% Value at Risk (VaR) for a long position in a put option using the delta-normal method. Here's a breakdown of the calculation:\n\n1. We define the given variables: stock price, daily volatility, option delta, and confidence level.\n\n2. We use the `scipy.stats` module to calculate the z-score for the 95% confidence level.\n\n3. We calculate the VaR for the underlying stock using the formula: stock price * daily volatility * z-score.\n\n4. We then calculate the option VaR by multiplying the stock VaR by the absolute value of the option delta.\n\n5. Finally, we return the option VaR as the answer.\n\nNote: This program assumes you have the `scipy` library installed. If you don't, you'll need to install it using `pip install scipy` before running the program."
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "Here's the Python program to calculate the cash flow from financing activities according to U.S. GAAP based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    issuance_preferred_stock = 45000\n    repurchase_common_stock = -20000\n    issuance_bonds = 40000\n    debt_retired_common_stock = 0  # This is a non-cash transaction\n    paid_off_long_term_borrowings = -10000\n    dividends_paid = -10000\n\n    # Do math calculation to get the answer\n    cash_flow_financing = (\n        issuance_preferred_stock\n        + repurchase_common_stock\n        + issuance_bonds\n        + debt_retired_common_stock\n        + paid_off_long_term_borrowings\n        + dividends_paid\n    )\n\n    # return answer\n    return cash_flow_financing\n```\n\nThis program calculates the cash flow from financing activities according to U.S. GAAP. Here's an explanation of the calculation:\n\n1. Issuance of preferred stock: $45,000 (cash inflow)\n2. Repurchase of common stock: -$20,000 (cash outflow)\n3. Issuance of bonds: $40,000 (cash inflow)\n4. Debt retired through issuance of common stock: $0 (non-cash transaction, not included)\n5. Paid off long-term bank borrowings: -$10,000 (cash outflow)\n6. Dividends paid: -$10,000 (cash outflow)\n\nThe program sums up these values to get the total cash flow from financing activities. Note that the debt retired through issuance of common stock is a non-cash transaction and therefore not included in the cash flow calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    coupon_payment = face_value * coupon_rate\n    spot_rate_1 = 0.036\n    spot_rate_2 = 0.037\n    spot_rate_3 = 0.038\n\n    # Do math calculation to get the answer\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1)\n    pv_coupon_2 = coupon_payment / (1 + spot_rate_2)**2\n    pv_coupon_3 = coupon_payment / (1 + spot_rate_3)**3\n    pv_face_value = face_value / (1 + spot_rate_3)**3\n\n    bond_price = pv_coupon_1 + pv_coupon_2 + pv_coupon_3 + pv_face_value\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a bond based on the given parameters:\n\n1. We define the variables for face value, coupon rate, coupon payment, and spot rates for each year.\n\n2. We calculate the present value of each coupon payment using the corresponding spot rate:\n   - For year 1: PV = coupon_payment / (1 + spot_rate_1)\n   - For year 2: PV = coupon_payment / (1 + spot_rate_2)^2\n   - For year 3: PV = coupon_payment / (1 + spot_rate_3)^3\n\n3. We calculate the present value of the face value, which is paid at the end of year 3:\n   PV_face_value = face_value / (1 + spot_rate_3)^3\n\n4. We sum up all the present values to get the bond price.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThis program will return the price of the bond, which is the answer to the given question."
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    plan_assets_beginning = 40800\n    plan_assets_end = 44300\n    employer_contributions = 1200\n    actual_return = 3100\n    \n    # Do math calculation to get the answer\n    payments = plan_assets_beginning + employer_contributions + actual_return - plan_assets_end\n    \n    # return answer\n    return payments\n```\n\nThis Python function calculates the pension payments given out during the year based on the provided information. Here's how it works:\n\n1. We define the relevant variables from the given data:\n   - Plan assets at the beginning of the year\n   - Plan assets at the end of the year\n   - Employer contributions\n   - Actual return on plan assets\n\n2. To calculate the payments, we use the following logic:\n   Plan assets (beginning) + Employer contributions + Actual return - Plan assets (end) = Payments\n\n   This is because the difference between what should be in the plan (beginning balance + additions) and what is actually there at the end must have been paid out.\n\n3. The function returns the calculated payment amount.\n\nWhen you run this function, it will return the amount of pension payments made during the year according to the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean = 160000\n    std_dev = 30000\n    threshold = 100000\n\n    # Do math calculation to get the answer\n    from scipy import stats\n    z_score = (threshold - mean) / std_dev\n    percentage = stats.norm.cdf(z_score) * 100\n\n    # return answer\n    return round(percentage, 2)\n```\n\nThis Python program calculates the percentage of returns below $100,000 given a normal distribution with a mean of $160,000 and a standard deviation of $30,000. Here's a breakdown of the solution:\n\n1. We define the variables: mean ($160,000), standard deviation ($30,000), and the threshold we're interested in ($100,000).\n\n2. We use the SciPy library's `stats` module to perform the calculation. The `norm.cdf()` function gives us the cumulative distribution function (CDF) for a normal distribution.\n\n3. We calculate the z-score, which is the number of standard deviations the threshold is from the mean.\n\n4. We use the z-score to calculate the percentage of returns below the threshold using the CDF.\n\n5. We multiply by 100 to convert the proportion to a percentage and round to two decimal places for readability.\n\n6. The function returns this percentage.\n\nNote: This solution assumes that the SciPy library is installed. If it's not available in your environment, you may need to install it using pip: `pip install scipy`."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    minimum_margin_requirement = 0.65\n\n    # Do math calculation to get the answer\n    leverage_ratio = 1 / minimum_margin_requirement\n\n    # return answer\n    return leverage_ratio\n```\n\nThis Python program calculates the maximum leverage ratio based on the given minimum margin requirement. Here's an explanation of the solution:\n\n1. We define the minimum margin requirement as 65% or 0.65 in decimal form.\n\n2. The leverage ratio is the reciprocal of the margin requirement. This is because leverage is how many times the total position value can be compared to the investor's equity. \n\n3. We calculate the leverage ratio by dividing 1 by the minimum margin requirement.\n\n4. The function returns the calculated leverage ratio.\n\nWhen you run this function, it will return approximately 1.5385, which means the maximum leverage ratio is about 1.54:1. This indicates that for every $1 of investor's equity, they can control up to $1.54 worth of securities."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    price = 5\n    quantity = 30 - 2 * price\n\n    # Do math calculation to get the answer\n    delta_q = -2  # Change in quantity with respect to price (from the demand function)\n    delta_p = 1   # We assume a unit change in price for elasticity calculation\n    \n    elasticity = (delta_q / quantity) / (delta_p / price)\n    \n    # return answer\n    return abs(elasticity)  # We return the absolute value as elasticity is typically reported as a positive number\n```\n\nThis program calculates the price elasticity of demand for bottled water given the demand function and price. Here's a breakdown of the solution:\n\n1. We define the price as 5 and calculate the quantity demanded at this price using the given demand function: Qbw = 30 - 2Pb.\n\n2. The change in quantity with respect to price (delta_q) is -2, which we can derive from the demand function.\n\n3. We assume a unit change in price (delta_p = 1) for the elasticity calculation.\n\n4. We use the point elasticity formula: elasticity = (ÎQ/Q) / (ÎP/P)\n\n5. Finally, we return the absolute value of the elasticity, as it's conventionally reported as a positive number.\n\nThis program will return the price elasticity of demand for bottled water at the given price of 5."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    flotation_cost = 0.05  # 5.0% flotation cost\n    dividend = 0.32  # anticipated dividend next year\n    growth_rate = 0.10  # 10% dividend growth rate\n    share_price = 14.69  # share release price\n    \n    # Do math calculation to get the answer\n    net_price = share_price * (1 - flotation_cost)\n    cost_of_equity = (dividend / net_price) + growth_rate\n    \n    # Convert to percentage\n    cost_of_equity_percentage = cost_of_equity * 100\n    \n    # return answer\n    return round(cost_of_equity_percentage, 2)\n```\n\nThis Python program calculates the firm's cost of external equity as follows:\n\n1. We define the given variables: flotation cost, dividend, growth rate, and share price.\n2. We calculate the net price per share after flotation costs.\n3. We use the dividend growth model formula to calculate the cost of equity:\n   Cost of equity = (Dividend / Net price) + Growth rate\n4. We convert the result to a percentage by multiplying by 100.\n5. We round the result to two decimal places for a clean percentage representation.\n6. Finally, we return the calculated cost of external equity as a percentage.\n\nThe program will return the firm's cost of external equity as a percentage when called."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bidâoffer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    holding_period_months = 9\n    annual_management_fee = 0.0032  # 0.32%\n    round_trip_trading_fees = 0.0020  # 0.20%\n    bid_offer_spread = 0.0010  # 0.10%\n\n    # Do math calculation to get the answer\n    management_fee_for_period = annual_management_fee * (holding_period_months / 12)\n    total_bid_offer_spread = bid_offer_spread * 2  # Buy and sell\n    total_cost = management_fee_for_period + round_trip_trading_fees + total_bid_offer_spread\n\n    # Convert to percentage\n    total_cost_percentage = total_cost * 100\n\n    # return answer\n    return total_cost_percentage\n```\n\nThis Python program calculates the total holding period cost for the ETF investment over a 9-month period. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the management fee for the 9-month period by pro-rating the annual fee.\n3. We account for the bid-offer spread twice (once for buying and once for selling).\n4. We sum up all the costs: management fee for the period, round-trip trading fees, and total bid-offer spread.\n5. We convert the result to a percentage for easier interpretation.\n\nThe function will return the total holding period cost as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 515\n    final_value = 602.5\n    high_water_mark = 540\n    hurdle_rate = 0.05\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n\n    # Do math calculation to get the answer\n    gross_return = final_value / initial_value - 1\n    \n    # Calculate management fee\n    management_fee = final_value * management_fee_rate\n    \n    # Calculate hurdle amount\n    hurdle_amount = initial_value * hurdle_rate\n    \n    # Calculate incentive fee\n    if final_value > high_water_mark:\n        incentive_fee = (final_value - max(high_water_mark, initial_value * (1 + hurdle_rate))) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    # Calculate total fees\n    total_fees = management_fee + incentive_fee\n    \n    # Calculate net return\n    net_return = (final_value - initial_value - total_fees) / initial_value\n\n    # return answer\n    return net_return\n```\n\nThis Python program calculates the investor's net return based on the given \"2 and 20\" fee arrangement and other provided information. It takes into account the management fee, hurdle rate, and incentive fee, and calculates the net return after deducting these fees from the gross return."
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    common_shares = 1000000\n    net_income = 1500000\n    bond_par_value = 10000000\n    bond_coupon_rate = 0.04\n    bond_convertible_shares = 300000\n    preferred_par_value = 2000000\n    preferred_dividend_rate = 0.07\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    \n    # Calculate preferred dividends\n    preferred_dividends = preferred_par_value * preferred_dividend_rate\n    \n    # Calculate bond interest (after-tax)\n    bond_interest = bond_par_value * bond_coupon_rate * (1 - tax_rate)\n    \n    # Calculate basic EPS\n    basic_eps = (net_income - preferred_dividends) / common_shares\n    \n    # Calculate diluted EPS\n    diluted_earnings = net_income - preferred_dividends + bond_interest\n    diluted_shares = common_shares + bond_convertible_shares\n    diluted_eps = diluted_earnings / diluted_shares\n\n    # return answer\n    return diluted_eps\n```\n\nThis Python program calculates the diluted earnings per share (EPS) for the corporation based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the necessary variables from the provided data.\n2. We calculate the preferred dividends by multiplying the par value of preferred stock by its dividend rate.\n3. We calculate the after-tax bond interest by multiplying the bond par value by the coupon rate and then by (1 - tax rate).\n4. We calculate the basic EPS by subtracting preferred dividends from net income and dividing by the number of common shares.\n5. For diluted EPS, we:\n   - Calculate diluted earnings by adding back the after-tax bond interest to (net income - preferred dividends).\n   - Calculate diluted shares by adding the number of shares the bonds are convertible into to the existing common shares.\n   - Divide diluted earnings by diluted shares to get diluted EPS.\n6. Finally, we return the diluted EPS"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_stocks = 10000\n    return_rate = 0.155\n    final_stock_price = 24\n    dividend = 2500\n\n    # Do math calculation to get the answer\n    total_final_value = (num_stocks * final_stock_price) + dividend\n    initial_investment = total_final_value / (1 + return_rate)\n    initial_stock_price = initial_investment / num_stocks\n\n    # return answer\n    return initial_stock_price\n```\n\nThis Python program calculates the initial cost per stock based on the given information. Here's a breakdown of the calculation:\n\n1. We define the known variables: number of stocks, return rate, final stock price, and dividend amount.\n\n2. We calculate the total final value of the investment, which is the sum of the stock value at selling price and the dividend.\n\n3. Using the return rate, we calculate the initial investment amount.\n\n4. Finally, we divide the initial investment by the number of stocks to get the initial price per stock.\n\nThe function will return the initial stock price, which is the answer to the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fundâs three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_futures_price = 865.0\n    short_term_futures_price = 877.0\n    long_term_futures_price = 883.0\n    collateral_rate = 0.0060  # 0.60% annual rate\n    holding_period = 3 / 12  # 3 months expressed as a fraction of a year\n\n    # Do math calculation to get the answer\n    futures_return = (short_term_futures_price - initial_futures_price) / initial_futures_price\n    collateral_return = collateral_rate * holding_period\n    total_return = futures_return + collateral_return\n\n    # Convert to percentage\n    total_return_percentage = total_return * 100\n\n    # return answer rounded to two decimal places\n    return round(total_return_percentage, 2)\n```\n\nThis Python program calculates the total return of the Zenith Fund's soybean futures transaction over the three-month period. Here's a breakdown of the calculation:\n\n1. We define the initial futures price, the short-term futures price at rolling, the annual collateral rate, and the holding period.\n\n2. The futures return is calculated as the percentage change in futures price: (877.0 - 865.0) / 865.0\n\n3. The collateral return is calculated by multiplying the annual rate by the fraction of a year: 0.60% * (3/12)\n\n4. The total return is the sum of the futures return and the collateral return.\n\n5. We convert the total return to a percentage by multiplying by 100.\n\n6. Finally, we round the result to two decimal places for readability.\n\nThe program will return the total return as a percentage, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cap_rate = 0.055\n    ending_cap_rate = 0.06\n    discount_rate = 0.0725\n\n    # Do math calculation to get the answer\n    growth_rate = discount_rate - ((initial_cap_rate + ending_cap_rate) / 2)\n\n    # return answer\n    return growth_rate\n```\n\nThis Python program calculates the growth rate of the property based on the given DCF (Discounted Cash Flow) specifications. Here's an explanation of the calculation:\n\n1. We define the variables for the initial capitalization rate, ending capitalization rate, and discount rate as given in the question.\n\n2. The growth rate is calculated using the formula:\n   growth_rate = discount_rate - average_cap_rate\n\n   Where average_cap_rate is the average of the initial and ending capitalization rates.\n\n3. The program returns the calculated growth rate.\n\nThis calculation is based on the Gordon Growth Model, which is often used in real estate valuation. It assumes that the difference between the discount rate and the average capitalization rate represents the expected growth rate of the property's income and value."
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 5000000\n    residual_value = 500000\n    total_capacity = 950000\n    first_year_production = 150000\n\n    # Do math calculation to get the answer\n    depreciable_cost = cost - residual_value\n    depreciation_per_unit = depreciable_cost / total_capacity\n    first_year_depreciation = depreciation_per_unit * first_year_production\n\n    # return answer\n    return first_year_depreciation\n```\n\nThis Python program calculates the depreciation expense for the first year using the units-of-production method. Here's how it works:\n\n1. We define the variables based on the given information:\n   - The cost of the equipment is $5,000,000\n   - The estimated residual value is $500,000\n   - The total productive capacity is 950,000 units\n   - The production in the first year (FY2015) is 150,000 units\n\n2. We calculate the depreciable cost by subtracting the residual value from the initial cost.\n\n3. We determine the depreciation per unit by dividing the depreciable cost by the total productive capacity.\n\n4. We calculate the first year's depreciation by multiplying the depreciation per unit by the number of units produced in the first year.\n\n5. Finally, we return the calculated depreciation expense for the first year.\n\nThis approach ensures that depreciation is based on actual usage of the machine, which is the principle behind the units-of-production method."
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 92\n    depreciation_amortization = 45\n    price_ffo_multiple = 13\n    weighted_avg_shares = 118\n\n    # Do math calculation to get the answer\n    ffo = net_income + depreciation_amortization\n    ffo_per_share = ffo / weighted_avg_shares\n    share_price = ffo_per_share * price_ffo_multiple\n\n    # return answer\n    return share_price\n\n```\n\nThis Python program calculates the share price of the Real Estate Investment Trust at the end of 2017 based on the given information and the Price/FFO multiple. Here's how it works:\n\n1. We define the necessary variables from the income statement:\n   - Net income: $92 million\n   - Depreciation and amortization: $45 million\n   - Price/FFO multiple: 13x\n   - Weighted average shares outstanding: 118 million\n\n2. We calculate the Funds from Operations (FFO) by adding net income and depreciation/amortization.\n\n3. We calculate FFO per share by dividing FFO by the number of weighted average shares outstanding.\n\n4. Finally, we multiply the FFO per share by the Price/FFO multiple to get the share price.\n\n5. The function returns the calculated share price.\n\nThis calculation gives us the estimated share price at the end of 2017 based on the Price/FFO multiple provided in the income statement."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 40\n    price_elasticity = 1.5\n\n    # Do math calculation to get the answer\n    # For a monopoly, optimal price is set where MR = MC\n    # MR = P(1 - 1/|E|), where E is price elasticity\n    # So, MC = P(1 - 1/|E|)\n    # Rearranging, P = MC / (1 - 1/|E|)\n    price = marginal_cost / (1 - 1/abs(price_elasticity))\n\n    # return answer\n    return round(price, 2)\n```\n\nThis Python program calculates the optimal price for Omega Petroleum Corp. based on the given information:\n\n1. We define the marginal cost and price elasticity of demand as variables.\n\n2. We use the formula for optimal pricing in a monopoly, where Marginal Revenue (MR) equals Marginal Cost (MC).\n\n3. The formula for Marginal Revenue in terms of price and elasticity is: MR = P(1 - 1/|E|), where P is price and E is price elasticity.\n\n4. Setting this equal to Marginal Cost and solving for P gives us: P = MC / (1 - 1/|E|)\n\n5. We apply this formula using our defined variables.\n\n6. Finally, we return the calculated price, rounded to two decimal places for cents.\n\nThis program will return the optimal price that Omega Petroleum Corp. is likely to set given its monopolistic position and the provided cost and elasticity information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    bond_price = 97\n    coupon_spread = 0.0080  # 80 basis points\n    current_lpr = 0.0100  # 1.00%\n    periods_per_year = 2  # 6-month payments\n    years = 2\n    \n    # Do math calculation to get the answer\n    n = periods_per_year * years\n    current_coupon_rate = current_lpr + coupon_spread\n    \n    # Calculate the discount margin using the bond pricing formula\n    r = current_coupon_rate / periods_per_year\n    discount_margin = ((face_value / bond_price - 1) / years + r) * periods_per_year - current_lpr\n    \n    # Convert discount margin to basis points\n    discount_margin_bps = discount_margin * 10000\n    \n    # Round to nearest whole number\n    answer = round(discount_margin_bps)\n    \n    # return answer\n    return answer\n```\n\nThis Python program calculates the discount margin for the floating-rate bond as described in the question. Here's a breakdown of the calculation:\n\n1. We define all the given variables, converting percentages to decimals.\n2. We calculate the number of periods (n) and the current coupon rate.\n3. We use the bond pricing formula to solve for the discount margin:\n   Bond Price = Face Value / (1 + (r + DM)/m)^(n)\n   Where r is the reference rate (LPR), DM is the discount margin, m is the number of periods per year, and n is the total number of periods.\n4. We rearrange this formula to solve for DM (discount margin).\n5. We convert the result to basis points by multiplying by 10000.\n6. Finally, we round to the nearest whole number as the question asks for the answer in basis points.\n\nThe function will return the discount margin in basis points as an integer."
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1â10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price â Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smithâs regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "Here's the Python program to calculate the anticipated initial return for the forthcoming IPO based on Smith's regression analysis:\n\n```python\ndef solution():\n    # Define variables name and value\n    intercept = 0.0477\n    underwriter_rank_coef = 0.0150\n    pre_offer_adjustment_coef = 0.4350\n    offer_size_coef = -0.0009\n    fraction_retained_coef = 0.0500\n\n    underwriter_rank = 6\n    pre_offer_adjustment = 0.04\n    offer_size = 40\n    fraction_retained = 0.70\n\n    # Do math calculation to get the answer\n    initial_return = (\n        intercept +\n        (underwriter_rank_coef * underwriter_rank) +\n        (pre_offer_adjustment_coef * pre_offer_adjustment) +\n        (offer_size_coef * offer_size) +\n        (fraction_retained_coef * fraction_retained)\n    )\n\n    # return answer\n    return initial_return\n```\n\nThis program calculates the anticipated initial return for the IPO based on the given regression coefficients and the characteristics of the forthcoming IPO. The calculation follows the linear regression model:\n\nInitial Return = Intercept + (b1 * Underwriter rank) + (b2 * Pre-offer price adjustment) + (b3 * Offer size) + (b4 * Fraction retained)\n\nThe program returns the calculated initial return as a decimal. To get the percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0040  # 0.40% expressed as a decimal\n    round_trip_trading_commission = 0.0055  # 0.55% expressed as a decimal\n    bid_offer_spread = 0.0020  # 0.20% expressed as a decimal\n    holding_period_months = 9\n\n    # Do math calculation to get the answer\n    management_fee_for_period = annual_management_fee * (holding_period_months / 12)\n    total_trading_costs = round_trip_trading_commission + (2 * bid_offer_spread)  # buying and selling\n    \n    total_cost = management_fee_for_period + total_trading_costs\n\n    # Convert to percentage\n    total_cost_percentage = total_cost * 100\n\n    # return answer\n    return total_cost_percentage\n```\n\nThis Python program calculates the projected total cost for holding an ETF for nine months, considering the given management fees and trading costs. Here's a breakdown of the calculation:\n\n1. We define the variables for the annual management fee, round-trip trading commissions, bid-offer spread, and the holding period in months.\n\n2. We calculate the management fee for the 9-month period by prorating the annual fee.\n\n3. We calculate the total trading costs by adding the round-trip trading commission and twice the bid-offer spread (once for buying and once for selling).\n\n4. We sum up the management fee for the period and the total trading costs to get the total cost.\n\n5. We convert the result to a percentage by multiplying by 100.\n\n6. Finally, we return the total cost as a percentage.\n\nThis calculation does not account for compound effects, as specified in the question. The result will be the projected total cost as a percentage of the investment for the 9-month holding period."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "Here's the Python program to calculate the holding period return for the three-year timeframe based on the given annual rates of return:\n\n```python\ndef solution():\n    # Define variables name and value\n    return_2008 = 0.14\n    return_2009 = -0.10\n    return_2010 = -0.02\n    \n    # Do math calculation to get the answer\n    holding_period_return = (1 + return_2008) * (1 + return_2009) * (1 + return_2010) - 1\n    \n    # Convert to percentage and round to two decimal places\n    holding_period_return_percentage = round(holding_period_return * 100, 2)\n    \n    # return answer\n    return holding_period_return_percentage\n```\n\nThis program calculates the holding period return for the three-year timeframe using the following steps:\n\n1. Define the annual returns for each year as decimals.\n2. Calculate the holding period return using the formula: (1 + r1) * (1 + r2) * (1 + r3) - 1, where r1, r2, and r3 are the annual returns for each year.\n3. Convert the result to a percentage and round it to two decimal places for better readability.\n4. Return the final answer as a percentage.\n\nWhen you run this function, it will return the holding period return for the three-year timeframe based on the given annual rates of return."
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    imports = 2.2\n    gross_private_domestic_investment = 6.0\n    exports = 1.8\n    \n    # Do math calculation to get the answer\n    gdp = consumption + gross_private_domestic_investment + government_spending + (exports - imports)\n    \n    # return answer\n    return gdp\n```\n\nThis Python program calculates the Gross Domestic Product (GDP) for country B in 2015 based on the provided data. The GDP is calculated using the expenditure approach, which is:\n\nGDP = Consumption + Gross Private Domestic Investment + Government Spending + (Exports - Imports)\n\nNote that the Capital Consumption Allowance is not directly used in this calculation, as it's already accounted for in the Gross Private Domestic Investment figure.\n\nThe program defines variables for each relevant item from the table, performs the calculation, and then returns the result. When you run this function, it will return the GDP value in trillions of dollars."
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "Here's a Python program to calculate the standard deviation of the returns from the given portfolio:\n\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.07  # Expected return of Stock 1\n    r2 = 0.10  # Expected return of Stock 2\n    std1 = 0.12  # Standard deviation of Stock 1\n    std2 = 0.25  # Standard deviation of Stock 2\n    w1 = 0.30  # Portfolio weight of Stock 1\n    w2 = 0.70  # Portfolio weight of Stock 2\n    corr = 0.20  # Correlation between Stock 1 and Stock 2\n\n    # Do math calculation to get the answer\n    var1 = (w1 * std1) ** 2\n    var2 = (w2 * std2) ** 2\n    covar = 2 * w1 * w2 * std1 * std2 * corr\n    \n    portfolio_variance = var1 + var2 + covar\n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis program calculates the portfolio standard deviation using the formula:\n\nÏp = â(w1^2 * Ï1^2 + w2^2 * Ï2^2 + 2w1w2Ï1Ï2Ï12)\n\nWhere:\n- w1 and w2 are the portfolio weights\n- Ï1 and Ï2 are the standard deviations of the individual stocks\n- Ï12 is the correlation coefficient between the two stocks\n\nThe program defines all the given variables, performs the calculation, and returns the portfolio standard deviation as the answer."
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "Here's a Python program to calculate the value of intangibles using the excess earnings method based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    working_capital = 22000000\n    fixed_assets = 57000000\n    normalized_income = 89000000\n    return_on_working_capital = 0.06\n    return_on_fixed_assets = 0.09\n    return_on_intangibles = 0.25\n    growth_rate = 0.07\n\n    # Do math calculation to get the answer\n    \n    # Calculate required returns\n    required_return_working_capital = working_capital * return_on_working_capital\n    required_return_fixed_assets = fixed_assets * return_on_fixed_assets\n    \n    # Calculate excess earnings\n    excess_earnings = normalized_income - required_return_working_capital - required_return_fixed_assets\n    \n    # Calculate value of intangibles using Gordon Growth Model\n    value_of_intangibles = excess_earnings / (return_on_intangibles - growth_rate)\n    \n    # return answer\n    return round(value_of_intangibles, 2)\n```\n\nThis program follows these steps:\n\n1. Define all the given variables with their respective values.\n2. Calculate the required returns for working capital and fixed assets.\n3. Calculate the excess earnings by subtracting the required returns from the normalized income.\n4. Use the Gordon Growth Model to calculate the value of intangibles, where:\n   Value = Excess Earnings / (Required Return on Intangibles - Growth Rate)\n5. Round the result to two decimal places and return it.\n\nThis program will return the estimated value of intangibles for XYZ Corp using the excess earnings method."
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "Here's a Python program to calculate the cash conversion cycle (net operating cycle) based on the given financial information:\n\n```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 40000\n    cogs = 30000\n    accounts_receivable = 3000\n    inventory_beginning = 1500\n    inventory_ending = 2000\n    accounts_payable = 4000\n\n    # Do math calculation to get the answer\n    \n    # Calculate average inventory\n    average_inventory = (inventory_beginning + inventory_ending) / 2\n    \n    # Calculate Days Sales Outstanding (DSO)\n    dso = (accounts_receivable / credit_sales) * 365\n    \n    # Calculate Days Inventory Outstanding (DIO)\n    dio = (average_inventory / cogs) * 365\n    \n    # Calculate Days Payables Outstanding (DPO)\n    dpo = (accounts_payable / cogs) * 365\n    \n    # Calculate Cash Conversion Cycle (CCC)\n    ccc = dso + dio - dpo\n\n    # return answer\n    return round(ccc, 2)\n```\n\nThis program calculates the cash conversion cycle using the following steps:\n\n1. We define the variables based on the given financial information.\n2. We calculate the average inventory.\n3. We calculate Days Sales Outstanding (DSO) = (Accounts Receivable / Credit Sales) * 365\n4. We calculate Days Inventory Outstanding (DIO) = (Average Inventory / COGS) * 365\n5. We calculate Days Payables Outstanding (DPO) = (Accounts Payable / COGS) * 365\n6. Finally, we calculate the Cash Conversion Cycle (CCC) = DSO + DIO - DPO\n\nThe function returns the calculated CCC rounded to two decimal places. This value represents the number of days it takes for the company to convert its investments in inventory and other resources into cash flows from sales."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    research_cost = 5000000\n    development_cost = 3000000\n    useful_life = 20\n    salvage_value = 10000\n    years_passed = 1  # End of 2014, one year after creation in 2013\n\n    # Do math calculation to get the answer\n    capitalizable_cost = development_cost  # Only development cost is capitalized under U.S. GAAP\n    depreciable_amount = capitalizable_cost - salvage_value\n    annual_depreciation = depreciable_amount / useful_life\n    accumulated_depreciation = annual_depreciation * years_passed\n    book_value = capitalizable_cost - accumulated_depreciation\n\n    # return answer\n    return book_value\n```\n\nThis Python program calculates the book value of the software copyright at the end of 2014 based on the given information and U.S. GAAP rules. Here's a breakdown of the calculation:\n\n1. Only the development cost ($3 million) is capitalized, as research costs are expensed under U.S. GAAP.\n2. The depreciable amount is the capitalizable cost minus the salvage value.\n3. Annual depreciation is calculated using the straight-line method over the 20-year useful life.\n4. Accumulated depreciation is calculated for one year (2013 to 2014).\n5. The book value is the capitalizable cost minus the accumulated depreciation.\n\nThe function will return the book value of the software copyright at the end of 2014."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outcomes = [7, 8, 9, 10]\n    n = len(outcomes)\n\n    # Do math calculation to get the answer\n    mean = sum(outcomes) / n\n    variance = sum((x - mean) ** 2 for x in outcomes) / n\n\n    # return answer\n    return variance\n```\n\nThis Python program calculates the variance of a discrete uniform distribution with the given outcomes [7, 8, 9, 10]. Here's a breakdown of the solution:\n\n1. We define the outcomes as a list and calculate the number of outcomes (n).\n\n2. We calculate the mean of the distribution by summing all outcomes and dividing by n.\n\n3. We calculate the variance using the formula: Î£(x - Î¼)Â² / n, where x is each outcome, Î¼ is the mean, and n is the number of outcomes.\n\n4. The function returns the calculated variance.\n\nThis solution follows the formula for variance in a discrete uniform distribution, which is (nÂ² - 1) / 12, where n is the number of possible outcomes. However, the program calculates it step-by-step for clarity and to demonstrate the process of finding variance from the given outcomes."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales = 600000\n    avg_accounts_receivable = 50000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = sales / avg_accounts_receivable\n    collection_period = 365 / receivables_turnover\n    \n    # return answer\n    return round(collection_period, 2)\n```\n\nThis program calculates the receivables collection period for ABC Corporation in 2017. Here's how it works:\n\n1. We define the variables for sales and average accounts receivable based on the given information.\n\n2. We calculate the receivables turnover by dividing sales by average accounts receivable.\n\n3. We then calculate the collection period by dividing 365 (days in a year) by the receivables turnover.\n\n4. Finally, we return the result rounded to two decimal places for better readability.\n\nThe returned value represents the number of days it takes, on average, for the company to collect payment after a sale is made."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_duration = 8\n    modified_duration = 11.470\n\n    # Do math calculation to get the answer\n    duration_gap = modified_duration - investment_duration\n\n    # return answer\n    return duration_gap\n```\n\nThis Python program calculates the duration gap for the given scenario. Here's an explanation of the steps:\n\n1. We define the variables:\n   - `investment_duration`: The trader's investment duration, which is 8 years.\n   - `modified_duration`: The approximate modified duration of the bond, which is 11.470 years.\n\n2. We calculate the duration gap by subtracting the investment duration from the modified duration.\n\n3. The function returns the calculated duration gap.\n\nThe duration gap is a measure of the mismatch between the duration of assets and liabilities. In this case, it represents the difference between the bond's sensitivity to interest rate changes (modified duration) and the trader's investment horizon.\n\nA positive duration gap indicates that the bond's duration is longer than the investment horizon, which means the bond is more sensitive to interest rate changes than the trader's investment strategy accounts for. This could potentially expose the trader to interest rate risk if rates were to change significantly during their investment period."
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_return = 0.04\n    roll_return = 0.015\n    risk_free_rate = 0.01\n    \n    # Do math calculation to get the answer\n    overall_return = price_return + roll_return + risk_free_rate\n    \n    # return answer\n    return overall_return\n```\n\nThis Python program calculates the overall return for the hedge position of Platte River Foods based on the information provided in the table. Here's how it works:\n\n1. We define the variables based on the given data:\n   - `price_return` is 4% or 0.04\n   - `roll_return` is 1.50% or 0.015\n   - `risk_free_rate` is 1% or 0.01\n\n2. To calculate the overall return, we sum up these three components:\n   - Price Return\n   - Roll Return\n   - Risk-Free Rate\n\n3. The function returns the calculated overall return.\n\nWhen you run this function, it will return 0.065, which represents a 6.5% overall return for the hedge position."
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "Here's a Python program to calculate the recurring pension expense as per US GAAP based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150\n    benefit_obligation_start = 45000\n    benefit_obligation_end = 48395\n    plan_assets_start = 40800\n    plan_assets_end = 44300\n    discount_rate = 0.075\n    expected_return_rate = 0.082\n\n    # Do math calculation to get the answer\n    \n    # Calculate interest cost\n    interest_cost = benefit_obligation_start * discount_rate\n\n    # Calculate expected return on plan assets\n    expected_return = plan_assets_start * expected_return_rate\n\n    # Calculate recurring pension expense\n    recurring_pension_expense = (\n        current_service_costs +\n        past_service_costs +\n        interest_cost -\n        expected_return\n    )\n\n    # return answer\n    return recurring_pension_expense\n\n```\n\nThis program calculates the recurring pension expense based on the components typically included in US GAAP reporting:\n\n1. Current service costs\n2. Past service costs\n3. Interest cost (calculated using the discount rate and beginning benefit obligation)\n4. Expected return on plan assets (calculated using the expected return rate and beginning plan assets)\n\nThe program adds the first three components and subtracts the expected return on plan assets to arrive at the recurring pension expense. Note that as per the question, we're ignoring the actuarial loss and there are no write-offs of past service expenses."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    income_200_units = 500000\n    income_250_units = 600000\n    units_difference = 250 - 200\n\n    # Do math calculation to get the answer\n    total_revenue_difference = income_250_units - income_200_units\n    marginal_revenue_per_unit = total_revenue_difference / units_difference\n\n    # return answer\n    return marginal_revenue_per_unit\n```\n\nThis Python program calculates the per unit marginal revenue attributed to marketing 250 units instead of 200 units. Here's how it works:\n\n1. We define the variables:\n   - `income_200_units`: The total income from selling 200 units (CHF 500,000)\n   - `income_250_units`: The total income from selling 250 units (CHF 600,000)\n   - `units_difference`: The difference in the number of units (250 - 200 = 50)\n\n2. We calculate the total revenue difference by subtracting the income from 200 units from the income from 250 units.\n\n3. We then divide this total revenue difference by the difference in the number of units to get the marginal revenue per unit.\n\n4. Finally, we return the calculated marginal revenue per unit.\n\nWhen you run this function, it will return the per unit marginal revenue, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares = 200000\n    price_per_share_eur = 90\n    total_investment_eur = shares * price_per_share_eur\n    \n    initial_6month_forward_rate = 1.3935 - 0.0190  # Spot bid - 6-month forward bid\n    three_month_spot_rate = 1.4106  # Spot bid after 3 months\n    \n    # Do math calculation to get the answer\n    initial_usd_value = total_investment_eur * initial_6month_forward_rate\n    three_month_usd_value = total_investment_eur * three_month_spot_rate\n    \n    mark_to_market_value = three_month_usd_value - initial_usd_value\n    \n    # return answer\n    return round(mark_to_market_value, 2)\n```\n\nThis Python program calculates the mark-to-market value in US dollars that the manager would report if the Spanish shares were sold after three months. Here's a breakdown of the calculation:\n\n1. We calculate the total investment in euros (200,000 shares * â¬90 per share).\n2. We determine the initial 6-month forward rate by subtracting the 6-month forward bid from the spot bid at initiation.\n3. We use the 3-month spot bid rate for the value after three months.\n4. We calculate the initial USD value and the USD value after three months.\n5. The mark-to-market value is the difference between these two values.\n\nThe result is rounded to two decimal places to represent cents in USD. This value represents the unrealized gain or loss on the forward contract after three months."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_2yr = 0.025\n    spot_rate_4yr = 0.055\n\n    # Do math calculation to get the answer\n    forward_rate = ((1 + spot_rate_4yr)**4 / (1 + spot_rate_2yr)**2)**(1/2) - 1\n\n    # return answer\n    return forward_rate * 100  # Convert to percentage\n```\n\nThis Python program calculates the forward rate for two years starting from two years from now, based on the given spot rates. Here's how it works:\n\n1. We define the relevant spot rates: 2.5% for 2 years and 5.5% for 4 years.\n\n2. We use the formula to calculate the forward rate:\n   (1 + r4)^4 = (1 + r2)^2 * (1 + f2,2)^2\n   Where r4 is the 4-year spot rate, r2 is the 2-year spot rate, and f2,2 is the 2-year forward rate starting in 2 years.\n\n3. We solve this equation for f2,2:\n   f2,2 = ((1 + r4)^4 / (1 + r2)^2)^(1/2) - 1\n\n4. We return the result multiplied by 100 to convert it to a percentage.\n\nThis program will return the forward rate as a percentage."
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000 for the bond\n    coupon_rate = 0.10  # 10% coupon rate\n    spot_rate_1 = 0.08  # 8% spot rate for year 1\n    spot_rate_2 = 0.09  # 9% spot rate for year 2\n    spot_rate_3 = 0.095  # 9.5% spot rate for year 3\n\n    # Do math calculation to get the answer\n    coupon_payment = face_value * coupon_rate\n\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1)\n    pv_coupon_2 = coupon_payment / (1 + spot_rate_2)**2\n    pv_coupon_3 = coupon_payment / (1 + spot_rate_3)**3\n    pv_face_value = face_value / (1 + spot_rate_3)**3\n\n    bond_price = pv_coupon_1 + pv_coupon_2 + pv_coupon_3 + pv_face_value\n\n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of a 3-year bond with a 10% coupon rate, given the spot rates provided in the table. Here's a breakdown of the calculation:\n\n1. We assume a face value of $1000 for the bond.\n2. We calculate the annual coupon payment based on the 10% coupon rate.\n3. We discount each coupon payment using the appropriate spot rate for each year.\n4. We discount the face value of the bond using the 3-year spot rate.\n5. We sum up all these present values to get the bond price.\n\nThe function returns the bond price rounded to two decimal places, which represents the cost of the 3-year bond under the given conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 20\n    fixed_costs = 500000\n    max_units = 300000\n\n    # Do math calculation to get the answer\n    # DOL = (Q * CM) / (Q * CM - FC)\n    # DOL is least when Q is highest (closest to max capacity)\n    \n    # Calculate total contribution margin at max units\n    total_contribution_margin = unit_contribution_margin * max_units\n    \n    # Calculate operating income at max units\n    operating_income = total_contribution_margin - fixed_costs\n    \n    # Calculate DOL at max units\n    dol = total_contribution_margin / operating_income\n    \n    # The answer is the production level where DOL is least\n    answer = max_units\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the production level at which the degree of operating leverage (DOL) is likely to be the least. Here's an explanation of the logic:\n\n1. We define the given variables: unit contribution margin, fixed costs, and the maximum production level.\n\n2. The DOL formula is: DOL = (Q * CM) / (Q * CM - FC), where Q is quantity, CM is contribution margin per unit, and FC is fixed costs.\n\n3. DOL is typically least when production is closest to maximum capacity. This is because as production increases, fixed costs are spread over more units, reducing their impact on operating leverage.\n\n4. Therefore, we calculate the DOL at the maximum production level (300,000 units), which is where it's likely to be the least.\n\n5. The answer returned is the maximum production level, as this is where DOL is likely to be the least.\n\nNote that this assumes a linear cost structure up to 300,000 units. In real-world scenarios, there might be step-costs or other factors that could affect this conclusion, but based on the information provided, this is the most appropriate answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased atÂ $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased atÂ $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    units_2013 = 2000\n    cost_2013 = 50\n    units_sold_2013 = 1500\n    \n    units_2014 = 1000\n    cost_2014 = 60\n    units_sold_2014 = 500\n    \n    # Do math calculation to get the answer\n    remaining_2013 = units_2013 - units_sold_2013\n    remaining_2014 = units_2014 - units_sold_2014\n    \n    ending_inventory_value = (remaining_2013 * cost_2013) + (remaining_2014 * cost_2014)\n    \n    # return answer\n    return ending_inventory_value\n```\n\nThis Python program calculates the ending inventory balance for Corporation Z in 2014 using the FIFO (First-In, First-Out) method. Here's how it works:\n\n1. We define the variables for the number of units purchased, their cost, and units sold for both 2013 and 2014.\n\n2. We calculate the remaining units from 2013 and 2014 by subtracting the units sold from the units purchased.\n\n3. Using the FIFO method, we calculate the ending inventory value by multiplying the remaining units from 2013 by their cost, and the remaining units from 2014 by their cost, then sum these values.\n\n4. The function returns the ending inventory balance.\n\nWhen you run this function, it will return 55,000, which is the ending inventory balance for Corporation Z in 2014. This is because there are 500 units remaining from 2013 (at $50 each) and 500 units remaining from 2014 (at $60 each), so (500 * $50) + (500 * $60) = $25,000 + $30,000 = $55,000."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dirty_price = 104.17\n    days_since_last_coupon = 30\n    days_to_futures_termination = 90\n    quoted_futures_price = 129\n    risk_free_rate = 0.0165\n    conversion_factor = 0.7025\n    coupon_rate = 0.02\n    days_in_year = 365\n    days_in_half_year = 365 / 2\n\n    # Do math calculation to get the answer\n    clean_price = dirty_price - (days_since_last_coupon / days_in_half_year) * (coupon_rate / 2) * 100\n    \n    funding_cost = clean_price * (risk_free_rate * (days_to_futures_termination / days_in_year))\n    \n    accrued_interest_at_delivery = ((days_since_last_coupon + days_to_futures_termination) / days_in_half_year) * (coupon_rate / 2) * 100\n    \n    equilibrium_futures_price = (clean_price + funding_cost + accrued_interest_at_delivery) / conversion_factor\n\n    # return answer\n    return round(equilibrium_futures_price, 2)\n```"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bonds = [\n        {\"par_value\": 25000000, \"price\": 105, \"modified_duration\": 7.9},\n        {\"par_value\": 25000000, \"price\": 100, \"modified_duration\": 8.5},\n        {\"par_value\": 20000000, \"price\": 95, \"modified_duration\": 6.3},\n        {\"par_value\": 30000000, \"price\": 87, \"modified_duration\": 10.2}\n    ]\n    \n    # Do math calculation to get the answer\n    total_pvbp = 0\n    for bond in bonds:\n        market_value = bond[\"par_value\"] * (bond[\"price\"] / 100)\n        pvbp = market_value * bond[\"modified_duration\"] * 0.0001\n        total_pvbp += pvbp\n    \n    # return answer\n    return round(total_pvbp, 2)\n```\n\nThis Python program calculates the Price Value of a Basis Point (PVBP) for the collection of bonds described in the table. Here's how it works:\n\n1. We define a list of dictionaries, each representing a bond with its par value, price, and modified duration.\n\n2. We iterate through each bond in the collection:\n   - Calculate the market value of the bond (par value * price percentage)\n   - Calculate the PVBP for each bond using the formula: Market Value * Modified Duration * 0.0001 (0.01% or 1 basis point)\n   - Add this PVBP to the total\n\n3. Finally, we return the total PVBP rounded to 2 decimal places.\n\nThe PVBP represents the change in the value of the bond collection for a 1 basis point (0.01%) change in yield. This measure is useful for assessing the interest rate risk of the bond portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    current_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    time_to_maturity = 1\n    recovery_rate = 0\n\n    # Do math calculation to get the answer\n    risk_free_discount_factor = face_value * math.exp(-risk_free_rate * time_to_maturity)\n    \n    # Calculate the risk-neutral probability of default\n    prob_default = (risk_free_discount_factor - current_price) / (risk_free_discount_factor - recovery_rate * face_value)\n\n    # Convert to percentage and round to 2 decimal places\n    prob_default_percent = round(prob_default * 100, 2)\n\n    # return answer\n    return prob_default_percent\n\n# Note: You need to import math at the beginning of your script\n# import math\n```\n\nThis program calculates the risk-neutral probability of default using the following steps:\n\n1. Define all the given variables.\n2. Calculate the risk-free discounted value of the bond using the continuous compounding formula.\n3. Use the risk-neutral pricing formula to calculate the probability of default:\n   P(default) = (risk-free discounted value - current price) / (risk-free discounted value - recovery value)\n4. Convert the probability to a percentage and round to two decimal places.\n\nThe program returns the approximate risk-neutral 1-year probability of default for Firm XYZ as a percentage.\n\nNote: Make sure to import the math module at the beginning of your script for the exp() function to work."
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding = 10_000_000\n    earnings_per_share = 2.00\n    pe_ratio = 20\n    book_value_per_share = 30\n    shares_to_buyback = 1_000_000\n\n    # Do math calculation to get the answer\n    market_price = earnings_per_share * pe_ratio\n    total_book_value = book_value_per_share * shares_outstanding\n    buyback_cost = shares_to_buyback * market_price\n    remaining_book_value = total_book_value - buyback_cost\n    remaining_shares = shares_outstanding - shares_to_buyback\n    new_book_value_per_share = remaining_book_value / remaining_shares\n\n    # return answer\n    return round(new_book_value_per_share, 2)\n```\n\nThis Python program calculates the new book value per share after the corporation buys back 1 million shares at the current market rate. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the market price per share using the P/E ratio and earnings per share.\n3. We calculate the total book value of the company.\n4. We calculate the cost of buying back 1 million shares at the market price.\n5. We subtract the buyback cost from the total book value to get the remaining book value.\n6. We calculate the number of remaining shares after the buyback.\n7. Finally, we divide the remaining book value by the remaining shares to get the new book value per share.\n\nThe function returns the new book value per share, rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of Â¥ 5,000,000. He took out a loan for the remaining balance of Â¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    loan_amount = 5000000  # Loan amount in Yuan\n    loan_term_years = 10  # Loan term in years\n    annual_interest_rate = 0.058  # Annual interest rate as a decimal\n\n    # Do math calculation to get the answer\n    monthly_interest_rate = annual_interest_rate / 12\n    number_of_payments = loan_term_years * 12\n\n    # Calculate monthly payment using the mortgage payment formula\n    monthly_payment = loan_amount * (monthly_interest_rate * (1 + monthly_interest_rate)**number_of_payments) / ((1 + monthly_interest_rate)**number_of_payments - 1)\n\n    # Round the result to two decimal places\n    monthly_payment = round(monthly_payment, 2)\n\n    # return answer\n    return monthly_payment\n```\n\nThis Python program calculates the initial monthly mortgage repayment for Mr. Lee based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables for the loan amount, loan term in years, and annual interest rate.\n2. We calculate the monthly interest rate and the total number of payments.\n3. We use the standard mortgage payment formula to calculate the monthly payment.\n4. The result is rounded to two decimal places for currency representation.\n5. The function returns the calculated monthly payment.\n\nWhen you run this function, it will return the initial mortgage repayment amount in Yuan that Mr. Lee will need to pay at the end of the first month."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    three_month_mrr_june = 0.0135  # 1.35%\n    spread = 0.0065  # 65 basis points = 0.65%\n\n    # Do math calculation to get the answer\n    coupon_rate = three_month_mrr_june + spread\n\n    # Convert to percentage and round to 2 decimal places\n    answer = round(coupon_rate * 100, 2)\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the coupon rate for the interest remittance on 30 June based on the given information:\n\n1. We define the three-month MRR for June as 1.35% (0.0135 in decimal form).\n2. We define the spread as 65 basis points, which is 0.65% (0.0065 in decimal form).\n3. We calculate the coupon rate by adding the three-month MRR for June and the spread.\n4. We convert the result to a percentage by multiplying by 100 and round it to 2 decimal places.\n5. Finally, we return the answer.\n\nWhen you run this function, it will return the coupon rate for the interest remittance on 30 June as a percentage with two decimal places."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w1 = 0.30  # weight of security 1\n    w2 = 0.70  # weight of security 2\n    sd1 = 0.20  # standard deviation of security 1\n    sd2 = 0.12  # standard deviation of security 2\n    corr = 0.40  # correlation between securities\n\n    # Do math calculation to get the answer\n    variance = (w1**2 * sd1**2) + (w2**2 * sd2**2) + (2 * w1 * w2 * sd1 * sd2 * corr)\n    portfolio_sd = variance**0.5\n\n    # return answer\n    return portfolio_sd * 100  # Convert to percentage\n```\n\nThis Python program calculates the expected standard deviation of the portfolio based on the given information:\n\n1. We define the variables:\n   - Weights of the securities (w1 and w2)\n   - Standard deviations of the securities (sd1 and sd2)\n   - Correlation between the securities (corr)\n\n2. We use the portfolio variance formula:\n   Variance = (w1^2 * sd1^2) + (w2^2 * sd2^2) + (2 * w1 * w2 * sd1 * sd2 * corr)\n\n3. We take the square root of the variance to get the portfolio standard deviation.\n\n4. Finally, we multiply by 100 to convert the result to a percentage.\n\nThis program will return the expected standard deviation of the portfolio as a percentage."
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nominal_amount = 100000000\n    fixed_rate = 0.03\n    initial_index = 100\n    quarters = 4\n    \n    pv_factors = [0.997506, 0.992556, 0.985222, 0.975610]\n    \n    # Do math calculation to get the answer\n    fixed_payments = nominal_amount * (fixed_rate / 4)\n    \n    pv_fixed_payments = sum([fixed_payments * pv for pv in pv_factors])\n    \n    equity_index = (pv_fixed_payments / nominal_amount) * initial_index\n    \n    # return answer\n    return round(equity_index, 2)\n```\n\nThis Python program calculates the equity index level at which the equity swap would have a value of zero. Here's a breakdown of the calculation:\n\n1. We define the given variables: nominal amount, fixed interest rate, initial equity index, and number of quarters.\n\n2. We use the present value factors provided in the table.\n\n3. We calculate the fixed payment for each quarter.\n\n4. We calculate the present value of all fixed payments by multiplying each payment with its corresponding present value factor and summing them up.\n\n5. To find the equity index level where the swap value is zero, we set the present value of fixed payments equal to the nominal amount multiplied by the ratio of the new equity index to the initial index.\n\n6. We solve for the new equity index and round it to two decimal places.\n\nThe program will return the equity index level at which the swap value would be zero."
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    debt = 10000000\n    market_cap = 45000000\n    cash = 2500000\n    ebitda = 15000000\n    \n    # Do math calculation to get the answer\n    enterprise_value = debt + market_cap - cash\n    ev_ebitda_multiple = enterprise_value / ebitda\n    \n    # return answer\n    return ev_ebitda_multiple\n```\n\nThis Python function calculates the EV/EBITDA multiple based on the given information:\n\n1. We define the variables with the provided values:\n   - Market value of debt: $10 million\n   - Market capitalization: $45 million\n   - Cash and short-term investments: $2.5 million\n   - EBITDA: $15 million\n\n2. We calculate the Enterprise Value (EV) using the formula:\n   EV = Market value of debt + Market capitalization - Cash and short-term investments\n\n3. Then we calculate the EV/EBITDA multiple by dividing the Enterprise Value by EBITDA.\n\n4. Finally, we return the calculated EV/EBITDA multiple.\n\nNote that the function will return the multiple as a decimal number. If you need to round it or format it as a percentage, you can modify the return statement accordingly."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 5000\n    years = 3\n    annual_rate = 0.05\n    compounding_periods = 12  # monthly compounding\n\n    # Do math calculation to get the answer\n    effective_rate = (1 + annual_rate / compounding_periods) ** (compounding_periods * years)\n    present_value = future_value / effective_rate\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value (PV) of $5,000 to be received three years from now, using a 5% discount rate compounded monthly. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `future_value`: The amount to be received in the future ($5,000)\n   - `years`: The number of years until the amount is received (3)\n   - `annual_rate`: The annual discount rate (5% or 0.05)\n   - `compounding_periods`: The number of times the interest is compounded per year (12 for monthly)\n\n2. We calculate the effective rate using the compound interest formula:\n   `effective_rate = (1 + annual_rate / compounding_periods) ** (compounding_periods * years)`\n\n3. We then calculate the present value by dividing the future value by the effective rate:\n   `present_value = future_value / effective_rate`\n\n4. Finally, we return the present value rounded to two decimal places.\n\nThis program will return the present value of the future payment, considering the given discount rate and compounding frequency."
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    spot_rate = 0.7343\n    three_month_forward_points = (14.0 + 15.0) / 2 / 10000  # average of bid/offer, converted to decimal\n    three_month_forward_rate = spot_rate + three_month_forward_points\n    \n    # Do math calculation to get the answer\n    gbp_value_at_contract_rate = eur_amount * contract_rate\n    gbp_value_at_forward_rate = eur_amount * three_month_forward_rate\n    \n    mark_to_market_gain = gbp_value_at_contract_rate - gbp_value_at_forward_rate\n    \n    # return answer\n    return mark_to_market_gain\n\n```\n\nThis Python function calculates the mark-to-market gain for Susan Sullivan's forward position. Here's a breakdown of the calculation:\n\n1. We define the contract rate (0.7400), the EUR amount (5,000,000), and the current spot rate (0.7343) from Exhibit 1.\n\n2. We calculate the three-month forward rate by adding the average of the three-month forward points to the spot rate. The forward points are converted from basis points to a decimal.\n\n3. We calculate the GBP value at the contract rate and at the current three-month forward rate.\n\n4. The mark-to-market gain is the difference between these two values. A positive result indicates a gain, while a negative result would indicate a loss.\n\n5. The function returns this mark-to-market gain in GBP.\n\nNote that this calculation assumes that a higher GBP/EUR rate is unfavorable for the company (as they are receiving EUR and converting to GBP), which is why we subtract the forward rate value from the contract rate value to calculate the gain."
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "def solution():\n    # Define variables name and value\n    ffo = 290612  # Funds from operations for REIT B\n    non_cash_rents = 24702\n    recurring_capex = 60852\n    shares_outstanding = 67900\n    p_affo_multiple = 17.1  # Property subsector average P/AFFO multiple for REIT B\n\n    # Do math calculation to get the answer\n    affo = ffo - non_cash_rents - recurring_capex\n    affo_per_share = affo / shares_outstanding\n    share_value = affo_per_share * p_affo_multiple\n\n    # return answer\n    return round(share_value, 2)\n\n```\n\nThis Python program calculates the share value of REIT B using valuation Method 4, which is based on the Adjusted Funds from Operations (AFFO) and the property subsector average P/AFFO multiple.\n\nHere's a breakdown of the calculation:\n\n1. We start with the Funds from Operations (FFO) for REIT B.\n2. We subtract non-cash rents and recurring maintenance-type capital expenditures to get the Adjusted Funds from Operations (AFFO).\n3. We divide AFFO by the number of shares outstanding to get AFFO per share.\n4. We multiply AFFO per share by the property subsector average P/AFFO multiple to get the share value.\n\nThe result is rounded to two decimal places to represent a reasonable dollar value per share."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth Â£300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm Bâs return on equity be using year-end equity with the ending shareholdersâ equity being Â£10,000,000, a tax rate of 25%, Â£0.00 in dividends, and a net income of Â£750,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ending_equity_A = 10000000\n    tax_rate = 0.25\n    dividends = 0\n    net_income_A = 750000\n    printer_cost = 300000\n    useful_life = 3\n\n    # Do math calculation to get the answer\n    annual_depreciation = printer_cost / useful_life\n    tax_shield = annual_depreciation * tax_rate\n    net_income_B = net_income_A - tax_shield\n\n    # Calculate beginning equity for Firm B\n    beginning_equity_B = ending_equity_A - net_income_A + printer_cost\n\n    # Calculate ROE for Firm B\n    roe_B = net_income_B / beginning_equity_B\n\n    # return answer\n    return roe_B * 100  # Convert to percentage\n```\n\nThis Python program calculates the return on equity (ROE) for Firm B based on the given information. Here's a breakdown of the calculation:\n\n1. We define the known variables, including the ending equity for Firm A, tax rate, dividends, net income for Firm A, printer cost, and useful life.\n\n2. We calculate the annual depreciation and the tax shield that Firm A benefits from but Firm B doesn't.\n\n3. We adjust Firm B's net income by subtracting the tax shield.\n\n4. We calculate the beginning equity for Firm B by taking Firm A's ending equity, subtracting Firm A's net income, and adding back the printer cost (since Firm B expensed it).\n\n5. We calculate the ROE for Firm B by dividing its net income by its beginning equity.\n\n6. Finally, we return the ROE as a percentage.\n\nThis program will return Firm B's return on equity as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 85  # Current stock price\n    K = 90  # Strike price\n    r = 0.05  # Risk-free interest rate\n    c = 10  # Call option price\n    p = 15  # Put option price\n    T = 5  # Time to expiration in years\n\n    # Do math calculation to get the answer\n    from math import exp, log\n\n    # Using put-call parity for European options with continuous dividend yield\n    # c + K * exp(-r*T) = p + S * exp(-q*T)\n    # Solving for q (dividend yield)\n    q = (1/T) * log((p + S) / (c + K * exp(-r*T)))\n\n    # return answer\n    return q\n```\n\nThis Python program calculates the implied continuous dividend yield (q) using the put-call parity formula for European options. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We import the necessary math functions (exp and log).\n3. We use the put-call parity formula: c + K * exp(-r*T) = p + S * exp(-q*T)\n4. We solve this equation for q, which gives us:\n   q = (1/T) * log((p + S) / (c + K * exp(-r*T)))\n5. We calculate q using this formula and return it as the answer.\n\nThe returned value will be the implied continuous dividend yield of the stock."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spread_change = -0.01  # 100 basis points tighter = -1% = -0.01\n    duration = 6.0\n    convexity = 55.0\n\n    # Do math calculation to get the answer\n    price_change_duration = -duration * spread_change\n    price_change_convexity = 0.5 * convexity * (spread_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n\n    # Convert price change to return (as a percentage)\n    return_effect = total_price_change * 100\n\n    # return answer\n    return return_effect\n```\n\nThis Python program calculates the effect on the return of the Novartis bond given the changes in spread, duration, and convexity. Here's a breakdown of the calculation:\n\n1. We define the spread change as -0.01 (100 basis points = 1% = 0.01, and it's tighter, so it's negative).\n2. We use the given duration of 6.0 and convexity of 55.0.\n3. We calculate the price change due to duration: -duration * spread_change\n4. We calculate the price change due to convexity: 0.5 * convexity * (spread_change^2)\n5. We sum these to get the total price change.\n6. Finally, we convert the price change to a percentage return by multiplying by 100.\n\nThe returned value represents the effect on the return as a percentage. A positive number indicates an increase in the bond's value, while a negative number would indicate a decrease."
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of 1000 for the bond\n    coupon_rate = 0.05\n    years_to_maturity = 3\n    spot_rates = [0.0486, 0.0495, 0.0565]\n    z_spread = 0.0234  # 234 basis points = 2.34%\n\n    # Do math calculation to get the answer\n    bond_value = 0\n    for t in range(1, years_to_maturity + 1):\n        coupon_payment = face_value * coupon_rate\n        discount_rate = spot_rates[t-1] + z_spread\n        present_value = coupon_payment / (1 + discount_rate) ** t\n        bond_value += present_value\n\n    # Add the present value of the face value at maturity\n    bond_value += face_value / (1 + (spot_rates[-1] + z_spread)) ** years_to_maturity\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of the bond based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables including the face value (assumed to be 1000), coupon rate, years to maturity, spot rates from the table, and the Z-spread.\n\n2. We calculate the present value of each coupon payment using the corresponding spot rate plus the Z-spread as the discount rate.\n\n3. We add the present value of the face value at maturity, discounted using the 3-year spot rate plus the Z-spread.\n\n4. The bond value is the sum of all these present values.\n\n5. We round the result to two decimal places for currency representation.\n\nThis program will return the bond's worth considering the given spot rates and Z-spread."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.65\n    risk_free_rate = 0.03\n    market_return = 0.09\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```\n\nThis Python function calculates the expected return for XYZ Company using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the calculation:\n\n1. We define the given variables:\n   - `beta` is 0.65\n   - `risk_free_rate` is 3% (0.03 in decimal form)\n   - `market_return` is 9% (0.09 in decimal form)\n\n2. We use the CAPM formula to calculate the expected return:\n   Expected Return = Risk-free rate + Beta * (Market Return - Risk-free rate)\n\n3. The function returns the calculated expected return.\n\nWhen you run this function, it will return the expected return for XYZ Company based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mod_duration = 10.3829\n    mod_convexity = 141.217\n    yield_change = -0.005  # 50 bps decrease = -0.50% = -0.005\n\n    # Do math calculation to get the answer\n    price_change_duration = -mod_duration * yield_change\n    price_change_convexity = 0.5 * mod_convexity * (yield_change ** 2)\n    total_price_change = price_change_duration + price_change_convexity\n\n    # Convert to percentage\n    percentage_price_change = total_price_change * 100\n\n    # return answer\n    return percentage_price_change\n```\n\nThis Python program calculates the projected percentage price alteration for the bond given the modified duration, modified convexity, and the change in yield to maturity.\n\nHere's a breakdown of the calculation:\n\n1. We use the modified duration to calculate the first-order price change:\n   price_change_duration = -mod_duration * yield_change\n\n2. We use the modified convexity to calculate the second-order price change:\n   price_change_convexity = 0.5 * mod_convexity * (yield_change ** 2)\n\n3. We sum these two components to get the total price change:\n   total_price_change = price_change_duration + price_change_convexity\n\n4. Finally, we convert the decimal to a percentage by multiplying by 100.\n\nThe program returns the percentage price change. A positive number indicates an increase in price, while a negative number would indicate a decrease."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_shares = 1200000\n    stock_beta = 2.2\n    current_bonds = 10000000\n    risk_free_rate = 0.03\n    market_return = 0.10\n    tax_rate = 0.30\n    new_funding = 7500000\n    new_stock_price = 10\n    \n    # Do math calculation to get the answer\n    \n    # Calculate cost of equity using CAPM\n    cost_of_equity = risk_free_rate + stock_beta * (market_return - risk_free_rate)\n    \n    # Calculate current market value of equity\n    current_equity = current_shares * new_stock_price\n    \n    # Calculate new equity and debt to maintain debt-to-equity ratio\n    current_debt_equity_ratio = current_bonds / current_equity\n    new_equity = new_funding / (1 + current_debt_equity_ratio)\n    new_debt = new_funding - new_equity\n    \n    # Calculate cost of debt\n    if new_debt <= 2500000:\n        cost_of_debt = 0.1365\n    else:\n        cost_of_debt = 0.16\n    \n    after_tax_cost_of_debt = cost_of_debt * (1 - tax_rate)\n    \n    # Calculate weights for WACC\n    total_value = current_equity + new_equity + current_bonds + new_debt\n    weight_equity = (current_equity + new_equity) / total_value\n    weight_debt = (current_bonds + new_debt) / total_value\n    \n    # Calculate WACC\n    wacc = (weight_equity * cost_of_equity) + (weight_debt * after_tax_cost_of_debt)\n    \n    # return answer\n    return wacc\n\n```"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # Assuming a face value of $1000, which is standard\n    coupon_rate = 0.08\n    coupon_payment = face_value * coupon_rate\n    spot_rate_1 = 0.07\n    spot_rate_2 = 0.08\n    spot_rate_3 = 0.09\n    \n    # Do math calculation to get the answer\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1)**1\n    pv_coupon_2 = coupon_payment / (1 + spot_rate_2)**2\n    pv_coupon_3 = (coupon_payment + face_value) / (1 + spot_rate_3)**3\n    \n    bond_price = pv_coupon_1 + pv_coupon_2 + pv_coupon_3\n    \n    # return answer\n    return round(bond_price, 2)\n```\n\nThis Python program calculates the price of Bond D using the spot rates provided in the table. Here's a breakdown of the calculation:\n\n1. We assume a face value of $1000, which is standard for bonds.\n2. The coupon rate is 8% (0.08), so the annual coupon payment is $80.\n3. We use the spot rates given in the table for discounting:\n   - 7% for year 1\n   - 8% for year 2\n   - 9% for year 3\n4. We calculate the present value of each cash flow:\n   - Year 1 coupon payment\n   - Year 2 coupon payment\n   - Year 3 coupon payment plus face value\n5. We sum these present values to get the bond price.\n6. The result is rounded to two decimal places to represent dollars and cents.\n\nThis program will return the price of Bond D using the given spot rates."
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent Â¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwaterâs consolidated depreciation and amortization expense for 2019?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    clearwater_depreciation = 106\n    snowflake_depreciation = 85\n    acquisition_cost = 360\n    snowflake_equity = 565\n    license_amortization_period = 5\n\n    # Do math calculation to get the answer\n    \n    # Calculate the value of unregistered licenses\n    snowflake_net_assets = snowflake_equity / 2  # 50% stake\n    license_value = acquisition_cost - snowflake_net_assets\n    \n    # Calculate annual amortization of licenses\n    annual_license_amortization = license_value / license_amortization_period\n    \n    # Calculate consolidated depreciation and amortization\n    consolidated_depreciation = clearwater_depreciation + (snowflake_depreciation / 2) + annual_license_amortization\n\n    # return answer\n    return consolidated_depreciation\n\n# Test the function\nprint(solution())\n```\n\nThis Python program calculates Clearwater's consolidated depreciation and amortization expense for 2019 based on the given information. Here's a breakdown of the calculation:\n\n1. We define the known values from the problem statement and financial tables.\n2. We calculate the value of unregistered licenses by subtracting 50% of Snowflake's equity (as Clearwater acquired a 50% stake) from the acquisition cost.\n3. We calculate the annual amortization of licenses by dividing the license value by the 5-year economic lifespan.\n4. We calculate the consolidated depreciation and amortization by adding:\n   - Clearwater's full depreciation\n   - 50% of Snowflake's depreciation (as Clearwater owns 50%)\n   - The annual amortization of licenses\n\nThe function returns this consolidated value, which represents Clearwater's consolidated depreciation and amortization expense for 2019."
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    shift_10_year = 87.1454\n\n    # Do math calculation to get the answer\n    key_rate_01 = (shift_10_year - initial_value) / 0.0001\n\n    # return answer\n    return key_rate_01\n```\n\nThis Python program calculates the key rate '01 for a 10-year shift based on the given information. Here's how it works:\n\n1. We define two variables:\n   - `initial_value`: The initial value of the bond (87.1876)\n   - `shift_10_year`: The value after a 10-year shift for 1 basis point (87.1454)\n\n2. We calculate the key rate '01 using the formula:\n   (Value after shift - Initial value) / 0.0001\n\n   The 0.0001 represents 1 basis point (1bp = 0.01%)\n\n3. The calculated key rate '01 is then returned as the answer.\n\nThis program will return the key rate '01 for a 10-year shift, which represents the sensitivity of the bond's price to a 1 basis point change in the 10-year spot rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.14300000000000002,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # Probability of bankruptcy\n    P_B = 0.70  # Probability of \"good\" rating\n    P_B_given_A = 0.50  # Probability of \"good\" rating given bankruptcy\n    \n    # Do math calculation to get the answer\n    # Using Bayes' formula: P(A|B) = P(B|A) * P(A) / P(B)\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n    \n    # return answer\n    return P_A_given_B\n```\n\nThis Python program implements Bayes' formula to calculate the likelihood of a bond going bankrupt given that it has a \"good\" rating. Here's a breakdown of the variables:\n\n- `P_A`: The probability of bankruptcy (20% or 0.20)\n- `P_B`: The probability of a \"good\" rating (70% or 0.70)\n- `P_B_given_A`: The probability of a \"good\" rating given bankruptcy (50% or 0.50)\n\nThe program then uses Bayes' formula to calculate `P_A_given_B`, which is the probability of bankruptcy given a \"good\" rating. This is the answer we're looking for.\n\nThe formula used is:\nP(A|B) = P(B|A) * P(A) / P(B)\n\nWhere:\n- P(A|B) is the probability of bankruptcy given a \"good\" rating\n- P(B|A) is the probability of a \"good\" rating given bankruptcy\n- P(A) is the probability of bankruptcy\n- P(B) is the probability of a \"good\" rating\n\nThe function will return this calculated probability as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs Â£100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 100000  # Â£100,000 needed a year from now\n    annual_rate = 0.025  # 2.50% yearly rate\n    compounding_periods = 52  # weekly compounding\n    time = 1  # 1 year\n\n    # Do math calculation to get the answer\n    effective_rate = (1 + annual_rate / compounding_periods) ** compounding_periods - 1\n    present_value = future_value / (1 + effective_rate) ** time\n\n    # return answer\n    return round(present_value, 2)\n```\n\nThis Python program calculates the present value (amount to be deposited today) given the future value, interest rate, compounding frequency, and time period. Here's a breakdown of the calculation:\n\n1. We first calculate the effective annual rate using the formula: (1 + r/n)^n - 1, where r is the annual rate and n is the number of compounding periods per year.\n\n2. Then we use the present value formula: PV = FV / (1 + r)^t, where FV is the future value, r is the effective rate, and t is the time in years.\n\n3. The result is rounded to 2 decimal places to represent currency accurately.\n\nThis program will return the amount that should be deposited today to reach Â£100,000 in one year with the given interest rate and compounding frequency."
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    core_eps_2017 = 1.31\n    acquisition_charges_2017 = 0.18\n    lawsuit_settlement_2017 = 0.10\n    stock_price = 30  # Given in the question that Zhang believes the stock is fairly valued at $30\n\n    # Do math calculation to get the answer\n    recurring_eps = core_eps_2017 - lawsuit_settlement_2017\n    trailing_pe = stock_price / recurring_eps\n\n    # return answer\n    return round(trailing_pe, 2)\n```\n\nThis Python program calculates the trailing P/E ratio based on Zhang's beliefs about recurring costs. Here's the explanation:\n\n1. We use the Core EPS for 2017 ($1.31) as our starting point.\n2. We subtract the lawsuit settlement ($0.10) from Core EPS, as this is likely a non-recurring item.\n3. We don't subtract the acquisition charges ($0.18) because these are already excluded in the Core EPS calculation.\n4. We use the $30 stock price that Zhang believes is fair value.\n5. We calculate the P/E ratio by dividing the stock price by the recurring EPS.\n6. The result is rounded to two decimal places for clarity.\n\nThis approach aligns with Zhang's likely view of recurring costs, focusing on the Core EPS but also excluding the one-time lawsuit settlement."
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_income_2017 = 875\n    depreciation_2017 = 400\n    gross_fixed_assets_2018 = 5000\n    gross_fixed_assets_2017 = 4250\n    accounts_receivable_2018 = 800\n    accounts_receivable_2017 = 750\n    inventories_2018 = 850\n    inventories_2017 = 720\n    accounts_payable_2018 = 400\n    accounts_payable_2017 = 300\n    accrued_taxes_expenses_2018 = 120\n    accrued_taxes_expenses_2017 = 90\n    notes_payable_2018 = 550\n    notes_payable_2017 = 500\n    long_term_debt_2018 = 1500\n    long_term_debt_2017 = 1400\n\n    # Do math calculation to get the answer\n    capital_expenditure = gross_fixed_assets_2018 - gross_fixed_assets_2017\n    change_in_working_capital = (accounts_receivable_2018 - accounts_receivable_2017 +\n                                 inventories_2018 - inventories_2017 -\n                                 accounts_payable_2018 + accounts_payable_2017 -\n                                 accrued_taxes_expenses_2018 + accrued_taxes_expenses_2017)\n    net_borrowing = (notes_payable_2018 - notes_payable_2017 +\n                     long_term_debt_2018 - long_term_debt_2017)\n\n    fcfe = net_income_2017 + depreciation_2017 - capital_expenditure - change_in_working_capital + net_borrowing\n\n    # return answer\n    return fcfe\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "Here's the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    human_capital = 1200000\n    financial_capital = 600000\n    total_portfolio = human_capital + financial_capital\n    desired_stock_allocation = 0.30\n    human_capital_stock_similarity = 0.25\n\n    # Do math calculation to get the answer\n    human_capital_stock_equivalent = human_capital * human_capital_stock_similarity\n    total_desired_stock_allocation = total_portfolio * desired_stock_allocation\n    financial_capital_stock_allocation = total_desired_stock_allocation - human_capital_stock_equivalent\n    financial_capital_stock_allocation_percentage = financial_capital_stock_allocation / financial_capital\n\n    # return answer\n    return financial_capital_stock_allocation_percentage\n```\n\nThis program calculates the appropriate equity allocation for Peter's financial capital based on the given information. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the stock equivalent of human capital by multiplying it with its similarity to stocks.\n3. We calculate the total desired stock allocation for the entire portfolio.\n4. We subtract the human capital stock equivalent from the total desired stock allocation to get the required stock allocation for financial capital.\n5. Finally, we calculate the percentage of financial capital that should be allocated to stocks by dividing the financial capital stock allocation by the total financial capital.\n\nThe function will return this percentage as a decimal (e.g., 0.40 for 40%)."
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    change_in_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    pre_tax_income_increase = change_in_reserve\n    after_tax_income_increase = pre_tax_income_increase * (1 - tax_rate)\n\n    # return answer\n    return round(after_tax_income_increase)\n```\n\nThis program calculates the increase in net income if the company switches from LIFO to FIFO. Here's the explanation:\n\n1. We define the LIFO reserves for 2014 and 2013, as well as the tax rate.\n\n2. The change in LIFO reserve (increase in this case) represents the difference between the cost of inventory under LIFO and FIFO. This is the amount by which pre-tax income would increase if the company switched to FIFO.\n\n3. We calculate the after-tax increase in income by applying the tax rate to the pre-tax increase.\n\n4. The result is rounded to the nearest thousand (as the original figures are in thousands) and returned.\n\nThis program will return the increase in net income for 2014 in thousands of dollars if the company switches from LIFO to FIFO."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "Here's a Python program to calculate the 1-year implied forward rate two years in the future based on the given spot rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1y = 0.0102  # 1-year spot rate\n    spot_rate_2y = 0.0165  # 2-year spot rate\n    spot_rate_3y = 0.0215  # 3-year spot rate\n\n    # Do math calculation to get the answer\n    # Formula: (1 + r3)^3 = (1 + r2)^2 * (1 + f2,3)\n    # Where r3 is 3-year spot rate, r2 is 2-year spot rate, and f2,3 is the 1-year forward rate 2 years from now\n    forward_rate = ((1 + spot_rate_3y)**3 / (1 + spot_rate_2y)**2) - 1\n\n    # Convert to percentage\n    forward_rate_percentage = forward_rate * 100\n\n    # return answer\n    return round(forward_rate_percentage, 2)\n```\n\nThis program calculates the 1-year implied forward rate two years in the future using the following steps:\n\n1. We define the given spot rates as variables.\n2. We use the formula: (1 + r3)^3 = (1 + r2)^2 * (1 + f2,3) to solve for f2,3, which is the forward rate we're looking for.\n3. We rearrange the formula to isolate f2,3: f2,3 = ((1 + r3)^3 / (1 + r2)^2) - 1\n4. We calculate this value and convert it to a percentage.\n5. We round the result to two decimal places and return it.\n\nThe returned value represents the 1-year implied forward rate two years in the future as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "Here's the Python program to calculate the value of the put option based on the given information using the Black-Scholes-Merton (BSM) model:\n\n```python\ndef solution():\n    # Define variables name and value\n    S = 48.6  # Current stock price\n    X = 45    # Strike price\n    r = 0.003 # Continuously compounded risk-free rate (0.3%)\n    T = 0.25  # Time to expiration in years\n    N_d1 = 0.6352  # N(d1) value\n    N_d2 = 0.5486  # N(d2) value\n\n    # Do math calculation to get the answer\n    # Put option value = X * e^(-rT) * N(-d2) - S * N(-d1)\n    put_value = X * math.exp(-r * T) * (1 - N_d2) - S * (1 - N_d1)\n\n    # return answer\n    return round(put_value, 4)\n```\n\nThis program calculates the value of the put option using the Black-Scholes-Merton formula for put options:\n\nP = X * e^(-rT) * N(-d2) - S * N(-d1)\n\nWhere:\n- P is the put option value\n- X is the strike price\n- S is the current stock price\n- r is the risk-free rate\n- T is the time to expiration\n- N(-d1) and N(-d2) are the cumulative standard normal distribution functions\n\nWe use 1 - N(d1) and 1 - N(d2) to get N(-d1) and N(-d2) respectively, as N(-x) = 1 - N(x) for the standard normal distribution.\n\nThe result is rounded to 4 decimal places for precision. This program will return the calculated value of the put option based on the given parameters."
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    n = len(measurements)\n\n    # Do math calculation to get the answer\n    mean = sum(measurements) / n\n    squared_diff_sum = sum((x - mean) ** 2 for x in measurements)\n    variance = squared_diff_sum / (n - 1)\n    standard_deviation = variance ** 0.5\n\n    # return answer\n    return round(standard_deviation, 2)\n```\n\nThis Python program calculates the sample standard deviation of the given measurements. Here's a breakdown of the steps:\n\n1. We define the list of measurements and calculate the number of measurements (n).\n\n2. We calculate the mean of the measurements.\n\n3. We calculate the sum of squared differences from the mean.\n\n4. We calculate the variance by dividing the sum of squared differences by (n-1). We use (n-1) instead of n because this is the sample standard deviation, not the population standard deviation.\n\n5. We calculate the standard deviation by taking the square root of the variance.\n\n6. Finally, we return the standard deviation rounded to 2 decimal places.\n\nThis program will return the sample standard deviation of the given measurements, which answers the question."
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009000000000000001,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stocks = [\n        {\"weight\": 30, \"benchmark\": 24, \"return\": 14},\n        {\"weight\": 30, \"benchmark\": 20, \"return\": 15},\n        {\"weight\": 20, \"benchmark\": 20, \"return\": 12},\n        {\"weight\": 10, \"benchmark\": 18, \"return\": 8},\n        {\"weight\": 10, \"benchmark\": 18, \"return\": 10}\n    ]\n\n    # Do math calculation to get the answer\n    portfolio_return = sum(stock[\"weight\"] * stock[\"return\"] for stock in stocks) / 100\n    benchmark_return = sum(stock[\"benchmark\"] * stock[\"return\"] for stock in stocks) / 100\n    \n    active_return = portfolio_return - benchmark_return\n\n    # return answer\n    return round(active_return, 2)\n```\n\nThis Python program calculates the value added (active return) for the Kurok Fund based on the given data. Here's a breakdown of what the program does:\n\n1. It defines a list of dictionaries, where each dictionary represents a stock with its portfolio weight, benchmark weight, and 2016 return.\n\n2. It calculates the portfolio return by summing the product of each stock's weight and return, then dividing by 100 (since weights are given as percentages).\n\n3. It calculates the benchmark return in a similar way, using the benchmark weights instead of portfolio weights.\n\n4. The active return is calculated as the difference between the portfolio return and the benchmark return.\n\n5. Finally, it returns the active return rounded to two decimal places.\n\nThis program will give you the value added (active return) for the Kurok Fund based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pool_1 = {'amount': 1000000, 'maturity': 30}\n    pool_2 = {'amount': 2000000, 'maturity': 90}\n    pool_3 = {'amount': 3000000, 'maturity': 180}\n    pool_4 = {'amount': 4000000, 'maturity': 360}\n    total_amount = pool_1['amount'] + pool_2['amount'] + pool_3['amount'] + pool_4['amount']\n\n    # Do math calculation to get the answer\n    weighted_sum = (pool_1['amount'] * pool_1['maturity'] +\n                    pool_2['amount'] * pool_2['maturity'] +\n                    pool_3['amount'] * pool_3['maturity'] +\n                    pool_4['amount'] * pool_4['maturity'])\n    \n    wam = weighted_sum / total_amount\n\n    # return answer\n    return wam\n```\n\nThis Python program calculates the Weighted Average Maturity (WAM) for the given Mortgage-Backed Security (MBS). Here's how it works:\n\n1. We define dictionaries for each mortgage pool, containing the amount and maturity in days.\n2. We calculate the total amount of all pools.\n3. We calculate the weighted sum by multiplying each pool's amount by its maturity and summing these products.\n4. We divide the weighted sum by the total amount to get the WAM.\n5. The function returns the WAM in days.\n\nWhen you run this function, it will return the WAM for the MBS, which represents the average time until the mortgages in the security mature, weighted by the dollar amount of each pool."
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |Â£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |â¬0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "Here's the Python program to calculate the Paasche index for the consumption basket in December:\n\n```python\ndef solution():\n    # Define variables name and value\n    sugar_quantity_nov = 70\n    sugar_price_nov = 0.90\n    sugar_quantity_dec = 120\n    sugar_price_dec = 1.00\n\n    cotton_quantity_nov = 60\n    cotton_price_nov = 0.60\n    cotton_quantity_dec = 50\n    cotton_price_dec = 0.80\n\n    # Do math calculation to get the answer\n    current_period_value = (sugar_quantity_dec * sugar_price_dec) + (cotton_quantity_dec * cotton_price_dec)\n    base_period_prices_current_quantities = (sugar_quantity_dec * sugar_price_nov) + (cotton_quantity_dec * cotton_price_nov)\n\n    paasche_index = (current_period_value / base_period_prices_current_quantities) * 100\n\n    # return answer\n    return round(paasche_index, 2)\n```\n\nThis program calculates the Paasche price index for December, using November as the base period. The Paasche index formula is:\n\n(Î£(p1 * q1) / Î£(p0 * q1)) * 100\n\nWhere:\np1 = prices in the current period (December)\nq1 = quantities in the current period (December)\np0 = prices in the base period (November)\n\nThe program does the following:\n\n1. Defines variables for quantities and prices of sugar and cotton for both November and December.\n2. Calculates the current period value (December prices * December quantities).\n3. Calculates the value using base period prices with current period quantities.\n4. Computes the Paasche index by dividing the current period value by the base period prices with current quantities, then multiplying by 100.\n5. Returns the rounded result to two decimal places.\n\nThis will give you the Paasche index for the consumption basket in December, with November as the base period."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    year1_return = 0.09\n    year2_return = 0.05\n    year3_return = 0.08\n    embedded_gain = 0.10\n    capital_gains_tax_rate = 0.25\n    \n    # Do math calculation to get the answer\n    \n    # Calculate cumulative return before liquidation\n    cumulative_return = (1 + year1_return) * (1 + year2_return) * (1 + year3_return) - 1\n    \n    # Calculate tax on embedded gains\n    tax_on_embedded_gains = embedded_gain * capital_gains_tax_rate\n    \n    # Calculate post-liquidation return\n    post_liquidation_return = cumulative_return - tax_on_embedded_gains\n    \n    # Calculate annualized post-liquidation return\n    annualized_return = (1 + post_liquidation_return) ** (1/3) - 1\n    \n    # Convert to percentage\n    answer = annualized_return * 100\n    \n    # return answer rounded to 2 decimal places\n    return round(answer, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_price = 50\n    risk_free_rate = 0.04\n    time_to_maturity = 3 / 12  # 3 months expressed in years\n    value_of_advantages = 5\n    value_of_disadvantages = 6\n\n    # Do math calculation to get the answer\n    forward_price = spot_price * (1 + risk_free_rate * time_to_maturity) - value_of_advantages + value_of_disadvantages\n\n    # return answer\n    return round(forward_price, 2)\n```\n\nThis Python program calculates the forward price based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given variables.\n2. The forward price is calculated using the formula:\n   Forward Price = Spot Price * (1 + Risk-Free Rate * Time to Maturity) - Value of Advantages + Value of Disadvantages\n3. The time to maturity is converted from 3 months to 0.25 years.\n4. The result is rounded to 2 decimal places for better readability.\n\nWhen you run this function, it will return the calculated forward price."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cny_to_hkd = 1.1757\n    aud_to_cny = 5.0765\n    \n    # Do math calculation to get the answer\n    hkd_to_cny = 1 / cny_to_hkd\n    hkd_to_aud = hkd_to_cny / aud_to_cny\n    \n    # return answer\n    return hkd_to_aud\n```\n\nThis Python program calculates the cross rate for the Hong Kong Dollar to the Australian Dollar based on the given exchange rates. Here's how it works:\n\n1. We define two variables:\n   - `cny_to_hkd`: The value of Chinese Yuan in terms of Hong Kong Dollar (1.1757)\n   - `aud_to_cny`: The value of Australian Dollar in terms of Chinese Yuan (5.0765)\n\n2. We perform the calculations:\n   - First, we calculate the inverse of `cny_to_hkd` to get the HKD to CNY rate.\n   - Then, we divide this by `aud_to_cny` to get the HKD to AUD rate.\n\n3. Finally, we return the calculated cross rate.\n\nWhen you run this function, it will return the cross rate for the Hong Kong Dollar to the Australian Dollar."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ytm = 0.055  # Yield to Maturity (YTM) of 5.5%\n    payout = 100000  # Annual payout of $100,000\n    years = 40  # Duration of 40 years\n\n    # Do math calculation to get the answer\n    # Using the present value of annuity formula:\n    # PV = PMT * (1 - (1 + r)^-n) / r\n    # Where PV is present value (cost), PMT is payout, r is interest rate, n is number of periods\n    cost = payout * (1 - (1 + ytm)**-years) / ytm\n\n    # return answer\n    return round(cost, 2)  # Rounding to 2 decimal places for currency\n```\n\nThis Python program calculates the cost of an annuity based on the given parameters:\n- A Yield to Maturity (YTM) of 5.5%\n- An annual payout of $100,000\n- A duration of 40 years\n\nThe program uses the present value of annuity formula to calculate the cost. The result is rounded to two decimal places to represent currency accurately. When you run this function, it will return the cost of the annuity that meets the specified criteria."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w1 = 0.40  # weight of security 1\n    w2 = 0.60  # weight of security 2\n    sd1 = 0.30  # standard deviation of security 1\n    sd2 = 0.15  # standard deviation of security 2\n    correlation = 0.25\n\n    # Do math calculation to get the answer\n    variance = (w1**2 * sd1**2) + (w2**2 * sd2**2) + (2 * w1 * w2 * sd1 * sd2 * correlation)\n    portfolio_sd = variance**0.5\n\n    # return answer\n    return portfolio_sd * 100  # Convert to percentage\n```\n\nThis Python program calculates the anticipated standard deviation for the given portfolio:\n\n1. We define the variables based on the provided information:\n   - Weights of the securities (w1 and w2)\n   - Standard deviations of the securities (sd1 and sd2)\n   - Correlation between the securities\n\n2. We use the portfolio standard deviation formula:\n   Ïp = sqrt(w1^2 * Ï1^2 + w2^2 * Ï2^2 + 2 * w1 * w2 * Ï1 * Ï2 * Ï12)\n   Where:\n   - Ïp is the portfolio standard deviation\n   - w1 and w2 are the weights of the securities\n   - Ï1 and Ï2 are the standard deviations of the securities\n   - Ï12 is the correlation between the securities\n\n3. We calculate the variance first, then take its square root to get the standard deviation.\n\n4. Finally, we return the result as a percentage by multiplying by 100.\n\nThis program will return the anticipated standard deviation of the portfolio as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    selling_price = 1000\n    creation_cost = 300\n    \n    # Do math calculation to get the answer\n    value_added = selling_price - creation_cost\n    \n    # return answer\n    return value_added\n```\n\nThis program calculates the value added in the final step of creating the artwork, which is the difference between the selling price and the creation cost. This represents the value added by the artist in the final step of the production process, which is what we're looking for when using the sum-of-value-added approach to calculate GDP."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 0.1431\n    compounds_per_year = 4\n\n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + yearly_rate / compounds_per_year) ** compounds_per_year - 1\n\n    # return answer\n    return effective_annual_rate\n```\n\nThis Python program calculates the effective annual rate given a yearly rate of 14.31% compounded quarterly. Here's how it works:\n\n1. We define the yearly rate as 0.1431 (14.31%) and the number of times it's compounded per year as 4 (quarterly).\n\n2. We then use the formula for calculating the effective annual rate:\n   EAR = (1 + r/n)^n - 1\n   Where:\n   - EAR is the Effective Annual Rate\n   - r is the stated annual rate (in decimal form)\n   - n is the number of times the interest is compounded per year\n\n3. The function returns the calculated effective annual rate.\n\nWhen you run this function, it will return the effective annual rate as a decimal. To convert it to a percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the GrinoldâKroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "Here's the Python program to calculate the anticipated annual equity return using the GrinoldâKroner model based on the provided data:\n\n```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.023\n    expected_income_return = 0.024\n    expected_real_earnings_growth = 0.050\n    current_pe = 14.5\n    expected_pe = 14.0\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the percentage change in P/E\n    pe_change = (expected_pe - current_pe) / current_pe\n    \n    # Apply the Grinold-Kroner model\n    expected_return = (\n        expected_income_return +\n        expected_real_earnings_growth +\n        expected_inflation +\n        pe_change\n    )\n    \n    # Convert to percentage and round to 2 decimal places\n    expected_return_percentage = round(expected_return * 100, 2)\n    \n    # return answer\n    return expected_return_percentage\n```\n\nThis program calculates the expected annual equity return using the GrinoldâKroner model, which is composed of four components:\n\n1. Expected income return (dividend yield)\n2. Expected real earnings growth\n3. Expected inflation\n4. Percentage change in P/E ratio\n\nThe program defines the necessary variables based on the provided data, performs the calculation according to the model, and returns the result as a percentage rounded to two decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036000000000000004,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    # Do math calculation to get the answer\n    std_dev_X = variance_X ** 0.5\n    std_dev_Y = variance_Y ** 0.5\n    covariance = correlation * std_dev_X * std_dev_Y\n    \n    # return answer\n    return covariance\n```\n\nThis Python program calculates the covariance between the returns of shares X and Y based on their variances and correlation. Here's how it works:\n\n1. We define the given variables:\n   - `variance_X` is the variance of shares X (0.25)\n   - `variance_Y` is the variance of shares Y (0.64)\n   - `correlation` is the correlation between the two securities (0.09)\n\n2. To calculate the covariance, we use the formula:\n   Covariance = Correlation * Standard Deviation of X * Standard Deviation of Y\n\n3. We calculate the standard deviations by taking the square root of the variances:\n   - `std_dev_X = variance_X ** 0.5`\n   - `std_dev_Y = variance_Y ** 0.5`\n\n4. Then we multiply these values with the correlation to get the covariance:\n   `covariance = correlation * std_dev_X * std_dev_Y`\n\n5. Finally, we return the calculated covariance.\n\nThis program will return the covariance of the returns for shares X and Y."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09  # 9% effective annual return\n\n    # Do math calculation to get the answer\n    # Bond-equivalent yield (BEY) formula:\n    # BEY = 2 * ((1 + effective_annual_return)^(1/2) - 1)\n    \n    bond_equivalent_yield = 2 * ((1 + effective_annual_return)**(1/2) - 1)\n    \n    # Convert to percentage\n    bond_equivalent_yield_percent = bond_equivalent_yield * 100\n\n    # return answer\n    return round(bond_equivalent_yield_percent, 2)\n```\n\nThis Python program calculates the bond-equivalent yield (BEY) given an effective annual return of 9%. Here's how it works:\n\n1. We define the effective annual return as 0.09 (9%).\n\n2. We use the formula to convert effective annual return to bond-equivalent yield:\n   BEY = 2 * ((1 + effective_annual_return)^(1/2) - 1)\n\n3. We calculate this value and store it in `bond_equivalent_yield`.\n\n4. We convert the result to a percentage by multiplying by 100.\n\n5. Finally, we return the result rounded to two decimal places.\n\nThe program will return the bond-equivalent yield as a percentage. For example, if you run this function, it should return approximately 8.73%, which is the bond-equivalent yield corresponding to a 9% effective annual return."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 50000\n    useful_life = 10\n    residual_value = 5000\n    \n    # Do math calculation to get the answer\n    straight_line_rate = 1 / useful_life\n    double_declining_rate = 2 * straight_line_rate\n    first_year_depreciation = initial_cost * double_declining_rate\n    \n    # return answer\n    return first_year_depreciation\n```\n\nThis Python program calculates the depreciation for the first year (2016) using the double-declining balance method. Here's an explanation of the calculation:\n\n1. We define the initial cost, useful life, and residual value based on the given information.\n\n2. We calculate the straight-line rate, which is 1 divided by the useful life (10 years).\n\n3. The double-declining rate is twice the straight-line rate.\n\n4. For the first year, we multiply the initial cost by the double-declining rate to get the depreciation amount.\n\n5. We return this value as the answer.\n\nNote that the double-declining balance method doesn't consider the residual value in its initial calculations. The depreciation would stop once the book value reaches the residual value in later years, but for the first year, we only need to apply the rate to the initial cost."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    gbp_eur_rate = 0.8878\n\n    # Do math calculation to get the answer\n    eur_gbp_rate = 1 / gbp_eur_rate\n    \n    # Round the result to 4 decimal places, which is common for exchange rates\n    answer = round(eur_gbp_rate, 4)\n\n    # return answer\n    return answer\n```\n\nThis program calculates the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP) based on the given exchange rate for the Euro (EUR) in London (GBP/EUR).\n\nThe calculation is straightforward:\n1. We take the reciprocal of the GBP/EUR rate to get the EUR/GBP rate.\n2. We round the result to 4 decimal places, which is typical for currency exchange rates.\n\nWhen you run this function, it will return the EUR/GBP exchange rate, which should be approximately 1.1264 (rounded to 4 decimal places)."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04  # 4% annually\n    bond_yield = 0.06  # 6% annually\n    recovery_rate = 0.70  # 70% recovery rate\n\n    # Do math calculation to get the answer\n    spread = bond_yield - risk_free_rate\n    loss_given_default = 1 - recovery_rate\n    probability_of_default = spread / loss_given_default\n\n    # return answer\n    return probability_of_default\n```\n\nThis Python program calculates the inferred probability of default based on the given information. Here's a breakdown of the calculation:\n\n1. We define the risk-free rate (4%), the bond yield (6%), and the recovery rate (70%) as variables.\n\n2. We calculate the spread, which is the difference between the bond yield and the risk-free rate.\n\n3. We calculate the loss given default, which is 1 minus the recovery rate.\n\n4. The probability of default is then calculated as the spread divided by the loss given default.\n\n5. The function returns this probability of default.\n\nThis calculation assumes that the market is fairly priced and that the spread between the bond yield and the risk-free rate is entirely due to the risk of default. In reality, other factors might also contribute to this spread, but this simplified model provides a reasonable estimate of the default probability implied by market prices."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "Here's a Python program to calculate the RAROC based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 1.3e9  # $1.3 billion\n    pre_tax_profit_rate = 0.07  # 7%\n    operation_cost = 6e6  # $6 million\n    deposit_interest_rate = 0.05  # 5%\n    expected_loss_rate = 0.003  # 0.3%\n    unexpected_loss_rate = 0.08  # 8%\n    risk_free_rate = 0.015  # 1.5%\n    tax_rate = 0.25  # 25%\n\n    # Do math calculation to get the answer\n    pre_tax_profit = principal * pre_tax_profit_rate\n    interest_expense = principal * deposit_interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    net_income = (pre_tax_profit - operation_cost - interest_expense - expected_loss) * (1 - tax_rate)\n    \n    economic_capital = principal * unexpected_loss_rate\n    capital_charge = economic_capital * risk_free_rate\n    \n    raroc = (net_income - capital_charge) / economic_capital\n\n    # return answer\n    return raroc\n```\n\nThis program calculates the Risk-Adjusted Return on Capital (RAROC) based on the information provided in the question. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the pre-tax profit, interest expense, and expected loss.\n3. We then calculate the net income by subtracting operation cost, interest expense, and expected loss from pre-tax profit, and applying the tax rate.\n4. Economic capital is calculated as the unexpected loss rate multiplied by the principal.\n5. The capital charge is calculated as the economic capital multiplied by the risk-free rate.\n6. Finally, RAROC is calculated as (net income - capital charge) / economic capital.\n\nThe function will return the RAROC as a decimal. To get the percentage, you would need to multiply the result by 100.\n\n"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    car_only_renewal = 0.40\n    house_only_renewal = 0.70\n    both_renewal = 0.80\n    car_insurance = 0.70\n    house_insurance = 0.50\n    both_insurance = 0.20\n\n    # Do math calculation to get the answer\n    car_only = car_insurance - both_insurance\n    house_only = house_insurance - both_insurance\n\n    renew_car_only = car_only * car_only_renewal\n    renew_house_only = house_only * house_only_renewal\n    renew_both = both_insurance * both_renewal\n\n    total_renew = renew_car_only + renew_house_only + renew_both\n    total_clients = car_only + house_only + both_insurance\n\n    percentage_renew = (total_renew / total_clients) * 100\n\n    # return answer\n    return round(percentage_renew, 2)\n```\n\nThis Python program calculates the percentage of clients that will renew at least one plan next year based on the given information. Here's a breakdown of the calculation:\n\n1. We define all the given percentages as variables.\n2. We calculate the percentage of clients with only car insurance and only house insurance.\n3. We calculate the number of clients renewing in each category (car only, house only, and both).\n4. We sum up the total number of renewals and divide it by the total number of clients to get the percentage.\n5. We convert the result to a percentage and round it to two decimal places.\n\nThe function will return the percentage of clients that will renew at least one plan next year."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    coupon_rate = 0.10\n    spot_rate_1 = 0.06\n    forward_rate_2 = 0.08\n    forward_rate_3 = 0.10\n\n    # Do math calculation to get the answer\n    coupon_payment = par_value * coupon_rate\n    \n    # Calculate present value of each cash flow\n    pv_year1 = coupon_payment / (1 + spot_rate_1)\n    pv_year2 = coupon_payment / ((1 + spot_rate_1) * (1 + forward_rate_2))\n    pv_year3 = (coupon_payment + par_value) / ((1 + spot_rate_1) * (1 + forward_rate_2) * (1 + forward_rate_3))\n    \n    # Sum up all present values\n    bond_value = pv_year1 + pv_year2 + pv_year3\n\n    # return answer\n    return round(bond_value, 2)\n```\n\nThis Python program calculates the value of a 3-year, 10% annually paid bond with a par value of $1000, given the provided spot and forward rates. Here's how it works:\n\n1. We define the variables for par value, coupon rate, and the given spot and forward rates.\n\n2. We calculate the annual coupon payment by multiplying the par value by the coupon rate.\n\n3. We then calculate the present value of each year's cash flow:\n   - For year 1, we discount using the 1-year spot rate.\n   - For year 2, we discount using the 1-year spot rate and the 1-year forward rate for year 2.\n   - For year 3, we discount the coupon payment plus the par value using all three rates.\n\n4. We sum up all these present values to get the bond value.\n\n5. Finally, we return the bond value rounded to two decimal places.\n\nThis program will return the worth of the bond based on the given information."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    labor_input_growth = 0.009  # 0.9% per year\n    labor_productivity_growth = 0.015  # 1.5% per year\n    inflation = 0.021  # 2.1% per year\n    dividend_yield = 0.0225  # 2.25%\n    pe_growth = 0  # nonexistent\n\n    # Do math calculation to get the answer\n    real_gdp_growth = labor_input_growth + labor_productivity_growth\n    nominal_gdp_growth = real_gdp_growth + inflation\n    equity_return = nominal_gdp_growth + dividend_yield + pe_growth\n\n    # Convert to continuously compounded return\n    continuously_compounded_return = math.log(1 + equity_return)\n\n    # return answer\n    return continuously_compounded_return * 100  # Convert to percentage\n```\n\nNote: This solution assumes that you have the `math` module imported. If you need to use this function in a larger program, make sure to include `import math` at the beginning of your script.\n\nThe function calculates the equity return based on the given components:\n1. Real GDP growth (sum of labor input growth and labor productivity growth)\n2. Nominal GDP growth (real GDP growth plus inflation)\n3. Total equity return (nominal GDP growth plus dividend yield, as P/E growth is nonexistent)\n\nFinally, it converts the arithmetic return to a continuously compounded return using the natural logarithm and returns the result as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fund_value = 100_000_000\n    current_equity_allocation = 0.80\n    current_beta = 1.2\n    target_equity_allocation = 0.60\n    index_value = 1200\n    multiplier = 250\n    futures_beta = 0.95\n\n    # Do math calculation to get the answer\n    current_equity_value = fund_value * current_equity_allocation\n    target_equity_value = fund_value * target_equity_allocation\n    equity_value_difference = current_equity_value - target_equity_value\n\n    current_fund_beta = current_beta * current_equity_allocation\n    target_fund_beta = current_beta * target_equity_allocation\n\n    beta_difference = current_fund_beta - target_fund_beta\n    \n    futures_value = equity_value_difference / futures_beta\n    number_of_futures = futures_value / (index_value * multiplier)\n\n    # return answer\n    return round(number_of_futures)\n```\n\nThis Python program calculates the number of stock index futures that need to be purchased to change the equity allocation of the retirement fund from 80% to 60%. Here's a breakdown of the calculation:\n\n1. We first calculate the current and target equity values.\n2. We determine the difference in equity value that needs to be addressed.\n3. We calculate the current and target fund betas.\n4. We determine the difference in beta that needs to be addressed.\n5. We calculate the futures value needed to achieve the target allocation.\n6. Finally, we calculate the number of futures contracts needed by dividing the futures value by the value of each contract (index value * multiplier).\n\nThe function returns the rounded number of futures contracts that need to be purchased. Note that in real-world scenarios, you might need to consider additional factors and potentially make further adjustments, but this provides a basic calculation based on the given information."
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    security_2_beta = 1.40  # Beta for Security 2 (Share B)\n    expected_return_B = 0.114  # 11.4% expected return for Share B\n    risk_free_rate = 0.03  # 3% risk-free rate\n\n    # Do math calculation to get the answer\n    # Using CAPM formula: E(Ri) = Rf + Î²i(E(Rm) - Rf)\n    # Where E(Ri) is the expected return of Security B\n    # Rf is the risk-free rate\n    # Î²i is the beta of Security B\n    # E(Rm) is the expected market return (what we're solving for)\n\n    # Rearrange the formula to solve for E(Rm):\n    # E(Rm) = (E(Ri) - Rf) / Î²i + Rf\n\n    market_return = (expected_return_B - risk_free_rate) / security_2_beta + risk_free_rate\n\n    # return answer\n    return market_return * 100  # Convert to percentage\n```\n\nThis Python program calculates the projected return for the market using the Capital Asset Pricing Model (CAPM) formula. Here's a breakdown of the solution:\n\n1. We define the known variables: beta for Security 2 (Share B), expected return for Share B, and the risk-free rate.\n\n2. We use the CAPM formula: E(Ri) = Rf + Î²i(E(Rm) - Rf)\n\n3. We rearrange this formula to solve for E(Rm), which is the expected market return we're looking for.\n\n4. We perform the calculation and return the result as a percentage.\n\nThe program will return the projected market return as a percentage when called."
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training = 1000\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training\n    \n    # return answer\n    return total_cost\n```\n\nThis Python program calculates the total cost that should be reported on the balance sheet for the scientific equipment bought by Corporation BMT. It includes all the costs associated with acquiring and preparing the asset for its intended use, as per the generally accepted accounting principles (GAAP).\n\nThe program defines variables for each cost component provided in the table, then sums these costs to get the total cost. This total cost is what should be reported on the balance sheet as the value of the scientific equipment."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carried_interest_rate = 0.20\n    total_pledged_capital = 100000000\n    paid_in_capital = 90000000\n    distributions_to_lps = 30000000\n    nav_before_distributions = 160000000\n    nav_after_distributions = 130000000\n    projected_nav_next_year = 250000000\n    \n    # Do math calculation to get the answer\n    total_value = projected_nav_next_year + distributions_to_lps\n    profit = total_value - paid_in_capital\n    hurdle_rate = 0.08  # Assuming a standard 8% hurdle rate\n    hurdle_amount = paid_in_capital * hurdle_rate\n    excess_profit = profit - hurdle_amount\n    \n    if excess_profit > 0:\n        carried_interest = excess_profit * carried_interest_rate\n    else:\n        carried_interest = 0\n    \n    # return answer\n    return carried_interest\n```\n\nThis Python program calculates the forecasted carried interest for the next year based on the given financial information. It assumes a standard 8% hurdle rate, which is common in the private equity industry. The carried interest is calculated on the excess profit above the hurdle amount, using the given carried interest rate of 20%."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 75000\n    rate = 0.07  # 7% annual interest rate\n    time = 6  # 6 years\n    compounds_per_year = 4  # compounded quarterly\n\n    # Do math calculation to get the answer\n    rate_per_period = rate / compounds_per_year\n    periods = compounds_per_year * time\n    future_value = principal * (1 + rate_per_period) ** periods\n\n    # return answer\n    return round(future_value, 2)\n```\n\nThis Python program calculates the future value of an investment using the compound interest formula. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `principal`: The initial investment amount ($75,000)\n   - `rate`: The annual interest rate (7% or 0.07)\n   - `time`: The investment duration (6 years)\n   - `compounds_per_year`: The number of times interest is compounded per year (4 for quarterly)\n\n2. We calculate the future value using the compound interest formula:\n   A = P(1 + r/n)^(nt)\n   Where:\n   A = Final amount\n   P = Principal balance\n   r = Annual interest rate\n   n = Number of times interest is compounded per year\n   t = Number of years\n\n3. We round the result to two decimal places for cents and return the answer.\n\nThis program will return the future value of the investment after 6 years, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | Â£8,000              | Â£8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | Â£1,200              | Â£3,000       |\n| Net balance, end of 2013                | Â£6,800              | Â£5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | Â£10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    accounting_value = 10000  # Revaluation balance for accounting purposes\n    tax_value = 5000  # Net balance for tax purposes at end of 2013\n    remaining_life = 20  # New estimated life from 2014\n    tax_rate = 0.30  # 30% tax rate\n\n    # Do math calculation to get the answer\n    annual_accounting_depreciation = accounting_value / remaining_life\n    annual_tax_depreciation = tax_value / (8 - 3)  # 5 years remaining in original 8-year life\n\n    accounting_depreciation_2014 = annual_accounting_depreciation\n    tax_depreciation_2014 = annual_tax_depreciation\n\n    temporary_difference = accounting_value - tax_value - (accounting_depreciation_2014 - tax_depreciation_2014)\n    deferred_tax_liability = temporary_difference * tax_rate\n\n    # return answer\n    return deferred_tax_liability\n```\n\nThis Python program calculates the deferred tax liability at the end of 2014 based on the information provided. Here's a breakdown of the calculation:\n\n1. We set up the initial values based on the information given in the table.\n2. We calculate the annual depreciation for both accounting and tax purposes.\n3. We determine the depreciation for 2014 for both accounting and tax purposes.\n4. We calculate the temporary difference, which is the difference between the accounting and tax base of the asset, adjusted for the difference in depreciation for 2014.\n5. Finally, we multiply the temporary difference by the tax rate to get the deferred tax liability.\n\nThe function will return the deferred tax liability in millions of pounds."
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # Do math calculation to get the answer\n    # Step 1: Calculate the expected value (mean)\n    expected_value = sum(p * s for p, s in zip(probabilities, sales))\n\n    # Step 2: Calculate the variance\n    variance = sum(p * ((s - expected_value) ** 2) for p, s in zip(probabilities, sales))\n\n    # Step 3: Calculate the standard deviation\n    standard_deviation = variance ** 0.5\n\n    # return answer\n    return round(standard_deviation, 2)\n```\n\nThis Python program calculates the standard deviation of sales given the probability distribution. Here's a breakdown of the steps:\n\n1. We define two lists: `probabilities` and `sales`, which contain the given data.\n\n2. We calculate the expected value (mean) by multiplying each sales value by its probability and summing the results.\n\n3. We calculate the variance by summing the squared differences between each sales value and the expected value, weighted by their probabilities.\n\n4. We calculate the standard deviation by taking the square root of the variance.\n\n5. Finally, we return the standard deviation rounded to two decimal places.\n\nThis program will return the standard deviation of sales based on the given probability distribution."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    company_contributions = 1200\n    pbo_start = 45000\n    pbo_end = 43500\n    plan_assets_start = 40800\n    plan_assets_end = 39650\n    \n    # Do math calculation to get the answer\n    service_cost = company_contributions\n    interest_cost = pbo_start * 0.05  # Assuming a 5% interest rate\n    expected_return_on_assets = plan_assets_start * 0.05  # Assuming a 5% expected return\n    \n    pension_cost = service_cost + interest_cost - expected_return_on_assets\n    \n    # return answer\n    return round(pension_cost, 2)\n```\n\nThis Python program calculates the overall recurring pension cost based on the provided information. Here's a breakdown of the calculation:\n\n1. Service Cost: This is equal to the company's contributions (1,200).\n2. Interest Cost: We assume a 5% interest rate on the PBO at the start of the year (45,000 * 0.05).\n3. Expected Return on Plan Assets: We assume a 5% expected return on the plan assets at the start of the year (40,800 * 0.05).\n\nThe overall recurring pension cost is then calculated as:\nPension Cost = Service Cost + Interest Cost - Expected Return on Plan Assets\n\nThe result is rounded to two decimal places for precision. Note that the 5% rate used for interest cost and expected return on assets is an assumption, as the actual rates were not provided in the question. In a real-world scenario, these rates would be specified or calculated based on additional information."
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 500\n    year1_return = 0.12\n    year2_return = 0.05\n    year3_return = 0.01\n\n    # Do math calculation to get the answer\n    value_after_year1 = initial_investment * (1 + year1_return)\n    value_after_year2 = value_after_year1 * (1 + year2_return)\n    final_value = value_after_year2 * (1 + year3_return)\n\n    holding_period_return = (final_value - initial_investment) / initial_investment\n\n    # return answer\n    return holding_period_return\n```\n\nThis Python program calculates the holding period return for John's fund based on the given data:\n\n1. We define the initial investment and the returns for each year as variables.\n2. We calculate the value of the investment after each year, considering the compound effect of the returns.\n3. We then calculate the holding period return using the formula: (Final Value - Initial Investment) / Initial Investment\n4. Finally, we return the holding period return.\n\nThe holding period return represents the total return over the entire three-year period, taking into account the compounding effect of the annual returns."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    common_shares = 60000\n    outstanding_warrants = 5000\n    warrant_exercise_price = 25\n    year_end_stock_price = 30\n    average_stock_price = 20\n\n    # Do math calculation to get the answer\n    if average_stock_price > warrant_exercise_price:\n        # Warrants are dilutive\n        additional_shares = outstanding_warrants\n    else:\n        # Warrants are not dilutive\n        additional_shares = 0\n\n    total_shares = common_shares + additional_shares\n\n    # return answer\n    return total_shares\n```\n\nThis program calculates the number of shares that should be used when computing the company's diluted EPS. Here's how it works:\n\n1. We define the given variables: number of common shares, number of outstanding warrants, warrant exercise price, year-end stock price, and average stock price for the year.\n\n2. We then check if the warrants are dilutive. Warrants are considered dilutive if the average stock price for the year is higher than the warrant exercise price. In this case:\n   - Average stock price: $20\n   - Warrant exercise price: $25\n\n3. Since the average stock price ($20) is not greater than the warrant exercise price ($25), the warrants are not dilutive.\n\n4. Therefore, we don't add any additional shares from the warrants.\n\n5. The total number of shares to be used for diluted EPS calculation is just the number of common shares outstanding.\n\n6. The function returns this total number of shares.\n\nIn this case, the answer is 60,000 shares, which is the same as the basic number of shares outstanding, because the warrants are not dilutive under these circumstances."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    projected_eps = 2\n    current_share_price = 40\n    current_pe_ratio = current_share_price / projected_eps\n    \n    # Do math calculation to get the answer\n    # For a company undergoing significant changes, like a major acquisition,\n    # it's often appropriate to use a slightly higher P/E ratio than the current one\n    # to account for future growth potential. A common approach is to add 2-3 points.\n    suitable_pe_ratio = current_pe_ratio + 2.5\n    \n    # Round to nearest whole number as P/E ratios are typically expressed as integers\n    suitable_pe_ratio = round(suitable_pe_ratio)\n    \n    # return answer\n    return suitable_pe_ratio\n```\n\nThis program calculates a suitable price-to-earnings (P/E) ratio for XY Corporation based on the given information. Here's the reasoning behind the calculation:\n\n1. We first calculate the current P/E ratio by dividing the current share price by the projected EPS.\n\n2. Given that XY Corporation has recently made a significant acquisition that will greatly influence its future outcomes, it's appropriate to use a slightly higher P/E ratio than the current one. This accounts for the potential future growth and synergies from the acquisition.\n\n3. A common approach in such situations is to add 2-3 points to the current P/E ratio. In this program, we've added 2.5 points as a middle ground.\n\n4. The result is rounded to the nearest whole number, as P/E ratios are typically expressed as integers in practice.\n\nThis approach provides a reasonable estimate for a suitable P/E ratio in the valuation of XY Corporation, taking into account its recent significant change in business structure and potential for future growth."
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_return = 0.053  # 5.3% for 1 Year\n    max_drawdown = 0.102  # 10.2% highest drawdown risk\n    \n    # Do math calculation to get the answer\n    calmar_ratio = annual_return / max_drawdown\n    \n    # return answer\n    return calmar_ratio\n```\n\nThis Python program calculates the Calmar ratio based on the given information. Here's an explanation of the code:\n\n1. We define the annual return as 0.053 (5.3%) based on the 1-year performance figure provided in the table.\n2. We set the maximum drawdown as 0.102 (10.2%) as given in the question.\n3. The Calmar ratio is calculated by dividing the annual return by the maximum drawdown.\n4. The function returns the calculated Calmar ratio.\n\nNote that we use the 1-year return figure for this calculation, as the Calmar ratio typically uses the annual return. Also, we use the highest drawdown risk (10.2%) rather than the mean drawdown risk (6.8%) because the Calmar ratio traditionally uses the maximum drawdown."
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "def solution():\n    # Define variables name and value\n    trade1_price = 41.50\n    trade1_bid = 41.45\n    trade1_offer = 41.50\n    trade2_price = 41.75\n    trade2_bid = 41.73\n    trade2_offer = 41.75\n    \n    # Do math calculation to get the answer\n    \n    # Calculate effective spread for each trade\n    effective_spread1 = 2 * abs(trade1_price - (trade1_bid + trade1_offer) / 2)\n    effective_spread2 = 2 * abs(trade2_price - (trade2_bid + trade2_offer) / 2)\n    \n    # Calculate average effective spread\n    avg_effective_spread = (effective_spread1 + effective_spread2) / 2\n    \n    # Convert to basis points (1 basis point = 0.01%)\n    avg_effective_spread_bps = avg_effective_spread * 10000\n    \n    # return answer\n    return round(avg_effective_spread_bps, 2)"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quarterly_dividend = 2.00\n    annual_yield_rate = 0.06\n    quarterly_yield_rate = annual_yield_rate / 4\n    quarters_until_first_payment = 5\n\n    # Do math calculation to get the answer\n    present_value = quarterly_dividend / quarterly_yield_rate\n    discount_factor = (1 + quarterly_yield_rate) ** -quarters_until_first_payment\n    current_value = present_value * discount_factor\n\n    # return answer\n    return round(current_value, 2)\n```\n\nThis Python program calculates the current value of the never-ending preferred share based on the given information:\n\n1. We define the variables:\n   - `quarterly_dividend`: The three-monthly payout of $2.00\n   - `annual_yield_rate`: The annual rate of yield of 6%\n   - `quarterly_yield_rate`: The quarterly rate of yield (annual rate divided by 4)\n   - `quarters_until_first_payment`: The number of quarters until the first payment (5)\n\n2. We calculate the present value of the perpetuity using the formula: PV = D / r\n   Where D is the quarterly dividend and r is the quarterly yield rate.\n\n3. We then calculate the discount factor to account for the 5-quarter delay before the first payment.\n\n4. We multiply the present value by the discount factor to get the current value of the share.\n\n5. Finally, we round the result to 2 decimal places (as it represents a monetary value) and return it.\n\nThis program will return the current value of the preferred share, taking into account the delayed start of payments and the quarterly compounding of the yield rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 3  # years\n    amortization_period = 2  # years (at the conclusion of Year 2)\n\n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization = annual_amortization * amortization_period\n\n    # return answer\n    return accumulated_amortization\n```\n\nThis Python program calculates the accumulated amortization for Corporation B's license purchase at the end of Year 2. Here's a breakdown of the calculation:\n\n1. We define the license cost as $6,500.\n2. The useful life is set to 3 years, as that's the period the company expects to gain benefits from the license.\n3. We're calculating the accumulated amortization at the end of Year 2, so the amortization period is 2 years.\n4. We calculate the annual amortization by dividing the license cost by the useful life.\n5. The accumulated amortization is then calculated by multiplying the annual amortization by the number of years (2).\n\nThe function will return the accumulated amortization at the conclusion of Year 2."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyerâs necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 2.00\n    growth_rate = 0.04\n    required_return = 0.07\n\n    # Do math calculation to get the answer\n    # Using the Gordon Growth Model: P = D1 / (r - g)\n    # Where P is the intrinsic value, D1 is next year's dividend,\n    # r is the required return rate, and g is the growth rate\n    next_year_dividend = current_dividend * (1 + growth_rate)\n    intrinsic_value = next_year_dividend / (required_return - growth_rate)\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of the share using the Gordon Growth Model, which is appropriate for valuing stocks with stable, perpetual dividend growth. The calculation takes into account the current dividend, expected growth rate, and the investor's required return rate. The result is rounded to two decimal places to represent a reasonable dollar amount."
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions ofâ¬) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "Here's a Python program to calculate the concentration ratio of the four largest firms based on the given market share data:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_sales = 500 + 350 + 270 + 200 + 150 + 40\n    top_four_sales = 500 + 350 + 270 + 200\n    \n    # Do math calculation to get the answer\n    concentration_ratio = (top_four_sales / total_sales) * 100\n    \n    # return answer\n    return round(concentration_ratio, 2)\n```\n\nThis program does the following:\n\n1. We define the total sales by summing up all the sales figures from the table.\n2. We calculate the sales of the top four firms (Ajiwo, Bdfhyj, Cegfd, and Ddgh) by adding their individual sales.\n3. We calculate the concentration ratio by dividing the sales of the top four firms by the total sales and multiplying by 100 to get a percentage.\n4. We round the result to two decimal places for better readability.\n5. The function returns the calculated concentration ratio.\n\nWhen you run this function, it will return the concentration ratio of the four largest firms as a percentage."
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/â¬) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.5710000000000001,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 3500\n    cost_of_sales = 1500\n    current_rate = 1.77  # Exchange rate at 31 December 2018\n\n    # Do math calculation to get the answer\n    sales_usd = sales / current_rate\n    cost_of_sales_usd = cost_of_sales / current_rate\n    gross_profit_usd = sales_usd - cost_of_sales_usd\n    gross_profit_margin = gross_profit_usd / sales_usd\n\n    # return answer\n    return gross_profit_margin\n```\n\nThis Python program calculates the gross profit margin for ZX financial service after translating its results into US dollars using the current rate method. Here's a breakdown of the calculation:\n\n1. We define the given values: sales, cost of sales, and the current exchange rate (as of 31 December 2018).\n\n2. We convert both sales and cost of sales to USD using the current rate.\n\n3. We calculate the gross profit in USD by subtracting the cost of sales from sales.\n\n4. We calculate the gross profit margin by dividing the gross profit by sales.\n\n5. The function returns the gross profit margin.\n\nNote that the result will be a decimal representation of the margin. To convert it to a percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_trading_securities = -240  # Cash outflow, so negative\n    sale_trading_securities = 300\n    issuance_bonds = 500  # This is a financing activity, not investing\n    purchase_affiliated_shares = -275  # Cash outflow, so negative\n    \n    # Do math calculation to get the answer\n    investing_cash_flow = (purchase_trading_securities + \n                           sale_trading_securities + \n                           purchase_affiliated_shares)\n    \n    # return answer\n    return investing_cash_flow\n\n# Call the function to get the result\nresult = solution()\nprint(f\"The net cash flow from investing activities: ${result} thousand\")\n```\n\nThis program calculates the net cash flow from investing activities based on the given information. Here's a breakdown of the calculation:\n\n1. Purchase of securities for trading purposes is a cash outflow (-$240,000).\n2. Proceeds from the sale of trading securities is a cash inflow ($300,000).\n3. Proceeds from issuance of bonds is not included as it's a financing activity, not an investing activity.\n4. Purchase of 30% of the shares of an affiliated company is a cash outflow (-$275,000).\n\nThe program sums up these investing activities to get the net cash flow from investing activities, which comes to -$215,000 (or -215 in thousands of dollars)."
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_market_rise = 0.38\n    prob_market_unchanged = 0.46\n    prob_market_decline = 0.16\n    \n    prob_45_if_rise = 0.65\n    prob_45_if_unchanged = 0.55\n    prob_45_if_decline = 0.38\n    \n    # Do math calculation to get the answer\n    prob_45 = (prob_market_rise * prob_45_if_rise + \n               prob_market_unchanged * prob_45_if_unchanged + \n               prob_market_decline * prob_45_if_decline)\n    \n    # return answer\n    return prob_45\n```\n\nThis Python program calculates the probability that the stock's value will be $45 given the market conditions and their respective probabilities. Here's a breakdown of the calculation:\n\n1. We define the probabilities of different market conditions (rise, unchanged, decline) as given in the question.\n2. We use the probabilities of the stock being $45 in each market condition from the provided table.\n3. We calculate the total probability of the stock being $45 using the law of total probability:\n   P(Stock at $45) = P(Rise) * P(Stock at $45 | Rise) + P(Unchanged) * P(Stock at $45 | Unchanged) + P(Decline) * P(Stock at $45 | Decline)\n\nThe function returns this calculated probability as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    invoice_price = 11000000\n    days = 20\n    repo_rate = 0.20  # 20% annual rate\n\n    # Do math calculation to get the answer\n    daily_rate = repo_rate / 365\n    interest = invoice_price * daily_rate * days\n    repurchase_cost = invoice_price + interest\n\n    # return answer\n    return repurchase_cost\n```\n\nThis Python program calculates the repurchase cost for the given repurchase agreement scenario. Here's a breakdown of the calculation:\n\n1. We define the known variables: face value, invoice price, number of days, and the repo rate.\n\n2. We calculate the daily rate by dividing the annual repo rate by 365 days.\n\n3. We then calculate the interest by multiplying the invoice price by the daily rate and the number of days.\n\n4. Finally, we compute the repurchase cost by adding the initial invoice price and the calculated interest.\n\nThe function will return the repurchase cost, which is the answer to the question."
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 110\n    retained_earnings_2017 = 125\n    accounts_receivable_2016 = 45\n    accounts_receivable_2017 = 48\n    inventory_2016 = 24\n    inventory_2017 = 20\n    accounts_payable_2016 = 30\n    accounts_payable_2017 = 33\n    dividends = 8\n    impairment_expense = 12\n\n    # Do math calculation to get the answer\n    net_income = retained_earnings_2017 - retained_earnings_2016 + dividends\n    \n    # Adjustments for non-cash items and changes in working capital\n    operating_cash_flow = net_income + impairment_expense\n    operating_cash_flow -= (accounts_receivable_2017 - accounts_receivable_2016)\n    operating_cash_flow -= (inventory_2017 - inventory_2016)\n    operating_cash_flow += (accounts_payable_2017 - accounts_payable_2016)\n\n    # return answer\n    return operating_cash_flow\n```\n\nThis Python program calculates the operating cash flow for Business B in 2017 based on the given information. Here's a breakdown of the calculation:\n\n1. We first calculate the net income by finding the change in retained earnings and adding back the dividends.\n2. We then add back the non-cash impairment expense.\n3. We adjust for changes in working capital:\n   - Subtract the increase in accounts receivable\n   - Subtract the decrease in inventory (as it's a source of cash)\n   - Add the increase in accounts payable\n\nThe resulting value is the operating cash flow for 2017 in millions of dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    defect_rate = 0.05  # 5% of vehicles are defective\n    num_vehicles = 5    # number of vehicles randomly picked\n\n    # Do math calculation to get the answer\n    import math\n    \n    # Calculate lambda (average number of defective vehicles in 5 picks)\n    lambda_param = defect_rate * num_vehicles\n    \n    # Calculate probability of exactly one defective vehicle using Poisson distribution\n    probability = (math.exp(-lambda_param) * lambda_param ** 1) / math.factorial(1)\n    \n    # return answer\n    return probability\n```\n\nThis Python program calculates the probability of finding exactly one defective vehicle when randomly picking 5 vehicles, given that 5% of vehicles are defective and the number of defects follows a Poisson distribution.\n\nHere's a breakdown of the solution:\n\n1. We define the defect rate (5% or 0.05) and the number of vehicles picked (5).\n\n2. We import the math module to use exponential and factorial functions.\n\n3. We calculate lambda, which is the average number of defective vehicles expected in 5 picks. This is simply the defect rate multiplied by the number of vehicles picked.\n\n4. We use the Poisson probability mass function to calculate the probability of exactly one defective vehicle. The formula is:\n   P(X = k) = (e^(-Î») * Î»^k) / k!\n   Where:\n   - e is Euler's number (approx. 2.71828)\n   - Î» (lambda) is our calculated lambda_param\n   - k is the number of occurrences we're interested in (in this case, 1)\n\n5. Finally, we return this calculated probability.\n\nThis program will return a decimal value representing the probability of finding exactly one defective vehicle in a random sample of 5 vehicles."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    years_to_maturity = 9\n    ytm = 0.05\n    bond_price = 85.784357\n    par_value = 100\n    basis_point = 0.0001  # 1 basis point = 0.01% = 0.0001\n\n    # Do math calculation to get the answer\n    # Calculate the present value of the bond after a 1 basis point increase in yield\n    new_ytm = ytm + basis_point\n    \n    # Calculate the new bond price\n    new_price = 0\n    for t in range(1, years_to_maturity + 1):\n        new_price += (coupon_rate * par_value) / ((1 + new_ytm) ** t)\n    new_price += par_value / ((1 + new_ytm) ** years_to_maturity)\n    \n    # Calculate the price value of a basis point\n    price_value_of_bp = bond_price - new_price\n\n    # return answer\n    return price_value_of_bp\n```\n\nThis Python program calculates the price value of a basis point for the given bond. Here's a breakdown of the solution:\n\n1. We define the variables based on the given information.\n2. We calculate the new yield-to-maturity by adding one basis point to the original YTM.\n3. We then calculate the new bond price using the new YTM. This involves summing the present values of all future cash flows (coupons and principal).\n4. Finally, we calculate the price value of a basis point by subtracting the new bond price from the original bond price.\n\nThe function will return the price value of a basis point, which represents how much the bond's price changes for a one basis point change in yield."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 1600  # number of samples\n    sample_std_dev = 100  # standard deviation of the samples\n\n    # Do math calculation to get the answer\n    standard_error = sample_std_dev / (n ** 0.5)\n\n    # return answer\n    return standard_error\n```\n\nThis Python program calculates the standard error of the sample mean based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables:\n   - `n` is the number of samples (1,600)\n   - `sample_std_dev` is the standard deviation of the samples (100)\n\n2. We calculate the standard error using the formula:\n   Standard Error = (Sample Standard Deviation) / â(Sample Size)\n\n3. We return the calculated standard error.\n\nNote that we don't need to use the population mean (1,000) or the sample mean (998.7) for this calculation, as the standard error of the sample mean only depends on the sample size and the sample standard deviation."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stocks = 500000\n    fixed_income = 330000\n    house_value = 350000\n    mortgage = 175000\n    present_value_earnings = 980000\n    present_value_consumption = 870000\n    college_tuition = 150000\n    family_foundation = 600000\n\n    # Do math calculation to get the answer\n    assets = stocks + fixed_income + house_value + present_value_earnings\n    liabilities = mortgage + present_value_consumption + college_tuition + family_foundation\n    economic_net_worth = assets - liabilities\n\n    # return answer\n    return economic_net_worth\n```\n\nThis Python program calculates the economic net worth of the Smith family based on the provided information. Here's a breakdown of the calculation:\n\n1. We define all the given values as variables.\n2. We calculate the total assets by summing up stocks, fixed income, house value, and present value of earnings.\n3. We calculate the total liabilities by summing up the mortgage, present value of future consumption, college tuition costs, and the family foundation.\n4. The economic net worth is then calculated by subtracting total liabilities from total assets.\n\nThe program will return the economic net worth, which represents the Smith family's overall financial position taking into account all their assets and future financial commitments."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of â¬10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of â¬8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    sale_price = 10000\n    cost_of_goods = 8000\n    \n    # Do math calculation to get the answer\n    accounts_receivable_increase = sale_price\n    inventory_decrease = cost_of_goods\n    net_asset_change = accounts_receivable_increase - inventory_decrease\n    \n    # return answer\n    return net_asset_change\n```\n\nThis program calculates the net change in XYZ Corporation's total assets on 30 June 2006 due to the sale. Here's the explanation:\n\n1. The sale price (â¬10,000) increases accounts receivable, as the payment is due within 30 days.\n2. The cost of goods sold (â¬8,000) decreases inventory.\n3. The net change in assets is the difference between the increase in accounts receivable and the decrease in inventory.\n\nThe program returns this net change, which represents the probable net shift in XYZ Corporation's total assets on the date of the sale."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_ratio = 1 - debt_ratio\n    equity_beta = 1.4\n\n    # Do math calculation to get the answer\n    # Asset beta = (Equity beta * Equity ratio) + (Debt beta * Debt ratio * (1 - Tax rate))\n    # Assuming debt beta is 0 as it's typically very low or close to zero\n    asset_beta = (equity_beta * equity_ratio) + (0 * debt_ratio * (1 - tax_rate))\n\n    # return answer\n    return asset_beta\n```\n\nThis Python program calculates the asset beta of a business given the provided information. Here's a breakdown of the calculation:\n\n1. We define the given variables: tax rate, debt ratio, equity beta, and calculate the equity ratio.\n2. We use the formula for asset beta: Asset beta = (Equity beta * Equity ratio) + (Debt beta * Debt ratio * (1 - Tax rate))\n3. We assume the debt beta is 0, as it's typically very low or close to zero for most businesses.\n4. The calculation is performed, and the asset beta is returned.\n\nThis program will return the asset beta of the business based on the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fund_value = 100_000_000\n    initial_shares_percent = 0.80\n    initial_bonds_percent = 0.20\n    shares_beta = 1.2\n    bonds_term = 5.0\n    target_shares_percent = 0.60\n    target_bonds_percent = 0.40\n    index_value = 1200\n    multiplier = 250\n    index_beta = 0.95\n\n    # Do math calculation to get the answer\n    initial_shares_value = fund_value * initial_shares_percent\n    initial_bonds_value = fund_value * initial_bonds_percent\n    \n    target_shares_value = fund_value * target_shares_percent\n    target_bonds_value = fund_value * target_bonds_percent\n    \n    change_in_shares = target_shares_value - initial_shares_value\n    \n    # Calculate the number of futures contracts needed\n    contract_value = index_value * multiplier\n    futures_beta = change_in_shares * shares_beta / (contract_value * index_beta)\n    \n    # Round to the nearest whole number of contracts\n    futures_contracts = round(futures_beta)\n\n    # return answer\n    return futures_contracts\n```\n\nThis Python program calculates the number of stock index futures contracts needed to shift the retirement fund's asset allocation from 80% shares and 20% bonds to 60% shares and 40% bonds. \n\nThe program first defines all the given variables, then calculates the initial and target values for shares and bonds. It determines the change needed in the shares value and uses this to calculate the number of futures contracts required, taking into account the beta of the shares and the index.\n\nThe final result is rounded to the nearest whole number of contracts, as it's not possible to purchase a fractional futures contract.\n\nNote that the program doesn't use the bond futures information provided (cost and duration) as it's not necessary for this particular calculation. The question is focused on adjusting the equity portion of the portfolio using stock index futures."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.08\n    years = 20\n    current_price = 1105.94\n    marginal_tax_rate = 0.30\n    risk_premium = 0.05\n\n    # Do math calculation to get the answer\n    # First, calculate the yield to maturity (YTM) of the bond\n    coupon_payment = face_value * coupon_rate\n    \n    # Use Newton-Raphson method to approximate YTM\n    ytm = coupon_rate  # Initial guess\n    for _ in range(100):  # Iterate up to 100 times\n        price = 0\n        for t in range(1, years + 1):\n            price += coupon_payment / (1 + ytm) ** t\n        price += face_value / (1 + ytm) ** years\n        \n        diff = price - current_price\n        if abs(diff) < 0.0001:  # If the difference is small enough, break\n            break\n        \n        derivative = 0\n        for t in range(1, years + 1):\n            derivative -= t * coupon_payment / (1 + ytm) ** (t + 1)\n        derivative -= years * face_value / (1 + ytm) ** (years + 1)\n        \n        ytm -= diff / derivative\n\n    # Calculate after-tax bond yield\n    after_tax_bond_yield = ytm * (1 - marginal_tax_rate)\n\n    # Calculate cost of equity\n    cost_of_equity = after_tax_bond_yield + risk_premium\n\n    # return answer\n    return cost_of_equity\n```\n\nThis Python program calculates the cost of equity using the bond-yield-plus-risk-premium method. Here's a breakdown of the steps:\n\n1. We define all the given variables.\n2. We use the Newton-Raphson method to approximate the yield to maturity (YTM) of the bond. This is an iterative process that converges on the YTM.\n3. We calculate the after-tax bond yield by multipl"
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    starting_index = 121\n    \n    # Stock prices on March 31, 20X7\n    x_price_march = 15\n    y_price_march = 20\n    z_price_march = 30\n    \n    # Stock prices on April 30, 20X7\n    x_price_april = 20\n    y_price_april = 30\n    z_price_april = 25\n    \n    # Do math calculation to get the answer\n    \n    # Calculate percentage changes for each stock\n    x_change = (x_price_april - x_price_march) / x_price_march\n    y_change = (y_price_april - y_price_march) / y_price_march\n    z_change = (z_price_april - z_price_march) / z_price_march\n    \n    # Calculate average percentage change (equal-weighted)\n    avg_change = (x_change + y_change + z_change) / 3\n    \n    # Calculate new index value\n    new_index = starting_index * (1 + avg_change)\n    \n    # return answer\n    return round(new_index, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "Here's a Python program to calculate the terminal value of the stock based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_dividend = 0.22\n    high_growth_rate = 0.12\n    high_growth_years = 4\n    normal_growth_rate = 0.06\n    required_return = 0.09\n\n    # Do math calculation to get the answer\n    \n    # Calculate dividend after high growth period\n    future_dividend = current_dividend * (1 + high_growth_rate) ** high_growth_years\n\n    # Calculate terminal value using Gordon Growth Model\n    terminal_value = future_dividend * (1 + normal_growth_rate) / (required_return - normal_growth_rate)\n\n    # return answer\n    return round(terminal_value, 2)\n```\n\nThis program calculates the terminal value of the stock using the following steps:\n\n1. We define the variables based on the given information:\n   - Current dividend: $0.22\n   - High growth rate: 12% (0.12)\n   - High growth period: 4 years\n   - Normal growth rate: 6% (0.06)\n   - Required return: 9% (0.09)\n\n2. We calculate the dividend after the high growth period (4 years) using the compound growth formula.\n\n3. We then use the Gordon Growth Model to calculate the terminal value. The formula is:\n   Terminal Value = D * (1 + g) / (r - g)\n   Where:\n   D = dividend after high growth period\n   g = normal growth rate\n   r = required return\n\n4. Finally, we round the result to two decimal places and return it.\n\nThis program will return the terminal value of the stock according to the two-stage Dividend Discount Model (DDM) as requested in the question."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 98.722\n    price_up = 98.782\n    price_down = 98.669\n    ytm_change = 0.001  # 10 basis points = 0.1% = 0.001\n\n    # Do math calculation to get the answer\n    price_change_up = price_up - current_price\n    price_change_down = price_down - current_price\n    \n    # Calculate convexity using the formula:\n    # Convexity â [(ÎP+ + ÎP-) / (2 * P * (Îy)^2)] * 100\n    convexity = ((price_change_up + price_change_down) / \n                 (2 * current_price * ytm_change**2)) * 100\n\n    # return answer\n    return convexity\n```\n\nThis Python program calculates the approximate convexity of the bond based on the given information. Here's a breakdown of the calculation:\n\n1. We define the current price, the price when YTM increases by 10 basis points, and the price when YTM decreases by 10 basis points.\n2. We set the YTM change to 0.001 (10 basis points = 0.1% = 0.001).\n3. We calculate the price changes for both up and down scenarios.\n4. We use the convexity formula: Convexity â [(ÎP+ + ÎP-) / (2 * P * (Îy)^2)] * 100\n   Where:\n   - ÎP+ is the price change when YTM decreases\n   - ÎP- is the price change when YTM increases\n   - P is the current price\n   - Îy is the change in YTM\n5. We return the calculated convexity.\n\nThis program will give an approximation of the bond's convexity based on the given price changes for small changes in YTM."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "Here's a Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n    \n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    # Round the result to two decimal places for better readability\n    price_to_sales_ratio = round(price_to_sales_ratio, 2)\n    \n    # return answer\n    return price_to_sales_ratio\n```\n\nThis program calculates the price-to-sales ratio for PetroChem Co based on the given information. The price-to-sales ratio is a valuation metric that compares a company's stock price to its revenues. It's calculated by dividing the current share price by the net sales per share.\n\nIn this case, the program:\n1. Defines the net sales per share ($35) and current share price ($56) as variables.\n2. Calculates the price-to-sales ratio by dividing the current share price by the net sales per share.\n3. Rounds the result to two decimal places for better readability.\n4. Returns the calculated price-to-sales ratio.\n\nWhen you run this function, it will return 1.60, which represents the price-to-sales ratio for PetroChem Co. This ratio suggests that investors are willing to pay $1.60 for every dollar of sales the company generates.\n\nGiven the recent economic slump and its negative impact on the cyclical petrochemical industry, this price-to-sales ratio of 1.60 might be considered relatively high. However, the appropriateness of this ratio would depend on various factors such as the company's growth prospects, profitability, and how it compares to industry peers."
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 9000\n    accounts_payable = 600\n    days_in_year = 365\n\n    # Do math calculation to get the answer\n    payables_turnover = cost_of_goods_sold / accounts_payable\n    days_of_payables = days_in_year / payables_turnover\n\n    # return answer\n    return days_of_payables\n```\n\nThis Python program calculates the days of payables for the current year based on the given data. Here's a breakdown of the calculation:\n\n1. We define the relevant variables from the provided data:\n   - Cost of goods sold for the current year: $9,000\n   - Accounts payable for the current year: $600\n   - Days in a year: 365 (as specified in the question)\n\n2. We calculate the payables turnover ratio:\n   Payables turnover = Cost of goods sold / Accounts payable\n\n3. Then we calculate the days of payables:\n   Days of payables = Days in a year / Payables turnover\n\n4. The function returns the calculated days of payables.\n\nWhen you run this function, it will return the number of days of payables for the current year, which represents how long the company takes to pay its suppliers."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_a_value = 5000000\n    asset_a_marginal_var = 0.0452\n    asset_b_value = 3000000\n    asset_b_marginal_var = 0.0332\n    \n    # Do math calculation to get the answer\n    asset_a_component_var = asset_a_value * asset_a_marginal_var\n    asset_b_component_var = asset_b_value * asset_b_marginal_var\n    total_component_var = asset_a_component_var + asset_b_component_var\n    \n    asset_a_contribution = (asset_a_component_var / total_component_var) * 100\n    \n    # return answer\n    return asset_a_contribution\n```\n\nThis Python program calculates the percent contribution to Value at Risk (VaR) from Asset A in the given portfolio. Here's how it works:\n\n1. We define the variables for the values and marginal VaRs of both assets.\n\n2. We calculate the component VaR for each asset by multiplying its value by its marginal VaR.\n\n3. We sum up the component VaRs to get the total component VaR for the portfolio.\n\n4. We calculate Asset A's contribution as a percentage by dividing its component VaR by the total component VaR and multiplying by 100.\n\n5. Finally, we return this percentage as the answer.\n\nThis program will return the percent contribution to VaR from Asset A in the portfolio."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 52\n    trading_days = 252\n    volatility = 0.12\n    confidence_level = 0.99\n    in_the_money_calls = 5000\n    out_of_the_money_calls = 20000\n    futures = 10000\n    \n    # Do math calculation to get the answer\n    import math\n    \n    # Calculate daily volatility\n    daily_volatility = volatility / math.sqrt(trading_days)\n    \n    # Calculate Z-score for 99% confidence level\n    z_score = abs(math.norm.ppf(1 - confidence_level))\n    \n    # Calculate potential loss for one day\n    daily_potential_loss = stock_price * daily_volatility * z_score\n    \n    # Calculate total exposure (assuming deep ITM calls and futures move 1:1 with stock)\n    total_exposure = (in_the_money_calls + futures) * stock_price\n    \n    # Calculate 1-day 99% VaR\n    var = total_exposure * daily_potential_loss\n    \n    # return answer\n    return var\n```\n\nThis Python program calculates the 1-day 99% Value at Risk (VaR) for the given portfolio. Here's a breakdown of the calculation:\n\n1. We first define all the given variables.\n2. We calculate the daily volatility by dividing the annual volatility by the square root of trading days.\n3. We use the inverse of the standard normal cumulative distribution (norm.ppf) to find the Z-score for the 99% confidence level.\n4. We calculate the potential daily loss percentage using the formula: stock price * daily volatility * Z-score.\n5. For the total exposure, we only consider the deep in-the-money call options and futures, as they are likely to move 1:1 with the stock price. We ignore the deep out-of-the-money calls as their delta is close to zero.\n6. Finally, we calculate the VaR by multiplying the total exposure by the potential daily loss.\n\nNote: This calculation assumes that the deep in-the-money calls behave similarly"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    periodic_contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = 2500000\n    \n    # Do math calculation to get the answer\n    pension_expense = service_costs - actuarial_gain\n    \n    # return answer\n    return pension_expense\n```\n\nThis Python program calculates the pension expense for Redwood Inc.'s defined contribution pension plan. Here's how it works:\n\n1. We define the given values as variables:\n   - periodic_contributions = $6 million\n   - service_costs = $0.8 million\n   - actuarial_gain = $2.5 million\n\n2. To calculate the pension expense, we use the formula:\n   pension expense = service costs - actuarial gain\n\n   Note that periodic contributions are not included in the calculation of pension expense for a defined contribution plan. These contributions are simply the amount the company pays into the plan and do not affect the expense calculation.\n\n3. The function returns the calculated pension expense.\n\nWhen you run this function, it will return -1700000, which represents a pension expense of $1.7 million (or more accurately, a pension income, since it's a negative expense due to the large actuarial gain)."
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    aa_corporate_bond_yield = 4.4\n    equity_risk_premium = 8.4\n    \n    # Do math calculation to get the answer\n    predicted_return = aa_corporate_bond_yield + equity_risk_premium\n    \n    # return answer\n    return predicted_return\n\n# Call the function and print the result\nresult = solution()\nprint(f\"The predicted return for the consumer credit industry in 2012 was {result}%\")\n```\n\nThis program uses the bond-yield-plus-risk-premium method to calculate the predicted return for the consumer credit industry in 2012. Here's how it works:\n\n1. We define two variables:\n   - `aa_corporate_bond_yield`: The yield of 10-year AA corporate bonds (4.4% from the table)\n   - `equity_risk_premium`: The equity risk premium (8.4% from the table)\n\n2. We calculate the predicted return by adding these two values together.\n\n3. The function returns the predicted return.\n\nWhen you run this program, it will output:\n\"The predicted return for the consumer credit industry in 2012 was 12.8%\"\n\nThis method assumes that the return for the consumer credit sector can be estimated by adding the equity risk premium to the AA corporate bond yield, which is a common approach in the bond-yield-plus-risk-premium method."
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "Based on the information provided, I'll create a Python program to calculate the normalized EPS. Here's the solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100000000  # 2100 million\n    total_liabilities = 1200000000  # 1200 million\n    preferred_equity = 120000000  # 120 million\n    common_shares_outstanding = 32000000  # 32 million shares\n    \n    # Calculate average ROE from the given table\n    roe_values = [0.1200, 0.1310, 0.1055, 0.1120, 0.1205]\n    avg_roe = sum(roe_values) / len(roe_values)\n    \n    # Do math calculation to get the answer\n    common_equity = total_assets - total_liabilities - preferred_equity\n    normalized_earnings = common_equity * avg_roe\n    normalized_eps = normalized_earnings / common_shares_outstanding\n    \n    # return answer\n    return normalized_eps\n```\n\nThis program does the following:\n\n1. Defines the given variables: total assets, total liabilities, preferred equity, and number of common shares outstanding.\n\n2. Calculates the average ROE using the values from the provided table.\n\n3. Calculates the common equity by subtracting total liabilities and preferred equity from total assets.\n\n4. Computes the normalized earnings by multiplying common equity with the average ROE.\n\n5. Calculates the normalized EPS by dividing normalized earnings by the number of common shares outstanding.\n\n6. Returns the normalized EPS as the answer.\n\nThis approach uses the average ROE over the given years to estimate the company's normalized earnings, which is then used to calculate the normalized EPS. This method helps smooth out cyclical fluctuations in earnings, as suggested by Brian in the question."
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "Here's a Python program to calculate the average effective spread based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    trade_prices = [25.20, 25.22, 25.27]\n    ask_prices = [25.20, 25.22, 25.26]\n    trade_sizes = [1200, 1300, 2500]\n    total_shares = sum(trade_sizes)\n\n    # Do math calculation to get the answer\n    effective_spreads = []\n    for i in range(3):\n        effective_spread = 2 * abs(trade_prices[i] - ask_prices[i])\n        effective_spreads.append(effective_spread)\n\n    weighted_spreads = [spreads * sizes for spreads, sizes in zip(effective_spreads, trade_sizes)]\n    average_effective_spread = sum(weighted_spreads) / total_shares\n\n    # return answer\n    return round(average_effective_spread, 4)\n```\n\nThis program calculates the average effective spread as follows:\n\n1. We define the trade prices, ask prices, and trade sizes from the given table.\n\n2. We calculate the effective spread for each trade using the formula: 2 * |Trade Price - Ask Price|\n\n3. We then calculate the weighted average of these effective spreads, where the weights are the trade sizes.\n\n4. The result is rounded to 4 decimal places to provide a reasonable level of precision.\n\nNote that this calculation assumes that the effective spread is based on the ask price for a market buy order, as mentioned in the question. The program returns the average effective spread in dollars per share."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mrr_swap_rate = 0.0100  # 1.00% expressed as a decimal\n    treasury_yield = 0.0063  # 0.63% expressed as a decimal\n    \n    # Do math calculation to get the answer\n    swap_spread = mrr_swap_rate - treasury_yield\n    \n    # Convert to basis points\n    swap_spread_bps = swap_spread * 10000\n    \n    # return answer\n    return swap_spread_bps\n```\n\nThis Python program calculates the swap spread for a two-year fixed-for-floating MRR swap. Here's how it works:\n\n1. We define the variables:\n   - `mrr_swap_rate`: The fixed rate of the MRR swap (1.00% or 0.0100 in decimal form)\n   - `treasury_yield`: The yield of the two-year US Treasury bond (0.63% or 0.0063 in decimal form)\n\n2. We calculate the swap spread by subtracting the treasury yield from the MRR swap rate.\n\n3. We convert the result to basis points by multiplying by 10000. This is because swap spreads are typically quoted in basis points.\n\n4. The function returns the swap spread in basis points.\n\nWhen you run this function, it will return 37.0, which means the swap spread is 37 basis points."
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    beta = 1.1\n    market_risk_premium = 0.05\n    dividend_year1 = 1.13\n    dividend_year2 = 1.22\n    long_term_growth_rate = 0.05\n\n    # Do math calculation to get the answer\n    \n    # Calculate required return using CAPM\n    required_return = risk_free_rate + beta * market_risk_premium\n\n    # Calculate present value of dividends for years 1 and 2\n    pv_dividend1 = dividend_year1 / (1 + required_return)\n    pv_dividend2 = dividend_year2 / ((1 + required_return) ** 2)\n\n    # Calculate terminal value at the end of year 2\n    dividend_year3 = dividend_year2 * (1 + long_term_growth_rate)\n    terminal_value = dividend_year3 / (required_return - long_term_growth_rate)\n    pv_terminal_value = terminal_value / ((1 + required_return) ** 2)\n\n    # Sum up the present values to get the stock price\n    stock_price = pv_dividend1 + pv_dividend2 + pv_terminal_value\n\n    # return answer\n    return round(stock_price, 2)\n```"
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7000000000000001,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    actual_sentiments = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    target_p_values = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54]\n    threshold_p_value = 0.65\n    total_samples = len(actual_sentiments)\n    \n    # Do math calculation to get the answer\n    correct_predictions = 0\n    \n    for actual, p_value in zip(actual_sentiments, target_p_values):\n        predicted = 1 if p_value >= threshold_p_value else 0\n        if predicted == actual:\n            correct_predictions += 1\n    \n    accuracy = correct_predictions / total_samples\n    \n    # return answer\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price = 10\n    num_bonds = 2\n    portfolio_value = bond_price * num_bonds\n    duration1 = 1\n    duration2 = 9\n    yield_rate = 0.05\n    daily_yield_volatility = 0.01\n    confidence_level = 0.95\n\n    # Do math calculation to get the answer\n    # Calculate the weighted average duration\n    weighted_avg_duration = (duration1 + duration2) / 2\n\n    # Calculate the daily price volatility\n    daily_price_volatility = daily_yield_volatility * weighted_avg_duration\n\n    # Calculate the daily VAR at 95% confidence level\n    # Using the normal distribution, 95% confidence is approximately 1.645 standard deviations\n    daily_var = portfolio_value * daily_price_volatility * 1.645\n\n    # return answer\n    return daily_var\n```\n\nThis Python program calculates the daily Value at Risk (VAR) for the given portfolio of two zero-coupon bonds at a 95% confidence level. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information.\n2. We calculate the weighted average duration of the portfolio, which is simply the average of the two bond durations in this case.\n3. We use the relationship between yield changes and price changes: ÎP â -D * ÎY * P, where D is duration, ÎY is the change in yield, and P is the price. This gives us the daily price volatility.\n4. For a 95% confidence level in a normal distribution, we use approximately 1.645 standard deviations.\n5. We multiply the portfolio value by the daily price volatility and the 1.645 factor to get the daily VAR.\n\nThe function will return the estimated daily VAR for the portfolio at the 95% confidence level."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100\n    cash_flow_year1 = 40\n    cash_flow_year2 = 80\n    cash_flow_year3 = 120\n    required_rate = 0.20\n\n    # Do math calculation to get the answer\n    present_value_year1 = cash_flow_year1 / (1 + required_rate)**1\n    present_value_year2 = cash_flow_year2 / (1 + required_rate)**2\n    present_value_year3 = cash_flow_year3 / (1 + required_rate)**3\n    \n    total_present_value = present_value_year1 + present_value_year2 + present_value_year3\n    \n    npv = total_present_value - initial_investment\n\n    # return answer\n    return round(npv, 2)\n```\n\nThis Python program calculates the Net Present Value (NPV) for the given investment scenario. Here's how it works:\n\n1. We define the variables for the initial investment, cash flows for each year, and the required rate of return.\n\n2. We calculate the present value of each year's cash flow by discounting it back to the present using the required rate of return.\n\n3. We sum up all the present values to get the total present value of future cash flows.\n\n4. We subtract the initial investment from the total present value to get the NPV.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThe function will return the Net Present Value of the investment, which represents the profitability of the project in today's dollars."
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|Â£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per Â£100)|Â£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "Here's the Python program to calculate the interest cost for the year 2014 under IFRS:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 50000000  # Â£50 million\n    coupon_rate = 0.04  # 4%\n    issue_price_per_100 = 92.28\n    market_interest_rate = 0.05  # 5%\n    \n    # Do math calculation to get the answer\n    \n    # Calculate the total issue price\n    total_issue_price = (issue_price_per_100 / 100) * face_value\n    \n    # Calculate the annual coupon payment\n    annual_coupon_payment = face_value * coupon_rate\n    \n    # Calculate the interest cost using the effective interest method\n    interest_cost = total_issue_price * market_interest_rate\n    \n    # Convert to millions and round to 2 decimal places\n    interest_cost_millions = round(interest_cost / 1000000, 2)\n    \n    # return answer\n    return interest_cost_millions\n```\n\nThis program calculates the interest cost for the year 2014 under IFRS using the effective interest method. Here's a breakdown of the steps:\n\n1. We define the variables based on the given information.\n2. We calculate the total issue price by multiplying the face value by the issue price per Â£100.\n3. We calculate the annual coupon payment, which is the face value multiplied by the coupon rate.\n4. The interest cost is calculated using the effective interest method, which is the total issue price multiplied by the market interest rate.\n5. We convert the result to millions and round it to two decimal places for better readability.\n6. Finally, we return the calculated interest cost in millions of pounds.\n\nThis approach aligns with IFRS requirements, which mandate the use of the effective interest method for calculating interest expenses on bonds."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_and_investments = 750000\n    human_capital = 1200000\n    human_capital_equity_percentage = 0.30\n    target_total_equity_allocation = 0.45\n\n    # Do math calculation to get the answer\n    total_economic_wealth = cash_and_investments + human_capital\n    human_capital_equity = human_capital * human_capital_equity_percentage\n    total_target_equity = total_economic_wealth * target_total_equity_allocation\n    required_financial_capital_equity = total_target_equity - human_capital_equity\n    financial_capital_equity_allocation = required_financial_capital_equity / cash_and_investments\n\n    # return answer\n    return financial_capital_equity_allocation\n```\n\nThis Python program calculates the required financial capital equity allocation for James to reach the desired equity allocation for his total economic wealth. Here's a breakdown of the calculation:\n\n1. We define the given variables: cash and investments, human capital, the percentage of human capital similar to equity, and the target total equity allocation.\n\n2. We calculate the total economic wealth by adding cash and investments to human capital.\n\n3. We determine the amount of human capital that is similar to equity.\n\n4. We calculate the total target equity based on the desired allocation of 45% of total economic wealth.\n\n5. We subtract the human capital equity from the total target equity to get the required financial capital equity.\n\n6. Finally, we divide the required financial capital equity by the cash and investments to get the financial capital equity allocation.\n\nThe program returns this allocation as a decimal (e.g., 0.5 would mean 50%). You can multiply the result by 100 to get a percentage if needed."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 2.5\n    growth_rate = 0.05\n    required_return = 0.12\n    years_until_dividend = 4\n\n    # Do math calculation to get the answer\n    \n    # Calculate the present value of the future dividend stream\n    dividend_in_year_5 = initial_dividend\n    present_value_of_dividends = dividend_in_year_5 / ((1 + required_return) ** years_until_dividend)\n    \n    # Calculate the present value of the growing perpetuity starting from year 6\n    perpetuity_value = (dividend_in_year_5 * (1 + growth_rate)) / (required_return - growth_rate)\n    present_value_of_perpetuity = perpetuity_value / ((1 + required_return) ** years_until_dividend)\n    \n    # Sum up the present values to get the intrinsic value\n    intrinsic_value = present_value_of_dividends + present_value_of_perpetuity\n\n    # return answer\n    return round(intrinsic_value, 2)\n```\n\nThis Python program calculates the intrinsic value of Firm B's stock based on the given information. Here's how it works:\n\n1. We define the variables based on the given information:\n   - The initial dividend of $2.5 in year 5\n   - The growth rate of 5% (0.05)\n   - The required return of 12% (0.12)\n   - The number of years until the first dividend (4)\n\n2. We calculate the present value of the dividend in year 5.\n\n3. We calculate the present value of the growing perpetuity starting from year 6, using the Gordon Growth Model formula.\n\n4. We sum these two present values to get the intrinsic value of the stock.\n\n5. Finally, we round the result to two decimal places and return it.\n\nThis program will return the intrinsic value of Firm B's stock in dollars."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "def solution():\n    # Define variables name and value\n    face_value = 5000000\n    market_rate = 0.03\n    coupon_rate = 0.025\n    years = 3\n\n    # Do math calculation to get the answer\n    annual_interest = face_value * coupon_rate\n    present_value_factor = (1 - (1 + market_rate) ** -years) / market_rate\n    interest_present_value = annual_interest * present_value_factor\n    principal_present_value = face_value / (1 + market_rate) ** years\n    bond_value = interest_present_value + principal_present_value\n\n    # Since the coupon rate is less than the market rate, the bond will sell at a discount\n    discount = face_value - bond_value\n\n    # The bonds payable will be reported at face value minus the discount\n    bonds_payable = face_value - discount\n\n    # return answer\n    return round(bonds_payable, 2)\n\n```\n\nThis Python program calculates how the bonds are most likely reported as bonds payable when issued. Here's an explanation of the steps:\n\n1. We define the variables: face value, market interest rate, coupon rate, and term of the bonds.\n\n2. We calculate the present value of the bond using the market rate:\n   - Calculate the annual interest payment\n   - Calculate the present value of the interest payments\n   - Calculate the present value of the principal\n   - Sum these to get the bond's value\n\n3. Since the coupon rate (2.5%) is less than the market rate (3%), the bond will sell at a discount. We calculate this discount.\n\n4. The bonds payable will be reported at face value minus the discount.\n\n5. We return this value, rounded to two decimal places.\n\nThis program will return the amount at which the bonds are likely to be reported as bonds payable when issued, which will be less than the face value due to the discount."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price = 26.00\n    daily_volatility = 0.015\n    confidence_level = 0.95\n    delta = -0.5\n    holding_period = 1\n\n    # Do math calculation to get the answer\n    import scipy.stats as stats\n    \n    # Calculate z-score for 95% confidence level\n    z_score = stats.norm.ppf(confidence_level)\n    \n    # Calculate VaR for the underlying stock\n    stock_var = share_price * daily_volatility * z_score\n    \n    # Calculate VaR for the put option using delta\n    option_var = abs(delta) * stock_var\n    \n    # Adjust for holding period (not necessary for 1-day, but included for completeness)\n    var = option_var * (holding_period ** 0.5)\n    \n    # return answer\n    return round(var, 2)\n```\n\nThis Python program calculates the Value at Risk (VaR) for a long position in an at-the-money put option on Mega Healthcare Solutions Ltd. shares using the delta-normal approach. Here's a breakdown of the calculation:\n\n1. We define the given variables: share price, daily volatility, confidence level, delta of the put option, and holding period.\n\n2. We use the scipy.stats module to calculate the z-score for the 95% confidence level.\n\n3. We calculate the VaR for the underlying stock using the formula: stock_var = share_price * daily_volatility * z_score\n\n4. We then adjust this VaR for the put option using the delta: option_var = abs(delta) * stock_var\n\n5. Although not necessary for a 1-day holding period, we include the adjustment for the holding period for completeness: var = option_var * (holding_period ** 0.5)\n\n6. Finally, we return the calculated VaR rounded to two decimal places.\n\nThis program will return the VaR in USD for the specified put option position."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "Here's the Python program to calculate the yearly geometric mean return of the investment over the three-year period:\n\n```python\ndef solution():\n    # Define variables name and value\n    return_2009 = 0.20  # 20% return in 2009\n    return_2010 = -0.30  # -30% return in 2010\n    return_2011 = 0.15  # 15% return in 2011\n    years = 3\n\n    # Do math calculation to get the answer\n    cumulative_return = (1 + return_2009) * (1 + return_2010) * (1 + return_2011)\n    geometric_mean = (cumulative_return ** (1/years)) - 1\n\n    # return answer\n    return geometric_mean * 100  # Convert to percentage\n```\n\nThis program calculates the geometric mean return as follows:\n\n1. We define the returns for each year as decimals.\n2. We calculate the cumulative return by multiplying (1 + return) for each year.\n3. We then take the nth root of the cumulative return, where n is the number of years (3 in this case).\n4. Finally, we subtract 1 from the result and multiply by 100 to get the percentage.\n\nThe function will return the yearly geometric mean return as a percentage."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.6\n    risk_free_rate = 0.08\n    market_return = 0.15\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```\n\nThis Python program calculates the expected return on a stock using the Capital Asset Pricing Model (CAPM). Here's a breakdown of the solution:\n\n1. We define the given variables:\n   - `beta` is set to 0.6 as given in the question\n   - `risk_free_rate` is set to 0.08 (8% converted to decimal)\n   - `market_return` is set to 0.15 (15% converted to decimal)\n\n2. We use the CAPM formula to calculate the expected return:\n   Expected Return = Risk-free Rate + Beta * (Market Return - Risk-free Rate)\n\n3. The function returns the calculated expected return.\n\nWhen you run this function, it will return the expected return as a decimal. To convert it to a percentage, you can multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    neutral_real_rate = 0.0225  # 2.25%\n    desired_inflation = 0.02  # 2%\n    projected_growth = 0.025  # 2.5%\n    predicted_growth = 0.035  # 3.5%\n    anticipated_inflation = 0.03  # 3%\n\n    # Do math calculation to get the answer\n    output_gap = predicted_growth - projected_growth\n    inflation_gap = anticipated_inflation - desired_inflation\n    \n    # Taylor rule: r = p + y + 0.5(y - y*) + 0.5(p - p*)\n    # where r is the nominal policy rate, p is the neutral real rate,\n    # y is the anticipated inflation, y* is the desired inflation,\n    # and p* is the projected growth\n    \n    nominal_policy_rate = (neutral_real_rate + \n                           anticipated_inflation + \n                           0.5 * output_gap + \n                           0.5 * inflation_gap)\n\n    # return answer\n    return nominal_policy_rate\n```"
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.019\n    expected_pe_growth = -0.012\n    expected_income_component = 0.018\n    expected_real_eps_growth = 0.027\n    expected_shares_change = 0.000\n    current_govt_bond_yield = 0.0096\n    long_term_market_return = 0.0996\n    long_term_govt_bond_return = 0.0315\n\n    # Do math calculation to get the answer\n    expected_nominal_return = (1 + expected_inflation) * (1 + expected_real_eps_growth) * (1 + expected_pe_growth) - 1\n    expected_total_return = expected_nominal_return + expected_income_component + expected_shares_change\n    \n    erp = expected_total_return - current_govt_bond_yield\n\n    # return answer\n    return erp * 100  # Convert to percentage\n```\n\nThis Python function calculates the forward-looking Equity Risk Premium (ERP) using the Grinold-Kroner model based on the provided data. Here's a breakdown of the calculation:\n\n1. We define all the given variables with their respective values.\n\n2. We calculate the expected nominal return using the formula:\n   (1 + inflation) * (1 + real EPS growth) * (1 + P/E growth) - 1\n\n3. We then calculate the expected total return by adding the expected nominal return, the income component, and the change in shares outstanding.\n\n4. The ERP is calculated by subtracting the current government bond yield from the expected total return.\n\n5. Finally, we return the ERP as a percentage (multiplied by 100).\n\nThis function will return the projected forward-looking ERP based on the Grinold-Kroner model using the provided data."
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class â1â or negative sentiment (Class â0â). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    true_positives = 182\n    false_positives = 52\n    false_negatives = 31\n    true_negatives = 96\n    \n    # Do math calculation to get the answer\n    total_predictions = true_positives + false_positives + false_negatives + true_negatives\n    correct_predictions = true_positives + true_negatives\n    \n    accuracy = correct_predictions / total_predictions\n    \n    # return answer\n    return accuracy\n```\n\nThis Python function calculates the accuracy metric for the confusion matrix provided in the question. Here's a breakdown of what the function does:\n\n1. We define variables for each cell in the confusion matrix:\n   - true_positives (TP) = 182\n   - false_positives (FP) = 52\n   - false_negatives (FN) = 31\n   - true_negatives (TN) = 96\n\n2. We calculate the total number of predictions by summing all cells in the confusion matrix.\n\n3. We calculate the number of correct predictions by summing the true positives and true negatives.\n\n4. The accuracy is calculated by dividing the number of correct predictions by the total number of predictions.\n\n5. Finally, we return the calculated accuracy.\n\nThis function will return the accuracy as a decimal between 0 and 1. To get the percentage, you would multiply the result by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_participants = 15\n    prizes = 3  # number of prizes to be given\n\n    # Do math calculation to get the answer\n    # We use the permutation formula: P(n,r) = n! / (n-r)!\n    # Where n is the total number of participants and r is the number of prizes\n    numerator = 1\n    for i in range(total_participants, total_participants - prizes, -1):\n        numerator *= i\n    \n    answer = numerator\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the number of different ways the prizes can be given to the top performers in the sports competition. Here's an explanation of the solution:\n\n1. We define the total number of participants (15) and the number of prizes to be given (3).\n\n2. We use the permutation formula P(n,r) = n! / (n-r)!, where n is the total number of participants and r is the number of prizes. This formula calculates the number of ways to select and arrange r items from a set of n items.\n\n3. Since we're only interested in the numerator of this formula (as the denominator would always be 1 in this case), we calculate the product of (n) * (n-1) * (n-2) ... for r times.\n\n4. We use a for loop to multiply the numbers from 15 down to 13 (15 * 14 * 13).\n\n5. The result of this calculation gives us the number of different ways the prizes can be distributed.\n\nThis solution correctly accounts for the order of prize distribution (1st, 2nd, 3rd) and the fact that each participant can only win one prize."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delta = 100000  # barrels\n    gamma = -50000  # barrels per dollar price shift\n    max_price_shift = 2.00  # dollars per barrel\n\n    # Do math calculation to get the answer\n    delta_effect = delta * max_price_shift\n    gamma_effect = 0.5 * gamma * (max_price_shift ** 2)\n    var = abs(delta_effect + gamma_effect)\n\n    # return answer\n    return var\n```\n\nThis Python program calculates the Value at Risk (VaR) for the given option stance using the delta-gamma approach. Here's a breakdown of the calculation:\n\n1. We define the variables based on the given information:\n   - `delta` is 100,000 barrels\n   - `gamma` is -50,000 barrels per dollar price shift\n   - `max_price_shift` is $2.00 per barrel\n\n2. We calculate the VaR using the delta-gamma approach:\n   - The delta effect is calculated as `delta * max_price_shift`\n   - The gamma effect is calculated as `0.5 * gamma * (max_price_shift ** 2)`\n   - The total VaR is the absolute value of the sum of these two effects\n\n3. The function returns the calculated VaR.\n\nThis approach takes into account both the linear (delta) and non-linear (gamma) components of the option's price sensitivity to changes in the underlying asset price, providing a more accurate estimate of potential losses than a simple delta-based approach."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 25\n    own_investment = 10000\n    borrowed_amount = 10000\n    total_investment = own_investment + borrowed_amount\n    preservation_margin = 0.30\n\n    # Do math calculation to get the answer\n    number_of_shares = total_investment / stock_price\n    equity = total_investment - borrowed_amount\n    \n    # Calculate the price that will trigger a margin call\n    # At this price, equity should equal preservation_margin * total_value\n    # equity = (number_of_shares * trigger_price) - borrowed_amount\n    # preservation_margin * (number_of_shares * trigger_price) = (number_of_shares * trigger_price) - borrowed_amount\n    \n    trigger_price = borrowed_amount / (number_of_shares * (1 - preservation_margin))\n\n    # return answer\n    return round(trigger_price, 2)\n```\n\nThis Python program calculates the stock price that would trigger a margin call based on the given information. Here's a breakdown of the solution:\n\n1. We define the variables with the given values: stock price, own investment, borrowed amount, total investment, and preservation margin.\n\n2. We calculate the number of shares purchased and the initial equity.\n\n3. To find the trigger price, we use the concept that at the margin call point, the equity should equal the preservation margin multiplied by the total value of the stocks.\n\n4. We solve the equation for the trigger price and calculate it.\n\n5. Finally, we return the trigger price rounded to two decimal places, as it represents a dollar amount.\n\nThis program will return the stock price that will trigger a margin call given the initial conditions."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    aum_previous_year = 288000000\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.05\n    high_water_mark = 357000000\n    fund_yield = 0.25\n\n    # Do math calculation to get the answer\n    \n    # Calculate management fee\n    management_fee = aum_previous_year * management_fee_rate\n    \n    # Calculate fund performance\n    fund_performance = aum_previous_year * (1 + fund_yield)\n    \n    # Calculate hurdle amount\n    hurdle_amount = aum_previous_year * (1 + hurdle_rate)\n    \n    # Calculate incentive fee\n    if fund_performance > high_water_mark and fund_performance > hurdle_amount:\n        incentive_fee = (fund_performance - max(high_water_mark, hurdle_amount)) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    # Calculate total fee\n    total_fee = management_fee + incentive_fee\n\n    # return answer\n    return total_fee\n\n```\n\nThis program calculates the overall fee for Circle based on the given information. It first calculates the management fee, then determines if an incentive fee is applicable based on the fund's performance relative to the high-water mark and hurdle rate. Finally, it sums up the management fee and incentive fee (if any) to get the total fee."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.9030000000000005,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.25\n    weight_y = 0.75\n    std_dev_x = 0.179\n    std_dev_y = 0.062\n    correlation = 0.5\n\n    # Do math calculation to get the answer\n    variance_x = std_dev_x ** 2\n    variance_y = std_dev_y ** 2\n    \n    portfolio_variance = (weight_x ** 2 * variance_x) + \\\n                         (weight_y ** 2 * variance_y) + \\\n                         (2 * weight_x * weight_y * correlation * std_dev_x * std_dev_y)\n    \n    portfolio_std_dev = portfolio_variance ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis program calculates the portfolio's standard deviation using the following steps:\n\n1. Define the given variables: weights, standard deviations, and correlation coefficient.\n2. Calculate the variance of each component by squaring their standard deviations.\n3. Use the portfolio variance formula to compute the overall portfolio variance.\n4. Take the square root of the portfolio variance to get the portfolio standard deviation.\n5. Return the calculated portfolio standard deviation as the answer.\n\nThe formula used for portfolio variance is:\nÏÂ²p = wÂ²x * ÏÂ²x + wÂ²y * ÏÂ²y + 2 * wx * wy * Ïxy * Ïx * Ïy\n\nWhere:\n- ÏÂ²p is the portfolio variance\n- wx and wy are the weights of components X and Y\n- ÏÂ²x and ÏÂ²y are the variances of components X and Y\n- Ïxy is the correlation coefficient between X and Y\n- Ïx and Ïy are the standard deviations of components X and Y\n\nThe square root of the portfolio variance gives us the portfolio standard deviation."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "Here's a Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_value = 160_000_000\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.10\n    high_water_mark = 198_000_000\n\n    # Do math calculation to get the answer\n    end_value_before_fees = initial_value * (1 + growth_rate)\n    \n    # Calculate management fee\n    management_fee = end_value_before_fees * management_fee_rate\n    \n    # Calculate net return after management fee\n    net_return = (end_value_before_fees - management_fee - initial_value) / initial_value\n    \n    # Calculate incentive fee\n    if end_value_before_fees > high_water_mark and net_return > hurdle_rate:\n        excess_return = net_return - hurdle_rate\n        incentive_fee = excess_return * initial_value * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    # Calculate total fees\n    total_fees = management_fee + incentive_fee\n\n    # return answer\n    return total_fees\n\n```\n\nThis program calculates the total fees collected by the investment company based on the given information and fee structure. It takes into account the \"2 and 20\" fee scheme, the soft hurdle rate, and the high-water mark. The solution function returns the total fees collected in dollars."
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    noi_year1 = 2775840\n    noi_year2 = 2859119\n    \n    # Do math calculation to get the answer\n    growth_rate = (noi_year2 - noi_year1) / noi_year1 * 100\n    \n    # return answer\n    return round(growth_rate, 2)\n```\n\nThis Python function calculates the growth rate of the Net Operating Income (NOI) from Year 1 to Year 2, which represents the annual growth rate of the real estate property.\n\nThe function does the following:\n\n1. Defines the NOI values for Year 1 and Year 2.\n2. Calculates the growth rate using the formula: (New Value - Original Value) / Original Value * 100\n3. Rounds the result to 2 decimal places for precision.\n4. Returns the calculated growth rate.\n\nWhen you run this function, it will return the growth rate as a percentage, which is approximately 3.00%."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "Here's a Python program to calculate the standard deviation of the investment portfolio based on the given information:\n\n```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.30\n    weight_y = 0.70\n    std_dev_x = 0.25\n    std_dev_y = 0.10\n    correlation = 0.8\n\n    # Do math calculation to get the answer\n    variance_x = std_dev_x ** 2\n    variance_y = std_dev_y ** 2\n    \n    portfolio_variance = (weight_x ** 2 * variance_x) + \\\n                         (weight_y ** 2 * variance_y) + \\\n                         (2 * weight_x * weight_y * correlation * std_dev_x * std_dev_y)\n    \n    portfolio_std_dev = (portfolio_variance) ** 0.5\n\n    # return answer\n    return portfolio_std_dev\n```\n\nThis program calculates the standard deviation of the investment portfolio using the following steps:\n\n1. Define the given variables: weights of assets X and Y, their individual standard deviations, and the correlation coefficient between them.\n\n2. Calculate the variance of each asset by squaring its standard deviation.\n\n3. Use the portfolio variance formula:\n   Var(portfolio) = (w_x^2 * var_x) + (w_y^2 * var_y) + (2 * w_x * w_y * corr_xy * std_dev_x * std_dev_y)\n\n4. Calculate the portfolio standard deviation by taking the square root of the portfolio variance.\n\n5. Return the calculated portfolio standard deviation as the answer.\n\nThis solution provides a precise calculation of the portfolio's standard deviation considering the weights, individual asset standard deviations, and their correlation."
        ]
    }
]