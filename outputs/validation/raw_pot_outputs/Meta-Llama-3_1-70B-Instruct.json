[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    salvage_value_truck = 15000\n    estimated_life_truck = 8\n    current_fair_value_truck = 27000\n    fair_value_land = 21000\n    depreciation_rate = 0.20\n    \n    # Calculate book value of the truck after 3 years\n    book_value_truck = original_cost_truck * (1 - depreciation_rate) ** 3\n    \n    # Calculate the gain or loss\n    gain_loss = current_fair_value_truck - book_value_truck\n    \n    # Check if there's a loss\n    if gain_loss < 0:\n        loss = abs(gain_loss)\n    else:\n        loss = 0\n    \n    # return loss\n    return loss\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 2.0979  # spot exchange rate from NZD to GBP\n    libor_rate_gbp = 0.016025  # Libor interest rate for GBP\n    libor_rate_nzd = 0.032875  # Libor interest rate for NZD\n    days = 180  # number of days\n    year_basis = 360  # year basis\n    \n    # Convert interest rates from percent to decimal and adjust for year basis\n    libor_rate_gbp = libor_rate_gbp / 100 * (days / year_basis)\n    libor_rate_nzd = libor_rate_nzd / 100 * (days / year_basis)\n    \n    # Calculate forward points\n    forward_points = (libor_rate_gbp - libor_rate_nzd) * spot_rate\n    \n    # return answer with four decimal places\n    return round(forward_points, 4)\n```"
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    std_dev_us_re = 0.14  # Standard deviation of U.S. real estate\n    cov_us_re_gim = 0.0075  # Covariance of U.S. real estate with GIM\n    std_dev_gim = (0.36 * (0.072 - 0.031)) / 0.36  # Standard deviation of GIM calculated from Sharpe Ratio\n    \n    # Do math calculation to get the answer\n    beta_us_re = cov_us_re_gim / (std_dev_gim ** 2)\n    \n    # return answer\n    return beta_us_re\n```\n\nThis program first defines the given variables, then calculates the standard deviation of the Global Investable Market (GIM) using the Sharpe Ratio formula. Finally, it calculates the beta of U.S. real estate equities using the formula for beta in the context of the Capital Asset Pricing Model (CAPM), which is the covariance of the asset's returns with the market's returns divided by the variance of the market's returns."
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_spot_price = 1.3983\n    three_months_forward = -21.6\n    eur_libor = 1.814 / 100  # Convert LIBOR from percentage to decimal\n    amount_of_share = 200000\n    share_price = 90\n    time = 0.5  # In years\n    \n    # Do math calculation to get the answer\n    # Calculate forward price at 3 months\n    forward_price_at_3_months = initial_spot_price + (initial_spot_price * (three_months_forward / 10000))\n    \n    # Calculate forward price agreed at 6 months\n    forward_price_at_6_months = initial_spot_price * (1 + (eur_libor * time)) / (1 + (eur_libor * time))\n    forward_price_at_6_months_agreed = initial_spot_price + (initial_spot_price * (-19.0 / 10000))\n    \n    # Calculate the difference between the forward price at 3 months and agreed price at 6 months\n    diff = (forward_price_at_6_months_agreed - forward_price_at_3_months)\n    \n    # Calculate cash expenditure\n    cash_expenditure = (diff * amount_of_share * share_price) * -1\n    \n    # return answer\n    return cash_expenditure\n\n# Call the function\ncash_expenditure = solution()\nprint(cash_expenditure)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value = 3700000\n    daily_fluctuation = 0.0004\n    trading_days_in_year = 250\n    confidence_level = 0.95\n    mean_return = 0\n    \n    # Import necessary libraries\n    from scipy.stats import norm\n    \n    # Do math calculation to get the answer\n    # Calculate the standard deviation for one day\n    std_dev_one_day = market_value * daily_fluctuation\n    \n    # Calculate the standard deviation for one year\n    std_dev_one_year = std_dev_one_day * (trading_days_in_year ** 0.5)\n    \n    # Calculate the z-score for the given confidence level\n    z_score = norm.ppf(1 - confidence_level)\n    \n    # Calculate the VaR at the 95% confidence level\n    var = market_value - (market_value * mean_return + (z_score * std_dev_one_year))\n    \n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_failure = 0.40  # Probability of failure\n    P_success = 0.55  # Probability of success\n    P_success_survival = 0.85  # Probability of success given survival\n    \n    # Do math calculation to get the answer\n    # Using the total probability rule to calculate P(success | failure)\n    PFailureAndSuccess = P_success * (1 - P_success_survival)\n    Pfailure = P_failure * (1 - P_success_survival)\n    answer = PFailureAndSuccess / P_failure\n    \n    # Return answer\n    return answer\n\n# Execute the function using print\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_shares = [35, 25, 20, 10, 10]\n    \n    # Sort the market shares in descending order and select the top three\n    top_three_shares = sorted(market_shares, reverse=True)[:3]\n    \n    # Convert market shares from percentages to decimal values\n    top_three_shares = [share / 100 for share in top_three_shares]\n    \n    # Calculate the squares of the top three market shares\n    squared_shares = [share ** 2 for share in top_three_shares]\n    \n    # Calculate the Herfindahl-Hirschman Index (HHI) for the top three firms\n    hhi = sum(squared_shares)\n    \n    # return answer\n    return hhi\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    swap_rate = 1.00  # in percent\n    treasury_bond_yield = 0.63  # in percent\n    \n    # Do math calculation to get the answer\n    swap_spread = swap_rate - treasury_bond_yield\n    \n    # return answer\n    return swap_spread\n\nprint(solution())  # Output: 0.37\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    \n    # Do math calculation to get the answer\n    annual_amortization = (acquisition_cost - residual_value) / useful_life\n    accumulated_amortization = annual_amortization * years_passed\n    \n    # return answer\n    return accumulated_amortization\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha \u00d7 [\u03bc - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    previous_correlation = 0.27  # correlation in January 2014\n    mean_reversion = 0.775  # average mean reversion\n    average_correlation = 0.35  # average correlation over a prolonged period\n\n    # Do math calculation to get the answer\n    alpha = mean_reversion\n    mu = average_correlation\n    s_t_minus_1 = previous_correlation\n    s_t = s_t_minus_1 + alpha * (mu - s_t_minus_1)\n    \n    # return answer\n    return s_t\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_year_1 = 0.5\n    dividend_year_2 = 0.5\n    growth_rate = 0.06\n    discount_rate = 0.10\n    \n    # Do math calculation to get the answer\n    present_value_year_1 = dividend_year_1 / (1 + discount_rate)\n    present_value_year_2 = dividend_year_2 / (1 + discount_rate) ** 2\n    \n    terminal_value = dividend_year_2 * (1 + growth_rate) / (discount_rate - growth_rate)\n    present_value_terminal_value = terminal_value / (1 + discount_rate) ** 2\n    \n    worth = present_value_year_1 + present_value_year_2 + present_value_terminal_value\n    \n    # return answer\n    return worth\n\nresult = solution()\nprint(result)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_elasticity_demand = 1.8\n    marginal_cost = 30\n    average_cost = 50\n    \n    # Do math calculation to get the answer\n    # The formula to calculate the most probable price is (elasticity * marginal cost) / (elasticity - 1)\n    price = (price_elasticity_demand * marginal_cost) / (price_elasticity_demand - 1)\n    \n    # However, this would be the ideal price if average cost is zero. \n    # Since the average cost is not zero, we need to find a different approach to calculate the price\n    # One way to do this is by using the formula: price = average cost * (1 + (1 / price elasticity demand))\n    adjusted_price = average_cost * (1 + (1 / price_elasticity_demand))\n    \n    # But a widely used formula for a firm facing a downward-sloping demand curve is (elasticity * MC) / (elasticity - 1) multiplied by (1 + AC / MC)\n    probable_price = (price_elasticity_demand * marginal_cost) / (price_elasticity_demand - 1) * (1 + (average_cost / marginal_cost))\n    \n    # return answer, choosing probable_price as the most probable price\n    return probable_price\n```"
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 460000\n    value_of_buildings_and_machinery_beginning = 320000\n    value_of_buildings_and_machinery_end = 270000\n    cost_of_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Calculate depreciation ( decrease in the value of buildings and machinery)\n    depreciation = value_of_buildings_and_machinery_beginning - value_of_buildings_and_machinery_end\n    \n    # Calculate total explicit costs (costs that are directly paid)\n    total_explicit_costs = cost_of_raw_materials + wages_paid + depreciation\n    \n    # Calculate economic profit ( Total revenue - Total explicit costs - Normal profit)\n    economic_profit = total_revenue - total_explicit_costs - normal_profit\n    \n    # return answer\n    return economic_profit\n```"
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ebit = 1106  # Earnings before interest and taxes\n    taxes = 294  # Income tax\n    net_capital_expenditure = 535  # 2012 fixed capital investment\n    depreciation_expense = 243  # Depreciation expense\n    \n    # Do math calculation to get the answer\n   EBT = ebit\n    net_income = EBT- taxes\n    FCFF = net_income + depreciation_expense - net_capital_expenditure\n    answer = FCFF\n    \n    # return answer\n    return answer\n\nanswer = solution()\nprint(f\"The final answer is ${answer}.\") \n```"
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    value_in_use = 440000\n    fair_value = 480000\n\n    # Determine the recoverable amount\n    recoverable_amount = max(value_in_use, fair_value)\n\n    # Calculate the impairment loss\n    impairment_loss = carrying_value - recoverable_amount\n\n    # return answer\n    return impairment_loss\n```"
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03  # 3%\n    interest_paid = 2  # Semiannually\n    mature_time = 3  # 3 years\n    required_rate_of_return = 0.05  # 5%\n    par_value = 100\n    \n    # Do math calculation to get the answer\n    # Calculate the coupon payment\n    coupon_payment = par_value * coupon_rate / interest_paid\n    \n    # Calculate the periods\n    periods = mature_time * interest_paid\n    \n    # Calculate the bond price using the present value of annuity formula\n    bond_price = coupon_payment * ((1 - (1 + required_rate_of_return / interest_paid)**(-periods)) / (required_rate_of_return / interest_paid)) + par_value / (1 + required_rate_of_return / interest_paid)**periods\n    \n    # return answer\n    return bond_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of \u20a410 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of \u20a411 per unit. During 2009, Shine sold 12,000 units at a rate of \u20a415 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_units_purchased_oct = 10000\n    cost_per_unit_oct = 10\n    num_units_purchased_nov = 5000\n    cost_per_unit_nov = 11\n    total_units_sold = 12000\n    units_sold_from_oct = 10000\n    units_sold_from_nov = total_units_sold - units_sold_from_oct\n    \n    # Do math calculation to get the answer\n    total_cost_of_goods_sold = (units_sold_from_oct * cost_per_unit_oct) + (units_sold_from_nov * cost_per_unit_nov)\n    \n    # return answer\n    return total_cost_of_goods_sold\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.10200000000000001,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    good_economic_probability = 0.7\n    bad_economic_probability = 0.3\n    good_economic_return1 = 0.2\n    good_economic_return2 = 0.1\n    bad_economic_return1 = 0.05\n    bad_economic_return2 = -0.1\n    good_economic_return_probability1 = 0.5\n    good_economic_return_probability2 = 0.5\n    bad_economic_return_probability1 = 0.6\n    bad_economic_return_probability2 = 0.4\n    \n    # Do math calculation to get the answer\n    good_economic_return = (good_economic_probability * good_economic_return1 * good_economic_return_probability1) + \\\n                           (good_economic_probability * good_economic_return2 * good_economic_return_probability2)\n    bad_economic_return = (bad_economic_probability * bad_economic_return1 * bad_economic_return_probability1) + \\\n                          (bad_economic_probability * bad_economic_return2 * bad_economic_return_probability2)\n    anticipated_portfolio_return = good_economic_return + bad_economic_return\n    \n    # return answer\n    return anticipated_portfolio_return\n\n# Test the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beginning_lifo_inventory = 200000\n    beginning_lifo_reserve = 30000\n    beginning_fifo_inventory = beginning_lifo_inventory - beginning_lifo_reserve\n    \n    ending_lifo_inventory = 250000\n    ending_lifo_reserve = 40000\n    tax_rate = 0.3\n    \n    # Do math calculation to get the answer\n    fifo_increased = ending_lifo_reserve - beginning_lifo_reserve\n    fifo_increase_after_tax = fifo_increased * (1 - tax_rate)\n    ending_fifo_inventory = beginning_fifo_inventory + ending_lifo_inventory - fifo_increased + fifo_increase_after_tax\n    \n    # return answer\n    return ending_fifo_inventory\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    years_until_maturity = 15\n    market_discount_rate = 0.045\n    \n    # Do math calculation to get the answer\n    compound_factor = (1 + market_discount_rate) ** years_until_maturity\n    cost_per_100_par = 100 / compound_factor\n    \n    # return answer\n    return round(cost_per_100_par, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n    \n    # Do math calculation to get the answer\n    call_price = carrying_value - gain_on_redemption + face_value\n    answer = call_price\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    usd_eur = 1.3860\n    eur_cad = 0.6125\n    usd_gbp = 1.4208\n    \n    # Do math calculation to get the answer\n    # First option: (USD/GBP) / (USD/EUR) \n    option1 = usd_gbp / usd_eur\n    \n    # Second option: (EUR/CAD) / (USD/CAD) is not feasible because there is no (USD/CAD) data\n    # But we have (USD/EUR) and (EUR/CAD), so we can use (EUR/CAD) * (USD/EUR)\n    option2 = eur_cad * usd_eur\n    \n    # return the correct option\n    if option1 == option2:\n        return 'Both options are equal and correct'\n    elif abs(option1 - 0.8583) < abs(option2 - 0.8583):\n        return 'Option 1 is more precise'\n    else:\n        return 'Option 2 is more precise'\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    one_year_par_rate = 0.025\n    one_year_spot_rate = 0.025\n    two_year_par_rate = 0.029\n    two_year_spot_rate = 0.03\n    three_year_par_rate = 0.0348\n    three_year_spot_rate = 0.035\n    four_year_par_rate = 0.0395\n    four_year_spot_rate = 0.04\n    five_year_par_rate = 0.0437\n    \n    # Using the provided spot rates to estimate the five-year spot rate.\n    # The one-year and two-year spot rates are given directly.\n    one_year_spot = one_year_spot_rate\n    two_year_spot = two_year_spot_rate\n    \n    # Estimate three-year, four-year spot rates using the par and spot rates for the three-year and four-year periods.\n    # For example, for the 3-year period, PV = 100 * (1 + r3)^(-1) + 100 * (1 + r3)^(-2) + 100 * (1 + r3)^(-3) + 100 * (1 + r3)^(-3) = 100 / (1 + r3) + 100 / (1 + r3)^2 + 100 / (1 + r3)^3 + 100 / (1 + r3)^3\n    # We can simplify it to the equation 100 * Par Rate = 100 / (1 + r3) + 100 / (1 + r3)^2 + 100 / (1 + r3)^3 + 100 / (1 + r3)^3\n    # Therefore, the three-year spot rate is calculated using Newton-Raphson method or numerical methods. In this example, we are using the approximate values from the table.\n    three_year_spot = three_year_spot_rate\n    \n    four_year_spot = four_year_spot_rate\n    \n    # 2 * (1 + r5)^(-5) \n    three_year_annuity = (1 - (1 + three_year_spot)**(-3)) / three_year_spot\n    fourth_year_annuity = (1 - (1 + four_year_spot)**(-4)) / four_year_spot\n    \n    five_year_spot = (1/three_year_annuity * (1 + three_year_spot)**(-3) * (1 + five_year_par_rate) - (1/three"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_rate = 0.08\n    rate_up = 0.10\n    rate_down = 0.06\n    risk_premium = 0.004\n    bond_value = 1000\n    years = 2\n    probability = 0.5\n    \n    # Do math calculation to get the answer\n    # Calculate the one-period discount factors\n    discount_factor_up = 1 / (1 + rate_up)\n    discount_factor_down = 1 / (1 + rate_down)\n    discount_factor_current = 1 / (1 + current_rate)\n    \n    # Calculate the risk-neutral probabilities\n    risk_neutral_probability_up = (1 + current_rate - discount_factor_down) / (discount_factor_up - discount_factor_down)\n    risk_neutral_probability_down = 1 - risk_neutral_probability_up\n    \n    # Calculate the two-period discount factors under the risk-neutral measure\n    discount_factor_2yr_up = (discount_factor_up ** 2) * (risk_neutral_probability_up ** 2)\n    discount_factor_2yr_down = (discount_factor_down ** 2) * (risk_neutral_probability_down ** 2)\n    discount_factor_2yr = discount_factor_2yr_up + discount_factor_2yr_down\n    \n    # Calculate the present value of the bond\n    present_value = bond_value * discount_factor_2yr\n    \n    # Apply the risk premium for duration risk\n    duration = years\n    risk_adjusted_present_value = present_value / (1 + risk_premium * duration)\n    \n    return risk_adjusted_present_value\n```"
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.9380000000000001,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "## Step 1: Define variables and calculate the pooled variance\nTo calculate the pooled variance, we need to calculate the weighted average of the two sample variances. The formula for pooled variance is ((n1-1)*s1^2 + (n2-1)*s2^2) / (n1 + n2 - 2), where n1 and n2 are the sample sizes, and s1^2 and s2^2 are the sample variances.\n\n## Step 2: Define variables and their values\nLet's define the variables and their values. We have sample sizes n1 = 25 and n2 = 18, sample means x1 = 200 and x2 = 185, and sample standard deviations s1 = 45 and s2 = 60.\n\n## Step 3: Calculate the pooled variance\nWe calculate the pooled variance using the formula.\n\n## Step 4: Calculate the t-statistic\nTo calculate the t-statistic, we use the formula t = (x1 - x2) / sqrt(pooled_variance * (1/n1 + 1/n2)), where x1 and x2 are the sample means.\n\n## Step 5: Implement the solution in Python\nHere's how you can implement this in Python:\n\n```python\nimport math\n\ndef solution():\n    # Define variables and their values\n    n1 = 25\n    n2 = 18\n    x1 = 200\n    x2 = 185\n    s1 = 45\n    s2 = 60\n    \n    # Calculate the pooled variance\n    pooled_variance = ((n1-1)*s1**2 + (n2-1)*s2**2) / (n1 + n2 - 2)\n    \n    # calculate the t-statistic\n    t_statistic = (x1 - x2) / math.sqrt(pooled_variance * (1/n1 + 1/n2))\n    \n    # return t-statistic\n    return t_statistic\n\n# Execute the function\nt_statistic_value = solution()\nprint(f\"The final answer is {t_statistic_value}.\")"
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    decrease_in_accounts_receivable = 1324\n    \n    # Do math calculation to get the answer\n    # Calculate Cash paid to suppliers using the formula: \n    # (Cost of Goods Sold - Decrease in Inventory + Increase in Accounts Payable) - Decrease in Accounts Receivable\n    cash_paid_to_suppliers = (cost_of_goods_sold - decrease_in_inventory + increase_in_accounts_payable) - decrease_in_accounts_receivable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\n\nHowever, note that the given formula might be incorrect in the context of calculating cash paid to suppliers. The accurate formula to calculate cash paid to suppliers is typically:\n\n`Cash Paid to Suppliers = Cost of Goods Sold - Increase in Inventory + Increase in Accounts Payable`\n\nThis would make the program:\n\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    increase_in_inventory = -501  # Note that the increase is actually a decrease\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    # Calculate Cash paid to suppliers\n    cash_paid_to_suppliers = cost_of_goods_sold - increase_in_inventory + increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    number_of_options = 20000\n    option_price_on_grant_day = 2.5\n    average_option_price = 2.8\n    fair_value_on_grant_day = 15\n    vesting_period_in_years = 4\n    years_elapsed = 1  # since it's for the 2011, one year has passed\n\n    # Calculate the spread, which is the difference between fair value and option price\n    spread = fair_value_on_grant_day - option_price_on_grant_day\n\n    # Calculate the total compensation expense using the Black-Scholes model and compensation expense formula\n    # Since we don't have enough data about volatility, risk-free interest rate, and dividend yield,\n    # we just use the intrinsic value method as an approximation\n    compensation_expense_per_year = (number_of_options * spread) / vesting_period_in_years\n    compensation_expense_2011 = compensation_expense_per_year * years_elapsed\n\n    # return answer\n    return compensation_expense_2011\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    adjusted_period = 7.020  # yearly adjusted period\n    annual_convexity = 65.180  # annual convexity\n    change_in_yield = -0.25 / 100  # 25 basis points change in yield, converted to percentage\n    \n    # Do math calculation to get the answer\n    # The anticipated percentage change in price is calculated using the formula:\n    # \u0394P = \u2212 (D \u00d7 \u0394y) + (1/2) \u00d7 C \u00d7 (\u0394y)^2\n    # where \u0394P is the change in price, D is the duration, C is the convexity, and \u0394y is the change in yield\n    change_in_price = -adjusted_period * change_in_yield + 0.5 * annual_convexity * (change_in_yield ** 2)\n    \n    # return answer\n    return change_in_price\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% \u00d7 $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 30  # Par value of the preferred stock\n    rate_on_identical_issue = 0.05  # Return rate of the identical issue\n    market_rate_of_return = 0.058  # Market rate of return for similar stocks\n    \n    # Do math calculation to get the answer\n    market_value_per_share = (rate_on_identical_issue * par_value) / market_rate_of_return\n    \n    # return answer\n    return market_value_per_share\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S0 = 400  # Initial value\n    T = 0.5  # Time to maturity in years\n    r = 0.05  # Risk-free rate\n    q = 0.03  # Dividend yield\n    \n    # Do math calculation to get the answer\n    forward_price = S0 * (1 + (r - q)) ** T\n    \n    # return answer\n    return forward_price\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "Here is the Python program to calculate the test statistic's value:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    sample_std_dev = 0.049  # 4.9%\n    population_std_dev = 0.05  # 5.0%\n    n = 36  # Sample size (number of months)\n    \n    # Do math calculation to get the test statistic's value using the formula for the one-sample z-test\n    test_statistic = (sample_std_dev - population_std_dev) / (population_std_dev / math.sqrt(2 * (n - 1)))\n    \n    # The z-test statistic can also be calculated using the chi-square distribution.\n    # For large samples (which 36 is), the two approaches yield equivalent results.\n    # The test statistic is actually the square root of the ratio of the sample variance to the population variance,\n    # which is chi-square distributed with n-1 degrees of freedom.\n    # However, in practice the simpler formula using the population standard deviation is used instead.\n    \n    # return test statistic value\n    return test_statistic\n\nprint(solution())\n```\n\nHowever, the accurate way to calculate it will be `(sample_std_dev - population_std_dev) / (population_std_dev / math.sqrt(2 * n))` for chi-square distribution."
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income_2008 = 485\n    depreciation_expense_2008 = 270\n    interest_expense_2008 = 195\n    tax_rate = 0.32\n    capital_expenditures_2008 = 523  # calculated as the difference between the gross fixed assets in 2008 and 2007, plus the depreciation expense for 2007\n    change_in_working_capital_2008 = (1090 - 1007)\n    \n    # Do math calculation to get the answer\n    # First calculate the EBITDA\n    ebitda_2008 = net_income_2008 + depreciation_expense_2008 + interest_expense_2008 + (interest_expense_2008 * tax_rate)\n    \n    # To calculate the FCFE, remove the fixed and variable capital requirements\n    fcf_as_reported_2008 = ebitda_2008 - capital_expenditures_2008 - change_in_working_capital_2008\n    \n    # Using FCF to Equity formula: FCFE=NI + D+A-\u0394WC-CAPEX\n    fcf_equity_2008 = net_income_2008 + depreciation_expense_2008 - change_in_working_capital_2008 - capital_expenditures_2008\n    \n    # return answer in millions\n    return round(fcf_equity_2008/1e6, 2)\n\n# run the function\nfcf_equity_2008 = solution()\nprint(fcf_equity_2008)\n```"
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.14400000000000002,
        "question": "What is the sustainable growth rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_profit_margin = 0.20\n    retention_rate = 0.60\n    asset_turnover = 0.8\n    financial_leverage_multiplier = 1.5\n    \n    # Do math calculation to get the answer\n    return rate = retention_rate * net_profit_margin * asset_turnover * financial_leverage_multiplier\n    \n    # return answer\n    return rate\n```"
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    CNY_HKD = 0.8422\n    CNY_ZAR = 0.9149\n    \n    # Do math calculation to get the answer\n    ZAR_HKD = CNY_ZAR / CNY_HKD\n    \n    # return answer\n    return ZAR_HKD\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043000000000000003,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor \u03bb = 0.95 on a daily basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    decay_factor = 0.95  # \u03bb (lambda) is the decay factor\n    days_old = 4  # The return is four days old\n    \n    # Do math calculation to get the answer\n    weight = (1 - decay_factor) * (decay_factor ** (days_old - 1))\n    \n    # return answer\n    return weight\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "Here is the completed Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 180000\n    annual_interest_rate = 0.1\n    daily_interest_rate = annual_interest_rate / 365\n    days_in_2_years = 2 * 365\n    \n    # Do math calculation to get the answer\n    worth_after_2_years = initial_investment * (1 + daily_interest_rate) ** days_in_2_years\n    \n    # return answer\n    return worth_after_2_years\n```\n\nThis program calculates the future value of the investment using the formula for compound interest: `A = P * (1 + r/n)^(nt)`, where:\n- `A` is the future value of the investment (worth after 2 years in this case),\n- `P` is the principal amount (initial investment of $180,000),\n- `r` is the annual interest rate (10% in this case, converted to decimal),\n- `n` is the number of times the interest is compounded per year (365 times for daily compounding),\n- `t` is the number of years (2 years in this case). \n\nPlease note that this calculation assumes that the interest is compounded daily and the interest rate remains constant over the 2-year period."
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "Here is the completed Python program:\n```python\ndef solution():\n    # Define variables name and value\n    inventory_on_june_1 = 20\n    purchase_on_june_12 = 70\n    sale_on_june_16 = 50\n    purchase_on_june_26 = 35\n    sale_on_june_29 = 40\n    unit_cost_june_1 = 5.00\n    unit_cost_june_12 = 5.20\n    selling_price_june_16 = 6.00\n    selling_price_june_29 = 6.50\n    unit_cost_june_26 = 5.50\n\n    # Calculate the total units sold\n    total_units_sold = sale_on_june_16 + sale_on_june_29\n    \n    # Calculate the total units available for sale\n    total_units_available = inventory_on_june_1 + purchase_on_june_12 + purchase_on_june_26\n    \n    # Calculate the cost of goods sold using FIFO\n    # First, calculate the cost of the 50 units sold on June 16\n    cost_of_goods_sold_june_16 = 20 * unit_cost_june_1 + 30 * unit_cost_june_12\n    \n    # Then, calculate the cost of the 40 units sold on June 29\n    # Since 30 units from the June 12 purchase are left, and we need 40 units,\n    # 10 units from the June 26 purchase will be used\n    cost_of_goods_sold_june_29 = 30 * unit_cost_june_12 + 10 * unit_cost_june_26\n    \n    # Calculate the total cost of goods sold\n    total_cost_of_goods_sold = cost_of_goods_sold_june_16 + cost_of_goods_sold_june_29\n    \n    # Calculate the total revenue\n    total_revenue = sale_on_june_16 * selling_price_june_16 + sale_on_june_29 * selling_price_june_29\n    \n    # Calculate the gross profit\n    gross_profit = total_revenue - total_cost_of_goods_sold\n    \n    # return answer\n    return gross_profit\n```\nThis program first calculates the total units sold and the total units available for sale. Then, it calculates the cost of goods sold using the First-In-First-Out (FIFO) method. Finally, it calculates the total revenue and the gross profit."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_return_rate = 0.10\n    dividend_per_share = 1.72\n    growth_rate_1 = 0.06\n    growth_rate_2 = 0.04\n    years_until_dividend = 3\n    \n    # Do math calculation to get the answer\n    # First, calculate the present value of the dividends from year 4 to infinity\n    # using the formula for the present value of a growing perpetuity\n    present_value_dividends = dividend_per_share / (required_return_rate - growth_rate_2)\n    \n    # Next, calculate the present value of the dividends for the first three years after the dividend starts\n    # using the formula for the present value of a single sum\n    present_value_first_three_years = dividend_per_share / (1 + required_return_rate)**4 + dividend_per_share * (1 + growth_rate_2) / (1 + required_return_rate)**5 + dividend_per_share * (1 + growth_rate_2)**2 / (1 + required_return_rate)**6\n    \n    # Then, calculate the present value of the dividends for years 4 and beyond\n    # by multiplying the present value of the growing perpetuity by the present value of a single sum formula\n    present_value_years_4_and_beyond = present_value_dividends / ((1 + required_return_rate)**4)\n    \n    # Calculate the total present value of all future dividends\n    total_present_value = present_value_first_three_years + present_value_years_4_and_beyond\n    \n    # return answer\n    return total_present_value\n```\n\n**Please note that the above answer is based on the Dividend Discount Model. According to the model, the value of the stock is the present value of all future dividends discounted at the required return rate. The growth rate for the first three years is considered as 0, because there is no dividend in those years. Also, the present value is calculated at year 0, not at the end of the year. So year 1 starts at year 0. This factor should be considered when taking the present value for all the years.**"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    payout_rate = 0.5  # payout ratio is 50%\n    growth_rate = 0.1  # growth rate is 10%\n    return_rate = 0.15  # return rate is 15%\n    \n    # Do math calculation to get the answer\n    pe_ratio = return_rate / (return_rate - growth_rate) / (1 - payout_rate)\n    \n    # return answer\n    return pe_ratio\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides \u20ac300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 300  # Annual payment in \u20ac\n    years = 5  # Number of years\n    discount_rate = 0.04  # Annual discount rate (4%)\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(years):\n        present_value += annual_payment / (1 + discount_rate) ** i + 1\n    \n    # return answer\n    return round(present_value, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss = 15000\n    \n    # Do math calculation to get the answer\n    book_value = initial_price - accumulated_depreciation\n    selling_price = book_value - loss\n    gain = selling_price - book_value\n    gain = -gain\n    \n    # return answer\n    return gain\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to \u00a335 million and total shareholders' equity of \u00a355 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "Here is the solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000  # Total liabilities in pounds\n    total-shareholders_equity = 55000000  # Total shareholders' equity in pounds\n    \n    # Do math calculation to get the answer\n    total_funding = total_liabilities + total_shareholders_equity  # Calculate total funding\n    percentage = (total_liabilities / total_funding) * 100  # Calculate the percentage of total liabilities\n    \n    # return answer\n    return percentage\n\n# Execute the function to get the answer\nanswer = solution()\nprint(answer)\n```\n\n**Explanation**: The code calculates the percentage of total liabilities on the balance sheet by dividing the total liabilities by the total funding (which is the sum of liabilities and shareholders' equity), and then multiplying by 100 to get the percentage. The result will be the percentage of total liabilities on a vertical common-size balance sheet."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2  # Recent dividend paid\n    required_rate_of_return = 0.14  # Required rate of return per annum\n    growth_rate = 0.08  # Expected constant growth rate per annum\n    \n    # Do math calculation to get the answer\n    # Use the Gordon Growth Model formula: P = D / (r - g)\n    # Where P is the intrinsic value, D is the recent dividend paid\n    # r is the required rate of return, and g is the growth rate\n    intrinsic_value = dividend / (required_rate_of_return - growth_rate)\n    \n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | \u25b3Curve | \u25b3Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, \u2206Curve shows the modification in the benchmark yield curve, and \u2206Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pv0 = 99.41172\n    pv_plus = 99.32213\n    pv_minus = 99.50132\n    delta_curve = 0.0003  # Convert 3 bps to a decimal\n    delta_yield = 0.0001  # Convert 1 bp to a decimal\n\n    # Calculate the percentage change in the bond price for a unit change in yield\n    percent_change_pv_plus = (pv_plus - pv0) / pv0\n    percent_change_pv_minus = (pv_minus - pv0) / pv0\n\n    # Calculate the convexity as the average of the second derivatives of the price-yield function\n    convexity = (percent_change_pv_plus / delta_yield + percent_change_pv_minus / delta_yield) / 2\n\n    # Adjust for the given delta curve\n    convexity_approx = convexity / (delta_curve ** 2)\n\n    # return answer\n    return convexity_approx\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_domestic_return = 0.25\n    benchmark_domestic_return = 0.15\n    portfolio_bond_return = 0.09\n    benchmark_bond_return = 0.05\n    portfolio_international_return = 0.15\n    benchmark_international_return = 0.18\n    \n    portfolio_domestic_weight = 0.50\n    portfolio_bond_weight = 0.30\n    portfolio_international_weight = 0.20\n    \n    benchmark_domestic_weight = 0.35\n    benchmark_bond_weight = 0.35\n    benchmark_international_weight = 0.30\n    \n    # Calculate active return for each asset\n    active_domestic_return = portfolio_domestic_return - benchmark_domestic_return\n    active_bond_return = portfolio_bond_return - benchmark_bond_return\n    active_international_return = portfolio_international_return - benchmark_international_return\n    \n    # Calculate active weight for each asset\n    active_domestic_weight = portfolio_domestic_weight - benchmark_domestic_weight\n    active_bond_weight = portfolio_bond_weight - benchmark_bond_weight\n    active_international_weight = portfolio_international_weight - benchmark_international_weight\n    \n    # Calculate value added from the choice of security\n    value_added_domestic = active_domestic_return * active_domestic_weight\n    value_added_bond = active_bond_return * active_bond_weight\n    value_added_international = active_international_return * active_international_weight\n    \n    value_added_security = value_added_domestic + value_added_bond + value_added_international\n    \n    # return answer\n    return value_added_security\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.9480000000000001,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123\n    forward_points = 0.068\n    \n    # Do math calculation to get the answer\n    spot_rate = forward_rate / (1 + (forward_points / 100))\n    \n    # return answer\n    return spot_rate\n```"
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    price_to_ffo = 11.5  # Price/FFO based on year-end stock price for 2011\n    ffo = 142187 / 121944  # FFO per share for 2011 (Net income / Weighted average shares outstanding)\n    \n    # Do math calculation to get the answer\n    share_price = price_to_ffo * ffo\n    \n    # return answer\n    return share_price\n```\nThis program calculates the share price of Baldwin at the end of 2011 by multiplying the Price/FFO ratio by the FFO per share."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_secondary_loans = 1000\n    total_top_quality_loans = 600\n    delayed_secondary_loans = 200\n    delayed_top_quality_loans = 48\n    \n    # Do math calculation to get the answer\n    total_delayed_loans = delayed_secondary_loans + delayed_top_quality_loans\n    probability_secondary_given_delayed = delayed_secondary_loans / total_delayed_loans\n    \n    # Convert the result to a percentage\n    answer = round(probability_secondary_given_delayed * 100, 2)\n    \n    # return answer\n    return answer\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 26.00\n    volatility_rate = 0.015\n    delta = -0.5\n    confidence_level = 0.95\n    z_score = 1.645  # The z-score corresponding to the 95% confidence level for a normal distribution\n    \n    # Do math calculation to get the answer\n    var = price * delta * abs(z_score) * volatility_rate * 100\n    \n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "It seems like you forgot to include the rest of the problem description and the desired output format. Please provide the complete problem description and I'll be happy to assist you.\n\nHowever, I can assume that you want me to calculate the cash flow from financing activities according to U.S. GAAP (Generally Accepted Accounting Principles). \n\nHere's a possible Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 55000\n    depreciation = 60000\n    taxes_paid = 25000\n    interest_paid = 5000\n    dividends_paid = 10000\n    cash_received_from_sale_of_building = 40000\n    issuance_of_preferred_stock = 45000\n    repurchase_of_common_stock = -20000\n    issuance_of_bonds = 40000\n    debt_retired_through_issuance_of_common_stock = -45000\n    paid_off_long_term_bank_borrowings = -10000\n    \n    # Do math calculation to get the answer\n    cash_from_financing_activities = issuance_of_preferred_stock + issuance_of_bonds - repurchase_of_common_stock - debt_retired_through_issuance_of_common_stock - paid_off_long_term_bank_borrowings\n    \n    # return answer\n    return cash_from_financing_activities\n\nprint(solution())\n```\n\nThis program calculates the cash flow from financing activities by summing up the issuance of preferred stock, issuance of bonds, and subtracting the repurchase of common stock, debt retired through issuance of common stock, and paid off long-term bank borrowings. Please note that this program does not take into account the net income, depreciation, taxes paid, interest paid, and other incomes that are not related to financing activities."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    annual_coupon = face_value * coupon_rate\n    years = 3\n    spot_rates = [0.036, 0.037, 0.038]\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(years):\n        present_value += annual_coupon / (1 + spot_rates[i]) ** (i + 1)\n    \n    # Calculate the PV of the face value\n    present_value += face_value / (1 + spot_rates[-1]) ** years\n    \n    # return answer\n    return present_value\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "Based on the table provided, it appears that the question is asking for the total payment made by the employer during the year for the defined benefit pension plan. According to the table, the total payment made by the employer is the sum of the employer contributions and the payment made to settle the benefit obligation at the end of the year.\n\nHere is the Python program to calculate the answer:\n```python\ndef solution():\n    # Define variables name and value\n    employer_contributions = 1200\n    benefit_obligation_end_of_year = 48395\n    benefit_obligation_beginning_of_year = 45000\n    \n    # Do math calculation to get the answer\n    payment_to_settle_benefit_obligation = benefit_obligation_end_of_year - benefit_obligation_beginning_of_year\n    total_payment_made_by_employer = employer_contributions + payment_to_settle_benefit_obligation\n    \n    # return answer\n    return total_payment_made_by_employer\n```\nPlease note that this program assumes that the payment made to settle the benefit obligation at the end of the year is the difference between the benefit obligation at the end of the year and the benefit obligation at the beginning of the year. If this assumption is incorrect, the program may need to be modified accordingly."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    mean = 160000\n    std_dev = 30000\n    x = 100000\n    \n    # Do math calculation to get the answer\n    z_score = (x - mean) / std_dev\n    percentage = 0.5 * (1 + math.erf(-z_score / math.sqrt(2)))\n    \n    # Convert percentage to a percentage value and round to two decimal places\n    percentage = round(percentage * 100, 2)\n    \n    # return answer\n    return percentage\n\n# Test the function\nprint(f\"The percentage of return that is below $100,000 is {solution()}%\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    margin_requirement = 0.65  # 65% minimum margin requirement\n\n    # Calculate the maximum leverage ratio\n    max_leverage_ratio = 1 / margin_requirement\n    \n    # return answer\n    return max_leverage_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Pb = 5  # price of bottled water\n    Qbw_at_Pb = 30 - 2 * Pb  # amount of bottled water at price Pb\n    Qbw_at_Pb_plus_one = 30 - 2 * (Pb + 1)  # amount of bottled water at price Pb+1\n    \n    # Do math calculation to get the answer\n    percentage_change_in_Qbw = (Qbw_at_Pb_plus_one - Qbw_at_Pb) / Qbw_at_Pb\n    percentage_change_in_Pb = 1 / Pb\n    price_elasticity_of_demand = percentage_change_in_Qbw / percentage_change_in_Pb\n    \n    # return answer\n    return price_elasticity_of_demand\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    flotation_cost = 0.05  # 5.0% flotation costs per share\n    dividend_next_year = 0.32  # Anticipated dividend the following year\n    dividend_growth_rate = 0.10  # Dividend growth rate of 10%\n    issue_price = 14.69  # Shares released at a price of $14.69\n    \n    # Do math calculation to get the answer\n    # Calculate the cost of retained earnings (ke) using the constant growth model\n    cost_retained_earnings = (dividend_next_year / issue_price) + dividend_growth_rate\n    \n    # Calculate the cost of new equity (k_e) considering the flotation cost\n    cost_new_equity = cost_retained_earnings / (1 - flotation_cost)\n    \n    # Convert the result to a percentage\n    cost_new_equity_percentage = cost_new_equity * 100\n    \n    # return answer\n    return round(cost_new_equity_percentage, 2)\n```\n\nWhen you run this program, it calculates the cost of external equity as a percentage, taking into account the flotation costs and the expected dividend growth rate. The result is then returned and rounded to two decimal places for clarity."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid\u2013offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0032  # 0.32%\n    round_trip_trading_fees = 0.0020  # 0.20%\n    bid_offer_spread = 0.0010  # 0.10%\n    holding_period_in_years = 9 / 12  # 9 months\n    \n    # Calculate the annual holding period costs, excluding compounding\n    annual_management_cost = annual_management_fee\n    annual_trading_cost = round_trip_trading_fees + (2 * bid_offer_spread)  # Considering both buy and sell\n    \n    # Calculate the total holding period cost for the 9-month period\n    total_holding_period_cost = (annual_management_cost + annual_trading_cost) * holding_period_in_years\n    \n    # return answer\n    return total_holding_period_cost\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_value_assets = 515\n    management_fee_rate = 0.02\n    hurdle_rate = 0.05\n    high_water_mark = 540\n    after_one_year_value = 602.5\n\n    # Calculate incentive fee\n    incentive_fee = max(after_one_year_value - high_water_mark, 0) * 0.20\n\n    # Calculate management fee\n    management_fee = current_value_assets * management_fee_rate\n\n    # Calculate total fee\n    total_fee = incentive_fee + management_fee\n\n    # Calculate net return after deducting fees but before considering the hurdle rate\n    net_return_before_hurdle_rate = (after_one_year_value - total_fee) / current_value_assets - 1\n\n    # Calculate return that must be returned to investors\n    hurdle_return = (1 + hurdle_rate) * current_value_assets - high_water_mark\n\n    # Calculate final net return for the investor\n    if after_one_year_value > high_water_mark:\n        net_return = max(net_return_before_hurdle_rate, hurdle_return / current_value_assets - 1)\n    else:\n        net_return = net_return_before_hurdle_rate\n\n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_of_common_stock = 1000000\n    net_income_for_the_year = 1500000\n    par_value_of_bonds = 10000000\n    par_value_of_preferred_stock = 2000000\n    tax_rate = 0.3\n    convertible_bonds_coupon_rate = 0.04\n    preferred_stock_dividend_rate = 0.07\n    convertible_share = 300000\n\n    # Do math calculation to get the answer\n    interest_on_bonds = par_value_of_bonds * convertible_bonds_coupon_rate\n    preferred_stock_dividend = par_value_of_preferred_stock * preferred_stock_dividend_rate\n    income_available_for_common_and_convertible = net_income_for_the_year + interest_on_bonds - (preferred_stock_dividend * (1 - tax_rate))\n    \n    # we use_income_available_for_common_and_convertible = net_income_for_the_year \n    # ignore interest_on_bonds and preferred_stock_dividend for calculating EPS Diluted\n    earnings_per_share_diluted = income_available_for_common_and_convertible / (shares_of_common_stock + convertible_share)\n\n    # return answer\n    return earnings_per_share_diluted\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "Here is the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_price = 24  # current stock price\n    dividend = 2500   # dividend received\n    total_return = 15500 / 100  # total return as a decimal\n    num_stocks = 10000  # number of stocks purchased\n    \n    # Do math calculation to get the answer\n    selling_profit = total_return - (dividend / num_stocks)\n    stock_cost = stock_price - selling_profit\n    \n    # return answer\n    return stock_cost\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund\u2019s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    init_price = 865.0  # initial futures price\n    short_term_price = 877.0  # short-term futures price\n    long_term_price = 883.0  # long-term futures price\n    annualized_rate = 0.60 / 100  # annualized rate earned on collateral\n    time_period = 3 / 12  # 3 months expressed as a fraction of a year\n    \n    # Calculate the price gain from the futures position\n    futures_gain = (long_term_price - short_term_price) + (short_term_price - init_price)\n    \n    # Calculate the interest earned on the collateral\n    interest_earned = init_price * annualized_rate * time_period\n    \n    # Calculate the total return\n    total_return = (futures_gain + interest_earned) / init_price * 100\n    \n    # return answer\n    return total_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cap_rate = 0.055  # 5.5%\n    ending_cap_rate = 0.06  # 6%\n    discount_rate = 0.0725  # 7.25%\n\n    # Do math calculation to get the answer\n    # Use the formula: Ending cap rate = Initial cap rate + (Discount rate - Growth rate) * (Ending year / Initial year)\n    # Since it's a constant growth rate, we can use the formula: Growth rate = Discount rate - (Ending cap rate - Initial cap rate) / (Years - 1)\n    # But since the years are not given, we will assume that the ending year is far in the future, so the formula becomes: \n    # Growth rate = (Discount rate - Initial cap rate) - Ending cap rate\n    growth_rate = (discount_rate - initial_cap_rate) - ending_cap_rate\n\n    # return answer\n    return growth_rate * 100  # Convert to percentage\n```"
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "```python\ndef solution():\n    # Define variables names and values\n    cost_of_equipment = 5000000\n    estimated_residual_value = 500000\n    total_productive_capacity = 950000\n    production_in_year2015 = 150000\n    \n    # Do math calculation to get the answer\n    depreciable_amount = cost_of_equipment - estimated_residual_value\n    depreciation_expense = (depreciable_amount / total_productive_capacity) * production_in_year2015\n    \n    # return answer\n    return round(depreciation_expense)\n\nresult = solution()\nprint(f\"The depreciation expense in the initial year is: ${result}\")\n```"
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_operating_income = 222\n    depreciation_and_amortization = 45\n    funds_from_operations = net_operating_income + depreciation_and_amortization\n    price_to_ffo = 13\n    weighted_average_shares_outstanding = 118\n    \n    # Do math calculation to get the answer\n    market_capitalization = funds_from_operations * price_to_ffo\n    share_price = market_capitalization / weighted_average_shares_outstanding\n    \n    # return answer\n    return share_price\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "Here is the Python program to answer the given question:\n\n\n```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 40\n    average_cost = 70\n    elasticity_of_demand = 1.5\n    \n    # Do math calculation to get the answer\n    markup = (1 / (1 - (1 / elasticity_of_demand)))\n    price = marginal_cost * markup\n    \n    # return answer\n    return price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 97  # bond price as a percentage of face value\n    face_value = 100  # face value of the bond\n    current_LPR = 0.01  # current 6-month LPR as a decimal\n    spread = 0.0080  # spread as a decimal\n    coupon_rate = current_LPR + spread  # coupon rate as a decimal\n    years_to_maturity = 2  # time to maturity in years\n    periods = years_to_maturity * 2  # number of coupon periods\n    \n    # Do math calculation to get the answer\n    # Calculate the coupon payment per period\n    coupon_payment = (coupon_rate / 2) * face_value\n    \n    # Calculate the present value of the bond's cash flows using the formula for present value of an annuity due\n    discount_margin = 2 * ((1 - (price * face_value / 100) / (coupon_payment * (1 + (current_LPR / 2)) * (((1 + (current_LPR / 2))**periods - 1) / (current_LPR / 2))))**(1/periods) - 1) * 100\n    \n    # return answer\n    return round(discount_margin, 2)\n```"
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1\u201310, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price \u2013 Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith\u2019s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = 0.0477\n    underwriter_rank_coefficient = 0.0150\n    pre_offer_price_adjustment_coefficient = 0.4350\n    offer_size_coefficient = -0.0009\n    fraction_retained_coefficient = 0.0500\n    \n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40\n    fraction_retained = 0.70\n    \n    # Do math calculation to get the answer\n    initial_return = (intercept + \n                      underwriter_rank_coefficient * underwriter_rank + \n                      pre_offer_price_adjustment_coefficient * pre_offer_price_adjustment + \n                      offer_size_coefficient * offer_size + \n                      fraction_retained_coefficient * fraction_retained)\n    \n    # return answer\n    return initial_return\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0040  # 0.40%\n    round_trip_trading_commissions = 0.0055  # 0.55%\n    bid_offer_spread = 0.0020  # 0.20%\n    holding_period = 9 / 12  # 9 months\n    \n    # Calculate the total cost without compounding\n    management_fee_for_period = annual_management_fee * holding_period\n    total_cost = management_fee_for_period + (round_trip_trading_commissions + bid_offer_spread)\n    \n    # return answer\n    return total_cost\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.14, -0.10, -0.02]\n    \n    # Do math calculation to get the answer\n    holding_period_return = (1 + returns[0]) * (1 + returns[1]) * (1 + returns[2]) - 1\n    \n    # return answer\n    return holding_period_return\n```"
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Consumption = 20.0\n    Capital_consumption_allowance = 1.9\n    Government_spending = 4.2\n    Imports = 2.2\n    Gross_private_domestic_investment = 6.0\n    Exports = 1.8\n    \n    # Do math calculation to get the answer\n    Gross_domestic_product = Consumption + Capital_consumption_allowance + Government_spending + Gross_private_domestic_investment - Imports + Exports\n    \n    # return answer\n    return Gross_domestic_product\n```"
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    std_dev_stock1 = 0.12\n    std_dev_stock2 = 0.25\n    weight_stock1 = 0.30\n    weight_stock2 = 0.70\n    correlation = 0.20\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = (weight_stock1 ** 2) * (std_dev_stock1 ** 2) + (weight_stock2 ** 2) * (std_dev_stock2 ** 2) + 2 * weight_stock1 * weight_stock2 * std_dev_stock1 * std_dev_stock2 * correlation\n    ans = portfolio_std_dev ** 0.5\n    \n    # return answer\n    return ans\n```"
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    working_capital_balance = 22000000\n    fair_value_fixed_assets = 57000000\n    normalized_income = 89000000\n    required_return_working_capital = 0.06\n    required_return_fixed_assets = 0.09\n    required_return_intangible_assets = 0.25\n    future_growth_rate = 0.07\n    \n    # Calculate the return on working capital\n    return_on_working_capital = working_capital_balance * required_return_working_capital\n    \n    # Calculate the return on fixed assets\n    return_on_fixed_assets = fair_value_fixed_assets * required_return_fixed_assets\n    \n    # Calculate the income that can be attributed to working capital and fixed assets\n    attributed_income = return_on_working_capital + return_on_fixed_assets\n    \n    # Calculate the excess earnings\n    excess_earnings = normalized_income - attributed_income\n    \n    # Calculate the present value of excess earnings\n    present_value_excess_earnings = excess_earnings / (required_return_intangible_assets - future_growth_rate)\n    \n    # The value of the intangibles is the present value of excess earnings\n    value_of_intangibles = present_value_excess_earnings\n    \n    # return answer\n    return value_of_intangibles\n```"
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 40000  # in millions\n    cost_of_goods_sold = 30000  # in millions\n    accounts_receivable = 3000  # in millions\n    inventory_beginning_balance = 1500  # in millions\n    inventory_ending_balance = 2000  # in millions\n    accounts_payable = 4000  # in millions\n\n    # Do math calculation to get the answer\n    days_sales_outstanding = (accounts_receivable / (credit_sales / 12)) * 365  # Days Sales Outstanding (DSO)\n    inventory_turnover = (cost_of_goods_sold / ((inventory_beginning_balance + inventory_ending_balance) / 2)) \n    days_inventory_outstanding = 365 / inventory_turnover  # Days Inventory Outstanding (DIO)\n    accounts_payable_turnover = (cost_of_goods_sold / accounts_payable) \n    days_payables_outstanding = 365 / accounts_payable_turnover  # Days Payables Outstanding (DPO)\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payables_outstanding  # Cash Conversion Cycle (CCC)\n\n    # return answer\n    return cash_conversion_cycle\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    research_investment = 5000000  # $5 million\n    software_creation_cost = 3000000  # $3 million\n    total_cost = research_investment + software_creation_cost\n    useful_life = 20  # years\n    salvage_value = 10000  # $10,000\n    year_2014_depreciation = 2  # years\n    \n    # Do math calculation to get the answer\n    annual_depreciation = (total_cost - salvage_value) / useful_life\n    total_depreciation = annual_depreciation * year_2014_depreciation\n    book_value = total_cost - total_depreciation\n    \n    # return answer\n    return book_value\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outcomes = [7, 8, 9, 10]\n    \n    # Calculate the mean of the distribution\n    mean = sum(outcomes) / len(outcomes)\n    \n    # Calculate the variance of the distribution\n    variance = sum((x - mean) ** 2 for x in outcomes) / len(outcomes)\n    \n    # return answer\n    return variance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 600000  # Sales in 2017\n    avg_account_receivable = 50000  # Average accounts receivables in 2017\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    \n    # return answer\n    return receivables_collection_period\n\nprint(\"The final answer is\", round(solution(), 2), \"days.\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_duration = 8  # years\n    modified_duration = 11.470  # years\n    \n    # Do math calculation to get the answer\n    duration_gap = modified_duration - investment_duration\n    \n    # return answer\n    return duration_gap\n```"
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "Here is the Python program to calculate the overall return for the hedge position of Platte River Foods:\n\n```python\ndef solution():\n    # Define variables name and value\n    price_return_rate = 0.04  # 4%\n    roll_return_rate = 0.015  # 1.50%\n    collateral_required_rate = 0.20  # 20%\n    free_rate = 0.01  # 1%\n    position_size = 1500000  # $1,500,000\n    current_price = 750  # $750\n    longer_term_price = 500  # $500\n    \n    # Calculate price return\n    price_return = price_return_rate * position_size\n    \n    # Calculate roll return\n    roll_return = roll_return_rate * (position_size - (current_price / longer_term_price) * position_size)\n    \n    # Calculate rebate (interest earned on collateral)\n    rebate = free_rate * collateral_required_rate * position_size\n    \n    # Calculate overall return\n    overall_return = price_return + roll_return + rebate\n    \n    # return answer\n    return overall_return\n```"
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    employer_contributions = 1200\n    actual_return_on_plan_assets = 3100\n    expected_rate_of_return_on_plan_assets = 0.082\n    benefit_obligation_at_beginning_of_year = 45000\n    plan_assets_at_beginning_of_year = 40800\n    actuarial_loss = 350\n    \n    # Interest cost equals to benefit obligation x discount rate. \n    # Discount rate is 7.5%\n    interest_cost = benefit_obligation_at_beginning_of_year * 0.075\n    \n    # Expected return on plan assets equals to plan assets x expected rate of return on plan assets.\n    expected_return_on_plan_assets = plan_assets_at_beginning_of_year * expected_rate_of_return_on_plan_assets\n    \n    # amortization_of_actuarial_loss equals to actuarial loss.\n    # Since actuarial loss is disregarded, the amortization_of_actuarial_loss is 0.\n    amortization_of_actuarial_loss = 0\n    \n    # Recurrent pension expenses presented in I/S as per US GAAP\n    # equals to current service costs + interest costs + expected return on plan assets + amortization of actuarial loss\n    recurrent_pension_expenses = current_service_costs + interest_cost - expected_return_on_plan_assets + amortization_of_actuarial_loss\n    \n    # return answer\n    return recurrent_pension_expenses\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_income_200_units = 500000\n    total_income_250_units = 600000\n    units_sold_200 = 200\n    units_sold_250 = 250\n    \n    # Do math calculation to get the answer\n    total_revenue_increase = total_income_250_units - total_income_200_units\n    units_soldcrease = units_sold_250 - units_sold_200\n    revenue_per_unit_increase = total_revenue_increase / units_soldcrease\n    \n    # return answer\n    return revenue_per_unit_increase\n```"
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_shares = 200000\n    share_price_eur = 90\n    spot_rate_initiation = 1.3935\n    six_month_forward_initiation = -0.0190\n    spot_rate_three_months_later = 1.4106\n    six_month_forward_three_months_later = -0.0270\n    \n    # Convert the share price to usd at initiation\n    share_price_usd_initiation = share_price_eur / (spot_rate_initiation - six_month_forward_initiation/100)\n    # Calculate the total value in usd at initiation\n    total_value_usd_initiation = share_price_usd_initiation * num_shares\n    # Convert the share price to usd three months later\n    share_price_usd_three_months_later = share_price_eur / (spot_rate_three_months_later - six_month_forward_three_months_later/100)\n    # Calculate the total value in usd three months later\n    total_value_usd_three_months_later = share_price_usd_three_months_later * num_shares\n    # calculate the mark-to-market value\n    mtm_value = total_value_usd_three_months_later - total_value_usd_initiation\n    # Convert mtm_value to a positive value as it's usually reported as a positive value in the market\n    mtm_value = abs(mtm_value)\n    # return answer\n    return mtm_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1_year = 0.02\n    spot_rate_2_years = 0.025\n    spot_rate_3_years = 0.035\n    \n    # Calculate forward rate for two years starting from two years from now\n    # (1 + spot_rate_3_years)^3 = (1 + spot_rate_2_years)^2 * (1 + forward_rate_2_years)^1\n    # (1 + forward_rate_2_years)^1 = (1 + spot_rate_3_years)^3 / (1 + spot_rate_2_years)^2\n    forward_rate_2_years = ((1 + spot_rate_3_years)**3 / (1 + spot_rate_2_years)**2) - 1\n    \n    # Return forward rate for two years starting from two years from now\n    return forward_rate_2_years\n\n# Execute function and print answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Face value of the bond\n    coupon_rate = 0.1  # Annual coupon rate\n    time_to_maturity = [1, 2, 3]  # Years to maturity\n    spot_rates = [0.08, 0.09, 0.095]  # Spot rates for each year\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(len(time_to_maturity)):\n        coupon_payment = face_value * coupon_rate\n        if i == len(time_to_maturity) - 1:  # Last year, add face value to coupon payment\n            coupon_payment += face_value\n        present_value += coupon_payment / (1 + spot_rates[i]) ** time_to_maturity[i]\n    \n    # return answer\n    return present_value\n```\n\nYou can run this function to get the answer. The answer will be the present value (cost) of the 3-year bond."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 20  # in dollars\n    fixed_production_costs = 500000  # in dollars\n    units = 300000  # in units\n    \n    # Do math calculation to get the answer\n    # Degree of operating leverage (DOL) is calculated as: \n    # DOL = (Total contribution / (Total contribution - Fixed costs))\n    # However, in this case, we want to find the production level at which DOL is the least.\n    # Since DOL is inversely proportional to (Total contribution - Fixed costs), DOL will be the least when (Total contribution - Fixed costs) is the greatest.\n    # (Total contribution - Fixed costs) will be the greatest when Total contribution is the greatest.\n    # Total contribution will be the greatest when Quantity * Unit contribution margin is the greatest.\n    # Therefore, we need to find the quantity that maximizes Quantity * Unit contribution margin.\n    # Since Unit contribution margin is constant, the quantity that maximizes Quantity * Unit contribution margin is the one that we have in the problem statement, which is 300,000 units.\n\n    return units\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at\u00a0$50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at\u00a0$60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "Here is the Python program to calculate the ending inventory balance for Corporation Z in 2014:\n\n```python\ndef solution():\n    # Define variables name and value\n    units_purchased_2013 = 2000\n    cost_per_unit_2013 = 50\n    units_sold_2013 = 1500\n    units_purchased_2014 = 1000\n    cost_per_unit_2014 = 60\n    units_sold_2014 = 500\n\n    # Calculate the number of units left in inventory at the end of 2013\n    units_left_2013 = units_purchased_2013 - units_sold_2013\n    \n    # Calculate the total units in inventory at the beginning of 2014\n    total_units_2014 = units_left_2013 + units_purchased_2014\n    \n    # Since the FIFO method is used, the units left from 2013 are sold first\n    # Calculate the number of units from 2013 that are sold in 2014\n    units_sold_2014_from_2013 = min(units_left_2013, units_sold_2014)\n    \n    # Calculate the number of units from 2014 that are sold in 2014\n    units_sold_2014_from_2014 = units_sold_2014 - units_sold_2014_from_2013\n    \n    # Calculate the cost of the units left in inventory at the end of 2014\n    cost_of_units_left_2014 = (units_left_2013 - units_sold_2014_from_2013) * cost_per_unit_2013 + (units_purchased_2014 - units_sold_2014_from_2014) * cost_per_unit_2014\n    \n    # return answer\n    return cost_of_units_left_2014\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dirty_price = 104.17  # dirty price of the 10-year Treasury note\n    annual_coupon_rate = 0.02  # annual coupon rate of the 10-year Treasury note\n    days_since_last_coupon = 30  # days since last coupon payment\n    days_to_contract_termination = 90  # days to contract termination\n    annual_risk_free_rate = 0.0165  # annual risk-free rate for three months (in decimal)\n    conversion_factor = 0.7025  # conversion factor\n    \n    # Do math calculation to get the answer\n    # Calculate the coupon payment per period\n    coupon_payment = dirty_price * annual_coupon_rate / 2\n    \n    # Calculate the accrued interest per period\n    accrued_interest = (dirty_price * annual_coupon_rate / 2) * (days_since_last_coupon / 180)\n    \n    # Calculate the implied repo rate\n    implied_repo_rate = (dirty_price + accrued_interest) / (dirty_price * conversion_factor) - 1\n    \n    # Calculate the time to maturity in years\n    time_to_maturity = days_to_contract_termination / 365\n    \n    # Calculate the present value of the coupon payments\n    present_value_coupon_payments = coupon_payment / (1 + implied_repo_rate/2) \n    \n    # Calculate the equilibrium quoted futures contract price\n    equilibrium_futures_price = (dirty_price * conversion_factor) * (1 + time_to_maturity * annual_risk_free_rate) + present_value_coupon_payments\n    \n    # return answer\n    return equilibrium_futures_price\n```"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value_1 = 25e6\n    par_value_2 = 25e6\n    par_value_3 = 20e6\n    par_value_4 = 30e6\n    \n    bond_price_1 = 105 - 100  # In percentage\n    bond_price_2 = 100 - 100  # In percentage\n    bond_price_3 = 95 - 100  # In percentage\n    bond_price_4 = 87 - 100  # In percentage\n    \n    modified_duration_1 = 7.9\n    modified_duration_2 = 8.5\n    modified_duration_3 = 6.3\n    modified_duration_4 = 10.2\n    \n    # Do math calculation to get the answer\n    price_value_bp_1 = (par_value_1 * modified_duration_1 * bond_price_1) / 100\n    price_value_bp_2 = (par_value_2 * modified_duration_2 * bond_price_2) / 100\n    price_value_bp_3 = (par_value_3 * modified_duration_3 * bond_price_3) / 100\n    price_value_bp_4 = (par_value_4 * modified_duration_4 * bond_price_4) / 100\n    \n    total_price_value_bp = price_value_bp_1 + price_value_bp_2 + price_value_bp_3 + price_value_bp_4\n    \n    # return answer\n    return total_price_value_bp\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    bond_face_value = 2000000\n    bond_trading_price = 0.75 * bond_face_value\n    recovery_rate = 0\n    risk_free_rate = 0.03\n    time_to_maturity = 1\n    \n    # Do math calculation to get the answer\n    spread = - math.log(bond_trading_price / bond_face_value) / time_to_maturity - risk_free_rate\n    probability_of_default = (1 - (recovery_rate / 100)) * (1 - math.exp(-spread))\n    \n    # return answer\n    return probability_of_default\n\n# Test the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "Here is the rest of the Python program:\n```python\ndef solution():\n    # Define variables name and value\n    num_shares_outstanding = 10e6\n    earnings_per_share = 2.00\n    pe_ratio = 20\n    book_value_per_share = 30\n    \n    # Calculate current market price per share\n    market_price_per_share = earnings_per_share * pe_ratio\n    \n    # Calculate the total amount spent on share buyback\n    buyback_amount = market_price_per_share * 1e6\n    \n    # Calculate the new book value after share buyback\n    new_total_book_value = (book_value_per_share * num_shares_outstanding) - buyback_amount\n    new_num_shares_outstanding = num_shares_outstanding - 1e6\n    \n    # Calculate the new book value per share\n    new_book_value_per_share = new_total_book_value / new_num_shares_outstanding\n    \n    # return answer\n    return new_book_value_per_share\n```\nThis program calculates the new book value per share after the corporation buys back 1 million shares at the current market rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of \u00a5 5,000,000. He took out a loan for the remaining balance of \u00a55,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 5000000  # loan amount\n    annual_rate = 0.058  # yearly discount rate\n    years = 10  # loan period in years\n    monthly_rate = annual_rate / 12  # monthly interest rate\n    periods = years * 12  # loan period in months\n\n    # Do math calculation to get the answer\n    # use the formula for monthly payment (M) on a fixed rate loan: M = P[r(1+r)^n]/[(1+r)^n \u2013 1]\n    monthly_payment = principal * (monthly_rate * (1 + monthly_rate) ** periods) / ((1 + monthly_rate) ** periods - 1)\n    \n    # return answer\n    return monthly_payment\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    three_month_MRR = 1.35  # in decimal form\n    basis_points = 65  # addition to three_month_MRR in decimal form\n\n    # Convert basis points to decimal\n    basis_points_in_decimal = basis_points / 100\n    \n    # Do math calculation to get the answer\n    # First change basis points to decimal\n    basis_points_in_decimal = basis_points / 100\n    \n    # Calculate coupon rate\n    coupon_rate = three_month_MRR + basis_points_in_decimal\n    \n    # Convert to percentage\n    coupon_rate_percentage = coupon_rate * 100\n    \n    # return answer\n    return coupon_rate_percentage\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_sec1 = 0.3  # weight of security 1\n    weight_sec2 = 0.7  # weight of security 2\n    std_dev_sec1 = 0.2  # expected standard deviation of security 1\n    std_dev_sec2 = 0.12  # expected standard deviation of security 2\n    correlation_sec1_sec2 = 0.4  # correlation of returns between security 1 and 2\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = (weight_sec1**2 * std_dev_sec1**2 + \n                        weight_sec2**2 * std_dev_sec2**2 + \n                        2 * weight_sec1 * weight_sec2 * std_dev_sec1 * std_dev_sec2 * correlation_sec1_sec2)**0.5\n    answer = portfolio_std_dev * 100  # convert to percentage\n    \n    # return answer\n    return answer\n```\n\nRunning this program will calculate the expected standard deviation of the portfolio constructed by the fund manager, taking into account the weights of the securities, their individual standard deviations, and the correlation between their returns."
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "Here is the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    fixed_rate = 0.03  # Annualized fixed interest rate\n    initial_equity_index = 100  # Equity index at the time of the swap\n    nominal_amount = 100000000  # Nominal amount of the swap in dollars\n    years_to_maturity = 1  # Time to expiry of the swap in years\n    reset_frequency = 4  # Quarterly reset frequency\n    \n    # Present Value Factors for different periods\n    present_value_factors = {\n        0.25: 0.997506,\n        0.5: 0.992556,\n        0.75: 0.985222,\n        1: 0.975610\n    }\n    \n    # Calculate the total fixed payments for the year\n    fixed_payment = fixed_rate / reset_frequency * nominal_amount\n    \n    # Calculate the present value of the fixed payments\n    present_value_fixed = sum([fixed_payment * present_value_factors[t] for t in [0.25, 0.5, 0.75, 1]])\n    \n    # Calculate the equity index level where the swap value is zero\n    equity_index_level = (present_value_fixed / nominal_amount) * initial_equity_index\n    \n    # Return the answer\n    return equity_index_level\n\n# Execute the function to get the answer\nans = solution()\nprint(\"The final answer is\", ans)\n```\n\nLet me know if you need any further assistance."
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value_of_debt = 10e6  # $10 million\n    market_capitalization = 45e6  # $45 million\n    cash_and_short_term_investments = 2.5e6  # $2.5 million\n    EBITDA = 15e6  # $15 million\n    marginal_tax_rate = 0.4\n    \n    # Calculate enterprise value (EV)\n    enterprise_value = market_value_of_debt + market_capitalization - cash_and_short_term_investments\n    \n    # Calculate EBITDA with marginal tax adjustments\n    adj_EBITDA = EBITDA * (1 - marginal_tax_rate)\n    \n    # Calculate enterprise value multiple (EV/EBITDA)\n    EV_EBITDA_multiple = enterprise_value / adj_EBITDA\n    \n    # return answer\n    return EV_EBITDA_multiple\n\n# Print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 5000  # The future value of $5,000\n    years = 3  # The time the money is invested for\n    annual_discount_rate = 0.05  # The annual discount rate\n    compounding_frequency = 12  # The compounding frequency (monthly)\n\n    # Do math calculation to get the answer\n    # Convert annual discount rate to monthly discount rate\n    monthly_discount_rate = annual_discount_rate / compounding_frequency\n    \n    # Calculate the present value using the formula for compound interest\n    total_compounding_periods = years * compounding_frequency\n    present_value = future_value / (1 + monthly_discount_rate) ** total_compounding_periods\n    \n    # return answer\n    return present_value\n\n# Print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_swap_price = 0.7400\n    receiving_amount = 5000000  # in EUR\n    original_settlement_amount = receiving_amount * original_swap_price\n    current_spot_rate = 0.7343\n    \n    # calculate the 9-month forward rate from 3-month and 6-month forward rates\n    forward_points_3m = (14.0 + 15.0) / (2 * 10000)  # convert to pips and divide by 10000\n    forward_points_6m = (29.0 + 30.0) / (2 * 10000)  # convert to pips and divide by 10000\n    forward_points_9m = (forward_points_6m * 6 - forward_points_3m * 3) / 3\n    \n    current_forward_rate = current_spot_rate + forward_points_9m\n    current_settlement_amount = receiving_amount * current_forward_rate\n    \n    # calculate mark-to-market gain\n    mtm_gain = original_settlement_amount - current_settlement_amount\n    \n    # return answer\n    return mtm_gain\n```"
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_annual_dividend_next_year = 2.25\n    dividend_growth_rate_year_2_and_3 = 0.05\n    dividend_growth_rate_after_year_3_into_perpetuity = 0.045\n    terminal_cap_rate = 0.0625\n    num_of_shares_outstanding = 67900\n    affo = 290612 / num_of_shares_outstanding\n\n    # Calculate present value of dividends in years 1 to 3\n    present_value_of_dividends_years_1_to_3 = 0\n    for year in range(1, 4):\n        if year == 1:\n            present_value_of_dividends_years_1_to_3 += expected_annual_dividend_next_year / (1 + terminal_cap_rate)**year\n        else:\n            present_value_of_dividends_years_1_to_3 += (expected_annual_dividend_next_year * (1 + dividend_growth_rate_year_2_and_3)**year) / (1 + terminal_cap_rate)**year\n    \n    # Calculate present value of terminal value\n    terminal_value = expected_annual_dividend_next_year * (1 + dividend_growth_rate_year_2_and_3)**3 / (terminal_cap_rate - dividend_growth_rate_after_year_3_into_perpetuity)\n    present_value_of_terminal_value = terminal_value / (1 + terminal_cap_rate)**3\n    \n    # Calculate intrinsic share value\n    intrinsic_share_value = present_value_of_dividends_years_1_to_3 + present_value_of_terminal_value\n    \n    # return answer\n    return intrinsic_share_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth \u00a3300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B\u2019s return on equity be using year-end equity with the ending shareholders\u2019 equity being \u00a310,000,000, a tax rate of 25%, \u00a30.00 in dividends, and a net income of \u00a3750,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 750000\n    tax_rate = 0.25\n    eq_year_end = 10000000\n    dividends = 0\n    printer_cost = 300000\n    depreciation = printer_cost / 3\n    \n    # Calculate Firm A's tax expense, net income, and ending equity\n    tax_expense = net_income * tax_rate\n    net_income_after_tax = net_income - tax_expense\n    ending_equity_firm_a = eq_year_end - printer_cost + net_income_after_tax + depreciation\n    \n    # Calculate Firm B's tax expense (firm B expenses the printer, hence less taxable income)\n    tax_expense_firm_b = (net_income - printer_cost) * tax_rate\n    net_income_firm_b = net_income - printer_cost - tax_expense_firm_b\n    \n    # Calculate Firm B's ending equity\n    ending_equity_firm_b = ending_equity_firm_a + printer_cost\n    \n    # Calculate Firm B's return on equity\n    roe_firm_b = (net_income_firm_b - dividends) / ending_equity_firm_b\n    \n    # return answer\n    return roe_firm_b\n\n# Execute the function to get the answer\nresult = solution()\nprint(result)\n```\n\nPlease note: `roe_firm_b = (net_income_firm_b - dividends) / ending_equity_firm_b` - That isn't standard ROE (which is typically calculated as `Net Income / Total Shareholder's Equity`).  But given that `equity` isn't `shareholder's equity` and there's no info about preferred dividends for the firm, and it's a non-standard multiple step question. Therefore we need to try our best with the available data."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 85  # Stock price\n    K = 90  # Strike price\n    r = 0.05  # Risk-free interest rate\n    c = 10  # Call price\n    p = 15  # Put price\n    \n    # Do math calculation to get the answer\n    # According to Put-Call Parity, c + PV(K) = p + S\n    # Where PV(K) = K * e^(-rt)\n    # We can rearrange the formula to find the implied dividend yield (q)\n    # c - p = S - PV(K)\n    # c - p = S - K * e^(-(r-q)t)\n    # (c - p) / K = (S / K) - e^(-(r-q)t)\n    # e^(-(r-q)t) = (S / K) - ((c - p) / K)\n    # -(r-q)t = ln((S / K) - ((c - p) / K))\n    # (r-q)t = -ln((S / K) - ((c - p) / K))\n    # r - q = -ln((S / K) - ((c - p) / K)) / t\n    # q = r + ln((S / K) - ((c - p) / K)) / t\n    t = 5  # Time to maturity in years\n    implied_dividend_yield = r - (1/t) * (-(S / K - ((c - p) / K)))\n    # return answer as a percentage\n    return implied_dividend_yield * 100\n```\nNote: In Python `ln` function is `math.log`. But since we are doing all the calculation using Python's built-in `**` for power operation and `/` for division, we didn't need `math.log` in this code snippet."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    change_in_yield = -0.01  # 1% or 100 basis points in decimal form\n    duration = 6.0\n    convexity = 55.0\n\n    # Calculate the return effect of the change in yield using the duration and convexity formula\n    # The formula is: return = -duration * change_in_yield + 0.5 * convexity * (change_in_yield ** 2)\n    return_effect = -duration * change_in_yield + 0.5 * convexity * (change_in_yield ** 2)\n\n    # return answer\n    return return_effect\n```"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05  # 5%\n    face_value = 100  # Assuming face value of 100\n    years_to_maturity = 3\n    z_spread = 0.0234  # 234 basis points converted to decimal\n    spot_rates = [0.0486, 0.0495, 0.0565]  # Spot rates for 1, 2, and 3 years respectively\n\n    # Do math calculation to get the answer\n    # Calculate discount factors for each year\n    discount_factors = [1 / (1 + (spot_rate + z_spread)) ** (i + 1) for i, spot_rate in enumerate(spot_rates)]\n    \n    # Calculate present value of coupon payments\n    coupon_payments = [coupon_rate * face_value * discount_factor for discount_factor in discount_factors]\n    present_value_coupons = sum(coupon_payments)\n    \n    # Calculate present value of face value at maturity\n    present_value_face = face_value * discount_factors[-1]\n    \n    # Calculate total present value (bond's worth)\n    bond_worth = present_value_coupons + present_value_face\n    \n    # return answer\n    return bond_worth\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.65  # beta of XYZ Company\n    risk_free_rate = 0.03  # risk-free rate of return\n    expected_market_return = 0.09  # expected market return\n    \n    # Do math calculation to get the answer\n    # Using the Capital Asset Pricing Model (CAPM) formula\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    \n    # return answer\n    return round(expected_return, 2)  # rounded to two decimal places\n\n# Execute the function\nanswer = solution()\nprint(answer)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 10.3829\n    modified_convexity = 141.217\n    change_in_yield = -0.0050  # 50 bps = 0.5% = 0.005\n    \n    # Do math calculation to get the answer\n    # The formula for the percentage price change is: \n    #       -duration * change_in_yield + (convexity / 100) * (change_in_yield ** 2)\n    projected_percentage_price_change = -modified_duration * change_in_yield + (modified_convexity / 100) * (change_in_yield ** 2)\n    \n    # return answer\n    return projected_percentage_price_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "Here's the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    number_of_shares = 1200000  # number of common shares\n    current_share_price = 10  # current share price\n    \n    # debt details\n    face_value = 10000000  # $10 million\n    coupon_rate = 0.08  # 8%\n    yield_to_maturity = 0.1365  # 13.65%\n    years_to_maturity = 5  # 5 years\n    \n    # additional funding details\n    funding_amount = 7500000  # $7.5 million\n    max_bond_issuance_at_par = 2500000  # $2.5 million\n    yield_beyond_max_issuance = 0.16  # 16%\n    risk_free_rate = 0.03  # 3%\n    expected_market_return = 0.10  # 10%\n    marginal_tax_rate = 0.30  # 30%\n    beta = 2.2  # beta\n\n    # Calculate the current debt and equity value\n    current_bond_price = face_value * ((coupon_rate / 2) / ((1 + yield_to_maturity / 2)**(2 * years_to_maturity)) + (1 / (1 + yield_to_maturity / 2)**(2 * years_to_maturity)))\n    current_market_cap = number_of_shares * current_share_price\n    debt_to_equity_ratio = (face_value + current_bond_price) / current_market_cap\n\n    # Calculate the new debt amount and equity amount\n    new_funding_bond_amount = min(funding_amount, max_bond_issuance_at_par)\n    new_funding_stock_amount = funding_amount - new_funding_bond_amount\n    new_bond_value = (new_funding_bond_amount / 2) * (((1 + yield_to_maturity / 2)**(2 * years_to_maturity)) / ((yield_to_maturity / 2) / (1 + yield_to_maturity / 2)**(2 * years_to_maturity))) + (1 / (1 + yield_to_maturity / 2)**(2 * years_to_maturity)))\n    new_equity_value = new_funding_stock_amount / current_share_price * current_share_price\n\n    # Determine the yield to maturity for any bonds issued beyond"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "Here is the completed Python program:\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Face value of the bond\n    coupon_rate = 0.08  # Coupon rate of the bond\n    time_to_maturity = 3  # Time-to-maturity of the bond\n    spot_rates = [0.07, 0.08, 0.09]  # Spot rates for 1-year, 2-year, and 3-year maturities\n    \n    # Do math calculation to get the answer\n    # Calculate the discount factor for each period\n    discount_factors = [1 / (1 + spot_rate) ** (i+1) for i, spot_rate in enumerate(spot_rates)]\n    \n    # Calculate the present value of the coupon payments\n    coupon_pv = sum(coupon_rate * face_value * discount_factor for discount_factor in discount_factors)\n    \n    # Calculate the present value of the face value\n    face_pv = face_value * discount_factors[-1]\n    \n    # Calculate the price of the bond\n    bond_price = coupon_pv + face_pv\n    \n    # return answer\n    return bond_price\n```\nThis program uses the provided spot rates to calculate the price of Bond D by discounting the coupon payments and the face value of the bond. The discount factors are calculated for each period using the spot rates, and then used to calculate the present value of the coupon payments and the face value. The price of the bond is then calculated by adding the present value of the coupon payments and the face value."
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent \u00a5360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater\u2019s consolidated depreciation and amortization expense for 2019?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    depreciation_golden = 106\n    depreciation_frost = 85\n    licenses_value = 360 / 0.5 - (1050 - 485)  # Acquisition cost of Snowflake - Net assets' fair value of Snowflake at acquisition\n    licenses_amortization = licenses_value / 5\n\n    # Do math calculation to get the answer\n    consolidated_depreciation = depreciation_golden + depreciation_frost + licenses_amortization\n    \n    # return answer\n    return consolidated_depreciation\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "Here is the Python program to find the key rate '01 for a shift of 10 years:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    two_year_shift = 87.3212\n    five_year_shift = 87.2545\n    ten_year_shift = 87.1454\n    thirty_year_shift = 87.3454\n    \n    # Do math calculation to get the answer\n    # Calculate the key rate durations\n    two_year_duration = (two_year_shift - initial_value) * 100\n    five_year_duration = (five_year_shift - initial_value) * 100\n    ten_year_duration = (ten_year_shift - initial_value) * 100\n    thirty_year_duration = (thirty_year_shift - initial_value) * 100\n    \n    # Calculate the key rate '01 for 10-year shift\n    # This assumes that the key rate '01 for a 10-year shift is the change in value for a 1bp shift at the 10-year point\n    key_rate_01 = ten_year_duration\n    \n    # return answer\n    return key_rate_01\n```\n\nTo get the answer, you just need to call `solution()`."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.14300000000000002,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.2  # likelihood of bankruptcy\n    P_B = 0.7  # probability of a \"good\" rating\n    P_B_given_A = 0.5  # probability of a \"good\" rating given bankruptcy\n\n    # Do math calculation to get the answer\n    # Bayes' formula\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n\n    # return answer\n    return P_A_given_B\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs \u00a3100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 100000  # the amount needed a year from now\n    yearly_rate = 0.025  # the declared yearly rate\n    periods_per_year = 52  # the number of times interest is compounded per year\n    \n    # Do math calculation to get the answer\n    # Calculate the periodic interest rate\n    periodic_rate = yearly_rate / periods_per_year\n    \n    # Calculate the number of periods\n    n = periods_per_year\n    \n    # Calculate the present value\n    present_value = future_value / (1 + periodic_rate) ** n\n    \n    # return answer\n    return round(present_value, 2)  # round to 2 decimal places\n```"
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 55  # Zhang's believed stock price\n    eps_2017 = 1.03  # EPS in 2017\n    eps_2016 = 0.89  # EPS in 2016\n    core_eps_2017 = 1.31  # Core EPS in 2017\n    core_eps_2016 = 1.01  # Core EPS in 2016\n    \n    # Calculate average EPS and core EPS\n    avg_eps = (eps_2017 + eps_2016) / 2\n    avg_core_eps = (core_eps_2017 + core_eps_2016) / 2\n    \n    # Zhang believed the trailing P/E ratio should be based on the core EPS, not the reported EPS\n    # So we use avg_core_eps to calculate the trailing P/E ratio\n    avg_core_eps_without_acquisition_charges = (core_eps_2017 + (core_eps_2016 + 0.12)) / 2\n    trailing_pe = price / avg_core_eps_without_acquisition_charges\n    \n    # The settlement of a lawsuit is a nonrecurring item and should be excluded from the calculation of EPS.\n    # So we add 0.10 to eps_2017 before calculating the average core EPS.\n    avg_core_eps_recurring = ((core_eps_2017 + 0.10) + (core_eps_2016 + 0.12)) / 2\n    \n    # Use the higher number of the two different methods\n    calculated_trailing_pe_1 = price / avg_core_eps_without_acquisition_charges\n    calculated_trailing_pe_2 = price / avg_core_eps_recurring\n    trailing_pe = max(calculated_trailing_pe_1, calculated_trailing_pe_2)\n    \n    # return answer\n    return trailing_pe\n```"
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ebitda_2017 = 2000\n    depreciation_expense_2017 = 400\n    interest_expense_2017 = 350\n    tax_rate = 0.3\n    net_income_2017 = 875\n    accounts_payable_2017 = 400\n    accounts_payable_2018 = 300\n    accrued_taxes_and_expenses_2017 = 90\n    accrued_taxes_and_expenses_2018 = 120\n    inventories_2017 = 720\n    inventories_2018 = 850\n    accounts_receivable_2017 = 750\n    accounts_receivable_2018 = 800\n    \n    # Calculate EBIT, Pretax income, and Depreciation expense for 2018 using 2017 values\n    ebit = ebitda_2017 - depreciation_expense_2017\n    pretax_income = ebit - interest_expense_2017\n    tax = pretax_income * tax_rate\n    income = pretax_income - tax\n    \n    # Calculate the Free Cash Flow\n    deltandern current assets = inventories_2018 - inventories_2017 + accounts_receivable_2018 - accounts_receivable_2017\n    delta current liabilities = accounts_payable_2018 - accounts_payable_2017 + accrued_taxes_and_expenses_2018 - accrued_taxes_and_expenses_2017\n    \n    # Calculate the Capital Expenditures\n    delta fixed assets = 5000 - 4250\n    \n    # Calculate Free Cash Flow to Equity (FCFE)\n    free_cash_flow = ebitda_2017 - delta fixed assets - deltandern current assets + delta current liabilities - interest_expense_2017*(1-tax_rate) + net_income_2017\n    \n    # return answer\n    return free_cash_flow\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    human_capital = 1200000\n    financial_capital = 600000\n    target_equity_allocation = 0.3\n    human_capital_equity_similarity = 0.25\n    \n    # Calculate the total portfolio size\n    total_portfolio = human_capital + financial_capital\n    \n    # Calculate the total equity asset in the portfolio\n    total_equity_asset = total_portfolio * target_equity_allocation\n    \n    # Calculate the equity asset from human capital\n    human_capital_equity = human_capital * human_capital_equity_similarity\n    \n    # Calculate the target equity allocation for financial capital\n    financial_capital_equity = total_equity_asset - human_capital_equity\n    \n    # Calculate the equity allocation percentage for financial capital\n    answer = (financial_capital_equity / financial_capital) * 100\n    \n    # return answer\n    return answer\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_2014 = 2125\n    sales_2013 = 2003\n    ending_inventory_LIFO_2014 = 312\n    ending_inventory_LIFO_2013 = 280\n    LIFO_reserve_2014 = 82\n    LIFO_reserve_2013 = 64\n    net_profit_margin_2014 = 0.049\n    net_profit_margin_2013 = 0.04\n    tax_rate = 0.30\n\n    # Do math calculation to get the answer\n    begining_inventory_FIFO_2014 = ending_inventory_LIFO_2013 + LIFO_reserve_2013\n    ending_inventory_FIFO_2014 = ending_inventory_LIFO_2014 + LIFO_reserve_2014\n    cost_of_goods_sold_FIFO_2014 = sales_2014 - net_profit_margin_2014 * sales_2014\n    cost_of_goods_sold_FIFO_2013 = sales_2013 - net_profit_margin_2013 * sales_2013\n    FIFO_extra_cost_2014 = begining_inventory_FIFO_2014 - ending_inventory_FIFO_2014 + cost_of_goods_sold_FIFO_2014\n    LIFO_extra_cost_2014 = LIFO_reserve_2014 - LIFO_reserve_2013 + cost_of_goods_sold_FIFO_2014\n    tax_effect = (LIFO_extra_cost_2014 - FIFO_extra_cost_2014) * tax_rate\n    higher_net_income_2014 = LIFO_extra_cost_2014 - FIFO_extra_cost_2014 - tax_effect\n\n    # return answer\n    return round(higher_net_income_2014)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    one_year_spot_rate = 0.0102\n    two_year_spot_rate = 0.0165\n    three_year_spot_rate = 0.0215\n    \n    # Convert spot rates to returns\n    one_year_return = (1 + one_year_spot_rate) ** 1\n    two_year_return = (1 + two_year_spot_rate) ** 2\n    three_year_return = (1 + three_year_spot_rate) ** 3\n    \n    # Calculate the implied forward return for the period [2,3]\n    forward_return_2_3 = (three_year_return / two_year_return) ** (1/1)\n    \n    # Calculate the implied forward rate for the period [2,3]\n    implied_forward_rate_2_3 = forward_return_2_3 - 1\n    \n    # return answer\n    return implied_forward_rate_2_3\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 48.6  # current stock price\n    X = 45    # strike price\n    T = 0.25  # time to expiration in years\n    r = 0.003 # continuously compounded risk-free rate\n    sigma = 0.3  # volatility\n    N_d1 = 0.6352  # cumulative distribution function of the standard normal distribution for d1\n    N_d2 = 0.5486  # cumulative distribution function of the standard normal distribution for d2\n    \n    # Do math calculation to get the answer\n    # calculate d1 and d2\n    d1 = (np.log(S/X) + (r + sigma**2/2)*T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    \n    # calculate put option price using the BSM model\n    put_option_price = X * np.exp(-r*T) * N_d2 - S * N(-d1)\n    \n    # return answer\n    return put_option_price\n```"
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    observations = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    \n    # Do math calculation to get the answer\n    mean = sum(observations) / len(observations)\n    variance = sum((x - mean) ** 2 for x in observations) / (len(observations) - 1)\n    sample_std_deviation = variance ** 0.5\n    \n    # return answer\n    return sample_std_deviation\n\n# Print the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009000000000000001,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "Here is the Python program to calculate the value added (active return) for the Kurok Fund:\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_weights = [0.3, 0.3, 0.2, 0.1, 0.1]\n    benchmark_weights = [0.24, 0.2, 0.2, 0.18, 0.18]\n    returns = [0.14, 0.15, 0.12, 0.08, 0.10]\n\n    # Calculate portfolio return\n    portfolio_return = sum([weight * return_ for weight, return_ in zip(portfolio_weights, returns)])\n    \n    # Calculate benchmark return\n    benchmark_return = sum([weight * return_ for weight, return_ in zip(benchmark_weights, returns)])\n\n    # Calculate value added (active return)\n    value_added = portfolio_return - benchmark_return\n    \n    # return answer\n    return value_added\n```\nThe program uses list comprehension to calculate the weighted sum of returns for both the portfolio and the benchmark, then subtracts the benchmark return from the portfolio return to get the value added (active return)."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    maturity_of_first_pool = 30\n    amount_of_first_pool = 1000000\n    maturity_of_second_pool = 90\n    amount_of_second_pool = 2000000\n    maturity_of_third_pool = 180\n    amount_of_third_pool = 3000000\n    maturity_of_fourth_pool = 360\n    amount_of_fourth_pool = 4000000\n    \n    # Do math calculation to get the answer\n    weighted_maturity_of_first_pool = maturity_of_first_pool * amount_of_first_pool\n    weighted_maturity_of_second_pool = maturity_of_second_pool * amount_of_second_pool\n    weighted_maturity_of_third_pool = maturity_of_third_pool * amount_of_third_pool\n    weighted_maturity_of_fourth_pool = maturity_of_fourth_pool * amount_of_fourth_pool\n    \n    total_weighted_maturity = weighted_maturity_of_first_pool + weighted_maturity_of_second_pool + weighted_maturity_of_third_pool + weighted_maturity_of_fourth_pool\n    total_amount = amount_of_first_pool + amount_of_second_pool + amount_of_third_pool + amount_of_fourth_pool\n    \n    weighted_average_maturity = total_weighted_maturity / total_amount\n    \n    # return answer\n    return weighted_average_maturity\n```"
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |\u00a31.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |\u20ac0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    nov_sugar_quantity = 70\n    nov_sugar_price = 0.90\n    nov_cotton_quantity = 60\n    nov_cotton_price = 0.60\n    dec_sugar_quantity = 120\n    dec_sugar_price = 1.00\n    dec_cotton_quantity = 50\n    dec_cotton_price = 0.80\n    \n    # Calculate total cost for November and December\n    nov_total_cost = (nov_sugar_quantity * nov_sugar_price) + (nov_cotton_quantity * nov_cotton_price)\n    dec_total_cost = (dec_sugar_quantity * dec_sugar_price) + (dec_cotton_quantity * dec_cotton_price)\n    \n    # Calculate Paasche index\n    paasche_index = dec_total_cost / nov_total_cost\n    \n    # return answer\n    return paasche_index\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "Here's the complete Python program to calculate the annualized after-tax post-liquidation return.\n```python\ndef solution():\n    # Define variables name and value\n    year1_return = 0.09  # 9%\n    year2_return = 0.05  # 5%\n    year3_return = 0.08  # 8%\n    capital_gains_tax_rate = 0.25  # 25%\n    embedded_gain = 0.10  # 10%\n    \n    # Calculate pre-liquidation return\n    pre_liquidation_return = (1 + year1_return) * (1 + year2_return) * (1 + year3_return) - 1\n    \n    # Calculate aggregate capital gains\n    aggregate_capital_gains = embedded_gain * (1 + capital_gains_tax_rate) - 1\n    \n    # Calculate tax rate on aggregate capital gains\n    tax_rate_on_aggregate_capital_gains = capital_gains_tax_rate * aggregate_capital_gains\n    \n    # Calculate after-tax post-liquidation return\n    post_liquidation_return = pre_liquidation_return - tax_rate_on_aggregate_capital_gains\n    \n    # Calculate annualized after-tax post-liquidation return\n    years = 3\n    annualized_post_liquidation_return = ((1 + post_liquidation_return) ** (1 / years)) - 1\n    \n    # return answer\n    return annualized_post_liquidation_return\n\n# call the function to get the result\nprint(\"Annualized After-tax Post-liquidation Return: {:.2f}%\".format(solution()*100))\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_price = 50  # Going rate for the base asset at present\n    risk_free_rate = 0.04  # Risk-free rate\n    time_to_maturity = 3 / 12  # Contract ends in three months\n    advantage_value = 5  # Current value of the advantages\n    disadvantage_value = 6  # Current value of the disadvantages\n\n    # Calculate the forward price using the formula F = S * e^(rt) + PV(disadvantages) - PV(advantages)\n    # First, calculate the present value of the risk-free rate\n    present_value_risk_free_rate = risk_free_rate * time_to_maturity\n    \n    # Calculate the forward price\n    forward_price = spot_price * (1 + present_value_risk_free_rate) + disadvantage_value - advantage_value\n    \n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cny_to_hkd = 1.1757\n    aud_to_cny = 5.0765\n    \n    # Do math calculation to get the answer\n    hkd_to_aud = aud_to_cny / cny_to_hkd\n    \n    # return answer\n    return hkd_to_aud\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ytm = 0.055  # Yield to Maturity (YTM)\n    annual_payment = 100000  # Annual payment\n    years = 40  # Number of years\n\n    # Do math calculation to get the answer\n    # The formula for the present value of an annuity is: PV = PMT * [(1 - (1 + r)^(-n)) / r]\n    # where PV = present value, PMT = annual payment, r = YTM, n = number of years\n    present_value = annual_payment * ((1 - (1 + ytm)**(-years)) / ytm)\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    security1_weight = 0.4\n    security2_weight = 0.6\n    security1_std_dev = 0.3\n    security2_std_dev = 0.15\n    correlation = 0.25\n    \n    # Do math calculation to get the answer\n    portfolio_variance = (security1_weight ** 2) * (security1_std_dev ** 2) + \\\n                        (security2_weight ** 2) * (security2_std_dev ** 2) + \\\n                        2 * security1_weight * security2_weight * security1_std_dev * security2_std_dev * correlation\n    \n    portfolio_std_dev = portfolio_variance ** 0.5\n    \n    # return answer\n    return portfolio_std_dev\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    selling_price = 1000  # selling price of the artwork\n    creation_cost = 300  # cost of creating the artwork\n    \n    # Do math calculation to get the answer\n    # The value of the final step in creating the artwork is the difference between the selling price and the creation cost\n    value_added = selling_price - creation_cost\n    \n    # return answer\n    return value_added\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rate = 0.1431  # 14.31% as a decimal\n    compounds_per_year = 4  # compounded quarterly\n    \n    # Do math calculation to get the answer\n    # The formula for effective annual rate is (1 + r/n)^(n) - 1, \n    # where r is the nominal rate, n is the number of compounds per year\n    effective_rate = (1 + rate/compounds_per_year)**compounds_per_year - 1\n    \n    # return answer\n    return effective_rate\n```\n\nWhen you run this program, it will return the effective annual rate for the given yearly rate compounded quarterly."
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold\u2013Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_income_return = 0.024  # 2.4%\n    real_earnings_growth = 0.05  # 5%\n    expected_inflation = 0.023  # 2.3%\n    current_equity_market_pe = 14.5\n    expected_equity_market_pe = 14.0\n    current_year_over_year_inflation_rate = 0.021  # 2.1%\n\n    # Do math calculation to get the answer\n    a_minus_1 = (expected_inflation + 1) * (expected_equity_market_pe / current_equity_market_pe)\n    \n    b = (real_earnings_growth - (expected_equity_market_pe - current_equity_market_pe) / current_equity_market_pe)\n    b_plus_1 = b + 1\n    \n    div_yield = dividend_income_return\n    \n    nominal_earnings_growth = b_plus_1 * a_minus_1 - 1\n    r_equity = current_year_over_year_inflation_rate + nominal_earnings_growth - div_yield\n    answer = f'{r_equity * 100:.1f}'  # format to string, 1 decimal place\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036000000000000004,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    variance_of_x = 0.25\n    variance_of_y = 0.64\n    correlation = 0.09\n    \n    # Do math calculation to get the answer\n    covariance = correlation * (variance_of_x ** 0.5) * (variance_of_y ** 0.5)\n    \n    # return answer\n    return covariance\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09\n    \n    # Do math calculation to get the answer\n    # The bond-equivalent yield (BEY) is calculated by dividing the effective annual return by 2 and adding the result to itself\n    bond_equivalent_yield = (effective_annual_return / 2) * 2\n    \n    # return answer\n    return bond_equivalent_yield\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "The depreciation of an asset using the double-declining balance (DDB) method can be calculated using the following formula:\n\n`Depreciation = (Asset Cost - Accumulated Depreciation) * (Depreciation Rate / Year)`\n\nHowever, at the beginning of the first year, the accumulated depreciation is zero. \n\nWe know that the useful life of the machine is 10 years and the residual value is $5000. The Depreciation Rate is 2times of the normal depreciation rate (100%/10)/2=10%/year*2=20%/year, According to the GAAP rule.\n\nLet's calculate the first year's depreciation for the machine.\n\n```python\ndef solution():\n    # Define variables name and value\n    asset_cost = 50000\n    residual_value = 5000\n    useful_life = 10\n    yearly_depreciation_rate = 1 / useful_life * 2\n    \n    # Do math calculation to get the answer\n    first_year_depreciation = asset_cost * yearly_depreciation_rate \n    answer = first_year_depreciation\n    \n    # return answer\n    return answer\n```\n\nNow you can print the depreciation amount for the first year."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gbp_per_eur = 0.8878\n    \n    # Do math calculation to get the answer\n    # Since the exchange rate is usually quoted as the amount of the foreign currency that \n    # can be exchanged for one unit of the domestic currency, \n    # the inverse of the gbp_per_eur is the eur_per_gbp\n    eur_per_gbp = 1 / gbp_per_eur\n    \n    # return answer\n    return round(eur_per_gbp, 4)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04  # 4% annually\n    bond_yield = 0.06      # 6% annually\n    recovery_rate = 0.7    # 70%\n    \n    # Do math calculation to get the answer\n    # Calculate the credit spread\n    credit_spread = bond_yield - risk_free_rate\n    \n    # Calculate the probability of default\n    # The formula is based on the concept that the credit spread is equal to the expected loss,\n    # which is the product of the probability of default and the loss given default (1 - recovery rate)\n    probability_of_default = credit_spread / (1 - recovery_rate)\n    \n    # return answer\n    return probability_of_default\n\n# Execute the function to get the final answer\nresult = solution()\nprint(\"The final answer is {:.2%}\".format(result))\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    primary_borrowing = 1.3e9  # $1.3 billion\n    pre_tax_profit_rate = 0.07  # 7%\n    direct_annual_operation_cost = 6e6  # $6 million\n    consumer_deposits = 1.3e9  # $1.3 billion\n    interest_rate = 0.05  # 5%\n    expected_yearly_loss_rate = 0.003  # 0.3%\n    unexpected_loss_rate = 0.08  # 8%\n    risk_free_rate = 0.015  # 1.5%\n    tax_rate = 0.25  # 25%\n\n    # Calculate expected profit after tax\n    pre_tax_profit = primary_borrowing * pre_tax_profit_rate\n    expected_profit_after_tax = pre_tax_profit * (1 - tax_rate)\n\n    # Calculate total risk capital\n    expected_loss = primary_borrowing * expected_yearly_loss_rate\n    unexpected_loss = primary_borrowing * unexpected_loss_rate\n    total_risk_capital = expected_loss + unexpected_loss\n\n    # Calculate RAROC\n    net_operating_income = expected_profit_after_tax - direct_annual_operation_cost - (consumer_deposits * interest_rate)\n    RAROC = (net_operating_income - (total_risk_capital * risk_free_rate)) / total_risk_capital\n\n    # Return RAROC\n    return RAROC\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    car_insurance_renewal_rate = 0.4  # 40% of clients with only a car insurance plan will renew it\n    house_insurance_renewal_rate = 0.7  # 70% of clients with only a house insurance plan will renew it\n    both_insurance_renewal_rate = 0.8  # 80% of clients with both a car and a house insurance plan will renew at least one of these plans\n    \n    car_insurance_percentage = 0.7  # 70% of clients have a car insurance plan\n    house_insurance_percentage = 0.5  # 50% of clients have a house insurance plan\n    both_insurance_percentage = 0.2  # 20% of clients have both types of plans\n    \n    # Calculate the percentage of clients with only car insurance\n    only_car_insurance_percentage = car_insurance_percentage - both_insurance_percentage\n    \n    # Calculate the percentage of clients with only house insurance\n    only_house_insurance_percentage = house_insurance_percentage - both_insurance_percentage\n    \n    # Calculate the percentage of clients that will renew at least one plan next year\n    renewed_car_insurance_percentage = (only_car_insurance_percentage * car_insurance_renewal_rate) + (both_insurance_percentage * both_insurance_renewal_rate)\n    renewed_house_insurance_percentage = (only_house_insurance_percentage * house_insurance_renewal_rate) + (both_insurance_percentage * both_insurance_renewal_rate)\n    renewed_any_insurance_percentage = renewed_car_insurance_percentage + renewed_house_insurance_percentage - (both_insurance_percentage * both_insurance_renewal_rate)\n    \n    # return answer as a percentage\n    return renewed_any_insurance_percentage * 100\n\nanswer = solution()\nprint(answer)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    present_spot_rate = 0.06  # 6%\n    forward_rate_one_year_from_now = 0.08  # 8%\n    forward_rate_two_years_from_now = 0.10  # 10%\n    coupon_rate = 0.10  # 10%\n    par_value = 1000  # $1000\n    years = 3\n    \n    # Calculate the present value of each coupon payment\n    present_value_coupon_payment_year_1 = coupon_rate * par_value / (1 + present_spot_rate)\n    present_value_coupon_payment_year_2 = (coupon_rate * par_value) / (1 + present_spot_rate) / (1 + forward_rate_one_year_from_now)\n    present_value_coupon_payment_year_3 = (coupon_rate * par_value) / (1 + present_spot_rate) / (1 + forward_rate_one_year_from_now) / (1 + forward_rate_two_years_from_now)\n    \n    # Calculate the present value of the par value\n    present_value_par = par_value / (1 + present_spot_rate) / (1 + forward_rate_one_year_from_now) / (1 + forward_rate_two_years_from_now)\n    \n    # Calculate the total present value\n    total_present_value = present_value_coupon_payment_year_1 + present_value_coupon_payment_year_2 + present_value_coupon_payment_year_3 + present_value_par\n    \n    # return answer\n    return total_present_value\n\n# Execute the function\nbond_value = solution()\nprint(\"The final answer is $\", round(bond_value, 2))"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    labor_growth_rate = 0.009  # 0.9%\n    labor_productivity_growth_rate = 0.015  # 1.5%\n    inflation_rate = 0.021  # 2.1%\n    dividend_yield = 0.0225  # 2.25%\n    PE_growth_rate = 0  # nonexistent growth\n    \n    # Do math calculation to get the answer\n    real_EOPS_growth_rate = labor_growth_rate + labor_productivity_growth_rate\n    nominal_EOPS_growth_rate = real_EOPS_growth_rate + inflation_rate\n    benchmark_forecast = nominal_EOPS_growth_rate + dividend_yield + PE_growth_rate\n    \n    # return answer\n    return benchmark_forecast\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retirement_fund = 100000000  # $100 million\n    equity_percentage = 0.8  # 80%\n    beta_equity = 1.2\n    desired_equity_percentage = 0.6  # 60%\n    stock_index_value = 1200\n    multiplier = 250\n    beta_stock_index = 0.95\n    \n    # Calculate the current amount invested in equity\n    current_equity = retirement_fund * equity_percentage\n    \n    # Calculate the desired amount to be invested in equity\n    desired_equity = retirement_fund * desired_equity_percentage\n    \n    # Calculate the reduction in equity needed\n    reduction_in_equity = current_equity - desired_equity\n    \n    # Calculate the number of stock index futures needed to sell to achieve the desired equity percentage\n    # First, calculate the value of one unit of the stock index futures\n    value_of_one_unit = stock_index_value * multiplier\n    \n    # Then, calculate the number of units needed to match the reduction in equity\n    number_of_units = reduction_in_equity / value_of_one_unit\n    \n    # Since we want to reduce the beta risk, we need to multiply by the ratio of the betas\n    number_of_futures = number_of_units * (beta_equity / beta_stock_index)\n    \n    return int(number_of_futures)\n```"
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_b = 0.114  # 11.4% anticipated return for Share B\n    risk_free_rate = 0.03  # 3% risk-free rate\n    beta_security_2 = 1.40  # Beta of Security 2 (Share B)\n    \n    # Do math calculation to get the answer\n    # The CAPM formula: Expected Return = Risk-Free Rate + Beta * (Expected Market Return - Risk-Free Rate)\n    # Rearrange the formula to solve for Expected Market Return: Expected Market Return = (Expected Return - Risk-Free Rate) / Beta + Risk-Free Rate\n    expected_market_return = (expected_return_b - risk_free_rate) / beta_security_2 + risk_free_rate\n    \n    # return answer\n    return expected_market_return\n```"
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training_staff = 1000\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training_staff\n    \n    # return answer\n    return total_cost\n```\n\nWhen you run this program, it will calculate the total cost of the scientific equipment and return the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_pledged_capital = 100000000\n    carried_interest_rate = 0.2\n    year_end_nav_before_distribution = 160000000\n    year_end_nav_after_distribution = 130000000\n    projected_nav = 250000000\n    total_distributions = 30000000\n    total_paid_in_capital = 90000000\n    \n    # Calculate the total carried interest earned last year\n    carried_interest_earned_last_year = year_end_nav_before_distribution * carried_interest_rate\n    \n    # Calculate the actual carried interest taken\n    actual_carried_interest_taken = (carried_interest_earned_last_year - (year_end_nav_before_distribution - year_end_nav_after_distribution)) \n    actual_carried_interest_taken = max(actual_carried_interest_taken, 0)\n    \n    # Calculate the carried interest that was accrued but not distributed last year\n    accrued_but_not_distributed = carried_interest_earned_last_year - actual_carried_interest_taken\n    \n    # Calculate the total paid in capital \n    previous_total_paid_in_capital = total_paid_in_capital\n    total_paid_in_capital += accrued_but_not_distributed\n\n\n    # Calculate carried interest for next year\n    carried_interest_next_year = max((projected_nav - total_paid_in_capital) * carried_interest_rate, 0)\n\n    # return answer\n    return carried_interest_next_year\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 75000  # initial investment\n    annual_interest_rate = 0.07  # 7%\n    years = 6\n    quarterly_interest_rate = annual_interest_rate / 4  # since interest is compounded quarterly\n    number_of_compounding_periods = years * 4  # 6 years * 4 quarters per year\n    \n    # Do math calculation to get the answer\n    future_value = principal * (1 + quarterly_interest_rate) ** number_of_compounding_periods\n    \n    # return answer\n    return future_value\n```"
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | \u00a38,000              | \u00a38,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | \u00a31,200              | \u00a33,000       |\n| Net balance, end of 2013                | \u00a36,800              | \u00a35,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | \u00a310,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_acquisition_cost = 8000  # millions\n    depreciation_years_accounting = 20  # years\n    depreciation_years_tax = 8  # years\n    accumulated_depreciation_end_2013_accounting = 1200  # millions\n    accumulated_depreciation_end_2013_tax = 3000  # millions\n    revaluation_balance_start_2014 = 10000  # millions\n    new_estimated_life = 20  # years\n    tax_rate = 0.3  # 30%\n    \n    # Calculate annual depreciation for accounting and tax purposes before revaluation\n    annual_depreciation_accounting = original_acquisition_cost / depreciation_years_accounting\n    annual_depreciation_tax = original_acquisition_cost / depreciation_years_tax\n\n    # Calculate remaining life for tax purposes before revaluation\n    remaining_life_tax_before_revaluation = depreciation_years_tax - 3\n    \n    # Calculate temporary difference due to revaluation for accounting and tax purposes\n    temporary_difference = revaluation_balance_start_2014 - (original_acquisition_cost - accumulated_depreciation_end_2013_accounting)\n    \n    # Calculate future annual depreciation for accounting after revaluation\n    future_annual_depreciation_accounting = (revaluation_balance_start_2014 - (original_acquisition_cost - accumulated_depreciation_end_2013_accounting)) / new_estimated_life\n    \n    # Calculate future annual tax depreciation after revaluation for tax purposes\n    # No change in tax depreciation, still uses original cost\n    remaining_tax_depreciable_value = original_acquisition_cost - accumulated_depreciation_end_2013_tax\n    future_annual_depreciation_tax = remaining_tax_depreciable_value / remaining_life_tax_before_revaluation\n    \n    # Calculate taxable temporary difference for each year for the remaining life\n    taxable_temporary_difference_per_year = (future_annual_depreciation_accounting - future_annual_depreciation_tax)\n    \n    # Calculate deferred tax liability for the remaining years\n    deferred_tax_liability = (taxable_temporary_difference_per_year * remaining_life_tax_before_revaluation) * tax_rate\n    \n    # Adjust for one year of depreciation that has already passed in 2014\n    deferred_tax_liability -= (future_annual_depreciation_accounting - future_annual_depreciation_tax) * tax_rate\n    \n    # return answer\n    return deferred_tax_liability\n```"
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n    \n    # Calculate the mean\n    mean = sum([p * s for p, s in zip(probabilities, sales)])\n    \n    # Calculate the variance\n    variance = sum([p * ((s - mean) ** 2) for p, s in zip(probabilities, sales)])\n    \n    # Calculate the standard deviation\n    std_dev = variance ** 0.5\n    \n    # return answer\n    return std_dev\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    company_contribution = 1200\n    pbo_beginning = 45000\n    pbo_ending = 43500\n    plan_assets_beginning = 40800\n    plan_assets_ending = 39650\n    \n    # Do math calculation to get the answer\n    service_cost = pbo_ending - pbo_beginning\n    interest_cost = pbo_beginning * 0.06  # assuming 6% interest rate\n    expected_return_on_plan_assets = (plan_assets_beginning + plan_assets_ending) / 2 * 0.07  # assuming 7% expected return\n    amortization = -100  # assuming -$100 amortization for the year\n    recurring_pension_cost = service_cost + interest_cost + company_contribution - expected_return_on_plan_assets + amortization\n    \n    # return answer\n    return recurring_pension_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_1 = 500\n    return_1 = 0.12\n    investment_2 = 600\n    return_2 = 0.05\n    investment_3 = 1000\n    return_3 = 0.01\n    \n    # Do math calculation to get the answer\n    ending_value = (investment_1 * (1 + return_1)) * (1 + return_2) * (1 + return_3)\n    total_investment = investment_1 + investment_2 + investment_3\n    holding_period_return = ((ending_value / total_investment) ** (1/3)) - 1\n    \n    # return answer\n    return holding_period_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    common_shares = 60000\n    outstanding_warrants = 5000\n    exercise_price_per_share = 25\n    year_end_stock_price = 30\n    average_stock_price = 20\n\n    # Do math calculation to get the answer\n    diluted_shares = common_shares + (outstanding_warrants * max(0, (year_end_stock_price - exercise_price_per_share) / year_end_stock_price)) / (year_end_stock_price / average_stock_price)\n    answer = round(diluted_shares, 2)\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    projected_eps = 2  # Projected earnings per share\n    current_share_price = 40  # Current share price\n\n    # do math calculation to get the answer\n    pe_ratio = current_share_price / projected_eps\n    \n    # return answer\n    return pe_ratio\n\n# Execute the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    one_year_return = 0.053\n    three_years_return = 0.062\n    five_years_return = 0.047\n    since_inception_return = 0.044\n    max_drawdown_risk = 0.102\n    mean_drawdown_risk = 0.068\n    \n    # Calculate the average of all returns for calmar ratio calculation\n    average_return = (one_year_return + three_years_return + five_years_return + since_inception_return) / 4\n    \n    # Calculate the calmar ratio\n    calmar_ratio = average_return / max_drawdown_risk\n    \n    # return answer\n    return calmar_ratio\n```"
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trade_prices = [41.50, 41.75]\n    prevailing_bids = [41.45, 41.73]\n    prevailing_offers = [41.50, 41.75]\n    \n    # Calculate effective spreads\n    effective_spreads = []\n    for trade_price, prevailing_bid, prevailing_offer in zip(trade_prices, prevailing_bids, prevailing_offers):\n        if trade_price == prevailing_bid:\n            effective_spread = prevailing_offer - prevailing_bid\n        else:\n            effective_spread = trade_price - prevailing_bid\n        effective_spreads.append(effective_spread)\n    \n    # Calculate average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    # return answer\n    return average_effective_spread\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_payout = 2.00  # in dollars\n    quarterly_yield_rate = 0.06 / 4  # 6% annual rate / 4 = 1.5% quarterly rate\n    compounding_frequency = 4  # quarterly\n    time_to_first_payout = 5  # in quarters\n    \n    # Do math calculation to get the present value of the preferred share\n    present_value = (initial_payout / quarterly_yield_rate) / (1 + quarterly_yield_rate) ** time_to_first_payout\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "**Solution**\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_license = 6500  # Cost of license in dollars\n    useful_life = 3  # Expected number of years to gain benefits from the license\n    years_owned = 2  # Number of years the license has been owned\n    \n    # Do math calculation to get the answer\n    # Calculate annual amortization using the straight-line method\n    annual_amortization = cost_of_license / useful_life\n    # Calculate accumulated amortization at the conclusion of Year 2\n    accumulated_amortization = annual_amortization * years_owned\n    \n    # return answer\n    return accumulated_amortization\n\naccumulated_amortization = solution()\nprint(accumulated_amortization)\n```\nThis program calculates the accumulated amortization of the license at the end of Year 2 using the straight-line amortization method. The `solution` function takes no arguments, defines the necessary variables, performs the calculation, and returns the accumulated amortization value."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer\u2019s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    annual_dividend = 2.00  # $2.00 yearly dividend\n    growth_rate = 0.04  # 4% growth rate\n    required_return_rate = 0.07  # 7% required return rate\n    \n    # Do math calculation to get the answer\n    # The formula for the present value of a growing perpetuity (also known as the Gordon Growth Model) is:\n    # PV = D / (r - g)\n    # where PV is the present value, D is the annual dividend, r is the required return rate, and g is the growth rate\n    intrinsic_value = annual_dividend / (required_return_rate - growth_rate)\n    \n    # return answer\n    return intrinsic_value\n```\n\nNote: The Gordon Growth Model is a widely used formula to estimate the intrinsic value of a stock. It assumes that the dividend will grow at a constant rate forever, and that the required return rate is constant. In practice, these assumptions may not always hold, but the model provides a useful rough estimate of the intrinsic value."
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of\u20ac) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ajiwo_sales = 500\n    bdfhyj_sales = 350\n    cegfd_sales = 270\n    ddgh_sales = 200\n    ebned_sales = 150\n    all_others_sales = 40\n    total_market_size = ajiwo_sales + bdfhyj_sales + cegfd_sales + ddgh_sales + ebned_sales + all_others_sales\n    \n    # Calculate the market share for each company\n    ajiwo_market_share = (ajiwo_sales / total_market_size) * 100\n    bdfhyj_market_share = (bdfhyj_sales / total_market_size) * 100\n    cegfd_market_share = (cegfd_sales / total_market_size) * 100\n    ddgh_market_share = (ddgh_sales / total_market_size) * 100\n    ebned_market_share = (ebned_sales / total_market_size) * 100\n    \n    # Sort the market shares in descending order and select the top 4 firms\n    market_shares = [ajiwo_market_share, bdfhyj_market_share, cegfd_market_share, ddgh_market_share, ebned_market_share]\n    market_shares.sort(reverse=True)\n    \n    # Calculate the concentration ratio of the four firms\n    cr4 = sum(market_shares[:4])\n    \n    # return answer\n    return cr4\n```"
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/\u20ac) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.5710000000000001,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_euro = 3500\n    cost_of_sales_euro = 1500\n    exchange_rate_2018_average = 1.68\n    \n    # Do conversion for sales and cost of sales to US dollars using the average exchange rate for 2018\n    sales_usd = sales_euro * exchange_rate_2018_average\n    cost_of_sales_usd = cost_of_sales_euro * exchange_rate_2018_average\n    \n    # Calculate gross profit in US dollars\n    gross_profit_usd = sales_usd - cost_of_sales_usd\n    \n    # Calculate gross profit margin\n    gross_profit_margin = gross_profit_usd / sales_usd\n    \n    # return answer\n    return gross_profit_margin\n```"
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_of_securities = 240\n    proceeds_from_sale_of_securities = 300\n    purchase_of_affiliated_company_shares = 275\n    \n    # Do math calculation to get the answer\n    net_cash_flow_from_investing = proceeds_from_sale_of_securities - (purchase_of_securities + purchase_of_affiliated_company_shares)\n    \n    # exclude Proceeds from issuance of bonds because it is a financing activity\n    # return answer\n    return net_cash_flow_from_investing\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probability_rise = 0.38\n    probability_same = 0.46\n    probability_fall = 0.16\n    \n    probability_rise_at_45 = 0.65  # 65% chance of the stock price being at $45 given the market continues to rise\n    probability_same_at_45 = 0.55  # 55% chance of the stock price being at $45 given the market remains unchanged\n    probability_fall_at_45 = 0.0   # 0% chance of the stock price being at $45 given the market continues to decline\n    \n    # Do math calculation to get the answer\n    total_probability_at_45 = (probability_rise * probability_rise_at_45) + (probability_same * probability_same_at_45) + (probability_fall * probability_fall_at_45)\n    \n    # return answer\n    return total_probability_at_45\n```\n\nThis program takes the probabilities of the market rising, staying the same, and falling, along with the conditional probabilities of the stock price being at $45 in each of these scenarios. The final probability is then calculated using the law of total probability."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000  # Face value of the bond\n    invoice_price = 11000000  # Initial invoice price\n    repo_rate = 0.20  # Repo rate as a decimal\n    days = 20  # Number of days for the agreement\n    year_days = 365  # Number of days in a year for interest calculation\n    \n    # Calculate the interest for the repo agreement\n    interest = invoice_price * repo_rate * (days / year_days)\n    \n    # Calculate the repurchase cost as the invoice price plus the calculated interest\n    repurchase_cost = invoice_price + interest\n    \n    # return answer\n    return repurchase_cost\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 110\n    retained_earnings_2017 = 125\n    accounts_receivable_2016 = 45\n    accounts_receivable_2017 = 48\n    inventory_2016 = 24\n    inventory_2017 = 20\n    accounts_payable_2016 = 30\n    accounts_payable_2017 = 33\n    dividend_payment = 8\n    impairment_expense = 12\n    \n    # Calculate net income \n    net_income = retained_earnings_2017 - retained_earnings_2016 + dividend_payment\n    \n    # Calculate the change in accounts receivable, inventory, and accounts payable\n    change_in_accounts_receivable = accounts_receivable_2017 - accounts_receivable_2016\n    change_in_inventory = inventory_2017 - inventory_2016\n    change_in_accounts_payable = accounts_payable_2017 - accounts_payable_2016\n    \n    # Calculate the operating cash flow using the indirect method\n    operating_cash_flow = net_income + impairment_expense - change_in_accounts_receivable - change_in_inventory + change_in_accounts_payable\n    \n    # return answer\n    return operating_cash_flow\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "```python\nfrom math import factorial\nfrom scipy.special import expit\n\ndef solution():\n    # Define variables name and value\n    defective_rate = 0.05  # 5%\n    num_vehicles = 5\n    \n    # Do math calculation to get the answer\n    expected_defective = defective_rate * num_vehicles\n    probability = (expected_defective ** 1 / factorial(1)) * exp(-expected_defective) * (1 - defective_rate) ** (num_vehicles - 1)\n    \n    # return answer in percentage format\n    return round(probability * 100, 3)\n\n# Test the function with assertion\nassert round(solution(), 2) == 22.51, f\"Expected 22.51, got {solution()}\"\nprint(f\"The final answer is {solution()}%.\")\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    years_until_maturity = 9\n    yield_to_maturity = 0.05\n    bond_price = 85.784357\n\n    # Do math calculation to get the answer\n    # Calculate the duration using the formula for a bond with annual coupons\n    duration = 0\n    for year in range(1, years_until_maturity + 1):\n        cash_flow = coupon_rate * 100\n        duration += year * cash_flow / ((1 + yield_to_maturity) ** year)\n    duration += years_until_maturity * (100 / ((1 + yield_to_maturity) ** years_until_maturity))\n    \n    # The price value of a basis point (pvbp) is the duration multiplied by the bond price divided by 100\n    pvbp = (duration / 100) * bond_price\n\n    # return answer\n    return pvbp\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n = 1600  # number of samples\n    sample_sd = 100  # standard deviation of the samples\n    \n    # Do math calculation to get the answer\n    # The formula for the standard error of the sample mean is sd / sqrt(n)\n    std_error = sample_sd / (n ** 0.5)\n    \n    # return answer\n    return std_error\n\n# print the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stocks = 500000\n    fixed_income_products = 330000\n    house_value = 350000\n    mortgage = 175000\n    total_present_value_of_earnings = 980000\n    future_expected_consumption = -870000\n    children_college_tuition = -150000\n    family_foundation = -600000\n\n    # Do math calculation to get the answer\n    total_assets = stocks + fixed_income_products + house_value + total_present_value_of_earnings\n    total_liabilities = mortgage + future_expected_consumption + children_college_tuition + family_foundation\n    economic_net_worth = total_assets + total_liabilities\n    \n    # return answer\n    return economic_net_worth\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of \u20ac10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of \u20ac8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    selling_price = 10000  # in euros\n    cost_value = 8000  # in euros\n    \n    # Do math calculation to get the answer\n    # Calculate the profit from the sale\n    profit = selling_price - cost_value\n    \n    # Calculate the trade receivable (amount owed by clients)\n    trade_receivable = selling_price\n    \n    # Calculate the net shift in total assets\n    net_shift_in_assets = profit + trade_receivable  # Because profit increases equity (thus assets) and the receivable is also an asset\n    \n    # return answer\n    return net_shift_in_assets\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    debt_percentage = 0.6\n    equity_beta = 1.4\n    tax_rate = 0.35\n    \n    # Do math calculation to get the answer\n    asset_beta = equity_beta / (1 - debt_percentage * (1 - tax_rate))\n    \n    # return answer\n    return asset_beta\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_shares_proportion = 0.8\n    current_bonds_proportion = 0.2\n    current_reteirement_fund = 100000000\n    shares_beta = 1.2\n    bonds_beta = 5.0\n    target_shares_proportion = 0.6\n    target_bonds_proportion = 0.4\n    stock_index_value = 1200\n    multiplier = 250\n    stock_index_beta = 0.95\n    bond_cost = 105300\n    bond_duration = 6.5\n\n    # Calculate current shares value\n    current_shares_value = current_shares_proportion * current_reteirement_fund\n    current_bonds_value = current_bonds_proportion * current_reteirement_fund\n\n    # Calculate number of shares to sell\n    shares_to_sell = (current_shares_value - target_shares_proportion * current_reteirement_fund) / stock_index_value\n\n    # Calculate the Notional Principal\n    notional_principal = shares_to_sell * stock_index_value * multiplier\n\n    # Calculate delta of beta of shares\n    delta_beta_shares = (target_shares_proportion - current_shares_proportion) * shares_beta\n\n    # Calculate the necessary number of stock futures to buy/sell\n    stock_index_futures_to_buy = delta_beta_shares / stock_index_beta\n\n    # Calculate the necessary number of bond futures to buy/sell\n    bond_investment = (target_bonds_proportion * current_reteirement_fund - current_bonds_value) / bond_cost\n    bond_futures_to_buy = bond_investment * bond_duration\n\n    # As bonds shouldn't be used for beta hedging, stock index future to buy = delta_beta_shares / stock_index_beta. Therefore:\n    stock_index_futures_to_buy_total = stock_index_futures_to_buy\n\n    return int(stock_index_futures_to_buy_total)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_price = 1105.94\n    face_value = 1000\n    coupon_rate = 0.08\n    years_to_maturity = 20\n    marginal_tax_rate = 0.30\n    risk_premium = 0.05\n    \n    # Calculate yield to maturity\n    # Using the formula for calculating yield to maturity for a bond: \n    # (C + ((F - P) / n)) / ((F + P) / 2)\n    # Where:\n    # C = annual coupon payment = face value x coupon rate\n    # F = face value of the bond = $1,000\n    # P = purchase price of the bond = $1,105.94\n    # n = years to maturity = 20\n    yield_to_maturity = (coupon_rate * face_value + ((face_value - market_price) / years_to_maturity)) / ((face_value + market_price) / 2)\n    \n    # Calculate after-tax cost of debt\n    # using the formula: yield to maturity * (1 - marginal tax rate)\n    after_tax_cost_of_debt = yield_to_maturity * (1 - marginal_tax_rate)\n    \n    # Calculate cost of equity using the bond-yield-plus-risk-premium method\n    cost_of_equity = after_tax_cost_of_debt + risk_premium\n    \n    # return answer\n    return cost_of_equity\n\n# Execute the function\nprint(\"The final answer is \", solution())"
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "Here is the Python program to compute the equal-weighted index value for the given shares:\n\n```python\ndef solution():\n    # Define variables name and value\n    march_31-share_prices = [15, 20, 30]\n    april_30_share_prices = [20, 30, 25]\n    starting_index_value = 121\n    \n    # Calculate the price relatives for each share\n    price_relatives = [april_30_price / march_31_price for march_31_price, april_30_price in zip(march_31_share_prices, april_30_share_prices)]\n    \n    # Calculate the geometric average of the price relatives\n    geometric_average = (price_relatives[0] * price_relatives[1] * price_relatives[2]) ** (1/3)\n    \n    # Calculate the equal-weighted index value\n    equal_weighted_index = starting_index_value * geometric_average\n    \n    # return answer\n    return equal_weighted_index\n```\n\nThis program first defines the March 31 and April 30 share prices for each stock, as well as the starting index value. It then calculates the price relatives for each share by dividing the April 30 price by the March 31 price. The geometric average of these price relatives is then calculated and used to compute the equal-weighted index value. Finally, the program returns the equal-weighted index value."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_0 = 0.22  # Dividend at time 0 (2017)\n    growth_rate_1 = 0.12  # Growth rate in the first stage (high growth rate)\n    growth_rate_2 = 0.06  # Growth rate in the second stage (sustainable growth rate)\n    required_return = 0.09  # Required return on equity\n    periods = 4  # Number of periods in the first stage\n\n    # Calculate the dividend at the end of the high growth period (Year 4)\n    dividend_4 = dividend_0 * (1 + growth_rate_1) ** periods\n\n    # Calculate the terminal value using the Gordon Growth Model\n    terminal_value = dividend_4 * (1 + growth_rate_2) / (required_return - growth_rate_2)\n\n    # return answer\n    return terminal_value\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 98.722\n    price_after_increase = 98.669\n    price_after_decrease = 98.782\n    yield_change = 0.001  # 10 basis points = 0.1% = 0.001 as a decimal\n    \n    # Calculate the approximate convexity of the bond\n    price_change_increase = (price_after_increase - initial_price) / initial_price\n    price_change_decrease = (initial_price - price_after_decrease) / initial_price\n    convexity = (price_change_increase + price_change_decrease) / (yield_change ** 2)\n    \n    # return answer\n    return convexity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n    \n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    # return answer\n    return price_to_sales_ratio\n```"
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 9000\n    accounts_payable = 600\n    \n    # Do math calculation to get the answer\n    avg_accounts_payable = accounts_payable  # Since accounts payable is the same for current and previous year, we can use its current year value\n    days_payables = 365 / (cost_of_goods_sold / avg_accounts_payable)\n    \n    # return answer\n    return days_payables\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_a_value = 5000000\n    asset_b_value = 3000000\n    marginal_var_a = 0.0452\n    marginal_var_b = 0.0332\n\n    # Do math calculation to get the answer\n    portfolio_var = marginal_var_a * asset_a_value + marginal_var_b * asset_b_value\n    percent_contribution_from_a = (marginal_var_a * asset_a_value / portfolio_var) * 100\n    \n    # return answer\n    return percent_contribution_from_a\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_call_in_money = 5000\n    num_call_out_money = 20000\n    num_futures = 10000\n    stock_price = 52\n    volatility = 0.12\n    days_per_year = 252\n    confidence_level = 0.99\n    \n    # Calculate the gamma and delta for in-the-money and out-of-the-money options\n    # Assuming deep in-the-money options have delta = 1 and deep out-of-the-money options have delta = 0\n    in_money_delta = 1\n    out_money_delta = 0\n    \n    # According to the text, we don't need to calculate the gamma for this example\n    # But in a real-world scenario, you would calculate it using the Black-Scholes model\n    in_money_gamma = 0\n    out_money_gamma = 0\n    \n    # Calculate the overall delta and gamma for the portfolio (in 1 million USD)\n    total_delta = (num_call_in_money * in_money_delta + num_call_out_money * out_money_delta + num_futures) * stock_price / 1e6\n    total_gamma = (num_call_in_money * in_money_gamma + num_call_out_money * out_money_gamma) * stock_price / 1e6\n    \n    # Calculate the 1-day 99% VaR of the portfolio (in 1 million USD)\n    var = 2.326 * (volatility / np.sqrt(days_per_year)) * np.sqrt(total_delta**2 + 0.5 * total_gamma**2 * (stock_price / 1e6)**2)\n    \n    # return answer\n    return var\n\nimport numpy as np\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    periodic_contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = 2500000\n    \n    # Do math calculation to get the answer\n    pension_expense = periodic_contributions + service_costs - actuarial_gain\n    \n    # return answer\n    return pension_expense\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ten_year_us_treasury_securities_yield = 3.8\n    long_term_real_rate = 2.3\n    inflation_premium = 0.8\n    illiquidity_premium = 0.9\n    equity_risk_premium = 8.4\n    additional_premium = illiquidity_premium + equity_risk_premium\n    long_term_credit_spread = 0.4\n    \n    # Do math calculation to get the answer\n    expected_consumer_credit_return = ten_year_us_treasury_securities_yield + 0.7 + additional_premium + long_term_credit_spread\n    \n    # return answer\n    return expected_consumer_credit_return\n```\n\nLet me know if you want me to add any additional details to this solution!"
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "Here is the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100000000\n    total_liabilities = 1200000000\n    preferred_equity = 120000000\n    common_shares_outstanding = 32000000\n    profitMargins = [12.00, 13.10, 10.55, 11.20, 12.05]  \n\n    # Do math calculation to get the answer\n    equity = total_assets - total_liabilities\n    common_equity = equity - preferred_equity\n    profitMarginAverage = sum(profitMargins) / len(profitMargins)\n\n    # ROE from profit margin, asset turnover and financial leverage\n    ROE = profitMarginAverage\n\n    # Net Income = Total Equity x (ROE)\n    net_income = common_equity * (ROE / 100) \n    earnings_per_share_normalized = net_income / common_shares_outstanding\n\n    # return answer\n    return earnings_per_share_normalized\n\nresult = solution()\nprint(f\"The final answer is ${result:.2f}.\")  \n```\n\nThis program will calculate the ROE by using the average from the table and calculate the Net Income using ROE, then the normalized EPS will be calculated by Net Income divided by the number of common shares outstanding."
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trade_price_1 = 25.20\n    ask_price_1 = 25.20\n    trade_size_1 = 1200\n    \n    trade_price_2 = 25.22\n    ask_price_2 = 25.22\n    trade_size_2 = 1300\n    \n    trade_price_3 = 25.27\n    bid_price_3 = 25.22\n    trade_size_3 = 2500\n    \n    # Do math calculation to get the answer\n    # Effective spread for trade 1\n    effective_spread_1 = (abs(trade_price_1 - ((ask_price_1 + bid_price_1)/2))) * 2\n    \n    # Effective spread for trade 2\n    effective_spread_2 = (abs(trade_price_2 - ((ask_price_2 + (trade_price_2-0.03))/2))) * 2\n    \n    # Effective spread for trade 3\n    effective_spread_3 = (abs(trade_price_3 - ((bid_price_3 + trade_price_3)/2))) * 2\n    \n    # Average effective spread\n    total_trade_size = trade_size_1 + trade_size_2 + trade_size_3\n    average_effective_spread = ((trade_size_1/total_trade_size) * effective_spread_1 + \n                               (trade_size_2/total_trade_size) * effective_spread_2 + \n                               (trade_size_3/total_trade_size) * effective_spread_3)\n    \n    # return answer\n    return average_effective_spread\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    MRR_swap_rate = 1.00 / 100  # Convert percentage to decimal\n    treasury_bond_yield = 0.63 / 100  # Convert percentage to decimal\n    \n    # Do math calculation to get the answer\n    swap_spread = MRR_swap_rate - treasury_bond_yield\n    \n    # return answer\n    return round(swap_spread * 100, 2)  # Convert decimal to percentage and round to 2 decimal places\n\nprint(solution())  # Output: 0.37\n```"
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "Here is the completed Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    beta = 1.1\n    market_risk_premium = 0.05\n    dividend_year1 = 1.13\n    dividend_year2 = 1.22\n    long_term_growth_rate = 0.05\n    \n    # Calculate cost of equity using CAPM\n    cost_of_equity = risk_free_rate + beta * market_risk_premium\n    \n    # Calculate present value of dividends for the first two years\n    present_value_dividend_year1 = dividend_year1 / (1 + cost_of_equity)\n    present_value_dividend_year2 = dividend_year2 / (1 + cost_of_equity)**2\n    \n    # Calculate present value of perpetual growth starting in year 3\n    present_value_perpetual_growth = (dividend_year2 * (1 + long_term_growth_rate)) / (cost_of_equity - long_term_growth_rate)\n    present_value_perpetual_growth_discounted = present_value_perpetual_growth / (1 + cost_of_equity)**2\n    \n    # Calculate inherent worth of the J REIT per share\n    inherent_worth_per_share = present_value_dividend_year1 + present_value_dividend_year2 + present_value_perpetual_growth_discounted\n    \n    # return answer\n    return inherent_worth_per_share\n```\n\nThis program first defines the input variables, then calculates the cost of equity using the CAPM, and then uses the two-step dividend discount model to calculate the present value of the dividends for the first two years and the present value of the perpetual growth starting in year 3. Finally, it calculates the inherent worth of the J REIT per share by adding the present values of the dividends and the perpetual growth."
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7000000000000001,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    actual_sentiments = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    target_p_values = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54]\n    threshold_p_value = 0.65\n    \n    # Assign predicted sentiments based on the threshold p-value\n    predicted_sentiments = [1 if p >= threshold_p_value else 0 for p in target_p_values]\n    \n    # Calculate the accuracy of the model\n    correct_predictions = sum([1 for actual, predicted in zip(actual_sentiments, predicted_sentiments) if actual == predicted])\n    accuracy = correct_predictions / len(actual_sentiments)\n    \n    # return answer\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration_1 = 1  # years\n    modified_duration_2 = 9  # years\n    yield_rate = 0.05  # 5%\n    yield_volatility = 0.01  # 1%\n    investment_price = 10  # dollars\n    confidence_level = 1.645  # for 95% confidence level\n    \n    # Do math calculation to get the answer\n    # Calculate the price volatility for each bond\n    price_volatility_1 = modified_duration_1 * yield_volatility * investment_price\n    price_volatility_2 = modified_duration_2 * yield_volatility * investment_price\n    \n    # Calculate the daily VAR for each bond at the 95% confidence level\n    daily_var_1 = price_volatility_1 * confidence_level\n    daily_var_2 = price_volatility_2 * confidence_level\n    \n    # Calculate the total daily VAR for the collection of investments\n    total_daily_var = daily_var_1 + daily_var_2\n    \n    # return answer\n    return total_daily_var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = -100  # initial investment is negative because it is an outflow\n    cash_flow_year1 = 40\n    cash_flow_year2 = 80\n    cash_flow_year3 = 120\n    required_rate_of_return = 0.20\n    \n    # Do math calculation to get the answer\n    # Calculate the present values of each cash flow\n    present_value_year1 = cash_flow_year1 / (1 + required_rate_of_return)\n    present_value_year2 = cash_flow_year2 / ((1 + required_rate_of_return)**2)\n    present_value_year3 = cash_flow_year3 / ((1 + required_rate_of_return)**3)\n    \n    # Calculate the Net Present Value (NPV)\n    npv = initial_investment + present_value_year1 + present_value_year2 + present_value_year3\n    \n    # return answer\n    return npv\n\n# Execute the function\nanswer = solution()\nprint(\"The Net Present Value (NPV) is: $\", round(answer, 2))\n```"
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|\u00a350 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per \u00a3100)|\u00a392.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 50  # in millions\n    coupon_rate = 0.04  # 4%\n    issue_price = 92.28 / 100 * face_value  # calculate the issue price in millions\n    \n    # Calculate the discount on the bond\n    discount = face_value - issue_price\n    \n    # Calculate the annual interest expense using the effective interest rate method\n    effective_interest_rate = 0.05  # 5% market interest rate\n    interest_expense_2014 = (issue_price + discount * 1/10) * effective_interest_rate\n    \n    # return answer\n    return interest_expense_2014\n```\nNote: The interest cost for the year 2014 under IFRS is calculated using the effective interest rate method, which is a method of amortizing the discount on a bond over its life. In this case, we're assuming the discount is amortized over 10 years, which is the time to maturity. The annual interest expense is then calculated as the product of the carrying value of the bond at the beginning of the year (which includes the amortized discount) and the market interest rate."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "Here is the solution:\n```python\ndef solution():\n    # Define variables name and value\n    cash_and_short_term_investment = 750000\n    human_capital = 1200000\n    human_capital_equity = human_capital * 0.3\n    \n    # Calculate total economic wealth\n    total_economic_wealth = cash_and_short_term_investment + human_capital\n    \n    # Calculate human capital that is similar to equity\n    human_capital_equity_allocation = human_capital_equity / total_economic_wealth\n    \n    # Calculate target equity allocation for total economic wealth\n    target_equity_allocation = 0.45\n    \n    # Calculate financial capital equity allocation\n    financial_capital_equity_allocation = (target_equity_allocation - human_capital_equity_allocation) / (1 - human_capital_equity_allocation)\n    \n    return financial_capital_equity_allocation\n```\n\nLet me know if you want me to explain the math behind it."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2.5  # $2.5 for each share in the fifth year\n    growth_rate = 0.05  # 5% annual rate\n    required_return_rate = 0.12  # 12% return rate\n    discount_factor = 0.12/ (1 + 0.12)  # Discounting factor for perpetuity formula\n\n    # Do math calculation to get the answer\n    # First, calculate the present value of the dividend at the beginning of the 5th year\n    # using the Gordon Growth Model for a growing perpetuity\n    present_value_at_fifth_year = dividend / (required_return_rate - growth_rate)\n\n    # Then, discount the result by 4 years at the required return rate\n    # to get the intrinsic value of Firm B's stock\n    intrinsic_value = present_value_at_fifth_year * (discount_factor ** 4)\n\n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 5000000  # Face value of the bond\n    market_interest_rate = 0.03  # Market interest rate for bonds of similar risk and term\n    bond_yield = 0.025  # Yield of the bond\n    years_until_maturity = 3  # Number of years until the bond matures\n\n    # Calculate the present value of the bond using the market interest rate\n    # This represents the amount the corporation receives at issuance\n    present_value = face_value / (1 + market_interest_rate) ** years_until_maturity\n\n    # Calculate the discount or premium at issuance\n    # If the market interest rate is higher than the bond yield, the bond is issued at a discount\n    # If the market interest rate is lower than the bond yield, the bond is issued at a premium\n    discount_or_premium = face_value - present_value\n\n    # Return the amount at which the bonds are most likely reported as bonds payable when issued\n    return round(present_value)\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 26.00  # Market value of the share\n    volatility = 0.015  # Daily volatility\n    confidence_level = 0.95  # Confidence level for VaR\n    delta = -0.5  # Delta of the put option\n    holding_period = 1  # Number of days for the holding period\n    \n    # Calculate the standard normal distribution (Z-score) for the 95% confidence level\n    from scipy.stats import norm\n    z_score = norm.ppf(1 - (1 - confidence_level))\n    \n    # Calculate the Value-at-Risk (VaR)\n    var = -1 * delta * stock_price * z_score * volatility * (holding_period ** 0.5)\n    \n    # Return the absolute value of VaR as the answer\n    return abs(var)\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    year_2009_return = 0.20\n    year_2010_return = -0.30\n    year_2011_return = 0.15\n    \n    # Do math calculation to get the answer\n    total_return = (1 + year_2009_return) * (1 + year_2010_return) * (1 + year_2011_return)\n    yearly_geometric_mean_return = total_return ** (1/3) - 1\n    \n    # return answer\n    return yearly_geometric_mean_return\n```\n\nThis program calculates the yearly geometric mean return of the investment over the three-year period. It first calculates the total return over the three years, and then takes the cube root of the total return minus 1 to get the yearly geometric mean return. \n\nNote: The returns are represented as decimal numbers (e.g., 20% is represented as 0.20) to facilitate the calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.6\n    risk_free_rate = 0.08\n    market_return = 0.15\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    neutral_real_policy_rate = 0.0225  # 2.25%\n    desired_inflation_rate = 0.02  # 2%\n    projected_growth_rate = 0.025  # 2.5%\n    actual_growth_rate = 0.035  # 3.5%\n    actual_inflation_rate = 0.03  # 3%\n\n    # Do math calculation to get the answer\n    inflation_gap = actual_inflation_rate - desired_inflation_rate\n    growth_gap = actual_growth_rate - projected_growth_rate\n    nominal_policy_rate = neutral_real_policy_rate + desired_inflation_rate + 0.5 * inflation_gap + 0.5 * growth_gap\n\n    # return answer\n    return nominal_policy_rate\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.019\n    expected_growth_in_pe = -0.012\n    expected_income_component = 0.018\n    expected_growth_in_real_eps = 0.027\n    expected_change_in_shares_outstanding = 0.000\n    current_three_month_government_bond_yield = 0.0096\n    long_term_geometric_average_return_of_market_equity_index = 0.0996\n    long_term_geometric_average_return_of_short_term_government_bond = 0.0315\n    \n    # Do math calculation to get the answer\n    inflation_adjustment = expected_inflation - (long_term_geometric_average_return_of_short_term_government_bond - expected_inflation)\n    earnings_growth_adjustment = expected_growth_in_pe + expected_growth_in_real_eps - expected_change_in_shares_outstanding\n    forward_looking_erp = expected_income_component + inflation_adjustment + earnings_growth_adjustment - current_three_month_government_bond_yield\n    answer = long_term_geometric_average_return_of_market_equity_index - long_term_geometric_average_return_of_short_term_government_bond\n    \n    # return answer\n    return forward_looking_erp\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class \u201c1\u201d or negative sentiment (Class \u201c0\u201d). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    TP = 182  # True Positives\n    FP = 52   # False Positives\n    FN = 31   # False Negatives\n    TN = 96   # True Negatives\n    \n    # Do math calculation to get the answer\n    total = TP + FP + FN + TN\n    accuracy = (TP + TN) / total\n    \n    # return answer\n    return accuracy\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "I can help you with that. To find the number of ways to give prizes, we will use the concept of permutations. Since the order of selection matters (i.e., the person getting the $100 prize is different from the person getting the $50 prize), we can calculate the number of permutations of 3 items from a set of 15 items.\n\nHere is the corrected code:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    total_participants = 15\n    num_prizes = 3\n    \n    # Calculate the number of ways to give prizes using permutation formula\n    num_ways = math.factorial(total_participants) / math.factorial(total_participants - num_prizes)\n    \n    # return answer\n    return num_ways\n\n# Execute function\nans = solution()\nprint(ans)"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delta = 100000  # delta of the option stance in crude oil\n    gamma = -50000  # gamma of the option stance in crude oil\n    price_shift = 2.00  # maximum crude oil price shift in dollars per barrel\n    \n    # Do math calculation to get the answer\n    var = abs(delta * price_shift + 0.5 * gamma * price_shift ** 2)\n    \n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 25\n    investment = 10000\n    loan = 10000\n    preservation_margin = 0.3\n    \n    # Calculate the total number of shares\n    total_investment = investment + loan\n    number_of_shares = total_investment / stock_price\n    \n    # Calculate the equity in the account after the purchase\n    equity = total_investment - loaf\n    \n    # Calculate the price that will trigger a margin call\n    margin_call_price = (equity / number_of_shares) / (1 - preservation_margin)\n    \n    # return answer\n    return margin_call_price\n\n# call the function and print the result\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    aum = 288000000  # assets under management from the end of the previous year\n    management_fee_rate = 0.02  # management fee rate\n    incentive_fee_rate = 0.20  # incentive fee rate\n    soft_hurdle_rate = 0.05  # soft hurdle rate\n    high_water_mark = 357000000  # high-water mark\n    fund_yield = 0.25  # fund yield for the current year\n    \n    # Do math calculation to get the answer\n    management_fee = aum * management_fee_rate\n    net_aum = aum * (1 + fund_yield) - management_fee\n    hurdle_amount = high_water_mark * (1 + soft_hurdle_rate)\n    incentive_fee = max(0, net_aum - max(hurdle_amount, high_water_mark)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    \n    # return answer\n    return total_fee\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.9030000000000005,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    percentage_x = 0.25  # percentage of component X in the portfolio\n    std_dev_x = 0.179  # standard deviation of component X\n    percentage_y = 0.75  # percentage of component Y in the portfolio\n    std_dev_y = 0.062  # standard deviation of component Y\n    correlation_xy = 0.5  # correlation between component X and component Y\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = (percentage_x * std_dev_x) ** 2 + (percentage_y * std_dev_y) ** 2 + 2 * (percentage_x * std_dev_x) * (percentage_y * std_dev_y) * correlation_xy\n    portfolio_std_dev = portfolio_std_dev ** 0.5\n    \n    # return answer\n    return portfolio_std_dev * 100\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 160000000  # Initial value of the investment\n    management_fee_rate = 0.02  # Management fee rate, 2%\n    incentive_fee_rate = 0.20  # Incentive fee rate, 20%\n    hurdle_rate = 0.10  # Soft hurdle rate, 10%\n    prior_high_water_mark = 198000000  # Prior high-water mark\n    growth_rate = 0.25  # Assets growth rate, 25%\n\n    # Calculate end-of-year value\n    end_of_year_value = initial_value * (1 + growth_rate)\n\n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_rate\n\n    # Calculate incentive fee\n    asset_growth = end_of_year_value - initial_value\n    required_growth_for_fee = (initial_value * hurdle_rate) / (1 - management_fee_rate)\n    if asset_growth > required_growth_for_fee:\n        incentive_fee = (asset_growth - required_growth_for_fee) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Check high-water mark\n    if end_of_year_value > prior_high_water_mark:\n        high_water_mark_fee = incentive_fee\n    else:\n        high_water_mark_fee = 0\n\n    # Calculate total fees\n    total_fees = management_fee + high_water_mark_fee\n\n    # return total fees\n    return total_fees\n```"
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "It appears that the growth rate is given in the table as \"Constant\" under the \"Income/Value Growth Rate\" section. However, this implies that there is no growth rate, as the income and value remain constant.\n\nIf we ignore the \"Constant\" statement and calculate the growth rate based on the Net Operating Income (NOI) values, we can use the formula:\n\ngrowth_rate = (NOI_year_n - NOI_year_(n-1)) / NOI_year_(n-1)\n\nHere's a Python program to calculate the growth rate:\n\n```python\ndef solution():\n    # Define variables name and value\n    noi_year1 = 2775840\n    noi_year2 = 2859119\n    noi_year3 = 2944889\n    noi_year4 = 3033235\n    noi_year5 = 3124232\n    noi_year6 = 3217959\n    \n    # Calculate growth rates\n    growth_rate_year2 = (noi_year2 - noi_year1) / noi_year1\n    growth_rate_year3 = (noi_year3 - noi_year2) / noi_year2\n    growth_rate_year4 = (noi_year4 - noi_year3) / noi_year3\n    growth_rate_year5 = (noi_year5 - noi_year4) / noi_year4\n    growth_rate_year6 = (noi_year6 - noi_year5) / noi_year5\n    \n    # Due to the lack of information, we return the growth rate of the last year\n    # If you want to return an average growth rate, you can calculate it and return it instead\n    return growth_rate_year6\n\n# Test the function\ngrowth_rate = solution()\nprint(\"The growth rate of Real Estate #1 is: {:.2%}\".format(growth_rate))\n```\n\nThis program calculates the growth rate for each year based on the NOI values, but returns the growth rate of the last year (Year 6) as the answer. If you want to return an average growth rate, you can calculate it by summing up all the growth rates and dividing by the number of years, then return it instead."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.3\n    weight_y = 0.7\n    std_dev_x = 0.25\n    std_dev_y = 0.10\n    correlation_xy = 0.8\n    \n    # Do math calculation to get the answer\n    std_dev_portfolio = (weight_x * std_dev_x)**2 + (weight_y * std_dev_y)**2 + 2*weight_x*weight_y*std_dev_x*std_dev_y*correlation_xy\n    std_dev_portfolio = std_dev_portfolio ** 0.5\n    \n    # return answer\n    return std_dev_portfolio\n```"
        ]
    }
]