[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    estimated_life_truck = 8\n    estimated_salvage_value_truck = 15000\n    current_year = 3\n    depreciation_rate = 0.2\n    \n    # Calculate the book value of the truck\n    book_value_truck = original_cost_truck - (original_cost_truck - estimated_salvage_value_truck) * (1 - (1 - depreciation_rate) ** current_year)\n    \n    # Define variables name and value\n    current_fair_value_truck = 27000\n    current_fair_value_land = 21000\n    \n    # Calculate the loss\n    loss = book_value_truck - current_fair_value_truck\n    \n    # return answer\n    return loss\n```\nThis program calculates the book value of the truck using the declining balance method, then calculates the loss as the difference between the book value and the current fair value of the truck."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "Here is the Python program to calculate the 180-day forward points:\n```python\ndef solution():\n    # Define variables name and value\n    spot_exchange_rate = 2.0979\n    libor_sterling = 0.016025\n    libor_kiwi = 0.032875\n    days_in_year = 360\n\n    # Do math calculation to get the answer\n    libor_sterling_scaled = (1 + libor_sterling * 180 / days_in_year)\n    libor_kiwi_scaled = (1 + libor_kiwi * 180 / days_in_year)\n    forward_exchange_rate = spot_exchange_rate * (libor_kiwi_scaled / libor_sterling_scaled)\n    forward_points = (forward_exchange_rate - spot_exchange_rate) * 10000\n\n    # return answer\n    return round(forward_points, 4)\n```\nThis program first calculates the scaled Libor rates for 180 days, then uses these rates to calculate the forward exchange rate. Finally, it calculates the forward points by subtracting the spot exchange rate from the forward exchange rate and scaling by 10,000. The result is rounded to four decimal places."
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    standard_deviation_us_realestate = 0.14\n    covariance_us_realestate_gim = 0.0075\n    integration_with_gim = 0.60\n    sharpe_ratio_gim = 0.36\n    risk_free_rate = 0.031\n    expected_return_gim = 0.072\n\n    # Calculate the standard deviation of GIM\n    standard_deviation_gim = sharpe_ratio_gim * ((expected_return_gim - risk_free_rate) ** 0.5)\n\n    # Calculate the beta\n    beta_us_realestate = covariance_us_realestate_gim / (standard_deviation_gim ** 2)\n\n    # return answer\n    return beta_us_realestate\n```\nThis program first defines the given variables, then calculates the standard deviation of the Global Investable Market (GIM) using the Sharpe Ratio formula. Finally, it calculates the beta of U.S. real estate equities using the formula for beta, which involves the covariance between U.S. real estate and GIM, and the variance of GIM."
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    shares_purchased = 200000\n    price_per_share = 90\n    initial_spot_rate = 1.3983\n    three_months_spot_rate = 1.4210\n    six_months_forward_rate = -26.2\n    \n    # Calculate the initial cost in USD\n    initial_cost_usd = shares_purchased * price_per_share / initial_spot_rate\n    \n    # Calculate the forward rate in 3 months\n    forward_rate_three_months = three_months_spot_rate + six_months_forward_rate / 10000\n    \n    # Calculate the value of shares in 3 months in EUR\n    value_in_three_months_eur = shares_purchased * price_per_share\n    \n    # Calculate the value of shares in 3 months in USD\n    value_in_three_months_usd = value_in_three_months_eur / forward_rate_three_months\n    \n    # Calculate the cash expenditure to terminate the forward agreement\n    cash_expenditure = value_in_three_months_usd - initial_cost_usd\n    \n    # return answer\n    return cash_expenditure\n```\nThis program first calculates the initial cost of the shares in USD, then calculates the forward rate in 3 months, and finally calculates the cash expenditure necessary to terminate the forward agreement. The result is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "Here is the Python program to answer the question:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    current_market_value = 3700000\n    daily_fluctuation = 0.0004\n    days_per_year = 250\n    \n    # Calculate the daily volatility\n    daily_volatility = daily_fluctuation * math.sqrt(days_per_year)\n    \n    # Calculate the VaR at 95% confidence level\n    var_95 = current_market_value * daily_volatility * 1.645\n    \n    # return answer\n    return var_95\n```\nThis program calculates the daily volatility by multiplying the daily fluctuation by the square root of the number of trading days in a year. Then, it calculates the 1-year VaR at the 95% assurance level by multiplying the current market value by the daily volatility and a Z-score corresponding to the 95% confidence level (which is approximately 1.645). The result is the estimated 1-year VaR at the 95% assurance level."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    p_failure = 0.40\n    p_success = 0.55\n    p_success_given_survival = 0.85\n    \n    # Calculate p(survival) using the fact that p(failure) + p(survival) = 1\n    p_survival = 1 - p_failure\n    \n    # Calculate p(success | failure) using the total probability rule\n    p_success_given_failure = (p_success - p_success_given_survival * p_survival) / p_failure\n    \n    # return answer\n    return p_success_given_failure\n```\nThis program calculates the probability of an organization succeeding even if it eventually goes bankrupt, `P(success | failure)`, using the total probability rule."
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "Here is the Python program to calculate the three-firm Herfindahl-Hirschmann Index:\n```\ndef solution():\n    # Define variables name and value\n    marketshares = [0.35, 0.25, 0.20, 0.10, 0.10]\n    top_3_firms = sorted(marketshares, reverse=True)[:3]\n    \n    # Do math calculation to get the answer\n    hhi = sum([i**2 for i in top_3_firms])\n    \n    # return answer\n    return hhi\n```\nThis program first defines the market shares of the five firms, then sorts them in descending order and selects the top 3 firms. It then calculates the Herfindahl-Hirschmann Index (HHI) by summing the squares of the market shares of the top 3 firms. The result is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    libor_swap_rate = 0.01\n    treasury_bond_yield = 0.0063\n    \n    # Do math calculation to get the answer\n    swap_spread = libor_swap_rate - treasury_bond_yield\n    \n    # return answer\n    return swap_spread\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    \n    # Do math calculation to get the answer\n    annual_amortization = (acquisition_cost - residual_value) / useful_life\n    accumulated_amortization = annual_amortization * 4  # 4 years have passed by the end of 2016\n    \n    # return answer\n    return accumulated_amortization\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    mean_reversion = 0.775\n    correlation = 0.35\n    alpha = 0.27\n    s_t_1 = 0.27  # Assuming s(t-1) = 27% in January 2014\n    mu = mean_reversion  # Assuming mean reversion is the long-term mean\n    \n    # Do math calculation to get the answer\n    s_t = s_t_1 + alpha * (mu - s_t_1)\n    \n    # return answer\n    return s_t\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    dividend_per_share = 0.5\n    growth_rate = 0.06\n    rate_of_return = 0.10\n    \n    # Calculate the present value of dividend for the first two years\n    present_value_dividend_year1 = dividend_per_share / (1 + rate_of_return)\n    present_value_dividend_year2 = dividend_per_share / (1 + rate_of_return) ** 2\n    \n    # Calculate the present value of dividends after year 2\n    present_value_dividend_after_year2 = dividend_per_share * (1 + growth_rate) ** 2 / (rate_of_return - growth_rate) / (1 + rate_of_return) ** 2\n    \n    # Calculate the total present value of dividends\n    total_present_value_dividend = present_value_dividend_year1 + present_value_dividend_year2 + present_value_dividend_after_year2\n    \n    # return answer\n    return total_present_value_dividend\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    elasticity = 1.8\n    marginal_cost = 30\n    avg_cost = 50\n    \n    # Do math calculation to get the answer\n    numerator = elasticity * marginal_cost\n    denominator = elasticity - 1\n    price = numerator / denominator\n    \n    # return answer\n    return price\n```"
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "Here is the Python program to calculate the annual economic profit for Chace's House Industry:\n```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 460000\n    initial_investment = 320000\n    final_investment = 270000\n    cost_of_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Calculate total cost\n    total_cost = cost_of_raw_materials + wages_paid + (initial_investment - final_investment)\n    \n    # Calculate accounting profit\n    accounting_profit = total_revenue - total_cost\n    \n    # Calculate economic profit\n    economic_profit = accounting_profit - normal_profit\n    \n    # return answer\n    return economic_profit\n```"
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "Here is the Python program to calculate the Free Cash Flow to Firm (FCFF) of the Johnson Company for the fiscal year ending on December 31, 2012:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 626\n    depreciation_expense = 243\n    interest_expense = 186\n    taxes = 294\n    capital_expenditures = 535\n    change_in_working_capital = 91  # Calculate this from the difference in total current assets and current liabilities between 2011 and 2012\n\n    # Do math calculation to get the answer\n    ebit = net_income + interest_expense + taxes\n    fcff = ebit * (1 - 0.32) + depreciation_expense - capital_expenditures - change_in_working_capital\n    \n    # return answer\n    return fcff\n```\n\nThis program calculates the FCFF using the following formula: FCFF = EBIT * (1 - tax rate) + Depreciation expense - Capital expenditures - Change in working capital. The tax rate is 32% based on the income tax row in the table. The change in working capital is calculated as the difference in total current assets and current liabilities between 2011 and 2012, which is $91 million."
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    undiscounted_expected_future_cash_flows = 550000\n    present_value_of_expected_future_cash_flows = 450000\n    fair_value = 480000\n    costs_to_sell = 50000\n    value_in_use = 440000\n\n    # Calculate the recoverable amount\n    recoverable_amount = max(fair_value - costs_to_sell, value_in_use)\n    \n    # Calculate the impairment loss\n    impairment_loss = carrying_value - recoverable_amount\n    \n    # return answer\n    return impairment_loss\n```"
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "Here's the Python program to calculate the bond's price:\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    coupon_payments_per_year = 2\n    years_to_maturity = 3\n    required_rate_of_return = 0.05\n    par_value = 100\n    \n    # Calculate the coupon payment\n    coupon_payment = (coupon_rate / coupon_payments_per_year) * par_value\n    \n    # Calculate the present value of coupon payments\n    pv_coupon_payments = 0\n    for i in range(years_to_maturity * coupon_payments_per_year):\n        pv_coupon_payments += coupon_payment / (1 + required_rate_of_return / coupon_payments_per_year) ** (i + 1)\n    \n    # Calculate the present value of par value\n    pv_par_value = par_value / (1 + required_rate_of_return / coupon_payments_per_year) ** (years_to_maturity * coupon_payments_per_year)\n    \n    # Calculate the bond's price\n    bond_price = pv_coupon_payments + pv_par_value\n    \n    # return answer\n    return bond_price\n```\nThis program calculates the bond's price using the formula for the present value of a bond, which is the sum of the present values of the coupon payments and the par value. The present value of the coupon payments is calculated using a loop to sum the present values of each coupon payment, and the present value of the par value is calculated using the formula for the present value of a single cash flow. The final answer is the sum of these two present values."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    units_purchased_in_october = 10000\n    cost_per_unit_in_october = 10\n    units_purchased_in_november = 5000\n    cost_per_unit_in_november = 11\n    total_units_sold = 12000\n    \n    # Do math calculation to get the answer\n    total_cost_in_october = units_purchased_in_october * cost_per_unit_in_october\n    total_cost_in_november = units_purchased_in_november * cost_per_unit_in_november\n    \n    # Apply FIFO method\n    cost_of_goods_sold = (total_cost_in_october * (10000 / 12000)) + (total_cost_in_november * (2000 / 12000))\n    \n    # return answer\n    return cost_of_goods_sold\n```"
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.102,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    good_economy_prob = 0.7\n    bad_economy_prob = 0.3\n    \n    good_return1 = 0.2\n    good_return2 = 0.1\n    good_return_prob1 = 0.5\n    good_return_prob2 = 0.5\n    \n    bad_return1 = 0.05\n    bad_return2 = -0.1\n    bad_return_prob1 = 0.6\n    bad_return_prob2 = 0.4\n    \n    # Do math calculation to get the answer\n    return_good_economy = (good_return1 * good_return_prob1) + (good_return2 * good_return_prob2)\n    return_bad_economy = (bad_return1 * bad_return_prob1) + (bad_return2 * bad_return_prob2)\n    anticipated_portfolio_return = (return_good_economy * good_economy_prob) + (return_bad_economy * bad_economy_prob)\n    \n    # return answer\n    return anticipated_portfolio_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    beginning_inventory_lifo = 200000\n    beginning_lifo_reserve = 30000\n    ending_inventory_lifo = 250000\n    ending_lifo_reserve = 40000\n    tax_rate = 0.30\n    \n    # Calculate the LIFO reserve at the beginning and end of the year\n    beginning_fifo = beginning_inventory_lifo + beginning_lifo_reserve\n    ending_fifo = ending_inventory_lifo + ending_lifo_reserve\n    \n    # Calculate the difference in LIFO reserve\n    lifo_reserve_difference = ending_lifo_reserve - beginning_lifo_reserve\n    \n    # Calculate the tax savings\n    tax_savings = lifo_reserve_difference * tax_rate\n    \n    # Calculate the FIFO inventory at the end of the year\n    answer = ending_fifo + tax_savings\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    years = 15\n    market_discount_rate = 0.045\n    \n    # Do math calculation to get the answer\n    discount_factor = (1 / ((1 + market_discount_rate) ** years))\n    cost_per_100_par_value = 100 * discount_factor\n    \n    # return answer\n    return cost_per_100_par_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "Here is the Python program to compute the call price:\n\n```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n    \n    # Do math calculation to get the answer\n    call_price = carrying_value + gain_on_redemption\n    answer = call_price\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "Here is the Python program to answer the question:\n\n```\ndef solution():\n    # Define variables name and value\n    USD_EUR = 1.3860\n    EUR_CAD = 0.6125\n    USD_GBP = 1.4208\n    \n    # Do math calculation to get the answer\n    EUR_GBP = USD_GBP / USD_EUR\n    \n    # return answer\n    return EUR_GBP\n```\n\nThe program calculates the EUR/GBP cross-rate by dividing the USD/GBP rate by the USD/EUR rate. This method is based on the concept of currency exchange rate arbitrage, which states that the cross-rate of two currencies can be calculated by dividing the rate of each currency against a common third currency. In this case, the common third currency is USD."
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    five_year_par_rate = 4.37\n    \n    # Do math calculation to get the answer\n    five_year_spot_rate = round(five_year_par_rate, 2)\n    \n    # return answer\n    return five_year_spot_rate\n```\nIn this program, we define the five-year par rate as 4.37%. Since the spot rate is given as a blank in the table, we can assume it is the same as the par rate. We then round the result to 2 decimal places and return the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "Here is the Python program to answer the question:\n```\ndef solution():\n    # Define variables name and value\n    face_value = 1000  # EUR\n    current_interest_rate = 0.08\n    probability = 0.5\n    year1_interest_rate_high = 0.10\n    year1_interest_rate_low = 0.06\n    risk_premium = 0.004\n    \n    # Calculate the 1-year interest rate with risk premium\n    current_interest_rate_with_risk_premium = current_interest_rate + risk_premium\n    \n    # Calculate the present value of the bond for the first year\n    present_value_year1_high = face_value / (1 + year1_interest_rate_high)\n    present_value_year1_low = face_value / (1 + year1_interest_rate_low)\n    \n    # Calculate the expected present value for the first year\n    expected_present_value_year1 = (present_value_year1_high + present_value_year1_low) / 2\n    \n    # Calculate the present value of the bond for the second year\n    present_value_year2 = face_value / ((1 + current_interest_rate_with_risk_premium) ** 2)\n    \n    # Calculate the zero-coupon bond's valuation\n    bond_valuation = expected_present_value_year1 / (1 + current_interest_rate_with_risk_premium)\n    \n    # return answer\n    return bond_valuation\n```"
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.938,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "Here's the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    n1 = 25\n    n2 = 18\n    x1_bar = 200\n    x2_bar = 185\n    s1_sq = 45 ** 2\n    s2_sq = 60 ** 2\n    sp_sq = ((n1 - 1) * s1_sq + (n2 - 1) * s2_sq) / (n1 + n2 - 2)\n    sp = sp_sq ** 0.5\n    \n    # Do math calculation to get the answer\n    t_stat = (x1_bar - x2_bar) / ((sp * ((1/n1) + (1/n2)) ** 0.5))\n    \n    # return answer\n    return t_stat\n```\n\nThis program calculates the t-statistic for the two-sample t-test, assuming equal variances."
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory + increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\nThis program calculates the cash paid to suppliers by subtracting the decrease in inventory from the cost of goods sold and adding the increase in accounts payable."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    number_of_options = 20000\n    option_price_on_grant_day = 2.5\n    average_option_price_for_year = 2.8\n    fair_value_of_stock_on_grant_day = 15\n    vesting_period = 4\n    \n    # Do math calculation to get the answer\n    compensation_expense_per_option = (fair_value_of_stock_on_grant_day - option_price_on_grant_day) / vesting_period\n    total_compensation_expense = number_of_options * compensation_expense_per_option\n    \n    # return answer\n    return total_compensation_expense\n```\nThis program calculates the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011. It uses the given values to calculate the compensation expense per option and then multiplies it by the number of options to get the total compensation expense."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "`\n```\ndef solution():\n    # Define variables name and value\n    duration = 7.020\n    convexity = 65.180\n    change_in_yield = -0.25 / 100\n    \n    # Do math calculation to get the answer\n    anticipated_change_in_price = (-1) * duration * change_in_yield + 0.5 * convexity * (change_in_yield ** 2)\n    \n    # return answer\n    return anticipated_change_in_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "Here is the Python program to calculate the intrinsic value of preferred stock:\n\n```python\ndef solution():\n    # Define variables name and value\n    par_value = 30\n    rate = 0.05\n    \n    # Do math calculation to get the answer\n    intrinsic_value = par_value * rate / 0.058\n    \n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    initial_value = 400\n    risk_free_rate = 0.05\n    dividend_yield = 0.03\n    time_to_maturity = 0.5  # in years\n    \n    # Do math calculation to get the answer\n    forward_price = initial_value * (1 + risk_free_rate * time_to_maturity) / (1 + dividend_yield * time_to_maturity)\n    \n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_std_dev = 0.049\n    pop_std_dev = 0.05\n    sample_size = 36\n    \n    # Do math calculation to get the answer\n    test_statistic = (sample_std_dev - pop_std_dev) / ((pop_std_dev / (sample_size ** 0.5)))\n    \n    # return answer\n    return test_statistic\n```"
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "Here is the Python program to calculate the 2008 FCFE (Free Cash Flow to Equity) of Holt Corporation:\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 485\n    depreciation_expense = 270\n    capital_expenditure = 523  # calculated as $4,275 - $3,752\n    change_in_working_capital = -182  # calculated as ($1,988 - $1,806) - ($1,090 - $1,007)\n    interest_expense = 195\n    tax_rate = 0.32\n    \n    # Do math calculation to get the answer\n    ebit = net_income + interest_expense * (1 - tax_rate)\n    fcf = ebit + depreciation_expense - capital_expenditure - change_in_working_capital\n    fcf_to_debt = fcf + interest_expense * (1 - tax_rate)\n    fcf_to_equity = fcf_to_debt - interest_expense * (1 - tax_rate)\n    \n    # return answer\n    return fcf_to_equity\n```\nNote that the calculation of FCFE involves several steps, and some variables need to be calculated from the provided financial data. The `capital_expenditure` is calculated as the difference between the gross fixed assets in 2008 and 2007, and the `change_in_working_capital` is calculated as the change in total current assets minus the change in total current liabilities."
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.144,
        "question": "What is the sustainable growth rate?",
        "output": [
            "Here is the Python program to calculate the sustainable growth rate:\n```python\ndef solution():\n    # Define variables name and value\n    net_profit_margin = 0.2\n    retention_rate = 0.6\n    asset_turnover = 0.8\n    financial_leverage_multiplier = 1.5\n    \n    # Do math calculation to get the answer\n    sustainable_growth_rate = retention_rate * net_profit_margin * asset_turnover * financial_leverage_multiplier\n    \n    # return answer\n    return sustainable_growth_rate\n```\nThis program defines the variables with the given values, performs the calculation to get the sustainable growth rate, and returns the answer."
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "Here is the Python program to solve the problem:\n```python\ndef solution():\n    # Define variables name and value\n    cny_hkd = 0.8422\n    cny_zar = 0.9149\n\n    # Do math calculation to get the answer\n    zar_hkd = cny_zar / cny_hkd\n    \n    # return answer\n    return zar_hkd\n```\nThis program uses the cross-rate calculation to find the ZAR/HKD exchange rate, which is the ratio of the CNY/ZAR rate to the CNY/HKD rate."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lambda_val = 0.95\n    days = 4\n    \n    # Do math calculation to get the answer\n    weight = lambda_val ** (days - 1)\n    \n    # return answer\n    return weight\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    principal = 180000\n    rate = 0.10\n    time_in_years = 2\n    compounds_per_year = 365\n\n    # Do math calculation to get the answer\n    amount = principal * (1 + rate/compounds_per_year) ** (compounds_per_year * time_in_years)\n    \n    # return answer\n    return amount\n```"
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    units_purchased_on_june_1 = 20\n    unit_cost_on_june_1 = 5.00\n    \n    units_purchased_on_june_12 = 70\n    unit_cost_on_june_12 = 5.20\n    \n    units_sold_on_june_16 = 50\n    selling_price_on_june_16 = 6.00\n    \n    units_purchased_on_june_26 = 35\n    unit_cost_on_june_26 = 5.50\n    \n    units_sold_on_june_29 = 40\n    selling_price_on_june_29 = 6.50\n    \n    # Calculate the total units available\n    total_units_available = units_purchased_on_june_1 + units_purchased_on_june_12 + units_purchased_on_june_26\n    \n    # Calculate the cost of goods sold using FIFO\n    cost_of_goods_sold_on_june_16 = units_sold_on_june_16 * ((units_purchased_on_june_1 / total_units_available) * unit_cost_on_june_1 + (units_sold_on_june_16 - units_purchased_on_june_1) / total_units_available * unit_cost_on_june_12)\n    cost_of_goods_sold_on_june_29 = units_sold_on_june_29 * ((units_purchased_on_june_12 / (total_units_available - units_sold_on_june_16)) * unit_cost_on_june_12 + (units_sold_on_june_29 - units_purchased_on_june_12) / (total_units_available - units_sold_on_june_16) * unit_cost_on_june_26)\n    \n    # Calculate the total cost of goods sold\n    total_cost_of_goods_sold = cost_of_goods_sold_on_june_16 + cost_of_goods_sold_on_june_29\n    \n    # Calculate the total revenue\n    total_revenue = units_sold_on_june_16 * selling_price_on_june_16 + units_sold_on_june_29 * selling_price_on_june_29\n    \n    # Calculate the gross profit\n    gross_profit = total_revenue - total_cost_of_goods_sold\n    \n    # return answer\n    return gross_profit\n```\nThe program calculates the cost of goods sold using the FIFO method, then calculates the total cost of"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    required_rate_of_return = 0.10\n    dividend_growth_rate = 0.04\n    current_growth_rate = 0.06\n    expected_dividend_fourth_year = 1.72\n    \n    # Do math calculation to get the answer\n    dividend_discount_model = expected_dividend_fourth_year / (required_rate_of_return - dividend_growth_rate)\n    present_value = dividend_discount_model / ((1 + current_growth_rate) ** 3)\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    payout_ratio = 0.5\n    growth_rate = 0.10\n    return_rate = 0.15\n    \n    # Do math calculation to get the answer\n    dividend_yield = payout_ratio * return_rate\n    pe_ratio = return_rate / (return_rate - growth_rate)\n    \n    # return answer\n    return pe_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    yearly_cash_flow = 300\n    discount_rate = 0.04\n    number_of_years = 5\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for year in range(1, number_of_years + 1):\n        present_value += yearly_cash_flow / (1 + discount_rate) ** year\n    \n    # return answer\n    return present_value\n```\nThis program calculates the present value of the investment by summing up the discounted cash flows for each year. The `present_value` variable is initialized to 0, and then in each iteration of the loop, the cash flow for that year is added to the present value, discounted by the discount rate raised to the power of the year. The result is the present value of the investment."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss = 15000\n    \n    # Do math calculation to get the answer\n    book_value = initial_price - accumulated_depreciation\n    sale_price = book_value - loss\n    \n    # return answer\n    return sale_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000\n    total_shareholders_equity = 55000000\n    \n    # Do math calculation to get the answer\n    total_assets = total_liabilities + total_shareholders_equity\n    percentage = (total_liabilities / total_assets) * 100\n    \n    # return answer\n    return percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Do math calculation to get the answer\n    inherent_value = dividend / (required_rate_of_return - growth_rate)\n    \n    # return answer\n    return inherent_value\n```"
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "Here is the Python program to estimate the bond's approximate convexity:\n```python\ndef solution():\n    # Define variables name and value\n    pv0 = 99.41172\n    pv_plus = 99.32213\n    pv_minus = 99.50132\n    delta_curve = 0.0003\n    \n    # Do math calculation to get the answer\n    convexity = (pv_minus + pv_plus - 2 * pv0) / (pv0 * delta_curve ** 2)\n    \n    # return answer\n    return convexity\n```\n\nThis program calculates the approximate convexity using the following formula:\n\nConvexity = (PV_ + PV+ - 2 \\* PV0) / (PV0 \\* △Curve^2)\n\nWhere PV0 is the original bond price, PV+ is the bond's price when the yield to maturity is raised, PV_ is the new price of the bond when yield to maturity is reduced, and △Curve is the modification in the benchmark yield curve."
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "Here is the Python program to compute the value added from the choice of security:\n```python\ndef solution():\n    # Define variables name and value\n    domestic_portfolio_return = 0.25\n    domestic_benchmark_return = 0.15\n    domestic_portfolio_weight = 0.5\n    domestic_benchmark_weight = 0.35\n\n    bond_portfolio_return = 0.09\n    bond_benchmark_return = 0.05\n    bond_portfolio_weight = 0.3\n    bond_benchmark_weight = 0.35\n\n    international_portfolio_return = 0.15\n    international_benchmark_return = 0.18\n    international_portfolio_weight = 0.2\n    international_benchmark_weight = 0.3\n\n    # Calculate value added for each asset class\n    domestic_va = (domestic_portfolio_return - domestic_benchmark_return) * domestic_portfolio_weight\n    bond_va = (bond_portfolio_return - bond_benchmark_return) * bond_portfolio_weight\n    international_va = (international_portfolio_return - international_benchmark_return) * international_portfolio_weight\n\n    # Calculate total value added\n    total_va = domestic_va + bond_va + international_va\n\n    # return answer\n    return total_va\n```\nThis program defines the variables from the table and calculates the value added for each asset class by taking the difference between the portfolio return and benchmark return, multiplied by the portfolio weight. The total value added is then calculated by summing up the value added for each asset class. The final answer is returned at the end."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.948,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123\n    forward_points_percentage = 6.8\n    period_in_years = 0.25  # 3 months\n    \n    # Do math calculation to get the answer\n    forward_points = forward_rate * (forward_points_percentage / 100)\n    spot_rate = forward_rate / (1 + (forward_points / forward_rate) / ((1 / period_in_years)))\n    \n    # return answer\n    return spot_rate\n```"
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    price_ffo = 11.5\n    ffo_per_share = 1.17\n    \n    # Do math calculation to get the answer\n    share_price = price_ffo * ffo_per_share\n    \n    # return answer\n    return share_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    total_loans = 1000 + 600\n    delayed_loans = 200 + 48\n    delayed_secondary_loans = 200\n    \n    # Do math calculation to get the answer\n    probability = delayed_secondary_loans / delayed_loans\n    \n    # return answer\n    return probability\n```\nThis program calculates the probability that a delayed loan is a secondary quality loan by dividing the number of delayed secondary loans by the total number of delayed loans."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "Here is the Python program to calculate the 1-day 95% VaR of the option position using the delta-normal method:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    current_price = 26.00\n    daily_volatility_rate = 0.015\n    delta = -0.5\n    confidence_level = 0.95\n\n    # Calculate the z-score for the confidence level\n    z_score = -math.norminv(1 - confidence_level)\n\n    # Calculate the 1-day 95% VaR of the option position\n    var = delta * current_price * z_score * daily_volatility_rate\n\n    # return answer\n    return var\n```\nThis program defines the necessary variables, calculates the z-score for the given confidence level, and then calculates the VaR using the delta-normal method formula. Finally, it returns the calculated VaR value."
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    issuance_of_preferred_stock = 45000\n    repurchase_of_common_stock = -20000\n    debt_retired_through_issuance_of_common_stock = -45000\n    issuance_of_bonds = 40000\n    paid_off_long_term_bank_borrowings = -10000\n    \n    # Do math calculation to get the answer\n    cash_flow_from_financing_activities = issuance_of_preferred_stock + repurchase_of_common_stock + debt_retired_through_issuance_of_common_stock + issuance_of_bonds + paid_off_long_term_bank_borrowings\n    \n    # return answer\n    return cash_flow_from_financing_activities\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "Here is the complete Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    years = 3\n    spot_rates = [0.036, 0.037, 0.038]\n    coupon_payments = [face_value * coupon_rate] * years\n    cash_flows = coupon_payments + [face_value]\n    \n    # Do math calculation to get the answer\n    present_values = [cf / (1 + spot_rates[i])**(i+1) for i, cf in enumerate(cash_flows)]\n    bond_price = sum(present_values)\n    \n    # return answer\n    return bond_price\n```\nThis program uses list comprehensions to calculate the present values of the coupon payments and the face value, and then sums them up to get the bond price. The `enumerate` function is used to iterate over the cash flows and their indices (years) simultaneously."
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    employer_contributions = 1200\n    benefit_obligation_at_beginning_of_year = 45000\n    benefit_obligation_at_end_of_year = 48395\n    actuarial_loss = 350\n    current_service_costs = 470\n    past_service_costs = 0\n    \n    # Do math calculation to get the answer\n    payment_given_out_during_the_year = employer_contributions + actuarial_loss + current_service_costs + past_service_costs - (benefit_obligation_at_end_of_year - benefit_obligation_at_beginning_of_year)\n    \n    # return answer\n    return payment_given_out_during_the_year\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "Here is the Python program to answer the question:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    mean = 160000\n    std_dev = 30000\n    threshold = 100000\n    \n    # Do math calculation to get the answer\n    z_score = (threshold - mean) / std_dev\n    answer = 0.5 * (1 + math.erf(-z_score / math.sqrt(2)))\n    answer = round(answer * 100, 2)  # Convert to percentage and round to 2 decimal places\n    \n    # return answer\n    return answer\n```\nThis program uses the Z-score formula to calculate the number of standard deviations away from the mean that the threshold ($100,000) is. Then, it uses the error function (`erf`) to calculate the area under the normal curve to the left of the threshold, which represents the percentage of returns below $100,000. The result is multiplied by 100 to convert it to a percentage and rounded to 2 decimal places."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    min_margin_requirement = 0.65\n    \n    # Do math calculation to get the answer\n    max_leverage = 1 / min_margin_requirement\n    \n    # return answer\n    return max_leverage\n```\nThis program calculates the maximum leverage ratio by taking the reciprocal of the minimum margin requirement, which is 65% or 0.65. The result is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement set by the brokerage firm XYZ."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    a = 30\n    b = 2\n    Pb = 5\n    \n    # Calculate Qbw\n    Qbw = a - b * Pb\n    \n    # Calculate the elasticity of demand\n    elasticity = (b * Pb) / Qbw\n    \n    # return answer\n    return elasticity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    flotation_cost = 0.05\n    dividend_next_year = 0.32\n    growth_rate = 0.10\n    issue_price = 14.69\n    \n    # Do math calculation to get the answer\n    cost_of_external_equity = (dividend_next_year / (issue_price * (1 - flotation_cost))) + growth_rate\n    \n    # return answer\n    return cost_of_external_equity * 100  # convert to percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0032\n    round_trip_trading_fee = 0.0020\n    bid_offerSpread = 0.0010\n    \n    # Calculate holding period cost\n    holding_period_cost = (annual_management_fee * (9/12)) + round_trip_trading_fee + bid_offerSpread\n    \n    # return answer\n    return holding_period_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    current_value = 515\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.05\n    high_water_mark = 540\n    end_of_year_value = 602.5\n\n    # Calculate the return\n    return_without_fee = (end_of_year_value - current_value) / current_value\n    \n    # Calculate the management fee\n    management_fee = current_value * management_fee_rate\n    \n    # Calculate the incentive fee\n    hurdle_return = current_value * hurdle_rate\n    if end_of_year_value > high_water_mark:\n        incentive_fee = max(0, end_of_year_value - high_water_mark) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    # Calculate the total fee\n    total_fee = management_fee + incentive_fee\n    \n    # Calculate the net return\n    net_return = return_without_fee - (total_fee / current_value)\n    \n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "Here is the Python program to answer the question:\n```\ndef solution():\n    # Define variables name and value\n    shares_common_stock = 1000000\n    net_income = 1500000\n    par_value_bonds = 10000000\n    par_value_preferred_stock = 2000000\n    tax_rate = 0.3\n    convertible_shares = 300000\n    \n    # Calculate income available to common shareholders\n    income_available_common = net_income - (par_value_bonds * 0.04) - (par_value_preferred_stock * 0.07)\n    \n    # Calculate diluted earnings per share\n    diluted_eps = income_available_common / (shares_common_stock + convertible_shares)\n    \n    # return answer\n    return diluted_eps\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    total_amount_received = 10000 * 1.155 + 2500  # 15.5% return and dividend\n    total_stocks = 10000\n    current_stock_price = 24\n    \n    # Do math calculation to get the answer\n    total_value_now = total_stocks * current_stock_price\n    initial_investment = total_value_now - total_amount_received\n    cost_per_stock = initial_investment / total_stocks\n    \n    # return answer\n    return cost_per_stock\n```\nThis program calculates the initial cost per stock by first calculating the total amount received from the investment (including the dividend), then subtracting this amount from the current total value of the stocks to get the initial investment, and finally dividing the initial investment by the number of stocks to get the cost per stock."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    initial_futures_price = 865.0\n    short_term_futures_price = 877.0\n    long_term_futures_price = 883.0\n    annualized_rate = 0.0060\n    \n    # Calculate profit from futures position\n    profit_from_futures = (short_term_futures_price - initial_futures_price) / initial_futures_price\n    \n    # Calculate profit from collateral\n    profit_from_collateral = (annualized_rate / 4)  # annualized rate for 3 months\n    \n    # Calculate total return\n    total_return = profit_from_futures + profit_from_collateral\n    \n    # return answer\n    return total_return\n```\nThis program calculates the profit from the futures position and the profit from the collateral, and then adds them together to get the total return. The annualized rate is divided by 4 to get the rate for the 3-month period."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    initial_cap_rate = 0.055\n    ending_cap_rate = 0.06\n    discount_rate = 0.0725\n    \n    # Do math calculation to get the answer\n    growth_rate = (ending_cap_rate - discount_rate) / (1 - initial_cap_rate / ending_cap_rate)\n    \n    # return answer\n    return growth_rate\n```\n\nThe program defines the given variables (initial capitalization rate, ending capitalization rate, and discount rate) and then performs the calculation to find the growth rate using the formula: growth rate = (ending capitalization rate - discount rate) / (1 - initial capitalization rate / ending capitalization rate). Finally, it returns the calculated growth rate."
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 5000000\n    residual_value = 500000\n    total_productive_capacity = 950000\n    production_in_fy2015 = 150000\n    \n    # Calculate depreciable amount\n    depreciable_amount = cost_of_equipment - residual_value\n    \n    # Calculate depreciation rate per unit\n    depreciation_rate_per_unit = depreciable_amount / total_productive_capacity\n    \n    # Calculate depreciation expense in the initial year\n    depreciation_expense = production_in_fy2015 * depreciation_rate_per_unit\n    \n    # return answer\n    return depreciation_expense\n```"
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 92\n    weighted_average_shares_outstanding = 118\n    price_ffo_multiple = 13\n    \n    # Calculate FFO (Funds From Operations)\n    ffo = net_income + 45  # Add back depreciation and amortization\n    \n    # Calculate FFO per share\n    ffo_per_share = ffo / weighted_average_shares_outstanding\n    \n    # Calculate share price\n    share_price = ffo_per_share * price_ffo_multiple\n    \n    # return answer\n    return share_price\n```\nThis program uses the given data to calculate the FFO, FFO per share, and finally the share price at the end of 2017 according to the Price/FFO multiple."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 40\n    avg_cost = 70\n    elasticity = 1.5\n    \n    # Do math calculation to get the answer\n    markup = (elasticity / (elasticity - 1)) * (avg_cost - marginal_cost)\n    price = avg_cost + markup\n    \n    # return answer\n    return price\n```\n\nThis program calculates the markup based on the given marginal cost, average cost, and elasticity, and then adds the markup to the average cost to get the price that the corporation is likely to set."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "Here is the Python program to answer the question:\n```\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    current_value = 97\n    current_lpr = 0.01\n    spread = 0.0080\n    periods_per_year = 2\n    \n    # Do math calculation to get the answer\n    ytm = (face_value / current_value) ** (1 / 2) - 1\n    lpr_plus_spread = current_lpr + spread\n    discount_margin = (ytm - lpr_plus_spread) * periods_per_year * 100\n    \n    # return answer\n    return discount_margin * 100\n```"
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    intercept = 0.0477\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40\n    fraction_retained = 0.70\n    \n    # Coefficients from the regression table\n    b_underwriter_rank = 0.0150\n    b_pre_offer_price_adjustment = 0.4350\n    b_offer_size = -0.0009\n    b_fraction_retained = 0.0500\n    \n    # Do math calculation to get the answer\n    initial_return = intercept + b_underwriter_rank * underwriter_rank + b_pre_offer_price_adjustment * pre_offer_price_adjustment + b_offer_size * offer_size + b_fraction_retained * fraction_retained\n    \n    # return answer\n    return initial_return\n```\nThis program calculates the anticipated initial return for the forthcoming IPO based on the given characteristics and the coefficients from the regression table."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "Here is the Python program:\n```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0040\n    round_trip_trading_commissions = 0.0055\n    bid_offer_spread = 0.0020\n    holding_period_in_years = 9 / 12\n    \n    # Do math calculation to get the answer\n    total_cost = (annual_management_fee + round_trip_trading_commissions + bid_offer_spread) * holding_period_in_years\n    \n    # return answer\n    return total_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "Here is the Python program to answer the question:\n```\ndef solution():\n    # Define variables name and value\n    year1_return = 1.14\n    year2_return = 0.90\n    year3_return = 0.98\n    \n    # Do math calculation to get the answer\n    holding_period_return = (year1_return * year2_return * year3_return) ** (1/3) - 1\n    \n    # return answer\n    return holding_period_return\n```\nThis program calculates the holding period return for the three-year timeframe by taking the geometric average of the annual returns. The geometric average is calculated by raising the product of the annual returns to the power of 1/n, where n is the number of years. Finally, 1 is subtracted from the result to convert it to a percentage return."
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    Consumption = 20.0\n    Capital_consumption_allowance = 1.9\n    Government_spending = 4.2\n    Imports = 2.2\n    Gross_private_domestic_investment = 6.0\n    Exports = 1.8\n    \n    # Do math calculation to get the answer\n    Gross_domestic_product = Consumption + Capital_consumption_allowance + Government_spending + Gross_private_domestic_investment + (Exports - Imports)\n    \n    # return answer\n    return Gross_domestic_product\n```"
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w1 = 0.30\n    w2 = 0.70\n    std_dev1 = 0.12\n    std_dev2 = 0.25\n    correlation = 0.20\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = ((w1**2) * (std_dev1**2) + (w2**2) * (std_dev2**2) + 2 * w1 * w2 * std_dev1 * std_dev2 * correlation) ** 0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    working_capital_balance = 22000000\n    fair_value_of_fixed_assets = 57000000\n    normalized_income = 89000000\n    required_return_on_working_capital = 0.06\n    required_return_on_fixed_assets = 0.09\n    required_return_on_intangible_assets = 0.25\n    future_growth_rate = 0.07\n\n    # Calculate the total assets value\n    total_assets = working_capital_balance + fair_value_of_fixed_assets\n\n    # Calculate the return on total assets\n    return_on_total_assets = normalized_income / total_assets\n\n    # Calculate the excess earnings\n    excess_earnings = normalized_income - (required_return_on_working_capital * working_capital_balance) - (required_return_on_fixed_assets * fair_value_of_fixed_assets)\n\n    # Calculate the present value of excess earnings\n    present_value_of_excess_earnings = excess_earnings / (required_return_on_intangible_assets - future_growth_rate)\n\n    # return answer\n    return present_value_of_excess_earnings\n```\n\nThis program calculates the value of intangibles using the excess earnings method. It first calculates the total assets value, then the return on total assets, followed by the excess earnings, and finally the present value of excess earnings, which represents the value of intangibles."
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "Here is the Python program to calculate the cash conversion cycle (net operating cycle) of the business:\n```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 40000\n    cost_of_goods_sold = 30000\n    accounts_receivable = 3000\n    inventory_beginning_balance = 1500\n    inventory_ending_balance = 2000\n    accounts_payable = 4000\n\n    # Calculate days sales outstanding (DSO)\n    dso = (accounts_receivable / credit_sales) * 365\n\n    # Calculate days inventory outstanding (DIO)\n    dio = ((inventory_beginning_balance + inventory_ending_balance) / 2) / (cost_of_goods_sold / 365)\n\n    # Calculate days payable outstanding (DPO)\n    dpo = (accounts_payable / cost_of_goods_sold) * 365\n\n    # Calculate cash conversion cycle (net operating cycle)\n    cash_conversion_cycle = dso + dio - dpo\n\n    # return answer\n    return cash_conversion_cycle\n```\nThis program first calculates the days sales outstanding (DSO), days inventory outstanding (DIO), and days payable outstanding (DPO) using the provided financial statement information. Then, it calculates the cash conversion cycle by adding DSO and DIO and subtracting DPO. The result is returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 3000000  # Cost of the software\n    salvage_value = 10000  # Salvage value of the software\n    years_of_use = 20  # Number of years the software will be in use\n    year = 1  # Year for which we are calculating the book value\n\n    # Do math calculation to get the answer\n    annual_depreciation = (cost - salvage_value) / years_of_use\n    accumulated_depreciation = annual_depreciation * year\n    book_value = cost - accumulated_depreciation\n    \n    # return answer\n    return book_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    outcomes = [7, 8, 9, 10]\n    n = len(outcomes)\n    \n    # Calculate the mean\n    mean = sum(outcomes) / n\n    \n    # Calculate the variance\n    variance = sum((x - mean) ** 2 for x in outcomes) / n\n    \n    # return answer\n    return variance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 600000\n    avg_account_receivable = 50000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    answer = 365 / receivables_turnover\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "»\n\nHere is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    investment_duration = 8\n    modified_duration = 11.47\n    \n    # Do math calculation to get the answer\n    duration_gap = modified_duration - investment_duration\n    answer = duration_gap\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    price_return = 0.04\n    roll_return = 0.015\n    free_rate = 0.01\n    \n    # Do math calculation to get the answer\n    overall_return = price_return + roll_return - free_rate\n    \n    # return answer\n    return overall_return\n```\nThis program defines the variables `price_return`, `roll_return`, and `free_rate` based on the values provided in the table. Then, it calculates the overall return by adding the price return and roll return, and subtracting the free rate. The result is returned as the answer."
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150\n    benefit_obligation_at_beginning_of_year = 45000\n    benefit_obligation_at_end_of_year = 48395\n    plan_assets_at_beginning_of_year = 40800\n    plan_assets_at_end_of_year = 44300\n    actuarial_loss = 350\n    actual_return_on_plan_assets = 3100\n    discount_rate_on_plan_liabilities = 0.075\n    expected_rate_of_return_on_plan_assets = 0.082\n    employer_contributions = 1200\n    \n    # Do math calculation to get the answer\n    interest_cost = benefit_obligation_at_beginning_of_year * discount_rate_on_plan_liabilities\n    expectedRETURN = plan_assets_at_beginning_of_year * expected_rate_of_return_on_plan_assets\n    recurrent_pension_expense = current_service_costs + interest_cost + (benefit_obligation_at_end_of_year - benefit_obligation_at_beginning_of_year) - actual_return_on_plan_assets + employer_contributions - (plan_assets_at_end_of_year - plan_assets_at_beginning_of_year)\n    answer = recurrent_pension_expense\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_income_200_units = 500000\n    total_income_250_units = 600000\n    units_sold_200 = 200\n    units_sold_250 = 250\n    \n    # Do math calculation to get the answer\n    revenue_increase = total_income_250_units - total_income_200_units\n    unit_increase = units_sold_250 - units_sold_200\n    marginal_revenue_per_unit = revenue_increase / unit_increase\n    \n    # return answer\n    return marginal_revenue_per_unit\n```\n\nThis program calculates the marginal revenue per unit by first finding the increase in revenue and the increase in units sold, and then dividing the revenue increase by the unit increase."
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    shares = 200000\n    purchase_price_euro = 90\n    initial_spot_rate = 1.3935\n    three_month_spot_rate = 1.4106\n    initial_fwd_rate = 1.3935 - 0.0190 = 1.3745  # 1.3935 - 0.0190\n    three_month_fwd_rate = 1.4106 - 0.0270 = 1.3836  # 1.4106 - 0.0270\n    \n    # Calculate initial value in USD\n    initial_value_usd = shares * purchase_price_euro * initial_spot_rate\n    \n    # Calculate value in USD three months later\n    three_month_value_euro = shares * purchase_price_euro\n    three_month_value_usd = three_month_value_euro * three_month_spot_rate\n    \n    # Calculate the gain/loss on forward contract\n    initial_fwd_contract_value = shares * purchase_price_euro * initial_fwd_rate\n    three_month_fwd_contract_value = shares * purchase_price_euro * three_month_fwd_rate\n    gain_loss_fwd_contract = three_month_fwd_contract_value - initial_fwd_contract_value\n    \n    # Mark-to-market value\n    m2m_value_usd = three_month_value_usd + gain_loss_fwd_contract\n    \n    # return answer\n    return m2m_value_usd\n```\nNote: This program assumes that the forward rates are quoted in points (e.g. -19.0 is equivalent to -0.0190)."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "Here's the solution:\n\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.02  # 1 year spot rate\n    r2 = 0.025  # 2 years spot rate\n    r3 = 0.035  # 3 years spot rate\n\n    # Do math calculation to get the answer\n    forward_rate = (1 + r3)**3 / ((1 + r2)**2) - 1\n\n    # return answer\n    return forward_rate\n```\nThis program uses the concept of forward rates in finance to calculate the forward rate for two years starting from two years from now. The formula used is:\n\nF = (1 + r3)^3 / ((1 + r2)^2) - 1\n\nWhere F is the forward rate, r3 is the 3-year spot rate, and r2 is the 2-year spot rate."
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.1\n    face_value = 100\n    years = 3\n    spot_rates = [0.08, 0.09, 0.095]\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(years):\n        present_value += (coupon_rate * face_value) / ((1 + spot_rates[i]) ** (i + 1))\n    present_value += face_value / ((1 + spot_rates[-1]) ** years)\n    \n    # return answer\n    return present_value\n```\n\nThis program calculates the present value of the bond by discounting the cash flows (annual interest payments and principal repayment at maturity) using the provided spot rates. The result is the cost of the 3-year bond."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    contribution_margin = 20\n    fixed_production_costs = 500000\n    \n    # Do math calculation to get the answer\n    breakeven_point = fixed_production_costs / contribution_margin\n    answer = breakeven_point\n    \n    # return answer\n    return answer\n```\nThis program calculates the breakeven point, which is the point at which the degree of operating leverage (DOL) is likely to be the least. The breakeven point is calculated by dividing the fixed production costs by the contribution margin."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    units_purchased_in_2013 = 2000\n    cost_per_unit_in_2013 = 50\n    units_sold_in_2013 = 1500\n    units_purchased_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    \n    # Calculate the total units available in 2014\n    total_units_available_in_2014 = units_purchased_in_2013 - units_sold_in_2013 + units_purchased_in_2014\n    \n    # Calculate the total cost of the units available in 2014\n    total_cost_of_units_available_in_2014 = (units_purchased_in_2013 - units_sold_in_2013) * cost_per_unit_in_2013 + units_purchased_in_2014 * cost_per_unit_in_2014\n    \n    # Calculate the cost of the units sold in 2014\n    units_sold_in_2014 = 500\n    cost_of_units_sold_in_2014 = units_sold_in_2014 * cost_per_unit_in_2013\n    \n    # Calculate the ending inventory balance for Corporation Z in 2014\n    ending_inventory_balance_in_2014 = total_cost_of_units_available_in_2014 - cost_of_units_sold_in_2014\n    \n    # return answer\n    return ending_inventory_balance_in_2014\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    dirty_price = 104.17\n    days_since_last_coupon = 30\n    days_until_termination = 90\n    quoted_futures_price = 129\n    risk_free_rate = 0.0165 / 4  # convert yearly rate to quarterly rate\n    conversion_factor = 0.7025\n    coupon_rate = 0.02 / 2  # convert yearly rate to semi-annual rate\n    \n    # Calculate accrued interest\n    accrued_interest = (dirty_price - 100) * (days_since_last_coupon / 180)\n    \n    # Calculate forward price\n    forward_price = (dirty_price - accrued_interest) / (1 + risk_free_rate * (days_until_termination / 365))\n    \n    # Calculate equilibrium quoted futures contract price\n    equilibrium_quoted_futures_price = forward_price * conversion_factor\n    \n    # return answer\n    return equilibrium_quoted_futures_price\n```"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "Here is the completed Python program:\n```python\ndef solution():\n    # Define variables name and value\n    par_value1 = 25 * 1000000\n    bond_price1 = 105\n    coupon1 = 0.08\n    modified_duration1 = 7.9\n    \n    par_value2 = 25 * 1000000\n    bond_price2 = 100\n    coupon2 = 0.07\n    modified_duration2 = 8.5\n    \n    par_value3 = 20 * 1000000\n    bond_price3 = 95\n    coupon3 = 0.05\n    modified_duration3 = 6.3\n    \n    par_value4 = 30 * 1000000\n    bond_price4 = 87\n    coupon4 = 0\n    modified_duration4 = 10.2\n    \n    # Calculate the market value of each bond\n    market_value1 = (par_value1 * bond_price1) / 100\n    market_value2 = (par_value2 * bond_price2) / 100\n    market_value3 = (par_value3 * bond_price3) / 100\n    market_value4 = (par_value4 * bond_price4) / 100\n    \n    # Calculate the total market value\n    total_market_value = market_value1 + market_value2 + market_value3 + market_value4\n    \n    # Calculate the total PV01\n    total_pv01 = ((market_value1 * modified_duration1 * coupon1) / 100) + ((market_value2 * modified_duration2 * coupon2) / 100) + ((market_value3 * modified_duration3 * coupon3) / 100) + ((market_value4 * modified_duration4 * coupon4) / 100)\n    \n    # Calculate the price value of a basis point\n    price_value_of_basis_point = total_pv01 / total_market_value\n    \n    # return answer\n    return price_value_of_basis_point\n```\nThis program calculates the price value of a basis point for the bond collection by first calculating the market value of each bond, then calculating the total market value, and finally calculating the price value of a basis point using the formula: price value of a basis point = total PV01 / total market value."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    current_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    time_to_maturity = 1\n    \n    # Do math calculation to get the answer\n    probability_of_default = -math.log(current_price / face_value) / (risk_free_rate * time_to_maturity)\n    \n    # return answer\n    return probability_of_default\n```"
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "Here is the complete Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    totalshares = 10000000\n    earnings_per_share = 2.0\n    pe_ratio = 20\n    book_value_per_share = 30.0\n    \n    # Calculate the market price per share\n    market_price_per_share = earnings_per_share * pe_ratio\n    \n    # Calculate the total book value\n    total_book_value = totalshares * book_value_per_share\n    \n    # Calculate the total amount spent on buying back 1 million shares\n    total_amount_spent = 1000000 * market_price_per_share\n    \n    # Calculate the new total book value after buying back shares\n    new_total_book_value = total_book_value - total_amount_spent\n    \n    # Calculate the new total shares outstanding\n    new_total_shares = totalshares - 1000000\n    \n    # Calculate the new book value per share\n    new_book_value_per_share = new_total_book_value / new_total_shares\n    \n    # return answer\n    return new_book_value_per_share\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    loan_amount = 5000000\n    yearly_discount_rate = 0.058\n    years = 10\n    \n    # Do math calculation to get the answer\n    monthly_discount_rate = yearly_discount_rate / 12\n    monthly_repayment = loan_amount * monthly_discount_rate * (1 + monthly_discount_rate) ** (years * 12) / ((1 + monthly_discount_rate) ** (years * 12) - 1)\n    \n    # return answer\n    return round(monthly_repayment)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    mrr_june = 1.35  # three-month MRR for 30 June in percentage\n    basis_points = 65  # basis points in basis points (0.01%)\n    \n    # Do math calculation to get the answer\n    coupon_rate = mrr_june + (basis_points / 100)\n    \n    # return answer\n    return coupon_rate\n```\n\nThis program calculates the coupon rate for the interest remittance done on 30 June by adding the three-month MRR for 30 June and the basis points, and returns the result."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight1 = 0.30\n    weight2 = 0.70\n    std_dev1 = 0.20\n    std_dev2 = 0.12\n    correlation = 0.40\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = math.sqrt((weight1**2) * (std_dev1**2) + (weight2**2) * (std_dev2**2) + 2 * weight1 * weight2 * std_dev1 * std_dev2 * correlation)\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    fixed_interest = 0.03\n    initial_equity_index = 100\n    nominal_amount = 100000000\n    present_spot_rate_3m = 0.997506\n    present_spot_rate_6m = 0.992556\n    present_spot_rate_9m = 0.985222\n    present_spot_rate_1y = 0.975610\n    \n    # Calculate the fixed leg\n    fixed_leg = nominal_amount * fixed_interest * (present_spot_rate_3m + present_spot_rate_6m + present_spot_rate_9m + present_spot_rate_1y)\n    \n    # Set the equity leg equal to the fixed leg and solve for the equity index\n    equity_leg = fixed_leg / nominal_amount\n    equity_index = initial_equity_index / (1 + equity_leg)\n    \n    # return answer\n    return equity_index\n```"
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "Here is the Python program to answer the question:\n\n```\ndef solution():\n    # Define variables name and value\n    market_value_of_debt = 10000000\n    market_capitalization = 45000000\n    cash_and_short_term_investments = 2500000\n    ebitda = 15000000\n    marginal_tax_rate = 0.4\n    \n    # Do math calculation to get the answer\n    net_debt = market_value_of_debt - cash_and_short_term_investments\n    enterprise_value = market_capitalization + net_debt\n    ebitda_multiple = enterprise_value / ebitda\n    \n    # return answer\n    return ebitda_multiple\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "Here is the Python program to answer the question:\n\n```\ndef solution():\n    # Define variables name and value\n    future_value = 5000\n    discount_rate = 0.05 / 12  # Convert annual rate to monthly rate\n    years = 3\n    months = years * 12\n    \n    # Do math calculation to get the answer\n    present_value = future_value / (1 + discount_rate) ** months\n    \n    # return answer\n    return present_value\n```\n\nThis program defines the future value, discount rate, and time period (in months) as variables, then calculates the present value using the formula for present value with compound interest. The result is returned as the output of the function."
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    original_forward_rate = 0.7400\n    original_amount = 5000000\n    original_conversion = original_amount * original_forward_rate\n    \n    # Get the forward rates from Exhibit 2\n    three_months_forward_points_bid = 14.0\n    three_months_forward_points_offer = 15.0\n    \n    # Calculate the three months forward rates\n    three_months_forward_rate_bid = (original_forward_rate * (1 + (three_months_forward_points_bid / 10000)))\n    three_months_forward_rate_offer = (original_forward_rate * (1 + (three_months_forward_points_offer / 10000)))\n    \n    # Calculate the current conversion value\n    current_conversion_bid = original_amount * three_months_forward_rate_bid\n    current_conversion_offer = original_amount * three_months_forward_rate_offer\n    \n    # Calculate the mark-to-market gain\n    mark_to_market_gain_bid = current_conversion_bid - original_conversion\n    mark_to_market_gain_offer = current_conversion_offer - original_conversion\n    \n    # return answer as the average of the mark-to-market gain bid and offer\n    return (mark_to_market_gain_bid + mark_to_market_gain_offer) / 2\n```"
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    FFO = 290612\n    avg_annual_dividend_next_year = 2.25\n    dividend_growth_rate_year_2_and_3 = 0.05\n    dividend_growth_rate_after_year_3 = 0.045\n    cap_rate = 0.0625\n    shares_outstanding = 67900\n    \n    # Do math calculation to get the answer\n    terminal_value = avg_annual_dividend_next_year * (1 + dividend_growth_rate_year_2_and_3) ** 2 / (cap_rate - dividend_growth_rate_after_year_3)\n    PV_terminal_value = terminal_value / (1 + cap_rate) ** 3\n    present_value_of_dividends = avg_annual_dividend_next_year * ((1 + dividend_growth_rate_year_2_and_3) ** 2 - (1 + dividend_growth_rate_after_year_3) ** 2) / ((1 + cap_rate) ** 2 * (cap_rate - dividend_growth_rate_after_year_3))\n    total_value = PV_terminal_value + present_value_of_dividends\n    share_value = total_value / shares_outstanding\n    \n    # return answer\n    return share_value\n```\nThis program calculates the share value of REIT B using valuation Method 4, which involves estimating the present value of future dividends and terminal value. The program uses the given data from the Exhibits 1 and 2 to perform the calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    depreciation = 300000 / 3  # straight-line depreciation\n    net_income_firm_A = 750000\n    tax_rate = 0.25\n    firm_A_income_before_depreciation_and_tax = net_income_firm_A + depreciation\n    firm_A_income_before_tax = firm_A_income_before_depreciation_and_tax\n    firm_A_tax = firm_A_income_before_tax * tax_rate\n    firm_A_net_income = firm_A_income_before_tax - firm_A_tax\n    \n    # Firm B expenses the printer, so its income before tax is the same as Firm A's income before depreciation and tax\n    firm_B_income_before_tax = firm_A_income_before_depreciation_and_tax\n    firm_B_tax = firm_B_income_before_tax * tax_rate\n    firm_B_net_income = firm_B_income_before_tax - firm_B_tax\n    \n    # Calculate return on equity for Firm B\n    shareholders_equity = 10000000\n    firm_B_return_on_equity = firm_B_net_income / shareholders_equity\n    \n    # return answer\n    return firm_B_return_on_equity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    S = 85  # stock price\n    K = 90  # strike price\n    r = 0.05  # risk-free rate\n    c = 10  # call price\n    p = 15  # put price\n    \n    # Do math calculation to get the answer\n    d = (r - ((math.log(c / p)) / (2 * math.log(S / K)))) / (1 - (K / S))\n    \n    # return answer\n    return d\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    change_in_yield = 0.01  # 100 basis points = 1%\n    duration = 6.0\n    convexity = 55.0\n    \n    # Do math calculation to get the answer\n    modified_duration = duration + (convexity * change_in_yield)\n    effect_on_return = -modified_duration * change_in_yield\n    \n    # return answer\n    return effect_on_return\n```"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "Here is the Python program to answer the question:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    face_value = 100  # assume the face value of the bond is 100\n    coupon_rate = 0.05  # coupon rate in decimal\n    years_to_maturity = 3  # years to maturity\n    spot_rate_1_year = 0.0486  # spot rate for 1 year in decimal\n    spot_rate_2_years = 0.0495  # spot rate for 2 years in decimal\n    spot_rate_3_years = 0.0565  # spot rate for 3 years in decimal\n    z_spread = 0.0234  # z-spread in decimal\n    \n    # Calculate the discount factors\n    df_1_year = 1 / (1 + spot_rate_1_year)\n    df_2_years = 1 / ((1 + spot_rate_2_years) ** 2)\n    df_3_years = 1 / ((1 + spot_rate_3_years) ** 3)\n    \n    # Calculate the present value of cash flows\n    pv_coupon_1_year = coupon_rate * face_value * df_1_year\n    pv_coupon_2_years = coupon_rate * face_value * df_2_years\n    pv_coupon_3_years = coupon_rate * face_value * df_3_years\n    pv_face_value = face_value * df_3_years\n    \n    # Calculate the present value of the bond\n    pv_bond = pv_coupon_1_year + pv_coupon_2_years + pv_coupon_3_years + pv_face_value\n    \n    # Calculate the z-spread adjusted discount rate\n    adjusted_discount_rate_1_year = spot_rate_1_year + z_spread\n    adjusted_discount_rate_2_years = spot_rate_2_years + z_spread\n    adjusted_discount_rate_3_years = spot_rate_3_years + z_spread\n    \n    # Calculate the z-spread adjusted present value of cash flows\n    pv_coupon_1_year_adj = coupon_rate * face_value / (1 + adjusted_discount_rate_1_year)\n    pv_coupon_2_years_adj = coupon_rate * face_value / ((1 + adjusted_discount_rate_2_years) ** 2)\n    pv_coupon_3_years_adj = coupon_rate * face_value / ((1 + adjusted_discount_rate_3_years) ** 3)\n    pv_face"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "Here is the completed Python program:\n```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 10.3829\n    modified_convexity = 141.217\n    yield_change = -0.005  # -50 bps = -0.005\n\n    # Do math calculation to get the answer\n    projected_price_change = (-modified_duration * yield_change) + (0.5 * modified_convexity * yield_change ** 2)\n    answer = projected_price_change * 100  # convert to percentage\n\n    # return answer\n    return answer\n```\nThis program calculates the projected percentage price change of the bond using the formula:\n\nΔP = (-D × Δy) + (0.5 × C × Δy^2)\n\nwhere ΔP is the projected price change, D is the modified duration, Δy is the change in yield, and C is the modified convexity."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    common_shares_outstanding = 1200000\n    beta = 2.2\n    face_value_bonds = 10000000\n    coupon_rate = 0.08\n    years_to_maturity = 5\n    yield_bonds = 0.1365\n    initial_bonds_price = 100  # priced to yield\n    new_bonds_face_value = 2500000\n    new_bonds_yield = 0.1365\n    new_bonds_price = 100  # priced at par\n    common_stock_price = 10\n    risk_free_interest_rate = 0.03\n    expected_market_return = 0.10\n    marginal_tax_rate = 0.30\n    new_funding = 7500000\n    \n    # Calculate the cost of debt\n    cost_debt = yield_bonds * (1 - marginal_tax_rate)\n    \n    # Calculate the cost of equity using the CAPM model\n    cost_equity = risk_free_interest_rate + beta * (expected_market_return - risk_free_interest_rate)\n    \n    # Calculate the proportion of debt and equity\n    total_debt = face_value_bonds + min(new_bonds_face_value, new_funding)\n    total_equity = common_shares_outstanding * common_stock_price + (new_funding - total_debt)\n    proportion_debt = total_debt / (total_debt + total_equity)\n    proportion_equity = total_equity / (total_debt + total_equity)\n    \n    # Calculate the weighted average cost of capital\n    wacc = proportion_debt * cost_debt + proportion_equity * cost_equity\n    \n    # return answer\n    return wacc\n```"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "Here is the Python program to calculate the price of Bond D:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # Face value of the bond\n    coupon_rate = 0.08  # Coupon rate of the bond\n    years_to_maturity = 3  # Time-to-maturity of the bond\n    spot_rates = [0.07, 0.08, 0.09]  # Spot rates for 1, 2, and 3 years respectively\n\n    # Calculate the present value of the bond\n    present_value = 0\n    for year in range(1, years_to_maturity + 1):\n        cash_flow = face_value * coupon_rate if year < years_to_maturity else face_value * (1 + coupon_rate)\n        present_value += cash_flow / (1 + spot_rates[year - 1]) ** year\n\n    # Return the price of the bond\n    return present_value\n```\n\nThis program calculates the price of Bond D by discounting its cash flows using the provided spot rates. The cash flows of the bond include the annual interest payments and the face value of the bond at maturity. The present value of these cash flows is then calculated using the spot rates, and the result is the price of the bond."
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    depreciation_amortization_expense_golden = 106\n    depreciation_amortization_expense_frost = 85\n    \n    # Snowflake's amortization expense for previously unregistered licenses\n    licenses_amortization_expense = (360 / 50) / 5\n    \n    # Calculate Clearwater's consolidated depreciation and amortization expense for 2019\n    consolidated_depreciation_amortization_expense = depreciation_amortization_expense_golden + depreciation_amortization_expense_frost + licenses_amortization_expense\n    \n    # return answer\n    return consolidated_depreciation_amortization_expense\n```\nThis program calculates the consolidated depreciation and amortization expense for 2019 by adding the depreciation and amortization expense of Golden, Frost, and the amortization expense of the previously unregistered licenses."
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    ten_year_shift_for_1bp = 87.1454\n    \n    # Do math calculation to get the answer\n    key_rate_01 = (initial_value - ten_year_shift_for_1bp) * 100\n    \n    # return answer\n    return key_rate_01\n```\nThis program calculates the key rate '01 for a shift of 10 years by subtracting the 10-year shift for 1bp from the initial value and then multiplying by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.143,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.2 # probability of bankruptcy, 20% = 0.2\n    P_B_given_A = 0.5 # probability of \"good\" rating given bankruptcy, 50% = 0.5\n    P_B = 0.7 # probability of \"good\" rating, 70% = 0.7\n    \n    # Do math calculation to get the answer\n    P_A_given_B = (P_A * P_B_given_A) / P_B\n    \n    # return answer\n    return P_A_given_B\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    principal_amount = 100000\n    yearly_rate = 0.025\n    years = 1\n    compounding_frequency = 52  # Weekly compounding frequency\n    \n    # Do math calculation to get the answer\n    present_value = principal_amount / ((1 + (yearly_rate / compounding_frequency)) ** (compounding_frequency * years))\n    \n    # return answer\n    return present_value\n```\nThis program calculates the present value of the amount needed in a year, taking into account the yearly interest rate and weekly compounding frequency."
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock_price = 45.15  # Given stock price (not provided in the table, but assumed here)\n    core_EPS_2017 = 1.31  # From the table\n    \n    # Do math calculation to get the answer\n    trailing_PE = stock_price / core_EPS_2017\n    \n    # return answer\n    return trailing_PE\n```\n\nIn this program, we assume the stock price is $45.15, which is not provided in the table. The `core_EPS_2017` is taken from the table. The trailing P/E is calculated by dividing the stock price by the core EPS of 2017."
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 875\n    depreciation_expense = 400\n    capital_expenditure = 5000 - 4250  # assuming capex is the difference in gross fixed assets\n    change_in_working_capital = (800 + 850 - 400 - 120) - (750 + 720 - 300 - 90)\n    interest_expense = 350\n    tax_rate = 0.3\n    \n    # Do math calculation to get the answer\n    operating_cash_flow = net_income + depreciation_expense\n    capital_expenditure = capital_expenditure * (-1)  # converting to a negative value as it's an outflow\n    free_cash_flow = operating_cash_flow + capital_expenditure\n    free_cash_flow_to_equity = free_cash_flow - (interest_expense * (1 - tax_rate))\n    free_cash_flow_to_equity = free_cash_flow_to_equity - change_in_working_capital\n    \n    # return answer\n    return free_cash_flow_to_equity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    total_portfolio = 1800000  # human capital + financial capital\n    target_equity_allocation = 0.3\n    human_capital = 1200000\n    financial_capital = 600000\n    human_capital_equity_similarity = 0.25\n    \n    # Do math calculation to get the answer\n    total_equity_allocation = target_equity_allocation * total_portfolio\n    human_capital_equity_contribution = human_capital * human_capital_equity_similarity\n    financial_capital_equity_allocation = total_equity_allocation - human_capital_equity_contribution\n    equity_allocation_for_financial_capital = financial_capital_equity_allocation / financial_capital\n    \n    # return answer\n    return equity_allocation_for_financial_capital\n```"
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n    tax_rate = 0.3\n    \n    # Calculate the difference in LIFO reserve\n    diff_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    \n    # Calculate the increase in cost of goods sold\n    increase_cost_goods_sold = diff_lifo_reserve\n    \n    # Calculate the increase in net income before tax\n    increase_net_income_before_tax = increase_cost_goods_sold\n    \n    # Calculate the increase in net income after tax\n    increase_net_income_after_tax = increase_net_income_before_tax * (1 - tax_rate)\n    \n    # return answer\n    return increase_net_income_after_tax\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    one_year_spot_rate = 1.02 / 100 + 1\n    two_year_spot_rate = 1.65 / 100 + 1\n    three_year_spot_rate = 2.15 / 100 + 1\n    \n    # Do math calculation to get the answer\n    two_year_implied_forward_rate = (three_year_spot_rate ** 3) / (two_year_spot_rate ** 2)\n    one_year_implied_forward_rate_two_years_in_future = two_year_implied_forward_rate ** (1/2) - 1\n    answer = one_year_implied_forward_rate_two_years_in_future * 100\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 48.6  # current stock price\n    X = 45    # strike price\n    sigma = 0.3  # volatility\n    r = 0.003  # risk-free rate\n    T = 0.25   # time to expiration\n    N_d1 = 0.6352  # N(d1) value\n    N_d2 = 0.5486  # N(d2) value\n    \n    # Do math calculation to get the answer\n    put_value = X * math.exp(-r * T) * N_d2 - S * math.exp((sigma**2 * T)/2) * N_d1\n    \n    # return answer\n    return put_value\n```\n\nNote: This program uses the put-call parity to calculate the put option value. The formula used is: `Put = X * e^(-rT) * N(d2) - S * e^((σ^2 * T)/2) * N(d1)`, where `N(d1)` and `N(d2)` are the cumulative distribution functions of the standard normal distribution, which are given in the problem statement."
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "Here is the Python program to calculate the sample standard deviation:\n```python\ndef solution():\n    # Define variables name and value\n    observations = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n\n    # Calculate the mean\n    mean = sum(observations) / len(observations)\n\n    # Calculate the squared differences from the mean\n    sq_diffs = [(x - mean) ** 2 for x in observations]\n\n    # Calculate the variance\n    variance = sum(sq_diffs) / (len(observations) - 1)\n\n    # Calculate the sample standard deviation\n    answer = variance ** 0.5\n\n    # return answer\n    return answer\n```\nThis program first calculates the mean of the observations, then calculates the squared differences from the mean, and finally calculates the variance and sample standard deviation."
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    portfolio_weights = [0.3, 0.3, 0.2, 0.1, 0.1]\n    benchmark_weights = [0.24, 0.2, 0.2, 0.18, 0.18]\n    returns = [0.14, 0.15, 0.12, 0.08, 0.10]\n\n    # Calculate portfolio return\n    portfolio_return = sum([weight * return_ for weight, return_ in zip(portfolio_weights, returns)])\n\n    # Calculate benchmark return\n    benchmark_return = sum([weight * return_ for weight, return_ in zip(benchmark_weights, returns)])\n\n    # Calculate value added (active return)\n    value_added = portfolio_return - benchmark_return\n\n    # return answer\n    return value_added\n```\nThis program defines the portfolio weights, benchmark weights, and returns for each stock, calculates the portfolio return and benchmark return using a list comprehension, and then calculates the value added (active return) by subtracting the benchmark return from the portfolio return."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "Here is the Python program to calculate the weighted average maturity (WAM) for this MBS:\n```\ndef solution():\n    # Define variables name and value\n    face_value_1 = 1000000\n    maturity_1 = 30\n    face_value_2 = 2000000\n    maturity_2 = 90\n    face_value_3 = 3000000\n    maturity_3 = 180\n    face_value_4 = 4000000\n    maturity_4 = 360\n    \n    total_face_value = face_value_1 + face_value_2 + face_value_3 + face_value_4\n    \n    # Do math calculation to get the answer\n    weighted_maturity_1 = face_value_1 * maturity_1\n    weighted_maturity_2 = face_value_2 * maturity_2\n    weighted_maturity_3 = face_value_3 * maturity_3\n    weighted_maturity_4 = face_value_4 * maturity_4\n    \n    weighted_average_maturity = (weighted_maturity_1 + weighted_maturity_2 + weighted_maturity_3 + weighted_maturity_4) / total_face_value\n    \n    # return answer\n    return weighted_average_maturity\n```\nThis program calculates the weighted average maturity by first calculating the weighted maturity for each mortgage pool, then summing these up and dividing by the total face value of the MBS."
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    sugar_quantity_nov = 70\n    sugar_price_nov = 0.90\n    cotton_quantity_nov = 60\n    cotton_price_nov = 0.60\n    \n    sugar_quantity_dec = 120\n    sugar_price_dec = 1.00\n    cotton_quantity_dec = 50\n    cotton_price_dec = 0.80\n    \n    # Calculate the value of the basket for November\n    value_nov = sugar_quantity_nov * sugar_price_nov + cotton_quantity_nov * cotton_price_nov\n    \n    # Calculate the value of the basket for December\n    value_dec = sugar_quantity_dec * sugar_price_dec + cotton_quantity_dec * cotton_price_dec\n    \n    # Calculate the Paasche index\n    paasche_index = value_dec / value_nov\n    \n    # return answer\n    return paasche_index\n```\nThis program calculates the value of the consumption basket for November and December, and then calculates the Paasche index as the ratio of the December value to the November value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "Here is the solution:\n```python\ndef solution():\n    # Define variables name and value\n    returns = [0.09, 0.05, 0.08]\n    capital_gains_tax_rate = 0.25\n    embedded_gain = 0.10\n    \n    # Calculate the post-liquidation return for each year\n    post_liquidation_returns = [(1 + r) * (1 - embedded_gain * capital_gains_tax_rate) - 1 for r in returns]\n    \n    # Calculate the geometric average of the post-liquidation returns\n    import math\n    geometric_average = math.prod([1 + r for r in post_liquidation_returns]) ** (1 / len(post_liquidation_returns)) - 1\n    \n    # Calculate the annualized post-liquidation return\n    annualized_post_liquidation_return = (1 + geometric_average) ** (1 / len(returns)) - 1\n    \n    # return answer\n    return annualized_post_liquidation_return\n```\nThis program calculates the annualized after-tax post-liquidation return by first calculating the post-liquidation return for each year, then calculating the geometric average of these returns, and finally calculating the annualized return."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    spot_price = 50\n    risk_free_rate = 0.04\n    time_to_maturity = 3 / 12  # Convert 3 months to years\n    advantage_value = 5\n    disadvantage_value = 6\n    \n    # Do math calculation to get the answer\n    forward_price = (spot_price + disadvantage_value - advantage_value) * math.exp(risk_free_rate * time_to_maturity)\n    \n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    yuan_per_hkd = 1 / 1.1757\n    aud_per_cny = 5.0765\n    \n    # Do math calculation to get the answer\n    aud_per_hkd = aud_per_cny * yuan_per_hkd\n    \n    # return answer\n    return aud_per_hkd\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "Here's the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    ytm = 0.055\n    annual_payment = 100000\n    years = 40\n\n    # Do math calculation to get the answer\n    cost_of_annuity = annual_payment * ((1 - (1 + ytm)**(-years)) / ytm)\n    \n    # return answer\n    return cost_of_annuity\n```\n\nThis program calculates the present value of an annuity using the formula `cost_of_annuity = annual_payment * ((1 - (1 + ytm)**(-years)) / ytm)`, which represents the present value of an annuity with a yield to maturity (YTM) of 5.5%, an annual payment of $100,000, and a duration of 40 years. The `**` operator is used for exponentiation, and the `-` operator is used for subtraction."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    w1 = 0.4\n    w2 = 0.6\n    std_dev1 = 0.30\n    std_dev2 = 0.15\n    corr = 0.25\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = math.sqrt((w1**2) * (std_dev1**2) + (w2**2) * (std_dev2**2) + 2 * w1 * w2 * std_dev1 * std_dev2 * corr)\n    \n    # return answer\n    return portfolio_std_dev\n```\n\nThis program calculates the anticipated standard deviation for the portfolio using the formula for the standard deviation of a two-asset portfolio, which is:\n\n√(w1^2 * σ1^2 + w2^2 * σ2^2 + 2 * w1 * w2 * σ1 * σ2 * corr)\n\nwhere w1 and w2 are the weights of the two securities, σ1 and σ2 are their standard deviations, and corr is the correlation between the two securities."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    selling_price = 1000\n    cost_of_creation = 300\n    \n    # Do math calculation to get the answer\n    value_added = selling_price - cost_of_creation\n    answer = value_added\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "Here is the complete Python program:\n```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 0.1431\n    compounding_frequency = 4\n    \n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + yearly_rate/compounding_frequency) ** compounding_frequency - 1\n    \n    # return answer\n    return effective_annual_rate\n```"
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    real_earnings_growth = 0.05\n    expected_inflation = 0.023\n    dividend_income_return = 0.024\n    government_bond_yield = 0.023\n    equity_market_PE = 14.5\n    \n    # Do math calculation to get the answer\n    numerator = real_earnings_growth + expected_inflation\n    denominator = equity_market_PE\n    expected_real_return_from_equity = numerator / denominator\n    expected_nominal_return_from_equity = expected_real_return_from_equity + expected_inflation\n    expected_excess_return = expected_nominal_return_from_equity - government_bond_yield\n    anticipated_annual_equity_return = dividend_income_return + expected_excess_return\n    \n    # return answer\n    return anticipated_annual_equity_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    # Do math calculation to get the answer\n    covariance = correlation * (variance_X ** 0.5) * (variance_Y ** 0.5)\n    \n    # return answer\n    return covariance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09\n    \n    # Do math calculation to get the answer\n    bond_equivalent_yield = (1 + effective_annual_return) ** (1/2) - 1\n    \n    # return answer\n    return bond_equivalent_yield * 2\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 50000\n    residual_value = 5000\n    useful_life = 10\n    \n    # Do math calculation to get the answer\n    depreciable_amount = cost - residual_value\n    depreciation_rate = 1 / useful_life * 2\n    depreciation = depreciable_amount * depreciation_rate\n    \n    # return answer\n    return depreciation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    gbp_per_eur = 0.8878\n    \n    # Do math calculation to get the answer\n    eur_per_gbp = 1 / gbp_per_eur\n    \n    # return answer\n    return eur_per_gbp\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04\n    bond_yield = 0.06\n    recovery_rate = 0.7\n    \n    # Do math calculation to get the answer\n    spread = bond_yield - risk_free_rate\n    probability_of_default = spread / (1 - recovery_rate)\n    \n    # return answer\n    return probability_of_default\n```\nThis program calculates the inferred probability of default based on the given inputs. The formula used is:\n\nProbability of Default = (Bond Yield - Risk-Free Rate) / (1 - Recovery Rate)\n\nThis is based on the concept of credit spread, which is the difference between the bond yield and the risk-free rate. The credit spread is then adjusted by the recovery rate to estimate the probability of default."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "Here is the Python program to solve the problem:\n```python\ndef solution():\n    # Define variables name and value\n    principal = 1300000000\n    pre_tax_profit = 0.07\n    direct_annual_operation_cost = 6000000\n    deposits = 1300000000\n    interest_rate = 0.05\n    expected_loss = 0.003\n    unexpected_loss = 0.08\n    risk_free_rate = 0.015\n    effective_tax_rate = 0.25\n    \n    # Calculate net operating income\n    net_operating_income = (principal * pre_tax_profit) - direct_annual_operation_cost\n    \n    # Calculate expected loss\n    expected_loss_amount = principal * expected_loss\n    \n    # Calculate unexpected loss\n    unexpected_loss_amount = principal * unexpected_loss\n    \n    # Calculate economic capital\n    economic_capital = expected_loss_amount + (1.645 * unexpected_loss_amount)\n    \n    # Calculate RAROC\n    raroc = (net_operating_income - (deposits * interest_rate) + (risk_free_rate * economic_capital)) / economic_capital\n    \n    # Calculate after-tax RAROC\n    after_tax_raroc = raroc * (1 - effective_tax_rate)\n    \n    # return answer\n    return after_tax_raroc\n```\nThis program calculates the RAROC (Risk-Adjusted Return on Capital) based on the given details. It first calculates the net operating income, expected loss, and unexpected loss, then uses these values to calculate the economic capital. Finally, it calculates the RAROC and returns the after-tax RAROC."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    car_only = 0.7 - 0.2  # percentage of clients with only car insurance plan\n    house_only = 0.5 - 0.2  # percentage of clients with only house insurance plan\n    both = 0.2  # percentage of clients with both car and house insurance plans\n    \n    # percentage of clients who will renew at least one plan\n    car_renewal = car_only * 0.4\n    house_renewal = house_only * 0.7\n    both_renewal = both * 0.8\n    \n    # calculate the total percentage of clients who will renew at least one plan\n    total_renewal = car_renewal + house_renewal + both_renewal\n    \n    # return answer\n    return total_renewal * 100  # convert to percentage\n```\n\nThis program first calculates the percentage of clients with only car insurance, only house insurance, and both plans. Then, it calculates the percentage of clients who will renew at least one plan in each category. Finally, it adds up these percentages to get the total percentage of clients who will renew at least one plan."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "Here is the Python program to calculate the present value of a 3-year bond:\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.10\n    spot_rate_year1 = 0.06\n    forward_rate_year2 = 0.08\n    forward_rate_year3 = 0.10\n    \n    # Calculate discounts factors\n    discount_factor_year1 = 1 / (1 + spot_rate_year1)\n    discount_factor_year2 = 1 / ((1 + spot_rate_year1) * (1 + forward_rate_year2))\n    discount_factor_year3 = 1 / ((1 + spot_rate_year1) * (1 + forward_rate_year2) * (1 + forward_rate_year3))\n    \n    # Calculate present value of bond\n    pv_coupon_year1 = face_value * coupon_rate * discount_factor_year1\n    pv_coupon_year2 = face_value * coupon_rate * discount_factor_year2\n    pv_coupon_year3 = face_value * coupon_rate * discount_factor_year3\n    pv_face_value = face_value * discount_factor_year3\n    \n    # Calculate total present value\n    present_value = pv_coupon_year1 + pv_coupon_year2 + pv_coupon_year3 + pv_face_value\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    labor_growth = 0.009\n    labor_productivity_growth = 0.015\n    inflation = 0.021\n    dividend_yield = 0.0225\n    \n    # Do math calculation to get the answer\n    nominal_growth = labor_growth + labor_productivity_growth\n    real_growth = nominal_growth - inflation\n    equity_return = real_growth + dividend_yield\n    \n    # return answer\n    return equity_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "Here is the Python program:\n```\ndef solution():\n    # Define variables name and value\n    initial_equity_allocation = 0.8\n    target_equity_allocation = 0.6\n    total_fund_value = 100000000\n    stock_index_value = 1200\n    multiplier = 250\n    beta_of_equity = 1.2\n    beta_of_index_futures = 0.95\n    \n    # Calculate the current equity value\n    current_equity_value = initial_equity_allocation * total_fund_value\n    \n    # Calculate the target equity value\n    target_equity_value = target_equity_allocation * total_fund_value\n    \n    # Calculate the equity value to be changed\n    equity_value_to_be_changed = target_equity_value - current_equity_value\n    \n    # Calculate the number of futures contracts needed\n    number_of_futures = equity_value_to_be_changed / (beta_of_equity / beta_of_index_futures * multiplier)\n    \n    # return answer\n    return number_of_futures\n```"
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    security_2_return = 0.114\n    beta_2 = 1.40\n    \n    # Do math calculation to get the answer\n    market_return = (security_2_return - risk_free_rate) / beta_2 + risk_free_rate\n    \n    # return answer\n    return market_return\n```\nThis program uses the Capital Asset Pricing Model (CAPM) formula to calculate the projected return for the market, which is:\n\n    Rm = (Ri - Rf) / βi + Rf\n    \nwhere Rm is the market return, Ri is the return of Security 2 (11.4%), Rf is the risk-free rate (3%), and βi is the beta of Security 2 (1.40)."
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training = 1000\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training\n    answer = total_cost\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    total_pledged_capital = 100000000\n    total_paid_in_capital = 90000000\n    total_distributions = 30000000\n    nav_before_distribution = 160000000\n    nav_after_distribution = 130000000\n    projected_NAV = 250000000\n    carried_interest_rate = 0.20\n    \n    # Calculate profit for the year\n    profit = projected_NAV - nav_after_distribution\n    \n    # Calculate carried interest\n    carried_interest = profit * carried_interest_rate\n    \n    # return answer\n    return carried_interest\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    principal = 75000\n    rate = 0.07\n    time_in_years = 6\n    number_of_times_interest_compounded_per_year = 4\n    \n    # Do math calculation to get the answer\n    amount = principal * (1 + rate / number_of_times_interest_compounded_per_year) ** (number_of_times_interest_compounded_per_year * time_in_years)\n    \n    # return answer\n    return amount\n```\nThis program calculates the future value of the investment using the formula for compound interest, where the interest is compounded quarterly. The formula is `A = P(1 + r/n)^(nt)`, where A is the future value, P is the principal, r is the annual interest rate, n is the number of times the interest is compounded per year, and t is the time in years."
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    accumulated_depreciation_accounting_purposes = 1200\n    accumulated_depreciation_tax_purposes = 3000\n    revaluation_balance = 10000\n    original_cost = 8000\n    tax_rate = 0.30\n    \n    # Calculate depreciation expense for accounting and tax purposes\n    depreciation_expense_accounting_purposes = (original_cost - accumulated_depreciation_accounting_purposes) / 20\n    depreciation_expense_tax_purposes = (original_cost - accumulated_depreciation_tax_purposes) / 8\n    \n    # Calculate temporary difference\n    temporary_difference = revaluation_balance - original_cost\n    \n    # Calculate deferred tax liability\n    deferred_tax_liability = temporary_difference * tax_rate\n    \n    # return answer\n    return deferred_tax_liability\n```\n\nThis program defines the necessary variables based on the provided table, calculates the depreciation expense for accounting and tax purposes, and then calculates the temporary difference and deferred tax liability. The deferred tax liability is then returned as the answer."
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "Here is the Python program to calculate the standard deviation of sales:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    probability1 = 0.05\n    sales1 = 70\n    \n    probability2 = 0.70\n    sales2 = 40\n    \n    probability3 = 0.25\n    sales3 = 25\n\n    # Calculate the expected value (mean)\n    mean = probability1 * sales1 + probability2 * sales2 + probability3 * sales3\n    \n    # Calculate the squared differences from the mean\n    variance1 = probability1 * ((sales1 - mean) ** 2)\n    variance2 = probability2 * ((sales2 - mean) ** 2)\n    variance3 = probability3 * ((sales3 - mean) ** 2)\n    \n    # Calculate the variance\n    variance = variance1 + variance2 + variance3\n    \n    # Calculate the standard deviation\n    std_dev = math.sqrt(variance)\n    \n    # return answer\n    return std_dev\n```\nThis program first calculates the expected value (mean) of the sales distribution, then calculates the squared differences from the mean for each possible outcome, weights them by their probabilities, and sums them up to get the variance. Finally, it takes the square root of the variance to get the standard deviation."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "Here is the Python program to calculate the overall recurring pension cost:\n```python\ndef solution():\n    # Define variables name and value\n    company_contributions = 1200\n    pbo_start = 45000\n    pbo_end = 43500\n    plan_assets_start = 40800\n    plan_assets_end = 39650\n    \n    # Do math calculation to get the answer\n    interest_cost = (pbo_start - plan_assets_start) * 0.06\n    amortization_of_prior_service_cost = (pbo_start - plan_assets_start) * 0.10\n    return_on_plan_assets = plan_assets_start * 0.08\n    net_interest_cost = interest_cost - return_on_plan_assets\n    recurring_pension_cost = company_contributions + amortization_of_prior_service_cost + net_interest_cost\n    \n    # return answer\n    return recurring_pension_cost\n```\nThis program calculates the overall recurring pension cost by considering the company's contributions, the change in the projected benefit obligation (PBO), the return on plan assets, and the amortization of prior service cost."
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "Here is the Python program to calculate the holding period return:\n\n```\ndef solution():\n    # Define variables name and value\n    initial_investment = 500\n    year1_return = 0.12\n    year2_investment = 600\n    year2_return = 0.05\n    year3_investment = 1000\n    year3_return = 0.01\n    \n    # Calculate the ending value for each year\n    year1_end_value = initial_investment * (1 + year1_return)\n    year2_end_value = year1_end_value + year2_investment * (1 + year2_return)\n    year3_end_value = year2_end_value + year3_investment * (1 + year3_return)\n    \n    # Calculate the total investment\n    total_investment = initial_investment + year2_investment + year3_investment\n    \n    # Calculate the holding period return\n    holding_period_return = (year3_end_value / total_investment) ** (1/3) - 1\n    \n    # return answer\n    return holding_period_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    common_shares = 60000\n    outstanding_warrants = 5000\n    exercise_price = 25\n    ending_stock_price = 30\n    average_stock_price = 20\n    \n    # Do math calculation to get the answer\n    shares_from_warrants = outstanding_warrants * (ending_stock_price - exercise_price) / average_stock_price\n    total_shares = common_shares + shares_from_warrants\n    \n    # return answer\n    return total_shares\n```\nThis program calculates the number of shares that should be applied when figuring out the business' diluted EPS. The diluted EPS takes into account the potential conversion of outstanding warrants into shares, which can increase the total number of shares outstanding. The program first calculates the number of shares that can be obtained from exercising the warrants, then adds it to the number of common shares to get the total number of shares."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    eps = 2\n    current_share_price = 40\n    \n    # Do math calculation to get the answer\n    p_e_ratio = current_share_price / eps\n    \n    # return answer\n    return p_e_ratio\n```"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    three_year_return = 0.062  # converted to decimal\n    max_drawdown = 0.102  # converted to decimal\n    \n    # Do math calculation to get the answer\n    calmar_ratio = three_year_return / max_drawdown\n    \n    # return answer\n    return calmar_ratio\n```"
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    trade1_price = 41.50\n    trade1_bid = 41.45\n    trade1_offer = 41.50\n    \n    trade2_price = 41.75\n    trade2_bid = 41.73\n    trade2_offer = 41.75\n    \n    # Calculate the effective spread for each trade\n    trade1_spread = trade1_offer - trade1_bid\n    trade2_spread = trade2_offer - trade2_bid\n    \n    # Calculate the average effective spread\n    avg_spread = (trade1_spread + trade2_spread) / 2\n    \n    # return answer\n    return avg_spread\n```\nThis program calculates the effective spread for each trade by subtracting the prevailing bid from the prevailing offer, and then calculates the average effective spread by taking the average of the two spreads."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    quarterly_payout = 2.0\n    quarterly_rate = 0.06 / 4  # 6% annual rate, compounded quarterly\n    time_to_first_payout = 5 / 4  # 5 quarters from now\n    \n    # Do math calculation to get the answer\n    present_value_of_first_payout = quarterly_payout / (1 + quarterly_rate) ** (4 * time_to_first_payout)\n    current_value_of_share = present_value_of_first_payout / (1 - 1 / (1 + quarterly_rate) ** 4)\n    \n    # return answer\n    return current_value_of_share\n```\nThis program calculates the present value of the first payout using the formula for present value of a future cash flow, and then calculates the current value of the share by dividing the present value of the first payout by the factor `(1 - 1 / (1 + quarterly_rate) ** 4)`, which accounts for the infinite series of future payouts."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 3\n    years_passed = 2\n    \n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization = annual_amortization * years_passed\n    \n    # return answer\n    return accumulated_amortization\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    dividend = 2.0\n    growth_rate = 0.04\n    required_return_rate = 0.07\n    \n    # Do math calculation to get the answer\n    answer = dividend / (required_return_rate - growth_rate)\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    ajiwoSales = 500\n    bdfhyjSales = 350\n    cegfdSales = 270\n    ddghSales = 200\n    totalSales = ajiwoSales + bdfhyjSales + cegfdSales + ddghSales + 40\n    \n    # Calculate market share of each company\n    ajiwoShare = ajiwoSales / totalSales\n    bdfhyjShare = bdfhyjSales / totalSales\n    cegfdShare = cegfdSales / totalSales\n    ddghShare = ddghSales / totalSales\n    \n    # Calculate concentration ratio of the four firms\n    concentrationRatio = ajiwoShare + bdfhyjShare + cegfdShare + ddghShare\n    \n    # return answer\n    return concentrationRatio\n```"
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.571,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "Here is the Python program to calculate the gross profit margin for 2018:\n\n```python\ndef solution():\n    # Define variables name and value\n    sales_euro = 3500\n    cost_of_sales_euro = 1500\n    exchange_rate = 1.68\n    \n    # Convert sales and cost of sales from euros to dollars\n    sales_dollars = sales_euro * exchange_rate\n    cost_of_sales_dollars = cost_of_sales_euro * exchange_rate\n    \n    # Calculate gross profit\n    gross_profit = sales_dollars - cost_of_sales_dollars\n    \n    # Calculate gross profit margin\n    gross_profit_margin = (gross_profit / sales_dollars) * 100\n    \n    # return answer\n    return gross_profit_margin\n```"
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "Here is the solution:\n```python\ndef solution():\n    # Define variables name and value\n    purchase_of_securities = -240  # Negative because it's an outflow\n    proceeds_from_sale_of_securities = 300\n    purchase_of_affiliated_company = -275  # Negative because it's an outflow\n    \n    # Do math calculation to get the answer\n    net_cash_flow_from_investing_activities = purchase_of_securities + proceeds_from_sale_of_securities + purchase_of_affiliated_company\n    \n    # return answer\n    return net_cash_flow_from_investing_activities\n```"
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    prob_rise = 0.38\n    prob_same = 0.46\n    prob_fall = 0.16\n    \n    prob_rise Độ45 = 0.55\n    prob_same_45 = 0.55\n    prob_fall_45 = 0.38\n    \n    # Do math calculation to get the answer\n    answer = (prob_rise * prob_rise_45) + (prob_same * prob_same_45) + (prob_fall * prob_fall_45)\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "Here is the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    invoice_price = 11000000\n    repo_rate = 0.20\n    days = 20\n    year_days = 360\n    \n    # Do math calculation to get the answer\n    repo_interest = (invoice_price * repo_rate * days) / year_days\n    repurchase_cost = invoice_price + repo_interest\n    \n    # return answer\n    return repurchase_cost\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 110\n    retained_earnings_2017 = 125\n    accounts_receivable_2016 = 45\n    accounts_receivable_2017 = 48\n    inventory_2016 = 24\n    inventory_2017 = 20\n    accounts_payable_2016 = 30\n    accounts_payable_2017 = 33\n    dividend_payment = 8\n    impairment_expense = 12\n    \n    # Calculate net income\n    net_income = retained_earnings_2017 - retained_earnings_2016 - dividend_payment\n    \n    # Calculate changes in working capital accounts\n    change_in_accounts_receivable = accounts_receivable_2017 - accounts_receivable_2016\n    change_in_inventory = inventory_2017 - inventory_2016\n    change_in_accounts_payable = accounts_payable_2017 - accounts_payable_2016\n    \n    # Calculate operating cash flow\n    operating_cash_flow = net_income - impairment_expense + change_in_accounts_receivable - change_in_inventory + change_in_accounts_payable\n    \n    # return answer\n    return operating_cash_flow\n```\nThis program first calculates the net income, then calculates the changes in working capital accounts, and finally calculates the operating cash flow."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    n = 5           # number of vehicles\n    p = 0.05        # probability of a vehicle being defective\n    \n    # Do math calculation to get the answer\n    probability = 1 - (math.pow((1 - p), n))\n    \n    # return answer\n    return probability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "Here's the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 100  # face value of the bond\n    coupon_rate = 0.03  # annual coupon rate\n    years_to_maturity = 9  # years until maturity\n    yield_to_maturity = 0.05  # annual yield to maturity\n    bond_price = 85.784357  # current market price of the bond\n    \n    # Calculate the duration and modified duration\n    import numpy_financial as npf\n    durations = npf.duration(yield_to_maturity, coupon_rate, years_to_maturity, bond_price, face_value, freq=1, basis=0)\n    modified_duration = durations / (1 + yield_to_maturity)\n    \n    # Calculate the projected price value of a basis point\n    bpv = modified_duration * bond_price / 10000\n    \n    # return answer\n    return bpv\n```\n\nThis program uses the `numpy-financial` library to calculate the Macaulay duration and modified duration of the bond, and then uses these values to calculate the projected price value of a basis point (BPV). The BPV is the change in the bond's price in response to a 1-basis-point change in the yield to maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    sample_size = 1600\n    sample_std_dev = 100\n    \n    # Do math calculation to get the answer\n    std_error = sample_std_dev / (sample_size ** 0.5)\n    \n    # return answer\n    return std_error\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    stocks = 500000\n    fixed_income = 330000\n    house_value = 350000\n    mortgage = 175000\n    earnings_pv = 980000\n    consumption_pv = 870000\n    tuition_pv = 150000\n    foundation_pv = 600000\n    \n    # Do math calculation to get the answer\n    assets = stocks + fixed_income + house_value + earnings_pv - consumption_pv\n    liabilities = mortgage\n    net_worth = assets - liabilities\n    \n    # return answer\n    return net_worth\n```\nThe program defines the given values, calculates the total assets and liabilities, and then subtracts the liabilities from the assets to get the economic net worth of the Smith family."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 10000\n    cost = 8000\n    \n    # Do math calculation to get the answer\n    profit = price - cost\n    answer = profit\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    debt_portion = 0.6\n    tax_rate = 0.35\n    equity_beta = 1.4\n    \n    # Do math calculation to get the answer\n    asset_beta = equity_beta / (1 - debt_portion * (1 - tax_rate))\n    \n    # return answer\n    return asset_beta\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    total_fund_value = 100000000\n    current_shares_percentage = 0.8\n    current_bonds_percentage = 0.2\n    target_shares_percentage = 0.6\n    target_bonds_percentage = 0.4\n    share_beta = 1.2\n    bond_term = 5.0\n    stock_index_value = 1200\n    stock_index_multiplier = 250\n    stock_index_beta = 0.95\n    bond_futures_cost = 105300\n    bond_futures_duration = 6.5\n    \n    # Calculate the current value of shares and bonds\n    current_shares_value = total_fund_value * current_shares_percentage\n    current_bonds_value = total_fund_value * current_bonds_percentage\n    \n    # Calculate the target value of shares and bonds\n    target_shares_value = total_fund_value * target_shares_percentage\n    target_bonds_value = total_fund_value * target_bonds_percentage\n    \n    # Calculate the change in shares value\n    change_in_shares_value = target_shares_value - current_shares_value\n    \n    # Calculate the number of stock index futures to be purchased\n    number_of_futures = change_in_shares_value / (stock_index_value * stock_index_multiplier)\n    \n    # return answer\n    return number_of_futures\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    bond_yield = 8 / 100  # 8% annual coupons\n    bond_price = 1105.94  # presently valued at $1,105.94\n    face_value = 1000  # $1,000 non-callable bond\n    \n    # Calculate the bond's yield to maturity\n    coupon_payment = face_value * bond_yield\n    bond_yield_to_maturity = ((coupon_payment / bond_price) + ((face_value - bond_price) / (20 * bond_price))) * 100\n    \n    # Calculate the cost of equity\n    marginal_tax_rate = 30 / 100  # 30% marginal tax rate\n    risk_premium = 5 / 100  # 5% risk premium\n    cost_of_debt = (1 - marginal_tax_rate) * bond_yield_to_maturity / 100  # after-tax cost of debt\n    cost_of_equity = cost_of_debt + risk_premium\n    \n    # return answer\n    return cost_of_equity\n```"
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    march_prices = [15, 20, 30]\n    april_prices = [20, 30, 25]\n    starting_index = 121\n    \n    # Do math calculation to get the answer\n    march_avg_price = sum(march_prices) / len(march_prices)\n    april_avg_price = sum(april_prices) / len(april_prices)\n    index_value = starting_index * (april_avg_price / march_avg_price)\n    \n    # return answer\n    return index_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    dividend = 0.22\n    growth_rate_1 = 0.12\n    growth_rate_2 = 0.06\n    required_return = 0.09\n    years_high_growth = 4\n    \n    # Calculate dividend in the 5th year (end of high growth period)\n    dividend_year_5 = dividend * (1 + growth_rate_1) ** years_high_growth\n    \n    # Calculate terminal value\n    terminal_value = dividend_year_5 * (1 + growth_rate_2) / (required_return - growth_rate_2)\n    \n    # return answer\n    return terminal_value\n```\nThis program calculates the terminal value of the stock according to the two-stage DDM using the given parameters."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    initial_price = 98.722\n    decrease_Price = 98.669\n    increase_Price = 98.782\n    yield_change = 0.001\n\n    # Do math calculation to get the answer\n    duration = (increase_Price - decrease_Price) / (2 * yield_change * initial_price)\n    convexity = ((increase_Price + decrease_Price) - 2*initial_price) / (yield_change**2 * initial_price)\n    \n    # return answer\n    return convexity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n    \n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    # return answer\n    return price_to_sales_ratio\n```"
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "<|start_header_id|>Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 9000\n    accounts_payable = 600\n    \n    # Do math calculation to get the answer\n    avg_daily_cost_of_goods_sold = cost_of_goods_sold / 365\n    days_of_payables = accounts_payable / avg_daily_cost_of_goods_sold\n    \n    # return answer\n    return days_of_payables\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    value_A = 5000000\n    mVaR_A = 0.0452\n    value_B = 3000000\n    mVaR_B = 0.0332\n    \n    # Do math calculation to get the answer\n    VaR_A = value_A * mVaR_A\n    VaR_B = value_B * mVaR_B\n    total_VaR = VaR_A + VaR_B\n    contribution_A = (VaR_A / total_VaR) * 100\n    \n    # return answer\n    return contribution_A\n```\nThis program defines the variables for the values and marginal VaRs of Assets A and B, calculates the VaR for each asset, calculates the total VaR, and then calculates the percentage contribution of Asset A to the total VaR. The function returns this percentage contribution as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\nimport math\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    num_in_the_money_calls = 5000\n    num_out_of_the_money_calls = 20000\n    num_futures = 10000\n    S = 52  # current stock price\n    sigma = 0.12  # volatility\n    days_per_year = 252  # number of trading days per year\n    \n    # Calculate delta of in-the-money and out-of-the-money calls\n    d1_in_money = (math.log(S / S) + 0.5 * sigma**2) / sigma\n    d1_out_money = (math.log(S / S) + 0.5 * sigma**2) / sigma\n    delta_in_money = norm.cdf(d1_in_money)\n    delta_out_money = norm.cdf(d1_out_money)\n    \n    # Calculate the equivalent number of shares for each position\n    shares_calls_in_money = num_in_the_money_calls * delta_in_money\n    shares_calls_out_money = num_out_of_the_money_calls * delta_out_money\n    shares_futures = num_futures\n    \n    # Calculate the total number of shares\n    total_shares = shares_calls_in_money + shares_calls_out_money + shares_futures\n    \n    # Calculate the 1-day 99% VaR\n    var_99 = -total_shares * S * norm.ppf(0.01) * sigma * math.sqrt(1/days_per_year)\n    \n    # return answer\n    return var_99\n```\n\nThis program calculates the delta of the in-the-money and out-of-the-money call options using the Black-Scholes model, and then calculates the equivalent number of shares for each position. It then calculates the total number of shares and finally calculates the 1-day 99% Value-at-Risk (VaR) using the volatility of the stock."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    periodic_contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = 2500000\n    \n    # Do math calculation to get the answer\n    pension_expense = service_costs - actuarial_gain + periodic_contributions\n    \n    # return answer\n    return pension_expense\n```"
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "Here's the Python program to answer the given question:\n\n```\ndef solution():\n    # Define variables name and value\n    long_term_real_rate = 2.3\n    inflation_premium = 0.8\n    illiquidity_premium = 0.9\n    equity_risk_premium = 8.4\n    ten_year_AA_corporate_bond_yield = 4.4\n    \n    # Do math calculation to get the answer\n    predicted_return = ten_year_AA_corporate_bond_yield + (long_term_real_rate + inflation_premium) + illiquidity_premium + equity_risk_premium\n    \n    # return answer\n    return predicted_return\n```"
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100000000\n    total_liabilities = 1200000000\n    preferred_equity = 120000000\n    common_shares_outstanding = 32000000\n    \n    ROE_2013 = 0.12\n    ROE_2014 = 0.131\n    ROE_2015 = 0.1055\n    ROE_2016 = 0.112\n    ROE_2017 = 0.1205\n    \n    # Calculate average ROE\n    avg_ROE = (ROE_2013 + ROE_2014 + ROE_2015 + ROE_2016 + ROE_2017) / 5\n    \n    # Calculate shareholders' equity\n    shareholders_equity = total_assets - total_liabilities\n    \n    # Calculate net income\n    net_income = avg_ROE * shareholders_equity\n    \n    # Calculate preferred dividends\n    preferred_dividends = preferred_equity * 0.05\n    \n    # Calculate earnings available to common shareholders\n    earnings_available_to_common_shareholders = net_income - preferred_dividends\n    \n    # Calculate normalized EPS\n    normalized_EPS = earnings_available_to_common_shareholders / common_shares_outstanding\n    \n    # return answer\n    return normalized_EPS\n```\nThis program calculates the normalized EPS by first calculating the average ROE, then the shareholders' equity, net income, preferred dividends, and finally the earnings available to common shareholders. The normalized EPS is then calculated by dividing the earnings available to common shareholders by the number of common shares outstanding."
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    trade1_size = 1200\n    trade1_bid_price = 25.17\n    trade1_ask_price = 25.20\n    trade1_spread = (trade1_ask_price - trade1_bid_price) / trade1_ask_price\n    \n    trade2_size = 1300\n    trade2_bid_price = 25.19\n    trade2_ask_price = 25.22\n    trade2_spread = (trade2_ask_price - trade2_bid_price) / trade2_ask_price\n    \n    trade3_size = 2500\n    trade3_bid_price = 25.22\n    trade3_ask_price = 25.26\n    trade3_spread = (trade3_ask_price - trade3_bid_price) / trade3_ask_price\n    \n    # Calculate average effective spread\n    total_size = trade1_size + trade2_size + trade3_size\n    weighted_spread1 = trade1_size / total_size * trade1_spread\n    weighted_spread2 = trade2_size / total_size * trade2_spread\n    weighted_spread3 = trade3_size / total_size * trade3_spread\n    average_effective_spread = weighted_spread1 + weighted_spread2 + weighted_spread3\n    \n    # return answer\n    return average_effective_spread\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fixed_rate = 0.01\n    treasury_yield = 0.0063\n\n    # Do math calculation to get the answer\n    swap_spread = fixed_rate - treasury_yield\n\n    # return answer\n    return swap_spread\n```"
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.03\n    beta = 1.1\n    market_risk_premium = 0.05\n    dividend_year1 = 1.13\n    dividend_year2 = 1.22\n    growth_rate = 0.05\n\n    # Calculate required rate of return\n    required_rate_of_return = risk_free_rate + beta * market_risk_premium\n\n    # Calculate PV of dividend year 1\n    pv_dividend_year1 = dividend_year1 / (1 + required_rate_of_return)\n\n    # Calculate PV of dividend year 2\n    pv_dividend_year2 = dividend_year2 / (1 + required_rate_of_return) ** 2\n\n    # Calculate terminal value\n    terminal_value = dividend_year2 * (1 + growth_rate) / (required_rate_of_return - growth_rate)\n    pv_terminal_value = terminal_value / (1 + required_rate_of_return) ** 2\n\n    # Calculate present value\n    present_value = pv_dividend_year1 + pv_dividend_year2 + pv_terminal_value\n\n    # return answer\n    return present_value\n```\nThis program calculates the present value of the J REIT per share using the two-step dividend discount model. The present value is calculated by discounting the expected dividends in year 1 and year 2, and the terminal value in year 3 and beyond, using the required rate of return. The result is the inherent worth of the J REIT per share."
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    target_p_value = 0.65\n    actual_sentiments = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    p_values = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54]\n    \n    # Calculate the predicted sentiments based on the threshold p-value\n    predicted_sentiments = [1 if p >= target_p_value else 0 for p in p_values]\n    \n    # Calculate the accuracy\n    correct_predictions = sum([1 if actual == predicted else 0 for actual, predicted in zip(actual_sentiments, predicted_sentiments)])\n    accuracy = correct_predictions / len(actual_sentiments)\n    \n    # return answer\n    return accuracy\n```\nThis program calculates the accuracy of the model by comparing the actual sentiments with the predicted sentiments based on the threshold p-value. The `accuracy` variable returns the proportion of correct predictions out of the total sample size."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    price = 10\n    duration1 = 1\n    duration2 = 9\n    yield_rate = 0.05\n    daily_yield_volatility = 0.01\n    confidence_level = 0.95\n    \n    # Calculate the portfolio value\n    portfolio_value = 2 * price\n    \n    # Calculate the modified duration of the portfolio\n    portfolio_duration = (duration1 + duration2) / 2\n    \n    # Calculate the daily value at risk (VAR) for the collection of investments\n    var = portfolio_value * portfolio_duration * yield_rate * daily_yield_volatility * math.sqrt(1 - confidence_level)\n    \n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    initial_investment = -100\n    cash_flow_year1 = 40\n    cash_flow_year2 = 80\n    cash_flow_year3 = 120\n    discount_rate = 0.2\n    \n    # Do math calculation to get the answer\n    npv = initial_investment + cash_flow_year1 / (1 + discount_rate) + cash_flow_year2 / (1 + discount_rate)**2 + cash_flow_year3 / (1 + discount_rate)**3\n    \n    # return answer\n    return npv\n```"
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    face_value = 50 * 1000000  # £50 million\n    coupon_rate = 0.04  # 4% as a decimal\n    issue_price = 92.28  # per £100\n    market_interest_rate = 0.05  # 5% as a decimal\n    total_bonds_issued = face_value / 100  # since issue price is per £100\n    \n    # Calculate interest paid in 2014\n    interest_paid = face_value * coupon_rate\n    \n    # Calculate amortization of discount (since bond is issued at a discount)\n    discount = face_value - (issue_price / 100) * total_bonds_issued\n    amortization_of_discount = discount / 10  # amortized over 10 years\n    \n    # Calculate interest cost for 2014 under IFRS\n    interest_cost = interest_paid + amortization_of_discount\n    \n    # return answer\n    return interest_cost\n```\nThe program defines the necessary variables, calculates the interest paid in 2014, amortization of discount, and then calculates the interest cost for 2014 under IFRS. The answer is returned as the interest cost in millions."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    human_capital = 1200000\n    human_capital_equity = human_capital * 0.3\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n    total_wealth = human_capital + financial_capital\n    \n    # Do math calculation to get the answer\n    total_equity = target_equity_allocation * total_wealth\n    financial_capital_equity = total_equity - human_capital_equity\n    \n    # Calculate the financial capital equity allocation\n    financial_capital_equity_allocation = financial_capital_equity / financial_capital\n    \n    # return answer\n    return financial_capital_equity_allocation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "Here is the Python program to calculate the intrinsic value of Firm B's stock:\n```\ndef solution():\n    # Define variables name and value\n    dividend_year_5 = 2.5\n    growth_rate = 0.05\n    required_return = 0.12\n    \n    # Do math calculation to get the answer\n    dividend_year_6 = dividend_year_5 * (1 + growth_rate)\n    intrinsic_value = dividend_year_6 / (required_return - growth_rate)\n    \n    # return answer\n    return intrinsic_value\n```\nThis program calculates the intrinsic value of Firm B's stock using the dividend capitalization model, which takes into account the predicted dividend in the fifth year, the growth rate, and the required return."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "Here is the Python program to answer the given question:\n```\ndef solution():\n    # Define variables name and value\n    face_value = 5000000\n    market_interest_rate = 0.03\n    bond_yield = 0.025\n    years = 3\n    \n    # Calculate present value factor\n    present_value_factor = 1 / ((1 + market_interest_rate) ** years)\n    \n    # Calculate present value of the bond\n    present_value = face_value * present_value_factor\n    \n    # Calculate the discount or premium\n    discount_or_premium = face_value - present_value\n    \n    # Determine whether it's a discount or premium\n    if discount_or_premium > 0:\n        answer = \"Discount of $\" + str(round(discount_or_premium, 2))\n    elif discount_or_premium < 0:\n        answer = \"Premium of $\" + str(round(-discount_or_premium, 2))\n    else:\n        answer = \"No discount or premium\"\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    stock_price = 26.00\n    volatility = 0.015\n    delta = -0.5\n    confidence_level = 0.95\n    holding_period = 1\n    \n    # Calculate the z-score for the given confidence level\n    z_score = -1 * math.norminv(1 - confidence_level)\n    \n    # Calculate the VaR\n    var = stock_price * delta * z_score * volatility * math.sqrt(holding_period)\n    \n    # return answer\n    return var\n```\nThis program calculates the VaR using the delta-normal approach, taking into account the given parameters: stock price, volatility, delta, confidence level, and holding period. The `math.norminv` function is used to calculate the z-score corresponding to the given confidence level."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "Here is the Python program to calculate the yearly geometric mean return:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    returns = [1.20, 0.70, 1.15]\n    \n    # Do math calculation to get the answer\n    geometric_mean = 1\n    for return_rate in returns:\n        geometric_mean *= return_rate\n    geometric_mean = geometric_mean ** (1/len(returns))\n    \n    # Convert to percentage\n    geometric_mean = (geometric_mean - 1) * 100\n    \n    # return answer\n    return geometric_mean\n```\n\nThis program calculates the geometric mean return by multiplying all the returns together and then taking the n-th root of the product, where n is the number of returns. Finally, it converts the result back to a percentage by subtracting 1 and multiplying by 100."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    beta = 0.6\n    risk_free_rate = 0.08\n    market_return = 0.15\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    r_star = 2.25  # neutral real policy rate\n    pi_star = 2    # desired inflation rate\n    y_star = 2.5   # projected growth rate\n    pi = 3         # anticipated inflation rate\n    y = 3.5        # anticipated growth rate\n    \n    # Do math calculation to get the answer\n    r_nominal = r_star + pi_star + 0.5 * (pi - pi_star) + 0.5 * (y - y_star)\n    \n    # return answer\n    return r_nominal\n```"
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.019\n    expected_growth_in_pe = -0.012\n    expected_income_component = 0.018\n    expected_growth_in_real_eps = 0.027\n    expected_change_in_shares_outstanding = 0.0\n    current_three_month_government_bond_yield = 0.0096\n    long_term_geometric_average_return_of_market_equity_index = 0.0996\n    long_term_geometric_average_return_of_short_term_government_bond = 0.0315\n    \n    # Do math calculation to get the answer\n    nominal_income_return = expected_income_component + expected_growth_in_pe + expected_growth_in_real_eps\n    expected_nominal_return_on_equity = nominal_income_return + expected_inflation\n    expected.EVENTUALLYerp = expected_nominal_return_on_equity - long_term_geometric_average_return_of_short_term_government_bond\n    answer = expected_EVENTUALLYerp\n    \n    # return answer\n    return answer\n```\nThis program defines the variables based on the provided table and then calculates the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model. The ERP (Equity Risk Premium) is calculated as the difference between the expected nominal return on equity and the long-term geometric average return of short-term government bond."
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    tp = 182  # True Positives\n    tn = 96   # True Negatives\n    fp = 52   # False Positives\n    fn = 31   # False Negatives\n    \n    # Do math calculation to get the answer\n    accuracy = (tp + tn) / (tp + tn + fp + fn)\n    \n    # return answer\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "Here is the Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    total_participants = 15\n    \n    # Do math calculation to get the answer\n    # Since there are 3 prizes, the number of ways to give them out is 15P3 = 15! / (15-3)!\n    import math\n    answer = math.factorial(total_participants) / math.factorial(total_participants - 3)\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    delta = 100000\n    gamma = -50000\n    max_price_shift = 2.0\n\n    # Do math calculation to get the answer\n    var_delta = delta * max_price_shift\n    var_gamma = 0.5 * gamma * (max_price_shift ** 2)\n    var = abs(var_delta + var_gamma)\n\n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "Here is the Python program to answer the question:\n```\ndef solution():\n    # Define variables name and value\n    initial_investment = 20000\n    loan_amount = 10000\n    equity = initial_investment - loan_amount\n    preservation_margin = 0.3\n    \n    # Do math calculation to get the answer\n    minimum_equity_to_avoid_margin_call = loan_amount * preservation_margin / (1 - preservation_margin)\n    minimum_market_value_to_avoid_margin_call = minimum_equity_to_avoid_margin_call + loan_amount\n    initial_price = 25\n    number_of_shares = initial_investment / initial_price\n    trigger_price = minimum_market_value_to_avoid_margin_call / number_of_shares\n    \n    # return answer\n    return trigger_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    aum_end_of_previous_year = 288000000\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    soft_hurdle_rate = 0.05\n    high_water_mark = 357000000\n    fund_yield = 0.25\n    \n    # Calculate current AUM\n    current_aum = aum_end_of_previous_year * (1 + fund_yield)\n    \n    # Calculate management fee\n    management_fee = current_aum * management_fee_rate\n    \n    # Calculate incentive fee\n    if current_aum > high_water_mark:\n        incentive_fee = (current_aum - high_water_mark) * incentive_fee_rate\n    else:\n        incentive_fee = 0\n    \n    # Calculate overall fee\n    overall_fee = management_fee + incentive_fee\n    \n    # return answer\n    return overall_fee\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.903,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    w_x = 0.25  # Weight of Component X\n    w_y = 0.75  # Weight of Component Y\n    sd_x = 0.179  # Standard deviation of Component X\n    sd_y = 0.062  # Standard deviation of Component Y\n    corr_xy = 0.5  # Correlation between Component X and Y\n    \n    # Do math calculation to get the answer\n    portfolio_var = (w_x**2 * sd_x**2) + (w_y**2 * sd_y**2) + (2 * w_x * w_y * sd_x * sd_y * corr_xy)\n    portfolio_sd = portfolio_var ** 0.5\n    \n    # return answer\n    return portfolio_sd\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    start_value = 160000000\n    increase_rate = 0.25\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.10\n    high_water_mark = 198000000\n    \n    # Calculate end-of-year asset value\n    end_value = start_value * (1 + increase_rate)\n    \n    # Calculate management fee\n    management_fee = end_value * management_fee_rate\n    \n    # Calculate net return\n    net_return = (end_value / start_value - 1) * (1 - management_fee_rate)\n    \n    # Check if net return is greater than hurlde rate\n    if net_return > hurdle_rate:\n        # Calculate incentive fee\n        incentive_fee = (net_return - hurdle_rate) * incentive_fee_rate * (end_value / start_value)\n        # Check if end_value is greater than high_water_mark\n        if end_value > high_water_mark:\n            incentive_fee = incentive_fee * (end_value - high_water_mark) / end_value\n    else:\n        incentive_fee = 0\n    \n    # Calculate total fees\n    total_fees = management_fee + incentive_fee\n    \n    # return answer\n    return total_fees\n```"
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "Based on the provided table, we can define the variables and calculate the growth rate of Real Estate #1 as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    noi_year1 = 2775840\n    noi_year2 = 2859119\n    noi_year3 = 2944889\n    noi_year4 = 3033235\n    noi_year5 = 3124223\n    noi_year6 = 3217959\n    \n    # Calculate the growth rate of Real Estate #1\n    growth_rate = (noi_year6 / noi_year1) ** (1/5) - 1\n    \n    # return answer\n    return growth_rate\n```\n\nThis program calculates the growth rate by taking the sixth root of the ratio of NOI in Year 6 to NOI in Year 1, and then subtracting 1. This is a common formula to calculate the growth rate over a period of time."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.30\n    weight_y = 0.70\n    std_dev_x = 0.25\n    std_dev_y = 0.10\n    correlation_coefficient = 0.8\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = (weight_x**2 * std_dev_x**2 + weight_y**2 * std_dev_y**2 + 2 * weight_x * weight_y * std_dev_x * std_dev_y * correlation_coefficient)**0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ]
    }
]