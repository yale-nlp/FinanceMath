[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "    truck_original_cost = 57000\n    truck_salvage_value = 15000\n    truck_life = 8\n    truck_depreciation_rate = 0.20\n    truck_years_owned = 3\n\n    # Calculate the accumulated depreciation\n    # Using the formula: Accumulated Depreciation = Original Cost * (1 - (Depreciation Rate ^ Number of Years))\n    truck_accumulated_depreciation = truck_original_cost * (1 - (truck_depreciation_rate ** truck_years_owned))\n\n    # Calculate the book value of the truck after 3 years\n    truck_book_value = truck_original_cost - truck_accumulated_depreciation\n\n    # The fair value of the truck\n    truck_fair_value = 27000\n\n    # Calculate the loss or gain on the sale of the truck\n    # Loss on sale = book value of the truck - fair value of the truck\n    truck_loss = truck_book_value - truck_fair_value\n\n    # Return the loss on the sale of the truck\n    return abs(truck_loss)\n```\n\nThe Python program calculates the loss or gain on the sale of the truck based on the provided information. The formula used for calculating the loss is the difference between the book value of the truck (the original cost minus the accumulated depreciation) and the fair value of the truck (the current selling price). The absolute value is taken to ensure that the result is a positive number, regardless of whether it's a loss or a gain. The `abs` function is used to achieve this. \n\nPlease note that land is not relevant to the calculation of the profit and loss statement regarding the sale of the truck. The question asks for the loss that would likely be reflected in the profit and loss statement for the enterprise that relinquishes the truck, which can be calculated using the information provided about the truck and its current fair value. \n\nTo execute the program and see the result, you can simply call the `solution()` function.\n```python\nresult = solution()\nresult\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "spot_exchange_rate = 2.0979\nlibor_sterling = 0.016025\nlibor_kiwi = 0.032875\ndays_in_year = 360\nforward_period = 180\n\n# Calculate the forward rate using the interest rate parity\nforward_rate = spot_exchange_rate * ((1 + libor_kiwi * forward_period / days_in_year) / (1 + libor_sterling * forward_period / days_in_year))\n\n# Calculate the forward points\nforward_points = forward_rate - spot_exchange_rate\n\n# Get the precision to four decimal places\nforward_points_precision = round(forward_points, 4)\n\n# return answer\nreturn forward_points_precision\n```"
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "    risk_free_rate = 0.031\n    gim_return = 0.072\n    us_real_estate_std_dev = 0.14\n    covariance_gim_us_real_estate = 0.0075\n    \n    # Do math calculation to get the answer\n    beta = covariance_gim_us_real_estate / (gim_return - risk_free_rate) ** 2\n    \n    # return answer\n    return beta\nprint(solution())"
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "    shares = 200000\n    cost_per_share = 90\n    forward_rate_at_initiation = -18.3\n    forward_rate_after_3_months = -19.0\n    forward_term = 6\n    \n    # Calculate the value of shares in USD at initiation\n    value_of_shares_in_usd_at_initiation = shares * cost_per_share / 1e3 * (1 + forward_rate_at_initiation / 100)\n    \n    # Calculate the value of shares in USD after 3 months\n    value_of_shares_in_usd_after_3_months = shares * cost_per_share / 1e3 * (1 + forward_rate_after_3_months / 100)\n    \n    # Calculate the cash expenditure to terminate the forward agreement after 3 months\n    cash_expenditure = shares * (value_of_shares_in_usd_at_initiation - value_of_shares_in_usd_after_3_months) * (1 + forward_rate_after_3_months / 100 / (forward_term - 3) / 12)\n    \n    # Return answer\n    return cash_expenditure\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "    portfolio_value = 3700000\n    daily_volatility = 0.0004\n    days_in_year = 250\n    significance_level = 0.95  # 95% assurance level\n    z_score = 1.645  # Z-score for 95% confidence level\n    \n    # Calculate portfolio daily VaR\n    portfolio_daily_var = portfolio_value * daily_volatility * z_score / np.sqrt(days_in_year)\n    \n    # Calculate portfolio annual VaR\n    portfolio_annual_var = portfolio_daily_var * np.sqrt(days_in_year)\n    \n    # return answer\n    return portfolio_annual_var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "    p_failure = 0.40  # Probability of financial failure\n    p_success = 0.55  # Probability of financial success\n    p_success_survival = 0.85  # Probability of success given the organization survives\n    \n    # Total probability rule to calculate P(success | failure)\n    p_success_failure = (1 - p_failure) * p_success + p_failure * P_success_failure\n    \n    # Calculate P(success | failure)\n    P_success_failure = (p_success - (1 - p_failure) * p_success) / p_failure\n    \n    # return answer\n    return P_success_failure\n```"
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "firms = [(\"Zeta\", 35), (\"Yusef\", 25), (\"Xenon\", 20), (\"Waters\", 10), (\"Vlastos\", 10)]\n\n# Do math calculation to get the answer\nsorted_firms = sorted(firms, key=lambda x: x[1], reverse=True)\nthree_firm_herfindahl = 0\nfor i in range(3):\n    three_firm_herfindahl += sorted_firms[i][1]**2\n\nanswer = three_firm_herfindahl * 10000\n\n# return answer\nreturn answer"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "swap_spread = 0.17\ntreasury_yield = 0.63\n\n# Do math calculation to get the answer\ndifference_in_rates = swap_spread - treasury_yield\n\n# return answer\nreturn difference_in_rates\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "acquisition_cost = 600000\nexpected_residual_value = 100000\nuseful_life = 5\nyears_passed = 3  # From 1 January 2013 to 1 January 2016\n\n# Do math calculation to get the answer\namortization_per_year = (acquisition_cost - expected_residual_value) / useful_life\naccumulated_amortization = amortization_per_year * years_passed\n\n# return answer\nreturn accumulated_amortization\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "alpha = 0.775  # average mean reversion\ncorrelation_long_term = 0.35  # long term average correlation\ncorrelation_jan_2014 = 0.27  # average correlation in 30 by 30 NASDAQ matrix in January 2014\nmu = correlation_long_term  # average mean is the long term correlation average\n\n# Do math calculation to get the answer\nexpected_correlation_feb_2014 = mu + alpha * (correlation_jan_2014 - mu)\n\n# return answer\nreturn expected_correlation_feb_2014\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "    dividend_1 = 0.5\n    dividend_2 = 0.5\n    growth_rate = 0.06\n    rate_of_return = 0.10\n    \n    # Calculate the present value of the first two dividends\n    dividend_1_present_value = dividend_1 / (1 + rate_of_return)\n    dividend_2_present_value = dividend_2 / (1 + rate_of_return) ** 2\n    \n    # Calculate the perpetuity starting after the second year\n    perpetuity_present_value = dividend_2 * (1 + growth_rate) / (rate_of_return - growth_rate)\n    \n    # Calculate the present value of the perpetuity\n    perpetuity_present_value_1 = perpetuity_present_value / (1 + rate_of_return) ** 2\n    \n    # Calculate the total present value of the common equity\n    equity_present_value = dividend_1_present_value + dividend_2_present_value + perpetuity_present_value_1\n    \n    # return answer\n    return equity_present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "mc = 30  # marginal cost\nac = 50  # average cost\ned = 1.8  # price elasticity of demand\n\n# Using the Lerner's Index to find the most probable price\n# Lerner's Index = -1 / |Elasticity of Demand|\n# Lerner's Index = (Price - Marginal Cost) / Price\n\nlerner_index = -1 / abs(ed)\nprice = (lerner_index + 1) * mc\n\n# return answer\nreturn price\n\nsolution()"
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "    total_revenue = 460000\n    beginning_assets = 320000\n    ending_assets = 270000\n    cost_of_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Calculate the change in assets over the year\n    change_in_assets = beginning_assets - ending_assets\n    \n    # Calculate the economic profit\n    economic_profit = total_revenue - cost_of_raw_materials - wages_paid - change_in_assets - normal_profit\n    \n    # return answer\n    return economic_profit\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "FCFF = EBITDA - Taxes + Depreciation - Changes in Net Working Capital - Net Capex\n\nWhere:\n- EBITDA = $1,349 million (from table)\n- Taxes = $294 million (from table, calculated as 32% of Pretax income)\n- Depreciation = $243 million (from table)\n- Changes in Net Working Capital = Increase in Current Assets - Decrease in Current Liabilities (Calculated as follows)\n  - Increase in Current Assets = ($1,290 - $1,199) - ($709 - $638) = $91 - $71 = $20 million\n  - Decrease in Current Liabilities = ($2,783 - $2,678) - ($2,249 - $2,449) = $105 - $200 = -$195 million\n- Net Capex = Fixed capital investment = $535 million (from table)\n\nFCFF = $1,349 - $294 + $243 - ($20 - $195) - $535\n\n# Do math calculation to get the answer\nfcff = 1349 - 294 + 243 - (20 - 195) - 535\n\n# return answer\nreturn fcff\n```"
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "carrying_value = 500000\nexpected_cash_flows = 450000\nfair_value = 480000\ncosts_to_sell = 50000\nvalue_in_use = 440000\n\n# Calculate impairment loss\nimpairment_loss = max(carrying_value - max(expected_cash_flows, fair_value - costs_to_sell, value_in_use), 0)\n\n# Return the answer\nreturn impairment_loss\n\n```"
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "    coupon_rate = 0.03\n    interest_paid = \"semiannually\"\n    maturity_time = 3\n    required_rate_of_return = 0.05\n    par_value_of_bond = 100\n    coupon_amount = par_value_of_bond * coupon_rate / 2  # Since interest is paid semiannually\n    total_interest_paid = coupon_amount * maturity_time * 2\n    principal_amount = par_value_of_bond\n    total_amount_repaid = total_interest_paid + principal_amount\n    \n    # Do math calculation to get the answer\n    discount_factor = 1 / (1 + required_rate_of_return/2)**(maturity_time*2)\n    bond_price = discount_factor * total_amount_repaid\n    \n    # return answer\n    return bond_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "    initial_units = 10000\n    initial_cost_per_unit = 10\n    additional_units = 5000\n    additional_cost_per_unit = 11\n    units_sold = 12000\n    selling_price_per_unit = 15\n    \n    # Do math calculation to get the answer\n    cost_of_goods_sold = (initial_units * initial_cost_per_unit) + ((units_sold - initial_units) * additional_cost_per_unit)\n    \n    # return answer\n    return cost_of_goods_sold\n```\n\nThis program calculates the cost of goods sold (COGS) using FIFO, which means that the cost of the first units bought are the first to be sold. The program first calculates the cost of the initial 10,000 units bought in October, then calculates the cost of the remaining units sold from the November purchase. The total cost of goods sold is the sum of these two costs."
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.102,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "    # Define variables name and value\n    scenario1_good_prob = 70\n    scenario1_good_return = 20\n    scenario1_good_return_prob = 50\n    scenario1_good_weighted_return = scenario1_good_prob * scenario1_good_return * scenario1_good_return_prob\n    scenario1_bad_prob = 30\n    scenario1_bad_return = 5\n    scenario1_bad_return_prob = 60\n    scenario1_bad_weighted_return = scenario1_bad_prob * scenario1_bad_return * scenario1_bad_return_prob\n    \n    scenario2_good_prob = 70\n    scenario2_good_return = 10\n    scenario2_good_return_prob = 50\n    scenario2_good_weighted_return = scenario2_good_prob * scenario2_good_return * scenario2_good_return_prob\n    scenario2_bad_prob = 30\n    scenario2_bad_return = -10\n    scenario2_bad_return_prob = 40\n    scenario2_bad_weighted_return = scenario2_bad_prob * scenario2_bad_return * scenario2_bad_return_prob\n    \n    # Do math calculation to get the answer\n    anticipated_portfolio_return1 = scenario1_good_weighted_return + scenario1_bad_weighted_return\n    anticipated_portfolio_return2 = scenario2_good_weighted_return + scenario2_bad_weighted_return\n    \n    # return answer\n    return anticipated_portfolio_return1, anticipated_portfolio_return2\n```\n\nWhen you run the `solution()` function, it will return the anticipated portfolio return under the two scenarios. The anticipated portfolio return under the first scenario is the result of `scenario1_good_weighted_return` and `scenario1_bad_weighted_return` added together, and the same for the second scenario. The function returns a tuple of two anticipated portfolio returns corresponding to the two scenarios."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "end_inv_lfo = 250000\nend_lfo_reserve = 40000\ntax_rate = 0.30\n\n# Calculate the LIFO liquidation during 2017\nliquidation = (end_lfo_reserve - 30000) / (1 - tax_rate)\n\n# Calculate the beginning inventory at FIFO\nstart_inv_fco = end_inv_lfo - liquidation\n\n# return the answer\nreturn start_inv_fco"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "    years = 15\n    discount_rate = 0.045\n    par_value = 100\n    \n    # The formula for calculating the price of a zero-coupon bond is:\n    # Price = Face Value / (1 + r)^n\n    \n    # Do math calculation to get the answer\n    bond_price = par_value / (1 + discount_rate) ** years\n    cost_per_100 = bond_price * (100 / par_value)\n    \n    # return answer\n    return cost_per_100\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "gain_on_redemption = 100000\ncarrying_value = 950000\nface_value = 1000000\n\n# Do math calculation to get the call price\ncall_price = carrying_value + gain_on_redemption\n\n# return answer\nreturn call_price\n```"
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "spot_usd_eur = 1.3860\nspot_eur_cad = 0.6125\nspot_usd_gbp = 1.4208\n\n# Calculate EUR/GBP cross rate\n# Using USD/EUR and USD/GBP ratios to derive the EUR/GBP ratio.\n# (EUR/USD) * (USD/GBP) = EUR/GBP\n\ncross_spot_eur_gbp = spot_eur_cad / spot_usd_cad\nanswer = cross_spot_eur_gbp\n\n# return answer\nreturn answer\n```"
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "maturity = {\n    'One-Year': 2.50,\n    'Two-Year': 2.99,\n    'Three-Year': 3.48,\n    'Four-Year': 3.95,\n    'Five-Year': 4.37\n}\n\nspot_rate = {\n    'One-Year': 2.50,\n    'Two-Year': 3.00,\n    'Three-Year': 3.50,\n    'Four-Year': 4.00,\n    'Five-Year': None\n}\n\n# Do math calculation to get the answer\nanswer = spot_rate['Five-Year']\n\n# return answer\nreturn answer"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "    current_1year_rate = 0.08  # 8.0%\n    possible_1year_rate_up = 0.10  # 10.0%\n    possible_1year_rate_down = 0.06  # 6.0%\n    yearly_risk_premium = 0.0040  # 40bps\n    bond_value = 1000  # EUR 1,000\n    \n    # Do math calculation to get the answer\n    expected_1year_rate = (possible_1year_rate_up * 0.5) + (possible_1year_rate_down * 0.5)\n    risk_adjusted_rate = expected_1year_rate + yearly_risk_premium\n    zero_coupon_bond_val = bond_value / ((1 + risk_adjusted_rate) ** 2)  # Two-year zero-coupon bond\n    \n    # return answer\n    return zero_coupon_bond_val\n```\n\nWhen you run the `solution()` function, it will calculate and return the valuation of the two-year zero-coupon bond, considering the given interest rate scenarios and the yearly risk premium for duration risk."
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.938,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "n_a = 25\nmean_a = 200\nstd_dev_a = 45\n\nn_b = 18\nmean_b = 185\nstd_dev_b = 60\n\ncombined_variance = 2678.05\n\n# The formula for the t-test statistic when variances are assumed equal is \n# t = (mean_a - mean_b) / sqrt((std_dev_a^2/n_a) + (std_dev_b^2/n_b))\n\n# We also need to calculate the degrees of freedom for the t-distribution which is \n# df = n_a + n_b - 2\n\ndegrees_of_freedom = n_a + n_b - 2\n\n# use the formula for combined standard deviation squared \n# combined_std_dev_sq = (n_a*std_dev_a^2 + n_b*std_dev_b^2) / degrees_of_freedom\n# this is equivalent to sqrt(combined_variance) = sqrt(combined_std_dev_sq)\ncombined_std_dev = (combined_variance / degrees_of_freedom) ** 0.5\n\n# calculate the t-test statistic\nt_statistic = (mean_a - mean_b) / (combined_std_dev * ((1/n_a) + (1/n_b)) ** 0.5)\n\n# return the t-test statistic\nreturn t_statistic\n\n```"
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "    cost_of_goods_sold = 27264\n    increase_in_inventory = 501\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold + increase_in_inventory\n    \n    # return answer\n    return cash_paid_to_suppliers\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "options_granted = 20000\noption_price_granted = 2.5\naverage_option_price_2011 = 2.8\nfair_value_grant_day = 15\nexpense_rate = 1/4  # Since the options are given at the beginning of the year, the expense is spread over 4 years\n\n# Do math calculation to get the answer\nexpense_amount = options_granted * (fair_value_grant_day - option_price_granted) * expense_rate\ncompensation_expense_2011 = expense_amount / average_option_price_2011\n\n# return answer\nreturn compensation_expense_2011"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "adjusted_period = 7.020\nannual_convexity = 65.180\nreturn_to_maturity_change = 0.0025  # 25 basis points\n\n# Do math calculation to get the answer\nprice_change = (-1 * adjusted_period * annual_convexity * return_to_maturity_change ** 2) / 2\n\n# return answer\nreturn price_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "    dps = 30 * 0.058  # Dividend per share\n    required_rate_of_return = 0.05  # Required rate of return on the stock\n    \n    # Do math calculation to get the answer\n    intrinsic_value = dps / required_rate_of_return\n    \n    # return answer\n    return intrinsic_value\n```\nWhen you run this Python program, it computes the intrinsic value of the preferred stock based on the given parameters. The formula for the intrinsic value of a preferred stock is (dividend per share) / (required rate of return). In this case, the dividend per share is calculated as 30 (par value) * 0.058 (preferred share's dividend rate). The required rate of return is given as 5 percent."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "initial_value = 400\nrisk_free_rate = 0.05\ndividend_rate = 0.03\ntime_to_maturity = 0.5  # 6 months, expressed in years\n\n# Do math calculation to get the answer\nforward_price = initial_value * (1 + (risk_free_rate - dividend_rate) * time_to_maturity)\n\n# return answer\nreturn forward_price\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "population_std_deviation = 0.049\nhypothesis_test_value = 0.05\nsample_size = 36\n\n# Do math calculation to get the test statistic value\ntest_statistic = (hypothesis_test_value - population_std_deviation) / (population_std_deviation / (sample_size ** 0.5))\n\n# return answer\nreturn test_statistic\n```"
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "    total_assets_2007 = 4652\n    total_assets_2008 = 5087\n    \n    total_liab_equity_2007 = 4652\n    total_liab_equity_2008 = 5087\n    \n    revenue_2008 = 3323\n    net_income_2008 = 485\n    interest_expense_2008 = 195\n    depreciation_2008 = 270\n    \n    # Do math calculation to get the answer\n    op_cashflow_2008 = revenue_2008 + depreciation_2008 - (total_assets_2008 - total_assets_2007) - (total_liab_equity_2008 - total_liab_equity_2007) - interest_expense_2008\n    fcfe_2008 = net_income_2008 + depreciation_2008 - (total_liab_equity_2008 - total_liab_equity_2007)\n    \n    # return answer\n    return fcfe_2008\n```"
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.144,
        "question": "What is the sustainable growth rate?",
        "output": [
            "net_profit_margin = 0.20\nretention_rate = 0.60\nasset_turnover = 0.8\nfinancial_leverage_multiplier = 1.5\n\n# Calculate Sustainable Growth Rate\n# Sustainable growth rate = (Net profit margin * Retention rate * (1 + Financial leverage multiplier)) / (1 - (Net profit margin * Retention rate * (1 + Financial leverage multiplier)))\n\nsgrowth_rate = (net_profit_margin * retention_rate * financial_leverage_multiplier) / (1 - ((net_profit_margin * retention_rate * financial_leverage_multiplier)))\n\n# return answer\nreturn sgrowth_rate\n```"
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "    spot_rate_cny_zar = 0.9149 # CNY/ZAR spot rate\n    spot_rate_cny_hkd = 0.8422 # CNY/HKD spot rate\n    \n    # Convert HKD/CNY to CNY/HKD for cross-currency calculation\n    spot_rate_hkd_cny = 1 / spot_rate_cny_hkd\n    \n    # Calculate ZAR/HKD spot rate\n    spot_rate_zar_hkd = spot_rate_cny_zar / spot_rate_hkd_cny\n    \n    # return answer\n    return spot_rate_zar_hkd\n\nprint(solution())\n```\n\nThis Python program defines the spot rates for CNY/ZAR and CNY/HKD from the given table, then it calculates the ZAR/HKD spot rate by dividing the CNY/ZAR rate by the inverse of the CNY/HKD rate. The output of this program would be the ZAR/HKD exchange rate given by the broker."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "output": [
            "lambda_decay = 0.95\ndays_old = 4\n\n# Calculate the weight for a four-day-old return using the EWMA model formula: weight = lambda_decay ^ (number of days)\nweight = lambda_decay ** days_old\n\n# return answer\nreturn weight"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "principal = 180000\ninterest_rate = 0.10\ncompounding_days = 365\nyears = 2\n\n# Do math calculation to get the answer\nfuture_value = principal * (1 + interest_rate/compounding_days) ** (compounding_days * years)\n\n# return answer\nreturn future_value"
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "    inventory_july_1 = 20\n    unit_cost_july_1 = 5.00\n    purchase_july_12 = 70\n    unit_cost_july_12 = 5.20\n    sale_july_16 = 50\n    sale_unit_cost_july_16 = 6.00\n    purchase_july_26 = 35\n    unit_cost_july_26 = 5.50\n    sale_july_29 = 40\n    sale_unit_cost_july_29 = 6.50\n    \n    # Calculation under periodic FIFO method\n    ending_inventory = (inventory_july_1 - sale_july_16) + purchase_july_12 + purchase_july_26 - sale_july_29\n    cost_of_goods_sold = (inventory_july_1 * unit_cost_july_1) + (purchase_july_12 * unit_cost_july_12) + (purchase_july_26 * unit_cost_july_26) \\\n                          - ((inventory_july_1 - sale_july_16) * unit_cost_july_1) - ((purchase_july_12 - sale_july_29) * unit_cost_july_12)\n    \n    # Calculate the total sale\n    total_sale = (sale_july_16 * sale_unit_cost_july_16) + (sale_july_29 * sale_unit_cost_july_29)\n    \n    # Calculate the gross profit\n    gross_profit = total_sale - cost_of_goods_sold\n    \n    # return answer\n    return round(gross_profit, 2)\n\n# Call the function\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "discount_rate = 0.10\ndividend_year_4 = 1.72\ndividend_growth_rate = 0.04\npredicted_growth_rate = 0.06\n\n# Do math calculation to get the answer\nyear_4_value = dividend_year_4 / (discount_rate - dividend_growth_rate)\npresent_value = year_4_value / ((1 + discount_rate) ** 3)\n\n# return answer\nreturn present_value\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "payout_ratio = 0.50\ngrowth_rate = 0.10\nreturn_on_equity = 0.15\n\n# Calculate the sustainable growth rate to adjust the payout ratio and the growth rate\nsustainable_growth_rate = return_on_equity * (1 - payout_ratio)\n\n# Calculate the P/E ratio using the sustainable growth rate and the return on equity\npe_ratio = sustainable_growth_rate / (return_on_equity - growth_rate)\n\n# return answer\nreturn pe_ratio\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "    annual_payment = 300  # Yearly payment starting from the first moment\n    years = 5  # Total years\n    interest_rate = 0.04  # Annual interest rate\n    \n    # Do math calculation to get the answer\n    # Use the formula for the present value of an annuity due (payments start from the first moment)\n    pv = annual_payment * ((1 - (1 + interest_rate) ** (-years)) / interest_rate) * (1 + interest_rate)\n    \n    # return answer\n    return round(pv, 2)\n\n# Test the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss = 15000\n\n    # Calculate the sale price of the equipment\n    sale_price = initial_price - accumulated_depreciation - loss\n\n    # return answer\n    return sale_price\n```\n\nThis program defines the initial price, accumulated depreciation, and loss from selling the equipment. It then calculates the sale price by subtracting the accumulated depreciation and loss from the initial price. Finally, it returns the sale price as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "liabilities = 35000000\nequity = 55000000\n\n# Do math calculation to get the answer\npercentage_liabilities = (liabilities / (liabilities + equity)) * 100\n\n# return answer\nreturn percentage_liabilities\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "    dividend_paid = 2\n    required_rate_of_return = 0.14\n    expected_growth_rate = 0.08\n    \n    # Do math calculation to get the answer (Using the Gordon Growth Model)\n    next_dividend = dividend_paid * (1 + expected_growth_rate)\n    inherent_value = next_dividend / (required_rate_of_return - expected_growth_rate)\n    \n    # return answer\n    return inherent_value\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "PV0 = 99.41172\nPV_ = 99.50132\nΔCurve = 3\ndelta_PV = PV_ - PV0\nConvexity = -1 * (delta_PV / ((PV0 + PV_) / 2)**2)\n\n# return answer\nreturn Convexity\n```"
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "portfolio_return = 0.25\nbenchmark_return = 0.15\nportfolio_weight = 0.5\nbenchmark_weight = 0.35\n\ndef solution():\n    # Calculate portfolio excess return\n    portfolio_excess_return = portfolio_return - benchmark_return\n    answer = portfolio_excess_return * portfolio_weight\n    \n    # return answer\n    return answer\n\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.948,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "forward_exchange_rate = 1.0123\nforward_points_percentage = 6.8\n\n# The forward points percentage is the difference between the forward exchange rate and the spot rate expressed as a percentage.\n# The formula is: (Forward exchange rate / Spot rate) - 1 = Forward points percentage / 100\n# Rearranging the formula to solve for the spot rate: Spot rate = Forward exchange rate / (1 + Forward points percentage / 100)\n\n# Do math calculation to get the answer\nspot_rate = forward_exchange_rate / (1 + forward_points_percentage / 100)\n\n# return answer\nreturn spot_rate"
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "    price_multiple_ffo_2011 = 11.5\n    ffo_per_share_2011 = 1.17\n    weighted_average_shares_outstanding_2011 = 121944\n    \n    # Do math calculation to get the answer\n    share_price_2011 = price_multiple_ffo_2011 * ffo_per_share_2011 / weighted_average_shares_outstanding_2011\n    \n    # return answer\n    return share_price_2011\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "    total_loans = 1000 + 600  # Total number of loans\n    delayed_secondary = 200   # Delayed payments from secondary quality loans\n    delayed_top = 48          # Delayed payments from top quality loans\n    \n    # Calculate the total number of delayed loans\n    total_delayed = delayed_secondary + delayed_top\n    \n    # Calculate the odds that a delayed loan is a secondary quality loan\n    odds_secondary = delayed_secondary / total_delayed\n    \n    # Return the odds (as a percentage)\n    return round(odds_secondary * 100, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "    share_price = 26.00\n    volatility = 0.015\n    delta = -0.5\n    confidence_level = 0.95\n    z_score = 1.645  # Z score for 95% confidence level\n    \n    # Do math calculation to get the answer\n    return_std_dev = share_price * volatility\n    option_std_dev = return_std_dev * delta\n    var = option_std_dev * z_score\n    \n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "    financing_cash_in = 45000 + 20000 + 10000 + 40000  # Cash inflow from financing activities\n    financing_cash_out = 10000 + 45000  # Cash outflow from financing activities\n    \n    # Do math calculation to get the answer\n    cash_inflow_outflow = financing_cash_in - financing_cash_out\n    \n    # return answer\n    return cash_inflow_outflow\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "face_value = 1000\ncoupon_rate = 0.05\ncoupon_payment = face_value * coupon_rate\nyears = 3\n\n# Spot rates for the first year, second year, and third year\nspot_rate1 = 0.036\nspot_rate2 = 0.037\nspot_rate3 = 0.038\n\n# Calculate the bond price\nbond_price = coupon_payment / (1 + spot_rate1) + coupon_payment / (1 + spot_rate2)**2 + (coupon_payment + face_value) / (1 + spot_rate3)**3\n\n# return answer\nreturn bond_price\n\n# test the function\nprint(solution())"
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "    payment_out = 0 # adjust this value as given in the data\n    \n    # Do math calculation to get the answer\n    answer = payment_out\n    \n    # return answer\n    return answer\n```\nPlease note that the actual value of \"payment_out\" from the given data for XYZ NY is not provided. You need to replace `0` with the actual value given in the data. The program then simply returns the payment out as per the question's request. This assumes that the question is simply asking for the amount of pension payments made by XYZ NY during the specified year, as per the provided data.\n\nMake sure the \"payment_out\" data is correctly inserted to accurately answer the question."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "average_return = 160000\nstandard_deviation = 30000\ntarget_return = 100000\n\n# Using the Z-score formula for a normal distribution\nz_score = (target_return - average_return) / standard_deviation\n\n# Convert the Z-score to a percentage\npercentage_return = round(0.5 * (1 - norm.cdf(z_score)) * 100, 2)\n\n# return answer\nreturn percentage_return\n\n# Importing the scipy.stats module for the norm.cdf function\nfrom scipy.stats import norm\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "    min_margin_requirement = 0.65\n    \n    # In the context of leverage, the maximum leverage ratio is essentially 1 minus the minimum margin requirement\n    # This is because the broker can lend you up to a portion of the investment's value as long as you meet the minimum margin requirement.\n    # So, for example, if your minimum margin requirement is 65%, then the broker can lend up to 100% - 65% = 35% of the investment's value.\n    maximum_leverage_ratio = 1 - min_margin_requirement\n    \n    # return answer\n    return maximum_leverage_ratio\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "    demand_at_5 = 30 - 2 * 5\n    initial_quantity = demand_at_5\n    initial_price = 5\n    \n    # Calculate the derivative of Qbw with respect to Pb\n    demand_derivative = -2\n    \n    # Use the point-slope form to find the quantity demanded at a price slightly higher than 5\n    delta_price = 0.01\n    quantity_at_slightly_higher_price = (30 - 2 * (initial_price + delta_price))\n    \n    # Calculate the percentage change in quantity demanded\n    percentage_change_quantity = (quantity_at_slightly_higher_price - initial_quantity) / initial_quantity * 100\n    \n    # Calculate the percentage change in price\n    percentage_change_price = delta_price / initial_price * 100\n    \n    # Calculate price elasticity of demand\n    price_elasticity_of_demand = percentage_change_quantity / percentage_change_price\n    \n    # return answer\n    return price_elasticity_of_demand\n```\n\nWhen you run the `solution()` function, it will calculate the price elasticity of demand at a price of 5 for the given demand function Qbw=30-2Pb. The result will be the price elasticity of demand, which measures how much the quantity demanded changes in response to a change in price. A value less than 1 indicates inelastic demand, meaning that a change in price has a relatively small effect on the quantity demanded. A value greater than 1 indicates elastic demand, meaning that a change in price has a relatively large effect on the quantity demanded. A value of exactly 1 indicates unitary elasticity, where the proportionate change in quantity demanded equals the proportionate change in price."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "flotation_cost = 0.05  # 5% flotation costs per share\nnext_dividend = 0.32   # anticipated dividend the following year\ngrowth_rate = 0.10     # perpetual growth rate after the first year\nissue_price = 14.69    # price of shares released\n\n# Do math calculation to get the answer\ncost_of_equity = (next_dividend / (issue_price * (1 - flotation_cost))) + growth_rate\n\n# return answer\nreturn cost_of_equity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "annual_management_fee = 0.0032  # 0.32%\nround_trip_trading_fees = 0.002  # 0.20%\nbid_offer_spread = 0.001  # 0.10%\n\n# The Bid-Offer spread is included in both buy and sell transactions, so we only count it once in the holding period cost.\nholding_period_cost_components = [annual_management_fee, round_trip_trading_fees, bid_offer_spread / 2]  # Half because it's a spread.\n\n# Robinson is holding the ETF for nine months, which is 3/4 of a year.\nholding_period_fraction = 9 / 12\n\n# The overall holding period cost is the sum of the costs for all components.\noverall_holding_period_cost = sum([component * holding_period_fraction for component in holding_period_cost_components])\n\n# return answer\nreturn overall_holding_period_cost\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "    assets_start = 515  # Current value of the assets\n    management_fee_rate = 0.02  # Management fee rate is 2%\n    incentive_fee_rate = 0.02  # Incentive fee rate is 20%\n    hurdle_rate = 0.05  # Hurdle rate is 5%\n    high_water_mark = 540  # Initial high water mark\n    assets_end = 602.5  # Asset value after one year\n    \n    # Calculate the management fee\n    management_fee = assets_end * management_fee_rate\n    \n    # Calculate the incentive fee\n    if assets_end > high_water_mark:\n        incentive_fee = (assets_end - high_water_mark) * incentive_fee_rate\n        high_water_mark = assets_end\n    else:\n        incentive_fee = 0\n    \n    # Calculate the investor's gross return\n    investor_gross_return = assets_end - assets_start\n    \n    # Calculate the investor's net return\n    investor_net_return = investor_gross_return - management_fee - incentive_fee\n    \n    # Check if investor's net return meets the hurdle rate\n    if investor_net_return > assets_start * hurdle_rate:\n        investor_net_return = assets_start * hurdle_rate\n    \n    # return answer\n    return investor_net_return\n\nprint(solution())"
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "    net_income = 1500000\n    shares_common_stock = 1000000\n    par_value_convertible_bonds = 10000000\n    preferred_dividends = 2000000 * 0.07\n    tax_rate = 0.3\n    convertible_shares = 3000000\n    \n    # Calculate interest expense net of tax\n    interest_expense = par_value_convertible_bonds * 0.04\n    interest_expense_net_of_tax = interest_expense * (1 - tax_rate)\n    \n    # Calculate the adjusted net income for diluted EPS\n    adjusted_net_income = net_income + interest_expense_net_of_tax - preferred_dividends\n    \n    # Calculate the adjusted number of shares for diluted EPS\n    adjusted_shares = shares_common_stock + (convertible_shares / par_value_convertible_bonds * preferred_dividends / 252)\n    \n    # Calculate diluted earnings per share\n    diluted_eps = adjusted_net_income / adjusted_shares\n    \n    # return answer\n    return diluted_eps\n```\n\nIn the provided Python program:\n- The net income, par value of convertible bonds, tax rate, and dividend on preferred stock are defined as variables.\n- The interest expense net of tax is calculated.\n- The adjusted net income for diluted EPS is calculated by adding the interest expense net of tax to the net income and subtracting the preferred dividends.\n- The adjusted number of shares for diluted EPS is calculated by adding the number of common shares to the product of the number of convertible shares, the dividends per share implied by the convertible bonds, and the fraction of the year the securities have been in circulation (252 days in a typical trading year).\n- Finally, the diluted earnings per share is calculated by dividing the adjusted net income by the adjusted number of shares."
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "    stock_investment = 10000\n    return_on_investment = 0.155\n    sell_price = 24\n    dividend = 2500\n    \n    # Calculate the total return on investment (including dividends)\n    total_return = stock_investment * return_on_investment + dividend\n    \n    # Calculate the total amount of money received from selling stocks and dividends\n    total_money_received = (stock_investment + total_return) * sell_price\n    \n    # Calculate the original cost per stock\n    cost_per_stock = total_money_received / stock_investment\n    \n    # return the original cost per stock\n    return cost_per_stock\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "initial_price = 865.0\nshort_term_price = 877.0\nlong_term_price = 883.0\ncollateral_rate = 0.60 / 4  # annualized rate converted to quarterly rate\n\n# Do math calculation to get the answer\nprofit_from_current_position = (short_term_price - initial_price) * 100  # Assuming contract size is 100 bushels\nprofit_from_collateral = (long_term_price - short_term_price) * 100 * 0.006  # Assuming 0.60% annualized rate\ntotal_return = profit_from_current_position + profit_from_collateral\n\n# return answer\nreturn total_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "initial_cap_rate = 0.055\nending_cap_rate = 0.06\ndiscount_rate = 0.0725\n\n# Do math calculation to get the answer\ngrowth_rate = (discount_rate - ending_cap_rate) / (initial_cap_rate - ending_cap_rate)\n\n# return answer\nreturn growth_rate"
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "cost_of_equipment = 5000000\nestimated_residual_value = 500000\nexpected_useful_life = 9 * 12  # converting years to months\ntotal_productive_capacity = 950000\nproduction_in_f_y2015 = 150000\nexpected_production = 100000 * 8 * 12  # 100,000 units per year for 8 years, converting to months\ndepreciation_rate = (cost_of_equipment - estimated_residual_value) / expected_useful_life\nproduction_in_initial_year = 150000  # as given for FY2015\ndepreciation_expense_initial_year = depreciation_rate * production_in_initial_year\n\n# return answer\nreturn depreciation_expense_initial_year\n```\nNote that in the provided data, the production capacity is given in units, but the useful life is given in years. For the calculation of depreciation under the units-of-production method, it is often more practical to work with a consistent time unit. In this solution, I converted the useful life from years to months for consistency with the production data. The depreciation expense in the initial year (FY2015) is then calculated based on the production units in that year."
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "    ffo = 122  # Free Cash Flow to the Firm (FFO) = Net Income + Depreciation and amortization - Net interest expenses\n    ffo_multiple = 13  # Price / FFO multiple\n    \n    # Do math calculation to get the answer\n    end_of_year_share_price = ffo * ffo_multiple\n    \n    # return answer\n    return end_of_year_share_price\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "marginal_cost = 40\naverage_cost = 70\nprice_elasticity_of_demand = 1.5\n\n# Do math calculation to get the answer\nprice = (average_cost / (1 + (1/price_elasticity_of_demand))) * marginal_cost\n\n# return answer\nreturn price\n```\n\nThis Python program calculates the price that Omega Petroleum Corp. is likely to set, given its marginal cost, average cost, and the price elasticity of demand. The formula used here is derived from the Lerner Index, which states that the price can be calculated as (averagecost / (1 + (1/e))) * marginal_cost, where e is the price elasticity of demand."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "lpr = 1.00  # 6-month LPR in percent\nbond_price = 97  # Price of the bond for every 100 of face value\nface_value = 100  # Assuming face value of the bond is 100\ncoupon_rate = 0.08  # 6-month LPR plus 80 basis points\n\n# Convert the LPR from percent to decimal\nlpr = lpr / 100\n\n# Calculate the annual coupon payment\nannual_coupon = face_value * coupon_rate\n\n# Calculate the present value of the coupon payments\nnum_periods = 2  # Two years, so 4 6-month periods\ncoupon_payment_per_period = annual_coupon / num_periods\ndiscount_margin_in_percent = 0  # Initializing the discount margin in percent\n\n# Iterate to find the discount margin that makes the present value of the bond equal to the bond price\nfor i in range(10000):  # Assume a precision of 0.0001%\n    discount_margin = i * 0.0001  # Convert to decimal\n    discount_factor_per_period = 1 / (1 + discount_margin)\n    present_value = coupon_payment_per_period * discount_factor_per_period ** (1 / 2) + \\\n                    coupon_payment_per_period * discount_factor_per_period ** (2 / 2) + \\\n                    coupon_payment_per_period * discount_factor_per_period ** (3 / 2) + \\\n                    coupon_payment_per_period * discount_factor_per_period ** (4 / 2) + \\\n                    face_value * discount_factor_per_period ** (4 / 2)\n\n    if abs(present_value - bond_price) < 0.0001:  # Assuming a precision of 0.0001\n        discount_margin_in_percent = discount_margin / 100\n        break\n\n# Convert the discount margin to basis points\ndiscount_margin_in_basis_points = discount_"
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40\n    fraction_retained = 0.70\n    intercept = 0.0477\n    underwriter_rank_coefficient = 0.0150\n    pre_offer_coefficient = 0.4350\n    offer_size_coefficient = -0.0009\n    fraction_retained_coefficient = 0.0500\n    \n    # Do math calculation to get the answer\n    anticipated_initial_return = intercept + underwriter_rank_coefficient * underwriter_rank + pre_offer_coefficient * pre_offer_price_adjustment + offer_size_coefficient * offer_size + fraction_retained_coefficient * fraction_retained\n    \n    # return answer\n    return anticipated_initial_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "investment = 1000000  # Assuming investment of $1,000,000\nmanagement_fee = 0.004  # Annual management fee of 0.40%\nround_trip_commission_rate = 0.0055  # Round-trip trading commissions of 0.55%\nbid_offer_spread = 0.002  # Bid-offer spread of 0.20%\nholding_period = 9 / 12  # Nine months out of the year\n\n# Do math calculation to get the answer\nmanagement_cost = investment * management_fee * holding_period\ninvestment -= management_cost\ncommission_cost = 2 * investment * round_trip_commission_rate\ninvestment -= commission_cost\nspread_cost = 2 * investment * bid_offer_spread\n\n# The projected total cost for the holding period is the sum of management, commission, and spread costs\ntotal_cost = management_cost + commission_cost + spread_cost\n\n# return answer\nreturn total_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "    years = [(2008, 14), (2009, -10), (2010, -2)]\n    \n    # Do math calculation to get the answer\n    # The holding period return is calculated by multiplying the annual returns\n    hpr = 1\n    for year, return_ in years:\n        hpr *= (1 + return_ / 100)\n    hpr = (hpr - 1) * 100\n    \n    # return answer\n    return hpr\n\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "Consumption = 20.0\nCapital_consumption_allowance = 1.9\nGovernment_spending = 4.2\nImports = 2.2\nGross_private_domestic_investment = 6.0\nExports = 1.8\n\n# Do math calculation to get the answer\ngdp = Consumption + Gross_private_domestic_investment + Government_spending + (Exports - Imports) - Capital_consumption_allowance\n\n# return answer\nreturn gdp\n```"
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "    expected_return_stock1 = 0.07\n    expected_return_stock2 = 0.1\n    standard_deviation_stock1 = 0.12\n    standard_deviation_stock2 = 0.25\n    portfolio_weights_stock1 = 0.3\n    portfolio_weights_stock2 = 0.7\n    correlation = 0.2\n    \n    # Calculate portfolio variance\n    portfolio_variance = (portfolio_weights_stock1**2 * standard_deviation_stock1**2\n                         + portfolio_weights_stock2**2 * standard_deviation_stock2**2\n                         + 2 * portfolio_weights_stock1 * portfolio_weights_stock2 * standard_deviation_stock1 * standard_deviation_stock2 * correlation)\n    \n    # Calculate portfolio standard deviation\n    portfolio_standard_deviation = portfolio_variance**0.5\n    \n    # Return the portfolio standard deviation\n    return portfolio_standard_deviation\n```"
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "    working_capital = 22_000_000\n    fixed_assets = 57_000_000\n    future_normalized_income = 89_000_000\n    required_return_working_capital = 0.06\n    required_return_fixed_assets = 0.09\n    required_return_intangible_assets = 0.25\n    future_growth_rate = 0.07\n    \n    # Calculate the value of intangible assets using excess earnings method\n    intangible_assets_value = future_normalized_income * (required_return_intangible_assets - future_growth_rate) / (1 + future_growth_rate)\n    \n    # return answer\n    return intangible_assets_value\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "    revenue = 40000\n    cost_of_goods_sales = 30000\n    accounts_receivable = 3000\n    inventory_beginning = 1500\n    inventory_ending = 2000\n    accounts_payable = 4000\n    \n    # Calculate days inventory outstanding (DIO)\n    # DIO = (Average inventory / Cost of goods sold) * 365 days\n    dio = (inventory_beginning + inventory_ending) / 2 / cost_of_goods_sales * 365\n    \n    # Calculate days sales outstanding (DSO)\n    # DSO = (Accounts receivable / Credit sales) * 365 days\n    dso = accounts_receivable / revenue * 365\n    \n    # Calculate days payable outstanding (DPO)\n    # DPO = (Accounts payable / Cost of goods sold) * 365 days\n    dpo = accounts_payable / cost_of_goods_sales * 365\n    \n    # Cash conversion cycle (CCC) or net operating cycle = DIO + DSO - DPO\n    cash_conversion_cycle = dio + dso - dpo\n    \n    # return answer\n    return cash_conversion_cycle\n```\n\nWhen you run this program, it will calculate the cash conversion cycle (CCC) for the given financial statement information. The CCC is a measure of how long it takes a company to convert its investments in inventory and other resources into cash flows from sales, after accounting for payments to suppliers. A shorter CCC is generally considered better, as it means the company is more efficient at managing its working capital."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "capital_cost = 8000000  # $8 million\nsalvage_value = 10000  # $10,000\nuseful_life = 20  # 20 years\nyear = 2014  # The end of 2014\n\n# Do math calculation to get the answer\ndepreciation_rate = 1 / useful_life\ndepreciation_per_year = (capital_cost - salvage_value) * depreciation_rate\naccumulated_depreciation = depreciation_per_year * (year - 2013)\nbook_value = capital_cost - accumulated_depreciation\n\n# return answer\nreturn book_value\n\n# Call the solution function to check the output\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "outcomes = [7, 8, 9, 10]\n\n# Calculate the mean (expected value)\nmean = sum(outcomes) / len(outcomes)\n\n# Calculate the variance\nvariance = sum((x - mean) ** 2 for x in outcomes) / len(outcomes)\n\n# return answer\nreturn variance\n\n# Call the function to test its output\ntest = solution()\nprint(test)"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "    revenue = 600000\n    avg_account_receivable = 50000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    collection_period = 365 / receivables_turnover\n    \n    # return answer\n    return collection_period\n```\n\nCalling the function `solution()` will return the receivables collection period for ABC Corporation in 2017."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "# Define variables name and value\ncoupon_rate = 0.06 # 6% coupon rate\nyears_to_maturity = 20 # 20 years left until maturity\ninvestment_duration = 8 # Trader's investment duration in years\nduration = 11.470 # Approximate modified duration of the bond in years\n\n# Calculate the duration of the bond in years until it reaches maturity\n# For a coupon bond, the duration until it reaches maturity is simply the years_to_maturity\n\n# Do math calculation to get the answer\nduration_gap = duration - years_to_maturity\n\n# return answer\nreturn duration_gap\n\nsolution()"
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "    price_return = 0.04\n    roll_return = 0.015\n    collateral_required = 0.20\n    free_rate = 0.01\n    position_size = 1500000\n    current = 750\n    longer_term = 500\n    \n    # Do math calculation to get the answer\n    risk_adjusted_return = price_return - roll_return\n    free_cash = position_size * free_rate\n    total_return = risk_adjusted_return * current + free_cash\n    overall_return = total_return / (position_size * collateral_required)\n    \n    # return answer\n    return overall_return\n\nprint(solution())\n```\n\nPlease note that this program assumes that the given data is sufficient to calculate the overall return for the hedge position of Platte River Foods."
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "    current_service_costs = 320\n    past_service_costs = 150\n    employer_contributions = 1200\n    \n    # Do math calculation to get the answer\n    total_cost = current_service_costs + past_service_costs + employer_contributions\n    answer = total_cost\n    \n    # return answer\n    return answer"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "    total_revenue_200_units = 500000  # CHF\n    total_revenue_250_units = 600000  # CHF\n    units_200 = 200\n    units_250 = 250\n\n    # Calculate the marginal revenue attributed to marketing 250 units instead of 200 units\n    marginal_revenue = total_revenue_250_units - total_revenue_200_units\n\n    # Return the per unit marginal revenue attributed to marketing 250 units instead of 200 units\n    return marginal_revenue / (units_250 - units_200)\n```"
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "    shares = 200000\n    share_price_eur = 90\n    spot_rate_initiation = 1.3935  # Assuming the rate closer to the initiation date as the spot rate\n    forward_rate_6m_initiation = -19.0 / -18.3 \n    \n    # Do math calculation to get the answer\n    forward_rate_6m_three_months = -27.0 / -26.2\n    \n    # Calculate the price of shares after three months in EUR using the forward rate for 6 months\n    share_price_eur_three_months = share_price_eur * (1 + forward_rate_6m_three_months / 100)\n    \n    # Convert the share price from EUR to USD using the spot rate three months later\n    share_price_usd_three_months = share_price_eur_three_months * spot_rate_initiation\n    \n    # Calculate the total mark-to-market value in USD\n    total_mtm_value_usd = shares * share_price_usd_three_months\n    \n    # return answer\n    return total_mtm_value_usd\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "spot_1yr = 0.02\nspot_2yr = 0.025\nspot_3yr = 0.035\nspot_4yr = 0.055\n\n# Do math calculation to get the answer\nforward_rate_2yr = (spot_4yr**4) / ((spot_2yr**2) * (spot_3yr**2)) ** (1/4) - 1\nforward_rate_2yr\n\nreturn forward_rate_2yr\n```"
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "    spot_rates = {1: 0.080, 2: 0.090, 3: 0.095}\n    coupon_rate = 0.10\n    face_value = 100 # assuming a face value of $100 for simplicity\n    num_years = 3\n    \n    # Calculate the bond price using discounted cash flows\n    bond_price = 0.0\n    for year in range(1, num_years+1):\n        bond_price += coupon_rate * face_value / (1 + spot_rates[year]) ** year\n    bond_price += face_value / (1 + spot_rates[num_years]) ** num_years\n    \n    # Calculate the yield to maturity\n    yield_to_maturity = (face_value / bond_price) ** (1 / num_years) - 1\n    \n    # return answer\n    return yield_to_maturity\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "unit_margin = 20\nfixed_cost = 500000\ntotal_units = 300000\n\n# Function to calculate DOL (Degree of Operating Leverage)\ndef calculate_dol(units):\n    variable_cost = units * unit_margin\n    total_cost = fixed_cost + variable_cost\n    operating_income = units * unit_margin - fixed_cost\n    dol = (units * unit_margin) / operating_income\n    return dol\n\n# Initialize minimum DOL and corresponding units\nmin_dol = float('inf')\nmin_units = 0\n\n# Iterate through production levels (1 unit to total_units)\nfor units in range(1, total_units + 1):\n    dol = calculate_dol(units)\n    if dol < min_dol:\n        min_dol = dol\n        min_units = units\n\n# return answer\nreturn min_units\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "    initial_inventory_cost = 50  # cost per unit for 2013 inventory\n    initial_units_bought = 2000  # units bought in 2013\n    units_sold_2013 = 1500  # units sold in 2013\n    units_sold_2014 = 500  # units sold in 2014\n    inventory_2014_cost = 60  # cost per unit for 2014 inventory\n    inventory_2014_units = 1000  # units bought in 2014\n    \n    # Calculate the cost of goods sold for 2013 using FIFO\n    cost_of_goods_sold_2013 = initial_inventory_cost * units_sold_2013\n    \n    # Calculate the ending inventory for 2013\n    ending_inventory_2013 = (initial_units_bought - units_sold_2013) * initial_inventory_cost\n    \n    # Calculate the cost of goods sold for 2014 using FIFO\n    cost_of_goods_sold_2014 = inventory_2014_cost * units_sold_2014\n    \n    # Calculate the ending inventory for 2014\n    ending_inventory_2014 = (inventory_2014_units - units_sold_2014) * inventory_2014_cost + ending_inventory_2013\n    \n    # return answer\n    return ending_inventory_2014\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "dirty_price = 104.17  # Dirty price of the base 2%, semi-annual 10-year Treasury note\ndays_since_last_coupon = 30  # Days since the last coupon payment\ndays_to_expiry = 90  # Days to the futures contract's expiry\nquoted_price = 129  # Quoted price for the futures contract\nrisk_free_rate_3m = 1.65 / 100  # Current yearly risk-free rate for three months\nconversion_factor = 0.7025  # Conversion factor\n\n# Calculate the accrued interest (AI)\nAI = dirty_price * (0.02 / 2) * (days_since_last_coupon / 182)\n\n# Calculate the carrying costs (C)\nC = dirty_price * (risk_free_rate_3m / 4) * (days_to_expiry / 182)\n\n# Calculate the convenience yield (Y)\nY = quoted_price * conversion_factor * (risk_free_rate_3m / 4) * (days_to_expiry / 182)\n\n# Calculate the equilibrium quoted 10-year Treasury note futures contract price (P)\nP = dirty_price - AI + C - Y\n\n# return answer\nreturn P"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "    # Define variables name and value\n    bond_info = [\n        {'par_value': 25_000_000, 'bond_price': 105, 'coupon': 0.08, 'modified_duration': 7.9, 'effective_duration': 8, 'convexity': 122},\n        {'par_value': 25_000_000, 'bond_price': 100, 'coupon': 0.07, 'modified_duration': 8.5, 'effective_duration': 8.5, 'convexity': 154},\n        {'par_value': 20_000_000, 'bond_price': 95, 'coupon': 0.05, 'modified_duration': 6.3, 'effective_duration': 2, 'convexity': 87},\n        {'par_value': 30_000_000, 'bond_price': 87, 'coupon': 0, 'modified_duration': 10.2, 'effective_duration': 10.2, 'convexity': 32}\n    ]\n    \n    # Initialize the sum of bond prices and the sum of the product of par value and modified duration\n    sum_bond_prices = 0\n    sum_par_value_modified_duration = 0\n    \n    # Loop through the bond information and calculate the sums\n    for bond in bond_info:\n        sum_bond_prices += bond['bond_price'] * bond['par_value']\n        sum_par_value_modified_duration += bond['par_value'] * bond['modified_duration']\n    \n    # Calculate the weighted average price\n    weighted_average_price = sum_bond_prices / sum_par_value_modified_duration\n    \n    # Calculate the price value of a basis point\n    price_value_of_basis_point = (weighted_average_price / 1000) * 1\n    \n    # return answer\n    return price_value_of_basis_point\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "face_value = 2000000\ncurrent_market_price = 0.75 * face_value\nrisk_free_rate = 0.03\ntime_to_maturity = 1\nstep_size = 100\n\n# Calculate the up and down factors for the binomial tree\nup_factor = np.exp(risk_free_rate * time_to_maturity/step_size + np.sqrt(2*risk_free_rate*time_to_maturity/step_size))\ndown_factor = np.exp(risk_free_rate * time_to_maturity/step_size - np.sqrt(2*risk_free_rate*time_to_maturity/step_size))\n\n# Initialize the binomial tree\ntree = np.zeros((step_size+1, step_size+1))\ntree[:, step_size] = current_market_price\n\n# Fill the binomial tree\nfor i in range(step_size-1, -1, -1):\n    for j in range(i+1):\n        tree[j, i] = tree[j, i+1] * down_factor**(i-j)\n        if j+1 <= i:\n            tree[j+1, i] = tree[j, i+1] * up_factor**(j+1-i)\n\n# Calculate the risk-neutral probability of default\ndefault_prob_step_1 = (tree[1, 0] - face_value) / (2 * (tree[1, 0] - tree[0, 0]))\n\n# Calculate the risk-neutral probability of default for the entire period\ndefault_prob_1year = default_prob_step_1 ** step_size\n\n# return answer\nreturn default_prob_1year"
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "    num_shares_outstanding = 10000000  # 10 million shares\n    EPS = 2.00  # Earnings per share\n    P_E = 20  # Price-to-Earnings ratio\n    book_value_per_share = 30  # Book value per share\n    shares_to_buy_back = 1000000  # 1 million shares\n\n    # Calculate market price per share based on P/E ratio\n    market_price_per_share = EPS * P_E\n\n    # Calculate the total value of shares to be bought back\n    value_of_shares_to_buy_back = shares_to_buy_back * market_price_per_share\n\n    # Calculate the new number of shares outstanding\n    new_num_shares_outstanding = num_shares_outstanding - shares_to_buy_back\n\n    # Calculate the new book value per share after the buyback\n    new_book_value_per_share = (book_value_per_share * num_shares_outstanding + value_of_shares_to_buy_back) / new_num_shares_outstanding\n\n    # Return the answer\n    return new_book_value_per_share\n\n# Call the function to get the answer\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "    principal = 5000000 # Loan amount\n    interest_rate_annual = 0.058 # Yearly discount rate\n    term_years = 10 # Loan term in years\n    payment_frequency = 12 # Payments are made monthly\n    \n    # Calculate monthly interest rate\n    interest_rate_monthly = interest_rate_annual / payment_frequency\n    \n    # Calculate the number of payments\n    n_payments = term_years * payment_frequency\n    \n    # Calculate the monthly payment\n    payment = principal * (interest_rate_monthly * (1 + interest_rate_monthly) ** n_payments) / ((1 + interest_rate_monthly) ** n_payments - 1)\n    \n    # return answer\n    return payment\n```\n\nThis Python program defines the necessary variables for the problem: the principal amount of the loan, the annual interest rate, the term of the loan in years, and the frequency of payments (which are made monthly). It then calculates the monthly interest rate by dividing the annual interest rate by the number of payments per year. The program also calculates the total number of payments by multiplying the term of the loan by the frequency of payments. Finally, it uses the formula for calculating the monthly payment of an amortizing loan (which is common for mortgage loans) to find the initial mortgage repayment at the end of the first month. The answer is returned by the function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "mrra = 1.55 # three-month MRR for 31 March\nmrrb = 1.35 # three-month MRR for 30 June\ndelta = 0.0065 # basis points\n\n# Do math calculation to get the answer\ncoupon_rate_june = mrrb + delta\n\n# return answer\nreturn coupon_rate_june\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "    security_1_weight = 30\n    security_2_weight = 70\n    security_1_sd = 20\n    security_2_sd = 12\n    correlation = 0.40\n    \n    # Calculate portfolio standard deviation\n    portfolio_sd = (security_1_weight ** 2 * security_1_sd ** 2 + security_2_weight ** 2 * security_2_sd ** 2 + 2 * security_1_weight * security_2_weight * security_1_sd * security_2_sd * correlation) ** 0.5\n    \n    # return answer\n    return portfolio_sd\n```"
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "annual_fixed_interest = 0.03\nequity_index_base = 100\nexpiry = 1\nnominal_amount = 100000000\nspot_rates = {\n    0.25: 0.997506,\n    0.5: 0.992556,\n    0.75: 0.985222,\n    1: 0.975610\n}\n\n# Calculate the total present value of the fixed payments\ntotal_present_value = 0\nfor i in spot_rates.keys():\n    total_present_value += (annual_fixed_interest / 4) * nominal_amount / (1 + (annual_fixed_interest / 4)) ** i * spot_rates[i]\n\n# The swap value is zero when the equity index level compensates the total present value of fixed payments\n# So, the equity index level would be (total_present_value * (1 + (annual_fixed_interest / 4)) ** expiry) / nominal_amount + equity_index_base\nequity_index_level = (total_present_value * (1 + (annual_fixed_interest / 4)) ** expiry) / nominal_amount + equity_index_base\n\n# return answer\nreturn equity_index_level\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "    market_value_of_debt = 10e6 # $10 million\n    market_capitalization = 45e6 # $45 million\n    cash_short_investments = 2.5e6 # $2.5 million\n    ebitda = 15e6 # $15 million\n    tax_rate = 0.40 # 40%\n\n    # Calculate Enterprise Value\n    enterprise_value = market_capitalization + market_value_of_debt - cash_short_investments\n\n    # Calculate net income after tax\n    net_income = ebitda - (ebitda * tax_rate)\n\n    # Calculate EV/EBITDA multiple\n    ev_ebitda_multiple = enterprise_value / net_income\n\n    # return answer\n    return ev_ebitda_multiple\n```\n\nWhen you run the `solution()` function, it will calculate the Enterprise Value (EV) from the provided market capitalization, market value of debt, and cash and short-term investments. Then it calculates the net income after tax by applying the firm's marginal tax rate to the EBITDA. Finally, it calculates the EV/EBITDA multiple by dividing the Enterprise Value by the net income after tax."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "import math\n\ndef solution():\n    # Define variables name and value\n    future_value = 5000\n    years = 3\n    discount_rate = 0.05 / 12  # monthly compounding\n    \n    # Do math calculation to get the answer\n    present_value = future_value / math.pow((1 + discount_rate), (years * 12))\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate_3m_ask = 0.7344\n    forward_rate_6m_ask = 0.7343 + 30/100\n    forward_received_amount = 5000000\n    forward_exchanged_amount_6m_ago = 5000000 / (0.7343 + 29/100)\n    \n    # Do math calculation to get the answer\n    mark_to_market_gain = forward_received_amount * (forward_rate_6m_ask - forward_rate_3m_ask) / forward_exchanged_amount_6m_ago\n    answer = mark_to_market_gain\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "    estimated_12_months_cash_NOI = 267000\n    ffo = 290612\n    cash_and_equivalents = 230850\n    accounts_receivable = 282150\n    debt_and_other_liabilities = 2013500\n    non_cash_rents = 24702\n    recurring_maintenance_capital_expenditures = 60852\n    shares_outstanding = 67900\n    assumed_cap_rate = 0.0625\n    property_subsector_average_PFFO_multiple = 13.5\n    \n    # Calculate dividend\n    expected_dividend_next_year = 2.25\n    dividend_growth_rate_years_2_and_3 = 0.04\n    dividend_growth_rate_perpetuity = 0.035\n    \n    # Calculate AFFO (Assumed Free Flowing Cash)\n    affo = ffo + non_cash_rents - recurring_maintenance_capital_expenditures\n    \n    # Calculate P/FFO and P/AFFO ratios\n    ffo_price = assumed_cap_rate * ffo / 100 * property_subsector_average_PFFO_multiple\n    \n    # Calculate dividend for years 1, 2, and 3\n    dividend_year_1 = expected_dividend_next_year\n    dividend_year_2 = dividend_year_1 * (1 + dividend_growth_rate_years_2_and_3)\n    dividend_year_3 = dividend_year_2 * (1 + dividend_growth_rate_years_2_and_3)\n    \n    # Calculate perpetuity dividend starting from year 4\n    dividend_perpetuity = dividend_year_3 * (1 + dividend_growth_rate_perpetuity) / (assumed_cap_rate - dividend_growth_rate_perpetuity)\n    \n    # Calculate present value of dividends\n    dividend"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "output": [
            "    year_end_equity_firm_a = 10000000\n    net_income_firm_a = 750000\n    tax_rate = 0.25\n    printer_cost = 300000\n    depreciation_per_year = printer_cost / 3\n    \n    # Do math calculation to get the answer\n    net_income_firm_b = net_income_firm_a + depreciation_per_year * 2  # Adjust for the depreciation expense Firm B would not have\n    tax = net_income_firm_b * tax_rate\n    income_after_tax_firm_b = net_income_firm_b - tax\n    return_on_equity_firm_b = income_after_tax_firm_b / year_end_equity_firm_a\n    \n    # return answer\n    return return_on_equity_firm_b\n```\n\nThis Python function calculates Firm B's return on equity based on the given conditions. It adjusts the net income of Firm A by adding back the annual depreciation expense for Firm B, which would not have depreciated the printer. Then it calculates the tax and income after tax for Firm B, and finally, it computes the return on equity by dividing the income after tax by the year-end equity."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "S = 85\nK = 90\nr = 0.05\nc = 10\np = 15\n\n# Do math calculation to get the answer\nd1 = (np.log(S / K) + (r + 0.5 * delta**2) * T) / (delta * np.sqrt(T))\nd2 = d1 - delta * np.sqrt(T)\n\n# Calculate the continuous dividend yield using the put-call parity\ndelta = (c - p - S * np.exp(-r * T) + K * np.exp(-r * T)) / (K * T * np.exp(-r * T) * np.abs(d2))\n\n# return answer\nreturn delta\n\n<|im_end|>"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "change_in_spread = 100  # basis points\nbond_duration = 6.0\nbond_convexity = 55.0\n\n# Convert basis points to a decimal\nchange_in_spread = change_in_spread / 10000\n\n# Calculate the modified duration\nmodified_duration = bond_duration - (bond_convexity / (2 * (change_in_spread ** 2)))\n\n# Calculate the effect on the return\neffect_on_return = modified_duration * change_in_spread\n\n# return answer\nreturn effect_on_return\n\nprint(solution())"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "    coupon_rate = 0.05  # 5% annual coupon rate\n    years_to_maturity = 3  # 3 years left until maturity\n    z_spread = 0.0234  # 234 basis points Z-spread\n    time_to_maturity_years = {1: 1, 2: 2, 3: 3}  # Time to maturity in years\n    spot_rates = {1: 0.0486, 2: 0.0495, 3: 0.0565}  # Spot rates for each year\n    face_value = 1000  # Assuming face value of $1000 (could be any value)\n\n    # Calculate the discount rate for each year, considering the Z-spread\n    discount_rates = {key: value + z_spread for key, value in spot_rates.items()}\n\n    # Initialize the bond value as 0\n    bond_value = 0\n\n    # Calculate the present value of the coupons\n    for year, rate in discount_rates.items():\n        if year <= years_to_maturity:\n            coupon_payment = face_value * coupon_rate\n            discount_factor = 1 / (1 + rate)**year\n            bond_value += coupon_payment * discount_factor\n\n    # Calculate the present value of the face value\n    for year, rate in discount_rates.items():\n        if year == years_to_maturity + 1:\n            discount_factor = 1 / (1 + rate)**(years_to_maturity + 1)\n            face_value_present_value = face_value * discount_factor\n            bond_value += face_value_present_value\n\n    # return answer\n    return bond_value\n\n# Test the function\nprint(solution())\n```\n\nThis program calculates the bond's worth based on the given coupon rate, years to maturity, and Z-spread. It uses the spot rates provided to calculate the discount rates for each year, then calculates the present value of the coupons and the face value to find the total bond value.\n\nPlease note that this program assumes a face value of $"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "beta = 0.65\nrisk_free_rate = 0.03\nmarket_return = 0.09\n\n# Do math calculation to get the answer\nexpected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n\n# return answer\nreturn expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "duration = 10.3829\nconvexity = 141.217\nyield_change = -0.005  # -50 bps is a decrease in yield\n\n# Do math calculation to get the answer\nprice_change = (yield_change * duration) + (0.5 * (yield_change ** 2) * convexity)\npercentage_price_change = price_change / 100\n\n# return answer\nreturn percentage_price_change\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "    # Calculate the current market value of equity and debt\n    revenue = 10  # annual coupon payment from bonds\n    face_value = 10000000  # face value of bonds\n    coupon_rate = 0.08  # annual coupon rate\n    yield_rate = 0.1365  # yield rate of bonds\n    years_to_maturity = 5  # years left to maturity\n    equity_shares = 1200000  # number of common shares outstanding\n    risk_free_rate = 0.03  # risk-free interest rate\n    market_return = 0.10  # expected market return\n    beta = 2.2  # stock beta\n    tax_rate = 0.30  # marginal tax rate\n    \n    # Calculate the market value of equity\n    cost_of_equity = risk_free_rate + beta * (market_return - risk_free_rate)\n    market_value_of_equity = equity_shares * $10  # new shares at $10 per share\n    \n    # Calculate the market value of debt\n    market_value_of_debt = face_value * (1 - ((1 + yield_rate/2)**(-2*years_to_maturity))) / (yield_rate/2)\n    \n    # Calculate the initial debt-to-equity ratio\n    initial_debt_to_equity = market_value_of_debt / market_value_of_equity\n    \n    # Calculate the amount of new debt issuance to maintain the same debt-to-equity ratio\n    new_debt_market_value = $7.5 million * (initial_debt_to_equity - (1/new_debt_to_equity))\n    \n    # Calculate the cost of the new debt issuance\n    if new_debt_market_value <= $2.5 million:\n        new_debt_yield = 0.1365\n    else:\n        new_debt_yield = 0.16\n    new_debt_cost = new_debt_yield * (1 - tax_rate)\n    \n"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "    coupon_rate = 0.08\n    time_to_maturity = 3\n    spot_rates = {1: 0.07, 2: 0.08, 3: 0.09}\n\n    # Calculate the coupon payment\n    coupon_payment = coupon_rate / time_to_maturity * 1000  # Assuming face value of $1000\n\n    # Calculate the present value of future coupon payments\n    present_value_of_coupon_payments = 0\n    for i in range(1, time_to_maturity+1):\n        present_value_of_coupon_payments += coupon_payment / (1 + spot_rates[i]) ** i\n\n    # Calculate the present value of the principal\n    present_value_of_principal = 1000 / (1 + spot_rates[time_to_maturity]) ** time_to_maturity\n\n    # Calculate the bond price\n    bond_price = present_value_of_coupon_payments + present_value_of_principal\n\n    # return answer\n    return bond_price\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "output": [
            "acquisition_cost = 360 * 10**6 # Japan Yen\ngoodwill = 100 * 10**6 # Japan Yen\ninterest_rate = 0.1 # 10%\n\n# Depreciate goodwill over 5 years\ndepreciation_goodwill = goodwill * (1 - (1 + interest_rate)**(-5)) / interest_rate\n\n# Calculate depreciation for the licenses\nlicense_amortization = (acquisition_cost - goodwill) / 5\n\n# Sum up the depreciation and amortization expenses\nclearwater_depreciation_amortization = 106 + license_amortization + depreciation_goodwill\n\n# return answer\nreturn clearwater_depreciation_amortization\n```"
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "initial_value = 87.1876\ntwo_year_shift = 87.3212\nfive_year_shift = 87.2545\nten_year_shift = 87.1454\nthirty_year_shift = 87.3454\n\n# Do math calculation to get the answer\nkey_rate_01_10years = (ten_year_shift - initial_value) / 1\n\n# return answer\nreturn key_rate_01_10years\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.143,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "    P_A = 0.20     # Probability of bankruptcy\n    P_B = 0.70     # Probability of getting a \"good\" rating\n    P_B_given_A = 0.50    # Probability of getting a \"good\" rating given bankruptcy\n    \n    # Do math calculation to get the answer using Bayes' formula\n    P_A_given_B = P_B_given_A * P_A / P_B\n    \n    # return answer\n    return P_A_given_B\n\nprint(solution())\n\n# Output\n# 0.4000000000000001\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "desired_future_value = 100000\nannual_interest_rate = 0.025\ncompounding_periods_per_year = 52  # weekly compounding\nnumber_of_years = 1\n\n# Do math calculation to get the answer\npresent_value = desired_future_value / ((1 + annual_interest_rate / compounding_periods_per_year) ** (compounding_periods_per_year * number_of_years))\n\n# return answer\nreturn present_value\n\nprint(solution())"
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "EPS_2017 = 1.03\nEPS_2016 = 0.89\ntrailing_PE = EPS_2016 / EPS_2017\n\ndef solution():\n    # Define variables name and value\n    trailing_PE = EPS_2016 / EPS_2017\n    \n    # Do math calculation to get the answer\n    answer = trailing_PE\n    \n    # return answer\n    return answer\n\nprint(solution())"
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "    net_income = 875000  # Net income for 2018 in thousands\n    depreciation = 400000  # Depreciation expense for 2018 in thousands\n    change_in_accounts_receivable = 800000 - 750000  # Change in accounts receivable from 2017 to 2018 in thousands\n    interest_expense = 350000  # Interest expense for 2018 in thousands\n    change_in_accounts_payable = 400000 - 300000  # Change in accounts payable from 2017 to 2018 in thousands\n    \n    # Calculate FCFE\n    FCFE = (net_income + depreciation - change_in_accounts_receivable + interest_expense + change_in_accounts_payable) / 1000  # Convert back to millions\n    \n    # return answer\n    return FCFE\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "human_capital = 1200000\nfinancial_capital = 600000\ntotal_portfolio = human_capital + financial_capital\nstock_allocation = 0.3 * total_portfolio\nhuman_to_stock_similarity = 0.25 * human_capital\nfinancial_capital_to_stock = (stock_allocation - human_to_stock_similarity)\n\n# Do math calculation to get the answer\nequity_allocation = financial_capital_to_stock / financial_capital\n\n# return answer\nreturn equity_allocation"
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "    sales_2014 = 2125  # Sales in thousands\n    inventory_LIFO_2014 = 312  # End of year inventories in LIFO, in thousands\n    lifo_reserve_2014 = 82  # LIFO Reserve in thousands\n    net_profit_margin_2014 = 0.049  # Net profit margin for 2014\n    corporate_tax_rate = 0.30  # Corporate tax rate\n    \n    # Calculate the net income under LIFO for 2014\n    lifo_net_income_2014 = (sales_2014 - inventory_LIFO_2014 + lifo_reserve_2014) * net_profit_margin_2014\n    \n    # Calculate the tax amount for LIFO net income\n    lifo_tax_amount_2014 = lifo_net_income_2014 * corporate_tax_rate\n    \n    # Calculate the after-tax LIFO net income\n    lifo_after_tax_net_income_2014 = lifo_net_income_2014 - lifo_tax_amount_2014\n    \n    # Calculate the FIFO net income by ignoring the LIFO reserve\n    fifo_net_income_2014 = (sales_2014 - inventory_LIFO_2014) * net_profit_margin_2014\n    \n    # Calculate the tax amount for FIFO net income\n    fifo_tax_amount_2014 = fifo_net_income_2014 * corporate_tax_rate\n    \n    # Calculate the after-tax FIFO net income\n    fifo_after_tax_net_income_2014 = fifo_net_income_2014 - fifo_tax_amount_2014\n    \n    # Calculate the difference in after-tax net income\n    diff_net_income = fifo_after_tax_net_income_2014 - lifo_after_tax_net_income_"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "spot_rate_1 = 0.0102\nspot_rate_2 = 0.0165\nspot_rate_3 = 0.0215\n\n# Do math calculation to get the answer\nforward_rate = ((1 + spot_rate_3)**3 / (1 + spot_rate_2)**2) ** (1/2) - 1\n\n# return answer\nreturn round(forward_rate * 100, 4)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "    S = 48.6  # Current stock price\n    K = 45  # Strike price\n    sigma = 0.30  # Volatility\n    r = 0.003  # Risk-free rate\n    T = 0.25  # Time to maturity\n    N_d1 = 0.6352  # N(d1)\n    N_d2 = 0.5486  # N(d2)\n    \n    # Do math calculation to get the answer\n    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    \n    # Calculate the price of the put option using the Black-Scholes-Merton formula\n    put_price = N_d1 * (-K * np.exp(-r*T)) - N_d2 * (-K * np.exp(-r*T))\n\n    # return answer\n    return put_price\n\n# Test the function\nprint(solution())"
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "    observations = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    \n    # Calculate the mean of the observations\n    mean = sum(observations) / len(observations)\n    \n    # Calculate the squared difference from the mean for each observation\n    squared_diff = [(x - mean) ** 2 for x in observations]\n    \n    # Calculate the sample variance\n    sample_variance = sum(squared_diff) / (len(observations) - 1)\n    \n    # Calculate the sample standard deviation\n    sample_standard_deviation = (sample_variance)**0.5\n    \n    # return answer\n    return sample_standard_deviation\n\nprint(solution())\n```\n\nThis program defines the observations as a list, calculates the mean, then the squared differences from the mean for each observation. It then calculates the sample variance and standard deviation, and finally returns the sample standard deviation. When you run the program, it will output the sample standard deviation of the provided data."
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "    portfolio_weights = [30, 30, 20, 10, 10]\n    benchmark_weights = [24, 20, 20, 18, 18]\n    returns = [14, 15, 12, 8, 10]\n    benchmark_return = sum([returns[i] * benchmark_weights[i] / 100 for i in range(len(returns))]) / sum(benchmark_weights) * 100\n    portfolio_return = sum([returns[i] * portfolio_weights[i] / 100 for i in range(len(returns))]) / sum(portfolio_weights) * 100\n    value_added = portfolio_return - benchmark_return\n    \n    # return answer\n    return value_added\n```\nThis Python program calculates the value added (active return) for the Kurok Fund based on the given portfolio weights, benchmark weights, and returns for each stock. The benchmark return is first calculated by multiplying the benchmark weights with the respective returns and then dividing by the sum of benchmark weights. The portfolio return is calculated in a similar way, but using the portfolio weights. Finally, the value added is obtained by subtracting the benchmark return from the portfolio return."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "    pool1_value = 1_000_000\n    pool1_maturity = 30  # in days\n    \n    pool2_value = 2_000_000\n    pool2_maturity = 90  # in days\n    \n    pool3_value = 3_000_000\n    pool3_maturity = 180  # in days\n    \n    pool4_value = 4_000_000\n    pool4_maturity = 360  # in days\n    \n    # Calculate the weighted maturity for each pool\n    weighted_maturity1 = pool1_value * pool1_maturity\n    weighted_maturity2 = pool2_value * pool2_maturity\n    weighted_maturity3 = pool3_value * pool3_maturity\n    weighted_maturity4 = pool4_value * pool4_maturity\n    \n    # Calculate the total value and the weighted maturity\n    total_value = pool1_value + pool2_value + pool3_value + pool4_value\n    weighted_total_maturity = weighted_maturity1 + weighted_maturity2 + weighted_maturity3 + weighted_maturity4\n    \n    # Calculate the WAM\n    WAM = weighted_total_maturity / total_value\n    \n    # return answer\n    return WAM\n```"
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "    sugar_goods_nov = 70 * 0.90\n    cotton_goods_nov = 60 * 0.60\n    sugar_goods_dec = 120 * 1.00\n    cotton_goods_dec = 50 * 0.80\n    \n    # Calculate the value of the consumption basket for each month\n    consumption_basket_nov = sugar_goods_nov + cotton_goods_nov\n    consumption_basket_dec = sugar_goods_dec + cotton_goods_dec\n    \n    # Calculate the weighted total for the consumption basket for November as the base period\n    paasche_index = (consumption_basket_dec / consumption_basket_nov) * 100\n    \n    # return answer\n    return round(paasche_index, 2)\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "    initial_value = 1.0 # assume initial value is 1.0 for simplicity\n    first_year_return = 0.09 # 9% return in the first year\n    second_year_return = 0.05 # 5% return in the second year\n    third_year_return = 0.08 # 8% return in the third year\n    capital_gains_tax = 0.25 # 25% capital gains tax rate\n    \n    # Compute after-tax returns for each year\n    after_tax_first_year = (1 + first_year_return) * (1 - capital_gains_tax)\n    after_tax_second_year = (1 + second_year_return) * (1 - capital_gains_tax)\n    after_tax_third_year = (1 + third_year_return) * (1 - capital_gains_tax)\n    \n    # Calculate the post-liquidation return for the three years\n    post_liquidation_returns = after_tax_first_year * after_tax_second_year * after_tax_third_year\n    \n    # Compute the annualized after-tax post-liquidation return\n    annualized_post_liquidation_return = (post_liquidation_returns ** (1.0 / 3.0)) - 1\n    \n    # return answer\n    return annualized_post_liquidation_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "    base_asset_rate = 50\n    risk_free_rate = 0.04\n    contract_duration_in_years = 0.25\n    advantages_value = 5\n    disadvantages_value = 6\n    \n    # Do math calculation to get the answer\n    forward_price = base_asset_rate * (1 + risk_free_rate * contract_duration_in_years) + advantages_value - disadvantages_value\n    \n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "hong_kong_dollars_to_yuan = 1.1757\naustralian_dollars_to_yuan = 5.0765\n\n# Do math calculation to get the answer\nhong_kong_dollars_to_australian_dollars = australian_dollars_to_yuan / hong_kong_dollars_to_yuan\n\n# return answer\nreturn hong_kong_dollars_to_australian_dollars\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "annual_payment = 100000\ninterest_rate = 0.055\nyears = 40\n\n# Do math calculation to get the answer\npresent_value = annual_payment * (1 - (1 / (1 + interest_rate) ** years)) / interest_rate\nanswer = present_value\n\n# return answer\nreturn answer\n\nsolution()"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "Security1_Weight = 0.4\nSecurity2_Weight = 0.6\nSecurity1_sDev = 0.3\nSecurity2_sDev = 0.15\ncorrelation = 0.25\n\n# Calculate portfolio standard deviation\nportfolio_sDev = ((Security1_Weight ** 2) * (Security1_sDev ** 2)) + \n                 ((Security2_Weight ** 2) * (Security2_sDev ** 2)) + \n                 (2 * Security1_Weight * Security2_Weight * Security1_sDev * Security2_sDev * correlation)\n    \n# rounding to 2 decimal places\nportfolio_sDev = round(portfolio_sDev, 2)\n    \n# return answer\nreturn portfolio_sDev\n\n# Call the function to print the result\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "    sale_price = 1000\n    production_cost = 300\n    \n    # In the sum-of-value-added approach, the value of the final step in creating the artwork is the sale price minus the production cost\n    final_step_value_added = sale_price - production_cost\n    \n    # return final_step_value_added\n    return final_step_value_added\n\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "    annual_rate = 0.1431 # yearly rate for the stock market\n    compoundings_per_year = 4 # compounded quarterly\n\n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + annual_rate / compoundings_per_year) ** compoundings_per_year - 1\n    \n    # return answer\n    return effective_annual_rate * 100 # multiply by 100 to get percentage\n```"
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "    market_value = 240000000 # AUD 240 million\n    roe = 6.0 # average annual real earnings growth\n    rpi = 2.3 # average annual inflation rate\n    equity_market_pe = 14.5 # current equity market P/E\n    \n    # Do math calculation to get the answer using Grinold–Kroner model\n    # The formula for the Grinold–Kroner model is: \n    # anticipated_return = (roe / equity_market_pe) * (1 + rpi)\n    anticipated_return = (roe / equity_market_pe) * (1 + rpi)\n    \n    # return answer\n    return anticipated_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "variance_x = 0.25\nvariance_y = 0.64\ncorrelation = 0.09\n\n# Do math calculation to get the answer\ncovariance = correlation * (variance_x ** 0.5) * (variance_y ** 0.5)\n\n# return answer\nreturn covariance\n\n# Example usage:\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "effective_annual_return = 0.09\n\n# Do math calculation to get the answer\nbond_equivalent_return = ((1 + effective_annual_return) ** (365/365)) - 1\n\n# return answer\nreturn bond_equivalent_return"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "cost = 50000\nresidual_value = 5000\nuseful_life = 10\n\n# Calculate double declining rate\ndouble_declining_rate = 2 / useful_life\n\n# Calculate depreciation for the year 2016\ndepreciation_2016 = double_declining_rate * cost\n\n# return answer\nreturn depreciation_2016\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "eur_gbp_rate = 0.8878\n\n# Do math calculation to get the exchange rate for GBP in Frankfurt (EUR/GBP)\ngbp_euro_rate = 1 / eur_gbp_rate\n\n# return answer\nreturn gbp_euro_rate\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "    risk_free_rate = 0.04\n    bond_yield = 0.06\n    recovery_rate = 0.7\n    \n    # Calculate the probability of default using the bond interest rate formula\n    # Default = Bond yield - Risk-free rate\n    #          --------------------------\n    #           1 - Recovery rate\n    default_probability = (bond_yield - risk_free_rate) / (1 - recovery_rate)\n    \n    # return answer\n    return default_probability\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "primary_borrowing = 1.3 * 1e9  # $1.3 billion\npredicted_profit_rate = 0.07\ndirect_operation_cost = 6 * 1e6  # $6 million\nconsumer_deposit = 1.3 * 1e9  # $1.3 billion\ndeposit_interest_rate = 0.05\nexpected_loss_rate = 0.003\nunexpected_loss_rate = 0.08\nrisk_free_rate = 0.015\ntax_rate = 0.25\n\n# Calculate profit before tax\nprofit_before_tax = predicted_profit_rate * primary_borrowing\n\n# Calculate opportunity charge\nopportunity_charge = consumer_deposit * deposit_interest_rate\n\n# Calculate loss given default (LGD)\nLGD = 1 + unexpected_loss_rate\n\n# Calculate expected loss (EL)\nEL = primary_borrowing * expected_loss_rate\n\n# Calculate risk component (RC)\nRC = LGD * EL\n\n# Calculate risk-adjusted巴杂乱无章\\门\\留\\琉\\璺巴杂乱无章巴杂乱无章巴杂乱无章巴杂乱无章巴杂乱无章巴杂乱中虑度\nRAROC = (profit_before_tax - opportunity_charge - direct_operation_cost - RC) / (RC * risk_free_rate)\n\n# Calculate RAROC after tax\nRAROC_after_tax = RAROC * (1 - tax_rate)\n\n# return answer\nreturn RAROC_after_tax"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "car_plans = 0.70  # percentage of clients with a car insurance plan\nhouse_plans = 0.50  # percentage of clients with a house insurance plan\nboth_plans = 0.20  # percentage of clients with both plans\n\ncar_renew = 0.40  # percentage of clients with only a car insurance plan that will renew\nhouse_renew = 0.70  # percentage of clients with only a house insurance plan that will renew\nboth_renew = 0.80  # percentage of clients with both a car and a house insurance plan that will renew\n\n# Calculate the percentage of clients that will renew at least one plan next year\nsingle_car_renew = car_plans * (1 - both_plans) * car_renew  # percentage of clients with only a car plan that will renew\nsingle_house_renew = house_plans * (1 - both_plans) * house_renew  # percentage of clients with only a house plan that will renew\nboth_plans_renew = both_plans * both_renew  # percentage of clients with both a car and a house plan that will renew\n\ntotal_renew = single_car_renew + single_house_renew + both_plans_renew  # total percentage of clients that will renew at least one plan\n\n# return answer\nreturn total_renew * 100  # convert the percentage to a whole number by multiplying by 100\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "par_value = 1000 # The par value of the bond\ncoupon_rate = 0.1 # The annual coupon rate of the bond\ncoupon = par_value * coupon_rate # Calculate the annual coupon payment\ndate = '2023-01-01' # The current date\nterms = [(1, 0.06), (2, 0.08), (3, 0.10)] # The number of years and their corresponding forward rates\n\n# Initialize the bond price\nbond_price = 0\n\n# Calculate the bond price using the given forward rates\nfor i in range(3):\n    years, rate = terms[i]\n    # Calculate the numerator of the present value of the coupon payment\n    coupon_payment = coupon / ((1 + rate)**years)\n    # Calculate the present value of the coupon payment and add it to the total bond_price\n    bond_price += coupon_payment\n    # Calculate the present value of the par value and add it to the total bond_price\n    par_value_payment = par_value / ((1 + rate)**years)\n    bond_price += par_value_payment\n\n# return answer\nreturn round(bond_price, 2)\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "growth_labor_input = 0.009  # 0.9% per year\ngrowth_labor_productivity = 0.015  # 1.5% per year\ninflation = 0.021  # 2.1%\ndividend_yield = 0.0225  # 2.25%\n\n# Use the formula derived from the Fisher adjustment and Dividend Discount Model to calculate continuously compounded long-term US equity returns\n# The formula is: re = rf + dividend yield - inflation + (growth of labor input + growth of labor productivity - 2 x growth of labor input x growth of labor productivity)\n# Where re is the expected return for equities, rf is the risk-free rate (which we assume to be zero in this case for simplicity), and the rest are the other components.\n\nequity_returns = (growth_labor_input + growth_labor_productivity - 2 * growth_labor_input * growth_labor_productivity) + dividend_yield - inflation\n\n# return answer\nreturn equity_returns\n\n# Call the function to test\nprint(solution())\n```\nThis Python program calculates the continuous compounded long-term US equity returns using the given inputs. It assumes that the risk-free rate is zero for simplicity's sake. The formula used is derived from the Fisher adjustment and the Dividend Discount Model and considers the growth of labor input, labor productivity, inflation, and dividend yield. The program then prints the solution to the terminal."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "    initial_allocation_in_equity = 0.80  # initial allocation to equity\n    final_allocation_in_equity = 0.60  # final allocation to equity\n    retirement_fund_size = 100 * 1e7  # retirement fund size in $ million\n    stock_index_value = 1200  # stock index value\n    future_multiplier = 250  # multiplier of a stock index futures contract\n    target_exposure_beta = 0.95  # target beta of the portfolio after adjustment\n    equity_beta = 1.2  # beta of equity\n\n    # Calculate the initial exposure to equity\n    initial_exposure_to_equity = retirement_fund_size * initial_allocation_in_equity\n\n    # Calculate the initial beta of the portfolio\n    initial_portfolio_beta = equity_beta * initial_allocation_in_equity\n\n    # Calculate the number of futures contracts needed to achieve the target beta\n    # First, find the number of futures = (target portfolio beta - initial portfolio beta) / (futures beta - 1) * initial_exposure_to_equity / futures price\n    num_futures = (target_exposure_beta - initial_portfolio_beta) / (futures_beta - 1) * initial_exposure_to_equity / future_price\n\n    # return answer\n    return num_futures\n```"
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "beta_b = 1.0  # As per the CAPM, the beta for the market is always 1.0\nreturn_b = 0.114  # Anticipated return for Share B\nrf = 0.03  # Risk-free rate\n\n# Using the Capital Asset Pricing Model (CAPM) formula:\n# E(Ri) = Rf + Beta * (E(RM) - Rf)\n\n# For Share B (assuming it represents the market since no other security has a beta of 1.0):\n# 0.114 = 0.03 + 1.0 * (E(RM) - 0.03)\n\n# Solving for E(RM) (the expected return for the market)\nmarket_return = (return_b - rf) + rf  # Simplifying the equation\n\n# return answer\nreturn market_return\n```"
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "    purchase_price = 32500\n    freight_insurance = 2100\n    installation = 800\n    testing = 500\n    training = 1000\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_insurance + installation + testing + training\n    \n    # return answer\n    return total_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "    carried_interest_rate = 0.20\n    total_pledged_capital = 100000000  # $100 million\n    total_paid_in_capital = 90000000   # $90 million\n    total_distributions = 30000000     # $30 million\n    year_end_nav_before_distributions = 160000000  # $160 million\n    year_end_nav_after_distributions = 130000000   # $130 million\n    projected_nav_next_year = 250000000            # $250 million\n    \n    # Calculate the unrealized gains\n    unrealized_gains = projected_nav_next_year - year_end_nav_after_distributions\n    \n    # Calculate the forecasted carried interest\n    forecasted_carried_interest = unrealized_gains * carried_interest_rate\n    \n    # Return the forecasted carried interest\n    return forecasted_carried_interest\n```\n\nNow, you can call the `solution()` function to get the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "    principal = 75000\n    rate = 0.07\n    time = 6\n    compoundings_per_year = 4\n    \n    # Do math calculation to get the answer\n    interest_rate_per_compounding = rate / compoundings_per_year\n    time_in_years = time * compoundings_per_year\n    \n    future_value = principal * (1 + interest_rate_per_compounding) ** time_in_years\n    \n    # return answer\n    return future_value\n```\n\nThe program calculates the future value of an investment by using the formula for compound interest. It defines the principal amount, interest rate, time period, and the number of compoundings per year. It then calculates the rate per compounding and the total time in years. Finally, it uses these values to calculate the future value of the investment and returns this value."
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "revaluation_balance = 10000  # Revaluation balance at the start of 2014\noriginal_acquisition_cost = 8000  # Original acquisition cost in millions\noriginal_accumulated_depreciation = 1200  # Accumulated depreciation at the end of 2013\noriginal_net_balance = 6800  # Net balance at the end of 2013\nnew_estimated_life = 20  # New estimated life for the asset\ntax_rate = 0.3  # Tax rate\n\n# Calculate the tax basis for the revalued asset at the start of 2014\ntax_basis = original_acquisition_cost - original_accumulated_depreciation\n\n# Calculate the tax depreciation for the remaining life of the original estimated life\noriginal_remaining_life = original_estimated_life - (2014 - 2011)  # Assuming 2011 was the first year of depreciation\noriginal_tax_depreciation = original_remaining_life * original_accumulated_depreciation / original_estimated_life\n\n# Calculate the carrying value of the asset at the end of 2013\ncarrying_value = original_net_balance + original_accumulated_depreciation\n\n# Calculate the deferred tax asset accumulated at the end of 2013\ndeferred_tax_asset = original_remaining_life * carrying_value * tax_rate / original_estimated_life\n\n# Calculate the deferred tax asset for the revaluation at the end of 2014\nnew_deferred_tax_asset = new_estimated_life * revaluation_balance * tax_rate / 20\n\n# Calculate the total deferred tax asset at the end of 2014\ndeferred_tax_asset_end_2014 = deferred_tax_asset + new_deferred_tax_asset\n\n# Calculate the total deferred tax liability at the end of 2014\ndeferred_tax_liability_end_2014 = (revaluation_balance - original_net_balance) * tax_rate\n\n# Calculate the change in deferred tax liability from the end of 2"
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "    probability = [0.05, 0.7, 0.25]\n    sales = [70, 40, 25]\n    \n    # Do math calculation to get the expected value of sales\n    expected_value = sum(p*s for p, s in zip(probability, sales))\n    \n    # Calculate the variance of sales\n    variance = sum(p*(s-expected_value)**2 for p, s in zip(probability, sales))\n    \n    # Calculate the standard deviation of sales\n    standard_deviation = variance ** 0.5\n    \n    # return answer\n    return standard_deviation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "pension_contribution = 1200\npbo_beginning = 45000\npbo_ending = 43500\nassets_beginning = 40800\nassets_ending = 39650\n\n# Calculate the actuarial present value of benefits (APV)\napv_beginning = pbo_beginning - assets_beginning - pension_contribution\napv_ending = pbo_ending - assets_ending - pension_contribution\n\n# Calculate the overall recurring pension cost\nrecurring_pension_cost = apv_beginning - apv_ending\n\n# return answer\nreturn recurring_pension_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "    investment1 = 500  # Investment in year 1\n    investment2 = 600  # Investment in year 2\n    investment3 = 1000  # Investment in year 3\n    return1 = 0.12  # Return for investment in year 1 (12%)\n    return2 = 0.05  # Return for investment in year 2 (5%)\n    return3 = 0.01  # Return for investment in year 3 (1%)\n    \n    # Do math calculation to get the answer\n    # The holding period return is the total return from all investments\n    total_investment = investment1 + investment2 + investment3  # Total amount invested\n    total_return = (investment1 * return1) + (investment2 * return2) + (investment3 * return3)  # Total return from all investments\n    holding_period_return = total_return / total_investment  # Calculate holding period return\n    \n    # return answer\n    return holding_period_return\n\n# Call the function to get the answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "common_shares = 60000\nwarrants = 5000\nconversion_price = 25\n\n# Calculate the number of shares that would be issued if all warrants are exercised\nconvertible_shares = warrants * (conversion_price / 30)\n\n# Calculate the total number of shares for diluted EPS (considering the effect of convertible securities)\ntotal_shares = common_shares + convertible_shares\n\ndef solution():\n    # Define variables name and value\n    common_shares = 60000\n    warrants = 5000\n    conversion_price = 25\n    convertible_shares = warrants * (conversion_price / 30)\n    total_shares = common_shares + convertible_shares\n    \n    # Do math calculation to get the answer\n    \n    # return answer\n    return total_shares\n\n# Call the function to get the answer\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "    eps = 2  # projected earnings per share\n    current_price = 40  # current share price\n    \n    # Do math calculation to get the answer\n    pe_ratio = current_price / eps\n    \n    # return answer\n    return pe_ratio\n```"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "    performance_figures = {\n        '1 Year': 0.053,\n        '3 Years': 0.062,\n        '5 Years': 0.047,\n        'Since Inception': 0.044\n    }\n\n    drawdown_high = 0.102\n    drawdown_mean = 0.068\n\n    # Do math calculation to get the answer\n    calmar_ratio = performance_figures['Since Inception'] / -drawdown_mean\n\n    # return answer\n    return calmar_ratio\n```"
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "    traded_shares = 500\n    trade_cycle = 20\n    duration = 60\n    prev_day_similar = True\n    \n    # Define the trade data\n    trade_data = {\n        'Trade': [1, 2],\n        'Trade Price': [41.50, 41.75],\n        'Prevailing Bid': [41.45, 41.73],\n        'Prevailing Offer': [41.50, 41.75]\n    }\n    \n    # Calculate the total number of trades\n    total_trades = duration // trade_cycle\n    \n    # Calculate the average effective spread\n    average_effective_spread = 0\n    for i in range(total_trades):\n        average_effective_spread += trade_data['Trade Price'][i] - trade_data['Prevailing Bid'][i]\n    average_effective_spread /= total_trades\n    \n    # return answer\n    return average_effective_spread\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "rate = 0.06 / 4  # Quoted compounding every quarter\npayment = 2.00\npayment_interval = 1  # Quarterly payments\n\n# Initial payment is at the end of five quarters, which means four quarters of zero payments\nyear_of_first_payment = 5 / 4\nend_of_year = year_of_first_payment + payment_interval\n\n# Do math calculation to get the answer\nvalue = payment / (rate * (1 - (1 + rate) ** (-(end_of_year - year_of_first_payment) * 4)))\n\n# return answer\nreturn value\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "    cost_of_license = 6500\n    useful_life = 4\n    expected_benefit_years = 3\n    \n    # Calculate annual amortization using straight-line amortization method\n    annual_amortization = cost_of_license / useful_life\n    \n    # Calculate accumulated amortization at the conclusion of Year 2\n    year_2_accumulated_amortization = annual_amortization * 2\n    \n    # return answer\n    return year_2_accumulated_amortization\n```\n\nThe answer to the question is the return value of the `solution()` function."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "    dividend_per_year = 2.00\n    dividend_growth_rate = 0.04\n    required_return_rate = 0.07\n    \n    # Do math calculation to get the answer\n    share_price = dividend_per_year / (required_return_rate - dividend_growth_rate)\n    \n    # return answer\n    return share_price\n```\n<|im_end|>"
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "market_share = {\n    'Ajiwo': 500,\n    'Bdfhyj': 350,\n    'Cegfd': 270,\n    'Ddgh': 200,\n    'Ebned': 150,\n    'All others': 40\n}\n\n# Compute the sum of the market shares of the five companies\ntotal_market_share = sum(market_share.values())\n\n# Compute the market share for the top four companies\ntop_four_market_share = market_share['Ajiwo'] + market_share['Bdfhyj'] + market_share['Cegfd'] + market_share['Ddgh']\n\n# Compute the concentration ratio\nconcentration_ratio = top_four_market_share / total_market_share * 100\n\ndef solution():\n    # Define variables name and value\n    market_share = {\n        'Ajiwo': 500,\n        'Bdfhyj': 350,\n        'Cegfd': 270,\n        'Ddgh': 200,\n        'Ebned': 150,\n        'All others': 40\n    }\n    \n    # Do math calculation to get the answer\n    total_market_share = sum(market_share.values())\n    top_four_market_share = market_share['Ajiwo'] + market_share['Bdfhyj'] + market_share['Cegfd'] + market_share['Ddgh']\n    concentration_ratio = top_four_market_share / total_market_share * 100\n    \n    # return answer\n    return concentration_ratio\n\nprint(solution())"
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.571,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "sales = 3500\ncost_of_sales = 1500\nexchange_rate = 1.77  # using the rate at the end of 2018 for current rate method\n\n# Do math calculation to get the answer\nsales_in_usd = sales * exchange_rate\ncost_of_sales_in_usd = cost_of_sales * exchange_rate\ngross_profit_margin = (sales_in_usd - cost_of_sales_in_usd) / sales_in_usd\n\n# return answer\nreturn gross_profit_margin\n```"
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "purchases_of_securities = -240  # Purchase is a cash outflow, hence negative\nproceeds_from_sale = 300  # Sale is a cash inflow, hence positive\nproceeds_from_issuance = 500  # Issuance is a cash inflow, hence positive\npurchase_of_affiliated_company = -275  # Purchase is a cash outflow, hence negative\n\n# Do math calculation to get the answer\nnet_cash_flow_from_investing_activities = purchases_of_securities + proceeds_from_sale + proceeds_from_issuance + purchase_of_affiliated_company\n\n# return answer\nreturn net_cash_flow_from_investing_activities\n```"
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "    market_up = 0.46\n    market_unchanged = 0.38\n    market_down = 0.16\n    \n    # Calculate the likelihood of the stock being at $45\n    # The stock is at $45 in the case of the market staying unchanged and then going up\n    likelihood = market_unchanged * market_up\n    answer = likelihood\n    \n    # return answer\n    return answer"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "face_value = 10_000_000  # Bond face value in dollars\ninvoice_price = 11_000_000  # Invoice price of the bond in dollars\nrepo_rate = 20 / 100  # Repurchase agreement rate as a fraction\n\n# Calculate the interest\ninterest = (invoice_price - face_value) * repo_rate\n\n# Calculate the repurchase cost by adding the face value and the interest\nrepurchase_cost = face_value + interest\n\n# Return the repurchase cost\nreturn repurchase_cost\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "    dividends_cash_payment = 8\n    impairment_expense = 12\n    \n    # From the table, calculate the change in retained earnings (which is the net income for 2017)\n    retained_earnings_change = 125 - 110\n    total_financing_activity = dividends_cash_payment\n    \n    # We know that: Net Income = Operating Cash Flow - Impairment Expense + Changes in Working Capital\n    # Also, Net Income = Retained Earnings Change\n    # Therefore: Operating Cash Flow = Net Income + Impairment Expense - Changes in Working Capital\n    \n    # Calculate the changes in working capital (Accounts Receivable and Inventory)\n    working_capital_change = (48 - 45) + (20 - 24)\n    \n    # Do math calculation to get the answer\n    operating_cash_flow = retained_earnings_change + impairment_expense - working_capital_change\n    \n    # return answer\n    return operating_cash_flow\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "lambda_parameter = 0.05 * 5  # Since 5% of the vehicles are defective and we're picking 5 vehicles, lambda will be 0.25.\n\n# Define variables name and value\nx = 1  # Defective vehicles\n\n# Import the necessary library\nfrom scipy.stats import poisson\n\n# Do math calculation to get the answer\nprobability = poisson.pmf(x, lambda_parameter)\n\n# return answer\nreturn probability\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "coupon_rate = 0.03\ncoupon_frequency = 1  # yearly\nnum_years_to_maturity = 9\nytm = 0.05\nbond_price_per_100_par_value = 85.784357\n\n# Calculate annual coupon payment\nannual_coupon = coupon_rate * 100  # Assuming face value of 100\n\n# Calculate the total bond price\ntotal_bond_price = bond_price_per_100_par_value * 100\n\n# Calculate the present value of the coupon payments and the face value\n# using the yield-to-maturity as the discount rate\ndiscount_rate = ytm / coupon_frequency\npv_coupon_payments = sum(annual_coupon * (1 / (1 + discount_rate) ** (t + 1)) for t in range(num_years_to_maturity * coupon_frequency))\npv_face_value = 100 * (1 / (1 + discount_rate) ** (num_years_to_maturity * coupon_frequency))\n\n# Calculate the present value of all cash flows\npresent_value_of_cash_flows = pv_coupon_payments + pv_face_value\n\n# Calculate the yield-to-maturity per basis point\nyield_to_maturity_per_basis_point = ((present_value_of_cash_flows / total_bond_price) - 1) * 10000\n\n# return answer\nreturn yield_to_maturity_per_basis_point\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "samples_count = 1600\npopulation_mean = 1000\nsample_mean = 998.7\nsample_std_deviation = 100\n\n# Do math calculation to get the standard error of the sample mean\nstandard_error = sample_std_deviation / (samples_count ** 0.5)\n\n# return answer\nreturn standard_error\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "    investment_portfolio_stocks = 500000\n    investment_portfolio_fixed_income = 330000\n    house_value = 350000\n    house_mortgage = 175000\n    earnings_pv = 980000\n    expected_consumption_pv = 870000\n    children_college_tuition_pv = 150000\n    family_foundation_future_value_pv = 600000\n    \n    # Calculate assets\n    total_assets = investment_portfolio_stocks + investment_portfolio_fixed_income + house_value\n    \n    # Calculate liabilities\n    total_liabilities = house_mortgage\n    \n    # Calculate economic net worth\n    economic_net_worth = total_assets - total_liabilities + earnings_pv - expected_consumption_pv - children_college_tuition_pv\n    \n    # Prepare the economic balance sheet dictionary\n    economic_balance_sheet = {\n        'Assets': {'Investment Portfolio (Stocks)': investment_portfolio_stocks,\n                   'Investment Portfolio (Fixed Income)': investment_portfolio_fixed_income,\n                   'House': house_value},\n        'Liabilities': {'House Mortgage': house_mortgage},\n        'Economic Net Worth': economic_net_worth\n    }\n    \n    # return answer\n    return economic_balance_sheet\n```\n\nWith this program, you will get an economic balance sheet for the Smith family, including their assets, liabilities, and economic net worth. The economic net worth is calculated by subtracting total liabilities from total assets and then adjusting for earnings, expected consumption, and other expenses. The resulting economic balance sheet dictionary can be printed or used as needed."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "    # The overall cost of the products sold\n    total_cost = 10000\n    \n    # The cost value of the goods\n    goods_cost = 8000\n    \n    # The sale resulted in an increase in accounts receivable for the value of the sale\n    # and a decrease in inventory for the cost value of the goods.\n    # Any profit from the sale will be recorded as part of the income statement and won't affect total assets immediately.\n    \n    # The net shift in total assets is the change in accounts receivable minus the change in inventory.\n    net_shift_in_total_assets = total_cost - goods_cost\n    \n    # return the answer\n    return net_shift_in_total_assets\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "tax_rate = 0.35\ndebt_percentage = 0.6\nequity_beta = 1.4\n\n# Compute the levered beta (asset beta)\nlevered_beta = equity_beta / ((1 - tax_rate) * (1 - debt_percentage))\n\ndef solution():\n    # Define variables name and value\n    tax_rate, debt_percentage, equity_beta, levered_beta\n\n    # Do math calculation to get the answer\n    levered_beta = equity_beta / ((1 - tax_rate) * (1 - debt_percentage))\n\n    # return answer\n    return levered_beta\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "    original_portfolio_value = 100000000 # $100 million\n    initial_shares_percentage = 0.8\n    initial_bonds_percentage = 0.2\n    target_shares_percentage = 0.6\n    target_bonds_percentage = 0.4\n    stock_index_value = 1200 # current stock index value\n    stock_index_future_multiplier = 250 # $250 multiplier for a stock index futures contract\n    stock_index_future_beta = 0.95 # beta for stock index futures\n    bond_future_cost = 105300 # cost of a bond futures agreement\n    bond_future_duration = 6.5 # underlying adjusted duration of the bond futures agreement\n\n    # Calculate the initial value of shares and bonds portions in the portfolio\n    initial_shares_value = original_portfolio_value * initial_shares_percentage\n    initial_bonds_value = original_portfolio_value * initial_bonds_percentage\n\n    # Calculate the target value of shares and bonds portions in the portfolio\n    target_shares_value = original_portfolio_value * target_shares_percentage\n    target_bonds_value = original_portfolio_value * target_bonds_percentage\n\n    # Calculate the difference in value between the initial and target shares/bonds portions\n    shares_value_change = target_shares_value - initial_shares_value\n    bonds_value_change = target_bonds_value - initial_bonds_value\n\n    # Calculate the number of stock index futures needed to achieve the desired shift in portfolio distribution\n    stock_index_futures_needed = shares_value_change / (stock_index_value * stock_index_future_multiplier / stock_index_future_beta)\n\n    # Calculate the number of bond futures needed to achieve the desired shift in portfolio distribution\n    bond_futures_needed = bonds_value_change / bond_future_cost\n    \n    # return answers\n    return stock_index_futures_needed, bond_futures_needed\n\nsolution()"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "    bond_yield = 8 / 2\n    risk_premium = 0.05\n    marginal_tax_rate = 0.30\n    \n    # Compute the pre-tax cost of debt\n    cost_of_debt = bond_yield + (bond_yield - risk_premium)\n    \n    # Compute the after-tax cost of debt\n    after_tax_cost_of_debt = cost_of_debt * (1 - marginal_tax_rate)\n    \n    # Compute the cost of equity using the risk premium method\n    cost_of_equity = after_tax_cost_of_debt + risk_premium\n    \n    # return answer\n    return cost_of_equity\n\nprint(solution())"
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "    starting_index_value = 121\n    stock_x_march_price = 15\n    stock_x_march_shares = 100 # in thousands\n    stock_y_march_price = 20\n    stock_y_march_shares = 1000 # in thousands\n    stock_z_march_price = 30\n    stock_z_march_shares = 2000 # in thousands\n\n    stock_x_april_price = 20\n    stock_x_april_shares = 100 # in thousands\n    stock_y_april_price = 30\n    stock_y_april_shares = 1000 # in thousands\n    stock_z_april_price = 25\n    stock_z_april_shares = 2000 # in thousands\n\n    # Calculate total market value of shares in March and April\n    market_value_march = (stock_x_march_price * stock_x_march_shares) + (stock_y_march_price * stock_y_march_shares) + (stock_z_march_price * stock_z_march_shares)\n    market_value_april = (stock_x_april_price * stock_x_april_shares) + (stock_y_april_price * stock_y_april_shares) + (stock_z_april_price * stock_z_april_shares)\n\n    # Calculate the change in market value\n    market_value_change = market_value_april - market_value_march\n\n    # Calculate the new index value\n    new_index_value = starting_index_value + (market_value_change / market_value_march) * starting_index_value\n\n    # return answer\n    return new_index_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "dividend_2017 = 0.22 # Total dividends QX Corp. paid in 2017\ngrowth_rate_stage_1 = 0.12 # Growth rate for the next 4 years (12% annually)\ngrowth_rate_stage_2 = 0.06 # Growth rate thereafter (6% annually)\nrequired_return = 0.09 # Required return\n\n# Do math calculation to get the answer\nstage_1_dividend = dividend_2017 * (1 + growth_rate_stage_1) # Dividend for the first year of stage 1\nstage_1_terminal_value = stage_1_dividend / (required_return - growth_rate_stage_1) # Terminal value at the end of stage 1\n\nterminal_value_total = stage_1_terminal_value * (1 + growth_rate_stage_2) / (required_return - growth_rate_stage_2) # Terminal value at the end of stage 2 (total terminal value)\n\n# return answer\nreturn terminal_value_total\n```\n\nThis program calculates the terminal value of the stock using a two-stage Dividend Discount Model (DDM) with the given parameters. The terminal value represents the stock's value at the end of the high-growth period, which is then used to find the stock's total value according to the two-stage DDM."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "face_value = 100\ninitial_price = 98.722\nprice_with_increased_ytm = 98.669\nprice_with_decreased_ytm = 98.782\nytm_change = 0.001 # 10 basis points equals 0.1% or 0.001\n\n# Calculate the convexity using the formula:\n# Convexity = (price_with_increased_ytm - 2 * initial_price + price_with_decreased_ytm) / (face_value * (ytm_change ** 2))\n\nconvexity = (price_with_increased_ytm - 2 * initial_price + price_with_decreased_ytm) / (face_value * (ytm_change ** 2))\n\n# return answer\nreturn convexity\n```\nThis Python program defines the necessary variables, performs the calculations to find the convexity of the bond based on the given conditions, and then returns the answer. The formula for convexity used here is derived from the yield-price formula and the given information about how the bond's total price changes with changes in the yield-to-maturity."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "    net_sales_per_share = 35\n    current_share_price = 56\n    \n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    # return answer\n    return price_to_sales_ratio\n```\nThe Python program has been generated to determine the price-to-sales ratio for PetroChem Co. The current share price is divided by the net sales per share to get the price-to-sales ratio. The result is returned as the answer to the question.\n\nLet's execute this Python program now to get the price-to-sales ratio for PetroChem Co.\n```python\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n    \n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    # return answer\n    return price_to_sales_ratio\n\n# Execute the program\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "    sales_current_year = 12000\n    cost_of_goods_sold_current_year = 9000\n    accounts_payable_current_year = 600\n    \n    # Calculate the average accounts payable\n    answer = 365 / (cost_of_goods_sold_current_year / accounts_payable_current_year)\n    \n    # return answer\n    return answer\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "    asset_a_value = 5_000_000\n    asset_a_mvar = 0.0452\n    asset_b_value = 3_000_000\n    asset_b_mvar = 0.0332\n    \n    # Calculate the total value of the portfolio\n    total_value = asset_a_value + asset_b_value\n    \n    # Calculate the contribution of Asset A to the portfolio's VaR\n    asset_a_var_contribution = asset_a_value * asset_a_mvar\n    asset_b_var_contribution = asset_b_value * asset_b_mvar\n    \n    # Calculate the total VaR of the portfolio\n    total_var = asset_a_var_contribution + asset_b_var_contribution\n    \n    # Calculate the percent of contribution to VaR from Asset A\n    asset_a_percentage_contribution = (asset_a_var_contribution / total_var) * 100\n    \n    # return answer\n    return asset_a_percentage_contribution\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "    options_call_in = 5000  # In-the-money call options\n    options_call_out = 20000  # Out-of-the-money call options\n    futures = 10000  # Future contracts\n    price_xyz = 52  # Current price of XYZ\n    volatility = 0.12  # Volatility of XYZ\n    days = 252  # Annual trading days\n    share_per_contract = 1  # Each contract represents one share of XYZ\n    confidence_level = 0.99  # 99% confidence level\n    time_to_maturity_days = 1  # 1-day time to maturity\n    risk_free_rate = 0.0  # Since no dividends\n\n    # Calculate the number of shares represented by each type of contract\n    shares_options_call_in = options_call_in\n    shares_options_call_out = options_call_out\n    shares_futures = futures * share_per_contract\n\n    # Calculate the portfolio value\n    portfolio_value = shares_options_call_in * price_xyz + shares_options_call_out * price_xyz + shares_futures * price_xyz\n\n    # Calculate the delta of the portfolio\n    portfolio_delta = shares_options_call_in + shares_options_call_out + shares_futures\n\n    # Calculate the 1-day 99% VaR\n    var_factor = volatility * (portfolio_delta * price_xyz) * np.sqrt(time_to_maturity_days)\n    var = portfolio_value * np.abs(norm.ppf(1 - confidence_level)) * var_factor\n\n    # return answer\n    return var\n```\nThis Python program calculates the 1-day 99% Value at Risk (VaR) of the portfolio consisting of in-the-money call options, out-of-the-money call options, and future contracts on XYZ. It uses the Black-Scholes model to compute the VaR, considering the given parameters such as stock price, volatility, and contract details. The `norm.ppf` function from the `scipy"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "    periodic_contribution = 6000000\n    service_cost = 800000\n    actuarial_gain = 2500000\n    \n    # Do math calculation to get the answer\n    pension_expense = periodic_contribution - service_cost - actuarial_gain\n    \n    # return answer\n    return pension_expense\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "    ten_year_us_treasury_sec = 3.8\n    short_term_real_rate = 2\n    long_term_real_rate = 2.3\n    ten_year_aa_corporate_bond_yld = 4.4\n    inflation_premium = 0.8\n    illiquidity_premium = 0.9\n    equity_risk_premium = 8.4\n    \n    # Calculate the expected yield for consumer credit industry using bond-yield-plus-risk-premium method\n    expected_yield = ten_year_aa_corporate_bond_yld + inflation_premium + illiquidity_premium + equity_risk_premium\n    \n    # return answer\n    return expected_yield\n```"
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "    total_assets = 2100 * 10**6  # in millions of dollars\n    total_liabilities = 1200 * 10**6  # in millions of dollars\n    preferred_equity = 120 * 10**6  # in millions of dollars\n    common_shares_outstanding = 32 * 10**6  # in millions\n    \n    # Calculate total equity\n    total_equity = total_assets - total_liabilities\n    \n    # Calculate total shareholders' equity by subtracting preferred equity\n    total_shareholders_equity = total_equity - preferred_equity\n    \n    # Calculate EPS (Earnings Per Share) by dividing total earnings by common shares outstanding\n    normalized_eps = total_shareholders_equity / common_shares_outstanding\n    \n    # return answer\n    return normalized_eps\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "    trades = [\n        {'trade_num': 1, 'time': '9.45 a.m.', 'trade_price': 25.20, 'trade_size': 1200, 'bid_price': 25.17, 'ask_price': 25.20},\n        {'trade_num': 2, 'time': '9.55 a.m.', 'trade_price': 25.22, 'trade_size': 1300, 'bid_price': 25.19, 'ask_price': 25.22},\n        {'trade_num': 3, 'time': '11.30 a.m.', 'trade_price': 25.27, 'trade_size': 2500, 'bid_price': 25.22, 'ask_price': 25.26}\n    ]\n    \n    # Calculate the total bid and ask spread for all trades\n    total_bid_spread = sum([trade['bid_price'] - trade['trade_price'] for trade in trades])\n    total_ask_spread = sum([trade['ask_price'] - trade['trade_price'] for trade in trades])\n    \n    # Calculate effective spread for the 5,000 share buy order\n    total_trade_size = sum([trade['trade_size'] for trade in trades])\n    average_ask_spread = total_ask_spread / total_trade_size\n    average_bid_spread = total_bid_spread / total_trade_size\n    average_effective_spread = (average_ask_spread - average_bid_spread) * 5000 / total_trade_size\n    \n    # return answer\n    return average_effective_spread\n\n\n# Call the function to get the answer\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "mrr_swap = 1.00  # MRR swap rate as percentage\ntreasury_bond_yield = 0.63  # Treasury bond yield as percentage\n\n# Convert the rates to decimal form\nmrr_swap_rate = mrr_swap / 100\ntreasury_bond_yield_rate = treasury_bond_yield / 100\n\n# Calculate the swap spread\nswap_spread = mrr_swap_rate - treasury_bond_yield_rate\n\n# Convert the swap spread back to percentage for easier interpretation\nswap_spread_percentage = swap_spread * 100\n\n# return answer\nreturn swap_spread_percentage\n\n```"
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "risk_free_rate = 0.03\nbeta = 1.1\nmarket_risk_premium = 0.05\ndividend_year_1 = 1.13\ndividend_year_2 = 1.22\ngrowth_rate_3 = 0.05\n \n    \n# Calculate the required return using the CAPM formula (Cost of Equity)\nrequired_return = risk_free_rate + beta * market_risk_premium\n \n# Calculate the intrinsic value using the two-step dividend discount model\nintrinsic_value = (dividend_year_1 / (1 + required_return)) + (dividend_year_2 / (1 + required_return)**2) + ((dividend_year_2 * (1 + growth_rate_3)) / ((required_return - growth_rate_3) * (1 + required_return)**2))\n \n# return answer\nreturn intrinsic_value\n```"
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "sentences = [\n    (1, 1, 0.75),\n    (0, 0, 0.45),\n    (1, 1, 0.64),\n    (1, 1, 0.81),\n    (0, 0, 0.43),\n    (1, 1, 0.78),\n    (0, 0, 0.59),\n    (1, 1, 0.60),\n    (0, 0, 0.67),\n    (0, 0, 0.54)\n]\n\n# True positive: actual sentiment is positive (1) and the prediction is also positive (1)\ntrue_positive = sum(1 for sentence in sentences if sentence[1] == 1 and sentence[2] >= 0.65)\n\n# True negative: actual sentiment is negative (0) and the prediction is also negative (0)\ntrue_negative = sum(1 for sentence in sentences if sentence[1] == 0 and sentence[2] >= 0.65)\n\n# Total number of sentences\ntotal_sentences = len(sentences)\n\n# Accuracy computation\naccuracy = (true_positive + true_negative) / total_sentences\n\n# return answer\nreturn accuracy\n```\nIn this Python program, we define a list of tuples, where each tuple represents a sentence from the test dataset corpus. The tuple contains the actual sentiment, the predicted p-value, and the threshold p-value for the ML model.\n\nWe then calculate the number of true positives (actual sentiment positive and predicted p-value above the threshold) and true negatives (actual sentiment negative and predicted p-value above the threshold).\n\nFinally, we compute the accuracy by dividing the total number of true predictions (true positives and true negatives) by the total number of sentences in the dataset.\n\nThe returned value of the program will be the accuracy computation for the test set sample of Dataset XYZ."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "    initial_bond_duration = 1\n    second_bond_duration = 9\n    yield_rate = 0.05\n    yield_instability = 0.01\n    confidence_level = 0.95\n    days_in_year = 365\n    \n    # Do math calculation to get the answer\n    initial_bond_value = 10\n    second_bond_value = 10\n    \n    initial_bond_PV = initial_bond_value / (1 + yield_rate)**initial_bond_duration\n    second_bond_PV = second_bond_value / (1 + yield_rate)**second_bond_duration\n    \n    total_portfolio_duration = initial_bond_PV * initial_bond_duration + second_bond_PV * second_bond_duration\n    portfolio_value = initial_bond_PV + second_bond_PV\n    \n    portfolio_var = portfolio_value * (yield_instability / days_In_year) ** 2 * total_portfolio_duration\n\n    # Calculate z-score for 5% confidence level\n    z_score = stats.norm.ppf(1 - confidence_level)\n    \n    # Calculate daily value at risk (VAR)\n    daily_var = portfolio_var * z_score\n    \n    # round to a reasonable precision for financial risk measure\n    daily_var = round(daily_var, 2)\n    \n    # return answer\n    return daily_var\n```\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    initial_bond_duration = 1\n    second_bond_duration = 9\n    yield_rate = 0.05\n    yield_instability = 0.01\n    confidence_level = 0.95\n    days_in_year = 365\n\n    # Do math calculation to get the answer\n<|im_start|>"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "    cash_flow_1 = 40\n    cash_flow_2 = 80\n    cash_flow_3 = 120\n    investment = 100\n    interest_rate = 0.20\n    \n    # Do math calculation to get the answer\n    npv = (cash_flow_1 / (1 + interest_rate)) + (cash_flow_2 / (1 + interest_rate)**2) + (cash_flow_3 / (1 + interest_rate)**3) - investment\n    \n    # return answer\n    return npv\n```\nWhen you run this program, it will calculate the Net Present Value (NPV) of the investment based on the given cash flows and the required rate of return."
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "face_value = 50e6 # Face value in millions\ncoupon_rate = 0.04 # Coupon rate, paid annually\ntime_to_maturity = 10 # Time to maturity in years\nissue_price_per_100 = 92.28 # Issue price (per £100)\nmarket_interest_rate = 0.05 # Market interest rate\n\n# Calculate annual coupon payment\ncoupon_payment = face_value * coupon_rate\n\n# Calculate initial carrying value of the bond\ninitial_carrying_value = face_value / 100 * issue_price_per_100\n\n# Calculate annual amortization of discount\namortization = (face_value - initial_carrying_value) / time_to_maturity\n\n# Calculate annual interest expense\ninterest_expense = initial_carrying_value * market_interest_rate + amortization\n\n# return answer\nreturn interest_expense\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "    cash_short_term = 750000\n    human_capital = 1200000\n    equity_portion_human_capital = 0.3 * human_capital\n    target_equity_allocation = 0.45 * (cash_short_term + human_capital)\n    \n    # Calculate the financial capital equity allocation\n    financial_capital_equity_allocation = target_equity_allocation - equity_portion_human_capital\n    \n    # return answer\n    return financial_capital_equity_allocation\n```\n\nWhen you run this `solution()` function, it will calculate and return the financial capital equity allocation that James needs to reach the desired equity allocation for his total economic wealth."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "    dividend_fifth_year = 2.5  # Predicted dividend for the fifth year\n    growth_rate_after_year_5 = 0.05  # Predicted annual growth rate after the fifth year\n    required_rate_of_return = 0.12  # Required rate of return for the stock\n    \n    # Calculate the stock price in the fifth year using the Gordon Growth Model formula for Year 6 dividend\n    year_6_dividend = dividend_fifth_year * (1 + growth_rate_after_year_5)\n    stock_price_year_5 = year_6_dividend / (required_rate_of_return - growth_rate_after_year_5)\n    \n    # Calculate the present value of dividends for years 1 to 5 and the present value of the stock price in year 5\n    present_value_dividends = (dividend_fifth_year / (1 + required_rate_of_return) ** 5)\n    present_value_stock_price_year_5 = stock_price_year_5 / (1 + required_rate_of_return) ** 5\n    \n    # Calculate the intrinsic value of the stock by summing the present values\n    intrinsic_value = present_value_dividends + present_value_stock_price_year_5\n    \n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "bond_face_value = 5000000 # Face value of the bonds\nmarket_interest_rate = 0.03 # Market interest rate\nbonds_yield_rate = 0.025 # Annual yield rate of the bonds\n\n# Calculate the value of the bonds based on the yield rate\nbond_value = bond_face_value / (1 + bonds_yield_rate)\n\n# Define the bonds payable value\nbonds_payable = bond_value * (1 + bonds_yield_rate)\n\n# return the bonds payable value\ndef solution():\n    # Define variables name and value\n    bond_face_value = 5000000 \n    market_interest_rate = 0.03 \n    bonds_yield_rate = 0.025 \n    bond_value = bond_face_value / (1 + bonds_yield_rate)\n    bonds_payable = bond_value * (1 + bonds_yield_rate)\n    \n    # Do math calculation to get the answer\n    bonds_payable_value = bonds_payable\n    \n    # return answer\n    return bonds_payable_value\n\nprint(solution()) # Output: 1.0 * Bonds Payable Value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "    stock_price = 26.00  # Price of the Mega Healthcare Solutions Ltd shares\n    daily_volatility = 0.015  # Daily volatility of the stock\n    delta = -0.5  # Delta of the at-the-money put option\n    confidence_level = 0.95  # 95% confidence level\n    days = 1  # Holding period\n    \n    # Calculate Z-value for the given confidence level\n    z_value = norm.ppf(1 - (1 - confidence_level))\n    \n    # Calculate the standard deviation for the holding period\n    std_dev_holding_period = daily_volatility * (days ** 0.5)\n    \n    # Calculate the VaR for the long position in an at-the-money put\n    var_at_the_money_put = stock_price * delta * (z_value * std_dev_holding_period)\n    \n    # return answer\n    return var_at_the_money_put\n\n# Test the function\nprint(solution())"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "returns = [1 + 0.20, 1 - 0.30, 1 + 0.15]\n\n# Do math calculation to get the answer\ngeometric_mean = (np.prod(returns)) ** (1/len(returns)) - 1\n\n# return answer\nreturn geometric_mean\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "    risk_free_rate = 8 / 100  # converting percentage to decimal\n    market_return = 15 / 100  # converting percentage to decimal\n    beta = 0.6\n    \n    # Do math calculation to get the answer\n    required_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return required_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    \n    predicted_growth = 3.5\n    predicted_inflation = 3\n    \n    # Implementation of the Taylor Rule\n    # The Taylor Rule is a monetary policy rule that suggests how central banks should set interest rates. \n    # The rule proposes that the nominal interest rate should be set\n    # primarily in terms of the inflation rate and the output gap (the difference between actual and potential GDP).\n    # The formula is: r = p + 0.5y + 0.5(p - 2) + 2\n    # where r is the target short-term interest rate, p is the rate of inflation,\n    # y is the output gap (%), and the \"2\" represents the long-term average rate of inflation and economic growth.\n    \n    # Do math calculation to get the answer\n    nominal_policy_rate = neutral_real_policy_rate + 0.5 * (predicted_inflation - desired_inflation_rate) + 0.5 * (predicted_growth - projected_growth) + 2\n    \n    # return answer\n    return nominal_policy_rate\n\nprint(solution())  # Output: 5.133333333333333"
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "inflation = 1.9\ngrowth_pe = -1.2\ngrowth_income = 1.8\ngrowth_real_earnings = 2.7\nchange_shares = 0.0\ncurrent_yield = 0.96\nmarket_return = 9.96\ngov_bond_return = 3.15\n\n# Do math calculation to get the answer using the Grinold-Kroner model\nforecaster_erp = market_return - gov_bond_return - (inflation + growth_income + growth_real_earnings + growth_pe) / 2\n\n# return answer\nreturn forecaster_erp\n```"
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "    true_positives = 182\n    false_positives = 52\n    false_negatives = 31\n    true_negatives = 96\n    \n    # Calculate the number of correct predictions and the total number of predictions\n    total_correct_predictions = true_positives + true_negatives\n    total_predictions = true_positives + false_positives + false_negatives + true_negatives\n    \n    # Calculate the accuracy metric\n    accuracy = total_correct_predictions / total_predictions\n    \n    # return accuracy\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "n = 15  # number of participants\nprizes = [100, 50, 10]  # prize amounts\n\n# Do math calculation to get the answer\nways = n * (n-1) * (n-2)  # there are n ways to choose the 1st place, n-1 ways for the 2nd place, and n-2 ways for the 3rd place\nanswer = ways\n\n# return answer\nreturn answer"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "delta = 100000  # barrels\ngamma = -50000  # barrels per dollar\nmax_price_shift = 2.0  # dollars per barrel\n\n# Assuming a normal distribution and using the delta-gamma approximation to calculate VaR\nvariance = max_price_shit ** 2  # variance of price changes\nstd_deviation = variance ** 0.5  # standard deviation of price changes\n\n# Calculate the VaR\nvar_delta = delta * max_price_shift + 0.5 * gamma * max_price_shift ** 2\nvar_absolute = abs(var_delta)\n\n# return answer\nreturn var_absolute\n\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "    initial_investment = 10000\n    loan = 10000\n    total_investment = initial_investment + loan\n    stock_price = 25\n    preservation_margin = 0.30\n\n    # Calculate the margin call price\n    margin_call_price = stock_price * (1 - preservation_margin) / (1 + preservation_margin)\n    \n    # return answer\n    return margin_call_price\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "    previous_year_aum = 288000000\n    management_fee = 0.02\n    incentive_fee = 0.2\n    soft_hurdle_rate = 0.05\n    high_water_mark = 357000000\n    fund_yield = 0.25\n    \n    # Calculate the current year's AUM\n    current_year_aum = previous_year_aum * (1 + fund_yield)\n    \n    # Calculate the management fee\n    management_fee_amount = previous_year_aum * management_fee\n    \n    # First calculation of the incentive fee\n    incentive_fee_base = current_year_aum - management_fee_amount\n    # Soft hurdle rate applied\n    incentive_fee_base -= soft_hurdle_rate * current_year_aum\n    \n    # Apply the high-water mark\n    incentive_fee_base = max(incentive_fee_base, high_water_mark)\n    \n    # Finally calculate the incentive fee\n    incentive_fee_amount = incentive_fee * incentive_fee_base\n    \n    # Return the sum of the management fee and the incentive fee as the overall fee\n    return management_fee_amount + incentive_fee_amount\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.903,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "portfolio_weight_x = 0.25\nportfolio_weight_y = 0.75\n\nstd_deviation_x = 0.179\nstd_deviation_y = 0.062\n\ncorrelation = 0.5\n\n# Do math calculation to get the answer\nportfolio_variance = (portfolio_weight_x**2 * std_deviation_x**2) + (portfolio_weight_y**2 * std_deviation_y**2) + (2 * portfolio_weight_x * portfolio_weight_y * std_deviation_x * std_deviation_y * correlation)\n\nportfolio_std_deviation = portfolio_variance**0.5\n\n# return answer\nreturn portfolio_std_deviation\n\nprint(solution())"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "    initial_value = 160000000\n    end_value = initial_value * 1.25\n    high_water_mark = 198000000\n    hurdle_rate = 0.1\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.2\n    \n    # Calculate the management fee\n    if end_value > high_water_mark:\n        management_fee = ((end_value - high_water_mark) * (1 - hurdle_rate)) * management_fee_rate\n    else:\n        management_fee = (end_value - initial_value) * management_fee_rate\n    \n    # Calculate the incentive fee\n    if end_value > high_water_mark:\n        incentive_fee = (end_value - high_water_mark) * incentive_fee_rate\n        high_water_mark = end_value\n    else:\n        incentive_fee = 0\n        high_water_mark = initial_value if end_value < initial_value else end_value\n    \n    # Calculate the total fees\n    total_fees = management_fee + incentive_fee\n    \n    # return answer\n    return total_fees\n```\n\nWhen you run the `solution()` function, it will return the total fees collected by the investment company in millions of dollars due to the management and incentive fees for the given year, given the conditions outlined in the problem."
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "    noi_year1 = 2775840\n    noi_year2 = 2859119\n    growth_rate = ((noi_year2 - noi_year1) / noi_year1) * 100\n    \n    # return answer\n    return growth_rate\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "w_x = 0.30\nw_y = 0.70\nsigma_x = 0.25\nsigma_y = 0.10\nrho = 0.8\n\n# Do math calculation to get the answer\nportfolio_variance = (w_x**2 * sigma_x**2) + (w_y**2 * sigma_y**2) + (2 * w_x * w_y * sigma_x * sigma_y * rho)\nportfolio_std_dev = portfolio_variance**0.5\n\n# return answer\nreturn portfolio_std_dev"
        ]
    }
]