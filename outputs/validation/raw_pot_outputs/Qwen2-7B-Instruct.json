[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "n\n```python\n    # Do math calculation to get the answer\n    truck_depreciation_per_year = 57000 * 0.20\n   卡车折旧三年的总金额 = truck_depreciation_per_year * 3\n    卡车当前价值 = 57000 - 卡车折旧三年的总金额\n\n    土地当前价值 = 21000\n    \n    # 因为企业选择以卡车换取土地，利润和损失报表上的差额会导致亏损\n    损益 = 土地当前价值 - 卡车当前价值\n\n    # return answer\n    return round(损益)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "assistant\n    # Spot exchange rate from NZD to GBP\n    spot_rate = 2.0979\n    # 360-day Libor interest rate for NZD and GBP\n    libor_nzd = 3.2875 / 100\n    libor_gbp = 1.6025 / 100\n    # 180-day equivalent interest rates\n    interest_rate_difference = 2 * (libor_nzd - libor_gbp)\n    # Calculate 180 day forward point in percentage terms\n    forward_points_percentage = interest_rate_difference * 180 / 360\n    # 180 day forward rate\n    forward_rate = spot_rate * (1 + forward_points_percentage)\n    \n    # return answer (rounded to four decimal places)\n    return round(forward_rate, 4)\n\n# Call the solution function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "user\nrisk_free_rate = 3.1\ngim_expected_return = 7.2\n\n# Do math calculation to get the answer\nrisk_premium = gim_expected_return - risk_free_rate\ncovariance_witness = 0.0075\nasset_class_standard_deviation = 0.14\n\n# Note: The Sharpe ratio formula not used directly for finding the beta according to ICAPM,\n# but can be used to understand the risk-adjusted return of the asset compared to the market.\n\n# The formula for calculating the beta coefficient in ICAPM (Capital Asset Pricing Model)\n# Beta = Covariance(Asset & Market) / Variance(Market)\nbeta_for_us_realestate = covariance_witness * (1 / (asset_class_standard_deviation**2))\n\n# return answer\nreturn beta_for_us_realestate\n```\n"
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "\n\n\n    # Convert the Spanish venture purchase into Euro\n    shares = 200000\n    shares_price_eur = 90\n    total_investment_eur = shares * shares_price_eur\n    \n    # Convert the Euro investment into USD\n    # If we sold the Spanish shares after 3 months, then we were supposed to deal in the 3-month forward EUR/USD rate\n    # The rate for selling would be the 3-month forward EUR/USD rate, we take average buy rate to balance out the trade\n    three_month_forward_rate = 1.4106\n    total_investment_usd = total_investment_eur / three_month_forward_rate\n    \n    # At maturity the USD/DEM rate would be the market value at maturity date. We take the 6-month forward USD/DEM rate.\n    maturity_rate = 1.4289\n    amount_due_usd = total_investment_usd * maturity_rate\n    \n    # Cash expenditure to terminate the forward agreement would be the amount due to cover the agreement's position.\n    # Since we're closing an agreement, the closing value would be the same as the termination value:\n    answer = amount_due_usd\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "user\n\n\n```python\n    market_value = 3700000  # USD\n    daily_moment_fluctuation = 0.0004\n    trading_days = 250\n    confidence_level = 0.95\n    \n    # Estimate standard deviation of daily returns\n    std_dev_daily_return = daily_moment_fluctuation * market_value / market_value\n    \n    # Calculate annual standard deviation as there are 250 trading days in a year\n    std_dev_annual = std_dev_daily_return * (trading_days ** 0.5)\n    \n    # Estimate the z-score for the chosen confidence level (95% = 1.645 for normal distribution)\n    z_score = (1 - confidence_level) / 2\n    confidence_intervals = 1.645\n    \n    # Calculate 1-year VaR\n    yearly_vary = -std_dev_annual * confidence_intervals\n    \n    # return answer\n    return yearly_vary\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "response\n    # The values for each firm's market share percentages are provided in the problem\n    # The formula for the HHI is the sum of (Market Share)^2 for each firm\n    \n    zeta_share = 35\n    yusef_share = 25\n    xenon_share = 20\n    waters_share = 10\n    vlastos_share = 10\n    \n    # Do math calculation to get the answer\n    answer = (zeta_share**2 + yusef_share**2 + xenon_share**2 + waters_share**2 + vlastos_share**2)\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "def solution():\n    # Define variables name and value\n    fixed_rate = 1.00\n    treasury_yield = 0.63\n\n    # Calculate the difference in rates, also known as the swap spread\n    swap_spread = fixed_rate - treasury_yield\n\n    # return answer\n    return swap_spread\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "# Define variables name and value\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    # Calculate monthly amortization cost\n    amortization_cost_per_month = (acquisition_cost - residual_value) / (12 * useful_life)\n    # Calculate number of months from acquisition date to end of 2016\n    years_passed = 2016 - 2013\n    months_passed = years_passed * 12\n    # Calculate accumulated amortization cost at the end of 2016\n    accumulated_amortization_cost = amortization_cost_per_month * months_passed\n    # Return answer\n    return accumulated_amortization_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "Assistant\n    alpha = 0.775  # The average mean reversion from 1972 to 2012\n    mean_return = 0.35  # The correlation averaged over a prolonged period\n    new_correlation = 0.27  # The NASDAQ's correlation averaged at January 2014\n    \n    # The correlated expectation is the alpha multiplied by the new correlation\n    correlated_expectation = alpha * new_correlation\n\n    # return answer\n    return correlated_expectation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "answer\n    dividend_per_share_year_1 = 0.5\n    dividend_per_share_year_2 = dividend_per_share_year_1 * (1 + 0.06)\n    expected_dividend_year_3 = dividend_per_share_year_2 * (1 + 0.06)\n    rate_of_return = 0.10\n    \n    # Calculate the worth of Superior's common equity\n    \n    equity_worth = dividend_per_share_year_1 / (rate_of_return - 0.06 * (expected_dividend_year_3 / (rate_of_return - expected_dividend_year_3))) + expected_dividend_year_3 / (rate_of_return ** 2)\n    answer = equity_worth\n    \n    # Return answer\n    return round(answer, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "\n\n\n    price_elasticity_demand = 1.8\n    marginal_cost = 30\n    average_cost = 50\n    \n    # Use the formula to calculate the price (the formula is derived from setting marginal revenue equal to marginal cost in a monopolistic market):\n    # P = ( Price Elasticity of Demand * Average Cost) / ( 1 + Price Elasticity of Demand )\n    \n    price = (price_elasticity_demand * average_cost) / (1 + price_elasticity_demand)\n    \n    # return answer\n    return price\n\n# Test the function\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "user\n```python\ndef solution():\n    # Define variables name and value\n    units_october = 10000 # bought in october\n    cost_per_unit_october = 10 # cost per unit is 10 pounds\n\n    units_november = 5000 # bought in november \n    cost_per_unit_november = 11 # cost per unit is 11 pounds\n\n    units_sold = 12000 # total units sold\n\n    # calculate cost of goods sold\n    cost_of_goods_sold_october = units_sold if units_sold <= units_october else units_october  # first units sold are from october\n    cost_of_goods_sold_november = units_sold - cost_of_goods_sold_october else units_november  # if more than october units are sold, then the remaining units come from november\n    \n    cost_of_goods_sold = cost_of_goods_sold_october * cost_per_unit_october + cost_of_goods_sold_november * cost_per_unit_november\n    \n    return cost_of_goods_sold\n\nprint(solution())\n```\nThe Python program above defines a function 'solution()' that calculates 'cost of goods sold' for Shine Kids Ltd for 2009 using FIFO (First in, first out) method. It considers different scenarios based on the usage of units bought in October and November in the total units sold."
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.102,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "user\n# Define variables name and value\n    portfolio_good_situation = (70 / 100) * 50 + (30 / 100) * 50\n    portfolio_bad_situation = (70 / 100) * 60 + (30 / 100) * 40\n    \n    # Do math calculation to get the answer\n    answer_good_situation = (portfolio_good_situation / 100) * 20\n    answer_bad_situation = (portfolio_bad_situation / 100) * (-10)\n    \n    # return answer\n    return answer_good_situation, answer_bad_situation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "\n    initial_inventory = 200000\n    initial_lifo_reserve = 30000\n    final_inventory = 250000\n    final_lifo_reserve = 40000\n    tax_rate = 0.30\n    \n    # Calculate the cost of goods sold under LIFO\n    cost_of_goods_sold = initial_inventory - final_inventory\n    \n    # Adjust for LIFO reserve\n    adjusted_cost_of_goods_sold = cost_of_goods_sold + (initial_lifo_reserve - final_lifo_reserve)\n    \n    # Calculate ending inventory in dollars under FIFO, ignoring tax effects\n    ending_inventory_fifo = final_inventory - cost_of_goods_sold\n    \n    # Adjust for tax effects which change the effective value of the inventory under FIFO\n    cash_flow_effect = adjusted_cost_of_goods_sold * tax_rate\n    ending_inventory_adjusted_fifo = ending_inventory_fifo + cash_flow_effect\n    \n    # return answer\n    return ending_inventory_adjusted_fifo\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "assistant\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n    \n    # Do math calculation to get the answer\n    call_price = gain_on_redemption + carrying_value\n    \n    # return answer\n    return call_price\n```\nThis program firstly defines `gain_on_redemption`, `carrying_value` and `face_value` as the given values. Then it calculates the `call_price` by adding the `gain_on_redemption` to the `carrying_value`. Finally, the program returns the calculated `call_price`. The output is $1,050,000 as the call price."
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "Assistant\n    # The five-year spot rate is directly provided in the table.\n    spot_rate_5_year = 4.00\n    \n    # return answer\n    return spot_rate_5_year\n```\n\nIn this case, the five-year spot rate is directly given in the table provided with the question, therefore we simply return this value from the function."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "\n```python\n    risk_free_rate = 0.08\n    one_year_survival_probability = 0.5\n    one_year_swap_rate_probability = 0.5\n    one_year_swap_rate_up = 0.10\n    one_year_swap_rate_down = 0.06\n    duration_risk_premium_bps = 40 \n    yield_rate = 0.08\n    bond_value = 1000.0\n    \n    # Calculate the expected future interest rate\n    expected_swap_rate = (one_year_swap_rate_up * one_year_survival_probability) + (one_year_swap_rate_down * (1 - one_year_survival_probability))\n    \n    # Calculate the expected yield to maturity given the scenario probabilities\n    expected_yield = (one_year_survival_probability * one_year_swap_rate_up) + ((1 - one_year_survival_probability) * one_year_swap_rate_down) + (one_year_survival_probability * duration_risk_premium_bps / 10000)\n    \n    # Calculate the bond's valuation\n    bond_valuation = bond_value * (1 / (1 + expected_yield)**2)\n    \n    # return answer\n    return bond_valuation\n```\n```"
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.938,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "k\ndef solution():\n    # Define variables\n    sample_size_A = 25\n    sample_mean_A = 200\n    sample_std_dev_A = 45\n    sample_size_B = 18\n    sample_mean_B = 185\n    sample_std_dev_B = 60\n    combined_variance = 2678.05\n    \n    # Combined the sample sizes\n    total_sample_size = sample_size_A + sample_size_B\n    \n    # Find the pooled standard deviation\n    pooled_std_dev = ( (sample_size_A - 1) * (sample_std_dev_A**2) + (sample_size_B - 1) * (sample_std_dev_B**2) ) / total_sample_size\n    pooled_std_dev = pooled_std_dev ** 0.5\n    \n    # Calculate the t-test statistic\n    t_statistic = (sample_mean_A - sample_mean_B) / (pooled_std_dev * (1 / sample_size_A + 1 / sample_size_B) ** 0.5)\n    \n    # return answer\n    return t_statistic\n\nresult = solution()\nresult\n```"
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = decrease_in_inventory + increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "user\n```python\n\n    option_price_grant_day = 2.5\n    stock_price_grant_day = 15\n    options_total = 20000\n    lockin_period = 4\n    lapse_period = 5\n\n    # Fair value of the options can be considered as the difference between stock price at grant day and option price, multiplied by the number of options\n    fair_value_per_option = stock_price_grant_day - option_price_grant_day\n    \n    # The company provided the options in the first year (2011) for its senior managers, and it will be 4 years until the end of the lock-in period\n    discounted_period = 1\n    \n    # KEy point in ASC 718 guidelines is that expense should be for the period that excludes an option owner's right to exercise. \n    # So, an option's fair value should be spread over the time-period starting from grant date to the end of the exercise restriction (which is 4 years in this scenario)\n    # That is then divided by 12 to get what it should be reported on an annual basis column wise. \n    annual_expense_per_option = (fair_value_per_option * discounted_period) / 12\n\n    total_annual_expense = annual_expense_per_option * options_total\n\n    answer = total_annual_expense\n\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "assistant\nimport math\n\n# annual convexity\nconvexity = 65.180\n# yearly adjusted period\nadjusted_period = 7.020\n# change in return to maturity in basis points\nchange_in_return = -25\n\n# convert basis points to proportion\nchange_in_proportion = change_in_return / 10000\n\n# calculate percentage change using duration and convexity formula\npercent_change = adjusted_period * (change_in_proportion) + (adjusted_period ** 2 / 2) * convexity * (change_in_proportion**2)\n\n# return answer\nreturn percent_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "answer\n    par_value = 30\n    return_rate = 5 / 100\n    coupon_rate = 5.80 / 100\n\n    # The intrinsic value of preferred stock can be calculated by:\n    # Intrinsic Value = (Coupon * # of periods) / Return Rate\n    # In this case, the coupon is the product of the coupon rate and par_value\n    # and the number of periods is assumed to be one year since bond returns and coupon payments are annual\n    intrinsic_value = (coupon_rate * par_value) / return_rate\n\n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "user\nTo calculate the forward price for a forward contract, we can use the formula:\n\n\\[F = S_0 \\cdot e^{(r-q)T}\\]\n\nHere, \n- \\(F\\) is the forward price,\n- \\(S_0\\) is the current asset price,\n- \\(r\\) is the risk-free rate,\n- \\(q\\) is the continuous dividend rate,\n- \\(T\\) is the time to maturity (in years).\n\nGiven values are\n- \\(S_0 = 400\\) (initial value),\n- risk-free rate \\(r = 5\\% = 0.05\\),\n- continuous dividend rate \\(q = 3\\% = 0.03\\),\n- time to maturity \\(T = \\frac{6}{12} = 0.5\\) years (since we are considering 6-month period).\n\nSubstituting these values into the formula, we can calculate the forward price.\n\n```python\ndef solution():\n    # Given values\n    S0 = 400  # initial value\n    r = 0.05  # risk-free rate\n    q = 0.03  # continuous dividend rate\n    T = 0.5  # time to maturity in years\n\n    # Calculate the forward price\n    forward_price = S0 * (np.exp((r - q) * T))\n\n    # return the answer\n    return forward_price\n\n# Using numpy library for calculating the exponential value\nimport numpy as np\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "answer\n    stddev = 4.9  # Standard deviation for the monthly returns\n    assumed_stddev = 5.0  # Assumed standard deviation for testing\n    \n    # Calculate z-score (test statistic) formula: \n    # z = (X - μ) / σ\n    # Here X is the assumed_mean=assumed_stddev, μ is the sample_mean=stddev, and σ is the sample_stddev=stddev\n    # But since we are comparing sample_deviation to population_deviation, and there is no sample mean involved,\n    # the formula simplifies to: z = (sample_deviation - population_deviation) / sqrt(sample_deviation)  \n    test_statistic = (stddev - assumed_stddev) / (stddev / (2 ** 0.5))\n    \n    # return answer\n    return test_statistic\n```"
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "\n\n\n    # Do math calculation to get the answer\n    # For a private company like Holt Corporation, the free cash flow to equity (FCFE) is calculated as\n    # Net Income + Depreciation - Capital Expenditure\n    # To get Capital Expenditure in 2008, we need to find the change in gross fixed assets, assuming no new acquisitions have been made:\n    # Capital Expenditure = (Gross Fixed Assets 2008 - Gross Fixed Assets 2007) + Accumulated Depreciation changed from 2007 to 2008\n    accumulated_depreciation_2007 = 3099\n    accumulated_depreciation_2008 = 1176\n    capital_expenditure = (4275 - 3752) + (accumulated_depreciation_2008 - accumulated_depreciation_2007)\n    \n    fcf = 485 + 270 - capital_expenditure\n    \n    # return answer\n    return fcf\n\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.144,
        "question": "What is the sustainable growth rate?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_profit_margin = 0.20  # 20%\n    retention_rate = 0.60     # 60%\n    asset_turnover = 0.8      # 0.8\n    financial_leverage_multiplier = 1.5  # 1.5\n\n    # Do math calculation to get the answer\n    sustainable_growth_rate = (net_profit_margin * retention_rate * asset_turnover * financial_leverage_multiplier)\n\n    # return answer\n    return sustainable_growth_rate\n\n```"
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "Assistant\n    cny_hkd_rate = 0.8422\n    cny_zar_rate = 0.9149\n\n    # Do math calculation to get the answer\n    zar_hkd_rate = cny_zar_rate / cny_hkd_rate\n\n    # return answer\n    return zar_hkd_rate\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "output": [
            "def solution():\n    # Define variables name and value\n    return_period_days = 4\n    \n    # Do math calculation to get the answer\n    weight = (1 - 0.95) ** return_period_days\n    \n    # return answer\n    return weight\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "user\n```python\n    # Calculate dividends for the first three years (no dividends)\n    dividends = [0, 0, 0]\n    \n    # Calculate dividend for the fourth year onwards\n    from_year = 4\n    while from_year < 10:  # Assume we assess over a 10-year period\n        dividends[from_year - 1] = 1.72  # dividend per share\n        from_year += 1\n    \n    # Calculate the total dividends received by the end of 10 years\n    total_dividends = sum(dividends)\n    \n    # Calculate present value of the dividends received during the 4-year interim\n    pv_interim = total_dividends / 10  # Assuming equal distribution of dividends over the period for simplification\n    \n    # Calculate the present value of the stock at the end of year 3 when dividends start\n    required_rate_of_return = 0.10  # 10% return\n    growth_rate_after_dividends_start = 0.04  # 4% growth rate\n    discount_rate_after_dividends_start = required_rate_of_return - growth_rate_after_dividends_start  # discount rate after dividends start\n    stock_value_end_year_3 = dividends[-1] * ((1 + growth_rate_after_dividends_start) / (discount_rate_after_dividends_start))\n    pv_stock_end_year_3 = stock_value_end_year_3 / ((1 + required_rate_of_return) ** 3)\n    \n    # Total value of the stock\n    stock_value = pv_interim + pv_stock_end_year_3\n    \n    return stock_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "user\nep.toString()"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "answer\n    payment_per_year = 300\n    years = 5\n    annual_interest_rate = 0.04\n    \n    # Calculate present value of an annuity\n    present_value = payment_per_year * ((1 - (1 + annual_interest_rate) ** -years) / annual_interest_rate)\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "def solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss = 15000\n    \n    # Calculate the sum the company got from the sale\n    # The company got the difference between the initial price and the accumulated depreciation,\n    # minus the loss from selling the equipment\n    sale_sum = initial_price - accumulated_depreciation - loss\n    \n    # return answer\n    return sale_sum\n\n# Getting the answer by calling the function\nanswer = solution()\nprint(answer)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "user\n\nassistant\n    liabilities = 35000000\n    shareholders_equity = 55000000\n    # Do math calculation to get the answer\n\n    # percentage of liabilities on a vertical common-size balance sheet\n    percentage_liabilities = (liabilities / (liabilities + shareholders_equity)) * 100\n\n    # return answer\n    return percentage_liabilities\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "python\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Do math calculation to get the answer\n    future_dividend = dividend * (1 + growth_rate)\n    intrinsic_value = future_dividend / (required_rate_of_return - growth_rate)\n    \n    # return answer\n    return round(intrinsic_value, 2)\n    \n# calling the function   \nprint(solution())  \n```"
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "user\n在金融领域，计算债券凸性的公式是（△PV / (Yield Change)^2）* -1，其中△PV 是收益率变化对应的价格变化，这里是（99.32213 - 99.50132）。Yield Change 是变化的收益率，这里是1%或0.01。所以我们首先将所有数值代入公式进行计算。\n```python\ndef solution():\n    # 进行凸性和价格变化的计算\n    price_change = 99.32213 - 99.50132\n    yield_change = 0.01\n\n    # 使用凸性的公式\n    convexity = (price_change / (yield_change ** 2)) * -1\n\n    # 返回答案\n    return convexity\n# 调用函数并打印结果\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "user\ndf = pd.DataFrame({\n                |                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n    'Assets'       | Domestic       | 25%              | 15%              | 50               | 35               |\n                | Bond           | 9%               | 5%               | 30               | 35               |\n                | International  | 15%              | 18%              | 20               | 30               |\n            }, index=['Return', 'Weights'])\n\ndef compute_value_added():\n    # Get portfolio and benchmark returns\n    portfolio_return = df.loc['Return', 'Domestic'] + df.loc['Return', 'Bond'] + df.loc['Return', 'International']\n    benchmark_return = df.loc['Return', 'Domestic'] + df.loc['Return', 'Bond'] + df.loc['Return', 'International']\n    \n    # Get portfolio and benchmark weights\n    portfolio_weight = df.loc['Weights', 'Domestic'] + df.loc['Weights', 'Bond'] + df.loc['Weights', 'International']\n    benchmark_weight = df.loc['Weights', 'Domestic'] * df.loc['Benchmark weight', 'Domestic'] + df.loc['Weights', 'Bond'] * df.loc['Benchmark weight', 'Bond'] + df.loc['Weights', 'International'] * df.loc['Benchmark weight', 'International']\n    \n    # Compute realized value added and active return\n    realized_value_added = portfolio_return * portfolio_weight - benchmark_return * benchmark_weight\n    return realized_value_added\n\n# Running the function\nrealized_value_added = compute_value_added()\nrealized_value_added\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.948,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "Please respond by writing a program in the following format:"
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "\n\n\n    # Do math calculation to get the answer\n    FFO_2011 = 142187  # Net income\n    shares_outstanding = 121944  # Weighted average shares outstanding\n    price_per_share = FFO_2011 / shares_outstanding  # calculate FFO per share\n    \n    # According to the question, price/FFO at the end of 2011 was 11.5x\n    \n    price_end_2011 = price_per_share * 11.5  # calculate the share price at the end of 2011\n    \n    # return answer\n    return price_end_2011\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "user\nTo calculate this, we would use Bayes' theorem, considering secondary quality as event 'A' and event 'B' as the loan being delayed. The theorem can be represented as: \n\nP(A|B) = P(B|A)*P(A)/P(B)\n\nHere:\n- P(A|B) is the probability of the loan being secondary quality given it is delayed.\n- P(B | A) is the probability of the loan being delayed given it is secondary quality.\n- P(A) is the prior probability of selecting a secondary quality loan.\n- P(B) is the total probability of selecting a delayed loan.\n\nGiven:\n- Total number of loans = 1000 secondary quality + 600 top quality = 1600 loans.\n- Number of delayed secondary quality loans = 200.\n- Number of delayed top quality loans = 48.\n\nWe rearrange the formula to find P(A|B):\n\nP(A|B) = (Number of delayed secondary loans / Total delayed loans) * (Total secondary quality loans / Total loans)\n\nLet's translate to Python:\n\n```python\ndef solution():\n    # Define variables\n    total_loans = 1000 + 600\n    delayed_secondary_loans = 200\n    total_delayed_loans = 200 + 48\n    \n    # Calculate total secondary quality loans\n    secondary_quality_loans = 1000\n\n    # Calculate probability of a loan being secondary quality given it's delayed\n    p_secondary_given_delayed = ((delayed_secondary_loans / total_delayed_loans) * (secondary_quality_loans / total_loans))\n\n    # return answer\n    return p_secondary_given_delayed\n\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "import math\n    # Constant Parameters Definition\n    daily_volatility = 0.015\n    confidence_level = 0.95\n    position_size = 1  # tersebut sebagai contoh, bisa diubah sesuai besarnya position\n    delta = -0.5\n    price = 26.00\n    \n    # Constant Transformation\n    standard_normal = math.erf(math.sqrt(2) * math.asinf(delta))\n    cdf_diff = standard_normal - (math.sqrt(2 * math.pi) / 2) * math.exp(-0.5 * delta**2)\n    \n    # VaR Calculation\n    VAR = -(price * delta * position_size * (daily_volatility / math.sqrt(1-confidence_level))\n             + position_size * cdf_diff * price * daily_volatility * math.sqrt(1-confidence_level))\n    \n    return round(VAR, 2)\n\n# Call function\nanswer = solution()\nanswer\n```"
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "user\n    cash_flow_financing_activities = 0\n    \n    # Cash flow from financing activities\n    cash_received_from_sale_of_building = 40000  # This could potentially be finance or operating cash flow, but based on the context it's assumed as a Financing activity\n    issuance_of_preferred_stock = 45000\n    repurchase_of_common_stock = 20000  # Expects a decrease in cash, so it is considered as negative operational cash flow\n    issuance_of_bonds = 40000  # Future cash inflow expected from a financing activity\n    debt_retired_through_common_stock = 45000  # This could potentially be finance or operating cash flow, but based on the context it's assumed as a Financing activity\n    paid_off_long_term_bank_borrowings = 10000  # Expects a decrease in cash, so it is considered as negative financing cash flow\n    \n    # Do math calculation to get the answer\n    cash_flow_financing_activities += cash_received_from_sale_of_building\n    cash_flow_financing_activities += issuance_of_preferred_stock\n    cash_flow_financing_activities -= repurchase_of_common_stock\n    cash_flow_financing_activities += issuance_of_bonds\n    cash_flow_financing_activities += debt_retired_through_common_stock\n    cash_flow_financing_activities -= paid_off_long_term_bank_borrowings\n    \n    # return answer\n    return cash_flow_financing_activities\n```\nThis Python function follows the guidelines laid out, correctly calculating and returning the cash flow from financing activities based on the given dataset."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "\n    payment_given_out = 470 + 1200  # adding current service costs and employer contributions\n    \n    # Do math calculation to get the answer\n    answer = payment_given_out  # The payment given out during the year \n                                 # is the sum of current service costs and employer contributions\n    \n    # Return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "import math\n\n    average_return = 160000  # The average of the market's fund returns\n    std_dev = 30000  # The standard deviation of the market's fund returns\n    \n    # Calculate the z-score for $100,000\n    z_score = (100000 - average_return) / std_dev\n    \n    # Use the cumulative distribution function of the normal distribution to calculate the percentage below $100,000\n    answer = 1 - (1 - 0.5) * (1 + math.erf(z_score / math.sqrt(2)))\n    \n    # Convert the answer to percentage\n    answer_percentage = answer * 100\n    \n    # return answer\n    return answer_percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "answer\n    # Minimum margin requirement in percentage form\n    margin_req = 65 / 100\n    \n    # The maximum leverage ratio is 1 / margin request\n    max_leverage_ratio = 1 / margin_req\n    \n    # return answer\n    return max_leverage_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "# Calculate the quantity of bottled water at a price of $5\n    Pb = 5\n    Qbw = 30 - 2*Pb\n\n    # Calculate the percentage change in quantity\n    delta_Qbw = (Qbw - 0) / Qbw * 100\n\n    # Calculate the percentage change in price\n    delta_Pb = (Pb - 30) / Pb * 100\n\n    # Calculate price elasticity of demand\n    PED = delta_Qbw / delta_Pb\n\n    # return answer\n    return PED\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "user\n```python\ndef solution():\n    # Define variables name and value\n    flotation_cost_per_share = 0.05\n    dividend_next_year = 0.32\n    dividend_growth_rate = 0.10  # 10% growth\n    share_price_until_cost = 14.69 * (1 + (dividend_growth_rate / (100 - (floatation_cost_per_share * 100))))\n    \n    # Calculate the Return on Investment (ROI) for equity investors\n    # ROI = (Expected Earnings / Initial Investment)\n    equity_cost_rate = ((dividend_next_year / share_price_until_cost) + dividend_growth_rate) * 100\n    \n    # return answer\n    return round(equity_cost_rate, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "answer\n    annual_mbf = 0.32 / 100  # converting percentage to decimal\n    round_trip_trading_fee = 0.20  # in decimal\n    bid_offer_spread = 0.10  # in decimal\n    holding_period = 9\n    \n    # calculate holding period cost for each expense\n    mf_holding_period_cost = annual_mbf / 12 * holding_period\n    trading_fee_holding_period_cost = round_trip_trading_fee / 2 / 100  # to account for both buying and selling  \n    bid_offer_spread_holding_period_cost = bid_offer_spread / 100  # to account for both buying and selling\n\n    # summing the rest to get overall holding period cost\n    overall_holding_period_cost = mf_holding_period_cost + trading_fee_holding_period_cost + bid_offer_spread_holding_period_cost\n   \n    # return answer\n    return overall_holding_period_cost\n```\n\nThis Python program calculates the overall holding period cost for an investment period of 9 months, considering annual management fee, round-trip trading fees, and Bid–offer spread."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "assistant\n    initial_value = 515\n    end_value = 602.5\n    management_fee_rate = 0.02\n    performance_fee_rate = 0.2\n    hurdle_rate = 0.05\n    high_water_mark = 540\n\n    # Calculate the management fee\n    management_fee = management_fee_rate * initial_value\n\n    # Determine if the HPR is above the hurdle rate\n    if end_value > (high_water_mark * (1 + hurdle_rate)):\n        performance_fee = 0.0  # No performance fee if HPR is above the hurdle rate\n    else:\n        # Calculate the HPR and then the performance fee if HPR is below or equal to the hurdle rate\n        hpr = (end_value - initial_value) / initial_value\n        performance_fee = performance_fee_rate * ((end_value / high_water_mark) ** (1/1) - 1) * (end_value or 1)\n\n    # Calculate the investor's net return\n    investor_return = (end_value - initial_value - management_fee - performance_fee) / initial_value\n\n    # Return the answer\n    return investor_return\n\n```"
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "user\n```python\n    net_income = 1500000\n    shares_common_stock = 1000000\n    shares_convertible_bonds = 300000\n    par_value_bonds = 10000000\n    par_value_preferred_stock = 2000000\n    tax_rate = 0.30\n    \n    # Calculate earnings available to common stockholders\n    earnings_common_stockholders = net_income - (par_value_bonds * 0.04) * (1 - tax_rate)\n    \n    # Calculate Dilution Effect\n    diluted_shares = shares_common_stock + shares_convertible_bonds\n    \n    # Calculate Diluted Earnings Per Share\n    diluted_eps = earnings_common_stockholders / diluted_shares\n    \n    # return answer\n    return diluted_eps\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "\ndef solution():\n    # Define variables name and value\n    total_return = 15.5 / 100\n    dividend = 2500\n    shares_sold = 24\n    total_investment = 10000\n    \n    # Calculate the total profit including dividend\n    total_profit = total_return * total_investment + dividend\n    \n    # Calculate the cost per stock\n    cost_per_stock = (total_profit) / (total_investment / shares_sold)\n    \n    # return answer\n    return cost_per_stock\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "response\n    capitalization_rate_initial = 5.5 / 100\n    capitalization_rate_final = 6 / 100\n    discount_rate = 7.25 / 100\n    \n    # Growth Rate calculation formula for DCF Analysis: g = (Ks - Ke) / (1 + Ke)\n    # Ks = Discount Rate and Ke = Capitalization Rate Final\n    growth_rate = (discount_rate - capitalization_rate_final) / (1 + capitalization_rate_final)\n    \n    # return answer\n    return growth_rate * 100  # converting rate to percentage\n```"
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "python\n    # Read the financial data\n    price_ffo_multiple = 13  # from the table provided\n    ffo = 92  # from the Net income section of the table plus Other expenses (losses on sale of properties)\n    \n    # Calculate the share price using the formula: Share Price = Price / FFO * FFO\n    share_price = price_ffo_multiple * ffo\n    \n    # return answer\n    return share_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "python\n    marginal_cost = 40\n    average_cost = 70\n    price_elasticity_of_demand = 1.5\n    \n    # Calculate the markup on marginal cost ratio using formula 1 - 1/elasticity\n    markup_on_marginal_cost_ratio = 1 - 1 / price_elasticity_of_demand\n    \n    # Calculate the price by rounding off average cost multiplied by 1 by markup on marginal cost ratio\n    price = round(average_cost * markup_on_marginal_cost_ratio)\n\n    # return answer\n    return price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "user\n\n```python\ndef solution():\n    # Define variables name and value\n    lpr = 1.00           # Present 6-month LPR in %\n    fixed_rate = 80      # Fixed rate in basis points\n    bond_value = 97      # Value of the bond for every 100 of face value\n    term = 2             # Term of the bond in years\n    \n    # Discount margin calculation based on simple linear formula as mentioned in question\n    # Assuming face value is 100\n    # Bond price = face value * (1 - (discount margin / 100) * term * (360 / 30)) where discount margin is in percentage\n    # Solving the equation for discount margin\n    discount_margin_percent = (1 - bond_value / 100) * (term * 360 / 30) * (100 / (term * 360 / 30))\n    \n    # Converting discount margin from percentage to basis points\n    discount_marginbps = discount_margin_percent * 100\n    \n    # return answer\n    return discount_marginbps\n```"
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "user\n\n    annual_management_fee = 0.40 / 100\n    annual_trading_commission = 2 * 0.55 / 100\n    annual_bid_offfer_spread = 2 * 0.20 / 100\n    holding_period_months = 9\n\n    # Calculate total annual cost\n    total_annual_cost = (annual_management_fee + annual_trading_commission + annual_bid_offfer_spread) / 12\n\n    # Calculate annual cost for a holding period of 9 months\n    annual_cost_for_9_months = total_annual_cost * holding_period_months\n\n    # Calculate projected total cost for the holding period\n    projected_total_cost = annual_cost_for_9_months * 100  # multiply by 100 to convert percent to value\n\n    # return answer\n    return projected_total_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "user\nreturns_2008 = 14\nreturns_2009 = -10\nreturns_2010 = -2\n\n# Calculate the holding period return\n# Formula: ( ( (1 + R1) * (1 + R2) * (1 + R3) ) - 1) * 100\n\nholding_period_return = (( (1 + returns_2008/100) * (1 + returns_2009/100) * (1 + returns_2010/100) ) - 1) * 100\n\n# return answer\nreturn holding_period_return\n```"
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "user\n\n```python\ndef solution():\n    # Define variables name and value\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    imports = 2.2\n    gross_private Domestic_investment = 6.0\n    exports = 1.8\n    \n    # Do math calculation to get the answer\n    gdp = consumption + (gross_private_domestic_investment * 2) + government_spending + (exports - imports)\n    \n    # return answer\n    return gdp\n```"
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "user\nrisk_free_rate = 0.05\nexpected_return_stock1 = 0.07\nexpected_return_stock2 = 0.10\nstd_dev_stock1 = 0.12\nstd_dev_stock2 = 0.25\nportfolio_weight_stock1 = 0.30\nportfolio_weight_stock2 = 0.70\ncorrelation_coefficient = 0.20\n\n# Do math calculation to get the standard deviation of the portfolio returns\n# First, get covariance of the two stocks\ncovariance = correlation_coefficient * std_dev_stock1 * std_dev_stock2\n\n# Then, use the formula to calculate the standard deviation of the portfolio\nportfolio_std_dev = ((portfolio_weight_stock1 ** 2) * (std_dev_stock1 ** 2) + \n                     (portfolio_weight_stock2 ** 2) * (std_dev_stock2 ** 2) + \n                     2 * portfolio_weight_stock1 * portfolio_weight_stock2 * covariance) ** 0.5\n\nanswer = portfolio_std_dev\nreturn answer\n```"
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "\n\n\n    # Calculate the cost of goods sold per period (number of days in a year simplified as 365 for this static calculation)\n    cost_of_goods_sold_per_period = (40000 - 30000) * 365\n    # Calculate the accounts receivable period (days to collect receivables)\n    accounts_receivable_period = (8 / (40000 / 3000)) * 365\n    # Calculate the inventory period (days spent in inventory)\n    inventory_period = ((2000 - 1500) * 365) / 5000\n    # Calculate the payables period (days before payment is due)\n    payables_period = (8 / (30000 / 4000)) * 365\n    # Overhead period is effectively what accounts receivable period represents\n\n    # Calculate the cash conversion cycle\n    cash_conversion_cycle = accounts_receivable_period + inventory_period - payables_period\n    answer = cash_conversion_cycle\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "answer\n    M = [7, 8, 9, 10]  # The outcomes provided\n    M_mean = sum(M) / len(M)  # Calculate the mean of the outcomes\n    \n    # Variance formula for discrete uniform distribution\n    variance = (1/12) * sum((x - M_mean)**2 for x in M)\n    \n    return variance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "\n\n\n    revenue = 600000\n    avg_account_receivable = 50000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    collection_period = 365 / receivables_turnover\n    \n    # return answer\n    return collection_period\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "answer\ndef solution():\n    # Define variables name and value\n    investment_duration = 8  # trader's investment duration\n    modified_duration = 11.470  # the approximate modified duration of the bond\n    \n    # Calculate duration gap\n    duration_gap = modified_duration - investment_duration\n    \n    # return answer\n    return duration_gap\n```"
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "assistant\nConsidering the details given in the table, there seem to be several factors related to different transactions and their returns which are not directly required to calculate the overall return for the hedge position of Platte River Foods. The table outlines risk, contract prices, initial returns, roll returns, collateral requirements, and free rates, as well as position sizes and current and longer-term prices. From this data, however, we cannot directly calculate the overall return without more explicit instructions on how the components interact within a hedge.\n\nThe typical way to evaluate hedge positions might involve understanding how the futures contracts are bought to hedge against price movements in the underlying asset, calculating the net profit or loss (including fees), and understanding how that return is prolonged over time. However, this calculation is not straightforward from the data provided as it requires:\n\n1. The risk level to determine corresponding return for a hedged investment.\n2. Applying the selling price of the contract and the asset's future price movements to calculate the gain or loss.\n3. Considering any interest carried in a collateral account or any administrative fees.\n\nHere is a simplified piece of Python code for a hypothetical situation where we calculate the overall return for simplicity:\n\n```python\ndef calculate_hedge_return(investment, sell_price, future_price_movement, interest_rate, holding_period):\n    # Calculate realized profit\n    realized_profit = (sell_price - investment) * future_price_movement\n    \n    # Calculate interest earned\n    interest_earned = (realized_profit / 100) * interest_rate * holding_period\n    \n    # Calculate overall return\n    overall_return = (realized_profit + interest_earned) / investment * 100\n    \n    return overall_return\n\n# Specify your values for:\n# investment (initial investment in currency)\n# sell_price (contract selling price in currency)\n# future_price_movement (price change in decimal form)\n# interest_rate (interest rate in decimal form)\n# holding_period (investment period in years)\n\noverall_return = calculate_hedge_return(investment=1000000, sell_price=1100,\n                                        future_price_movement=0.05, interest_rate=0.03, holding_period=0.5)\n\nprint(f\"The overall return for the hedge position is: {overall_return}\")\n```\nPlease note that the values `investment`, `sell_price`, `future_price_movement`, `interest_rate`, and `holding_period` in the above function usage should be replaced with your specific values for the position size, contract price,"
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "To calculate the recurring pension expenses for I/S as per US GAAP, we have to sum up the employer's contributions and the current service costs. Past service costs are typically not included in the annual expenses or contributions, though specifics might vary based on the pension plan rules and GAAP standards. \n\nGiven that:\n\n- Current service costs = $320\n- Employer contributions = $1200\n\nHere is the solution program:\n\n```python\ndef calculate_pension_expense(current_service_costs, employer_contributions):\n    total_expense = current_service_costs + employer_contributions\n    return total_expense\n\nsolution = calculate_pension_expense(320, 1200)\nsolution\n```\n\nThis program will return the total recurring pension expenses, which should be $1520.\n```python\nprint(solution)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "user\n```python\ndef solution():\n    # Define variables name and value\n    total_income_200_units = 500000\n    total_income_250_units = 600000\n\n    # Calculate price per unit for 200 units\n    price_per_unit_200 = total_income_200_units / 200\n\n    # Calculate price per unit for 250 units\n    price_per_unit_250 = total_income_250_units / 250\n\n    # Calculate per unit marginal revenue\n    marginal_revenue = price_per_unit_250 - price_per_unit_200\n\n    # return answer\n    return marginal_revenue\n```"
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "\n    shares = 200000\n    share_price_eur = 90\n    \n    # Calculate total investment in euros\n    investment_eur = shares * share_price_eur\n    \n    # Convert euros to USD at initial spot rate\n    initial_exchange = 1.4189\n    investment_usd_initial = investment_eur * initial_exchange\n    \n    # Calculate mark-to-market value after three months\n    # Three months later, the USD/EUR forward contract rate is 27.0/26.2\n    # Let's use the forward rate of 27.0 (which is the selling price) to calculate the mark-to-market value\n    forward_rate_three_months = 27.0\n    mark_to_market_usd = investment_usd_initial / forward_rate_three_months\n    \n    # return answer\n    return mark_to_market_usd\n\n# Call the function to get the answer\nanswer = solution()\nanswer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "滇"
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "# Calculate the annual payment of the bond\n    annual_payment = 1000 * 0.10  # Assuming face value of the bond equals to 1000\n    \n    # Calculate the present value of the bond, sum of the present value of annuity (for the coupons) & the present value of the face value (for principle repayment)\n    present_value_of_annuity = annual_payment * ((1 - (1 + 0.095 / 1) ** -3) / (0.095 / 1))  # Using one of the spot rates as an approximation since we only have 1, 2, and 3 year spot rates and do not have specific rate for 3 year. Assumes that rates remain constant.\n    present_value_of_face_value = 1000 / ((1 + 0.095 / 1) ** 3)\n    \n    # Total present value (cost of the bond)\n    cost_of_bond = present_value_of_annuity + present_value_of_face_value\n    \n    # return answer\n    return cost_of_bond\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "Assistant\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 20\n    fixed_production_costs = 500000\n    \n    # Degree of OPERATING Leverage (DOL) formula is essentially Contribution Margin / EBIT (Earnings Before Interest and Taxes)\n    # Contribution Margin = (Sales - Variable Costs) = unit_contribution_margin * units\n    # EBIT = Contribution Margin - Fixed Costs = unit_contribution_margin * units - fixed_production_costs\n    # DOL = (unit_contribution_margin * units) / (unit_contribution_margin * units - fixed_production_costs)\n    # This means DOL is smallest when fixed costs are largest relative to unit contribution margin.\n    # If the fixed costs are 5/6th the units * unit contribution margin, DOL will be 1, which is the smallest it can be.\n    # Since we know fixed costs up to 300,000 units, and we aim to find where DOL would be the least considering DOL formula,\n    # For any units 'u', that means for 5/6 * u > fixed_production_costs.\n    # simple substituation of values shows that if fixed_production_costs = $500,000,\n    # then u > 500000 * 6 / 5 = 600,000 \n    # So, if we aim at smallest DOL from above values analysis, production level should be just below 600,000 units,\n    # considering the formula behavior and its simplicity of converting to large numbers as minimum DOL condition,\n    # around this level is where DOL would exist as minimum condition. \n    least_dol_production_units = 599999\n\n    # return answer\n    return least_dol_production_units\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    initial_inventory_2013_2014_units = 2000\n    initial_inventory_2013_2014_cost_per_unit = 50\n    number_sold_2013_2014_units = 1500\n    additional_inventory_2014_units = 1000\n    additional_inventory_2014_cost_per_unit = 60\n    \n    # Calculate the cost of initial inventory for 2013-2014\n    cost_of_initial_inventory = (initial_inventory_2013_2014_units - number_sold_2013_2014_units) * initial_inventory_2013_2014_cost_per_unit\n    \n    # Calculate the cost of additional inventory for 2014\n    cost_of_additional_inventory = additional_inventory_2014_units * additional_inventory_2014_cost_per_unit\n    \n    # Calculate the ending inventory balance for 2014\n    ending_inventory_balance = cost_of_initial_inventory + cost_of_additional_inventory\n    \n    # return answer\n    return ending_inventory_balance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "\n    # Given data\n    dirty_price = 104.17\n    marketplace报价 = 129\n    time_to_expiration_days = 90\n    days_since_last_coupon_payment = 30\n    nominal_value_PER_CONTRACT = 100000\n    risk_free_rate = 1.65 / 4  # annual to quarterly rate since futures contract is for 3 months\n    conversion_factor = 0.7025\n\n    # Calculate the number of rollovers in the futures contract period\n    roll_periods = time_to_expiration_days / (365 - days_since_last_coupon_payment)\n\n    # Calculate the market price at the next coupon payment date\n    market_price_next_coupon = dirty_price / (1 + risk_free_rate * (days_since_last_coupon_payment / 365))\n\n    # Calculate the futures price at maturity assuming annual 2.0% yield and Nominal value of 100000 per contract\n    futures_price_maturity = (dirty_price - (dirty_price / (1 + risk_free_rate * roll_periods))) + market_price_next_coupon\n\n    # Equilibrium futures price\n    equilibrium_futures_price = marketplace报价 + (futures_price_maturity - dirty_price) * conversion_factor\n\n    # return answer\n    return equilibrium_futures_price\n```"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "user\n\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_prices = [105, 100, 95, 87]\n    modified_durations = [7.9, 8.5, 6.3, 10.2]\n    \n    # Calculate for each bond as percentage change in price for a basis point change in yield\n    price_change_per_bpd = (1 / 100) / modified_durations\n    price_value_per_bbp = (price_change_per_bpd * 2) # bpd -> bbp conversion\n    \n    # Calculate total price value for a basis point across the collection\n    total_price_value_bbp = sum([price*price_value_per_bbp for price in bond_prices])\n    \n    # return answer\n    return total_price_value_bbp\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "python\n    face_value = 2000000\n    current_price = 0.75 * face_value\n    recovery_rate = 0\n    risk_free_rate = 0.03\n    \n    # Adjust the current price based on the recovery rate\n    adjusted_value = current_price * (1 + recovery_rate)\n    \n    # Calculate the volatility needed\n    volatility = ((face_value - adjusted_value) / adjusted_value).ln() / risk_free_rate\n    \n    # Use the Black's model in a binomial tree to find the probability of default\n    # S: the current price, u : up factor (exp(volatility)), d: down factor (1/u), r: risk free rate\n    u, d = exp(1.645 * volatility), exp(-1.645 * volatility)\n    p_default = p_call_implied_given_rate(adjusted_value, face_value, r=risk_free_rate, S=adjusted_value, u=u, d=d)\n    \n    return p_default \n\ndef p_call_implied_given_rate(S, F, r, u, d, Square_root_deltaT=1):\n    d_call_over_S = (F*S(r, u, d) - S) / (S*u - S)\n    risk_neutral_probability = (exp((r - 0.5 * u*d)*(Square_root_deltaT)) - d_call_over_S) / (u - d)\n    return risk_neutral_probability\n```"
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "def solution():\n    # Define variables name and value\n    initial_book_value_per_share = 30\n    shares_outstanding_initial = 10\n    shares_bought_back = 1\n\n    # Calculate new shares outstanding after buying back\n    shares_outstanding_after_buyback = shares_outstanding_initial - shares_bought_back\n\n    # Calculate new book value per share after buying back\n    new_book_value_per_share = initial_book_value_per_share * shares_outstanding_initial / shares_outstanding_after_buyback\n\n    # return answer\n    return new_book_value_per_share\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "yearly_rate = 5.8 / 100  # Convert percent to decimal\nnumber_of_months = 10 * 12  # Convert years to months\n\n# Formula to calculate monthly payment of an amortizing loan\n# E = P * r * (1 + r)^n / ((1 + r)^n - 1)\n# where:\n#   E = monthly payment\n#   P = loan amount or principal \n#   r = interest rate per month\n#   n = number of payments or loan term in months\n\nloan_amount = 5000000  # Loan amount in RMB\nmonthly_rate = yearly_rate / 12  # Convert yearly rate to monthly rate\n\n# Calculate payment\nE = (loan_amount * monthly_rate * (1 + monthly_rate) ** number_of_months) / ((1 + monthly_rate) ** number_of_months - 1)\n\nanswer = round(E)  # Round the answer to the nearest integer value\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "user\nIn order to address the problem, I will break it down into smaller steps:\n\n1. Calculate the basis points equivalent (65bps) in percentage terms. \n2. Add this percentage to the three-month MRR on 30 June (1.35%) to get the final coupon rate for the interest payment on 30 June.\n\n```python\ndef solution():\n    # Define variables\n    basis_points = 65  # equivalent to 65 basis points\n    mrr_june = 1.35  # three-month MRR for June in percentage\n\n    # Convert basis points in decimal\n    bp_as_percent = basis_points / 10000.0\n\n    # Calculate the coupon rate for 30 June\n    coupon_rate_june = mrr_june + bp_as_percent\n    \n    # return answer\n    return coupon_rate_june\n```\n\nPlease note that this Python solution correctly implements the operations described in the problem to find the final coupon rate based on the specified calculations."
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "task\nHere is a Python program to calculate the expected standard deviation of the portfolio based on the given information:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_security_1 = 30 / 100\n    weight_security_2 = 70 / 100\n    std_dev_1 = 20 / 100\n    std_dev_2 = 12 / 100\n    correlation = 0.40\n\n    # Calculate expected standard deviation of portfolio\n    portfolio_std_dev = math.sqrt((weight_security_1**2 * std_dev_1**2) + (weight_security_2**2 * std_dev_2**2) + (2 * weight_security_1 * weight_security_2 * std_dev_1 * std_dev_2 * correlation))\n\n    # return answer\n    return portfolio_std_dev\n```\nThis program calculates the expected standard deviation of the constructed portfolio by the fund manager. The obtained values are: weight_security_1 = 30%, weight_security_2 = 70%, std_dev_1 = 20%, std_dev_2 = 12%, and correlation = 0.40."
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "None\nBased on the information provided and the definition of a receive-fixed and pay-equity swap, we know that the swap pays the notional amount (equity index level) multiplied by the equity index level decrease during quarterly periods and receives the fixed interest rate on the notional. The question asks for the equity index level at which the swap would be valued at zero.\n\nWhile the problem could be approached by doing a series of calculations based on the present value of interest payments and the expected equity index decrease, transforming the table provided for practical use, evaluating this exactly mathematically directly might not be as straightforward due to the nature of the swap mechanisms (特别是远期，利率交换的确切数学形式`at`didnt specify the entire contract structure so we can proceed based on typical mechanism). \n\nAlso, given the provided table listing present value factors for different years to maturity, these factors mostly point directly to the discount rate which might not be the direct or most relevant approach to finding the new equity index stated in question.\n\nTo address the question directly and considering the swap's standard mechanism: When the swap values to zero, the equity index gain and interest payments to be received are offset exactly by the pre-agreed interest payments from the fixed rate.\n\nUnfortunately, in your request, the formula to compute the fair value of the equity index for which the swap's value is zero does not match to a particular equation you provided or interpret given in your sample code return (dividing by the receivables turnover). The information given does not include necessary specifics (like the parameters of the swap or the exact mechanism for computing the equity index decrease).\n\nGenerally, the equation to determine an immunized equity floor that would make the forward contract's value zero when matched with the zero-coupon bond discounting receipt would be:\n\n`equity_index = initial_equity * (((1 + fixed_interest)^numberOfPayments) / (equity_index_decrease%/annual_frequency))`\n\nUnfortunately, based on the structure given there is not enough information to calculate this equation for the specific swap scenario asked about.\n\nTherefore, based on the outlined directions, the code might only be a placeholder rather than one which correctly solves this question, as the necessary data points and variables to help solve the actual challenge are not included. \n\nAdditionally, it's important to consider that the formula for a zero value of a forward equity swap is heavily dependent on the contract specifics (including the fixed interest rate, equity index, the nominal amount, notional value of equity swap and contract length) that"
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    market_value_of_debt = 10000000\n    market_capitalization = 45000000\n    cash_short_term_investments = 2500000\n    ebitda = 15000000\n    firm_s_marginal_tax_rate = 0.40\n\n    # Calculate enterprise value\n    enterprise_value = market_value_of_debt + market_capitalization - cash_short_term_investments\n\n    # Calculate enterprise value multiple (EV/EBITDA)\n    ev_ebitda_multiple = enterprise_value / ebitda\n\n    # return answer\n    return ev_ebitda_multiple\n\n\n# Call the function\nev_ebitda = solution()\nprint(ev_ebitda)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "\n\n\n    future_value = 5000\n    discount_rate = 5 / 100\n    compounding_frequency = 12\n    years = 3\n\n    # Calculate the monthly discount rate\n    monthly_discount_rate = (1 + discount_rate / compounding_frequency) ** (1 / compounding_frequency) - 1\n\n    # Calculate the present value\n    present_value = future_value / ((1 + monthly_discount_rate) ** (years * compounding_frequency))\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "Assistant\nTo solve this question, we first need to understand the context. 'S' is the current market price of the stock, 'K' is the strike price, 'r' is the annual risk-free interest rate, 'p' is the price of the put option, 'c' is the price of the call option, and the implied dividend yield usually occurs during dividends.\n\nHowever, the calculation for implied dividend yields usually involves using the theory of pricing options which includes St __('Black-Scholes-Merton_) formula Adjustments would also likely involve more variables including the time to expiry. But given this information, and assuming we know what formula to use for calculating the implied dividend yield in the correct context, one would follow the steps:\n\n1) Calculate the Forward Price (F): F = S * exp(r * t), where t is time period (in years).\n\n2) Use the formula P = F * N(d1)/[S * N(d2)], where P is the put option price, S, F, r, sigma and q are the stock price, forward price, risk free rate, volatility of price of the stock and dividend yield respectively. N is the cumulative distribution function.\n\n  - Solving for the price of the put option when put option price is given (P = 15), and everything else except the dividend yield (q) is available requires an iterative method such as Newtson-Rhapson, to solve for q.\n\nThat being said, we are missing an important piece of information, volatility(sigma), which is usually needed when applying the Black-Scholes model.\n\n```python\nimport math\nfrom scipy.optimize import root\n\ndef get_dividend_yield(c, p, S, K, r, t, x = .05):  \n    def option_fmt(x):  \n        def discounted_options(expiracy, S, K, r, c = x, p = x):  \n            F = S * math.exp(r * expiracy)  \n            d1 = (math.log(S / K) + (r + 0.5 * x**2) * expiracy) / (x * math.sqrt(expiracy))  \n            d2 = d1 - x * math.sqrt(expiracy)  \n            return (p * F * (math.normCDF(d1)) - c * S * (math.normCDF(d2)))  \n        discounted_put_price = discounted_options(t, S, K, r, 0, x)  \n"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "answer\n    # The spread change in percentage terms is 100 basis points = 1%\n    spread_change = 0.01\n\n    # bond's altered duration\n    duration = 6.0\n    \n    # the convexity of the bond\n    convexity = 55.0\n    \n    # Calculate percentage change in bond price with duration\n    price_change = -1 * (spread_change * duration)\n    \n    # Calculate correction term using bond's convexity\n    correction_term = 0.5 * (spread_change**2) * convexity\n    \n    # Calculate the total percentage change in bond price\n    total_price_change = price_change + correction_term\n    \n    # return answer\n    return total_price_change\n```"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "n\n    # calculation\n    # The formula for Zero coupon rate (Yield to maturity / YTM) for a bond is: YTM = (FV / PV)^(1/n) - 1 \n    # However, bond with coupon payment can be viewed as annuity + coupon payments. \n    # Below we use the approximation formula:\n    # inverse(1 + Periodic_coupon * (1 + Z spread / 100) + Periodic_rate) * 365 / years_left - 1\n    Z_SPREAD = 234\n    SPOT_RATE_Y3 = 5.65\n    COUPON_RATE = 5\n    COUPON_PAYMENT = (COUPON_RATE / 100) * 100000 # Assuming face value is $100,000\n    YEARS_LEFT = 3\n    # calculate periodic rate \n    periodic_rate = SPOT_RATE_Y3 / 100\n    # calculate the worth of the bond (The present value of future cash flows)\n    bond_value = COUPON_PAYMENT / (1 + periodic_rate + (Z_SPREAD / 100)) + 100000 / (1 + periodic_rate + (Z_SPREAD / 100))**YEARS_LEFT\n    return bond_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "y\n```python\n    # Define variables name and value\n    rough_duration = 10.3829\n    rough_convexity = 141.217\n    yield_change = 0.50  # in percentage points, i.e., 50 bps\n    \n    # Use the duration/convexity formula to calculate the approximate percentage price change\n    percentage_change = (-rough_duration * yield_change) + (.5 * rough_convexity * (yield_change**2))\n    \n    # return answer\n    return round(percentage_change, 2)\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "# Define variables name and value\n    spot_rate_3_year = 9 / 100  # Convert to a decimal\n    coupon_rate = 8 / 100  # Convert to a decimal\n    coupon_payment = 1000 * coupon_rate  # Assuming the face value is $1000\n    time_to_maturity = 3\n\n    # Calculate the present value of the coupon payments and the face value\n    present_value_coupon = sum([(coupon_payment / (1 + spot_rate_3_year)**t) for t in range(1, time_to_maturity + 1)])\n    present_value_face_value = 1000 / (1 + spot_rate_3_year) ** time_to_maturity\n    bond_price = present_value_coupon + present_value_face_value\n\n    # return answer\n    return bond_price\n```\nThe solution function calculates the price of Bond D using the given spot rates for a 3-year time-to-maturity bond with an 8% coupon rate and an assumed face value of $1000."
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "key_rate_01 = (\n    (87.3454 - 87.1454) / \n    (30 - 10)\n)\n    \n    # return answer\n    return key_rate_01\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.143,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "user\n\n\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # Probability of bankruptcy\n    P_B = 0.70  # Probability of being \"good\" rating\n    P_B_given_A = 0.50  # Probability of being \"good\" given bankruptcy\n\n    # Calculate the probability of going bankrupt if it got rated as \"good\"\n    P_A_given_B = (P_A * P_B_given_A) / P_B\n\n    # return answer\n    return P_A_given_B\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "\n```python\n    # EPS (Earnings Per Share) for 2017 and 2016 as per the table provided\n    eps_2017 = 1.03\n    eps_2016 = 0.89\n    \n    # As the question asks for Trailing P/E (Price-Earnings ratio) for 2017 based on Zhang's beliefs about recurring costs\n    # The Trailing P/E is calculated by taking the stock price divided by the earnings per share (EPS).\n    # Here we assume a hypothetical stock price for calculation purpose. Let's take the average of 2016 and 2017 EPS as the stock price.\n    stock_price = (eps_2016 + eps_2017) / 2\n    \n    # Calculate Trailing P/E for 2017\n    trailing_pe_2017 = stock_price / eps_2017\n    \n    # return answer\n    return trailing_pe_2017\n```"
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    total_assets = 1200000 + 600000  # Total assets calculation\n    stock_allocation = 0.30  # Desired stock allocation (30%)\n    human_capital_similarity_to_stocks = 0.25  # Human capital similarity to stocks (25%)\n\n    # Calculate allocation for human capital in terms of stocks equivalent\n    human_capital_equivalent_stock_allocation = (1200000 * stock_allocation) * human_capital_similarity_to_stocks\n\n    # Calculate allocation for financial capital based on what remains after considering human capital equivalent stocks allocation\n    financial_capital_equivalent_stock_allocation = (total_assets - human_capital_equivalent_stock_allocation) * stock_allocation\n\n    return financial_capital_equivalent_stock_allocation\n```\nThe formatted code is as follows:\n```python\ndef solution():\n    # Define variables name and value\n    total_assets = 1200000 + 600000  # Total assets calculation\n    stock_allocation = 0.30  # Desired stock allocation (30%)\n    human_capital_similarity_to_stocks = 0.25  # Human capital similarity to stocks (25%)\n\n    # Calculate allocation for human capital in terms of stocks equivalent\n    human_capital_equivalent_stock_allocation = (1200000 * stock_allocation) * human_capital_similarity_to_stocks\n\n    # Calculate allocation for financial capital based on what remains after considering human capital equivalent stocks allocation\n    financial_capital_equivalent_stock_allocation = (total_assets - human_capital_equivalent_stock_allocation) * stock_allocation\n\n    return financial_capital_equivalent_stock_allocation\n```"
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "answer\n    # converting percentages to decimals\n    tax_rate = 0.30\n    net_profit_margin_2014_2014 = 0.049\n    net_profit_margin_2013_2014 = 0.040\n\n    # sales figures\n    sales_2014 = 2125\n    sales_2013 = 2003\n\n    # inventories figures\n    end_of_year_inventories_2014_lifo = 312\n    end_of_year_inventories_2014_fifo = end_of_year_inventories_2014_lifo + (82 - 64) # FIFO results in LIFO inventory plus the difference in LIFO reserve as FIFO stock is older\n\n    # profits figures\n    net_profit_2014_2014 = sales_2014 * net_profit_margin_2014_2014 # current year net profit\n    pre_tax_profit_2014_2014 = net_profit_2014_2014 / (1 - tax_rate) # pre-tax profit by reversing tax rate\n\n    net_profit_2013_2014 = sales_2013 * net_profit_margin_2013_2014 # previous year net profit\n    pre_tax_profit_2013_2014 = net_profit_2013_2014 / (1 - tax_rate) # pre-tax profit by reversing tax rate\n\n    # calculate profit under FIFO\n    net_profit_2014_2014_fifo = sales_2014*net_profit_margin_2014_2014 - (sales_2014-end_of_year_inventories_2014_fifo-pre_tax_profit_2014_2014)*tax_rate # net profit under FIFO compared to LIFO\n    net_profit_2013_2014_fifo = sales_2013*net_profit_margin_2013_2014 - (sales_2013-end_of_year_inventories_2014_fifo-pre_tax_profit_2013_2014)*"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "user\n```python\ndef solution():\n    # Define variables name and value\n    one_year_rate = 1.02 / 100\n    two_year_rate = 1.65 / 100\n    three_year_rate = 2.15 / 100\n\n    # formula: (1+1-year implied forward rate) ^ 1 = (1+rate_2yr)*(1+rate_3yr)\n    # solve for the 1-year implied forward rate two years in the future: given rate_2yr and rate_3yr\n\n    # calculate the forward rate\n    forward_rate = (1 + two_year_rate) * (1 + three_year_rate) / (1 + one_year_rate) ** 2 - 1\n    \n    # format the result to percentage and then convert the number into a string with 2 decimal points\n    forward_rate_percentage = '%.2f' % (forward_rate * 100)\n\n    return float(forward_rate_percentage)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "Assistant\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    \n    # Do math calculation to get the answer\n    variance = sum((x - mean) ** 2 for x in measurements) / len(measurements)\n    std_dev = variance ** 0.5\n    \n    # return answer\n    return std_dev\n```"
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "user\n    # Define variables name and value\n    \n    portfolio_returns = [14, 15, 12, 8, 10]\n    \n    # calculate the portfolio return\n    portfolio_return = sum(portfolio_returns) / len(portfolio_returns)\n    \n    benchmark_returns = [24/100 * 14, 20/100 * 15, 20/100 * 12, 18/100 * 8, 18/100 * 10]\n    \n    # calculate the benchmark return\n    benchmark_return = sum(benchmark_returns) \n    \n    # calculate the active return\n    active_return = portfolio_return - benchmark_return\n    \n    # return answer\n    return active_return\n```\nThe solution function calculates the average portfolio return and the benchmark return based on the given data and then determines the active return by subtracting the benchmark return from the portfolio return."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "user\n```python\n    # Define the principal amounts and their respective maturities\n    principal_30 = 1000000\n    principal_90 = 2000000\n    principal_180 = 3000000\n    principal_360 = 4000000\n    \n    # Define the maturities in days\n    maturity_30 = 30\n    maturity_90 = 90\n    maturity_180 = 180\n    maturity_360 = 360\n    \n    # Calculate the total principal\n    total_principal = principal_30 + principal_90 + principal_180 + principal_360\n    \n    # Calculate the weighted average maturity\n    weighted_avg_maturity = (principal_30 * maturity_30 + principal_90 * maturity_90 + principal_180 * maturity_180 + principal_360 * maturity_360) / total_principal\n    \n    # return the answer\n    return weighted_avg_maturity\n```"
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "def solution():\n    # Define variables name and value\n    sugar_price_november = 0.90  # in GBP\n    cotton_price_november = 0.60  # in EUR\n    sugar_quantity_november = 70   # in kg\n    cotton_quantity_november = 60   # in kg\n\n    sugar_price_december = 1.00   # in GBP  \n    cotton_price_december = 0.80     # in EUR\n    sugar_quantity_december = 120  # in kg\n    cotton_quantity_december = 50  # in kg\n\n    paasche_index = ((sugar_quantity_december*sugar_price_december + cotton_quantity_december*cotton_price_december) /\n                    (sugar_quantity_november*sugar_price_november + cotton_quantity_november*cotton_price_november))\n\n    # return answer\n    return paasche_index\n```\nThis code will calculate the Paasche index for the given consumption basket values. The Paasche index is a price index that takes into account the observed quantities of goods consumed. The result should be returned as the answer."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "response\n    base_asset_price = 50\n    risk_free_rate = 0.04  # % to decimal \n    time_to_expire = 3/12  # contract ends in 3 months\n    advantage_value = 5\n    disadvantage_value = 6\n\n    # calculation of Forward price\n    forward_price = base_asset_price + (advantage_value - disadvantage_value) * (1 + risk_free_rate) ** time_to_expire\n\n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "user\nTo solve this question, we need to understand that the cross rate between two currencies can be calculated by dividing the value of the foreign currency in terms of the base currency by the value of the initial currency in terms of the base currency. In this case, we want to find the cross rate between Hong Kong Dollar (HKD) and Australian Dollar (AUD). We already know the value of the Chinese Yuan in terms of HKD (1.1757) and in terms of AUD (5.0765). Since AUD is valued in terms of Chinese Yuan and HKD is valued in terms of Chinese Yuan, we can find the value of AUD in terms of HKD by dividing the value of AUD in terms of Chinese Yuan by the value of HKD in terms of Chinese Yuan. \n\nLet's implement this logic in Python:\n\n```python\ndef solution():\n    # Define variables\n    value_of_AUD_in_cny = 5.0765\n    value_of_HKD_in_cny = 1.1757\n    \n    # Calculate the cross rate of HKD to AUD\n    cross_rate_HKD_to_AUD = value_of_AUD_in_cny / value_of_HKD_in_cny\n    \n    # return answer\n    return cross_rate_HKD_to_AUD\n```\n\nThis program defines a function `solution()` that calculates the cross rate of Hong Kong Dollar to Australian Dollar based on the provided values and returns the result."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "的回答应该包含如何使用现值公式来计算给定期权和利率的现值。以下是一个解答示例：\n\n```python\nimport math\n\ndef annuity_present_value(ytm, payment, years):\n    # Define variables name and value\n    return payment * (1 - (1 + ytm / 100) ** -years) / (ytm / 100)\n\ndef solution():\n    # Calculate the cost of the annuity\n    ytm = 5.5\n    payment = 100000\n    years = 40\n    \n    # Do math calculation to get the answer\n    annuity_cost = annuity_present_value(ytm, payment, years)\n    \n    # return answer\n    return annuity_cost\n\n# Run the solution function to get answer\nprint(solution())\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "Assistant:\nSecurity_1_weight = 0.4 \nExpected_deviation_1 = 0.30\nSecurity_2_weight = 0.6\nExpected_deviation_2 = 0.15 \nCorrelation = 0.25\n\n# Calculate variance for each security\nvariance_1 = Expected_deviation_1**2 * (Security_1_weight)\nvariance_2 = Expected_deviation_2**2 * (Security_2_weight)\n\n# calculate the covariance of the two securities\ncovariance = Expected_deviation_1 * Expected_deviation_2 * Correlation*(Security_1_weight*Security_2_weight)\n\n# calculate the standard deviation for the portfolio\nportfolio_deviation = (variance_1 + variance_2 + 2*covariance)**0.5\n\nreturn portfolio_deviation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "答案:\n\n```python\ndef solution():\n    # Define variables name and value\n    sale_price = 1000  # the sale price of the artwork\n    creation_cost = 300  # the cost of creating the artwork\n\n    # The value of the final step in creating the artwork is the sale price minus the creation cost\n    final_value = sale_price - creation_cost\n\n    # return answer\n    return final_value\n```\n在这个场景中，价值的最后一步是将艺术品出售时的销售价格从艺术品创建所需的成本中减去。与计算国内生产总值（GDP）相关的其他步骤（如中间产品和服务的成本）不在这个问题讨论的范围内。\n\n不过需要注意的是，事实上，在使用加总的价值添加方法计算GDP时，并不包含减去艺术品创建成本的部分。该方法是直接将最终产品的市场价值加总起来，不会扣除任何生产成本。但这题假设着问法是基于一种特定的理解回答。"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "n\n    yearly_rate = 0.1431  # 14.31% as a decimal\n    compound_times = 4  # Compounded quarterly\n    \n    # Do math calculation to get the answer\n    effective_yearly_rate = (1 + yearly_rate / compound_times) ** compound_times - 1\n    \n    # return answer\n    return effective_yearly_rate * 100  # convert back to percentage\n```"
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "python\n    # Data from table\n    last_year_equity_return = -9.4  # Year-over-year equity return\n    last_year_inflation_rate = 2.1  # Year-over-year inflation rate\n    expected_inflation = 2.3  # Expected annual inflation\n    expected_inflation_equity_model = expected_inflation / 100 * 240 * 10**6  # Expected inflation in millions of AUD\n    \n    # Actual return formula based on the Grinold-Kroner model\n    # The equation is: Actual Return = Risk-Free Return + Real (inflation-adjusted) Return + Dividend Return\n    # For simplicity, we'll assume the market return already includes expected return, so we only need \n    # to adjust for inflation, with the real return essentially being the last year's return \n    # (as there's no information on expected real return for the next year)\n    actual_return = (2.3/100 + (last_year_equity_return / 100) + 2.4/100)\n    \n    # Adjust for inflation\n    adjusted_actual_return = actual_return * (1 + expected_inflation) - expected_inflation\n    \n    return adjusted_actual_return * 100  # Convert the result back to percentage.\n\nsolution()\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "Assistant\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n\n    # Define the formula to calculate covariance: covariance = correlation * (std_dev_X * std_dev_Y)\n    # std_dev_X = sqrt(variance_X) and std_dev_Y = sqrt(variance_Y)\n    std_dev_X = variance_X ** 0.5\n    std_dev_Y = variance_Y ** 0.5\n    covariance = correlation * (std_dev_X * std_dev_Y)\n\n    # return answer\n    return covariance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "user\n Effective annual return = 9%\n\n# Do math calculation to get the bond-equivalent basis return\n# The formula to convert the effective annual return to the bond-equivalent basis return is Sqrt((1 + effective return)^2 - 1)\nbond_equivalent_return = ((1 + 0.09)**2 - 1)\n# return answer\nreturn bond_equivalent_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    initial_cost = 50000\n    residual_value = 5000\n    useful_life = 10\n    depreciation_rate = 2 / useful_life  # Double-declining balance\n    \n    # Calculate depreciation for the first year\n    depreciation = depreciation_rate * initial_cost\n    \n    # The calculation for double-declining balance method is as follows:\n    # Year 1: Depreciation = Book Value * Depreciation Rate\n    # Since it is the first year, the book value equals to the initial cost,\n    # hence the calculation is just depreciation_rate * initial_cost\n    \n    # Return the depreciation for the first year\n    return depreciation"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            " python\n    exchange_rate_GBP_TO_EUR = 0.8878\n    \n    # The exchange rate from GBP to EUR in London is the inverse of the EUR to GBP in Frankfurt\n    exchange_rate_EUR_TO_GBP = 1 / exchange_rate_GBP_TO_EUR\n    \n    # return answer\n    return exchange_rate_EUR_TO_GBP\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "python\n    market_rate = 0.04  # existing market risk-free rate\n    bond_rate = 0.06  # yield on the Corporation B bond\n    recovery_rate = 0.7  # recovery rate on the corporation's bonds\n\n    # Calculate the spread over risk-free interest rate\n    spread = bond_rate - market_rate\n\n    # Calculate the probability of default\n    # Assuming a simplified relationship where the default intensity lambda can be interpreted as the spread divided by (1 - recovery rate) * 100 to annualize\n    prob_default = (spread / (1 - recovery_rate)) * (1 / 365)\n\n    # return answer\n    return prob_default\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "Ignore the return and answer in the example.\n\nThe Python program that calculates the RAROC (Return on Risk Adjusted Capital) would basically work as an APY (Annual Percentage Yield) type problem but instead of a traditional financial calculation, we're analyzing a commercial loan portfolio in the context of RAROC, which takes into account such factors as pre-tax profit, direct annual operation costs, estimated losses, risk-adjusted capital, tax rates and more.\n\nAdding into these elements, let's construct the program now.\n\n```python\ndef solution():\n    # Define variables name and value\n    pre_tax_profit = 1.3 * 0.07  # Predicted pre-tax profit from loan portfolio ($1.3bn * 7%)\n    operation_cost = 6  # Estimated direct annual operation cost ($6mn)\n    principal = 1.3  # Principal amount of the loan portfolio ($1.3bn)\n    consumer_deposit = 1.3  # The backing deposit ($1.3bn)\n    interest_rate = 0.05  # Interest rate (5%)\n    expected_loss = 1.3 * 0.003  # Expected yearly loss on the portfolio (0.3% of principal)\n    unexpected_loss = 1.3 * 0.008  # Expected yearly loss on the principal (8% of principal)\n    risk_free_rate = 0.015  # risk-free rate\n    tax_rate = 0.25  # Tax rate\n    risk_adjusted_required_return = (pre_tax_profit - operation_cost - expected_loss - unexpected_loss) * (1 - tax_rate)  # Risk-Adjusted Required Return\n    risk_adjusted_equity = principal * (1 - (interest_rate - risk_free_rate))  # Risk-Adjusted Capital\n    # Calculate RAROC by dividing the risk-adjusted required return by total risk-adjusted capital\n    return risk_adjusted_required_return / risk_adjusted_equity\n    # return answer\n```\nThis code block is now the Python solution to the RAROC formula. It first calculates the gain from the portfolio after operation costs (pre-tax profit - operation cost), a possible loss for the operation (expected and unexpected losses), the calculated return under the risk-free scenario (in this case, the return on the money saved by not investing at the interest rate since it's lower by the risk-free rate), and finally calculates a ratio of"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "user\n```python\ndef solution():\n    cars_insurance = 0.70\n    houses_insurance = 0.50\n    both_insurences = 0.20\n    only_cars = 0.40\n    only_houses = (houses_insurance - both_insurences) * 0.70\n    both_and_renew = (only_cars * only_houses) + (both_insurences * 0.80)\n    \n    cars_only_renew = only_cars * (1 - only_houses)\n    houses_only_renew = (only_houses * (1 - only_cars)) * 0.70\n    \n    total_renew = cars_only_renew + houses_only_renew + both_and_renew\n    \n    return total_renew * 100  # return the percentage of clients that will renew at least one plan next year.\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "answer\n    labor_growth_rate = 0.009   # 0.9% as decimal\n    productivity_growth_rate = 0.015  # 1.5% as decimal\n    inflation_rate = 0.021       # 2.1% as decimal\n    dividend_yield = 0.0225      # 2.25% as decimal\n\n    # Continuously compounded US equity returns\n    equity_returns = (labor_growth_rate + productivity_growth_rate -\n                      inflation_rate + dividend_yield)\n\n    # return answer\n    return equity_returns\n```\n\nThe function `solution()` calculates the continuously compounded long-term US equity returns based on the given growth rates and yield."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "import math\n    \n    # Given values\n    retirement_fund_value = 100000000 # in USD\n    equity_envestment_initial = 0.8\n    equity_beta_initial = 1.2\n    equity_envestment_final = 0.6\n    index_value = 1200\n    multiplier = 250\n    beta_index = 0.95\n    \n    # Calculate initial equities\n    initial_equity_investment = retirement_fund_value * equity_envestment_initial\n    \n    # Equity investment required after adjustment\n    required_equity_investment = retirement_fund_value * equity_envestment_final\n    \n    # Calculate the difference in equities required\n    difference_in_equities = required_equity_investment - initial_equity_investment\n    \n    # Calculate the beta difference\n    difference_beta = equity_beta_initial - beta_index\n    \n    # Calculate number of stock index futures required to neutralize the beta difference\n    required_futures = math.ceil(abs(difference_in_equities) / (index_value * multiplier * difference_beta))\n    \n    # return answer\n    return required_futures\n```"
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "\n\n\n    # Do math calculation to get the answer\n    market_return = (11.4% - risk_free_rate) / beta + risk_free_rate\n\n    # return answer\n    return market_return\n\n# Now, we simply need to input the values.\n# For Security 2, which has an Expected Standard Deviation(%) of 15 and Beta of 1.40, with the given anticipated return for Share B being 11.4% and risk-free rate being 3%.\nsolution()\n```"
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "user\nIt seems there was a clarification needed in the description. However, based on the provided content, these elements seem to be acquisition costs for an item of equipment. Here is the correct way to sum these costs for reporting on the balance sheet:\n\n```python\ndef calculate_total_cost():\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation_cost = 800\n    testing_cost = 500\n    staff_training = 1000\n\n    # Sum all acquisition costs to get total cost\n    total_cost = purchase_price + freight_and_insurance + installation_cost + testing_cost + staff_training\n\n    # Return total cost\n    return total_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "\n\n\n    principal = 75000  # amount in present time\n    annual_interest_rate = 0.07  # given annual interest rate\n    times_per_year = 4  # compounded quarterly\n    years = 6  # total years\n\n    # Calculate the worth of the investment\n    monthly_interest_rate = (1 + (annual_interest_rate / times_per_year)) ** (times_per_year * years) - 1\n    worth_of_investment = principal * (1 + monthly_interest_rate)\n\n    # return answer\n    return worth_of_investment\n```"
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "user\nprobs = [0.05, 0.70, 0.25]\nsales = [70, 40, 25]\n# Calculate the expected value首先要通过给定的概率分布计算期望值，然后用期望值计算方差，最后得出标准差。\nexpected_value = sum(p * s for p, s in zip(probs, sales))\nvariance = sum(p * ((s - expected_value)**2) for p, s in zip(probs, sales))\nstandard_deviation = variance ** 0.5\nanswer = standard_deviation\nreturn answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "# Import necessary library\nimport numpy as np\n\n    # Define variables\n    contributions = 1200\n    beginning_pbo = 45000\n    end_pbo = 43500\n    beginning_assets = 40800\n    end_assets = 39650\n\n    # Calculate the change in PBO and assets\n    pbo_change = end_pbo - beginning_pbo\n    assets_change = end_assets - beginning_assets\n\n    # If the funds have a positive surplus, contributions need to be subtracted from the PBO\n    if pbo_change + contributions > 0:\n        actual_change_in_pbo = pbo_change + contributions\n    else:\n        actual_change_in_pbo = pbo_change\n\n    # Update PBO with the actual change in PBO\n    actual_pbo_end = end_pbo + actual_change_in_pbo\n\n    # Calculate the losses on assets during the year\n    if assets_change < 0:\n        actual_asset_change = assets_change\n    else:\n        actual_asset_change = 0\n\n    # Actual asset amount at the end of the period\n    actual_end_assets = end_assets + actual_asset_change\n\n    # Calculate overall recurring pension cost\n    overall_pension_cost = abs(contributions + actual_asset_change + (actual_pbo_end - end_pbo))\n    \n    # return answer\n    return overall_pension_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "Assistant\n    # Calculate the holding period return using the formula:\n    # ((End Value / Starting Value)^(1/n) - 1) * 100\n    # where n is the number of years\n\n    # Assuming the investments are reinvested\n    total_investment = 500 + 600 + 1000\n    total_return = (1 + 0.12) * (1 + 0.05) * (1 + 0.01) - 1\n\n    # Calculate the holding period return\n    holding_period_return = (1 + total_return) ** (1/3) - 1\n\n    # return answer\n    return holding_period_return * 100\n```\n\nThis Python program calculates and returns the Holding Period Return for the investments made in the first three years by utilizing the given table data."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "user\nHere's a solution to the given problem:\n\n```python\ndef solution():\n    common_shares = 60000\n    warrants = 5000\n    stock_price_end_year = 30\n    average_stock_price_year = 20\n    stock_price_conversion = 25\n\n    potential_new_shares = warrants * (stock_price_end_year / stock_price_conversion)\n    adjusted_average_stock_price_year = average_stock_price_year - (stock_price_end_year - stock_price_conversion) / warrants\n    diluted_shares = common_shares + potential_new_shares\n\n    # Diluted EPS = Net income / Diluted shares\n    diluted_eps = common_shares / diluted_shares\n    return diluted_eps\n```\n\nIn this solution, we calculate the potential number of new shares created by converting the warrants at the end of the year, using the price of conversion. Then we adjust the average stock price considering the benefit that can come from already having the shares. Finally, we compute the diluted shares by combing common shares and potential new shares, and use it to find the Diluted EPS. The return of the solution function is the diluted EPS.\n```python\n\ndef solution():\n    # Define variables name and value\n    common_shares = 60000\n    warrants = 5000\n    stock_price_end_year = 30\n    average_stock_price_year = 20\n    stock_price_conversion = 25\n\n    # Calculate potential new shares from warrants\n    potential_new_shares = warrants * (stock_price_end_year / stock_price_conversion)\n    \n    # Adjusted average stock price year considering warrants' benefit\n    adjusted_average_stock_price_year = average_stock_price_year - (stock_price_end_year - stock_price_conversion) / warrants\n    \n    # Calculate diluted shares considering the potential new shares\n    diluted_shares = common_shares + potential_new_shares\n    \n    # Compute diluted EPS\n    answer = 1 / diluted_shares  # Assuming net income is 1 for simplicity\n    \n    # return answer\n    return answer\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "\n    projected_EPS = 2  # in dollars\n    current_share_price = 40  # in dollars\n    \n    # The most suitable price-to-earnings ratio is calculated by dividing the current share price by the projected EPS\n    price_to_earnings_ratio = current_share_price / projected_EPS\n    \n    # return answer\n    return price_to_earnings_ratio\n```"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "\n```python\ndef solution():\n    # Constants\n    high_drawdown_per_period = 10.2  # Maximum drawdown risk per time period\n    mean_drawdown_per_period = 6.8   # Mean drawdown risk per time period\n    annual_performance = [5.3, 6.2, 4.7, 4.4]  # Annual performance figures\n\n    # Calculating the Calmar ratio\n    highest_perform = max(annual_performance)\n    time_period = len(annual_performance)\n    calmar_ratio = highest_perform / high_drawdown_per_period * time_period\n\n    # return answer\n    return calmar_ratio\n```\n```"
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "answer\n    cost_of_license = 6500\n    years_of_usage = 3\n    amortization_per_year = cost_of_license / years_of_usage\n    year_2_completion = 2\n    \n    # Calculate accumulated amortization at the conclusion of Year 2\n    accumulated_amortization = amortization_per_year * year_2_completion\n    \n    # return answer\n    return accumulated_amortization\n\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "user\ndef solution():\n    yearly_dividend = 2.00  # $2.00 yearly dividend\n    growth_rate = 0.04  # 4% growth rate\n    required_return = 0.07  # 7% required return\n    dividend_next = yearly_dividend  # Initial dividend for D1 if no growth mentioned\n    \n    # Calculate the present value of the perpetuity\n    price_per_share = dividend_next / (required_return - growth_rate)  # If you would increase D constantly at this rate\n    \n    return price_per_share\n```"
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "answer\n    # Load the market share data for the companies given in the question\n    # Since the market share data was not provided, let's assume they are taken from the orders of the sales column divided by the total sales\n    \n    # Calculate the total sales\n    total_sales = sum([500, 350, 270, 200, 150, 40])\n    \n    # Calculate market share of each company by dividing the sales by the total sales\n    market_shares = [float(sales)/total_sales for sales in [500, 350, 270, 200, 150, 40]]\n    \n    # Sort the market shares in descending order\n    sorted_shares = sorted(market_shares, reverse=True)\n    \n    # Calculate the cumulative market share of the four largest companies\n    cummulative_shares = sum(sorted_shares[:4])\n    \n    # threshold \n    threshold = 0.7\n    \n    # check whether the cumulative market share of the top four firms reaches the threshold\n    if cummulative_shares < threshold:\n        answer = \"The concentration ratio of the four firms does not reach 70%.\"\n    else:\n        answer = \"The concentration ratio of the four firms is above 70%.\"\n\n    # return answer\n    return answer\n\n```"
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.571,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "python\n    sales_in_euros = 3500  # sales in EUR for subsidiary ZX in 2018\n    cost_of_sales_in_euros = 1500  # cost of sales in EUR for subsidiary ZX in 2018\n    exchange_rate_2018_dec_31 = 1.77  # Exchange rates ($/€) on 31 December 2018\n\n    # Calculate the sales in USD\n    sales_in_usd = sales_in_euros * exchange_rate_2018_dec_31\n    \n    # Calculate the cost of sales in USD\n    cost_of_sales_in_usd = cost_of_sales_in_euros * exchange_rate_2018_dec_31\n    \n    # Calculate the gross profit\n    gross_profit = sales_in_usd - cost_of_sales_in_usd\n    \n    # Calculate the gross profit margin\n    gross_profit_margin = (gross_profit / sales_in_usd) * 100\n    \n    # return answer\n    return gross_profit_margin\n```"
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "user\npurchase_of_securities = 240\nproceeds_from_sale_of_trading_securities = 300\nproceeds_from issuance_of_bonds = 500\npurchase_of_30_percent_of_shares_of_an_affiliated_company = 275\n\n# Do math calculation to get the answer\nnet_cash_flow_from_investing_activities = -purchase_of_securities + proceeds_from_sale_of_trading_securities - purchase_of_30_percent_of_shares_of_an_affiliated_company\n\n# return answer\nreturn net_cash_flow_from_investing_activities\n```"
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    market_stays_same = 55  # probability of market staying the same\n    stock_price_when_same = 45  # stock price when market stays the same\n    \n    # Do math calculation to get the answer\n    answer = (market_stays_same / 100) * stock_price_when_same\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "\nimport pandas as pd\n    \n    # Read the provided table data\n    df = pd.DataFrame({'Year': ['2016', '2017', '2017', '2016', '2017'],\n                       'Category': ['Retained earnings', 'Retained earnings', 'Accounts receivable', 'Inventory', 'Accounts payable'],\n                       '2016': [110, 125, 45, 24, 30],\n                       '2017': [125, 125, 48, 20, 33]})\n    \n    # Add an 'Change' column to represent year-over-year changes\n    df['Change'] = df['2017'] - df['2016']\n    \n    # Calculate the present value of embarked expenses (implied by change in inventory and accounts receivable)\n    # Note: change in inventory is translated to a negative operating cash flow expense\n    # change in accounts receivable is translated to a positive operating cash flow expense\n    embarked_expenses_present_value = -df['Change'][df['Category'] == 'Inventory'].iloc[0] + df['Change'][df['Category'] == 'Accounts receivable'].iloc[0]\n    \n    # Business B announced and distributed cash dividends, assuming the dividends part wasn't recouped in investment activities/operations\n    # the expenses does not come off from the announced dividends, it's under the financing activities\n    # So negative sharing it under expenses \n    announced_dividends = -8\n    \n    # The impairment expense was given as al payment rather than bookkeeping problem,\n    # assuming the bulk of assets got cheaper - there may be several transactions with different amounts\n    # in accounting, the full amount is expensed in the year of recognition (impairment)\n    # therefore, assuming the full amount of the year is part of this question's consideration\n    impairment_expense = -12\n    \n    # Calculate the operating cash flow by adding the calculated expenses with dividends (inflow) and impairment expense (outflow)\n    operating_cash_flow = embarked_expenses_present_value + announced_dividends + impairment_expense\n    \n    return operating_cash_flow\n\nsolution()\n```\nThis Python program uses a pandas DataFrame to read and manipulate the provided table. It calculates the year-over-year change in specific categories of the business balance sheets, making the appropriate adjustments"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "python\n    # Probability of a vehicle being defective\n    p_defective = 0.05\n    \n    # Probability of not being defective\n    p_not_defective = 1 - p_defective\n    \n    # After picking a defective car, the probability that the next one is also defective\n    p_second_defective = 0.05\n    \n    # Probability that exactly one car out of five is defective\n    # This could happen by selecting a defective car and then four non-defective or vice versa\n    answer = p_defective * p_not_defective**4 + p_not_defective * p_defective * p_not_defective**3\n    \n    # Return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "python\n    sample_mean = 998.7\n    population_mean = 1000\n    sample_std_dev = 100\n    sample_size = 1600\n    \n    # Do math calculation to get the standard error of the sample mean\n    # The standard error (SE) of the sample mean is calculated as:\n    # SE = sample_std_dev / sqrt(sample_size)\n    standard_error = sample_std_dev / (sample_size ** 0.5)\n    \n    # return answer\n    return standard_error\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    cash = 500000  # stocks investment\n    fixed_income = 330000  # fixed income investment\n    house_value = 350000  # house value\n    mortgage = 175000  # mortgage\n    present_value_earnings = 980000  # present value of earnings before retirement\n    future_consumption = 870000  # expected future consumption present value\n    college_tuition = 150000  # college tuition present value\n    foundation_future_value = 600000  # expected value of family foundation in 25 years\n\n    # Economic Balance Sheet\n    assets = cash + fixed_income + house_value\n    liabilities = mortgage\n    equity = present_value_earnings + future_consumption\n\n    # Economic Net Worth\n    economic_net_worth_initial = equity - liabilities\n\n    # After accounting for college tuition and family foundation\n    economic_net_worth_after_expenses = economic_net_worth_initial - (college_tuition + (foundation_future_value / 25))\n\n    # Return the final answer\n    return economic_net_worth_after_expenses\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "Assistant\n    revenue = 10000\n    cost_of_goods_sold = 8000\n    selling_expense = 0 # Assume there are no additional selling expenses given\n    # Do math calculation to get the answer: The net shift in assets is the revenue minus the cost of goods sold and selling expense.\n    net_shift_assets = revenue - cost_of_goods_sold - selling_expense\n    \n    # return answer\n    return net_shift_assets\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "python\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    \n    # Calculate asset beta using the formula: asset_beta = debt_ratio * (1 - tax_rate) + equity_beta\n    asset_beta = debt_ratio * (1 - tax_rate) + equity_beta\n\n    # return answer\n    return asset_beta\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "\n\n\n    # Define the total value of the retirement fund\n    total_fund_value = 100000000\n    current_share_value = 0.80 * total_fund_value\n    current_bond_value = 0.20 * total_fund_value\n    target_share_value = 0.60 * total_fund_value\n    target_bond_value = 0.40 * total_fund_value\n    \n    # Calculate the value of the shares and bonds to sell or buy\n    value_to_sell = current_share_value - target_share_value\n    value_to_buy = target_bond_value - current_bond_value\n    \n    # Price of a single stock index futures contract\n    stock_index_price = 1200\n    \n    # Price of a single bond futures contract\n    bond_futures_price = 105300\n    \n    # Calculate the number of futures contracts to sell equivalent shares and buy equivalent bonds\n    num_stock_index_futures_to_sell = value_to_sell / stock_index_price\n    num_bond_futures_to_buy = value_to_buy / bond_futures_price\n    \n    # Return the answer\n    return num_bond_futures_to_buy\n```\nThis Python program calculates the number of bond futures that need to be bought to shift the retirement fund distribution to 60% shares and 40% bonds based on the provided data."
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "year = 20\nface_value = 1000\nannual_coupon_rate = 0.08\npresent_value = 1105.94\nmarginal_tax_rate = 0.3\nrisk_premium = 0.05\n    \n    # Calculate annual coupon payment\n    annual_coupon_payment = annual_coupon_rate * face_value\n    \n    # Calculate cost of debt before tax\n    cost_of_debt_before_tax = (annual_coupon_payment / present_value) * 100\n    \n    # Calculate cost of debt after tax\n    cost_of_debt_after_tax = cost_of_debt_before_tax * (1 - marginal_tax_rate)\n    \n    # Calculate cost of equity using the bond-yield-plus-risk-premium method\n    cost_of_equity = cost_of_debt_after_tax + risk_premium\n    \n    # return answer\n    return cost_of_equity\n```"
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "user\ndvg = 0.22  # Dividends in 2017\ngrowth_rate_high = 0.12  # Growth rate for the next 4 years\ngrowth_rate_low = 0.06  # Growth rate thereafter\nrequired_rate_of_return = 0.09  # Required return\n\n# Calculate dividends for the next 4 years\ndividend_year_1 = dvg * (1 + growth_rate_high)\ndividend_year_2 = dvg * (1 + growth_rate_high)**2\ndividend_year_3 = dvg * (1 + growth_rate_high)**3\ndividend_year_4 = dvg * (1 + growth_rate_high)**4\n\n# Calculate the terminal value\ndividend_after_4_years = dvg * (1 + growth_rate_high)**4 * (1 + growth_rate_low)\npe_ratio = required_rate_of_return / growth_rate_low\nterminal_value = dividend_after_4_years / (pe_ratio - 1)\n\n# Total value\ntotal_value = (dividend_year_1 + dividend_year_2 + dividend_year_3 + dividend_year_4) + terminal_value\n\nreturn total_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "user\nBased on the problem description, we need to calculate the approximate convexity of the bond using the given price changes when yield-to-maturity (YTM) increases and decreases. The formula to calculate convexity can be derived from the price changes given in the problem. The formula to calculate the change in price for a change in yield-to-maturity is:\n\n\\[ \\%\\Delta P = -D \\times (\\%\\Delta YTM) + \\frac{1}{2} C \\times (\\%\\Delta YTM)^2 \\]\n\nWhere:\n- \\(D\\) is the duration of the bond.\n- \\(C\\) is the convexity of the bond, what we want to find.\n- \\(\\%\\Delta YTM\\) is the change in YTM.\n- \\(\\%\\Delta P\\) are the changes in price, as given in the problem.\n\nGiven:\n- When YTM increases by 10 basis points (0.10% or 0.001 in decimal), the bond price drops from 98.722 to 98.669.\n- When YTM decreases by 10 basis points, the price goes up to 98.782 from 98.722.\n\nWe are given two scenarios:\n1) Price change when YTM increases: \\(P_{increase} = 98.669\\), \\(\\%\\Delta YTM = 0.001\\).\n2) Price change when YTM decreases: \\(P_{decrease} = 98.782\\), \\(\\%\\Delta YTM = -0.001\\).\n\nWe can plug in these values along with \\(P_{increase} + P_{decrease}\\) into the formula to find \\(C\\), the convexity of the bond.\n\nLet's implement this in Python:\n\n```python\ndef find_convexity(P_increase, P_decrease, delta_YTM):\n    # Calculate the change in price for YTM increasing and decreasing\n    P_total = P_increase + P_decrease\n    # Calculate the price change for YTM change in both scenarios\n    price_change_increase = P_increase - 98.722\n    price_change_decrease = P_decrease - 98.722\n    # Find the YTM percentage change for each scenario\n    percentage_change_increasedYTM = price_change_increase / 98.722 * "
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "def solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n\n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n\n    # return answer\n    return price_to_sales_ratio\n```"
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "user\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold_current = 9000  # from the table provided\n    accounts_payable_current = 600  # from the table provided\n    \n    # Calculate days of payables using the formula: \n    # Days of payables = (365 * Accounts Payable) / Cost of Goods Sold\n    days_of_payables = (365 * accounts_payable_current) / cost_of_goods_sold_current\n    \n    # return answer\n    return days_of_payables\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "user\nTo calculate the percentage of contribution to VaR (Value at Risk) from Asset A in a portfolio, the program below should perform these steps:\n- Calculate the total value of assets in the portfolio (Asset A's value + Asset B's value)\n- Calculate the VaR contribution ratio of Asset A by dividing its marginal VaR by the total marginal VaR (sum of A's and B's marginal VaR)\n- Convert the ratio to percentage\n\n```python\ndef solution():\n    # Define variables name and value\n    value_asset_a = 5000000\n    marginal_var_asset_a = 0.0452\n    value_asset_b = 3000000\n    marginal_var_asset_b = 0.0332\n\n    # Calculate total value of assets\n    total_value = value_asset_a + value_asset_b\n\n    # Calculate total marginal VaR of the portfolio\n    total_marginal_var = marginal_var_asset_a + marginal_var_asset_b\n\n    # Calculate the percentage contribution of asset A to the VaR\n    percentage_contribution = (marginal_var_asset_a / total_marginal_var) * 100\n\n    # return answer\n    return percentage_contribution\n```\n\nTo get the result, just call `solution()` in the Python environment."
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "user\nTo answer this question, we must first understand what \"variance-at-risk\" (VaR) is and how it is calculated. In finance, VaR is a statistical measure of the risk of loss in a portfolio of assets. We have to calculate the VaR for a combination of call options, put options, and futures contracts, taking into account the price of XYZ, its volatility, and the number of contracts. This problem does not explicitly mention the use of Z-scores or the normal distribution, so we'll use the formula for VaR directly:\n\n```python\nimport math\n\ndef solution():\n    # Define variables\n    S = 52 # Sale price of XYZ\n    mu = 0 # Expected return when XYZ dividend is zero\n    sigma = 12 / 100 / (252 ** 0.5) # Annualized standard deviation\n    D1_out_of_money = 20000 # Number of out-of-the-money options\n    D1_deep_in_money = 5000 # Number of deep in-the-money options\n    D1_future_contracts = 10000 # Number of future contracts\n    confidence_level = 0.99 # 99% confidence level\n\n    # Formula for VaR of call options and future contracts (using NORM.S.INV for inverse normal distribution)\n    # Note we use the formula NORM.S.INV(confidence level) * sigma to handle the percentages directly\n    # However, as the questions asks for a 1-day 99% VaR we can ignore the 252 trading days aspect. NORM.S.INV calculates the inverse of the cumulative standard normal distribution, which we use to find the number of standard deviations from the mean for the given confidence level. \n    # The difference between the call option and future contracts is primarily in the number of shares they each represent. Since both call options and future contracts tie to the share value of XYZ, and we're only interested in the impact of changes in stock price, we treat both as representing one share.\n    \n    inv_nsp = math.erfinv(2*confidence_level - 1)  # The inverse of the standard normal cumulative distribution function for the given quantile\n    variance_ratio = (inv_nsp * sigma)**2  # This gives us the contribution from the volatility\n    \n    # Calculate VaR for out-of-the-money options\n    # Since they are"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "python\n    periodic_contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = -2500000  # considering actuarial gain as negative because it reduces the cost\n    \n    # Do math calculation to get the answer\n    total_pension_expense = periodic_contributions + service_costs + actuarial_gain\n    \n    # return answer\n    return total_pension_expense\n```"
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "\n\n\n    # Calculate the projected yield of AA corporate bond\n    aa_corporate_bond_yield = 4.4\n    \n    # Calculate the real yield of AA corporate bond\n    real_yield = aa_corporate_bond_yield - Inflation_Premium - Illiquidity_Premium\n    \n    # Calculate the projected return for the consumer credit sector\n    projected_return = real_yield + Equity_Risk_Premium\n\n    # return answer\n    return projected_return\n```"
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "user\ntrade_1_profit = 25.22 - 25.17\ntrade_2_profit = 25.22 - 25.19\ntrade_3_profit = 25.27 - 25.22\n\n# Calculate the average effective spread\naverage_effective_spread = (trade_1_profit + trade_2_profit + trade_3_profit) / 3\n\n# return answer\nreturn average_effective_spread\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "def solution():\n    # Define variables name and value\n    fixed_rate = 1.00  # Two-year fixed-for-floating MRR swap rate\n    us_treasury_rate = 0.63  # Yield of the two-year US Treasury bond\n\n    # Do math calculation to get the swap spread\n    swap_spread = fixed_rate - us_treasury_rate\n\n    # return answer\n    return swap_spread"
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "def solution():\n    # Define variables name and value\n    outcomes = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    threshold_p_value = 0.65\n    \n    # Count the number of outcomes above the threshold\n    correct_outcomes = sum(1 for outcome in outcomes if outcome == 1 or outcome < threshold_p_value)\n    \n    # Count the total number of outcomes\n    total_outcomes = len(outcomes)\n    \n    # Calculate accuracy\n    accuracy = correct_outcomes / total_outcomes\n    \n    # return answer\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "import numpy as np\n\n    # Value of the investments\n    initial_investment_value = 20  # in dollars\n    \n    # Duration of the investments in years\n    duration_1 = 1\n    duration_2 = 9\n    # Average duration\n    average_duration = (duration_1 + duration_2) / 2\n    \n    # Volatility percentage\n    volatility_percentage = 1  # given as 1%\n    # Number of periods in a day\n    periods_in_day = 252  # assuming this as a full year trading periods\n    \n    # Calculate the daily instability's impact on the value of the investments\n    daily_stability_factor = np.exp((-5/100 / periods_in_day))  # assuming the daily yield change corresponds to cumulative change over 1 day\n    daily_volatility_factor = daily_stability_factor * volatility_percentage / np.sqrt(average_duration)\n    \n    # Calculate daily VAR at the 95% certainty level\n    # For a normal distribution, z-score at 95% certainty level is approximately 1.645\n    daily/var_at_95%_certainty = -daily_volatility_factor * 1.645 * initial_investment_value\n    \n    # Define function name\n    return daily/var_at_95%_certainty\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            ""
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "# Calculate the interest cost for the year 2014 using IFRS\n    face_value = 50e6  # in million pounds\n    coupon_rate = 4/100  # 4% expressed as a fraction\n    issue_price_rate = 92.28/100  # The price the bond is issued per £100, expressed as a fraction\n    # First, present value (PV) of the entire bond issuance process based on the market interest rate\n    market_interest_rate = 5 / 100\n    pv_of_bond = face_value * issue_price_rate  # It's important to next calculate the PV of the face value payment at maturity\n    # Find the discount factor (present value of 1) and the total payment at maturity\n    discount_factor_for_maturity= (1 + market_interest_rate)**-10  # 10 years to maturity\n    # So, at the issuance day, we know the present value of the face value payment at maturity = PV * Discount Factor for Maturity\n    pres_value_of_face_value_at_maturity = face_value * discount_factor_for_maturity\n    # Solving the system of equations (PV of all cash flows equal to the bond issuance price), \n    # we have the present value of the coupon payments we pay each year = PV issuance - PV of Face Value \n    pres_value_of_coupon_payments = pv_of_bond - pres_value_of_face_value_at_maturity\n    # Therefore, the interest cost paid equals the present value of the annual coupons\n    # Calculating annual amount of coupon payment - it should be equal to face value*(coupon rate)/100 since the coupon rate is annual\n    annual_coupon_payment = face_value * coupon_rate\n    # Since the bond is issued at a discount, it is amortised over the life of the bond by adding the difference between semi-annual\n    # interest expense calculation with the semi-annual interest payment the corporation would have had to make if the bonds were\n    # issued at par (or face value). Hence we divide by 10 (10 payments in 5 years as semi-annual) to get annualised interest cost\n    annualised_interest_cost = (pres_value_of_coupon_payments / 10) + annual_coupon_payment\n    answer = annualised_interest_cost\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "answer\n    current_cash = 750000\n    human_capital = 1200000\n    similar_to_equity = human_capital * 0.30\n    desired_allocation_equity = human_capital * 0.45\n\n    # Calculate financial capital required for desired equity allocation\n    financial_capital_equity_allocation = desired_allocation_equity - similar_to_equity\n\n    # return answer\n    return financial_capital_equity_allocation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "user\n$D_5 = 2.5$\n$g = 5\\% = 0.05$\n$r = 12\\% = 0.12$\n    \n    # Do math calculation to get the answer\n    present_value_year_4_dividend = 2.5 / (1+0.12)**4\n    year_4_dividend = present_value_year_4_dividend / (1+0.12)**4\n    terminal_value = year_4_dividend * (1+0.05) / (0.12 - 0.05)\n    intrinsic_value = present_value_year_4_dividend + terminal_value / (1+0.12)**4\n\n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "Assistant\n```python\n    # The bonds were issued with a yield rate lower than the market interest rate. This means they would be issued at a discount. \n    # The bonds payable would reflect the face value of the instruments, which is also used for calculating interest expense each period.\n\n    # More importantly, the process of reporting the bonds payable would require a bit more detail,\n\n    # However, based on the main aspect of the question, the answer is following:\n    face_value = 5000000\n\n    # return answer\n    return face_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "import math\n    share_price = 26.00\n    volatility = 1.5 / 100  # Convert percentage to decimal\n    confidence_level = 0.95\n    delta = -0.5\n    holding_period = 1 / 365  # In years\n\n    # Calculate standard deviation of daily return\n    std_dev_daily_return = volatility * holding_period\n\n    # Calculate the standard score for the given confidence level\n    # For 95% confidence, critical value from standard normal distribution is approximately 1.645\n    z_score = math.erf((math.sqrt(-math.log(1 - confidence_level))) / (2 ** 0.5))\n\n    # Calculate delta-normal VaR\n    var = z_score * (delta * share_price * std_dev_daily_return)\n\n    # return answer\n    return round(var, 2)\n```\nThis solution calculates the Value at Risk (VaR) for a given position using the delta-normal approach. The provided function defines the variables, performs the necessary calculations, and returns the VaR at the specified confidence level."
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "user\n\n\n\n    # Do math calculation to get the answer\n    yearly_returns = [20, -30, 15]  # in percent\n    geometric_mean_return = (1 + yearly_returns[0]/100) * (1 + yearly_returns[1]/100) * (1 + yearly_returns[2]/100) - 1\n    geometric_mean_return = geometric_mean_return * 100  # Convert back to percent\n    \n    # return answer\n    return round(geometric_mean_return, 2)\n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "python\n    risk_free_rate = 0.08  # as a decimal\n    market_return = 0.15   # as a decimal\n    beta = 0.6\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + (market_return - risk_free_rate) * beta\n    \n    # return answer\n    return expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "prev\n\n\n    neutral_rate = 2.25\n    desired_inflation = 2\n    actual_growth = 3.5\n    actual_inflation = 3\n    \n    # Calculation based on the Taylor Rule\n    # Nominal Policy Rate = Neutral Rate + 0.5 * (Actual Inflation - Desired Inflation) + 0.5 * (Actual Growth - Desired Growth)\n    nominal_rate = neutral_rate + 0.5 * (actual_inflation - desired_inflation) + 0.5 * (actual_growth - 2)\n    \n    # return answer\n    return nominal_rate\n```"
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "Assistant\n# All the values seem relevant in some way to calculate the forward-looking ERP using Grinold-Kroner model, however, I believe, the value used should be the effective yield from the three-month government bond which is derived from the current three-month government bond yield. If annualised, it should be:\n\n    current_three_month_bond_yield(annualised) = current_three_month_bond_yield * (12/3)\n\n    # Grinold-Kroner Model: ERP = ((P/E forecast + Inflation forecast + Growth in Real EPS forecast) - (Bond Yield forecast * shares outstanding forecast)) / ((1 + Long-term geometric average return of market equity index)\n\n    pE_forecast = 1 + (-1.2 / 100)  # Expected growth in the P/E in the form of a financial ratio \n    inflation_forecast = 1 + (1.9 / 100) \n    real_EPS_growth_forecast = 1 + (2.7 / 100)\n\n    effective_bond_yield = current_three_month_bond_yield * (12/3)  # annualised bond yield\n\n    ERP =((pE_forecast * inflation_forecast * real_EPS_growth_forecast) - effective_bond_yield) / ((1 + long_term_equity_index_return)) \n\n    \n    long_term_equity_index_return = 9.96 / 100  # convert the percentage to a number\n    \n    return ERP\n```"
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "python\n    true_positives = 182\n    false_positives = 52\n    false_negatives = 31\n    true_negatives = 96\n\n    # Do math calculation to get the answer\n    total_instances = true_positives + false_positives + false_negatives + true_negatives\n    correct_predictions = true_positives + true_negatives\n    accuracy = correct_predictions / total_instances\n\n    # return answer\n    return accuracy\n```\nThis function computes the accuracy of the model using the formula: (True Positives + True Negatives) / (True Positives + False Positives + False Negatives + True Negatives)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "Answer:\n```python\ndef solution():\n    # Define variables name and value\n    participants = 15\n    prize_1st = 100\n    prize_2nd = 50\n    prize_3rd = 10\n    # Combination formula: n! / (r!(n-r)!)\n    # n = total number of participants, r= number of prizes\n    # Choosing prize 1st, 2nd, 3rd out of total participants: \n    ways_1st = participants\n\n    # For 2nd place, we choose from remaining participants after 1st prize has been awarded\n    ways_2nd = participants - 1\n\n    # For 3rd place, we choose from remaining participants after 2nd prize has been awarded\n    ways_3rd = participants - 2\n\n    # Calculate the total number of ways by multiplying each of them,\n    # because each choice is independent and applied sequentially\n    total_ways = ways_1st * ways_2nd * ways_3rd\n    \n    # return answer\n    return total_ways\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "user\ndef solution():\n    # Define variables name and value\n    delta = 100000  # delta in barrels per dollar price shift\n    gamma = -50000  # gamma in barrels per dollar price shift squared\n    price_shift = 2  # maximum price shift in dollars per barrel\n    exposure = delta * price_shift + gamma * (price_shift ** 2)\n    \n    # VaR is risk for max price shift\n    var = exposure * price_shift\n    \n    # return answer    \n    return var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "subj"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            ""
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.903,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "y\n```python\n    # Import necessary libraries\n    import numpy as np\n\n    # Component X standard deviation\n    std_X = 17.9 / 100  # Convert to decimal\n    # Component Y standard deviation\n    std_Y = 6.2 / 100    # Convert to decimal\n    # Portfolio weight of X\n    weight_X = 0.25\n    # Portfolio weight of Y\n    weight_Y = 1 - weight_X  # The rest of the portfolio\n    # Correlation coefficient between X and Y\n    correlation_xy = 0.5\n\n    # Calculate the covariance between X and Y\n    cov_xy = correlation_xy * np.sqrt(std_X**2 * std_Y**2)  # Given by the formula: Cov(X,Y) = correlation(X,Y) * stdev(X) * stdev(Y)\n    \n    # Calculate the portfolio standard deviation using the formula:\n    # stdev(portfolio) = sqrt(weights_X^2 * stdev(X)^2 + weights_Y^2 * stdev(Y)^2 + 2 * weights_X * weights_Y * Cov(X,Y))\n    portfolio_std = np.sqrt(weight_X**2 * std_X**2 + weight_Y**2 * std_Y**2 + 2 * weight_X * weight_Y * cov_xy)\n\n    # return answer\n    return portfolio_std * 100  # Return in percentage\n\nanswer = solution()\nanswer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "user\n```python\ndef solution():\n    # Define variables name and value\n    initial_value = 160000000  # initial value in millions of dollars\n    growth_rate = 1.25  # increase by 25%\n    \n    # calculate end-of-year asset value\n    end_of_year_value = initial_value * growth_rate\n    \n    # management fee rate (2%)\n    management_fee_rate = 0.02\n    # calculate management fee\n    management_fee = management_fee_rate * end_of_year_value\n    \n    # incentive fee rate if returns are greater than the net of 10% on the initial value\n    incentive_fee_rate = 0.20\n    # net return on initial value without management fee\n    net_return = end_of_year_value / initial_value - 1\n    # minimum return for incentive fee (10% net of management fee)\n    min_net_return = 0.10 - management_fee_rate\n    # calculate incentive fee\n    incentive_fee = max(0, max(0, net_return - min_net_return) * incentive_fee_rate)\n    \n    # soft hurdle means nothing below return threshold would be considered as profit\n    # calculate total fees collected (management fee + incentive fee)\n    total_fees_collected = management_fee + incentive_fee\n    \n    # return answer\n    return total_fees_collected\n```\n"
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "Assistant\nGiven the data in the table represents the Net Operating Income (NOI) for each year and knowing that there is no real property return growth in the real estate, the growth rate of the real estate can be assumed to be a constant rate between the initial year when the NOI starts ($2,775,840) and the terminal year (Year 6, where the NOI is $3,217,959).\n\nWe can calculate the growth rate using the formula:\n\\[ Growth\\ rate = \\left[\\left(\\frac{Ending\\ Value}{Starting\\ Value}\\right)^{\\frac{1}{n}} - 1\\right] \\times 100 \\]\nwhere 'n' is the number of periods. In this case, it's 6 years (from Year 1 to Year 6).\n\nLet's adapt the formula to our problem:\n\n```python\ndef solution():\n    starting_value = 2775840\n    ending_value = 3217959\n    periods = 6\n\n    growth_rate_per_year = (((ending_value / starting_value) ** (1 / periods)) - 1) * 100\n\n    return round(growth_rate_per_year, 2)\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "import numpy as np\n    # Calculate the expected return\n    wX = 0.30\n    wY = 0.70\n    std_dev_X = 0.25\n    std_dev_Y = 0.10\n    corr_coef = 0.8\n    \n    std_dev_portfolio = np.sqrt((wX**2 * std_dev_X**2) + (wY**2 * std_dev_Y**2) + (2*wX*wY*corr_coef*std_dev_X*std_dev_Y))\n    \n    # return answer\n    return std_dev_portfolio\n```"
        ]
    }
]