[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost_truck = 57000\n    estimated_life_truck = 8\n    salvage_value_truck = 15000\n    depreciation_rate_truck = 0.20\n    current_fair_value_truck = 27000\n    years_used_truck = 3\n\n    # Calculate the book value of the truck after 3 years using declining balance method\n    book_value_truck = original_cost_truck\n    for year in range(years_used_truck):\n        book_value_truck -= book_value_truck * depreciation_rate_truck\n\n    # Calculate the loss on the truck\n    loss_on_truck = book_value_truck - current_fair_value_truck\n\n    # return the loss\n    return loss_on_truck\n```\n\nThis Python program calculates the book value of the truck after three years using the declining balance method and then determines the loss on the truck by comparing its book value to its current fair value. The result is the loss that will be reflected in the profit and loss statement for the enterprise that relinquishes the truck."
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 2.0979\n    libor_gbp = 0.016025\n    libor_nzd = 0.032875\n    days = 180\n    days_in_year = 360\n\n    # Do math calculation to get the answer\n    forward_points = spot_rate * ((libor_nzd - libor_gbp) * (days / days_in_year))\n    forward_points_rounded = round(forward_points, 4)\n\n    # return answer\n    return forward_points_rounded\n```"
        ]
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    covariance_with_GIM = 0.0075  # Covariance of U.S. real estate with GIM\n    std_dev_GIM = 0.14  # Standard deviation of U.S. real estate (converted from 14.0% to decimal)\n    integration_with_GIM = 0.60  # Integration of U.S. real estate with GIM\n    \n    # Do math calculation to get the answer\n    # Beta is calculated as the covariance of the asset with the market portfolio divided by the variance of the market portfolio\n    # Since we don't have the variance of the GIM directly, we use the standard deviation of U.S. real estate as a proxy for the GIM's standard deviation\n    beta = covariance_with_GIM / (std_dev_GIM ** 2)\n    \n    # return answer\n    return beta\n```"
        ]
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_spot_rate = 1.3935  # USD/EUR spot rate at initiation\n    three_months_later_spot_rate = 1.4106  # USD/EUR spot rate three months later\n    six_month_forward_initiation = -19.0  # 6-month forward points at initiation\n    six_month_forward_three_months_later = -21.6  # 6-month forward points three months later\n    shares_purchased = 200000  # Number of shares purchased\n    share_price = 90  # Price per share in EUR\n\n    # Calculate the initial forward rate at initiation\n    initial_forward_rate = initial_spot_rate + (six_month_forward_initiation / 10000)\n\n    # Calculate the forward rate three months later\n    forward_rate_three_months_later = three_months_later_spot_rate + (six_month_forward_three_months_later / 10000)\n\n    # Calculate the total cost of shares in USD at initiation\n    total_cost_in_usd_initiation = shares_purchased * share_price * initial_forward_rate\n\n    # Calculate the cash expenditure necessary to terminate the forward agreement\n    cash_expenditure = total_cost_in_usd_initiation - (shares_purchased * share_price * forward_rate_three_months_later)\n\n    # return answer\n    return cash_expenditure\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value = 3700000\n    daily_volatility = 0.0004\n    trading_days = 250\n    confidence_level = 0.95\n    z_score_95 = 1.645  # Z-score for 95% confidence level\n    \n    # Do math calculation to get the answer\n    # Calculate the annual volatility\n    annual_volatility = daily_volatility * (trading_days ** 0.5)\n    \n    # Calculate the VaR\n    VaR = market_value * z_score_95 * annual_volatility\n    \n    # return answer\n    return VaR\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_failure = 0.40\n    P_success = 0.55\n    P_success_given_survival = 0.85\n    \n    # Calculate P(survival)\n    P_survival = 1 - P_failure\n    \n    # Calculate P(success and survival) using the conditional probability formula\n    P_success_and_survival = P_success_given_survival * P_survival\n    \n    # Calculate P(success and failure) using the total probability rule\n    P_success_and_failure = P_success - P_success_and_survival\n    \n    # Calculate P(success | failure) using the conditional probability formula\n    P_success_given_failure = P_success_and_failure / P_failure\n    \n    # return answer\n    return P_success_given_failure\n```"
        ]
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_shares = [35, 25, 20]  # Market shares of the top three firms\n    \n    # Do math calculation to get the answer\n    hhi = sum(share ** 2 for share in market_shares)\n    \n    # return answer\n    return hhi\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    libor_swap_rate = 1.00  # in percentage\n    treasury_bond_yield = 0.63  # in percentage\n    \n    # Do math calculation to get the answer\n    swap_spread = libor_swap_rate - treasury_bond_yield\n    \n    # return answer\n    return swap_spread\n```"
        ]
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5  # in years\n    end_year = 2016\n    acquisition_year = 2013\n    \n    # Calculate the annual amortization cost\n    annual_amortization = (acquisition_cost - residual_value) / useful_life\n    \n    # Calculate the number of years of amortization up to the end of 2016\n    years_amortized = end_year - acquisition_year\n    \n    # Calculate the accumulated amortization cost at the end of 2016\n    accumulated_amortization = annual_amortization * years_amortized\n    \n    # return answer\n    return accumulated_amortization\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha \u00d7 [\u03bc - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean_reversion = 0.775\n    correlation_jan_2014 = 0.27\n    correlation_avg = 0.35\n    \n    # Do math calculation to get the answer\n    # Using the model s(t) - s(t-1) = alpha \u00d7 [\u03bc - s(t -1)]\n    # Here, alpha is the mean reversion rate, \u03bc is the average correlation, and s(t-1) is the correlation in January 2014\n    correlated_expectation = mean_reversion * (correlation_avg - correlation_jan_2014) + correlation_jan_2014\n    \n    # return answer\n    return correlated_expectation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_year1 = 0.5\n    dividend_year2 = 0.5\n    growth_rate = 0.06\n    rate_of_return = 0.10\n    \n    # Do math calculation to get the answer\n    # Calculate the present value of dividends for the first two years\n    pv_dividend_year1 = dividend_year1 / (1 + rate_of_return)\n    pv_dividend_year2 = dividend_year2 / (1 + rate_of_return)**2\n    \n    # Calculate the present value of the dividends after the first two years using the Gordon Growth Model\n    terminal_value = (dividend_year2 * (1 + growth_rate)) / (rate_of_return - growth_rate)\n    pv_terminal_value = terminal_value / (1 + rate_of_return)**2\n    \n    # Sum the present values to get the total worth of the common equity\n    total_worth = pv_dividend_year1 + pv_dividend_year2 + pv_terminal_value\n    \n    # return answer\n    return total_worth\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_elasticity_of_demand = 1.8\n    marginal_cost = 30\n    average_cost = 50\n    \n    # Do math calculation to get the answer\n    # Using the formula for optimal price in a monopolistic market: P = MC / (1 - 1/|E|)\n    # where P is the price, MC is the marginal cost, and |E| is the absolute value of price elasticity of demand\n    optimal_price = marginal_cost / (1 - 1 / price_elasticity_of_demand)\n    \n    # return answer\n    return optimal_price\n```"
        ]
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 460000\n    value_buildings_machinery_beginning = 320000\n    value_buildings_machinery_end = 270000\n    cost_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Calculate average value of buildings and machinery\n    avg_value_buildings_machinery = (value_buildings_machinery_beginning + value_buildings_machinery_end) / 2\n    \n    # Calculate total costs\n    total_costs = cost_raw_materials + wages_paid + avg_value_buildings_machinery\n    \n    # Calculate economic profit\n    economic_profit = total_revenue - total_costs - normal_profit\n    \n    # return answer\n    return economic_profit\n```"
        ]
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    EBITDA = 1349\n    depreciation_expense = 243\n    interest_expense = 186\n    tax_rate = 0.32\n    current_liabilities = 2783\n    total_current_assets = 1290\n    fixed_capital_investment = 535\n    change_in_net_working_capital = (total_current_assets - current_liabilities) - (1199 - 2678)\n\n    # Do math calculation to get the answer\n    # FCFF = EBITDA * (1 - tax_rate) + (depreciation_expense * tax_rate) - fixed_capital_investment - change_in_net_working_capital\n    FCFF = EBITDA * (1 - tax_rate) + depreciation_expense * tax_rate - fixed_capital_investment - change_in_net_working_capital\n\n    # return answer\n    return FCFF\n```"
        ]
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000\n    present_value_of_future_cash_flows = 450000\n    \n    # Do math calculation to get the answer\n    # According to IFRS, impairment loss is calculated as the difference between the carrying value and the higher of the asset's value in use and its fair value less costs to sell.\n    # Here, we are given the present value of expected future cash flows (which is the value in use) and the fair value less costs to sell.\n    # We need to compare the carrying value with the higher of these two values to determine the impairment loss.\n    \n    # Calculate fair value less costs to sell\n    fair_value = 480000\n    costs_to_sell = 50000\n    fair_value_less_costs_to_sell = fair_value - costs_to_sell\n    \n    # Determine the higher of value in use and fair value less costs to sell\n    higher_value = max(present_value_of_future_cash_flows, fair_value_less_costs_to_sell)\n    \n    # Calculate impairment loss\n    impairment_loss = carrying_value - higher_value\n    \n    # return answer\n    return impairment_loss\n```"
        ]
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    interest_paid = 2  # Semiannually means twice a year\n    mature_time = 3\n    required_rate_of_return = 0.05\n    par_value = 100\n    \n    # Calculate the annual coupon payment\n    annual_coupon_payment = par_value * coupon_rate\n    \n    # Calculate the semiannual coupon payment\n    semiannual_coupon_payment = annual_coupon_payment / interest_paid\n    \n    # Calculate the total number of payments\n    total_payments = mature_time * interest_paid\n    \n    # Calculate the present value of the coupon payments\n    present_value_coupons = 0\n    for i in range(1, total_payments + 1):\n        present_value_coupons += semiannual_coupon_payment / ((1 + required_rate_of_return / interest_paid) ** i)\n    \n    # Calculate the present value of the par value\n    present_value_par = par_value / ((1 + required_rate_of_return / interest_paid) ** total_payments)\n    \n    # Calculate the bond's price\n    bond_price = present_value_coupons + present_value_par\n    \n    # return answer\n    return bond_price\n```\n\nThis Python program calculates the bond's price based on the given parameters: coupon rate, interest paid semiannually, mature time, required rate of return, and par value of the bond. It uses the present value formula to discount the future cash flows (coupon payments and par value) back to their present value."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of \u20a410 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of \u20a411 per unit. During 2009, Shine sold 12,000 units at a rate of \u20a415 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    units_purchased_october = 10000\n    cost_per_unit_october = 10\n    units_purchased_november = 5000\n    cost_per_unit_november = 11\n    units_sold = 12000\n    \n    # Do math calculation to get the answer\n    # Using FIFO method, the first units purchased are sold first\n    # Calculate the cost of goods sold for the units sold from October's purchase\n    cost_of_goods_sold_october = units_purchased_october * cost_per_unit_october\n    remaining_units_sold = units_sold - units_purchased_october\n    \n    # Calculate the cost of goods sold for the remaining units sold from November's purchase\n    cost_of_goods_sold_november = remaining_units_sold * cost_per_unit_november\n    \n    # Total cost of goods sold\n    total_cost_of_goods_sold = cost_of_goods_sold_october + cost_of_goods_sold_november\n    \n    # return answer\n    return total_cost_of_goods_sold\n```"
        ]
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.10200000000000001,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    good_economic_situation_prob = 70 / 100  # Convert percentage to decimal\n    bad_economic_situation_prob = 30 / 100  # Convert percentage to decimal\n    \n    good_return_high = 20 / 100  # Convert percentage to decimal\n    good_return_low = 10 / 100  # Convert percentage to decimal\n    bad_return_high = 5 / 100  # Convert percentage to decimal\n    bad_return_low = -10 / 100  # Convert percentage to decimal\n    \n    good_return_prob_high = 50 / 100  # Convert percentage to decimal\n    good_return_prob_low = 50 / 100  # Convert percentage to decimal\n    bad_return_prob_high = 60 / 100  # Convert percentage to decimal\n    bad_return_prob_low = 40 / 100  # Convert percentage to decimal\n    \n    # Do math calculation to get the answer\n    # Calculate the weighted average return for each scenario\n    good_economic_return = (good_return_high * good_return_prob_high) + (good_return_low * good_return_prob_low)\n    bad_economic_return = (bad_return_high * bad_return_prob_high) + (bad_return_low * bad_return_prob_low)\n    \n    # Calculate the overall expected return\n    anticipated_return = (good_economic_situation_prob * good_economic_return) + (bad_economic_situation_prob * bad_economic_return)\n    \n    # return answer\n    return anticipated_return\n\n# Example usage:\nprint(solution())\n```\n\nThis program calculates the anticipated portfolio return by weighting the returns under different scenarios by their respective probabilities. It first calculates the weighted average return for each scenario (good and bad economic situations) and then combines these weighted averages using the probabilities of each scenario to get the overall anticipated return."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_inventory_lifo = 200000\n    initial_lifo_reserve = 30000\n    final_inventory_lifo = 250000\n    final_lifo_reserve = 40000\n    tax_rate = 0.30\n    \n    # Do math calculation to get the answer\n    # Calculate the increase in LIFO reserve\n    increase_in_lifo_reserve = final_lifo_reserve - initial_lifo_reserve\n    \n    # Calculate the taxable income from the increase in LIFO reserve\n    taxable_income = increase_in_lifo_reserve\n    \n    # Calculate the tax amount\n    tax_amount = taxable_income * tax_rate\n    \n    # Calculate the inventory value under FIFO\n    final_inventory_fifo = final_inventory_lifo + increase_in_lifo_reserve - tax_amount\n    \n    # return answer\n    return final_inventory_fifo\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    maturity_years = 15\n    market_discount_rate = 0.045\n    par_value = 100\n    \n    # Do math calculation to get the answer\n    # The formula for the price of a zero-coupon bond is: Price = Par Value / (1 + r)^n\n    price_per_100_par = par_value / (1 + market_discount_rate) ** maturity_years\n    \n    # return answer\n    return price_per_100_par\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n    \n    # Do math calculation to get the answer\n    call_price = face_value - gain_on_redemption\n    \n    # return answer\n    return call_price\n```"
        ]
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    USD_EUR = 1.3860\n    EUR_CAD = 0.6125\n    USD_GBP = 1.4208\n    \n    # Do math calculation to get the answer\n    # To find the cross-rate EUR/GBP, we can use the relationship:\n    # EUR/GBP = (USD/GBP) / (USD/EUR)\n    EUR_GBP = USD_GBP / USD_EUR\n    \n    # return answer\n    return EUR_GBP\n```\n\nThis program calculates the cross-rate between EUR and GBP using the given spot rates. The cross-rate is derived by dividing the USD/GBP rate by the USD/EUR rate."
        ]
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_rates = [2.50, 2.99, 3.48, 3.95, 4.37]\n    spot_rates = [2.50, 3.00, 3.50, 4.00]\n    \n    # The formula to calculate the n-year spot rate given par rates and previous spot rates is:\n    # (1 + par_rate[n])^n = (1 + spot_rate[n-1])^(n-1) * (1 + forward_rate[n])\n    # Solving for the forward rate and then the spot rate.\n    \n    # Calculate the five-year spot rate\n    n = 5  # Five-year maturity\n    par_rate_n = par_rates[n-1] / 100  # Convert to decimal\n    spot_rate_n_minus_1 = spot_rates[n-2] / 100  # Convert to decimal\n    \n    # Calculate the forward rate for the fifth year\n    forward_rate_n = ((1 + par_rate_n)**n / (1 + spot_rate_n_minus_1)**(n-1))**(1/1) - 1\n    \n    # Calculate the five-year spot rate\n    spot_rate_n = ((1 + spot_rate_n_minus_1)**(n-1) * (1 + forward_rate_n))**(1/n) - 1\n    \n    # Convert back to percentage and round to 2 decimal places\n    spot_rate_n = round(spot_rate_n * 100, 2)\n    \n    # return answer\n    return spot_rate_n\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_1_year_rate = 0.08\n    probability_up = 0.5\n    probability_down = 0.5\n    rate_up = 0.10\n    rate_down = 0.06\n    risk_premium = 0.004  # 40 bps\n    face_value = 1000\n    bond_duration = 2\n\n    # Calculate the expected 1-year rate for the second year\n    expected_2_year_rate = (rate_up * probability_up) + (rate_down * probability_down)\n\n    # Calculate the total expected rate for the 2-year period\n    total_expected_rate = (current_1_year_rate + expected_2_year_rate) / 2\n\n    # Add the risk premium for duration risk\n    total_rate_with_risk_premium = total_expected_rate + risk_premium\n\n    # Calculate the present value of the bond\n    present_value = face_value / ((1 + total_rate_with_risk_premium) ** bond_duration)\n\n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.9380000000000001,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    n1 = 25\n    mean1 = 200\n    sd1 = 45\n    \n    n2 = 18\n    mean2 = 185\n    sd2 = 60\n    \n    combined_variance = 2678.05\n    \n    # Do math calculation to get the answer\n    # Calculate the pooled standard deviation\n    pooled_sd = (combined_variance ** 0.5)\n    \n    # Calculate the standard error\n    standard_error = pooled_sd * ((1/n1 + 1/n2) ** 0.5)\n    \n    # Calculate the t-test statistic\n    t_statistic = (mean1 - mean2) / standard_error\n    \n    # return answer\n    return t_statistic\n```"
        ]
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = cost_of_goods_sold + decrease_in_inventory - increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    options_granted = 20000\n    option_price_grant_day = 2.5\n    average_option_price_year = 2.8\n    fair_value_grant_day = 15\n    lock_in_period = 4\n    lapse_period = 5\n\n    # Do math calculation to get the answer\n    # Calculate the intrinsic value of the options on the grant day\n    intrinsic_value_grant_day = (fair_value_grant_day - option_price_grant_day) * options_granted\n\n    # Since the options have a lock-in period and lapse after a certain period, we need to consider the time value of the options.\n    # However, without the specific time value data, we can only calculate the intrinsic value for now.\n    # Assuming the compensation expense is recognized evenly over the lock-in period, we prorate the intrinsic value.\n    compensation_expense_2011 = intrinsic_value_grant_day / lock_in_period\n\n    # return answer\n    return compensation_expense_2011\n```\n\nThis program calculates the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011. It assumes that the compensation expense is recognized evenly over the lock-in period of 4 years. The intrinsic value of the options on the grant day is calculated and then prorated over the lock-in period to determine the expense for 2011."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_adjusted_duration = 7.020\n    annual_convexity = 65.180\n    change_in_yield = -0.0025  # 25 basis points in decimal form\n\n    # Do math calculation to get the answer\n    # First, calculate the percentage change due to duration\n    percentage_change_due_to_duration = -yearly_adjusted_duration * change_in_yield\n\n    # Then, calculate the percentage change due to convexity\n    percentage_change_due_to_convexity = 0.5 * annual_convexity * (change_in_yield ** 2)\n\n    # Combine both effects to get the total anticipated percentage change in price\n    total_percentage_change = percentage_change_due_to_duration + percentage_change_due_to_convexity\n\n    # return answer\n    return total_percentage_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% \u00d7 $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    preferred_return_rate = 0.058  # 5.80 percent\n    par_value = 30\n    identical_issue_return_rate = 0.05  # 5 percent\n    \n    # Do math calculation to get the answer\n    intrinsic_value = (preferred_return_rate * par_value) / identical_issue_return_rate\n    \n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 400\n    risk_free_rate = 0.05\n    dividend_rate = 0.03\n    time_to_maturity = 0.5  # 6 months expressed in years\n\n    # Do math calculation to get the answer\n    forward_price = initial_value * (1 + (risk_free_rate - dividend_rate) * time_to_maturity)\n\n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_std_dev = 4.9  # Sample standard deviation in percent\n    hypothesized_std_dev = 5.0  # Hypothesized standard deviation in percent\n    sample_size = 36  # Number of months\n    \n    # Do math calculation to get the answer\n    # The test statistic for a standard deviation is calculated using the chi-square distribution\n    # Formula: (n-1) * s^2 / sigma^2\n    test_statistic = ((sample_size - 1) * (sample_std_dev ** 2)) / (hypothesized_std_dev ** 2)\n    \n    # return answer\n    return test_statistic\n```"
        ]
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 485  # in millions\n    depreciation = 270  # in millions\n    capital_expenditures = 3099 - 2846  # Gross fixed assets 2008 - Gross fixed assets 2007 (in millions)\n    change_in_working_capital = (1988 - 1090) - (1806 - 1007)  # Total current assets 2008 - Total current liabilities 2008 minus Total current assets 2007 - Total current liabilities 2007 (in millions)\n    net_borrowing = 1575 - 1515  # Long-term debt 2008 - Long-term debt 2007 (in millions)\n\n    # Do math calculation to get the answer\n    fcfe = net_income + depreciation - capital_expenditures - change_in_working_capital + net_borrowing\n\n    # return answer\n    return fcfe\n```"
        ]
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.14400000000000002,
        "question": "What is the sustainable growth rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_profit_margin = 0.20\n    retention_rate = 0.60\n    asset_turnover = 0.8\n    financial_leverage = 1.5\n    \n    # Do math calculation to get the answer\n    # Sustainable Growth Rate (SGR) = Net Profit Margin * Retention Rate * Asset Turnover * Financial Leverage\n    SGR = net_profit_margin * retention_rate * asset_turnover * financial_leverage\n    \n    # return answer\n    return SGR\n```"
        ]
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    CNY_HKD = 0.8422\n    CNY_ZAR = 0.9149\n    \n    # Do math calculation to get the answer\n    ZAR_HKD = CNY_HKD / CNY_ZAR\n    \n    # return answer\n    return ZAR_HKD\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043000000000000003,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor \u03bb = 0.95 on a daily basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    decay_factor = 0.95\n    days_old = 4\n    \n    # Do math calculation to get the answer\n    weight = (decay_factor ** days_old)\n    \n    # return answer\n    return weight\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 180000\n    annual_interest_rate = 0.10\n    compounding_frequency = 365  # daily compounding\n    years = 2\n    \n    # Do math calculation to get the answer\n    # Formula for compound interest: A = P(1 + r/n)^(nt)\n    amount = principal * (1 + annual_interest_rate / compounding_frequency) ** (compounding_frequency * years)\n    \n    # return answer\n    return amount\n```"
        ]
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_inventory_units = 20\n    initial_inventory_cost = 5.00\n    purchased_units_1 = 70\n    purchased_cost_1 = 5.20\n    sold_units_1 = 50\n    sold_price_1 = 6.00\n    purchased_units_2 = 35\n    purchased_cost_2 = 5.50\n    sold_units_2 = 40\n    sold_price_2 = 6.50\n    \n    # Calculate cost of goods sold (COGS) using FIFO\n    # For the first sale\n    if sold_units_1 <= initial_inventory_units:\n        cogs_1 = sold_units_1 * initial_inventory_cost\n        remaining_inventory_units = initial_inventory_units - sold_units_1\n    else:\n        cogs_1 = (initial_inventory_units * initial_inventory_cost) + ((sold_units_1 - initial_inventory_units) * purchased_cost_1)\n        remaining_inventory_units = purchased_units_1 - (sold_units_1 - initial_inventory_units)\n    \n    # For the second sale\n    if sold_units_2 <= remaining_inventory_units:\n        cogs_2 = sold_units_2 * purchased_cost_1\n        remaining_inventory_units -= sold_units_2\n    else:\n        cogs_2 = (remaining_inventory_units * purchased_cost_1) + ((sold_units_2 - remaining_inventory_units) * purchased_cost_2)\n        remaining_inventory_units = purchased_units_2 - (sold_units_2 - remaining_inventory_units)\n    \n    total_cogs = cogs_1 + cogs_2\n    \n    # Calculate total sales\n    total_sales = (sold_units_1 * sold_price_1) + (sold_units_2 * sold_price_2)\n    \n    # Calculate gross profit\n    gross_profit = total_sales - total_cogs\n    \n    # return answer\n    return gross_profit\n```\n\nThis Python program calculates the"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_return = 0.10  # 10% return rate\n    dividend_year4 = 1.72  # Annual dividend starting from the fourth year\n    growth_rate_perpetual = 0.04  # 4% perpetual growth rate\n    current_growth_rate = 0.06  # 6% growth rate suggested by the present price\n    \n    # Calculate the present value of dividends from year 4 onwards using the Gordon Growth Model\n    # P3 = D4 / (r - g) where P3 is the present value at the end of year 3, D4 is the dividend in year 4, r is the required return, and g is the growth rate\n    P3 = dividend_year4 / (required_return - growth_rate_perpetual)\n    \n    # Since there are no dividends for the first three years, the current intrinsic value (P0) is the present value of P3 discounted back three years\n    P0 = P3 / ((1 + required_return) ** 3)\n    \n    # return answer\n    return P0\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    payout_ratio = 0.50\n    growth_rate = 0.10\n    return_rate = 0.15\n    \n    # Do math calculation to get the answer\n    # Calculate the sustainable growth rate (g)\n    g = (1 - payout_ratio) * return_rate\n    \n    # Calculate the leading P/E ratio using the formula: P/E = (1 - b) / (k - g)\n    # where b is the payout ratio, k is the required return rate, and g is the growth rate\n    leading_PE_ratio = (1 - payout_ratio) / (return_rate - growth_rate)\n    \n    # return answer\n    return leading_PE_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides \u20ac300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 300\n    discount_rate = 0.04\n    years = 5\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for t in range(years):\n        present_value += annual_payment / (1 + discount_rate) ** t\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss_from_sale = 15000\n    \n    # Do math calculation to get the answer\n    book_value = initial_price - accumulated_depreciation\n    gain_from_sale = book_value - loss_from_sale\n    \n    # return answer\n    return gain_from_sale\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to \u00a335 million and total shareholders' equity of \u00a355 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000\n    total_shareholders_equity = 55000000\n    \n    # Calculate total assets\n    total_assets = total_liabilities + total_shareholders_equity\n    \n    # Do math calculation to get the answer\n    percentage_of_liabilities = (total_liabilities / total_assets) * 100\n    \n    # return answer\n    return percentage_of_liabilities\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Do math calculation to get the answer\n    inherent_value = dividend * (1 + growth_rate) / (required_rate_of_return - growth_rate)\n    \n    # return answer\n    return inherent_value\n```"
        ]
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | \u25b3Curve | \u25b3Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, \u2206Curve shows the modification in the benchmark yield curve, and \u2206Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    PV0 = 99.41172\n    PV_plus = 99.32213\n    PV_minus = 99.50132\n    delta_yield = 0.01  # 1bp = 0.01%\n\n    # Do math calculation to get the answer\n    # Convexity formula: (PV_minus + PV_plus - 2*PV0) / (PV0 * (delta_yield ** 2))\n    convexity = (PV_minus + PV_plus - 2 * PV0) / (PV0 * (delta_yield ** 2))\n\n    # return answer\n    return convexity\n```"
        ]
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    domestic_return = 0.25\n    domestic_benchmark_return = 0.15\n    domestic_weight = 0.50\n    domestic_benchmark_weight = 0.35\n\n    bond_return = 0.09\n    bond_benchmark_return = 0.05\n    bond_weight = 0.30\n    bond_benchmark_weight = 0.35\n\n    international_return = 0.15\n    international_benchmark_return = 0.18\n    international_weight = 0.20\n    international_benchmark_weight = 0.30\n\n    # Do math calculation to get the answer\n    value_added_domestic = (domestic_return - domestic_benchmark_return) * domestic_weight\n    value_added_bond = (bond_return - bond_benchmark_return) * bond_weight\n    value_added_international = (international_return - international_benchmark_return) * international_weight\n\n    total_value_added = value_added_domestic + value_added_bond + value_added_international\n\n    # return answer\n    return total_value_added\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.9480000000000001,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123  # Three-month forward exchange rate in CAD/USD\n    forward_points_percentage = 6.8  # 3-month forward points as a percentage\n    \n    # Do math calculation to get the answer\n    # The formula to find the spot rate is: Spot Rate = Forward Rate / (1 + (Forward Points Percentage / 100))\n    spot_rate = forward_rate / (1 + (forward_points_percentage / 100))\n    \n    # return answer\n    return spot_rate\n```"
        ]
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share_2011 = 1.17\n    price_to_FFO_ratio_2011 = 11.5\n    \n    # Do math calculation to get the answer\n    # FFO (Funds From Operations) is typically used in real estate investment trusts (REITs) as a measure similar to earnings per share.\n    # Since the price/FFO ratio is given, we can calculate the share price by multiplying the earnings per share by the price/FFO ratio.\n    share_price_2011 = earnings_per_share_2011 * price_to_FFO_ratio_2011\n    \n    # return answer\n    return share_price_2011\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_secondary_loans = 1000\n    total_top_quality_loans = 600\n    delayed_secondary_loans = 200\n    delayed_top_quality_loans = 48\n    \n    # Calculate the total number of delayed loans\n    total_delayed_loans = delayed_secondary_loans + delayed_top_quality_loans\n    \n    # Calculate the probability that a delayed loan is a secondary quality loan\n    probability_secondary_given_delayed = delayed_secondary_loans / total_delayed_loans\n    \n    # return answer\n    return probability_secondary_given_delayed\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price = 26.00\n    daily_volatility = 0.015\n    delta = -0.5\n    confidence_level = 1.65  # Z-score for 95% confidence interval\n\n    # Do math calculation to get the answer\n    # VaR calculation using the delta-normal method\n    option_value_change = delta * share_price * daily_volatility\n    var = option_value_change * confidence_level\n\n    # return answer\n    return var\n```"
        ]
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    repurchase_of_common_stock = -20000\n    debt_retired_through_issuance_of_common_stock = -45000\n    paid_off_long_term_bank_borrowings = -10000\n    dividends_paid = -10000\n\n    # Do math calculation to get the answer\n    cash_flow_from_financing_activities = (issuance_of_preferred_stock + issuance_of_bonds + repurchase_of_common_stock +\n                                          debt_retired_through_issuance_of_common_stock + paid_off_long_term_bank_borrowings +\n                                          dividends_paid)\n\n    # return answer\n    return cash_flow_from_financing_activities\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    years = 3\n    spot_rates = [0.036, 0.037, 0.038]\n    \n    # Do math calculation to get the answer\n    price = 0\n    for i in range(years):\n        if i < years - 1:\n            price += face_value * coupon_rate / (1 + spot_rates[i]) ** (i + 1)\n        else:\n            price += (face_value + face_value * coupon_rate) / (1 + spot_rates[i]) ** (i + 1)\n    \n    # return answer\n    return round(price, 2)\n```"
        ]
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 470\n    past_service_costs = 0\n    employer_contributions = 1200\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    plan_assets_beginning = 40800\n    plan_assets_end = 44300\n    actuarial_loss = 350\n    actual_return_on_plan_assets = 3100\n    discount_rate = 0.075\n    expected_rate_of_return = 0.082\n\n    # Do math calculation to get the answer\n    # The payment given out during the year is calculated as the change in plan assets plus the actual return on plan assets minus employer contributions\n    payment_given_out = (plan_assets_end - plan_assets_beginning) + actual_return_on_plan_assets - employer_contributions\n\n    # return answer\n    return payment_given_out\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean_return = 160000\n    std_deviation = 30000\n    threshold = 100000\n    \n    # Import necessary library\n    from scipy.stats import norm\n    \n    # Do math calculation to get the answer\n    z_score = (threshold - mean_return) / std_deviation\n    probability = norm.cdf(z_score)\n    \n    # return answer\n    return probability * 100  # Convert to percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    minimum_margin_requirement = 0.65\n    \n    # Do math calculation to get the answer\n    # The leverage ratio is calculated as 1 / margin requirement\n    leverage_ratio = 1 / minimum_margin_requirement\n    \n    # return answer\n    return leverage_ratio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Pb = 5  # Price of bottled water\n    Qbw = 30 - 2 * Pb  # Amount of bottled water\n    dQbw_dPb = -2  # Derivative of Qbw with respect to Pb\n    \n    # Do math calculation to get the answer\n    price_elasticity_of_demand = (dQbw_dPb * Pb) / Qbw\n    \n    # return answer\n    return price_elasticity_of_demand\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    flotation_costs_percentage = 0.05\n    dividend_next_year = 0.32\n    dividend_growth_rate = 0.10\n    share_price = 14.69\n    \n    # Do math calculation to get the answer\n    # Adjust the share price to account for flotation costs\n    adjusted_share_price = share_price * (1 - flotation_costs_percentage)\n    \n    # Calculate the cost of external equity using the dividend discount model\n    cost_of_equity = (dividend_next_year / adjusted_share_price) + dividend_growth_rate\n    \n    # Convert the cost of equity to a percentage\n    cost_of_equity_percentage = cost_of_equity * 100\n    \n    # return answer\n    return cost_of_equity_percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid\u2013offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.32 / 100\n    round_trip_trading_fees = 0.20 / 100\n    bid_offer_spread = 0.10 / 100\n    holding_period_months = 9\n    \n    # Convert annual management fee to the holding period\n    holding_period_management_fee = annual_management_fee * (holding_period_months / 12)\n    \n    # Calculate the total holding period cost\n    total_holding_period_cost = holding_period_management_fee + round_trip_trading_fees + (2 * bid_offer_spread)\n    \n    # return answer\n    return total_holding_period_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 515\n    final_value = 602.5\n    management_fee_rate = 0.02\n    incentive_fee_rate = 0.20\n    hurdle_rate = 0.05\n    high_water_mark = 540\n\n    # Calculate the management fee\n    management_fee = final_value * management_fee_rate\n\n    # Calculate the performance fee\n    if final_value > high_water_mark:\n        performance_fee = (final_value - high_water_mark) * incentive_fee_rate\n    else:\n        performance_fee = 0\n\n    # Calculate the total fees\n    total_fees = management_fee + performance_fee\n\n    # Calculate the net return for the investor\n    net_return = final_value - initial_value - total_fees\n\n    # return answer\n    return net_return\n```"
        ]
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_common_stock = 1000000\n    net_income = 1500000\n    par_value_convertible_bonds = 10000000\n    coupon_rate_bonds = 0.04\n    par_value_preferred_stock = 2000000\n    dividend_rate_preferred_stock = 0.07\n    tax_rate = 0.30\n    convertible_bonds_shares = 300000\n\n    # Calculate interest on convertible bonds after tax\n    interest_on_bonds = par_value_convertible_bonds * coupon_rate_bonds\n    interest_after_tax = interest_on_bonds * (1 - tax_rate)\n\n    # Calculate preferred dividends\n    preferred_dividends = par_value_preferred_stock * dividend_rate_preferred_stock\n\n    # Calculate diluted earnings per share\n    diluted_net_income = net_income + interest_after_tax - preferred_dividends\n    diluted_shares = shares_common_stock + convertible_bonds_shares\n    diluted_eps = diluted_net_income / diluted_shares\n\n    # return answer\n    return diluted_eps\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 10000\n    return_rate = 0.155\n    dividends = 2500\n    selling_price_per_stock = 24\n    total_stocks = 10000\n    \n    # Calculate the total value of the investment after the return\n    total_value_after_return = initial_investment * (1 + return_rate)\n    \n    # Calculate the total amount received from selling the stocks\n    total_selling_amount = selling_price_per_stock * total_stocks\n    \n    # Calculate the total amount received including dividends\n    total_amount_received = total_selling_amount + dividends\n    \n    # Calculate the initial cost per stock\n    initial_cost_per_stock = initial_investment / total_stocks\n    \n    # return answer\n    return initial_cost_per_stock\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund\u2019s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 865.0  # US cents/bushel\n    short_term_price = 877.0  # US cents/bushel\n    long_term_price = 883.0  # US cents/bushel\n    annual_interest_rate = 0.60  # percent per year\n    period = 3  # months\n\n    # Calculate the interest earned on collateral\n    interest_rate_per_month = annual_interest_rate / 12\n    interest_earned = interest_rate_per_month * period\n\n    # Calculate the return from the futures price movement\n    price_change_return = (short_term_price - initial_price) + (long_term_price - short_term_price)\n\n    # Calculate the total return\n    total_return = price_change_return + interest_earned\n\n    # Convert total return to percentage\n    total_return_percentage = (total_return / initial_price) * 100\n\n    # return answer\n    return total_return_percentage\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cap_rate = 0.055\n    ending_cap_rate = 0.06\n    discount_rate = 0.0725\n    \n    # Do math calculation to get the answer\n    # Using the formula for growth rate in a DCF model with constant rate of increase in income and value:\n    # Growth Rate = (Ending Cap Rate * Discount Rate - Initial Cap Rate) / (Initial Cap Rate - Ending Cap Rate)\n    growth_rate = (ending_cap_rate * discount_rate - initial_cap_rate) / (initial_cap_rate - ending_cap_rate)\n    \n    # return answer\n    return growth_rate\n```"
        ]
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_equipment = 5000000\n    estimated_residual_value = 500000\n    total_productive_capacity = 950000\n    production_in_FY2015 = 150000\n\n    # Do math calculation to get the answer\n    depreciation_per_unit = (cost_of_equipment - estimated_residual_value) / total_productive_capacity\n    depreciation_expense_initial_year = depreciation_per_unit * production_in_FY2015\n\n    # return answer\n    return depreciation_expense_initial_year\n```"
        ]
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share = 0.78\n    price_to_ffo_ratio = 13\n    \n    # Do math calculation to get the answer\n    # FFO (Funds From Operations) is calculated as Net Income + Depreciation & Amortization\n    net_income = 92\n    depreciation_and_amortization = 45\n    ffo = net_income + depreciation_and_amortization\n    \n    # Calculate FFO per share\n    weighted_average_shares_outstanding = 118\n    ffo_per_share = ffo / weighted_average_shares_outstanding\n    \n    # Calculate share price using Price/FFO multiple\n    share_price = ffo_per_share * price_to_ffo_ratio\n    \n    # return answer\n    return share_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 40\n    average_cost = 70\n    price_elasticity_of_demand = 1.5\n    \n    # Do math calculation to get the answer\n    # Using the formula for optimal price in a monopolistic market: P = MC / (1 - 1/|E|)\n    # where P is the price, MC is the marginal cost, and |E| is the absolute value of the price elasticity of demand\n    price = marginal_cost / (1 - 1 / price_elasticity_of_demand)\n    \n    # return answer\n    return price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 100\n    market_value = 97\n    lpr = 1.00 / 100  # Convert percentage to decimal\n    basis_points = 80 / 10000  # Convert basis points to decimal\n    periods = 4  # Two years with semi-annual payments\n    day_count_fraction = 0.5  # 30/360 day count standard for 6 months\n\n    # Calculate the coupon rate\n    coupon_rate = lpr + basis_points\n\n    # Calculate the cash flows\n    cash_flows = [face_value * coupon_rate * day_count_fraction] * (periods - 1) + [face_value * (1 + coupon_rate * day_count_fraction)]\n\n    # Function to calculate the present value of cash flows\n    def present_value(cash_flows, market_value, periods):\n        def npv(rate):\n            return sum(cf / (1 + rate * day_count_fraction) ** (i + 1) for i, cf in enumerate(cash_flows)) - market_value\n\n        # Use binary search to find the discount margin\n        low, high = 0, 1\n        while high - low > 1e-6:\n            mid = (low + high) / 2\n            if npv(mid) > 0:\n                low = mid\n            else:\n                high = mid\n        return mid\n\n    # Calculate the discount margin\n    discount_margin = present_value(cash_flows, market_value, periods) - lpr\n\n    # Convert discount margin to basis points\n    discount_margin_bps = discount_margin * 10000\n\n    # return answer\n    return discount_margin_bps\n\n# Example usage\nprint(solution())\n```\n\nThis program calculates the discount margin for the floating-rate bond by first defining the necessary variables and then using a binary search method to find the discount margin that equates the present value of the bond's cash flows to its market value. The result is then converted to basis points and returned."
        ]
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1\u201310, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price \u2013 Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith\u2019s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = 0.0477\n    underwriter_rank_coeff = 0.0150\n    pre_offer_price_adjustment_coeff = 0.4350\n    offer_size_coeff = -0.0009\n    fraction_retained_coeff = 0.0500\n    \n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40  # in millions\n    fraction_retained = 0.70\n    \n    # Do math calculation to get the answer\n    initial_return = (intercept +\n                      underwriter_rank_coeff * underwriter_rank +\n                      pre_offer_price_adjustment_coeff * pre_offer_price_adjustment +\n                      offer_size_coeff * offer_size +\n                      fraction_retained_coeff * fraction_retained)\n    \n    # return answer\n    return initial_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.40 / 100\n    round_trip_trading_commissions = 0.55 / 100\n    bid_offer_spread = 0.20 / 100\n    holding_period_months = 9\n    \n    # Convert annual management fee to monthly\n    monthly_management_fee = annual_management_fee / 12\n    \n    # Calculate total management fee for the holding period\n    total_management_fee = monthly_management_fee * holding_period_months\n    \n    # Calculate total trading costs (round-trip trading commissions + bid-offer spread)\n    total_trading_costs = round_trip_trading_commissions + bid_offer_spread\n    \n    # Calculate the projected total cost for the holding period\n    projected_total_cost = total_management_fee + total_trading_costs\n    \n    # return answer\n    return projected_total_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = {2008: 0.14, 2009: -0.10, 2010: -0.02}\n    \n    # Do math calculation to get the answer\n    holding_period_return = 1.0\n    for year, return_rate in returns.items():\n        holding_period_return *= (1 + return_rate)\n    holding_period_return -= 1\n    \n    # return answer\n    return holding_period_return\n```"
        ]
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    imports = 2.2\n    gross_private_domestic_investment = 6.0\n    exports = 1.8\n    \n    # Do math calculation to get the answer\n    # GDP is calculated using the formula: GDP = Consumption + Gross Private Domestic Investment + Government Spending + (Exports - Imports)\n    gdp = consumption + gross_private_domestic_investment + government_spending + (exports - imports)\n    \n    # return answer\n    return gdp\n```"
        ]
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_1 = 0.07\n    expected_return_2 = 0.10\n    std_deviation_1 = 0.12\n    std_deviation_2 = 0.25\n    weight_1 = 0.30\n    weight_2 = 0.70\n    correlation = 0.20\n    \n    # Do math calculation to get the answer\n    # Formula for portfolio standard deviation: sqrt(w1^2 * \u03c31^2 + w2^2 * \u03c32^2 + 2 * w1 * w2 * \u03c31 * \u03c32 * \u03c1)\n    portfolio_std_deviation = (weight_1**2 * std_deviation_1**2 + \n                               weight_2**2 * std_deviation_2**2 + \n                               2 * weight_1 * weight_2 * std_deviation_1 * std_deviation_2 * correlation)\n    portfolio_std_deviation = portfolio_std_deviation**0.5\n    \n    # return answer\n    return portfolio_std_deviation\n```"
        ]
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    working_capital_balance = 22000000\n    fair_value_fixed_assets = 57000000\n    normalized_income = 89000000\n    required_return_working_capital = 0.06\n    required_return_fixed_assets = 0.09\n    required_return_intangible_assets = 0.25\n    future_growth_rate = 0.07\n\n    # Calculate the return on working capital and fixed assets\n    return_working_capital = working_capital_balance * required_return_working_capital\n    return_fixed_assets = fair_value_fixed_assets * required_return_fixed_assets\n\n    # Calculate the return on tangible assets\n    return_tangible_assets = return_working_capital + return_fixed_assets\n\n    # Calculate the excess earnings (return on intangible assets)\n    excess_earnings = normalized_income - return_tangible_assets\n\n    # Calculate the value of intangibles using the excess earnings method\n    value_intangibles = excess_earnings / (required_return_intangible_assets - future_growth_rate)\n\n    # return answer\n    return value_intangibles\n```"
        ]
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 40000\n    cost_of_goods_sold = 30000\n    accounts_receivable = 3000\n    inventory_beginning = 1500\n    inventory_ending = 2000\n    accounts_payable = 4000\n\n    # Calculate average inventory and average accounts receivable\n    avg_inventory = (inventory_beginning + inventory_ending) / 2\n    avg_accounts_receivable = accounts_receivable\n\n    # Calculate days sales outstanding (DSO)\n    days_sales_outstanding = 365 * (avg_accounts_receivable / credit_sales)\n\n    # Calculate days inventory outstanding (DIO)\n    days_inventory_outstanding = 365 * (avg_inventory / cost_of_goods_sold)\n\n    # Calculate days payable outstanding (DPO)\n    days_payable_outstanding = 365 * (accounts_payable / cost_of_goods_sold)\n\n    # Calculate cash conversion cycle (net operating cycle)\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payable_outstanding\n\n    # return answer\n    return cash_conversion_cycle\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 5000000 + 3000000  # Total investment in research and creation\n    salvage_value = 10000\n    useful_life = 20  # years\n    \n    # Do math calculation to get the answer\n    # Calculate the annual depreciation using the straight-line method\n    annual_depreciation = (initial_investment - salvage_value) / useful_life\n    \n    # Calculate the book value at the close of 2014\n    years_depreciated = 1  # From the end of 2013 to the end of 2014\n    book_value_2014 = initial_investment - (annual_depreciation * years_depreciated)\n    \n    # return answer\n    return book_value_2014\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outcomes = [7, 8, 9, 10]\n    n = len(outcomes)\n    \n    # Calculate the mean of the outcomes\n    mean = sum(outcomes) / n\n    \n    # Calculate the variance\n    variance = sum((x - mean) ** 2 for x in outcomes) / n\n    \n    # return answer\n    return variance\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 600000\n    avg_accounts_receivables = 50000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = sales / avg_accounts_receivables\n    receivables_collection_period = 365 / receivables_turnover\n    \n    # return answer\n    return receivables_collection_period\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_duration = 8  # in years\n    modified_duration = 11.470  # in years\n    \n    # Do math calculation to get the answer\n    duration_gap = modified_duration - investment_duration\n    \n    # return answer\n    return duration_gap\n```"
        ]
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_return = 0.04\n    roll_return = 0.015\n    collateral_required = 0.20\n    free_rate = 0.01\n    position_size = 1500000\n    current_price = 750\n    longer_term_price = 500\n    \n    # Calculate the financing cost\n    financing_cost = position_size * collateral_required * free_rate\n    \n    # Calculate the total return from price and roll return\n    total_return = (price_return + roll_return) * position_size\n    \n    # Calculate the overall return\n    overall_return = (total_return - financing_cost) / position_size\n    \n    # return answer\n    return overall_return\n```"
        ]
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    past_service_costs = 150\n    employer_contributions = 1200\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    plan_assets_beginning = 40800\n    plan_assets_end = 44300\n    actuarial_loss = 350\n    actual_return_on_plan_assets = 3100\n    discount_rate = 0.075\n    expected_rate_of_return = 0.082\n\n    # Calculate interest cost on benefit obligation\n    interest_cost = benefit_obligation_beginning * discount_rate\n\n    # Calculate expected return on plan assets\n    expected_return_on_assets = plan_assets_beginning * expected_rate_of_return\n\n    # Calculate net periodic pension cost\n    net_periodic_pension_cost = current_service_costs + interest_cost + past_service_costs - expected_return_on_assets\n\n    # return answer\n    return net_periodic_pension_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_income_200_units = 500000\n    total_income_250_units = 600000\n    units_increase = 250 - 200\n    \n    # Do math calculation to get the answer\n    marginal_revenue = (total_income_250_units - total_income_200_units) / units_increase\n    \n    # return answer\n    return marginal_revenue\n```"
        ]
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_purchased = 200000\n    share_price_eur = 90\n    initial_spot_rate = 1.3935  # USD/EUR at initiation\n    three_months_later_spot_rate = 1.4106  # USD/EUR three months later\n    six_month_forward_initiation = -19.0  # 6-month forward points at initiation\n    six_month_forward_three_months_later = -27.0  # 6-month forward points three months later\n\n    # Calculate the initial cost in USD\n    initial_cost_usd = shares_purchased * share_price_eur * initial_spot_rate\n\n    # Calculate the mark-to-market value after three months\n    # Using the spot rate three months later and the forward points three months later\n    mtm_value_usd = shares_purchased * share_price_eur * (three_months_later_spot_rate + six_month_forward_three_months_later / 10000)\n\n    # return the mark-to-market value in USD\n    return mtm_value_usd\n\n# Example usage:\nprint(solution())\n```\n\nThis Python program calculates the mark-to-market value in US dollars after three months, considering the initial cost of the shares in euros, the spot rate at initiation, and the spot rate and forward points three months later. The forward points are adjusted by dividing by 10000 to convert them to the appropriate decimal format for the calculation."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.02  # 1-year spot rate\n    r2 = 0.025  # 2-year spot rate\n    r3 = 0.035  # 3-year spot rate\n    r4 = 0.055  # 4-year spot rate\n    \n    # Do math calculation to get the answer\n    # Calculate the forward rate for two years starting from two years from now\n    # Formula: (1 + r4)^4 / ((1 + r2)^2 * (1 + f2)^2) = 1\n    # Solving for f2 (forward rate for two years starting from two years from now)\n    \n    numerator = (1 + r4) ** 4\n    denominator = ((1 + r2) ** 2) * ((1 + r2) ** 2)\n    f2 = ((numerator / denominator) ** 0.5) - 1\n    \n    # return answer\n    return f2\n```"
        ]
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rates = [0.08, 0.09, 0.095]  # Spot rates for 1, 2, and 3 years respectively\n    coupon_rate = 0.10  # Annual coupon rate of the bond\n    face_value = 1000  # Assuming a face value of the bond is $1000\n\n    # Calculate the present value of each cash flow\n    pv_coupon_payments = sum(coupon_rate * face_value / (1 + rate) ** (i + 1) for i, rate in enumerate(spot_rates))\n    pv_face_value = face_value / (1 + spot_rates[-1]) ** len(spot_rates)\n\n    # Total present value (cost) of the bond\n    bond_cost = pv_coupon_payments + pv_face_value\n\n    # return answer\n    return bond_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 20\n    fixed_production_costs = 500000\n    production_levels = [0, 100000, 200000, 300000]  # Different production levels to consider\n\n    # Do math calculation to get the answer\n    def calculate_DOL(units_produced):\n        total_contribution_margin = units_produced * unit_contribution_margin\n        operating_income = total_contribution_margin - fixed_production_costs\n        if operating_income == 0:\n            return float('inf')  # Avoid division by zero\n        DOL = total_contribution_margin / operating_income\n        return DOL\n\n    DOL_values = [calculate_DOL(units) for units in production_levels]\n    least_DOL_index = DOL_values.index(min(DOL_values))\n    answer = production_levels[least_DOL_index]\n\n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at\u00a0$50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at\u00a0$60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    inventory_2013_units = 2000\n    inventory_2013_cost_per_unit = 50\n    inventory_2013_sold_units = 1500\n    \n    inventory_2014_units = 1000\n    inventory_2014_cost_per_unit = 60\n    inventory_2014_sold_units = 500\n    \n    # Do math calculation to get the answer\n    # Calculate ending inventory for 2013\n    ending_inventory_2013_units = inventory_2013_units - inventory_2013_sold_units\n    ending_inventory_2013_value = ending_inventory_2013_units * inventory_2013_cost_per_unit\n    \n    # Calculate ending inventory for 2014\n    # FIFO method: first in, first out\n    # Units left from 2013 and then units from 2014\n    units_left_from_2013 = ending_inventory_2013_units - inventory_2014_sold_units\n    if units_left_from_2013 < 0:\n        units_left_from_2013 = 0\n        units_sold_from_2014 = inventory_2014_sold_units - ending_inventory_2013_units\n    else:\n        units_sold_from_2014 = 0\n    \n    ending_inventory_2014_units = units_left_from_2013 + (inventory_2014_units - units_sold_from_2014)\n    ending_inventory_2014_value = (units_left_from_2013 * inventory_2013_cost_per_unit) + ((inventory_2014_units - units_sold_from_2014) * inventory_2014_cost_per_unit)\n    \n    # return answer\n    return ending_inventory_2"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dirty_price = 104.17\n    days_since_last_coupon = 30\n    futures_contract_termination_days = 90\n    quoted_price_futures_contract = 129\n    risk_free_rate = 1.65 / 100  # Convert percentage to decimal\n    conversion_factor = 0.7025\n\n    # Calculate the accrued interest\n    accrued_interest = (2 / 2) * (days_since_last_coupon / 182.5)  # Semi-annual coupon, 182.5 days per period\n\n    # Calculate the full price of the bond\n    full_price = dirty_price + accrued_interest\n\n    # Calculate the present value of the full price at the futures contract termination\n    present_value_full_price = full_price / (1 + risk_free_rate * (futures_contract_termination_days / 365))\n\n    # Calculate the implied repo rate\n    implied_repo_rate = (present_value_full_price - dirty_price) / (dirty_price * (futures_contract_termination_days / 365))\n\n    # Calculate the theoretical futures price\n    theoretical_futures_price = (present_value_full_price - accrued_interest) * conversion_factor\n\n    # Calculate the equilibrium quoted futures contract price\n    equilibrium_quoted_price = theoretical_futures_price / conversion_factor\n\n    # return answer\n    return equilibrium_quoted_price\n```"
        ]
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_values = [25000000, 25000000, 20000000, 30000000]\n    bond_prices = [105, 100, 95, 87]\n    modified_durations = [7.9, 8.5, 6.3, 10.2]\n    convexities = [122, 154, 87, 32]\n    \n    # Initialize total value\n    total_value = 0\n    \n    # Calculate the total value of the bond collection\n    for i in range(len(par_values)):\n        total_value += par_values[i] * bond_prices[i] / 100\n    \n    # Calculate the weighted average modified duration\n    weighted_avg_mod_duration = sum(par_values[i] * bond_prices[i] / 100 * modified_durations[i] for i in range(len(par_values))) / total_value\n    \n    # Calculate the price value of a basis point\n    price_value_basis_point = total_value * weighted_avg_mod_duration * 0.0001\n    \n    # return answer\n    return price_value_basis_point\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 2000000\n    current_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    recovery_rate = 0\n\n    # Do math calculation to get the answer\n    # The formula for the risk-neutral probability of default (p) is:\n    # p = (F * e^(-r) - P) / (F - R * F)\n    # where F is the face value, P is the current price, r is the risk-free rate, and R is the recovery rate.\n    # Since the recovery rate is 0%, the formula simplifies to:\n    # p = (F * e^(-r) - P) / F\n\n    import math\n    p = (face_value * math.exp(-risk_free_rate) - current_price) / face_value\n\n    # return answer\n    return p\n```"
        ]
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_shares_outstanding = 10000000\n    earnings_per_share = 2.00\n    p_e_ratio = 20\n    book_value_per_share = 30.00\n    shares_bought_back = 1000000\n    \n    # Calculate the market price per share using the P/E ratio and earnings per share\n    market_price_per_share = earnings_per_share * p_e_ratio\n    \n    # Calculate the total amount spent on buying back shares\n    total_amount_spent = shares_bought_back * market_price_per_share\n    \n    # Calculate the new number of shares outstanding after the buyback\n    new_num_shares_outstanding = num_shares_outstanding - shares_bought_back\n    \n    # Calculate the total book value before the buyback\n    total_book_value = num_shares_outstanding * book_value_per_share\n    \n    # Calculate the new book value after accounting for the amount spent on the buyback\n    new_total_book_value = total_book_value - total_amount_spent\n    \n    # Calculate the new book value per share\n    new_book_value_per_share = new_total_book_value / new_num_shares_outstanding\n    \n    # return answer\n    return new_book_value_per_share\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of \u00a5 5,000,000. He took out a loan for the remaining balance of \u00a55,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    down_payment = 5000000\n    loan_amount = 5000000\n    yearly_discount_rate = 0.058\n    loan_term_years = 10\n    loan_term_months = loan_term_years * 12\n    \n    # Convert yearly discount rate to monthly\n    monthly_discount_rate = yearly_discount_rate / 12\n    \n    # Calculate the monthly mortgage repayment using the formula for annuity payment\n    # P = (r * PV) / (1 - (1 + r)^-n)\n    # where P is the payment, r is the monthly interest rate, PV is the present value (loan amount), and n is the number of payments\n    numerator = monthly_discount_rate * loan_amount\n    denominator = 1 - (1 + monthly_discount_rate) ** -loan_term_months\n    monthly_repayment = numerator / denominator\n    \n    # return answer\n    return monthly_repayment\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    three_month_mrr_march = 1.55  # in percentage\n    three_month_mrr_june = 1.35   # in percentage\n    basis_points = 65             # in basis points\n    \n    # Do math calculation to get the answer\n    # Convert basis points to percentage\n    basis_points_percentage = basis_points / 100\n    \n    # Calculate the coupon rate for 30 June\n    coupon_rate_june = three_month_mrr_june + basis_points_percentage\n    \n    # return answer\n    return coupon_rate_june\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_1 = 0.30\n    weight_2 = 0.70\n    std_dev_1 = 0.20\n    std_dev_2 = 0.12\n    correlation = 0.40\n    \n    # Do math calculation to get the answer\n    # Formula for portfolio standard deviation: sqrt(w1^2 * \u03c31^2 + w2^2 * \u03c32^2 + 2 * w1 * w2 * \u03c31 * \u03c32 * \u03c1)\n    portfolio_std_dev = (weight_1**2 * std_dev_1**2 + weight_2**2 * std_dev_2**2 + 2 * weight_1 * weight_2 * std_dev_1 * std_dev_2 * correlation) ** 0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ]
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_fixed_interest = 0.03\n    equity_index_initial = 100\n    nominal_amount = 100000000\n    present_value_factors = {0.25: 0.997506, 0.5: 0.992556, 0.75: 0.985222, 1: 0.975610}\n\n    # Calculate the fixed payments for each quarter\n    fixed_payments = [nominal_amount * annual_fixed_interest / 4] * 4\n\n    # Calculate the present value of each fixed payment\n    present_value_fixed_payments = sum(fixed_payment * present_value_factors[i] for i, fixed_payment in enumerate(fixed_payments, start=1))\n\n    # Calculate the present value of the equity payments\n    present_value_equity_payments = nominal_amount * (1 - present_value_factors[1])\n\n    # Calculate the equity index level that would make the swap value zero\n    equity_index_level = (equity_index_initial * present_value_equity_payments + present_value_fixed_payments) / nominal_amount\n\n    # return answer\n    return equity_index_level\n```"
        ]
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value_of_debt = 10000000\n    market_capitalization = 45000000\n    cash_and_short_term_investments = 2500000\n    ebitda = 15000000\n    \n    # Do math calculation to get the answer\n    enterprise_value = market_value_of_debt + market_capitalization - cash_and_short_term_investments\n    ev_ebitda_multiple = enterprise_value / ebitda\n    \n    # return answer\n    return ev_ebitda_multiple\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 5000\n    annual_discount_rate = 0.05\n    compounding_periods_per_year = 12\n    years = 3\n    \n    # Do math calculation to get the answer\n    # Calculate the effective monthly discount rate\n    monthly_discount_rate = annual_discount_rate / compounding_periods_per_year\n    \n    # Calculate the total number of compounding periods\n    total_compounding_periods = compounding_periods_per_year * years\n    \n    # Calculate the present value using the formula for compound interest\n    present_value = future_value / (1 + monthly_discount_rate) ** total_compounding_periods\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_forward_price = 0.7400  # GBP/EUR forward price from nine months ago\n    current_forward_price_three_months = 0.7343 + (14.0 / 10000)  # GBP/EUR forward price for three months from Exhibit 2\n    notional_amount_eur = 5000000  # EUR notional amount\n\n    # Do math calculation to get the answer\n    # Calculate the mark-to-market gain\n    mark_to_market_gain = (current_forward_price_three_months - initial_forward_price) * notional_amount_eur\n\n    # return answer\n    return mark_to_market_gain\n```"
        ]
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    FFO_B = 290612\n    shares_outstanding_B = 67900\n    P_FFO_multiple_B = 13.5\n\n    # Do math calculation to get the answer\n    FFO_per_share_B = FFO_B / shares_outstanding_B\n    share_value_B = FFO_per_share_B * P_FFO_multiple_B\n\n    # return answer\n    return share_value_B\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth \u00a3300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B\u2019s return on equity be using year-end equity with the ending shareholders\u2019 equity being \u00a310,000,000, a tax rate of 25%, \u00a30.00 in dividends, and a net income of \u00a3750,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ending_shareholders_equity = 10000000\n    tax_rate = 0.25\n    net_income = 750000\n\n    # Do math calculation to get the answer\n    # Firm B's return on equity (ROE) is calculated as net income divided by ending shareholders' equity\n    roe = net_income / ending_shareholders_equity\n\n    # return answer\n    return roe\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 85  # Current stock price\n    K = 90  # Strike price\n    r = 0.05  # Risk-free rate\n    c = 10  # Call option price\n    p = 15  # Put option price\n\n    # Do math calculation to get the answer\n    # Using the put-call parity formula adjusted for dividends: c + Ke^(-rT) = p + Se^(-dT)\n    # We solve for d (implied dividend yield)\n    import math\n    T = 5  # Time to maturity in years\n    d = -math.log((c + K * math.exp(-r * T) - p) / S) / T\n\n    # return answer\n    return d\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    basis_point_change = 100  # 100 basis points change\n    altered_duration = 6.0\n    convexity = 55.0\n\n    # Convert basis points to decimal\n    basis_point_change_decimal = basis_point_change / 10000\n\n    # Do math calculation to get the answer\n    # Calculate the price change due to duration\n    price_change_duration = -altered_duration * basis_point_change_decimal\n\n    # Calculate the price change due to convexity\n    price_change_convexity = 0.5 * convexity * (basis_point_change_decimal ** 2)\n\n    # Total price change\n    total_price_change = price_change_duration + price_change_convexity\n\n    # return answer\n    return total_price_change\n```"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05\n    face_value = 1000  # Assuming the face value of the bond is $1000 for simplicity\n    z_spread = 0.0234\n    \n    spot_rates = {\n        1: 0.0486,\n        2: 0.0495,\n        3: 0.0565\n    }\n    \n    # Do math calculation to get the answer\n    def present_value(cash_flow, rate, time):\n        return cash_flow / ((1 + rate + z_spread) ** time)\n    \n    pv_coupons = sum(present_value(coupon_rate * face_value, spot_rates[t], t) for t in range(1, 4))\n    pv_principal = present_value(face_value, spot_rates[3], 3)\n    \n    bond_value = pv_coupons + pv_principal\n    \n    # return answer\n    return bond_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.65\n    risk_free_rate = 0.03  # 3%\n    market_return = 0.09   # 9%\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 10.3829\n    modified_convexity = 141.217\n    yield_change = 0.005  # 50 bps in decimal form\n    \n    # Do math calculation to get the answer\n    # Calculate the percentage price change due to duration\n    price_change_duration = -modified_duration * yield_change\n    \n    # Calculate the percentage price change due to convexity\n    price_change_convexity = 0.5 * modified_convexity * (yield_change ** 2)\n    \n    # Total percentage price change\n    total_price_change = price_change_duration + price_change_convexity\n    \n    # return answer\n    return total_price_change\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outstanding_shares = 1200000\n    beta = 2.2\n    bond_face_value = 10000000\n    bond_coupon_rate = 0.08\n    bond_yield = 0.1365\n    new_bond_limit = 2500000\n    new_bond_yield = 0.1365\n    additional_bond_yield = 0.16\n    new_stock_price = 10\n    risk_free_rate = 0.03\n    market_return = 0.10\n    tax_rate = 0.30\n    new_funding = 7500000\n\n    # Calculate the cost of equity using CAPM\n    cost_of_equity = risk_free_rate + beta * (market_return - risk_free_rate)\n\n    # Calculate the cost of existing bonds\n    # Assuming the bonds are priced to yield 13.65% and have a coupon rate of 8%\n    # The effective annual yield for the bonds can be calculated as follows:\n    # Since the bonds are semiannual, we need to adjust the yield and coupon rate\n    semiannual_yield = (1 + bond_yield) ** (1/2) - 1\n    semiannual_coupon = bond_coupon_rate / 2\n    bond_price = sum([semiannual_coupon * bond_face_value / 2 / (1 + semiannual_yield) ** i for i in range(1, 11)]) + bond_face_value / (1 + semiannual_yield) ** 10\n    cost_of_debt = semiannual_yield * 2  # Annualizing the semiannual yield\n\n    # Calculate the cost of new bonds\n    # If issuing up to $2.5 million, the yield is 13.65%, otherwise it's 16%\n    if new_funding <= new_bond_limit:\n        new_bond_cost = new_bond_yield\n    else:"
        ]
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.08\n    face_value = 1000  # Assuming a face value of $1000 for simplicity\n    spot_rates = [0.07, 0.08, 0.09]\n    time_to_maturity = 3\n    \n    # Do math calculation to get the answer\n    # Calculate the present value of each cash flow\n    pv_coupons = [coupon_rate * face_value / (1 + spot_rates[i]) ** (i + 1) for i in range(time_to_maturity)]\n    pv_face_value = face_value / (1 + spot_rates[-1]) ** time_to_maturity\n    \n    # Sum up all present values to get the bond price\n    bond_price = sum(pv_coupons) + pv_face_value\n    \n    # return answer\n    return bond_price\n```"
        ]
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent \u00a5360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater\u2019s consolidated depreciation and amortization expense for 2019?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    clearwater_depreciation = 106\n    snowflake_depreciation = 85\n    acquisition_cost = 360\n    net_assets_fair_value = 565  # Total equity of Snowflake\n    surplus_cost = acquisition_cost - net_assets_fair_value\n    economic_lifespan = 5\n    \n    # Calculate the annual amortization of the surplus cost\n    annual_amortization = surplus_cost / economic_lifespan\n    \n    # Calculate the consolidated depreciation and amortization expense\n    consolidated_depreciation_amortization = clearwater_depreciation + snowflake_depreciation + annual_amortization\n    \n    # return answer\n    return consolidated_depreciation_amortization\n```"
        ]
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 87.1876\n    shift_10_year = 87.1454\n    \n    # Do math calculation to get the answer\n    key_rate_01_10_year = shift_10_year - initial_value\n    \n    # return answer\n    return key_rate_01_10_year\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.14300000000000002,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_A = 0.20  # Probability of bankruptcy\n    P_B_given_A = 0.50  # Probability of a \"good\" rating given bankruptcy\n    P_B = 0.70  # Probability of a \"good\" rating\n\n    # Do math calculation to get the answer\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n\n    # return answer\n    return P_A_given_B\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs \u00a3100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 100000  # \u00a3100,000 needed a year from now\n    annual_rate = 0.025  # 2.50% annual rate\n    compounding_periods_per_year = 52  # weekly compounding\n    \n    # Do math calculation to get the answer\n    # Calculate the effective weekly rate\n    weekly_rate = annual_rate / compounding_periods_per_year\n    \n    # Calculate the present value using the formula for compound interest\n    present_value = future_value / (1 + weekly_rate) ** compounding_periods_per_year\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    eps_2017 = 1.03\n    core_eps_2017 = 1.31\n    core_eps_2016 = 1.01\n    acquisition_charges_2017 = 0.18\n    acquisition_charges_2016 = 0.12\n    lawsuit_settlement_2017 = 0.10\n    \n    # Zhang's beliefs about recurring costs might lead her to use Core EPS as a better measure of recurring earnings.\n    # Calculate the trailing P/E using Core EPS for 2017 and 2016.\n    # Assuming the stock price is given and denoted as 'stock_price'\n    stock_price = 20  # This is a placeholder value, replace with actual stock price\n    \n    # Do math calculation to get the answer\n    trailing_pe_2017 = stock_price / core_eps_2017\n    \n    # return answer\n    return trailing_pe_2017\n```\n\nThis program assumes that Zhang believes Core EPS is a better measure of recurring earnings and uses it to calculate the trailing P/E. The `stock_price` variable is a placeholder and should be replaced with the actual stock price of Cratt Ltd."
        ]
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 875  # in thousands\n    depreciation_expense = 400  # in thousands\n    change_in_working_capital = (800 + 850 - 400 - 120) - (750 + 720 - 300 - 90)  # in thousands\n    capital_expenditures = 5000 - 4250  # in thousands\n    net_borrowing = (400 + 120 + 550 + 1500) - (300 + 90 + 500 + 1400)  # in thousands\n\n    # Do math calculation to get the answer\n    fcfe = net_income + depreciation_expense - capital_expenditures - change_in_working_capital + net_borrowing\n    fcfe_in_millions = fcfe / 1000  # Convert to millions\n\n    # return answer\n    return fcfe_in_millions\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_target = 0.30\n    human_capital_stock_similarity = 0.25\n    \n    # Do math calculation to get the answer\n    # Calculate the stock-like portion of human capital\n    human_capital_stock_like = human_capital * human_capital_stock_similarity\n    \n    # Calculate the total portfolio value including the stock-like portion of human capital\n    total_portfolio_value = financial_capital + human_capital_stock_like\n    \n    # Calculate the desired stock allocation in the total portfolio\n    desired_stock_allocation = total_portfolio_value * stock_allocation_target\n    \n    # Calculate the appropriate equity allocation for Peter's financial capital\n    appropriate_equity_allocation = desired_stock_allocation - human_capital_stock_like\n    \n    # return answer\n    return appropriate_equity_allocation\n```"
        ]
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    LIFO_reserve_2014 = 82  # in thousands\n    LIFO_reserve_2013 = 64  # in thousands\n    tax_rate = 0.30\n\n    # Calculate the increase in inventory value due to switch from LIFO to FIFO\n    increase_in_inventory_value = LIFO_reserve_2014 - LIFO_reserve_2013\n\n    # Calculate the pre-tax income increase due to the switch\n    pre_tax_income_increase = increase_in_inventory_value\n\n    # Calculate the tax impact on the pre-tax income increase\n    tax_impact = pre_tax_income_increase * tax_rate\n\n    # Calculate the net income increase after tax\n    net_income_increase = pre_tax_income_increase - tax_impact\n\n    # return answer\n    return net_income_increase\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1_year = 0.0102\n    spot_rate_2_year = 0.0165\n    spot_rate_3_year = 0.0215\n    \n    # Do math calculation to get the answer\n    # Formula for implied forward rate: (1 + spot_rate_3_year)^3 / (1 + spot_rate_2_year)^2 - 1\n    implied_forward_rate = ((1 + spot_rate_3_year)**3 / (1 + spot_rate_2_year)**2) - 1\n    \n    # return answer\n    return implied_forward_rate\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 48.6  # current stock price\n    X = 45  # strike price\n    T = 0.25  # time to maturity in years\n    r = 0.003  # continuously compounded risk-free rate\n    sigma = 0.30  # volatility\n    N_d1 = 0.6352  # N(d1)\n    N_d2 = 0.5486  # N(d2)\n    \n    # Do math calculation to get the answer\n    import math\n    d1 = (math.log(S / X) + (r + 0.5 * sigma ** 2) * T) / (sigma * math.sqrt(T))\n    d2 = d1 - sigma * math.sqrt(T)\n    put_value = X * math.exp(-r * T) * (1 - N_d2) - S * (1 - N_d1)\n    \n    # return answer\n    return put_value\n```"
        ]
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    values = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    \n    # Calculate the mean of the values\n    mean = sum(values) / len(values)\n    \n    # Calculate the variance\n    variance = sum((x - mean) ** 2 for x in values) / len(values)\n    \n    # Calculate the standard deviation\n    std_deviation = variance ** 0.5\n    \n    # return answer\n    return std_deviation\n```"
        ]
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009000000000000001,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    returns = [0.14, 0.15, 0.12, 0.08, 0.10]\n    \n    # Do math calculation to get the answer\n    active_return = sum((portfolio_weights[i] - benchmark_weights[i]) * returns[i] for i in range(5))\n    \n    # return answer\n    return active_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mortgage_amounts = [1000000, 2000000, 3000000, 4000000]\n    mortgage_maturities = [30, 90, 180, 360]\n    \n    # Do math calculation to get the answer\n    total_mortgage_amount = sum(mortgage_amounts)\n    weighted_maturities = [amount * maturity for amount, maturity in zip(mortgage_amounts, mortgage_maturities)]\n    weighted_average_maturity = sum(weighted_maturities) / total_mortgage_amount\n    \n    # return answer\n    return weighted_average_maturity\n```"
        ]
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |\u00a31.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |\u20ac0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prices_nov = {'Sugar': 0.90, 'Cotton': 0.60}\n    prices_dec = {'Sugar': 1.00, 'Cotton': 0.80}\n    quantities_nov = {'Sugar': 70, 'Cotton': 60}\n    quantities_dec = {'Sugar': 120, 'Cotton': 50}\n    \n    # Do math calculation to get the answer\n    numerator = sum(prices_dec[item] * quantities_dec[item] for item in prices_dec)\n    denominator = sum(prices_nov[item] * quantities_dec[item] for item in prices_nov)\n    paasche_index = numerator / denominator\n    \n    # return answer\n    return paasche_index\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    embedded_gain_percentage = 0.10\n    after_tax_returns = [0.09, 0.05, 0.08]\n    capital_gains_tax_rate = 0.25\n    \n    # Initial portfolio value (assumed to be 1 for simplicity)\n    portfolio_value = 1\n    \n    # Calculate the embedded gain\n    embedded_gain = portfolio_value * embedded_gain_percentage\n    \n    # Calculate the net portfolio value after removing the embedded gain\n    net_portfolio_value = portfolio_value - embedded_gain\n    \n    # Calculate the post-liquidation returns for each year\n    for i in range(3):\n        # Calculate the pre-tax return for the year\n        pre_tax_return = net_portfolio_value * after_tax_returns[i]\n        \n        # Calculate the tax on the pre-tax return\n        tax = pre_tax_return * capital_gains_tax_rate\n        \n        # Calculate the after-tax return for the year\n        after_tax_return = pre_tax_return - tax\n        \n        # Update the net portfolio value for the next year\n        net_portfolio_value += after_tax_return\n    \n    # Calculate the total return over the three years\n    total_return = net_portfolio_value - 1\n    \n    # Calculate the annualized return over the three years\n    annualized_return = (1 + total_return) ** (1/3) - 1\n    \n    # return answer\n    return annualized_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    base_asset_price = 50\n    risk_free_rate = 0.04\n    time_to_maturity = 3 / 12  # Convert months to years\n    current_value_advantages = 5\n    current_value_disadvantages = 6\n    \n    # Do math calculation to get the answer\n    # Calculate the net present value of the advantages and disadvantages\n    net_present_value = current_value_advantages - current_value_disadvantages\n    \n    # Calculate the forward price using the formula: Forward Price = Spot Price * (1 + Risk-Free Rate * Time to Maturity)\n    forward_price = (base_asset_price + net_present_value) * (1 + risk_free_rate * time_to_maturity)\n    \n    # return answer\n    return forward_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cny_to_hkd = 1.1757\n    aud_to_cny = 5.0765\n    \n    # Do math calculation to get the answer\n    hkd_to_aud = cny_to_hkd / aud_to_cny\n    \n    # return answer\n    return hkd_to_aud\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 100000\n    yield_to_maturity = 0.055\n    number_of_years = 40\n    \n    # Do math calculation to get the answer\n    # The formula for the present value of an annuity is: PV = PMT * [(1 - (1 + r)^-n) / r]\n    present_value = annual_payment * ((1 - (1 + yield_to_maturity) ** -number_of_years) / yield_to_maturity)\n    \n    # return answer\n    return present_value\n```"
        ]
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight1 = 0.40\n    weight2 = 0.60\n    std_dev1 = 0.30\n    std_dev2 = 0.15\n    correlation = 0.25\n    \n    # Do math calculation to get the answer\n    # Formula for portfolio standard deviation: sqrt(w1^2 * sd1^2 + w2^2 * sd2^2 + 2 * w1 * w2 * sd1 * sd2 * correlation)\n    portfolio_std_dev = ((weight1**2 * std_dev1**2) + (weight2**2 * std_dev2**2) + (2 * weight1 * weight2 * std_dev1 * std_dev2 * correlation))**0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    final_sale_price = 1000\n    creation_cost = 300\n    \n    # Do math calculation to get the answer\n    value_added = final_sale_price - creation_cost\n    \n    # return answer\n    return value_added\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 0.1431\n    compounding_periods_per_year = 4\n    \n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + yearly_rate / compounding_periods_per_year) ** compounding_periods_per_year - 1\n    \n    # return answer\n    return effective_annual_rate\n```"
        ]
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold\u2013Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_equity_market_P_E = 14.5\n    expected_equity_market_P_E = 14.0\n    expected_annual_income_return = 2.4  # in percentage\n    expected_annual_real_earnings_growth = 5.0  # in percentage\n    year_over_year_inflation_rate = 2.1  # in percentage\n\n    # Do math calculation to get the answer\n    # Grinold\u2013Kroner model: E(r) = D/P + i + g - \u0394PE\n    # E(r) = Expected annual equity return\n    # D/P = Expected annual income return (dividend yield)\n    # i = Expected inflation rate\n    # g = Expected real earnings growth\n    # \u0394PE = Change in P/E ratio\n\n    D_P = expected_annual_income_return / 100\n    i = year_over_year_inflation_rate / 100\n    g = expected_annual_real_earnings_growth / 100\n    delta_PE = (expected_equity_market_P_E - current_equity_market_P_E) / current_equity_market_P_E\n\n    E_r = D_P + i + g - delta_PE\n    expected_annual_equity_return = E_r * 100  # convert to percentage\n\n    # return answer\n    return expected_annual_equity_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036000000000000004,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation_XY = 0.09\n    \n    # Convert variances to standard deviations\n    std_dev_X = variance_X ** 0.5\n    std_dev_Y = variance_Y ** 0.5\n    \n    # Do math calculation to get the answer\n    covariance_XY = correlation_XY * std_dev_X * std_dev_Y\n    \n    # return answer\n    return covariance_XY\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09  # 9% as a decimal\n    periods_per_year = 2  # Bond-equivalent yield assumes semi-annual compounding\n\n    # Do math calculation to get the answer\n    # Convert effective annual return to bond-equivalent yield\n    bond_equivalent_yield = 2 * ((1 + effective_annual_return) ** (1 / periods_per_year) - 1)\n\n    # return answer\n    return bond_equivalent_yield\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_cost = 50000\n    useful_life = 10\n    residual_value = 5000\n    \n    # Calculate the straight-line depreciation rate\n    straight_line_rate = 1 / useful_life\n    \n    # Calculate the double-declining balance rate\n    double_declining_rate = 2 * straight_line_rate\n    \n    # Calculate the depreciation for the first year\n    depreciation_2016 = initial_cost * double_declining_rate\n    \n    # return answer\n    return depreciation_2016\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gbp_to_eur = 0.8878\n    \n    # Do math calculation to get the answer\n    eur_to_gbp = 1 / gbp_to_eur\n    \n    # return answer\n    return eur_to_gbp\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.04  # 4% annually\n    bond_yield = 0.06  # 6% annually\n    recovery_rate = 0.70  # 70% recovery rate\n    \n    # Do math calculation to get the answer\n    # The formula to calculate the probability of default is:\n    # PD = (bond_yield - risk_free_rate) / (1 - recovery_rate)\n    probability_of_default = (bond_yield - risk_free_rate) / (1 - recovery_rate)\n    \n    # return answer\n    return probability_of_default\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 1300000000  # $1.3 billion\n    pre_tax_profit_rate = 0.07\n    direct_annual_operation_cost = 6000000  # $6 million\n    deposit_amount = 1300000000  # $1.3 billion\n    interest_rate = 0.05\n    expected_yearly_loss_rate = 0.003\n    unexpected_loss_rate = 0.08\n    risk_free_rate = 0.015\n    effective_tax_rate = 0.25\n\n    # Do math calculation to get the answer\n    # Calculate pre-tax profit\n    pre_tax_profit = principal * pre_tax_profit_rate\n\n    # Calculate expected yearly loss\n    expected_yearly_loss = principal * expected_yearly_loss_rate\n\n    # Calculate net profit before tax\n    net_profit_before_tax = pre_tax_profit - expected_yearly_loss - direct_annual_operation_cost\n\n    # Calculate economic capital (unexpected loss)\n    economic_capital = principal * unexpected_loss_rate\n\n    # Calculate net profit after tax\n    net_profit_after_tax = net_profit_before_tax * (1 - effective_tax_rate)\n\n    # Calculate RAROC\n    RAROC = net_profit_after_tax / economic_capital\n\n    # return answer\n    return RAROC\n```\n\nThis Python program calculates the Risk-Adjusted Return on Capital (RAROC) based on the given inputs and definitions. The RAROC is calculated by dividing the net profit after tax by the economic capital (unexpected loss)."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    car_only_renewal_rate = 0.40\n    house_only_renewal_rate = 0.70\n    both_renewal_rate = 0.80\n    \n    car_insurance_percentage = 0.70\n    house_insurance_percentage = 0.50\n    both_insurance_percentage = 0.20\n    \n    # Calculate the percentage of clients with only car insurance and only house insurance\n    car_only_percentage = car_insurance_percentage - both_insurance_percentage\n    house_only_percentage = house_insurance_percentage - both_insurance_percentage\n    \n    # Do math calculation to get the answer\n    car_only_renewals = car_only_percentage * car_only_renewal_rate\n    house_only_renewals = house_only_percentage * house_only_renewal_rate\n    both_renewals = both_insurance_percentage * both_renewal_rate\n    \n    total_renewals = car_only_renewals + house_only_renewals + both_renewals\n    \n    # return answer\n    return total_renewals * 100\n\n# Example usage:\nprint(solution())\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1yr = 0.06\n    forward_rate_1yr_1yr = 0.08\n    forward_rate_2yr_1yr = 0.10\n    par_value = 1000\n    coupon_rate = 0.10\n    years = 3\n\n    # Calculate the discount factors\n    discount_factor_1yr = 1 / (1 + spot_rate_1yr)\n    discount_factor_2yr = 1 / ((1 + spot_rate_1yr) * (1 + forward_rate_1yr_1yr))\n    discount_factor_3yr = 1 / ((1 + spot_rate_1yr) * (1 + forward_rate_1yr_1yr) * (1 + forward_rate_2yr_1yr))\n\n    # Calculate the present value of each cash flow\n    pv_coupon_1yr = coupon_rate * par_value * discount_factor_1yr\n    pv_coupon_2yr = coupon_rate * par_value * discount_factor_2yr\n    pv_coupon_3yr = coupon_rate * par_value * discount_factor_3yr\n    pv_principal_3yr = par_value * discount_factor_3yr\n\n    # Sum the present values to get the bond's worth\n    bond_worth = pv_coupon_1yr + pv_coupon_2yr + pv_coupon_3yr + pv_principal_3yr\n\n    # return answer\n    return bond_worth\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    labor_input_growth = 0.9  # in percent\n    labor_productivity_growth = 1.5  # in percent\n    inflation = 2.1  # in percent\n    dividend_yield = 2.25  # in percent\n    pe_growth = 0  # in percent\n    \n    # Do math calculation to get the answer\n    # The benchmark forecast for continuously compounded long-term US equity returns is the sum of the above components\n    long_term_equity_returns = labor_input_growth + labor_productivity_growth + inflation + dividend_yield + pe_growth\n    \n    # return answer\n    return long_term_equity_returns\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_fund = 100000000  # $100 million retirement fund\n    initial_equity_percentage = 0.80  # 80% in equity\n    target_equity_percentage = 0.60  # 60% in equity\n    equity_beta = 1.2  # beta of the equity\n    stock_index_value = 1200  # stock index value\n    multiplier = 250  # multiplier for the futures contract\n    futures_beta = 0.95  # beta of the stock index futures\n\n    # Calculate the initial and target equity values\n    initial_equity_value = total_fund * initial_equity_percentage\n    target_equity_value = total_fund * target_equity_percentage\n\n    # Calculate the required change in equity value\n    required_change_in_equity = target_equity_value - initial_equity_value\n\n    # Calculate the number of futures contracts needed\n    # Formula: (Change in Equity Value) / (Stock Index Value * Multiplier * Futures Beta)\n    number_of_futures_contracts = required_change_in_equity / (stock_index_value * multiplier * futures_beta)\n\n    # return answer\n    return number_of_futures_contracts\n```\n\nThis Python program calculates the number of stock index futures contracts needed to change the allocation of a $100 million retirement fund from 80% in equity to 60% in equity, given the specified parameters."
        ]
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_share_B = 11.4  # in percentage\n    risk_free_rate = 3.0  # in percentage\n    beta_share_B = 1.40  # from the table, assuming Share B is Security 2\n\n    # Do math calculation to get the answer\n    # Using the CAPM formula: Expected Return = Risk-Free Rate + Beta * (Market Return - Risk-Free Rate)\n    # Rearrange the formula to solve for Market Return: Market Return = (Expected Return - Risk-Free Rate) / Beta + Risk-Free Rate\n    market_return = ((expected_return_share_B - risk_free_rate) / beta_share_B) + risk_free_rate\n\n    # return answer\n    return market_return\n```"
        ]
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training_staff = 1000\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training_staff\n    \n    # return answer\n    return total_cost\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carried_interest_rate = 0.20  # 20% carried interest rate\n    projected_NAV_next_year = 250000000  # $250 million projected NAV for the next year\n    current_NAV_after_distributions = 130000000  # $130 million current NAV after distributions\n\n    # Do math calculation to get the answer\n    # Calculate the increase in NAV from the current after-distributions NAV to the projected NAV\n    increase_in_NAV = projected_NAV_next_year - current_NAV_after_distributions\n    # Calculate the carried interest based on the increase in NAV\n    carried_interest = increase_in_NAV * carried_interest_rate\n\n    # return answer\n    return carried_interest\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 75000\n    annual_interest_rate = 0.07\n    compounding_periods_per_year = 4\n    years = 6\n    \n    # Do math calculation to get the answer\n    # The formula for compound interest is A = P(1 + r/n)^(nt)\n    # where A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount (the initial amount of money).\n    # r is the annual interest rate (in decimal).\n    # n is the number of times the interest is compounded per year.\n    # t is the number of years the money is invested for.\n    \n    amount = principal * (1 + annual_interest_rate / compounding_periods_per_year) ** (compounding_periods_per_year * years)\n    \n    # return answer\n    return amount\n```"
        ]
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | \u00a38,000              | \u00a38,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | \u00a31,200              | \u00a33,000       |\n| Net balance, end of 2013                | \u00a36,800              | \u00a35,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | \u00a310,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost_2011 = 8000  # in millions\n    depreciation_accounting = 20  # years\n    depreciation_tax = 8  # years\n    accumulated_depreciation_2013_accounting = 1200  # in millions\n    accumulated_depreciation_2013_tax = 3000  # in millions\n    net_balance_2013_accounting = 6800  # in millions\n    net_balance_2013_tax = 5000  # in millions\n    revaluation_balance_2014 = 10000  # in millions\n    new_estimated_life = 20  # years\n    tax_rate = 0.30\n\n    # Calculate the depreciation per year for accounting and tax purposes\n    depreciation_per_year_accounting = acquisition_cost_2011 / depreciation_accounting\n    depreciation_per_year_tax = acquisition_cost_2011 / depreciation_tax\n\n    # Calculate the remaining useful life at the end of 2013\n    remaining_life_accounting = depreciation_accounting - 3  # 2011, 2012, 2013\n    remaining_life_tax = depreciation_tax - 3\n\n    # Calculate the depreciation for 2014\n    depreciation_2014_accounting = depreciation_per_year_accounting\n    depreciation_2014_tax = depreciation_per_year_tax\n\n    # Calculate the net balance at the end of 2014\n    net_balance_2014_accounting = revaluation_balance_2014 - depreciation_2014_accounting\n    net_balance_2014_tax = net_balance_2013_tax - depreciation_2014_tax\n\n    # Calculate the temporary difference\n    temporary_difference = net_balance_2014_accounting - net_balance_2014_tax\n\n    # Calculate the deferred tax liability\n    deferred_tax_li"
        ]
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    probabilities = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n    \n    # Calculate the mean (expected value) of sales\n    mean_sales = sum(p * s for p, s in zip(probabilities, sales))\n    \n    # Calculate the variance of sales\n    variance = sum(p * (s - mean_sales) ** 2 for p, s in zip(probabilities, sales))\n    \n    # Calculate the standard deviation of sales\n    std_deviation = variance ** 0.5\n    \n    # return answer\n    return std_deviation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    company_contributions = 1200\n    PBO_start = 45000\n    PBO_end = 43500\n    plan_assets_start = 40800\n    plan_assets_end = 39650\n    \n    # Do math calculation to get the answer\n    # Calculate the change in PBO and plan assets\n    change_in_PBO = PBO_start - PBO_end\n    change_in_plan_assets = plan_assets_start - plan_assets_end\n    \n    # Calculate the net pension cost\n    net_pension_cost = change_in_PBO + company_contributions - change_in_plan_assets\n    \n    # return answer\n    return net_pension_cost\n```"
        ]
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investments = [500, 600, 1000]\n    returns = [0.12, 0.05, 0.01]\n    \n    # Initialize variables for calculation\n    total_investment = 0\n    total_return = 0\n    \n    # Calculate total investment and total return\n    for i in range(len(investments)):\n        total_investment += investments[i]\n        total_return += investments[i] * returns[i]\n    \n    # Calculate holding period return\n    holding_period_return = (total_return / total_investment) * 100\n    \n    # return answer\n    return holding_period_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    common_shares = 60000\n    outstanding_warrants = 5000\n    warrant_conversion_price = 25\n    average_stock_price = 20\n    end_of_year_stock_price = 30\n    \n    # Calculate the number of shares that would be issued if warrants are exercised\n    if average_stock_price > warrant_conversion_price:\n        additional_shares_from_warrants = outstanding_warrants\n    else:\n        additional_shares_from_warrants = 0\n    \n    # Calculate the total number of shares for diluted EPS\n    total_diluted_shares = common_shares + additional_shares_from_warrants\n    \n    # return answer\n    return total_diluted_shares\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    eps = 2  # Projected EPS\n    current_share_price = 40  # Current share price\n    \n    # Do math calculation to get the answer\n    price_to_earnings_ratio = current_share_price / eps\n    \n    # return answer\n    return price_to_earnings_ratio\n```"
        ]
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    highest_drawdown_risk = 10.2  # in percentage\n    mean_drawdown_risk = 6.8  # in percentage\n    performance_3_years = 6.2  # in percentage\n\n    # Do math calculation to get the answer\n    calmar_ratio = performance_3_years / highest_drawdown_risk\n\n    # return answer\n    return calmar_ratio\n```"
        ]
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trade_prices = [41.50, 41.75]\n    prevailing_bids = [41.45, 41.73]\n    prevailing_offers = [41.50, 41.75]\n    \n    # Do math calculation to get the answer\n    effective_spreads = [(trade_price - prevailing_bid) + (prevailing_offer - trade_price) for trade_price, prevailing_bid, prevailing_offer in zip(trade_prices, prevailing_bids, prevailing_offers)]\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    # return answer\n    return average_effective_spread\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    quarterly_payout = 2.00\n    annual_yield = 0.06\n    quarters_to_start = 5\n    compounding_frequency = 4  # quarterly compounding\n\n    # Convert annual yield to quarterly yield\n    quarterly_yield = (1 + annual_yield) ** (1 / compounding_frequency) - 1\n\n    # Calculate the present value of the first payout\n    first_payout_value = quarterly_payout / (1 + quarterly_yield) ** quarters_to_start\n\n    # Calculate the present value of the perpetuity starting from the first payout\n    perpetuity_value = first_payout_value / quarterly_yield\n\n    # return answer\n    return perpetuity_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 3  # years\n    \n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization_year2 = annual_amortization * 2\n    \n    # return answer\n    return accumulated_amortization_year2\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer\u2019s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_dividend = 2.00\n    dividend_growth_rate = 0.04\n    required_return_rate = 0.07\n    \n    # Do math calculation to get the answer\n    inherent_worth = yearly_dividend / (required_return_rate - dividend_growth_rate)\n    \n    # return answer\n    return inherent_worth\n```"
        ]
    },
    {
        "tables": [
            "| Company   | Sales(in millions of\u20ac) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_Ajiwo = 500\n    sales_Bdfhyj = 350\n    sales_Cegfd = 270\n    sales_Ddgh = 200\n    sales_All_others = 40\n    \n    # Calculate total sales\n    total_sales = sales_Ajiwo + sales_Bdfhyj + sales_Cegfd + sales_Ddgh + sales_All_others\n    \n    # Calculate the concentration ratio of the four firms\n    concentration_ratio = (sales_Ajiwo + sales_Bdfhyj + sales_Cegfd + sales_Ddgh) / total_sales\n    \n    # return answer\n    return concentration_ratio\n```"
        ]
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/\u20ac) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.5710000000000001,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_eur = 3500\n    cost_of_sales_eur = 1500\n    exchange_rate_current = 1.77  # Current rate as of 31 December 2018\n\n    # Convert sales and cost of sales from EUR to USD using the current rate\n    sales_usd = sales_eur * exchange_rate_current\n    cost_of_sales_usd = cost_of_sales_eur * exchange_rate_current\n\n    # Calculate gross profit in USD\n    gross_profit_usd = sales_usd - cost_of_sales_usd\n\n    # Calculate gross profit margin\n    gross_profit_margin = (gross_profit_usd / sales_usd) * 100\n\n    # return answer\n    return gross_profit_margin\n```"
        ]
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_of_securities = 240  # in thousands\n    proceeds_from_sale_of_securities = 300  # in thousands\n    purchase_of_affiliated_company_shares = 275  # in thousands\n    \n    # Do math calculation to get the answer\n    # Net cash flow from investing activities is calculated by summing up all cash outflows and inflows related to investing activities\n    net_cash_flow_from_investing_activities = proceeds_from_sale_of_securities - purchase_of_securities - purchase_of_affiliated_company_shares\n    \n    # return answer\n    return net_cash_flow_from_investing_activities\n```"
        ]
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_up = 0.38\n    prob_same = 0.46\n    prob_down = 0.16\n    \n    # Probabilities of the stock being at $45 in each scenario\n    prob_45_up = 0.65\n    prob_45_same = 0.55\n    prob_45_down = 0.38\n    \n    # Do math calculation to get the answer\n    # Calculate the overall probability of the stock being at $45\n    prob_45 = (prob_up * prob_45_up) + (prob_same * prob_45_same) + (prob_down * prob_45_down)\n    \n    # return answer\n    return prob_45\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_invoice_price = 11000000  # $11 million\n    repo_rate = 0.20  # 20%\n    period_days = 20  # 20-day period\n    \n    # Do math calculation to get the answer\n    # Interest cost is calculated as (initial_invoice_price * repo_rate * period_days / 365)\n    repurchase_cost = initial_invoice_price * repo_rate * (period_days / 365)\n    \n    # return answer\n    return repurchase_cost\n```"
        ]
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 110\n    retained_earnings_2017 = 125\n    cash_dividends = 8\n    impairment_expense = 12\n    \n    # Do math calculation to get the answer\n    # Calculate the change in retained earnings\n    change_in_retained_earnings = retained_earnings_2017 - retained_earnings_2016\n    \n    # Operating cash flow is calculated by adding back the impairment expense and subtracting the cash dividends\n    operating_cash_flow = change_in_retained_earnings + impairment_expense - cash_dividends\n    \n    # return answer\n    return operating_cash_flow\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    import math\n    from scipy.stats import poisson\n\n    defect_rate = 0.05\n    num_vehicles = 5\n    expected_defects = defect_rate * num_vehicles\n\n    # Do math calculation to get the answer\n    # We use the Poisson distribution to calculate the probability of exactly 1 defective vehicle\n    probability_one_defect = poisson.pmf(1, expected_defects)\n\n    # return answer\n    return probability_one_defect\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    years_to_maturity = 9\n    yield_to_maturity = 0.05\n    current_price = 85.784357\n    par_value = 100\n    basis_point = 0.0001\n\n    # Calculate the present value of the bond's cash flows\n    cash_flows = [coupon_rate * par_value] * years_to_maturity + [par_value]\n    discount_factors = [(1 + yield_to_maturity) ** (-i) for i in range(1, years_to_maturity + 2)]\n    present_values = [cash_flows[i] * discount_factors[i] for i in range(years_to_maturity + 1)]\n    bond_value = sum(present_values)\n\n    # Calculate the price value of a basis point\n    new_yield = yield_to_maturity + basis_point\n    new_discount_factors = [(1 + new_yield) ** (-i) for i in range(1, years_to_maturity + 2)]\n    new_present_values = [cash_flows[i] * new_discount_factors[i] for i in range(years_to_maturity + 1)]\n    new_bond_value = sum(new_present_values)\n\n    price_value_basis_point = new_bond_value - bond_value\n\n    # return answer\n    return price_value_basis_point\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sample_mean = 998.7\n    sample_std_dev = 100\n    sample_size = 1600\n    \n    # Do math calculation to get the answer\n    standard_error = sample_std_dev / (sample_size ** 0.5)\n    \n    # return answer\n    return standard_error\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    assets = 500000 + 330000 + 350000 + 980000  # Stocks + Fixed Income + House + Present Value of Earnings\n    liabilities = 175000 + 150000 + 600000  # Mortgage + College Tuition + Future Foundation (present value)\n    \n    # Do math calculation to get the answer\n    economic_net_worth = assets - liabilities\n    \n    # return answer\n    return economic_net_worth\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of \u20ac10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of \u20ac8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sale_amount = 10000  # in euros\n    cost_value = 8000  # in euros\n    payment_period = 30  # days\n\n    # Do math calculation to get the answer\n    # The net shift in total assets is the difference between the sale amount and the cost value\n    net_shift_in_assets = sale_amount - cost_value\n\n    # return answer\n    return net_shift_in_assets\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equity_beta = 1.4\n    debt_ratio = 0.60\n    equity_ratio = 1 - debt_ratio\n    tax_rate = 0.35\n    \n    # Do math calculation to get the answer\n    asset_beta = (equity_beta * equity_ratio) / (1 + (debt_ratio * (1 - tax_rate)))\n    \n    # return answer\n    return asset_beta\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_fund_value = 100000000  # $100 million\n    current_shares_percentage = 0.80  # 80% shares\n    current_bonds_percentage = 0.20  # 20% bonds\n    target_shares_percentage = 0.60  # 60% shares\n    target_bonds_percentage = 0.40  # 40% bonds\n    shares_beta = 1.2\n    bonds_term = 5.0\n    stock_index_value = 1200\n    multiplier = 250\n    stock_index_beta = 0.95\n    bond_futures_cost = 105300\n    bond_futures_duration = 6.5\n\n    # Calculate current values of shares and bonds\n    current_shares_value = current_fund_value * current_shares_percentage\n    current_bonds_value = current_fund_value * current_bonds_percentage\n\n    # Calculate target values of shares and bonds\n    target_shares_value = current_fund_value * target_shares_percentage\n    target_bonds_value = current_fund_value * target_bonds_percentage\n\n    # Calculate the change in shares value needed\n    shares_value_change = target_shares_value - current_shares_value\n\n    # Calculate the number of stock index futures needed\n    stock_index_futures_value = stock_index_value * multiplier\n    number_of_stock_index_futures = shares_value_change / stock_index_futures_value\n\n    # Adjust for beta\n    number_of_stock_index_futures_adjusted = number_of_stock_index_futures * (shares_beta / stock_index_beta)\n\n    # return answer\n    return number_of_stock_index_futures_adjusted\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price = 1105.94\n    face_value = 1000\n    annual_coupon_rate = 0.08\n    years_to_maturity = 20\n    risk_premium = 0.05\n\n    # Calculate the bond yield to maturity (YTM)\n    # Using the approximate YTM formula for simplicity\n    annual_coupon_payment = face_value * annual_coupon_rate\n    numerator = annual_coupon_payment + ((face_value - bond_price) / years_to_maturity)\n    denominator = (face_value + bond_price) / 2\n    bond_yield = numerator / denominator\n\n    # Calculate the cost of equity using the bond-yield-plus-risk-premium method\n    cost_of_equity = bond_yield + risk_premium\n\n    # return answer\n    return cost_of_equity\n```\n\nThis Python program calculates the cost of equity using the bond-yield-plus-risk-premium method. It first calculates the bond yield to maturity (YTM) using an approximate formula and then adds the given risk premium to obtain the cost of equity."
        ]
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_x_price_march = 15\n    stock_x_price_april = 20\n    stock_y_price_march = 20\n    stock_y_price_april = 30\n    stock_z_price_march = 30\n    stock_z_price_april = 25\n    \n    starting_index_value = 121\n    \n    # Calculate the average price change for each stock\n    stock_x_change = (stock_x_price_april - stock_x_price_march) / stock_x_price_march\n    stock_y_change = (stock_y_price_april - stock_y_price_march) / stock_y_price_march\n    stock_z_change = (stock_z_price_april - stock_z_price_march) / stock_z_price_march\n    \n    # Calculate the equal-weighted average change\n    equal_weighted_change = (stock_x_change + stock_y_change + stock_z_change) / 3\n    \n    # Calculate the new index value\n    new_index_value = starting_index_value * (1 + equal_weighted_change)\n    \n    # return answer\n    return new_index_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 0.22\n    growth_rate_stage1 = 0.12\n    growth_rate_stage2 = 0.06\n    required_return = 0.09\n    years_stage1 = 4\n\n    # Calculate the dividend at the end of stage 1\n    dividend_end_stage1 = initial_dividend * (1 + growth_rate_stage1) ** years_stage1\n\n    # Calculate the terminal value at the end of stage 1\n    terminal_value = dividend_end_stage1 * (1 + growth_rate_stage2) / (required_return - growth_rate_stage2)\n\n    # return answer\n    return terminal_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P0 = 98.722  # Initial price of the bond\n    P_plus = 98.669  # Price when YTM increases by 10 basis points\n    P_minus = 98.782  # Price when YTM decreases by 10 basis points\n    delta_Y = 0.001  # 10 basis points in decimal form\n\n    # Do math calculation to get the answer\n    # Calculate the approximate convexity using the formula:\n    # Convexity = (P_plus + P_minus - 2*P0) / (P0 * (delta_Y)^2)\n    convexity = (P_plus + P_minus - 2 * P0) / (P0 * (delta_Y ** 2))\n\n    # return answer\n    return convexity\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35\n    current_share_price = 56\n    \n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    # return answer\n    return price_to_sales_ratio\n```"
        ]
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 9000\n    accounts_payable = 600\n    \n    # Do math calculation to get the answer\n    payables_turnover = cost_of_goods_sold / accounts_payable\n    days_of_payables = 365 / payables_turnover\n    \n    # return answer\n    return days_of_payables\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    value_A = 5000000\n    marginal_VaR_A = 0.0452\n    value_B = 3000000\n    marginal_VaR_B = 0.0332\n    \n    # Do math calculation to get the answer\n    contribution_A = value_A * marginal_VaR_A\n    contribution_B = value_B * marginal_VaR_B\n    total_contribution = contribution_A + contribution_B\n    percent_contribution_A = (contribution_A / total_contribution) * 100\n    \n    # return answer\n    return percent_contribution_A\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    import numpy as np\n    from scipy.stats import norm\n\n    # Portfolio details\n    deep_in_the_money_call_options = 5000\n    deep_out_of_the_money_call_options = 20000\n    future_contracts = 10000\n    current_price = 52\n    trading_days = 252\n    volatility = 0.12\n    confidence_level = 0.99\n\n    # Calculate the total number of shares represented by the options and futures\n    total_shares = deep_in_the_money_call_options + deep_out_of_the_money_call_options + future_contracts\n\n    # Calculate the daily volatility\n    daily_volatility = volatility / np.sqrt(trading_days)\n\n    # Calculate the z-score for the 99% confidence level\n    z_score = norm.ppf(1 - confidence_level)\n\n    # Calculate the 1-day 99% VaR\n    var_1day = current_price * total_shares * (z_score * daily_volatility)\n\n    # return answer\n    return var_1day\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    periodic_contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = 2500000\n    \n    # Do math calculation to get the answer\n    pension_expense = periodic_contributions + service_costs - actuarial_gain\n    \n    # return answer\n    return pension_expense\n```"
        ]
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 4.4  # 10-year AA corporate bond yield from the table\n    risk_premium = 8.4  # Equity risk premium from the table\n    \n    # Do math calculation to get the answer\n    predicted_return = bond_yield + risk_premium\n    \n    # return answer\n    return predicted_return\n```"
        ]
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100000000  # in dollars\n    total_liabilities = 1200000000  # in dollars\n    preferred_equity = 120000000  # in dollars\n    common_shares_outstanding = 32000000  # in shares\n\n    # Calculate total equity\n    total_equity = total_assets - total_liabilities\n\n    # Calculate common equity\n    common_equity = total_equity - preferred_equity\n\n    # Calculate normalized EPS\n    normalized_EPS = common_equity / common_shares_outstanding\n\n    # return answer\n    return normalized_EPS\n```"
        ]
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trade_prices = [25.20, 25.22, 25.27]\n    ask_prices = [25.20, 25.22, 25.26]\n    \n    # Calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ask_price) for trade_price, ask_price in zip(trade_prices, ask_prices)]\n    \n    # Calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    # return answer\n    return average_effective_spread\n```\n\nThis program calculates the effective spread for each trade by doubling the difference between the trade price and the ask price, then computes the average of these spreads to find the average effective spread."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    swap_rate = 1.00  # in percentage\n    treasury_yield = 0.63  # in percentage\n    \n    # Do math calculation to get the answer\n    swap_spread = swap_rate - treasury_yield\n    \n    # return answer\n    return swap_spread\n```"
        ]
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_risk_free_rate = 0.03\n    beta_of_T_REIT = 1.1\n    market_risk_premium = 0.05\n    expected_dividend_1 = 1.13\n    expected_dividend_2 = 1.22\n    long_term_growth_rate = 0.05\n\n    # Calculate the required rate of return using the Capital Asset Pricing Model (CAPM)\n    required_rate_of_return = current_risk_free_rate + beta_of_T_REIT * market_risk_premium\n\n    # Calculate the present value of dividends for the first two years\n    pv_dividend_1 = expected_dividend_1 / (1 + required_rate_of_return)\n    pv_dividend_2 = expected_dividend_2 / (1 + required_rate_of_return)**2\n\n    # Calculate the present value of the dividends starting from year 3 using the Gordon Growth Model\n    # Terminal value at the end of year 2\n    terminal_value = expected_dividend_2 * (1 + long_term_growth_rate) / (required_rate_of_return - long_term_growth_rate)\n    pv_terminal_value = terminal_value / (1 + required_rate_of_return)**2\n\n    # Sum the present values to get the inherent worth of the J REIT per share\n    inherent_worth = pv_dividend_1 + pv_dividend_2 + pv_terminal_value\n\n    # return answer\n    return inherent_worth\n```"
        ]
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7000000000000001,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    actual_sentiments = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    target_p_values = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54]\n    threshold_p_value = 0.65\n    \n    # Initialize counters for correct predictions\n    correct_predictions = 0\n    \n    # Iterate through each sentence and compare the actual sentiment with the predicted sentiment based on the threshold\n    for actual, p_value in zip(actual_sentiments, target_p_values):\n        predicted_sentiment = 1 if p_value >= threshold_p_value else 0\n        if predicted_sentiment == actual:\n            correct_predictions += 1\n    \n    # Calculate accuracy\n    accuracy = correct_predictions / len(actual_sentiments)\n    \n    # Return the accuracy\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond1_price = 10\n    bond1_duration = 1\n    bond2_price = 10\n    bond2_duration = 9\n    yield_rate = 0.05\n    daily_volatility = 0.01\n    confidence_level = 1.65  # 95% confidence level corresponds to 1.65 standard deviations\n\n    # Do math calculation to get the answer\n    # Calculate the daily value change for each bond due to yield changes\n    bond1_daily_value_change = bond1_price * bond1_duration * daily_volatility\n    bond2_daily_value_change = bond2_price * bond2_duration * daily_volatility\n\n    # Calculate the total daily value change for the portfolio\n    total_daily_value_change = bond1_daily_value_change + bond2_daily_value_change\n\n    # Calculate the daily VAR at the 95% confidence level\n    daily_var = total_daily_value_change * confidence_level\n\n    # return answer\n    return daily_var\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100\n    cash_flows = [40, 80, 120]\n    required_rate_of_return = 0.20\n    \n    # Do math calculation to get the answer\n    npv = -initial_investment\n    for t, cash_flow in enumerate(cash_flows, start=1):\n        npv += cash_flow / (1 + required_rate_of_return) ** t\n    \n    # return answer\n    return npv\n```"
        ]
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|\u00a350 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per \u00a3100)|\u00a392.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 50000000  # in pounds\n    coupon_rate = 0.04  # 4%\n    issue_price = 92.28  # per \u00a3100\n    market_interest_rate = 0.05  # 5%\n    time_to_maturity = 10  # years\n\n    # Calculate the total issue price in pounds\n    total_issue_price = (issue_price / 100) * face_value\n\n    # Calculate the interest cost for the year 2014 under IFRS\n    # Under IFRS, the interest cost is calculated using the effective interest method\n    # The effective interest rate is the market interest rate since it is higher than the coupon rate\n    effective_interest_rate = market_interest_rate\n    interest_cost = total_issue_price * effective_interest_rate\n\n    # return answer in millions\n    return interest_cost / 1000000\n\n# Example usage:\n# print(solution())\n```\n\nThis Python program calculates the interest cost for the year 2014 under IFRS for a bond issued by a corporation. The interest cost is calculated using the effective interest method, where the effective interest rate is the market interest rate, as it is higher than the coupon rate. The result is returned in millions of pounds."
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_and_short_term_investment = 750000\n    human_capital = 1200000\n    human_capital_equity_like = 0.30 * human_capital\n    total_economic_wealth = cash_and_short_term_investment + human_capital\n    target_equity_allocation = 0.45 * total_economic_wealth\n\n    # Do math calculation to get the answer\n    financial_capital_equity_allocation = target_equity_allocation - human_capital_equity_like\n\n    # return answer\n    return financial_capital_equity_allocation\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_year_5 = 2.5\n    growth_rate = 0.05\n    required_return = 0.12\n    \n    # Do math calculation to get the answer\n    # Calculate the intrinsic value using the Gordon Growth Model\n    intrinsic_value = dividend_year_5 / (required_return - growth_rate)\n    \n    # return answer\n    return intrinsic_value\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 5000000\n    market_interest_rate = 0.03\n    bond_yield_rate = 0.025\n    bond_term = 3\n    \n    # Calculate the present value of the bond\n    # The bond is issued at a discount because the market rate is higher than the yield rate\n    # We use the formula for the present value of a bond: PV = FV / (1 + r)^n\n    # where PV is the present value, FV is the face value, r is the market interest rate, and n is the number of periods\n    \n    present_value = face_value / (1 + market_interest_rate) ** bond_term\n    \n    # return answer\n    return present_value\n```\n\nThis Python program calculates the present value of the bonds issued by ABC Corporation, which are reported as bonds payable when issued. The bonds are issued at a discount because the market interest rate is higher than the yield rate. The present value is calculated using the formula for the present value of a bond, considering the face value, market interest rate, and the bond term."
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price = 26.00\n    daily_volatility = 0.015  # 1.5% expressed as a decimal\n    delta = -0.5\n    confidence_level = 0.95\n    z_score = 1.645  # Z-score for 95% confidence level\n    \n    # Do math calculation to get the answer\n    # Calculate the daily standard deviation of the share price\n    daily_std_dev = share_price * daily_volatility\n    \n    # Calculate the VaR for the share position\n    share_var = share_price * z_score * daily_std_dev\n    \n    # Adjust VaR for the delta of the put option\n    option_var = delta * share_var\n    \n    # return answer\n    return option_var\n```"
        ]
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [20, -30, 15]\n    \n    # Convert percentages to multipliers\n    multipliers = [(1 + r / 100) for r in returns]\n    \n    # Calculate the product of all multipliers\n    product = 1\n    for m in multipliers:\n        product *= m\n    \n    # Calculate the geometric mean return\n    geometric_mean = product ** (1 / len(multipliers))\n    \n    # Convert geometric mean to percentage\n    geometric_mean_return = (geometric_mean - 1) * 100\n    \n    # return answer\n    return geometric_mean_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    risk_free_rate = 0.08\n    market_return = 0.15\n    beta = 0.6\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n    \n    # Taylor rule formula: i = r* + pi + 0.5(pi - pi*) + 0.5(y - y*)\n    # where i = nominal policy rate, r* = neutral real policy rate, pi = actual inflation, pi* = desired inflation, y = actual growth, y* = projected growth\n    \n    # Do math calculation to get the answer\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (anticipated_inflation - desired_inflation_rate) + 0.5 * (predicted_growth - projected_growth)\n    \n    # return answer\n    return nominal_policy_rate\n```"
        ]
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 1.9 / 100\n    expected_growth_in_PE = -1.2 / 100\n    expected_income_component = 1.8 / 100\n    expected_growth_in_real_earnings_per_share = 2.7 / 100\n    expected_change_in_shares_outstanding = 0.0 / 100\n    current_three_month_government_bond_yield = 0.96 / 100\n    long_term_geometric_average_return_of_market_equity_index = 9.96 / 100\n    long_term_geometric_average_return_of_short_term_government_bond = 3.15 / 100\n\n    # Do math calculation to get the answer\n    # Grinold-Kroner model formula: E(r) = D/P + i + g + \\Delta P/E + \\Delta S\n    # E(r) = Expected return on equity\n    # D/P = Dividend yield (not provided, assuming 0 for simplicity)\n    # i = Expected inflation\n    # g = Expected growth in real earnings per share\n    # \\Delta P/E = Expected change in P/E ratio\n    # \\Delta S = Expected change in shares outstanding\n\n    # Assuming D/P is 0 for simplicity\n    dividend_yield = 0\n\n    # Calculate expected return on equity using Grinold-Kroner model\n    expected_return_on_equity = (\n        dividend_yield + \n        expected_inflation + \n        expected_growth_in_real_earnings_per_share + \n        expected_growth_in_PE + \n        expected_change_in_shares_outstanding\n    )\n\n    # Calculate ERP (Equity Risk Premium)\n    equity_risk_premium = expected_return_on_equity - current_three_month_government_bond_yield\n\n    # return answer\n    return equity_risk_premium\n```"
        ]
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class \u201c1\u201d or negative sentiment (Class \u201c0\u201d). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    TP = 182\n    FP = 52\n    FN = 31\n    TN = 96\n    \n    # Do math calculation to get the answer\n    total_predictions = TP + FP + FN + TN\n    correct_predictions = TP + TN\n    accuracy = correct_predictions / total_predictions\n    \n    # return answer\n    return accuracy\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    participants = 15\n    prizes = 3\n    \n    # Do math calculation to get the answer\n    # The number of ways to choose the top 3 performers out of 15 is given by the combination formula C(n, k) = n! / (k! * (n-k)!)\n    from math import factorial\n    answer = factorial(participants) // (factorial(prizes) * factorial(participants - prizes))\n    \n    # return answer\n    return answer\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delta = 100000  # delta in barrels\n    gamma = -50000  # gamma in barrels per dollar\n    price_shift = 2.00  # maximum price shift in dollars\n    \n    # Do math calculation to get the answer\n    # Using the delta-gamma approximation for VaR\n    # VaR = delta * price_shift + 0.5 * gamma * (price_shift ** 2)\n    var = delta * price_shift + 0.5 * gamma * (price_shift ** 2)\n    \n    # return answer\n    return var\n```\n\nThis Python program calculates the Value at Risk (VaR) for the given option stance in crude oil using the delta-gamma approximation. The VaR is computed based on the delta and gamma values provided, along with the maximum expected price shift."
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 20000\n    loan_amount = 10000\n    preservation_margin = 0.30\n    \n    # Do math calculation to get the answer\n    # The formula to calculate the initial price that will trigger a margin call is:\n    # Margin Call Price = (Initial Investment - Loan Amount * Preservation Margin) / (Number of Shares - Number of Shares * Preservation Margin)\n    # Since we are dealing with the total investment and not the number of shares, we can simplify the formula to:\n    # Margin Call Price = Loan Amount / (1 - Preservation Margin)\n    \n    margin_call_price = loan_amount / (1 - preservation_margin)\n    \n    # return answer\n    return margin_call_price\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    AUM_end_previous_year = 288000000  # Assets under management from the end of the previous year in dollars\n    management_fee_rate = 0.02  # Management fee rate based on year-end AUM\n    incentive_fee_rate = 0.20  # Incentive fee rate\n    soft_hurdle_rate = 0.05  # Soft hurdle rate\n    high_water_mark = 357000000  # High-water mark in dollars\n    fund_yield_current_year = 0.25  # Fund yield for the current year\n\n    # Calculate the management fee\n    management_fee = AUM_end_previous_year * management_fee_rate\n\n    # Calculate the AUM at the end of the current year\n    AUM_end_current_year = AUM_end_previous_year * (1 + fund_yield_current_year)\n\n    # Calculate the net performance above the high-water mark and soft hurdle rate\n    net_performance = AUM_end_current_year - (high_water_mark + (high_water_mark * soft_hurdle_rate))\n\n    # Calculate the incentive fee\n    if net_performance > 0:\n        incentive_fee = net_performance * incentive_fee_rate\n    else:\n        incentive_fee = 0\n\n    # Calculate the total fee\n    total_fee = management_fee + incentive_fee\n\n    # return answer\n    return total_fee\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.9030000000000005,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.25\n    weight_y = 0.75\n    std_dev_x = 0.179\n    std_dev_y = 0.062\n    correlation = 0.5\n    \n    # Do math calculation to get the answer\n    # Calculate the variance of the portfolio\n    variance_portfolio = (weight_x**2 * std_dev_x**2) + (weight_y**2 * std_dev_y**2) + (2 * weight_x * weight_y * std_dev_x * std_dev_y * correlation)\n    \n    # Calculate the standard deviation of the portfolio\n    std_dev_portfolio = variance_portfolio**0.5\n    \n    # return answer\n    return std_dev_portfolio\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 160000000  # Initial asset value in dollars\n    increase_percentage = 0.25  # 25% increase in assets\n    management_fee_rate = 0.02  # 2% management fee\n    incentive_fee_rate = 0.20  # 20% incentive fee\n    soft_hurdle_rate = 0.10  # 10% net of management fee for calculating the incentive fee\n    high_water_mark = 198000000  # Prior high-water mark in dollars\n\n    # Calculate end-of-year asset value\n    end_of_year_value = initial_value * (1 + increase_percentage)\n\n    # Calculate management fee\n    management_fee = end_of_year_value * management_fee_rate\n\n    # Calculate net asset value after management fee\n    net_asset_value = end_of_year_value - management_fee\n\n    # Calculate the performance above the soft hurdle rate\n    performance_above_hurdle = net_asset_value - (initial_value * (1 + soft_hurdle_rate))\n\n    # Calculate the incentive fee\n    incentive_fee = 0\n    if performance_above_hurdle > 0:\n        incentive_fee = performance_above_hurdle * incentive_fee_rate\n\n    # Calculate total fees collected\n    total_fees = management_fee + incentive_fee\n\n    # return answer\n    return total_fees\n```\n\nThis Python program calculates the total fees collected by the investment company under the given conditions, including both the management fee and the incentive fee."
        ]
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    NOI_year1 = 2775840\n    NOI_year6 = 3217959\n    investment_hold_period = 5  # Given as 5 years in the DCF Assumptions\n\n    # Do math calculation to get the answer\n    # Calculate the annual growth rate using the formula for compound growth\n    growth_rate = ((NOI_year6 / NOI_year1) ** (1 / investment_hold_period)) - 1\n\n    # return answer\n    return growth_rate\n```"
        ]
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_X = 0.30\n    weight_Y = 0.70\n    std_dev_X = 0.25\n    std_dev_Y = 0.10\n    correlation_XY = 0.8\n    \n    # Do math calculation to get the answer\n    variance_X = std_dev_X ** 2\n    variance_Y = std_dev_Y ** 2\n    covariance_XY = correlation_XY * std_dev_X * std_dev_Y\n    \n    portfolio_variance = (weight_X ** 2 * variance_X) + (weight_Y ** 2 * variance_Y) + (2 * weight_X * weight_Y * covariance_XY)\n    portfolio_std_dev = portfolio_variance ** 0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ]
    }
]