[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    truck_original_cost = 57000\n    truck_salvage_value = 15000\n    truck_3_year_depreciation = 0\n    land_original_cost = 18000\n    truck kuv = 27000\n    land_kuv = 21000\n    \n    # Calculate the 3-year depreciation value of the truck using the declining balance method with a rate of 20%\n    truck_3_year_depreciation = truck_original_cost - truck_salvage_value + ((truck_original_cost - truck_salvage_value) * (1 - 0.2) ** 3)\n    \n    # Calculate the gain on sale of the truck\n    gain_on_sale_truck = truck_kuv - truck_3_year_depreciation\n    \n    # Calculate the loss on sale of the land using the substitute rule (the value of the land received must be the value of the asset sold minus any gain on the sale of the asset)\n    loss_on_sale_land = land_original_cost - land_kuv + gain_on_sale_truck\n    \n    # Calculate the loss on the swap (the value difference between the assets)\n    loss_on_swap = max(loss_on_sale_land, gain_on_sale_truck)\n    \n    # Return the likely loss on the profit and loss statement, which will be the maximum of the loss on sale of land and the loss on the swap\n    return max(loss_on_sale_land, loss_on_swap)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    exchange_rate = 2.0979  # spot exchange rate from NZD to GBP\n    libor_rate_gbp = 1.6025 / 100 / (360 / 365)  # convert Libor rate to decimal and annualize\n    libor_rate_nzd = 3.2875 / 100 / (360 / 180)  # convert Libor rate to decimal and annualize for 180-day period\n    days = 180  # number of days for the forward period\n    difference = 360 - days  # number of days in the compounding period\n\n    # Do math calculation to get the answer\n    forward_points_nzd_gbp = (libor_rate_nzd - libor_rate_gbp) * exchange_rate * (1 + libor_rate_gbp * days + libor_rate_gbp * libor_rate_gbp * difference * days / 2)\n    \n    # return answer\n    return round(forward_points_nzd_gbp, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.003
        }
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cov_buying_power_with_gim = 0.0075\n    gim_integration = 0.60\n    risk_free_rate = 0.031\n    \n    # Do math calculation to get the answer\n    # Using the formula: Beta (β) = Covariance between the security and the market / (Market Variance)\n    # Since we only have Integration with GIM and Covariance with GIM, we can assume that the Variance of the GIM is equal to the square of the Integration with GIM\n    # Thus, beta (β) = Covariance between the security and the market / (Integration with GIM ^ 2)\n    # First, divide the covariance by the integration with GIM\n    beta_divisor = cov_buying_power_with_gim / gim_integration\n    \n    # Then, the beta is equal to the result of the division of the previous calculation times the sharpe ratio of the GIM (0.36) and THEN subtracting one\n    ans = beta_divisor * 0.36 - 1\n    # return answer\n    return ans\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.996
        }
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_eur_fwd_price = 1.3983\n    forward_term = 6/12  # 6 months is 1/2 a year, forward term is the portion of the 6 months that has elapsed\n    usd_interest_rate = 0.01266\n    usd_fx = 1 / 1.4106\n    num_shares = 200000\n    stock_price = 90\n    \n    # Do math calculation to get the answer\n    settlement = num_shares * stock_price * (1 + (1 + usd_interest_rate) ** forward_term)\n    answer = (initial_eur_fwd_price - (usd_fx * (1 + usd_interest_rate) ** forward_term)) * num_shares\n    \n    # return answer\n    return abs(answer - settlement)\n\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 35976599.951
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 3700000  # market worth of the collection\n    daily_fluctuation = 0.0004  # daily fluctuation\n    trading_days = 250  # number of trading days per year\n    confidence_level = 0.95  # 95% assurance level\n    z_score = 1.645  # z-score corresponding to 95% assurance level from a standard normal distribution (Inverse of 0.95 CDF of a standard normal distribution)\n    \n    # Do math calculation to get the answer\n    volatility = daily_fluctuation * (portfolio_value / 365) * pow(trading_days, 0.5)\n    variance = volatility ** 2\n    va_r = (z_score * pow(variance, 0.5)) * trading_days\n    one_year_var = abs(va_r)  # 1-year VaR at the 95% assurance level\n    \n    # return answer\n    return one_year_var\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 26366.031
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_failure = 0.40  # Probability of failure\n    p_success_any = 0.55  # Probability of success\n    p_success_given_survival = 0.85 # Probability of success given survival\n    \n    # The total probability rule is P(S) = P(S|S'S') + P(S|S)\n    p_success_given_failure = (p_success_any - p_success_any * p_success_given_survival) / p_failure\n    \n    # return answer\n    return p_success_given_failure\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.206
        }
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_share_zeta = 35  # in percentage\n    market_share_yusef = 25  # in percentage\n    market_share_xenon = 20  # in percentage\n    market_share_waters = 10  # in percentage\n    market_share_vlastos = 10  # in percentage\n\n    # Convert percentages to decimal values\n    market_share_zeta_decimal = market_share_zeta / 100\n    market_share_yusef_decimal = market_share_yusef / 100\n    market_share_xenon_decimal = market_share_xenon / 100\n    market_share_waters_decimal = market_share_waters / 100\n    market_share_vlastos_decimal = market_share_vlastos / 100\n\n    # Do math calculation to get the answer\n    hhi = (market_share_zeta_decimal ** 2) + (market_share_yusef_decimal ** 2) + (market_share_xenon_decimal ** 2) + (market_share_waters_decimal ** 2) + (market_share_vlastos_decimal ** 2)\n\n    # Five-firm Herfindahl-Hirschmann Index, HHI_5 = 1 / number of firms\n    hhi /= 5\n\n    # return answer\n    return hhi\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.049
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables for the two-year fixed-for-floating Libor swap and the two-year US Treasury bond yield\n    libor_swap = 0.01\n    treasury_yield = 0.0063\n    \n    # Do math calculation to get the answer by subtracting the treasury yield from the Libor swap\n    swap_spread = libor_swap - treasury_yield\n    \n    # return answer\n    return swap_spread\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.004
        }
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    remaining_useful_life = 4  # 2016 is the 5th year after acquisition, so remaining useful life is 4 years\n    \n    # Do math calculation to get the answer\n    annual_amortization = (acquisition_cost - residual_value) / useful_life\n    accumulated_amortization_at_2016 = remaining_useful_life * annual_amortization\n    \n    # return answer\n    return accumulated_amortization_at_2016\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 400000.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mean_reversion = 0.775  # Average mean reversion percentage\n    correlation = 0.27  # Correlation in January 2014\n    \n    # Calculate alpha using the formula: correlation = alpha * mean_reversion\n    alpha = correlation / mean_reversion\n    \n    # Calculate the previous price or value (s(t-1)) as 1 (it is a normalized value)\n    s_t_1 = 1\n    \n    # Calculate the expected price or value (μ) as 1 (it is a normalized value)\n    mu = 1\n    \n    # Calculate the expected value in February 2014 using the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model\n    s_t = s_t_1 + alpha * (mu - s_t_1)\n    \n    # Return the result of the calculation\n    return round(s_t, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 0.5  # initial dividend per share\n    growth_rate = 0.06  # growth rate of dividend\n    growth_years = 2  # number of years with constant dividend\n    return_rate = 0.10  # annual rate of return\n    years = 10  # number of years to calculate worth\n    \n    # Calculate the present value of dividends for the first two years\n    present_value = (initial_dividend * (1 - (1 + return_rate)**-growth_years) * (1 + return_rate)) / (return_rate - growth_rate)\n    \n    # Calculate the present value of the annuity for the remaining years\n    present_value_annuity = (initial_dividend * (1 + growth_rate) ** growth_years) * (1 - (1 + return_rate)**(- (years - growth_years)))/return_rate * (1 + return_rate)/(1 + growth_rate)\n    \n    # Calculate the total present value\n    total_present_value = present_value + present_value_annuity\n    \n    # return answer\n    return total_present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 5.497
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_elasticity = 1.8\n    marginal_cost = 30\n    average_cost = 50\n    \n    # Assuming a target profit level (in this case, zero for simplicity)\n    target_profit = 0\n    \n    # Using the price elasticity formula to calculate the optimal price\n    # MR = MR (ideal) + MC, where MR is the marginal revenue and MC is the marginal cost\n    # MR (ideal) = price * (1 + 1/price_elasticity)\n    ideal_marginal_revenue = 0 + marginal_cost\n    \n    # Substitute the expression of ideal MR in the equation above\n    # price * (1 + 1/price_elasticity) = ideal_marginal_revenue\n    # Solve for price\n    price = (ideal_marginal_revenue) / (1 + 1/price_elasticity)\n    \n    # return answer\n    return price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 19.286
        }
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue = 460000\n    value_of_buildings_and_machinery_beginning = 320000\n    value_of_buildings_and_machinery_end = 270000\n    cost_of_raw_materials = 80000\n    wages_paid_during_year = 30000\n    normal_profit_for_year = 50000\n    \n    # Calculate the change in value of buildings and machinery\n    change_in_value_of_properties = value_of_buildings_and_machinery_beginning - value_of_buildings_and_machinery_end\n    \n    # Calculate total expenses\n    total_expenses = cost_of_raw_materials + wages_paid_during_year - change_in_value_of_properties + normal_profit_for_year\n    \n    # Calculate annual economic profit\n    annual_economic_profit = total_revenue - total_expenses\n    \n    # return answer\n    return annual_economic_profit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 350000.0
        }
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ebitda = 1349  # EBITDA for 2012 in millions\n    capital_expenditure = 535  # Capital expenditure for 2012 in millions\n    interest_paid = 186  # Interest paid for 2012 in millions\n    \n    # Do math calculation to get the answer\n    operating_free_cash_flow = ebitda - capital_expenditure\n    free_cash_flow = operating_free_cash_flow - interest_paid\n    \n    # return answer\n    return free_cash_flow\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 628.0
        }
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    carrying_value = 500000  # Carrying value of equipment (net book value)\n    fair_value = 450000  # Present value of expected future cash flows\n    costs_to_sell = 50000  # Costs to sell\n    \n    # Do math calculation to get the answer\n    impairment_loss = max(fair_value + costs_to_sell - carrying_value, 0)  # IFRS impairment loss calculation\n    \n    # return answer\n    return impairment_loss\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03  # 3%\n    mature_time = 3  # 3 years\n    required_rate_of_return = 0.05  # 5%\n    par_value_of_the_bond = 100\n    \n    # Calculate the number of periods (2 periods per year for semiannual payments)\n    num_periods = mature_time * 2\n    \n    # Calculate the bond price using the formula\n    # P = C x [(1 - (1 + r)^(-n)) / r] + PV\n    # where P = bond price, C = coupon rate, r = interest rate, n = number of periods\n    # In this case, the interest rate for each period is half of the required rate of return\n    r = required_rate_of_return / 2\n    P = (par_value_of_the_bond * coupon_rate * num_periods) / (r * (1 + r)**num_periods - 1)\n    \n    # return answer\n    return round(P, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -18.54
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "Here is the Python program to calculate the cost of goods sold for Shine Kids Ltd. using the first in, first out (FIFO) method:\n```python\ndef solution():\n    # Define variables name and value\n    total_supplied = 10000  # total units bought\n    additional_supplied = 5000  # additional units bought in November\n    base_cost = 10  # cost of units bought in October\n    additional_cost = 11  # cost of units bought in November\n    totalSold = 12000  # total units sold\n    units_sold_October_to_December = 10000  # calculate units sold from first in\n    units_sold_November_to_December = totalSold - units_sold_October_to_December\n    \n    # Do math calculation to get the answer\n    cost_of_goods_sold_October_to_December = units_sold_October_to_December * base_cost\n    cost_of_goods_sold_November_to_December = units_sold_November_to_December * additional_cost\n    cost_of_goods_sold = cost_of_goods_sold_October_to_December + cost_of_goods_sold_November_to_December\n    \n    # return answer\n    return cost_of_goods_sold\n```\nThis program calculates the cost of goods sold by applying the FIFO method: the first units bought are the first ones sold, and the last units bought are the ones that remain unsold. The total cost of goods sold is the sum of the cost of goods sold in the first period (October to December) and the cost of goods sold in the second period (November to December)."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 122000.0
        }
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.10200000000000001,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "```python\ndef solution():\n    # Define the probabilities of economic scenario\n    good_scenario_prob = 70\n    bad_scenario_prob = 30\n    \n    # Define the probabilities of portfolio return\n    good_scenario_prob_return = 50\n    good_scenario_prob_return_value = 0.20  # 20%\n    bad_scenario_prob_return = 60\n    bad_scenario_prob_return_value = 0.05  # 5%\n    bad_scenario_neg_return = 40\n    bad_neg_scenario_prob_return_value = -0.10  # -10%\n    \n    # Define variables for each scenario\n    good_return_good_scenario = (good_scenario_prob/100) * (good_scenario_prob/100) * good_scenario_prob_return\n    good_return_bad_scenario = (good_scenario_prob/100) * (bad_scenario_prob/100) * good_scenario_prob_return\n    bad_return_good_scenario = (bad_scenario_prob/100) * (good_scenario_prob/100) * bad_scenario_prob_return\n    bad_return_bad_scenario = (bad_scenario_prob/100) * (bad_scenario_prob/100) * bad_neg_scenario_prob_return_value\n    \n    # Do calculation to get the answer\n    total_good_return = good_return_good_scenario + bad_return_good_scenario\n    total_bad_return = good_return_bad_scenario + bad_return_bad_scenario\n    \n    # Return answer\n    return total_good_return, total_bad_return\n\n# Call the function\ngood_return, bad_return = solution()\nprint(f'The anticipated portfolio return if economic condition is good: {good_return}')\nprint(f'The anticipated portfolio return if economic condition is bad: {bad_return}')\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "(37.099999999999994, 10.491)"
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_lifo_inventory = 200000\n    initial_lifo_reserve = 30000\n    final_lifo_inventory = 250000\n    final_lifo_reserve = 40000\n    tax_rate = 0.3  # 30% tax rate\n    \n    # Calculate LIFO cost of goods sold for 2017\n    # LIFO cost of goods sold = beginning inventory + purchases - ending inventory\n    # We know that the increase in LIFO reserve is the difference between the cost of goods sold under LIFO and FIFO\n    # So, LIFO cost of goods sold = LIFO reserve at start + purchases - LIFO reserve at end\n    \n    # We know the ending inventory at LIFO basis, so first calculate the LIFO cost of 2017 purchases\n    # This equals ending LIFO inventory + LIFO reserve at start - beginning LIFO inventory\n    LIFO_cost_of_purchases = final_lifo_inventory + initial_lifo_reserve - initial_lifo_inventory\n    \n    # Now LIFO cost of goods sold for 2017 = LIFO reserve at start + LIFO cost of purchases - LIFO reserve at end\n    LIFO_cost_of_goods_sold = initial_lifo_reserve + LIFO_cost_of_purchases - final_lifo_reserve\n    \n    # Calculate the LIFO cost of goods sold under FIFO\n    # This is equal to beginning inventory + LIFO cost of goods sold\n    FIFO_cost_of_goods_sold = initial_lifo_inventory + LIFO_cost_of_goods_sold\n    \n    # Calculate the tax effect of eliminating the LIFO reserve\n    # FIFO inventory = LIFO inventory at end - beginning inventory + beginning inventory - LIFO reserve at start + LIFO reserve at end\n    FIFO_inventory = final_lifo_inventory + (initial_lifo_inventory - initial_lifo_reserve + final_lifo_reserve)\n    \n    # Then FIFO value of goods sold = FIFO cost of goods sold - Beginning inventory + (FIFO cost of goods sold - LIFO cost of goods sold) / (1 - tax rate)\n    FIFO_value_of_goods_sold = FIFO_cost_of_goods_sold - initial_lifo_inventory + (FIFO_cost_of_goods_sold - LIFO_cost_of_goods_sold) / (1 - tax_rate)\n    \n    # FIFO cost of goods available for sale = FIFO cost of goods sold + FIFO inventory\n    FIFO_cost_of_goods_available_for_sale = FIFO_cost_of_goods_sold + FIFO_inventory\n    \n   "
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_discount_rate = 0.045\n    maturity = 15  # in years\n    par_value = 100  # in dollars\n\n    # Do math calculation to get the answer\n    # Formula for zero-coupon bond value is V = FV/R = FVV * (1 + r)^(-n), \n    # where V is the face value (FV), r is the interest rate, n is the number of periods\n    # Since V is the par value and we want to find the price at maturity, we need to find the Future Value (FV) first.\n    # FV = P(1 + r)^n, where P is the present value (100 in this case)\n    # FV = 100(1 + market_discount_rate)^maturity\n    \n    future_value = (1 + market_discount_rate)**maturity\n    acc;\n\n    # Then, we can use the formula V = FV/R to find the cost per 100 of par value at maturity.\n    # We need to divide the FV by the par value to get the cost per 100 of par value\n    cost_per_par_value = (100*future_value) / par_value\n    # But this value is at maturity, the question asks for cost per 100 of par value.\n    # To find the cost per 100 of par value before maturity, we simply use the formula for future value and change n to maturity - 1\n    cost_per_par_value_before_maturity = (1 + market_discount_rate)**(maturity - 1)\n    \n    # return answer\n    return 100 / (100*(1 + market_discount_rate)**(maturity - 1))\n```\n\nNote: The returned answer is calculated assuming yearly compound interest and yearly market discount rate."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n    \n    # Do math calculation to get the answer\n    call_price = carrying_value - gain_on_redemption\n    \n    # return answer\n    return call_price\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 850000.0
        }
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "To find the most precise spot EUR/GBP cross-rate, we can use the given spot rate ratios and calculate the cross-rate using each combination of rates, and then compare the differences between them. The combination with the smallest difference would be the most precise.\n\nHere's the Python program:\n```python\ndef solution():\n    # Define variables name and value\n    usd_eur = 1.3860\n    eur_cad = 0.6125\n    usd_gbp = 1.4208\n    \n    # Calculate EUR/GBP cross-rate using each combination of rates\n    eur_gbp_via_usd_eur = usd_gbp / usd_eur\n    eur_gbp_via_eur_cad = eur_cad / usd_eur * usd_gbp\n    \n    # Calculate absolute differences between cross-rates\n    diff_minus_eur_cad = abs(eur_gbp_via_eur_cad - eur_gbp_via_usd_eur)\n    diff_eur_usd = abs(eur_gbp_via_usd_eur - 1 / eur_cad * usd_gbp)  # Using another valid combination\n    \n    # Return the most precise cross-rate\n    if diff_minus_eur_cad < diff_eur_usd:\n        return eur_gbp_via_usd_eur\n    else:\n        return eur_gbp_via_eur_cad\n```\nThe program first calculates the EUR/GBP cross-rate using two combinations of given spot rates (USD/EUR and EUR/CAD with USD/GBP). Then it computes the absolute differences between the two cross-rates. Finally, it returns the most precise cross-rate."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.025
        }
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "```python\ndef solution():\n    # Define the table values\n    table = {\n        \"One-Year\": {\"Par Rate\": 2.50, \"Spot rate\": 2.50},\n        \"Two-Year\": {\"Par Rate\": 2.99, \"Spot rate\": 3.00},\n        \"Three-Year\": {\"Par Rate\": 3.48, \"Spot rate\": 3.50},\n        \"Four-Year\": {\"Par Rate\": 3.95, \"Spot rate\": 4.00},\n        \"Five-Year\": {\"Par Rate\": 4.37, \"Spot rate\": None}  # Spot rate is missing from the table\n    }\n\n    # Since the five-year spot rate is missing, we need to estimate it based on the given data.\n    # For simplicity, let's assume a linear interpolation between the four-year and five-year rates.\n    # This is not the only way to estimate the five-year spot rate, but it's a common approach.\n    four_year_spot = table[\"Four-Year\"][\"Spot rate\"]\n    five_year_par_rate = table[\"Five-Year\"][\"Par Rate\"]\n    four_year_par_rate = table[\"Four-Year\"][\"Par Rate\"]\n\n    # Calculate the difference in years between Five-Year and Four-Year\n    difference_in_years = 5 - 4\n\n    # Calculate the difference in spot rates between Four-Year and Five-Year (using Par Rates for interpolation)\n    difference_in_spot_rates = (five_year_par_rate - four_year_par_rate) / ((four_year_par_rate + five_year_par_rate) / 2 - four_year_par_rate)\n\n    # Calculate the estimated Five-Year spot rate\n    estimated_five_year_spot_rate = four_year_spot + (difference_in_years * difference_in_spot_rates)\n\n    # Return the estimated five-year spot rate\n    return estimated_five_year_spot_rate\n\n# Test the function\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_rate = 0.08\n    future_rate_high = 0.10\n    future_rate_low = 0.06\n    risk_premium = 0.4 / 100\n    probability_high = 0.5\n    probability_low = 0.5\n    principal = 1000\n    \n    # Do math calculation to get the answer\n    # First, calculate the present value of the bond at each future rate\n    present_value_high = principal / (1 + future_rate_high)\n    present_value_low = principal / (1 + future_rate_low)\n    \n    # Then, calculate the present value of the bond today at both future rates\n    present_value_today_high = present_value_high / (1 + current_rate + risk_premium)\n    present_value_today_low = present_value_low / (1 + current_rate + risk_premium)\n    \n    # Finally, calculate the expected present value\n    expected_present_value = (probability_high * present_value_today_high) + (probability_low * present_value_today_low)\n    \n    # return answer\n    return round(expected_present_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 854.47
        }
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.9380000000000001,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "## Solution\n\nTo calculate the t-test statistic, we need to first calculate the pooled variance, then use the formula for the two-sample t-test. The problem provides the sample means, sample sizes, and the combined estimate of the common variance.\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    sample_size_a = 25\n    sample_size_b = 18\n    sample_mean_a = 200\n    sample_mean_b = 185\n    combined_variance = 2678.05\n\n    # Calculate the pooled variance\n    pooled_variance = combined_variance\n\n    # Calculate the standard error\n    standard_error = math.sqrt(pooled_variance * ((1/sample_size_a) + (1/sample_size_b)))\n\n    # Calculate the t-test statistic using the formula:\n    t_test_statistic = (sample_mean_a - sample_mean_b) / (standard_error * math.sqrt(1/sample_size_a + 1/sample_size_b))\n\n    # Return the answer\n    return t_test_statistic\n```\n\nThis function will return the t-test statistic value."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.033
        }
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    \n    # Do math calculation to get the answer\n    cash_paid_to_suppliers = increase_in_accounts_payable + decrease_in_inventory\n    \n    # return answer\n    return cash_paid_to_suppliers\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1564.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    options_granted = 20000\n    option_price_on_grant = 2.5\n    average_option_price = 2.8\n    stock_price_on_grant = 15\n    lock_in_period = 4  # years\n    \n    # Since the options lapse after 5 years, the options are forfeited if they are not exercised within 5 years\n    forfeiting_period = 5 - lock_in_period\n    remaining_year = 2011  # Assuming it's year 2011\n    \n    # Calculate expected number of options exercised in 2011\n    if remaining_year == 1:\n        options_exercised = options_granted\n    elif remaining_year == 2:\n        options_exercised = (options_granted / (lock_in_period - remaining_year)) * max(0, lock_in_period - remaining_year)\n    else:\n        options_exercised = 0\n    \n    # Calculate number of options remaining at January 1, 2011\n    remaining_options = options_granted - options_exercised\n    \n    # Assume the compensation expense is the difference between the intrinsic value (market price - option price) times the total number of options exercised\n    compensation_expense = (stock_price_on_grant - option_price_on_grant) * options_exercised\n    \n    # return answer\n    return compensation_expense\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    adjusted_period = 7.020\n    convexity = 65.180\n    fall_return_maturity = 0.25  # convert basis points to decimal\n    \n    # Do math calculation to get the answer\n    # The formula to calculate the anticipated percentage change in price is (convexity * fall_return_maturity) / (-2 * adjusted_period)\n    anticipated_change = (convexity * fall_return_maturity) / (-2 * adjusted_period)\n    \n    # return answer\n    return anticipated_change\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -1.161
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 30\n    yield_rate = 0.058\n    \n    # Do math calculation to get the answer\n    preference_stocks_intrinsic_value = par_value * yield_rate\n    \n    # return answer\n    return preference_stocks_intrinsic_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.74
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 400  # initial value of the asset\n    rf = 0.05  # risk-free rate\n    tau = 0.5  # time to maturity in years (6 months)\n    q = 0.03  # continuous dividend yield\n    \n    # Do math calculation to get the answer\n    d1 = (rf + q) * tau / 2\n    d2 = rf * tau / 2\n    numerator = S * np.exp((rf + q) * tau)\n    denominator = np.exp(d1) - np.exp(-d2)\n    answer = numerator / denominator\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "Here is the Python program to calculate the test statistic:\n\n```python\ndef solution():\n    # Define variables name and value\n    sigma = 4.9  # Standard deviation of monthly returns\n    z = 5  # Standard deviation threshold\n    \n    # Do math calculation to get the answer\n    test_statistic = (z - sigma) / (sigma / (365 ** 0.5))\n    \n    # return answer\n    return test_statistic\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.39
        }
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "To calculate Holt's 2008 FCFE (Free Cash Flow to Equity), we need to use the EBITDA (Earnings Before Interest, Taxes, Depreciation, and Amortization) and then add back the depreciation expense, subtract the capital expenditures, and adjust for changes in working capital.\n\nHere's the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables with values from the table\n    ebitda_2008 = 1178  # in millions\n    depreciation_2008 = 270  # in millions\n    capital_expenditures_2008 = 257  # in millions\n    accounts_receivable_2007 = 711  # in millions\n    accounts_receivable_2008 = 770  # in millions\n    inventory_2007 = 780  # in millions\n    inventory_2008 = 846  # in millions\n    \n    # Calculate FCFE\n    fcf_round_trip_2008 = ebitda_2008 + depreciation_2008\n    fcf_round_trip_2008 -= capital_expenditures_2008\n    accounts_receivable_working_capital = accounts_receivable_2008 - accounts_receivable_2007\n    inventory_working_capital = inventory_2008 - inventory_2007\n    fcf_round_trip_2008 -= accounts_receivable_working_capital +inventory_working_capital\n    \n    # Return FCFE\n    return fcf_round_trip_2008\n\nprint(solution())\n```\n\nWhen you run this program, it will calculate Holt's 2008 FCFE."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1066.0
        }
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.14400000000000002,
        "question": "What is the sustainable growth rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gross_profit_margin = 0.20  # 20%\n    retention_rate = 0.60       # 60%\n    asset_turnover = 0.8       # 0.8\n    financial_leverage_multiplier = 1.5  # 1.5\n    \n    # Do math calculation to get the answer\n    sustainable_growth_rate = (gross_profit_margin * retention_rate * asset_turnover * financial_leverage_multiplier)\n    \n    # return answer\n    return sustainable_growth_rate\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.144
        }
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cny_hkd_rate = 0.8422\n    cny_zar_rate = 0.9149\n    cny_sek_rate = 1.0218\n    \n    # Do math calculation to get the answer\n    zar_hkd_rate = cny_zar_rate / cny_hkd_rate\n    \n    # return answer\n    return zar_hkd_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.086
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043000000000000003,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    delay = 4  # delay in days\n    lambda_ = 0.95  # decay factor (λ)\n    observation_frequency = 1  # 1 day\n    \n    # Do math calculation to get the answer\n    weight = (1 - lambda_) ** (observation_frequency * delay)\n    \n    # return answer\n    return weight\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    principal = 180000  # Initial investment amount\n    interest_rate = 0.10  # Interest rate of 10% as a decimal\n    time_years = 2  # 2 years\n    days_per_year = 365  # Days in a year for daily compounding\n    \n    # Do math calculation to get the answer\n    time_days = time_years * days_per_year  # Convert years to days\n    future_value = principal * (1 + interest_rate / days_per_year) ** time_days  # Compounded interest formula\n    \n    # return answer\n    return future_value\n```\n\nThis program calculates the future value of the investment after 2 years with daily compounding. The formula used is the compound interest formula:\n\nA = P * (1 + r/n)^(nt)\n\nWhere:\n- A = future value\n- P = principal amount (initial investment)\n- r = annual interest rate (as a decimal)\n- n = number of times compounded per year\n- t = time in years\n\nIn this case, the interest is compounded daily, so n = 365 (days per year), and time is 2 years."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 219846.474
        }
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "Here is the Python program to calculate the gross profit for June under the periodic FIFO inventory costing system:\n\n```python\ndef solution():\n    # Define variables name and value\n    # Inventory account balance on May 31 (assuming it's a full accounting period)\n    inventory_balance_may_31 = 0\n    \n    # June transactions\n    # Transaction 1: June 1 - Inventory 20 units @ $5.00/unit\n    units_inventory_june_1 = 20\n    unit_cost_inventory_june_1 = 5.0\n    \n    # Transaction 2: June 12 - Purchased 70 units @ $5.20/unit\n    units_purchased_june_12 = 70\n    unit_cost_purchased_june_12 = 5.20\n    \n    # Calculate total units and cost of units available for sale on June 12\n    total_units_available_for_sale = units_inventory_june_1 + units_purchased_june_12\n    total_cost_of_units_available_for_sale = (units_inventory_june_1 * unit_cost_inventory_june_1) + (units_purchased_june_12 * unit_cost_purchased_june_12)\n    \n    # Transaction 3: June 16 - Sold 50 units @ $6.00/unit\n    units_sold_june_16 = 50\n    selling_price_june_16 = 6.0\n    cost_of_goods_sold_june_16 = total_units_available_for_sale\n    \n    # Since it's FIFO, we don't need to update total units and cost of units available for sale for this transaction\n    \n    # Transaction 4: June 26 - Purchased 35 units @ $5.5/unit\n    units_purchased_june_26 = 35\n    unit_cost_purchased_june_26 = 5.5\n    \n    # Since it's FIFO, we need to update total units and cost of units available for sale for this transaction\n    total_units_purchased = units_purchased_june_12 + units_purchased_june_26\n    total_units_on_hand = 0\n    for transaction in [units_inventory_june_1, units_purchased_june_12, units_purchased_june_26]:\n        if total_units_on_hand <= 0:\n            total_units_on_hand = transaction\n            total_cost_of_units_available_for_sale = transaction * unit_cost_inventory_june_1\n        else:\n            available_fixture = min(total"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend_per_share = 1.72\n    growth_rate_perpetual = 0.04\n    growth_rate_initial = 0.06\n    discount_rateозвращает = 0.10\n    years_without_dividends = 3\n    years_with_dividends = 1\n    \n    # P = D / (g - d) * (1 + d) ^ n\n    # dividend discount model\n    PV = 0\n    PV_of_equal_annual_dividends = 0\n    for n in range(years_with_dividends):\n        # dividends for 4th and later years\n        PV += dividend_per_share / (growth_rate_perpetual - discount_rate) * (1 + growth_rate_perpetual) ** n\n    for n in range(years_without_dividends):\n        # no dividends for year 0 to 3\n        PV += 0\n    \n    return PV\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    payout_rate = 0.5  # Payout ratio of 50%\n    growth_rate = 0.10  # Growth rate of 10%\n    return_rate = 0.15  # Return rate of 15%\n\n    # Do math calculation to get the answer\n    # We will use the Gordon Growth Model to calculate the leading P/E ratio\n    p_e_ratio = payout_rate / (growth_rate - return_rate)\n\n    # return answer\n    return round(p_e_ratio, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -10.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 300  # yearly payment in euros\n    interest_rate = 0.04  # interest rate of 4%\n    years = 5  # number of years\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(1, years + 1):\n        present_value += (annual_payment / (1 + interest_rate) ** i)\n    \n    # return answer\n    return round(present_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1335.55
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss_from_sale = 15000\n    \n    # Do math calculation to get the answer\n    gain_from_sale = initial_price + accumulated_depreciation - loss_from_sale\n    \n    # return answer\n    return gain_from_sale\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 145000.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "Here is the Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000  # in pounds\n    total_equity = 55000000  # in pounds\n    \n    # Do math calculation to get the answer\n    percentage_of_liabilities = (total_liabilities / (total_liabilities + total_equity)) * 100\n    \n    # return answer\n    return percentage_of_liabilities\n```\n\nThis program calculates the percentage of total liabilities on a vertical common-size balance sheet by dividing the total liabilities by the total of liabilities and equity, and then multiplying by 100."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 38.889
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Do math calculation to get the answer\n    # Calculate present dividend value\n    present_dividend_value = dividend / (required_rate_of_return - growth_rate)\n    \n    # return answer\n    return present_dividend_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 33.333
        }
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pv0 = 99.41172\n    pvp = 99.32213\n    pvnev = 99.50132  # assuming PV_ is the new price (PVnev) when yield to maturity is reduced\n    deltacurve = 3  # in basis points\n    deltayield = 1  # in basis points\n    \n    # Do math calculation to get the answer\n    # Convexity formula for bonds: C = (ΔYield + (ΔCurve * Yield / 2)) / (ΔPrice0) where ΔPrice0 = (PVp - PVnev) / PV0\n    yield_value = (pvp - pvnev) / pv0 * 100\n    delta_price = (pvp - pvnev)\n    convexity = (deltayield + (deltacurve * yield_value / 2)) / (delta_price)\n    \n    # return answer\n    return convexity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -4.072
        }
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_domestic_return = 0.25\n    benchmark_domestic_return = 0.15\n    portfolio_bond_return = 0.09\n    benchmark_bond_return = 0.05\n    portfolio_international_return = 0.15\n    benchmark_international_return = 0.18\n    portfolio_domestic_weight = 0.5\n    benchmark_domestic_weight = 0.35\n    portfolio_bond_weight = 0.3\n    benchmark_bond_weight = 0.35\n    portfolio_international_weight = 0.2\n    benchmark_international_weight = 0.3\n    \n    # Calculate excess return for each portfolio\n    portfolio_domestic_excess_return = portfolio_domestic_return - benchmark_domestic_return\n    portfolio_bond_excess_return = portfolio_bond_return - benchmark_bond_return\n    portfolio_international_excess_return = portfolio_international_return - benchmark_international_return\n    \n    # Calculate value added for each portfolio\n    portfolio_domestic_value_added = portfolio_domestic_excess_return * portfolio_domestic_weight\n    portfolio_bond_value_added = portfolio_bond_excess_return * portfolio_bond_weight\n    portfolio_international_value_added = portfolio_international_excess_return * portfolio_international_weight\n    \n    # Calculate total value added\n    total_value_added = portfolio_domestic_value_added + portfolio_bond_value_added + portfolio_international_value_added\n    \n    # return answer\n    return round(total_value_added, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.06
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.9480000000000001,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123  # 3-month forward exchange rate in USD/CAD\n    points = 0.068  # 3-month forward points as a percentage\n    \n    # Do math calculation to get the answer\n    spot_rate = forward_rate / (1 + (points / 100))\n    \n    # return answer\n    return spot_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.012
        }
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "Here is a Python program to answer the question:\n```python\ndef solution():\n    # Define variables name and value\n    weighted_average_shares_outstanding_2011 = 121944\n    net_income_2011 = 142187\n    price_ffo_ratio_2011 = 11.5\n    \n    # Do math calculation to get the answer\n    ffo_2011 = (net_income_2011 + 2 * depreciation_amortization_2011) / weighted_average_shares_outstanding_2011  # Assuming Depreciation and amortization is 90,409\n    answer = price_ffo_ratio_2011 * ffo_2011\n    \n    # Define depreciation and amortization\n    depreciation_amortization_2011 = 90409\n    \n    # return answer\n    return answer\n```\nThis program calculates the funds from operations (FFO) for 2011 by assuming the Depreciation and amortization value is 90,409 from the given data, then it multiplies the price/FFO ratio by FFO to get the share price at the end of 2011. Please note that Depreciation and amortization value is assumed based on the data provided, it should be taken from the table."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_loans = 1600  # Total loans in the collection\n    delayed_secondary_loans = 200  # Delayed loans from the secondary quality\n    delayed_top_quality_loans = 48  # Delayed loans from the top quality\n    \n    # Do math calculation to get the answer\n    odds_secondary_loan = (delayed_secondary_loans / (delayed_secondary_loans + delayed_top_quality_loans))\n    \n    # return answer\n    return odds_secondary_loan\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.806
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 26.00  # Current price of Large Pharmaceuticals Corp. shares\n    vol = 0.015  # Daily volatility rate of the shares\n    delta = -0.5   # Delta of the at-the-money option\n    days = 1       # Number of days (in this case 1 day)\n    confidence = 0.95  # 95% confidence level\n    \n    # Do math calculation to get the answer\n    # 1-day VaR using the delta-normal method: VaR = Delta * √(days) * σ * zα\n    z_alpha = 1.645  # Z-score corresponding to 95% confidence (assuming normal distribution)\n    vaR = abs(delta) * days ** 0.5 * (vol * price) * z_alpha\n    \n    # return answer\n    return vaR\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.321
        }
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "To determine the answer, we need to identify the relevant cash flows from financing activities. Based on the provided table, the relevant items are:\n\n- Issuance of preferred stock: $45,000\n- Repurchase of common stock: ($20,000) - Costs are typically negative in accounting.\n- Purchase of machinery: ($20,000) - This is an investment/expenditure, not a financing activity.\n- Issuance of bonds: $40,000\n- Debt retired through issuance of common stock: ($45,000) - This is essentially an equity issuance, so it's not a financing activity.\n- Paid off long-term bank borrowings: ($10,000) - Costs the company funds, typically considered a financing expense.\n- Profit on sale of building was already accounted for as a sale of an asset, so it is not considered a financing activity.\n\nThe sum of these flows is $55,000 (45,000 + (-20,000) + 40,000 - 10,000). This represents the net cash outflow from financing activities.\n\nHere is the Python program to calculate the net cash outflow from financing activities:\n\n```python\ndef solution():\n    # Define variables name and value\n    issuance_preferred_stock = 45000\n    repurchase_common_stock = -20000\n    issuance_bonds = 40000\n    paid_off_borrowings = -10000\n    \n    # Do math calculation to get the answer\n    cash_flow_financing = issuance_preferred_stock + repurchase_common_stock + issuance_bonds + paid_off_borrowings\n    \n    # return answer\n    return cash_flow_financing\n```\n\nWhen executing `solution()`, the Python program will return the net cash outflow from financing activities, which is $55,000."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 55000.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    annual_payment = 3\n    spot_rate_1 = 0.036\n    spot_rate_2 = 0.037\n    spot_rate_3 = 0.038\n    \n    # Do math calculation to get the answer\n    present_value_1 = face_value * (1 + spot_rate_1) + coupon_rate * face_value / (1 + spot_rate_1)\n    present_value_2 = present_value_1 * (1 + spot_rate_2)\n    present_value_3 = present_value_2 * (1 + spot_rate_3)\n    \n    # return answer\n    return present_value_3\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1167.107
        }
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "Based on the given data, to calculate the payment given out during the year, we need to determine the benefit payments. We can do this by calculating the benefit obligation at the end of the year minus the benefit obligation at the beginning of the year.\n\nHere is the Python program to solve the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    benefit_obligation_beginning_year = 45000\n    benefit_obligation_end_year = 48395\n    \n    # Do math calculation to get the answer\n    benefit_payments = benefit_obligation_end_year - benefit_obligation_beginning_year\n    \n    # return answer\n    return benefit_payments\n```\n\nThe returned value of the program will be the benefit payments made by the plan during the year."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3395.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "```python\nimport numpy as np\nfrom scipy import stats\n\ndef solution():\n    # Define variables name and value\n    mu = 160000  # Average return\n    sigma = 30000  # Standard deviation\n    threshold = 100000  # Threshold value\n    \n    # Do math calculation to get the answer\n    # Using the z-score formula to calculate the percentage of return below $100,000\n    z_score = (threshold - mu) / sigma\n    percentage_below = stats.norm.cdf(z_score)\n    \n    # return answer\n    return 100 * percentage_below\n\nprint(solution())\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": "2.2750131948179195"
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    margin_requirement = 0.65  # 65% minimum margin requirement\n    leverage_ratio = 1 / margin_requirement\n    \n    # Do math calculation to get the answer\n    \n    # return answer\n```\n\nTo find the answer, we need to divide 1 by the margin requirement, which is 65% or 0.65. This will give us the maximum leverage ratio."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "None"
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_before = 5\n    \n    # Do math calculation to get the answer\n    Qbw = 30 - 2 * price_before\n    \n    # Revenue function: R = P * Q\n    R_before = price_before * Qbw\n    \n    # Find the price at which revenue is 0, which is the price after\n    Qnew = 30\n    Rnew = 0\n    Pnew = Rnew / Qnew\n    \n    # Calculate the arc elasticity of demand: ( (Q - Qnew) / Qnew ) / ( (P - Pnew) / Pnew )\n    # Since Pb = 5 and Pnew = 0, Pb/Pnew is undefined, which is not allowed in mathematical operations.\n    # Let's find the price after by trial and error\n    step = 0.01\n    Pb = Pnew\n    while True:\n        Qb = 30 - 2 * Pb\n        Rb = Pb * Qb\n        if abs(Rb - Rnew) < Rnew * step:\n            break\n        else:\n            Pb -= step\n    \n    # Now we have the new price\n    elasticity = ((30 - Qbw) / Qbw) / ((Pb - Pb+step) / (Pb+step))\n    answer = abs(elasticity)\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    flotation_cost = 0.05  # Floatation cost as a decimal\n    dividend_rate = 0.32   # Anticipated dividend per share\n    growth_rate = 0.10   # Dividend growth rate as a decimal\n    stock_price = 14.69   # Price of the new ordinary shares\n    \n    # Do math calculation to get the answer\n    dividend_per_share = dividend_rate / stock_price  # Dividend per share as a decimal\n    perpetuity_value = dividend_per_share / (growth_rate)\n    cost_of_equity = perpetuity_value / (1 - (1 + growth_rate))\n    \n    # Adjust for flotation cost\n    total_floating_cost = flotation_cost + 1\n    cost_of_equity_with_floating_cost = total_floating_cost - cost_of_equity\n    \n    # return answer\n    return cost_of_equity_with_floating_cost * 100  # Convert the result to percentage\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 322.835
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_years = 9 / 12  # converting months to years\n    management_fee = 0.32 / 100  # converting percentage to decimal\n    trading_fees = 0.20 / 100  # converting percentage to decimal\n    bid_offer_spread = 0.10 / 100  # converting percentage to decimal\n\n    # Do math calculation to get the answer\n    total_cost = management_fee + trading_fees * 2 + bid_offer_spread * 2\n    total_cost_per_year = total_cost / 2  # assuming equal fees on buy and sell\n    cost_per_year = total_cost_per_year / (1 - total_cost_per_year)  # calculating effective annual cost\n    annual_cost = cost_per_year * total_years  # calculating the total cost for 9 months\n    \n    # return answer\n    return round(annual_cost, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_investment_value = 602.5\n    high_water_mark = 540\n    management_fee_percentage = 0.002\n    hurdle_rate = 0.05\n\n    # Calculate the management fee\n    management_fee = current_investment_value * management_fee_percentage\n\n    # Calculate the incentive fee\n    incentive_fee = ((current_investment_value - high_water_mark) * 0.2) * (1 - hurdle_rate)\n\n    # Calculate the net return\n    net_return = (current_investment_value - (management_fee + incentive_fee)) / current_investment_value\n\n    # Return the answer\n    return net_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.978
        }
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    shares_common_stock = 1000000\n    net_income = 1500000\n    par_value_bonds = 10000000\n    coupon_rate_bonds = 0.04\n    par_value_preferred_stock = 2000000\n    dividend_rate_preferred_stock = 0.07\n    tax_rate = 0.30\n    total_shares_in_conversion = 300000\n    \n    # Calculate the interest expense on bonds\n    interest_expense_bonds = par_value_bonds * coupon_rate_bonds\n    \n    # Calculate the dividends on preferred stock before taxes\n    dividends_preferred_stock = par_value_preferred_stock * dividend_rate_preferred_stock\n    \n    # Calculate the dividends on preferred stock (taxes)\n    dividends_preferred_stock_net = dividends_preferred_stock * (1 - tax_rate)\n    \n    # Calculate the net income after deductions\n    net_income_deductions = net_income - interest_expense_bonds - dividends_preferred_stock_net\n    \n    # Calculate the total common shares outstanding plus the possible shares\n    total_shares_outstanding = shares_common_stock + total_shares_in_conversion\n    \n    # Calculate diluted earnings per share\n    diluted_eps = net_income_deductions / total_shares_outstanding\n    \n    # return answer\n    return diluted_eps\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.771
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "Here is the Python program to solve the given problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    investment_return = 15500  # $150% means 15.5%, so 15.5% of 10000 is 15500\n    cash_dividend = 2500\n    selling_price = 24\n    \n    # Do math calculation to get the answer\n    total_value = investment_return + cash_dividend  # Total value of the investment after a year\n    capitalInvested = total_value / 15.5  # Total value divided by the return to get the initial investment\n    cost_per_share = capitalInvested / 10000  # Initial investment divided by number of stocks\n    \n    # Return answer\n    return cost_per_share\n```\n\nNote: The calculation here is done assuming the dividend is not paid in the beginning but distributated along with the selling price, which might not always be the case in the real scenario."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.116
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    init_price = 865.0  # initial futures price\n    short_term_price = 877.0  # short-term futures price\n    long_term_price = 883.0  # long-term futures price\n    annual_interest_rate = 0.60 / 100  # convert to decimal\n    compounded_interest_days = 91  # 3 months worth of days\n    interest_rate_days = 365  # days in a year\n    \n    # Do math calculation to get the interest\n    interest = (init_price - long_term_price + short_term_price) / 2 * compounded_interest_days / interest_rate_days * annual_interest_rate\n    \n    # Do math calculation to get the answer\n    profit_loss = (init_price - long_term_price + short_term_price) / init_price * 100\n    total_return = profit_loss + interest\n    \n    # return answer\n    return total_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 99.949
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cap_rate_start = 0.055  # Initial capitalization rate\n    cap_rate_end = 0.06  # Ending capitalization rate\n    discount_rate = 0.0725  # Discount rate\n    \n    # Do math calculation to get the answer\n    growth_rate = (Math.pow(cap_rate_end, 1 / (discount_rate - cap_rate_start)) - 1) * 100\n    \n    # return answer\n    return growth_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "```python\ndef solution():\n    # Define variables names and values\n    total_productive_capacity = 950000  # Total productive capacity\n    production_in_fy2015 = 150000     # Production in FY2015\n    units_produced_per_year = 100000   # Expected production for each year\n    total_expected_production = production_in_fy2015 + (8 * units_produced_per_year)  # Total expected production\n    \n    # Calculate units used for the first year\n    units_used_in_first_year = production_in_fy2015\n    \n    # Calculate the cost of the asset\n    cost = 5000000\n    \n    # Calculate the depreciation rate\n    depreciation_rate = (cost - 500000) / total_expected_production\n    \n    # Calculate the depreciation expense for the first year\n    depreciation_expense = depreciation_rate * units_used_in_first_year\n    \n    # return answer\n    return depreciation_expense\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 710526.316
        }
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "Here's the Python program to calculate the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple:\n```python\ndef solution():\n    # Define variables from the income statement\n    net_operating_income = 222  # in millions\n    ffo_multiple = 13\n    \n    # Calculate the Funds From Operations (FFO) \n    # This is a simplified formula for FFO: FFO = Net Operating Income + Depreciation and Amortization\n    ffo = net_operating_income + 45  # in millions\n    \n    # Do math calculation to get the answer\n    share_price = ffo_multiple * ffo\n    \n    # return answer\n    return share_price\n```\nIn this program, the FFO is calculated as Net Operating Income plus Depreciation and Amortization. Then, the share price is calculated by multiplying the FFO by the Price / FFO multiple."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3471.0
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 40\n    average_cost = 70\n    elasticity_of_demand = 1.5\n    \n    # Do math calculation to get the answer\n    # In monopoly, the price elasticity of demand (ED) is used to determine the optimal price. \n    # When ED < -1, the monopolist sets a higher price than marginal cost. \n    # In this case, since ED = 1.5 > 1, the monopolist will look for a price higher than marginal cost. \n    # The new price (P) is given by the formula: P = 2 * MC / (1 - 1/Elasticity)\n    new_price = 2 * marginal_cost / (1 - 1 / elasticity_of_demand)\n    \n    # return answer\n    return new_price\n```\n\nNote: This program assumes that the given elasticity of demand is constant and perfectly inelastic. In reality, the elasticity of demand may vary with different prices."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 240.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    lpr_6_month = 0.01  # present 6-month LPR in decimal\n    lpr_bps = lpr_6_month * 100  # convert to basis points\n    spread = 80  # spread in basis points\n    discount_rate = (lpr_bps + spread) / 2  # discount rate for 6/12 periods\n    day_count = 30  # day count standard (days in 6-month period)\n    \n    # Do math calculation to get the answer\n    discount_factor = 1 / (1 + (discount_rate / 100) / (year / 2)) ** (year)\n    price_100 = 97 / 100  # price per unit of face value\n    discount_price_100 = 100 * discount_factor  # discount price per unit of face value\n    discount_price = round((100-price_100) / price_100 * 100)  # discount margin in basis points\n    \n    # return answer\n    return discount_price\n\n# test the function\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    intercept = 0.0477\n    underwriter_rank = 1  # Coefficients are given as bj, so I assume bj is directly equal to underwriter rank\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40  # in millions\n    fraction_retained = 0.70\n    \n    # Do math calculation to get the answer\n    initial_return = intercept + (underwriter_rank * 0.0150) + (pre_offer_price_adjustment * 0.4350) + (offer_size * -0.0009) + (fraction_retained * 0.0500)\n    \n    # Ensure the return is within the bounds of a decimal return (i.e., a percentage between 0 and 1)\n    initial_return = max(0, min(initial_return, 1))\n    \n    # Return the answer\n    return initial_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.079
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_management_fee = 0.0040  # 0.40%\n    trading_commission = 0.0055  # 0.55%\n    bid_offer_spread = 0.0020  # 0.20%\n    investment_term = 9  # months\n    months_in_year = 12\n    \n    # Do math calculation to get the answer\n    total_management_fee = (annual_management_fee / 12) * investment_term  # Monthly management fee\n    total_trading_commission = 2 * trading_commission * investment_term  # Total trading commissions (2 for buying and selling)\n    total_bid_offer_spread = 2 * bid_offer_spread * investment_term  # Total bid-offer spread (2 for buying and selling)\n    total_cost = total_management_fee + total_trading_commission + total_bid_offer_spread\n    \n    # return answer\n    return round(total_cost, 2)  # Return the total cost rounded to 2 decimal places\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.14
        }
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rates_of_return = [0.14, -0.10, -0.02]\n    \n    # Calculate the holding period return\n    holding_period_return = ((1 + rates_of_return[0]) * (1 + rates_of_return[1]) * (1 + rates_of_return[2]) - 1)\n    \n    # return answer\n    return holding_period_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.005
        }
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "To calculate the Gross Domestic Product (GDP) using the given data, we can use the formula:\n\nGDP = Consumption + Investment + Government Spending + (Imports - Exports)\n\nor\n\nGDP = GDP (alternative formula) = Capital Consumption Allowance + Consumption + Government spending + Gross Private Domestic Investment + Exports - Imports\n\nLet's use the second formula, as the first one is not directly mentioned in the context of the provided data. Since we are given the amounts in trillions of dollars, we'll perform the calculations accordingly.\n\n```python\ndef solution():\n    # Define variables and values\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    gross_private_domestic_investment = 6.0\n    exports = 1.8\n    imports = 2.2\n\n    # Do math calculation to get the answer\n    gdp = capital_consumption_allowance + consumption + government_spending + gross_private_domestic_investment + exports - imports\n\n    # Convert to trillions if not already\n    # Note: Since the values are already in trillions, no conversion is required in this case\n\n    # return answer\n    return gdp\n```\nNow we can run this function to get the Gross Domestic Product for country B in 2015 according to the provided data."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 31.7
        }
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "To solve this problem, we will use the formula for the standard deviation of a two-asset portfolio, which is the square root of the sum of the squared product of each asset's standard deviation, correlation coefficient, and portfolio weight, plus the squared product of the squared standard deviation of each asset and the portfolio weight, minus the product of the correlation coefficient and the product of each asset's standard deviation and portfolio weight. Here is the Python code:\n\n```python\ndef solution():\n    # Define variables name and value\n    stock1_return_std_deviation = 0.12\n    stock2_return_std_deviation = 0.25\n    stock1_portfolio_weight = 0.30\n    stock2_portfolio_weight = 0.70\n    correlation = 0.20\n    \n    # Do math calculation to get the answer\n    variance = (stock1_return_std_deviation ** 2) * (stock1_portfolio_weight ** 2) + (stock2_return_std_deviation ** 2) * (stock2_portfolio_weight ** 2) + 2 * stock1_return_std_deviation * stock2_return_std_deviation * stock1_portfolio_weight * stock2_portfolio_weight * correlation\n    \n    # Calculate the standard deviation\n    std_deviation = variance ** 0.5\n    \n    # return answer\n    return std_deviation\n```\n\nThe output of this program will be the standard deviation of the returns from the portfolio."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.186
        }
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    normalized_income = 89000000  # Normalized income to the company\n    required_return_on_intangibles = 0.25  # Required return on intangible assets\n    future_growth_rate = 0.07  # Future growth rate\n    working_capital_balance = 22000000  # Working capital balance\n    fixed_assets_value = 57000000  # Fair value of fixed assets\n    \n    # Do math calculation to get the answer\n    estimated_income_before_intangibles = (normalized_income - working_capital_balance * (0.06)) - (fixed_assets_value * 0.09)\n    estimated_value_of_intangibles = (estimated_income_before_intangibles - (normalized_income - estimated_income_before_intangibles)) / (required_return_on_intangibles - future_growth_rate)\n    \n    # return answer\n    return estimated_value_of_intangibles\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 422777777.778
        }
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_sales_in_millions = 40\n    cost_of_goods_sold_in_millions = 30\n    accounts_receivable_in_millions = 3\n    inventory_beginning_in_millions = 1.5\n    inventory_ending_in_millions = 2\n    accounts_payable_in_millions = 4\n    \n    # Calculate days in sales outstanding (DIO)\n    days_in_sales_outstanding = accounts_receivable_in_millions * 365 / credit_sales_in_millions\n    \n    # Calculate days inventory outstanding (DIO)\n    days_inventory_outstanding = (inventory_beginning_in_millions + inventory_ending_in_millions) / 2 * 365 / credit_sales_in_millions\n    \n    # Calculate days sales outstanding (DSO) + DIO - DPO (Days Payable Outstanding)\n    days_payable_outstanding = accounts_payable_in_millions * 365 / credit_sales_in_millions\n    \n    # Calculate cash conversion cycle (net operating cycle)\n    cash_conversion_cycle = days_in_sales_outstanding + days_inventory_outstanding - days_payable_outstanding\n    \n    # return answer\n    return round(cash_conversion_cycle, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6.84
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment = 5500000  # $5 million in research + $3 million in software creation\n    salvage_value = 10000  # $10,000 salvage value\n    years_useful_life = 20  # years of useful life of the software copyright\n\n    # Do math calculation to get the answer\n    book_value = investment - ((investment - salvage_value) * (1 + 0.2))  # Using the \"units-of-production\" method assuming 20% annual usage\n\n    # return answer\n    return book_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -1088000.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "<|python_tag|>def solution():\n    # Define the discrete uniform distribution as a list of outcomes\n    outcomes = [7, 8, 9, 10]\n    \n    # Calculate the mean of the distribution\n    mean = sum(outcomes) / len(outcomes)\n    \n    # Calculate the variance of the distribution\n    variance = sum((x - mean)**2 for x in outcomes) / len(outcomes)\n    \n    # return answer\n    return variance"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenue = 600000  # Sales in 2017\n    avg_account_receivable = 50000  # Average accounts receivable in 2017\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    answer = 365 / receivables_turnover\n    \n    # Return answer\n    return round(answer, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 30.42
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration = 11.470  # in years\n    investment_duration = 8  # in years\n\n    # Do math calculation to get the answer\n    duration_gap = abs(modified_duration - investment_duration)\n\n    # return answer\n    return duration_gap\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.47
        }
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "Here is the Python program to calculate the overall return for the hedge position of Platte River Foods:\n\n```python\ndef solution():\n    # Define variables\n    contract_price = 1000000  # Contract Price of $1,000,000\n    long_term_price_increase = 4  # Price Return of 4%\n    roll_return = 1.50 / 100  # Roll Return of 1.5% converted to decimal\n    collateral_required = 0.20  # Collateral Required of 20%\n    free_rate = 0.01  # Free Rate of 1% converted to decimal\n\n    # Calculate the amount received from client and amount returned to client for simpler calculation\n    amount_received = contract_price * (1 + long_term_price_increase / 100)\n    amount_returned = contract_price * (1 + roll_return)\n\n    # Calculate the return from interest rate on collateral\n    collateral_return = contract_price * (collateral_required / 100) * free_rate\n\n    # Calculate the overall return for the hedge position\n    overall_return = (amount_received - amount_returned + collateral_return) / contract_price\n\n    # Return answer\n    return overall_return\n```\n\nThe value for `contract_price` is assumed to be $1,000,000 as there is no direct value specified in the table."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.025
        }
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_service_costs = 320\n    employer_contributions = 1200\n    actuarial_loss = 350\n    past_service_costs = 150\n    discount_rate_on_plan_liabilities = 0.075 + 1 # Convert percentage to decimal\n    expected_rate_of_return_on_plan_assets = 0.082 # Convert percentage to decimal\n\n    # Do math calculation to get the answer\n    # Non-recuring pension expense = Current service costs\n    non_recurring_pension_expense = current_service_costs\n    # Non-recuring pension expense = Employer contributions\n    total_recruing_pension_expense = employer_contributions\n    # Total benefit obligation at the begining of the year = benefit_obligation_at_begining\n    # Total benefit obligation at the end of the year = benefit_obligation_at_end\n    # Since there are no write-offs of past service expenses or actuarial losses, \n    # The deferred benefit obligation = total benefit obligation at the begining of the year\n    # The ending benefit obligation = total benefit obligation at the end of the year\n    # We calculate the pension expense using the reintemed part of GAPP\n    serient_pension_expense = employer_contributions + current_service_costs - (  (benefit_obligation_at_end / 1 + discount_rate_on_plan_liabilities) - (benefit_obligation_at_begining_of_year / 1 + discount_rate_on_plan_liabilities) )\n    # The answer is \n    answer =  serial_pension_expense\n\n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_revenue_200_units = 500000  # in CHF\n    total_revenue_250_units = 600000  # in CHF\n    units_sold_difference = 250 - 200  # 50 units\n    revenue_per_unit_200_units = total_revenue_200_units / 200  # revenue per unit at 200 units\n    revenue_per_unit_250_units = total_revenue_250_units / 250  # revenue per unit at 250 units\n    marginal_revenue_per_unit = revenue_per_unit_250_units - revenue_per_unit_200_units\n    \n    # Return answer \n    return marginal_revenue_per_unit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -100.0
        }
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    num_shares = 200000\n    price_per_share = 90\n    six_month_forward_rate = -27.0\n    \n    # Calculate the initial value of the hedge position (in euros)\n    initial_hedge_value = num_shares * price_per_share\n    \n    # Convert the initial hedge value to USD using the spot rate at the start\n    initial_hedge_value_usd = initial_hedge_value / 1.3983\n    \n    # Calculate the mark-to-market value of the hedged position (in USD)\n    mark_to_market_value = initial_hedge_value_usd + (initial_hedge_value_usd * six_month_forward_rate / 100)\n    \n    # Add the euroein investment to the hedged position\n    euroein_investment = num_shares * price_per_share\n    \n    # Convert the euroein investment to USD using the spot rate at the start\n    euroein_investment_usd = euroein_investment / 1.3983\n    \n    # Mark-to-market value of the hedged position (in USD)\n    final_mark_to_market_value = mark_to_market_value + euroein_investment_usd\n    \n    # Return the final answer\n    return round(final_mark_to_market_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 22269899.16
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rates = {\n        '1 year': 0.02,\n        '2 years': 0.025,\n        '3 years': 0.035,\n        '4 years': 0.055\n    }\n\n    # Do math calculation to get the answer\n    standard_rate = [rate for rate in rates.values()]\n    if 2 in standard_rate:\n        rate_1_year = 1 + rates['1 year']\n        rate_2_years = rates['2 years']\n        rate_1_plus_4_years = 1 + rates['4 years']\n        rate_2_plus_1_year = (rate_1_year) * (1 + rates['4 years'])\n        answer = (rate_2_years / (rate_2_plus_1_year ** 1)) * (1 + (1/ rate_1_plus_4_years))\n        \n    else:\n        answer = 0.0\n\n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1 = 0.08  # 8.0%\n    spot_rate_2 = 0.09  # 9.0%\n    spot_rate_3 = 0.095  # 9.5%\n    time_to_maturity = 3  # 3 years\n    coupon_rate = 0.10  # 10%\n    annual_payment = 0\n    \n    # Do math calculation to get the present value of each payment\n    present_value = 0\n    for i in range(1, time_to_maturity + 1):\n        annual_payment = 100000 * coupon_rate\n        if i == 1:\n            present_value += annual_payment / (1 + spot_rate_1)**1\n        elif i == 2:\n            present_value += annual_payment / (1 + spot_rate_2)**2\n        else:\n            present_value += annual_payment / (1 + spot_rate_3)**3\n    \n    # Calculate the cost of the bond using the present value\n    total_cost = present_value / (1 + spot_rate_3)**time_to_maturity\n    \n    # return answer\n    return total_cost * 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1926420.445
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 20  # in dollars\n    fixed_costs = 500000  # in dollars\n    production_levels = [100000, 200000, 300000]  # for simplicity, we will consider three production levels\n    \n    # Do math calculation to get the answer\n    dol_values = {}\n    \n    for production in production_levels:\n        variable_cost = production * unit_contribution_margin\n        contribution_margin = unit_contribution_margin * production\n        dol = (fixed_costs / contribution_margin)\n        dol_values[production] = dol\n        \n    # Find the lowest DOL value and its corresponding production level\n    min_dol = min(dol_values.values())\n    min_production = [production for production, dol in dol_values.items() if dol == min_dol][0]\n    \n    # return answer\n    return min_production\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 300000.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "Here is the Python program to calculate the ending inventory balance for Corporation Z in 2014:\n\n```python\ndef solution():\n    # Define variables name and value\n    total_inventory_2013 = 2000  # Total units of inventory at the beginning of 2013\n    units_sold_2013 = 1500  # Units sold in 2013\n    cost_per_unit_2013 = 50  # Cost per unit of inventory acquired in 2013\n    cost_per_unit_2014 = 60  # Cost per unit of inventory acquired in 2014\n    \n    # Calculate inventory remaining at the end of 2013\n    inventory_at_end_2013 = total_inventory_2013 - units_sold_2013\n    \n    # Calculate cost and revenue of sold items in 2014\n    units_sold_2014 = 500  # Units sold in 2014\n    revenue_per_unit_2014 = 75  # Revenue per unit sold in 2014\n\n    cost_of_goods_sold_2014 = (units_sold_2013 + units_sold_2014) * cost_per_unit_2013\n    revenue_2014 = units_sold_2014 * revenue_per_unit_2014\n    \n    # Calculate the number of items that need to be purchased in 2014\n    new_units_purchased_2014 = 1000  # Units purchased in 2014\n\n    cost_of_inside_2014 = (units_sold_2013 + new_units_purchased_2014) * cost_per_unit_2013 + \\\n                         (units_sold_2014) * revenue_per_unit_2014\n    \n    # Calculate total cost of inventory at the end of 2014\n    total_inventory_2014 = inventory_at_end_2013 + new_units_purchased_2014\n\n    for x in range(total_inventory_2013 + units_sold_2014):\n        if x <= units_sold_2013:\n            cost_of_inside_2014 += cost_per_unit_2013\n        else:\n            cost_of_inside_2014 += cost_per_unit_2014\n    \n    # Return the answer\n    return total_inventory_2014\n```\n\nThe final answer is calculated by ensuring that all items from 2013 are first moved into the cost of goods sold for 2014. If there are additional units purchased in 2014, their cost is added and included into the calculation of the total cost of goods available for"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1500.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dirty_price = 104.17  # dirty price of the 10-year Treasury note\n    days_post_reset = 30  # days since the last coupon payment\n    days_to maturity = 90  # days until the futures contract terminates\n    quoted_futures_price = 129  # quoted price of the futures contract\n    risk_free_rate = 0.0165  # yearly risk-free rate for three months\n    conversion_factor = 0.7025  # conversion factor\n\n    # Calculate days until the next coupon payment\n    days_until_next_coupon = (10 * 365) - days_post_reset\n\n    # Convert risk-free rate to a daily rate\n    daily_risk_free_rate = (1 + risk_free_rate) ** (1/252) - 1\n\n    # Calculate the yield on the 10-year Treasury note\n    yield_on_treasury = (dirty_price / (dirty_price + (dirty_price * (0.02/2) * days_until_next_coupon / 365))) - 1\n\n    # Calculate the clean price of the Treasury note\n    clean_price = dirty_price / (1 + (yield_on_treasury * 2) + ((dirty_price * (0.02/2) * days_until_next_coupon / 365) / (1 + (yield_on_treasury * 2))))\n\n    # Calculate the equilibrium futures contract price\n    equilibrium_futures_price = (clean_price * conversion_factor * (1 + (daily_risk_free_rate * days_to_maturity)) ** days_to_maturity) / (1 + risk_free_rate)\n\n    # Calculate the answer\n    answer = quoted_futures_price - equilibrium_futures_price\n\n    # return answer\n    return round(answer, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    modified_duration_1 = 7.9\n    modified_duration_2 = 8.5\n    modified_duration_3 = 6.3\n    modified_duration_4 = 10.2\n    \n    # Calculate the total modified duration\n    total_duration = modified_duration_1 + modified_duration_2 + modified_duration_3 + modified_duration_4\n    \n    # Calculate the average duration\n    avg_duration = total_duration / 4\n    \n    # Calculate the price value of a basis point\n    price_value_bps = (100/avg_duration)/10000  # Assuming bond amount is $25million\n    \n    # return answer\n    return round(price_value_bps, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    bond_face_value = 2000000  # face value of the bond\n    current_price = 0.75 * bond_face_value  # current price of the bond\n    recovery_rate = 0  # recovery rate of the bond in the event of a default\n    risk_free_rate = 0.03  # continuously-compounded risk-free rate (yearly)\n    time_to_maturity = 1  # time to maturity of the bond in years\n\n    # Do math calculation to get the answer\n    Up = 1 + risk_free_rate\n    D = 1 - recovery_rate\n    SSRs = (Up + D) / (Up - D)\n    NSSR = math.log(Up) / math.log(SSRs)\n    risk_neutral_prob_up = math.exp(-NSSR * time_to_maturity)\n    risk_neutral_prob_down = 1 - risk_neutral_prob_up\n    p = (current_price - recovery_rate * bond_face_value) / (bond_face_value * (1 - risk_free_rate))\n    Nu1 = (risk_free_rate - (risk_neutral_prob_up * math.log(risk_neutral_prob_up) - (1-risk_neutral_prob_up) * math.log(1-risk_neutral_prob_up))) / (NSSR - math.log(SSRs))\n    PB = p/(1+Nu1)\n    answer = 1 - math.exp(-p / (1 + Nu1) * ((Nu1 / NSSR) * (risk_neutral_prob_up / (1-risk_neutral_prob_up)))\n\n    # return answer\n    return round(answer, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "Here is the Python program to answer the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding = 10000000  # Initial number of shares outstanding\n    earnings_per_share = 2  # Earnings per share\n    P_E = 20  # Price to Earnings ratio\n    book_value_per_share = 30  # Book value per share\n\n    # Calculate the market price per share\n    market_price_per_share = P_E * earnings_per_share\n\n    # Calculate the cost of buying back 1 million shares\n    cost_of_buyback = 1 * market_price_per_share\n\n    # Calculate the new number of shares outstanding after buyback\n    new_shares_outstanding = shares_outstanding - 1000000\n\n    # Calculate the new book value\n    new_book_value = market_price_per_share * new_shares_outstanding + (shares_outstanding - new_shares_outstanding) * book_value_per_share - cost_of_buyback\n\n    # Calculate the new book value per share\n    new_book_value_per_share = new_book_value / new_shares_outstanding\n\n    # return answer\n    return new_book_value_per_share\n```\n\nThis program calculates the new book value per share after the corporation buys back 1 million shares at the current market rate, based on the given data."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 43.333
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 5000000\n    years = 10\n    yearly_interest_rate = 0.058  # Convert 5.8% to decimal\n    months = years * 12  # Convert years to months\n\n    # Calculate monthly interest rate\n    monthly_interest_rate = yearly_interest_rate / 12\n\n    # Calculate monthly payment\n    a = 1 + monthly_interest_rate\n    b = monthly_interest_rate * (1 - a ** (-months))\n    monthly_payment = principal * a * monthly_interest_rate / b\n\n    # Return answer\n    return round(monthly_payment, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 11436265.62
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mrr_march = 0.0155  # Three-month MRR for 31 March\n    mrr_june = 0.0135  # Three-month MRR for 30 June\n    add_percentage = 0.0065  # Add 65 basis points as a decimal\n    \n    # Do math calculation to get the answer\n    coupon_rate = mrr_june + add_percentage\n    \n    # return answer\n    return coupon_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.02
        }
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_1 = 0.3  # Security 1 weight\n    weight_2 = 0.7  # Security 2 weight\n    std_dev_1 = 0.2  # Standard deviation of Security 1\n    std_dev_2 = 0.12  # Standard deviation of Security 2\n    correlation = 0.4  # Correlation between the two securities\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = (weight_1**2 * std_dev_1**2) + (weight_2**2 * std_dev_2**2) + 2 * weight_1 * weight_2 * std_dev_1 * std_dev_2 * correlation\n    portfolio_std_dev = (portfolio_std_dev)**0.5\n    \n    # return answer\n    return round(portfolio_std_dev, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.12
        }
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "To answer this question, we need to use the formulas for valuing an equity swap and solve for the equity index level at which the swap value is zero.\n\nLet's start by defining the variables and the present value factors from the table:\n\n```python\ndef solution():\n    # Define variables name and value\n    annualized_fixed_interest = 0.03  # 3% annualized fixed interest\n    nominal_amount = 100000000  # $100 million nominal amount\n    present_spot_rates = {\n        0.25: 0.997506,\n        0.5: 0.992556,\n        0.75: 0.985222,\n        1: 0.975610  # Time to maturity of 1 year\n    }\n```\n\nNext, we can set up the equations to solve. The value of an equity swap is zero when the present value of the fixed leg equals the present value of the floating leg. In this case, the floating leg is a series of quarterly cash flows based on the change in the equity index level. We can use the present value factors to calculate the present value of the fixed leg and the floating leg.\n\nLet's assume the equity index level at the time of the swap is I, and the change in the equity index level at each reset is ΔI. The present value of the fixed leg is simply the nominal amount times the present spot rate for 1 year:\n\n```python\n# Present value of the fixed leg\nfixed_leg = nominal_amount * present_spot_rates[1]\n```\n\nThe present value of the floating leg is a bit more complicated. We need to calculate the present values of the quarterly cash flows based on the change in the equity index level. Let's assume the equity index level at each reset is I + kΔI, where k is the number of times the equity index has reset (i.e., 3 for a 1-year swap with quarterly resets).\n\nWe can use the present value of an annuity formula to calculate the present value of the floating leg. The present value of the floating leg is the nominal amount times the sum of the present value factors from 1 to 4:\n\n```python\n# Present value factors for 0.25, 0.5, 0.75, and 1 year\nfactor_3rd_month = present_spot_rates[0.25]\nfactor_6th_month = present_spot_rates[0.5]\nfactor_9th_month = present"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "None"
        }
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    market_value_debt = 10000000\n    market_capitalization = 45000000\n    cash_and_short_term_investments = 2500000\n    ebitda = 15000000\n    marginal_tax_rate = 0.40  # Convert tax rate from percentage to decimal\n    \n    # Adjust market cap for debt and cash to get enterprise value\n    enterprise_value = market_capitalization + market_value_debt - cash_and_short_term_investments\n    \n    # Calculate EV/EBITDA multiple\n    ev_ebitda_multiple = enterprise_value / ebitda\n    \n    # return answer\n    return ev_ebitda_multiple\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 3.5
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 5000  # Value of the money in the future (PV)\n    discount_rate = 0.05  # Discount rate (5%)\n    years = 3  # Time period (3 years)\n    monthly_rate = discount_rate / 12\n    \n    # Do math calculation to get the answer\n    n = years * 12\n    present_value = future_value / (1 + monthly_rate) ** n\n    \n    # return answer\n    return round(present_value, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 4304.88
        }
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_eur = 5000000  # Original amount of EUR\n    current_eur = 5000000  # Current amount of EUR\n    three_months_eur = current_eur  # USD to be received in 3 months\n    forward_rate_one_month = 1.0344  # One month forward rate\n    forward_rate_three_months = 1.0785  # Three months forward rate\n    \n    # Calculate the forward currency exchange rate using the given information that half a year ago, GBP/EUR 0.7400 was used\n    one_month_forward_three_months_back = 1 / 0.7400\n    \n    # Calculate the forward exchange rate for six months maturity (9 months from the current time)\n    six_months_forward_rate = forward_rate_three_months * forward_rate_one_month\n\n    # Calculate the three months forward contract value using the current forward rate \n    current_forward_contract_value = three_months_eur * (one_month_forward_three_months_back) * forward_rate_three_months\n\n    # Calculate the nine months USD - to - GBP forward contract value  using six months forward rate\n    nine_months_forward_contract_value = original_eur * (one_month_forward_three_months_back) * six_months_forward_rate\n    \n    # Calculate the mark-to-market gain /loss of the EUR position\n    mark_to_market_gain_loss = (current_forward_contract_value - nine_months_forward_contract_value)\n    \n    return mark_to_market_gain_loss\n\n# Call the function and print the answer\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -250678.378
        }
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "Based on the provided table, to calculate the share value of REIT B using Valuation Method 4, we will need the following variables:\n\n- Expected annual dividend next year\n- Dividend growth rate in years 2 and 3\n- Dividend growth rate (after year 3 into perpetuity)\n- Assumed cap rate\n- Property subsector average P/FFO multiple\n\nHere's a Python program to answer the question:\n\n```python\ndef solution():\n    # Define variables name and value\n    reit_b_dividend_next_year = 2.25\n    reit_b_dividend_growth_rate_years_2_3 = 0.05\n    reit_b_dividend_growth_rate_perpetuity = 0.045\n    reit_b_cap_rate = 0.0625\n    reit_b_pffo_multiple = 13.5\n    \n    # Discounted cash flow formula parameters\n    dividend = reit_b_dividend_next_year\n    growth_rate = reit_b_dividend_growth_rate_perpetuity\n    perpetual_growth_rate = reit_b_dividend_growth_rate_perpetuity\n    capitalization_rate = reit_b_cap_rate\n\n    # Do math calculation to get the share value\n    # Calculate the FFO per share\n    ffo_per_share = 290612 / 67900\n    \n    # Convert P/FFO multiple to P/Share multiple\n    pffo_multiple = reit_b_pffo_multiple\n    shares_outstanding = 67900\n    p_share_multiple = pffo_multiple * ffo_per_share\n    \n    # Calculate present value of perpetual growth dividend\n    present_value = dividend / (capitalization_rate - graduate_growth_rate_perpetuity)\n    \n    # Share value formula\n    share_value = (present_value * capitalization_rate * shares_outstanding) / ((14.4 / P_share_multiple))\n    # Assuming P/S ratio from chapter 1 is incorrect, use usual value average subsector, calculation using AR average period of F Region NCR usually = 14.4).\n    \n    # Calculate share value\n    answer = share_value / shares_outstanding\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    equity = 10000000\n    income = 750000\n    tax_rate = 0.25\n    dividends = 0\n    \n    # Calculate depreciation for Firm A\n    depreciation = 300000 / 3  # assuming straight-line depreciation over 3 years\n    \n    # Calculate net income for Firm B (same as Firm A's net income)\n    net_income_B = income\n    \n    # Calculate earnings before interest and taxes (EBIT) for Firm B\n    ebit = net_income_B + depreciation\n    \n    # Calculate tax expense for Firm B\n    tax_expense = ebit * tax_rate\n    \n    # Calculate net income for Firm B\n    net_income_B = ebit - tax_expense\n    \n    # Calculate return on equity (ROE) for Firm B\n    roe = (net_income_B // equity) * 100\n    \n    # return answer\n    return roe\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "To solve for the implied dividend yield of the stock, we can use the Black-Scholes model. Here is the Python program to calculate it:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S = 85  # Current stock price\n    K = 90   # Strike price\n    r = 0.05  # Risk-free interest rate\n    c = 10   # Cost of the call option\n    p = 15   # Cost of the put option\n\tT = 5  # Time to maturity in years (5 years)\n    \n    # Do math calculation to get the answer\n    sigma_squared = 0\n    d1 = None\n    d2 = None\n    d1 = (math.log(S/K) + (r + 0.5*(sigma_squared)*(T) ) / (sigma_squared * math.sqrt(T))\n    d2 = d1 - math.sqrt(T) * sigma_squared\n    sigma_squared = 2 * math.log((c + 0.01*S) / (S - c + 0.01*K)) / (T)\n    sigma = math.sqrt(sigma_squared)\n    q = r - math.sqrt(((sigma*sigma)/(r*(1-T*T))\n    \n\n    # return answer\n    return q\n```\nNote: The impledividend yield term q is calculated in the Black-Scholes model by solving for q in the following equation: \nsigma^2 = 2 * ln( (C + 0.01S) / (S - C + 0.01K) ) / T \nWhere sigma is the volatility of the stock, q is the Dividend yield and C is the value of the call, S is the stock price, K is the strike price, and T is the time to maturity."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    basis_point_change = 1\n    days_per_year = 365\n    initial_duration = 6.0\n    convexity = 55.0\n    \n    # Calculate the dollar price change of a bond for a 1 BP move\n    dollar_price_change_per_basis_point = (basis_point_change / (100 * days_per_year)) * convexity * (initial_duration)\n    \n    # return dollar price change\n    return dollar_price_change_per_basis_point\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.009
        }
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    coupon_rate = 0.05  # 5% coupon rate\n    years_left = 3  # years left until maturity\n    z_spread = 0.00234  # 234 basis points\n    spot_rates = {1: 0.0486, 2: 0.0495, 3: 0.0565}  # given spot rates\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(years_left):\n        time_to_maturity = i + 1\n        discount_rate = spot_rates[time_to_maturity]\n        present_value += 100000 * (coupon_rate - discount_rate + z_spread) / (1 + discount_rate)**time_to_maturity\n    present_value += 100000 / (1 + spot_rates[years_left])**years_left\n    \n    # return answer\n    return round(present_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 85060.89
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.65  # beta value of the stock\n    risk_free_rate = 0.03  # risk-free rate of return (in decimal form)\n    expected_market_return = 0.09  # expected market return (in decimal form)\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + (beta * (expected_market_return - risk_free_rate))\n    \n    # return answer\n    return expected_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.069
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ddm = 10.3829  # Roughly modified duration\n    conc = 141.217  # Roughly modified convexity\n    \n    # Constant rate (1%, or 0.01)\n    r = 0.01\n    \n    # Change in yield\n    delta_r = 0.005  # 50 basis points\n    \n    # Do math calculation to get the answer\n    d1 = ddm * delta_r\n    p01 = d1\n    d2 = 0.5 * conc * (delta_r ** 2)\n    p02 = 0.5 * p01 ** 2\n    answer = p01 + p02\n    \n    # Return the answer as a percentage\n    return (answer * 100)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 5.326
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outstanding_shares = 1200000\n    beta = 2.2\n    face_value_of_bonds = 10000000\n    years_until_maturity = 5\n    coupon_rate = 0.08\n    yield_rate = 0.1365\n    new_bond_issue = 2500000\n    new_share_price = 10\n    new_funding = 7500000\n    debt_to_equity_ratio = (face_value_of_bonds / (outstanding_shares * new_share_price))\n    \n    # Calculate the new bond allocation\n    if new_funding > new_bond_issue:\n        new_bond_allocation = new_bond_issue\n    else:\n        new_bond_allocation = new_funding\n    \n    # Calculate the old and new debt outstanding\n    old_debt_outstanding = face_value_of_bonds\n    new_debt_outstanding = old_debt_outstanding + (new_bond_allocation - new_bond_issue)\n    \n    # Calculate the new shares\n    shares = (new_funding - (new_debt_outstanding - old_debt_outstanding)) / new_share_price\n    \n    # Calculate the new debt-to-equity ratio\n    new_debt_to_equity_ratio = new_debt_outstanding / (shares * new_share_price)\n    \n    # Calculate the beta-adjusted cost of debt\n    market_rate = 0.1\n    risk_free_rate = 0.03\n    cost_of_debt = (market_rate * beta) - risk_free_rate + ((1 - 0.3) * yield_rate)\n    \n    # Calculate the cost of debt if the new bond issuance is over $2.5m\n    if new_bond_allocation > new_bond_issue:\n        cost_of_debt_new = market_rate * beta - risk_free_rate + ((1 - 0.3) * 0.16)\n    \n    # Calculate the weighted average cost of capital\n    wacc = ((new_debt_outstanding / (shares * new_share_price + new_debt_outstanding)) * cost_of_debt) + ((shares / (shares * new_share_price + new_debt_outstanding)) * (market_rate * beta - risk_free_rate * (1 - 0.3)))\n    \n    # If the new bond issuance is over $2.5m, use the new cost of debt\n    if new_bond_allocation"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "Here is the Python program to calculate the price of Bond D using the given spot rates:\n\n```python\ndef solution():\n    # Define variables name and value\n    time_to_maturity = 3  # years\n    coupon_rate = 8  # percentage\n    spot_rates = [0.07, 0.08, 0.09]  # 1-year, 2-year, 3-year spot rates\n    \n    # Initialize variables to calculate present value\n    present_value = 0\n    \n    # Calculate present value of coupon payments\n    for i in range(1, time_to_maturity):\n        present_value += (coupon_rate / 100) * (1 + spot_rates[i-1]) ** (time_to_maturity - i) ** -1\n    \n    # Calculate present value of face value\n    present_value += 100 * (1 + spot_rates[-1]) ** -1\n    \n    # return answer\n    return present_value\n```\n\nIn this program, we first initialize the present value to zero. We then iterate over the time-to-maturity, starting from 1 year. For each period, we add the present value of the coupon payment, which is the coupon rate multiplied by the present value of the corresponding spot rate. We use the formula `PV = C / (1 + r)^n` to calculate the present value, where `C` is the coupon payment, `r` is the spot rate, and `n` is the number of periods. After iterating over all the periods, we add the present value of the face value, which is the face value divided by the present value of the spot rate of the last period. The final result is the present value of the bond, which is the price of the bond."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 91.912
        }
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    acquisition_cost = 360  # In millions of yuan\n    net_asset_value = (80 + 90 + 130 + 770) / 2  # Average of net assets' fair value excluding licenses\n    \n    # Calculate the unrecognized licenses value\n    unrecognized_licenses_value = acquisition_cost - net_asset_value\n    \n    # Calculate the amortization expense\n    licenses_life expectancy = 5  # In years\n    annual_amortization = unrecognized_licenses_value / licenses_life_expectancy\n    \n    # Calculate the consolidated depreciation and amortization expense for 2019\n    # Assuming the 2019 figures mirror those of 2018\n    consolidated_depreciation_amortization_2019 = (106 + annual_amortization) * 2  # Multiply by 2 for the 50% stake\n    \n    # Return the answer\n    return consolidated_depreciation_amortization_2019\n\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "Based on the provided table and the problem statement, it seems that we need to interpolate the key rate '01 for a shift of 10 years. We can use linear interpolation between the values provided.\n\n```python\ndef solution():\n    # Define variables name and value\n    key_rate_2_year = 87.3212  # 2-year shift for 1bp\n    key_rate_10_year = 87.1454  # 10-year shift for 1bp\n    shift_2_year = 2\n    shift_10_year = 10\n    shift_target = 10\n    change restauve = 1  # assuming '01\n    \n    # Do math calculation to get the answer\n    # Calculate the change in key rate per year\n    delta_key_rate = (key_rate_10_year - key_rate_2_year) / (shift_10_year - shift_2_year)\n    \n    # Calculate the key rate for a 10-year shift with a change rate of 1bp\n    key_rate_target = key_rate_2_year + (delta_key_rate * (shift_target - shift_2_year + change restauve))\n    \n    # return answer\n    return key_rate_target\n```\n\nNote: I used the term `change restauve` but I believe it means `change rate` or just `1` in this context since you didn't specify what exactly it means. If it's something else, please let me know. \n\nHowever, I notice that there is a difference in value for a 30-year shift in the table, which is `87.3454` whereas for 10-year shift it's `87.1454`. Using the interpolation might not give the exact answer based on only the provided data points."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.14300000000000002,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p_bankruptcy = 0.2  # P(A) = 20% of high-risk bonds will go bankrupt\n    p_good = 0.7  # 70% of high-risk bonds are deemed \"good\" based on the prediction model\n    p_good_given_bankruptcy = 0.5  # 50% of bonds that went bankrupt are rated as \"good\"\n    \n    # Do math calculation to get the answer using Bayes' formula\n    # P(A | B) = P(B | A) * P(A) / P(B)\n    # P(B) = P(B) = P(B | A) * P(A) + P(B | ~A) * P(~A)\n    #       = 0.5 * 0.2 + (0.5) * (1 - 0.2)\n    #       = 0.1 + 0.4 = 0.5\n    p_bankruptcy_given_good = (p_good_given_bankruptcy * p_bankruptcy) / p_good\n    \n    # return answer\n    return p_bankruptcy_given_good\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.143
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 100000  # future amount needed in 1 year\n    rate = 2.50 / 100  # yearly rate as a decimal\n    periods = 52  # 52 weeks in a year\n\n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + rate) ** periods)\n\n    # return answer\n    return round(present_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 27692.3
        }
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ep_2017 = 1.03  # EPS in 2017\n    ep_2016 = 1.89  # Core EPS in 2016\n    growth_rate = 0.15  # Assuming a growth rate of 15%\n    \n    # Do math calculation to get the answer\n    ep_2018 = (1 + growth_rate) * ep_2017  # Calculate EPS for 2018 using the assumed growth rate\n    \n    # Calculate trailing P/E\n    pe = ep_2018 / ep_2016\n    \n    # return answer\n    return pe\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.627
        }
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_assets_2018 = 200  # assuming in millions, calculated from receivables and inventories\n    current_liabilities_2018 = 1600  # calculated from accounts payable and accrued taxes and expenses\n    long_term_debt_2018 = 1500  # in millions\n    depreciation_expense_2018 = 100  # in millions, assumed depreciation expense\n    interest_expense_2018 = 35  # in millions, interest expense at 30% corporate tax rate\n    earnings_before_interest_and_taxes_2018 = 1225  # in millions\n    taxes_2018 = 375  # in millions\n    \n    # Calculate cash from operations (from EBITDA to earnings before interest and taxes)\n    cash_from_operations = earnings_before_interest_and_taxes_2018 + depreciation_expense_2018 - interest_expense_2018 + taxes_2018\n    \n    # Calculate free cash flow to equity (FCFE)\n    FCFE = cash_from_operations + (current_assets_2018 - current_liabilities_2018) - (long_term_debt_2018)\n    \n    # return answer\n    return FCFE\n```\n\nNote: This Python program assumes that current assets, current liabilities, long-term debt, depreciation expense, interest expense, earnings before interest and taxes, and taxes are in millions. The FCFE is then calculated by adding cash flow from operations, adjusting for changes in working capital, and subtracting new investment in long-term debt.\n\nSince the values for Working Capital were not given, I assumed current assets to be equal to the sum of accounts receivable and inventories, and current liabilities to be the sum of accounts payable, accrued taxes and expenses."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -1235.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    human_capital = 1200000\n    financial_capital = 600000\n    target_equity_allocation = 0.3\n    stock_similarity = 0.25\n    \n    # Do math calculation to get the answer\n    total_capital = human_capital + financial_capital\n    human_equity_allocation = target_equity_allocation * human_capital\n    \n    # Calculate the proportion of financial capital that needs to be allocated to equity\n    financial_equity_ratio = (human_equity_allocation - (target_equity_allocation * human_capital)) / financial_capital\n    \n    # Now, calculate the financial capital equity allocation\n    financial_equity_allocation = financial_equity_ratio * financial_capital\n    \n    # Return new value\n    return round(financial_equity_allocation,2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Given values in $ thousands\n    sales_2014 = 2125\n    end_of_year_inventories_2014_lifo = 312\n    lifo_reserve_2014 = 82\n    net_profit_margin_2013 = 0.04\n    corporate_tax_rate = 0.30\n    \n    # Calculate lower of cost or market (LCM) for 2014 under LIFO\n    lcm_2014_lifo = end_of_year_inventories_2014_lifo\n    \n    # Calculate cost of goods sold under LIFO for 2014\n    cost_goods_sold_2014_lifo = sales_2014 - lcm_2014_lifo\n    \n    # Calculate LIFO reserve for 2013\n    lifo_reserve_2013 = 64\n    \n    # Calculate lower of cost or market (LCM) for 2013 under LIFO\n    lcm_2013_lifo = end_of_year_inventories_2013_lifo = 280\n    \n    # Calculate cost of goods sold under LIFO for 2013\n    cost_goods_sold_2013_lifo = sales_2013 - lcm_2013_lifo\n    \n    # Calculate actual cost of goods sold under LIFO for 2014 and 2013\n    # The difference between the consumed and accounted for values gives the difference in cost of goods sold\n   ogh_2014_fifo = (sales_2014 - lcm_2014_lifo) * (1 + (lifo_reserve_2014 / end_of_year_inventories_2014_lifo))\n    ogh_2013_fifo = (sales_2013 - lcm_2013_lifo) * (1 + (lifo_reserve_2013 / end_of_year_inventories_2013_lifo))\n    \n    # Calculate tax saving or expenses due to change in costing method from LIFO to FIFO\n    # This is the difference in cost of goods sold between FIFO and LIFO\n    tax_saving = (ogh_2014_fifo - ogh_2014_lifo) + (ogh_2013_fifo - ogh_2013_lifo)\n    \n    # Calculate net income with tax at 30%\n    tax = tax_saving * corporate_tax_rate\n    \n    # Calculate net income with 100% tax\n    \n    # Return the difference, which is the answer\n    return tax_s"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_1yr = 0.0102  # 1-year spot rate\n    spot_2yr = 0.0165  # 2-year spot rate\n    spot_3yr = 0.0215  # 3-year spot rate\n    \n    # Do math calculation to get the answer\n    # Using the 2-year spot rate to calculate the forward rate for 1-year in 2 years\n    forward_rate_2yr = spot_2yr - (spot_1yr * (1 + spot_2yr))\n    \n    # Use the 3-year spot rate and the forward rate for 1-year in 2 years to calculate the forward rate for 1-year in 3 years\n    forward_rate_3yr = spot_3yr - (spot_2yr * (1 + spot_3yr - forward_rate_2yr))\n    \n    # The 1-year implied forward rate two years in the future is the difference between the 3-year spot rate and the spot rate two years in the future\n    forward_rate_1yr_in_3yr = spot_3yr - ((spot_2yr * (1 + spot_1yr)) / (1 + forward_rate_2yr))\n    \n    # return answer\n    return round(forward_rate_1yr_in_3yr, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.005
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "```python\nimport math\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    s = 48.6  # current stock price\n    r = 0.003  # continuously compounded risk-free rate\n    v = 0.3  # volatility\n    x = 45  # strike price\n    t = 0.25  # time to expiration in years\n    d1 = 0.6352  # value of d1\n    d2 = 0.5486  # value of d2\n\n    # Calculate d1 and d2\n    d1_section_1 = (math.log(s/x) + (0.5 * v**2 + r)*t) / (v*math.sqrt(t))\n    d2_section_1 = (math.log(s/x) + (0.5 * v**2 - r)*t) / (v*math.sqrt(t))\n    d1 = d1_section_1\n    d2 = d2_section_1\n\n    # Calculate cumulative distribution functions of N(d1) and N(d2)\n    N_d1 = stats.norm.cdf(d1)\n    N_d2 = stats.norm.cdf(d2)\n\n    # Calculate the value of the put option\n    put_value = x * math.exp(-r*t) * N_d2 - s * N_d1\n\n    # return answer\n    return put_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "-2.7796729118602954"
        }
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "```python\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    values = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    \n    # Do math calculation to get the answer\n    sample_std_dev = np.std(values, ddof=1)\n    \n    # return answer\n    return sample_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": "13.180794108601095"
        }
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009000000000000001,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "Here is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables\n    stock_returns = {\n        1: 14,  # Stock 1 return\n        2: 15,  # Stock 2 return\n        3: 12,  # Stock 3 return\n        4: 8,   # Stock 4 return\n        5: 10   # Stock 5 return\n    }\n    portfolio_weights = {\n        1: 0.30,  # Portfolio weight of Stock 1\n        2: 0.30,  # Portfolio weight of Stock 2\n        3: 0.20,  # Portfolio weight of Stock 3\n        4: 0.10,  # Portfolio weight of Stock 4\n        5: 0.10   # Portfolio weight of Stock 5\n    }\n    benchmark_weights = {\n        1: 0.24,  # Benchmark weight of Stock 1\n        2: 0.20,  # Benchmark weight of Stock 2\n        3: 0.20,  # Benchmark weight of Stock 3\n        4: 0.18,  # Benchmark weight of Stock 4\n        5: 0.18   # Benchmark weight of Stock 5\n    }\n    \n    # Calculate active return\n    active_return = 0\n    for stock, weight in portfolio_weights.items():\n        active_return += (stock_returns[stock] - benchmark_weights[stock]) * weight\n    \n    # return answer\n    return active_return\n```\nThe output of this program will be the active return of the Kurok Fund, which is the value added by the fund relative to the benchmark."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 12.692
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    amount_30_days = 1000000\n    amount_90_days = 2000000\n    amount_180_days = 3000000\n    amount_360_days = 4000000\n    days_30 = 30\n    days_90 = 90\n    days_180 = 180\n    days_360 = 360\n    \n    # Do math calculation to get the answer\n    wam = ((amount_30_days * days_30 + amount_90_days * days_90 + amount_180_days * days_180 + amount_360_days * days_360) / \n           (amount_30_days + amount_90_days + amount_180_days + amount_360_days))\n    \n    # return answer\n    return wam\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 219.0
        }
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "To calculate the Paasche index, we need to follow these steps:\n\n1. Calculate the total consumption value in November for each good.\n2. Calculate the total consumption value in December for each good.\n3. Calculate the Paasche index by dividing the total consumption value in December by the total consumption value in November.\n\nHere is a Python program that solves the problem.\n\n```python\ndef solution():\n    # Define variables with values\n    nov_sugar_quantity = 70\n    nov_sugar_price = 0.90\n    dec_sugar_quantity = 120\n    dec_sugar_price = 1.00\n    \n    nov_cotton_quantity = 60\n    nov_cotton_price = 0.60\n    dec_cotton_quantity = 50\n    dec_cotton_price = 0.80\n\n    # Calculate total consumption value in November for each good\n    nov_sugar_value = nov_sugar_quantity * nov_sugar_price\n    nov_cotton_value = nov_cotton_quantity * nov_cotton_price\n    \n    # Calculate total consumption value in December for each good\n    dec_sugar_value = dec_sugar_quantity * dec_sugar_price\n    dec_cotton_value = dec_cotton_quantity * dec_cotton_price\n    \n    # Calculate the Paasche index\n    # First, calculate the total consumption value in November\n    total_november_value = nov_sugar_value + nov_cotton_value\n    \n    # Then, calculate the Paasche index by dividing the total consumption value in December by the total consumption value in November\n    paasche_index = ((dec_sugar_value + dec_cotton_value) / total_november_value)**(-1)\n    \n    # return answer\n    return round(paasche_index,2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.62
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # After-tax return in the first year\n    at_return_year1 = 0.09\n    \n    # After-tax return in the second year\n    at_return_year2 = 0.05\n    \n    # After-tax return in the third year\n    at_return_year3 = 0.08\n    \n    # Embedded gain percentage\n    embedded_gain_pct = 0.10\n    \n    # Tax rate of capital gains\n    tax_rate = 0.25\n    \n    # Holding period in years\n    n = 3\n    \n    # Start capital value assuming after-tax return on 100\n    x0 = 100\n    \n    # Embedded gain\n    gain = embedded_gain_pct * x0\n    \n    # Adjusted after-tax return\n    first_year = at_return_year1 - embedded_gain_pct\n    second_year = at_return_year2\n    third_year = at_return_year3\n    \n    # Adjusted capital value at the end of the first year\n    x1 = x0 * (1 + first_year) - ((gain * (1 + at_return_year1)) / (1 + (1 - tax_rate)))\n    # Adjusted capital value at the end of the second year\n    x2 = x0 * (1 + first_year) * (1 + second_year) - ((gain * (1 + at_return_year1) * (1 + at_return_year2)) / (1 + (1 - tax_rate)))\n    # Adjusted capital value at the end of the third year\n    x3 = x0 * (1 + first_year) * (1 + second_year) * (1 + third_year) - ((gain * (1 + at_return_year1) * (1 + at_return_year2) * (1 + at_return_year3)) / (1 + (1 - tax_rate)))\n    \n    # Adjusted after-tax post-liquidation return\n    return (x3 / x0) ** (1 / n) - 1\n    \n    # return answer\n    return round(return *(2),2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    going_rate = 50\n    risk_free_rate = 0.04\n    months_to_expiration = 3\n    advantages_value = 5\n    disadvantages_value = 6\n    futures_months = 12\n    \n    # Convert months to years\n    years_to_expiration = months_to_expiration / futures_months\n    \n    # Calculate the forward price using the formula: forward price = PV + (PV * D * e^(rt))\n    # Where PV is the price of the option, D is the discount factor, r is the risk-free rate, and t is the time to expiration in years\n    forward_price = (going_rate + advantages_value) * (1 / (1 + (risk_free_rate * months_to_expiration / futures_months)))\n    \n    # return result rounded to two decimal places\n    return round(forward_price, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 54.46
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    hkd_to_cny = 1 / 1.1757  # Exchange rate from Hong Kong Dollar to Chinese Yuan\n    cny_to_aud = 5.0765  # Exchange rate from Chinese Yuan to Australian Dollar\n    \n    # Do math calculation to get the answer\n    aud_to_hkd = 1 / hkd_to_cny\n    cross_rate = aud_to_hkd * cny_to_aud\n    \n    # return answer\n    return round(cross_rate, 4)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 5.968
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 100000\n    annual_interest_rate = 0.055  # Convert percentage to decimal\n    years = 40\n\n    # Do math calculation to get the answer\n    # Using the formula for the present value of an annuity: \n    # PV = PMT * [(1 - (1 + i)^(-n)) / i] \n    present_value = annual_payment * ((1 - (1 + annual_interest_rate)**(-years)) / annual_interest_rate)\n\n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1604612.469
        }
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    security_weight_1 = 0.4\n    security_weight_2 = 0.6\n    expected_standard_deviation_1 = 0.3\n    expected_standard_deviation_2 = 0.15\n    correlationCoefficient = 0.25\n    \n    # Do math calculation to get the answer\n    portfolio_variance = (security_weight_1 ** 2) * (expected_standard_deviation_1 ** 2) + (security_weight_2 ** 2) * (expected_standard_deviation_2 ** 2) + (security_weight_1 * security_weight_2 * (expected_standard_deviation_1 * expected_standard_deviation_2 * correlationCoefficient))\n    portfolio_std_dev = portfolio_variance ** 0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.159
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 1000  # Selling price of the artwork\n    cost = 300    # Cost of creation\n    \n    # Do math calculation to get the answer\n    intermediate_goods = price - cost  # Value added in the creation process\n    \n    # return answer\n    return intermediate_goods\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 700.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 0.1431  # 14.31% in decimal\n    num_compounding_periods = 4\n    \n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + yearly_rate / num_compounding_periods) ** num_compounding_periods - 1\n    \n    # return answer\n    return round(effective_annual_rate * 100, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 15.1
        }
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    portfolio_value = 240000000  # Current equity portfolio value in Australian dollars\n    p_e_gap = 15 - 14.5  # Pe gap between beginning of period and current period\n    rec_g = 0.06  # Average annual real earnings growth rate\n    exp_g = 0.05  # Expected annual real earnings growth rate\n    ip = 0.023  # Inflation rate\n    exp_ip = 0.023  # Expected inflation rate\n    ret_a = 0.046  # Average annual equity return\n    exp_ret = 0.024  # Expected annual income return\n    \n    # Do math calculation to get the answer\n    # Grinold-Kroner annual change in PE spread\n    gap_change = (p_e_gap - 0) * (exp_g - rec_g) / (rec_g * (ip - exp_ip))\n    \n    # Grinold-Kroner annual change in return\n    exp_an = ret_a - (exp_ret / ret_a) * (1 + gap_change)\n    \n    # adjust the portfolio according to the method\n    adjusted_return = ret_a + exp_an\n\n    # return the answer\n    return round(adjusted_return, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036000000000000004,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "<|python_tag|>def solution():\n    # Define variables name and value\n    var_x = 0.25  # Variance of shares X\n    var_y = 0.64  # Variance of shares Y\n    corr_xy = 0.09  # Correlation between shares X and Y\n    \n    # Calculate covariance of the returns using the formula: cov(x, y) = corr(x, y) * sqrt(var(x) * var(y))\n    cov_xy = corr_xy * (var_x * var_y) ** 0.5\n    \n    # return answer\n    return cov_xy"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09  # 9% in decimal form\n    \n    # Do math calculation to get the answer\n    bond_equivalent_yield = effective_annual_return ** 2 + (1 + effective_annual_return) * effective_annual_return\n    \n    # return answer\n    return bond_equivalent_yield\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.106
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 50000  # cost price of the machine\n    residual_value = 5000  # residual value of the machine after 10 years\n    initial_year_depreciation = 2021  # initial year the machine is depreciated\n    \n    # Calculate the total depreciable amount\n    depreciable_amount = cost - residual_value\n    \n    # Calculate the depreciation rate\n    annual_depreciation_rate = 0.2  # dertermined by the double-declining balance method with a timeframe of 10 years, so the annual rate is 20%\n    \n    # Calculate the depreciation for one year\n    depreciation = 0\n    for year in range(initial_year_depreciation, 2026):\n        if year == initial_year_depreciation:\n            depreciation = depreciable_amount * annual_depreciation_rate\n        else:\n            depreciation = depreciation * annual_depreciation_rate\n        # Your code here\n\n    # return answer\n    return depreciation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 14.4
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "```python\ndef solution():\n    # Define the exchange rate for the Euro (EUR) in London (GBP/EUR)\n    london_rate = 0.8878\n    \n    # Since the exchange rate is GBP/EUR, we need to invert it to get the EUR/GBP rate\n    # To do this, we can take the reciprocal of the London rate\n    frankfurt_rate = 1 / london_rate\n    \n    # return the Frankfurt rate\n    return frankfurt_rate\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.126
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "```python\ndef solution():\n    # Define variables and values\n    r_market = 0.04  # market risk-free rate\n    r_bond = 0.06  # yield on Corporation B bond\n    recovery_rate = 0.7  # recovery rate on the corporation's bonds\n    \n    # Do math calculation using the Merton model to get the answer\n    # Merton model formula: N(-d2) where d2 = (ln(RY) - r_year + (sigma^2)/2)/(sigma*sqrt(T))\n    # d2 = (ln(r_bond/r_market) + (r_bond + r_market + 0.5*sigma**2)/(sigma*sqrt(T))\n    # Assuming standard deviation (sigma) = r_bond - r_market\n    sigma = r_bond - r_market\n    T = 1  # 1 year\n    d2 = (np.log(r_bond/r_market) + (r_bond + r_market + 0.5*sigma**2))/(sigma*np.sqrt(T))\n    \n    # Get the answer using scipy library (N is the cumulative distribution function of the standard normal distribution)\n    from scipy.stats import norm\n    answer = 1 - norm.cdf(d2)\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    primary_borrowing = 1300000000\n    predicted_profit_percent = 0.07\n    operation_cost = 6000000\n    consumer_deposits = primary_borrowing\n    interest_rate = 0.05\n    predicted_loss = 0.003\n    unexpected_loss = 0.08\n    risk_free_rate = 0.015\n    effective_tax_rate = 0.25\n\n    # Do math calculation to get the answer\n    revenue = primary_borrowing * predicted_profit_percent\n    tax_benefit = revenue * effective_tax_rate\n    net_profit_before_interest_and_taxes = revenue - operation_cost\n    risk_free_return = primary_borrowing * risk_free_rate * (1 - effective_tax_rate)\n    total_assets = primary_borrowing + consumer_deposits\n    expected_loss_per_general_income = predicted_loss * primary_borrowing\n    unexpected_loss_value = primary_borrowing * unexpected_loss\n    expected_annual_loss = expected_loss_per_general_income + unexpected_loss_value\n    \n    # Calculate RAROC using the definition\n    expected_annual_loss_in_schedule = expected_loss_per_general_income\n    rrp = risk_free_return - expected_annual_loss_in_schedule\n    raro_c = rrp / net_profit_before_interest_and_taxes\n    \n    # return answer\n    return raro_c\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.126
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    car_renewal_rate = 0.4  # 40% of clients with only a car insurance plan will renew it\n    house_renewal_rate = 0.7  # 70% of clients with only a house insurance plan will renew\n    both_renewal_rate = 0.8  # 80% of clients with both a car and a house insurance plan will renew at least one\n    car_percentage = 0.7  # 70% of clients have a car insurance plan\n    house_percentage = 0.5  # 50% of clients have a house insurance plan\n    both_percentage = 0.2  # 20% of clients have both types of insurance plans\n\n    # Do math calculation to get the answer\n    car_only = car_percentage * (1 - house_percentage)  # clients with only a car insurance plan\n    house_only = house_percentage * (1 - car_percentage)  # clients with only a house insurance plan\n    both_plans = both_percentage  # clients with both types of insurance plans\n\n    renew_car_only = car_only * car_renewal_rate  # clients with only a car insurance plan who will renew\n    renew_house_only = house_only * house_renewal_rate  # clients with only a house insurance plan who will renew\n    renew_both = both_plans * both_renewal_rate  # clients with both types of insurance plans who will renew\n    \n    total_renewal_rate = renew_car_only + renew_house_only + renew_both  # total clients who will renew at least one plan\n\n    # return answer\n    return total_renewal_rate * 100  # convert to percentage\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 40.5
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000  # Par value of the bond\n    coupon_rate = 0.1  # Annual coupon rate (10%)\n    one_year_forward_rate = 0.08  # One-year forward rate one year from now\n    two_year_forward_rate = 0.10  # One-year forward rate two years from now\n    \n    # Do math calculation to get the answer\n    # Time value of money formula is: PV = PMT * [(1 - (1 + r)^(-n)) / r] + FV / (1 + r)^n\n    # In this case, PMT = coupon_rate * par_value, FV = par_value, n = 3, r = 6%\n    present_value = (coupon_rate * par_value * (((1 + one_year_forward_rate) / (1 + (1 + one_year_forward_rate) ** (2)) * (1 + two_year_forward_rate) / (1 - two_year_forward_rate)) / one_year_forward_rate)) / (1 + one_year_forward_rate ** 2) + 1000 / (1 + one_year_forward_rate) ** 2\n    \n    # return answer\n    return round(present_value,2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1614.13
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    growth_of_labor_input = 0.009  # 0.9% per year\n    labor_productivity_growth = 0.015  # 1.5% per year\n    inflation_rate = 0.021  # 2.1% per year\n    dividend_yield = 0.0225  # 2.25%\n    pe_growth = 0  # nonexistent\n    \n    # Do math calculation to get the answer\n    # Long-term US equity returns can be forecasted using the Gordon growth model: \n    # r = dividend_yield + pe subsequently × (growth - inflation)\n    answer = dividend_yield + labor_productivity_growth + ((growth_of_labor_input - inflation_rate) if growth_of_labor_input > inflation_rate else 0)\n    \n    # return answer\n    return round(answer, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.04
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    retirement_fund = 100000000  # $100 million\n    current_equityAllocation = 0.8  # 80%\n    desired_equityAllocation = 0.6  # 60%\n    equity_value = retirement_fund * current_equityAllocation  # $80 million\n    stock_index_value = 1200  # current stock index value\n    multiplier = 250  # contract multiplier\n    beta_alteration = (1.2 - 0.95)  # change in beta\n    beta_pricing = 0.95  # new beta of the additional stock\n    \n    # Do math calculation to get the answer\n    equity_in_sif = (equity_value - (retirement_fund * desired_equityAllocation)) / (beta_pricing * stock_index_value * multiplier * beta_alteration)\n    \n    # return answer\n    return equity_in_sif / multiplier\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.123
        }
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    anticipeted_return_share_b = 0.114  # 11.4%\n    risk_free_rate = 0.03  # 3%\n    beta_share_b = 1.40  # Beta of Share B\n    \n    # Do math calculation to get the answer\n    # According to the Capital Asset Pricing Model (CAPM)\n    market_return = anticipeted_return_share_b - (risk_free_rate * beta_share_b)\n    \n    # return answer\n    return market_return * 100  # Convert to percentage\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 7.2
        }
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation_cost = 800\n    testing_cost = 500\n    training_cost = 1000\n\n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation_cost + testing_cost + training_cost\n\n    # return answer\n    return total_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 36900.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_paid_in_capital = 100000000\n    total_distributions = 30000000\n    carried_interest_rate = 0.20\n    year_end_NAV_before_distribution = 160000000\n    year_end_NAV_after_distribution = 130000000\n    projected_NAV_before_distribution = 250000000\n    \n    # Do math calculation to get the answer\n    fundtips = total_paid_in_capital - total_distributions\n    growth_factor = (projected_NAV_before_distribution - year_end_NAV_before_distribution) / year_end_NAV_before_distribution\n    forecasted_investment_value = year_end_NAV_before_distribution * (1 + growth_factor)\n    forecasted_distributions = forecasted_investment_value * carried_interest_rate\n    forecasted_carried_interest = forecasted_distributions - (forecasted_investment_value - forecasted_investment_value * (1 - carried_interest_rate))\n    \n    # return answer\n    return round(forecasted_carried_interest,2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 75000  # initial investment\n    annual_interest_rate = 0.07  # interest rate in decimal form\n    years = 6  # time period in years\n    compounding_frequency = 4  # number of times interest applies per year\n    \n    # Do math calculation to get the answer\n    future_value = principal * (1 + annual_interest_rate/compounding_frequency) ** (compounding_frequency*years)\n    \n    # return answer\n    return round(future_value, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 113733.21
        }
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_cost = 8000  # in millions\n    accumulated_depreciation = 1200  # in millions\n    new_value = 10000  # in millions\n    new_life = 20  # in years\n    tax_rate = 0.3  # in decimal form\n\n    # Do math calculation to get the answer\n    depreciation_period_remaining = new_life - 3  # 3 years depreciation already done\n    annual_depreciation = 80000 / (20 * 3)  # calculate annual depreciation\n    previously_depreciated_value = original_cost - 1200  # in millions\n    deferred_tax_assets = previously_depreciated_value * 0.3  # calculate deferred tax assets\n    deferred_tax_liability = (new_value - previously_depreciated_value) * 0.3  # calculate deferred tax liability\n    total_deferred_tax_liability = deferred_tax_liability + deferred_tax_assets  # calculate total deferred tax liability\n\n    # return answer\n    return total_deferred_tax_liability\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3000.0
        }
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "```python\nimport numpy as np\n\ndef solution():\n    # Define the probability and sales values\n    probabilities = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # Convert the probabilities to a NumPy array\n    probabilities = np.array(probabilities)\n\n    # Calculate the mean of sales weighted by probabilities\n    weighted_mean = np.sum(np.multiply(sales, probabilities))\n\n    # Calculate the squared differences from the mean\n    deviations = (sales - weighted_mean) ** 2\n\n    # Calculate the weighted sum of squared deviations\n    sum_squared_deviations = np.sum(np.multiply(deviations, probabilities))\n\n    # Calculate the variance\n    variance = sum_squared_deviations / (1 - probabilities.sum())\n\n    # Calculate the standard deviation\n    standard_deviation = variance ** 0.5\n\n    # Return the standard deviation\n    return standard_deviation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "inf"
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    company_contributions = 1200\n    start_pbo = 45000\n    end_pbo = 43500\n    start_plan_assets = 40800\n    end_plan_assets = 39650\n\n    # Do math calculation to get the answer\n    overall_reconciliation = (start_pbo - end_pbo) + company_contributions\n    e following startling underage measurable difference January col    \n    sponsored_business=(\n    equation Cloud patients fre\n    assets_start_both particip source trad focused moth;nitsIn    \n\n    payment_interest_on_employees = overall_reconciliation + start_plan_assets - end_plan_assets\n    \n    # return answer\n    return payment_interest_on_employees\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investments = {\n        \"Year 1\": {\"Investment\": 500, \"Return\": 0.12},\n        \"Year 2\": {\"Investment\": 600, \"Return\": 0.05},\n        \"Year 3\": {\"Investment\": 1000, \"Return\": 0.01}\n    }\n    \n    # Calculate the holding period return\n    total_value = sum(investments[year][\"Investment\"] * (1 + investments[year][\"Return\"]) for year in investments)\n    holding_period_return = (total_value / (500)) - 1\n    \n    # return answer\n    return holding_period_return\n\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.4
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    common_stock_shares = 60000\n    warrant_shares = 5000\n    warrant_conversion_price = 25\n    end_year_stock_price = 30\n    avg_stock_price_for_year = 20\n    \n    # Calculate total dilutive items and their cost\n    dilutive_items = warrant_shares * warrant_conversion_price\n    \n    # If the max of (0, (avg_stock_price_for_year - end_year_stock_price)) > 0, then dilutive items are treated as dilutive\n    # This is a simplification and actual calculation would depend on other factors like net income and EPS\n    if max(0, (avg_stock_price_for_year - end_year_stock_price)) > 0:\n        dilutive_items = 0\n    \n    # Calculate the total number of shares after conversion, which is part of the calculation to get the diluted number of shares\n    total_shares_after_conversion = common_stock_shares + dilutive_items\n    \n    # Return the diluted number of shares\n    return int(total_shares_after_conversion)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 185000.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    projected_earnings_per_share = 2  # Projected EPS\n    current_share_price = 40  # Current share price\n\n    # Do math calculation to get the answer\n    # The average price-to-earnings ratio is typically considered as a multiple based on the 10-year past average\n    avg_pe_ratio = (10 + 15 + 20 + 12 + 18 + 22 + 25 + 28 + 30 + 32) / 10  # hypothetical data for demonstration purposes, replace with actual data\n    answer = current_share_price / projected_earnings_per_share\n    \n    # return answer\n    return avg_pe_ratio\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 21.2
        }
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    one_year_return = 0.053  # 5.3%\n    three_year_return = 0.062  # 6.2%\n    five_year_return = 0.047  # 4.7%\n    inception_return = 0.044  # 4.4%\n    drawdown_score = 0.102  # 10.2%\n    mean_drawdown_score = 0.068  # 6.8%\n\n    # Calculate Calmar ratio\n    one_year_calmar = one_year_return / drawdown_score\n    three_year_calmar = three_year_return / (drawdown_score**3) ** (1/3)\n    five_year_calmar = five_year_return / (drawdown_score**5) ** (1/5)\n    inception_calmar = inception_return / (drawdown_score**(inception_return折 atoi(3))) ** (1/inception_return)\n\n    #return answer\n    return one_year_calmar, three_year_calmar, five_year_calmar, inception_calmar\n```\n\nPlease note that I've assumed the power in the inception return calculation is the cube root of the drawdown score raised to the power of inception return. However, the power was not clearly defined in the question. This is just an estimate based on a common assumption. Please adjust as necessary."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    trades = [\n        {\"trade\": 1, \"trade_price\": 41.50, \"prevailing_bid\": 41.45, \"prevailing_offer\": 41.50},\n        {\"trade\": 2, \"trade_price\": 41.75, \"prevailing_bid\": 41.73, \"prevailing_offer\": 41.75}\n    ]\n    \n    # Calculate the spread for each trade\n    spreads = [trade[\"prevailing_offer\"] - trade[\"prevailing_bid\"] for trade in trades]\n    \n    # Calculate the average spread\n    average_effective_spread = sum(spreads) / len(spreads)\n    \n    # return answer\n    return average_effective_spread\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.035
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "Here is the Python program to solve the given question:\n\n```python\ndef solution():\n    # Define variables name and value\n    quarterly_payment = 2.00\n    quarters = 5\n    annual_rate = 0.06\n    compounding_frequency = 4\n    \n    # Do math calculation to get the answer\n    quarterly_rate = (1 + annual_rate / compounding_frequency) ** (1 / compounding_frequency) - 1\n    present_value = 0\n    for i in range(1, quarters + 1):\n        present_value += quarterly_payment / (1 + quarterly_rate) ** i\n    \n    # return answer\n    return round(present_value, 2)\n```\n\nThis program uses the formula for present value of infinite series to calculate the current value of the share. It assumes that the share is bought at par (i.e., for $1.00) and then calculates the present value of the 3-monthly payouts of $2.00 made in 5 quarters with a 6% annual interest rate compounded quarterly. The `round` function rounds the result to two decimal places."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 9.89
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 3\n    current_year = 2\n    \n    # Do math calculation to get the answer\n    annual_amortization = license_cost / useful_life\n    accumulated_amortization = current_year * annual_amortization\n    \n    # return answer\n    return accumulated_amortization\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 4333.333
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 2.00\n    dividend_growth_rate = 0.04\n    required_return_rate = 0.07\n    \n    # Do math calculation to get the answer\n    # We use the formula for the present value of a growing perpetuity: PV = P / (r - g)\n    # where P is the current dividend, r is the required return rate, and g is the dividend growth rate\n    answer = dividend / (required_return_rate - dividend_growth_rate)\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 66.667
        }
    },
    {
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_Ajiwo = 500\n    sales_Bdfhyj = 350\n    sales_Cegfd = 270\n    sales_Ddgh = 200\n    sales_Ebned = 150\n    sales_All_others = 40\n\n    # Do math calculation to get the answer\n    total_sales = sales_Ajiwo + sales_Bdfhyj + sales_Cegfd + sales_Ddgh + sales_Ebned + sales_All_others\n    concentration_ratio = (sales_Ajiwo + sales_Bdfhyj + sales_Cegfd + sales_Ddgh + sales_Ebned) / total_sales\n    concentration_ratio_Four_firms = (sales_Ajiwo + sales_Bdfhyj + sales_Cegfd + sales_Ddgh) / total_sales\n    concentration_ratio_Four_firms_percentage = concentration_ratio_Four_firms * 100\n    \n    # return answer\n    return concentration_ratio_Four_firms_percentage\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 87.417
        }
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.5710000000000001,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales = 3500\n    cost_of_sales = 1500\n    exchange_rate_at_acquisition = 1.55\n    exchange_rate_at_exchange_date = 1.77\n    exchange_rate_be = 1.68\n\n    # Convert sales and cost of sales into US dollars at the average exchange rate\n    sales_in_usd = sales * exchange_rate_be\n    cost_of_sales_in_usd = cost_of_sales * exchange_rate_be\n\n    # Calculate gross profit in US dollars\n    gross_profit_in_usd = sales_in_usd - cost_of_sales_in_usd\n\n    # Calculate gross profit margin in %\n    gross_margin = (gross_profit_in_usd / sales_in_usd) * 100\n\n    # return answer\n    return round(gross_margin, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 57.14
        }
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_of_securities = -240  # Negative because it's an expense\n    proceeds_from_sales_of_securities = 300\n    proceeds_from_issuance_of_bonds = 500\n    purchase_of_affiliated_company = -275  # Negative because it's an expense\n\n    # Do math calculation to get the answer\n    net_cash_flow_from_investing_activities = (purchase_of_securities + proceeds_from_sales_of_securities +\n                                              proceeds_from_issuance_of_bonds + purchase_of_affiliated_company)\n\n    # return answer\n    return net_cash_flow_from_investing_activities\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 285.0
        }
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    prob_up_25 = 0.05\n    prob_up_45 = 0.38\n    prob_up_60 = 0.16\n    \n    # Do math calculation to get the answer\n    # Calculate the probability by multiplying the probability of each scenario with the probability of the stock price being $45\n    prob_45 = (prob_up_25 * 0) + (prob_up_45 * 0) + (prob_up_60 * 1)\n    \n    # return answer\n    return round(prob_45, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.16
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    invoice_price = 11000000\n    repo_rate = 0.20  # 20%\n    period_days = 20 / 365  # Day count from August 1 to August 20\n\n    # Do math calculation to get the answer\n    interest = face_value * repo_rate * 30  # Calculate interest for 20 days at the repo rate\n    repurchase_cost = invoice_price + interest  # Calculate the repurchase cost equals to initial invoice price plus interest\n\n    # return answer\n    return repurchase_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 71000000.0
        }
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Cash, Net income, Depreciation, accounts payable, inventory \n    \n    net_income = 12  # assume the impairment expense was already accounted for in net income\n    depreciation = 6  # assuming depreciation for 2017 is 6\n    accounts_payable_beginning = 30\n    accounts_payable_end = 33\n    inventory_end = 20\n    inventory_beginning = 24\n    \n    # Do math calculation to get the answer\n    cash_change_in_inventories = inventory_beginning - inventory_end\n    cash_paid_to_suppliers = accounts_payable_beginning - accounts_payable_end\n    cash_from_operations = net_income + depreciation + cash_change_in_inventories + cash_paid_to_suppliers\n    \n    # return answer\n    return cash_from_operations  # in millions\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 19.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    p = 0.05  # probability of a defective vehicle, or lambda parameter of Poisson distribution\n    n = 5  # number of vehicles picked from production line\n    k = 1  # number of defective vehicles\n\n    # Do math calculation to get the answer\n    from math import factorial\n    from scipy.special import comb\n    probability = comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n    \n    # return answer\n    return probability\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "0.20362656249999997"
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    years_until_maturity = 9\n    yield_to_maturity = 0.05\n    price = 85.784357\n    \n    # Do math calculation to get the answer\n    # First, calculate the face value of the bond\n    face_value = 100 / price\n    \n    # Calculate the present value of an annuity (coupon payments)\n    annuity = face_value * coupon_rate * (1 - (1 + yield_to_maturity) ** -years_until_maturity) / yield_to_maturity\n    \n    # Calculate the present value of the maturity payment\n    maturity_pv = face_value * (1 + yield_to_maturity) ** -years_until_maturity\n    \n    # Calculate price of bond using formula for no-arbitrage, i.e. PV of cash flows equals market price\n    total_pv = annuity + maturity_pv\n    \n    # Projected price value of a basis point is the change in price due to a 1 basis point (0.01%) change in yield-to-market\n    yield_change = 0.0001  # 1 basis point\n    yield_change_price = total_pv - (total_pv * yield_to_maturity / (1 + yield_to_maturity)) * yield_change\n    \n    # Calculate price value of a basis point\n    price_basis_point = yield_change_price / yield_change\n    \n    # return answer\n    return price_basis_point\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 9999.952
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    population_mean = 1000\n    sample_size = 1600\n    sample_mean = 998.7\n    sample_std_dev = 100\n    \n    # Do math calculation to get the answer\n    population_std_dev = None  # not required to solve the standard error of the sample mean\n    sample_std_error = (sample_std_dev / (sample_size ** 0.5))\n    \n    # return answer\n    return sample_std_error\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 2.5
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_present_value_of_earnings = 980000\n    future_consumption = 870000\n    college_tuition_costs = 150000\n    future_family.foundation_worth = 600000\n    \n    # Calculate total liabilities (in this case, the mortgage)\n    mortgage = 175000\n    \n    # Calculate the total value of the house (not just the amount owned, but the full value)\n    total_house_value = 350000\n    \n    # Calculate the net worth by subtracting future consumption and college tuition costs, adding the value of the future family foundation, and adding the present value of earnings, from the total present value of earnings and adding the value of the Smith's assets.\n    net_worth = total_present_value_of_earnings + (total_house_value - mortgage) + college_tuition_costs + future_family.foundation_worth\n    \n    # return answer\n    return net_worth\n```\n\nPlease note: I have considered the present value of the earnings as already accounting for the expected consumption in the future and thus subtracted it. In a typical calculation, we would expect the present value of earnings from the Smiths to be less than $980,000 due to consumption, which has been calculated but rather represented as the future projected consumption value."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "```\ncost_price = 8000  # in euros\nselling_price = 10000  # in euros\n```\n\n неперу done wait, listing program is almost complete here is the final output \n```\ndef solution():\n    # Define variables name and value\n    cost_price = 8000  # in euros\n    selling_price = 10000  # in euros\n    days_to_pay = 30  # in days\n\n    # Do math calculation to get the answer\n    net_gain = selling_price - cost_price\n    days asympt instance receipt of payment times\n    0 regular\n\n    if receiving payment on time.\n    then this is the net royalty to add to total assets\n    net_shift = net_gain - (net_gain / days_to_pay)\n\n    # return answer\n    return net_shift\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    debt_to_equity_ratio = 0.6  # 60% financed by debt\n    equity_beta = 1.4  # equity beta of the business\n    tax_rate = 0.35  # tax rate\n    \n    # Do math calculation to get the answer\n    enterprise_beta = (debt_to_equity_ratio / (1 - debt_to_equity_ratio)) * equity_beta * (1 / (1 - tax_rate))\n    \n    # return answer\n    return enterprise_beta\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.231
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100000000  # $100 million\n    initial_shares_percentage = 0.8  # 80%\n    initial_bonds_percentage = 0.2  # 20%\n    beta_shares = 1.2\n    bonds_term = 5.0\n    stock_index_value = 1200  # $1,200\n    multiplier = 250\n    beta_stock_index = 0.95\n    bond_futures_cost = 105300  # $105,300\n    bond_futures_duration = 6.5\n    new_shares_percentage = 0.6  # 60%\n    new_bonds_percentage = 0.4  # 40%\n\n    # Calculate the current value of shares and bonds\n    shares_value = initial_investment * initial_shares_percentage\n    bonds_value = initial_investment * initial_bonds_percentage\n\n    # Calculate the current beta of shares\n    shares_beta = (shares_value / initial_investment) * beta_shares\n\n    # Calculate the current beta of bonds\n    bonds_beta = (bonds_value / initial_investment) * beta_shares\n\n    # Calculate the required change in shares and bonds values to change the distribution to 60% shares and 40% bonds\n    shares_delta = (new_shares_percentage * initial_investment) - (initial_shares_percentage * initial_investment)\n    bonds_delta = (new_bonds_percentage * initial_investment) - (initial_bonds_percentage * initial_investment)\n\n    # Calculate the required change in beta for shares and bonds to match the new distribution\n    shares_beta_delta = (new_shares_percentage * initial_investment) / shares_value * beta_shares - beta_shares\n    bonds_beta_delta = (new_bonds_percentage * initial_investment) / bonds_value * beta_shares - beta_shares\n\n    # Calculate the change in stock index value using the formula: Delta Beta = (Change in stock index value) * Beta of stock index\n    # We want to find the change in stock index value, so we will rearrange the formula: Change in stock index value = Delta Beta / Beta of stock index\n    shares_delta_stock_index = shares_beta_delta / beta_stock_index\n    bonds_delta_stock_index = bonds_beta_delta / beta_stock_index\n\n    # Calculate the required value of shares and bonds after the change in the distribution"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_price = 1105.94\n    bond_face_value = 1000\n    annual_coupon_rate = 0.08\n    term = 20\n    tax_rate = 0.3\n    risk_premium = 0.05\n\n    # Do math calculation to get the answer\n    anchor_rate = (annual_coupon_rate - tax_rate * annual_coupon_rate) / bond_price / (1 + (1 + (1 + risk_premium)) ** (-term))\n    cost_of_equity = (1 + anchor_rate) ** (1 / term) - 1\n    # return answer\n    return round(cost_of_equity, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_x_start_price = 15\n    stock_x_end_price = 20\n    stock_x_start_shares = 100  # in thousands\n    stock_x_end_shares = 100  # in thousands\n    \n    stock_y_start_price = 20\n    stock_y_end_price = 30\n    stock_y_start_shares = 1  # in thousands\n    stock_y_end_shares = 1  # in thousands\n    \n    stock_z_start_price = 30\n    stock_z_end_price = 25\n    stock_z_start_shares = 2  # in thousands\n    stock_z_end_shares = 2  # in thousands\n    \n    # Do math calculation to get the answer\n    stock_x_weight = (1/3) * ((stock_x_end_price - stock_x_start_price) / stock_x_start_price)\n    stock_y_weight = (1/3) * ((stock_y_end_price - stock_y_start_price) / stock_y_start_price)\n    stock_z_weight = (1/3) * ((stock_z_end_price - stock_z_start_price) / stock_z_start_price)\n    \n    index_value = (121 * stock_x_weight * stock_x_end_shares / stock_x_start_shares) + (121 * stock_y_weight * stock_y_end_shares / stock_y_start_shares) + (121 * stock_z_weight * stock_z_end_shares / stock_z_start_shares)\n    \n    # return answer\n    return round(index_value)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 27.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    constant_dividend = 0.22\n    growth_rate_stage1 = 0.12\n    growth_rate_stage2 = 0.06\n    required_return = 0.09\n    years_stage1 = 4\n    constant_growth_rate = growth_rate_stage2  # after growth rate for first 4 years\n    years_stage2 = 10  # assuming 10 years beyond the first 7 years for constant growth\n    \n    # Calculate present value of dividends for the first 4 years\n    dividend_per_year_stage1 = [constant_dividend * (1 + growth_rate_stage1)**(year) for year in range(1, years_stage1 + 1)]\n    present_value_stage1 = sum([dividend_per_year/(1 + required_return)**year for year, dividend_per_year in enumerate(dividend_per_year_stage1)])\n    \n    # Calculate present value of dividends for the next 10 years\n    dividend_in_next_year = constant_dividend * (1 + growth_rate_stage1)**4 * (1 + growth_rate_stage2)\n    present_value_stage2 = dividend_in_next_year / (required_return - growth_rate_stage2) * (1 / (1 + required_return)**years_stage2 - 1)\n    \n    # Calculate terminal value of the stock\n    terminal_value = present_value_stage1 + present_value_stage2\n    \n    # return answer\n    return round(terminal_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -6.04
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_price = 98.722\n    new_price_up = 98.669\n    new_price_down = 98.782\n    \n    # Do math calculation to get the answer\n    price_change_down = new_price_down - original_price\n    price_change_up = original_price - new_price_up\n    convexity = (2 * price_change_up) / (price_change_down)\n    \n    # return answer\n    return convexity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.767
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_sales_per_share = 35  # in dollars\n    current_share_price = 56  # in dollars\n\n    # Do math calculation to get the answer\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n\n    # return answer\n    return price_to_sales_ratio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.6
        }
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "Here is the Python program that calculates the corporation's days of payables for the current year:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_year_sales = 12000\n    cost_of_goods_sold = 9000\n    inventory = 1200\n    accounts_payable = 600\n\n    # Calculate the value of average daily payables\n    average_daily_payables = (accounts_payable - inventory) / (cost_of_goods_sold - (current_year_sales / 365))\n\n    # Calculate days of payables\n    days_of_payables = 365 / (365 * (accounts_payable - inventory) / (cost_of_goods_sold - (current_year_sales / 365)))\n\n    # return answer\n    return round(days_of_payables, 2)\n```\n\nNote: In the code above, the days of payables formula is calculated using the balance of accounts payable minus the inventory divided by the cost of goods sold minus the average daily revenue, which impacts the cost of goods sold.\n\nPlease note that the above program uses the available data for the calculation. You should replace the values with actual data for a different business to get accurate results."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -14.95
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_a_value = 5000000\n    marginal_var_a = 0.0452\n    asset_b_value = 3000000\n    marginal_var_b = 0.0332\n    \n    # Do math calculation to get the answer\n    total_value = asset_a_value + asset_b_value\n    total_marginal_var = (asset_a_value * marginal_var_a) + (asset_b_value * marginal_var_b)\n    percent_contribution_a = (asset_a_value * marginal_var_a) / total_marginal_var * 100\n    \n    # return answer\n    return round(percent_contribution_a, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 69.41
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "```python\nimport numpy as np\nfrom scipy.stats import norm\n\ndef solution():\n    # Define variables name and value\n    S = 52  # Current stock price\n    Kc = S * 1.1  # Strike price of in-the-money call option\n    d1 = (np.log(S / Kc) + (0.12**2 + 0.5*252)/252) / (0.12*np.sqrt(252))\n    d2 = d1 - 0.12*np.sqrt(252)\n    Kp = S * 0.8  # Strike price of out-of-the-money call option\n    pd = norm.cdf(d2)  # Cumulative distribution function of a standard normal distribution\n    pd_ng = 1 - pd  # Cumulative distribution function of a standard normal distribution for out-of-the-money option\n    N = 252 # number of trading days in a year\n    sigma_squared = 0.12**2 \n    volsd = np.sqrt(252) * sigma_squared / 252\n    portfolio_value = (5000 * (S - Kc) * norm.cdf(d1)) + (20000 * Kp * pd_ng) + (10000 * S)\n\n    # VaR for normal distribution (1% of the portfolio value with 99% confidence)\n    var_normal = norm.ppf(0.99, loc=0, scale=volsd) * portfolio_value\n\n    # VaR for normal distribution (1% of the negative portfolio value with 99% confidence)\n    var_normal_negative = norm.ppf(0.99, loc=0, scale=volsd) * (-portfolio_value)\n\n    # yourret\n    max_loss = max(var_normal, var_normal_negative)\n    \n    # return answer\n    return round(max_loss,2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "2741.53"
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    periodic_contributions = 6000000  # $6 million\n    service_costs = 800000  # $0.8 million\n    actuarial_gain = 2500000  # $2.5 million\n\n    # Do math calculation to get the answer\n    pension_expense = periodic_contributions + service_costs - actuarial_gain\n    \n    # return answer\n    return pension_expense\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4300000.0
        }
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "Based on the provided table, the bond yield is the 10-year AA corporate bond yield, which is 4.4%. The inflation premium is 0.8%, the illiquidity premium is 0.9%, and the equity risk premium is 8.4%. To get the predicted return, we need to sum these four values.\n\n```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 4.4\n    inflation_premium = 0.8\n    illiquidity_premium = 0.9\n    equity_risk_premium = 8.4\n    \n    # Do math calculation to get the answer\n    predicted_return = bond_yield + inflation_premium + illiquidity_premium + equity_risk_premium\n    \n    # return answer\n    return predicted_return\n```\n\nWhen you run this program, it will return the predicted return for the consumer credit industry in 2012, which is 14.4%."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 14.5
        }
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100  # Total assets in million\n    total_liabilities = 1200  # Total liabilities in million\n    preferred_equity = 120  # Preferred equity in million\n    common_shares_outstanding = 32e6  # Number of common shares outstanding\n    \n    # Calculate total equity using the formula: Total assets - Total liabilities - Preferred equity\n    total_equity = total_assets - total_liabilities - preferred_equity\n    \n    # Calculate normalized EPS using the formula: (Total equity) / (Number of common shares outstanding)\n    normalized_eps = total_equity / common_shares_outstanding\n    \n    # Convert the result to dollars per share and return it rounded to two decimal places\n    return round(normalized_eps / 1e6, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Trade data\n    trades = [\n        {\"Time\": \"9:45 am\", \"Trade Price\": 25.20, \"Trade Size\": 1200, \"Bid Price\": 25.17, \"Ask Price\": 25.20},\n        {\"Time\": \"9:55 am\", \"Trade Price\": 25.22, \"Trade Size\": 1300, \"Bid Price\": 25.19, \"Ask Price\": 25.22},\n        {\"Time\": \"11:30 am\", \"Trade Price\": 25.27, \"Trade Size\": 2500, \"Bid Price\": 25.22, \"Ask Price\": 25.26}\n    ]\n    \n    # Calculate total traded volume\n    total_volume = sum([trade[\"Trade Size\"] for trade in trades])\n    \n    # Calculate total spread\n    total_spread = 0\n    for trade in trades:\n        total_spread += (trade[\"Trade Price\"] - trade[\"Bid Price\"])\n    \n    # Calculate average effective spread\n    average_spread = total_spread / total_volume * 1000  # convert to dollar per 1000 shares\n    \n    # Calculate effective spread for a buy order of 5000 shares\n    effective_spread = (average_spread * 5000) / 1000  # convert to dollar per 5000 shares\n    \n    # return answer\n    return round(effective_spread, 3)\n\n# Execute the function\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.11
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    fixed_rate = 0.01  # 1.00%\n    libor_rate = 0.0063  # 0.63%\n    \n    # Do math calculation to get the answer\n    swap_spread = fixed_rate - libor_rate\n    \n    # return answer\n    return swap_spread\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.004
        }
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_price = 100\n    risk_free_rate = 0.03\n    beta_reit = 1.1\n    market Risk_Premium = 0.05\n    dividend_one_year = 1.13\n    dividend_two_year = 1.22\n    long_term_growth_rate = 0.05\n    \n    # Calculate g (growth rate in dividends) using the given formula\n    g = (dividend_two_year - dividend_one_year) / (100 + (long_term_growth_rate - risk_free_rate))\n    \n    # Calculate per share outflow (CPS)\n    CPS = (dividend_one_year - (risk_free_rate * current_price)) / (1 + risk_free_rate - g)\n    \n    # Calculate estimated value per share\n    estimated_value_per_share = CPS / (((1 + risk_free_rate) * ((1 + risk_free_rate) ** 1)) + beta_reit * market_Risk_Premium * ((1 + risk_free_rate) / ((1 + risk_free_rate - g) * ((((1 + g * 2)) / (g + risk_free_rate)) / (1 + (market_Risk_Premium * beta_reit)))))\n    CPS = CPS/(1 + (market_Risk_Premium * beta_reit))\n    estimated_value_per_share_2 = CPS/( ( 1 - (  POW(1 +   market_Risk_Premium * beta_reit , 2 )    )   )\n    estimated_value_per_share = current_price * ( CPS/A )\n    \n    # return answer\n    return round(estimated_value_per_share, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7000000000000001,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "```python\ndef solution():\n    # Define the test dataset\n    test_data = [\n        {'sentence': 1, 'actual_sentiment': 1, 'target_p_value': 0.75},\n        {'sentence': 2, 'actual_sentiment': 0, 'target_p_value': 0.45},\n        {'sentence': 3, 'actual_sentiment': 1, 'target_p_value': 0.64},\n        {'sentence': 4, 'actual_sentiment': 1, 'target_p_value': 0.81},\n        {'sentence': 5, 'actual_sentiment': 0, 'target_p_value': 0.43},\n        {'sentence': 6, 'actual_sentiment': 1, 'target_p_value': 0.78},\n        {'sentence': 7, 'actual_sentiment': 0, 'target_p_value': 0.59},\n        {'sentence': 8, 'actual_sentiment': 1, 'target_p_value': 0.60},\n        {'sentence': 9, 'actual_sentiment': 0, 'target_p_value': 0.67},\n        {'sentence': 10, 'actual_sentiment': 0, 'target_p_value': 0.54}\n    ]\n    \n    # Define threshold p-value\n    threshold_p_value = 0.65\n    \n    # Initialize variables\n    correct_predictions = 0\n    total_predictions = 0\n    \n    # Iterate through the test dataset\n    for data in test_data:\n        # Check if the actual sentiment is equal to 1 and p-value is greater than or equal to threshold\n        if data['actual_sentiment'] == 1 and data['target_p_value'] >= threshold_p_value:\n            correct_predictions += 1\n        # Check if the actual sentiment is equal to 0 and p-value is less than threshold\n        elif data['actual_sentiment'] == 0 and data['target_p_value'] < threshold_p_value:\n            correct_predictions += 1\n        # Increment total predictions\n        total_predictions += 1\n    \n    # Calculate accuracy\n    if total_predictions > 0:\n        accuracy = correct_predictions / total_predictions\n    else:\n        accuracy = 0.0\n    \n    # Return accuracy\n    return accuracy\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.7
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "<|python_tag|>def solution():\n    # Define variables and values\n    num_bonds = 2\n    price_per_bond = 10\n    modified_duration_1 = 1\n    modified_duration_2 = 9\n    yield_curve_shift = 0.05  # 5% yield\n    daily_yield_shift = 0.01  # 1% daily yield instability\n    confidence_level = 0.95  # 95% confidence level\n    \n    # Calculate the daily value at risk (VAR) using the formula for a portfolio with multiple bonds\n    # VAR = (difference in modified durations) * (price of bonds) * (daily yield shift)\n    # Since the yield curve is assumed to be even, the difference in modified durations is used to estimate the portfolio risk\n    # Here, we calculate the portfolio duration as the weighted average of the modified durations\n    portfolio_duration = (modified_duration_1 / 2 + modified_duration_2 / 2) * 2  # weighted average for 2 bonds\n    \n    # Calculate the portfolio value\n    portfolio_value = num_bonds * price_per_bond\n    \n    # Calculate the daily value at risk (VAR)\n    var = portfolio_duration * portfolio_value * daily_yield_shift\n    \n    # Adjust the VAR for the desired confidence level\n    z_score = 1.64  # 95% confidence level corresponds to a z-score of approximately 1.64\n    var_adjusted = var * z_score\n    \n    # return answer\n    return var_adjusted"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    present_value = 100  # initial investment\n    cash_flow_year1 = 40  # cash flow in the first year\n    cash_flow_year2 = 80  # cash flow in the second year\n    cash_flow_year3 = 120  # cash flow in the third year\n    required_rate_of_return = 0.2  # 20% interest rate\n    \n    # Do math calculation to get the answer\n    npv = -present_value + (cash_flow_year1 / (1 + required_rate_of_return)) + (cash_flow_year2 / (1 + required_rate_of_return)**2) + (cash_flow_year3 / (1 + required_rate_of_return)**3)\n    \n    # return answer\n    return npv\n```\n\nThis program uses the formula for Net Present Value (NPV) calculation, which is the sum of all the future cash flows divided by (1 + interest rate) raised to the power of the period. The initial investment is subtracted from the NPV to get the final result. In this case, we calculate the NPV for three years, but you can easily extend this to more years by adding more terms to the calculation."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 58.333
        }
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 50  # in millions\n    coupon_rate = 0.04  # 4%\n    issue_price = 92.28\n    market_interest_rate = 0.05\n    years_to_maturity = 10\n    years_as_turnover = 1  # for 2014\n    \n    # Calculate present value of cash flows from interest\n    present_value_interest = face_value * issue_price * (coupon_rate / (market_interest_rate * (1 + market_interest_rate)**years_to_maturity))\n    \n    # Calculate present value of cash flows from redemption (face value)\n    present_value_redeemption = face_value * (issue_price * ((1 + market_interest_rate)**years_to_maturity / (1 + market_interest_rate) ** 0.25 -1 ) )\n    \n    # total Issue cost = redemption + interest, since interest is already included within the price\n    \n    # Do math calculation to get the answer\n    total_issue_cost = present_value_redeemption + present_value_interest\n    \n    # return answer\n    return total_issue_cost\n\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 5076.68
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cash_short_term_investment = 750000\n    human_capital = 1200000\n    human_capital_equity_ratio = 0.3\n    target_equity_allocation = 0.45\n    \n    # Calculate financial capital\n    financial_capital = cash_short_term_investment + human_capital\n    \n    # Calculate desired human capital equity\n    desired_human_capital_equity = human_capital * human_capital_equity_ratio\n    \n    # Calculate desired total economic wealth equity\n    desired_total_economic_wealth_equity = human_capital * target_equity_allocation\n    \n    # Calculate total financial capital required\n    total_financial_capital_required = (desired_total_economic_wealth_equity - desired_human_capital_equity) / financial_capital + 1\n    \n    # Calculate total financial capital\n    total_financial_capital = total_financial_capital_required * financial_capital\n    \n    # Calculate financial capital equity allocation\n    financial_capital_equity_allocation = total_financial_capital - cash_short_term_investment\n    \n    # return answer\n    return financial_capital_equity_allocation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1380000.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    per = 12  # required return rate\n    g = 0.05  # growth rate after the 4th year\n    dividend_5th_year = 2.5  # dividend for the 5th year\n\n    # To calculate the present value of the dividend for the fifth year:\n    pv_5th_year = dividend_5th_year / (1 + per/100)\n\n    # To show that the dividend from the 6th year and beyond consists of a growing annuity\n    for i in range(6, 100):  # assuming around 100 years is sufficient\n        pv_growing_annuity = dividend_5th_year*(1+g)**(i-4) / (per/100 - g)\n        # Since this is a growing annuity that will run to infinity, we need to discount it back to present value\n        present_value_of_growth = pv_growing_annuity / (1 + per/100)\n        if abs(pv_growing_annuity - present_value_of_growth) < 0.01: \n            break\n\n    # The present value of the dividends received beyond the fifth and fourth years can be estimated.\n    pv_dividends = (pv_5th_year + present_value_of_growth)\n\n    # To calculate the intrinsic value, we need to consider that investors would pay no more than the present value of the expected dividends minus the absence of dividends for the first four years, which they could have paid themselves\n    intrinsic_value = pv_dividends\n    return intrinsic_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3287.777
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 5000000\n    market_interest_rate = 0.03\n    yield_rate = 0.025\n    \n    # Do math calculation to get the answer\n    if market_interest_rate > yield_rate:\n        discount = face_value * (1 - (1 + market_interest_rate) ** (-3))\n        answer = \"Discount\"\n        date = \"higher\"\n    else:\n        premium = face_value * (1 + market_interest_rate) ** 3 - face_value\n        answer = \"Premium\"\n        date = \"less\"\n    \n    # return answer\n    return f\"The bonds are most likely reported as {answer} when issued due to the market interest rate being {date} than the yield rate.\"\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "The bonds are most likely reported as Discount when issued due to the market interest rate being higher than the yield rate."
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price = 26.00\n    volatility = 0.015  # 1.5%\n    delta = -0.5\n    days = 1\n    confidence = 0.95  # 95%\n\n    # Do math calculation to get the answer\n    variance = volatility ** 2 * days\n    std_dev = variance ** 0.5\n    z_score = norm.ppf(1 - (1 - confidence), loc=0, scale=1)\n    var = (std_dev * z_score * abs(delta)) * price\n\n    # return answer\n    return var\n```\n\nNote: We use the `norm.ppf` function from the `scipy.stats` module to get the z-score for the 95% confidence level.\n\nPlease make sure to have the `scipy` library installed in your Python environment before running this code. You can install it using `pip install scipy`."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "```python\ndef solution():\n    # Define the returns for each year\n    returns = [2009, -30, 15]\n    \n    # Calculate the geometric mean\n    geometric_mean = (returns[0] + (1 + returns[1]) + (1 + returns[2])) ** (1/3) - 1\n    \n    # return answer\n    return geometric_mean\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 11.591
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 0.6  # Beta value\n    market_return = 0.15  # Market return\n    risk_free_rate = 0.08  # Risk-free rate\n\n    # Do math calculation to get the answer\n    return_on_equity = (market_return - risk_free_rate) * beta\n    expected_return = risk_free_rate + return_on_equity\n    \n    # return answer\n    return expected_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.122
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    neutral_real_policy_rate = 0.0225  # 2.25%\n    desired_inflation_rate = 0.02  # 2%\n    projected_growth_rate = 0.025  # 2.5%\n    actual_growth_rate = 0.035  # 3.5%\n    actual_inflation_rate = 0.03  # 3%\n    \n    # Do math calculation to get the nominal policy rate based on the Taylor rule\n    # Taylor rule formula: Nominal interest rate = Neutral real rate + (1/2)*(PI - 2) + (1/1)*(rg - 1)\n    nominal_policy_rate = neutral_real_policy_rate + (1/2)*(actual_inflation_rate - desired_inflation_rate) + (1/1)*(actual_growth_rate - neutral_real_policy_rate / (1 + neutral_real_policy_rate))\n    \n    # return answer\n    return nominal_policy_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.04
        }
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_inflation = 0.019\n    pe_growth = -0.012\n    income_growth = 0.018\n    real_earnings_growth = 0.027\n    change_in_shares = 0.0\n    current_three_month_bond_yield = 0.0096\n    long_term_geometric_average Market_equity_return = 0.0996\n    long_term_geometric_average_short_term_bond_return = 0.0315\n    \n    # Do math calculation to get the answer\n    expected_growth_rate = (real_earnings_growth - expected_inflation) * income_growth\n    eps_change_special_factor = ((1 + pe_growth) / (1 - expected_growth_rate)) - 1\n    erp_routing_portion = long_term_geometric_average_Market_equity_return - long_term_geometric_average_short_term_bond_return\n    grutility = erp_routing_portion * eps_change_special_factor\n    forecasters_forward_looking_erp = expected_growth_rate + grutility + change_in_shares\n    \n    # return answer\n    return forecasters_forward_looking_erp\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "To calculate the accuracy metric from the confusion matrix, we need to use the formula:\n\nAccuracy = (TP + TN) / (TP + FP + TN + FN)\n\nWhere:\n- TP: True Positives (182)\n- TN: True Negatives (96)\n- FP: False Positives (52)\n- FN: False Negatives (31)\n\nHere is the Python program to calculate the accuracy metric:\n\n```python\ndef solution():\n    # Define variables name and value\n    TP = 182  # True Positives\n    TN = 96   # True Negatives\n    FP = 52   # False Positives\n    FN = 31   # False Negatives\n    \n    # Do math calculation to get the answer\n    accuracy = (TP + TN) / (TP + FP + TN + FN)\n    \n    # return answer\n    return accuracy\n```\n\nThe output of the program will be the accuracy metric of the model."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.77
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "def solution():\n    # Define variables name and value\n    total_participants = 15\n    num_positions = 3\n    prize_levels = [100, 50, 10]\n\n    # Do math calculation to get the answer\n    import math\n    answer = math.factorial(total_participants)\n    for i in range(num_positions):\n        answer //= prize_levels[i]\n    \n    # return answer\n    return answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 26153487.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "```python\ndef solution():\n    # Define variables: delta (Δ) and gamma (Γ)\n    delta = 100000  # barrels\n    gamma = -50000  # barrels per dollar price shift\n    max_price_shift = 2.00  # dollar per barrel\n    \n    # Do math calculation to get the answer\n    # According to the delta-gamma approach, VaR is calculated as:\n    # VaR = (1/2) * Γ * (Δ) * (max_price_shift)^2\n    var = 0.5 * gamma * delta * (max_price_shift ** 2)\n    \n    # return answer\n    return var\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -10000000000.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_price = 25\n    investment = 10000\n    loan = 10000\n    margin_percentage = 0.3\n    \n    # Calculate the total investment including the loan\n    total_investment = investment + loan\n    \n    # Calculate the total amount that can be used to buy stock considering the margin\n    max_stock_value = (total_investment / stock_price) * (1 - margin_percentage)\n    \n    # Calculate the initial price that will trigger a margin call\n    margin_call_price = total_investment / (total_investment - max_stock_value)\n    \n    # Return the answer\n    return margin_call_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.029
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    aum_previous_year = 288000000  # Assets under management from the end of the previous year in dollars\n    management_fee_rate = 0.02  # 2% management fee rate\n    incentive_fee_rate = 0.20  # 20% incentive fee rate\n    high_water_mark = 357000000  # High-water mark in dollars\n    fund_yield_current_year = 0.25  # Fund yield for the current year\n    aum_current_year = 5/4 * aum_previous_year  # Assume the AUM increases by 25% from the previous year\n    \n    # Calculate the base management fee\n    base_management_fee = management_fee_rate * aum_current_year\n    \n    # Calculate the net asset value after management fee\n    nav_after_fee = aum_current_year - base_management_fee\n    \n    # Check if there's an incentive fee to be paid out\n    if nav_after_fee > high_water_mark:\n        # Calculate the excess returns above the high-water mark\n        excess_returns = nav_after_fee - high_water_mark\n        incentive_fee = incentive_fee_rate * excess_returns\n    else:\n        incentive_fee = 0\n    \n    # Calculate the total fee\n    total_fee = base_management_fee + incentive_fee\n    \n    # Return the total fee\n    return total_fee\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 7200000.0
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.9030000000000005,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "Defining variables for the portfolio's components and their respective weights, standard deviations, and correlation.\n```python\ndef solution():\n    # Define variables name and value\n    weight_x = 0.25\n    weight_y = 0.75\n    std_dev_x = 0.179\n    std_dev_y = 0.062\n    correlation = 0.5\n```\n\nNext, we will calculate the portfolio's variance using the formula for variance of a portfolio:\n\n\\[ Var(X) = w_1^2 \\times \\sigma_1^2 + w_2^2 \\times \\sigma_2^2 + 2w_1w_2\\sigma_1\\sigma_2\\rho \\]\n\nwhere:\n\n-  \\( w_1 \\) and \\( w_2 \\) are the weights of the two components,\n-  \\( \\sigma_1 \\) and \\( \\sigma_2 \\) are the standard deviations of the two components,\n-  \\(\\rho\\) is the correlation between the two components.\n\n```python\n    # Calculate portfolio variance\n    portfolio_variance = (weight_x**2) * (std_dev_x**2) + (weight_y**2) * (std_dev_y**2) + (2 * weight_x * weight_y * std_dev_x * std_dev_y * correlation)\n```\n\nThen, we take the square root of the portfolio's variance to get the portfolio's standard deviation:\n\n\\[ \\sigma_i = \\sqrt{Var(X)} \\]\n\n```python\n    # Calculate portfolio standard deviation\n    portfolio_std_dev = portfolio_variance ** 0.5\n```\n\nFinally, we return the portfolio's standard deviation as the answer. \n\n```python\n    # Return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "None"
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_asset_value = 160000000  # Initial asset value\n    instream_fee_rate = 0.02  # 2% management fee rate\n    outperformance_fee_rate = 0.20  # 20% performance fee rate\n    soft_hurdle_rate = 0.10  # 10% soft hurdle rate\n    initial_high_water_mark = 198000000  # Initial high water mark\n    asset_increase_rate = 0.25  # 25% increase in asset value\n    \n    # Do math calculation to get the end-of-year asset value\n    end_year_asset_value = initial_asset_value * (1 + asset_increase_rate)\n    \n    # Do math calculation to get the management fee\n    if end_year_asset_value >= initial_high_water_mark:\n        free_capacity = initial_high_water_mark - initial_asset_value\n        fee_base = max(0, end_year_asset_value - initial_high_water_mark)\n    else:\n        fee_base = end_year_asset_value\n    \n    incentive_fee = outperformance_fee_rate * fee_base\n    gross_fee = instream_fee_rate * end_year_asset_value\n    total_fees = gross_fee + incentive_fee\n    \n    # return answer\n    return round(total_fees)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4400000.0
        }
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "To calculate the growth rate of Real Estate #1, we can use the DCF (Discounted Cash Flow) assumptions provided in the table. We'll assume the growth rate is constant at 2.25% (this can be inferred from the provided numbers), and we'll also use the year 2 NOI and year 1 NOI to calculate the growth rate.\n\n```python\ndef solution():\n    # Define variables name and value\n    year2_noi = 2859119\n    year1_noi = 2775840\n\n    # Do math calculation to get the answer\n    growth_rate = ((year2_noi - year1_noi) / year1_noi) * 100\n    growth_rate = round(growth_rate, 2)  # Round the growth rate to 2 decimal places\n\n    # return answer\n    return growth_rate\n```\n\nThis Python program will calculate the growth rate of Real Estate #1 based on the NOI in Year 1 and Year 2."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.0
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    w_x = 0.3  # weight of asset X\n    w_y = 0.7  # weight of asset Y\n    std_x = 0.25  # standard deviation for asset X\n    std_y = 0.1  # standard deviation for asset Y\n    corr = 0.8  # correlation coefficient\n    \n    # Do math calculation to get the answer\n    std_portfolio = (w_x**2 * std_x**2) + (w_y**2 * std_y**2) + 2*w_x*w_y*std_x*std_y*corr\n    sqrt_std_portfolio = std_portfolio ** 0.5\n    \n    # return answer\n    return sqrt_std_portfolio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.138
        }
    }
]