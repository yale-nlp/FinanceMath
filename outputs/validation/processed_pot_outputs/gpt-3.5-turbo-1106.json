[
    {
        "question_id": "validation-0",
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    original_cost_truck = 57000\n    estimated_salvage_value_truck = 15000\n    depreciation_rate = 0.20\n    current_fair_value_truck = 27000\n    \n    # Calculate accumulated depreciation\n    accumulated_depreciation = original_cost_truck - estimated_salvage_value_truck - current_fair_value_truck\n    \n    # Calculate book value\n    book_value = original_cost_truck - accumulated_depreciation\n    \n    # Calculate loss\n    loss = book_value - current_fair_value_truck\n    \n    # return answer\n    return loss\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 15000.0
        }
    },
    {
        "question_id": "validation-1",
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "tables": [],
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    spot_exchange_rate = 2.0979\n    libor_interest_rate_sterling = 0.016025\n    libor_interest_rate_kiwi = 0.032875\n    days_to_maturity = 180\n\n    # Calculate the 180-day forward points\n    forward_points = (spot_exchange_rate * ((1 + (libor_interest_rate_sterling * (days_to_maturity / 360))) / (1 + (libor_interest_rate_kiwi * (days_to_maturity / 360))))) - spot_exchange_rate\n\n    # Return the answer with precision of four decimal places\n    return round(forward_points, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.017
        }
    },
    {
        "question_id": "validation-2",
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    covariance_with_GIM = 0.0075\n    integration_with_GIM = 0.60\n    sharpe_ratio_GIM = 0.36\n    sharpe_ratio_RF = 0.031  # Risk-free rate\n    ER_GIM = 0.072  # Expected return for the GIM\n\n    # Calculate the beta using the international capital asset pricing model (ICAPM)\n    beta_US_real_estate = (sharpe_ratio_GIM - sharpe_ratio_RF) / (integration_with_GIM * (ER_GIM - sharpe_ratio_RF))\n\n    # Return the beta for U.S. real estate equities\n    return beta_US_real_estate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 13.374
        }
    },
    {
        "question_id": "validation-3",
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement? (2019 mock PM)",
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    spot_at_initiation = 1.3983\n    three_months_forward = -21.0\n    six_months_forward = -26.2\n    \n    forward_points_change = six_months_forward - three_months_forward\n    cash_expenditure = 200000 * (forward_points_change / 10000) * spot_at_initiation\n    \n    return cash_expenditure\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -145.423
        }
    },
    {
        "question_id": "validation-4",
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "tables": [],
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables\n    market_worth = 3700000\n    daily_fluctuation = 0.0004\n    trading_days_per_year = 250\n    confidence_level = 95/100  # Convert confidence level to decimal\n\n    # Calculate the yearly standard deviation\n    yearly_std_deviation = daily_fluctuation * math.sqrt(trading_days_per_year)\n\n    # Calculate the Z-score for the confidence level\n    z_score = -1.645  # Z-score for 95% confidence level\n\n    # Calculate the 1-year VaR\n    var = market_worth * yearly_std_deviation * z_score\n\n    # Return the answer\n    return var\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -38494.406
        }
    },
    {
        "question_id": "validation-5",
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "tables": [],
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    P_failure = 0.40\n    P_success = 0.55\n    P_success_given_survival = 0.85\n    \n    # Do math calculation to get the answer\n    P_failure_survival = 1 - P_success_given_survival\n    P_success_given_failure = (P_success - P_success_given_survival * (1 - P_failure)) / P_failure\n    \n    # return answer\n    return P_success_given_failure\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.1
        }
    },
    {
        "question_id": "validation-6",
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables for market shares\n    zeta_share = 35\n    yusef_share = 25\n    xenon_share = 20\n\n    # Do math calculation to get the answer\n    hhi_index = zeta_share**2 + yusef_share**2 + xenon_share**2\n\n    # Return answer\n    return hhi_index\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2250.0
        }
    },
    {
        "question_id": "validation-7",
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "tables": [],
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    fixed_rate = 1.00\n    treasury_yield = 0.63\n    \n    swap_spread = fixed_rate - treasury_yield\n    \n    return swap_spread\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.37
        }
    },
    {
        "question_id": "validation-8",
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    acquisition_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    accumulated_amortization = 0\n    \n    # Calculate annual amortization\n    annual_amortization = (acquisition_cost - residual_value) / useful_life\n    \n    # Calculate accumulated amortization at the end of 2016\n    accumulated_amortization = annual_amortization * 4  # 4 years since acquisition\n    \n    # Return answer\n    return accumulated_amortization\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 400000.0
        }
    },
    {
        "question_id": "validation-9",
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "tables": [],
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    jan_correlation = 0.27\n    mean_reversion = 0.775\n    jan_mean = 0.35\n    \n    feb_correlation = mean_reversion * (jan_mean - jan_correlation) + jan_correlation\n    \n    return feb_correlation\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.332
        }
    },
    {
        "question_id": "validation-10",
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "tables": [],
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    dividends_year1 = 0.5\n    dividends_year2 = 0.5 * (1 + 0.06)\n    dividends_growth_rate = 0.06\n    rate_of_return = 0.10\n    \n    # Calculate present value of dividends\n    present_value = dividends_year1 / (1 + rate_of_return) + dividends_year2 / ((1 + rate_of_return) ** 2)\n    future_value = (dividends_year2 * (1 + dividends_growth_rate)) / (rate_of_return - dividends_growth_rate)\n    \n    # Calculate worth of common equity\n    worth_of_equity = present_value + future_value / ((1 + rate_of_return) ** 2)\n    \n    # return answer\n    return worth_of_equity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 12.5
        }
    },
    {
        "question_id": "validation-11",
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "tables": [],
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    marginal_cost = 30\n    average_cost = 50\n    price_elasticity = 1.8\n    \n    # Do math calculation to get the answer\n    most_probable_price = (price_elasticity / (price_elasticity + 1)) * average_cost\n    \n    # return answer\n    return most_probable_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 32.143
        }
    },
    {
        "question_id": "validation-12",
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables with provided values\n    total_revenue = 460000\n    value_building_start = 320000\n    value_building_end = 270000\n    cost_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Calculate the change in value of buildings and machinery\n    change_value_building = value_building_end - value_building_start\n    \n    # Calculate the economic profit\n    economic_profit = total_revenue - (change_value_building + cost_raw_materials + wages_paid + normal_profit)\n    \n    # return economic profit\n    return economic_profit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 350000.0
        }
    },
    {
        "question_id": "validation-13",
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    ebitda = 1349\n    depreciation_expense = 243\n    interest_expense = 186\n    tax_expense = 294\n    capital_expenditure = 535\n    change_in_net_working_capital = (1290-1199) - (2783-2678)\n    net_income = 626\n    dividends = 148\n    # Calculate FCFF\n    fcff = ebitda - tax_expense + depreciation_expense - (capital_expenditure - change_in_net_working_capital) + interest_expense - (net_income - dividends)\n    \n    # Return answer\n    return fcff\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 457.0
        }
    },
    {
        "question_id": "validation-14",
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    carrying_value = 500000\n    fair_value = 480000\n    value_in_use = 440000\n    \n    recoverable_amount = min(fair_value, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    \n    return impairment_loss\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 60000.0
        }
    },
    {
        "question_id": "validation-15",
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    coupon_rate = 0.03\n    interest_paid = 2  # semiannually\n    mature_time = 3  # years\n    required_rate_of_return = 0.05\n    par_value = 100\n    \n    # Calculate present value of bond\n    period = mature_time * interest_paid\n    discount_rate = required_rate_of_return / interest_paid\n    pv_factor = (1 - (1 + discount_rate) ** (-period)) / discount_rate\n    pv_coupons = coupon_rate * par_value * pv_factor\n    pv_par_value = par_value / ((1 + discount_rate) ** period)\n    bond_price = pv_coupons + pv_par_value\n    \n    return bond_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 102.754
        }
    },
    {
        "question_id": "validation-16",
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "tables": [],
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    units_in_october = 10000\n    cost_per_unit_october = 10\n    units_in_november = 5000\n    cost_per_unit_november = 11\n    units_sold = 12000\n    selling_price_per_unit = 15\n    \n    # Calculate cost of goods sold using FIFO method\n    cost_of_goods_sold = (units_in_october * cost_per_unit_october) + (min(units_in_november, units_sold-units_in_october) * cost_per_unit_november)\n    \n    # return answer\n    return cost_of_goods_sold\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 122000.0
        }
    },
    {
        "question_id": "validation-17",
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.102,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    good_return_1 = 20 * 70 / 100\n    good_return_2 = 10 * 70 / 100\n    bad_return_1 = 5 * 30 / 100\n    bad_return_2 = -10 * 30 / 100\n    \n    anticipated_return = (good_return_1 + good_return_2 + bad_return_1 + bad_return_2) / 100\n    \n    # return answer\n    return anticipated_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.195
        }
    },
    {
        "question_id": "validation-18",
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "tables": [],
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define LIFO and LIFO reserve\n    beginning_inventory = 200000\n    beginning_lifo_reserve = 30000\n    ending_inventory = 250000\n    ending_lifo_reserve = 40000\n    tax_rate = 0.30\n    \n    # Calculate FIFO value at the end of 2017\n    fifo_beginning_inventory = beginning_inventory + beginning_lifo_reserve\n    fifo_ending_inventory = ending_inventory + ending_lifo_reserve\n    \n    # Calculate tax impact\n    tax_impact = (fifo_ending_inventory - fifo_beginning_inventory) * tax_rate\n    \n    # Calculate FIFO ending inventory after tax impact\n    fifo_ending_inventory_after_tax = fifo_ending_inventory - tax_impact\n    \n    # Return FIFO ending inventory after tax impact\n    return fifo_ending_inventory_after_tax\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 272000.0
        }
    },
    {
        "question_id": "validation-19",
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "tables": [],
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    maturity = 15\n    market_rate = 4.5 / 100\n    \n    # Calculate cost per 100 of par value for zero-coupon bond\n    cost_per_100 = 100 / ((1 + market_rate) ** maturity)\n    \n    # Return the result\n    return cost_per_100\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 51.672
        }
    },
    {
        "question_id": "validation-20",
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "tables": [],
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n    \n    # Do math calculation to get the answer\n    call_price = carrying_value + gain_on_redemption\n    \n    # return answer\n    return call_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1050000.0
        }
    },
    {
        "question_id": "validation-21",
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables for the spot rates\n    usd_eur_rate = 1.3860\n    eur_cad_rate = 0.6125\n    usd_gbp_rate = 1.4208\n    \n    # Calculate the cross-rate for EUR/GBP using the provided spot rates\n    eur_gbp_cross_rate = usd_eur_rate * (1 / usd_gbp_rate)\n    \n    # Return the cross rate for EUR/GBP\n    return eur_gbp_cross_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.976
        }
    },
    {
        "question_id": "validation-22",
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define the spot rates\n    spot_rate_two_year = 3.00 / 100\n    spot_rate_three_year = 3.50 / 100\n    \n    # Calculate the implied spot rate for the five-year\n    spot_rate_five_year = (((1 + spot_rate_two_year) * (1 + spot_rate_three_year) ** 2) ** (1/3)) - 1\n    \n    # Return the five-year spot rate\n    return spot_rate_five_year * 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.333
        }
    },
    {
        "question_id": "validation-23",
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "tables": [],
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    r0 = 0.08\n    rp = 0.004\n    p_up = 0.5\n    r_up = 0.1\n    p_down = 0.5\n    r_down = 0.06\n    T = 2\n    FV = 1000\n\n    # Calculate the expected future 1-year interest rate\n    r1 = p_up * r_up + p_down * r_down\n\n    # Calculate the present value of the zero-coupon bond\n    B = FV / (1 + r0 + rp) ** 1 + FV / (1 + r1 + rp) ** 2\n\n    # Return the bond's valuation\n    return round(B, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1773.53
        }
    },
    {
        "question_id": "validation-24",
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.938,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    n1 = 25\n    x1 = 200\n    s1 = 45\n    n2 = 18\n    x2 = 185\n    s2 = 60\n\n    pooled_variance = ((n1 - 1) * s1**2 + (n2 - 1) * s2**2) / (n1 + n2 - 2)\n\n    # Do math calculation to get the answer\n    t_statistic = (x1 - x2) / math.sqrt(pooled_variance * (1/n1 + 1/n2))\n\n    # return answer\n    return t_statistic\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.938
        }
    },
    {
        "question_id": "validation-25",
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    revenue = 56800\n    decrease_in_acc_receivable = -1324\n    increase_in_acc_payable = 1063\n    \n    cash_paid_to_suppliers = revenue - decrease_in_acc_receivable - increase_in_acc_payable\n    return cash_paid_to_suppliers\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 57061.0
        }
    },
    {
        "question_id": "validation-26",
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "tables": [],
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables \n    options_granted = 20000\n    option_price_grant_day = 2.5\n    average_option_price = 2.8\n    fair_value_stock_grant_day = 15\n    \n    # Calculate the total compensation expense\n    total_option_expense = options_granted * (average_option_price - option_price_grant_day)\n    \n    # Return answer\n    return total_option_expense\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6000.0
        }
    },
    {
        "question_id": "validation-27",
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "tables": [],
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    adjusted_period = 7.020\n    convexity = 65.180\n    decrease_in_yield = 0.0025  # 25 basis points = 0.0025 in decimal\n    \n    # Do math calculation to get the answer\n    percentage_change_in_price = -adjusted_period * convexity * (decrease_in_yield * 100) * 100\n    \n    # return answer\n    return percentage_change_in_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -11439.09
        }
    },
    {
        "question_id": "validation-28",
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "tables": [],
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividend = 30 * 0.058  # Preferred stock dividend at 5.80%\n    required_return = 0.05  # Return rate\n    intrinsic_value = dividend / required_return  # Calculation of intrinsic value\n    \n    # return answer\n    return intrinsic_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 34.8
        }
    },
    {
        "question_id": "validation-29",
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "tables": [],
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    initial_value = 400\n    risk_free_rate = 0.05\n    continuous_dividend = 0.03\n    time_to_maturity = 0.5\n    \n    # Do math calculation to get the answer\n    forward_price = initial_value * math.exp((risk_free_rate - continuous_dividend) * time_to_maturity)\n    \n    # return answer\n    return forward_price\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 404.02
        }
    },
    {
        "question_id": "validation-30",
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "tables": [],
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nfrom math import sqrt\ndef solution():\n    # Define variables\n    sample_std_dev = 4.9  # in percentage\n    null_hypothesis_std_dev = 5.0  # in percentage\n    sample_size = 36\n    \n    # Calculate the test statistic's value using the formula for t-test\n    test_statistic = (sample_std_dev - null_hypothesis_std_dev) / (sample_std_dev / sqrt(sample_size))\n    \n    # return the test statistic's value\n    return test_statistic\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.122
        }
    },
    {
        "question_id": "validation-31",
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    net_income_2008 = 485\n    depreciation_expense_2008 = 270\n    change_in_fixed_assets = 4275 - 3752\n    change_in_working_capital = (1988 - 1806) - ((770-711) + (846-780) + (372-315))\n    capital_expenditure = depreciation_expense_2008 + change_in_fixed_assets\n    working_capital_investment = change_in_working_capital\n    \n    # Calculate Free Cash Flow to Equity (FCFE)\n    FCFE = net_income_2008 - (capital_expenditure - depreciation_expense_2008) - working_capital_investment\n    \n    # Convert FCFE to millions\n    FCFE_millions = FCFE / 1000000\n    \n    # Return FCFE in millions\n    return FCFE_millions\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.0
        }
    },
    {
        "question_id": "validation-32",
        "question": "Can you determine the sustainable growth rate, please?",
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.144,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    net_profit_margin = 0.20\n    retention_rate = 0.60\n    asset_turnover = 0.8\n    financial_leverage_multiplier = 1.5\n    \n    sustainable_growth_rate = net_profit_margin * retention_rate * asset_turnover * financial_leverage_multiplier\n    \n    return sustainable_growth_rate\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.144
        }
    },
    {
        "question_id": "validation-33",
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    CNY_HKD = 0.8422\n    CNY_ZAR = 0.9149\n    \n    # Do math calculation to get the answer\n    ZAR_HKD = CNY_ZAR / CNY_HKD\n    \n    # return answer\n    return ZAR_HKD\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.086
        }
    },
    {
        "question_id": "validation-34",
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "tables": [],
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define decay factor\n    decay_factor = 0.95\n\n    # Calculate weight using the decay factor\n    weight = (1 - decay_factor) * decay_factor ** 3\n\n    # return answer\n    return weight\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.043
        }
    },
    {
        "question_id": "validation-35",
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "tables": [],
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 180000\n    interest_rate = 0.10\n    time_years = 2\n    compound_periods_per_year = 365\n    \n    # Do math calculation to get the answer\n    worth = principal * ((1 + interest_rate/compound_periods_per_year)**(compound_periods_per_year*time_years))\n    \n    # return answer\n    return worth\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 219846.474
        }
    },
    {
        "question_id": "validation-36",
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_inventory = 20\n    initial_cost = 5.00\n    purchases = [(70, 5.20), (35, 5.50)]\n    sales = [(50, 6.00), (40, 6.50)]\n    \n    # Do math calculation to get the answer\n    remaining_inventory = initial_inventory\n    total_cost_of_goods_sold = 0\n    total_sales_revenue = 0\n\n    for sale in sales:\n        units_sold, selling_price = sale\n        units_to_sell = units_sold\n        for purchase in purchases:\n            if units_to_sell == 0:\n                break\n            units, unit_cost = purchase\n            if units <= units_to_sell:\n                units_to_sell -= units\n                total_cost_of_goods_sold += units * unit_cost\n                remaining_inventory -= units\n            else:\n                total_cost_of_goods_sold += units_to_sell * unit_cost\n                remaining_inventory -= units_to_sell\n                units_to_sell = 0\n\n        total_sales_revenue += units_sold * selling_price\n    \n    gross_profit = total_sales_revenue - total_cost_of_goods_sold\n\n    # return answer\n    return gross_profit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 92.0
        }
    },
    {
        "question_id": "validation-37",
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "tables": [],
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    annual_dividend = 1.72\n    growth_rate = 0.04\n    discount_rate = 0.10\n\n    dividend_in_fourth_year = annual_dividend / (discount_rate - growth_rate)\n    intrinsic_value = dividend_in_fourth_year / ((1 + discount_rate)**3)\n    \n    return intrinsic_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 21.538
        }
    },
    {
        "question_id": "validation-38",
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "tables": [],
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    payout_ratio = 0.50\n    growth_rate = 0.10\n    return_rate = 0.15\n    \n    leading_pe_ratio = (payout_ratio * (1 + growth_rate)) / (return_rate - growth_rate)\n    \n    return leading_pe_ratio\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 11.0
        }
    },
    {
        "question_id": "validation-39",
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "tables": [],
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 300\n    discount_rate = 0.04\n    years = 5\n    \n    # Do math calculation to get the answer\n    present_value = annual_payment * ((1 - (1 + discount_rate)**-years) / discount_rate)\n    \n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1335.547
        }
    },
    {
        "question_id": "validation-40",
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "tables": [],
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    loss_from_sale = 15000\n    \n    # Calculate the gain from the sale\n    gain_from_sale = initial_price - accumulated_depreciation - loss_from_sale\n    \n    # return answer\n    return gain_from_sale\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 25000.0
        }
    },
    {
        "question_id": "validation-41",
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "tables": [],
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    total_liabilities = 35  # in millions\n    total_equity = 55  # in millions\n    \n    # Calculate the percentage of total liabilities on the balance sheet\n    total_assets = total_liabilities + total_equity\n    liabilities_percentage = (total_liabilities / total_assets) * 100\n    \n    # Return the answer\n    return liabilities_percentage\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 38.889
        }
    },
    {
        "question_id": "validation-42",
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "tables": [],
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Calculate intrinsic value using the Gordon Growth Model\n    intrinsic_value = dividend / (required_rate_of_return - growth_rate)\n    \n    # Return intrinsic value\n    return intrinsic_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 33.333
        }
    },
    {
        "question_id": "validation-43",
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    PV0 = 99.41172\n    PV_plus = 99.32213\n    PV_minus = 99.50132\n    delta_yield = 1  # in basis points\n    delta_curve = 3   # in basis points\n    \n    # Do math calculation to get the answer\n    convexity = (PV_plus + PV_minus - 2*PV0) / (PV0 * (delta_yield/10000)**2)\n    \n    # Return answer\n    return convexity\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 10.059
        }
    },
    {
        "question_id": "validation-44",
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    domestic_return = 25\n    benchmark_domestic = 15\n    domestic_weight = 0.5\n    benchmark_weight_domestic = 0.35\n\n    bond_return = 9\n    benchmark_bond = 5\n    bond_weight = 0.3\n    benchmark_weight_bond = 0.35\n\n    international_return = 15\n    benchmark_international = 18\n    international_weight = 0.2\n    benchmark_weight_international = 0.3\n\n    portfolio_return = (domestic_return * domestic_weight) + (bond_return * bond_weight) + (international_return * international_weight)\n    benchmark_return = (benchmark_domestic * benchmark_weight_domestic) + (benchmark_bond * benchmark_weight_bond) + (benchmark_international * benchmark_weight_international)\n\n    value_added = portfolio_return - benchmark_return\n    \n    return value_added\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 5.8
        }
    },
    {
        "question_id": "validation-45",
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "tables": [],
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.948,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_rate = 1.0123\n    forward_points_percentage = 6.8 / 100\n    time_period_in_years = 0.25  # 3 months = 0.25 years\n    \n    # Do math calculation to get the answer\n    forward_points = forward_rate * forward_points_percentage\n    spot_rate = forward_rate - forward_points / time_period_in_years\n    \n    # return answer\n    return spot_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.737
        }
    },
    {
        "question_id": "validation-46",
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    earnings_per_share = 1.17\n    price_ffo_ratio = 11.5\n    share_price = earnings_per_share * price_ffo_ratio\n    return share_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 13.455
        }
    },
    {
        "question_id": "validation-47",
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "tables": [],
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    total_secondary_quality_loans = 1000\n    total_top_quality_loans = 600\n    delayed_secondary_quality_loans = 200\n    delayed_top_quality_loans = 48\n    \n    # Calculate the probability\n    probability_secondary = delayed_secondary_quality_loans / (delayed_secondary_quality_loans + delayed_top_quality_loans)\n    \n    # Return answer\n    return probability_secondary\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.806
        }
    },
    {
        "question_id": "validation-48",
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "tables": [],
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables\n    stock_price = 26.00\n    volatility_rate = 0.015\n    delta = -0.5\n    z_score = 1.645  # Z-score for 95% confidence level\n\n    # Calculate VaR using delta-normal method\n    VaR = stock_price * volatility_rate * math.sqrt(1) * delta * z_score\n\n    # return answer\n    return VaR\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": -0.321
        }
    },
    {
        "question_id": "validation-49",
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    issuance_of_preferred_stock = 45000\n    repurchase_of_common_stock = -20000\n    issuance_of_bonds = 40000\n    debt_retired_through_issuance_of_common_stock = -45000\n    paid_off_long_term_bank_borrowings = -10000\n\n    # Do math calculation to get the answer\n    cash_flow_from_financing_activities = (issuance_of_preferred_stock + repurchase_of_common_stock \n                                          + issuance_of_bonds + debt_retired_through_issuance_of_common_stock \n                                          + paid_off_long_term_bank_borrowings)\n    \n    # return answer\n    return cash_flow_from_financing_activities\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 10000.0
        }
    },
    {
        "question_id": "validation-50",
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "tables": [],
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    face_value = 1000\n    coupon_rate = 0.05\n    annual_periods = 3\n    spot_rates = [0.036, 0.037, 0.038]\n    \n    # Calculate present value of bond using spot rates\n    present_value = 0\n    for i in range(annual_periods):\n        present_value += (face_value * coupon_rate) / ((1 + spot_rates[i])** (i + 1))\n    present_value += face_value / ((1 + spot_rates[annual_periods - 1])** (annual_periods))\n    \n    # return present value of bond\n    return present_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1033.61
        }
    },
    {
        "question_id": "validation-51",
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    actual_return_plan_assets = 3100\n    employer_contributions = 1200\n    \n    # Calculate the benefit payment given out during the year\n    benefit_payment = benefit_obligation_beginning - benefit_obligation_end + actual_return_plan_assets - employer_contributions\n    \n    # return answer\n    return benefit_payment\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -1495.0
        }
    },
    {
        "question_id": "validation-52",
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "tables": [],
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport scipy.stats as stats\n\ndef solution():\n    # Define variables name and value\n    mean = 160000\n    std_dev = 30000\n    target_return = 100000\n    \n    # Calculate the z-score of the target return\n    z_score = (target_return - mean) / std_dev\n    \n    # Use the cumulative distribution function to find the percentage below the target return\n    percentage_below_target = stats.norm.cdf(z_score) * 100\n    \n    # return answer\n    return percentage_below_target\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": "2.2750131948179195"
        }
    },
    {
        "question_id": "validation-53",
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "tables": [],
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    minimum_margin_requirement = 0.65\n    maximum_leverage_ratio = 1 / minimum_margin_requirement\n    return maximum_leverage_ratio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.538
        }
    },
    {
        "question_id": "validation-54",
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "tables": [],
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    price_of_water = 5\n    quantity_of_water = 30 - 2 * price_of_water\n    \n    # Calculate the price elasticity of demand\n    elasticity_of_demand = -2 * price_of_water / quantity_of_water\n    \n    # Return the answer\n    return elasticity_of_demand\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": -0.5
        }
    },
    {
        "question_id": "validation-55",
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "tables": [],
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    flotation_cost_percentage = 5.0 / 100\n    issue_price = 14.69\n    next_year_dividend = 0.32\n    dividend_growth_rate = 10 / 100\n    \n    cost_of_external_equity = (next_year_dividend * (1 + dividend_growth_rate) / issue_price) + flotation_cost_percentage\n    return cost_of_external_equity * 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 7.396
        }
    },
    {
        "question_id": "validation-56",
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "tables": [],
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    management_fee = 0.32 / 100  # Annual management fee in decimal\n    trading_fees = 0.20 / 100  # Round-trip trading fees in decimal\n    bid_offer_spread = 0.10 / 100  # Bid-offer spread in decimal\n\n    # Do math calculation to get the answer\n    holding_period_cost = (management_fee * 9/12) + (trading_fees * 2) + (bid_offer_spread * 2)\n\n    # return answer\n    return holding_period_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.008
        }
    },
    {
        "question_id": "validation-57",
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "tables": [],
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    current_value = 515\n    end_value = 602.5\n    hurdle_rate = 0.05\n    high_water_mark = 540\n\n    # Calculate the gross return\n    gross_return = (end_value - current_value) / current_value\n\n    # Calculate the management fee\n    management_fee = 0.02 * end_value\n\n    # Adjust high-water mark if new value exceeds the previous high-water mark\n    new_high_water_mark = max(end_value, high_water_mark)\n\n    # Calculate the incentive fee\n    if new_high_water_mark * (1 + hurdle_rate) < end_value:\n        incentive_fee = 0.2 * (end_value - new_high_water_mark * (1 + hurdle_rate))\n    else:\n        incentive_fee = 0\n\n    # Calculate the investor's net return\n    net_return = gross_return - management_fee - incentive_fee\n\n    return net_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -11.88
        }
    },
    {
        "question_id": "validation-58",
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 1500000\n    common_stock_shares = 1000000\n    convertible_bonds_shares = 300000\n    convertible_bonds_interest = 0.04 * 10000000 * (1 - 0.30)\n    preferred_stock_dividend = 0.07 * 2000000 * (1 - 0.30)\n    \n    # Do math calculation to get the answer\n    diluted_income = net_income + convertible_bonds_interest + preferred_stock_dividend\n    diluted_shares = common_stock_shares + convertible_bonds_shares\n    \n    diluted_eps = diluted_income / diluted_shares\n    \n    # return answer\n    return diluted_eps\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.445
        }
    },
    {
        "question_id": "validation-59",
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "tables": [],
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    investment_return = 15.5 / 100\n    stocks_sold_price = 24\n    dividend = 2500\n    stocks_amount = 10000\n    \n    # Calculate the total return from selling the stocks\n    total_return = stocks_sold_price * stocks_amount + dividend\n    \n    # Calculate the initial investment cost per stock\n    cost_per_stock = (total_return / (1 + investment_return)) / stocks_amount\n    \n    # return answer\n    return cost_per_stock\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 20.996
        }
    },
    {
        "question_id": "validation-60",
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "tables": [],
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    initial_futures_price = 865.0\n    rolled_short_term_price = 877.0\n    rolled_long_term_price = 883.0\n    annualized_rate = 0.60 / 100\n    time_period = 3 / 12\n    \n    initial_collateral = initial_futures_price * 1\n    rolled_collateral = rolled_short_term_price * 1 + rolled_long_term_price * (1 - (1 + annualized_rate * time_period))\n\n    total_return = (rolled_collateral - initial_collateral) / initial_collateral * 100\n    \n    return total_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.234
        }
    },
    {
        "question_id": "validation-61",
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "tables": [],
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    initial_cap_rate = 0.055\n    ending_cap_rate = 0.06\n    discount_rate = 0.0725\n    \n    # Calculate growth rate using DCF formula: Growth rate = (Ending Cap Rate - Discount Rate) / (1 - Discount Rate)\n    growth_rate = (ending_cap_rate - discount_rate) / (1 - discount_rate)\n    \n    # Return growth rate\n    return growth_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.013
        }
    },
    {
        "question_id": "validation-62",
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    cost_of_equipment = 5000000\n    estimated_residual_value = 500000\n    expected_useful_life = 9\n    total_productive_capacity = 950000\n    production_in_FY2015 = 150000\n    expected_production_next_8_years = 100000\n    \n    depreciation_expense_initial_year = (cost_of_equipment - estimated_residual_value) * (production_in_FY2015 / total_productive_capacity)\n    \n    return depreciation_expense_initial_year\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 710526.316
        }
    },
    {
        "question_id": "validation-63",
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    earnings_per_share = 0.78\n    price_to_ffo_multiple = 13\n    \n    # Do math calculation to get the answer\n    share_price = earnings_per_share * price_to_ffo_multiple\n    \n    # return answer\n    return share_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 10.14
        }
    },
    {
        "question_id": "validation-64",
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "tables": [],
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    marginal_cost = 40\n    average_cost = 70\n    elasticity_of_demand = 1.5\n    \n    # Calculate the price using the markup pricing formula\n    price = marginal_cost + (marginal_cost / (elasticity_of_demand + 1))\n    \n    # Return the price\n    return price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 56.0
        }
    },
    {
        "question_id": "validation-65",
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "tables": [],
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    F = 100\n    market_price = 97\n    coupon_rate = 0.01 + 0.008\n\n    # Calculate the dirty price\n    dirty_price = market_price + (coupon_rate * F / 2)\n\n    # Calculate the yield\n    yield_to_maturity = (F / dirty_price) ** (1/2) - 1\n\n    # Calculate the discount margin\n    discount_margin = (yield_to_maturity - 0.01) * 10000\n\n    # Return answer\n    return discount_margin\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6.683
        }
    },
    {
        "question_id": "validation-66",
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables and their given values\n    intercept_coefficient = 0.0477\n    underwriter_rank = 6\n    underwriter_coefficient = 0.0150\n    pre_offer_adjustment = 0.04\n    pre_offer_coefficient = 0.4350\n    offer_size = 40\n    offer_size_coefficient = -0.0009\n    fraction_retained = 0.70\n    fraction_retained_coefficient = 0.0500\n\n    # Do math calculation to get the anticipated initial return\n    anticipated_initial_return = intercept_coefficient + (underwriter_rank * underwriter_coefficient) + (pre_offer_adjustment * pre_offer_coefficient) + (offer_size * offer_size_coefficient) + (fraction_retained * fraction_retained_coefficient)\n    \n    # return the anticipated initial return\n    return anticipated_initial_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.154
        }
    },
    {
        "question_id": "validation-67",
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "tables": [],
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    initial_investment = 10000  # in dollars\n    holding_period = 9  # in months\n    annual_management_fee = 0.40 / 100\n    round_trip_trading_commissions = 0.55 / 100\n    bid_offer_spread = 0.20 / 100\n\n    # Calculate the projected total cost for the holding period\n    management_fee = (initial_investment * annual_management_fee) * (holding_period / 12)\n    trading_commissions = initial_investment * round_trip_trading_commissions * 2\n    bid_offer_spread_cost = initial_investment * bid_offer_spread * 2\n    \n    total_cost = management_fee + trading_commissions + bid_offer_spread_cost\n    \n    return total_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 180.0
        }
    },
    {
        "question_id": "validation-68",
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 1000\n    return_2008 = 14\n    return_2009 = -10\n    return_2010 = -2\n    \n    # Do math calculation to get the answer\n    holding_period_return = ((1 + return_2008/100) * (1 + return_2009/100) * (1 + return_2010/100) - 1) * 100\n    \n    # return answer\n    return holding_period_return\n\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.548
        }
    },
    {
        "question_id": "validation-69",
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    imports = 2.2\n    gross_private_domestic_investment = 6.0\n    exports = 1.8\n    \n    # Do math calculation to get the answer\n    gross_domestic_product = consumption + capital_consumption_allowance + government_spending + gross_private_domestic_investment - imports + exports\n    \n    # return answer\n    return gross_domestic_product\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 31.7
        }
    },
    {
        "question_id": "validation-70",
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    w1 = 0.30  # Weight of Stock 1\n    w2 = 0.70  # Weight of Stock 2\n    sd1 = 0.12  # Standard deviation of Stock 1\n    sd2 = 0.25  # Standard deviation of Stock 2\n    correlation = 0.20  # Correlation\n    \n    # Calculate the standard deviation of the portfolio using the formula: sd_portfolio = ((w1*sd1)^2 + (w2*sd2)^2 + 2*w1*w2*sd1*sd2*correlation)^(1/2)\n    sd_portfolio = ((w1*sd1)**2 + (w2*sd2)**2 + 2*w1*w2*sd1*sd2*correlation)**0.5\n\n    # return answer\n    return sd_portfolio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.186
        }
    },
    {
        "question_id": "validation-71",
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    working_capital_balance = 22000000\n    fair_value_fixed_assets = 57000000\n    normalized_income = 89000000\n    required_return_working_capital = 0.06\n    required_return_fixed_assets = 0.09\n    required_return_intangible_assets = 0.25\n    future_growth_rate = 0.07\n    \n    excess_earning_working_capital = working_capital_balance * required_return_working_capital\n    excess_earning_fixed_assets = fair_value_fixed_assets * required_return_fixed_assets\n    excess_earning = normalized_income - (excess_earning_working_capital + excess_earning_fixed_assets)\n    \n    value_of_intangibles = excess_earning / (required_return_intangible_assets - future_growth_rate)\n    \n    return value_of_intangibles\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 458611111.111
        }
    },
    {
        "question_id": "validation-72",
        "question": "Considering the provided financial statement information, can you determine the cash conversion cycle (net operating cycle) for this particular business? What is the cash conversion cycle (net operating cycle) of this specific business?",
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    credit_sales = 40000  # in Millions\n    cost_of_goods_sold = 30000  # in Millions\n    accounts_receivable = 3000  # in Millions\n    inventory_beginning_balance = 1500  # in Millions\n    inventory_ending_balance = 2000  # in Millions\n    accounts_payable = 4000  # in Millions\n\n    # Do math calculation to get the answer\n    days_sales_outstanding = (accounts_receivable / credit_sales) * 365\n    days_inventory_outstanding = ((inventory_beginning_balance + inventory_ending_balance) / 2 / cost_of_goods_sold) * 365\n    days_payable_outstanding = (accounts_payable / cost_of_goods_sold) * 365\n    cash_conversion_cycle = days_sales_outstanding + days_inventory_outstanding - days_payable_outstanding\n\n    # return answer\n    return cash_conversion_cycle\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "question_id": "validation-73",
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "tables": [],
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 8000000  # $5 million + $3 million\n    annual_depreciation = (initial_investment - 10000) / 20\n    \n    # Do math calculation to get the answer\n    book_value_2014 = initial_investment - (1 * annual_depreciation)  # Assuming 2014 is the first year\n    \n    # return answer\n    return book_value_2014\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 7600500.0
        }
    },
    {
        "question_id": "validation-74",
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "tables": [],
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    outcomes = [7, 8, 9, 10]\n    mean = sum(outcomes) / len(outcomes)\n    \n    # Do math calculation to get the answer\n    variance = sum((x - mean) ** 2 for x in outcomes) / len(outcomes)\n    \n    # return answer\n    return variance\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.25
        }
    },
    {
        "question_id": "validation-75",
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "tables": [],
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    revenue = 600000\n    avg_account_receivable = 50000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    answer = 365 / receivables_turnover\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 30.417
        }
    },
    {
        "question_id": "validation-76",
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "tables": [],
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    annual_coupon_rate = 0.06\n    years_to_maturity = 20\n    investment_duration = 8\n    modified_duration = 11.470\n    \n    duration_gap = modified_duration - investment_duration\n    \n    return duration_gap\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.47
        }
    },
    {
        "question_id": "validation-77",
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    price_return = 4 / 100\n    roll_return = 1.50 / 100\n    collateral_required = 20 / 100\n    free_rate = 1 / 100\n    position_size = 1500000\n    current_return = 750\n    longer_term_return = 500\n\n    # Calculate the overall return\n    overall_return = (price_return + roll_return - (collateral_required * free_rate)) * position_size + current_return - longer_term_return\n    \n    # Return the overall return\n    return overall_return\n\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 79750.0
        }
    },
    {
        "question_id": "validation-78",
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    current_service_costs = 320\n    past_service_costs = 150\n    employer_contributions = 1200\n    benefit_obligation_beginning = 45000\n    benefit_obligation_end = 48395\n    plan_assets_beginning = 40800\n    plan_assets_end = 44300\n    actuarial_loss = 350\n\n    # Calculate net periodic pension cost without actuarial loss\n    service_cost = current_service_costs + past_service_costs\n    interest_cost = benefit_obligation_beginning * 0.075\n    expected_return = plan_assets_beginning * 0.082\n    amortization = (benefit_obligation_end - benefit_obligation_beginning) / 10\n    net_periodic_pension_cost = service_cost + interest_cost - expected_return + amortization\n\n    # Calculate recurrent pension expense with disregarded actuarial loss\n    recurrent_pension_expense = net_periodic_pension_cost - employer_contributions\n\n    # Return the answer\n    return recurrent_pension_expense\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": -361.1
        }
    },
    {
        "question_id": "validation-79",
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "tables": [],
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    total_income_200_units = 500000\n    total_income_250_units = 600000\n    units_200 = 200\n    units_250 = 250\n    \n    # Calculate marginal revenue per unit\n    marginal_revenue_per_unit = (total_income_250_units - total_income_200_units) / (units_250 - units_200)\n    \n    # Return answer\n    return marginal_revenue_per_unit\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 2000.0
        }
    },
    {
        "question_id": "validation-80",
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    EUR_shares_price_at_initiation = 90\n    EUR_shares_quantity = 200000\n    USD_EUR_6_months_forward_initial = -19.0\n    USD_EUR_3_months_forward_later = -27.0\n    EUR_LIBOR = 1.814\n    \n    # Calculate the EUR value of the shares at initiation and 3 months later\n    EUR_value_at_initiation = EUR_shares_price_at_initiation * EUR_shares_quantity\n    EUR_value_3_months_later = EUR_value_at_initiation\n\n    # Calculate the USD equivalent at initiation and 3 months later using the 6-month forward rates\n    USD_value_at_initiation = EUR_value_at_initiation * (1 + EUR_LIBOR / 100) * (1 + USD_EUR_6_months_forward_initial / 100)\n    USD_value_3_months_later = EUR_value_3_months_later * (1 + EUR_LIBOR / 100) * (1 + USD_EUR_3_months_forward_later / 100)\n\n    # Calculate the mark-to-market USD value after 3 months\n    mark_to_market_value = (USD_value_3_months_later - USD_value_at_initiation)\n\n    return mark_to_market_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -1466121.6
        }
    },
    {
        "question_id": "validation-81",
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "tables": [],
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.02  # 1 year spot rate\n    r2 = 0.025  # 2 years spot rate\n    r3 = 0.035  # 3 years spot rate\n    r4 = 0.055  # 4 years spot rate\n    \n    # Calculate the forward rate for two years starting from two years from now\n    forward_rate = ((1 + r2)**(4)) / ((1 + r1)**(2)) - 1\n    \n    # return answer\n    return forward_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.061
        }
    },
    {
        "question_id": "validation-82",
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_payment = face_value * 0.10\n    spot_rate_1 = 0.08\n    spot_rate_2 = 0.09\n    spot_rate_3 = 0.095\n    \n    # Do math calculation to get the answer\n    present_value_coupon = coupon_payment / (1 + spot_rate_1) + coupon_payment / (1 + spot_rate_2)**2 + (coupon_payment + face_value) / (1 + spot_rate_3)**3\n    present_value_face = face_value / (1 + spot_rate_3)**3\n    bond_price = present_value_coupon + present_value_face\n    \n    # return answer\n    return bond_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1776.234
        }
    },
    {
        "question_id": "validation-83",
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "tables": [],
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    unit_contribution_margin = 20\n    fixed_production_costs = 500000\n    \n    # Do math calculation to get the answer\n    least_production_level = fixed_production_costs / unit_contribution_margin\n    \n    # return answer\n    return least_production_level\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 25000.0
        }
    },
    {
        "question_id": "validation-84",
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "tables": [],
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables for the units purchased, cost per unit, units sold, and cost per unit sold\n    units_purchased_2014 = 1000\n    cost_per_unit_2014 = 60\n    units_sold_2014 = 500\n    cost_per_unit_sold_2014 = 75\n\n    # Calculate the ending inventory balance using the FIFO method\n    ending_inventory_balance = (units_purchased_2014 - units_sold_2014) * cost_per_unit_2014\n\n    # Return the ending inventory balance\n    return ending_inventory_balance\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 30000.0
        }
    },
    {
        "question_id": "validation-85",
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "tables": [],
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    ttm_treasury_note = 10  # time to maturity of the 10-year Treasury note\n    dirty_price = 104.17\n    days_since_last_coupon = 30\n    days_to_terminate = 90\n    quoted_price_futures_contract = 129\n    risk_free_rate = 0.0165  # yearly risk-free rate for three months\n    conversion_factor = 0.7025\n\n    # Using the carry arbitrage model to compute the equilibrium quoted futures contract price\n    equilibrium_futures_contract_price = dirty_price * (1 + (risk_free_rate * (days_since_last_coupon / 365))) - ((quoted_price_futures_contract - (dirty_price * (1 + (risk_free_rate * (days_to_terminate / 365))))) / (1 + (risk_free_rate * (days_to_terminate / 365))) * (conversion_factor / (1 + (risk_free_rate * (days_to_terminate / 365)))))\n\n    return equilibrium_futures_contract_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 87.305
        }
    },
    {
        "question_id": "validation-86",
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_par_value = 25*10**6 + 25*10**6 + 20*10**6 + 30*10**6\n    total_convexity = 122 + 154 + 87 + 32\n    \n    # Do math calculation to get the answer\n    price_value_basis_point = total_convexity / total_par_value\n    \n    # return answer\n    return price_value_basis_point\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "question_id": "validation-87",
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "tables": [],
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "topic": "Risk Management",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables\n    face_value = 2000000\n    market_value = 0.75 * face_value\n    risk_free_rate = 0.03\n    time_to_maturity = 1\n    recovery_rate = 0\n    \n    # Calculate the continuously-compounded risk-neutral probability of default\n    default_prob = (1 - math.exp(-risk_free_rate * time_to_maturity)) / (1 - (market_value / face_value) * math.exp(-risk_free_rate * time_to_maturity))\n    \n    # Return the answer\n    return default_prob\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.109
        }
    },
    {
        "question_id": "validation-88",
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    shares_outstanding = 10_000_000\n    earnings_per_share = 2.00\n    pe_ratio = 20\n    book_value_per_share = 30.00\n\n    # Calculate market capitalization and current market rate\n    market_capitalization = earnings_per_share * pe_ratio * shares_outstanding\n    current_market_rate = market_capitalization / shares_outstanding\n\n    # Buy back 1 million shares at the current market rate\n    shares_bought_back = 1_000_000\n    new_shares_outstanding = shares_outstanding - shares_bought_back\n    new_market_capitalization = new_shares_outstanding * current_market_rate\n\n    # Calculate subsequent book value per share\n    subsequent_book_value_per_share = new_market_capitalization / new_shares_outstanding\n\n    return subsequent_book_value_per_share\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 40.0
        }
    },
    {
        "question_id": "validation-89",
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "tables": [],
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    loan_amount = 5000000\n    annual_discount_rate = 0.058\n    monthly_discount_rate = annual_discount_rate / 12\n    total_months = 10 * 12\n    \n    initial_mortgage_repayment = (loan_amount * monthly_discount_rate) / (1 - (1 + monthly_discount_rate)**-total_months)\n    \n    return round(initial_mortgage_repayment, 2)\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 55009.41
        }
    },
    {
        "question_id": "validation-90",
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "tables": [],
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    three_month_mrr = 1.35 / 100\n    coupon_basis_points = 65 / 10000\n    \n    # Calculate coupon rate\n    coupon_rate = three_month_mrr + coupon_basis_points\n    \n    # Convert coupon rate to percentage\n    coupon_rate_percentage = coupon_rate * 100\n    \n    # Return coupon rate for interest remittance on 30 June\n    return coupon_rate_percentage\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2.0
        }
    },
    {
        "question_id": "validation-91",
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    w1 = 0.30\n    w2 = 0.70\n    std_dev1 = 20\n    std_dev2 = 12\n    correlation = 0.40\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = math.sqrt((w1**2 * std_dev1**2) + (w2**2 * std_dev2**2) + (2 * w1 * w2 * std_dev1 * std_dev2 * correlation))\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 12.119
        }
    },
    {
        "question_id": "validation-92",
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    present_value_factors = [0.997506, 0.992556, 0.985222, 0.975610]\n    fixed_interest = 0.03\n    nominal_amount = 100000000\n\n    # Do math calculation to get the answer\n    total_fixed_payment = sum([present_value_factors[i] * fixed_interest * nominal_amount for i in range(4)])\n    equity_index_at_zero = total_fixed_payment / nominal_amount\n\n    # return answer\n    return equity_index_at_zero\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.119
        }
    },
    {
        "question_id": "validation-93",
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    market_value_of_debt = 10000000\n    market_capitalization = 45000000\n    cash_short_investments = 2500000\n    ebitda = 15000000\n    \n    # Calculate enterprise value\n    enterprise_value = market_value_of_debt + market_capitalization - cash_short_investments\n    \n    # Calculate EV/EBITDA multiple\n    ev_ebitda_multiple = enterprise_value / ebitda\n    \n    # Return the answer\n    return ev_ebitda_multiple\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 3.5
        }
    },
    {
        "question_id": "validation-94",
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "tables": [],
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    future_value = 5000\n    discount_rate = 0.05\n    periods = 3 * 12  # Compounded monthly for 3 years\n    \n    # Do math calculation to get the answer\n    present_value = future_value / ((1 + discount_rate/12) ** periods)\n    \n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 4304.881
        }
    },
    {
        "question_id": "validation-95",
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    initial_forward_rate = 0.7400\n    trade_amount_eur = 5000000\n    maturity_forward_points = 15.0  # from the GBP/EUR forward rates in Exhibit 2\n    days_to_maturity = 90  # 90 days for three months maturity\n    \n    forward_rate = initial_forward_rate + maturity_forward_points / 10000  # Calculate the new forward rate\n    \n    mark_to_market_gain = trade_amount_eur * (1 / forward_rate - 1 / initial_forward_rate) * (365 / days_to_maturity)\n    \n    return mark_to_market_gain\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -55433.046
        }
    },
    {
        "question_id": "validation-96",
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |"
        ],
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    FFO = 290612\n    shares_outstanding = 67900\n    \n    # Calculate share value using Valuation Method 4\n    share_value = FFO / shares_outstanding\n    \n    # Return answer\n    return share_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4.28
        }
    },
    {
        "question_id": "validation-97",
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "tables": [],
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    net_income = 750000\n    ending_equity = 10000000\n    tax_rate = 0.25\n\n    return_on_equity = (net_income / ((1 - tax_rate) * ending_equity)) * 100\n    return return_on_equity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 10.0
        }
    },
    {
        "question_id": "validation-98",
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "tables": [],
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    S = 85  # Stock price\n    K = 90  # Strike price\n    r = 0.05  # Risk-free interest rate\n    c = 10   # Call option price\n    p = 15   # Put option price\n    \n    # Do math calculation to get the answer\n    q = (c - p + (K * math.exp(-r * 5))) / S\n\n    # Return answer\n    return q\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.766
        }
    },
    {
        "question_id": "validation-99",
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "tables": [],
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    change_in_spread = 100  # in basis points\n    altered_duration = 6.0\n    convexity = 55.0\n    \n    # Do math calculation to get the answer\n    effect_on_return = -(change_in_spread / 10000) * altered_duration + (0.5*convexity*(change_in_spread / 10000)**2) \n    \n    # return answer\n    return effect_on_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.057
        }
    },
    {
        "question_id": "validation-100",
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.05\n    face_value = 1000\n    time_to_maturity = 3\n    z_spread = 0.0234\n    spot_rates = [0.0486, 0.0495, 0.0565]\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for t in range(1, time_to_maturity+1):\n        discount_factor = 1 / (1 + z_spread) ** t\n        present_value += coupon_rate * face_value * discount_factor\n\n    discount_factor_at_maturity = 1 / (1 + z_spread) ** time_to_maturity\n    present_value += (face_value + coupon_rate * face_value) * discount_factor_at_maturity\n\n    answer = round(present_value, 2)\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1122.85
        }
    },
    {
        "question_id": "validation-101",
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "tables": [],
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    beta = 0.65\n    risk_free_rate = 0.03\n    market_return = 0.09\n    \n    # Calculate the expected return using the Capital Asset Pricing Model (CAPM)\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # Return the answer\n    return expected_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.069
        }
    },
    {
        "question_id": "validation-102",
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "tables": [],
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    approx_modified_duration = 10.3829\n    approx_modified_convexity = 141.217\n    change_in_yield = 50 / 10000  # Convert bps to decimal\n    \n    # Calculate the projected percentage price change\n    projected_price_change = -approx_modified_duration * change_in_yield + 0.5 * approx_modified_convexity * (change_in_yield ** 2)\n    \n    # return answer\n    return projected_price_change * 100  # Convert to percentage\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -5.015
        }
    },
    {
        "question_id": "validation-103",
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "tables": [],
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rf = 0.03  # risk-free rate\n    beta = 2.2  # beta\n    rm = 0.10  # expected market return\n    tax_rate = 0.30  # marginal tax rate\n    D = 10000000  # face value of bonds\n    r = 0.1365  # yield on existing bonds\n    T = 5  # years to maturity\n    F = 2.5e6  # amount of bonds to be issued (threshold)\n    RP = 0.16  # yield if bonds issued beyond threshold\n    E = 1200000  # common shares outstanding\n    P = 10  # price per share\n    new_funding = 7500000  # new funding\n\n    # Do math calculation to get the answer\n    WACC = (rf * (1 - tax_rate) * (D/F) + (rm - rf) * beta * (E/(D+E)) + (RP * (1 - tax_rate) * (F/F+new_funding)) * (D/(D+E))) / (D + E + new_funding)\n\n    # return answer\n    return WACC\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.04
        }
    },
    {
        "question_id": "validation-104",
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 1000\n    coupon_rate = 0.08\n    spot_rates = [0.07, 0.08, 0.09]\n    \n    # Do math calculation to get the answer\n    bond_price = (par_value * coupon_rate) * (1 - (1 + spot_rates[2])**-3) / spot_rates[2] + (par_value / (1 + spot_rates[2])**3)\n    \n    # return answer\n    return round(bond_price, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 974.69
        }
    },
    {
        "question_id": "validation-105",
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    acquisition_cost = 360  # in million yen\n    fair_value_of_net_assets = 0  # since no value is provided, assuming it's zero for simplicity\n\n    # Calculate the surplus of the acquisition cost over the net assets' fair value\n    surplus = acquisition_cost - fair_value_of_net_assets\n\n    # Calculate the annual amortization expense for the previously unregistered licenses\n    economic_lifespan = 5  # in years\n    annual_amortization = surplus / economic_lifespan\n\n    # Return the annual amortization expense\n    return annual_amortization\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 72.0
        }
    },
    {
        "question_id": "validation-106",
        "question": "The table below provides details about a zero-coupon bond. Using this table, can you identify the key rate '01 for a shift of 10 years?",
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    ten_year_shift = 87.1454\n    initial_value = 87.1876\n    \n    # Do math calculation to get the answer\n    key_rate_01 = ten_year_shift - initial_value\n    \n    # return answer\n    return key_rate_01\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": -0.042
        }
    },
    {
        "question_id": "validation-107",
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "tables": [],
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.143,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    P_A = 0.20  # Likelihood of bankruptcy\n    P_B = 0.70  # Probability of a \"good\" rating\n    P_B_given_A = 0.50  # Probability of a \"good\" rating given bankruptcy\n    \n    # Calculate the likelihood of bankruptcy given a \"good\" rating using Bayes' formula\n    P_A_given_B = (P_B_given_A * P_A) / P_B\n    \n    # return answer\n    return P_A_given_B\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.143
        }
    },
    {
        "question_id": "validation-108",
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "tables": [],
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    future_value = 100000\n    annual_rate = 0.025\n    number_of_periods = 52  # Weekly compounding\n    \n    # Calculate present value\n    present_value = future_value / ((1 + annual_rate/number_of_periods)**(number_of_periods))\n    \n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 97531.577
        }
    },
    {
        "question_id": "validation-109",
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    core_eps_2017 = 1.31\n    core_eps_2016 = 1.01\n    \n    # Do math calculation to get the answer\n    trailing_pe_2017 = 31 / core_eps_2017\n    trailing_pe_2016 = 31 / core_eps_2016\n    \n    # return answer\n    return trailing_pe_2017, trailing_pe_2016\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "(23.66412213740458, 30.693069306930692)"
        }
    },
    {
        "question_id": "validation-110",
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income_2018 = 875\n    depreciation_expense_2018 = 400\n    change_in_inventories = 850 - 720\n    change_in_accounts_receivable = 800 - 750\n    ebit_2018 = 1600\n    interest_expense_2018 = 350\n    taxes_2018 = 375\n    capital_expenditure = 5000 - 4250\n    change_in_notes_payable = 550 - 500\n    change_in_long_term_debt = 1500 - 1400\n\n    # Do math calculation to get the answer\n    fcf_to_equity_2018 = net_income_2018 + depreciation_expense_2018 - change_in_inventories - change_in_accounts_receivable - taxes_2018 - capital_expenditure - change_in_notes_payable - change_in_long_term_debt\n    fcf_to_equity_2018_in_millions = fcf_to_equity_2018 / 1000000\n\n    # return answer\n    return fcf_to_equity_2018_in_millions\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.0
        }
    },
    {
        "question_id": "validation-111",
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "tables": [],
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_portfolio = 1800000  # Human capital + financial capital\n    stock_allocation = 0.30\n    human_capital_similarity = 0.25\n    \n    # Do math calculation to get the answer\n    target_stock_allocation = total_portfolio * stock_allocation\n    human_capital_allocation = total_portfolio * human_capital_similarity\n    financial_capital_allocation = target_stock_allocation - human_capital_allocation\n    \n    # return answer\n    return financial_capital_allocation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 90000.0
        }
    },
    {
        "question_id": "validation-112",
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_2014 = 2125\n    end_inventory_lifo_2014 = 312\n    lifo_reserve_2014 = 82\n    net_profit_margin_2014 = 4.9 / 100\n    tax_rate = 30 / 100\n    \n    # Calculate COGS using LIFO and FIFO\n    cogs_lifo_2014 = sales_2014 - end_inventory_lifo_2014 - lifo_reserve_2014\n    cogs_fifo_2014 = cogs_lifo_2014 - lifo_reserve_2014\n    \n    # Calculate net income using LIFO and FIFO\n    net_income_lifo_2014 = sales_2014 * net_profit_margin_2014\n    net_income_fifo_2014 = (sales_2014 - cogs_fifo_2014) * (1 - tax_rate)\n    \n    # Calculate the difference in net income\n    difference_in_net_income = (net_income_fifo_2014 - net_income_lifo_2014) * 1000  # in $ thousands\n    \n    # Return the difference in net income\n    return difference_in_net_income\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 229075.0
        }
    },
    {
        "question_id": "validation-113",
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "tables": [],
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define 1-year spot rate, 2-year spot rate, and 3-year spot rate\n    r1 = 1.02 / 100\n    r2 = 1.65 / 100\n    r3 = 2.15 / 100\n    \n    # Calculate the 1-year implied forward rate two years in the future\n    forward_rate = ((1 + r3) ** 3) / ((1 + r2) ** 2) - 1\n    \n    # return the answer\n    return forward_rate * 100  # Multiply by 100 to get the percentage\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 3.157
        }
    },
    {
        "question_id": "validation-114",
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "tables": [],
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\nfrom math import exp, sqrt\n\ndef solution():\n    # Define variables name and value\n    S = 48.6  # stock price\n    X = 45  # exercise price\n    T = 0.25  # time to expiration\n    r = 0.003  # continuously compounded risk-free rate\n    sigma = 0.30  # volatility\n    N_d1 = 0.6352\n    N_d2 = 0.5486\n\n    # Do math calculation to get the answer\n    put_option_value = X * exp(-r * T) * (1 - N_d2) - S * (1 - N_d1)\n    \n    # return answer\n    return put_option_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 2.568
        }
    },
    {
        "question_id": "validation-115",
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport statistics\n\ndef solution():\n    # Define variable for the given measurements\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    \n    # Calculate the sample standard deviation\n    sample_std_dev = statistics.stdev(measurements)\n    \n    # return the sample standard deviation\n    return sample_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 13.181
        }
    },
    {
        "question_id": "validation-116",
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables for portfolio weights, benchmark weights, and 2016 return\n    portfolio_weights = [30, 30, 20, 10, 10]\n    benchmark_weights = [24, 20, 20, 18, 18]\n    returns = [14, 15, 12, 8, 10]\n\n    # Calculate the weighted sum of benchmark returns\n    benchmark_return = sum([(benchmark_weights[i]/100) * returns[i] for i in range(len(portfolio_weights))])\n    \n    # Calculate the weighted sum of portfolio returns\n    portfolio_return = sum([(portfolio_weights[i]/100) * returns[i] for i in range(len(portfolio_weights))])\n    \n    # Calculate the active return (value added)\n    active_return = portfolio_return - benchmark_return\n    \n    # Return the active return\n    return active_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.9
        }
    },
    {
        "question_id": "validation-117",
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "tables": [],
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    wam = (1*30 + 2*90 + 3*180 + 4*360) / (1 + 2 + 3 + 4)\n    \n    # return answer\n    return wam\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 219.0
        }
    },
    {
        "question_id": "validation-118",
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    november_sugar_quantity = 70\n    november_sugar_price = 0.90\n    december_sugar_quantity = 120\n    december_sugar_price = 1.00\n    \n    november_cotton_quantity = 60\n    november_cotton_price = 0.60\n    december_cotton_quantity = 50\n    december_cotton_price = 0.80\n    \n    # Do math calculation to get the answer\n    paasche_index_sugar = (december_sugar_quantity * december_sugar_price) / (november_sugar_quantity * november_sugar_price)\n    paasche_index_cotton = (december_cotton_quantity * december_cotton_price) / (november_cotton_quantity * november_cotton_price)\n    paasche_index = (paasche_index_sugar + paasche_index_cotton) / 2\n    \n    # return answer\n    return paasche_index\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.508
        }
    },
    {
        "question_id": "validation-119",
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "tables": [],
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    capital_gain = 0.10  # 10% embedded gain\n    after_tax_returns = [0.09, 0.05, 0.08]  # After-tax returns for the last three-year period\n    tax_rate = 0.25  # Capital gains tax rate\n\n    # Calculate the post-liquidation return for each year after tax\n    post_liquidation_returns = [(1 + after_tax_return) * (1 - tax_rate) - 1 for after_tax_return in after_tax_returns]\n\n    # Calculate the total return after tax for the three-year period\n    total_return_after_tax = (1 + post_liquidation_returns[0]) * (1 + post_liquidation_returns[1]) * (1 + post_liquidation_returns[2]) - 1\n\n    # Calculate the annualized after-tax post-liquidation return\n    annualized_after_tax_post_liquidation_return = (1 + total_return_after_tax) ** (1/3) - 1\n\n    return annualized_after_tax_post_liquidation_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.195
        }
    },
    {
        "question_id": "validation-120",
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "tables": [],
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    S = 50  # Current value of the base asset\n    r = 0.04  # Risk-free rate\n    T = 3/12  # Time to contract expiration in years\n    advantages_value = 5\n    disadvantages_value = 6\n    \n    # Calculate the forward price using the formula F = S * e^(r*T) + (Advantages - Disadvantages)\n    F = S * (2.71828 ** (r*T)) + (advantages_value - disadvantages_value)\n    \n    # return the answer\n    return F\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 49.503
        }
    },
    {
        "question_id": "validation-121",
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "tables": [],
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cny_to_hkd = 1.1757\n    aud_to_cny = 5.0765\n    \n    # Do math calculation to get the answer\n    hkd_to_aud = 1 / (cny_to_hkd * aud_to_cny)\n    \n    # return answer\n    return hkd_to_aud\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.168
        }
    },
    {
        "question_id": "validation-122",
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "tables": [],
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payout = 100000\n    years = 40\n    YTM = 0.055\n    \n    # Do math calculation to get the answer\n    cost_of_annuity = annual_payout * ((1 - (1 + YTM)**-years) / YTM)\n    \n    # return answer\n    return cost_of_annuity\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1604612.469
        }
    },
    {
        "question_id": "validation-123",
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    w1 = 0.4  # weight of security 1\n    w2 = 0.6  # weight of security 2\n    std_dev1 = 30  # expected standard deviation of security 1\n    std_dev2 = 15  # expected standard deviation of security 2\n    corr = 0.25  # correlation between the two securities\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = ((w1**2) * (std_dev1**2) + (w2**2) * (std_dev2**2) + 2 * w1 * w2 * std_dev1 * std_dev2 * corr)**0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 16.703
        }
    },
    {
        "question_id": "validation-124",
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "tables": [],
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    selling_price = 1000\n    creation_cost = 300\n    \n    # Do math calculation to get the answer\n    value_added = selling_price - creation_cost\n    \n    # return answer\n    return value_added\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 700.0
        }
    },
    {
        "question_id": "validation-125",
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "tables": [],
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 0.1431\n    periods_per_year = 4\n    \n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + (yearly_rate / periods_per_year)) ** periods_per_year - 1\n    \n    # return answer\n    return effective_annual_rate\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.151
        }
    },
    {
        "question_id": "validation-126",
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    expected_inflation = 2.3 / 100\n    expected_real_earnings_growth = 5.0 / 100\n    expected_equity_market_pe = 14.0\n    current_equity_market_pe = 14.5\n\n    # Calculate the anticipated annual equity return using the Grinold-Kroner model\n    anticipated_annual_equity_return = expected_inflation + expected_real_earnings_growth + ((expected_equity_market_pe / current_equity_market_pe - 1) * 100 / expected_equity_market_pe)\n\n    # Return the answer\n    return anticipated_annual_equity_return * 100  # Convert to percentage\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -17.331
        }
    },
    {
        "question_id": "validation-127",
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "tables": [],
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    variance_x = 0.25\n    variance_y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_x ** 0.5) * (variance_y ** 0.5)\n    \n    return covariance\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.036
        }
    },
    {
        "question_id": "validation-128",
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "tables": [],
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    effective_annual_return = 0.09\n    \n    # Do math calculation to get the answer\n    bond_equivalent_return = effective_annual_return * 2\n    \n    # return answer\n    return bond_equivalent_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.18
        }
    },
    {
        "question_id": "validation-129",
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "tables": [],
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    initial_cost = 50000\n    residual_value = 5000\n    useful_life = 10\n    depreciation_expense = 0\n    \n    # Calculate depreciation using double-declining balance method\n    for year in range(1, useful_life + 1):\n        depreciation = (initial_cost - depreciation_expense) * (2 / useful_life)\n        if depreciation > (initial_cost - residual_value - depreciation_expense):\n            depreciation = initial_cost - residual_value - depreciation_expense\n        depreciation_expense += depreciation\n        \n    # Return answer\n    return depreciation_expense\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 44631.291
        }
    },
    {
        "question_id": "validation-130",
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "tables": [],
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    GBP_to_EUR_rate_in_London = 0.8878\n    \n    # Do math calculation to get the answer\n    EUR_to_GBP_rate_in_Frankfurt = 1 / GBP_to_EUR_rate_in_London\n    \n    # return answer\n    return EUR_to_GBP_rate_in_Frankfurt\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.126
        }
    },
    {
        "question_id": "validation-131",
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "tables": [],
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    risk_free_rate = 0.04\n    bond_yield = 0.06\n    recovery_rate = 0.70\n    \n    # Calculate the inferred probability of default\n    probability_default = (bond_yield - risk_free_rate) / (1 - recovery_rate)\n    \n    # Return the answer\n    return probability_default\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.067
        }
    },
    {
        "question_id": "validation-132",
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "tables": [],
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    principal_borrowing = 1300000000\n    predicted_pre_tax_profit = 0.07\n    annual_operation_cost = 6000000\n    consumer_deposits = 1300000000\n    interest_rate = 0.05\n    yearly_loss = 0.003\n    unexpected_loss = 0.08\n    risk_free_rate = 0.015\n    tax_rate = 0.25\n    \n    # Do math calculation to get the answer\n    net_profit = principal_borrowing * predicted_pre_tax_profit - annual_operation_cost\n    net_interest_expense = principal_borrowing * interest_rate\n    net_loss = principal_borrowing * (yearly_loss + unexpected_loss)\n    tax_adjusted_profit = (net_profit - net_interest_expense - net_loss) * (1 - tax_rate)\n    capital_charge = principal_borrowing * (risk_free_rate + 0.2)  # Assuming 20% regulatory capital\n        \n    # RAROC calculation\n    raroc = tax_adjusted_profit / capital_charge\n    \n    # return answer\n    return raroc\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.236
        }
    },
    {
        "question_id": "validation-133",
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "tables": [],
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    car_only = 0.70\n    house_only = 0.50\n    both_plans = 0.20\n    \n    car_renewal = 0.40\n    house_renewal = 0.70\n    both_renewal = 0.80\n    \n    # Calculate the percentage of clients that will renew at least one plan next year\n    renew_at_least_one = (car_only * car_renewal) + (house_only * house_renewal) + (both_plans * both_renewal)\n    \n    # return the answer\n    return renew_at_least_one * 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 79.0
        }
    },
    {
        "question_id": "validation-134",
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "tables": [],
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    par_value = 1000\n    annual_coupon_rate = 10 / 100\n    spot_rate_1yr = 6 / 100\n    forward_rate_1yr_1yr = 8 / 100\n    forward_rate_1yr_2yr = 10 / 100\n    \n    # Calculate present value of the bond\n    present_value = par_value / (1 + spot_rate_1yr) + par_value * annual_coupon_rate / (1 + spot_rate_1yr) ** 1 + par_value * annual_coupon_rate / (1 + forward_rate_1yr_1yr) ** 2 + par_value * (annual_coupon_rate + 1) / (1 + forward_rate_1yr_2yr) ** 3\n    \n    # Return present value of the bond\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1949.916
        }
    },
    {
        "question_id": "validation-135",
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "tables": [],
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables and values\n    growth_labor_input = 0.009\n    labor_productivity = 0.015\n    inflation = 0.021\n    dividend_yield = 0.0225\n    pe_growth = 0\n\n    # Calculate long-term equity return\n    long_term_equity_return = growth_labor_input + labor_productivity + inflation - dividend_yield - pe_growth\n\n    # Return the answer\n    return long_term_equity_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.022
        }
    },
    {
        "question_id": "validation-136",
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "tables": [],
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    current_equity_value = 100000000 * 0.8  # 80% of $100 million\n    new_equity_percentage = 0.6\n    stock_index_value = 1200\n    multiplier = 250\n    new_beta = 0.95\n    \n    # Calculate the new equity value desired\n    new_equity_value = current_equity_value * new_equity_percentage / 0.8\n    \n    # Calculate the amount of stock index futures to be purchased\n    futures_needed = (new_equity_value * new_beta - current_equity_value * 1.2) / (stock_index_value * multiplier)\n    \n    # Return the answer\n    return futures_needed\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -130.0
        }
    },
    {
        "question_id": "validation-137",
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    security_b_return = 11.4\n    risk_free_rate = 3\n    security_b_beta = 1.40\n    \n    market_return = risk_free_rate + security_b_beta * (security_b_return - risk_free_rate)\n    \n    return market_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 14.76
        }
    },
    {
        "question_id": "validation-138",
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training = 1000\n\n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training\n    \n    # return answer\n    return total_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 36900.0
        }
    },
    {
        "question_id": "validation-139",
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "tables": [],
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_pledged_capital = 100e6\n    total_paid_in_capital = 90e6\n    total_distributions = 30e6\n    year_end_NAV_before = 160e6\n    year_end_NAV_after = 130e6\n    projected_NAV_next_year = 250e6\n    carried_interest_rate = 0.20\n    \n    # Calculate the total gains available for carried interest\n    gains_available = year_end_NAV_after - total_paid_in_capital - (projected_NAV_next_year - year_end_NAV_before)\n    \n    # Calculate the forecasted carried interest\n    forecasted_carried_interest = gains_available * carried_interest_rate\n    \n    # return forecasted carried interest\n    return forecasted_carried_interest\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -10000000.0
        }
    },
    {
        "question_id": "validation-140",
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "tables": [],
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 75000\n    rate = 0.07\n    time_period = 6\n    compound_frequency = 4\n    \n    # Do math calculation to get the answer\n    worth = principal * (1 + rate/compound_frequency)**(compound_frequency*time_period)\n    \n    # return answer\n    return worth\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 113733.209
        }
    },
    {
        "question_id": "validation-141",
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    original_acquisition_cost = 8000  # in millions\n    original_depreciation_period = 20  # years\n    original_accumulated_depreciation_2013 = 1200  # in millions\n    original_net_balance_2013 = 6800  # in millions\n    revalued_balance_2014 = 10000  # in millions\n    new_depreciation_period = 20  # years\n    tax_rate = 0.3  # 30%\n\n    # Calculate the original tax base\n    original_tax_base = original_acquisition_cost - original_accumulated_depreciation_2013\n\n    # Calculate the original deferred tax liability\n    original_deferred_tax_liability = tax_rate * (original_tax_base - original_net_balance_2013)\n\n    # Calculate the revalued tax base\n    revalued_tax_base = revalued_balance_2014 - original_deferred_tax_liability\n\n    # Calculate the revalued deferred tax liability\n    revalued_deferred_tax_liability = tax_rate * (revalued_tax_base - original_net_balance_2013)\n\n    # return answer\n    return revalued_deferred_tax_liability\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 960.0
        }
    },
    {
        "question_id": "validation-142",
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    sales = [70, 40, 25]\n    probabilities = [0.05, 0.70, 0.25]\n    mean_sales = sum(p * s for p, s in zip(probabilities, sales))\n    \n    # Do math calculation to get the answer\n    variance = sum(p * (s - mean_sales) ** 2 for p, s in zip(probabilities, sales))\n    standard_deviation = math.sqrt(variance)\n    \n    # return answer\n    return standard_deviation\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 9.808
        }
    },
    {
        "question_id": "validation-143",
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "tables": [],
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    company_contributions = 1200\n    beginning_PBO = 45000\n    ending_PBO = 43500\n    beginning_assets = 40800\n    ending_assets = 39650\n    \n    # Calculate service cost\n    service_cost = 45000 - 43500 + company_contributions\n    \n    # Calculate interest cost\n    interest_cost = 45000 * 0.05\n    \n    # Calculate expected return on plan assets\n    expected_return = 40800 * 0.045\n    \n    # Calculate amortization of prior service cost\n    prior_service_cost = 0\n    \n    # Calculate actuarial (gain) loss\n    actuarial_loss = (43500 - 45000) - (39650 - 40800) + prior_service_cost - interest_cost + expected_return\n    \n    # Calculate overall recurring pension cost\n    overall_cost = service_cost + interest_cost - expected_return + actuarial_loss\n    \n    # Return answer\n    return overall_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2350.0
        }
    },
    {
        "question_id": "validation-144",
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    initial_investment = 500\n    year1_return = 12/100\n    year2_investment = 600\n    year2_return = 5/100\n    year3_investment = 1000\n    year3_return = 1/100\n    \n    # Do math calculation to get the answer\n    final_value = (initial_investment * (1 + year1_return)) * (1 + year2_return) * (1 + year3_return)\n    holding_period_return = (final_value - initial_investment) / initial_investment\n    \n    # return answer\n    return holding_period_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.188
        }
    },
    {
        "question_id": "validation-145",
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "tables": [],
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    common_shares = 60000\n    outstanding_warrants = 5000\n    conversion_price = 25\n    stock_price_end_of_year = 30\n    avg_stock_price = 20\n    \n    # Calculate the potential number of shares from outstanding warrants\n    potential_shares = outstanding_warrants * conversion_price\n    \n    # Calculate the diluted number of shares\n    diluted_shares = common_shares + potential_shares\n    \n    return diluted_shares\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 185000.0
        }
    },
    {
        "question_id": "validation-146",
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "tables": [],
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    projected_eps = 2\n    current_share_price = 40\n    \n    # Do math calculation to get the answer\n    price_to_earnings_ratio = current_share_price / projected_eps\n    \n    # return answer\n    return price_to_earnings_ratio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 20.0
        }
    },
    {
        "question_id": "validation-147",
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, can you work out the Calmar ratio using the conventional method? What does the Calmar ratio turn out to be?",
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    mean_drawdown_risk = 6.8 / 100\n    highest_drawdown_risk = 10.2 / 100\n    time_period = 1  # Since we are asked for the Calmar ratio using the conventional method, we will use the 1-year performance figure\n    \n    calmar_ratio = (mean_drawdown_risk * time_period) / highest_drawdown_risk\n    return calmar_ratio\n\n# The above calculation results in a calmar ratio of 0.6666666666666666\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.667
        }
    },
    {
        "question_id": "validation-148",
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    trade_price_1 = 41.50\n    prevailing_bid_1 = 41.45\n    prevailing_offer_1 = 41.50\n    trade_price_2 = 41.75\n    prevailing_bid_2 = 41.73\n    prevailing_offer_2 = 41.75\n\n    spread_1 = (prevailing_offer_1 - prevailing_bid_1) / prevailing_offer_1\n    spread_2 = (prevailing_offer_2 - prevailing_bid_2) / prevailing_offer_2\n\n    average_spread = (spread_1 + spread_2) / 2\n    return average_spread\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.001
        }
    },
    {
        "question_id": "validation-149",
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "tables": [],
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\n# Import package if needs\ndef solution():\n    # Define variables name and value\n    dividend = 2.00\n    rate = 0.06\n    n = 5\n    periods_per_year = 4\n    \n    # Do math calculation to get the answer\n    present_value = dividend * (1 - (1 + rate/periods_per_year)**(-n*periods_per_year)) / (rate/periods_per_year)\n    \n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 34.337
        }
    },
    {
        "question_id": "validation-150",
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "tables": [],
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    license_cost = 6500\n    useful_life = 4\n    amortization_per_year = license_cost / useful_life\n    \n    # Do math calculation to get the answer\n    accumulated_amortization = 2 * amortization_per_year\n    \n    # return answer\n    return accumulated_amortization\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3250.0
        }
    },
    {
        "question_id": "validation-151",
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "tables": [],
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables \n    dividend = 2.00\n    growth_rate = 0.04\n    required_return = 0.07\n    \n    # Do math calculation to get the answer\n    inherent_value = dividend / (required_return - growth_rate)\n    \n    # return answer\n    return inherent_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 66.667
        }
    },
    {
        "question_id": "validation-152",
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_sales = 500 + 350 + 270 + 200\n    concentration_ratio = (500 + 350 + 270 + 200) / total_sales\n    \n    # return answer\n    return concentration_ratio\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.0
        }
    },
    {
        "question_id": "validation-153",
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.571,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    sales_euro = 3500\n    cost_of_sales_euro = 1500\n    exchange_rate_avg = 1.68\n    \n    sales_usd = sales_euro * exchange_rate_avg\n    cost_of_sales_usd = cost_of_sales_euro * exchange_rate_avg\n    \n    gross_profit_usd = sales_usd - cost_of_sales_usd\n    gross_profit_margin = (gross_profit_usd / sales_usd) * 100\n    \n    return gross_profit_margin\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 57.143
        }
    },
    {
        "question_id": "validation-154",
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    purchase_of_securities = 240\n    sale_of_trading_securities = 300\n    proceeds_from_issuance_of_bonds = 500\n    purchase_of_affiliated_company_shares = 275\n    \n    # Do math calculation to get the answer\n    net_cash_flow_from_investing = (sale_of_trading_securities - purchase_of_securities) + proceeds_from_issuance_of_bonds - purchase_of_affiliated_company_shares\n    \n    # return answer\n    return net_cash_flow_from_investing\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 285.0
        }
    },
    {
        "question_id": "validation-155",
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    likelihood_45 = 0.38 * 0.65 + 0.46 * 0.46 + 0.16 * 0.55  # likelihood of stock being at $45\n    \n    # return answer\n    return likelihood_45\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.547
        }
    },
    {
        "question_id": "validation-156",
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "tables": [],
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    invoice_price = 11000000\n    period = 20\n    repo_rate = 0.20\n    \n    # Do math calculation to get the answer\n    interest = (invoice_price - face_value) * (repo_rate) * (period / 365)\n    repurchase_cost = face_value + interest\n    \n    # return answer\n    return repurchase_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 10010958.904
        }
    },
    {
        "question_id": "validation-157",
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    net_income = 125\n    depreciation_expense = 12\n    impairment_expense = 12\n    changes_in_accounts_receivable = 3\n    changes_in_inventory = -4\n    changes_in_accounts_payable = 3\n    dividends = 8\n    \n    # Do math calculation to get the answer\n    operating_cash_flow = net_income + depreciation_expense + impairment_expense + changes_in_accounts_receivable + changes_in_inventory + changes_in_accounts_payable - dividends\n    \n    # return answer\n    return operating_cash_flow\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 143.0
        }
    },
    {
        "question_id": "validation-158",
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "tables": [],
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    p_defective = 0.05\n    n = 5\n    k = 1\n    \n    # Do math calculation to get the answer\n    likelihood = (math.pow(p_defective, k) * math.pow(1 - p_defective, n - k)) * (math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))\n    \n    # return answer\n    return likelihood\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.204
        }
    },
    {
        "question_id": "validation-159",
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "tables": [],
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    coupon_rate = 0.03\n    years_to_maturity = 9\n    yield_to_maturity = 0.05\n    bond_price = 85.784357\n    par_value = 100\n\n    # Calculate the present value of the bond\n    present_value = (coupon_rate * par_value) * (1 - (1 + yield_to_maturity)**-years_to_maturity) / yield_to_maturity + par_value / (1 + yield_to_maturity)**years_to_maturity\n\n    # Calculate the change in price due to a change in yield-to-maturity\n    delta_yield = 0.0001\n    new_yield = yield_to_maturity + delta_yield\n    new_present_value = (coupon_rate * par_value) * (1 - (1 + new_yield)**-years_to_maturity) / new_yield + par_value / (1 + new_yield)**years_to_maturity\n    delta_price = new_present_value - present_value\n\n    # Calculate the projected price value of a basis point\n    ppbp = delta_price / 100\n\n    # Return the answer\n    return ppbp\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": -0.001
        }
    },
    {
        "question_id": "validation-160",
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "tables": [],
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    sample_mean = 998.7\n    population_mean = 1000\n    sample_size = 1600\n    population_std = 100\n    \n    # Do math calculation to get the answer\n    standard_error = population_std / math.sqrt(sample_size)\n    \n    # return answer\n    return standard_error\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 2.5
        }
    },
    {
        "question_id": "validation-161",
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "tables": [],
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_assets = 500000 + 330000\n    real_estate_assets = 350000\n    total_assets = investment_assets + real_estate_assets\n    mortgage_payable = 175000\n    present_earnings = 980000\n    present_consumption = 870000\n    college_tuition_cost = 150000\n    future_foundation_value = 600000\n    \n    # Do math calculation to get the answer\n    total_liabilities = mortgage_payable\n    net_worth = total_assets - total_liabilities - present_earnings + present_consumption - college_tuition_cost - future_foundation_value\n    \n    # return answer\n    return net_worth\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 145000.0
        }
    },
    {
        "question_id": "validation-162",
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "tables": [],
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    accounts_receivable = 10000\n    inventory = 8000\n    \n    # Do math calculation to get the answer\n    net_shift_total_assets = accounts_receivable - inventory\n    \n    # return answer\n    return net_shift_total_assets\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2000.0
        }
    },
    {
        "question_id": "validation-163",
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "tables": [],
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    equity_beta = 1.4\n    debt_ratio = 0.6\n    tax_rate = 0.35\n    \n    # Calculate asset beta using the following formula: Asset Beta = Equity Beta * (1 + (1 - Tax Rate) * Debt Ratio)\n    asset_beta = equity_beta * (1 + (1 - tax_rate) * debt_ratio)\n    \n    # Return answer\n    return asset_beta\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.946
        }
    },
    {
        "question_id": "validation-164",
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "tables": [],
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    current_value = 100000000\n    current_shares = 0.8 * current_value\n    current_bonds = 0.2 * current_value\n    target_shares = 0.6 * current_value\n    target_bonds = 0.4 * current_value\n    stock_index_value = 1200\n    stock_index_multiplier = 250\n    stock_beta = 0.95\n    bond_futures_cost = 105300\n    bond_adjusted_duration = 6.5\n    \n    # Do math calculation to get the answer\n    shares_to_sell = current_shares - target_shares\n    shares_to_sell_amount = shares_to_sell / stock_index_value\n    futures_to_buy = shares_to_sell_amount / stock_index_multiplier\n    \n    # return answer\n    return round(futures_to_buy)\n\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 67.0
        }
    },
    {
        "question_id": "validation-165",
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "tables": [],
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    tax_rate = 0.30\n    risk_premium = 0.05\n    bond_face_value = 1000\n    bond_price = 1105.94\n    bond_coupon = 0.08 * bond_face_value\n    years_to_maturity = 20\n    \n    cost_of_equity = (bond_coupon / bond_price) + ((bond_face_value - bond_price) / years_to_maturity) / (bond_price) + risk_premium * (1 - tax_rate)\n    \n    return cost_of_equity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.103
        }
    },
    {
        "question_id": "validation-166",
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    starting_index_value = 121\n    stock_X_share_price_1 = 15\n    stock_X_shares_outstanding_1 = 100\n    stock_X_share_price_2 = 20\n    stock_X_shares_outstanding_2 = 100\n    stock_Y_share_price_1 = 20\n    stock_Y_shares_outstanding_1 = 1000\n    stock_Y_share_price_2 = 30\n    stock_Y_shares_outstanding_2 = 1000\n    stock_Z_share_price_1 = 30\n    stock_Z_shares_outstanding_1 = 2000\n    stock_Z_share_price_2 = 25\n    stock_Z_shares_outstanding_2 = 2000\n    \n    # Calculate the market value for each stock at time 1 and time 2\n    stock_X_market_value_1 = stock_X_share_price_1 * stock_X_shares_outstanding_1\n    stock_X_market_value_2 = stock_X_share_price_2 * stock_X_shares_outstanding_2\n    stock_Y_market_value_1 = stock_Y_share_price_1 * stock_Y_shares_outstanding_1\n    stock_Y_market_value_2 = stock_Y_share_price_2 * stock_Y_shares_outstanding_2\n    stock_Z_market_value_1 = stock_Z_share_price_1 * stock_Z_shares_outstanding_1\n    stock_Z_market_value_2 = stock_Z_share_price_2 * stock_Z_shares_outstanding_2\n    \n    # Calculate the total market value for each stock at time 1 and time 2\n    total_market_value_1 = stock_X_market_value_1 + stock_Y_market_value_1 + stock_Z_market_value_1\n    total_market_value_2 = stock_X_market_value_2 + stock_Y_market_value_2 + stock_Z_market_value_2\n    \n    # Calculate the equal-weighted index value\n    equal_weighted_index_value = starting_index_value * (total_market_value_2 / total_market_value_1)\n    \n    return equal_weighted_index_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 121.742
        }
    },
    {
        "question_id": "validation-167",
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "tables": [],
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    dividend_2017 = 0.22\n    growth_rate_1 = 0.12\n    growth_rate_2 = 0.06\n    required_return = 0.09\n    terminal_growth_rate = 0.06\n    \n    # Calculate terminal value using two-stage DDM\n    terminal_value = dividend_2017 * (1 + growth_rate_1) / (required_return - growth_rate_1) * (1 + growth_rate_2) / (required_return - terminal_growth_rate)\n    \n    # Return terminal value\n    return round(terminal_value, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -290.2
        }
    },
    {
        "question_id": "validation-168",
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "tables": [],
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    original_price = 98.722\n    price_when_ytm_increases = 98.669\n    price_when_ytm_decreases = 98.782\n    change_in_ytm = 0.001  # 10 basis points in decimal form\n\n    # Do math calculation to get the answer\n    convexity = ((price_when_ytm_increases + price_when_ytm_decreases) - 2 * original_price) / ((change_in_ytm**2) * original_price)\n\n    # return answer\n    return convexity\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 70.906
        }
    },
    {
        "question_id": "validation-169",
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "tables": [],
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    \n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    \n    return price_to_sales_ratio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.6
        }
    },
    {
        "question_id": "validation-170",
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    cost_of_goods_sold = 9000\n    accounts_payable = 600\n    \n    # Calculate days of payables\n    days_of_payables = (cost_of_goods_sold / accounts_payable) * 365\n    \n    # Return answer\n    return days_of_payables\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 5475.0
        }
    },
    {
        "question_id": "validation-171",
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "tables": [],
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    asset_A_value = 5000000\n    asset_A_VaR = 0.0452\n    asset_B_value = 3000000\n    asset_B_VaR = 0.0332\n    \n    # Do math calculation to get the answer\n    total_VaR = asset_A_VaR * asset_A_value + asset_B_VaR * asset_B_value\n    percent_contribution_A = (asset_A_VaR * asset_A_value) / total_VaR * 100\n    \n    # return answer\n    return percent_contribution_A\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 69.41
        }
    },
    {
        "question_id": "validation-172",
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "tables": [],
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "topic": "Risk Management",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    options_deep_in_the_money = 5000\n    options_deep_out_of_the_money = 20000\n    future_contracts = 10000\n    stock_price = 52\n    trading_days_annually = 252\n    volatility = 0.12\n\n    # Do math calculation to get the answer\n    combined_shares = options_deep_in_the_money + options_deep_out_of_the_money + future_contracts\n    combined_delta = options_deep_in_the_money - options_deep_out_of_the_money\n    combined_notional = combined_shares * stock_price\n    combined_vega = combined_shares * math.exp(-0.5 * volatility**2)\n\n    portfolio_sd = math.sqrt((combined_delta**2 * volatility**2 * combined_notional) + (trading_days_annually * combined_vega**2))\n    var_99_percent = portfolio_sd * 2.33\n\n    # return answer\n    return var_99_percent\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 5802161.571
        }
    },
    {
        "question_id": "validation-173",
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "tables": [],
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    contributions = 6000000\n    service_costs = 800000\n    actuarial_gain = 2500000\n    \n    # Calculate total pension expense\n    total_expense = contributions + service_costs - actuarial_gain\n    \n    # return answer\n    return total_expense\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4300000.0
        }
    },
    {
        "question_id": "validation-174",
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_yield = 4.4\n    inflation_premium = 0.8\n    illiquidity_premium = 0.9\n    equity_risk_premium = 8.4\n\n    # Do math calculation to get the answer\n    predicted_return = bond_yield + inflation_premium + illiquidity_premium + equity_risk_premium\n\n    # return answer\n    return predicted_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 14.5
        }
    },
    {
        "question_id": "validation-175",
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares_outstanding = 32\n    \n    # Calculate the value of common equity\n    common_equity = total_assets - total_liabilities - preferred_equity\n    \n    # Calculate normalized EPS\n    normalized_eps = common_equity / common_shares_outstanding\n    \n    # return answer\n    return normalized_eps\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 24.375
        }
    },
    {
        "question_id": "validation-176",
        "question": "Based on Exhibit 2, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    trade_prices = [25.20, 25.22, 25.27]\n    bid_prices = [25.17, 25.19, 25.22]\n    ask_prices = [25.20, 25.22, 25.26]\n\n    # Calculate mid prices\n    mid_prices = [(bid + ask) / 2 for bid, ask in zip(bid_prices, ask_prices)]\n\n    # Calculate effective spreads\n    effective_spreads = [trade_price - mid_price for trade_price, mid_price in zip(trade_prices, mid_prices)]\n\n    # Calculate average effective spread\n    avg_effective_spread = sum(effective_spreads) / len(effective_spreads)\n\n    # return average effective spread\n    return avg_effective_spread\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.02
        }
    },
    {
        "question_id": "validation-177",
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "tables": [],
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    fixed_rate = 1.00\n    treasury_yield = 0.63\n    \n    swap_spread = fixed_rate - treasury_yield\n    \n    return swap_spread\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.37
        }
    },
    {
        "question_id": "validation-178",
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\n# Import package if needs\ndef solution():\n    # Define variables name and value\n    rrf = 0.03  # risk-free rate\n    beta = 1.1  # beta of the J REIT\n    mrp = 0.05  # market risk premium\n    D1 = 1.13  # expected dividend per share, 1 year from today\n    D2 = 1.22  # expected dividend per share, 2 years from today\n    g = 0.05  # long-term growth rate in dividends, starting in year 3\n\n    # Calculate the cost of equity using the Capital Asset Pricing Model (CAPM)\n    r_e = rrf + beta * mrp\n\n    # Calculate the present value of the dividends at time 1 and time 2\n    PV_D1 = D1 / (1 + r_e)\n    PV_D2 = D2 / ((1 + r_e) ** 2)\n\n    # Calculate the present value of all future dividends starting at time 3\n    PV_future_dividends = D2 * (1 + g) / (r_e - g) / ((1 + r_e) ** 2) \n\n    # Calculate the intrinsic value using the two-step dividend discount model\n    intrinsic_value = PV_D1 + PV_D2 + PV_future_dividends\n\n    # return answer\n    return intrinsic_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 33.168
        }
    },
    {
        "question_id": "validation-179",
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 2 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 2, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    actual_sentiment = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0]\n    target_p_value = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54]\n    \n    # Calculate accuracy\n    correct_predictions = sum([1 for i in range(len(actual_sentiment)) if (actual_sentiment[i] == 1 and target_p_value[i] > 0.65) or (actual_sentiment[i] == 0 and target_p_value[i] <= 0.65)])\n    total_predictions = len(actual_sentiment)\n    accuracy = correct_predictions / total_predictions\n    \n    # return answer\n    return accuracy\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.7
        }
    },
    {
        "question_id": "validation-180",
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "tables": [],
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables\n    initial_price = 10\n    modified_duration_initial = 1\n    modified_duration_second = 9\n    yield_change = 0.01\n    yield_shift = 0.05\n    z_score = 1.645  # 95% confidence level\n\n    # Calculate the price change for each bond\n    price_change_initial = modified_duration_initial * yield_change * initial_price\n    price_change_second = modified_duration_second * yield_change * initial_price\n\n    # Calculate the total price change for the collection of investments\n    total_price_change = price_change_initial + price_change_second\n\n    # Calculate the daily value at risk (VAR)\n    VAR = total_price_change * z_score\n\n    # Return the answer\n    return VAR\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.645
        }
    },
    {
        "question_id": "validation-181",
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "tables": [],
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 100\n    cash_flows = [40, 80, 120]\n    required_rate_of_return = 0.20\n    \n    # Do math calculation to get the answer\n    discounted_cash_flows = [cf / ((1 + required_rate_of_return) ** (i+1)) for i, cf in enumerate(cash_flows)]\n    net_present_value = sum(discounted_cash_flows) - initial_investment\n    \n    # return answer\n    return net_present_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 58.333
        }
    },
    {
        "question_id": "validation-182",
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 50  # in millions\n    coupon_rate = 0.04\n    issue_price = 92.28  # per £100\n\n    # Do math calculation to get the answer\n    interest_expense = (face_value * coupon_rate * issue_price) - (face_value * (100 - issue_price))\n\n    # return answer in millions\n    return interest_expense / 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -2.014
        }
    },
    {
        "question_id": "validation-183",
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "tables": [],
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    total_wealth = 1950000  # $750,000 cash + $1,200,000 human capital\n    target_equity_allocation = 0.45  # 45%\n    human_capital_equity_percentage = 0.30  # 30%\n    \n    # Calculate financial capital\n    financial_capital = total_wealth - (human_capital_equity_percentage * total_wealth)\n    \n    # Calculate equity allocation for financial capital\n    equity_allocation = financial_capital * target_equity_allocation\n    \n    # Return answer\n    return equity_allocation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 614250.0
        }
    },
    {
        "question_id": "validation-184",
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "tables": [],
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    future_dividend = 2.5\n    growth_rate = 0.05\n    return_rate = 0.12\n    \n    # Calculate present value of future dividend\n    present_value = future_dividend / (return_rate - growth_rate)\n    \n    # Return the answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 35.714
        }
    },
    {
        "question_id": "validation-185",
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "tables": [],
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "topic": "Accounting",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 5000000\n    market_interest_rate = 0.03\n    annual_rate = 0.025\n    years_to_maturity = 3\n    \n    # Do math calculation to get the answer\n    present_value_of_bonds = face_value / (1 + market_interest_rate) ** years_to_maturity\n    discount = present_value_of_bonds * market_interest_rate\n    bonds_payable = face_value - discount\n    \n    # Return answer\n    return bonds_payable\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 4862728.751
        }
    },
    {
        "question_id": "validation-186",
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "tables": [],
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    stock_price = 26.00\n    volatility = 0.015\n    confidence_level = 0.95\n    delta = -0.5\n    holding_period = 1\n    \n    # Do math calculation to get the answer\n    variance = volatility ** 2 * holding_period\n    VaR = -delta * stock_price * variance ** 0.5 * math.erf(math.sqrt(holding_period) * (1 - confidence_level) / 2 ** 0.5)\n    \n    # return answer\n    return VaR\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.008
        }
    },
    {
        "question_id": "validation-187",
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    returns = [0.20, -0.30, 0.15]  # Convert the return percentages to decimal\n    \n    # Do math calculation to get the answer\n    geometric_mean = 1\n    for r in returns:\n        geometric_mean *= 1 + r  # Multiply the (1 + return) for each year\n    \n    geometric_mean = (geometric_mean ** (1/3)) - 1  # Calculate the geometric mean using the nth root\n    \n    # return answer\n    return geometric_mean\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": -0.011
        }
    },
    {
        "question_id": "validation-188",
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "tables": [],
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    beta = 0.6\n    risk_free_rate = 8 / 100  # converting percentage to decimal\n    market_return = 15 / 100  # converting percentage to decimal\n\n    # Calculate expected return using Capital Asset Pricing Model\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n\n    # Return the answer\n    return expected_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.122
        }
    },
    {
        "question_id": "validation-189",
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "tables": [],
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "topic": "Market Analysis & Economics",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    neutral_real_policy_rate = 2.25  # in percentage\n    desired_inflation_rate = 2      # in percentage\n    projected_growth = 2.5          # in percentage\n    predicted_growth = 3.5          # in percentage\n    anticipated_inflation = 3       # in percentage\n    \n    # Do math calculation to get the answer\n    nominal_policy_rate = neutral_real_policy_rate + desired_inflation_rate + (projected_growth - predicted_growth) + (anticipated_inflation - desired_inflation_rate)\n    \n    # return answer\n    return nominal_policy_rate\n\n# test the function\nprint(solution())\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4.25
        }
    },
    {
        "question_id": "validation-190",
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "topic": "Corporate & Securities Issuance",
        "output": [
            "```python\ndef solution():\n    expected_inflation = 0.019\n    expected_growth_PE = -0.012\n    expected_income_component = 0.018\n    expected_growth_real_earnings = 0.027\n    expected_change_shares_outstanding = 0.0\n    current_bond_yield = 0.0096\n    long_term_equity_return = 0.0996\n    long_term_bond_return = 0.0315\n    \n    ERP = (expected_inflation \n           + expected_growth_PE \n           + expected_income_component \n           + expected_growth_real_earnings \n           - expected_change_shares_outstanding \n           - current_bond_yield \n           - long_term_bond_return)\n    \n    return ERP * 100  # multiplying by 100 to convert to percentage\n\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.09
        }
    },
    {
        "question_id": "validation-191",
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 2, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    TP = 182\n    FP = 52\n    FN = 31\n    TN = 96\n    \n    # Calculate accuracy\n    accuracy = (TP + TN) / (TP + FP + FN + TN)\n\n    # return answer\n    return accuracy\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.77
        }
    },
    {
        "question_id": "validation-192",
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "tables": [],
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "topic": "Quantitative Analysis & Valuation",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    participants = 15\n    # Count the number of ways to distribute the prizes\n    ways_to_distribute = participants * (participants - 1) * (participants - 2)\n    \n    # return answer\n    return ways_to_distribute\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 2730.0
        }
    },
    {
        "question_id": "validation-193",
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "tables": [],
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "topic": "Risk Management",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    delta = 100000  # barrels\n    gamma = -50000  # barrels per dollar price shift\n    max_price_shift = 2.00  # dollars per barrel\n    \n    # Calculate VaR using delta-gamma approach\n    VaR = abs(delta * max_price_shift + 0.5 * gamma * (max_price_shift ** 2))\n    \n    # return VaR\n    return VaR\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 100000.0
        }
    },
    {
        "question_id": "validation-194",
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "tables": [],
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment_amount = 20000\n    preservation_margin = 0.3\n    amount_borrowed = 10000\n    \n    # Do math calculation to get the answer\n    total_equity = investment_amount + amount_borrowed\n    initial_price = total_equity / (1 - preservation_margin)\n    \n    # return answer\n    return initial_price\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 42857.143
        }
    },
    {
        "question_id": "validation-195",
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "tables": [],
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    previous_AUM = 288000000  # in dollars\n    management_fee_rate = 0.02  # 2%\n    fund_yield = 0.25  # 25%\n    soft_hurdle_rate = 0.05  # 5%\n    high_water_mark = 357000000  # in dollars\n    \n    # Calculate management fee\n    management_fee = previous_AUM * management_fee_rate\n    \n    # Calculate fund profits\n    fund_profits = previous_AUM * fund_yield\n    \n    # Calculate incentive fee after hurdle rate\n    if fund_profits > previous_AUM * (1 + soft_hurdle_rate):\n        incentive_fee = (fund_profits - previous_AUM * (1 + soft_hurdle_rate)) * 0.2\n    else:\n        incentive_fee = 0\n    \n    # Consider high-water mark\n    if fund_profits > high_water_mark:\n        fee_garnered = management_fee + incentive_fee\n    else:\n        fee_garnered = management_fee\n    \n    # Return overall fee garnered\n    return fee_garnered\n\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 5760000.0
        }
    },
    {
        "question_id": "validation-196",
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "tables": [],
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.903,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_x = 0.25\n    weight_y = 0.75\n    std_dev_x = 0.179\n    std_dev_y = 0.062\n    correlation = 0.5\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = math.sqrt((weight_x * std_dev_x)**2 + (weight_y * std_dev_y)**2 + 2 * weight_x * weight_y * std_dev_x * std_dev_y * correlation)\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.079
        }
    },
    {
        "question_id": "validation-197",
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "tables": [],
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    starting_value = 160000000\n    increase_percentage = 0.25\n    end_of_year_value = starting_value * (1 + increase_percentage)\n    fee_scheme_management = 0.02\n    fee_scheme_incentive = 0.20\n    hurdle_rate = 0.10\n    high_water_mark = 198000000\n    \n    # Do math calculation to get the answer\n    management_fee = end_of_year_value * fee_scheme_management\n    incentive_fee = max(0, (end_of_year_value - high_water_mark - management_fee)) * fee_scheme_incentive\n    total_fees = management_fee + incentive_fee\n    \n    # return answer\n    return total_fees\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4000000.0
        }
    },
    {
        "question_id": "validation-198",
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 2?",
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "topic": "Asset Classes & Derivatives",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    initial_noi = 2775840\n    terminal_noi = 3217959\n    investment_period = 5\n    \n    # Calculate growth rate\n    growth_rate = ((terminal_noi / initial_noi) ** (1/investment_period)) - 1\n    \n    # Return answer\n    return growth_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.03
        }
    },
    {
        "question_id": "validation-199",
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "tables": [],
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "topic": "Portfolio Management & Strategy",
        "output": [
            "```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    weight_x = 0.30\n    weight_y = 0.70\n    std_dev_x = 25\n    std_dev_y = 10\n    correlation_coeff = 0.8\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = math.sqrt((weight_x**2)*(std_dev_x**2) + (weight_y**2)*(std_dev_y**2) + 2*weight_x*weight_y*std_dev_x*std_dev_y*correlation_coeff)\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 13.757
        }
    }
]