[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            " truck_cost = 57000\nsalvage_value_at_purchase = 15000\nestimated_life = 8\ndepreciation_rate = 0.2\ncurrent_life = 8 - 3 # since the truck was used for 3 years\ndepreciation_amount = truck_cost * depreciation_rate * (current_life / estimated_life)\nnew_value = truck_cost - depreciation_amount + salvage_value_at_purchase\n\nland_cost = 21000 # assuming the same land price for all four parcels with no additional information available\n\ntruck_profit_loss = truck_cost - new_value\nland_profit_loss = land_cost - new_value\n\ntotal_profit_loss = truck_profit_loss - land_profit_loss\n\n# return answer\nreturn abs(total_profit_loss)"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            " ```python\n    spot_exchange_rate = 2.0979\n    sterling_libor = 1.6025 / 100\n    kiwi_libor = 3.2875 / 100\n    days_in_180 = 180 / 360\n\n    # Calculate forward rate\n    forward_rate = spot_exchange_rate * (1 + sterling_libor * days_in_180) / (1 + kiwi_libor * days_in_180)\n\n    # Calculate forward points (1 point is 0.0001)\n    forward_points = forward_rate - spot_exchange_rate\n\n    # Return answer with 4 decimal places\n    return round(forward_points * 10000, 4)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            " ```python\n    # Define variables name and value\n    beta_gim = 0.36  # Beta of Global Investable Market (GIM) from the provided data\n    risk_free_rate = 0.031  # Risk-free rate provided in the question\n    expected_return_gim = 0.072  # Expected return for the GIM provided in the question\n    covariance_us_real_estate_gim = 0.0075  # Covariance with GIM provided in the data\n    standard_deviation_us_real_estate = 0.14  # Standard Deviation of U.S. real estate provided in the data\n\n    # Calculate beta for U.S. real estate equities using the formula (Covariance with GIM / Standard Deviation of U.S. real estate) * (Beta of GIM)\n    beta_us_real_estate = (covariance_us_real_estate_gim / standard_deviation_us_real_estate) * beta_gim\n\n    # return answer\n    return beta_us_real_estate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            " shares_purchased = 200000\npurchase_price = 90\ninitial_forward_price = -6_900_000  # This is calculated as sharing_purchased * purchase_price * 6_month forward rate for USD/EUR\n\nafter_3_months_rate = -21.0  # This is the three-month forward rate for USD/EUR from the table\n\ntermination_price = initial_forward_price * after_3_months_rate\n\nreturn termination_price\n```\n\nThe cash expenditure (in US dollars) necessary to terminate the forward agreement after three months would be the initial forward price multiplied by the after-3-months forward rate."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            " Here is the Python program to solve the question:\n\n```python\nimport scipy.stats as ss\nimport numpy as np\n\ndef solution():\n    # Define variables name and value\n    market_worth = 3700000\n    daily_fluctuation = 0.0004\n    trading_days = 250\n    confidence_level = 0.95\n\n    # Calculate annualized daily returns\n    annualized_daily_returns = daily_fluctuation * np.sqrt(trading_days)\n\n    # Calculate VaR using the inverse of the standard normal distribution\n    var = -market_worth * ss.norm.ppf(confidence_level) / np.sqrt(trading_days)\n\n    # Return the answer\n    return var * np.exp(annualized_daily_returns)\n```\n\nIn this program, we first import the required libraries. Then, we defined the initial variables for the market worth, daily fluctuations, trading days, and confidence level. We then calculated the annualized daily returns using the daily fluctuations and number of trading days. After that, the VaR was calculated using the inverse of the standard normal distribution, which is equal to the lower quantile (percentile) of the standard normal distribution -1 * Q(1 - confidence_level) - multiplied by the market worth and trading days. Lastly, we exponentiated the annualized_daily_returns to get the yearly value and returned the result."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "-387351.90484685684"
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            " ```python\n    # Define the probabilities\n    p_failure = 0.40\n    p_success_given_survival = 0.85\n    p_success = 0.55  # Total probability of success by the end of the year (p(success) + p(success | failure))\n\n    # Calculate p(success | failure)\n    p_survive_and_fail = p_success - p_success_given_survival * p_success\n    p_success_given_failure = p_success_given_survival * p_survive_and_fail / (1 - p_failure)\n\n    # return answer\n    return p_success_given_failure\n```\n\nThis Python program calculates the probability of an organization succeeding even if it eventually goes bankrupt. The calculated probability is stored in the variable `p_success_given_failure`."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            " Companies = [\"Zeta\", \"Yusef\", \"Xenon\", \"Waters\", \"Vlastos\"]\n Market_Shares = [35, 25, 20, 10, 10]\n\n # Calculate HHI using the formula HHI = Σ (market share of each firm)^2\n hhi = sum(market_square_shares)\n\n # Function to calculate the square of a number\n def square(num):\n     return num ** 2\n\n # Apply the square function to the market shares\n market_square_shares = list(map(square, Market_Shares))\n\n # return answer\n return hhi\n\n# Run the function\nprint(solution())"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    swap_rate = 0.01  # Swap rate in decimal\n    treasury_rate = 0.0063  # Treasury rate in decimal\n\n    # Do math calculation to get the answer\n    difference_in_rates = swap_rate - treasury_rate\n\n    # return answer\n    return difference_in_rates\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.004
        }
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            " ```python\n    acquisition_cost = 600000\n    residual_value = 100000\n    life_of_asset = 5\n    years_passed = 3\n\n    # Calculate amortization per year\n    amortization_per_year = acquisition_cost / life_of_asset\n\n    # Calculate amortization for the years passed\n    amortization_to_date = years_passed * amortization_per_year\n\n    # Calculate remaining useful life of the asset\n    remaining_life = life_of_asset - years_passed\n\n    # Calculate remaining amortization\n    remaining_amortization = remaining_life * amortization_per_year\n\n    # Deduct the residual value from the total amortization\n    residual_subtracted_amortization = amortization_to_date - residual_value\n\n    # Calculate accumulated amortization cost\n    accumulated_amortization = residual_subtracted_amortization + remaining_amortization\n\n    # return answer\n    return accumulated_amortization\n```\n\nThis Python function calculates the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset using the straight-line method."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            " ```python\n    # Variables and their values\n    average_mean_reversion = 77.5 / 100\n    correlation_coefficient = 35 / 100\n    current_correlation = 27 / 100\n    alpha = 1 # Assuming it's the constant in the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model\n    difference = current_correlation - correlation_coefficient # Difference between current and average correlation\n\n    # Calculate the expected correlation for February 2014\n    correlated_expectation = current_correlation + (average_mean_reversion * difference * alpha)\n\n    # Return correlated expectation\n    return correlated_expectation\n```\n\nBy running this Python function, the calculation will give you the expected correlation for February 2014 using the given data and the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            " dividend_growth_rate = 0.06\n dividend_initial = 0.5\n rate_of_return = 0.10\n\n # Calculate dividends for each year\n year = 1\n dividends = []\n dividend = dividend_initial\n while year <= 10:\n     if year <= 2:\n         dividends.append(dividend)\n         dividend *= (1 + dividend_growth_rate)\n     else:\n         dividends.append(dividend * (1 + dividend_growth_rate))\n\n # Calculate the present value of all dividends\n present_value_dividends = 0\n discount_rate = rate_of_return / 100\n for dividend in dividends:\n     present_value_dividends += dividend / (1 + discount_rate) ** year\n\n # Calculate the worth of Superior's common equity\n net_income_per_share = 1  # Assuming net income per share is used to pay dividends (for simplicity)\n market_value_equity = present_value_dividends / net_income_per_share\n\n # Return the answer\n return market_value_equity"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            " marginal_cost = 30\naverage_cost = 50\nprice_elasticity = 1.8\n\n# Do math calculation to get the most probable price\nelasticity_of_demand = (1 + price_elasticity)\nprice_with_elasticity = (average_cost / (1 - elasticity_of_demand * marginal_cost))\n\n# return answer\nreturn price_with_elasticity"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            " revenue = 460000\nvalue_of_buildings_and_machinery_beginning_year = 320000\nvalue_of_buildings_and_machinery_end_year = 270000\ncost_of_raw_materials = 80000\nwages_paid = 30000\nnormal_profit = 50000\n\n# Do math calculation to get the answer\ngross_profit = revenue - cost_of_raw_materials\nnet_profit = gross_profit + normal_profit - (value_of_buildings_and_machinery_beginning_year - value_of_buildings_and_machinery_end_year)\n\n# return answer\nreturn net_profit"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    revenues = 6456\n    ebitda = 1349\n    depreciation = 243\n    operating_income = ebitda - depreciation\n    interest_expense = 186\n    pretax_income = operating_income - interest_expense\n    income_tax = pretax_income * 0.32\n    net_income = pretax_income - income_tax\n    shares = 411 * 1e6\n    eps = net_income / shares\n    fixed_capital_investment = 535 * 1e6\n\n    # Calculate FCFF (Free Cash Flow to the Firm)\n    # Equation: Net income + Depreciation + Net property, plant, and equipment additions - Capital expenditures - Change in working capital\n    working_capital_change = (1290 - 1199) * 1e-6  # Total current assets - Total current liabilities (excluding long term debt)\n    capex = (709 - 638) * 1e6  # Increase in inventories for the year\n    change_in_working_capital = working_capital_change + capex  # Adjust for simplification - here we are including inventories in working capital instead of adding capex separately\n\n    fcff = net_income + depreciation + (fixed_capital_investment - change_in_working_capital)\n\n    # return answer\n    return fcff\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 464000868.6
        }
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            " ```python\n    carrying_value_equipment = 500000\n    undiscounted_future_cash_flows = 550000\n    present_value_future_cash_flows = 450000\n    fair_value = 480000\n    costs_to_sell = 50000\n    value_in_use = 440000\n\n    # Do math calculation to get the answer\n    impairment_loss = max(0, carrying_value_equipment - min(present_value_future_cash_flows, fair_value) - costs_to_sell)\n\n    # return answer\n    return impairment_loss\n```\n\nThis program calculates the impairment loss of the printing equipment by comparing the carrying value of the equipment, the present value of the expected future cash flows, and the fair value. The maximum between the carrying value and the minimum between the present value and the fair value (to use the lower of the two) minus the costs to sell results in the impairment loss. By applying the IFRS rules, if the impairment loss is negative, the result will be zero since there is no loss."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            " Coupon_rate = 3/100\nInterest_period = 2 # since it's semiannually\nMature_time = 3\nRequired_return = 5/100\nPar_value = 100\n\n# Do math calculation to get the answer\nYield_to_Maturity = Required_return - (Coupon_rate - (Coupon_rate / (1 + (Coupon_rate * Interest_period)))) * Math.pow((1 + (Coupon_rate * Interest_period)), Mature_time)\nBond_price = Par_value / Math.pow((1 + Yield_to_Maturity * Interest_period), Mature_time * Interest_period)\n\n# return answer\nreturn Bond_price"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            " ```python\n    cost_october_toys = 10000 * 10\n    cost_november_toys = 5000 * 11\n    total_sold_units = 12000\n\n    # Sales in October and November\n    sales_October = 10000 * 15\n    unsold_October = 10000 - total_sold_units\n    sales_November = unsold_October * 15 + total_sold_units * 15\n\n    # Calculate cost of goods sold for October\n    cost_of_goods_sold_October = unsold_October * 10\n\n    # Calculate cost of goods sold for November\n    cost_of_goods_sold_November = 5000 * 11\n\n    # Combine the cost of goods sold for October and November\n    cost_of_goods_sold_total = cost_of_goods_sold_October + cost_of_goods_sold_November - sales_November + sales_October\n\n    # return answer\n    return cost_of_goods_sold_total\n```\nThis Python program calculates the cost of goods sold for Shine Kids Ltd. using the FIFO method for the toy purchases in October and November of 2009. The costs and sales are calculated based on the provided information, and the total cost of goods sold is returned."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.102,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            " ```python\n    scenarios = {'good_economic_situation': [20, 10], 'bad_economic_situation': [-10, 5]}\n    portfolio_returns = [20, 10, -10, 5]\n    probabilities_return = [50, 50, 60, 40]\n    probabilities_scenario = [70, 70, 30, 30]\n\n    # Weighted average calculation for portfolio return\n    weights = [probabilities_scenario[0]/100, probabilities_scenario[1]/100, probabilities_scenario[2]/100, probabilities_scenario[3]/100]\n    weighted_portfolio_return_sum = 0\n\n    for i in range(len(portfolio_returns)):\n        weighted_portfolio_return_sum += (portfolio_returns[i] * weights[i])\n\n    # Weighted average calculation for probability of return\n    weighted_probability_return_sum = 0\n    for i in range(len(probabilities_return)):\n        weighted_probability_return_sum += (probabilities_return[i] * weights[i])\n\n    # Return the weighted average portfolio return\n    return weighted_portfolio_return_sum\n```\nThis program calculates the weighted average of the portfolio returns for the given scenarios and returns the result."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            " ```python\n    # Define variables name and value\n    starting_inventory = 200000\n    lifo_reserve_start = 30000\n    ending_inventory = 250000\n    lifo_reserve_end = 40000\n    tax_rate = 0.3\n\n    # Calculate LIFO cost of goods sold (COGS)\n    lifo_cogs = starting_inventory - lifo_reserve_start\n    lifo_cogs += ending_inventory - lifo_reserve_end\n\n    # Calculate FIFO COGS ignoring taxes for now\n    fifo_cogs = starting_inventory + (ending_inventory - lifo_reserve_end)\n\n    # Calculate the amount of inventory purchased during the year (ignoring taxes)\n    inventory_purchases = fifo_cogs - lifo_cogs\n\n    # Calculate the tax payable on the difference\n    tax_payable = inventory_purchases * tax_rate\n\n    # Adjust the ending inventory to reflect the tax payment\n    adjusted_ending_inventory = ending_inventory - tax_payable\n\n    # return answer\n    return adjusted_ending_inventory\n```\n\nThis Python function calculates the inventory at the end of 2017 after converting from LIFO to FIFO, considering the LIFO reserve, tax rate, and the initial and final inventory values given in the question."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            " ```python\n    par_value = 100\n    discount_rate = 4.5 / 100\n    maturity_years = 15\n\n    # Calculate the present value of $1 per year for each year of maturity\n    present_value_per_year = 1 / (1 + discount_rate)\n\n    # Calculate the present value of the par value (100) received at the end of maturity\n    present_value_at_maturity = present_value_per_year ** maturity_years\n\n    # Calculate the cost per 100 of par value\n    cost_per_100 = present_value_at_maturity * (1 - present_value_per_year) / par_value\n\n    # return answer\n    return round(cost_per_100, 2)\n```\n\nThis program calculates the cost per 100 of par value for a zero-coupon bond with a yearly market discount rate, maturity, and assuming yearly compound interest. The present value of $1 per year for each year of maturity is calculated using the discount rate, then the present value at maturity is calculated by multiplying the present value per year by itself for maturity years. Finally, the cost per 100 of par value is calculated as the present value at maturity multiplied by (1 minus the present value per year) divided by the par value. The answer is then rounded to 2 decimal places."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            " ```python\n    gain_on_redemption = 100000\n    carrying_value = 950000\n    face_value = 1000000\n\n    # Do math calculation to get the call price\n    call_price = carrying_value + face_value - gain_on_redemption\n\n    # return answer\n    return call_price\n```\nIn this program, the call price is calculated by adding the carrying value and face value, and then subtracting the gain on redemption."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            " ```python\n    rate_usd_eur = 1.3860\n    rate_usd_cad = 1.0 / 1.3860  # finding the reciprocal of the USD/CAD rate to convert it into EUR/CAD\n    rate_usd_gbp = 1.4208\n\n    # Find the EUR/GBP rate from the given USD rates\n    eur_gbp = rate_usd_eur / rate_usd_gbp\n\n    # return answer\n    return eur_gbp\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            " ```python\n    # Define variables name and value\n    par_rate_two_year = 2.99/100\n    par_rate_three_year = 3.48/100\n    par_rate_four_year = 3.95/100\n\n    # Calculate the spot rate for three-year (since five-year data is missing)\n    spot_three_year = (1 + par_rate_three_year)**3 - 1\n\n    # Assuming the five-year spot rate follows a linear interpolation between three-year and four-year par rates\n    three_year_interpolated_par = 0.5 * par_rate_three_year + 0.5 * par_rate_four_year\n    five_year_spot = (1 + three_year_interpolated_par)**2 - 1\n\n    # return answer\n    return five_year_spot\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            " ```python\n    eur_bond_value = 1000\n    years = 2\n    one_year_rates = [8.0/100, 10.0/100, 6.0/100]  # 8%, 10%, 6% probabilities for one year rate\n    risk_premium = 40 / 10000  # value of the risk premium in decimal\n\n    # Calculate the discount factors for each possible one-year rate\n    discount_factors = [(1 + x) ** (-y) for x in one_year_rates]\n\n    # Calculate the expected present value of the bond\n    expected_present_value = sum([discount_factors[i] * eur_bond_value for i in range(len(discount_factors))]) * (1 + risk_premium)\n\n    # Return the expected present value as the zero-coupon bond's valuation\n    return expected_present_value * 100\n```\n\nThis program calculates the expected present value of the 2-year zero-coupon bond by considering the three possible one-year interest rates with their corresponding probabilities and adding a risk premium for duration risk. The result will be in euros and it's multiplied by 100 to express it as a whole number (e.g., 12345 instead of 123.45) to match the example given earlier."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.938,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            " n1, n2 = 25, 18\nmean1, mean2, common_std_dev, population_variance = 200, 185, 58.2927, 2678.05\n\n# Calculate degrees of freedom\ndf = n1 + n2 - 2\n\n# Calculate t-statistic\nt_statistic = (abs(mean1 - mean2) / (common_std_dev * (1 / math.sqrt(n1) + 1 / math.sqrt(n2))))\n\n# return t-statistic\nreturn t_statistic * math.sqrt(population_variance / df)"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            " ```python\n    accounts_payable_before = 937\n    depreciation_expense = 2500\n\n    # Do math calculation to get the answer\n    accounts_payable_after = accounts_payable_before + depreciation_expense\n    cash_paid_to_suppliers = accounts_payable_after - accounts_payable_before\n\n    # return answer\n    return cash_paid_to_suppliers\n```\n\nIn this program, we are assuming that the increase in accounts payable equals the depreciation expense, which is the payment to suppliers. The program calculates the accounts payable after the depreciation expense, subtracts the accounts payable before the depreciation, and returns that as the answer. However, please note that this is a simplified version and real-world financial statements may have more complex entries influencing accounts payable."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            " options_granted = 20000\nlock_in_period = 4\noptions_holding_period = 5\noptions_price_grant = 2.5\naverage_options_price = 2.8\nstock_price_grant = 15\n\n# Calculate the time in years for each period\nlock_in_years = lock_in_period / 12\nholding_period_years = (holding_period - lock_in_period) / 12\n\n# Calculate the total number of options exercised at the end of the holding period\ntotal_options_exercised = options_granted\n\n# Calculate the total compensation expense\ntotal_compensation = 0\nfor year in range(lock_in_years + 1, holding_period_years + 1):\n    # Calculate the options exercised in each year\n    options_exercised_this_year = options_granted * ((average_options_price / options_price_grant) ** year)\n    # Calculate the fair value of the stocks at the end of the year\n    stock_price_this_year = stock_price_grant * (year / holding_period_years)\n    # Calculate the compensation expense for the year\n    compensation_this_year = options_exercised_this_year * (stock_price_this_year - options_price_grant)\n    total_compensation += compensation_this_year\n\n# return answer\nreturn total_compensation"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            " security_price = 100  # Initial price of the security\nadjusted_period_years = 7.020  # Yearly adjusted period\nannual_convexity = 65.180  # Annual convexity\nprice_drop_bp = 25  # Price drop in basis points (0.25%)\n\n# Convert price drop from basis points to decimal\nprice_drop = price_drop_bp / 10000\n\n# Calculate the new price\nnew_price = security_price * (1 - price_drop)\n\n# Calculate the bond's Macaulay duration\nduration = adjusted_period_years / (1 - (1 / (1 + annual_convexity)))\n\n# Calculate the logarithmic price change (Log Price Change = ln(new price / original price))\nlogarithmic_change = math.log(new_price / security_price)\n\n# Calculate the percentage change in price from the logarithmic change\npercentage_change = (logarithmic_change * 100)\n\n# return the anticipated percentage change in price\nreturn round(percentage_change, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            " preferred_rate = 5.80 / 100\npar_value = 30\nidentical_rate = 5 / 100\n\n# Do math calculation to get the answer\npreferred_yield = preferred_rate * par_value\nidentical_yield = identical_rate * par_value\n\nratio = preferred_yield / identical_yield\n\nanswer = 1 / ratio - 1\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            " initial_value = 400\nrisk_free_rate = 0.05\ncontinuous_dividend_rate = 0.03\ntime_to_maturity = 6 / 12\n\n# Do math calculation to get the answer (using Black-Scholes equation)\nd1 = (math.log(initial_value / (1 + continuous_dividend_rate * 0.5 * time_to_maturity)) + (risk_free_rate + continuous_dividend_rate) * 0.5 * time_to_maturity) / (0.5 * math.sqrt(time_to_maturity))\nd2 = d1 - 0.5 * math.sqrt(time_to_maturity)\nforward_price = initial_value * math.exp((risk_free_rate - 0.5 * (continuous_dividend_rate)**2) * time_to_maturity) * math.Norm(d1) - initial_value * math.exp(-continuous_dividend_rate * time_to_maturity) * math.Norm(d2)\n\n# return answer\nreturn forward_price"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    standard_deviation = 4.9 / 100\n    monthly_returns = 36\n\n    # Do math calculation to get the test statistic's value\n    mean = 0 # assuming a mean of 0 for simplicity (actual mean can be known)\n    variance = standard_deviation ** 2\n    sample_size = monthly_returns\n    sum_of_diffs_squared = sum((return_i - mean) ** 2 for return_i in range(monthly_returns))\n    sample_variance = sum_of_diffs_squared / (sample_size - 1)\n    test_statistic = (sample_variance / variance) ** 0.5\n\n    # return test statistic\n    return test_statistic\n```\n\nIn this program, the test statistic is calculated using the square root of the ratio of the sample variance to the population variance, which is the standard way to test the null hypothesis that the investment strategy's standard deviation is equal to 5.0% versus the alternative that it is less than 5.0%. The given variance is calculated using the sample standard deviation (4.9%) so assuming a normal distribution, the output will be a value that can be compared to a t-table for 35 degrees of freedom to determine the level of significance."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 421.22
        }
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            " To calculate the Free Cash Flow to Equity (FCFE) for Holt Corporation in 2008, we need to first calculate the Cash from Operations (CFO), add back depreciation and subtract capital expenditures, and then subtract the change in working capital. Finally, we'll subtract out the cash paid for interest to get the FCFE.\n\nHere's the Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income = 485 # (from the table: Net income)\n    depreciation = 270 # (from the table: Depreciation expense)\n    ebitda = 1178 # (from the table: Earnings before interest, taxes, depreciation, and amortization (EBITDA))\n    interest = 195 # (from the table: Interest expense)\n    capital_expenditures = NotProvided # Capital expenditures are not provided in the table, so we'll need to find them\n    working_capital_change = NotProvided # Change in working capital is not provided in the table, so we'll need to find it\n\n    # Calculate Cash from Operations (CFO)\n    cfo = net_income + depreciation + amortization - interest\n\n    # Assuming NOPAT (Net Operating Profit After Tax) = EBITDA - Taxes\n    taxes = ebitda * 32/100 # Taxes as percentage of EBITDA\n    nopat = ebitda - taxes\n\n    # Calculate FCFE\n    working_capital = (cash + accounts_receivable + inventories - accounts_payable - accrued_expenses) # Working Capital (assuming all current assets and liabilities)\n    fcfe = cfo + depreciation - capital_expenditures + working_capital_change\n\n    # return FCFE\n    return fcfe / 1000000\n```\n\nThe values for capital expenditures and change in working capital need to be found based on the financial data for the company as they are not provided in the table. Once these values are found, you can substitute them"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.144,
        "question": "What is the sustainable growth rate?",
        "output": [
            " ```python\n    net_profit_margin = 0.2  # net profit margin in decimal form (e.g., 20% would be 0.20)\n    retention_rate = 0.6  # retention rate in decimal form (e.g., 60% would be 0.60)\n    asset_turnover = 0.8  # asset turnover\n    financial_leverage_multiplier = 1.5  # financial leverage multiplier\n\n    # DCF (dividend discount model) equation: Growth rate = Dividend Payout Ratio * Retention Rate * Asset Turnover * (1 - Financial Leverage Multiplier) + Net Profit Margin\n\n    # Calculate dividend payout ratio (assuming all earnings are paid out as dividends)\n    earnings_retained = 1.0 - retention_rate\n    dividend_payout_ratio = 1.0 / (1.0 + earnings_retained)\n\n    dividend_growth_rate = dividend_payout_ratio * retention_rate * asset_turnover * (1 - financial_leverage_multiplier) + net_profit_margin\n\n    # return answer\n    return dividend_growth_rate\n```\nThis Python program calculates the sustainable growth rate using the Dividend Discount Model, considering the given values for the net profit margin, retention rate, asset turnover, and financial leverage multiplier. The dividend payout ratio is calculated first, and then the sustainable growth rate is obtained by applying the DCF equation."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            " ```python\n    cny_to_hkd = 0.8422\n    cny_to_zar = 0.9149\n\n    # Calculate ZAR to HKD exchange rate by solving ZAR/HKD = CNY/HKD * CNY/ZAR\n    zar_to_hkd = cny_to_hkd / cny_to_zar\n\n    # return answer\n    return zar_to_hkd\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "output": [
            " ```python\n    # Define the current observation\n    X = 1  # Let's assume this is the current return value\n    # Define the decay factor\n    λ = 0.95\n\n    # Calculate the alpha parameter for RiskMetrics EWMA model\n    alpha = Math.sqrt((1 - λ) / (2 * (1 - λ ** 2)))\n\n    # Calculate the age factor for a four-day-old return\n    age_factor = (1 - λ) ** 4\n\n    # Calculate the weight of a four-day-old return\n    weight = alpha * age_factor\n\n    # return answer\n    return weight\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            " investment = 180000\ninterest_rate = 0.10/365 * 2  # Interest rate per day\nnum_days = 365 * 2  # 2 years in days\n\n# Do math calculation to get the answer\ninvestment_worth = investment * (1 + interest_rate) ** num_days\n\n# return answer\nreturn investment_worth"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    cost_of_goods_sold = 0\n    inventory_beginning = 20 * 5.00\n    inventory_purchase1 = 70 * 5.20\n    inventory_purchase2 = 35 * 5.50\n    inventory_end = inventory_beginning + inventory_purchase1 + inventory_purchase2\n    opening_bal_inventory = inventory_beginning - inventory_end\n    cost_of_sold_sold1 = 50 * 5.00\n    cost_of_sold_sold2 = 40 * 6.50\n    sales = cost_of_sold_sold1 + cost_of_sold_sold2\n\n    # Do math calculation to get the answer\n    cost_of_goods_sold = opening_bal_inventory + inventory_purchase1 + inventory_purchase2 - cost_of_sold_sold1 - cost_of_sold_sold2\n    gross_profit = sales - cost_of_goods_sold\n\n    # return answer\n    return gross_profit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1020.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            " ```python\n    dividend_growth_rate_4_years = 4\n    dividend_growth_rate_perpetual = 4\n    initial_dividend = 1.72\n    growth_rate = 6\n    discount_rate = 10\n    years_no_dividend = 3\n\n    # Calculate the dividend value from the fourth year onwards\n    fourth_year_dividend = initial_dividend * (1 + dividend_growth_rate_4_years)**(years_no_dividend - 1)\n\n    # Calculate the perpetual growth rate and discount rate difference\n    combined_growth_rate = (1 + dividend_growth_rate_perpetual) * (1 + growth_rate - discount_rate)\n\n    # Calculate the present value of dividends\n    present_value_of_dividends = fourth_year_dividend / combined_growth_rate\n\n    # return answer\n    return present_value_of_dividends\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            " ```python\n    dividend_payout_ratio = 0.5\n    growth_rate = 0.10\n    return_rate = 0.15\n    earnings_growth = growth_rate + return_rate\n    eps = (1 - dividend_payout_ratio) * earnings_growth\n    # P/E Ratio is calculated as price per share divided by earnings per share\n    price_to_earnings = 1 / eps\n\n    # return answer\n    return price_to_earnings\n```\n\nThis Python program calculates the price-to-earnings (P/E) ratio for Tiger Corporation based on the given payout ratio, growth rate, and return rate. The P/E ratio is calculated by dividing 1 by the earnings per share (EPS) which takes into account the dividend payout ratio, growth rate, and return rate."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            " annual_rate = 0.04\nyears = 5\nannual_payment = 300\n\n# Calculate present value using the formula: PV = (annual_payment / (1 + annual_rate)) ^ (number_of_years * -1)\n\n# do the calculation and return the answer\nPV = sum([annual_payment / (1 + annual_rate) ** i for i in range(1, years + 1)])\nreturn PV"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            " equipment_price = 100000\n accumulated_depreciation = 60000\n loss = -15000\n\n # Calculate the net_sale_price (price - depreciation)\n net_sale_price = equipment_price - accumulated_depreciation\n\n # Calculate the gain_from_sale (net_sale_price - loss)\n gain_from_sale = net_sale_price + loss\n\n # return answer\n return gain_from_sale"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            " total_liabilities = 35000000\n  total_equity = 55000000\n\n  # Calculate the total assets (sum of liabilities and equity)\n  total_assets = total_liabilities + total_equity\n\n  # Calculate the percentage of liabilities as a fraction of total assets\n  liabilities_percentage = (total_liabilities / total_assets) * 100\n\n  # return answer\n  return liabilities_percentage"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            " dividend_payment = 2\nrequired_return = 0.14  # In decimal form (14% = 0.14)\ngrowth_rate = 0.08  # In decimal form (8% = 0.08)\n\n# Calculate payout ratio (= Dividend / Earnings per share)\ndividend_yield = dividend_payment / earnings_per_share  # earnings_per_share is not given, we will calculate it in the next step\n\n# Calculate earnings per share (EPS)\nearnings = (1 + growth_rate) ** year - initial_investment  # Assume the initial investment remains constant\nearnings_per_share = earnings / number_of_shares\n\n# Solve for the internal rate of return (IRR) using trial and error or another method. Here, we'll use the financial calculator method to find the IRR:\n\n# https://www.investopedia.com/terms/1/internalrateofreturn.asp\n\n# Hypothetical cash flows:\ncash_flows = [0, dividend_payment * dividend_yield, dividend_payment * (1 + growth_rate), dividend_payment * (1 + growth_rate) ** 2, dividend_payment * (1 + growth_rate) ** 3, ...]\n\nn_periods = 10  # Number of periods\nn_guesses = 100  # Number of guesses for the IRR\nguess = (required_return + growth_rate) / 2.0  # Initial guess for IRR\nprevious_value = 0.0\n\nfor _ in range(n_guesses):\n    net_Present_value = sum([cash_flows[i] / (1 + guess) ** (n_periods - i) if i <= n_periods else 0 for i in range(n_periods)])\n\n    if previous_value * net_Present_value < 0.0:\n        IRR = guess\n        break\n\n    previous_value = net_Present_value\n    guess = (required_return + guess) / 2.0\n\n# Calculate"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            " ```python\n    dv0 = 99.41172\n    dv_plus = 99.50132\n    dv_minus = 99.32213\n    delta_curve = 3/10000\n    delta_yield = 1/10000\n\n    # Convexity calculation\n    d2V_dY = (dv_plus - dv_minus) / (2 * delta_yield * delta_curve)\n\n    # return answer\n    return d2V_dY\n```\nThis Python program calculates the bond's approximate convexity using the given values for PV0, PV_+, PV_, ∆Curve, and ∆Yield, as per the formula for bond convexity. It returns the calculated value for the bond's approximate convexity."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            " ```python\ndef solution():\n    # Define variables for weights, returns, and benchmark return\n    portfolio_domestic = 0.50\n    portfolio_bond = 0.30\n    portfolio_international = 0.20\n    benchmark_return = 0.15\n\n    # Calculate returns for each security and benchmark weighted returns\n    portfolio_weighted_return = (portfolio_domestic * 0.25) + (portfolio_bond * 0.09) + (portfolio_international * 0.15)\n    benchmark_weighted_return = (portfolio_domestic * benchmark_return * 0.35) + (portfolio_bond * 0.05 * 0.35) + (portfolio_international * 0.18 * 0.35)\n\n    # Calculate value added as the difference between portfolio weighted return and benchmark weighted return\n    value_added = portfolio_weighted_return - benchmark_weighted_return\n\n    # return value added\n    return value_added\n```\n\nIt's important to note that this solution assumes the provided weights are the proportion of the portfolio for each security in question. If the weights are not provided as proportions, then they should be normalized (divided by the sum of all weights) before being used in the calculations."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.138
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.948,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            " ```python\n    forward_exchange_rate = 1.0123\n    forward_points = 6.8 / 100\n    days_in_three_months = 90  # Assuming an average month has 30 days\n\n    # Spread (the difference between forward and spot rate) = (forward rate x number of days) + (forward points x number of days)\n    spread = (forward_exchange_rate * days_in_three_months) + (forward_points * days_in_three_months)\n\n    # Spot rate = Forward rate - Spread / Number of days\n    spot_rate = forward_exchange_rate - (spread / days_in_three_months)\n\n    # return answer\n    return spot_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value from the table\n    rental_income_2011 = 339009\n    other_property_income_2011 = 6112\n    total_income_2011 = rental_income_2011 + other_property_income_2011\n\n    net_income_2011 = total_income_2011 - property_operating_expenses_2011 - property_taxes_2011 - other_income_2011 - general_and_administrative_expenses_2011 - depreciation_and_amortization_2011 - net_interest_expenses_2011\n\n    # Assuming Price/FFO (Funds From Operations) ratio is given as 11.5x, which we denote as price_to_ffo\n    price_to_ffo = 11.5\n    ffo_2011 = net_income_2011 / weighted_average_shares_outstanding_2011\n    share_price_2011 = ffo_2011 * price_to_ffo\n\n    # return answer\n    return share_price_2011\n```\n\nPlease note that the provided variables are missing some values. You need to replace `property_operating_expenses_2011`, `property_taxes_2011`, `other_income_2011`, `general_and_administrative_expenses_2011`, `depreciation_and_amortization_2011`, `net_interest_expenses_2011`, and `weighted_average_shares_outstanding_2011` with their corresponding values as shown in the table.\n\nOnce filled in, the program will return the share price of Baldwin at the end of 2011."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            " total_loans = 1600\nsecondary_delayed = 200\ntop_quality_delayed = 48\n\n# Calculate the number of delayed secondary and top quality loans\nsecondary_total = 1000\ntop_quality = 600\n\n# Calculate the probabilities of a delayed loan being secondary or top quality\nprob_delayed_sec = secondary_delayed / secondary_total\nprob_delayed_top = top_quality_delayed / top_quality\n\n# Calculate the total number of delayed loans\ntotal_delayed = secondary_delayed + top_quality_delayed\n\n# Calculate the probability of picking a delayed loan\nprob_delayed = total_delayed / total_loans\n\n# Calculate the probability of a delayed loan being secondary, given that it's delayed\nprob_sec_given_delayed = prob_delayed_sec / prob_delayed\n\n# return the answer\nreturn prob_sec_given_delayed"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            " shares_price = 26.00\ndaily_volatility_rate = 0.015\nstrike_price = shares_price\noption_delta = -0.5\nconfidence_level = 0.95\n\n# Calculate the standard deviation of the option's price change\nstandard_deviation = shares_price * daily_volatility_rate * math.sqrt(365)\n\n# Calculate the z-score for the given confidence level\nz_score = stats.norm.ppf(confidence_level)\n\n# Calculate the 1-day 95% VaR using the delta-normal method\nvar = shares_price * z_score * option_delta\n\n# return answer\nreturn var"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            " ```python\n    cash_flow_from_issuance_of_preferred_stock = -45000  # Issuance of preferred stock\n    cash_flow_from_repurchase_of_common_stock = 20000  # Repurchase of common stock\n    cash_flow_from_purchase_of_machinery = -20000  # Purchase of machinery\n    cash_flow_from_issuance_of_bonds = -40000  # Issuance of bonds\n    cash_flow_from_debt_retired_through_issuance_of_common_stock = 45000  # Debt retired through issuance of common stock\n    cash_flow_from_paid_off_long_term_bank_borrowings = 10000  # Paid off long-term bank borrowings\n    cash_flow_from_cash_received_from_sale_of_company_building = 40000  # Cash received from sale of company building\n    cash_flow_from_profits_on_sale_of_building = 15000  # Profit on sale of building\n\n    # return the total sum of cash flow from financing activities\n    total_cash_flow_from_financing = (cash_flow_from_issuance_of_preferred_stock +\n                                      cash_flow_from_repurchase_of_common_stock +\n                                      cash_flow_from_purchase_of_machinery +\n                                      cash_flow_from_issuance_of_bonds +\n                                      cash_flow_from_debt_retired_through_issuance_of_common_stock +\n                                      cash_flow_from_paid_off_long_term_bank_borrowings +\n                                      cash_flow_from_cash_received_from_sale_of_company_building +\n                                      cash_flow_from_profits_on_sale_of_building)\n\n    return total_cash_flow_from_financing\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    face_value = 1000\n    coupon_rate = 0.05\n    time_to_maturity = 3\n    spot_rate1 = 0.036\n    spot_rate2 = 0.037\n    spot_rate3 = 0.038\n\n    # Calculate coupon payments\n    coupon_payments_per_year = 2  # (annual-pay period implies semiannual payments so divide by 2)\n    coupon_payment = face_value * coupon_rate / 2\n\n    # Calculate present value of coupons\n    present_value_of_coupons = 0\n    for i in range(1, time_to_maturity + 1):\n        present_value_of_coupons += coupon_payment * (1 / (1 + spot_rate1) ** (i - 1))\n\n    # Calculate the present value of the face value (maturity value)\n    present_value_of_face_value = face_value / (1 + spot_rate1) ** time_to_maturity\n\n    # Calculate the bond price\n    bond_price = present_value_of_coupons + present_value_of_face_value\n\n    # return bond price\n    return bond_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 971.757
        }
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            " ```python\n    current_service_costs = 470\n    past_service_costs = 0\n    employer_contributions = 1200\n    begin_benefit_obligation = 45000\n    end_benefit_obligation = 48395\n    begin_plan_assets = 40800\n    end_plan_assets = 44300\n    actuarial_loss = 350\n    actual_return_on_assets = 3100\n    discount_rate_on_liabilities = 0.075\n    expected_return_on_assets = 0.082\n\n    # Calculate the pension benefit obligation increase\n    pension_benefit_obligation_increase = end_benefit_obligation - begin_benefit_obligation\n\n    # Calculate the service cost as a percentage of the total pension benefit obligation at the end of the year\n    service_cost_percentage = current_service_costs / end_benefit_obligation\n\n    # Calculate the amount of the payment given out during the year\n    payment_given_out = pension_benefit_obligation_increase * service_cost_percentage + employer_contributions\n\n    # Account for the actuarial loss and actual return on assets\n    payment_given_out += actuarial_loss - actual_return_on_assets\n\n    # Discount the payment to its present value using the discount rate on plan liabilities\n    PV_payment = payment_given_out / (1 + discount_rate_on_liabilities)\n\n    # Taking into account the expected return on plan assets\n    PV_payment *= (1 + expected_return_on_assets)\n\n    # return answer\n    return PV_payment\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            " ```python\n    average_return = 160000\n    standard_deviation = 30000\n    lower_limit = 100000\n\n    # Find z-score and standardize data\n    z_score = (lower_limit - average_return) / standard_deviation\n    standardized_data = z_score\n\n    # Use the z-score to find the cumulative probability\n    import scipy.stats as stats\n    cumulative_probability = stats.norm.cdf(standardized_data)\n\n    # return answer\n    return 100 - (cumulative_probability * 100)\n```\n\nThis Python program calculates the percentage of return that is below $100,000 by finding the z-score of the lower limit and then using that z-score to find the cumulative probability from a normal distribution. The calculated probability is then subtracted from 100 to get the percentage of returns below the lower limit."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    position_value = 1000000  # value of the position to be financed\n    margin_requirement = 0.65  # minimum margin requirement as a decimal\n\n    # Do math calculation to get the answer\n    margin_needed = position_value * margin_requirement\n    leverage_ratio = position_value / margin_needed\n\n    # return answer\n    return leverage_ratio\n```\n\nThis program calculates the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.538
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            " ```python\n    price_bottled_water = 5\n    quantity_demand_bottled_water = 30 - 2 * price_bottled_water\n\n    # Calculate the absolute change in quantity demanded and price\n    delta_quantity = 1\n    delta_price = 1\n\n    # Calculate the percentage change in quantity demanded and price\n    percent_quantity_change = delta_quantity / quantity_demand_bottled_water * 100\n    percent_price_change = delta_price / price_bottled_water * 100\n\n    # Calculate the price elasticity of demand\n    price_elasticity = (percent_quantity_change / percent_price_change) * -1\n\n    # return answer\n    return price_elasticity\n```\n\nThe above Python code calculates the price elasticity of demand for bottled water given a price of 5 (as per the question) and assumes a change in quantity demanded of 1 and price of 1 for simplicity, offering an easy and reusable solution in its provided format."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            " shares_issued = 1000000\nflotation_costs_rate = 0.05\nshare_price = 14.69\ndividend = 0.32\ndividend_growth_rate = 0.1\n\n# Calculate the cost of flotation\nflotation_costs = shares_issued * flotation_costs_rate * share_price\n\n# Calculate the initial dividend per share\ninitial_dividend_per_share = dividend / shares_issued\n\n# Calculate the total dividend for the first year\ntotal_dividend_first_year = shares_issued * initial_dividend_per_share\n\n# Calculate the dividend for the next year\ndividend_next_year = total_dividend_first_year * (1 + dividend_growth_rate)\n\n# Calculate the total dividend for the next year\ntotal_dividend_next_year = shares_issued * dividend_next_year\n\n# Calculate the total dividends payable for the first two years\ntotal_dividends_first_two_years = total_dividend_first_year + total_dividend_next_year\n\n# Calculate the pretax profit for the first two years (excluding flotation costs)\npretax_profit_first_two_years = (share_price - initial_dividend_per_share) * shares_issued\n\n# Calculate the total profit for the first two years (including flotation costs)\ntotal_profit_first_two_years = pretax_profit_first_two_years - flotation_costs\n\n# Calculate the cost of equity\ncost_of_equity_percentage = (total_profit_first_two_years / total_dividends_first_two_years) * 100\n\n# return answer\nreturn cost_of_equity_percentage"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    management_fee = 0.0032 # Annual management fee as a decimal\n    trading_fees = 0.20 # Round-trip trading fees as a decimal\n    bid_offer_spread = 0.0010 # Bid–offer spread as a decimal for buy and sell\n    holding_period_months = 9\n\n    # Calculate annual trading fees\n    yearly_trading_fees = trading_fees * 2 * holding_period_months * 12\n\n    # Calculate trading fees for a single holding period (9 months)\n    trading_fees_per_holding_period = yearly_trading_fees / 12\n\n    # Calculate net asset value (NAV) loss due to bid-offer spread on buy and sell\n    bid_offer_spread_loss = (bid_offer_spread * holding_period_months * 2) / 12\n\n    # Calculate the total fees for a single holding period\n    total_fees = management_fee + trading_fees_per_holding_period + bid_offer_spread_loss\n\n    # return the total fees for a single holding period\n    return total_fees\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.605
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            " assets = 602.5\n management_fee_rate = 0.02\n hurdle_rate = 0.05\n high_water_mark = 540\n\n # Calculate management fee and hurdle return\n management_fee = assets * management_fee_rate\n hurdle_return = (assets - high_water_mark) / high_water_mark if assets > high_water_mark else 0\n\n # Calculate incentive fee (20% of the capital gains) but only if the hurdle rate is met\n incentive_fee = (assets - high_water_mark) * 0.2 if assets > high_water_mark and hurdle_return >= hurdle_rate else 0\n\n # Calculate net return (assets increase - management fee + incentive fee)\n net_return = assets - management_fee + incentive_fee\n\n # return net return\n return net_return"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            " ```python\n    # Number of common shares\n    common_shares = 1000000\n\n    # Net income for the year\n    net_income = 1500000\n\n    # Par value of convertible bonds\n    bond_par_value = 10000000\n\n    # Number of shares convertible from bonds\n    bond_conversion = 300000\n\n    # Par value of cumulative preferred stock\n    preferred_stock_par_value = 2000000\n\n    # Tax rate\n    tax_rate = 0.3\n\n    # Calculate earnings per share without dilution\n    eps = net_income / common_shares\n\n    # Calculate the number of additional shares that would be issued if the bonds were converted\n    bond_dilution = bond_conversion\n\n    # Calculate the tax shield for the preferred stock dividend\n    tax_shield = preferred_stock_par_value * 0.07 * tax_rate\n\n    # Calculate the earnings available for common shareholders after taking into account the preferred stock dividend and tax shield\n    eps_after_adjustments = (net_income - tax_shield + bond_dilution * (eps - (preferred_stock_par_value * 0.07))) / (common_shares + bond_dilution)\n\n    # return diluted earnings per share\n    return eps_after_adjustments\n```\nThis program calculates the diluted earnings per share for the corporation by taking into account the conversion of bonds, the dividend of preferred stock, the tax rate, and the number of common shares. The earnings per share (EPS) is first calculated without dilution and then adjusted for the dilution caused by the conversion of bonds and the issuance of additional shares to cover the preferred stock dividend. The diluted EPS is then calculated as the earnings available for common shareholders divided by the total number of common and diluted shares."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            " ```python\n    initial_investment = 10000\n    dividend = 2500\n    total_revenue = initial_investment + dividend\n    shares_sold = initial_investment / total_revenue * 100\n    stock_price = 24\n    cost_per_share = initial_investment / (shares_sold * stock_price)\n\n    return cost_per_share\n```\n\nIn this program, the total revenue is the sum of the initial investment and the dividend. The number of shares sold is calculated as the percentage of the total revenue that was the initial investment. The cost per share is calculated by dividing the initial investment by the number of shares sold multiplied by the stock price. This gives the cost per share that the investor initially paid a year ago."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            " ```python\n    initial_price = 865.0\n    short_term_price = 877.0\n    long_term_price = 883.0\n    collateral_rate = 0.0060 / 12  # annualized rate converted to monthly\n    contract_length = 3\n\n    # Calculate gains from long position and losses from short position\n    long_gain = (long_term_price - initial_price) * contract_length\n    short_loss = (initial_price - short_term_price) * contract_length\n\n    # Calculate total gain or loss considering collateral gain\n    total_gain = long_gain + short_loss * (1 + collateral_rate) ** contract_length\n\n    # Calculate total return as percentage of initial investment\n    total_return = total_gain / initial_price * 100\n\n    # return answer\n    return total_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            " ```python\n    growth_rate = (6 - 5.5) / (1 + 7.25)\n\n    # return answer\n    return growth_rate\n```\n\nIn this program, the growth rate of the property is calculated by finding the difference between the ending capitalization rate and the initial capitalization rate, and then dividing it by 1 plus the discount rate. The result represents the annual growth rate of the property's income and value."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            " ```python\n    total_productive_capacity = 950000\n    production_in_fy2015 = 150000\n    annual_production = 100000\n    expected_useful_life = 9\n    residual_value = 500000\n\n    # Calculate the total production over the expected useful life\n    total_production = total_productive_capacity + (annual_production * (expected_useful_life - 1))\n\n    # Calculate the total revenue generated from production\n    total_revenue = total_production * production_in_fy2015\n\n    # Calculate the depreciation expense in the initial year\n    depreciation_expense = (total_revenue - residual_value) / total_production\n\n    # return answer\n    return depreciation_expense\n```\n\nThis program calculates the depreciation expense in the initial year by first determining the total revenue generated from the machine's production, then subtracting the residual value and dividing the result by the total productive capacity to get the depreciation rate per unit, and finally multiplying this rate by the total productive capacity."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    net_income = 92\n    weighted_average_shares_outstanding = 118e-6\n    ffo_multiple = 13\n\n    # Do math calculation to get the answer\n    fund_from_operations = net_income - (depreciation_and_amortization + net_interest_expenses + general_and_administrative_expenses + other_expenses)\n    ffo_per_share = fund_from_operations / weighted_average_shares_outstanding\n    share_price = ffo_per_share * ffo_multiple\n\n    # return answer\n    return share_price\n```\n\nNote: I assumed the following formulas for calculation:\n* Funds from operations (FFO) = Net income - (Depreciation and amortization + Net interest expenses + General and administrative expenses + Other expenses)\n* FFO per share = FFO / Weighted average shares outstanding (million)\n* Share price = FFO per share * Price/FFO multiple\n\nI didn't have the values for Depreciation and Amortization, Net interest expenses, General and administrative expenses, and other expenses. Please replace them with their respective values from the provided income statement."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            " price_elasticity = 1.5\nmarginal_cost = 40\naverage_cost = 70\n\n# Do math calculation to get the Answer\nprice = (average_cost + marginal_cost) / (1 - price_elasticity)\n\n# return answer\nreturn price"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            " ```python\n    face_value = 100  # Bond's face value (assumed to be 100 for simplicity)\n    discount_rate = 97 / 100  # Discount rate for the bond (0.97 for a bond valued at 97 for every 100 of face value)\n    lpr = 1.00 / 100  # Present 6-month LPR (1.00% in percentage)\n    semi_annual_discount_rate = discount_rate * (1 + lpr + 0.8)  # Calculate semi-annual discount rate with the additional 80 basis points\n    semiannual_day_count = 182  # Days in a 6-month period using a 30/360 day count standard\n    semi_annual_discount_factor = semiannual_day_count / 360  # Discount factor for a semi-annual period\n    bond_term = 2  # Bond's term in years (2 years)\n    annual_discount_factor = semiannual_discount_factor**2  # Calculate the annual discount factor based on the semi-annual one\n    present_value_of_interest = face_value * (annual_discount_factor**bond_term)  # Calculate the present value of the interest payments\n    face_value_present_value = face_value * annual_discount_factor  # Calculate the present value of the face value\n    total_present_value = face_value_present_value + present_value_of_interest  # Calculate the total present value of the bond\n    discount_margin = (1 - total_present_value / face_value) * 10000  # Calculate the discount margin in basis points (bps)\n\n    # return answer\n    return discount_margin\n```\n\nThis program calculates the discount margin for the bond in basis points (bps) based on the given conditions. You can modify the face_value variable if the bond's face value is different."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            " ```python\n    intercept = 0.0477\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40000000\n    fraction_retained = 0.7\n\n    # Calculate coefficients using the coefficients from the table\n    underwriter_coeff = 0.0150\n    pre_offer_coeff = -0.0009\n    offer_size_coeff = None\n    fraction_retained_coeff = 0.0500\n\n    # Calculate the coefficients for the IPO's characteristics\n    underwriter_coeff_value = underwriter_coeff * underwriter_rank\n    pre_offer_coeff_value = pre_offer_coeff * pre_offer_price_adjustment\n    offer_size_coeff_value = offer_size_coeff * offer_size if offer_size_coeff else 0.0\n    fraction_retained_coeff_value = fraction_retained_coeff * fraction_retained\n\n    # Calculate the predicted initial return\n    predicted_return = intercept + underwriter_coeff_value + pre_offer_coeff_value + offer_size_coeff_value + fraction_retained_coeff_value\n\n    # Convert the predicted return to a percentage\n    predicted_return = predicted_return * 100\n\n    # return answer\n    return predicted_return\n```\n\nPlease note that this is an approximate solution because the table provided did not include the coefficient for Offer size. In such cases, I cannot calculate the exact answer without making an assumption or adding an assumption in the program. In this case, I left the Offer size coefficient as None, so it won't be included in the calculation, and the predicted return is calculated without considering the Offer size coefficient. If more information about the Offer size coefficient is available, please use that value instead."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            " investment_amount = 1000000  # Initial investment amount\nannual_management_fee = 0.004  # Annual management fee as a decimal (0.40%)\nround_trip_trading_commissions = 0.0055  # Round-trip trading commissions as a decimal (0.55%)\nbid_offer_spread = 0.002  # Bid-offer spread as a decimal (0.20%)\ndays_in_nine_months = 9 * 30  # Days in 9 months\n\n# Calculate the total trading cost for one trade\ntrading_cost = investment_amount * round_trip_trading_commissions * 2 + investment_amount * bid_offer_spread * 2\n\n# Calculate the total management fee for nine months\nmanagement_fee = (investment_amount * annual_management_fee) / 12\n\n# Calculate the total cost for nine months, assuming one trade at the beginning and end of the period\ntotal_cost = trading_cost * 2 + management_fee * days_in_nine_months\n\n# return answer\nreturn total_cost"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            " returns = [14, -10, -2] # Annual return rates for the mutual fund for the three years\n\n# Calculate the geometric mean of the returns (You can use Python's built-in math functions)\naverage_return = (returns[0] * returns[1] * returns[2]) ** (1/3)\n\n# The holding period return for the three-year period is the geometric mean of the returns\nanswer = average_return\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            " ```python\n    consumption = 20.0\n    capital_consumption_allowance = 1.9\n    government_spending = 4.2\n    imports = 2.2\n    gross_private_domestic_investment = 6.0\n    exports = 1.8\n\n    # Calculate Gross Domestic Product (GDP) using the formula: GDP = C + I + G + (X - M)\n    gdp = consumption + gross_private_domestic_investment + government_spending + (exports - imports) - capital_consumption_allowance\n\n    # return answer\n    return gdp\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            " ```python\n    expected_return_stock1 = 0.07\n    expected_return_stock2 = 0.10\n    std_deviation_stock1 = 0.12\n    std_deviation_stock2 = 0.25\n    portfolio_weight_stock1 = 0.30\n    portfolio_weight_stock2 = 0.70\n    correlation = 0.20\n\n    # Calculate the variance of each stock\n    variance_stock1 = std_deviation_stack1 ** 2\n    variance_stock2 = std_deviation_stack2 ** 2\n\n    # Calculate the covariance between stocks\n    stock1_returns = expected_return_stock1 + variance_stock1 ** 0.5 * 0.01 * (2 * portfolio_weight_stock1 * (1 - portfolio_weight_stock1) * correlation)\n    stock2_returns = expected_return_stock2 + variance_stock2 ** 0.5 * 0.01 * (2 * portfolio_weight_stock2 * (1 - portfolio_weight_stock2) * correlation)\n\n    # Calculate the variance of the portfolio\n    portfolio_variance = portfolio_weight_stock1 ** 2 * variance_stock1 + portfolio_weight_stock2 ** 2 * variance_stock2 + 2 * portfolio_weight_stock1 * portfolio_weight_stock2 * covariance\n\n    # Calculate the standard deviation of the portfolio\n    answer = portfolio_variance ** 0.5\n\n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            " ```python\n    working_capital_balance = 22000000\n    fair_value_fixed_assets = 57000000\n    normalized_income = 89000000\n    roe_working_capital = 6/100\n    roe_fixed_assets = 9/100\n    roe_intangibles = 25/100\n    future_growth_rate = 7/100\n    working_capital_intangible_ratio = 0.5  # Assuming 50% of Working Capital is Intangible Assets\n\n    # Calculate Net Income available for common stockholders (NI and CS)\n    net_income_CS = normalized_income * (1 - roe_working_capital * working_capital_balance) - roe_fixed_assets * fair_value_fixed_assets\n\n    # Calculate Intangible Assets (IA)\n    IA = working_capital_balance * working_capital_intangible_ratio\n\n    # Calculate Intangible Asset Return (IAR)\n    IAR = net_income_CS * roe_intangibles\n\n    # Calculate Value of Intangibles (VOI)\n    VOI = IA * (1 + future_growth_rate) / (IAR - (future_growth_rate * IA))\n\n    # Return the answer\n    return VOI\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            " ```python\n    credit_sales = 40000 # in millions\n    cogs = 30000 # in millions\n    accounts_receivable = 3 # in millions\n    inventory_beginning_balance = 1.5 # in millions\n    inventory_ending_balance = 2 # in millions\n    accounts_payable = 4 # in millions\n\n    # Days sales in inventory (DSI)\n    dsi = (inventory_ending_balance - inventory_beginning_balance) / (cogs / 2)\n\n    # Days sales outstanding (DSO)\n    dso = 365 / (credit_sales / accounts_receivable)\n\n    # Waiting Period (days from payment to collection)\n    days_payable_outstanding = accounts_payable * 365 / cogs\n\n    # Cash conversion cycle (Net Operating Cycle)\n    cash_conversion_cycle = dsi + dso - days_payable_outstanding\n\n    return cash_conversion_cycle\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            " investment_research = 5000000  # $5,000,000 for research\ninvestment_creation = 3000000  # $3,000,000 for creation\nsalvage_value = 10000  # $10,000 salvage value\nlife_of_asset_years = 20  # 20 years of asset life\nyear_diff = 1  # 1 year difference (2014 - 2013)\n\n# Do math calculation to get the answer\nannual_depreciation = investment_research + investment_creation / life_of_asset_years\nbook_value = annual_depreciation * year_diff - salvage_value\n\n# return answer\nreturn book_value\n\n# Call the function to get the result\nresult = solution()\nprint(f\"The book value of the software copyright at the close of 2014 is ${result:.2f}\")"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            " ```python\n    data = [7, 8, 9, 10]\n    n = len(data)\n\n    # Calculate mean (average)\n    mean = sum(data) / n\n\n    # Calculate variance\n    variance = sum((x - mean)**2 for x in data) / n\n\n    # return answer\n    return variance\n```\n\nThis program calculates the variance of the given discrete uniform distribution. The variance is a measure of spread or dispersion of a distribution, helping to understand how much pointed or spread out the results of a random variable can be. In this case, the distribution has four outcomes from 7 to 10, and we calculate the variance by finding the average of the squared differences from the mean of the data."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            " sales = 600000\navg_account_receivable = 50000\n\n# Do math calculation to get the answer\nreceivables_turnover = sales / avg_account_receivable\ndays_in_year = 365\n\n# return answer\nanswer = days_in_year / receivables_turnover\n\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            " coupon_rate = 0.06\nyears_to_maturity = 20\ninvestment_duration = 8\nmodified_duration = 11.470\n\n# The formula for yield to maturity (y) is:\n# y = (c * (1 - (1 + y)^(-n)) + f) / (npv - par_value)\n# where c is the coupon payment, n is the years to maturity, f is the par_value received at maturity,\n# npv is the current price, and par_value is the face value (100 for a $100 bond)\n# Given modified_duration, we can solve for y and find the yield to maturity\ny = (coupon_rate * (1 - (1 + modified_duration)**(-years_to_maturity)) + 100) / (100 - 100)\n\n# The formula for bond duration (Macaulay Duration) is:\n# D = ( ( ( Ta * c ) + ( n * TV ) ) / ( ( (1 + y) * coupon_rate * par_value ) - coupon_payments ) )\n# where Ta is the time until the next coupon payment is due, TV is the time value of money (c * Ta)^(1 - (1 + y)^Ta),\n# coupon_payments is the sum of all coupon payments over the bond's life, and T is the bond's life (years_to_maturity).\nimport math\ncoupon_payments = coupon_rate * par_value * years_to_maturity\n\n# Calculate time until the next coupon payment in years. Assuming semiannual coupon payments\nTa = investment_duration / 2\nTV = (coupon_rate * par_value * math.pow((1 + y / 2), -(Ta * 2)))\nMacaulay_duration = (((Ta * coupon_rate) + (years_to_maturity * TV)) / ((1 + y) * coupon_rate - coupon_payments))\n\n# Calculate the duration gap\nduration_gap = modified_duration - Macaulay_duration\n\n#"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            " price_return = 4/100\nroll_return = 1.5/100\ncollateral_required = 20/100\nfree_rate = 1/100\nposition_size = 1500000\ncurrent = 750\nlonger_term = 500\n\n# Calculate the return per unit of collateral\nreturn_per_unit = (price_return + roll_return) - (free_rate * collateral_required)\n\n# Calculate the overall return for the hedge position\ntotal_return = return_per_unit * position_size\n\n# Calculate the annualized return\nannualized_return = total_return * 365 / position_size\n\n# return answer\nreturn annualized_return"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            " ```python\n    current_service_costs = 320\n    past_service_costs = 150\n    employer_contributions = 1200\n    benefits_beginning_year = 45_000\n    benefits_end_year = 48_395\n    assets_beginning_year = 40_800\n    assets_end_year = 44_300\n    discount_rate = 7.5 / 100\n    expected_return_rate = 8.2 / 100\n\n    # Calculate the fundamental variables\n    avg_asset_growth = (assets_end_year - assets_beginning_year) / (1 + expected_return_rate) * discount_rate\n    asset_growth_for_liabilities = avg_asset_growth - (past_service_costs + current_service_costs) * discount_rate\n    pension_obligation_increase = (benefits_end_year + asset_growth_for_liabilities) - benefits_beginning_year\n    recurrent_contributions = pension_obligation_increase + employer_contributions + (current_service_costs + past_service_costs)\n\n    # return answer\n    return recurrent_contributions\n```\n\nExplanation:\n\n1. First, we assume that the actuarial loss is not considered for this question, and there are no write-offs of past service expenses.\n2. By knowing the fund's assets increases, we can calculate the average growth rate of the assets.\n3. Then, we subtract the sum of past_service_costs and current_service_costs (employer's total contribution for the year) to get the growth for liabilities.\n4. The pension obligation increase is calculated by adding the growth for liabilities and the benefits_end_year.\n5. The recurrent contributions (consisting of the pension obligation increase, employer contributions, and the sum of current_service_costs and past_service_costs) will be presented in I/S as per US GAAP."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            " total_revenue_200_units = 500000\n  total_revenue_250_units = 600000\n  units_increment = 50\n\n  # Do math calculation to get the answer\n  marginal_revenue = (total_revenue_250_units - total_revenue_200_units) / units_increment\n\n  # return answer\n  return marginal_revenue"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            " ```python\n    shares = 200000\n    initial_price = 90\n    shares_value = shares * initial_price\n    exchange_rate_init = 1.3983\n    shares_value_usd_init = shares_value / exchange_rate_init\n\n    exchange_rate_3_months = 1.4210\n    shares_value_usd_3_months = shares_value / exchange_rate_3_months\n\n    forward_rate_6_months = -27.0  # The six-month forward rate is the difference between the spot rate and the price at initiation (or three months later), multiplied by the number of shares and divided by the number of days.\n    days = 180  # Days in 6 months\n    forward_points = forward_rate_6_months / (shares * days / 100)\n    adjustment_factor = 1 + (forward_points / 10000)\n    exchange_rate_6_months = adjustment_factor * exchange_rate_init\n    shares_value_usd_6_months = shares_value / exchange_rate_6_months\n\n    profit_or_loss = shares_value_usd_6_months - shares_value_usd_3_months\n\n    # round to 2 decimal places\n    profit_or_loss = round(profit_or_loss, 2)\n\n    # return answer\n    return profit_or_loss\n```\n\nThis Python program calculates the mark-to-market value (profit or loss in US dollars) for the manager if they sell the Spanish shares after three months, based on the given data in Exhibit 1. It uses the six-month forward rate to adjust the exchange rate and calculate the value of shares in US dollars at three months and six months. Finally, it compares the values to find the profit or loss in US dollars by the time the shares are sold after three months."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            " ```python\n    spot_rates = {1: 0.02, 2: 0.025, 3: 0.035, 4: 0.055}\n    time_periods = [2, 4]\n\n    # Calculate compounded rates for 2 years from now\n    year_2_rate = (1 + spot_rates[1]) ** 2\n\n    # Calculate 2-year rate starting from 2 years from now\n    two_year_from_now_rate = spot_rates[2]\n    for time in range(3, time_periods[1]):\n        two_year_from_now_rate *= (1 + spot_rates[time])\n\n    # Calculate the forward rate\n    forward_rate = (two_year_from_now_rate / (1 + year_2_rate)) - 1\n\n    # return answer\n    return forward_rate\n```\n\nThe program calculates the forward rate for two years starting from two years from now using given spot rates, compounding the rates for the relevant time period, and then calculating the forward rate based on the compounded rates for the two periods."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            " ```python\n    # Define variables name and value\n    coupon_rate = 0.10\n    spot_rate_1 = 0.08\n    spot_rate_2 = 0.09\n    spot_rate_3 = 0.095\n    time_to_maturity_1 = 1\n    time_to_maturity_2 = 2\n    time_to_maturity_3 = 3\n\n    # Calculate present value of each coupon payment\n    coupon_payment = (coupon_rate / 100) * 100  # Annual coupon amount (in dollars)\n    pv_coupon_1 = coupon_payment / (1 + spot_rate_1)**time_to_maturity_1\n    pv_coupon_2 = coupon_payment * ((1 + spot_rate_1)**time_to_maturity_1) * ((1 + spot_rate_2)**(time_to_maturity_2 - time_to_maturity_1)) / ((1 + spot_rate_3)**time_to_maturity_2)\n    pv_coupon_3 = coupon_payment * ((1 + spot_rate_1)**time_to_maturity_1) * ((1 + spot_rate_2)**(time_to_maturity_2 - time_to_maturity_1)) * ((1 + spot_rate_3)**(time_to_maturity_3 - time_to_maturity_2)) / ((1 + spot_rate_3)**time_to_maturity_3)\n\n    # Calculate the present value of the face value (maturity amount)\n    face_value = 100\n    pv_face_value = face_value / (1 + spot_rate_3)**time_to_maturity_3\n\n    # Sum the present values of all cash flows to find the bond's present value\n    bond_present_value = pv_coupon_1 + pv_coupon_2 + pv_coupon_3 + pv_face_value\n\n    # return answer\n    return bond_present_value\n```\n\nBy running the provided program, the"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            " ```python\n    fixed_costs = 500000  # Fixed production costs up to 300,000 units\n    variable_costs_per_unit = 12  # Variable costs per unit (assuming $12 for simplicity)\n    unit_contribution_margin = 20  # Given unit contribution margin\n    break_even_units = fixed_costs / unit_contribution_margin  # Total fixed costs divided by the unit contribution margin gives the break-even point in terms of units\n    degrees_of_leverage_formula = (total_revenue - fixed_costs) / (total_revenue * variable_costs_per_unit / unit_sales)  # Formula for Degree of Operating Leverage (DOL)\n\n    # Find the production levels (in units) where DOL is the least\n    min_value, production_level = float('inf'), 0\n    for units in range(break_even_units, break_even_units + 300000 + 1):  # 300,000 units are the given fixed costs, add 1 to include the break-even point\n        total_revenue = units * unit_contribution_margin  # Total revenue\n        total_costs_per_unit = variable_costs_per_unit + (fixed_costs / units)  # Calculate total cost per unit considering both fixed and variable costs\n        total_costs = total_revenue * total_costs_per_unit  # Total costs\n        dol = (total_revenue - fixed_costs) / (total_revenue * total_costs_per_unit / units)  # Calculate DOL\n\n        # Save the production level with the least value of DOL\n        if dol < min_value:\n            min_value = dol\n            production_level = units\n\n    # return answer\n    return production_level\n```\nThis Python program calculates the production levels where the degree of operating leverage is least. It uses the given unit contribution margin, fixed costs, and assumes variable costs per unit to be $12 for simplicity. The program finds the break-even point and then iterates through the production levels from the"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            " purchase_price_2013 = 2000 * 50\nsales_2013 = 1500 * 70\ncost_of_goods_sold_2013 = purchase_price_2013 - sales_2013\nending_inventory_2013 = 2000 - 1500\n\npurchase_price_2014 = 1000 * 60\nsales_2014 = 500 * 75\ncost_of_goods_sold_2014 = purchase_price_2014 - sales_2014\nending_inventory_2014 = 1000 - 500\n\n# Calculate the total cost of goods sold for both years\ntotal_cost_of_goods_sold = cost_of_goods_sold_2013 + cost_of_goods_sold_2014\n\n# Calculate the total sales for both years\ntotal_sales = sales_2013 + sales_2014\n\n# Calculate the gross_profit for both years\ngross_profit = total_sales - total_cost_of_goods_sold\n\n# Calculate the ending inventory balance for Corporation Z in 2014\nending_inventory_balance_2014 = ending_inventory_3 + ending_inventory_2014\n\n# return answer\nreturn ending_inventory_balance_2014"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            " ```python\n    dirty_price = 104.17\n    clean_price = dirty_price / 1.0417\n    days_to_maturity = 90 - 30 # Days until the futures contract expires\n    days_in_year = 360 # Assume 360 days in a year for the Treasury note\n    discount_factor = (1 + (1.65 / 4)) ** (-(days_to_maturity / days_in_year))\n    coupon_rate = 0.02 # Semi-annual coupon rate\n    coupon_payment = clean_price * coupon_rate / 2 # Semi-annual coupon payment\n    accrued_interest = clean_price * (((days_to_maturity / days_in_year) - (30 / days_in_year)) * coupon_rate / 2) # Accrued interest\n    conversion_factor = 0.7025\n    carry_cost = (clean_price - accrued_interest) * (1.65 / 4) # Carry cost\n    quoted_price = (clean_price + carry_cost) / (1 + (1.65 / 4) + (coupon_rate - 0.005 / 12)) * conversion_factor # Quoted futures contract price equilibrium using the carry arbitrage model\n\n    # return answer\n    return quoted_price\n```\n\nIn this Python program, we defined the variables needed for the problem and then calculated the required parameters such as the clean price of the Treasury note, accrued interest, carry cost, and equilibrium quoted futures contract price using the given formulas. The equilibrium price is then returned."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            " ```python\ndef solution():\n    # Define variables\n    bond_values = [\n        {\"par_value\": 25000000, \"price\": 105, \"coupon\": 8},\n        {\"par_value\": 25000000, \"price\": 100, \"coupon\": 7},\n        {\"par_value\": 20000000, \"price\": 95, \"coupon\": 5},\n        {\"par_value\": 30000000, \"price\": 87, \"coupon\": 0}\n    ]\n\n    # Calculate the present value of a $1 cash flow at time t (using formula: P = C / (1 + r)^t)\n    def present_value(cash_flow, rate, years):\n        return cash_flow / (1 + rate) ** years\n\n    # Calculate the price change for a 1 basis point change in yield (basis point is 0.01)\n    def price_change_for_bps(bond, basis_points):\n        new_rate = bond[\"coupon\"] + basis_points / 100\n        new_present_value = present_value(bond[\"coupon\"], new_rate, bond[\"price\"] / 100)\n        return (new_present_value * 100) - (bond[\"price\"] * bond[\"coupon\"] / 10000)\n\n    # Calculate the weighted average price change for all bonds\n    total_bond_value = sum([bond[\"par_value\"] for bond in bond_values])\n    weighted_average_change = sum([price_change_for_bps(bond, 1) * bond[\"par_value\"] / total_bond_value for bond in bond_values])\n\n    # return answer\n    return round(weighted_average_change, 3)\n```\nThis program calculates the average price change for a 1 basis point change in yield for all the bonds in the collection, and then returns the answer rounded to 3 decimal places. You can run this program to get the price value of a basis point for"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 59.887
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            " ```python\n    bond_face_value = 2000000\n    bond_price = 0.75 * bond_face_value\n    risk_free_rate = 0.03\n    recovery_rate = 0\n\n    # Calculate the expected change in bond value in one year with no default\n    drift = bond_face_value * (1 + risk_free_rate) - bond_price\n\n    # Calculate the change in bond value in one year in case of default (assuming no recovery)\n    default_value = 0\n\n    # Calculate the mean and standard deviation of the bond value change\n    mean_change = (1 - recovery_rate) * drift\n    std_dev_change = math.sqrt((1 - recovery_rate)**2 * drift**2)\n\n    # Assume binsomial distribution with n=1 steps\n    p_up = (math.exp(std_dev_change) - 1) / (2 * mean_change)\n    p_down = 1 - p_up\n\n    # return probability of up (default)\n    return  p_up\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            " earnings_per_share = 2.00\nnum_shares_outstanding = 10000000\nshares_bought_back = 1000000\nmarket_rate = 30  # Assuming the book value per share is equal to the market rate for simplicity\nbps = market_rate / 100  # book per share\n\n# Calculate the new number of shares outstanding\nnew_num_shares_outstanding = num_shares_outstanding - shares_bought_back\n\n# Recalculate the earnings per share for the new number of shares outstanding\nnew_earnings_per_share = earnings_per_share * new_num_shares_outstanding / num_shares_outstanding\n\n# Calculate the new book value per share\nnew_book_value_per_share = new_earnings_per_share / P_E\n\n# Return the new book value per share\nreturn new_book_value_per_share * bps"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            " loan_amount = 5000000\nyearly_interest_rate = 5.8 / 100\nyears = 10\nmonths_per_year = 12\n\n# Calculate monthly interest rate\nmonthly_interest_rate = (yearly_interest_rate / 100) / 12\n\n# Calculate total payments over the loan period using the formula: P = P[r(1 + r)^n]/(1 + r)^n - 1\nrepayment_period = years * months_per_year\nloan_repayment = (loan_amount * (monthly_interest_rate * (1 + monthly_interest_rate)**repayment_period)) / ((1 + monthly_interest_rate)**repayment_period - 1)\n\n# Calculate the initial mortgage repayment at the end of this month (first month)\ninitial_repayment = loan_repayment / months_per_year\n\n# return answer\nreturn initial_repayment"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mrr_march = 0.0155 / 100\n    mrr_june = 0.0135 / 100\n    mrr_increment = 0.0065\n\n    # Calculate the coupon rate for 30 June\n    coupon_rate_june = mrr_march + mrr_increment + (mrr_june - mrr_march)\n\n    # return answer\n    return coupon_rate_june * 100\n```\n\nThe above program calculates the coupon rate for the interest remittance done on 30 June according to the provided information. The resulting value is multiplied by 100 to convert it into a percentage."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.663
        }
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            " securities_returns_1 = 0.3 # Return of first security\nsecurities_returns_2 = 0.7 # Return of second security\ncorrelation = 0.4 # Correlation between the two securities\nweights = [0.3, 0.7] # Weightages of the two securities\n\n# Calculate standard deviations\nsd_1 = 0.2 # Assuming a standard deviation for the first security (provided in the table for reference)\nsd_2 = 0.12 # Assuming a standard deviation for the second security (provided in the table for reference)\n\n# Calculate portfolio returns\nportfolio_return = sum(weights[i] * securities_returns_1 for i in range(len(weights)))\n\n# Calculate portfolio standard deviation using the formula for portfolio standard deviation when returns are correlated\nportfolio_covariance = correlation * (sd_1 * sd_2)\nportfolio_variance = sum((weights[i] ** 2) * (sd_1 ** 2) for i in range(len(weights))) + 2 * portfolio_covariance * sum(weights) + portfolio_covariance * sum((weights[i] ** 2) for i in range(len(weights)))\nportfolio_sd = pow(portfolio_variance, 0.5)\n\n# return answer\nreturn portfolio_sd"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            " ```python\n    fixed_interest = 0.03 / 4         # Annualized fixed interest quarterly\n    equity_index_initial = 100       # Initial equity index\n    nominal_amount = 100000000      # Nominal amount ($100 million)\n    number_of_cycles = 4            # Number of quarterly resets in a year\n    present_spot_rate_0_25 = 0.997506 # Present spot rate for 0.25 yrs\n    present_spot_rate_0_5 = 0.992556  # Present spot rate for 0.5 yrs\n    present_spot_rate_0_75 = 0.985222  # Present spot rate for 0.75 yrs\n    present_spot_rate_1 = 0.975610     # Present spot rate for 1 yr\n\n    # Calculate present value factors for each quarter\n    pvf_0_25 = present_spot_rate_0_25 ** (number_of_cycles * 0.25)\n    pvf_0_5 = present_spot_rate_0_5 ** (number_of_cycles * 0.5)\n    pvf_0_75 = present_spot_rate_0_75 ** (number_of_cycles * 0.75)\n    pvf_1 = present_spot_rate_1 ** number_of_cycles\n\n    # Calculate the swap value at each reset\n    swap_value_0_25 = (equity_index_initial * pvf_0_25) - (nominal_amount * fixed_interest * pvf_0_25)\n    swap_value_0_5 = ((equity_index_initial * pvf_0_5) + (swap_value_0_25 * present_spot_rate_0_25)) - (nominal_amount * fixed_interest * pvf_0_5)\n    swap_value_0_75 = ((equity_index_initial * pvf_0_75) + (swap_value"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            " ```python\n    market_debt = 10_000_000\n    market_capitalization = 45_000_000\n    cash_and_short_term_investments = 2_500_000\n    ebitda = 15_000_000\n    tax_rate = 0.4\n\n    # Calculate net_debt\n    net_debt = market_debt - cash_and_short_term_investments\n\n    # Calculate EBITDA_before_tax\n    ebitda_before_tax = ebitda\n\n    # Calculate EBITDA_after_tax\n    ebitda_after_tax = ebitda_before_tax * (1 - tax_rate)\n\n    # Calculate Enterprise Value (EV)\n    ev = market_capitalization + net_debt\n\n    # Calculate EV/EBITDA multiple\n    ev_ebitda = ev / ebitda_after_tax\n\n    # return answer\n    return ev_ebitda\n```\n\nNow if you run the program, the answer for the question will be the value of `ev_ebitda`."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            " interest_rate = 0.05 / 12  # Monthly interest rate\n  time = 3 * 12  # Number of months\n  amount = 5000  # Amount to be received\n\n  # Do math calculation to get the answer\n  present_value = amount * (1 / (1 + interest_rate) ** time)\n\n  # return answer\n  return present_value"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            " ```python\n    eur_received = 5000000\n    original_forward_rate = 0.7400\n    three_months_forward_rate = 0.7343\n    six_months_forward_rate = 0.7343 * (1 + 0.25 * 0.001)  # Calculating six-month rate from three-month rate\n    nine_months_forward_rate = six_months_forward_rate * (1 + 0.5 * 0.001)  # Calculating nine-month rate from six-month rate\n    libor = 0.00058  # Nine-month Libor rate\n\n    # Calculate the expected exchange rate in nine months\n    expected_exchange_rate = nine_months_forward_rate * (1 + libor)\n\n    # Calculate the mark-to-market gain\n    mark_to_market_gain = original_forward_rate - (expected_exchange_rate * eur_received)\n\n    # Return the mark-to-market gain\n    return mark_to_market_gain\n```\n\nThis Python function calculates the mark-to-market gain for Susan Sullivan's forward position by assuming that the Libor rate for the nine-month period is given and using the forward rates provided in the exhibits. The result is the difference between the original forward rate and the expected exchange rate in nine months, multiplied by the amount of EUR to be received."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            " ```python\n    noi = 267000\n    ffo = 290612\n    cash_and_equivalents = 230850\n    accounts_receivable = 282150\n    debt_and_other_liabilities = 2013500\n    non_cash_rents = 24702\n    recurring_maintenance = 60852\n    shares_outstanding = 67900\n    div_next_year = 2.25\n    div_growth_year2_3 = 5.00\n    div_growth_after_year3 = 4.50\n    assumed_cap_rate = 6.25\n    p_ffo_multiple = 13.5\n    p_affo_multiple = 17.1\n\n    # Calculate FFO available for common equity\n    ffo_common = ffo - (non_cash_rents + recurring_maintenance)\n\n    # Calculate enterprise value\n    ev = noi + cash_and_equivalents + accounts_receivable + debt_and_other_liabilities\n\n    # Calculate FFO per share\n    ffo_ps = ffo_common / shares_outstanding\n\n    # Calculate price to FFO multiple\n    p_ffo = ev / (ffo_common * p_ffo_multiple)\n\n    # Calculate AFFO per share\n    affo_ps = ffo_ps - recurring_maintenance / shares_outstanding\n\n    # Calculate price to normalized FFO multiple\n    p_affo = ev / (ffo_ps * p_affo_multiple)\n\n    # Calculate terminal value\n    g = (div_growth_after_year3 / (1 - div_growth_after_year3))\n    terminal_value = div_next_year * (g ** 3) * (shares_outstanding * (1 + div_growth_year2_3) ** 2)\n\n    # Calculate value of REIT B using Valuation Method 4\n    method_4_"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "output": [
            " ```python\n    # Define variables name and value\n    price_of_printer = 300000\n    useful_life_of_printer = 3\n    tax_rate = 0.25\n    net_income = 750000\n    year_end_equity = 10000000\n    dividends = 0\n\n    # Calculate depreciation expense for Firm A (using straight-line depreciation)\n    depreciation_expense = price_of_printer / useful_life_of_printer\n\n    # Adjust net income to include depreciation expense for Firm A\n    adjusted_net_income_firm_A = net_income - depreciation_expense\n\n    # Calculate the deferred tax liability for Firm A\n    deferred_tax_liability = depreciation_expense * tax_rate\n\n    # Calculate the ending equity for Firm A (accounting for depreciation and deferred tax)\n    ending_equity_firm_A = year_end_equity - depreciation_expense + deferred_tax_liability - dividends\n\n    # Since Firm B expenses the printer, we do not need to account for depreciation or deferred tax\n    ending_equity_firm_B = year_end_equity - dividends\n\n    # Calculate return on equity for Firm B (assuming net income for Firm B is equal to Firm A's adjusted net income)\n    ROE_firm_B = net_income / ending_equity_firm_B\n\n    # return answer\n    return ROE_firm_B\n```\nThis Python program calculates Firm B's return on equity (ROE) based on the given information. The ROE is calculated as net income divided by the ending equity. Since Firm B expires the printer, it does not have to account for depreciation or deferred tax, so the ending equity for Firm B is simply the year-end equity minus dividends. The net income for Firm B is assumed to be equal to Firm A's adjusted net income"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            " S = 85\n  K = 90\n  r = 0.05\n  c = 10\n  p = 15\n\n  # Calculate implied dividend yield\n  implied_dividend_yield = (c - p - (S * (r + (K - S) * (1 - math.exp(-r * 5))) / 5)) / S\n\n  # return answer\n  return implied_dividyard_yield"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            " bond_price = 100 # Bond price is usually 100 for par value, but it can change if there's a change in interest rates\nyears_to_maturity = 8 # Given: 8-year bond\nduration = 6.0 # Given\nconvexity = 55.0 # Given\nnew_spread = 0.01 # Given: 100 basis points equals 0.01\ngilts_yield = 0.03 # Assumed yield for Gilts (UK Government bond)\n\n# Macaulay Duration (MD) calculation\nmd = sum((c * t**2 + (100 - p) * t) / ((1 + gilts_yield)**t) for t, c in zip(range(1, years_to_maturity + 1), [bond_price] + [bond_price * new_spread / 100 for t in range(1, years_to_maturity + 1)]))\n\n# Duration change (modified duration)\nmodified_duration = (md - bond_price) / (100 - bond_price)\n\n# Calculate percentage change in return\nper_change_return = -modified_duration * new_spread\n\n# Calculate the effect on return\neffect_on_return = per_change_return * 100\n\n# return answer\nreturn effect_on_return"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            " bond_price = 100 # Bond price is initially assumed to be 100, this will be calculated\ncoupon_rate = 0.05 # Coupon rate given as 5%\nmaturity = 3 # Maturity is 3 years\nfrequency = 1 # Assuming interest is given yearly\nspread = 234 / 100 # Z-spread in decimal form\ndiscount_factor = [] # List to store discount factors\n\n# Calculate discount factors using the given spot curve\ndiscount_factor.append((1 / (1 + 0.0486)**frequency)**maturity) # For 1 year\ndiscount_factor.append((1 / (1 + 0.0495)**frequency)**maturity) # For 2 years\ndiscount_factor.append((1 / (1 + 0.0565)**frequency)**maturity) # For 3 years (current maturity)\n\n# Calculate present value of coupon payments\ncoupon_payments = (coupon_rate * 100) * len(discount_factor) # Considering one coupon per year\ncoupon_present_value = sum([coupon_rate * 100 * discount_factor[i] for i in range(len(discount_factor))] )\n\n# Calculate bond's worth\nbond_worth = sum(discount_factor) + coupon_present_value\nbond_worth += 100 - bond_worth # Adjust for Z-spread\n\n# return answer\nreturn bond_worth"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            " beta = 0.65\nrisk_free_rate = 3 / 100  # Converting the risk-free rate to a decimal\nmarket_return = 9 / 100  # Converting the expected market return to a decimal\n\n# Calculate the expected return for the stock\nexpected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n\n# return answer\nreturn expected_return"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            " bond_modified_duration = 10.3829\nbond_modified_convexity = 141.217\nyield_change = 0.005  # 50 bps converted to decimal\n\n# Calculate projected percentage price alteration using the formula for modified duration and convexity\nprice_alteration = -yield_change * bond_modified_duration + 0.5 * yield_change * yield_change * bond_modified_convexity\n\n# Convert the result to percentage\nanswer = price_alteration * 100\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            " ```python\n    # Define variables name and value\n    EBIT = 2000000  # Earnings Before Interest and Taxes (assuming for simplicity)\n    div_per_share = 0.3  # Annual dividend per common share\n    risk_free_rate = 0.03  # Risk-free interest rate\n    market_return = 0.10  # Expected market return\n    beta = 2.2  # Beta for Serene's common stock\n    tax_rate = 0.3  # Corporate tax rate\n    debt_shares = 1000000  # 10 million face value of bonds / $10 per share\n    share_price = 10  # Price per common share\n    new_bonds = 7500000  # $7.5 million of new funding\n\n    # Calculate market return for bonds\n    risk_premium_bonds = market_return - risk_free_rate\n    if new_bonds <= 2500000:\n        bond_yield = 0.1365  # Yield for bonds up to $2.5 million issued\n    else:\n        bond_yield = 0.16  # Yield for bonds issued beyond $2.5 million\n    bond_risk_premium = risk_premium_bonds * (bond_yield - risk_free_rate)\n\n    # Calculate cost of equity\n    eq_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    cost_of_equity = (eq_return - div_per_share) * share_price\n\n    # Calculate cost of debt\n    cost_debt = bond_yield * debt_shares\n\n    # Calculate new debt_to_equity ratio\n    new_debt = new_bonds + debt_shares\n    new_equity = (share_price * (1.2 - new_bonds / 1000000)) * 1000000  # Calculate new number of shares based on kept debt-to-equity ratio\n"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            " ```python\n    # Define variables name and value\n    coupon_rate = 0.08\n    time_to_maturity = 3\n    spot_rates = [(0.07, 1), (0.08, 2), (0.09, 3)]\n\n    # Find the appropriate spot rate for the bond's time-to-maturity\n    bond_spot_rate = next((rate for rate, time in spot_rates if time == time_to_maturity), None)\n\n    # If no spot rate found, return NaN\n    if not bond_spot_rate:\n        return \"NaN\"\n\n    # Do math calculation to get the answer (price = sum of ((Cash flow / (1 + rate)^n)) over the number of periods)\n    cash_flow = coupon_rate\n    price = 0\n    n = time_to_maturity\n    bond_rate = bond_spot_rate[0]\n\n    for i in range(1, n + 1):\n        price += cash_flow / (1 + bond_rate) ** i\n\n    # Include the face value given at maturity\n    price += 100\n\n    # return answer\n    return round(price, 2)\n```\n\nThis Python program calculates the price of Bond D by finding the appropriate spot rate for its time-to-maturity, summing the present values of the annual interest payments and the face value that will be paid at maturity. It uses the formula PV = C * (1 - (1 + rate)^(-n)) / rate for each interest payment and PV = FV / (1 + rate)^n for the face value."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    snowflake_licenses_value = 360 - 110 - 210 # Remaining value after subtracting current assets (Cash + Account Receivable + Inventory) from the acquisition cost\n    licenses_useful_life_years = 5\n\n    # Calculate amortization expense per year\n    amortization_expense_per_year = snowflake_licenses_value / licenses_useful_life_years\n\n    # Since both companies' 2019 figures mirror those of 2018, we can assume the same depreciation and amortization expense for Snowflake as in 2018 (as no depreciation is provided in the table)\n    snowflake_depreciation_and_amortization_expense = 106 # From the table for the year ending 31 December 2018\n\n    # Calculate Clearwater's consolidated depreciation and amortization expense for 2019\n    clearwater_depreciation_and_amortization_expense = snowflake_depreciation_and_amortization_expense + amortization_expense_per_year\n\n    # return answer\n    return clearwater_depreciation_and_amortization_expense\n```\n\nThis program calculates the consolidated depreciation and amortization expense for Clearwater based on the provided information. The remaining amount from the acquisition cost that corresponds to the licenses is calculated, and the annual amortization expense is calculated based on the useful life of the licenses. The depreciation and amortization expense for Snowflake is assumed to be the same as in 2018, and the consolidated depreciation and amortization expense for Clearwater is the sum of Snowflake's depreciation and amortization expense and the amortization expense for the licenses."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 114.0
        }
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    key_rate_2yr = 87.3212\n    key_rate_5yr = 87.2545\n    key_rate_10yr = 87.1454  # Initial Value\n    key_rate_30yr = 87.3454\n\n    # Calculate key rate '01 for a 10-year shift\n    key_rate_10yr_shift = key_rate_30yr - key_rate_2yr\n\n    # return answer\n    return key_rate_10yr_shift\n```\n\nIn this code, we define the key rates for different periods from the table. Then, we calculate the key rate '01 for a 10-year shift by subtracting the key rate for a 2-year period from the key rate for a 30-year period. The result is the key rate '01 for a 10-year shift. The Python program will return this value when executed."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.024
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.143,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            " ```python\n    P_A = 0.20  # Likelihood of bankruptcy\n    P_B = 0.70  # Probability of a \"good\" rating\n    P_B_Given_A = 0.50  # Probability of a \"good\" rating given bankruptcy\n\n    # Bayes' Formula: P(A|B) = (P(B|A) * P(A)) / P(B)\n    P_A_Given_B = (P_B_Given_A * P_A) / P_B\n\n    # return answer\n    return P_A_Given_B\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            " ```python\n    principle = 100000  # Customer's required amount a year from now\n    annual_interest_rate = 2.5/100  # Convert percentage to decimal\n    times_per_year = 52  # Number of weeks in a year\n\n    # Do math calculation to get the amount to be deposited today\n    total_years = 1  # Since it's a year from now\n    interest = principle * annual_interest_rate * times_per_year * total_years\n    deposit = principle + interest\n\n    # return answer\n    return deposit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            " ```python\n    eps_2017 = 1.31 - 0.18  # Calculate Core EPS for 2017 excluding acquisition charges\n    eps_2016 = 1.01  # Core EPS for 2016 is given\n    p_value = 60  # Zhang's believed trailing P/E ratio for Cratt Ltd\n\n    # Do math calculation to get the answer\n    share_price = p_value * eps_2017  # Calculate share price for 2017\n\n    # return answer\n    return share_price\n```\n\nAssuming Zhang believes the trailing P/E ratio for Cratt Ltd is 60. This program calculates the share price that corresponds to the Core EPS for 2017."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    ebitda = 2000\n    depreciation_expense = 400\n    income_tax = 375\n    net_income = 875\n    capex = 0.0 # You need to find the capital expenditure from the provided data, but it's not given, so I left it as 0.0 for the sake of the example.\n    net_working_capital_change = (800 - 750) + (850 - 720) - 400 - 120 - 550 # Calculate the change in net working capital (NWC)\n    fcfe = ebitda + depreciation_expense + net_income - capex + net_working_capital_change\n    answer = fcfe / 1_000_000\n\n    # return answer\n    return answer\n```\n\nThis program calculates the FCFE for PZ Inc. in 2018 by taking into account the changes between 2017 and 2018 financial data provided. However, it assumes that the capital expenditure (capex) is 0.0 as it's not explicitly given in the provided data. You would need to research or find the actual value of capex to refine the calculation."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.002
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            " ```python\n    financial_capital = 600000\n    human_capital = 1200000\n    stocks_allocation = 0.3\n    stock_equivalent_human_capital = human_capital * 0.25\n\n    # Calculate total capital and current stock allocation\n    total_capital = financial_capital + human_capital\n    current_stock_allocation = financial_capital / total_capital * 100\n\n    # Calculate the desired total allocation\n    desired_total_allocation = stocks_allocation + 1\n\n    # Calculate the appropriate equity allocation for financial capital\n    stock_allocation_financial_capital = (desired_total_allocation / total_capital) * financial_capital\n\n    # return answer\n    return stock_allocation_financial_capital\n```\nThe above Python program calculates the appropriate equity allocation for Peter's financial capital based on his total capital (combination of human capital and financial capital) and his desired total portfolio allocation (30% stocks + 1% other assets). The appropriate equity allocation for financial capital is then calculated by multiplying the total capital with the desired total allocation percentage and then applying it to the financial capital."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            " ```python\n    sales_2014 = 2125  # Sales in $ thousands for 2014\n    inventories_2014_LIFO = 312  # End of year inventories (LIFO) in $ thousands for 2014\n    lifo_reserve_2014 = 82  # LIFO reserve for 2014 in $ thousands\n    sales_2013 = 2003  # Sales in $ thousands for 2013\n    inventories_2013_LIFO = 280  # End of year inventories (LIFO) in $ thousands for 2013\n    lifo_reserve_2013 = 64  # LIFO reserve for 2013 in $ thousands\n    net_profit_margin = 0.049  # Net profit margin for 2014\n    tax_rate = 0.3  # Corporate tax rate\n\n    # Calculate cost of goods sold (COGS) using FIFO\n    COGS_2014_FIFO = sales_2014 - (inventories_2014_LIFO - lifo_reserve_2014)\n    COGS_2013_FIFO = sales_2013 - inventories_2013_LIFO\n\n    # Calculate net income for 2014 and 2013 with FIFO\n    net_income_2014_FIFO = (sales_2014 - COGS_2014_FIFO) * net_profit_margin\n    net_income_2013_FIFO = (sales_2013 - COGS_2013_FIFO) * net_profit_margin\n\n    # Calculate net income for 2014 under LIFO\n    net_income_2014_LIFO = (sales_2014 - (inventories_2014_LIFO + lifo_reserve_2014)) * net_profit_margin\n\n   "
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            " ```python\n    one_year_spot_rate = 1.02 / 100\n    two_year_spot_rate = 1.65 / 100\n    three_year_spot_rate = 2.15 / 100\n\n    # Calculate one-year forward rate two years from now as the ratio of three-year spot rate to two-year spot rate minus one.\n    forward_rate = (three_year_spot_rate / two_year_spot_rate) - 1\n\n    # Convert forward rate to percentage\n    forward_rate = forward_rate * 100\n\n    # return answer\n    return forward_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    stock_price = 48.6\n    volatility = 0.3\n    risk_free_rate = 0.003\n    X = 45\n    T = 0.25\n    d1 = 0.6352\n    d2 = 0.5486\n\n    # Calculate the parameter of normal distribution function\n    z = (math.log(stock_price / X) + (risk_free_rate + 0.5 * volatility**2 * T) * T) / (volatility * math.sqrt(T))\n    std_normal_pdf = stats.norm.cdf(z) - 1\n    d1 = math.exp(volatility * math.sqrt(T)) * d1\n    d2 = math.exp(volatility * math.sqrt(T)) * d2\n\n    # Calculate put option value\n    put_value = stock_price * std_normal_pdf - X * math.exp(-risk_free_rate * T) * (std_normal_pdf * d2 + math.sqrt(Pi) * (d1 - d2) * stats.norm.cdf(d2))\n\n    # return answer\n    return put_value\n```\n\nThis Python function calculates the value of the put option for company XYZ's stock based on the Black-Scholes-Merton model using the provided inputs. The answer will be in decimal form."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            " data = [3, 11, 3, 18, 18, 20, 6, 9, 2, 16]\n\n    # Calculate mean\n    mean = sum(data) / len(data)\n\n    # Calculate variance\n    variance_sum = 0\n    for value in data:\n        variance_sum += (value - mean) ** 2\n\n    variance = variance_sum / (len(data) - 1)\n\n    # Calculate standard deviation (square root of variance)\n    stddev = math.sqrt(variance)\n\n    # return answer\n    return round(stddev, 3)\n\nIn this code, the function `solution()` calculates the sample standard deviation of a list of 10 numbers using the formula:\n\n* Calculate the mean of the numbers\n* Calculate the variance for each number by subtracting the mean, square the result, and sum up all the squared differences\n* Calculate the standard deviation by taking the square root of the variance\n* Return the rounded standard deviation to 3 decimal places\n\nThe `math.sqrt()` function is used to calculate the square root, and `round()` function to round the standard deviation to 3 decimal places. The `len(data)` function is used to find the length of the list, and `sum(data)` function to sum up all the numbers in the list. The formula for variance uses `(len(data) - 1)` instead of `len(data)` because the standard deviation is a measurement of how spread out data is from the mean, and using `len(data)` in the denominator would not be accurate for small sample sizes."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            " ```python\ndef solution():\n    # Define the weights of the Kurok Fund and the benchmark for each stock\n    kurok_weights = [30, 30, 20, 10, 10]\n    benchmark_weights = [24, 20, 20, 18, 18]\n\n    # Define the returns for each stock\n    stock_returns = [14, 15, 12, 8, 10]\n\n    # Calculate the active return for each stock by subtracting the benchmark weighted return from the Kurok Fund weighted return\n    active_returns = [kurok * kurok_return - benchmark * benchmark_return for kurok, benchmark, kurok_return, benchmark_return in zip(kurok_weights, benchmark_weights, stock_returns, stock_returns)]\n\n    # Sum up the active returns to get the total value added\n    total_value_added = sum(active_returns)\n\n    # return the total value added (active return) for the Kurok Fund\n    return total_value_added\n```\nIn this Python program, the total value added (active return) for the Kurok Fund is calculated by first finding the weighted returns for the Kurok Fund and the benchmark for each stock, and then subtracting the benchmark weighted return from the Kurok Fund weighted return for each stock. The active returns are then summed up to get the total value added (active return) for the Kurok Fund, which is the final answer returned by the `solution()` function."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 90.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            " ```python\n    maturity_30 = 30 / 365  # mortgages maturing in 30 days as a fraction of a year\n    maturity_90 = 90 / 365  # mortgages maturing in 90 days as a fraction of a year\n    maturity_180 = 180 / 365  # mortgages maturing in 180 days as a fraction of a year\n    maturity_360 = 360 / 365  # mortgages maturing in 360 days as a fraction of a year\n\n    weight_30 = 1000000 / (1000000 + 2000000 + 3000000 + 4000000)  # weight of each mortgage pool\n    weight_90 = 2000000 / (1000000 + 2000000 + 3000000 + 4000000)\n    weight_180 = 3000000 / (1000000 + 2000000 + 3000000 + 4000000)\n    weight_360 = 4000000 / (1000000 + 2000000 + 3000000 + 4000000)\n\n    # Calculate weighted average maturity (WAM)\n    wam = (weight_30 * maturity_30 + weight_90 * maturity_90 + weight_180 * maturity_180 + weight_360 * maturity_360)\n\n    # return answer\n    return wam\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    sugar_quantity_nov = 70\n    sugar_price_nov = 0.90\n    sugar_quantity_dec = 120\n    sugar_price_dec = 1.00\n    cotton_quantity_nov = 60\n    cotton_price_nov = 0.60\n    cotton_quantity_dec = 50\n    cotton_price_dec = 0.80\n\n    # Do math calculation to get the value of the Paasche index for the consumption basket\n    p_n = (sugar_price_dec * cotton_price_dec) / (sugar_price_nov * cotton_price_nov)\n    q_n = (sugar_quantity_dec + cotton_quantity_dec) / (sugar_quantity_nov + cotton_quantity_nov)\n    paasche_index = (p_n * q_n) / (sugar_price_dec * cotton_quantity_dec + sugar_price_nov * cotton_quantity_nov + sugar_price_dec * cotton_price_nov + sugar_price_nov * cotton_quantity_nov)\n\n    # return answer\n    return paasche_index\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.012
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            " ```python\n    # Define variables name and value\n    first_year_return = 9.0 / 100\n    second_year_return = 5.0 / 100\n    third_year_return = 8.0 / 100\n    capital_gains_tax_rate = 25 / 100\n    embedded_gain = 0.1\n\n    # Calculate the ending value of the portfolio for each year\n    year1_ending_portfolio_value = 1 + first_year_return\n    year2_ending_portfolio_value = year1_ending_portfolio_value * (1 + second_year_return)\n    year3_ending_portfolio_value = year2_ending_portfolio_value * (1 + third_year_return)\n\n    # Calculate the embedded gain for each year\n    year1_embedded_gain = year1_ending_portfolio_value * embedded_gain\n    year2_embedded_gain = year2_ending_portfolio_value * embedded_gain\n    year3_embedded_gain = year3_ending_portfolio_value * embedded_gain\n\n    # Calculate the total capital gains\n    total_capital_gains = year1_embedded_gain + year2_embedded_gain + year3_embedded_gain\n\n    # Calculate the after-tax capital gains\n    after_tax_capital_gains = total_capital_gains * (1 - capital_gains_tax_rate)\n\n    # Calculate the annualized compounded return, including the after-tax capital gains\n    average_portfolio_value = (year1_ending_portfolio_value + year2_ending_portfolio_value + year3_ending_portfolio_value) / 3\n    annualized_after_tax_post_liquidation_return = ((year3_ending_portfolio_value / average_portfolio_value) ** (1/3) - 1) + (after_tax_capital_gains / average_portfolio_value)\n\n    # return answer\n    return annualized_after_tax_post_liquidation_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    base_asset_value = 50\n    risk_free_rate = 0.04\n    time_to_maturity = 3/12  # Converting months to a fraction of a year\n    advantages_value = 5\n    disadvantages_value = 6\n\n    # Calculate the present value of advantages and disadvantages\n    advantages_present_value = advantages_value / (1 + risk_free_rate ** time_to_maturity)\n    disadvantages_present_value = disadvantages_value / (1 + risk_free_rate ** time_to_maturity)\n\n    # Calculate the present value of the base asset\n    base_asset_present_value = base_asset_value / (1 + risk_free_rate ** time_to_maturity)\n\n    # Calculate the forward price by adding the present value of advantages and disadvantages to the present value of the base asset\n    forward_price = base_asset_present_value + advantages_present_value - disadvantages_present_value\n\n    # return answer\n    return forward_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 33.858
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            " ```python\n    aud_to_cny = 5.0765\n    cny_to_hkd = 1.1757\n\n    # Do math calculation to get the answer (aud_to_hkd = aud_to_cny / cny_to_hkd)\n    aud_to_hkd = aud_to_cny / cny_to_hkd\n\n    # return answer\n    return aud_to_hkd\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            " annual_payment = 100000\nytm = 0.055\nyears = 40\ndiscount_rate = ytm / (2 * 100)\nnp.t.recp_annuity(discount_rate, years, 1) * annual_payment\n\n# Import necessary libraries\nimport numpy as np\n\n# Do math calculation to get the answer\ndiscount_rate = ytm / (2 * 100)  # Discount rate as a decimal\nannuity_present_value = np.t.recp_annuity(discount_rate, years, 1)  # Calculate the present value of the annuity stream\ncost_of_annuity = annuity_present_value * annual_payment  # Multiply the present value by the annual payment to get the cost of the annuity\n\n# return answer\nreturn cost_of_annuity"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            " ```python\n    w1 = 40 / 100\n    w2 = 60 / 100\n    std_dev_1 = 30\n    std_dev_2 = 15\n    correlation = 0.25\n\n    # Calculate the variance of each security using their standard deviations squared\n    variance_1 = std_dev_1 ** 2\n    variance_2 = std_dev_2 ** 2\n\n    # Calculate the covariance between securities using the formula ((1 - correlation) * variance_1 * variance_2)\n    covariance = ((1 - correlation) * variance_1 * variance_2)\n\n    # Calculate the weighted variance for each security\n    weighted_var_1 = w1 * variance_1 + w2 * (w1 * w2 * covariance)\n    weighted_var_2 = w2 * variance_2 + w1 * w2 * covariance\n\n    # Calculate the total portfolio variance, which is the sum of the weighted variances\n    total_variance = weighted_var_1 + weighted_var_2\n\n    # Calculate the anticipated standard deviation, which is the square root of the total variance\n    std_deviation = (total_variance ** 0.5)\n\n    # return answer\n    return std_deviation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            " artwork_price = 1000\n  creation_cost = 300\n\n  # Calculate the value added in the final step (selling price minus creation cost)\n  value_added = artwork_price - creation_cost\n\n  # return answer\n  return value_added"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            " yearly_rate = 0.1431\nquarters_per_year = 4\n\n# Convert yearly rate to quarterly rate\nquarterly_rate = yearly_rate / quarters_per_year\n\n# Calculate effective annual rate (EAR) using the formula EAR = (1 + quarterly_rate)^(quarters_per_year) - 1\n# Use the math library's exp function to simulate the repeated compounding\near = (1 + quarterly_rate)**quarters_per_year - 1\n\n# return answer\nreturn ear"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            " ```python\n    current_equity_return = -9.4  # Year-over-year equity return in percentage\n    expected_equity_market_PE = 14.0  # Expected equity market P/E ratio\n    expected_real_earnings_growth = 5.0  # Expected annual real earnings growth in percentage\n    num_shares = 240_000_000 / 14.5  # Calculate the number of shares in the current portfolio\n    expected_equity_return = (expected_real_earnings_growth * expected_equity_market_PE) - (current_equity_return * (expected_equity_market_PE - 1)) * (num_shares / 100)\n\n    # return answer\n    return expected_equity_return * 100  # Convert to percentage\n```\n\nThis program applies the Grinold-Kroner model to estimate the anticipated annual equity return in percentage. It uses the variables from the provided table and calculates the number of shares using the current portfolio value and the current equity market P/E ratio. The answer is then returned in percentage format."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            " var_x = 0.25\n  var_y = 0.64\n  correlation = 0.09\n\n  # Calculate standard deviation of each security\n  std_x = math.sqrt(var_x)\n  std_y = math.sqrt(var_y)\n\n  # Calculate covariance using the formula: cov(X,Y) = correlation * (std_x * std_y)\n  covariance = correlation * (std_x * std_y)\n\n  # return answer\n  return covariance"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            " investment_return = 0.09  # Investment return as a decimal\n\n# Calculate the bond-equivalent yield (TER) based on the annual return and the number of days in a year (365)\nTER = (investment_return * 365) / 100\n\n# return the TER (which represents the return on a bond-equivalent basis)\nreturn TER"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            " price = 50000\nlife = 10\nresidual_value = 5000\nyears = 1\n\n# Calculate the depreciation using double-declining balance method\nsalvage_remaining = residual_value - (residual_value / life)\nfully_depreciated_amount = price - salvage_remaining\ncurrent_depreciation_rate = 2 * (1 - (salvage_remaining / price))\ndepreciation = fully_depreciated_amount * current_depreciation_rate\n\n# return answer\nreturn depreciation"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            " exchange_rate_london = 0.8878\n\n# Do math calculation to get the answer (inverting the rate for the expression EUR/GBP)\nanswer = 1 / exchange_rate_london\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            " market_risk_free_rate = 0.04\ncorp_bond_yield = 0.06\nrecovery_rate = 0.7\n\n# Calculate risk premium\nrisk_premium = corp_bond_yield - market_risk_free_rate\n\n# Convert yield to decimal\nrisk_premium /= 100\n\n# Calculate Z-score\nz_score = (risk_premium * math.sqrt(1 - recovery_rate)) / (1 - math.exp(-market_risk_free_rate))\n\n# Use standard normal distribution table or Z-score function to get the probablity of default\nimport scipy.stats as stats\n\nprob_default = stats.norm.cdf(z_score)\n\n# returns the probability of default\nreturn prob_default"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            " ```python\n    principal = 1300000000\n    pre_tax_profit = principal * 0.07\n    op_cost = 6000000\n    interest_expense = principal * 0.05\n    yearly_loss = principal * 0.003\n    unexpected_loss = principal * 0.08\n    risk_free_rate = 1.5\n    tax_rate = 0.25\n\n    # Calculate RAROC components\n    net_income = pre_tax_profit - op_cost - interest_expense - yearly_loss - unexpected_loss\n    risk_adjusted_return = net_income / principal\n    risk_adjusted_after_tax_return = risk_adjusted_return * (1 - tax_rate)\n    RAROC = risk_free_rate - risk_adjusted_after_tax_return\n\n    # return RAROC as decimal\n    return round(RAROC, 4)\n```\n\nThis Python function calculates the RAROC based on the given details. It first defines all the necessary variables, then calculates the net income, the risk-adjusted return, the risk-adjusted after-tax return and finally the RAROC. The RAROC is then returned as a decimal, rounded to four decimal places."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            " car_clients = 0.7\nhouse_clients = 0.5\nboth_clients = 0.2\n\ncar_renewal_rate = 0.4\nhouse_renewal_rate = 0.7\nboth_plans_renewal_rate = 0.8\n\nrenewal_car_only = car_clients * car_renewal_rate\nrenewal_house_only = house_clients * house_renewal_rate\nrenewal_both = both_clients * both_plans_renewal_rate\n\ntotal_renewal_car_only = renewal_car_only\ntotal_renewal_house_only = renewal_house_only\ntotal_renewal_both = renewal_both\n\nclients_with_car = clients_with_house = clients_with_both = 0\n\n# Find clients with: car only, house only, both\nclients_with_car = car_clients - both_clients\nclients_with_house = house_clients - both_clients\nclients_with_both = both_clients\n\n# Add renewal clients from each category\ntotal_renewal_car_only += (clients_with_car * car_renewal_rate)\ntotal_renewal_house_only += (clients_with_house * house_renewal_rate)\ntotal_renewal_both += (clients_with_both * both_plans_renewal_rate)\n\n# Get total clients\ntotal_clients = clients_with_car + clients_with_house + clients_with_both\n\n# Calculate the percentage of clients that will renew at least one plan next year\nanswer = (total_renewal_car_only + total_renewal_house_only + total_renewal_both) / total_clients * 100\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            " ```python\n    # Present and future values of the one-year interest rates\n    spot_rate_1 = 0.06\n    forward_rate_1_to_2 = 0.08\n    forward_rate_2_to_3 = 0.10\n\n    # Years calculation for 3-year bond\n    years = 3\n    year_1_to_2 = 1\n    year_2_to_3 = 2\n\n    # Present value calculation for each year\n    PV_year_1 = 1000 * (1 - 1 / (1 + spot_rate_1)**1)\n    PV_year_2 = PV_year_1 * (1 / (1 + forward_rate_1_to_2)**1) * (1 + forward_rate_2_to_3)**1\n    PV_year_3 = PV_year_2 * (100 * 0.1 / (1 + forward_rate_2_to_3)**1)\n\n    # Sum of present values for all years to get the bond's present value\n    bond_PV = PV_year_1 + PV_year_2 + PV_year_3\n\n    # return answer\n    return bond_PV\n```\n\nThis Python program calculates the present value of a 3-year, 10% annually paid, bond with a par value of $1000, given the present 1-year spot rate is 6%, the one-year forward rate one year from now is 8%, and the one-year forward rate two years from now is 10%. The present value is the answer."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    labor_growth_rate = 0.009  # annual growth rate of US labor input (%)\n    labor_productivity_growth = 0.015  # annual growth rate of US labor productivity (%)\n    inflation_rate = 0.021  # annual inflation rate (%)\n    dividend_yield = 0.0225  # annual dividend yield (%)\n\n    # Combine labor growth and productivity growth to get the nominal GDP growth rate\n    nominal_GDP_growth = labor_growth_rate + labor_productivity_growth\n\n    # Deduct inflation rate from nominal GDP growth rate to get real GDP growth rate\n    real_GDP_growth = nominal_GDP_growth - inflation_rate\n\n    # Since there is no P/E growth, the P/E ratio will remain constant, thus the capital gains will be the real GDP growth rate minus the dividend yield\n    capital_gains = real_GDP_growth - dividend_yield\n\n    # Assuming a constant real GDP growth rate and the present value of a perpetuity formula to find the continuously compounded long-term US equity returns\n    answer = capital_gains / (1 - dividend_yield)\n\n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.02
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            " fund_value = 100000000\nequity_allocation = 0.8\nequity_beta = 1.2\nnew_equity_allocation = 0.6\nstock_index_value = 1200\nmultiplier = 250\nfuture_index_beta = 0.95\n\n# Calculate the initial equity value\ninitial_equity_value = fund_value * equity_allocation\n\n# Calculate the new equity value\nnew_equity_value = fund_value * new_equity_allocation\n\n# Calculate the difference in equity value\ndifference = initial_equity_value - new_equity_value\n\n# Calculate the number of futures needed to be purchased for the equity\ntotal_equity_value_with_futures = new_equity_value\n equity_from_futures = difference\n\n# Calculate the number of stock index futures needed\nnum_of_futures = equity_from_futures / (stock_index_value * multiplier * future_index_beta)\n\n# return answer\nreturn num_of_futures"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            " beta_security_B = 1.50  # Beta of Share B from the table\n anticipated_return_B = 0.114  # Anticipated return of Share B from the question\n risk_free_rate = 0.03  # Risk-free rate from the question\n market_risk_premium = (anticipated_return_B - risk_free_rate) / beta_security_B\n\n # return answer\n return market_risk_premium * beta_security_B + risk_free_rate"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            " purchase_price = 32500\nfreight_and_insurance = 2100\ninstallation_cost = 800\ntesting_cost = 500\ntraining_cost = 1000\n\ntotal_cost = purchase_price + freight_and_insurance + installation_cost + testing_cost + training_cost\n\nreturn total_cost"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            " ```python\n    carried_interest_rate = 0.20\n    pledged_capital = 100_000_000\n    paid_in_capital = 90_000_000\n    distributions = 30_000_000\n    year_end_nav_before = 160_000_000\n    year_end_nav_after = 130_000_000\n    projected_nav = 250_000_000\n\n    # Calculate the amount that is considered a carry based on current year end NAV\n    current_carry = year_end_nav_before * carried_interest_rate - distributions\n\n    # Calculate the increase in NAV from last year to next year\n    nav_increase = projected_nav - year_end_nav_before\n\n    # Calculate the amount of pledged capital still available for future earnouts\n    available_capital = pledged_capital - paid_in_capital\n\n    # Calculate the projected carry for the next year\n    projected_carry = current_carry * (nav_increase / available_capital)\n\n    # return answer\n    return projected_carry\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            " investment_amount = 75000\ninterest_rate = 0.07 / 4\ntime_period = 6 * 4    # 6 years with quarterly compounding\n\n# Do math calculation to get the answer\nanswer = investment_amount * (1 + interest_rate)**time_period\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    revaluation_balance = 10000\n   tax_rate = 0.3\n    new_estimated_life = 20\n\n    # Calculate depreciation as Annual Depreciation = (Acquisition cost - Accumulated depreciation) / Remaining life\n    annual_depreciation = (8000 - 3000) / 20\n\n    # Calculate taxable temporary difference\n    taxable_td = revaluation_balance * (1 / new_estimated_life) - annual_depreciation\n\n    # Calculate deferred tax liability\n    deferred_tax_liability = tax_rate * taxable_td\n\n    # return answer\n    return deferred_tax_liability\n```\nKeep in mind that you may need to make additional assumptions such as whether the depreciation is considered straight-line in this context and if the tax law considers the revaluation as a taxable event. Consult a tax specialist for further guidance. Also note that this Python code only provides an estimation and may not be suitable for real-world accounting purposes without further requirements and adjustments."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            " probabilities = [0.05, 0.70, 0.25]\nsales = [70, 40, 25]  # Sales in millions\n\n# Calculate the mean\nmean = sum(sales * probabilities)\n\n# Calculate the variance\nsum_of_squared_deviations = sum([(sale - mean) ** 2 * prob for sale, prob in zip(sales, probabilities)] )\nvariance = sum_of_squared_deviations / sum(probabilities)\n\n# Calculate the standard deviation\nstandard_deviation = variance ** 0.5\n\n# return answer\nreturn standard_deviation\n\n# Test the function\nprint(solution())"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            " ```python\n   contributions = 1200\n   start_pbo = 45000\n   end_pbo = 43500\n   start_assets = 40800\n   end_assets = 39650\n\n   # Calculate total Pension Benefit Obligation (PBO) change\n   total_pbo_change = start_pbo - end_pbo\n\n   # Calculate total pension assets change\n   total_assets_change = start_assets - end_assets\n\n   # Calculate pension cost per pound change in PBO (PBO change / pounds of pension assets change)\n   pension_cost_per_pound = total_pbo_change / total_assets_change\n\n   # Calculate total pension contribution (pension cost per pound * total pension assets)\n   total_recurring_pension_cost = pension_cost_per_pound * contributions * 365\n\n   # return answer\n   return total_recurring_pension_cost\n```\nThe above Python function calculates the overall recurring pension cost for XYZ SF based on the provided data. The answer will be the total recurring pension cost in dollars. You can call the function by running the `solution()` command. Keep in mind that this calculation assumes a stable relationship between PBO and assets, and it does not account for other factors that might affect the pension plan's funding status, such as investment returns or future salary increases. This is just a simplified model for illustrative purposes, and actual calculations may require more complex analysis."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            " investment = [500, 600, 1000]\nreturns = [0.12, 0.05, 0.01]\nn_periods = len(investment)\n\n# Calculate the holding period return for each year\nholding_period_returns = [(1 + return_val) ** (1 / n_periods) - 1 for return_val in returns]\n\n# return the answer\nreturn holding_period_returns[0]  # since we are looking for the holding period return for the first year\n\nThis Python program calculates the holding period return for the first year based on the investments and returns provided in the table. The holding period return is the geometric mean of the individual returns over the investing period, in this case, it's the first year. The geometric mean is used because returns are usually cumulative and it assumes that the money stays invested for each period."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            " common_shares = 60000\noutstanding_warrants = 5000\nwarrant_conversion_price = 25\nend_of_year_stock_price = 30\naverage_stock_price = 20\n\n# Calculate total shares by adding common shares and potential warrants conversion\ntotal_shares = common_shares + (outstanding_warrants * (end_of_year_stock_price / warrant_conversion_price))\n\n# Calculate diluted EPS\ndiluted_eps = (end_of_year_stock_price - average_stock_price) / total_shares\n\n# return answer\nreturn diluted_eps\n\nThis program calculates the diluted EPS by adding the potential dilutive effect of the warrants and then dividing the earnings per share formula by the total shares. The number of shares is calculated by adding the common shares to the number of shares that could be created from the conversion of warrants, based on the end-of-year stock price and the warrant conversion price."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    eps = 2\n    share_price = 40\n\n    # Do math calculation to get the answer\n    price_to_earnings_ratio = share_price / eps\n\n    # return answer\n    return price_to_earnings_ratio\n```\n\nIn this Python program, we define the EPS (Earnings Per Share) and share price for XY Corporation. We then calculate the Price-to-Earnings ratio by dividing the share price by EPS. The answer is the calculated Price-to-Earnings ratio."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 20.0
        }
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    mean_return = 0.053  # Annual mean return\n    drawdown_risk_highest = 0.102  # Annual highest drawdown risk\n    drawdown_risk_mean = 0.068  # Annual mean drawdown risk\n\n    # Calculate R-Multiple (Calmar Ratio)\n    calmar_ratio = mean_return / drawdown_risk_highest\n\n    return calmar_ratio\n```\n\nThe Calmar ratio is a performance ratio used in alternative investments to represent the ratio of a fund's average annual returns to the peak-to-trough drawdowns in the same time period. The Calmar ratio helps demonstrate an investment's risk-adjusted performance and allows for comparison among several funds. In this case, the Calmar ratio is derived by dividing the mean return by the highest drawdown risk."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.52
        }
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            " ```python\n    trades_per_hour = 500 * 60 * 6\n    trade_difference = 0.0015    # Difference between Prevailing Bid and Prevailing Offer (in decimal)\n\n    # Do math calculation to get the answer\n    total_spread = trades_per_hour * trade_difference * 2  # Multiplying by 2 as there are both buying and selling spreads\n\n    # return answer\n    return total_spread\n```\nThis program calculates the total trading spread for an hour based on the provided data. Since the trader is dividing a large order into smaller parts, it is assumed that the spread remains constant for each transaction. The total trading spread for an hour is then divided by the number of trades to get the average effective spread. However, since the question asks for the average effective spread of the transactions, we return the total trading spread for an hour without dividing it by the number of trades."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            " ```python\n    initial_payout_per_quarter = 2.00\n    annual_yield_rate = 0.06 / 4  # Convert annual rate to quarterly rate\n    total_quarters = 5 * 4  # 5 quarters for the first three payments, then infinite after that\n\n    # Calculate the present value of the future cash flows\n    present_value = initial_payout_per_quarter * (1 - math.pow((1 + annual_yield_rate), -total_quarters)) / (annual_yield_rate)\n\n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            " license_cost = 6500\nlifetime = 4\nbenefit_years = 3\namortization_method = \"straight-line\"\n\n# Do math calculation to get the answer\namortization_per_year = license_cost / benefit_years\naccumulated_amortization_by_year = [i * amortization_per_year for i in range(1, benefit_years + 1)]\n\nif amortization_method == \"straight-line\":\n    year_2_amortization = (benefit_years - 1) * amortization_per_year\nelse:\n    # Calculate periodic amortization for remaining beneficial years\n    remaining_benefit_years = benefit_years - 2\n    amortization_remaining_years = license_cost / remaining_benefit_years\n    year_2_amortization = amortization_per_year + (amortization_remaining_years * remaning_benefit_years)\n\n# return answer\nreturn year_2_amortization"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            " dividend = 2.00\ngrowth_rate = 0.04\nrequired_return = 0.07\n\n# Do math calculation to get the answer\nprice_multiple = (required_return - growth_rate) / (growth_rate)\n\ndividend_growth = 1 + growth_rate\nfuture_dividends = [dividend * dividend_growth ** year for year in range(1, 6)]\n\npresent_value_of_dividends = sum(future_dividends) / (price_multiple)\n\nshare_price = present_value_of_dividends + present_value_of_dividends * (dividend_growth ** 6 - 1) / (price_multiple * (dividend_growth ** 6 - 1))\n\n# return answer\nreturn share_price"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            " ```python\ndef solution():\n    # Define a list to store sales values of the four companies\n    sales = [500, 350, 270, 200]\n    total_sales = sum(sales)  # Calculate total sales\n    market_share_total = sum(sales) + 40  # Calculate total market (including all others)\n    concentration_ratio = (total_sales / market_share_total) * 100  # Calculate concentration ratio\n\n    # return answer\n    return concentration_ratio\n```\n\nThe concentration ratio is a measure of the degree of concentration of market share among a limited number of firms. In this case, it represents the combined market share of Ajiwo, Bdfhyj, Cegfd, and Ddgh, to understand the market dominance of these four firms compared to the rest of the market."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 97.059
        }
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.571,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            " ```python\n    sales_ZX = 3500  # Sales of ZX Financial Service in €\n    cost_of_sales_ZX = 1500  # Cost of Sales of ZX Financial Service in €\n    exchange_rate_ZX_acquisition = 1.55  # Exchange rate when ZX Financial Service was acquired\n    exchange_rate_2018 = 1.77  # Exchange rate in 2018\n    avg_exchange_rate_2018 = 1.68  # 2018 average exchange rate\n\n    # Calculate sales and cost of sales in USD\n    sales_ZX_dollars = sales_ZX * exchange_rate_2018\n    cost_of_sales_ZX_dollars = cost_of_sales_ZX * exchange_rate_2018\n\n    # Calculate gross profit and gross profit margin\n    gross_profit_ZX = sales_ZX_dollars - cost_of_sales_ZX_dollars\n    gross_profit_margin_ZX = gross_profit_ZX / sales_ZX_dollars\n\n    # return answer\n    return gross_profit_margin_ZX\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            " purchases_securities = 240\nsales_securities = 300\nbonds_issuance = 500\nshares_acquisition = 275\n\n# Do math calculation to get the answer\ninvestments_cash_flow = purchases_securities - sales_securities + bonds_issuance - shares_acquisition\n\n# return answer\nreturn investments_cash_flow"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            " ```python\n    # Define the stock prices and their probabilities\n    stock_prices = [25, 45, 60]\n    probabilities = [0.05, 0.46, 0.16]\n\n    # Define the target price\n    target_price = 45\n\n    # Initialize the count of times the stock reaches the target price\n    count = 0\n\n    # Loop through all possible outcomes\n    for i in range(1000000):  # To get a more accurate answer, increase the number of iterations\n        # Simulate a random event (stock price change)\n        current_price = stock_prices[0]  # Start from the initial price\n        for price, probability in zip(stock_prices, probabilities):\n            # Simulate the probability of the event happening\n            if random.random() < probability:\n                current_price = price\n\n        # Check if the simulated price equals the target price\n        if current_price == target_price:\n            count += 1\n\n    # Calculate the likelihood based on the count and total number of iterations\n    likelihood = count / 1000000\n\n    # return answer\n    return likelihood\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            " ```python\n    face_value = 10000000  # Face value of the bond in thousands ($10 million)\n    invoice_price = 11000000  # Invoice price of the bond in thousands ($11 million)\n    repo_rate = 0.2  # Repo rate as a decimal (20%)\n    days = 20  # Number of days in the repurchase agreement\n\n    # Calculate the interest\n    interest = invoice_price * repo_rate * days / 365\n\n    # Calculate the repurchase cost\n    repurchase_cost = invoice_price + interest\n\n    # Retain one decimal place for the answer\n    repurchase_cost = round(repurchase_cost, 1)\n\n    # return answer\n    return repurchase_cost\n```\n\nThe repurchase cost will be the invoice price plus the interest calculated based on the repo rate and the number of days."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    starting_cash = 110 # Retained Earnings for 2016 (more accurate would be taking previous year's net income and adding net cash provided by operating activities)\n    cash_dividend = 8 # Dividends paid in 2017\n    impairment_expense = 12 # Impairment expense in 2017\n    accounts_receivable_change = 48 - 45 # Change in Accounts Receivable from 2016 to 2017\n    inventory_change = 20 - 24 # Change in Inventory from 2016 to 2017\n    accounts_payable_change = 33 - 30 # Change in Accounts Payable from 2016 to 2017\n\n    # Do math calculation to get the answer\n    cash_from_operations = starting_cash + accounts_receivable_change - inventory_change + accounts_payable_change\n    net_cash_flow = cash_from_operations - cash_dividend - impairment_expense\n\n    # Classify the cash flow as Operating, Investing, or Financing\n    if cash_dividend > 0:\n        operating_cash_flow = net_cash_flow\n    else:\n        operating_cash_flow = net_cash_flow + cash_dividend\n\n    # return answer\n    return round(operating_cash_flow, 2)\n```\n\nThis program calculates the change in cash position based on account balances From 2016 to 2017 and categorizes the cash flow as 'Operating' considering the dividend payment is a financing activity. By subtracting the cash dividend and impairment expense from the net cash flow, we can determine the operating cash flow. The result is provided in millions."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 100.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            " The Poisson distribution is a discrete probability distribution that describes the number of events occurring within a fixed interval of time or space, such as the number of phone calls received during a minute, the number of cars passing a spot on a road during an hour, or the number of defective items produced in a batch. The Poisson distribution is characterized by its parameter 'lambda', which is the average rate of occurrence of the event.\n\nIn this case, 5% of the vehicles arriving at the production line are defective. This means the average rate of defective vehicles out of 100 vehicles (the total percentage multiply by 100) is 5. Therefore, we set the 'lambda' value as 5.\n\nSince we want to find the probability of recording exactly 1 defective vehicle out of 5 vehicles, we'll use the Poisson probability mass function (PMF).\n\n```python\nimport scipy.stats\n\ndef solution():\n    # Define variables name and value\n    lambda_value = 5  # average rate of defective vehicles\n    vehicles = 5  # number of vehicles to check\n\n    # Do math calculation to get the answer\n    answer = scipy.stats.poisson.pmf(1, lambda_value)\n\n    # return answer\n    return answer\n```\n\nThis program uses the scipy.stats library to calculate the probability. The `poisson.pmf` function returns the probability mass function P(X=k) for a given 'lambda' value and desired 'k', which represents the number of occurrences in an interval. In our case, we are looking for P(X=1) or the probability of having exactly one defective vehicle among 5 vehicles."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": "0.03368973499542734"
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            " par_value = 100\nbond_price = 85.784357\ncoupon_rate = 0.03\nnum_years = 9\nyield_to_maturity = 0.05\n\n# Convert yearly coupon rate to decimals\ncoupon_rate_decimal = coupon_rate / 100\n\n# Calculate the annual coupon payment\nannual_coupon_payment = par_value * coupon_rate_decimal\n\n# Calculate the number of coupon payments\nnum_coupon_payments = num_years\n\n# Calculate the present value of the coupon payments and the face value\npresent_value_coupon_payments = annual_coupon_payment * (1 - (1 + yield_to_maturity) ** (-num_years)) * num_coupon_payments\npresent_value_face_value = par_value / (1 + yield_to_maturity) ** num_years\n\n# Calculate the total present value of the bond\ntotal_present_value = present_value_coupon_payments + present_value_face_value\n\n# Calculate the number of basis points for the bond price\nbond_price_bp = (bond_price - total_present_value) / total_present_value * 10000\n\n# Return the answer\nreturn bond_price_bp"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            " n = 1600 # number of samples\n avg_sample = 998.7 # average of the observed samples\n std_dev_sample = 100 # standard deviation of the observed samples\n n_population = 1000 # established average of the community\n\n # Calculate standard error of the sample mean using the formula: standard error = std_dev_sample / sqrt(n)\n std_err_sample = std_dev_sample / (n ** 0.5)\n\n # return answer\n return std_err_sample"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            " stocks = 500000\nfixed_income = 330000\nhouse_value = 350000\nmortgage = 175000\ntotal_investments = stocks + fixed_income - mortgage\nearnings_before_retirement = 980000\nconsumption = 870000\ncollege_tuition = 150000\nfoundation_future_value = 600000\npresent_foundation_value = future_value_to_present(foundation_future_value, 25)\n\nassests = total_investments + house_value + earnings_before_retirement - consumption - college_tuition + present_foundation_value\n\ndef future_value_to_present(future_value, time_in_years):\n    # Assuming a 3% annual discount rate\n    discount_rate = 0.03 / 12\n    present_value = future_value * (discount_rate ** time_in_years) * ((1 + discount_rate) ** time_in_years)\n    return present_value\n\n# return answer\nreturn assets"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            " cost_of_goods_sold = 8000\n  sale_price = 10000\n  days_to_pay = 30\n\n  # Calculate accounts receivable expense and increase in cash\n  accounts_receivable_expense = sale_price - cost_of_goods_sold\n  increase_in_cash = sale_price\n\n  # Calculate the change in current assets (accounts receivable + cash)\n  current_assets = accounts_receivable_expense + increase_in_cash\n  days_to_pay_in_days = days_to_pay / 365\n\n  # Calculate the impact on the current ratio (current assets / current liabilities)\n  # This question does not provide current liabilities, so we can't calculate the current ratio here.\n\n  # Calculate the net shift in total assets\n  net_shift = current_assets - cost_of_goods_sold\n\n  # Return the net shift in total assets\n  return net_shift\n```\n\nPlease note that this program calculates the net shift in total assets as the difference between the increase in current assets (cash and accounts receivable) and the cost of goods sold. However, it does not calculate the current ratio, as the current liabilities are not provided in the question.\n\nFor the given information, the net shift in total assets would be `net_shift = 20000`."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tax_rate = 0.35\n    debt_percentage = 0.6\n    equity_beta = 1.4\n\n    # Calculate the weighted beta (W_beta) of debt and equity\n    debt_beta = 0\n    equity_weight = 1 - debt_percentage\n    debt_weight = debt_percentage\n    W_beta = (debt_weight * 0) + (equity_weight * equity_beta)\n\n    # Calculate the risk-free rate (r_f) and market risk premium (r_m)\n    r_f = 0.04 # For example, let's assume a risk-free rate of 4%\n    r_m = 0.08 # For example, let's assume a market risk premium of 8%\n\n    # Calculate the asset beta (A_beta)\n    A_beta = W_beta + (1 - debt_percentage) * tax_rate * equity_beta\n\n    # return answer\n    return A_beta\n```\n\nThis program calculates the asset beta of a business given a tax rate, debt percentage, and equity beta. It assumes a risk-free rate (r_f) and market risk premium (r_m) have been set. If those values are not known or vary, they should be adjusted accordingly."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.756
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            " shares_value = 100_000_000\nbonds_value = 100_000_000\nshares_percentage = 0.8\nbonds_percentage = 0.2\n\nnew_shares_percentage = 0.6\nnew_bonds_percentage = 0.4\n\ncurrent_shares_value = shares_value * shares_percentage\ncurrent_bonds_value = bonds_value * bonds_percentage\n\ndesired_shares_value = current_shares_value * new_shares_percentage\ndesired_bonds_value = current_bonds_value * new_bonds_percentage\n\nneeded_shares_value = desired_shares_value - current_shares_value\nneeded_bonds_value = desired_bonds_value - current_bonds_value\n\n# Stocks\nstock_index = 1200\nmultiplier = 250\nstock_cost = stock_index * multiplier\n\nstock_price = shares_value / stock_index\nnumber_of_stocks = needed_shares_value / stock_price\n\n# Bonds futures\nbond_agreement_cost = 105_300\nduration = 6.5\n\nnumber_of_futures = needed_bonds_value / bond_agreement_cost\n\n# Calculate total investment needed\ntotal_investment = number_of_stocks * stock_cost + number_of_futures * bond_agreement_cost\n\n# return answer\nreturn total_investment"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            " bond_price = 1105.94\nface_value = 1000\ncoupon_rate = 0.08\nyears_to_maturity = 20\nrisk_premium_for_shares = 0.05\nmarginal_tax_rate = 0.3\n\n# Calculate yield to maturity (YTM) of the bond\nr = ((face_value * coupon_rate) + (bond_price - face_value)) / (bond_price + (bond_price * years_to_maturity * coupon_rate / 2))\n\n# Calculate cost of debt (r_d)\nr_d = r * (1 - marginal_tax_rate)\n\n# Calculate cost of equity (r_e) using the bond-yield-plus-risk-premium method\nr_e = r_d + risk_premium_for_shares\n\n# return answer\nreturn r_e"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            " ```python\n    stocks = [('Stock X', 15, 100),\n              ('Stock Y', 20, 1000),\n              ('Stock Z', 30, 2000)]\n    starting_index = 121\n\n    # Do math calculation to get the answer\n    total_market_cap = sum([s[1] * s[2] for s in stocks])\n    index_value = starting_index - ((total_market_cap / sum(s[1] for s in stocks)) * 100)\n\n    # return answer\n    return index_value\n```\n\nThis program calculates the equal-weighted index value for the provided stocks by first summing their total market capitalization and then calculating the index value using the provided starting index value and the equal weightage of each stock. The formula for the index value is `starting_index - (total_market_cap / (market cap of a single share of each stock) * 100)`."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            " ```python\n    # Define variables name and value\n    dividends_2017 = 0.22\n    growth_rate_years_1_to_4 = 0.12\n    growth_rate_years_5_onwards = 0.06\n    required_return = 0.09\n\n    # Do math calculation to get the answer\n    n_years_1_to_4 = 4\n    n_years_5_onwards = float('inf')\n    dividends = [dividends_2017 * (1 + growth_rate_years_1_to_4) ** i for i in range(1, n_years_1_to_4 + 1)]\n    dividends += [dividends[-1] * (1 + growth_rate_years_5_onwards)]\n    stock_value_year_4 = dividends[n_years_1_to_4 - 1] * (1 + required_return) ** n_years_1_to_4\n    terminal_value = stock_value_year_4 / (required_return - growth_rate_years_5_onwards)\n    answer = terminal_value\n\n    # return answer\n    return answer\n```\nThis Python program calculates the terminal value of the stock according to the two-stage Dividend Discount Model (DDM) with growth rates, required return, and initial dividends provided in the question. The program first computes the dividends for the next 4 years, then calculates the stock value at the end of the 4 years, and lastly, it computes the terminal value using the formula for the growth from year 5 onwards."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            " ```python\n    # Define the current market price and change in price for a 10 basis points change in YTM\n    market_price = 98.722\n    price_change_inc = -0.00073\n    price_change_dec = 0.00073\n\n    # Define the YTM, change in YTM for a 10 basis points change, and the face value\n    ytm = 3  # in decimal form (e.g. 3% would be 0.03)\n    ytm_change = 0.001  # 10 basis points (0.01%)\n    face_value = 100\n\n    # Calculate the semi-annual YTM and time to maturity (assuming bond is semi-annual)\n    semi_annual_ytm = ytm * 2\n    time_to_maturity = 20 * 2  # assuming maturity in years\n\n    # Calculate the price change for a small change in YTM\n    small_ytm_change = ytm_change / 2  # since semi-annual compounding\n\n    # Calculate the linear and convexity parts of the price change\n    linear_part = (price_change_inc + price_change_dec) / (2 * small_ytm_change)\n    convexity = (price_change_dec - 2 * linear_part * small_ytm_change + price_change_inc) / (small_ytm_change ** 2)\n\n    # Return the calculated convexity\n    return convexity * (time_to_maturity ** 2)\n```\nThis Python program calculates the approximate convexity of a bond using the bond's current market price, change in price for a 10 basis points increase and decrease in Yield-to-Maturity (YTM), YTM, face value, semi-annual YTM, time to maturity, and applies the pricing formula for a bond with semi-annual compounding. The final answer is the calculated convexity multiplied by the square of the time to maturity (assuming maturity in years)."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            " net_sales_per_share = 35\ncurrent_share_price = 56\n\n# Do math calculation to get the answer (Price-to-Sales ratio is defined as the current share price divided by net sales per share)\nprice_to_sales_ratio = current_share_price / net_sales_per_share\n\n# return answer\nreturn price_to_sales_ratio"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            " ```python\n    current_year_cost_of_goods_sold = 9000\n    current_year_accounts_payable = 600\n    current_year_days = 365\n\n    previous_year_cost_of_goods_sold = 7500\n    previous_year_accounts_payable = 600\n    previous_year_days = 365\n\n    # Calculate payables turnover ratio\n    current_year_payables_turnover = (current_year_cost_of_goods_sold / current_year_accounts_payable)\n    previous_year_payables_turnover = (previous_year_cost_of_goods_sold / previous_year_accounts_payable)\n\n    # Calculate change in payables turnover ratio\n    change_in_payables_turnover = current_year_payables_turnover - previous_year_payables_turnover\n\n    # Calculate days of payables for the current year\n    current_year_days_of_payables = current_year_days * change_in_payables_turnover + previous_year_days_of_payables\n\n    # return answer\n    return current_year_days_of_payables\n```\n\nIt's important to note that this program assumes a constant change in payables turnover ratio from the current year to the previous year. However, in practice, the ratio might not be constant, and it could be calculated based on historical data and other factors. In such cases, it's recommended to consult a financial expert or use a more sophisticated model for a more accurate analysis."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            " asset_a_value = 5000000\n  marginal_var_asset_a = 0.0452\n  asset_b_value = 3000000\n  marginal_var_asset_b = 0.0332\n\n  # Calculate total portfolio value and total marginal VaR\n  total_portfolio_value = asset_a_value + asset_b_value\n  total_portfolio_marginal_var = marginal_var_asset_a * asset_a_value + marginal_var_asset_b * asset_b_value\n\n  # Calculate contribution to VaR from Asset A\n  contribution_to_VaR_asset_A = (marginal_var_asset_a * asset_a_value) / total_portfolio_marginal_var\n\n  # return the answer\n  return contribution_to_VaR_asset_A"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            " ```python\n    num_deep_in_money_calls = 5000\n    num_deep_out_of_money_calls = 20000\n    num_futures = 10000\n    stock_price = 52\n    trading_days = 252\n    volatility = 0.12\n\n    # Calculate option prices for deep in-the-money and deep out-of-the-money calls\n    d1_dilm = (log(stock_price / XYZ_strike) + (volatility**2 / 2) * trading_days) / (volatility * sqrt(trading_days))\n    d2_dilm = d1_dilm - volatility * sqrt(trading_days)\n    call_price_dilm = stock_price * norm.cdf(d1_dilm) - XYZ_strike * exp(-r * trading_days) * norm.cdf(d2_dilm)\n\n    d1_doom = (log(stock_price / XYZ_strike) - (volatility**2 / 2) * trading_days) / (volatility * sqrt(trading_days))\n    d2_doom = d1_doom + volatility * sqrt(trading_days)\n    call_price_doom = stock_price * exp(-r * trading_days) * norm.cdf(-d2_doom)\n\n    # Calculate portfolio value for each option and future contract\n    portfolio_value = call_price_dilm * num_deep_in_money_calls + call_price_doom * num_deep_out_of_money_calls + num_futures * stock_price\n\n    # Calculate 1-day 99% VaR using Normal distribution and historical returns\n    historical_return = -1.644854 # 99% VaR for a normally distributed variable is approximately -1.644854 standard deviations from the mean\n    portfolio_standard_deviation = portfolio_value * (volatility"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            " contributions = 6000000\n service_costs = 800000\n actuarial_gain = 2500000\n\n # Do math calculation to get the answer\n pension_expense = contributions + service_costs - actuarial_gain\n\n # return answer\n return pension_expense"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            " ```python\n    ten_year_treasury_yield = 3.8  # 10-year US Treasury securities yield depicted in Exhibit 1 (%)\n    short_term_real_rate = 2  # Short-term real rate depicted in Exhibit 1 (%)\n    long_term_real_rate = 2.3  # Long-term real rate depicted in Exhibit 1 (%)\n    10_year_aa_corporate_bond_yield = 4.4  # 10-year AA corporate bond yield depicted in Exhibit 1 (%)\n    inflation_premium = 0.8  # Inflation premium depicted in Exhibit 1 (%)\n    illiquidity_premium = 0.9  # Illiquidity premium depicted in Exhibit 1 (%)\n    equity_risk_premium = 8.4  # Equity risk premium depicted in Exhibit 1 (%)\n\n    # Do math calculation to get the answer\n    short_term_rate = (short_term_real_rate + inflation_premium + illiquidity_premium) / 100  # Short-term rate with premiums\n    long_term_rate = (long_term_real_rate + inflation_premium + illiquidity_premium + equity_risk_premium) / 100  # Long-term rate with premiums\n    consumer_credit_spread = 10_year_aa_corporate_bond_yield - long_term_rate  # Spread of consumer credit over long-term AA corporate bond yield\n    consumer_credit_return = (ten_year_treasury_yield + consumer_credit_spread) / 100  # Predicted return for consumer credit industry based on bond-yield-plus-risk-premium method\n\n    # return answer\n    return consumer_credit_return\n```\n\nIn this structure, the Python program defines the variables according to the data given in the exhibit, calculates the short-term rate, long-term rate, consumer credit spread, and finally, the predicted return for the consumer credit industry in 2012 using the"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            " ```python\n    total_stockholders_equity = 2100000000 - 1200000000 - 120000000  # Total assets - Total liabilities - Preferred equity\n    common_shares_outstanding = 32000000  # Given value\n\n    # Calculate EPS (Earnings Per Share)\n    total_earnings = (total_stockholders_equity / common_shares_outstanding) * 4  # Assuming the company is on a fiscal year end of December, we multiply by 4 to get the earnings for the latest four quarters\n\n    return total_earnings / 4  # Return the normalized EPS by dividing the total earnings by 4 to get the earnings per share for one quarter\n```\n\nThe above code will give the normalized EPS for the company based on the information provided. Keep in mind that the underlying assumptions should be verified before using the code to determine the actual normalized EPS for the company. Moreover, the presented code does not take into account any additional factors like taxes, dividends, or the company's specific accounting methods. Therefore, the output from this Python program might not be the exact normalized EPS of the company. It only serves as a starting point for the junior analysts to perform a more comprehensive analysis."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    trade_1_time, trade_1_price, trade_1_size = '9.45 a.m.', 25.20, 1200\n    trade_2_time, trade_2_price, trade_2_size = '9.55 a.m.', 25.22, 1300\n    trade_3_time, trade_3_price, trade_3_size = '11.30 a.m.', 25.27, 2500\n    trade_1_bid_price, trade_1_ask_price = 25.17, 25.20\n    trade_2_bid_price, trade_2_ask_price = 25.19, 25.22\n    trade_3_bid_price, trade_3_ask_price = 25.22, 25.26\n    total_trade_size = trade_1_size + trade_2_size + trade_3_size\n    total_trade_value = total_trade_size * (trade_1_price + trade_2_price + trade_3_price) / 2\n    effective_spread_trade_1 = trade_1_ask_price - trade_1_bid_price\n    effective_spread_trade_2 = trade_2_ask_price - trade_2_bid_price\n    effective_spread_trade_3 = trade_3_ask_price - trade_3_bid_price\n    total_effective_spread = effective_spread_trade_1 + effective_spread_trade_2 + effective_spread_trade_3\n    average_effective_spread = total_effective_spread / total_trade_size\n\n    # return answer\n    return average_effective_spread\n```\n\nPlease note that the `exhibit1` variable provided in the question has been accessed directly instead of being assigned to separate variables for each trade data. The code below assumes that the table data is already loaded in the `exhibit1` variable in a specific format"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            " swap_rate = 0.01\ntreasury_rate = 0.0063\nfixed_term = 2\nfloating_term = 2\n\n# Calculate the notional amount of the swap\nnotional = 10_000_000  # Let's assume a notional of 10 million for simplicity\n\n# Calculate the fixed cash flows (pay fixed rate on a semi-annual basis)\nnum_periods = fixed_term * 2\nfixed_payment = (swap_rate / 2) * notional\nfixed_cash_flows = [fixed_payment * (1 + fixed_payment / 200) ** i for i in range(num_periods)]\n\n# Calculate the floating cash flows ( assume floating rate is reset every 6 months, average floater for each period)\nfloater = treasury_rate / 2\nfloating_payment = notional * floater\nfloating_cash_flows = [(floating_payment * (1 + floater / 200) ** i) * 0.5 for i in range(floating_term * 4)]\n\n# Calculate the present value of the fixed cash flows (using floating rate as the discount rate, since it's a swap)\npresent_value_fixed = sum([cash / (1 + floater / 2) ** i for i, cash in enumerate(reversed(fixed_cash_flows))])\n\n# Calculate the present value of the floating cash flows (using the floating rate as the discount rate)\npresent_value_floating = sum([cash / (1 + floater / 2) ** i for i, cash in enumerate(floating_cash_flows)])\n\n# Calculate the swap spread (PV of fixed cash flows - PV of floating cash flows) / notional\nswap_spread = (present_value_fixed - present_value_floating) / notional\n\n# Return the swap spread\nreturn swap_spread"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            " ```python\n    risk_free_rate = 0.03\n    beta = 1.1\n    market_risk_premium = 0.05\n    dividend_1_year = 1.13\n    dividend_2_years = 1.22\n    long_term_growth = 0.05\n\n    # Calculate one year expected growth rate\n    one_year_growth = (1 + long_term_growth) ** 2 - 1\n\n    # Calculate the discount rate for the first year\n    discount_rate_1 = risk_free_rate + (beta * market_risk_premium * dividend_1_year)\n\n    # Calculate the present value of the first year dividend\n    pv_dividend_1 = dividend_1_year / (1 + discount_rate_1)\n\n    # Calculate the discount rate for the second year\n    discount_rate_2 = discount_rate_1 + (beta * market_risk_premium * one_year_growth)\n\n    # Calculate the present value of the second year dividend\n    pv_dividend_2 = dividend_2_years / (1 + discount_rate_2) ** 2\n\n    # Calculate the present value of the third year and onwards dividends using the perpetuity formula\n    perpetuity = dividend_1_year * long_term_growth / (long_term_growth - one_year_growth)\n    pv_future_dividends = perpetuity / (discount_rate_2 + long_term_growth - one_year_growth)\n\n    # Sum the present values of the dividends to find the inherent worth of the J REIT per share\n    answer = pv_dividend_1 + pv_dividend_2 + pv_future_dividends\n\n    # return answer\n    return answer\n```\n\nThis Python program calculates the inherent worth of the J REIT per share utilizing the two-step dividend discount model. The answer is the sum of the present values of the dividends calculated for the first two years and the perpetuity of the"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            " ```python\ndef solution():\n    # Define variables to store actual sentiments and target p-values\n    actual_sentiments = [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0]\n    target_p_values = [0.75, 0.45, 0.64, 0.81, 0.43, 0.78, 0.59, 0.60, 0.67, 0.54, 0]\n\n    # Initialize counters for true positives, false positives, true negatives, and false negatives\n    true_positives = 0\n    false_positives = 0\n    true_negatives = 0\n    false_negatives = 0\n\n    # Loop through the data and increment counters based on comparison between actual sentiments and target p-values\n    for i in range(len(actual_sentiments)):\n        if actual_sentiments[i] == 1 and target_p_values[i] >= 0.65:\n            true_positives += 1\n        elif actual_sentiments[i] == 0 and target_p_values[i] < 0.65:\n            true_negatives += 1\n        elif actual_sentiments[i] == 1 and target_p_values[i] < 0.65:\n            false_negatives += 1\n        elif actual_sentiments[i] == 0 and target_p_values[i] >= 0.65:\n            false_positives += 1\n\n    # Calculate accuracy as (TP + TN) / (TP + TN + FP + FN)\n    accuracy = (true_positives + true_negatives) / (len(actual_sentiments))\n\n    # return answer\n    return accuracy\n```\nThis Python function calculates the accuracy of the test set for Dataset XYZ, given the data in Exhibit 1, considering a threshold p-value of 0.65."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.727
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            " bond_value_1 = 10  # Value of first bond\nduration_1 = 1  # Modified duration of first bond in years\n\nbond_value_2 = 10  # Value of second bond\nduration_2 = 9  # Modified duration of second bond in years\n\ninterest_rate = 0.05 / 100  # Annual yield as a decimal (5% as 0.05)\nyield_change = 0.01  # Daily yield change as a decimal (1% as 0.01)\n\nprice_sensitivity_1 = bond_value_1 * duration_1  # Modified duration times bond value to get price sensitivity of first bond\nprice_sensitivity_2 = bond_value_2 * duration_2  # Modified duration times bond value to get price sensitivity of second bond\n\nweight_1 = price_sensitivity_1 / (price_sensitivity_1 + price_sensitivity_2)  # Weight of the first bond's contribution to total price sensitivity\nweight_2 = price_sensitivity_2 / (price_sensitivity_1 + price_sensitivity_2)  # Weight of the second bond's contribution to total price sensitivity\n\ntotal_price_sensitivity = price_sensitivity_1 + price_sensitivity_2  # Total price sensitivity\n\nprice_change = total_price_sensitivity * yield_change  # Change in price due to yield change\n\nvar = price_change * (weight_1 * ((1/(weight_1*weight_1)) + (2 * weight_2 * ((1 - weight_1)/(weight_1*weight_1))) + ((1-weight_2)*(1 - weight_1)**2/(weight_1*weight_1)))   # Calculate VAR using the formula for VAR with multiple investments\n\nreturn var * 100  # Multiply by 100 to convert VAR to percentage"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            " investment = 100\ncash_flow_1 = 40\ncash_flow_2 = 80\ncash_flow_3 = 120\nrequired_rate_of_return = 0.20\n\n# Calculate present value for each year\npv_1 = cash_flow_1 / (1 + required_rate_of_return) ** 1\npv_2 = cash_flow_2 / (1 + required_rate_of_return) ** 2\npv_3 = cash_flow_3 / (1 + required_rate_of_return) ** 3\n\n# Sum all present values to get the Net Present Value\nnpv = pv_1 + pv_2 + pv_3\n\n# return answer\nreturn npv"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            " face_value = 50000000\ncoupon_rate = 0.04 / 100\ntime_to_maturity = 10\nissue_price_per_100 = 92.28 / 100\ncoupon_payment_per_year = face_value * coupon_rate\ncoupon_payment_per_pound = coupon_payment_per_year / face_value\n\n# Adjust for the accrued interest (we calculate the whole year's worth of interest, then subtract the portion for the only part of the year the bonds were issued)\naccrued_interest = (time_to_maturity / 365) * coupon_payment_per_pound\n\nmarket_rate = 0.05\nbond_price = issue_price_per_100 * 100 + accrued_interest\ndiscount_rate = market_rate - coupon_rate\npresent_value_of_coupon = (coupon_payment_per_year / (1 + discount_rate))\npresent_value_of_face_value = face_value / (1 + discount_rate) ** time_to_maturity\n\nannual_interest_cost = present_value_of_coupon * bond_price + present_value_of_face_value * coupon_rate\n\n# Convert to millions and return the answer\nanswers = annual_interest_cost / 1000000\n\nreturn answers"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            " total_wealth = 750000 + 1200000 # Total economic wealth (cash + human capital)\nequity = 0.3 * 1200000 # Current equity based on human capital\ntarget_equity_allocation = 0.45 # Desired total equity allocation\ncurrent_equity_allocation = equity / total_wealth # Current equity allocation percentage\nfinancial_capital = total_wealth - 1200000 # Subtract human capital to get financial capital\ndesired_financial_capital_equity = target_equity_allocation * financial_capital\n\n# return answer\nreturn desired_financial_capital_equity\n\n# To run the solution, call the function and print the result\nprint(solution())"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            " dividend_year_5 = 2.5\ngrowth_rate = 0.05\nrequired_return = 0.12\ndiscount_rate = 0.12\n\n# Calculate the dividend in future years\nfor year in range(6, 11):\n    dividend_year_n = dividend_year_5 * (1 + growth_rate) ** (year - 5)\n\n# Calculate the present value of the dividends\npresent_value = 0\nfor year, dividend in enumerate(reversed(list(dividend_year_6, dividend_year_7, dividend_year_8, dividend_year_9, dividend_year_10))):\n    present_value += dividend / (1 + discount_rate) ** (year)\n\n# Return the intrinsic value of the stock\nreturn present_value + (dividend_year_5 / (1 + discount_rate)) ** 5"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            " face_value = 5000000\nyears_to_maturity = 3\nmarket_interest_rate = 0.03\nbonds_yield_rate = 0.025\n\n# Calculate the present value of the bond using the yield rate\npresent_value = face_value / (1 + bonds_yield_rate)**years_to_maturity\n\n# The bonds payable will be the present value of the face value, as they are the amount ABC Corporation owes to its bondholders\nbonds_payable = present_value\n\n# return bonds_payable\nreturn bonds_payable"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            " shares_price = 26\ndaily_volatility = 0.015\nconfidence_level = 0.95\ndelta = -0.5\nholding_period = 1\n\n# Calculate standard deviation of return\nsigma = daily_volatility * shares_price * math.sqrt(holding_period)\n\n# Calculate z-score for the given confidence level\nz_score = stats.norm.ppf(confidence_level)\n\n# Calculate VaR using the delta-normal approximation\nVaR = shares_price * z_score * delta + delta * sigma\n\nreturn VaR"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            " returns = [20, -30, 15]\nn = len(returns)\n\n# Do math calculation to get the answer (Geometric Mean formula)\nproduct = 1\nfor return_ in returns:\n    product *= (1 + return_ / 100)\n\nanswer = product ** (1 / n) - 1\n\n# return answer\nreturn answer"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            " beta = 0.6\nrisk_free_rate = 0.08\nmarket_return = 0.15\n\n# Do math calculation to get the answer (expected return = risk_free_rate + beta * (market_return - risk_free_rate))\nexpected_return = risk_free_rate + (beta * (market_return - risk_free_rate))\n\n# return answer\nreturn expected_return"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            " ```python\nbenefit_from_growth = 3.5 - 2.5\ninflation_difference = 3 - 2\npolicy_rate_increase_recommended_by_taylor_rule = 2.25 + (0.5 * (benefit_from_growth + inflation_difference))\n\nreturn policy_rate_increase_recommended_by_taylor_rule\n```\n\nIn this example, the Taylor rule states that the nominal policy rate is adjusted based on the deviation of actual growth and the desired inflation rate from their targeted levels. The formula used here assumes a 50% weight on the deviation from targeted growth and inflation rate, with a base policy rate of 2.25%. The formula `0.5` is used to weight these deviations. This might not be the exact representation of the Taylor rule, but it serves as a simple demonstration."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            " ```python\n    p_e = 25  # P/E ratio, it's given as not provided in the data, I am assuming a common P/E of 25 for a market\n    inflated_eps = 1.027  # Expected growth in real earnings per share\n    income_growth = 1.018  # Expected income component\n    p_e_growth = 1.012  # Expected growth in P/E\n    shares = 1.0  # Expected change in shares outstanding (since it's 0.0%, so no change in shares)\n    gov_bond_yield = 0.0096  # Current three-month government bond yield\n    equ_index_return = 0.0996  # Long-term geometric average return of market equity index\n    gov_bond_long_term_return = 0.0315  # Long-term geometric average return of short-term government bond\n\n    # Calculate the dividend growth\n    dividend_growth = (equ_index_return - gov_bond_long_term_return - p_e_growth - inflation_rate) / (1 - p_e)\n    inflation_rate = 1.019  # Expected inflation\n\n    # Calculate the expected earnings per share\n    expected_eps = inflated_eps * (dividend_growth + income_growth)\n\n    # Calculate the projected forward-looking P/E\n    projected_p_e = p_e * (1 + p_e_growth)\n\n    # Calculate the projected forward-looking ERP\n    erp = expected_eps * projected_p_e\n\n    return erp\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    tp = 182\n    fp = 52\n    tn = 96\n    fn = 31\n\n    # Do math calculation to get the answer (True Positives + True Negatives) / Total Samples\n    total_samples = tp + fp + tn + fn\n    accuracy = (tp + tn) / total_samples\n\n    # return answer\n    return accuracy\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.77
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            " number_participants = 15\ntop_prize = 100\nmiddle_prize = 50\nbottom_prize = 10\n\n# Calculate the number of participants who can receive top prize\ntop_count = min(number_participants, 1)\n\n# Calculate the number of participants remaining after giving the top prize\nremaining = number_participants - top_count\n\n# Calculate the number of ways to distribute middle and bottom prizes to the remaining participants\nmiddle_dist = combinations(remaining, 1 + (remaining - 1) * (middle_prize // bottom_prize))\n\n# Factor out the number of ways to give only middle prizes\nmiddle_only = remaining * (remaining - 1)\n\n# Calculate the number of ways to give a mix of middle and bottom prizes\n# In each case, multiply by the number of remaining participants and subtract the number of cases where only middle prizes were given\nmixed_dist = sum([(comb_num * (comb_denom - 1) * (middle_prize // bottom_prize)) for comb_num, comb_denom in middle_dist if comb_denom > 1]) - middle_only\n\n# Calculate the total number of distributions\ntotal_dist = top_count + middle_only + mixed_dist\n\n# return answer\nreturn total_dist\n\nIt's important to note that the `combinations` function in Python returns the number of ways to form combinations from a given set of items, without considering the order of combinations. For example, the combinations(`[1, 2, 3]`, 2) would return `(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)`. Since we're not interested in the order of prizes in our distribution, we'll use this function here.\n\nIncase the combinations function isn't available, you can use the `itertools` module to generate combinations. You may do so by importing the module and replacing the \"combinations\" line with the following:\n\n```\nfrom itertools import combinations\ncombinations("
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "δ (Delta) represents the change in the option's price with respect to a small change in the underlying asset's price.\nγ (Gamma) represents the rate of change of delta with respect to a small change in the underlying asset's price.\nVaR (Value at Risk) is a statistic that represents the maximum loss expected to be exceeded with a specified probability over a specified time period.\n\nIn the delta-gamma approach, we can approximate the change in the option's price using the delta and gamma, and then calculate the VaR based on this change.\n\nLet's assume that the current price of crude oil is $X, σ (Standard Deviation) as the volatility, 'p' as the probability, time horizon is 'T', and we are using the Black-Scholes model.\n\nHere's a Python program to compute the VaR for this stance using the delta-gamma approach:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    delta = 100000\n    gamma = -50000\n    max_price_shift = 2.00\n    σ = 0.3  # Assuming volatility (replace with actual value)\n    p = 0.05  # Assuming probability (replace with actual value)\n    T = 1  # Assuming time horizon (replace with actual value)\n\n    # Calculate the change in delta (deltad) and gamma (dgamma) based on max_price_shift\n    ddelta = gamma * max_price_shift\n    dgamma = (gamma * math.exp(-σ ** 2 * T) + σ ** 2 * T * delta)\n\n    # Approximate the change in the option's price (dV)\n    dV = ddelta * max_price_shift\n\n    # Use Normal Distribution to find the Z-score (Z)\n    Z = math.erfinv(1 - p) * math.sqrt(T)\n\n    # Find the option's price change that corresponds to Z and multiply by -1 to get loss\n    loss = -dV * math.exp(-(0.5 * σ ** 2 * T)) * math.er"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            " shares_bought = 20000 / 25\ntotal_investment = 10000 + 10000\npreservation_margin = total_investment * 0.30\ninitial_price_for_margin_call = preservation_margin / shares_bought\n\nreturn initial_price_for_margin_call"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    aum_previous_year = 288000000\n    management_fee = 0.02\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    high_water_mark = 357000000\n    fund_yield = 0.25\n\n    # Calculate year-end AUM\n    aum_current_year = aum_previous_year * (1 + fund_yield)\n\n    # Calculate management fee\n    management_fee_amount = aum_current_year * management_fee\n\n    # Calculate incentive fee after subtracting the management fee\n    incentive_fee_amount = (aum_current_year * incentive_fee_rate) - management_fee_amount\n\n    # Check if incentive fee is above hurdle rate and high water mark, preventing double incentive fees\n    if incentive_fee_amount > (hurdle_rate * high_water_mark):\n        incentive_fee_amount = (hurdle_rate * high_water_mark)\n\n    # return answer\n    return management_fee_amount + incentive_fee_amount\n```\nThis Python program calculates the overall fee that Circle has garnered in the current year based on the given information. The overall fee is the sum of the management fee and the incentive fee. The incentive fee calculation takes into account the high-water mark and the hurdle rate to prevent double incentive fees when the incentive fee calculation exceeds the value of the high-water mark times the hurdle rate."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 25050000.0
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.903,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            " ```python\n    weight_x = 0.25  # 25% of the portfolio\n    weight_y = 0.75  # 75% of the portfolio\n    std_dev_x = 17.9  # Standard deviation of Component X\n    std_dev_y = 6.2  # Standard deviation of Component Y\n    correlation = 0.5  # Correlation between the two components\n\n    # Calculate the variance of each component and the portfolio\n    variance_x = (std_dev_x ** 2)\n    variance_y = (std_dev_y ** 2)\n\n    # Weighted variance of each component\n    weighted_variance_x = (weight_x ** 2) * variance_x\n    weighted_variance_y = (weight_y ** 2) * variance_y\n\n    # Calculate the variance of the portfolio considering covariance (correlation)\n    covariance = weight_x * weight_y * correlation * std_dev_x * std_dev_y\n    portfolio_variance = weighted_variance_x + weighted_variance_y + covariance\n\n    # Calculate the standard deviation of the portfolio\n    portfolio_std_dev = (portfolio_variance ** 0.5)\n\n    # return answer\n    return portfolio_std_dev\n```\nThis Python program calculates the standard deviation of a portfolio that contains two components, Component X, and Component Y. It assigns the given percentage weightage and standard deviations to each component and also considers the correlation between the components. The solution calculates the variance and standard deviation of each component, the covariance between the components, and finally, the standard deviation of the portfolio."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            " assets_value = 160000000\nmanagement_fee_rate = 0.02\nincentive_fee_rate = 0.2\nhurdle_rate = 0.1\nhigh_water_mark = 198000000\nasset_growth = 0.25\n\n# Calculate the new end-of-year asset value\nnew_assets_value = assets_value * (1 + asset_growth)\n\n# Calculate management fee\nmanagement_fee = assets_value * management_fee_rate\n\n# Calculate net assets value after management fee (subtracting the management fee from the original assets)\nnet_assets_value = assets_value - management_fee\n\n# Calculate the incentive fee\nincentive_fee = 0 if net_assets_value <= hurdle_rate * net_assets_value else (net_assets_value - high_water_mark) * incentive_fee_rate\n\n# Calculate the total fees (sum of management fee and incentive fee)\ntotal_fees = management_fee + incentive_fee\n\n# return answer\nreturn total_fees"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            " ```python\ndef solution():\n    # Define variables name and value\n    years = [2775840, 2859119, 2944889, 3033235, 3124232, 3217959]\n    going_in_cap_rate = 0.0525\n    terminal_cap_rate = 0.06\n    discount_rate = 0.0725\n    nlsty = len(years)\n\n    # Calculate present value and terminal value\n    PV = [0] * nlsty\n    TV = [0] * (nlsty - 1)\n    for i in range(nlsty):\n        PV[nlsty - i - 1] = years[i] / (1 + discount_rate) ** (nlsty - i - 1)\n        if i < nlsty - 1:\n            TV[nlsty - i - 2] = (years[i+1] / (going_in_cap_rate - terminal_cap_rate)) * ((1 + terminal_cap_rate) ** (5 - (nlsty - i - 2)))\n\n    # Calculate the present value of terminal value\n    TV_PV = TV[0]\n    for i in range(1, nlsty - 1):\n        TV_PV += TV[i] * (1 + discount_rate) ** i\n\n    # Calculate the growth rate\n    total_PV = sum(PV)\n    total_TV_PV = total_PV + TV_PV\n    answer = ((total_TV_PV - total_PV) / total_PV) * (discount_rate - terminal_cap_rate)\n\n    # return answer\n    return round((1 + answer) ** (1/5) - 1, 6)\n```\n\nThis program calculates the growth rate of Real Estate #1 according to Exhibit 1 using the given DCF assumptions. The growth rate represents the average yearly growth rate of the net operating income (NOI) for the first five years, and the following years' growth rate will be a constant value as specified in the"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            " ```python\n    weight_X = 0.3\n    weight_Y = 0.7\n    std_dev_X = 0.25\n    std_dev_Y = 0.10\n    correlation_coef = 0.8\n\n    # Calculate variance for each asset\n    variance_X = std_dev_X ** 2\n    variance_Y = std_dev_Y ** 2\n\n    # Calculate the covariance\n    covariance = correlation_coef * variance_X * variance_Y\n\n    # Calculate the variance of the portfolio\n    portfolio_variance = weight_X**2 * variance_X + weight_Y**2 * variance_Y + 2 * weight_X * weight_Y * covariance\n\n    # Calculate the Standard Deviation (square root of variance)\n    portfolio_std_dev = (portfolio_variance)**0.5\n\n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    }
]