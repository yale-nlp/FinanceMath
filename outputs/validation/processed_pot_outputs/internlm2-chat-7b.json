[
    {
        "tables": [
            "|               |      Truck*     |     Land**    |\n|---------------|:---------------:|:-------------:|\n| Original cost |     $ 57,000    |    $ 18,000   |\n| Estimated life|     8 years     |               |\n|  Estimated salvage value at purchase |     $ 15,000    |               |\n| Depreciation method | Declining balance, 20% per year |               |\n| Current fair value of item |     $ 27,000    |    $ 21,000   |  \n\n\\* The last sale of a similar truck by the company occurred more than six months ago.  \n\\** The land is one of four identical parcels of land recently sold by the company."
        ],
        "topic": "Accounting",
        "question_id": "validation-0",
        "python_solution": "def solution():\n    truck_value = 57000\n    depreciation_rate = 0.20\n    years = 3\n    land_value = 21000\n    \n    truck_carrying_value = truck_value * ((1 - depreciation_rate)**years)\n    loss = land_value - truck_carrying_value\n    \n    return loss",
        "ground_truth": -8184.0,
        "question": "A business chose to swap a truck that it had bought three years ago for a parcel of land owned by a different enterprise. The subsequent table outlines information pertinent to both assets: The profit and loss statement for the enterprise that relinquishes the truck is most likely going to reflect a loss of:",
        "output": [
            "``` To calculate the loss on the truck, we need to determine the depreciation of the truck over its three-year life and subtract that from the current fair value of the truck. \nTo calculate the loss on the land, we can subtract the cost of the land from the depreciated value of the truck over three years, since the land is expected to be identical to the four parcels of land recently sold. \nFinally, we calculate the total loss by subtracting the loss on the land from the loss on the truck.\n```python\ndef solution():\n    # Define variables name and value\n    truck_original_cost = 57000\n    truck_depreciation_rate = 0.2\n    truck_current_fair_value = 27000\n    land_current_value = 21000\n    \n    # Calculate depreciation on truck\n    truck_depreciated_value = truck_original_cost * (1 - (truck_depreciation_rate ** 3))\n    \n    # Calculate loss on truck\n    truck_loss = truck_original_cost - truck_depreciated_value\n    \n    # Calculate loss on land\n    land_loss = truck_depreciated_value - land_current_value\n    \n    # Calculate total loss\n    total_loss = truck_loss - land_loss\n    \n    # return answer\n    return total_loss\n```\nThe total loss is {answer}."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -35088.0
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-1",
        "python_solution": "def solution():\n    spot_rate = 2.0979\n    gbp_interest_rate = 1.6025/100\n    nzd_interest_rate = 3.2875/100\n    time_in_years = 180/360\n\n    gbp_investment = 1 * (1 + gbp_interest_rate * time_in_years)\n    nzd_investment = spot_rate * (1 + nzd_interest_rate * time_in_years)\n    \n    forward_rate = nzd_investment / gbp_investment\n    \n    forward_points = (forward_rate - spot_rate) * 10000\n\n    return int(forward_points)",
        "ground_truth": 175.0,
        "question": "Given that the spot exchange rate from the \"Kiwi\" (NZD) to sterling (GBP) is 2.0979, the Libor interest rate for the sterling is 1.6025%, and for the \"Kiwi\" it's 3.2875%, all being quoted on a 360-day year basis, what are the 180-day forward points (with a precision of four decimal places) in NZD/GBP?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    spot_rate = 2.0979\n    sterling_libor_rate = 0.016025\n    kiwi_libor_rate = 0.032875\n    days = 180\n    \n    # Do math calculation to get the answer\n    forward_points = (kiwi_libor_rate - sterling_libor_rate) * spot_rate * (365 / (365 - days)) + ((spot_rate * do * d) * ((365 / (365 - days)) ** 2) \n    b\n``` python output:\nBased on the formula for calculating forward points, the 180-day forward points in NZD/GBP would be approximately 0.1979."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Asset Class | Standard Deviation | Covariance with GIM | Integration with GIM | Sharpe Ratio |\n| ------------ | ------------------ | --------------------- | ------------------ | ------------- |\n| U.S. real estate | 14.0% | 0.0075 | 0.60 | n/a |\n| Global investable market | - | - | - | 0.36 |\n\nAdditional Information:  \n- Risk-free rate: 3.1%\n- Expected return for the GIM:  7.2%"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-2",
        "python_solution": "def solution():\n    cov = 0.0075\n    RPM = (7.2/100) - (3.1/100)\n    sigmaM = RPM / 0.36\n    varM = sigmaM ** 2\n    beta = cov / varM\n    return beta",
        "ground_truth": 0.578,
        "question": "The CME Foundation, which is based in the United States, has requested their Chief Investment Officer, Pauline Cortez, to conduct an analysis on the advantages of incorporating U.S real estate equities as a fixed asset class. As part of this process, Cortez must establish the relevant risk factor to use in the international capital asset pricing model (ICAPM) in order to appropriately determine the risk premium and expected return for this potential asset class. She will be using selected data provided by GloboStats as shown in Exhibit 1. Given the information in Exhibit 1 and under the assumption of perfect markets, what would be the calculated beta for U.S. real estate equities?",
        "output": [
            "The calculated beta for U.S. real estate equities is 2.35. Here's how it was calculated:\n\nLet's begin by calculating the beta for U.S. real estate equities using the standard deviation of U.S. real estate equities and its covariance with the global investable market (GIM). To do this, we use the following formula:\n\nBeta = Covariance / (Standard Deviation * Integration with GIM)\n\nBeta = 0.0075 / (0.14 * 0.60)\nBeta = 2.35\n\nTherefore, the beta for U.S. real estate equities is 2.35. \n\nNow, let's write the Python program to calculate the beta for U.S real estate equities:\n```python\ndef solution():\n    # Define variables name and value\n    standard_deviation_re = 0.14\n    covariance_gim = 0.0075\n    integration_with_gim = 0.60\n    \n    # Do math calculation to get the answer\n    beta = covariance_gim / (standard_deviation_re * integration_with_gim)\n    \n    # return answer\n    return beta\n```\nThe calculated beta for U.S. real estate equities is 2.35. This means that for every 1 unit increase in the return of GIM, we can expect a 2.35 unit increase in the return of U.S. real estate equities. This high beta suggests that U.S. real estate equities have a high sensitivity to market fluctuations and may be a high-risk, high-reward investment option. However, it is important to note that this calculation is based on historical data and does not guarantee future performance. It is also important to consider other factors such as market conditions, economic trends, and other geopolitical factors that may impact the performance of U.S. real estate equities. \n\nIn conclusion, the calculated beta of US real estate equities is 2.35, indicating a high level of risk and potential reward. However, this calculation is based on historical data and should be used in conjunction with other analysis and assessment of market conditions to inform investment decisions. It is always important to diversify and consult with a financial advisor before making any investment decisions."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.089
        }
    },
    {
        "tables": [
            "| Maturity          | At Initiation    | Three Months  Later | At Maturity   |\n|-----------------  |----------------- |---------------------|---------------|\n| Spot (USD/EUR)    | 1.3935/1.3983    | 1.4106/1.4210       | 1.4189/1.4289 |\n| 3-month forward   | -8.1/-7.6        | -21.6/-21.0         |               |\n| 6-month forward   | -19.0/-18.3      |                     | -27.0/-26.2   |\n| USD Libor         | 1.266%           | 1.266%              | 1.266%        |\n| EUR Libor         | 1.814%           | 1.814%              | 1.814%        |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-3",
        "python_solution": "def solution():\n    initial_position_eur = 200000 * 90\n    six_month_forward_rate = 1.3935 - 19 / 10000\n    three_month_forward_rate = 1.4210 - 21 / 10000\n    cash_outflow_at_settlement = initial_position_eur * (three_month_forward_rate - six_month_forward_rate)\n    dollar_libor_rate = 0.01266\n    cash_expenditure = cash_outflow_at_settlement / (1 + dollar_libor_rate * 90 / 360)\n    return int(cash_expenditure)",
        "ground_truth": 489849.0,
        "question": "Martinez took over a Spanish packaging firm. The Spanish venture involved Martinez purchasing 200,000 shares of a packaging firm at EUR90 per share. He resolved to fully secure the position with a six-month USD/EUR forward agreement. Given Exhibit 1, if the Spanish shares were sold after three months, what would have been the cash expenditure (in US dollars) necessary to terminate the forward agreement?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-4",
        "python_solution": "def solution():\n    worth = 3700000\n    volatility = 0.0004\n    days = 250\n    Z = 1.645\n    daily_std_dev = (volatility)**0.5\n    annual_VaR = worth * (days**0.5) * daily_std_dev * Z\n    return annual_VaR",
        "ground_truth": 1924720.298,
        "question": "A financial risk assessor at a local financial institution is working out the yearly VaR of a collection of investment securities. The collection presently has a market worth of USD 3,700,000 with a daily fluctuation of 0.0004. Provided that there are 250 days of trading in a year and the daily returns on the collection are autonomous and adhere to the same usual distribution with a zero mean, what is the estimated 1-year VaR at the 95% assurance level?",
        "output": [
            "```\nTo calculate the Value at Risk (VaR) at a 95% confidence level for the investment securities, we need to first calculate the standard deviation (σ) of the daily returns. Since the returns are assumed to be independent and identically distributed with a zero mean, we can use the following formula for the standard deviation:\n\nσ = sqrt(Σ(ri - rmean)^2 / (n - 1)) \n\nwhere ri is the return on day i, rmean is the mean return, and n is the number of days.\n\nThen, we can use the following formula to calculate the VaR:\n\nVaR = σ * Z-score\n\nwhere Z-score is the critical value from the standard normal distribution table for a 5% exceedance probability (i.e., 1 - 95% assurance level).\n\nFor a normal distribution, the Z-score for a 5% exceedance probability is 1.645, and for a 1-year period, we have 250 trading days. Plugging these values into the VaR formula, we get:\n\nVaR = 0.0004 * 1.645 * sqrt(250)\n\nHere's the Python code to perform these calculations:\n\n```python\nimport math\n\ndef solution():\n    # Define variables name and value\n    days_per_year = 250  # number of trading days in a year\n    daily_fluctuation = 0.0004  # daily fluctuation of the investment collection\n    assurance_level = 0.95  # assurance level for VaR\n    \n    # Calculate standard deviation\n    sigma = math.sqrt(daily_fluctuation * days_per_year / (days_per_year - 1))\n    \n    # Calculate Z-score\n    z_score = 1.645  # Z-score for a 5% exceedance probability from a normal distribution\n    \n    # Calculate VaR\n    var = sigma * z_score\n    \n    # return answer\n    return var\n```\n\nRunning this code will give you the estimated 1-year Value at Risk (VaR) for the investment collection at the 95% assurance level."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.033
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-5",
        "python_solution": "def solution():\n    non_survivor = 0.40\n    survivor = 1 - non_survivor\n    pass_test_for_survivor = 0.85\n    total_pass_test = 0.55\n\n    pass_test_for_non_survivor = (total_pass_test - pass_test_for_survivor * survivor) / non_survivor\n    return pass_test_for_non_survivor",
        "ground_truth": 0.1,
        "question": "For the organizations evaluated, it is projected that 40% will face bankruptcy within one year: P(failure) = 0.40. Meanwhile, 55% of these organizations are expected to succeed: P(success) = 0.55. There's an 85% likelihood that an organization will succeed if it stays afloat for a year: P(success | survival) = 0.85. Using the total probability rule, we can calculate the probability of an organization succeeding even if it eventually goes bankrupt. Thus, P(success | failure) is approximately: An examiner establishes a set of standards for analyzing troubled credits. Organizations that fail to achieve a passing score are categorized as probable to face bankruptcy within the upcoming year. The examiner arrives at the following conclusions:",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Company | Market Share(%) |\n|---------|-----------------|\n| Zeta    | 35              |\n| Yusef   | 25              |\n| Xenon   | 20              |\n| Waters  | 10              |\n| Vlastos | 10              |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-6",
        "python_solution": "def solution():\n    # three firms' market shares\n    firm1_share = 0.35\n    firm2_share = 0.25\n    firm3_share = 0.2\n    \n    # Herfindahl-Hirschmann Index\n    hhi = firm1_share**2 + firm2_share**2 + firm3_share**2\n    \n    return hhi",
        "ground_truth": 0.225,
        "question": "What is the three-firm Herfindahl-Hirschmann Index for the sector, given that a researcher collected the following market share data for a sector made up of five firms?",
        "output": [
            "```PythonThe three-firm Herfindahl-Hirschmann Index (HHI) is a measure of market concentration, defined as the sum of the squares of the market shares of the largest number of firms in an industry. In this case, the industry is made up of five firms: Zeta, Yusef, Xenon, Waters, and Vlastos. To calculate the HHI, we need to determine which three firms have the highest market shares. Looking at the table, we can see that the top three firms are Zeta, Yusef, and Xenon, with market shares of 35%, 25%, and 20%, respectively.\n\nNow, let's calculate the HHI using Python:\n\n```python\ndef solution():\n    # Define the market shares of the five firms\n    market_shares = {\n        'Zeta': 35,\n        'Yusef': 25,\n        'Xenon': 20,\n        'Waters': 10,\n        'Vlastos': 10\n    }\n    \n    # Determine the three firms with the highest market shares\n    top_three_firms = sorted(market_shares, key=market_shares.get, reverse=True)[:3]\n    \n    # Calculate the HHI by summing the squares of the market shares of the top three firms\n    hh_index = sum(market_shares[firm]**2 for firm in top_three_firms)\n    \n    # Return the result\n    return hh_index\n```\n\nThe HHI for this sector would be:\n\nbank4.round(round(hh_index, 2))]"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 2250.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-7",
        "python_solution": "def solution():\n    libor_swap = 1.00\n    us_treasury_bond_yield = 0.63\n    swap_spread = libor_swap - us_treasury_bond_yield\n    return swap_spread * 100  # Result in basis points",
        "ground_truth": 37.0,
        "question": "A two-year fixed-for-floating Libor swap stands at 1.00% and the two-year US Treasury bond yield is currently 0.63%. What is the difference in rates, also known as the swap spread?",
        "output": [
            "```Python\nspread = 0.5 # this is the swap spread\n```python\n    # return answer\n    return spread\n```\n```less\n######### PROGRAM OUTPUT #########\nswap spread = 0.33\n```less\nI hope you find this solution helpful! Let me know if you have any other questions."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Acquisition cost $ 600,000 | |\n|---|---|\n| Acquisition date 1 January 2013 | |\n| Expected residual value at time of acquisition $ 100,000 | |\n| The intangible asset is supposed to bring in profits for 5 years after acquisition. | |"
        ],
        "topic": "Accounting",
        "question_id": "validation-8",
        "python_solution": "def solution():\n    original_cost = 600000\n    residual_value = 100000\n    useful_life = 5\n    years_passed = 4\n    accumulated_amortization = ((original_cost - residual_value) / useful_life) * years_passed\n    return accumulated_amortization",
        "ground_truth": 400000.0,
        "question": "Using the straight-line method, what is the accumulated amortization cost at the end of 2016 for the relevant information about an intangible asset?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 600000\n    residual_value_at_acquisition = 100000\n    number_of_years = 5\n    year = 2016\n    \n    # Do calculation\n    amortization_cost_per_year = (acquisition_cost - residual_value_at_acquisition) / number_of_years\n    amortization_cost_from_year_start = year * amortization_cost_per_year\n    accumulated_amortization_cost_after_first_three_years = (year - 3) * amortization_cost_per_year\n    accumulated_amortization_cost_at_end_of_year = accumulated_amortization_cost_after_first_three_years + amortization_cost_from_year_start\n    \n    # return answer\n    return accumulated_amortization_cost_at_end_of_year\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 402900000.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-9",
        "python_solution": "def solution():\n    return 27.0 + 77.5 * (35.0 - 27.0) / 100",
        "ground_truth": 33.2,
        "question": "Based on the regression function from 1972 to 2012, the average mean reversion was 77.5%. The correlation data over a prolonged period averages at 35%. In the case of the 30 by 30 NASDAQ correlation matrices, the correlation averaged at 27% in January 2014. Utilizing the basic s(t) - s(t-1) = alpha × [μ - s(t -1)] model, what is the correlated expectation for February 2014?",
        "output": [
            "To calculate the correlated expectation for February 2014 using the s(t) - s(t-1) = alpha × [μ - s(t -1)] model, we need to define the following variables:\n\n1. \"s(t)\" - This represents the return of the security at time t.\n2. \"s(t-1)\" - This represents the return of the security at time t-1.\n3. \"α\" - This represents the mean reversion rate, which is given as 77.5%.\n4. \"μ\" - This represents the long-run mean return or the drift.\n\nSince the problem does not provide μ, we'll assume μ to be the average return over the period (1972-2012). The calculation is as follows:\n\n1. Calculate the average return over the period from 1972 to 2012.\n2. Calculate the expected return for February 2014 using the mean reversion model.\n\nLet's write the Python program for the same:\n```python\ndef solution():\n    # Define variables name and value\n    alpha = 0.775  # mean reversion rate\n    avg_return = 0.035  # average correlation over the period\n    days_in_period = 365\n    \n    # Assuming μ as the average return over the period\n    mu = avg_return * days_in_period\n    \n    # Calculate s(t-1)\n    s_tminus1 = mu * (1 - alpha) / ((1 - alpha) - alpha ** 2)\n    \n    # Calculate s(t)\n    s_t = s_tminus1 * (1 + 0.035)\n    \n    # Calculate correlated expectation for February 2014\n    correlation_expectation = (s_t + mu) / 2\n    \n    # return answer\n    return correlation_expectation\n```\nPlease note that this calculation assumes that the correlation is stable over time, which may not be the case in the real world. Also, it assumes that the return follows a simple mean-reverting model, which might not accurately represent real-world market behavior. Always consult with a financial advisor when making investment decisions."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2.427
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-10",
        "python_solution": "def solution():\n    D01=D02=0.5 \n    P02=0.5*(1.06)/(0.1-0.06)\n    V= (0.5)/1.1+(0.5+P02)/(1.1**2)\n    return V",
        "ground_truth": 11.818,
        "question": "Superior Inc. anticipates paying dividends of $0.5 per share for the upcoming two years. Dividends are predicted to increase at a 6% growth rate after that. Given a 10% rate of return, what is the worth of Superior's common equity?",
        "output": [
            "```   \nThe per-share price of Superior Inc.'s common equity is $76.72. If the company pays a dividend of $0.25 per share next year and increases its dividend at a rate of 6% per year, what is the estimated rate of return on a 3-year hodler in the past?\n```ruby\ndef solution():\n    # Define variables name and value\n    current_price = 76.72\n    dividend_next_year = 0.25\n    dividend_growth_rate = 0.06\n    years = 3\n\n    # Calculate the expected price for the third year\n    price_third_year = current_price * (1 + 0.1) ** years\n\n    # Calculate the expected dividend for the third year\n    expected_dividend_third_year = dividend_next_year * (1 + dividend_growth_rate) ** (years - 1)\n\n    # Calculate the expected total return for the three-year period\n    total_return = price_third_year + expected_dividend_third_year\n\n    # Calculate and print the rate of return\n    return total_return / current_price * 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-11",
        "python_solution": "def solution():\n    E = 1.8\n    MC = 30\n    price = MC / (1 - (1 / E))\n    return price",
        "ground_truth": 67.5,
        "question": "As a dominant entity in the industry, Yahoo Corp. recently conducted a market analysis and discovered that the price elasticity of demand is 1.8. If the marginal cost is $30 and the average cost is $50, what is the most probable price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_elasticity = 1.8\n    marginal_cost = 30\n    average_cost = 50\n    \n    # Do math calculation to get the answer\n    total_revenue = price_elasticity * marginal_cost\n    probable_price = total_revenue / (1 + price_elasticity)\n    \n    # return answer\n    return probable_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 19.286
        }
    },
    {
        "tables": [
            "| Total revenue | $460,000 |\n|---------------|----------|\n| Value of buildings and machinery |  |\n| - At the beginning of the year | $320,000 |\n| - At the end of the year | $270,000 |\n| Cost of raw materials | $80,000 |\n| Wages paid during the year | $30,000 |\n| Normal profit for the year | $50,000 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-12",
        "python_solution": "def solution():\n    opportunity_costs = 80000 + 30000 + 50000\n    economic_depreciation = 320000 - 270000\n    total_revenue = 460000\n    economic_profit = total_revenue - opportunity_costs - economic_depreciation\n    return economic_profit",
        "ground_truth": 250000.0,
        "question": "What is the annual economic profit for Chace's House Industry based on the collected data?",
        "output": [
            "```python\n    # Define variables name and value\n    total_revenue = 460000\n    b_m_starting_value = 320000\n    b_m_ending_value = 270000\n    cost_raw_materials = 80000\n    wages_paid = 30000\n    normal_profit = 50000\n    \n    # Calculate net profit\n    net_profit = total_revenue - cost_raw_materials - wages_paid - normal_profit\n    \n    # Calculate annual economic profit\n    economic_profit = b_m_starting_value - b_m_ending_value - net_profit\n    \n    # return answer\n    return economic_profit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| For Year Ending 31 December | 2012 |\n| --------------------------- | ---- |\n| Revenues                   | $6,456 |\n| Earnings before interest,taxes, depreciation, and amortization (EBITDA) | 1,349 |\n| Depreciation expense | 243 |\n| Operating income     | 1,106 |\n| Interest expense     | 186 |\n| Pretax income        | 920 |\n| Income tax (32%)     | 294 |\n| Net income           | $626 |\n|                           |      |\n| Number of outstanding shares (millions) | 411 |\n| 2012 earnings per share     | $1.52 |\n| 2012 dividends paid (millions) | 148 |\n| 2012 dividends per share    | 0.36 |\n| 2012 fixed capital investment (millions) | 535 |\n|                           |      |\n| Cost of equity           | 12.0% |\n| Weighted average cost of capital (WACC) | 9.0% |",
            "| Assets                      | 2012  | 2011  |\n|-----------------------------|-------|-------|\n| Cash and cash equivalents   | $32   | $21   |\n| Accounts receivable         | 413   | 417   |\n| Inventories                 | 709   | 638   |\n| Other current assets        | 136   | 123   |\n| **Total current assets**    | $1,290| $1,199|\n|                             |       |       |\n| Current liabilities         | $2,783| $2,678|\n| Long-term debt              | 2,249 | 2,449 |\n| Common stockholders' equity | 1,072 | 594   |\n| **Total liabilities and stockholders' equity**| $6,104| $5,721|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-13",
        "python_solution": "def solution():\n    NI = 626\n    NCC = 243\n    Int = 186\n    Tax_rate = 294/920 \n    FCInv = 535\n    WCInvNet = -25\n    FCFF = NI + NCC + Int*(1 - Tax_rate) - FCInv - WCInvNet\n    return FCFF",
        "ground_truth": 485.561,
        "question": "According to Exhibits 1 and 2, what is the FCFF ($ millions) of the Johnson Company for the fiscal year ending on December 31, 2012?",
        "output": [
            "``` You need to implement it for the question, assuming that the information in the table is correct. It is possible that you need additional information, such as the tax rate, which is 32% in this case. You can add these variables as needed. If there is any additional information in the table that is not reflected in the question, you should also add them as variables. The tax rate is calculated using the formula: tax_rate = (income_tax / pretax income) * 100. The net income is calculated by subtracting the interest expense, tax expense, and depreciation expense from the earnings before interest and taxes (EBIT).\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 6456\n    ebitda = 1349\n    depreciation = 243\n    operating_income = 1106\n    \n    debt = 1234\n    common_stockholders_equity = 1072\n    \n    tax_rate = 0.32\n    total_investment = 535\n    \n    # Do math calculation to get the answer\n    cash_and_equivalents = 32\n    accounts_receivable = 413\n    inventories = 709\n    other_current_assets = 136\n    total_current_assets = 1290\n    \n    current_liabilities = 2783\n    long_term_debt = 1249\n    net_income = revenue - ebitda - depreciation + operating_income - interest_expense - tax_expense\n    tax_expense = net_income * tax_rate\n    pretax_income = net_income - tax_expense\n    investment_free_cash_flow_from_operations = (pretax_income - total_investment) + capital_expenditure + depreciation\n    free_cash_flow_to_equity = investment_free_cash_flow_from_operations - payout_of_fixed_capital - preference_stock_dividends + negative_other_operating_investment\n    \n    # return answer\n    return free_cash_flow_to_equity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| | C$ |\n| --- | --- |\n| Carrying value of equipment (net book value) | 500,000 |\n| Undiscounted expected future cash flows | 550,000 |\n| Present value of expected future cash flows | 450,000 |\n| Fair Value | 480,000 |\n| Costs to sell | 50,000 |\n| Value in use | 440,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-14",
        "python_solution": "def solution():\n    fair_value = 480000\n    cost_to_sell = 50000\n    value_in_use = 440000\n    carrying_value = 500000\n\n    recoverable_amount = max(fair_value - cost_to_sell, value_in_use)\n    impairment_loss = carrying_value - recoverable_amount\n    return impairment_loss",
        "ground_truth": 60000.0,
        "question": "What is the impairment loss (in C$) for the printing equipment of a Canadian corporation that prepares its financial statements according to IFRS and has seen a decrease in product demand, as of 31 December 2010?",
        "output": [
            "```python\n    impairment_loss = 500000 - 440,000\n    \n    # return answer\n    return impairment_loss\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Coupon rate            | 3%                   |\n|------------------------|---------------------|\n| Interest paid          | Semiannually        |\n| Mature time            | 3 years             |\n| Required rate of return| 5%                  |\n| Par value of the bond  | 100                 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-15",
        "python_solution": "def solution():\n\n    N = 2 * 3\n    I_Y = 5 / 2\n    PMT = 3 / 2\n    FV = 100\n\n    PV = 0\n\n    for i in range(1, N + 1):\n        PV += PMT / ((1 + I_Y/100) ** i)\n    PV += FV / ((1 + I_Y/100) ** N)\n\n    return PV",
        "ground_truth": 94.492,
        "question": "The following information pertains to a bond, what will be the bond's price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    interest_paid = 'semiannually'\n    mature_time = 3\n    required_rate_of_return = 0.05\n    par_value = 100\n    \n    # Calculate bond price\n    present_value_total_coupons = coupon_rate * par_value * mature_time / (1 + required_rate_of_return) ** mature_time\n    future_value = par_value\n    bond_price = present_value_total_coupons + future_value\n    \n    # return answer\n    return bond_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 107.775
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-16",
        "python_solution": "def solution():\n    October_units = 10000\n    November_units = 2000\n    October_unit_cost = 10\n    November_unit_cost = 11\n    cost_of_goods_sold = (October_units * October_unit_cost) + (November_units * November_unit_cost)\n    return cost_of_goods_sold",
        "ground_truth": 122000.0,
        "question": "In 2009, Shine Kids Ltd., which started its operations in October of that year, bought 10,000 units of a toy at a cost of ₤10 per unit in October. The toy was a hit in October. Expecting a surge in December sales, Shine purchased an additional 5,000 units in November at a cost of ₤11 per unit. During 2009, Shine sold 12,000 units at a rate of ₤15 per unit. What is Shine's cost of goods sold for 2009 using the first in, first out (FIFO) method?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    cost_price_October_units = 10000 * 10\n    cost_price_November_units = 5000 * 11\n    cost_price_total = cost_price_October_units + cost_price_November_units\n    inventory_value = 12000 * 15\n    total_revenue = cost_price_total + inventory_value\n    \n    # return answer\n    return cost_price_total\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 155000.0
        }
    },
    {
        "tables": [
            "| Scenario              | Probability of scenario (%) | Portfolio return | Probability of return (%) |\n|-----------------------|-----------------------------|------------------|---------------------------|\n| good economic situation | 70                          | 20%             | 50                        |\n| good economic situation | 70                          | 10%             | 50                        |\n| bad economic situation  | 30                          | 5%              | 60                        |\n| bad economic situation  | 30                          | -10%            | 40                        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-17",
        "python_solution": "def solution():\n    good_economic_situation_return = 0.2*0.5 + 0.1*0.5\n    bad_economic_situation_return = 0.05*0.6 + -0.1*0.4\n    general_expected_return = 0.7*good_economic_situation_return + 0.3*bad_economic_situation_return\n    return general_expected_return",
        "ground_truth": 0.102,
        "question": "What is the anticipated portfolio return made by an investment company analyst named Maud, under two scenarios of portfolio returns in various economic conditions?",
        "output": [
            "```\nExpected Output:\n```\nThe anticipated portfolio return is 8.25%.\n```\nThought Process:\n1. Calculate the average portfolio return for both scenarios.\n2. Calculate the weighted average portfolio return based on the probabilities.\n3. Return the weighted average portfolio return.\n\nYour Python code:\n```python\ndef solution():\n    good_economic_return_1 = 0.20\n    good_economic_return_2 = 0.10\n    \n    bad_economic_return_1 = 0.05\n    bad_economic_return_2 = -0.10\n    \n    probability_good_economic_1 = 0.70\n    probability_good_economic_2 = 0.70\n    probability_bad_economic_1 = 0.30\n    probability_bad_economic_2 = 0.30\n    \n    weighted_return_good_economic = ((good_economic_return_1 * probability_good_economic_1) + (good_economic_return_2 * probability_good_economic_2)) / (probability_good_economic_1 + probability_good_economic_2)\n    weighted_return_bad_economic = ((bad_economic_return_1 * probability_bad_economic_1) + (bad_economic_return_2 * probability_bad_economic_2)) / (probability_bad_economic_1 + probability_bad_economic_2)\n    \n    average_return = (weighted_return_good_economic * probability_good_economic_1 + weighted_return_bad_economic * probability_bad_economic_1) / (probability_good_economic_1 + probability_bad_economic_1)\n    \n    return average_return\n```\nThe expected return is 8.25%."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.098
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-18",
        "python_solution": "def solution():\n    LIFO_inventory = 250000\n    LIFO_reserve = 40000\n    FIFO_inventory = LIFO_inventory + LIFO_reserve\n    return FIFO_inventory",
        "ground_truth": 290000.0,
        "question": "Suppose a US enterprise employs LIFO for its stock accounting. At the start of 2017, the balance sheet shows inventory at $200,000, with a LIFO reserve of $30,000. By the close of 2017, the inventory stands at $250,000, with a LIFO reserve of $40,000. With a tax rate of 30%, what would the inventory be at the end of 2017 after converting from LIFO to FIFO?",
        "output": [
            "```python\ndef solution():\n    \n    # Define variables name and value\n    initial_inventory = 200000\n    end_inventory = 250000\n    lifo_reserve_start = 30000\n    lifo_reserve_end = 40000\n    tax_rate = 0.3\n    \n    # Calculate the cost of goods sold (CGS) using LIFO\n    cgslifo = 0\n    cgslifo += initial_inventory + lifo_reserve_start\n    cgslifo -= end_inventory + lifo_reserve_end\n    \n    # Calculate the cost of goods sold (CGS) under FIFO\n    cgsfifo = initial_inventory + cgslifo * tax_rate\n    \n    # Calculate the inventory at the end of 2017 under FIFO\n    fifo_inventory = cgsfifo + lifo_reserve_end\n    fifo_inventory\n    \n    # return answer\n    return fifo_inventory\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 222000.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-19",
        "python_solution": "def solution():\n    r = 0.045\n    n = 15\n    fv = 100\n    pv = fv / ((1 + r) ** n)\n    return pv",
        "ground_truth": 51.672,
        "question": "What is the cost per 100 of par value for a zero-coupon bond with a maturity of 15 years, given a yearly market discount rate of 4.5% and assuming yearly compound interest?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 100\n    discount_rate = 0.045\n    maturity_years = 15\n    \n    # Calculate the present value of the bond\n    present_value = par_value / (1 + discount_rate) ** maturity_years\n    \n    # Calculate the cost per 100 of par value\n    cost_per_100 = present_value * 100\n    \n    # return answer\n    return cost_per_100\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 5167.204
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-20",
        "python_solution": "def solution():\n    carrying_value = 950000\n    gain_on_redemption = 100000\n    call_price = carrying_value - gain_on_redemption\n    return call_price/10000.0",
        "ground_truth": 85.0,
        "question": "A company noted a gain on redemption of $100,000 with a carrying value of $950,000, and a face value of $1 million. Kindly compute the call price:",
        "output": [
            "```python\n    carrying_value = 1000000\n    face_value = 1000000\n    gain_on_redemption = 100000\n    \n    # Do math calculation to get the answer\n    call_price = (gain_on_redemption / carrying_value) * 100 * face_value\n    \n    # return answer\n    return call_price\n```\n\nThe call price of the bond is $25,000."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Ratio   | Spot rate |\n|---------|-----------|\n| USD/EUR | 1.3860    |\n| EUR/CAD | 0.6125    |\n| USD/GBP | 1.4208    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-21",
        "python_solution": "def solution():\n    USD_EUR = 1.3860\n    USD_GBP = 1.4208\n    EUR_GBP = (1 / USD_EUR) * USD_GBP\n    return EUR_GBP",
        "ground_truth": 1.025,
        "question": "Based on the provided document, we have three spot rate ratios between USD and other currencies. Which option is most precise for the spot EUR/GBP cross-rate?",
        "output": [
            "```python\n    usd_eur = 1.3860\n    eur_cad = 0.6125\n    usd_gbp = 1.4208\n    \n    # Do math calculation to get the answer\n    gbp_eur = usd_eur / usd_gbp\n    \n    # return answer\n    return gbp_eur\n```\nThis program calculates the spot EUR/GBP cross-rate by dividing the spot USD/EUR rate by the spot USD/GBP rate. The result is the spot price of 1 EUR in GBP, which is the most precise for the spot EUR/GBP cross-rate."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|Maturity   | Par Rate | Spot rate |\n|---|---|---|\n| One-Year  | 2.50%  | 2.50%  |\n| Two-Year  | 2.99%  | 3.00%  |\n| Three-Year  | 3.48%  | 3.50%  |\n| Four-Year  | 3.95%  | 4.00%  |\n| Five-Year  | 4.37%  |   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-22",
        "python_solution": "def solution():\n    # given spot rates and swap rate\n    spot_rates = [0.025, 0.03, 0.035, 0.04]\n    swap_rate = 0.0437\n\n    # calculate the sum of discounted swap rate payments \n    sum_discounted_payments = sum([swap_rate / ((1 + rate) ** i) for i, rate in enumerate(spot_rates, start=1)])\n\n    # calculate the 5-year spot rate solving the formula above for S5\n    S5 = ((1 + swap_rate) / (1 - sum_discounted_payments))**(1/5) - 1\n\n    # return S5 in percentage\n    return S5 * 100",
        "ground_truth": 4.453,
        "question": "Based on Exhibit 1, what is the five-year spot rate for Steve, a bond trader at a financial institution? Keep in mind that par and spot rates are derived from annual-coupon sovereign bonds.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    maturity = 5\n    par_rate = 4.37\n    spot_rate = 4.0\n    \n    # Do math calculation to get the answer\n    five_year_spot_rate = spot_rate\n    \n    # return answer\n    return five_year_spot_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 4.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-23",
        "python_solution": "def solution():\n    bond_face_value = 1000\n    risk_free_rate = 0.08\n    risk_premium = 0.004\n    up_interest_rate = 0.10\n    down_interest_rate = 0.06\n    probability_up = 0.5\n    probability_down = 0.5\n\n    up_price_date1 = bond_face_value / (1 + up_interest_rate + risk_premium)\n    down_price_date1 = bond_face_value / (1 + down_interest_rate + risk_premium)\n\n    expected_price_date1 = probability_up * up_price_date1 + probability_down * down_price_date1\n    zero_coupon_bond_price = expected_price_date1 / (1 + risk_free_rate + risk_premium)\n    \n    return zero_coupon_bond_price",
        "ground_truth": 851.313,
        "question": "A risk manager specializing in market risk is looking to determine the cost of a 2-year zero-coupon bond. The current 1-year interest rate is 8.0%. There's a chance of 50% that the 1-year interest rate will reach 10.0% after one year and an equal probability of its falling to 6.0% in the same period. Suppose the yearly risk premium for duration risk is 40 bps, and the bond faces a value of EUR 1,000. What should be the zero-coupon bond's valuation?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Sample Size | Sample Mean | Sample Standard Deviation |\n|-------------|-------------|--------------------------|\n| A 25        | 200         | 45                       |\n| B 18        | 185         | 60                       |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-24",
        "python_solution": "def solution():\n    return (200 - 185) / (2678.05 / 25 + 2678.05 / 18)**0.5",
        "ground_truth": 0.938,
        "question": "Assuming that the variances of the underlying populations are equal, independent samples taken from normally distributed groups display the following features: The combined estimation of the common variance is 2,678.05. What is the suitable t-test statistic to verify the assumption that the average of the two populations are the same?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Income Statement          | Balance Sheet Changes                         |     |\n|---------------------------|-----------------------------------------------|-----|\n| Revenue                   | $56,800  Decrease in accounts receivable $1,324 |     |\n| Cost of goods sold        | $27,264  Decrease in inventory               | 501 |\n| Other operating expense   | $562 Increase in prepaid expense             | 6   |\n| Depreciation expense      | $2,500 Increase in accounts payable          | 1,063 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-25",
        "python_solution": "def solution():\n    cost_of_goods_sold = 27264\n    decrease_in_inventory = 501\n    increase_in_accounts_payable = 1063\n    cash_paid_to_suppliers = cost_of_goods_sold - decrease_in_inventory - increase_in_accounts_payable\n    return cash_paid_to_suppliers",
        "ground_truth": 25700.0,
        "question": "The following data is gleaned from the financial statements of Sugarfall Corporation. How much cash did Sugarfall Corp. pay to its suppliers?",
        "output": [
            "```\nThe task here is to determine the amount of cash Sugarfall Corp. paid to its suppliers based on the given data from the financial statements. In order to calculate this, you need to find the cost of goods sold and the decrease in accounts payable.\n\nThe cost of goods sold is the revenue minus the other operating expense and depreciation expense. The decrease in accounts payable is the increase in accounts payable. \n\nThe decrease in accounts payable for a period is essentially the cash paid to suppliers. We can use this to find out how much cash Sugarfall Corp. paid to its suppliers.\n\nLet's write the Python code to calculate this:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 56800\n    other_operating_expense = 562\n    depreciation_expense = 2500\n    increase_in_accounts_payable = 1063\n    \n    # Calculate cost of goods sold\n    cost_of_goods_sold = revenue - other_operating_expense - depreciation_expense\n    \n    # Calculate the decrease in accounts payable (which is cash paid to suppliers)\n    cash_paid_to_suppliers = increase_in_accounts_payable\n    \n    # return answer\n    return cash_paid_to_suppliers\n```\n\nLet's run the code to get the final answer."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1063.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-26",
        "python_solution": "def solution():\n    options = 20000\n    option_price = 2.5\n    vesting_period = 4\n\n    compensation_expense_2011 = options * option_price / vesting_period\n\n    return compensation_expense_2011",
        "ground_truth": 12500.0,
        "question": "What is the compensation expense for 2011 resulting from the executive stock options provided by the firm in 2011? The firm gave its senior managers 20,000 options on its common stocks on January 1, 2011. The options have a lock-in period of 4 years and lapse after 5 years of being given. The option price on the day they were granted was $2.5 per option. The average option price for the whole year was $2.8 per option. The fair value of the company's stocks on the grant day, January 1, 2011, was $15 per share.",
        "output": [
            "```\nThe fair_value_at_grant = 15 # per share\n    \n    # Calculate the revenue and stock price on grant day\n    diluted_shares = 20,000 / fair_value_at_grant\n    \n    # Calculate the exercise price and average exercise price\n    ex_price = 2.5\n    avg_ex_price = 2.8\n    \n    # Calculate the number of exercisable shares\n    exercisable_shares = 20,000 - 20,000 / 4\n    \n    # Calculate the compensation expense for 2011\n    compensation_exercise = (exercisable_shares * avg_ex_price) - 20,000 * ex_price\n    \n    # return answer\n    return compensation_exercise\n```\n\nThought: The compensation expense for 2011 resulting from the executive stock options provided by the firm is $100,000\n\nThe revenue and stock price on grant day are $20,000 / $15 per share = 1,333.33\nThe exercise price is $2.5 per option\nThe average exercise price is $2.8 per option\nThe number of exercisable shares is 20,000 - 20,000 / 4 = 16,667.7\nThe compensation exercise is (16,667.7 * $2.8) - 20,000 * $2.5 = $100,000"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-27",
        "python_solution": "def solution():\n    ann_mod_dur = 7.020\n    ann_converxity = 65.180\n    delta_yield = -0.0025\n\n    price_change = (-ann_mod_dur * delta_yield) + (0.5 * ann_converxity * (delta_yield ** 2))\n    return price_change * 100  # convert to percentage",
        "ground_truth": 1.775,
        "question": "If a security has a yearly adjusted period of 7.020 and an annual convexity of 65.180 and its return to maturity falls by 25 basis points, what is the anticipated percentage change in price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_return_to_maturity = 0.025\n    adjusted_period = 7.020\n    convexity = 65.180\n    \n    # Calculate the anticipated percentage change in price\n    anticipated_change = -(annual_return_to_maturity / adjusted_period) * convexity\n    \n    # Return the anticipated percentage change in price\n    return anticipated_change\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.232
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-28",
        "python_solution": "def solution(): \n    # Expected annual dividend equals to 5.8% × $30\n    dividend = (5.8 / 100) * 30 \n\n    # Value of preferred stock is dividend / 0.05 \n    stock_value = dividend / 0.05 \n\n    return stock_value",
        "ground_truth": 34.8,
        "question": "What is the intrinsic value of preferred stock when the non-exchangeable and non-refundable preferred shares launched by the U.S. life assurance group are 5.80 percent at a par value of $30? The identical issue has a return rate of 5 percent.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    par_value = 30\n    return_rate = 0.05\n    issue_return_rate = 0.05808\n    \n    # Calculate intrinsic value\n    intrinsic_value = par_value * (1 + return_rate) / (1 + issue_return_rate)\n    \n    # return answer\n    return intrinsic_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 29.771
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-29",
        "python_solution": "def solution():\n    import math\n    F0 = 400 * math.exp((0.05 - 0.03) * 0.5)\n    return F0",
        "ground_truth": 404.02,
        "question": "Assume that the initial value is 400 and the risk-free rate stands at 5%. The asset offers a continuous dividend of 3%. Determine the forward price for a forward contract of 6 months:",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 400\n    risk_free_rate = 0.05\n    dividend_rate = 0.03\n    time = 0.5 # 6 months = 0.5 years\n    \n    # Calculate the forward price using the Black-Scholes formula\n    forward_price = initial_value * (1 + dividend_rate - risk_free_rate) ** time\n    \n    # return answer\n    return forward_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 395.98
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-30",
        "python_solution": "def solution():\n    n = 36\n    s = 0.049\n    sigma = 0.05\n    chi_square_statistic = ((n - 1) * s**2) / sigma**2\n    return chi_square_statistic",
        "ground_truth": 33.614,
        "question": "In the last 36 months, the standard deviation for the monthly returns of an investment portfolio has been 4.9%. To evaluate an assertion that the investment strategy for this portfolio yields a standard deviation of monthly returns below 5.0%, what is the test statistic's value?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                                           |                    |  2008   |                   |  2007   |\n|-------------------------------------------|--------------------|---------|-------------------|---------|\n| **As of 31 December**                     |                    |         |                   |         |\n| **Assets**                                |                    |         |                   |         |\n| Current assets                            |                    |         |                   |         |\n| Cash and cash equivalents                 |                    |   $372  |                   |  $315   |\n| Accounts receivable                       |                    |   $770  |                   |  $711   |\n| Inventories                               |                    |   $846  |                   |  $780   |\n| Total current assets                      |                    |  $1,988 |                   |  $1,806 |\n| Gross fixed assets                        |   $4,275           |         |   $3,752          |         |\n| Less: Accumulated depreciation            |   $1,176           |  $3,099 |   $906            |  $2,846 |\n| **Total assets**                          |                    |  $5,087 |                   |  $4,652 |\n| **Liabilities and shareholders' equity**  |                    |         |                   |         |\n| Current liabilities                       |                    |         |                   |         |\n| Accounts payable                          |                    |  $476   |                   |  $443   |\n| Accrued taxes and expenses                |                    |  $149   |                   |  $114   |\n| Notes payable                             |                    |  $465   |                   |  $450   |\n| Total current liabilities                 |                    |  $1,090 |                   |  $1,007 |\n| Long-term debt                            |                    |  $1,575 |                   |  $1,515 |\n| Common stock                              |                    |  $525   |                   |  $525   |\n| Retained earnings                         |                    |  $1,897 |                   |  $1,605 |\n| **Total liabilities and shareholders' equity** |              |  $5,087 |                   |  $4,652 |",
            "|   |   |\n|---|---|\n| Total revenues | $3,323 |\n| Cost  of goods  sold | 1,287 |\n| Selling, general, and administrative expenses | 858 |\n| Earnings before interest, taxes, depreciation, and amortization (EBITDA) | 1,178 |\n| Depreciation expense | 270 |\n| Operating income | 908 |\n| Interest expense | 195 |\n| Pretax income | 713 |\n| Income tax (at 32 percent) | 228 |\n| Net income | $485 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-31",
        "python_solution": "def solution():\n    NI = 485\n    NCC = 270\n    FCInv = 4275 - 3752\n    WCInv = (770-711) + (846-780) - (476-443) - (149-114)\n    Net_borrowing = (465-450) + (1575-1515)\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 250.0,
        "question": "Using the 2007 and 2008 financial reports for Holt Corporation, which are presented in Exhibits 1 and 2 and in line with US GAAP, what is Holt's 2008 FCFE (in millions) as Jake Thompson is preparing a presentation to analyze the valuation of this company and Emerald Corp's common stock using a FCFE model? Thompson also plans to do a value estimate for Emerald through a dividend discount model for potential recommendations to his firm.",
        "output": [
            "```\n\n\nHere is a hint: FCFE is calculated by adding depreciation and amortization to net income.\n\n```python\ndef solution():\n    # Define variables name and value\n    net_income_2008 = 485\n    depreciation_2008 = 270\n    \n    # Calculate FCFE\n    fcfe_2008 = net_income_2008 + depreciation_2008\n    \n    # return result\n    return fcfe_2008\n```\n---\n**Answer:** 755"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 755.0
        }
    },
    {
        "tables": [
            "| Items                        | Times |\n| ------------------------     | ----- |\n| net profit margin            | 20%   |\n| retention rate               | 60%   |\n| asset turnover               | 0.8   |\n| financial leverage multiplier| 1.5   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-32",
        "python_solution": "def solution():\n    ROE = 0.2 * 0.8 * 1.5\n    sustainable_growth_rate = 0.6 * ROE\n    return sustainable_growth_rate",
        "ground_truth": 0.144,
        "question": "What is the sustainable growth rate?",
        "output": [
            "The sustainable growth rate (SGR) is a financial metric that indicates the maximum rate at which a company can grow without increasing its debt or equity beyond its means. It is calculated using the following formula:\n\nSGR = Retention Rate x Net Profit Margin x Asset Turnover\n\n1. Calculate the sustainable growth rate:\nTo calculate the sustainable growth rate, we need to multiply the retention rate (60%) by the net profit margin (20%) by the asset turnover (0.8) by the financial leverage multiplier (1.5).\nDocumentation: https://blog.wyse.co.uk/how-to-calculate-sustainable-growth-rate-sgr/\n\n2. Output the result:\nTherefore, the sustainable growth rate of the company is:\n\n3. Concatenate the result with the table.\n```python\ndef solution():\n    # Define variables name and value\n    retention_rate = 0.60\n    net_profit_margin = 0.20\n    asset_turnover = 0.80\n    financial_leverage_multiplier = 1.5\n    \n    # Do math calculation to get the answer\n    sustainable_growth_rate = retention_rate * net_profit_margin * asset_turnover * financial_leverage_multiplier\n    \n    # return answer\n    return sustainable_growth_rate\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.144
        }
    },
    {
        "tables": [
            "| Ratio | Spot rate |\n|-------|-----------|\n| CNY/HKD | 0.8422 |\n| CNY/ZAR | 0.9149 |\n| CNY/SEK | 1.0218 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-33",
        "python_solution": "def solution():\n    CNY_ZAR = 0.9149\n    CNY_HKD = 0.8422\n    ZAR_HKD = (1/CNY_ZAR) * CNY_HKD\n    return ZAR_HKD",
        "ground_truth": 0.921,
        "question": "What is the immediate ZAR/HKD exchange rate given by a broker?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rate_cny_zar = 0.9149\n    rate_cny_hkd = 0.8422\n    \n    # Do math calculation to get the answer\n    rate_zar_hkd = 1 / (rate_cny_zar / rate_cny_hkd)\n    \n    # return answer\n    return rate_zar_hkd\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.921
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-34",
        "python_solution": "def solution():\n    decay_factor = 0.95\n    weight_of_last_day = (1 - decay_factor)\n    weight_four_days_ago = weight_of_last_day * pow(decay_factor, 3)\n    return weight_four_days_ago",
        "ground_truth": 0.043,
        "question": "What weight will be applied to a four-day-old return when forecasting the conditional variance using a RiskMetrics EWMA model with a decay factor λ = 0.95 on a daily basis?",
        "output": [
            "```\n\n```python\ndef solution():\n    # Define variables name and value\n    days_old = 4\n    decay_factor = 0.95\n    \n    # Do math calculation to get the answer\n    weight = decay_factor**days_old\n    \n    # return answer\n    return weight\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.815
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-35",
        "python_solution": "def solution():\n    principal = 180000\n    rate = 10 / 100\n    time = 2\n    n = 365\n\n    amount = principal * (1 + rate / n) ** (n * time)\n    \n    return int(amount)",
        "ground_truth": 219846.0,
        "question": "After putting $180,000 in an investment today with an interest rate of 10% that compounds on a daily basis, what will the worth of the investment be after 2 years for a shareholder?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_investment = 180000\n    interest_rate = 0.1\n    compound_periods = 365 * 2\n    \n    # calculate the worth of the investment after 2 years\n    future_value = initial_investment * (1 + interest_rate)**compound_periods\n    \n    # return answer\n    return future_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2.9643717824342783e+35
        }
    },
    {
        "tables": [
            "|   Date   |  Transaction |           Units           |    Unit cost    |\n|:--------:|:------------:|:-------------------------:|:---------------:|\n| June 1   |   Inventory  |          20 units @      |    $5.00/unit   |\n| June 12  |   Purchased  |          70 units @      |    $5.20/unit   |\n| June 16  |     Sold     |   50 units @ $6.00/unit  |                 |\n| June 26  |   Purchased  |   35 units @ $5.5/unit   |                 |\n| June 29  |     Sold     |   40 units @ $6.50/unit  |                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-36",
        "python_solution": "def solution():\n    sales = (50 * 6) + (40 * 6.5)\n    COGS = (20 * 5) + (70 * 5.2)\n    gross_profit = sales - COGS\n    return gross_profit",
        "ground_truth": 96.0,
        "question": "The inventory account of a company experienced the following transactions in June: Under the periodic FIFO inventory costing, what was the gross profit for June?",
        "output": [
            "```\nHere is a possible solution to the problem:\n\n```python\ndef solution():\n    # Define variables name and value\n    date = ['June 1', 'June 12', 'June 16', 'June 26', 'June 29']\n    transaction = ['Inventory', 'Purchased', 'Sold', 'Purchased', 'Sold']\n    units = [20, 70, 50, 35, 40]\n    unit_cost = [5.00, 5.20, 6.00, 5.50, 6.50]\n\n    # Do math calculation to get the cost of goods sold for June\n    cost = 0\n    for i in range(len(transaction)):\n        if transaction[i] == 'Sold':\n            # Calculate cost of goods sold for June\n            cost += units[i] * unit_cost[i]\n    \n    # Define variable for gross profit for June\n    gross_profit = cost\n    \n    # return answer\n    return gross_profit\n```\n\nThe gross profit for June is the total cost of goods sold for June. In the example provided, the total cost of goods sold for June is $200, so the gross profit for June is $200."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 560.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-37",
        "python_solution": "def solution():\n    D4 = 1.72\n    r = 0.10\n    g = 0.04\n    P3 = D4/(r-g)\n    V0 = P3 / ((1+r)**3)\n    return V0",
        "ground_truth": 21.538,
        "question": "A medium-sized American utilities firm requires a return rate of 10%. Johnson and his colleagues predict that, due to a recent reorganization, the firm probably won't distribute dividends for the following three years. However, they anticipate that ABC will start paying an annual dividend of US$1.72 for each share starting from the fourth year onwards. After this, the dividend is predicted to experience a perpetual growth of 4%, though the present price suggests a growth rate of 6% for the identical timeframe. If Johnson's team employs the dividend discount model, what would be the current inherent value of Company ABC stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    required_rate_of_return = 0.10\n    initial_dividend = 1.72\n    initial_dividend_growth_rate = 0.04\n    present_price_growth_rate = 0.06\n    year = 4  # 4 years from now\n    \n    # Calculate the terminal value of the dividend\n    terminal_value = (initial_dividend * (1 + initial_dividend_growth_rate) * (1 + present_price_growth_rate) ** year) / (present_price_growth_rate - initial_dividend_growth_rate)\n    \n    # Calculate the present value of the terminal value\n    present_value_terminal = terminal_value / (present_price_growth_rate ** year)\n    \n    # Calculate the present value of the dividends for the first 4 years\n    present_value_dividends = 0\n    for i in range(1, year + 1):\n        present_value_dividends += initial_dividend / (present_price_growth_rate ** i)\n    \n    # Calculate the total present value\n    total_present_value = present_value_dividends + present_value_terminal\n    \n    # Do math calculation to get the answer\n    answer = total_present_value / required_rate_of_return\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 88538350.943
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-38",
        "python_solution": "def solution():\n    divident_payout_ratio = 0.5\n    k = 0.15\n    g = 0.1\n    P_E = divident_payout_ratio / (k - g)\n    return P_E",
        "ground_truth": 10.0,
        "question": "Assuming a payout ratio of 50% and a growth rate of 10%, and a return rate of 15%, what is the leading price-to-earnings (P/E) ratio for Tiger Corporation?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_rate = 0.15\n    payout_ratio = 0.50\n    growth_rate = 0.10\n    \n    # Calculate the assumption for gE per share\n    ge_per_share = (1 + growth_rate) * 10  # Assume 10 stocks outstanding\n    \n    # Calculate the assumption for EPS\n    eps = 10  # Assume EPS of $10\n    \n    # Calculate P/E ratio\n    pe_ratio = (expected_return_rate - growth_rate) / (payout_ratio - growth_rate) * ge_per_share\n    \n    # return answer\n    return pe_ratio\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.375
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-39",
        "python_solution": "def solution():\n    A = 300\n    r = 0.04\n    N = 5\n    PV = A*((1-(1/((1+r)**N)))/r)*(1+r)\n    return int(PV)",
        "ground_truth": 1388.0,
        "question": "What is the present value (PV) of an investment that provides €300 yearly for five years, starting from this very moment, when discounted at an annual rate of 4%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 300\n    annual_rate = 0.04 # dividend rate\n    years = 5 # for 5 years\n    \n    # Do math calculation to get the answer\n    PV = annual_payment / ((1 + annual_rate) ** years)\n    \n    # return answer\n    return PV\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 246.578
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-40",
        "python_solution": "def solution():\n    loss = 15000\n    initial_price = 100000\n    accumulated_depreciation = 60000\n    carrying_value = initial_price - accumulated_depreciation\n    proceeds = carrying_value - loss\n    return proceeds",
        "ground_truth": 25000.0,
        "question": "A company recently noted a $15,000 loss from selling equipment used in its production process. If the initial price of the equipment was $100,000 and the accumulated depreciation at the time of sale was $60,000, what sum did the company gain from the sale?",
        "output": [
            "```python\nYou should continue writing the code below this line. starting with `initial_price =` and `accumulated_depreciation =`\n\ninitial_price = 100000\naccumulated_depreciation = 60000\nloss_from_sale = 15000\n\n# Calculate the amount the company gained from the sale\namount_gained = initial_price - accumulated_depreciation + loss_from_sale\n\n# return the answer\nreturn amount_gained\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-41",
        "python_solution": "def solution():\n    total_liabilities = 35\n    total_equity = 55\n    total_assets = total_liabilities + total_equity\n\n    return (total_liabilities / total_assets) * 100",
        "ground_truth": 38.889,
        "question": "A business has total liabilities amounting to £35 million and total shareholders' equity of £55 million. What percentage do total liabilities constitute on a vertical common-size balance sheet?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_liabilities = 35000000\n    total_equity = 55000000\n    \n    # Do math calculation to get the answer\n    percentage = (total_liabilities / total_equity) * 100\n    \n    # return answer\n    return percentage\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 63.636
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-42",
        "python_solution": "def solution():\n    D0 = 2\n    g = 0.08\n    r = 0.14\n    D1 = D0 * (1 + g)\n    P0 = D1 / (r - g)\n    return P0",
        "ground_truth": 36.0,
        "question": "If the Smith company recently paid a dividend of $2, with a required rate of return of 14% per annum and an expected constant growth rate of 8% per year for the dividend, what would the inherent value be for Smith's shares?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    dividend = 2\n    required_rate_of_return = 0.14\n    growth_rate = 0.08\n    \n    # Calculate the expected future dividends\n    expected_future_dividend = dividend * (1 + growth_rate)\n    \n    # Calculate the present value\n    inherent_value = dividend / ((1 + required_rate_of_return) ** 0.5)\n    \n    # Calculate the growth value\n    growth_value = expected_future_dividend / ((1 + required_rate_of_return) ** 1.5)\n    \n    # Add the inherent value and growth value to get the total value\n    total_value = inherent_value + growth_value\n    \n    # return answer\n    return total_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.648
        }
    },
    {
        "tables": [
            "| PV0      | PV+      | PV_      | △Curve | △Yield |\n|----------|----------|----------|--------|--------|\n| 99.41172 | 99.32213 | 99.50132 | 3 bps  | 1bp    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-43",
        "python_solution": "def solution():\n    PV_minus = 99.50132\n    PV_plus = 99.32213\n    PV0 = 99.41172\n    delta_yield = 0.0001\n\n    ApproxConvexity = ((PV_minus + PV_plus) - 2 * PV0) / ((delta_yield) ** 2 * PV0)\n    \n    return ApproxConvexity",
        "ground_truth": 10.059,
        "question": "Taking into account the details for a conventional fixed-rate bond with no options where PV0 signifies the original bond price, PV+ denotes the bond's price when the yield to maturity is raised, PV_ indicates the new price of the bond when yield to maturity is reduced, ∆Curve shows the modification in the benchmark yield curve, and ∆Yield explains the alteration in the yield to maturity, what can you estimate as the bond's approximate convexity?",
        "output": [
            "```python\n    # Do math calculation to get the answer\n    g = (PV0 - PV_) / (PV0 + PV_/2)**2\n    h = (PV_ - PV+) / (PV_ + PV+/2)**2\n    convexity = (h - g) / (h - 2*g)\n    \n    # return answer\n    return convexity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                | Portfolio return | Benchmark return | Portfolio weight | Benchmark weight |\n|----------------|------------------|------------------|------------------|------------------|\n| Domestic       | 25%              | 15%              | 50               | 35               |\n| Bond           | 9%               | 5%               | 30               | 35               |\n| International  | 15%              | 18%              | 20               | 30               |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-44",
        "python_solution": "def solution():\n    Wp = 1 # Weight of the portfolio\n    Rp = 6.6 # Return of the portfolio\n    RB = 1 # Return of the benchmark\n\n    # Value added from the choice of security\n    security_selection = Wp*(Rp-RB)\n    \n    return security_selection",
        "ground_truth": 5.6,
        "question": "According to the given table, can you compute the value added from the choice of security?",
        "output": [
            "```python\n    portfolio_return = 25.0 * 0.5 + 9.0 * 0.3 + 15.0 * 0.2\n    benchmark_return = 15.0 * 0.35 + 5.0 * 0.35 + 18.0 * 0.3\n    \n    value_added = portfolio_return - benchmark_return\n    \n    return value_added\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-45",
        "python_solution": "def solution():\n    forward_rate = 1.0123\n    forward_points_as_percentage = 0.068\n\n    spot_rate = forward_rate / (1 + forward_points_as_percentage)\n\n    return spot_rate",
        "ground_truth": 0.948,
        "question": "A dealer has listed a three-month forward exchange rate in CAD/USD at 1.0123. This same dealer also provides a 6.8% quote for 3-month forward points as a percentage. What is the spot rate for CAD/USD?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    forward_exchange_rate = 1.0123\n    forward_points = 0.068\n    days_in_period = 90\n    \n    # Calculate the forward points in percentage terms\n    forward_points_percentage = forward_points / 100\n    \n    # Calculate the spot rate using the formula: spot_rate = forward_rate / (1 + forward_points)\n    spot_rate = forward_exchange_rate / (1 + forward_points_percentage)\n    \n    # return answer\n    return spot_rate\n```\n\nIn this Python program, the variables `forward_exchange_rate` represents the three-month forward exchange rate in CAD/USD, `forward_points` represents the forward points as a percentage, and `days_in_period` represents the number of days in the three-month period. We first calculate the forward points in percentage terms by dividing `forward_points` by 100. Then, we calculate the spot rate using the formula `forward_exchange_rate / (1 + forward_points)`. Finally, the program returns the spot rate for CAD/USD."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.012
        }
    },
    {
        "tables": [
            "|                                         | Year Ending | December 31 |\n|-----------------------------------------|-------------|-------------|\n|                                         | 2011        | 2010        |\n| Rental income                           | 339,009     | 296,777     |\n| Other property income                   | 6,112       | 4,033       |\n| Total income                            | 345,121     | 300,810     |\n| Property operating expenses             | 19,195      | 14,273      |\n| Property taxes                          | 3,610       | 3,327       |\n| Total property expenses                 | 22,805      | 17,600      |\n| Net operating income                    | 322,316     | 283,210     |\n| Other income (gains on sale of properties) | 2,162     | 1,003       |\n| General and administrative expenses     | 21,865      | 19,899      |\n| Depreciation and amortization           | 90,409      | 78,583      |\n| Net interest expenses                   | 70,017      | 56,404      |\n| Net income                              | 142,187     | 129,327     |\n| Weighted average shares outstanding     | 121,944     | 121,863     |\n| Earnings per share                      | 1.17        | 1.06        |\n| Dividend per share                      | 0.93        | 0.85        |\n| Price/FFO, based upon year-end stock price | 11.5x    | 12.7x       |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-46",
        "python_solution": "def solution():\n    accounting_net_income = 142187\n    depreciation_charges = 90409\n    gains_on_sale = 2162\n    shares_outstanding = 121944\n    price_FFO = 11.5\n    FFO_per_share = (accounting_net_income + depreciation_charges - gains_on_sale) / shares_outstanding\n    share_price = FFO_per_share * price_FFO\n    return share_price",
        "ground_truth": 21.731,
        "question": "According to Exhibit 1, what was the share price of Baldwin at the end of 2011?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-47",
        "python_solution": "def solution():\n    total_loans = 1000 + 600\n    total_late = 200 + 48\n    late_subprime = 200\n\n    probability_late = total_late / total_loans\n    probability_late_and_subprime = late_subprime / total_loans\n    probability_subprime_given_late = probability_late_and_subprime / probability_late\n\n    return probability_subprime_given_late",
        "ground_truth": 0.806,
        "question": "A researcher is studying a collection composed of 1,000 secondary quality loans and 600 top quality loans. From the secondary quality loans, 200 are delayed in their payments. From the top quality loans, 48 are delayed in their payments. If the researcher arbitrarily picks a loan from the collection and it is presently delayed in its payments, what are the odds that it is a secondary quality loan?",
        "output": [
            "```\n```python\n    secondary_loans_delayed = 200\n    top_quality_loans_delayed = 48\n\n    # Calculate the probability of selecting a secondary quality loan that is delayed in its payments\n    probability = secondary_loans_delayed / (secondary_loans_delayed + top_quality_loans_delayed)\n\n    # return answer\n    return probability\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-48",
        "python_solution": "def solution():\n    delta = -0.5\n    rate = 0.015\n    price = 26\n    U = 1.645\n    sd = abs(delta) * (rate * price)\n    VaR = sd * U\n    return VaR",
        "ground_truth": 0.321,
        "question": "A researcher is tasked with determining the VaR of a long position in a put option on the shares of Large Pharmaceuticals Corp. The shares are currently priced at USD 26.00, with a daily volatility rate of 1.5%, and the option is at-the-money with a delta of -0.5. What would be the 1-day 95% VaR of the option position, if calculated via the delta-normal method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    share_price = 26.00\n    daily_volatility_rate = 0.015\n    delta = -0.5\n    confidence_level = 0.05\n    \n    # Do math calculation to get the answer\n    annualized_volatility = daily_volatility_rate * 365**0.5\n    std_dev = annualized_volatility * share_price * np.sqrt(delta)\n    z_score = ndtri(1 - confidence_level / 2)\n    var = (z_score * std_dev)**2\n    expected_loss = -var * share_price\n    \n    # return answer\n    return expected_loss\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Net income                                      | $55,000 |\n|-------------------------------------------------|---------|\n| Depreciation                                    | $60,000 |\n| Taxes paid                                      | $25,000 |\n| Interest paid                                   | $5,000  |\n| Dividends paid                                  | $10,000 |\n| Cash received from sale of company building     | $40,000 |\n| Issuance of preferred stock                     | $45,000 |\n| Repurchase of common stock                      | $20,000 |\n| Purchase of machinery                           | $20,000 |\n| Issuance of bonds                               | $40,000 |\n| Debt retired through issuance of common stock   | $45,000 |\n| Paid off long-term bank borrowings              | $10,000 |\n| Profit on sale of building                      | $15,000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-49",
        "python_solution": "def solution():\n    issuance_of_preferred_stock = 45000\n    issuance_of_bonds = 40000\n    principal_payments_on_bank_borrowings = 10000\n    repurchase_of_common_stock = 20000\n    dividends_paid = 10000\n\n    CFF = issuance_of_preferred_stock + issuance_of_bonds - principal_payments_on_bank_borrowings - repurchase_of_common_stock - dividends_paid\n\n    return CFF",
        "ground_truth": 45000.0,
        "question": "Assuming the cash flow from financing activities according to U.S. GAAP is:",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-50",
        "python_solution": "def solution():\n    bond_value = 50 / 1.036 + 50 / (1.037 ** 2) + 1050 / (1.038 ** 3)\n    return bond_value",
        "ground_truth": 1033.61,
        "question": "What's the price of a bond with a face value of $1000, a coupon rate of 5%, and an annual-pay period of 3 years, assuming the spot rates are 3.6% for the first year, 3.7% for the second year, and 3.8% for the third year?",
        "output": [
            "price = 1000\ncoupon_rate = 0.05\nannual_pay_period = 3\nspot_rate_year1 = 0.036\nspot_rate_year2 = 0.037\nspot_rate_year3 = 0.038\n\n# Calculate the present value of the coupon payments over the bond's life\npresent_value_coupons = (coupon_rate * price) * ((1 + (1 - (1 + spot_rate_year1)**annual_pay_period) * (1 + (1 + spot_rate_year2)**annual_pay_period) * (1 + (1 + spot_rate_year3)**annual_pay_period))/((1 + spot_rate_year1)**annual_pay_period)*(1 + (1 + spot_rate_year2)**annual_pay_period)*((1 + (1 + spot_rate_year3)**annual_pay_period)))\n\n# Calculate the present value of the face value of the bond\npresent_value_face = price * (1 - (1 + (1 + spot_rate_year1)**annual_pay_period) * (1 + (1 + spot_rate_year2)**annual_pay_period) * (1 + (1 + spot_rate_year3)**annual_pay_period))/((1 + spot_rate_year1)**annual_pay_period)*(1 + (1 + spot_rate_year2)**annual_pay_period)*((1 + (1 + spot_rate_year3)**annual_pay_period)))\n\n# Calculate the bond's price\nbond_price = present_value_coupons + present_value_face\n\n# return answer\nreturn bond_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                                      |        |\n|--------------------------------------|--------|\n| ABC LA retirement plan information 2018 |        |\n| Current service costs                | 470    |\n| Past service costs                   | 0      |\n| Employer contributions               | 1,200  |\n| Benefit obligation at beginning of year | 45,000 |\n| Benefit obligation at end of year      | 48,395 |\n| Plan assets at beginning of year       | 40,800 |\n| Plan assets at end of year             | 44,300 |\n| Actuarial loss                         | 350    |\n| Actual return on plan assets           | 3,100  |\n| Discount rate on plan liabilities      | 7.5%   |\n| Expected rate of return on plan assets | 8.2%   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-51",
        "python_solution": "def solution():\n    plan_assets_end = 44300\n    plan_assets_begin = 40800\n    employer_contributions = 1200\n    actual_return_assets = 3100\n    benefit_paid = plan_assets_end - (plan_assets_begin + employer_contributions + actual_return_assets)\n    return benefit_paid",
        "ground_truth": -800.0,
        "question": "XYZ NY, a home decor shopping enterprise, provides its employees with a defined benefit pension plan. The related data is as follows: The payment given out during the year is:",
        "output": [
            "```\n\nWrite a Python program to assign a total depreciation value to each of the following assets:\n- A 100,000 equipment costing $500,000 with a useful life of 5 years.\n- A 80,000 property costing $1,000,000 and with a useful life of 20 years. \n- A 60,000 vehicle costing $120,000 and with a useful life of 5 years.\n- A 40,000 furniture costing $400,000 and with a useful life of 10 years.\n- A 20,000 land costing $200,000 and with a useful life of 30 years.\nTo answer this question, you need to use straight-line method for depreciation calculation. Write a Python program for this task.\n\n```python\ndef calculate_depreciation(asset_cost, salvage_value, useful_life):\n    net_book_value = asset_cost - salvage_value\n    depreciation_per_year = net_book_value / useful_life\n    return depreciation_per_year / (1 - (1 / 10)) ** 3\n\nprint(calculate_depreciation(500000, 100000, 5))\nprint(calculate_depreciation(1000000, 80000, 20))\nprint(calculate_depreciation(120000, 60000, 5))\nprint(calculate_depreciation(400000, 40000, 10))\nprint(calculate_depreciation(200000, 20000, 30))\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-52",
        "python_solution": "def solution():\n    from scipy.stats import norm\n    mean = 160000\n    standard_deviation = 30000\n    z = (100000 - mean) / standard_deviation\n    # Return probability in percentage\n    return (1 - norm.cdf(-z))*100",
        "ground_truth": 2.275,
        "question": "What is the percentage of return that is below $100,000 if an investment analyst detects that the market's fund returns are normally distributed with an average of $160,000 and a standard deviation of $30,000?",
        "output": [
            "```\n```python\nimport scipy.stats as stats\n    \nmean = 160000 # average fund return\nstd_dev = 30000 # standard deviation of fund returns\n\n# Calculate the z-score for $100,000\nz_score_100k = (100000 - mean) / std_dev\n    \n# Calculate the percentage of return that is below $100,000\npercentage_below_100k = 1 - stats.norm.cdf(z_score_100k)\n\nprint(percentage_below_100k)\n```\n"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-53",
        "python_solution": "def solution():\n    equity = 65\n    position = 100\n    leverage_ratio = position/equity\n    return leverage_ratio",
        "ground_truth": 1.538,
        "question": "What is the maximum leverage ratio linked with a position financed by a 65% minimum margin requirement, if the brokerage firm XYZ has set it?",
        "output": [
            "def positionsize(maxbalance):\n    leverage = 3.0\n    equity = 2*leverage*maxbalance\n    margin = 0.65\n    max_position = equity / 0.65\n    return max_position / leverage\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-54",
        "python_solution": "def solution():\n    Q = 30 - 2*5\n    P = 5\n    elasticity = -2 * (P/Q)\n    return elasticity",
        "ground_truth": -0.5,
        "question": "During a high season for tourism, the need for bottled water can be depicted as: Qbw=30-2Pb (Qbw is the amount of bottled water; Pb is the price of bottled water). If bottled water costs 5, what will the price elasticity of demand be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    Qbw = 30\n    Pb = 5\n    \n    # Define the formula for price elasticity of demand\n    price_elasticity = (Qbw / Pb) ** (-1)\n    \n    # return answer\n    return price_elasticity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.167
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-55",
        "python_solution": "def solution():\n    D1 = 0.32\n    P0 = 14.69\n    f = 0.05\n    g = 0.1\n    cost_of_external_equity = ((D1/(P0*(1-f)))+g)*100\n    return cost_of_external_equity",
        "ground_truth": 12.293,
        "question": "A business plans to issue new ordinary shares with flotation costs of 5.0% per share. They anticipate a dividend of $0.32 the following year and foresee a dividend growth rate of 10% indefinitely. Assuming the shares are released at a price of $14.69, what is the firm's cost (%) of external equity?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    flotation_cost = 0.05\n    dividend_current_year = 0.32\n    dividend_growth_rate = 0.1\n    share_price = 14.69\n    \n    # Calculate the dividends per share in the second year\n    dividend_next_year = (1 + dividend_growth_rate) * dividend_current_year\n    \n    # Calculate the cost of equity\n    cost_of_equity = (share_price * (1 - flotation_cost)) / (dividend_next_year)\n    \n    return cost_of_equity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 39.646
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-56",
        "python_solution": "def solution():\n    annual_management_fee = 0.32\n    round_trip_trading_fees = 0.20\n    bid_offer_spread = 0.10\n    holding_period = 9 / 12\n\n    total_expected_holding_period_cost = (holding_period * annual_management_fee) + round_trip_trading_fees + bid_offer_spread\n    return total_expected_holding_period_cost",
        "ground_truth": 0.54,
        "question": "Robinson is considering adding a new ETF investment to the portfolio. He intends to hold the ETF for nine months. Excluding the effect of compounding, what is the anticipated overall holding period cost of the nine-month investment in the ETF, given that the ETF has these trading expenses and management charges: Annual management fee of 0.32%, Round-trip trading fees of 0.20%, and a Bid–offer spread of 0.10% on buy and sell, as Robinson requests Jones to calculate?",
        "output": [
            "```\n```python\ndef solution():\n    \n    # Define variables name and value\n    management_fee_rate = 0.00032\n    trading_fee_rate = 0.00020\n    bid_offer_spread_rate = 0.00010\n    \n    # Calculate the total fee rate\n    total_fee_rate = management_fee_rate + trading_fee_rate + 2*bid_offer_spread_rate\n    \n    # Calculate the total cost of a one-year investment based on the annual fee rate\n    total_cost = 1 + total_fee_rate\n    \n    # Calculate the cost of a nine-month investment by taking 9/12 of the total annual cost\n    nine_month_cost = total_cost**0.75\n    \n    # Return the nine-month cost as the answer\n    return nine_month_cost\n```\n```python\n```\nThe anticipated overall holding period cost of the nine-month investment in the ETF, excluding any potential capital gains or losses, is approximately 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1.070 = 1"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.001
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-57",
        "python_solution": "def solution():\n    AUM_end_of_year = 602.5\n    high_water_mark = 540\n    management_fee_rate = 0.02\n    previous_assets_value = 515\n    incentive_fee_rate = 0.2\n    hurdle_rate = 0.05\n    \n    management_fee = AUM_end_of_year * management_fee_rate\n    incentive_fee = (AUM_end_of_year - high_water_mark * (1 + hurdle_rate)) * incentive_fee_rate\n    total_fee = management_fee + incentive_fee\n    net_return = (AUM_end_of_year - total_fee) / previous_assets_value - 1\n    return net_return * 100  # it's usually more intuitive to express return rate in percentage.",
        "ground_truth": 13.272,
        "question": "An investment firm implements a \"2 and 20\" fee arrangement, the current value of assets is $515, the management fee is determined by the value of assets at end of the year, a 5% hurdle rate is established prior to the collection of the incentive fee, and the present high-water mark is $540. After a period of one year, the value of the investment firm is $602.5. What is the investor's net return?",
        "output": [
            "```\nThe investor's net return is the return after the management fee and the incentive fee are deducted from the return on the money invested. The management fee is a percentage of the end of the year value of assets, while the incentive fee is a percentage of the return. Since the asset is not used to calculate the fee this year, the high-water mark is $540, and the management fee is 2% of the current year end value ($602.5), which is $12.05. Since the hurdle rate is 5% and the return of the year is 61.7% ($602.5 / $515 – 1), the incentive fee is 56.7% ($315.5, 60.7% - 4%). To gradually add the applied fees, subtract the total fee from the end of year value of assets:\n\nanswer = $602.5 - $12.05 - $315.5 = $675.40\n```python\ndef solution():\n    # Define variables name and value\n    avg_account_receivable = 50000\n    revenue = 600000\n    \n    # Do math calculation to get the answer\n    receivables_turnover = revenue / avg_account_receivable\n    answer = 365 / (receivables_turnover * 10**5)\n    \n    # return answer\n    return answer\n```python\ndef solution():\n    # Define variables name and value\n    current_value_of_assets = 515\n    year_end_value_of_assets = 602.5\n    management_fee_percentage = 2\n    hurdle_rate = 0.05\n    high_water_mark = 540\n    \n    # Calculate the management fee and incentive fee\n    management_fee = year_end_value_of_assets * (management_fee_percentage / 100)\n    incentive_fee = (year_end_value_of_assets / current_value_of_assets - 1) * (365 / 100) * (11 / 20)\n    \n    # Apply the fees\n    net_return = year_end_value_of_assets - (management_fee + incentive_fee)\n    \n    # Calculate the net return\n    return round(net_return, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "| Shares of common stock | 1,000,000 |\n|:----------------------:|:---------:|\n| Net income for the year | $1,500,000 |\n| Par value of convertible bonds with a 4% coupon rate | $10,000,000 |\n| Par value of cumulative preferred stock with a 7% dividend rate | $2,000,000 |\n| Tax rate | 30% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-58",
        "python_solution": "def solution():\n    # given data\n    net_income = 1500000\n    preferred_stock_dividends = 140000\n    outstanding_shares = 1000000\n    bond_interest = 400000\n    bond_conversion_shares = 300000\n\n    # calculate amount available for common shareholders\n    amount_for_common_shareholders = net_income - preferred_stock_dividends\n\n    # calculate the interest add back to net income\n    add_back_to_income = bond_interest * 0.7  # tax rate is 30%, hence considering 70%\n\n    # calculate diluted earnings\n    diluted_earnings = amount_for_common_shareholders + add_back_to_income\n\n    # calculate diluted EPS\n    diluted_eps = diluted_earnings / (outstanding_shares + bond_conversion_shares)\n\n    return diluted_eps",
        "ground_truth": 1.262,
        "question": "Assuming the application of U.S. GAAP unless specified differently, an analyst collected data from a corporation as follows: The bonds were released at par value and are convertible into 300,000 ordinary shares. All securities have been in circulation for the complete year. What is the diluted earnings per share for this corporation?",
        "output": [
            "```\nAs an analyst of this corporation, the total number of weighted-average shares outstanding for the computation of earnings per share would be calculated as follows: 1,000,000 + 300,000 = 1,300,000. The net income would be calculated after 30% tax rate would be applied as following format: (1,500,000 - 0.3 * 1,500,000) = 1,050,000.\nThe answer would be returned as: 1,050,000 / 1,300,000 = 0.8. So, the diluted earnings per share would be $0.8. Please run the following code to arrive at the correct answer:\n\n```python\ndef solution():\n    # Define variables name and value\n    \n    # Do math calculation to get the answer\n    total_revenue = 1500000\n    tax_rate = 30 / 100\n    shares_outstanding = 1000000\n    convertible_bonds_to_shares = 300000\n    \n    net_income = total_revenue * (1 - tax_rate)\n    numerator = net_income - (convertible_bonds_to_shares * 4 * 0.01 * 1000)\n    denominator = shares_outstanding + convertible_bonds_to_shares\n    diluted_eps = numerator / denominator\n    \n    # return answer\n    return diluted_eps\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -8.423
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-59",
        "python_solution": "def solution():\n    initial_investment = 10000\n    return_rate = 15.5/100\n    stock_price_per_share = 24\n    dividend = 2500\n    \n    total_investment = initial_investment * (1 + return_rate)\n\n    total_earnings = (stock_price_per_share * initial_investment) + dividend\n\n    initial_price_per_share = total_earnings / total_investment\n    \n    return initial_price_per_share",
        "ground_truth": 20.996,
        "question": "A year-long investment of 10,000 ordinary stocks from a corporation yielded a return of 15.5%. Just before selling the stocks at $24 each, the investor obtained a dividend of $2,500. What was the cost per stock that the investor initially paid a year ago?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-60",
        "python_solution": "def solution():\n    previous_price = 865.0\n    current_price_short_term = 877.0\n    current_price_long_term = 883.0\n    collateral_rate = 0.60\n    months = 3\n    \n    # Calculating each return\n    price_return = (current_price_short_term - previous_price) / previous_price\n    roll_return = (current_price_short_term - current_price_long_term) / current_price_short_term\n    collateral_return = (months/12) * (collateral_rate/100)\n    \n    # Calculating total return\n    total_return = price_return + roll_return + collateral_return\n    \n    return total_return * 100",
        "ground_truth": 0.853,
        "question": "Smith demonstrates to Harmonica the total return of a recent transaction performed by the Zenith Fund. Smith explains that the Zenith Fund entered a fully collateralized long position in nearby soybean futures contracts at the quoted futures price of 865.0 (US cents/bushel). Three months afterward, the whole futures position was rolled when the short-term futures price was 877.0 and the long-term futures price was 883.0. What is the Zenith Fund’s three-month total return on the soybean futures transaction, factoring in that the collateral earned an annualized rate of 0.60% during the three-month period between when the initial long position was established and the rolling of the contract?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables\n    soybean_futures_price_initial = 865\n    futures_price_after_three_months = 883\n    collateral_rate = 0.60 / 100\n    \n    # Calculate the total return\n    initial_investment = 1\n    collateral_earned = initial_investment * collateral_rate * 3 / 12   # 3 months is 1.25 quarter\n    initial_investment_after_collateral = initial_investment + collateral_earned\n    total_return = (futures_price_after_three_months / soybean_futures_price_initial) * initial_investment_after_collateral - initial_investment\n    \n    # return answer\n    return total_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.022
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-61",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    capitalization_rate = 5.5\n    \n    growth_rate = discount_rate - capitalization_rate\n    return growth_rate",
        "ground_truth": 1.75,
        "question": "If an evaluator gathers the following DCF specifications to estimate the worth of a real estate with constant rate of increase in income and value through DCF technique: The initial capitalization rate is 5.5%, the ending capitalization rate is 6%, and the discount rate is 7.25%. What is the growth rate of the property in question?",
        "output": [
            "```\nThe growth rate of the property can be calculated using the following formula:\n\ngv = r1 + r2 – d\n\nwhere:\ngv = growth rate of the property\nr1 = ending capitalization rate\nr2 = initial capitalization rate\nd = discount rate\n\nLet's calculate the growth rate of the property using the given values.\n```python\ndef solution():\n    # Define variables name and value\n    r1 = 0.06  # ending capitalization rate\n    r2 = 0.055  # initial capitalization rate\n    d = 0.0725  # discount rate\n    \n    # Do math calculation to get the answer\n    gv = r1 + r2 - d\n    \n    # return answer\n    return gv\n```\n"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.042
        }
    },
    {
        "tables": [
            "|                           |                  |\n|---------------------------|------------------|\n|Cost of the equipment      |$5,000,000        |\n|Estimated residual value   |$500,000          |\n|Expected useful life       |9 years           |\n|Total productive capacity  |950,000 units     |\n|Production in FY2015       |150,000 units     |\n|Expected production for the next 8 years |100,000 units each year|"
        ],
        "topic": "Accounting",
        "question_id": "validation-62",
        "python_solution": "def solution():\n    purchase_price = 5000000\n    salvage_value = 500000\n    total_units = 950000\n    units_produced = 150000\n\n    depreciation_expense = (purchase_price - salvage_value) * (units_produced / total_units)\n    return depreciation_expense",
        "ground_truth": 710526.316,
        "question": "Utilizing the units-of-production approach, what would be the depreciation expense in the initial year for a machine purchased in Jan. 2015, as per the corresponding data provided?",
        "output": [
            "```\nIn this program, we need to calculate the depreciation expense for the initial year utilizing the units-of-production method. The units-of-production method calculates depreciation based on the number of units produced or sold during a period. Since the equipment was purchased in January 2015, we will use the production for the first year (FY2015) as the basis for the depreciation calculation.\n\nHere's the Python program to calculate the depreciation expense for the initial year:\n```python\ndef solution():\n    cost_of_equipment = 5000000\n    residual_value = 500000\n    expected_usage_life = 9\n    total_production_capacity = 950000\n    production_in_fy2015 = 150000\n    \n    initial_depreciation = cost_of_equipment - residual_value\n    initial_production = production_in_fy2015\n    \n    depreciation_expense = (initial_depreciation / total_production_capacity) * initial_production\n    \n    return depreciation_expense\n```\nUsing the data provided, the depreciation expense for the initial year would be calculated as $1,000,000."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 710526.316
        }
    },
    {
        "tables": [
            "| Income Statement (in US$ million, except per share data) | 2017 Year End |\n|-----------------------------------------------------|-------------|\n| Total rental income                                 | 450         |\n| Total property expenses                             | 228         |\n| Net operating income                                | 222         |\n| Other expenses (losses on sale of properties)       | 22          |\n| General and administrative expenses                 | 28          |\n| Depreciation and amortization                       | 45          |\n| Net interest expenses                               | 35          |\n| Net income                                          | 92          |\n| Weighted average shares outstanding (million)       | 118         |\n| Earnings per share                                  | 0.78        |\n| Price/FFO, based upon year-end stock price          | 13x         |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-63",
        "python_solution": "def solution():\n    multiple = 13\n    net_income = 92\n    depreciation_and_amortization = 45\n    loss_from_property_disposal = 22\n    shares_outstanding = 118\n    FFO = net_income + depreciation_and_amortization + loss_from_property_disposal\n    FFO_per_share = FFO / shares_outstanding\n    stock_price = multiple * FFO_per_share\n    return stock_price",
        "ground_truth": 17.517,
        "question": "A specialist compiled the financial information for a Real Estate Investment Trust. Using the income statement, what was the Real Estate Investment Trust's share price at the end of 2017 according to the Price / FFO multiple?",
        "output": [
            "---"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-64",
        "python_solution": "def solution():\n    MC = 40\n    ED = 1.5\n    P = MC / (1 - 1/ED)\n    return P",
        "ground_truth": 120.0,
        "question": "Omega Petroleum Corp. is a monopolistic entity experiencing extremely high entry barriers. Its marginal cost is $40 and its average cost is $70. After recent market research, the price elasticity of demand was discovered to be 1.5. What price is the corporation likely to set?",
        "output": [
            "```\n```python\nmarginal_cost = 40\navg_cost = 70\nprice_elasticity = 1.5\n    \n    # Calculate the inverse price elasticity of demand: \n    inverse_price_elasticity = 1 / price_elasticity\n    \n    # Calculate the profit-maximizing price:\n    price = marginal_cost * inverse_price_elasticity\n    return price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-65",
        "python_solution": "def solution():\n    PV = 97\n    Index = 0.01\n    QM = 0.0080\n    FV = 100\n    m = 2\n    r = 0.0168\n    DM = (r * 2 - Index)\n    return DM * 10000",
        "ground_truth": 236.0,
        "question": "A two-year floating-rate bond pays 6-month LPR plus 80 basis points. The bond is valued at 97 for every 100 of face value. The present 6-month LPR is 1.00%. Presume a 30/360 day count standard and equally divided periods. What is the discount margin for the bond in basis points (bps)?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Variable           | Coefficient (bj) | Standard Error | t-Statistic |\n|--------------------|------------------|----------------|-------------|\n| Intercept          | 0.0477           | 0.0019         | 25.11       |\n| Underwriter rank   | 0.0150           | 0.0049         | 3.06        |\n| Pre-offer          | 0.4350           | 0.0202         | 21.53       |\n| price adjustment   |                  |                |             |\n| Offer size         | -0.0009          | 0.0011         | -0.82       |\n| Fraction retained  | 0.0500           | 0.0260         | 1.92        |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-66",
        "python_solution": "def solution():\n    underwriter_rank = 6\n    pre_offer_price_adjustment = 0.04\n    offer_size = 40 \n    fraction_retained = 0.70\n\n    IR = 0.0477 + (0.0150 * underwriter_rank) + (0.435 * pre_offer_price_adjustment) - (0.0009 * offer_size) + (0.05 * fraction_retained)\n    return IR",
        "ground_truth": 0.154,
        "question": "According to previous studies, Smith has chosen the following independent variables to forecast the initial returns of an IPO: Underwriter rank = 1–10, with 10 being the highest rank; Pre-offer price adjustment (Represented as a decimal) = (Offer price – Initial filing price)/Initial filing price; Offer size ($ millions) = Shares sold x Offer price; Fraction retained (Represented as a decimal) = Portion of total company shares kept by insiders Smith's Regression Results Dependent Variable: IPO Initial Return (Represented in Decimal Form, i.e., 1% = 0.01) The forthcoming IPO has these characteristics: underwriter rank = 6; pre-offer price adjustment = 0.04; offer size = $40 million; fraction retained = 0.70. Based on Smith’s regression analysis, what is the anticipated initial return for the forthcoming IPO?",
        "output": [
            "```\nI apologize, but there seems to be a missing Coefficient (bj) for a variable called \"Offer size\". Please provide the necessary information."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-67",
        "python_solution": "def solution():\n    annual_management_fee = 0.40\n    round_trip_commission = 0.55\n    bid_offer_spread = 0.20\n    holding_period = 9 / 12\n    total_cost_percentage = (holding_period * annual_management_fee) + round_trip_commission + bid_offer_spread\n    return total_cost_percentage",
        "ground_truth": 1.05,
        "question": "Without accounting for the compound effects, what is the projected total cost for the holding period when investing in the ETF for nine months, given that the ETF has these trading costs and management fees: an annual management fee of 0.40%, round-trip trading commissions of 0.55%, and a bid-offer spread of 0.20% on buying and selling?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    total_holding_period = 0.75  # in years\n    management_fee_rate = 0.004\n    trading_commission_rate = 0.0055\n    bid_offer_spread_rate = 0.0002\n    \n    # Calculate the total cost of transaction fees\n    transaction_fee = (2 * total_holding_period) * trading_commission_rate + 2 * total_holding_period * bid_offer_spread_rate\n    \n    # Calculate the total cost of management fees\n    management_fee = total_holding_period * management_fee_rate\n    \n    # Calculate the total cost for the holding period\n    total_cost = transaction_fee + management_fee\n    \n    return total_cost\n```\nIn this calculation, `total_holding_period` is the total holding period of the investment, `management_fee_rate` is the annual management fee rate, `trading_commission_rate` is the round-trip trading commission rate, and `bid_offer_spread_rate` is the bid-offer spread rate on buying and selling. The function `solution()` then calculates the total cost of transaction fees, the total cost of management fees, and the total cost for the holding period by adding these two together."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.012
        }
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|-----------|\n| 2008 | 14        |\n| 2009 | -10       |\n| 2010 | -2        |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-68",
        "python_solution": "def solution():\n    return (1+0.14)*(1-0.10)*(1-0.02)-1",
        "ground_truth": 0.005,
        "question": "What is the holding period return for the three-year timeframe, given the following annual rates of return for a mutual fund as reported by a researcher?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Account Item | Amount($ trillions) |\n|---------------|---------------------|\n| Consumption | 20.0 |\n| Capital consumption allowance | 1.9 |\n| Government spending | 4.2 |\n| Imports | 2.2 |\n| Gross private domestic investment | 6.0 |\n| Exports | 1.8 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-69",
        "python_solution": "def solution():\n    Consumption = 20\n    Gross_private_domestic_investment = 6\n    Government_Spending = 4.2\n    Exports = 1.8\n    Imports = 2.2\n    GDP = Consumption + Gross_private_domestic_investment + Government_Spending + Exports - Imports\n    return GDP",
        "ground_truth": 29.8,
        "question": "What is the gross domestic product for country B in 2015, according to the provided data?",
        "output": [
            "```python\ndef solution():\n    consumption = 20.0\n    capital_allowance = 1.9\n    gov_spending = 4.2\n    imports = 2.2\n    inv_funds = 6.0\n    exports = 1.8\n    \n    # Do math calculation to get the answer\n    gdp = consumption + imports + inv_funds + exports - gov_spending - capital_allowance\n    \n    # return answer\n    return gdp\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 23.9
        }
    },
    {
        "tables": [
            "|                   | Stock 1 | Stock 2 |\n|-------------------|---------|---------|\n| Expected return   | 7%      | 10%     |\n| Standard deviation| 12%     | 25%     |\n| Portfolio weights | 0.30    | 0.70    |\n| Correlation       | 0.20    | 0.20    |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-70",
        "python_solution": "def solution():\n    # weights \n    w1 = 0.3\n    w2 = 0.7\n\n    # standard deviations \n    sigma1 = 12\n    sigma2 = 25\n\n    # correlation coefficient \n    rho = 0.2\n\n    # covariance \n    Cov = rho * sigma1 * sigma2\n    \n    # portfolio variance \n    variance = (w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*Cov)\n    \n    # portfolio standard deviation \n    std_dev = variance**0.5\n\n    # converting back to percentage \n    std_dev_percent = std_dev / 100.0\n    \n    return std_dev_percent",
        "ground_truth": 0.186,
        "question": "A portfolio consisting of two shares has the following properties: What is the standard deviation of the returns from this portfolio?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_stock1 = 0.07\n    expected_return_stock2 = 0.10\n    standard_deviation_stock1 = 0.12\n    standard_deviation_stock2 = 0.25\n    portfolio_weight_stock1 = 0.30\n    portfolio_weight_stock2 = 0.70\n    correlation_stock1_stock2 = 0.20\n    \n    # Do math calculation to get the answer\n    portfolio_standard_deviation = ((portfolio_weight_stock1**2) * (standard_deviation_stock1**2) + (portfolio_weight_stock2**2) * (standard_deviation_stock2**2) + 2 * (portfolio_weight_stock1 * portfolio_weight_stock2 * correlation_stock1_stock2)) ** 0.5\n    \n    # return answer\n    return portfolio_standard_deviation\n```\nThe standard deviation of the returns from this portfolio is approximately 14.14%."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.34
        }
    },
    {
        "tables": [
            "| TMT Intangibles Valuation Data | |\n| --- | --- |\n| Working capital balance | $ 22,000,000 |\n| Fair value of fixed assets | $ 57,000,000 |\n| Normalized income to the company | $89,000,000 |\n| Required return on working capital | 6% |\n| Required return on fixed assets | 9% |\n| Required return on intangible assets | 25% |\n| Future growth rate | 7% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-71",
        "python_solution": "def solution():\n    working_capital_return = 0.06*22000000\n    fixed_assets_return = 0.09*57000000\n    intangible_assets_return = 89000000 - working_capital_return - fixed_assets_return\n    intangible_assets_value = intangible_assets_return / (0.25 - 0.07)\n    return intangible_assets_value/1000000",
        "ground_truth": 458.611,
        "question": "The Senior VP of RN fund requests Samuel to estimate the value of intangibles for XYZ Corp. Samuel observes that XYZ Corp's intangibles primarily comprise patents and other intangible assets. Consequently, Samuel forecasts the following data for the next year. Applying the excess earnings method, what is the value of the intangibles?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    working_capital_balance = 22\n    fair_value_fixed_assets = 57\n    normalized_income = 89\n    required_return_working_capital = 0.06\n    required_return_fixed_assets = 0.09\n    required_return_intangible_assets = 0.25\n    future_growth_rate = 0.07\n    \n    # Do math calculation to get the answer\n    intangible_value = normalized_income / (required_return_intangible_assets - required_return_working_capital - required_return_fixed_assets) * (1 + future_growth_rate)\n    \n    # return answer\n    return intangible_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 952.3
        }
    },
    {
        "tables": [
            "|                                            | In Millions ($) |\n|--------------------------------------------|----------------:|\n| Credit sales                               |          40,000 |\n| Cost of goods sold                         |          30,000 |\n| Accounts receivable                        |           3,000 |\n| Inventory-Beginning balance                |           1,500 |\n| Inventory- Ending balance                  |           2,000 |\n| Accounts payable                           |           4,000 |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-72",
        "python_solution": "def solution():\n    inventory_days = ((2000 + 1500)/2)/(30000/365)\n    receivables_days = 3000/(40000/365)\n    operating_cycle = inventory_days + receivables_days\n    purchases = 30000 + 2000 - 1500\n    payables_days = 4000/(purchases/365)\n    net_operating_cycle = operating_cycle - payables_days\n    return net_operating_cycle",
        "ground_truth": 0.798,
        "question": "Considering the provided financial statement information, what is the cash conversion cycle (net operating cycle) of this specific business?",
        "output": [
            "``` can you Please use the variables from the table to complete the answer."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-73",
        "python_solution": "def solution():\n    research_cost = 5e6\n    development_cost = 3e6\n    total_cost = research_cost + development_cost\n    book_value = total_cost - total_cost\n    return book_value",
        "ground_truth": 0.0,
        "question": "In 2013, the U.S.-based tech firm Johnson Enterprises, adhering to U.S. GAAP, invested $5 million in research and $3 million in the creation of a financial software. The company aimed to possess the software copyright for 20 years, with a salvage value of $10,000. What would be the book value of the software copyright at the close of 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    investment = 800000  # $5 million for research and $3 million for creation\n    salvage_value = 10000  # salvage value of the software copyright\n    \n    # Useful life of the software copyright is 20 years\n    useful_life = 20\n    \n    # Calculate the depreciation for 2014\n    depreciation = investment - salvage_value\n    \n    # Calculate the book value for 2014\n    book_value_2014 = investment - depreciation\n    \n    # return answer\n    return book_value_2014\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 10000.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-74",
        "python_solution": "def solution():\n    M = [7, 8, 9, 10]\n    expected_value = sum(M) / len(M)\n    variance = sum((x - expected_value) ** 2 for x in M) / len(M)\n    return variance",
        "ground_truth": 1.25,
        "question": "For a discrete uniform distribution with outcomes for M as: [7, 8, 9, 10], what is the variance of this distribution?",
        "output": [
            "```\nTo find the variance of a discrete uniform distribution, we need to know the range of the distribution and the number of values. For the given distribution M=[7, 8, 9, 10], the range is 10-7=3, and there are 4 values.\n\nThe variance (σ²) of a discrete uniform distribution can be calculated using the formula: \n\nσ² = nR² / 12\n\nwhere n is the number of values (4 in this case) and R is the range of the distribution.\n\nLet's calculate the variance using Python:"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-75",
        "python_solution": "def solution():\n    revenue = 600000\n    avg_account_receivable = 50000\n    receivables_turnover = revenue / avg_account_receivable\n    receivables_collection_period = 365 / receivables_turnover\n    return receivables_collection_period",
        "ground_truth": 30.417,
        "question": "In 2017, ABC Corporation had sales of $600,000 and an average accounts receivables of $50,000. What was the 2017 receivables collection period for this company?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-76",
        "python_solution": "def solution():\n    modified_duration = 11.470\n    yield_to_maturity = 0.06\n    investment_horizon = 8\n    macaulay_duration = modified_duration * (1 + yield_to_maturity)\n    duration_gap = macaulay_duration - investment_horizon\n    return duration_gap",
        "ground_truth": 4.158,
        "question": "When a trader buys an annual coupon bond with a 6% coupon rate and exactly 20 years left until it reaches maturity at a price that's equivalent to par value. The trader's investment duration is eight years. The approximate modified duration of the bond is 11.470 years. What is the duration gap at the moment of procurement?",
        "output": [
            "```perl\n    \n    annual_interest_rate = 0.06\n    years_until_maturity = 20\n    investment_duration = 8\n    modified_duration = 11.470\n    \n    # Do math calculation to get the duration gap\n    duration_gap = years_until_maturity - investment_duration - modified_duration\n    \n    # return answer\n    return duration_gap\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| | | Initial | | Risk- | Contract Price | | |\n|---|---|---|---|---|---|---|---|\n| Price Return | | Roll Return | Collateral Required | Free Rate | Position Size | Current | Longer Term |\n| 4% | | 1.50% | 20% | 1% | $1,500,000 | $750 | $500 |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-77",
        "python_solution": "def solution():\n    price_return = 4.0\n    roll_return = 1.5\n    collateral_return = 0.2\n    total_return = price_return + roll_return + collateral_return\n    return total_return",
        "ground_truth": 5.7,
        "question": "What is the overall return for the hedge position of Platte River Foods?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    price_return = 0.04 \n    roll_return = 0.015 \n    collateral_required = 0.2 \n    free_rate = 0.01 \n    position_size = 1500000 \n    current = 750000 \n    longer_term = 500000 \n    \n    # Calculate the total return\n    longer_term_return = (longer_term - current) / longer_term * 100\n    current_return = (current - position_size) / position_size * 100\n    \n    # Calculate the overall return\n    overall_return = (price_return * position_size) + (roll_return * position_size) + (longer_term_return * position_size) - (collateral_required * position_size * free_rate * 100)\n    \n    # return answer\n    return overall_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -75217500.0
        }
    },
    {
        "tables": [
            "|                    |      |\n|--------------------|------|\n| ABC LA retirement plan information 2018  |      |\n| Current service costs    |  320 |\n| Past service costs   |  150 |\n| Employer contributions  |  1,200 |\n| Benefit obligation at beginning of year |  45,000 |\n| Benefit obligation at end of year   |  48,395 |\n| Plan assets at beginning of year   |  40,800 |\n| Plan assets at end of year |  44,300 |\n| Actuarial loss   |  350 |\n| Actual return on plan assets   |  3,100 |\n| Discount rate on plan liabilities   |  7.5% |\n| Expected rate of return on plan assets   |  8.2% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-78",
        "python_solution": "def solution():\n    current_service_cost = 320\n    interest_expense = (45000 + 150) * 0.075\n    expected_return = 40800 * 0.082\n    periodic_pension_cost = current_service_cost + interest_expense - expected_return\n    return periodic_pension_cost",
        "ground_truth": 360.65,
        "question": "XYZ NY, a home decor purchasing firm, provides a defined benefit pension scheme for its workers. With reference to the details provided in the subsequent table, presuming that there are no write-offs of past service expenses or actuarial losses and if the actuarial loss is disregarded, can you figure out the recurrent pension expenses which would be presented in I/S as per US GAAP?",
        "output": [
            "Past_service_costs = 150\nx1 = 700 # Why is this number 700 not 720\nActual_ROR = 3100\nCurrent_service_costs = 320\nEmployer_contributions = 1200\nPlan_assets_begin = 40800\nPlan_assets_end = 44300\nPlan_liab_begin = 45000\nPlan_liab_end = 48395\nDiscount_rate = 7.5\nExp_ROR = 82\n    \n    # Do math calculation to get the answer\n    Actuarial_loss = 0\n    write_off_pension_asset = 0\n    \n    # line1 = write_off_pension_asset - x1 + (Plan_assets_end-Plan_assets_begin)*(Exp_ROR-Discount_rate)\n    total_asset_inc1 = (Plan_assets_end - Plan_assets_begin) * (Exp_ROR - Discount_rate)\n    total_liab_end_inc = Plan_liab_end - (Plan_liab_begin + Actuarial_loss)\n    \n    Total_expenses = total_asset_inc1 + total_liab_end_inc + Past_service_costs + Current_service_costs\n    recurrent_pension_expenses_gaap = Total_expenses - x1 - Employer_contributions\n    \n    # return answer\n    return recurrent_pension_expenses_gaap\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-79",
        "python_solution": "def solution():\n    delta_TR = 600000 - 500000\n    delta_Q = 250 - 200\n    MR = delta_TR / delta_Q\n    return MR",
        "ground_truth": 2000.0,
        "question": "What is the per unit marginal revenue attributed to marketing 250 units instead of 200 units, based on the assessment of the marketing leader from a manufacturer of niche equipment from Switzerland that posits a total income of CHF500,000 from 200 units and CHF600,000 from selling 250 units?",
        "output": [
            "```python\nmarginal_revenue = 600000 - 500000  # revenue from selling 250 units\nmarginal_revenue / (250 - 200)  # calculate the marginal revenue per unit\n```\n```python\ndef solution():\n    marginal_revenue = 600000 - 500000  # revenue from selling 250 units\n    marginal_revenue_per_unit = marginal_revenue / (250 - 200)  # calculate the marginal revenue per unit\n    return marginal_revenue_per_unit\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Maturity         | At Initiation | Three Months Later | At Maturity |\n|------------------|--------------|---------------------|------------|\n| Spot (USD/EUR)   | 1.3935/1.3983 | 1.4106/1.4210      | 1.4189/1.4289 |\n| 3-month forward  | -8.1/-7.6      | -21.6/-21.0           |          |\n| 6-month forward  | -19.0/-18.3   | -27.0/-26.2           |          |\n| USD Libor       | 1.266%        | 1.266%               | 1.266%   |\n| EUR Libor       | 1.814%        | 1.814%               | 1.814%   |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-80",
        "python_solution": "def solution():\n    num_shares = 200000\n    price_per_share_eur = 90\n    total_value_eur = num_shares * price_per_share_eur\n    \n    init_forward_rate = 1.3935 - 19/10000\n    settling_forward_rate = 1.4210 - 21/10000\n    \n    diff_rate = init_forward_rate - settling_forward_rate\n    \n    notional_value_usd = diff_rate * total_value_eur\n    \n    libor = 1.266 / 100\n    investment_period = 90\n    \n    mark_to_market_usd = notional_value_usd / (1 + libor * investment_period / 360)\n    \n    return mark_to_market_usd",
        "ground_truth": -489849.626,
        "question": "Bradley took over a Spanish packaging firm. The Spanish venture included Bradley purchasing 200,000 shares at a rate of EUR90 each from a packaging company. He elected to entirely hedge the position with a six month USD/EUR forward contract. Further details of the euro hedge at the beginning and three months later are displayed in Exhibit 1. Using the information in Exhibit 1, if the Spanish shares were sold after three months, what is the mark-to-market value (in US dollars) that the manager would report?",
        "output": [
            "```\n\n\n```python\ndef solution():\n    # Define variables name and value\n    shares = 200000\n    share_price = 90\n    spot_rate_initiation = 1.3935\n    spot_rate_threetime = 1.4189\n    USD_Libor = 0.0126\n    EUR_Libor = 0.0181\n    \n    # Do math calculation to get the answer\n    shares_value = shares * share_price\n    initial_hedge = shares_value * spot_rate_initiation\n    three_months_hedge = shares_value * spot_rate_threetime\n    US_value = shares_value * USD_Libor\n    EUR_value = shares_value * EUR_Libor\n    \n    # return answer\n    return (initial_hedge + three_months_hedge + US_value + EUR_value) * (-1) - shares_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -69175800.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-81",
        "python_solution": "def solution():\n    # Given Spot rates\n    s1, s2, s3, s4 = 0.02, 0.025, 0.035, 0.055\n\n    # Formula for two years forward rate\n    forward_rate = (((1 + s4)**4 / (1 + s2)**2) ** (1/2)) - 1\n    \n    # Convert to percentage\n    forward_rate *= 100\n\n    return forward_rate",
        "ground_truth": 8.588,
        "question": "The existing yearly spot rates are presented as follows: 1 year at 2%, 2 years at 2.5%, 3 years at 3.5%, and 4 years at 5.5%. Can you tell me the forward rate for two years starting from two years from now?",
        "output": [
            "```ls\n```python\ndef solution():\n    # Define variables name and value\n    spot_rate_1_year = 0.02\n    spot_rate_2_years = 0.025\n    spot_rate_3_years = 0.035\n    spot_rate_4_years = 0.055\n    \n    # Get time value (t0)\n    t0 = 2\n    \n    # Calculate the forward rate for two years starting from two years from now\n    forward_rate_2_years = (1 + spot_rate_2_years) * (1 + spot_rate_1_year) / (1 + spot_rate_1_year)\n    \n    # return answer\n    return forward_rate_2_years - 1\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.025
        }
    },
    {
        "tables": [
            "| Time-to- Maturity | Spot Rates |\n| --- | --- |\n| 1 year | 8.0% |\n| 2 years | 9.0% |\n| 3 years | 9.5% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-82",
        "python_solution": "def solution():\n    Z1, Z2, Z3, PMT, FV = 0.08, 0.09, 0.095, 10, 100\n    PV1 = PMT / (1 + Z1)\n    PV2 = PMT / (1 + Z2)**2\n    PV3 = (PMT + FV) / (1 + Z3)**3\n    PV = PV1 + PV2 + PV3\n    return PV",
        "ground_truth": 101.458,
        "question": "Assuming the same series of spot rates, what is the cost of a 3-year bond that provides an annual interest payment at a 10% coupon rate?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupons = [0.1, 0.1, 0.1]\n    maturities = [1, 2, 3]\n    spot_rates = [0.08, 0.09, 0.095]\n    \n    # Do math calculation to get the answer\n    present_value = 0\n    for i in range(len(coupons)):\n        present_value += coupons[i] / (1 + spot_rates[i]) ** maturities[i]\n    \n    total_payment = present_value / (1 + 0.1) ** 3\n    principal = total_payment / (1 + 0.1)\n    cost_of_bond = principal * 0.018  # this is based on the 10% lump sum payment\n    \n    # return answer\n    return cost_of_bond\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.003
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-83",
        "python_solution": "def solution():\n    contribution_margin = 20\n    fixed_costs = 500000\n    production_levels = [100000, 200000, 300000]\n    DOLs = []\n\n    for quantity in production_levels:\n        DOL = quantity * contribution_margin / (quantity * contribution_margin - fixed_costs)\n        DOLs.append(DOL)\n\n    minimum_DOL = min(DOLs)\n\n    for i in range(len(DOLs)):\n        if DOLs[i] == minimum_DOL:\n            return production_levels[i]",
        "ground_truth": 300000.0,
        "question": "The unit contribution margin for an item is $20. A business's fixed production costs up to 300,000 units amounts to $500,000. At which production levels (in units) is the degree of operating leverage (DOL) likely to be the least?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables\n    unit_contribution_margin = 20\n    fixed_production_costs = 500000\n    \n    # Calculate the target variable for the degree of operating leverage (DOL)\n    target = (fixed_production_costs / unit_contribution_margin)\n    \n    # Calculate the production levels at which DOL is likely to be the least\n    least_DOL_production_levels = [i for i in range(1, target) if fixed_production_costs + unit_contribution_margin * i + unit_contribution_margin > fixed_production_costs]\n    \n    # return answer\n    return least_DOL_production_levels\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-84",
        "python_solution": "def solution():\n    inventory_in_2014 = 1000\n    cost_per_unit_in_2014 = 60\n    ending_inventory_balance = inventory_in_2014 * cost_per_unit_in_2014\n    return ending_inventory_balance",
        "ground_truth": 60000.0,
        "question": "If the periodic inventory system and FIFO method were utilized, in 2013, Corporation Z commenced operations and acquired 2,000 units of inventory, each unit purchased at $50 and sold at $70, with only 1500 units actually sold. In 2014, it acquired another 1,000 units, each unit was purchased at $60 and sold at $75, however only 500 units were sold. What is the ending inventory balance for Corporation Z in 2014?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_2013 = 2000 * 50\n    revenue_2013 = 1500 * 70\n    cost_2014 = 1000 * 60\n    revenue_2014 = 500 * 75\n    \n    # Calculate ending inventory balance for 2014\n    ending_inventory = cost_2013 + cost_2014 - revenue_2013 - revenue_2014\n    \n    # return answer\n    return ending_inventory\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 17500.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-85",
        "python_solution": "def solution():\n    B0 = 104.00\n    AI0 = 0.17\n    AIT = (120/180 * 0.02/2)\n    FVCI = 0\n    CF = 0.7025\n    Ft = (B0 + AI0 + AIT) / (1 - FVCI)\n    F_eq = Ft / CF\n    return F_eq",
        "ground_truth": 148.294,
        "question": "Johnson's second investment recommendation is to acquire a futures contract for a 10-year Treasury note. The base 2%, semi-annual 10-year Treasury note has a dirty price of 104.17. There have been 30 days since the last coupon payment of the 10-year Treasury note. The futures contract will terminate in 90 days. The quoted price for the futures contract is 129. The current yearly risk-free rate for three months stands at 1.65%. The conversion factor is 0.7025. Smith asks Johnson to compute the quoted futures contract price equilibrium using the carry arbitrage model. What is the equilibrium quoted 10-year Treasury note futures contract price?",
        "output": [
            "```\nAs a financial expert, I will write the Python program to solve this question.\n\n```python\ndef solution():\n    # Define variables name and value\n    currency_per_future = 100\n    dirty_price = 104.17\n    rotation_days = 30\n    maturity_days = 90\n    period = 30/365\n    risk_free_rate_three_months = 0.0165\n    conversion_factor = 0.7025\n    \n    # Calculate the implied carrying cost\n    carry_cost = (period * (currency_per_future * (1 + risk_free_rate_three_months) / 2)) + (rotation_days / 365)\n    \n    # Calculate the carrying cost per futures contract\n    carry_per_future = (currency_per_future * carry_cost)\n    \n    # Calculate the yield on purchasing the futures contract, accounting for accrued coupon payments\n    yield_on_purchase = risk_free_rate_three_months + (carry_per_future / currency_per_future) * (30 / 365)\n    \n    # Calculate the flat yield of the Treasury Note\n    flat_yield_of_treasury = (1 + yield_on_purchase) ** (365 / (90 + rotation_days))\n    \n    # Calculate the futures price equilibrium using the carry arbitrage model\n    futures_price_equilibrium = flat_yield_of_treasury * currency_per_future * conversion_factor\n    \n    # return answer\n    return futures_price_equilibrium\n```\n\nThe equilibrium quoted 10-year Treasury note futures contract price using the carry arbitrage model is approximately 127.008."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 181.646
        }
    },
    {
        "tables": [
            "| Par Value | Bond Price | Coupon | Modified Duration | Effective Duration | Convexity |\n| --------- | ---------- | ------ | ----------------- | ------------------ | --------- |\n| $25million | 105 | 8% | 7.9 | 8 | 122 |\n| $25million | 100 | 7% | 8.5 | 8.5 | 154 |\n| $20million | 95 | 5% | 6.3 | 2 | 87 |\n| $30million | 87 | 0% | 10.2 | 10.2 | 32 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-86",
        "python_solution": "def solution():\n    bond_weights = [0.25, 0.25, 0.2, 0.3]\n    bond_prices = [105, 100, 95, 87]\n    bond_durations = [8, 8.5, 2, 10.2]\n\n    portfolio_price = sum([bond_weights[i] * bond_prices[i] for i in range(len(bond_weights))])\n   \n    portfolio_duration = sum([bond_weights[i] * bond_prices[i] * bond_durations[i] for i in range(len(bond_weights))]) / portfolio_price\n\n    price_value_basis_point = portfolio_duration * 0.0001 * portfolio_price * 1000000\n\n    return price_value_basis_point",
        "ground_truth": 72672.0,
        "question": "According to the table providing necessary details about four bonds in an investment collection, what is the price value of a basis point for this collection?",
        "output": [
            "```python\n    # Take the sum of all prices\n    total_price = 25 + 25 + 20 + 30\n    \n    # Take the sum of all coupons\n    total_coupons = 8 + 7 + 5 + 0\n    \n    # Calculate the price value of a basis point\n    price_value = (total_coupons / total_price) * 100\n    \n    # return answer\n    return price_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-87",
        "python_solution": "def solution():\n    from math import exp\n    face_value = 2000000\n    bond_price = 0.75 * face_value\n    risk_free_rate = 0.03\n    expected_payoff = bond_price * exp(risk_free_rate)\n\n    PD = 1 - (expected_payoff / face_value)\n    \n    return PD * 100",
        "ground_truth": 22.716,
        "question": "Firm XYZ has an outstanding zero-coupon bond with 1 year left until it matures. The bond, which is the company's only debt, has a face value of USD 2,000,000 and a recovery rate of 0% in the event of a default. It is currently trading at 75% of its face value. If we assume that the excess spread solely reflects credit risk and the continuously-compounded risk-free rate is 3% yearly, and using risk-neutral binomial tree methodology, what is the approximately risk-neutral 1-year probability of default for Firm XYZ?",
        "output": [
            "```python\ndef solution():\n    def annualize_swap_rate(swap_rate):\n        # Assuming 252 trading days in a year\n        return swap_rate / 252 * 365\n    discount_rate = 0.03\n    discount_factor = 1 + discount_rate\n    bond_price = 0.75 * 2000000\n    default_probability = (1 - bond_price * discount_factor) / (discount_factor - 1)\n    \n    return default_probability\n```\nThe output of the above program is the risk-neutral 1-year probability of default for Firm XYZ."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -51499966.667
        }
    },
    {
        "tables": [
            "| Number of shares outstanding | 10 million   |\n|-----------------------------|--------------|\n| Earnings per share          | $2.00        |\n| P/E                         | 20           |\n| Book value per share        | $30          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-88",
        "python_solution": "def solution():\n    market_price_per_share = 40\n    shares_to_buy_back = 1e6\n    equity_reduction = market_price_per_share * shares_to_buy_back\n    book_value_equity_before_buyback = 300e6\n    book_value_equity_after_buyback = book_value_equity_before_buyback - equity_reduction\n    no_of_shares_after_buyback = 9e6\n    book_value_per_share_after_buyback = book_value_equity_after_buyback / no_of_shares_after_buyback\n    return book_value_per_share_after_buyback",
        "ground_truth": 28.889,
        "question": "What will be the subsequent book value per share if the corporation buys back 1 million shares at the current market rate, based on the data collected by the researcher about the corporation?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    shares_outstanding_initial = 10000000\n    earnings_per_share = 2.00\n    pe_ratio = 20\n    book_value_per_share = 30\n    shares_bought_back = 1000000\n\n    # Do math calculation to get the new book value per share\n    new_shares_outstanding = shares_outstanding_initial - shares_bought_back\n    new_book_value = (shares_outstanding_initial * book_value_per_share) - (shares_bought_back * book_value_per_share)\n    new_book_value_per_share = new_book_value / new_shares_outstanding\n\n    # return answer\n    return new_book_value_per_share\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 30.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-89",
        "python_solution": "def solution():\n    N = 10 * 12\n    I_Y = 5.8 / 12 / 100\n    PV = 5000000\n    FV = 0\n    PMT = -PV * (I_Y * ((1 + I_Y)**N)) / ((1+I_Y)**N - 1)\n    return abs(PMT)",
        "ground_truth": 55009.405,
        "question": "Recently, Mr. Lee purchased a property in Shanghai and made a down payment of ¥ 5,000,000. He took out a loan for the remaining balance of ¥5,000,000 from the bank which he will repay monthly over a period of 10 years. Given that the yearly discount rate is 5.8%, what will the initial mortgage repayment be at the end of this month?",
        "output": [
            "``` solution\n```python\ndef solution():\n    # Define variables name and value\n    down_payment = 5000000\n    loan_amount = 5000000\n    yearly_discount_rate = 0.058\n    loan_term = 10\n    \n    # Calculate the total interest over the life of the loan\n    total_interest = loan_amount * yearly_discount_rate * (1 + yearly_discount_rate)**loan_term\n    \n    # Calculate the monthly payment\n    monthly_payment = (loan_amount + total_interest) / (loan_term * 12)\n    \n    # return answer\n    return monthly_payment\n```\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 45913.58
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-90",
        "python_solution": "def solution():\n    MRR_March  = 1.55\n    basis_points = 0.65\n    coupon_rate_June = MRR_March + basis_points\n    return coupon_rate_June",
        "ground_truth": 2.2,
        "question": "An organization released a floating-rate note that has a coupon rate equivalent to the three-month MRR + 65 basis points. The interest payments are scheduled for 31 March, 30 June, 30 September, and 31 December. The three-month MRR for 31 March and 30 June stand at 1.55% and 1.35% respectively. What is the coupon rate for the interest remittance done on 30 June?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    mrr_march = 0.0155\n    mrr_june = 0.0135\n    basis_points = 65\n\n    # calculate the coupon rate for 30 June\n    coupon_rate_june = mrr_march + mrr_june / 1000 + basis_points / 1000\n\n    # return answer\n    return coupon_rate_june\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.081
        }
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|-------------------------------|\n| 1        | 30                | 20                            |\n| 2        | 70                | 12                            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-91",
        "python_solution": "def solution():\n    w1 = 0.3\n    w2 = 0.7\n    sigma1 = 20 / 100    # converting the percentage to a decimal\n    sigma2 = 12 / 100    # converting the percentage to a decimal\n    rho12 = 0.40         # correlation of returns between two securities\n\n    sigma_port = ((w1 ** 2 * sigma1 ** 2) + (w2 ** 2 * sigma2 ** 2) + (2 * w1 * w2 * rho12 * sigma1 * sigma2)) ** 0.5\n\n    return sigma_port * 100    # converting the decimal to a percentage",
        "ground_truth": 12.119,
        "question": "What would be the expected standard deviation of the portfolio constructed by a fund manager if the correlation of returns between the two securities is 0.40?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight1 = 0.30\n    weight2 = 0.70\n    std_dev1 = 0.20\n    std_dev2 = 0.12\n    corr = 0.40\n    \n    # Calculate the portfolio's expected standard deviation\n    portfolio_std_dev = ((weight1 * std_dev1)**2 + (weight2 * std_dev2)**2 + 2 * weight1 * weight2 * corr * std_dev1 * std_dev2)**0.5\n    \n    # return answer\n    return portfolio_std_dev\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.121
        }
    },
    {
        "tables": [
            "| Years to maturity | Present Value Factor |\n|-------------------|----------------------|\n| 0.25              | 0.997506             |\n| 0.5               | 0.992556             |\n| 0.75              | 0.985222             |\n| 1                 | 0.975610             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-92",
        "python_solution": "def solution():\n    fixed_rate = 0.03\n    nominal_amount = 100000000\n    current_spot_rates = [0.997506, 0.992556, 0.985222]\n    number_of_days = 90\n    denominator = 360\n\n    value_fixed_leg = fixed_rate * (number_of_days / denominator) * nominal_amount * sum(current_spot_rates) + (nominal_amount * current_spot_rates[-1])\n\n    equity_index_price = value_fixed_leg / nominal_amount * 100\n    return equity_index_price",
        "ground_truth": 100.754,
        "question": "Three months ago, a supervisor initiated a receive-fixed and pay-equity swap. The annualized fixed interest is 3% and the equity index was at 100 at the time of the swap. The expiry of the swap is one year with a quarterly reset, and the nominal amount is valued at $100 million. The present spot rates are as stated: At what equity index level would this equity swap value stand at zero?",
        "output": [
            "```python\n# Define variables name and value\npresent_value_factor = [0.997506, 0.992556, 0.985222, 0.975610]\nyears_to_maturity = [0.25, 0.5, 0.75, 1]\nannual_fixed_interest = 0.03 \nequity_index_initial = 100\nnominal_amount = 1000000000\nsettlement_period = 4  # quarterly\n\n# Calculate present value of the swap\npresent_value = nominal_amount * present_value_factor[settlement_period // 4 - 1]\n\n# Calculate quarterly coupon payments\nquarterly_coupon_payments = present_value * annual_fixed_interest / 4\n\n# Calculate the zero equity index level\nzero_equity_index_level = ((equity_index_initial * present_value * present_value_factor[settlement_period // 4 - 1] * present_value_factor[settlement_period // 4 - 1]) / (present_value - (3 * quarterly_coupon_payments))) / (equity_index_initial * present_value_factor[settlement_period // 4 - 1])\n\n# return answer\nreturn zero_equity_index_level\n```\nThe equation expressing the value of the swap is: swap_value = (equity_index_initial * present_value * present_value_factor[settlement_period // 4 - 1] * present_value_factor[settlement_period // 4 - 1]) / (present_value - (3 * quarterly_coupon_payments)) / (equity_index_initial * present_value_factor[settlement_period // 4 - 1]).\nTo find the level of the equity index at which the swap would be worth zero, we need to solve this equation for the equity index value. This can be done by iterating over possible values of the equity index and checking whether the value of the swap at that index is close to zero.\n```python\ndef solution():\n    for i in range(101):\n        equity_index = i / 100\n        swap_value = (equity_index_initial * present_value * present_value_factor[settlement_period // 4 - 1] * present_value_factor[settlement_period // 4 - 1]) / (present_value - (3 * quarterly_coupon_payments)) / (equity_index_initial * present_value_factor[settlement_period // 4 - 1])\n        if abs(swap_value) < 0"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Market value of debt | $10 million |\n|----------------------|-------------|\n| Market capitalization| $45 million |\n| Cash and short-term investments | $2.5 million |\n| EBITDA | $15 million |\n| Firm's marginal tax rate | 40% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-93",
        "python_solution": "def solution():\n    market_value_common_preferred_stock = 45\n    market_value_debt = 10\n    cash_short_term_investments = 2.5\n    EBITDA = 15\n    enterprise_value = market_value_common_preferred_stock + market_value_debt - cash_short_term_investments\n    EV_EBITDA = enterprise_value / EBITDA\n    return EV_EBITDA",
        "ground_truth": 3.5,
        "question": "A financier looking to calculate the enterprise value multiple (EV/EBITDA) of a business has collected the relevant information, what is the business's EV/EBITDA multiple?",
        "output": [
            "```\nThe Python program to solve the given question should calculate the enterprise value multiple (EV/EBITDA) of the business based on the provided market value of debt ($10 million), market capitalization ($45 million), cash and short-term investments ($2.5 million), EBITDA ($15 million), and the firm's marginal tax rate (40%).\n\nTo calculate the enterprise value (EV), we need to add the market value of debt and market capitalization:\n\nEV = Market value of debt + Market capitalization\nEV = $10 million + $45 million\nEV = $55 million\n\nNext, we need to calculate the net debt, which is the total debt minus the cash and short-term investments:\n\nNet debt = Market value of debt - Cash and short-term investments\nNet debt = $10 million - $2.5 million\nNet debt = $7.5 million\n\nFinally, we can calculate the EV/EBITDA multiple:\n\nEV/EBITDA = EV / EBITDA\nEV/EBITDA = $55 million / $15 million\nEV/EBITDA = 3.67\n\nTherefore, the business's EV/EBITDA multiple is 3.67."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-94",
        "python_solution": "def solution():\n    FV = 5000\n    r = 0.05\n    m = 12\n    N = 3\n    PV = FV * (1 + r/m) ** (-m*N)\n    return PV",
        "ground_truth": 4304.881,
        "question": "What is the present value (PV) of $5,000 that will be received three years from now, applying a 5% discount rate, compounded monthly?",
        "output": [
            "```python\ndef solution():\n    # Define variables\n    pv = 5000  # Present Value\n    discount_rate = 0.05  # Discount Rate\n    periods = 3  # Discount Periods\n    periods_per_year = 12  # Number of compounding periods per year\n\n    # Calculate the present value using the formula: PV = FV / (1 + r)^n\n    pv = 5000 / ((1 + 0.05 / periods_per_year) ** (periods_per_year * periods))\n\n    # return answer\n    return pv\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 4304.881
        }
    },
    {
        "tables": [
            "| Currency Pair (Price/Base) | Bid    | Offer  | Midpoint |\n|----------------------------|--------|--------|----------|\n| JPY/GBP                    | 187.39 | 187.43 | 187.41   |\n| MXN/USD                    | 17.147 | 17.330 | 17.239   |\n| GBP/EUR                    | 0.7342 | 0.7344 | 0.7343   |\n| USD/EUR                    | 1.1572 | 1.1576 | 1.1574   |\n| USD/GBP                    | 1.5762 | 1.5766 | 1.5764   |",
            "|          |                        |\n|----------|------------------------|\n|Exhibit 2. GBP/EUR Forward Rates||\n| Maturity   | Forward Points  |\n| One month  | 4.40/4.55       |\n| Three months| 14.0/15.0      |\n| Six months  | 29.0/30.0       |\n|          | the GBP 90- day Libor = 0.5800%|"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-95",
        "python_solution": "def solution():\n    spot_rate = 0.7344\n    forward_points = 15/10000\n    three_month_forward_rate = spot_rate + forward_points\n    contract_rate = 0.7400\n    eur_amount = 5000000\n    libor_rate = 58/100\n\n    net_cash_flow = eur_amount * (contract_rate - three_month_forward_rate)\n    mark_to_market_gain = net_cash_flow / ((1 + libor_rate/100)**(3/12))\n\n    return mark_to_market_gain",
        "ground_truth": 20470.382,
        "question": "The chief financial officer of a manufacturing firm based in the UK, Susan Sullivan, gathers the exchange rates from Dealer B as given in Exhibit 1. The company will receive EUR 5,000,000 from a different client in three months. Half a year ago, the firm traded EUR 5,000,000 for GBP using a forward contract of nine months at an inclusive price of GBP/EUR 0.7400. Considering Exhibits 1 and 2, what would be the mark-to-market gain for Sullivan's forward position if the position is marked to the market by gathering the GBP/EUR forward rates displayed in Exhibit 2?",
        "output": [
            "```\n```python\n    # Define variables\n    forward_contract_price = 0.7400  # inclusive price for 9 months\n    forward_contract_maturity = 9 # maturity of forward contract in months\n    forward_contract_bid = 0.734  # bid price for GBP/EUR forward contract\n    forward_contract_offer = 0.746  # offer price for GBP/EUR forward contract\n    forward_contract_midpoint = (forward_contract_bid + forward_contract_offer) / 2  # midpoint price for GBP/EUR forward contract\n    forward_contract_valuation = 5 * forward_contract_price  # valuation of the forward contract\n    \n    # Calculate mark-to-market gain\n    mark_to_market_gain = (forward_contract_valuation * forward_contract_midpoint) - forward_contract_valuation\n    \n    # return answer\n    return mark_to_market_gain\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Property subsector          | REIT A Office | REIT B Storage | REIT C Health Care |\n|-----------------------------|---------------|----------------|--------------------|\n| Estimated 12 months cash net operating income (NOI) | $ 350,000    | $ 267,000        | $ 425,000            |\n| Funds from operations (FFO)   | $ 316,965    | $ 290,612        | $ 368,007            |\n| Cash and equivalents         | $ 308,700    | $ 230,850        | $ 341,000            |\n| Accounts receivable         | $ 205,800    | $ 282,150        | $ 279,000            |\n| Debt and other liabilities   | $ 2,014,000  | $ 2,013,500    | $ 2,010,000          |\n| Non-cash rents             | $ 25,991     | $ 24,702        | $ 29,808             |\n| Recurring maintenance-type capital  expenditures | $ 63,769     | $ 60,852        | $ 80,961             |\n| Shares  outstanding        | 56,100       | 67,900          | 72,300              |",
            "| REIT Dividend Forecasts and Average Price Multiples | REIT A   | REIT B   | REIT C   |\n|---------------------------------------------------------------|----------|----------|----------|\n| Expected annual dividend next year                            | $3.80    | $2.25    | $4.00    |\n| Dividend growth rate in years 2 and 3                         | 4.00%    | 5.00%    | 4.50%    |\n| Dividend growth rate (after year 3 into perpetuity)           | 3.50%    | 4.50%    | 4.00%    |\n| Assumed cap rate                                              | 7.00%    | 6.25%    | 6.50%    |\n| Property subsector average P/FFO multiple                     | 14.4x    | 13.5x    | 15.1x    |\n| Property subsector average P/AFFO multiple                    | 18.3x    | 17.1x    | 18.9x    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-96",
        "python_solution": "def solution():\n    FFO = 316965\n    non_cash_rents = 25991\n    recurring_maintenance_capex = 63769\n    shares_outstanding = 56100\n    P_AFFO_multiple = 18.3\n\n    AFFO = FFO - non_cash_rents - recurring_maintenance_capex\n    AFFO_per_share = AFFO / shares_outstanding\n    share_value = AFFO_per_share * P_AFFO_multiple\n\n    return share_value",
        "ground_truth": 74.115,
        "question": "What is the share value of REIT B using valuation Method 4, according to Exhibits 1 and 2?",
        "output": [
            "``` \n\nStep 1: Identify the necessary data from the table \n- Expected annual dividend next year: $2.25\n- Dividend growth rate in years 2 and 3: 5.00%\n- Dividend growth rate (after year 3 into perpetuity): 4.50%\n- Assumed Cap Rate: 6.25%\n\nStep 2: Use the dividend discount model formula to calculate the share value:\n```python\ndef solution():\n    # Define variables name and value\n    expected_annual_dividend_next_year = 2.25\n    dividend_growth_rate_years_2_3 = 0.05\n    dividend_growth_rate_perpetuity = 0.045\n    cap_rate = 0.0625\n    \n    # Calculate share value using dividend discount model formula\n    share_value = expected_annual_dividend_next_year / (cap_rate - dividend_growth_rate_years_2_3)\n    \n    # return answer\n    return share_value\n```\n\nPlease note that this program assumes the data provided for REIT B stays constant for perpetuity after year 3. If that is not the case, the calculation would need to be adjusted accordingly."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 180.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-97",
        "python_solution": "def solution():\n    A_net_income = 750000\n    A_equity = 10000000\n    B_net_income = A_net_income - 150000 # B company has larger expense, hence the lower net income\n    B_equity = A_equity - 150000 # B company has lower net income, hence the lower equity\n    B_ROE = B_net_income / B_equity\n    return B_ROE * 100",
        "ground_truth": 6.091,
        "question": "Firms A and B start the year with the same book value of equity and identical tax rate. They have identical operations throughout the year and record all operations similarly except for one. Both firms purchase a printer worth £300,000 with a three-year useful life and no salvage value on 1st January of the new year. Firm A capitalizes the printer and it undergoes straight-line depreciation, while Firm B expenses the printer. The following year-end data is collected for Firm A. Based on this information, what would Firm B’s return on equity be using year-end equity with the ending shareholders’ equity being £10,000,000, a tax rate of 25%, £0.00 in dividends, and a net income of £750,000?",
        "output": [
            "```\nHere's how you can approach the problem using Python:\n\nFirst, calculate the depreciation expense for Firm A with the straight-line method. The formula for straight-line depreciation is: Depreciation = (cost - salvage value) / useful life.\n\nDepreciation for Firm A for the first year would be: (300,000 - 0) / 3 = 100,000.\n\nSo, the depreciation for Firm A for the first year is 100,000. The adjusted depreciation for the first year after tax would be: Depreciation * (1 - tax rate).\n\nNext, calculate the depreciation for Firm B for one year, which is the cost of the printer, which is 300,000.\n\nNow, calculate the total expenses and total revenues for both firms for the given year, and then find the net income for each firm. The return on equity (ROE) formula is: Net income / Equity.\n\nUsing the data given, the net income for Firm A is £750,000 and the equity at the end of the year is £10,000,000.\n\nFor Firm B, the net income is 0 and the equity at the end of the year is also £10,000,000.\n\nFinally, calculate the return on equity (ROE) for each firm. The answer would be:\n```python\ndef solution():\n    # Define variables name and value\n    cost_of_printer = 300000\n    tax_rate = 0.25\n    net_income_A = 750000\n    equity_end_A = 10000000\n    equity_end_B = 10000000\n    \n    # Calculate depreciation expense for Firm A\n    salvage_value = 0\n    useful_life = 3\n    depreciation_A = (cost_of_printer - salvage_value) / useful_life\n    depreciation_A_after_tax = depreciation_A * (1 - tax_rate)\n    \n    # Calculate total expenses for the year for Firm A\n    total_expenses_A = (cost_of_printer + depreciation_A_after_tax)\n    \n    # Adjusted net income for Firm A\n    adjusted_net_income_A = net_income_A + total_expenses_A\n    \n    # Return on equity for Firm A\n    roe_A = adjusted_net_income_A"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-98",
        "python_solution": "def solution():\n    import math\n    \n    S = 85  # The stock is currently trading at\n    K = 90  # The strike price of the option\n    r = 5/100  # Interest rate\n    c = 10  # Price of a call option\n    p = 15  # Price of a put option\n    tau = 5  # time to maturity (in years)\n\n    S_tau = c - p + K * math.exp(-r * tau)  # From put-call parity\n    y = -1/tau * math.log(S_tau / S)  # Dividend yield\n\n    return y*100  # convert it to percentage and return",
        "ground_truth": 5.337,
        "question": "As an arbitrage trader, Bob wishes to determine the continuous implied dividend yield of a stock. He is studying the over-the-counter price of a five-year European put and call on this particular stock. The data he has includes: S = $85, K = $90, r = 5%, c = $10, p = $15. What would be the implied dividend yield of the stock?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    S = 85\n    K = 90\n    r = 0.05\n    c = 10\n    p = 15\n    \n    # Calculate N(d1) and N(d2)\n    d1 = (np.log(S/K) + (c + p + r) * 5) / (0.5 * (p - c))\n    d2 = d1 - (p - c)\n    \n    # Calculate implied dividend yield\n    dividend_yield = (c - p) / S\n    \n    # Print the result\n    return dividend_yield\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-99",
        "python_solution": "def solution():\n    modified_duration = 6.0\n    delta_spread = -0.01\n    convexity = 55.0\n\n    return_impact = -(modified_duration * delta_spread) + 0.5 * convexity * (delta_spread**2)\n    return return_impact*100",
        "ground_truth": 6.275,
        "question": "The Novartis Company noted a notable rise in its profitability, which led to a material increase in its credit score. Consequently, the market demanded a 100 basis point tighter spread to Gilts on Novartis's 8-year bond. In case the bond's altered duration is 6.0 and its convexity is 55.0, what would be the effect of this change on the return?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_spread_change = 100\n    bond_duration = 6\n    bond_convexity = 55\n    \n    # Do math calculation to get the answer\n    new_spread = bond_spread_change / (bond_duration * bond_convexity)\n    \n    # return answer\n    return new_spread\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.303
        }
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot Rate |\n|------------------|-----------|\n| 1 year           | 4.86%     |\n| 2 years          | 4.95%     |\n| 3 years          | 5.65%     |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-100",
        "python_solution": "def solution():\n    PMT = 5\n    FV = 100\n    S1 = 0.0486\n    S2 = 0.0495\n    S3 = 0.0565\n    Z = 0.0234\n\n    PV1 = PMT / ((1 + S1 + Z)**1)\n    PV2 = PMT / ((1 + S2 + Z)**2)\n    PV3 = (PMT + FV) / ((1 + S3 + Z)**3)\n\n    return PV1 + PV2 + PV3",
        "ground_truth": 92.383,
        "question": "A company debt security provides a coupon rate of 5% and only has 3 years left until it matures. The interest is given yearly. The benchmark spot curve currently lists a series of rates. Right now, the bond is trading at a Z-spread of 234 basis points. What's the bond's worth?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    bond_coupon_rate = 0.05\n    spot_rate_year_1 = 0.0486\n    spot_rate_year_2 = 0.0495\n    spot_rate_year_3 = 0.0565\n    z_spread = 0.0234\n    \n    # compute bond price\n    PV = 0 # present value of future cashflows\n    for i in range(3):\n        PV += spot_rate_year_(i + 1) * (1 + bond_coupon_rate - spot_rate_year_(i + 1)) ** (i)\n    PV = PV - (1 - (1 + bond_coupon_rate - z_spread) ** 3) / bond_coupon_rate\n    \n    return PV\n```\n"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-101",
        "python_solution": "def solution():\n    beta = 0.65\n    risk_free_rate = 0.03\n    expected_market_return = 0.09\n\n    expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n    return expected_return",
        "ground_truth": 0.069,
        "question": "What is the expected return for XYZ Company if its stock has a beta of 0.65, the risk-free rate of return is 3% and the expected market return is 9%?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    stock_bet = 0.65\n    risk_free_rate = 0.03\n    market_return = 0.09\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + stock_bet * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.069
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-102",
        "python_solution": "def solution():\n    MD = 10.3829\n    Convexity = 141.217\n    Delta_Yield= -0.005\n    Percentage_change_in_bond_price = ((-MD*Delta_Yield)+(0.5*Convexity*(Delta_Yield)**2))  \n    return Percentage_change_in_bond_price*100",
        "ground_truth": 5.368,
        "question": "A researcher collects the following data on a bond: Roughly modified duration 10.3829 and roughly modified convexity 141.217. What is the projected percentage price alteration for the bond should the yield to maturity fall by 50 bps?",
        "output": [
            "```python\n    modified_duration = 10.3829\n    modified_convexity = 141.217\n    yield_to_maturity = 50\n    \n    # Calculate the percentage price change\n    price_change = (-0.0001 * modified_duration * yield_to_maturity) + (modified_convexity * (yield_to_maturity ** 2) / 2)\n    \n    # Return the percentage price change\n    return price_change * 100\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-103",
        "python_solution": "def solution():\n    FV = 10000000\n    PMT = 400000\n    N = 10\n    I_YR = 6.825/100\n    PV = FV / ((1 + I_YR)**N)\n    Equity = 1.2 * 1000000 * 10\n    to_be_raised = 7.5 * 1000000\n    bonds = to_be_raised * 0.4\n    rd = 0.16\n    t = 0.3\n    re = 0.03 + 2.2 * (0.10 - 0.03)\n    rdnt = rd * (1 - t)\n    WACC = 0.4 * rdnt + 0.6 * re\n    return WACC*100",
        "ground_truth": 15.52,
        "question": "Currently, Serene Vacation Corp has 1.2 million common shares of stock outstanding with a beta of 2.2. They also have $10 million face value of bonds with five years left to maturity and an 8% coupon with semiannual payments, priced to yield 13.65%. If Serene issues up to $2.5 million of new bonds, they will be priced at par and will have a yield of 13.65%; but if they issue bonds beyond $2.5 million, the entire issuance is expected to yield 16%. Serene has found out it can issue new common stock at $10 a share. The current risk-free interest rate is 3%, and the expected market return is 10%. Serene's marginal tax rate is 30%. If Serene secures $7.5 million of new funding while keeping the same debt-to-equity ratio, what will its weighted average cost of capital be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    beta = 2.2\n    face_value = 10000000\n    maturity = 5\n    coupon_rate = 0.08\n    yield_13_65 = 0.1365\n    yield_16 = 0.16\n    new_issuance_25 = 2500000\n    new_issuance_50 = 5000000\n    new_stock_price = 10\n    bond_issuance = 7500000\n    new_stock_issuance = 12000000\n    debt_to_equity_ratio = 1\n    weighted_avg_cost_of_capital = 0\n    e = 0.10\n    risk_free_rate = 0.03\n    tax_rate = 0.3\n    \n    # Calculate weighted average cost of capital\n    weighted_avg_cost_of_capital = (beta * (yield_13_65 * 2 * (1 + coupon_rate) ** maturity - (new_issuance_50 - face_value) * yield_16)) / (new_stock_issuance - new_stock_issuance * tax_rate) + (face_value + mat"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Time-to-Maturity | Spot rates |\n|-----------------|------------|\n| 1-year            | 7%             |\n| 2-year            | 8%             |\n| 3-year            | 9%             |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-104",
        "python_solution": "def solution():\n    PMT = 8\n    Par = 100\n    S1 = 0.07\n    S2 = 0.08\n    S3 = 0.09\n    PV = PMT/(1+S1) + PMT/((1+S2)**2) + (PMT+Par)/((1+S3)**3)\n    return PV",
        "ground_truth": 97.731,
        "question": "The time-to-maturity for Bond D is 3 years and it has a coupon rate of 8%. The annual payments of interest can be seen. Given the depicted spot rates, what would be the price of Bond D using these spot rates?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    coupons = 8\n    time_to_maturity = 3\n    spot_rate_1yr = 0.07\n    spot_rate_2yr = 0.08\n    spot_rate_3yr = 0.09\n    \n    # Calculate the present value of the coupons\n    present_value_coupons = coupons / spot_rate_1yr + (coupons / spot_rate_2yr) + (coupons / spot_rate_3yr)\n    \n    # Calculate the present value of the principal\n    present_value_principal = 1000 / (1 + spot_rate_3yr) + (1000 / (1 + spot_rate_3yr))**2\n    \n    # Calculate the total present value of the bond\n    total_present_value = present_value_coupons + present_value_principal\n    \n    # Return the total present value\n    return total_present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 842900.599
        }
    },
    {
        "tables": [
            "|                          | Golden | Frost |\n|--------------------------|--------|-------|\n| Revenue                  | 380    | 460   |\n| Cost of goods sold       | (320)  | (210) |\n| Administrative expenses  | (110)  | (65)  |\n| Depreciation & amortization expense | (106)  | (85)  |\n| Interest expense         | (36)  | (18)   |\n| Income before            | 308    | 82    |\n| Income tax expense       | (125)  | (29)  |\n| Net income               | 183    | 53    |",
            "|                             | Golden | Frost |\n|-----------------------------|--------|-------|\n| Cash                        | 80     | 60    |\n| Account receivable          | 110    | 90    |\n| Inventory                   | 210    | 130   |\n| Total current assets        | 400    | 280   |\n| PP&E                        | 1220   | 770   |\n| Investment in Frost         | 360    | N/A   |\n| Total assets                | 1,980  | 1,050 |\n| Current liabilities         | 130    | 95    |\n| Long-term debt              | 520    | 390   |\n| Total liabilities           | 650    | 485   |\n| Common stock                | 810    | 500   |\n| Retained earnings           | 520    | 65    |\n| Total equity                | 1,330  | 565   |"
        ],
        "topic": "Accounting",
        "question_id": "validation-105",
        "python_solution": "def solution():\n    unrecorded_licenses_value = 155\n    lifetime_of_unrecorded_licenses = 5\n    depreciation_of_unrecorded_licenses = unrecorded_licenses_value / lifetime_of_unrecorded_licenses\n    depreciation_and_amortization_of_Clearwater = 106\n    depreciation_and_amortization_of_Snowflake = 85\n    consolidated_depreciation_and_amortization = depreciation_and_amortization_of_Clearwater + depreciation_and_amortization_of_Snowflake + depreciation_of_unrecorded_licenses\n    return consolidated_depreciation_and_amortization",
        "ground_truth": 222.0,
        "question": "Working at the Equity investment company, Jessica, a CFA, noted that Clearwater Primary School had spent ¥360 million to acquire a 50 percent stake in Snowflake Early Learning Center on 31 December 2018. The surplus of the acquisition cost over the net assets' fair value of Snowflake was due to previously unregistered licenses. These licenses were estimated to possess an economic lifespan of five years. The value of Snowflake's assets and liabilities, excluding licenses, were equivalent to their documented book value. Clearwater and Snowflake's summarized income statements for the year ending 31 December 2018, and Balance Sheet are presented in the subsequent table: Assuming that both companies' 2019 figures mirror those of 2018 and Clearwater has command over Snowflake, what would be Clearwater’s consolidated depreciation and amortization expense for 2019?",
        "output": [
            "```\nTo solve this question, we can use the provided data from the table and calculate the depreciation and amortization expense for Clearwater's 2019 consolidated statement.\n\nHere is the Python program to calculate the consolidated depreciation and amortization expense for Clearwater's 2018 consolidated statement:\n\n```python\ndef solution():\n    # Define variables name and value\n    revenue = 460\n    income_before_tax = 82\n    net_income = 53\n    investment_in_snowflake = 360\n    depreciation_snowflake = 106\n    tax_expense = 29\n    cash = 60\n    receivables = 90\n    inventory = 130\n    total_current_assets = 280\n    pp_e = 770\n    total_assets = 1050\n    current_liabilities = 95\n    long_term_debt = 390\n    total_liabilities = 485\n    common_stock = 500\n    retained_earnings = 65\n    total_equity = 565\n    \n    # Calculate net assets\n    net_assets = total_assets - total_liabilities\n    \n    # Calculate accumulated amortization expense for licenses\n    license_amortization = net_assets * (investment_in_snowflake - depreciation_snowflake) / 5\n    \n    # Calculate total depreciation and amortization expense\n    depreciation_amortization = depreciation_snowflake + license_amortization\n    \n    # Calculate net income after taxes\n    net_income_after_tax = net_income + tax_expense\n    \n    # Calculate EBITDA\n    ebitda = net_income_after_tax + depreciation_amortization\n    \n    # Calculate cash at the end of 2019\n    ebitda_minus_cash = ebitda - cash\n    \n    # Calculate net working capital\n    net_working_capital = total_current_assets - current_liabilities\n    \n    # Calculate net fixed assets\n    net_fixed_assets = total_assets - total_current_assets\n    \n    # Calculate net disposable cash flow\n    net_disposable_cash_flow = ebitda_minus_cash - net_working_capital\n    \n    # Calculate investment_{Snowflake}\n    investment_snowflake = net_disposable_cash_flow - net_fixed_assets - net_income_after_tax + investment_in_snowflake"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|                  | Value  |\n|------------------|--------|\n| Initial Value    | 87.1876|\n| 2-year shift for 1bp    | 87.3212|\n| 5-year shift for 1bp    | 87.2545|\n| 10-year shift for 1bp   | 87.1454|\n| 30-year shift for 1bp   | 87.3454|"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-106",
        "python_solution": "def solution():\n    ten_year_shift_for_1_bp = 87.1454\n    initial_value = 87.1876\n    key_rate_01_for_10_year_shift = -(ten_year_shift_for_1_bp - initial_value)\n    return key_rate_01_for_10_year_shift",
        "ground_truth": 0.042,
        "question": "The table below provides details about a zero-coupon bond. What is the key rate '01 for a shift of 10 years?",
        "output": [
            "```python\n    shifts = {\n        '2-year': 87.3212,\n        '5-year': 87.2545,\n        '10-year': 87.1454,\n        '30-year': 87.3454\n    }\n    \n    # Calculate the key rate '01 for 10-year shift\n    key_rate_01 = [(shift - 87.1876) / 1.871876 for shift in shifts.values()]\n    key_rate_01_10_year = key_rate_01[2]\n    \n    # return answer\n    return key_rate_01_10_year\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-107",
        "python_solution": "def solution():\n    P_A = 0.20 # probability of failure\n    P_B = 0.70 # probability of a \"good\" rating\n    P_B_A = 0.50 # probability of a \"good\" rating given failure\n\n    P_A_B = (P_B_A * P_A) / P_B # probability of failure given a \"good\" rating\n\n    return P_A_B",
        "ground_truth": 0.143,
        "question": "A financial expert predicts that 20% of high-risk bonds will go bankrupt. When he uses a bankruptcy prediction model, he finds that 70% of these bonds will be deemed as \"good\", suggesting a lower risk of failure. Of the bonds that went bankrupt, only 50% were rated as \"good\". Use Bayes' formula to estimate the likelihood of going bankrupt bearing a \"good\" rating. (Hint, let P(A) be the likelihood of bankruptcy, P(B) be the probability of a \"good\" rating, P(B | A) be the probability of a \"good\" rating given bankruptcy, and P(A | B) be the likelihood of bankruptcy given a \"good\" rating.)",
        "output": [
            "```\nIn the given problem, we have four probabilities:\n```\nP(A) = Probability of bankruptcy\nP(B) = Probability of a \"good\" rating\nP(B | A) = Probability of a \"good\" rating given bankruptcy\nP(A | B) = Probability of bankruptcy given a \"good\" rating\n```\n\nWe need to calculate `P(A | B)`.\nWe can use Bayes' formula to find:\n```\nP(A | B) = P(B | A) * P(A) / P(B)\n```\n\nwhere `P(B)` is the probability of a \"good\" rating, which is 0.7.\n\n`P(A | B)` is the probability of bankruptcy given a \"good\" rating, and we want to find this.\n\nSince 50% of the bonds that went bankrupt were rated as \"good\", we can deduce that 50% of the bonds that were rated \"good\" went bankrupt. This gives us `P(B | A) = 0.5`.\n\nUsing these values, we can substitute them into Bayes' formula and solve for `P(A | B)`:\n```\nP(A | B) = P(B | A) * P(A) / P(B)\n        = 0.5 * P(A) / 0.7\n```\n\nWe can simplify this to:\n```\nP(A | B) = 5 * P(A) / 7\n```\n\nFinally, we can substitute in the given probabilities we know:\n```\nP(A | B) = 5 * (0.2) / 0.7\n```\n\nLet's calculate this in Python:"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-108",
        "python_solution": "def solution():\n    FV = 100000\n    r = 0.025\n    m = 52\n    N = 1\n    PV = FV * (1 + r/m) ** (-m*N)\n    return int(PV)",
        "ground_truth": 97531.0,
        "question": "If a customer needs £100,000 a year from now and the declared yearly rate is 2.50% compounded on a weekly basis, what amount should be deposited today?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    amount_needed = 100000\n    rate = 0.0250\n    n_years = 1\n    n_compounds = 52\n    \n    # Do math calculation to get answer\n    amount_to_deposit = amount_needed / ((1 + rate / n_compounds) ** (n_compounds * n_years))\n    \n    # return answer\n    return amount_to_deposit\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 97531.577
        }
    },
    {
        "tables": [
            "|      | 31 December 2017 | 31 December 2016 |\n|------|------------------|------------------|\n| EPS  | $1.03            | $0.89            |\n| Core EPS* | $1.31       | $1.01            |",
            "\n|                                                                                               |\n|------------------------------------------------------------------------------------------------|\n| Core EPS is a non-GAAP measure that excludes acquisition charges of                           |\n| $0.18 and $0.12 in 2017 and 2016, respectively, as well as $0.10 in 2017                      |\n| related to the settlement of a lawsuit.                                                       |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-109",
        "python_solution": "def solution():\n    stock_price = 11.31\n    recurring_eps = 1.03 + 0.10\n    trailing_pe = stock_price / recurring_eps\n    return trailing_pe",
        "ground_truth": 10.009,
        "question": "Based on Exhibit 1 and Zhang's beliefs about recurring costs, what is the trailing P/E she calculated for Cratt Ltd?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    Core_EPS_2017 = 1.31\n    Core_EPS_2016 = 1.01\n    EPS_2017 = 1.03\n    EPS_2016 = 0.89\n    \n    # Do math calculation to get the answer\n    trailing_P/E = (Core_EPS_2017 - Core_EPS_2016) / (EPS_2017 - EPS_2016)\n    \n    # return answer\n    return trailing_P/E\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "\n|   |   | 2018 |   | 2017 |\n|---|---|------|---|------|\n|   |   |      |   |      |\n| Assets  |   |      |   |      |\n| Current assets |   |      |   |      |\n| Accounts receivable |   | 800  |   | 750  |\n| Inventories |   | 850  |   | 720  |\n| Gross fixed assets |   | 5000 |   | 4250 |\n| Accounts payable |   | $400  |   | $300 |\n| Accrued taxes and expenses  |  | 120  |   | 90  |\n| Notes payable  |  | 550  |   | 500  |\n| Long-term debt  |  | 1,500  |   | 1,400  |\n| Income Statement for the Year Ended 31 December 2018 |   |      |   |      |\n| EBITDA  |  |    |   | 2000 |\n| Depreciation expense  |   |    |   | 400 |\n| EBIT  |  |    |   | 1600 |\n| Interest expense  |  |    |   | 350 |\n| Pretax income  |  |    |   | 1250 |\n| Income tax (at 30 percent)  |  |    |   | 375 |\n| Net income  |   |    |   | $875 |\n"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-110",
        "python_solution": "def solution():\n    NI = 875 \n    NCC = 400 \n    FCInv = 750 \n    WCInv = 50 \n    Net_borrowing = 150 \n\n    FCFE = NI + NCC - FCInv - WCInv + Net_borrowing\n    return FCFE",
        "ground_truth": 625.0,
        "question": "Given the 2017 and 2018 financial reports provided by the firm, how does Jacques assess the Free Cash Flow to Equity (FCFE) of PZ Inc. for 2018, measured in millions?",
        "output": [
            "```\nHere's the completed code:\n```python\ndef solution():\n    # Define variables name and value\n    current_assets_2018 = 800\n    current_assets_2017 = 750\n    \n    inventories_2018 = 850\n    inventories_2017 = 720\n    \n    gross_fixed_assets_2018  = 5000\n    gross_fixed_assets_2017 = 4250\n    \n    accounts_payable_2018 = 400\n    accounts_payable_2017 = 300\n    \n    accrued_taxes_expenses_2018 = 120\n    accrued_taxes_expenses_2017 = 90\n    \n    notes_payable_2018 = 550\n    notes_payable_2017 = 500\n    \n    long_term_debt_2018 = 1500\n    long_term_debt_2017 = 1400\n    \n    ebitda_2018 = 0\n    ebitda_2017 = 2000\n    \n    depreciation_expense_2018 = 0\n    depreciation_expense_2017 = 400\n    \n    net_income_2018 = 875\n    net_income_2017 = 1250\n    \n    tax_rate = 0.3\n    \n    # Convert all the annual numbers to millions\n    current_assets_2018 *= 1000\n    current_assets_2017 *= 1000\n    \n    inventories_2018 *= 1000\n    inventories_2017 *= 1000\n    \n    gross_fixed_assets_2018 *= 1000\n    gross_fixed_assets_2017 *= 1000\n    \n    accounts_payable_2018 *= 1000\n    accounts_payable_2017 *= 1000\n    \n    accrued_taxes_expenses_2018 *= 1000\n    accrued_taxes_expenses_2017 *= 1000\n    \n    notes_payable_2018 *= 1000\n    notes_payable_2017 *= 1000\n    \n    long_term_debt_2018 *= 1000\n    long_term_debt_2017 *= 1000\n    \n    \n    net_income_2018 /= 1000\n    net_income_2017 /= 1000\n    \n    # Calculate total current assets\n    total_current_assets_2018 = current_assets_2018 + invent"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-111",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 600000\n    stock_allocation_goal = 0.3\n    human_capital_stock_pct = 0.25\n\n    total_portfolio = human_capital + financial_capital\n    target_stock_percentage = total_portfolio * stock_allocation_goal\n\n    human_capital_stock_alloc = human_capital * human_capital_stock_pct\n\n    financial_capital_stock_alloc = target_stock_percentage - human_capital_stock_alloc\n\n    return financial_capital_stock_alloc",
        "ground_truth": 240000.0,
        "question": "The investment manager, Allen, recently took on a new client named Peter. Peter has two primary assets: human capital ($1,200,000) and financial capital ($600,000). He wishes for his total portfolio to have a 30% allocation to stocks. Assuming that human capital is considered to be 25% similar to stocks, what should be the appropriate equity allocation for Peter's financial capital?",
        "output": [
            "```python\ndef solution():\n    total_assets = 1800000\n    stock_allocation = 0.3\n    human_capital = 1200000\n    non_stock_allocation = total_assets * (1 - stock_allocation)\n    \n    # Calculate the allocation for financial capital\n    financial_capital = total_assets - human_capital\n    equity_allocation = financial_capital * (stock_allocation / (1 - non_stock_allocation))\n    \n    # return answer\n    return equity_allocation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.143
        }
    },
    {
        "tables": [
            "| ($ thousands)             |       | 2014 | 2013 |\n|---------------------------|-------|------|------|\n| Sales                     |       | 2125 | 2003 |\n| End of year inventories (LIFO) |       | 312  | 280  |\n| LIFO reserve              |       | 82   | 64   |\n| Net profit margin         |       | 4.9% | 4.0% |"
        ],
        "topic": "Accounting",
        "question_id": "validation-112",
        "python_solution": "def solution():\n    net_profit_margin = 0.049\n    sales = 2125\n    tax_rate = 0.3\n    lifo_reserve_2014 = 82\n    lifo_reserve_2013 = 64\n\n    net_income_lifo = net_profit_margin * sales\n    change_in_lifo_reserve = lifo_reserve_2014 - lifo_reserve_2013\n    net_income_fifo = net_income_lifo + change_in_lifo_reserve * (1 - tax_rate)\n\n    increase_in_net_income = net_income_fifo - net_income_lifo\n\n    return increase_in_net_income",
        "ground_truth": 12.6,
        "question": "If a corporation switches from last-in, first-out (LIFO) to first-in, first-out (FIFO), how much higher would the net income (in $ thousands) for 2014 be, considering that the corporate tax rate for the current and all previous years has been 30% according to the data collected by a data analyst?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    sales_2014 = 2125\n    end_of_year_inventories_2014 = 312\n    lifo_reserve_2014 = 82\n    \n    sales_2013 = 2003\n    end_of_year_inventories_2013 = 280\n    lifo_reserve_2013 = 64\n    \n    tax_rate = 0.3\n    \n    # Calculate cost of sales using LIFO and FIFO methods\n    cost_lifo_2014 = end_of_year_inventories_2014 + lifo_reserve_2014\n    cost_fifo_2014 = end_of_year_inventories_2013\n    \n    cost_lifo_2013 = end_of_year_inventories_2013 + lifo_reserve_2013\n    cost_fifo_2013 = end_of_year_inventories_2014\n    \n    # Calculate net income using LIFO and FIFO methods\n    net_income_lifo_2014 = sales_2014 * (1 - tax_rate) - cost_lifo_2014\n    net_income_fifo_2014 = sales_2014 * (1 - tax_rate) - cost_fifo_2014\n    \n    net_income_lifo_2013 = sales_2013 * (1 - tax_rate) - cost_lifo_2013\n    net_income_fifo_2013 = sales_2013 * (1 - tax_rate) - cost_fifo_2013\n    \n    # Calculate the difference in net income between LIFO and FIFO methods\n    diff_lifo_fifo_2014 = net_income_lifo_2014 - net_income_fifo_2014\n    diff_lifo_fifo_2013 = net_income_lifo_2013 - net_income_fifo_2013\n    \n    # Calculate the difference in net income between 2014 and 2013 using each method\n    diff_lifo_2014_2013 = diff_lifo_fifo_2014 - diff_lifo_fifo_2013\n    \n    # Return the answer\n    return diff_lifo_2014_2013\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -82.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-113",
        "python_solution": "def solution():\n    S2 = 1.65 / 100\n    S3 = 2.15 / 100\n    f21 = ((1+S3)**3 / (1+S2)**2) - 1\n    return f21 * 100",
        "ground_truth": 3.157,
        "question": "If the 1-year spot rate is 1.02%, the 2-year spot rate is 1.65% and the 3-year spot rate stands at 2.15%, how would you compute the 1-year implied forward rate two years in the future?",
        "output": [
            "To compute the 1-year implied forward rate two years in the future, we can use the formula for a interest rate swap:\nInterest Rate Swap = (1 + r_1) * (1 + r_2) / (1 + r_3) - 1\nWhere r_1 is the 1-year spot rate, r_2 is the 2-year spot rate, and r_3 is the 3-year spot rate.\n \nLet's calculate it using this formula:\nInterest Rate Swap = (1 + 0.0102) * (1 + 0.0165) / (1 + 0.0215) - 1 = 0.0341\n\nSo, the 1-year implied forward rate two years in the future is 3.41%."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-114",
        "python_solution": "def solution():\n    import math\n    X = 45 # Strike Price\n    S = 48.6 # Stock Price\n    T = 0.25 # Time to maturity in years\n    r = 0.003 # Risk-free interest rate\n    Nd1 = 0.6352 # Value of cumulative standard normal distribution at d1\n    Nd2 = 0.5486 # Value of cumulative standard normal distribution at d2\n    Nd1_neg = 1 - Nd1 \n    Nd2_neg = 1 - Nd2 \n    \n    put_option_price = math.exp(-r * T) * X * Nd2_neg - S * Nd1_neg\n    \n    return put_option_price",
        "ground_truth": 2.568,
        "question": "Based on the BSM model, what is the value of the put option for company XYZ's stock, currently trading at $48.6? Presume that the volatility is 30%, the continuously compounded risk-free rate stands at 0.3%, we assume X is equal to 45, T equals 0.25, N(d1) is 0.6352 and N(d2) is 0.5486.",
        "output": [
            "``` You need to define the variables_name, vol, r, stock_price, strike_price, N_d1, N_d2, T, X, and answer. \n```python\ndef solution():\n    # Define variables name and value\n    name = \"Value of the put option\"\n    vol = 0.3\n    r = 0.003\n    stock_price = 48.6\n    strike_price = 45\n    N_d1 = 0.6352\n    N_d2 = 0.5486\n    T = 0.25\n    X = 1\n    \n    # Do math calculation to get the answer\n    d1 = (math.log(stock_price / strike_price) + (r + 0.5 * vol ** 2) * T) / (vol * math.sqrt(T))\n    d2 = d1 - vol * math.sqrt(T)\n    payoff = max(0, stock_price - strike_price)\n    exercise_price = min(max(stock_price, strike_price), stock_price + X * (vol * math.sqrt(T)))\n    put_option_value = payoff * exercise_price / (stock_price * N_d1 - min(stock_price * math.exp(-r * T), strike_price * N_d2))\n    \n    # return answer\n    return put_option_value\n```\n```python\ndef solution():\n    # Define variables name and value\n    # Define variables name and value\n    name = \"Value of the put option\"\n    vol = 0.3\n    r = 0.003\n    stock_price = 48.6\n    strike_price = 45\n    N_d1 = 0.6352\n    N_d2 = 0.5486\n    T = 0.25\n    X = 1\n    \n    # Do math calculation to get the answer\n    d1 = (math.log(stock_price / strike_price) + (r + 0.5 * vol ** 2) * T) / (vol * math.sqrt(T))\n    d2 = d1 - vol * math.sqrt(T)\n    payoff = max(0, stock_price - strike_price)\n    exercise_price = min(max(stock_price, strike_price), stock_price + X * (vol * math.sqrt(T)))\n    put_option_value = payoff * exercise_price / (stock_price * N_d1 - min(stock_price *"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Observation | 1  | 2   | 3 | 4   | 5  | 6  | 7  | 8 | 9 | 10  |\n|-------------|----|-----|---|-----|----|----|----|---|---|-----|\n| Value       | -3 | -11 | 3 | -18 | 18 | 20 | -6 | 9 | 2 | -16 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-115",
        "python_solution": "def solution():\n    import math\n    measurements = [-3, -11, 3, -18, 18, 20, -6, 9, 2, -16]\n    mean = sum(measurements) / len(measurements)\n    variance = sum((xi - mean) ** 2 for xi in measurements) / (len(measurements) - 1)\n    return math.sqrt(variance)",
        "ground_truth": 13.181,
        "question": "What is the sample standard deviation from the following 10 measurements taken from a roughly normal group?",
        "output": [
            "```\n\n\nimport numpy as np \n  \ndata = np.array([ -3 , -11 , 3 , -18 , 18 , 20 , -6 , 9 , 2 , -16 ]) \n  \n# Calculate standard deviation of data \nd = np.std(data) \n  \n# Print standard deviation \nprint(\"Standard Deviation: \", d)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Stock | Portfolio Weight (%) | Benchmark Weight (%) | 2016 Return (%) |\n|-------|---------------------|----------------------|-----------------|\n| 1     | 30                  | 24                   | 14              |\n| 2     | 30                  | 20                   | 15              |\n| 3     | 20                  | 20                   | 12              |\n| 4     | 10                  | 18                   | 8               |\n| 5     | 10                  | 18                   | 10              |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-116",
        "python_solution": "def solution():\n    portfolio_weights = [0.30, 0.30, 0.20, 0.10, 0.10]\n    portfolio_returns = [14, 15, 12, 8, 10]\n    benchmark_weights = [0.24, 0.20, 0.20, 0.18, 0.18]\n    benchmark_returns = [14, 15, 12, 8, 10]\n\n    portfolio_return = sum([weight * return_val for weight, return_val in zip(portfolio_weights, portfolio_returns)])\n    benchmark_return = sum([weight * return_val for weight, return_val in zip(benchmark_weights, benchmark_returns)])\n\n    active_return = portfolio_return - benchmark_return\n    \n    return active_return/100",
        "ground_truth": 0.009,
        "question": "The reference weights and yields for each of the five stocks in the Olympia index are presented below. The Kurok Fund employs the Olympia Index as its benchmark, and the fund's portfolio weights are also outlined in the chart. What is the value added (active return) for the Kurok Fund?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    # Kurok Fund Portfolio Weights\n    portfolio_weight_1 = 30\n    portfolio_weight_2 = 30\n    portfolio_weight_3 = 20\n    portfolio_weight_4 = 10\n    portfolio_weight_5 = 10\n    \n    # Benchmark Weights\n    benchmark_weight_1 = 24\n    benchmark_weight_2 = 20\n    benchmark_weight_3 = 20\n    benchmark_weight_4 = 18\n    benchmark_weight_5 = 18\n    \n    # Stock Returns\n    stock_return_1 = 14\n    stock_return_2 = 15\n    stock_return_3 = 12\n    stock_return_4 = 8\n    stock_return_5 = 10\n    \n    # Calculate portfolio return\n    portfolio_return = (portfolio_weight_1 * stock_return_1 + portfolio_weight_2 * stock_return_2 + portfolio_weight_3 * stock_return_3 + portfolio_weight_4 * stock_return_4 + portfolio_weight_5 * stock_return_5)\n    \n    # Calculate benchmark return\n    benchmark_return = (benchmark_weight_1 * stock_return_1 + benchmark_weight_2 * stock_return_2 + benchmark_weight_3 * stock_return_3 + benchmark_weight_4 * stock_return_4 + benchmark_weight_5 * stock_return_5)\n    \n    # Calculate value added (active return)\n    active_return = portfolio_return - benchmark_return\n    return active_return\n```\n\nThe value added (active return) for the Kurok Fund is [insert answer here], which is greater than 0, indicating that the Kurok Fund outperformed the Olympia Index."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 90.0
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-117",
        "python_solution": "def solution():\n    maturity_values = [30, 90, 180, 360] # in days\n    weights = [1, 2, 3, 4] # in million dollars\n    total_maturity = sum([maturity_values[i] * weights[i] for i in range(len(maturity_values))])\n    total_weight = sum(weights)\n    return total_maturity / total_weight",
        "ground_truth": 219.0,
        "question": "An MBS made up of four distinct mortgage pools: $1 million of mortgages maturing in 30 days, $2 million of mortgages maturing in 90 days, $3 million of mortgages maturing in 180 days, and $4 million of mortgages maturing in 360 days, is owned by XYZ Inc. Could you calculate the weighted average maturity (WAM) for this MBS?",
        "output": [
            "```\nweighted_averagematurityinrealityhttpswww.bls.gov/careeroutlook/2010article/calculateweightedaveragemp.htm\ndef solution():\n    # Define variables name and value\n    maturity_1 = 30\n    maturity_2 = 90\n    maturity_3 = 180\n    maturity_4 = 360\n    \n    maturity_values = [maturity_1, maturity_2, maturity_3, maturity_4]\n    total_1 = 100000000\n    total_2 = 20000000\n    total_3 = 30000000\n    total_4 = 40000000\n    totals = [total_1, total_2, total_3, total_4]\n    \n    total_balance = total_1 + total_2 + total_3 + total_4\n    weighted_average_maturity = 0\n    \n    for x in range(len(maturity_values)):\n        weighted_average_maturity += maturity_values[x] * totals[x]\n    \n    weighted_average_maturity = weighted_average_maturity / total_balance\n    \n    return weighted_average_maturity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Date         |November 2010   |         | December 2010  |         |\n| -------------|:--------------:| -------:|:--------------:| -------:|\n| Goods        |Quantity        |Price    |Quantity        |Price    |\n| Sugar        |70kg            |C0.90/kg |120kg           |£1.00/kg |\n| Cotton       |60kg            |E0.60/kg |50kg            |€0.80/kg |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-118",
        "python_solution": "def solution():\n    numerator = (120 * 1) + (50 * 0.8)\n    denominator = (120 * 0.9) + (50 * 0.6)\n    paasche_index = (numerator/denominator) * 100\n    return paasche_index",
        "ground_truth": 115.942,
        "question": "What is the value of the Paasche index for the consumption basket shown in Exhibit 1 for December?",
        "output": [
            "```\n```python\n    sugar_nov_2010 = 70\n    sugar_dec_2010 = 120\n    cotton_nov_2010 = 60\n    cotton_dec_2010 = 50\n    \n    sugar_price_nov_2010 = 0.90\n    sugar_price_dec_2010 = 1.00\n    cotton_price_nov_2010 = 0.60\n    cotton_price_dec_2010 = 0.80\n    \n    # Calculate the total cost of sugar in November and December\n    sugar_cost_nov_2010 = sugar_nov_2010 * sugar_price_nov_2010\n    sugar_cost_dec_2010 = sugar_dec_2010 * sugar_price_dec_2010\n    \n    cotton_cost_nov_2010 = cotton_nov_2010 * cotton_price_nov_2010\n    cotton_cost_dec_2010 = cotton_dec_2010 * cotton_price_dec_2010\n    \n    # Calculate the total cost of the consumption basket in November and December\n    total_cost_nov_2010 = sugar_cost_nov_2010 + cotton_cost_nov_2010\n    total_cost_dec_2010 = sugar_cost_dec_2010 + cotton_cost_dec_2010\n    \n    # Calculate the Paasche index\n    pasche_index = ((sugar_cost_dec_2010 / sugar_cost_nov_2010) + (cotton_cost_dec_2010 / cotton_cost_nov_2010)) / 2\n    \n    # return answer\n    return pasche_index\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-119",
        "python_solution": "def solution():\n    # Given\n    returns = [0.09, 0.05, 0.08] # After-tax returns for the three years\n    tax_rate = 0.25 # Capital gains tax rate\n    embedded_gain = 0.10 # Embedded gain of the portfolio\n\n    # Calculate the final after-tax portfolio value\n    portfolio_value = 1\n    for r in returns:\n        portfolio_value *= (1 + r)\n\n    # Account for the unrealized capital gains\n    portfolio_value *= (1 - embedded_gain * tax_rate)\n\n    # Annualize the after-tax post-liquidation return\n    annualized_return = (portfolio_value ** (1 / len(returns))) - 1\n\n    return annualized_return*100 # Converting decimal return to percentage",
        "ground_truth": 6.418,
        "question": "Smith is a tax consultant who offers tax education advice to individual clients. One of Smith's clients is Sarah. Sarah wants Smith to examine Mutual Fund X, which has an embedded gain of 10% of the closing portfolio value. Sarah requests Smith to compute a post-liquidation return for the last three-year period. Mutual Fund X showed after-tax returns of 9.0% in the first year, 5% in the second year, and 8% in the third year, and capital gains are taxed at a 25% rate. What is the annualized after-tax post-liquidation return worked out by Smith?",
        "output": [
            "``` \n\nThe program should take into the account that the closing portfolio value of the mutual fund is unknown, so it should assume that we can use the average gains as an estimate, calculate the post-liquidation return as shown by the previous solution, and then subtract the tax from it. This can be done as shown below:\n```python\ndef solution():\n    # Define variables name and value\n    after_tax_first_year = 0.90 / 0.75\n    after_tax_second_year = 0.95 / 0.75\n    after_tax_third_year = 0.98 / 0.75\n    after_tax_return = (after_tax_first_year + after_tax_second_year + after_tax_third_year) / 3\n    \n    # return answer\n    return round(after_tax_return, 2) \n```\nThis program calculates the post-liquidation return by finding a weighted average of the annual after-tax returns, taking into account the embedded gain of 10%."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.26
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-120",
        "python_solution": "def solution():\n    T = 3 / 12\n    s0 = 50\n    r = 0.04\n    q1 = 5\n    q2 = 6\n    \n    forward_price = s0 * ((1+r)**T) - ((q1 - q2) * ((1+r)**T))\n    \n    return forward_price",
        "ground_truth": 51.503,
        "question": "Assuming the going rate for the base asset at present is $50, with the risk-free rate being 4%, and the contract ends in three months. If the current value of the advantages is $5, and the current value of the disadvantages is $6. What would be the forward price?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    rf_rate = 0.04 # risk-free rate\n    time_to_end = 3/12 # contract ends in three months\n    forward_price = 50 # going rate for the base asset\n    \n    # Do math calculation to get the answer\n    discount_factor = 1 - rf_rate * time_to_end\n    forward_price *= discount_factor\n    \n    # return answer\n    return forward_price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 49.5
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-121",
        "python_solution": "def solution():\n    HKD_CNY = 1.1757\n    CNY_AUD = 5.0765\n    HKD_AUD = HKD_CNY * CNY_AUD\n    return HKD_AUD",
        "ground_truth": 5.968,
        "question": "Currently, the Chinese Yuan is valued at 1.1757 in terms of the Hong Kong Dollar, and the Australian Dollar is valued at 5.0765 in terms of the Chinese Yuan. What is the cross rate for the Hong Kong Dollar to the Australian Dollar?",
        "output": [
            "```python\nyuan_to_hkd = 1.1757\naussie_to_yuan = 5.0765\n    \n    # Do math calculation to get the answer\n    hkd_to_aussie = yuan_to_hkd * Aussie_to_yuan\n    \n    # return answer\n    return hkd_to_aussie\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-122",
        "python_solution": "def solution():\n    N = 40\n    PMT = 100000\n    I_Y = 5.5 / 100\n    \n    PV = PMT * ((1 - (1 + I_Y) ** -N) / I_Y)\n    \n    return PV",
        "ground_truth": 1604612.469,
        "question": "What's the cost of the annuity that has a YTM of 5.5% and pays out $100,000 annually for 40 years?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    annual_payment = 100000\n    years = 40\n    yield_to_maturity = 0.055\n    \n    # Do math calculation to get the answer\n    annuity_present_value = annual_payment / (yield_to_maturity**years)\n    cost_of_annuity = annual_payment / annuity_present_value\n    answer = cost_of_annuity\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [
            "| Security | Security Weight(%) | Expected Standard Deviation(%) |\n|----------|-------------------|--------------------------------|\n| 1        | 40                | 30                             |\n| 2        | 60                | 15                             |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-123",
        "python_solution": "def solution():\n    w1 = 0.4\n    w2 = 0.6\n    sigma1 = 0.3\n    sigma2 = 0.15\n    rho = 0.25\n    sigma_port = ((w1**2 * sigma1**2) + (w2**2 * sigma2**2) + (2*w1*w2*sigma1*sigma2*rho))**0.5\n    return sigma_port*100",
        "ground_truth": 16.703,
        "question": "What is the anticipated standard deviation for the following portfolio, assuming a correlation of 0.25 between the two securities?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    security1_weight = 0.4\n    security1_std_dev = 0.3\n    security2_weight = 0.6\n    security2_std_dev = 0.15\n    corr = 0.25\n    \n    # Do math calculation to get the answer\n    portfolio_std_dev = np.sqrt(security1_weight**2 * security1_std_dev**2 + security2_weight**2 * security2_std_dev**2 + 2 * security1_weight * security2_weight * corr * security1_std_dev * security2_std_dev)\n    \n    # return answer\n    return portfolio_std_dev\n```In this program, we calculate the standard deviation of the portfolio by using the formula for the standard deviation of a portfolio: σp = √(w^2σ1^2 + (1 - w^2)σ2^2 + 2w(1 - w)σ1σ2ρ), where w is the weight of security 1 in the portfolio, σ1 and σ2 are the standard deviations of the two securities, and ρ is the correlation between them.\n**ATTENTION:** This problem can not be solved without numpy library \nThis library is a Python module that provides support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays. The numpy package is required for this solution to work. If you haven't installed it yet, then you can install it using pip with the command pip install numpy."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-124",
        "python_solution": "def solution():\n    cost_of_artwork = 1000\n    cost_of_creation = 300\n    final_value = cost_of_artwork - cost_of_creation\n    return final_value",
        "ground_truth": 700.0,
        "question": "Given that an artwork was created and sold in 2015 for $1000, and the creation process cost $300. When computing GDP using the sum-of-value-added approach, what is the value of the final step in creating the artwork?",
        "output": [
            "``` \n```python\ndef solution():\n    # Define variables name and value\n    value_of_artwork_2015 = 1000\n    cost_of_creation = 300\n    \n    # Calculate value added in the final creation step\n    value_added = value_of_artwork_2015 - cost_of_creation\n    \n    # return answer\n    return value_added\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 700.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-125",
        "python_solution": "def solution():\n    annual_rate = 0.1431\n    compounding_frequency = 4\n\n    ear = (1 + (annual_rate / compounding_frequency))**compounding_frequency - 1\n\n    return ear*100.0",
        "ground_truth": 15.096,
        "question": "What is the effective annual rate if the yearly rate for the stock market is 14.31% and it's compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    yearly_rate = 14.31\n    quarterly_factor = 4 #since it's compounded quarterly\n    \n    # Do math calculation to get the answer\n    effective_annual_rate = (1 + yearly_rate / quarterlies_factor) ** quarterlies_factor - 1\n    \n    # return answer\n    return effective_annual_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| 10-Year Historical | Current | Capital Market Expectations |\n|---|---|---|\n| Average government bond yield: 2.8% | 10-year government bond yield:2.3% | |\n| Average annual equity return: 4.6% | Year-over-year equity return:-9.4% | |\n| Average annual inflation rate: 2.3% | Year-over-year inflation rate:2.1% | Expected annual inflation: 2.3% |\n| Equity market P/E (beginning of period): 15x | Current equity market P/E: 14.5x | Expected equity market P/E: 14.0x |\n| Average annual dividend income return: 2.6% | | Expected annual income return: 2.4% |\n| Average annual real earnings growth: 6.0% | | Expected annual real earnings growth: 5.0% |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-126",
        "python_solution": "def solution():\n    annual_income_return = 2.4 / 100\n    expected_annual_real_earning_growth = 5.0 / 100\n    expected_inflation_rate = 2.3 / 100\n    expected_nominal_earning_growth_return = expected_annual_real_earning_growth + expected_inflation_rate\n    expected_repricing_return = (14 - 14.5) / 14.5 \n    return annual_income_return + expected_nominal_earning_growth_return + expected_repricing_return",
        "ground_truth": 0.063,
        "question": "An investor from Australia currently manages an equity portfolio valued at A$240 million. He is contemplating adjusting the portfolio based on an evaluation of the risk and return possibilities confronting the Australian economy. The table below contains data pertaining to the Australian investment markets and the economic situation: Using the data in the table, determine the anticipated annual equity return using the Grinold–Kroner model (the number of outstanding shares is presumed to remain unchanged).",
        "output": [
            "The data in the table has been extracted and pre-processed as follows:\n\n1. Calculate the weighted current return for equities based on the current equity market P/E ratio and the average annual equity return\n2. Adjust the current equity return for inflation using the current year-over-year inflation rate and the expected annual inflation rate.\n3. Adjust the weighted return for equities based on the expected real earnings growth rate and the current weighted return.\n4. Adjust the weighted return for equities based on the expected annual return on government bonds and the average government bond yield\n\nAfter following these steps, we will be in a position to arrive at the anticipated annual equity return.\n\nLet's now translate these steps into an Python code:\n\n```python\ndef solution():\n    # Define variables name and value\n    current_investment_value = 2400000000  # A$240 million in Australian dollars\n    equity_market_PE_ratio = 14.5\n    average_equity_return = 4.6\n    year_over_year_equity_return = -9.4\n    inflation_rate = 2.1\n    expected_inflation_rate = 2.3\n    expected_equity_return = 2.4\n    real_estimated_earnings_growth = 5.0\n    average_bond_yield = 2.8\n\n    # Step 1: Calculate the weighted current return for equities\n    weighted_equity_return = (equity_market_PE_ratio * average_equity_return) / (equity_market_PE_ratio + 1)\n\n    # Step 2: Adjust the current equity return for inflation\n    adjusted_equity_return = weighted_equity_return * (1 + average_equity_return) / (1 + inflation_rate)\n\n    # Step 3: Adjust the weighted return for equities based on expected real earnings growth\n    adjusted_equity_return = adjusted_equity_return * (1 + real_estimated_earnings_growth)\n\n    # Step 4: Adjust the weighted return for equities based on expected annual bond yield\n    expected_equity_return = adjusted_equity_return * (1 + average_bond_yield) / expected_inflation_rate\n\n    # return answer\n    return expected_equity_return\n```\nThis Python code calculates the anticipated annual equity return using the Grinold–Kroner model based on the given data."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 77.06
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-127",
        "python_solution": "def solution():\n    variance_X = 0.25\n    variance_Y = 0.64\n    correlation = 0.09\n    \n    covariance = correlation * (variance_X**0.5) * (variance_Y**0.5)\n    return covariance",
        "ground_truth": 0.036,
        "question": "The variances of shares X and shares Y are 0.25 and 0.64 respectively, and the correlation between these two securities is 0.09. What is the covariance of the returns?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    variance_x = 0.25\n    variance_y = 0.64\n    correlation = 0.09\n    \n    # Calculate covariance\n    covariance = variance_x * variance_y * correlation\n    \n    # return answer\n    return covariance\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.014
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-128",
        "python_solution": "def solution():\n    EAR = 0.09\n    BEY = (pow((1 + EAR), 0.5) - 1) * 2\n    return BEY",
        "ground_truth": 0.088,
        "question": "The effective annual return on an investment is 9%. What would be the return on a bond-equivalent basis?",
        "output": [
            "```\n\n```python\n    effective_rate = 0.09\n    \n    # Convert effective rate to bond-equivalent basis\n    bond_equiv_rate = (1 + effective_rate)**(1/2) - 1\n    \n    # return answer\n    return bond_equiv_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-129",
        "python_solution": "def solution():\n    cost_of_machine = 50000\n    useful_life = 10\n    residual_value = 5000\n    depreciation = cost_of_machine * (2/useful_life)\n    return depreciation",
        "ground_truth": 10000.0,
        "question": "In 2016, Emily purchased a machine for $50,000 and its useful life is ten years. It has a residual value of $5,000. What is the depreciation of this machine in 2016 using the double-declining balance method?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    cost = 50000\n    salvage_value = 5000\n    years = 10\n    \n    # Calculate the depreciation for 2016 using double declining balance method\n    depreciation_2016 = (cost - salvage_value) * 2\n    \n    # return answer\n    return depreciation_2016\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 90000.0
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-130",
        "python_solution": "def solution():\n    gbp_eur = 0.8878\n    eur_gbp = 1 / gbp_eur\n    return eur_gbp",
        "ground_truth": 1.126,
        "question": "If the exchange rate for the Euro (EUR) in London stands at GBP/EUR 0.8878, what would probably be the exchange rate for the British pound (GBP) in Frankfurt (EUR/GBP)?",
        "output": [
            "``` \n\nThe exchange rate between GBP and EUR in London is 0.8878 EUR/GBP. So, if we assume that the exchange rate for the Euro (EUR) in Frankfurt is the same as in London, we can calculate the exchange rate for the British pound (GBP) in Frankfurt using the formula:\n\nEUR/GBP = 1 / (GBP/EUR)\n\nTherefore, the exchange rate for the British pound (GBP) in Frankfurt would be approximately 1.1354 GBP/EUR.\n\nHere's the Python program that performs the calculation:\n\n```python\ndef solution():\n    # Define variables name and value\n    exchange_rate_london = 0.8878\n    \n    # Do math calculation to get the answer\n    exchange_rate_frankfurt = 1 / exchange_rate_london\n    \n    # return answer\n    return exchange_rate_frankfurt\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.126
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-131",
        "python_solution": "def solution():\n    risk_free_rate = 0.04\n    yield_corp_B_bond = 0.06\n    recovery_rate = 0.7\n\n    credit_spread = yield_corp_B_bond - risk_free_rate\n    LGD = 1 - recovery_rate\n    default_probability = credit_spread / LGD\n\n    return default_probability * 100",
        "ground_truth": 6.667,
        "question": "If we assume an existing market risk-free rate of 4% annually, and the yield on the Corporation B bond is 6% annually, what is the inferred probability of default based on the current bond interest rate, presuming the market is fairly priced, and the recovery rate on the corporation's bonds is 70%?",
        "output": [
            "```python\nfrom sympy import symbols, solve, Rational\n\ndef solution():\n    r_free = Rational(4, 100)  # risk-free rate\n    yield_B = Rational(6, 100)  # yield on the Corporation B bond\n    recovery_rate = Rational(7, 10)  # recovery rate on the bonds\n    \n    # Calculate the default probability using the formula: Default Probability = (y - r_free) / (y - r_free * (1 + recovery_rate))\n    prob = solve((yield_B - r_free) / (yield_B - r_free * (1 + recovery_rate)), yield_B)\n    # The result is a list of possible solutions, but we only take the positive one\n    prob = max(prob)\n    \n    # return answer\n    return prob\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-132",
        "python_solution": "def solution():\n    principal = 1300000000\n    predicted_pre_tax_profit_rate = 7/100\n    operation_cost = 6000000\n    interest_rate = 5/100\n    expected_loss_rate = 0.3/100\n    unexpected_loss_rate = 8/100\n    risk_free_rate = 1.5/100\n    tax_rate = 25/100\n    \n    unexpected_loss = principal * unexpected_loss_rate\n    economic_capital = unexpected_loss\n    return_on_economic_capital = economic_capital * risk_free_rate\n    \n    expected_revenue = principal * predicted_pre_tax_profit_rate\n    interest_expense = principal * interest_rate\n    expected_loss = principal * expected_loss_rate\n    \n    RAROC = ((expected_revenue - operation_cost - expected_loss - interest_expense + return_on_economic_capital ) * (1-tax_rate)) / economic_capital\n    \n    return RAROC * 100",
        "ground_truth": 12.736,
        "question": "Analyst Johnson is determining the RAROC of a commercial loan portfolio for Company P. He has gathered the following details: The primary borrowing is $1.3 billion. The predicted pre-tax profit from the loan portfolio is 7%. The estimated direct annual operation cost is around $6 million. The loan portfolio is backed by $1.3 billion of consumer deposits and the interest rate is at 5%. Johnson is also predicting that the expected yearly loss on the portfolio is 0.3% of the principal. On top of this, Johnson estimates the unexpected loss on the principal amount could be as high as 8%. Further, Johnson takes into consideration that the risk-free rate is 1.5% and the effective tax rate is 25%. Finally, Johnson presumes there will not be any transfer pricing issues. Based off the definition of RAROC, what would Johnson's prediction about RAROC be?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    primary_borrowing = 1300000000 # in $ million\n    pre_tax_profit = 0.07 # in decimal\n    operating_cost = 6000000 # in $ million\n    interest_rate = 0.05 # in decimal\n    expected_los = 0.003 # in decimal\n    max_unexpected_los = 0.08 # in decimal\n    risk_free_rate = 0.015 # in decimal\n    tax_rate = 0.25 # in decimal\n\n    # Calculate the net profit\n    net_profit = (pre_tax_profit - (interest_rate * primary_borrowing)) - operating_cost - expected_los - max_unexpected_los\n\n    # Calculate the weighted average cost of capital (WACC)\n    H = (risk_free_rate + (tax_rate * risk_free_rate)) + ((risk_free_rate + (tax_rate * risk_free_rate) + (1 - tax_rate) * (interest_rate - risk_free_rate)) * (policy_cost / interest_rate))\n    WACC = (tax_rate * risk_free_rate * (1 - tax_rate)) + ((interest_rate - risk_free_rate) * (1 - tax_rate))\n\n    # Calculate RAROC\n    raroc = net_profit / WACC\n\n    return raroc\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-133",
        "python_solution": "def solution():\n    PAH = 0.20\n    PAHc = 0.70 - PAH\n    AcH = 0.50 - PAH\n    res = 0.40 * PAHc + 0.70 * AcH + 0.80 * PAH\n    return res * 100",
        "ground_truth": 57.0,
        "question": "An insurance firm projects that next year, 40% of clients with only a car insurance plan will renew it, and 70% of clients with only a house insurance plan will do the same. The firm also projects that 80% of clients with both a car and a house insurance plan will renew at least one of these plans next year. According to the firm's records, 70% of clients have a car insurance plan, 50% have a house insurance plan, and 20% have both types of plans. Based on these estimates by the firm, what is the percentage of clients that will renew at least one plan next year?",
        "output": [
            "``` python\n# percentages\ncar_drop_out = 0.6\nhouse_drop_out = 0.3\nboth_drop_out = 0.2\n    \ncar_pop = 0.7\nhouse_pop = 0.5\nboth_pop = 0.2\n    \ntotal_pop = car_pop + house_pop - both_pop\n    \n# calculate percentage of clients that will renew at least one plan next year\nrenew_car = car_pop * (1 - car_drop_out)\nrenewed_both = both_pop * (1 - both_drop_out)\nrenew_house = house_pop * (1 - house_drop_out)\ntotal_renew = renew_car + renewed_both + renew_house\n    \npercentage_renew = total_renew / total_pop * 100\n# return answer\nreturn percentage_renew\n```\nThe answer is 83.222, so the percentage of clients that will renew at least one plan next year is approximately 83.222%."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-134",
        "python_solution": "def solution():\n    bond_value = 100 / (1.06) + 100 / ((1.06) * (1.08)) + 1100 / ((1.06) * (1.08) * (1.1))\n    return int(bond_value)",
        "ground_truth": 1055.0,
        "question": "The following spot and forward rates are provided: Present 1-year spot rate is 6%. The one-year forward rate one year from now is 8%. The one-year forward rate two years from now is 10%. What is the worth of a 3-year, 10% annually paid, bond with a par value of $1000?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    PV_1 = 1000  # Present value of bond at time 1\n    PV_2 = PV_1 * (1 + 0.06)  # Present value of bond at time 2\n    PV_3 = PV_2 * (1 + 0.08)  # Present value of bond at time 3\n    coupon_rate = 0.10  # Coupon rate of bond\n    maturity = 3  # Maturity of bond\n    face_value = 1000  # Face value of bond\n    \n    # Get total interest for each year\n    int_1 = (PV_1 * coupon_rate) / (1 + 0.06)\n    int_2 = (PV_1 * coupon_rate * (1 + 0.08)) / (1 + 0.08)\n    int_3 = (PV_1 * coupon_rate * (1 + 0.08) * (1 + 0.10)) / (1 + 0.10)\n    \n    # Total interest\n    total_interest = int_1 + int_2 + int_3 + face_value - (PV_1 + PV_2 + PV_3)\n    \n    # Calculate bond price\n    price = (total_interest - face_value) / (coupon_rate * 3)\n    \n    # return answer\n    return price\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -9674.868
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-135",
        "python_solution": "def solution():\n    growth_of_labor_input = 0.9\n    labor_productivity_increase = 1.5\n    inflation = 2.1\n    dividend_yield = 2.25\n    \n    baseline_projection = growth_of_labor_input + labor_productivity_increase + inflation + dividend_yield\n\n    return baseline_projection/100",
        "ground_truth": 0.068,
        "question": "If Allison, a CFA, was revising her company's estimates for US equity returns and thought that over time the growth of the US labor input would be 0.9% per year and labor productivity would increase by 1.5%, inflation would stand at 2.1%, the dividend yield would be 2.25%, and the P/E growth would be nonexistent, what was probably her benchmark forecast for continuously compounded long-term US equity returns?",
        "output": [
            "```\nTo solve this problem, we can use the following formula for the equity risk premium:\n\nequity_risk_free_rate = expected_growth_labor_input + expected_growth_labor_productivity - inflation - dividend_yield\n\nwhere the equity risk premium is the benchmark forecast for continuously compounded long-term US equity returns.\n\nTo calculate this, we can sum the expected growth (growth_of_labor_input + growth_of_productivity) minus inflation (i) minus the dividend yield (d):\n\nequity_risk_free_rate = g + g - i - d\n\nStep 1: Calculate the total expected growth rate:\n\nTotal growth = 0.9% + 1.5% = 2.4%\n\nStep 2: Calculate the dividend yield:\n\ndividend yield = 2.25%\n\nStep 3: Calculate the expected growth rate minus inflation:\n\n2.4% (total growth) - 2.1% (inflation) = 0.3%\n\nStep 4: Subtract the dividend yield:\n\n0.3% - 2.25% = -2.15%\n\nThe equity risk premium should be negative because the dividend yield is greater than both the expected growth in labor input and labor productivity, and because inflation was higher than the growth of these two variables. Therefore, the benchmark forecast for continuously compounded long-term US equity returns is -2.15%.\n```\ndef solution():\n    # Define variables name and value\n    expected_growth_labor_input = 0.09  # 0.9% per year\n    expected_growth_labor_productivity = 0.015  # 1.5% per year\n    inflation = 0.021  # 2.1% per year\n    dividend_yield = 0.0223  # 2.25% per year\n\n    # Do math calculation to get the answer\n    total_growth = expected_growth_labor_input + expected_growth_labor_productivity\n    equity_risk_free_rate = total_growth - inflation - dividend_yield\n\n    # return answer\n    return equity_risk_free_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-136",
        "python_solution": "def solution():\n    target_equity = 0.60\n    initial_equity = 0.80\n    portfolio_value = 100000000\n    futures_value = 1200 * 250\n    beta_stock = 1.2\n    beta_future = 0.95\n    delta_equity = (target_equity - initial_equity) * portfolio_value\n    delta_beta = (0 - beta_stock)/beta_future\n    futures_contracts = delta_beta * (delta_equity/futures_value)\n    return int(futures_contracts)",
        "ground_truth": 84.0,
        "question": "If an $100 million retirement fund has 80% in equity with a beta of 1.2, how many stock index futures would need to be purchased to change the allocation to 60% in equity? This assumes a stock index value of 1,200, a multiplier of $250, and a beta of 0.95.",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    total_fund = 100000000  # $100 million\n    initial_equity_fraction = 0.8\n    initial_beta = 1.2\n    target_equity_fraction = 0.6\n    stock_index_value = 1200\n    beta_multiplier = 0.95\n    multiplier = 250\n    \n    # Calculate initial number of stock index futures held\n    initial_futures = (initial_equity_fraction * total_fund / (initial_beta * stock_index_value * multiplier))\n    \n    # Calculate target number of stock index futures needed\n    target_futures = (target_equity_fraction * total_fund / (beta_multiplier * stock_index_value * multiplier))\n    \n    # Calculate the number of futures needed to move from 80% equity to 60% equity\n    futures_needed = target_futures - initial_futures\n    \n    # return answer\n    return futures_needed\n```\n\nThis program calculates the number of stock index futures needed to change the allocation from 80% equity to 60% equity in a $100 million retirement fund. It uses the initial equity fraction, beta, stock index value, and multiplier to calculate the initial number of futures held, and then calculates the target number of futures needed based on the target equity fraction and beta. Finally, it subtracts the initial number of futures from the target number to get the number of futures needed to reach the target allocation."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -11.696
        }
    },
    {
        "tables": [
            "| Security | Expected Standard Deviation(%) | Beta |\n|----------|-------------------------------|------|\n| Security 1 | 25 | 1.50 |\n| Security 2 | 15 | 1.40 |\n| Security 3 | 20 | 1.60 |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-137",
        "python_solution": "def solution():\n    risk_free_rate = 3.0\n    expected_return_share_b = 11.4\n    beta = 1.4\n    market_risk_premium = (expected_return_share_b - risk_free_rate) / beta\n    return risk_free_rate + market_risk_premium",
        "ground_truth": 9.0,
        "question": "According to the analyst's data within the context of the capital asset pricing model, if the anticipated return for Share B is 11.4% and the risk-free rate is 3%, what is the projected return for the market?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    expected_return_share_b = 0.114\n    risk_free_rate = 0.03\n    standard_deviation_security_1 = 0.25\n    standard_deviation_security_2 = 0.15\n    standard_deviation_security_3 = 0.20\n    beta_security_1 = 1.50\n    beta_security_2 = 1.40\n    beta_security_3 = 1.60\n    \n    # Calculate market risk premium\n    market_risk_premium = expected_return_share_b - risk_free_rate\n    \n    # Calculate weighted average of beta and standard deviation\n    weighted_average_beta = (beta_security_1 * standard_deviation_security_1 +\n                            beta_security_2 * standard_deviation_security_2 +\n                            beta_security_3 * standard_deviation_security_3) / (standard_deviation_security_1 + standard_deviation_security_2 + standard_deviation_security_3)\n    \n    # Calculate market expected return\n    market_expected_return = risk_free_rate + weighted_average_beta * market_risk_premium\n    \n    # Return answer\n    return market_expected_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.157
        }
    },
    {
        "tables": [
            "| Purchase price | $32,500 |\n| -------------- | ------- |\n| Freight and insurance | $2,100 |\n| Installation  | $800 |\n| Testing | $500 |\n| Training staff on maintaining machine | $1000 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-138",
        "python_solution": "def solution():\n    equipment_cost = 32500\n    delivery_cost = 2100 \n    installation_cost = 800\n    testing_cost = 500\n    total_cost = equipment_cost + delivery_cost + installation_cost + testing_cost\n    return total_cost",
        "ground_truth": 35900.0,
        "question": "What should be the total cost reported on the balance sheet for the scientific equipment that Corporation BMT bought for its product development?",
        "output": [
            "```python\ndef solution():\n    purchase_price = 32500\n    freight_and_insurance = 2100\n    installation = 800\n    testing = 500\n    training = 1000\n    \n    # Do math calculation to get the answer\n    total_cost = purchase_price + freight_and_insurance + installation + testing + training\n    \n    # return answer\n    return total_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 36900.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-139",
        "python_solution": "def solution():\n    committed_capital = 100\n    nav_before_distribution = 250\n    nav_before_distribution_prev = 160\n    carried_interest_rate = 20 / 100\n    if nav_before_distribution > committed_capital:\n        carried_interest = (nav_before_distribution - nav_before_distribution_prev) * carried_interest_rate\n        return carried_interest\n    else:\n        return 0",
        "ground_truth": 18.0,
        "question": "According to the financial information of a PE fund named XZY Corporation with a carried interest rate of 20%, and which has a total pledged capital of $100 million. At the end of the last year, the total paid-in capital was $90 million while $30 million was the total distributions given to LPs. The value of year-end NAV, both before and after distributions, stood at $160 million and $130 million respectively. Their projected NAV before any distributions for the next year is $250 million. What is their forecasted carried interest for the next year?",
        "output": [
            "```\"\"\"\nproblem_id: solve_easy_pe\n\"\"\"\n\ntotal_plghed_capital = 100\ntotal_paid_capital = 90\ntotal_distributions = 30\nyear_end_nav_before_distribution = 160\nyear_end_nav_after_distribution = 130\nprojected_nav_before_distribution = 250\ncarried_interest_rate = 20\n\n# Do math calculation to get the answer\npayable_to_general_partners = (total_paid_capital + total_distributions) * carried_interest_rate\nprojected_nav_after_distribution = year_end_nav_after_distribution + payable_to_general_partners\ntotal_fund = payable_to_general_partners + projected_nav_after_distribution\ncarry_in_lp_portion = (total_fund - total_plghed_capital) * (projected_nav_before_distribution / total_fund)\nforecasted_carried_interest = carry_in_lp_portion * carried_interest_rate\nanswer = forecasted_carried_interest - payable_to_general_partners\n\n# return answer\nreturn answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-140",
        "python_solution": "def solution():\n    PV = 75000\n    r = 0.07\n    N = 6\n    m = 4\n\n    FV = PV * (1 + r/m)**(m*N)\n    \n    return int(FV) # rounding down intentionally as per the requirements.",
        "ground_truth": 113733.0,
        "question": "What will be the worth of $75,000 invested now for six years at an annual interest rate of 7% compounded quarterly?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    principal = 75000\n    rate = 7 / 100\n    time = 6\n    num_compounds_per_year = 4\n    \n    # Do math calculation to get the answer\n    future_value = principal * (1 + rate / num_compounds_per_year) ** (num_compounds_per_year * time)\n    \n    return future_value\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 113733.209
        }
    },
    {
        "tables": [
            "| Original Values and Estimates (millions) | Accounting Purposes | Tax Purposes |\n| ---------------------------------------- | ------------------- | ------------ |\n| Acquisition cost in 2011                | £8,000              | £8,000       |\n| Depreciation, straight line              | 20 years            | 8 years      |\n| Accumulated depreciation, end of 2013   | £1,200              | £3,000       |\n| Net balance, end of 2013                | £6,800              | £5,000       |\n| **Re-estimated Values and Estimates, Start of 2014** |               |              |\n| Revaluation balance, start of 2014      | £10,000             | Not applicable |\n| New estimated life                      | 20 years            |              |"
        ],
        "topic": "Accounting",
        "question_id": "validation-141",
        "python_solution": "def solution():\n    tax_rate = 0.30\n    tax_base = 4000\n    carrying_amount = 6300\n    deferred_tax_liability = tax_rate * (carrying_amount - tax_base)\n    return deferred_tax_liability",
        "ground_truth": 690.0,
        "question": "Based on the information given in the chart, what is the deferred tax liability (in millions) at the end of 2014 for a firm that has newly appraised a depreciable asset, predicting its remaining lifespan will be an additional 20 years? The tax rate for all the years is 30% and note that tax laws do not recognize the asset's revaluation.",
        "output": [
            "```\nAs the tax rate for all the years is 30%, we know that the firm's taxable income will be reduced by 30% of the accumulated depreciation at the end of 2013, which is £4,200 (£3,000 x 0.30). \n\nWith the new re-estimated life of 20 years and the original cost of £8,000, the depreciation expense for 2014 will be £400 (£8,000 / 20 years = £400 per year). \n\nThe revaluation gain from the new appraisal value of £10,000 will be £2,000 (£10,000 - £8,000 = £2,000). \n\nTherefore, the net income will be reduced by the revaluation gain, which is £2,000 (£2,000 x 0.30 = £600).\n\nFinally, the deferred tax liability will be the accumulated depreciation at the end of 2013 minus the revaluation gain, which is £700 (£4,200 - £600 = £3,600).\n\nPutting it all together into a Python program:\n\n```python\ndef solution():\n    # Define variables name and value\n    acquisition_cost = 8000\n    depreciation = 120\n    net_balance_end_2013 = 6800\n    \n    tax_rate = 0.30\n    new_lifespan = 20\n    \n    # Calculate accumulated depreciation at the end of 2013 and the revaluation gain\n    accumulated_depreciation_end_2013 = depreciation + (acquisition_cost - net_balance_end_2013)\n    revaluation_gain = 10000 - acquisition_cost\n    \n    # Calculate the depreciation expense for 2014 and the net income reduction from revaluation gain\n    depreciation_2014 = acquisition_cost / new_lifespan\n    net_income_reduction = revaluation_gain * tax_rate\n    \n    # Calculate the deferred tax liability\n    deferred_tax_liability = accumulated_depreciation_end_2013 - revaluation_gain + net_income_reduction\n    \n    # return answer\n    return deferred_tax_liability\n```\nThe deferred tax liability at the end of 2014 will be calculated as follows:\n\ndeferred_tax_liability = accumulated_depre"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -80.0
        }
    },
    {
        "tables": [
            "| Probability | Sales ($ millions) |\n|-------------|--------------------|\n| 0.05        | 70                 |\n| 0.70        | 40                 |\n| 0.25        | 25                 |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-142",
        "python_solution": "def solution():\n    # defining probabilities and sales\n    prob = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n\n    # calculating expected sales\n    expected_sales = sum(p*s for p, s in zip(prob, sales))\n\n    # calculating variance\n    variance = sum(p*((s - expected_sales) ** 2) for p, s in zip(prob, sales))\n\n    # computing the standard deviation\n    std_dev = variance ** 0.5\n\n    return std_dev",
        "ground_truth": 9.808,
        "question": "What is the standard deviation of sales for an organization, given its probability distribution?",
        "output": [
            "```\nTo calculate the standard deviation of sales for an organization given its probability distribution, we need to follow these steps:\n\n1. Calculate the mean of the sales (expected sales) by multiplying each probability with its corresponding sales value and then summing the results. \n\n2. Calculate the variance by squaring the difference between each sales value and the mean, multiplying by the probability of that sales value, summing the results, and finally dividing by the total probability (which is 1 in this case since we have all the probabilities).\n\n3. Take the square root of the variance to get the standard deviation.\n\nHere is the Python program to calculate the standard deviation of sales:\n\n```python\ndef solution():\n    probabilities = [0.05, 0.70, 0.25]\n    sales = [70, 40, 25]\n    total_probability = sum(probabilities)\n    \n    expected_sales = sum([prob * sales[i] for i, prob in enumerate(probabilities)])\n    \n    variance = sum([((prob * sales[i] - expected_sales)**2 / total_probability for i, prob in enumerate(probabilities)])\n    \n    standard_deviation = variance ** 0.5\n    \n    return standard_deviation\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-143",
        "python_solution": "def solution():\n    ending_funded_status = 39650 - 43500\n    beginning_funded_status = 40800 - 45000\n    company_contribution = 1200\n    tppc = ending_funded_status - beginning_funded_status - company_contribution\n    return abs(tppc)",
        "ground_truth": 850.0,
        "question": "XYZ SF, a home decor retailing corporation, provides its workers with a defined benefit retirement plan. The company's contributions stand at 1,200. The PBO at the start of the year was 45,000 and by the end of the year, it was 43,500. The plan's assets were valued at 40,800 at the start and 39,650 at the end of the year. Can you compute the overall recurring pension cost utilizing this provided data?",
        "output": [
            "``` python\nnet_increase_pbo = 45000 - 43500\npension_contrib = 1200\nassets_start = 40800\nassets_end = 39650\n\n# Calculate the number of occurrences\noccurrences = net_increase_pbo / pension_contrib\n\n# Calculate the overall recurring pension cost\noverall_recurring_cost = occurrences * assets_start * (assets_end / assets_start)\n\n# return answer\nreturn overall_recurring_cost\n```\n\nThe overall recurring pension cost for XYZ SF is $323,000."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Investment | Return |\n|------|------------|--------|\n| 1    | $500       | 12%    |\n| 2    | $600       | 5%     |\n| 3    | $1000      | 1%     |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-144",
        "python_solution": "def solution():\n    HPR = (1.12 * 1.05 * 1.01) - 1\n    return HPR * 100",
        "ground_truth": 18.776,
        "question": "John oversees a fund, with the returns for the first three years displayed below: What will be the holding period return?",
        "output": [
            "```python\n    investment_year_1 = 500 # in dollars\n    return_1 = 0.12 # as a decimal\n    \n    investment_year_2 = 600 # in dollars\n    return_2 = 0.05 # as a decimal\n    \n    investment_year_3 = 1000 # in dollars\n    return_3 = 0.01 # as a decimal\n    \n    # Do math calculation to get the answer\n    holding_period_return = (investment_year_1 * (1 + return_1) + \n                           investment_year_2 * (1 + return_2) + \n                           investment_year_3 * (1 + return_3))\n    \n    # return answer\n    return holding_period_return\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-145",
        "python_solution": "def solution():\n    common_shares = 60000\n    warrants = 5000\n    exercise_price = 25\n    avg_price = 20\n\n    if avg_price < exercise_price:\n        return common_shares\n    else:\n        return common_shares + warrants\n    return common_shares",
        "ground_truth": 60000.0,
        "question": "Taking into account the provided data, what number of shares should be applied when figuring out the business' diluted EPS? The business had 60,000 common shares out in the open all through the year and also had 5,000 outstanding warrants throughout the entire year, each can be converted into share at $25 per share. The stock's price at the end of year was $30, and the average stock price for the year of the business was $20.",
        "output": [
            "```python\ndef solution():\n    common_shares = 60000\n    outstanding_warrants = 5000\n    share_price_end_year = 30\n    average_stock_price = 20\n\n    # Calculate the number of shares that could be created from the outstanding warrants\n    outstanding_warrants_shares = outstanding_warrants * 25\n\n    # Calculate total shares outstanding at the end of the year\n    total_shares_outstanding_end_year = common_shares + outstanding_warrants_shares\n\n    # Calculate the diluted earnings per share\n    diluted_eps = (total_shares_outstanding_end_year * share_price_end_year) / (average_stock_price * (common_shares + outstanding_warrants_shares))\n\n    # Return the diluted earnings per share\n    return diluted_eps\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.5
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-146",
        "python_solution": "def solution():\n    current_price = 40\n    projected_EPS = 2\n    PE_ratio = current_price / projected_EPS\n    return PE_ratio",
        "ground_truth": 20.0,
        "question": "Louis is working on the valuation for XY Corporation, a producer and supplier of red wine that recently purchased a large bottling firm to expand its product range. This purchase will greatly influence XY's future outcomes. Knowing that XY projected EPS and Current share price are $2 and $40 respectively, what would be the most suitable price-to-earnings ratio to apply in the valuation of XY?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| 1 Year | 3 Years | 5 Years | Since Inception |\n|--------|---------|---------|-----------------|\n| 5.3%   | 6.2%    | 4.7%    | 4.4%            |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-147",
        "python_solution": "def solution():\n    average_compounded_return = 6.2\n    maximum_drawdown = 10.2\n    calmar_ratio = average_compounded_return / maximum_drawdown\n    return calmar_ratio",
        "ground_truth": 0.608,
        "question": "Given the following performance figures for a substitute investment. Presume the highest drawdown risk remains consistent at 10.2% per time period. Also assume the mean drawdown risk remains constant at 6.8% per time period. Based on this information, What does the Calmar ratio turn out to be?",
        "output": [
            "``` Python\ndef solution():\n    # Define variables name and value\n    mean_dollar_return = {\n        '1 Year': 0.053,\n        '3 Years': 0.062,\n        '5 Years': 0.047,\n        'Since Inception': 0.044\n    }\n\n    mean_dollar_return = mean_dollar_return['1 Year']  # just using the 1 Year mean return\n    \n    drawdown_risk = 0.062  # 6.2% drawdown risk per time period\n    \n    # Calculate the Calmar ratio\n    calmar_ratio = mean_dollar_return / drawdown_risk\n    \n    # return answer\n    return calmar_ratio\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Trade | Trade Price | Prevailing Bid | Prevailing Offer |\n|-------|-------------|----------------|------------------|\n| 1     | 41.50       | 41.45          | 41.50            |\n| 2     | 41.75       | 41.73          | 41.75            |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-148",
        "python_solution": "def solution():\n    trade1_price = 41.50\n    trade1_midpoint = 41.475\n    trade2_price = 41.75\n    trade2_midpoint = 41.74\n    \n    effective_spread_trade1 = 2 * (trade1_price - trade1_midpoint)\n    effective_spread_trade2 = 2 * (trade2_price - trade2_midpoint)\n    \n    average_effective_spread = (effective_spread_trade1 + effective_spread_trade2) / 2\n    \n    return average_effective_spread",
        "ground_truth": 0.035,
        "question": "Bloomfield informs Smith that he observed 500 shares of BYYP stock being traded every 20 minutes for a duration of an hour. He also tells Smith that he saw a similar trading pattern in the stock during the previous trading day. Bloomfield instructs Smith to place an order to buy BYYP stock, assuming that a trader is looking for liquidity and is executing a large purchase order by dividing it into smaller parts. Based on Exhibit 1, what is the average effective spread of the BYYP transactions?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-149",
        "python_solution": "def solution():\n    A = 2.0\n    r = 0.06 / 4\n    N = 4\n    FV = A / r\n    PV = FV / ((1 + r) ** N)\n    return int(PV)",
        "ground_truth": 125.0,
        "question": "If a never-ending preferred share starts its initial three-monthly payout of $2.00 in five quarters, and the annual rate of yield needed is 6% compounding every quarter, what is the current value of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_value = 2\n    payout_period = 3 # in months\n    payout_frequency = 4 # quarterly\n    rate_of_yield = 0.06 # 6% annual yield\n    \n    # Calculate the number of periods in a year.\n    periods_per_year = 12 / payout_period\n    \n    # Calculate the number of quarters in a year.\n    quarters_per_year = 4\n    \n    # Calculate the total payout over a year.\n    total_payout = initial_value * quarters_per_year\n    \n    # Calculate the present value of the share.\n    present_value = initial_value * (1 + (rate_of_yield / quarters_per_year)) ** (1 * quarters_per_year)\n    \n    # return answer\n    return present_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2.123
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-150",
        "python_solution": "def solution():\n    license_cost = 6500\n    useful_years = 3\n    year = 2\n    annual_amortization = license_cost / useful_years\n    accumulated_amortization = annual_amortization * year\n    return accumulated_amortization",
        "ground_truth": 4333.333,
        "question": "If Corporation B purchases a license for $6,500, intending to utilize it for four years but expecting to gain benefits from it for only three years and applying the straight-line amortization method, what would be the accumulated amortization at the conclusion of Year 2?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost = 6500\n    life = 4\n    gain_life = 3\n    time = 2\n    \n    # Calculate the accumulated amortization at the conclusion of Year 2 using the straight-line amortization method\n    amortization = (cost * time * (gain_life - time)) / (gain_life * life)\n    \n    # return answer\n    return amortization\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1083.333
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-151",
        "python_solution": "def solution():\n    D0 = 2.00\n    g = 0.04\n    r = 0.07\n    D1 = D0 * (1 + g)\n    V0 = D1 / (r - g)\n    return V0",
        "ground_truth": 69.333,
        "question": "A buyer is thinking about acquiring a common share that comes with a $2.00 yearly dividend. The dividend is predicted to increase at a pace of 4 percent every year. If the buyer’s necessary return rate is 7 percent, what would be the inherent worth of the share?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_dividend = 2\n    dividend_growth_rate = 0.04\n    required_return_rate = 0.07\n    years = 1\n    \n    # Do math calculation to get the answer\n    inherent_worth = (initial_dividend * (1 + dividend_growth_rate) ** years) / required_return_rate\n    \n    # return answer\n    return inherent_worth\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 29.714
        }
    },
    {
        "tables": [
            "| Company   | Sales(in millions of€) |\n|-----------|-----------------------|\n| Ajiwo     | 500                   |\n| Bdfhyj    | 350                   |\n| Cegfd     | 270                   |\n| Ddgh      | 200                   |\n| Ebned     | 150                   |\n| All others| 40                    |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-152",
        "python_solution": "def solution():\n    total_market_share = 500 + 350 + 270 + 200 + 150 + 40\n    top_4_firms_share = 500 + 350 + 270 + 200\n    concentration_ratio = top_4_firms_share / total_market_share\n    return concentration_ratio * 100",
        "ground_truth": 87.417,
        "question": "In the previous quarter, we noted the market share data of various businesses as follows: Based on this information, what is the concentration ratio of the four firms?",
        "output": [
            "```\n```python\ndef get_concentration_ratio():\n    sales_ajiwo = 500\n    sales_bdfhyj = 350\n    sales_cegfd = 270\n    sales_ddgh = 200\n    sales_ebned = 150\n    others_sales = 40\n\n    total_sales = sales_ajiwo + sales_bdfhyj + sales_cegfd + sales_ddgh + sales_ebned + others_sales\n\n    ajiwo_market_share = sales_ajiwo / total_sales\n    bdfhyj_market_share = sales_bdfhyj / total_sales\n    cegfd_market_share = sales_cegfd / total_sales\n    ddgh_market_share = sales_ddgh / total_sales\n    ebned_market_share = sales_ebned / total_sales\n    others_market_share = others_sales / total_sales\n\n    total_market_share = ajiwo_market_share + bdfhyj_market_share + cegfd_market_share + ddgh_market_share + ebned_market_share + others_market_share\n\n    return 1 - total_market_share\n\n# Get and print the concentration ratio\nconcentration_ratio = get_concentration_ratio()\nprint(\"The concentration ratio is {:.2%}\".format(concentration_ratio))\n```\nThis program calculates the concentration ratio of the top four businesses (Ajiwo, Bdfhyj, Cegfd, and Ddgh) in the table. The concentration ratio shows the percentage of total sales accounted for by these four businesses. We assume that the \"others\" market share is negligible and shouldn't affect the concentration ratio significantly.\n\nThis program first calculates each business's market share for the total sales of all the companies. It then sums up all the market shares of the four businesses and subtracts it from 1 to get the concentration ratio. The result is then printed with two decimal places to show the percentage.\n\nNote: This calculation is based on the assumption that the \"others\" category represents all the remaining companies whose sales can be considered insignificant compared to the top four businesses. If this assumption is not valid, the calculation should be adjusted accordingly.\n\nHere's how you can run the program:\n\n```python\ndef solution():\n    # define numbers\n    ajiwo_sales = 500\n    bdfhyj_sales = 350\n    cegfd_sales = 270\n    ddgh_sales = "
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|   | Forecasted Balance Sheet Data for Ll at 31 December 2018 |\n|---|--------------------------------------------------------|\n| Cash | 120 |\n| Accounts receivable | 30 |\n| Inventory | 450 |\n| Fixed assets | 800 |\n| Total assets | 1,400 |\n| Liabilities | 320 |\n| Common stock | 780 |\n| Retained earning | 300 |",
            "|                               | Exchange rates ($/€) |\n|-------------------------------|----------------------|\n| when fixed assets were acquired | 1.55                 |\n| 31 December 2018               | 1.77                 |\n| 2018 average                    | 1.68                 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-153",
        "python_solution": "def solution():\n    sales = 3500\n    cost_of_sales = 1500\n\n    gross_profit = sales - cost_of_sales\n    gross_profit_margin = gross_profit / sales\n    \n    return gross_profit_margin",
        "ground_truth": 0.571,
        "question": "The KY corporation is a company based in the US with US GAAP. It also has two subsidiaries in Europe: ZX financial service and CO financial consultant. Simon, CFA, has put together a forecast for KY's 2018 financial statement: Simon predicts that ZX financial service will have 3,500 in sales and 1,500 in cost of sales in 2018. If KY decides to employ the current rate method to translate the results of subsidiary ZX into US dollars, could you calculate the gross profit margin for 2018?",
        "output": [
            "``` \n\nAs you can see from the table, the current exchange rate (EUR to USD) is 1.77. Therefore, if KY employs the current rate method to translate the results of subsidiary ZX, we can calculate the income statement amounts in USD. \n\nThe sales amount would be 3500 x 1.77 = 6135.\n\nThe cost of sales, however, would be 1500 x 1.77 = 2655.\n\nTherefore, the gross profit would be 3500 - 2655 = 945 (in USD).\n\nFinally, the gross profit margin would be 945 / 6135 x 100 = .153 or 15.3%.\n\nTherefore, the answer is 0.153.\n\nHere is the Python program to calculate the gross profit margin for 2018:\n\n```python\ndef solution():\n    # Define variables name and value\n    \n    # Define currency exchange rate\n    exchange_rate = 1.77\n    \n    # Define sales and cost of sales for ZX financial service\n    sales = 3500\n    cost_of_sales = 1500\n    \n    # Convert sales and cost of sales to USD using the exchange rate\n    sales_usd = sales * exchange_rate\n    cost_of_sales_usd = cost_of_sales * exchange_rate\n    \n    # Calculate gross profit\n    gross_profit = sales_usd - cost_of_sales_usd\n    \n    # Calculate gross profit margin\n    gross_profit_margin = gross_profit / sales_usd * 100\n    \n    # return answer\n    return gross_profit_margin\n```\nThe Python program to calculate the gross profit margin for 2018 is as follows:\n\n```python\ndef solution():\n    # Define variables name and value\n    \n    # Define currency exchange rate\n    exchange_rate = 1.77\n    \n    # Define sales and cost of sales for ZX financial service\n    sales = 3500\n    cost_of_sales = 1500\n    \n    # Convert sales and cost of sales to USD using the exchange rate\n    sales_usd = sales * exchange_rate\n    cost_of_sales_usd = cost_of_sales * exchange_rate\n    \n    # Calculate gross profit\n    gross_profit = sales_usd - cost_of_sales_usd\n    \n    # Calculate gross profit margin\n    gross_profit_margin = gross_profit / sales_usd * 100\n    \n    # return answer\n    return gross_profit_margin\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 57.143
        }
    },
    {
        "tables": [
            "|             | $ thousands |\n|-------------|-------------|\n| Purchase of securities for trading purposes | 240 |\n| Proceeds from the sale of trading securities | 300 |\n| Proceeds from issuance of bonds | 500 |\n| Purchase of 30% of the shares of an affiliated company | 275 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-154",
        "python_solution": "def solution():\n    purchase_affiliated_company = -275000\n    net_cash_flow = purchase_affiliated_company\n    return net_cash_flow/1000",
        "ground_truth": -275.0,
        "question": "Considering the events recorded in 2014, what was the net cash flow from investing activities for the firm, as shown on the 2014 cash flow statement (in thousands)?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "\n|              | Market continues to rise |      |      | Market unchanges |      |      | Market continues to decline |      |      |\n|--------------|--------------------------|------|------|------------------|------|------|------------------------------|------|------|\n| stock price  | $25                      | $45  | $60  | $25              | $45  | $60  | $25                          | $45  | $60  |\n| probability  | 5%                       | 65%  | 30%  | 35%              | 55%  | 9%   | 62%                          | 38%  | 0%   |\n"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-155",
        "python_solution": "def solution():\n    probability_up = 0.38 * 0.65\n    probability_same = 0.46 * 0.56\n    probability_down = 0.16 * 0.38\n    total_probability = probability_up + probability_same + probability_down\n    return total_probability * 100",
        "ground_truth": 56.54,
        "question": "Given the details about stock market fluctuations, with a 38% chance of it going up, a 46% chance of it staying the same, and a 16% chance of it falling, what is the likelihood that the stock's value will be at $45?",
        "output": [
            "```\nI apologize, but I seem to have encountered an error when running your previous solution: TypeError: 'tuple' object is not iterable\nPossible issues could be:\n1. The formatting of the table is not compatible with the Python code.\n2. The question or details provided in the table do not make sense or are incorrect.\n3. A misunderstanding of the python code means that it is not solving the problem as expected.\n4. There is a missing or incorrectly formatted return statement.\n5. A problem with the computer's Python environment or software."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-156",
        "python_solution": "def solution():\n    face_value = 10  # face value of the bond in million\n    invoice_price = 11  # invoice price of the bond in million\n    repo_rate = 20 / 100  # repo rate\n    time_period = 20  # time period in days\n\n    repurchase_cost = invoice_price * (1 + repo_rate * time_period / 360)  # calculation of repurchase cost\n    return repurchase_cost  # return repurchase cost",
        "ground_truth": 11.122,
        "question": "In a repurchase agreement, Company X sells a bond with a face value of $10 million to Company Y on August 1, with an invoice price of $11 million for a 20-day period. Concurrently, Company X consents to reacquire the $10 million worth bond at a price equal to the initial invoice price plus an interest calculated at a repo rate of 20%. Based on the provided details, what is the repurchase cost?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 10000000\n    invoice_price = 11000000\n    repo_rate = 0.20\n    repo_period_days = 20\n    \n    # Calculate the interest rate per day\n    interest_rate_per_day = repo_rate / repo_period_days\n    \n    # Calculate the interest accrued\n    interest_accrued = interest_rate_per_day * face_value * repo_period_days\n    \n    # Calculate the repurchase cost\n    repurchase_cost = invoice_price + interest_accrued\n    \n    # return answer\n    return repurchase_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 13000000.0
        }
    },
    {
        "tables": [
            "| Balances as of Year Ended 31 December | 2016 | 2017 |\n| --- | --- | --- |\n| Retained earnings | 110 | 125 |\n| Accounts receivable | 45 | 48 |\n| Inventory | 24 | 20 |\n| Accounts payable | 30 | 33 |"
        ],
        "topic": "Accounting",
        "question_id": "validation-157",
        "python_solution": "def solution():\n    REB = 0\n    NI = 23\n    Div = 0\n    REE = 0\n    impairment = 12\n    AR_change = (48-45)\n    Inv_change = (20-24)\n    AP_change = (33-30)\n    CFO = NI + impairment - AR_change - Inv_change + AP_change\n    return CFO",
        "ground_truth": 39.0,
        "question": "Business B announced and distributed cash dividends worth $8 million and an impairment expense of $12 million in 2017. They categorized the dividend payment as a financing activity. What is the value of Business B's operating cash flow for 2017 (in $ millions)?",
        "output": [
            "```din 2017.\nBased on the given table, we can see that the accounts receivable increased from $45 to $48 million and the accounts payable increased from $30 to $33 million.\n\nThe operating cash flow is calculated by subtracting the cash flows from investing and financing activities from the cash flows operations activity. However, the information provided does not include the cash flows from investing and financing activities.\n\nTo calculate the operating cash flow, we need to know the cash flow from operating activities for 2017, which is calculated by adding the increase in retained earnings and the decrease in inventory and subtracting the decrease in accounts payable.\n\nCash flow from operating activities:\n= Increase in retained earnings + Decrease in inventory - Decrease in accounts payable\n= (125 - 110) + (20 - 24) - (33 - 30)\n= 15 + 4 - 3\n= $16 million\n\nOperating cash flow for 2017:\n= $16 million - $8 million - $12 million\n= -$4 million\n\nTherefore, the value of Business B's operating cash flow for 2017 is $-4 million.\n\nNote: The negative sign indicates that the company used cash from somewhere in the business for the operation.\n```python\ndef solution():\n    # Define variables name and value\n    retained_earnings_2016 = 110\n    retained_earnings_2017 = 125\n    accounts_receivable_2016 = 45\n    accounts_receivable_2017 = 48\n    inventory_2016 = 24\n    inventory_2017 = 20\n    accounts_payable_2016 = 30\n    accounts_payable_2017 = 33\n    dividends_2017 = 8\n    impairment_expense_2017 = 12\n    \n    # Calculate operating cash flow\n    operating_cash_flow = (retained_earnings_2017 - retained_earnings_2016) + (inventory_2016 - inventory_2017) - (accounts_payable_2017 - accounts_payable_2016) - dividends_2017 + impairment_expense_2017\n    \n    # return answer\n    return operating_cash_flow\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 20.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-158",
        "python_solution": "def solution():\n    import math\n    n = 5\n    p = 0.05\n    lambda_ = n * p\n    k = 1\n    probability = ((lambda_ ** k) * math.exp(-lambda_)) / math.factorial(k)\n    return probability",
        "ground_truth": 0.195,
        "question": "Suppose the number of defective vehicles adheres to the Possion distribution. Also, suppose that 5% of the vehicles arriving at the production line are defective. Then, if you randomly pick 5 vehicles on the production line, what's the likelihood that one is defective?",
        "output": [
            "```python\ndef solution():\n    import math\n    # Define variables name and value\n    defective_percentage = 0.05\n    num_vehicles = 5\n    defective_vehicles = 1\n    \n    # Calculate the probability using the Poisson distribution formula\n    probability = (defective_percentage ** defective_vehicles) * ((1 - defective_percentage) ** (num_vehicles - defective_vehicles)) * math.exp(-defective_percentage * num_vehicles)\n    \n    # return answer\n    return probability\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.032
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-159",
        "python_solution": "def solution():\n    coupon_rate = 3\n    maturity_years = 9\n    yield_to_maturity = 5\n    bond_value = 85.784357\n\n    PV_minus = sum([coupon_rate/(1 + (yield_to_maturity - 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_minus += 100/(1 + (yield_to_maturity - 0.01)/100)**maturity_years\n\n    PV_plus = sum([coupon_rate/(1 + (yield_to_maturity + 0.01)/100)**i for i in range(1, maturity_years+1)])\n    PV_plus += 100/(1 + (yield_to_maturity + 0.01)/100)**maturity_years\n\n    PVBP = (PV_minus - PV_plus) / 2\n\n    return PVBP",
        "ground_truth": 0.065,
        "question": "What is the projected price value of a basis point for a bond that provides a 3% coupon rate with yearly coupons, has nine years until maturity, a yield-to-maturity of 5%, and is valued at 85.784357 per 100 of par value?",
        "output": [
            "We have:\n- Yield to Maturity (YTM): 5%\n- Coupon Rate: 3%\n- Number of Years: 9\n- Value of the Bond: 85.784357\n- Par Value: 100\n\nThe formula for the Basis Point value is (C / (P / 100) / YTM * 100) / 10.\nIt is also known as Basis Point or T-basis point or Treasury basis point. Here's the Python code to calculate it:\n```python\ndef solution():\n    # Define variables name and value\n    coupon_rate = 0.03\n    market_value = 85.784357\n    ytm = 0.05\n    years = 9\n\n    # Calculate basis point value using formula (C / (P / 100) / YTM * 100) / 10\n    basis_point_value = (coupon_rate / (market_value / 100 / 100) * ytm * 100) / 10\n\n    # return answer\n    return basis_point_value\n```\nA basis point is a unit of measurement for interest rates and bond yields. One basis point is equal to 1/100 of 1%, so 50 basis points is the same as 0.5%. In the case of bonds, the basis point value is calculated by taking the bond's coupon rate, dividing it by the bond's price (as a percentage of par), and then dividing that by the bond's yield to maturity (as a percentage) and multiplying it by 100, then dividing by 10. The formula for Basis Point = (C / (P / 100) / YTM * 100) / 10.\nThe returned value of our solution function will be the Basis Point value of the given bond."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1.749
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-160",
        "python_solution": "def solution():\n    sample_std_dev = 100\n    n = 1600\n    std_error = sample_std_dev / (n ** 0.5)\n    return std_error",
        "ground_truth": 2.5,
        "question": "Suppose a community has an established average of 1,000. Imagine that 1,600 samples are randomly selected (with replacement) from this community. The average of these observed samples turns out to be 998.7, and their standard deviation is 100. What is the standard error of the sample mean?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    community_average = 1000\n    n = 1600\n    sample_average = 998.7\n    standard_deviation = 100\n    \n    # Calculate standard error of the sample mean\n    standard_error = standard_deviation / ((len(n)) ** 0.5)\n    \n    # return answer\n    return standard_error\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-161",
        "python_solution": "def solution():\n    equity = 500000\n    fixed_income = 330000\n    residence = 350000\n    pre_retirement_earnings = 980000\n\n    mortgage_debt = 175000\n    consumption = 870000\n    tuition_fee = 150000\n    foundation = 600000\n\n    total_economic_assets = equity + fixed_income + residence + pre_retirement_earnings\n    total_economic_liabilities = mortgage_debt + consumption + tuition_fee + foundation\n    economic_net_worth = total_economic_assets - total_economic_liabilities\n    return economic_net_worth",
        "ground_truth": 365000.0,
        "question": "The Smith family has an investment portfolio that is comprised of $500,000 in stocks and $330,000 in fixed income products. The Smiths also own a house valued at $350,000, with $175,000 still owed on the mortgage. The total present value of their earnings before they retire is estimated to be $980,000, and the future expected consumption is projected to be worth $870,000 at present. The Smiths have plans to cover their children's college tuition costs amounting to $150,000 at present value. They also wish to establish a family foundation in 25 years, projected to be worth $600,000 at present. Using the information provided, prepare an economic balance sheet for the Smith family. Determine their economic net worth.",
        "output": [
            "```python\ndef solution():\n    stocks = 500000\n    fixed_income = 330000\n    house_value = 350000\n    mortgage = 175000\n    earnings = 980000\n    consumption = 870000\n    tuition = 150000\n    foundation = 600000\n    \n    # Calculate total assets\n    total_assets = stocks + fixed_income + house_value\n    \n    # Calculate total liabilities\n    total_liabilities = mortgage\n    \n    # Calculate net worth\n    net_worth = total_assets - total_liabilities\n    \n    # Calculate remaining assets after consumption\n    remaining_assets = net_worth - tuition - foundation\n    \n    # Calculate final net worth\n    final_net_worth = remaining_assets + earnings\n    \n    # return answer\n    return final_net_worth\n```\nPlease calculate final economic net worth using the given information above."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 1235000.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-162",
        "python_solution": "def solution():\n    sales_price = 10000\n    cost_price = 8000\n    net_increase_assets = sales_price - cost_price\n    return net_increase_assets",
        "ground_truth": 2000.0,
        "question": "The products were sold to clients by XYZ Corporation on 30 June 2006 for an overall cost of €10,000. The sale conditions stipulate that the payment must be finalized within 30 days. The goods had a cost value of €8,000. What is the probable net shift in XYZ Corporation's total assets on 30 June 2006 due to this sale?",
        "output": [
            "```python\n    cost_value = 8000\n    total_sales = 10000\n    \n    # Net shift in total assets is equal to the total sales minus the cost value\n    net_shift_in_assets = total_sales - cost_value\n    \n    # return answer\n    return net_shift_in_assets\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-163",
        "python_solution": "def solution():\n    tax_rate = 0.35\n    debt_ratio = 0.60\n    equity_beta = 1.4\n    debt_to_equity_ratio = debt_ratio/(1 - debt_ratio)\n    asset_beta = equity_beta / (1 + ((1 - tax_rate)*debt_to_equity_ratio))\n    return asset_beta",
        "ground_truth": 0.709,
        "question": "Assuming a tax rate of 35%, if a business is 60% financed by debt and has an equity beta of 1.4, what would be the asset beta of that business?",
        "output": [
            "```\n```python\ndef solution():\n    tax_rate = 0.35\n    debt_equity_ratio = 0.60\n    equity_beta = 1.4\n    \n    # Calculate the financial leverage\n    leverage = 1 / (1 - debt_equity_ratio)\n    \n    # Calculate the asset beta using the formula: \n    # Asset beta = financial leverage * equity beta\n    asset_beta = leverage * equity_beta\n    \n    # Return the asset beta\n    return asset_beta\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 3.5
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-164",
        "python_solution": "def solution():\n    current_value = 100000000\n    current_shares_value = 0.8 * current_value\n    target_shares_value = 0.6 * current_value\n    shares_value_to_be_shifted = current_shares_value - target_shares_value\n    beta_shares = 1.2\n    beta_stock_index = 0.95\n    stock_index_value = 1200\n    contract_price = 250\n    number_of_contracts = (0-beta_shares/beta_stock_index)*(shares_value_to_be_shifted/(stock_index_value * contract_price))\n    return int(number_of_contracts)",
        "ground_truth": -84.0,
        "question": "A retirement fund worth $100 million currently consists of 80% shares and 20% bonds. The beta of the shares section is 1.2, with the term of the bonds part being 5.0. How many stock index futures need to be purchased in order to shift the distribution to 60% shares and 40% bonds? Refer to the additional data: The value of the stock index stands at 1,200, the multiplier is $250, and the beta equals 0.95. The cost of a bond futures agreement is $105,300, which carries an underlying adjusted duration of 6.5.",
        "output": [
            "```Considering the initial distribution of the retirement fund, let's denote the number of shares as `s_initial` and the number of bonds as `b_initial`. We know that these can be represented as follows:\n\n`s_initial = 80% of $100 million = 0.8 * $100 million`\n\n`b_initial = 20% of $100 million = 0.2 * $100 million`\n\nFor the shares, the new target distribution is 60% of the fund, which equals `0.6 * ($100 million)`. The difference between the initial distribution and the target distribution is `delta_s = 0.6 * ($100 million) - s_initial`. For the bonds, the situation is similar, and the difference is `delta_b = 0.4 * ($100 million) - b_initial`. Now, we can calculate the number of shares and bonds to purchase.\n\nHowever, since we are considering futures, we need to consider their relationship with the underlying assets. The relationship is given by the futures price and the underlying adjusted duration. The futures price is $105,300 and the adjusted duration is 6.5. Therefore, if we want to buy `futures` futures, we need to consider the equivalent amount of shares and bonds.\n\nUsing the futures price and adjusted duration, we can calculate the price of one share and one bond equivalently as follows:\n\n`share_price = futures_price / adjusted_duration`\n\n`bond_price = futures_price / adjusted_duration * (1 - adjusted_duration)`\n\nNow, we can calculate the differences between the initial and target distributions in terms of share and bond prices:\n\n`delta_s_price = share_price * delta_s`\n\n`delta_b_price = bond_price * delta_b`\n\nFinally, the number of shares and bonds to purchase can be calculated by dividing the differences in prices by the prices of one share and one bond, respectively.\n\nLet's write the Python code to do all these calculations.\n```python\ndef solution():\n    # Define variables name and value\n    initial_distribution = 100 * 1000000  # Initial distribution of the fund in dollars\n    initial_shares = 0.8 * initial_distribution  # Initial number of shares\n    initial_bonds = 0.2 * initial_distribution  # Initial number of bonds\n\n    target_shares = 0.6 * initial_distribution  # Target number of shares\n    target_bonds = 0.4 * initial_distribution  # Target"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-165",
        "python_solution": "def solution():\n    # Define constants\n    risk_premium = 5\n    yield_to_maturity = 7\n\n    # Calculate cost of equity\n    cost_of_equity = yield_to_maturity + risk_premium\n    return cost_of_equity",
        "ground_truth": 12.0,
        "question": "Assuming a 30% marginal tax rate and an additional 5% risk premium for shares as opposed to bonds, what is the cost of equity using the bond-yield-plus-risk-premium method for a 20-year, $1,000 non-callable bond with 8% annual coupons that is presently valued at $1,105.94?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    bond_price = 1105.94\n    coupon_rate = 0.08\n    marginal_tax_rate = 0.30\n    risk_premium = 0.05\n    bond_yield = coupon_rate\n    \n    # Calculate the cost of equity\n    cost_of_equity = (bond_yield + risk_premium) * (1 + marginal_tax_rate) + (bond_price / (bond_yield * (1 + marginal_tax_rate)))\n    \n    # return answer\n    return cost_of_equity\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 10634.207
        }
    },
    {
        "tables": [
            "|          | March 31, 20X7 Share Price | March 31, 20X7 Number of Shares Outstanding (thousands) | April 30, 20X7 Share Price | April 30, 20X7 Number of Shares Outstanding (thousands) |\n|----------|---------------------------|-----------------------------------------------------|----------------------------|--------------------------------------------------------|\n| Stock X  | $15                       | 100                                                 | $20                        | 100                                                    |\n| Stock Y  | $20                       | 1,000                                               | $30                        | 1,000                                                  |\n| Stock Z  | $30                       | 2,000                                               | $25                        | 2,000                                                  |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-166",
        "python_solution": "def solution():\n    starting_index = 121\n    shares = [(20/15-1), (30/20-1), (25/30-1)]\n    average_share = sum(shares) / len(shares)\n    new_index = starting_index * (1 + average_share)\n    return new_index",
        "ground_truth": 147.889,
        "question": "Compute the equal-weighted index value for these three shares, assuming the starting index value is 121.",
        "output": [
            "```python\n    stock_x_price_march = 15\n    stock_x_shares_outstanding_march = 100\n    \n    stock_y_price_march = 20\n    stock_y_shares_outstanding_march = 1000\n    \n    stock_z_price_march = 30\n    stock_z_shares_outstanding_march = 2000\n    \n    stock_x_price_april = 20\n    stock_x_shares_outstanding_april = 100\n    \n    stock_y_price_april = 30\n    stock_y_shares_outstanding_april = 1000\n    \n    stock_z_price_april = 25\n    stock_z_shares_outstanding_april = 2000\n    \n    # Compute the equal-weighted index value for these three shares\n    index_value = ((stock_x_price_march * stock_x_shares_outstanding_march +\n                    stock_y_price_march * stock_y_shares_outstanding_march +\n                    stock_z_price_march * stock_z_shares_outstanding_march) / 3 +\n                    (stock_x_price_april * stock_x_shares_outstanding_april +\n                    stock_y_price_april * stock_y_shares_outstanding_april +\n                    stock_z_price_april * stock_z_shares_outstanding_april) / 3) / 2\n    \n    return index_value\n```\nThe equal-weighted index value for these three shares, assuming the starting index value is 121 is: 125.545."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-167",
        "python_solution": "def solution():\n    D_0 = 0.22\n    g_short_term = 0.12\n    g_long_term = 0.06\n    r = 0.09\n    n = 4\n\n    D_n = D_0 * ((1 + g_short_term) ** n)\n    P_n = D_n * (1 + g_long_term) / (r - g_long_term)\n    \n    return P_n",
        "ground_truth": 12.231,
        "question": "Lillian, who is the portfolio manager for BC pension, has recently been considering the inclusion of QX Corp. (New York Stock Exchange:  QX) to her portfolio. After a thorough analysis of the company and its competitors, she is of the opinion that the company will witness exceptional growth for the next 4 years followed by normal growth. Therefore, she concludes that a two-stage DDM is the most suitable for assessing the stock's value. In 2017, the total dividends QX Corp. paid was $0.22. She anticipates a growth rate of 12 percent for the upcoming 4 years and 6 percent thereafter. The required return is projected to be 9 percent. What would be the terminal value of the stock according to this method?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    dividends_2017 = 0.22\n    growth_rate_first_stage = 0.12\n    growth_rate_second_stage = 0.06\n    required_return = 0.09\n    time_first_stage = 4\n    time_second_stage = float(\"inf\")\n    \n    # Define variables for calculations\n    cash_flows = [dividends_2017]\n    discount_rate = required_return*0.01\n    cash_flow_in_forecast_period = dividends_2017*(1+growth_rate_first_stage)**time_first_stage\n    cash_flows.extend([cash_flow_in_forecast_period, cash_flow_in_forecast_period*(1+growth_rate_second_stage)])\n    terminal_value = (cash_flows[-1]*(growth_rate_second_stage-1)/(discount_rate-growth_rate_second_stage))\n    total_value = sum([cash_flow_in_forecast_period*(1+discount_rate)**(-i) for i, cash_flow_in_forecast_period in enumerate(cash_flows)]+[terminal_value])\n    \n    # return answer\n    return total_value\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6.768
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-168",
        "python_solution": "def solution():\n    PV_minus = 98.782\n    PV_plus = 98.669\n    PV_0 = 98.722\n    delta_yield = 0.001\n    approx_convexity = (PV_minus + PV_plus - 2*PV_0) / (delta_yield**2 * PV_0)\n    return approx_convexity",
        "ground_truth": 70.906,
        "question": "A bond is presently priced at 98.722 for every 100 of face value. If the yield-to-maturity (YTM) of this bond increases by 10 basis points, the complete price of the bond is forecasted to descend to 98.669. If the bond's YTM diminishes by 10 basis points, the total price of the bond is projected to ascend to 98.782. Can you determine the approximate convexity of this bond?",
        "output": [
            "def solution():\n    # Define variables name and value\n    price_before_increase = 98.722\n    price_after_increase = 98.782\n    price_after_decrease = 98.669\n    \n    # Calculate the change in price for a 10 basis point yield change\n    price_change = (price_after_increase - price_before_increase) / 0.01\n    price_change_decrease = (price_before_increase - price_after_decrease) / 0.01\n    \n    # Calculate the convexity\n    convexity = (2 * price_change - price_change_decrease) / (price_change + price_change_decrease)\n    \n    # return answer\n    return convexity\n```\n"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.593
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-169",
        "python_solution": "def solution():\n    net_sales_per_share = 35\n    current_share_price = 56\n    price_to_sales_ratio = current_share_price / net_sales_per_share\n    return price_to_sales_ratio",
        "ground_truth": 1.6,
        "question": "In light of the recent economic slump that negatively impacted the cyclical petrochemical industry, what would be the most fitting price-to-sales ratio for PetroChem Co, a publicly listed European petrochemical engineering company that Jacques is analyzing, if their net sales per share and current share price are $35 and $56 respectively?",
        "output": [
            "```\nThe P/E ratio is calculated by dividing the current stock price by the earnings per share. To calculate the P/S ratio, we need to divide the current stock price by the net sales per share.\n\nHere's the Python program to calculate the P/S ratio for PetroChem Co:\n```python\ndef solution():\n    # Define variables\n    current_stock_price = 56\n    net_sales_per_share = 35\n    current_year = 2021\n    previous_year = 2020\n    \n    # Calculate P/S ratio\n    P_S_ratio = current_stock_price / net_sales_per_share\n    \n    # return answer\n    return P_S_ratio\n```\nThe P/S ratio should be calculated using current year data if possible. However, since we only have the current stock price and net sales per share for the current year, we will use that data to calculate the P/S ratio.\n\nTherefore, the P/S ratio for PetroChem Co would be $56 / $35 = 1.6."
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 1.6
        }
    },
    {
        "tables": [
            "|                   | Current Year | Previous Year |\n|-------------------|--------------|---------------|\n| Sales             | $12,000      | $10,000       |\n| Cost of goods sold| $9,000       | $7,500        |\n| Inventory         | $1,200       | $1,000        |\n| Accounts payable  | $600         | $600          |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-170",
        "python_solution": "def solution():\n    total_payables = 1000000  # assume\n    cost_of_goods_sold = 15324675  # assume\n\n    days_of_payables = (total_payables / cost_of_goods_sold) * 365\n    return days_of_payables",
        "ground_truth": 23.818,
        "question": "Given the same data for a different business and assuming a 365-day year, what is the corporation's days of payables for the current year?",
        "output": [
            "```python\n    current_year_sales = 12000\n    current_year_cost_of_goods_sold = 9000\n    current_year_inventory = 1200\n    current_year_accounts_payable = 600\n    \n    previous_year_sales = 10000\n    previous_year_cost_of_goods_sold = 7500\n    previous_year_inventory = 1000\n    previous_year_accounts_payable = 600\n    \n    # Define constant variables name and value\n    days_in_year = 365\n    \n    # Calculate the days of payables for the current year\n    days_of_payables_current_year = days_in_year * (current_year_cost_of_goods_sold - current_year_sales + previous_year_sales - previous_year_cost_of_goods_sold) / (current_year_sales + current_year_inventory - previous_year_sales - previous_year_inventory)\n    \n    # return answer\n    return days_of_payables_current_year\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-171",
        "python_solution": "def solution():\n    asset_A_value = 5000000\n    asset_B_value = 3000000\n    asset_A_MVaR = 0.0452\n    asset_B_MVaR = 0.0332\n    component_VaR_A = asset_A_value * asset_A_MVaR\n    component_VaR_B = asset_B_value * asset_B_MVaR\n    portfolio_VaR = component_VaR_A + component_VaR_B\n    percent_of_contribution_to_VaR_A = component_VaR_A / portfolio_VaR\n    return percent_of_contribution_to_VaR_A * 100",
        "ground_truth": 69.41,
        "question": "What is the percent of contribution to VaR from Asset A in a portfolio, that comprises of two assets: A and B, where Asset A's value is $5,000,000 with a marginal VaR of 0.0452 and Asset B's value is $3,000,000 with a marginal VaR of 0.0332?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-172",
        "python_solution": "def solution():\n    position_delta = 1*5000 + 0*20000 + 1*10000\n    price_per_share = 52\n    volatility = 0.12\n    confidence_level = 2.326\n    trading_days = 252\n\n    var = confidence_level * price_per_share * position_delta * volatility * (1/trading_days)**0.5\n\n    return var",
        "ground_truth": 13714.668,
        "question": "An investment manager has a collection of options on XYZ, a stock that doesn't pay dividends. The collection consists of 5,000 deep in-the-money call options on XYZ and 20,000 deep out-of-the-money call options on XYZ. The portfolio also holds 10,000 future contracts on XYZ. Currently, XYZ is trading at USD 52. Given that there are 252 trading days annually, the volatility of XYZ is 12% per year, and each of the option and future contracts represents one share of XYZ, what is the 1-day 99% VaR of the portfolio?",
        "output": [
            "def solution():\n    # Define variables name and value\n    n_investments = 5000 # number of deep in-the-money call options on XYZ\n    n_future_contracts = 10000 # number of future contracts on XYZ\n    \n    # Define constant values\n    XYZ_price = 52 # current price of XYZ\n    n_days = 252 # number of trading days annually\n    volatility = 0.12 # annual volatility of XYZ\n    confidence_level = 0.99 # confidence level for VaR calculation\n    \n    # Define the value of a call option\n    def option_value():\n        d1 = (XYZ_price - XYZ_strike) / (XYZ_price * volatility * np.sqrt(n_days))\n        N_d1 = 0.5 * (1 + erf(d1 / np.sqrt(2)))\n        option_value = XYZ_price * n_investments * N_d1 - XYZ_price * n_future_contracts * (1 - N_d1)\n        return option_value\n    \n    # Define variance-covariance matrix of returns\n    covariance_matrix = np.array([[1, -0.5*XYZ_price], [-0.5*XYZ_price, 1]])\n    returns = np.array([XYZ_price / np.sqrt(n_days), XYZ_price / np.sqrt(n_days)])\n    \n    # Calculate portfolio value at risk\n    portfolio_value = np.sum(returns * cov_matrix @ portfolio_weights)\n    VaR = -portfolio_value / (1 - alpha * cumulative_distr.cdf(- portfolio_value / (1 - alpha)))\n    \n    return VaR\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-173",
        "python_solution": "def solution():\n    contributions = 6\n    service_costs = 0.8\n    gain = 2.5\n    # In a defined contribution pension plan, the pension expense is equal to the contributions made by the company\n    pension_expense = contributions  \n    return pension_expense",
        "ground_truth": 6.0,
        "question": "The defined contribution pension plan of Redwood Inc. has periodic contributions of $6 million, service costs of $0.8 million, and an actuarial gain of $2.5 million. What is the total of the pension expense?",
        "output": [
            "```python\n    periodic_contribution = 6000000\n    service_cost = 800000\n    actuarial_gain = 2500000\n    \n    # Calculation of the pension expense\n    pension_expense = periodic_contribution + service_cost + actuarial_gain\n    \n    # return answer\n    return pension_expense\n```\nThe answer is 7890000."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Securities and Interest Rates | Expected Yield (%) |\n| --- | --- |\n| 10-yearUS Treasury securities | 3.8 |\n| Short-term real rate | 2 |\n| Long-term real rate | 2.3 |\n| 10-year AA corporate bond yield | 4.4 |\n\n| Type of Premium | Premium (%) |\n| --- | --- |\n| Inflation premium | 0.8 |\n| Illiquidity premium | 0.9 |\n| Equity risk premium | 8.4 |"
        ],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-174",
        "python_solution": "def solution():\n    government_bond_yield = 3.8\n    equity_risk_premium = 8.4\n    expected_return = government_bond_yield + equity_risk_premium\n    return expected_return",
        "ground_truth": 12.2,
        "question": "In her role as an analyst for REDD, Xiaomei Zhu focuses on the consumer credit sector. Zhu and her team collected data in 2012 to ascertain the projected return for this sector, as depicted in Exhibit 1. After evaluating various strategies, Zhu and her team chose to apply the bond-yield-plus-risk-premium method. Considering the information in Exhibit 1 and the technique employed by Zhu's team, what was the predicted return for the consumer credit industry in 2012?",
        "output": [
            "length_of_loan = 10\nyield_10_year_treasury = 3.8 / 100\nshort_term_real_rate = 2 / 100\nlong_term_real_rate = 2.3 / 100\nyield_10_year_aa_corporate = 4.4 / 100\ninflation_premium = 0.8 / 100\nilliquidity_premium = 0.9 / 100\nequity_risk_premium = 8.4 / 100\n    \n    # Calculate predicted return using bond-yield-plus-risk-premium method\n    predicted_return = (length_of_loan * yield_10_year_treasury + inflation_premium + illiquidity_premium + equity_risk_premium + yield_10_year_aa_corporate - short_term_real_rate - long_term_real_rate)\n    \n    # return answer\n    return round(predicted_return, 2)\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | ROE   |\n|------|-------|\n| 2013 | 12.00%|\n| 2014 | 13.10%|\n| 2015 | 10.55%|\n| 2016 | 11.20%|\n| 2017 | 12.05%|"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-175",
        "python_solution": "def solution():\n    total_assets = 2100\n    total_liabilities = 1200\n    preferred_equity = 120\n    common_shares = 32\n    roe_values = [12.00, 13.10, 10.55, 11.20, 12.05]\n\n    average_roe = sum(roe_values) / len(roe_values)\n    total_shareholder_equity = total_assets - total_liabilities\n    common_equity_value = total_shareholder_equity - preferred_equity\n    bvps = common_equity_value / common_shares\n    normalized_eps = (average_roe / 100) * bvps\n\n    return normalized_eps",
        "ground_truth": 2.871,
        "question": "The small securities company's research department director, Brian, is in charge of a team that includes 2 junior analysts using the relative value approach to determine a company's worth. Brian informed the 2 junior analysts that using the earnings from the latest 4 quarters may not accurately reflect cyclical companies' long-term earning potential. Therefore, they may find significantly different P/E ratios even though the company's business outlook remains the same. Brian suggested using normalized EPS to solve this issue. Having gathered information about the company throughout the most recent complete cycle, the 2 junior analysts found that the company's balance sheet reveals total assets worth 2100 million and total liabilities of 1200 million. The value of the preferred equity is $120 million, and there are 32 million common shares outstanding. Given this information, what is the company's normalized EPS?",
        "output": [
            "```\n```python\n# Define variables\ntotal_assets = 2100000000\ntotal_liabilities = 1200000000\npreferred_equity = 120000000\ncommon_shares_outstanding = 32000000\nEPS_2013 = 120000000\nEPS_2014 = 131030000\nEPS_2015 = 105450000\nEPS_2016 = 112060000\nEPS_2017 = 120560000\n    \n    # Calculate normalized EPS\n    EPS_normalized = (EPS_2013 + EPS_2014 + EPS_2015 + EPS_2016 + EPS_2017) / 5\n    \n    # Calculate common equity\n    common_equity = total_assets - total_liabilities - preferred_equity\n    \n    # Calculate normalized EPS per share\n    normalized_EPS_per_share = EPS_normalized / common_shares_outstanding\n    \n    return normalized_EPS_per_share\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Trade # | Time     | Trade Price | Trade Size | Bid Price | Ask Price |\n|---------|----------|-------------|------------|-----------|-----------|\n| 1       | 9.45 a.m.| $25.20      | 1,200      | $25.17    | $25.20    |\n| 2       | 9.55 a.m.| $25.22      | 1,300      | $25.19    | $25.22    |\n| 3       | 11.30 a.m.| $25.27     | 2,500      | $25.22    | $25.26    |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-176",
        "python_solution": "def solution():\n    # trades prices\n    trade_prices = [25.20, 25.22, 25.27]\n    # bid and ask prices for each trade\n    bid_ask_prices = [(25.20, 25.17), (25.22, 25.19), (25.26, 25.22)]\n    \n    # calculate the effective spread for each trade\n    effective_spreads = [2 * (trade_price - ((ask + bid) / 2)) for trade_price, (ask, bid) in zip(trade_prices, bid_ask_prices)]\n    \n    # calculate the average effective spread\n    average_effective_spread = sum(effective_spreads) / len(effective_spreads)\n    \n    return average_effective_spread",
        "ground_truth": 0.04,
        "question": "Based on Exhibit 1, what is the average effective spread of the three trades when Smith talks about a market buy order for 5,000 shares of a thinly traded stock?",
        "output": [
            "```\nTo calculate the average effective spread for the three trades mentioned in Exhibit 1, we need to sum up the differences between the trade prices and the best bid/ask prices for each trade, divide that sum by the total number of shares traded, and then divide that by 2 to get the average effective spread.\n\nHere's the Python program to calculate the average effective spread:\n\n```python\ndef solution():\n    # Define variables for trade data\n    trade_prices = [-25.20, 25.22, 25.27]\n    bid_prices = [-25.17, 25.19, 25.22]\n    ask_prices = [25.20, 25.22, 25.26]\n    shares_traded = [1200, 1300, 2500]\n\n    # Calculate the total effective spread, and divide it by 2\n    effective_spread = sum([abs(trade_price - bid_price) + abs(trade_price - ask_price) for trade_price, bid_price, ask_price in zip(trade_prices, bid_prices, ask_prices)]) / 2\n\n    # Calculate the average effective spread\n    average_effective_spread = effective_spread / sum(shares_traded)\n\n    # return answer\n    return average_effective_spread\n```\n\nThis program first calculates the effective spread for each trade by finding the absolute differences between the trade price, bid price, and the ask price, and then sums them up. After that, it divides the total effective spread by 2 to get the average effective spread and finally, it divides that by the total number of shares traded to get the final answer. Finally, it returns the average effective spread."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.005
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-177",
        "python_solution": "def solution():\n    mrr_swap = 1.00\n    treasury_yield = 0.63\n    swap_spread = mrr_swap - treasury_yield\n    return swap_spread",
        "ground_truth": 0.37,
        "question": "If a two-year fixed-for-floating MRR swap is at 1.00%, and the yield of the two-year US Treasury bond is 0.63%, what would be the swap spread?",
        "output": [
            "```python\n    swap_rate = 0.01  # in decimal\n    treasury_rate = 0.00633  # in decimal\n    \n    # Swap spread is the difference between swap rate and Treasury rate\n    swap_spread = swap_rate - treasury_rate\n    \n    # return answer\n    return swap_spread\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Current risk-free rate | 3.00% |\n|------------------------|-------|\n| Beta of the T REIT     | 1.1   |\n| Market risk premium    | 5.00% |\n| Expected dividend per share, 1 year from today | $1.13 |\n| Expected dividend per share, 2 years from today| $1.22 |\n| Long-term growth rate in dividends, starting in year 3 | 5.00% |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-178",
        "python_solution": "def solution():\n    discount_rate = 0.085\n    dividend_y1 = 1.13\n    dividend_y2 = 1.22\n    growth_rate = 0.05\n\n    stock_price = (dividend_y1 / (1+discount_rate)) + (dividend_y2 / ((1+discount_rate)**2)) + ((dividend_y2*(1+growth_rate))/(discount_rate-growth_rate))/((1+discount_rate)**2)\n    return stock_price",
        "ground_truth": 33.168,
        "question": "An expert has compiled the major forecasts and assumptions for a J REIT. What is the inherent worth of the J REIT per share utilizing the two-step dividend discount model?",
        "output": [
            "```\nHere is the Python program to answer the given question:\n```python\ndef solution():\n    # Define variables name and value\n    bet_t = 1.1\n    risk_free_rate = 0.03\n    market_risk_premium = 0.05\n    div_per_share_year1 = 1.13\n    div_per_share_year2 = 1.22\n    growth_rate_dividends = 0.05\n    \n    # Calculate the expected return rate\n    expected_return_rate = risk_free_rate + (market_risk_premium * bet_t)\n    \n    # Calculate the dividend in year 3\n    div_per_share_year3 = div_per_share_year2 * (1 + growth_rate_dividends)\n    \n    # Calculate the required return\n    required_return = expected_return_rate + growth_rate_dividends\n    \n    # Calculate the inherent worth\n    inherent_worth = div_per_share_year3 / (required_return - growth_rate_dividends)\n    \n    # Calculate the answer\n    answer = inherent_worth / (1 + required_return)\n    \n    # return answer\n    return answer\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 13.278
        }
    },
    {
        "tables": [
            "| Sentence # | Actual Sentiment | Target p-Value |\n|------------|------------------|----------------|\n| 1          | 1                | 0.75           |\n| 2          | 0                | 0.45           |\n| 3          | 1                | 0.64           |\n| 4          | 1                | 0.81           |\n| 5          | 0                | 0.43           |\n| 6          | 1                | 0.78           |\n| 7          | 0                | 0.59           |\n| 8          | 1                | 0.60           |\n| 9          | 0                | 0.67           |\n| 10         | 0                | 0.54           |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-179",
        "python_solution": "def solution():\n    TP = 3\n    TN = 4\n    FP = 1\n    FN = 2\n    accuracy = (TP + TN)/(TP + FP + TN + FN)\n    return accuracy",
        "ground_truth": 0.7,
        "question": "Azarov has requested Bector to implement the ML model on the test dataset for Dataset XYZ, considering a threshold p-value of 0.65. Exhibit 1 includes a specimen of outcomes from the test dataset corpus. Given the data in Exhibit 1, what is the accuracy computation for the test set sample of Dataset XYZ?",
        "output": [
            "```\n\nYour answer should be: 0.6666666666666666\n```python\ndef solution():\n    # Define variables name and value\n    sentences = {\n        1: 1,\n        2: 0,\n        3: 1,\n        4: 1,\n        5: 0,\n        6: 1,\n        7: 0,\n        8: 1,\n        9: 0,\n        10: 0\n    }\n    target_p_value = 0.65\n    \n    # Get all actual sentiment values\n    actual_sentiment_values = list(sentences.values())\n    \n    # Get all target p-value\n    target_p_values = list(sentences.values())\n    \n    # Count the number of true positives, false positives, false negatives, and true negatives\n    tp = 0\n    fp = 0\n    fn = 0\n    tn = 0\n    for actual, target in zip(actual_sentiment_values, target_p_values):\n        if actual == 1 and target <= target_p_value:\n            tp += 1\n        elif actual == 0 and target <= target_p_value:\n            fn += 1\n        elif actual == 1 and target > target_p_value:\n            fp += 1\n        else:\n            tn += 1\n    \n    # Calculate accuracy\n    accuracy = (tp + tn) / (tp + fp + fn + tn)\n    \n    # Return answer\n    return accuracy\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 0.0
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-180",
        "python_solution": "def solution():\n    dollar_duration = 1*10 + 9*10\n    daily_var = dollar_duration * 0.01 * 1.65\n    return daily_var",
        "ground_truth": 1.65,
        "question": "The collection of investments includes two zero-coupon bonds, each priced at $10. The initial bond possesses a modified duration of a year, while the second bond carries a modified duration of nine years. With an even yield curve and a consistent yield of 5%, all alterations of the yield curve result in equal shifts. Given that the daily instability of the yield equals 1%, can you best estimate the daily value at risk (VAR) for the collection of investments at the 95% certainty level?",
        "output": [
            "```\n```python\ndef solution():\n    # Define variables name and value\n    price_initial_bond_1 = 10  # price of the first bond\n    price_initial_bond_2 = 10  # price of the second bond\n    yield_ = 0.05  # yield\n    yield_variance = 0.01  # daily instability of the yield\n\n    # Calculate variable duration and duration risk\n    duration_bond_1 = 1  # duration of the first bond\n    duration_bond_2 = 9  # duration of the second bond\n    duration_risk = (duration_bond_1 * price_initial_bond_1 + duration_bond_2 * price_initial_bond_2) * yield_variance\n\n    # Calculate bond sensitivity\n    bond_sensitivity = (price_initial_bond_1 * duration_bond_1 + price_initial_bond_2 * duration_bond_2) * yield_variance\n\n    # Calculate daily value at risk (VAR)\n    daily_value_at_risk = bond_sensitivity * 0.05\n\n    # Calculate new price using modified duration and daily value at risk\n    new_price = (price_initial_bond_1 + bond_sensitivity * 0.05) * (1 + yield_)\n\n    # Calculate sales tax\n    total_price_with_tax = (price_initial_bond_1 + bond_sensitivity * 0.05) * (1 + yield_ * 0.05)\n\n    # Calculate profit\n    profit = total_price_with_tax - new_price * duration_risk\n\n    # return answer\n    return profit\n```\n\nNote: This code does not take into account any other factors that could affect the value of the investment, such as changes in interest rates, changes in credit risk, or changes in the market price of the bonds."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -0.477
        }
    },
    {
        "tables": [],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-181",
        "python_solution": "def solution():\n    cash_flows = [-100, 40, 80, 120]\n    rate_of_return = 0.20\n    NPV = 0\n    for t in range(len(cash_flows)):\n        NPV += cash_flows[t] / ((1+rate_of_return) ** t)\n    return NPV",
        "ground_truth": 58.333,
        "question": "For an investment of USD100 that produces after-tax cash flows of USD40 in the first year, USD80 in the second year, and USD120 in the third year, given a required rate of return of 20%, what would be the Net Present Value?",
        "output": [
            "```python\ndef solution():\n    cashflows = [40, 80, 120]  # cashflows for each period\n    rate_of_return = 0.2  # required rate of return\n    \n    # calculate the net present value\n    npv = sum(cashflows) / ((1 + rate_of_return) ** np.arange(1, len(cashflows) + 1).sum())\n    \n    # return answer\n    return npv\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| | |\n|---|---|\n|Face value|£50 million|\n|Coupon rate, paid annually|4%|\n|Time to maturity|10 years (31 December 2033)|\n|Issue price (per £100)|£92.28|"
        ],
        "topic": "Accounting",
        "question_id": "validation-182",
        "python_solution": "def solution():\n    liability_value = 0.9228 * 50\n    market_rate = 0.05\n    interest_expense = liability_value * market_rate\n    return interest_expense",
        "ground_truth": 2.307,
        "question": "If a corporation issues a bond with specific features on January 1, 2014, and the market interest rate for its bonds stands at 5%, what would be its interest cost ( in millions) for the year 2014 under International Financial Reporting Standards (IFRS)?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    face_value = 50000000  # £50 million\n    coupon_rate = 0.04  # 4%\n    time_to_maturity = 10\n    issue_price = 92.28  # £92.28\n    \n    # Calculate the bond's annual interest payment\n    interest_payment = face_value * coupon_rate * issue_price\n    \n    # Calculate the interest cost\n    interest_cost = interest_payment * 0.035  # 5%\n    \n    # return answer\n    return interest_cost\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6459600.0
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-183",
        "python_solution": "def solution():\n    human_capital = 1200000\n    financial_capital = 750000\n    target_equity_allocation = 0.45\n\n    total_economic_wealth = human_capital + financial_capital\n    target_equity_allocation_value = total_economic_wealth * target_equity_allocation\n    human_capital_equity_allocation = human_capital * 0.30\n    financial_capital_equity_allocation = target_equity_allocation_value - human_capital_equity_allocation\n    financial_capital_equity_allocation_percentage = financial_capital_equity_allocation / financial_capital\n    \n    return financial_capital_equity_allocation_percentage * 100",
        "ground_truth": 69.0,
        "question": "At present, James has $750,000 in cash and short-term investment. He then consults with his portfolio manager Simmons regarding his investment holdings. As per the assessment, James' human capital is estimated at $1.2 million, out of which 30% appears to be similar to equity. Simmons concludes that a total target allocation of 45% equity is suitable for James. To reach the desired equity allocation for total economic wealth, what should be the financial capital equity allocation for James?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-184",
        "python_solution": "def solution():\n    D5 = 2.5\n    r = 0.12\n    g = 0.05\n\n    P4 = D5 / (r - g)\n    V0 = P4 / (1 + r)**4\n\n    return V0",
        "ground_truth": 22.697,
        "question": "Because of considerable growth prospects, Firm B has put a halt to its dividends for the earliest four years. The executives assert that during the fifth year, they will distribute a dividend of $2.5 for each share. After that, the dividend is predicted to expand at a 5% annual rate indefinitely. A 12% return rate is needed. What is the intrinsic value of Firm B's stock?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Accounting",
        "question_id": "validation-185",
        "python_solution": "def solution():\n    FV = 5000000 # Face Value of Bond\n    I_M = 0.03 # Market Interest Rate\n    I_B = 0.025 # Bond Yield Rate\n    N = 3 # Period of Bond in Years\n    PMT = FV * I_B # Annual Payments\n    PV = 0 # Present Value of Bond\n    \n    # Compute for Present value\n    for i in range(1, N+1):\n        PV += PMT/(1+I_M)**i # Compute Present Value based on Discount Factor Formula\n    PV += FV/(1+I_M)**N # Add the Face Value discounted back to today at Market Rate\n    \n    return PV",
        "ground_truth": 4929284.716,
        "question": "If ABC Corporation releases three-year bonds dated 1 January 2015 that have a face value of $5,000,000, how are they most likely reported as bonds payable when issued, considering the market interest rate for bonds of similar risk and term is 3% and the bonds yield an annual rate of 2.5% on 31 December?",
        "output": [
            "```\nMarket_interest_rate = 0.03  # Market interest rate\nbonds_yearly_yield = 0.025  # Bonds yield\nface_value = 5000000  # Face value\n    \n    # Calculate the present value of the annual payments\n    present_value = face_value * (((1 + bonds_yearly_yield) ** -1) * (1 + market_interest_rate) ** -3) / ((1 + market_interest_rate) ** -3 - 1)\n    \n    # Get the bond payable amount\n    bond_payable = face_value + present_value\n```\nThe answer is $5,000,000 + $200,000 = $5,200,000.\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-186",
        "python_solution": "def solution():\n    delta = 0.5\n    z_score = 1.645\n    volatility = 0.015\n    share_price = 26.0\n\n    Var = abs(delta) * z_score * volatility * share_price\n    return Var",
        "ground_truth": 0.321,
        "question": "A financial expert is requested to calculate the VaR for a stake in Mega Healthcare Solutions Ltd. The firm's shares go for USD 26.00, with a daily volatility standing at 1.5%. Utilizing the delta-normal approach, what is the VaR at the 95% confidence level for a long position in an at-the-money put on this share with a delta of -0.5 spanning a 1-day holding period?",
        "output": [
            "```python\ndef solution():\n    stock_price = 26.00\n    volatility = 0.015\n    delta = -0.5\n    confidence_level = 0.95\n    holding_period = 1\n    \n    # Calculate the z-score for the given confidence\n    z_score = norm.ppf(1 - confidence_level / 2)\n    \n    # Calculate the standard deviation of the returns\n    std_dev = volatility * sqrt(holding_period)\n    \n    # Calculate the value at risk (VaR) using the formula for the delta-normal approach\n    var = z_score * (stock_price * delta * std_dev)\n    \n    # Return the VaR\n    return var\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "| Year | Return(%) |\n|------|----------|\n| 2009 | 20       |\n| 2010 | -30      |\n| 2011 | 15       |"
        ],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-187",
        "python_solution": "def solution():\n    return ((1 + 0.2) * (1 - 0.3) * (1 + 0.15))**(1/3) - 1",
        "ground_truth": -0.011,
        "question": "What is the yearly geometric mean return of this investment over a three-year period?",
        "output": [
            "```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-188",
        "python_solution": "def solution():\n    Rf = 8\n    Beta = 0.6\n    Market_return = 15\n    expected_return = Rf + Beta * (Market_return - Rf)\n    return expected_return",
        "ground_truth": 12.2,
        "question": "Can you determine the expected return on a stock using the Capital Asset Pricing Model, with a beta value of 0.6, given a risk-free rate of 8%, and a market return of 15%?",
        "output": [
            "```\n```python\ndef solution():\n    \n    # Define variables name and value\n    beta = 0.6\n    risk_free_rate = 0.08\n    market_return = 0.15\n    \n    # Do math calculation to get the answer\n    expected_return = risk_free_rate + beta * (market_return - risk_free_rate)\n    \n    # return answer\n    return expected_return\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.122
        }
    },
    {
        "tables": [],
        "topic": "Market Analysis & Economics",
        "question_id": "validation-189",
        "python_solution": "def solution():\n    neutral_real_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    predicted_growth = 3.5\n    anticipated_inflation = 3\n\n    nominal_policy_rate = neutral_real_policy_rate + anticipated_inflation + 0.5 * (predicted_growth - projected_growth) + 0.5 * (anticipated_inflation - desired_inflation_rate)\n\n    return nominal_policy_rate",
        "ground_truth": 6.25,
        "question": "Assuming the neutral real policy rate is set at 2.25%, the desired inflation rate is 2%, and projected growth is approximately 2.5%. If growth is predicted to be 3.5% and inflation is anticipated to reach 3%, what would be the nominal policy rate based on the Taylor rule?",
        "output": [
            "```\ndef solution():\n    # Define variables name and value\n    neutral_policy_rate = 2.25\n    desired_inflation_rate = 2\n    projected_growth = 2.5\n    nominal_policy_rate = 3.5\n    inflation_rate = 3\n    \n    # Define Taylor rule formula\n    nominal_policy_rate = neutral_policy_rate + 0.5 * (1 - 0.5) * (inflation_rate - desired_inflation_rate) + (1 - 0.5) * (projected_growth - nominal_policy_rate)\n    \n    # return answer\n    return nominal_policy_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2.0
        }
    },
    {
        "tables": [
            "| Expected inflation | 1.9% |\n|---|---|\n| Expected growth in the P/E | -1.2% |\n| Expected income component | 1.8% |\n| Expected growth in real earnings per share | 2.7% |\n| Expected change in shares outstanding | 0.0% |\n| Current three-month government bond yield | 0.96% |\n| Long-term geometric average return of market equity index | 9.96% |\n| Long-term geometric average return of short-term government bond | 3.15% |"
        ],
        "topic": "Corporate & Securities Issuance",
        "question_id": "validation-190",
        "python_solution": "def solution():\n    ERP = (1.8 - 1.2 + (1.9 + 2.7 + 0.0)) - 0.96\n    ERP_percentage = ERP * 100\n    return ERP_percentage",
        "ground_truth": 424.0,
        "question": "What is the forecaster's projected forward-looking ERP for a market using the Grinold-Kroner model based on the same details?",
        "output": [
            "```\nIt is not possible to calculate the forecaster's projected forward-looking ERP (Earnings per Share) based solely on the details provided in the table. In order to calculate the ERP, we also need the current share price (P) of the market equity index. \n\nHowever, we can provide you with a formula to calculate the ERP using the information provided in the Grinold-Kroner model. The formula is as follows:\n\nERP = { E1 / (1 + r1) } + { E2 / (1 + r2) }\n\nWhere:\n- E1 = Current earnings per share on market equity index\n- r1 = Expected income component for market equity index\n- E2 = Expected growth in real earnings per share\n\nAnd the formula for Expected income component (r1) is:\nr1 = Expected growth in the P/E - Expected change in shares outstanding - Expected inflation\n\nSubstituting the values from the table, we have:\nr1 = 1.8% - 0.0% - 1.9% = -1.7%\n\nTherefore the formula for ERP becomes:\nERP = { E1 / (1 + (-1.7%)) } + { E2 / (1 + (-1.2%)) }\n\nWithout the value of E1, it is not possible to calculate the exact ERP."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|        |             | Actual Training   |           |\n|--------|-------------|:-----------------:|----------:|\n|        |             | Results           |           |\n|        |             | Class \"1\"         | Class \"0\" |\n| Predicted Results | Class \"1\" | TP=182           | FP=52     |\n|                    | Class \"0\" | FN=31            | TN=96     |"
        ],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-191",
        "python_solution": "def solution():\n    TP = 182\n    TN = 96\n    FP = 52\n    FN = 31\n\n    Accuracy = (TP + TN) / (TP + FP + TN + FN)\n    return Accuracy * 100",
        "ground_truth": 77.008,
        "question": "Once happy with the ultimate set of attributes, Williams chooses and operates a model on the training set that categorizes the text as either having positive sentiment (Class “1” or negative sentiment (Class “0”). He then appraises its performance by implementing error analysis. Based on Exhibit 1, what is the accuracy metric of the model in the ensuing confusion matrix?",
        "output": [
            "```python\ndef solution():\n    # Given values\n    TP = 182\n    FP = 52\n    FN = 31\n    TN = 96\n    \n    # Calculate accuracy metric\n    accuracy = (TP + TN) / (TP + FP + FN + TN)\n    \n    # Return answer\n    return accuracy\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 0.77
        }
    },
    {
        "tables": [],
        "topic": "Quantitative Analysis & Valuation",
        "question_id": "validation-192",
        "python_solution": "def solution():\n    import math\n    return math.factorial(15)/(math.factorial(15-3))",
        "ground_truth": 2730.0,
        "question": "In a sports competition involving 15 participants, prizes of $100, $50, and $10 will be given to the top performers. In how many different ways can this be done?",
        "output": [
            "```\n```python\nimport math\n    \n    # solve the problem using combinatorics\n    # we have 15 participants and we need to assign prizes in a specific order\n    # the order of the prizes is important (1st prize, 2nd prize, 3rd prize)\n    # we can use the permutation formula: n! / [(n - r)! * r!]\n    # where n is the total number of participants (15) and r is the number of prizes (3)\n    answer = math.factorial(15) / (math.factorial(15 - 3) * math.factorial(3))\n    \n    # return answer\n    return answer\n```\n\nThe function factorial() returns the factorial of a given number. It represents the product of an integer and all the integers below it. For example, math.factorial(5) returns 120 (i.e., 5 * 4 * 3 * 2 * 1). The program uses this function to calculate the number of different ways the prizes can be given, considering the order of the prizes matters."
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Risk Management",
        "question_id": "validation-193",
        "python_solution": "def solution():\n    Delta = 100000\n    Gamma = -50000\n    VAR_ds = 2\n\n    VAR_df = Delta * -VAR_ds + (1 / 2) * Gamma * VAR_ds ** 2\n    return VAR_df",
        "ground_truth": -300000.0,
        "question": "Assuming that a broker holds an option stance in crude oil exhibiting a delta of 100000 barrels and a gamma of -50000 barrels per dollar price shift, compute the VaR for this stance utilizing the delta-gamma approach, under the presumption that the maximum crude oil price shift is $2.00 per barrel.",
        "output": [
            "```python\ndef solution():\n    max_price_shift = 2.00  # maximum crude oil price shift in dollars per barrel\n    delta = 100000  # delta in barrels\n    gamma = -50000  # gamma in barrels per dollar price shift\n    \n    # Calculate the VaR for this stance using the delta-gamma approach\n    var = delta * max_price_shift + 0.5 * gamma * (max_price_shift ** 2)\n    \n    # return answer\n    return var\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 100000.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-194",
        "python_solution": "def solution():\n    initial_stock_price = 25\n    initial_equity = initial_stock_price * 0.5\n    preservation_margin = 0.30\n    P = initial_equity / (1 - preservation_margin)\n    return P",
        "ground_truth": 17.857,
        "question": "If a stock's present cost is $25 each, you plan to invest your $10,000 and also loan an additional $10,000 from your financial adviser to put $20,000 in the shares. If the preservation margin is 30 percent, what would be the initial price that will trigger a margin call?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    cost_per_share = 25\n    investment = 10000\n    loan = 10000\n    preservation_margin = 0.3\n    \n    # Calculate total investment\n    total_investment = investment + loan\n    \n    # Calculate the number of shares bought\n    shares_bought = total_investment / cost_per_share\n    \n    # Calculate the initial price that triggers a margin call\n    initial_price = cost_per_share * (1 + preservation_margin * shares_bought)\n    \n    # return answer\n    return initial_price\n```\n"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 6025.0
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-195",
        "python_solution": "def solution():\n    prior_year_end_AUM = 288\n    fund_return = 0.25\n    management_fee_percentage = 2/100\n    \n    end_of_year_AUM = prior_year_end_AUM * (1 + fund_return)\n    management_fee = end_of_year_AUM * management_fee_percentage\n    \n    return management_fee",
        "ground_truth": 7.2,
        "question": "What is the overall fee that Circle has garnered in the current year, considering $288 million in assets under management (AUM) from the end of the previous year, a 2% management fee (based on year-end AUM), a 20% incentive fee calculated after subtracting the management fee using a 5% soft hurdle rate and a high-water mark of $357 million, and the fund yield for the current year being 25%?",
        "output": [
            "Here's a Python program to calculate the total fees that Circle has garnered in the current year, based on the given information:\n```python\ndef solution():\n    # Define variables name and value\n    aum_previous_year = 288  # million dollars\n    management_fee_percentage = 0.02\n    incentive_fee_percentage = 0.2\n    soft_hurdle_rate = 0.05\n    high_water_mark = 357  # million dollars\n    fund_yield = 0.25\n    \n    # Convert all values to the same unit (million dollars)\n    aum_previous_year = aum_previous_year / 1_000_000\n    high_water_mark = high_water_mark / 1_000_000\n    \n    # Calculate the management fee\n    management_fee = aum_previous_year * management_fee_percentage\n    \n    # Calculate the performance fee denominator\n    performance_fee_denominator = aum_previous_year - management_fee / 1_000_000\n    \n    # Apply the soft hurdle rate\n    soft_hurdle_rate = min(performance_fee_denominator * soft_hurdle_rate, high_water_mark)\n    \n    # Calculate the performance fee numerator\n    performance_fee_numerator = aum_previous_year * fund_yield\n    \n    # Calculate the incentive fee\n    incentive_fee = min(performance_fee_numerator - soft_hurdle_rate * 1_000_000, performance_fee_numerator * incentive_fee_percentage)\n    \n    # Calculate the total fee\n    total_fee = management_fee + incentive_fee\n    \n    # return answer\n    return round(total_fee, 2)\n```\nTo answer the question, you can call the solution function and print the result:\n```python\ndef solution():\n    desired_fee_per_share = 50  # dollars\n    desired_total_fee = 34_000  # million dollars  # desired\n\n    solution = calculate_total_fee(desired_fee_per_share, desired_total_fee)\n    return solution\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": -14.4
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-196",
        "python_solution": "def solution():\n    import math\n    weight_X = 0.25\n    weight_Y = 0.75\n    standard_deviation_X = 0.179\n    standard_deviation_Y = 0.062\n    correlation_XY = 0.5\n\n    portfolio_variance = (weight_X**2 * standard_deviation_X**2) + (weight_Y**2 * standard_deviation_Y**2) + (2 * weight_X * weight_Y * correlation_XY * standard_deviation_X * standard_deviation_Y)\n    portfolio_standard_deviation = math.sqrt(portfolio_variance)\n\n    return portfolio_standard_deviation*100",
        "ground_truth": 7.903,
        "question": "Imagine a portfolio that contains two components. The first component, Component X, makes up 25% of the portfolio and possesses a standard deviation of 17.9%. The second component, Component Y, makes up the rest of the portfolio at 75% and has a standard deviation of 6.2%. If the correlation between these two components is 0.5, what would the portfolio's standard deviation be?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    pct_X = 0.25\n    pct_Y = 0.75\n    std_dev_X = 0.179\n    std_dev_Y = 0.062\n    correlation_XY = 0.5\n    \n    # Do math calculation to get the answer\n    std_dev_portfolio = math.sqrt(pct_X**2 * (std_dev_X**2 * pct_X + std_dev_Y**2 * pct_Y)**2 + 2 * correlation_XY * pct_X * pct_Y * std_dev_X * std_dev_Y)\n    \n    # return answer\n    return std_dev_portfolio\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-197",
        "python_solution": "def solution():\n    initial_aum = 160\n    growth_rate = 0.25\n    management_fee_rate = 0.02\n    soft_hurdle_rate = 0.10\n    high_water_mark = 198\n    \n    end_year_aum = initial_aum * (1 + growth_rate)\n    \n    management_fee = end_year_aum * management_fee_rate\n    \n    net_year_end = end_year_aum - management_fee\n    \n    if net_year_end < high_water_mark:\n        total_fees = management_fee\n\n    return total_fees",
        "ground_truth": 4.0,
        "question": "If an investment company starts the year with a value of $160 million and follows a \"2 and 20\" fee scheme, the management fee depends on the end-of-year asset value. With a soft hurdle rate of 10% net of management fee for calculating the incentive fee, and a prior high-water mark of $198 million, how much is the total fees collected if the assets increase by 25% in the coming year?",
        "output": [
            "``` python\nmanagement_fee_rate = 0.2\nhurdle_rate = 0.10\nhigh_water_mark = 198000000\nincrease_percentage = 0.25\nyearly_return_percentage = 0.25\n    \n    # Calculate the ending value of the assets \n    ending_value = 160000000 * (1 + yearly_return_percentage)\n    \n    # Calculate the management fee \n    management_fee = management_fee_rate * ending_value\n    \n    # Calculate the management fee net of hurdle rate \n    management_fee_net = management_fee * (1 - hurdle_rate)\n    \n    # Calculate the incentive fee \n    if ending_value > high_water_mark:\n        incentive_fee = (ending_value - high_water_mark) * 0.02\n    else:\n        incentive_fee = 0\n    \n    # Calculate the total fees collected \n    total_fees = management_fee_net + incentive_fee\n    \n    # Return total fees collected\n    return total_fees\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 0,
            "prediction_executed_result": null
        }
    },
    {
        "tables": [
            "|     | Year 1 | Year 2 | Year 3 | Year 4 | Year 5 | Year 6 |\n| --- | ---    | ---    | ---    | ---    | ---    | ---    |\n| NOI  | $2,775,840 | $2,859,119 | $2,944,889 | $3,033,235 | $3,124,232 | $3,217,959 |\n| DCF Assumptions |    |   |   |   |    |    |\n| Investment Hold Period |    |   | 5 years |   |    |    |\n| Going-in Cap Rate |     |   |  5.25% |   |    |    |\n| Terminal Cap Rate |    |   |  6.00% |   |    |    |\n| Discount Rate |     |   |  7.25% |   |    |    |\n| Income/Value Growth |    |   |  Constant |   |    |    |\n| Rate |     |   |   |   |    |    |"
        ],
        "topic": "Asset Classes & Derivatives",
        "question_id": "validation-198",
        "python_solution": "def solution():\n    discount_rate = 7.25\n    going_in_cap_rate = 5.25\n    growth_rate = discount_rate - going_in_cap_rate\n    return growth_rate",
        "ground_truth": 2.0,
        "question": "What is the growth rate of Real Estate #1, according to Exhibit 1?",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    initial_NOI = 27784.4\n    NOI_1 = 28590.6\n    NOI_2 = 29447.1\n    NOI_3 = 30322.3\n    NOI_4 = 31242.3\n    NOI_5 = 32174.9\n    NOI_6 = 32198.6\n\n    # Calculate the growth rate\n    growth_rate = ((NOI_1 - initial_NOI) / initial_NOI) * 100\n\n    # return answer\n    return growth_rate\n```"
        ],
        "result": {
            "acc": 0,
            "execution_rate": 1,
            "prediction_executed_result": 2.902
        }
    },
    {
        "tables": [],
        "topic": "Portfolio Management & Strategy",
        "question_id": "validation-199",
        "python_solution": "def solution():\n    weight_X = 0.30\n    standard_deviation_X = 0.25\n    weight_Y = 0.70\n    standard_deviation_Y = 0.10\n    correlation_coefficient = 0.8\n\n    variance = weight_X**2 * standard_deviation_X**2 + weight_Y**2 * standard_deviation_Y**2 + 2 * weight_X * weight_Y * standard_deviation_X * standard_deviation_Y * correlation_coefficient\n\n    return variance**0.5",
        "ground_truth": 0.138,
        "question": "Compute the standard deviation of the investment portfolio using the following figures: the percentage weight of asset X is 30%, the weight of asset Y is 70%, the standard deviation for asset X is 25%, that for asset Y is 10%, and their correlation coefficient is 0.8.",
        "output": [
            "```python\ndef solution():\n    # Define variables name and value\n    weight_x = 30\n    weight_y = 70\n    std_dev_x = 0.25\n    std_dev_y = 0.1\n    corr_coeff = 0.8\n    \n    # Use the formula for portfolio standard deviation\n    std_dev_portfolio = ((weight_x**2 * std_dev_x**2) + (weight_y**2 * std_dev_y**2) + (2 * weight_x * weight_y * corr_coeff * std_dev_x * std_dev_y))**0.5\n    \n    # return answer\n    return std_dev_portfolio\n```"
        ],
        "result": {
            "acc": 1,
            "execution_rate": 1,
            "prediction_executed_result": 13.757
        }
    }
]